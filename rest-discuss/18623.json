{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":124198377,"authorName":"William Martinez Pomares","from":"&quot;William Martinez Pomares&quot; &lt;wmartinez@...&gt;","profile":"willmarpo","replyTo":"SENDER","senderId":"2oJw8IOCC9aZu-u9gz5kOuinp0uHmtEhjYwmNKKA5VnvfqPhG-kYvY5XjXrQN9iXljH8cCemPoS8e2mEg5uOLw8vSzfnJ9UQaCS5g-QJ3NH83byADxAagqEi","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: Does the client contribute to the RESTfulness of an application?","postDate":"1331238538","msgId":18623,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGpqYjRxYStqODRtQGVHcm91cHMuY29tPg==","inReplyToHeader":"PENBUFdfOG00T2lfVWRiVmVUMll5UW5CMzFNRm51UTJrV0M4UDBDSkp0LU9nMzM0di0tZ0BtYWlsLmdtYWlsLmNvbT4="},"prevInTopic":18622,"nextInTopic":18624,"prevInTime":18622,"nextInTime":18624,"topicId":18602,"numMessagesInTopic":50,"msgSnippet":"Hey, Mike. You just multiplied the exponent of the complexity by 2. A system is a set of components. An architectural style defines the structure, roles and","rawEmail":"Return-Path: &lt;wmartinez@...&gt;\r\nX-Sender: wmartinez@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 29532 invoked from network); 8 Mar 2012 20:29:01 -0000\r\nX-Received: from unknown (98.137.35.162)\n  by m8.grp.sp2.yahoo.com with QMQP; 8 Mar 2012 20:29:01 -0000\r\nX-Received: from unknown (HELO ng9-ip1.bullet.mail.ne1.yahoo.com) (98.138.215.180)\n  by mta6.grp.sp2.yahoo.com with SMTP; 8 Mar 2012 20:29:00 -0000\r\nX-Received: from [98.138.217.179] by ng9.bullet.mail.ne1.yahoo.com with NNFMP; 08 Mar 2012 20:29:00 -0000\r\nX-Received: from [69.147.65.150] by tg4.bullet.mail.ne1.yahoo.com with NNFMP; 08 Mar 2012 20:28:59 -0000\r\nX-Received: from [98.137.34.155] by t7.bullet.mail.sp1.yahoo.com with NNFMP; 08 Mar 2012 20:28:59 -0000\r\nDate: Thu, 08 Mar 2012 20:28:58 -0000\r\nTo: rest-discuss@yahoogroups.com\r\nMessage-ID: &lt;jjb4qa+j84m@...&gt;\r\nIn-Reply-To: &lt;CAPW_8m4Oi_UdbVeT2YyQnB31MFnuQ2kWC8P0CJJt-Og334v--g@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;ISO-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-Yahoo-Newman-Property: groups-compose\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;William Martinez Pomares&quot; &lt;wmartinez@...&gt;\r\nSubject: Re: Does the client contribute to the RESTfulness of an application?\r\nX-Yahoo-Group-Post: member; u=124198377; y=At0KfGSgKNtxsB1aG4h5-MhHzmqGYmKEt2aUTH656vgLYGIw\r\nX-Yahoo-Profile: willmarpo\r\n\r\nHey, Mike.\nYou just multiplied the exponent of the complexity by 2.\n\nA syst=\r\nem is a set of components. An architectural style defines the structure, ro=\r\nles and rules that will govern those components. They are very clear in RES=\r\nT.\n\nActually, I feel REST does not constrain the roles of the components in=\r\n a system, it simply defines the roles it requires and how will they intera=\r\nct. There may be other components not following the roles or rules that may=\r\n work in the system too. Problem is we need the interaction rules between n=\r\non-REST component and the true REST ones. Allowing alien components in the =\r\nsystem is the architect&#39;s responsibility and should be done with complete r=\r\nationale and knowledge of the impact in the quality properties we need to a=\r\nchieve. A golden rule in architecture is you can break the rules if it is n=\r\needed to obtain the business value. \nThat means, we can accept non-REST ser=\r\nvers in our system if we provide a way to communicate them with our REST-co=\r\nmplaint ones without affecting that much what we are looking for. That may =\r\nnot make the REST-like architecture less RESTfull, in my opinion.\n\nWilliam.=\r\n \n\n--- In rest-discuss@yahoogroups.com, mike amundsen &lt;mamund@...&gt; wrote:\n&gt;=\r\n\n&gt; &lt;snip&gt;\n&gt; My point in all of this was to reach a better understanding of =\r\nwhere the\n&gt; RESTFulness of a system is defined / exhibited and what defines=\r\n the\n&gt; boundaries of the system.\n&gt; &lt;/snip&gt;\n&gt; \n&gt; I think it&#39;s important to c=\r\nonsider whether &quot;a system&quot; has more than one\n&gt; &quot;server&quot; in it and whether t=\r\nhat &quot;system&quot; could be judged as a &quot;REST system&quot;\n&gt; only if all the machines =\r\nacting in a &quot;server role&quot; sufficiently exhibited\n&gt; the &quot;REST style.&quot; This i=\r\ns particularly challenging when you consider that\n&gt; any machine in &quot;the sys=\r\ntem&quot; can adopt the &quot;client&quot; or &quot;server&quot; role at any\n&gt; time.\n&gt; \n&gt; mca\n&gt; http=\r\n://amundsen.com/blog/\n&gt; http://twitter.com@mamund\n&gt; http://mamund.com/foaf.=\r\nrdf#me\n&gt; \n&gt; \n&gt; \n&gt; \n&gt; \n&gt; On Thu, Mar 8, 2012 at 14:38, Glenn Block &lt;glenn.bl=\r\nock@...&gt; wrote:\n&gt; \n&gt; &gt;\n&gt; &gt;\n&gt; &gt; Thanks William\n&gt; &gt;\n&gt; &gt; I agree with everythi=\r\nng you said. The true benefits of REST are only\n&gt; &gt; realized if both client=\r\n and server understand the constraints. However the\n&gt; &gt; fact some clients m=\r\nay not adhere to those constraints is orthagonal to the\n&gt; &gt; server. However=\r\n system is at many levels. Each combination of client and\n&gt; &gt; server is a s=\r\nystem itself.\n&gt; &gt;\n&gt; &gt; The one thing that is very clear is that the server i=\r\ns the gate. If the\n&gt; &gt; server doesn&#39;t adhere to the constraints then all th=\r\ne &quot;macro&quot; level systems\n&gt; &gt; are not RESTful.\n&gt; &gt;\n&gt; &gt; My point in all of thi=\r\ns was to reach a better understanding of where the\n&gt; &gt; RESTFulness of a sys=\r\ntem is defined / exhibited and what defines the\n&gt; &gt; boundaries of the syste=\r\nm.\n&gt; &gt;\n&gt; &gt;\n&gt; &gt; Sent from my Windows Phone\n&gt; &gt; -----------------------------=\r\n-\n&gt; &gt; From: William Martinez Pomares\n&gt; &gt; Sent: 3/8/2012 11:15 AM\n&gt; &gt; To: re=\r\nst-discuss@yahoogroups.com\n&gt; &gt; Subject: [rest-discuss] Re: Does the client =\r\ncontribute to the RESTfulness\n&gt; &gt; of an application?\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt; Will, =\r\nI completely agree with your thoughts about the client and the\n&gt; &gt; validati=\r\non of the REST design, at least of what I understand. My point a\n&gt; &gt; subtle=\r\nty different. Anyway, I understand REST was designed to meet some\n&gt; &gt; quali=\r\nty properties that were needed, and the benefits of the client are\n&gt; &gt; just=\r\n collateral damage due to its role of service consumer and display\n&gt; &gt; agen=\r\nt (yes, it says so in the dissertation).\n&gt; &gt;\n&gt; &gt; An architectural style is =\r\nnot a complete definition of the architecture,\n&gt; &gt; but just the ideas to ac=\r\nhieve quality attributes.\n&gt; &gt;\n&gt; &gt; I often say to my students that a system =\r\ncan implement perfectly all the\n&gt; &gt; functional requirements, and meet all t=\r\nhe quality property standards\n&gt; &gt; required, but if it does not deliver busi=\r\nness value, it is a failure.\n&gt; &gt;\n&gt; &gt; In the same sense, just one level down=\r\n: The good REST design badge is\n&gt; &gt; achieved by implementing the REST const=\r\nrains in your part of the system.\n&gt; &gt; But that badge will not assure the RE=\r\nST qualities are achieved in the whole\n&gt; &gt; system, or even in the system of=\r\n systems above.\n&gt; &gt; Even more: having a completely perfect REST design and =\r\nexecution at all\n&gt; &gt; components, doesn&#39;t mean the app will give the busines=\r\ns value and as such\n&gt; &gt; be a success. It may also fail.\n&gt; &gt;\n&gt; &gt; So, to answ=\r\ner the original question, and a couple more I answered without\n&gt; &gt; being qu=\r\nestioned:\n&gt; &gt; 1. Does the client contribute to the RESTfulness of an applic=\r\nation? Yes if\n&gt; &gt; the client is part of the application. It will not invali=\r\ndate the\n&gt; &gt; RESTFulness of the server, but it may do so for the whole syst=\r\nem.\n&gt; &gt;\n&gt; &gt; 2. Does designing an app server side to be compliant with REST =\r\nrules\n&gt; &gt; delivers the goals of REST. Not necessarily, we need a compliant =\r\nclient and\n&gt; &gt; complaint interim layers (yup, REST is a layered architectur=\r\ne).\n&gt; &gt;\n&gt; &gt; 3. Does having a fully compliant REST architecture implemented =\r\nis enough\n&gt; &gt; to be a success. No, it isn&#39;t.\n&gt; &gt;\n&gt; &gt; Those were the points =\r\nI wanted to share.\n&gt; &gt;\n&gt; &gt; Cheers\n&gt; &gt;\n&gt; &gt; William Martinez.\n&gt; &gt;\n&gt; &gt; --- In =\r\nrest-discuss@yahoogroups.com, Will Hartung &lt;willh@&gt; wrote:\n&gt; &gt; &gt;\n&gt; &gt; &gt; As M=\r\nike says, and part of generic matra REST for me is that a bad client\n&gt; &gt; &gt; =\r\ndoes not invalidate a good REST design. By the nature of REST, many of\n&gt; &gt; =\r\nthe\n&gt; &gt; &gt; aspects of the architecture are in fact designed to benefit the c=\r\nlient.\n&gt; &gt; And\n&gt; &gt; &gt; other aspects simply cannot be counted on by the serve=\r\nr in the wild\n&gt; &gt; anyway.\n&gt; &gt; &gt;\n&gt; &gt; &gt; The HATEOS is a client advantage. If =\r\na client cares about the robustness\n&gt; &gt; of\n&gt; &gt; &gt; their implementation, they=\r\n will leverage HATEOS in order to help keep\n&gt; &gt; their\n&gt; &gt; &gt; systems running=\r\n without interruption. Many applications that offer\n&gt; &gt; HATEOS,\n&gt; &gt; &gt; don&#39;t=\r\n per se take advantage of it right off as it&#39;s mostly a future\n&gt; &gt; &gt; proofi=\r\nng mechanism. You have simple apps on a single machine with a few,\n&gt; &gt; &gt; so=\r\nlid services that will &quot;never change&quot; vs an app that is an aggressive\n&gt; &gt; &gt;=\r\n user of HATEOS, and pretty much forces a client to leverage as well (i.e.\n=\r\n&gt; &gt; &gt; no URL will ever be the same kind of thing). Those are opposite extre=\r\nmes.\n&gt; &gt; &gt; Most fall in the former sense, they&#39;re just easier to design and=\r\n manage\n&gt; &gt; &gt; unless you have a very compelling reason to do otherwise.\n&gt; &gt;=\r\n &gt;\n&gt; &gt; &gt; So, you can see how a &quot;dumb&quot; client can easily get by with the fir=\r\nst type\n&gt; &gt; &gt; of application, but fail miserably with the latter.\n&gt; &gt; &gt;\n&gt; &gt;=\r\n &gt; Caches are another important aspect of the architecture that the system\n=\r\n&gt; &gt; may\n&gt; &gt; &gt; or may not be able to leverage. If your system implements the=\r\nir own\n&gt; &gt; caches,\n&gt; &gt; &gt; then you can expect to see a benefit and plan arou=\r\nnd it. At this point a\n&gt; &gt; &gt; bad client (i.e. one the completely ignores th=\r\ne caching constraints) can\n&gt; &gt; &gt; put an excessive load on your core system.=\r\n They&#39;re still a REST client,\n&gt; &gt; in\n&gt; &gt; &gt; fact they can be an external cac=\r\nhe themselves (perhaps a badly configured\n&gt; &gt; &gt; one).\n&gt; &gt; &gt;\n&gt; &gt; &gt; Now, if y=\r\nou&#39;re not providing you own caching layer, and effectively\n&gt; &gt; hoping\n&gt; &gt; &gt;=\r\n to leverage external caches, then you have no room to complain when you\n&gt; =\r\n&gt; get\n&gt; &gt; &gt; several clients that perhaps ignore the caching aspect. When yo=\r\nu&#39;re\n&gt; &gt; relying\n&gt; &gt; &gt; on external systems that you have no control over, y=\r\nou&#39;re on the\n&gt; &gt; borderline\n&gt; &gt; &gt; of &quot;serendipitous reuse&quot;. The bright side=\r\n of SU is the new value it can\n&gt; &gt; &gt; provide, the down side is the &quot;serendi=\r\npitous&quot; part.\n&gt; &gt; &gt;\n&gt; &gt; &gt; And finally, you can address the serendipitous re=\r\nuse aspect. That too,\n&gt; &gt; is a\n&gt; &gt; &gt; benefit of the client. It lets someone=\r\n use the data in ways not\n&gt; &gt; envisioned\n&gt; &gt; &gt; by the application designers=\r\n. Thus providing added value to the client\n&gt; &gt; &gt; Whether it&#39;s added value t=\r\no the application is a different issue (maybe\n&gt; &gt; you\n&gt; &gt; &gt; didn&#39;t want or =\r\nplan for all of this new traffic, then again maybe you&#39;re\n&gt; &gt; &gt; excited to =\r\nbe offering new value that you didn&#39;t have to code and\n&gt; &gt; design).\n&gt; &gt; &gt;\n&gt;=\r\n &gt; &gt; So, yes, it takes good corporation between the clients and the servers=\r\n to\n&gt; &gt; &gt; get the highest level of benefits from the architecture, but the =\r\nsimple\n&gt; &gt; &gt; truth is much of the design is really there for the clients in=\r\n the first\n&gt; &gt; &gt; place and they&#39;re only hurting themselves in the long run =\r\nby not playing\n&gt; &gt; &gt; along.\n&gt; &gt; &gt;\n&gt; &gt; &gt; Regards,\n&gt; &gt; &gt;\n&gt; &gt; &gt; Will Hartung\n&gt;=\r\n &gt; &gt; (willh@)\n&gt; &gt; &gt;\n&gt; &gt; &gt; --\n&gt; &gt; &gt; CONFIDENTIALITY NOTICE: The information =\r\ncontained in this electronic\n&gt; &gt; &gt; transmission may be confidential. If you=\r\n are not an intended recipient,\n&gt; &gt; be\n&gt; &gt; &gt; aware that any disclosure, cop=\r\nying, distribution or use of the\n&gt; &gt; information\n&gt; &gt; &gt; contained in this tr=\r\nansmission is prohibited and may be unlawful. If you\n&gt; &gt; &gt; have received th=\r\nis transmission in error, please notify us by email\n&gt; &gt; reply\n&gt; &gt; &gt; and the=\r\nn erase it from your computer system.\n&gt; &gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt; \n&gt; &gt;\n&gt;\n\n\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":119562537,"authorName":"Josh Sled","from":"Josh Sled &lt;jsled-yahoogroup@...&gt;","profile":"joshsled","replyTo":"SENDER","senderId":"1dSWw2bwbb_n12C9XlvgZcqWvIYNIryr4Fr_0UAZqad2MVLiOpG0uBZ-z5YLM7cd_QKgmsEO7KqDruuT9WjTIYriR8IUID5K68y7i4fnrRIcUZI4","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] REST toolkits","postDate":"1076080546","msgId":4114,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMDQwMjA2MTUxNTQ2LkdBMjI4OTlAcGhvZW5peC5zb3Zlci5uZXQ+","inReplyToHeader":"PGJ2dGludCs2bzIwQGVHcm91cHMuY29tPg==","referencesHeader":"PGJ2dGludCs2bzIwQGVHcm91cHMuY29tPg=="},"prevInTopic":4113,"nextInTopic":4127,"prevInTime":4113,"nextInTime":4115,"topicId":1078,"numMessagesInTopic":37,"msgSnippet":"... True, though the clients can be fixed.  And programmatic clients [httpclient, &c.] support the full HTTP method range. One problem is that it s hard to","rawEmail":"Return-Path: &lt;jsled@...&gt;\r\nX-Sender: jsled@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 18959 invoked from network); 6 Feb 2004 15:15:55 -0000\r\nReceived: from unknown (66.218.66.166)\n  by m18.grp.scd.yahoo.com with QMQP; 6 Feb 2004 15:15:55 -0000\r\nReceived: from unknown (HELO phoenix.asynchronous.org) (216.114.142.253)\n  by mta5.grp.scd.yahoo.com with SMTP; 6 Feb 2004 15:15:55 -0000\r\nReceived: (qmail 23145 invoked by uid 1000); 6 Feb 2004 15:15:46 -0000\r\nDate: Fri, 6 Feb 2004 10:15:46 -0500\r\nTo: Tony Butterfield &lt;tab@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nMessage-ID: &lt;20040206151546.GA22899@...&gt;\r\nReferences: &lt;bvtint+6o20@...&gt;\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=us-ascii\r\nContent-Disposition: inline\r\nIn-Reply-To: &lt;bvtint+6o20@...&gt;\r\nUser-Agent: Mutt/1.3.25i\r\nX-Unexpected-Header: Nobody expects the Unexpected Header!\r\nOrganization: asynchronous.org\r\nX-eGroups-Remote-IP: 216.114.142.253\r\nFrom: Josh Sled &lt;jsled-yahoogroup@...&gt;\r\nSubject: Re: [rest-discuss] REST toolkits\r\nX-Yahoo-Group-Post: member; u=119562537\r\nX-Yahoo-Profile: joshsled\r\n\r\nOn Thu, Feb 05, 2004 at 02:07:57PM -0000, Tony Butterfield wrote:\n\n| To summarise, what has been talked about is a REST-compliant HTTP\n| toolkit, but because of the limitations of todays clients, many\n| toolkits tend to compromise REST and make all interfaces use GET or\n| POST.\n\nTrue, though the clients can be fixed.  And programmatic clients\n[httpclient, &c.] support the full HTTP method range.\n\nOne problem is that it&#39;s hard to jump from &quot;architectural style&quot; to\n&quot;implementation support&quot;... there&#39;s a step or two in the middle that\nmakes the implementation hard.  I think the point of such a toolkit is\nto make good decisions about a lot of those things, leading the person\nquickly and simply from the style to a working/functional impl that is\nentailed by the constraints of the style.\n\n| I would like to propose elements of a broader definition of something\n| to help development and deployment of REST-oriented systems. This\n| would include:\n| \n| *) HTTP compliant but not HTTP oriented\n\nWhy not?  HTTP is pretty good for a lot of what one would want to do.\nI&#39;d say start with HTTP and move forward after getting something going.\n\n| *) equally suitable for machine-machine and machine-human(browser)\n\nHmm... I&#39;d agree, but would tend to focus just a bit more on\nmachine-machine -- like 51/49 -- for a couple of reasons...\n\nHumans are really good at glossing over details and repetition that\nmachines require in order to function correctly.\n\nAt the same time, a too-complex exchange may be perfectly understandable\nand well-specified for a machine, but inscrutable for a human.\n\nIt&#39;s like the ad-hoc XML vs. RDF issue ... RDF[/XML] can look really\nclose to XML, but is well-specified enough for machines to &quot;deal&quot;.\nRandom ad-hoc XML may convey the same content to a human, but leaves a\nmachine in an ambiguous state.  At the end of the day, it&#39;s machines\nthat are going to be connecting and doing things, though during\ndiscovery/development/debugging/maintenance, it&#39;s all about humans.\n\n| *) equally suitable acting as a client, a server, or a peer in a\n| network.\n\nThe REST style is primarily C/S ... I think of peer-relationships as just\na quickly-flip-flopping C/S, sometimes, but may very well be wrong.\n\n| *) the REST paradigm could be applied internally as way of making\n| modular, scalable and decoupled applications, not just on the network\n| interface.\n\nThis is true, with the obvious challenge being performance.  Super-lacking\nclient support for pipelining is one issue, though there is also an inherent\nissue with batching that I&#39;ve not found a good RESTful solution for.\n\nIf you assume a RESTful and network-based interface, there&#39;s no reason why\nan on-the-same-machine or in-process communication should necessarily use\nHTTP instead of a native message-formatting and transport.  The important\nthing is the message-formating and description, I think.\n\n| *) although REST doesn&#39;t dictate the use of XML, accept that XML is\n| the defacto-standard universal data syntax and use it for all\n| meta-data and as as the lingua-franca between all other\n| representations.\n\nUnless it&#39;s not appropriate [as per the followon thread].\n\nAnd, personally, I&#39;d try to make it easy to exchange RDF/XML instead of\njust XML, for many reasons.\n\n\n\nSo what would such a toolkit look like?\n\nLet&#39;s start with a simple use-case to engender discussion...\n\nAlice provides an Image-Processing web service, with a RESTful interface.\nBob wants to connect to and use that service before lunch. The service is\npretty simple: given an image and list of transformations, it returns the\ntransformed image [plus some other things it determines along the way].\nIdeally, Bob would like to sit down an write:\n\n-----\nImage img = // ...;\nTransformList xformList = // ...;\nImageProcessing imgSvc = ImageProcessing.getInstance();\n\nImage newImage = imgSvc.processImage( img, xformList );\ndisplay( newImage );\n-----\n\n* What parts of this can the toolkit help with or make simple?\n* What [information, description, &c.] is required to use it?\n* Why _wouldn&#39;t_ Bob use it?\n\n\nI guess I realize after I type this up that there may be two really different\ngoals here, between building a toolkit focused on:\n\n1/ human-machine -- a toolkit for building RESTful, human-focused web sites.\n\n2/ machine-machine -- a toolkit for building RESTful,\n   developer-/code-focused web services.\n\nWhich toolkit do you want to build?  I&#39;m looking for the latter.\nI don&#39;t think they&#39;re entirely seperate, actually, but it&#39;s good to know\nwhere we stand. :)\n\n...jsled\n\n-- \nhttp://www.asynchronous.org - `a=jsled; b=asynchronous.org; echo ${a}@${b}`\n\n"}}
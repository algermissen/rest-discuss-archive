{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":69164307,"authorName":"mike amundsen","from":"mike amundsen &lt;mamund@...&gt;","profile":"mamund","replyTo":"SENDER","senderId":"4NDk8G0wDCsdxEvVIT_pZegk-dVRlYJUs-by1kcSkGoemnKtSSD_HUQwpHlQE5dJrkfK2hezfftS4Mv9ryw6Xpk--Rs01Fo","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] How to express a means to merge specific revisions of a resource","postDate":"1312559745","msgId":17667,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PENBUFdfOG02cEJLa3hFV25XYlVuaXpkRXdVdnJtcUQxZDR5S21LNFVUYU0xLUtMZjBDd0BtYWlsLmdtYWlsLmNvbT4="},"prevInTopic":17666,"nextInTopic":0,"prevInTime":17666,"nextInTime":17668,"topicId":17666,"numMessagesInTopic":2,"msgSnippet":"looks like your 300 response returns URIs for each revision. one option is to expose a factory resource that allows clients to submit the revision URIs to","rawEmail":"Return-Path: &lt;mca@...&gt;\r\nX-Sender: mca@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 88217 invoked from network); 5 Aug 2011 15:55:47 -0000\r\nX-Received: from unknown (98.137.34.45)\n  by crsgroups4-scan.grp.sp2.yahoo.com with QMQP; 5 Aug 2011 15:55:47 -0000\r\nX-Received: from unknown (HELO mail-ww0-f49.google.com) (74.125.82.49)\n  by mta2.grp.sp2.yahoo.com with SMTP; 5 Aug 2011 15:55:47 -0000\r\nX-Received: by wwf10 with SMTP id 10so1014049wwf.6\n        for &lt;rest-discuss@yahoogroups.com&gt;; Fri, 05 Aug 2011 08:55:46 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.216.86.17 with SMTP id v17mr2056653wee.13.1312559746008; Fri,\n 05 Aug 2011 08:55:46 -0700 (PDT)\r\nX-Received: by 10.216.157.143 with HTTP; Fri, 5 Aug 2011 08:55:45 -0700 (PDT)\r\nDate: Fri, 5 Aug 2011 11:55:45 -0400\r\nX-Google-Sender-Auth: aWxAmda4YAlcA5A6WUZrLpxa0EI\r\nMessage-ID: &lt;CAPW_8m6pBKkxEWnWbUnizdEwUvrmqD1d4yKmK4UTaM1-KLf0Cw@...&gt;\r\nTo: rest-discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Type: multipart/alternative; boundary=0016e6d566b668455804a9c421ac\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: mike amundsen &lt;mamund@...&gt;\r\nSubject: Re: [rest-discuss] How to express a means to merge specific revisions\n of a resource\r\nX-Yahoo-Group-Post: member; u=69164307; y=LQ_EauknDc5RIxwo-bddFHZHCT858Lu2F0xMRIy-MEJd\r\nX-Yahoo-Profile: mamund\r\n\r\n\r\n--0016e6d566b668455804a9c421ac\r\nContent-Type: text/plain; charset=ISO-8859-1\r\n\r\nlooks like your 300 response returns URIs for each revision. one option is\nto expose a &quot;factory&quot; resource that allows clients to submit the revision\nURIs to merge.\n\nThere are many ways to implement the interaction, but one simplistic\npossibility is:\n\nPOST /merge/\n...\nhttp://mydb.example.com/ &lt;http://mydb.example.com/mystore/12345?rev=a&gt;\nmystore/12345?rev=a &lt;http://mydb.example.com/mystore/12345?rev=a&gt;\nhttp://mydb.example.com/ &lt;http://mydb.example.com/mystore/12345?rev=b&gt;\nmystore/12345?rev=b &lt;http://mydb.example.com/mystore/12345?rev=b&gt;\n\n201 Created\nLocation: http://mydb.example.com/&lt;http://mydb.example.com/mystore/12345?rev=a&gt;\nmystore/12345?rev=a &lt;http://mydb.example.com/mystore/12345?rev=a&gt;b\n\nAlternatively/additionally you can:\n- return 200 OK w/ the actual merged body for final approval before\naccepting/rejecting the merge (via another POST operation)\n- return 301 w/ a Location URI to point the user to the completed merge\n- return 202 Accepted w/ a Location URI that points to a &#39;progress&#39; document\nand let the back end do the processing over time (if this is a long merge)\n\nmca\nhttp://amundsen.com/blog/\nhttp://twitter.com@mamund\nhttp://mamund.com/foaf.rdf#me\n\n#RESTFest 2011 - Aug 18-20\nhttp://restfest.org\n\n\n\nOn Fri, Aug 5, 2011 at 11:31, Ryan J. McDonough &lt;ryan@...&gt; wrote:\n\n&gt;\n&gt;\n&gt; I am working on a HTTP interface to a persietent store that is backed by a\n&gt; slightly tweaked version of Project Voldemort. The problem I am faced with\n&gt; is how to be able to expose a means to the caller a way to invalidate\n&gt; specific reivision IDs without having to rely on out of band information.\n&gt; Currently, there is an option on the table to use only ETags to express\n&gt; this, but I&#39;m not convinced that this is the right approach. I am not expert\n&gt; on ETags, so I thought I&#39;d bring the question up here.\n&gt;\n&gt; Right now, our interface is rather simple and is similar to the proposed\n&gt; Voldemort REST API describe here:\n&gt;\n&gt; https://github.com/afeinberg/voldemort/wiki/REST-API-Proposal\n&gt;\n&gt; Currently, we are using ETags rather than a custom HTTP header to convey\n&gt; revisions. Many of our applications that will use this API will be passing\n&gt; through intermediaries, many of which are already known to strip\n&gt; non-standard HTTP headers. For the most part, the use of ETags works fine to\n&gt; handle typical conditional write operations. If the revision the client has\n&gt; is not current, we can successfully block the write until the caller\n&gt; resolves the conflicts. This works just dandy right now.\n&gt;\n&gt; What doesn&#39;t work so good is when we have the condition that the server has\n&gt; more than one version of the value due a downed node or replication issue.\n&gt; Our native API have the following parameters:\n&gt;\n&gt;\n&gt;    - The new state of the value\n&gt;    - A collection of the revision IDs to invalidate\n&gt;\n&gt;\n&gt; One of our requirements is to only invalidate the revisions that the client\n&gt; wants to. If the system has version &#39;a&#39;, &#39;b&#39;, and &#39;c&#39; for resource\n&gt; &#39;/mystore/12345&#39;, they should be able to create version &#39;ab&#39; from &#39;a&#39; and\n&gt; &#39;b&#39;, leaving version &#39;c&#39; alone.\n&gt;\n&gt; Here&#39;s our process flow works right now: a client issues a GET:\n&gt;\n&gt; GET /mystore/12345 HTTP/1.1\n&gt; Host: mydb.example.com\n&gt; Accept: application/octet-stream, multipart/mixed;q=0.8,\n&gt; application/json;q=0.7, */*;q=0.5\n&gt;\n&gt; If there are multiple revisions, they&#39;d get somethig like so:\n&gt;\n&gt; HTTP/1.1 300 Multiple Choices\n&gt; Last-Modified: Thu, 21 Apr 2011 18:24:31 GMT\n&gt; Content-Type: multipart/mixed; boundry=&quot;rev&quot;\n&gt; Date: Thu, 28 Apr 2011 17:43:52 GMT\n&gt;\n&gt; --rev\n&gt; Location: http://mydb.example.com/mystore/12345?rev=a\n&gt; Content-Type: application/octet-stream\n&gt; ETag: a\n&gt; Last-Modified: Thu, 21 Apr 2011 18:24:31 GMT\n&gt;\n&gt; *...binary content...*\n&gt;\n&gt; --rev\n&gt; Location: http://mydb.example.com/mystore/12345?rev=b\n&gt; Content-Type: application/octet-stream\n&gt; ETag: b\n&gt; Last-Modified: Fri, 22 Apr 2011 18:24:31 GMT\n&gt;\n&gt; *...binary content...*\n&gt;\n&gt; --rev\n&gt; Location: http://mydb.example.com/mystore/12345?rev=c\n&gt; Content-Type: application/octet-stream\n&gt; ETag: c\n&gt; Last-Modified: Fri, 22 Apr 2011 18:32:31 GMT\n&gt;\n&gt; *...binary content...*\n&gt;\n&gt; We&#39;re using mutlipart for clients that prefer to get all revisions in one\n&gt; go, and this response is necessarily etched in stone. Now to resolve\n&gt; revisions &#39;a&#39; and &#39;b&#39;, it has been suggested that we do soemthing like so:\n&gt;\n&gt; PUT /mystore/12345 HTTP/1.1\n&gt; Host: mydb.example.com\n&gt; Content-Type: application/octet-stream\n&gt; If-Match: &quot;a&quot;, &quot;b&quot;\n&gt;\n&gt; ...new state of the entity...\n&gt;\n&gt; In this case, we should end up with versions &#39;ab&#39; and &#39;c&#39;.\n&gt;\n&gt; The problems I see with this approach are as follows:\n&gt;\n&gt;\n&gt;    - The HTTP specification seems to suggest that in the conditional write\n&gt;    case, the server should always maintain a single, current version of the\n&gt;    representation. In this case, we&#39;ve got multiple revisions that are current.\n&gt;    - Including the Etag in the multipart/mixed response required\n&gt;    out-of-band information. The client must know that they must do something\n&gt;    special with the etag value for each part.\n&gt;    - If we use multiple resources for each revision, it also requires\n&gt;    out-of-band information in that you need to know that you need the etags\n&gt;    from each revision resource you want to merge.\n&gt;\n&gt;\n&gt; As an alternative approach, it is likely better to express the specific\n&gt; versions you want to merge in the URI rather than etags. But now we&#39;ve got\n&gt; two different ways of resolving conflicts based on the condition.\n&gt;\n&gt; Ryan-\n&gt;\n&gt;\n&gt;\n&gt;\n&gt; \n\r\n--0016e6d566b668455804a9c421ac\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;div class=3D&quot;gmail_quote&quot;&gt;&lt;div&gt;looks like your 300 response returns URIs f=\r\nor each revision.=A0one option is to expose a &quot;factory&quot; resource =\r\nthat allows clients to submit the revision URIs to merge.=A0&lt;/div&gt;&lt;div&gt;&lt;br&gt;=\r\n&lt;/div&gt;\n&lt;div&gt;There are many ways to implement the interaction, but one simpl=\r\nistic possibility is:&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=3D&quot;&#39;courier =\r\nnew&#39;, monospace&quot;&gt;POST /merge/&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=3D&quot;&#39;couri=\r\ner new&#39;, monospace&quot;&gt;...&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=3D&quot;&#39;courier new=\r\n&#39;, monospace&quot;&gt;&lt;a href=3D&quot;http://mydb.example.com/mystore/12345?rev=3Da&quot;=\r\n target=3D&quot;_blank&quot;&gt;http://mydb.example.com/&lt;/a&gt;&lt;a href=3D&quot;http://mydb.examp=\r\nle.com/mystore/12345?rev=3Da&quot; target=3D&quot;_blank&quot;&gt;mystore/12345?rev=3Da&lt;/a&gt;&lt;/=\r\nfont&gt;&lt;/div&gt;\n\n&lt;div&gt;&lt;font face=3D&quot;&#39;courier new&#39;, monospace&quot;&gt;&lt;a href=\r\n=3D&quot;http://mydb.example.com/mystore/12345?rev=3Db&quot; target=3D&quot;_blank&quot;&gt;http:/=\r\n/mydb.example.com/&lt;/a&gt;&lt;a href=3D&quot;http://mydb.example.com/mystore/12345?rev=\r\n=3Db&quot; target=3D&quot;_blank&quot;&gt;mystore/12345?rev=3Db&lt;/a&gt;&lt;/font&gt;&lt;/div&gt;\n\n&lt;div&gt;&lt;font =\r\nface=3D&quot;&#39;courier new&#39;, monospace&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=\r\n=3D&quot;&#39;courier new&#39;, monospace&quot;&gt;201 Created&lt;br clear=3D&quot;all&quot;&gt;&lt;/font&gt;&lt;=\r\n/div&gt;&lt;div&gt;&lt;font face=3D&quot;&#39;courier new&#39;, monospace&quot;&gt;Location:=A0&lt;/fon=\r\nt&gt;&lt;span style=3D&quot;font-family:&#39;courier new&#39;, monospace&quot;&gt;&lt;a href=3D&quot;h=\r\nttp://mydb.example.com/mystore/12345?rev=3Da&quot; target=3D&quot;_blank&quot;&gt;http://mydb=\r\n.example.com/&lt;/a&gt;&lt;a href=3D&quot;http://mydb.example.com/mystore/12345?rev=3Da&quot; =\r\ntarget=3D&quot;_blank&quot;&gt;mystore/12345?rev=3Da&lt;/a&gt;b&lt;/span&gt;&lt;/div&gt;\n\n&lt;div&gt;&lt;font face=\r\n=3D&quot;&#39;Courier New&#39;&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;Alternatively/additionally=\r\n you can:&lt;/div&gt;&lt;div&gt;- return 200 OK w/ the actual merged body for final app=\r\nroval before accepting/rejecting the merge (via another POST operation)&lt;/di=\r\nv&gt;\n\n&lt;div&gt;- return 301 w/ a Location URI to point the user to the completed =\r\nmerge&lt;/div&gt;&lt;div&gt;- return 202 Accepted w/ a Location URI that points to a &#=\r\n39;progress&#39; document and let the back end do the processing over time =\r\n(if this is a long merge)&lt;/div&gt;\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;mca&lt;br&gt;&lt;a href=3D&quot;http=\r\n://amundsen.com/blog/&quot; target=3D&quot;_blank&quot;&gt;http://amundsen.com/blog/&lt;/a&gt;&lt;br&gt;\n=\r\n&lt;a href=3D&quot;http://twitter.com&quot; target=3D&quot;_blank&quot;&gt;http://twitter.com&lt;/a&gt;@mam=\r\nund&lt;br&gt;&lt;a href=3D&quot;http://mamund.com/foaf.rdf#me&quot; target=3D&quot;_blank&quot;&gt;http://m=\r\namund.com/foaf.rdf#me&lt;/a&gt;&lt;br&gt;&lt;br&gt;#RESTFest 2011 - Aug 18-20&lt;br&gt;&lt;a href=3D&quot;h=\r\nttp://restfest.org&quot; target=3D&quot;_blank&quot;&gt;http://restfest.org&lt;/a&gt;&lt;br&gt;\n\n\n&lt;br&gt;\n&lt;b=\r\nr&gt;&lt;br&gt;&lt;div class=3D&quot;gmail_quote&quot;&gt;On Fri, Aug 5, 2011 at 11:31, Ryan J. McDo=\r\nnough &lt;span dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:ryan@...&quot; target=3D=\r\n&quot;_blank&quot;&gt;ryan@...&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote class=3D&quot;g=\r\nmail_quote&quot; style=3D&quot;margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-l=\r\neft:1ex&quot;&gt;\n\n\n\n\n\n\n\n\n\n        \n&lt;div style=3D&quot;word-wrap:break-word&quot;&gt;\n\n\n\n\n&lt;br&gt;&lt;b=\r\nr&gt;\n\n\n\n\n&lt;div&gt;I am working on a HTTP interface to a persietent store that is =\r\nbacked by a slightly tweaked version of Project Voldemort. The problem I am=\r\n faced with is how to be able to expose a means to the caller a way to inva=\r\nlidate specific reivision IDs without having to rely on out of band informa=\r\ntion. Currently, there is an option on the table to use only ETags to expre=\r\nss this, but I&#39;m not convinced that this is the right approach. I am no=\r\nt expert on ETags, so I thought I&#39;d bring the question up here.&lt;/div&gt;\n\n=\r\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Right now, our interface is rather simple and is simil=\r\nar to the proposed Voldemort REST API describe here:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;d=\r\niv&gt;&lt;a href=3D&quot;https://github.com/afeinberg/voldemort/wiki/REST-API-Proposal=\r\n&quot; target=3D&quot;_blank&quot;&gt;https://github.com/afeinberg/voldemort/wiki/REST-API-Pr=\r\noposal&lt;/a&gt;&lt;/div&gt;\n\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Currently, we are using ETags rather=\r\n than a custom HTTP header to convey revisions. Many of our applications th=\r\nat will use this API will be passing through intermediaries, many of which =\r\nare already known to strip non-standard HTTP headers. For the most part, th=\r\ne use of ETags works fine to handle typical conditional write operations. I=\r\nf the revision the client has is not current, we can successfully block the=\r\n write until the caller resolves the conflicts. This works just dandy right=\r\n now.&lt;/div&gt;\n\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;What doesn&#39;t work so good is when we =\r\nhave the condition that the server has more than one version of the value d=\r\nue a downed node or replication issue. Our native API have the following pa=\r\nrameters:&lt;/div&gt;\n\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;The new state of the value&lt;/l=\r\ni&gt;&lt;li&gt;A collection of the revision IDs to invalidate&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;b=\r\nr&gt;&lt;/div&gt;&lt;div&gt;One of our requirements is to only invalidate the revisions th=\r\nat the client wants to. If the system has version &#39;a&#39;, &#39;b&#39;,=\r\n and &#39;c&#39; for resource &#39;/mystore/12345&#39;, they should be able=\r\n to create version &#39;ab&#39; from &#39;a&#39; and &#39;b&#39;, leaving v=\r\nersion &#39;c&#39; alone.&lt;/div&gt;\n\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Here&#39;s our proces=\r\ns flow works right now: a client issues a GET:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;fo=\r\nnt face=3D&quot;&#39;Courier New&#39;&quot;&gt;GET /mystore/12345 HTTP/1.1&lt;/font&gt;&lt;/div&gt;&lt;=\r\ndiv&gt;&lt;font face=3D&quot;&#39;Courier New&#39;&quot;&gt;Host: &lt;a href=3D&quot;http://mydb.examp=\r\nle.com&quot; target=3D&quot;_blank&quot;&gt;mydb.example.com&lt;/a&gt;&lt;/font&gt;&lt;/div&gt;\n\n\n&lt;div&gt;&lt;font fa=\r\nce=3D&quot;&#39;Courier New&#39;&quot;&gt;Accept: application/octet-stream, multipart/mi=\r\nxed;q=3D0.8, application/json;q=3D0.7, */*;q=3D0.5&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/d=\r\niv&gt;&lt;div&gt;If there are multiple revisions, they&#39;d get somethig like so:&lt;/=\r\ndiv&gt;\n\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=3D&quot;&#39;Courier New&#39;&quot;&gt;HTTP/1.1 30=\r\n0 Multiple Choices&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=3D&quot;&#39;Courier New&#39;&quot;&gt;La=\r\nst-Modified: Thu, 21 Apr 2011 18:24:31 GMT&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=3D&quot;&=\r\n#39;Courier New&#39;&quot;&gt;Content-Type: multipart/mixed; boundry=3D&quot;rev&qu=\r\not;&lt;/font&gt;&lt;/div&gt;\n\n\n&lt;div&gt;&lt;font face=3D&quot;&#39;Courier New&#39;&quot;&gt;Date: Thu, 28 =\r\nApr 2011 17:43:52 GMT&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=3D&quot;&#39;Courier New&#39;&quot;=\r\n&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=3D&quot;&#39;Courier New&#39;&quot;&gt;--rev&lt;/font&gt;&lt;/d=\r\niv&gt;&lt;div&gt;&lt;font face=3D&quot;&#39;Courier New&#39;&quot;&gt;Location: &lt;a href=3D&quot;http://my=\r\ndb.example.com/mystore/12345?rev=3Da&quot; target=3D&quot;_blank&quot;&gt;http://mydb.example=\r\n.com/mystore/12345?rev=3Da&lt;/a&gt;&lt;/font&gt;&lt;/div&gt;\n\n\n&lt;div&gt;&lt;font face=3D&quot;&#39;Couri=\r\ner New&#39;&quot;&gt;Content-Type: application/octet-stream&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font =\r\nface=3D&quot;&#39;Courier New&#39;&quot;&gt;ETag: a&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=3D&quot;&#39;=\r\nCourier New&#39;&quot;&gt;Last-Modified: Thu, 21 Apr 2011 18:24:31 GMT&lt;/font&gt;&lt;/div&gt;=\r\n\n\n\n&lt;div&gt;&lt;font face=3D&quot;&#39;Courier New&#39;&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font fa=\r\nce=3D&quot;&#39;Courier New&#39;&quot;&gt;&lt;i&gt;...binary content...&lt;/i&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;=\r\nfont face=3D&quot;&#39;Courier New&#39;&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=3D&quot;&#3=\r\n9;Courier New&#39;&quot;&gt;--rev&lt;/font&gt;&lt;/div&gt;\n\n\n&lt;div&gt;&lt;font face=3D&quot;&#39;Courier Ne=\r\nw&#39;&quot;&gt;Location: &lt;a href=3D&quot;http://mydb.example.com/mystore/12345?rev=3Db&quot;=\r\n target=3D&quot;_blank&quot;&gt;http://mydb.example.com/mystore/12345?rev=3Db&lt;/a&gt;&lt;/font&gt;=\r\n&lt;/div&gt;&lt;div&gt;&lt;font face=3D&quot;&#39;Courier New&#39;&quot;&gt;Content-Type: application/o=\r\nctet-stream&lt;/font&gt;&lt;/div&gt;\n\n\n&lt;div&gt;&lt;font face=3D&quot;&#39;Courier New&#39;&quot;&gt;ETag: =\r\nb&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=3D&quot;&#39;Courier New&#39;&quot;&gt;Last-Modified: Fri,=\r\n 22 Apr 2011 18:24:31 GMT&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=3D&quot;&#39;Courier New&#=\r\n39;&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=3D&quot;&#39;Courier New&#39;&quot;&gt;&lt;i&gt;...binar=\r\ny content...&lt;/i&gt;&lt;/font&gt;&lt;/div&gt;\n\n\n&lt;div&gt;&lt;font face=3D&quot;&#39;Courier New&#39;&quot;&gt;&lt;=\r\nbr&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=3D&quot;&#39;Courier New&#39;&quot;&gt;--rev&lt;/font&gt;&lt;/div=\r\n&gt;&lt;div&gt;&lt;font face=3D&quot;&#39;Courier New&#39;&quot;&gt;Location: &lt;a href=3D&quot;http://mydb=\r\n.example.com/mystore/12345?rev=3Dc&quot; target=3D&quot;_blank&quot;&gt;http://mydb.example.c=\r\nom/mystore/12345?rev=3Dc&lt;/a&gt;&lt;/font&gt;&lt;/div&gt;\n\n\n&lt;div&gt;&lt;font face=3D&quot;&#39;Courier=\r\n New&#39;&quot;&gt;Content-Type: application/octet-stream&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font fa=\r\nce=3D&quot;&#39;Courier New&#39;&quot;&gt;ETag: c&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=3D&quot;&#39;Co=\r\nurier New&#39;&quot;&gt;Last-Modified: Fri, 22 Apr 2011 18:32:31 GMT&lt;/font&gt;&lt;/div&gt;\n\n=\r\n\n&lt;div&gt;&lt;font face=3D&quot;&#39;Courier New&#39;&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=\r\n=3D&quot;&#39;Courier New&#39;&quot;&gt;&lt;i&gt;...binary content...&lt;/i&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;br=\r\n&gt;&lt;/div&gt;&lt;div&gt;We&#39;re using mutlipart for clients that prefer to get all re=\r\nvisions in one go, and this response is necessarily etched in stone. Now to=\r\n resolve revisions &#39;a&#39; and &#39;b&#39;, it has been suggested that =\r\nwe do soemthing like so:&lt;/div&gt;\n\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=3D&quot;&#39;Cou=\r\nrier New&#39;&quot;&gt;PUT /mystore/12345 HTTP/1.1&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=3D&quot;&=\r\n#39;Courier New&#39;&quot;&gt;Host: &lt;a href=3D&quot;http://mydb.example.com&quot; target=3D&quot;_=\r\nblank&quot;&gt;mydb.example.com&lt;/a&gt;&lt;/font&gt;&lt;/div&gt;\n\n\n&lt;div&gt;&lt;font face=3D&quot;&#39;Courier =\r\nNew&#39;&quot;&gt;Content-Type: application/octet-stream&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font fac=\r\ne=3D&quot;&#39;Courier New&#39;&quot;&gt;If-Match: &quot;a&quot;, &quot;b&quot;&lt;/font&gt;&lt;/=\r\ndiv&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=3D&quot;&#39;Courier New&#39;&quot;&gt;...new state o=\r\nf the entity...&lt;/font&gt;&lt;/div&gt;\n\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;In this case, we should =\r\nend up with versions &#39;ab&#39; and &#39;c&#39;.=A0&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;=\r\ndiv&gt;The problems I see with this approach are as follows:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/d=\r\niv&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;The HTTP specification seems to suggest that in the conditi=\r\nonal write case, the server should always maintain a single, current versio=\r\nn of the representation. In this case, we&#39;ve got multiple revisions tha=\r\nt are current.&lt;/li&gt;\n\n\n&lt;li&gt;Including the Etag in the multipart/mixed respons=\r\ne required out-of-band information. The client must know that they must do =\r\nsomething special with the etag value for each part.&lt;/li&gt;&lt;li&gt;If we use mult=\r\niple resources for each revision, it also requires out-of-band information =\r\nin that you need to know that you need the etags from each revision resourc=\r\ne you want to merge.&lt;/li&gt;\n\n\n&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;As an alternativ=\r\ne approach, it is likely better to express the specific versions you want t=\r\no merge in the URI rather than etags. But now we&#39;ve got two different w=\r\nays of resolving conflicts based on the condition.=A0&lt;/div&gt;\n\n\n&lt;div&gt;&lt;br&gt;&lt;/di=\r\nv&gt;&lt;div&gt;Ryan-&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;\n\n\n\n\n\n&lt;br&gt;\n\n    \n    \n&lt;br&gt;\n=\r\n\n\n\n\n&lt;div width=3D&quot;1&quot; style=3D&quot;color:white;clear:both&quot;&gt;&lt;/div&gt;\n&lt;/blockquote&gt;&lt;=\r\n/div&gt;&lt;br&gt;&lt;/div&gt;\n&lt;br&gt;&lt;/div&gt;&lt;br&gt;\n\r\n--0016e6d566b668455804a9c421ac--\r\n\n"}}
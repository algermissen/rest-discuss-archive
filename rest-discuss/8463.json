{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":164939419,"authorName":"Jon Hanna","from":"Jon Hanna &lt;jon@...&gt;","profile":"hack_poet","replyTo":"SENDER","senderId":"tSTpLoqOfzJIzF-Vb1YfWU6iOfXT-H-jK5K-c3C5BHCpWxDLEXrU_L_xlsBOxWB6ybm8fRdnj69kT2Xsbf2qaJzL6R0","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] REST and URI naming conventions","postDate":"1179233867","msgId":8463,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQ2NDlBRTRCLjEwODA4MDdAaGFja2NyYWZ0Lm5ldD4=","inReplyToHeader":"PGQ4YjU5NDVmMDcwNTE0MTExNXAxZjI0MDlkOXRlZmRiY2Y3MWViZTAxM2JlQG1haWwuZ21haWwuY29tPg==","referencesHeader":"PGQ4YjU5NDVmMDcwNTE0MTExNXAxZjI0MDlkOXRlZmRiY2Y3MWViZTAxM2JlQG1haWwuZ21haWwuY29tPg=="},"prevInTopic":8462,"nextInTopic":8464,"prevInTime":8462,"nextInTime":8464,"topicId":8451,"numMessagesInTopic":24,"msgSnippet":"... It is and it isn t. It s just as RESTful to have    and so on for ever resource in the","rawEmail":"Return-Path: &lt;jon@...&gt;\r\nX-Sender: jon@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 87774 invoked from network); 15 May 2007 13:00:43 -0000\r\nReceived: from unknown (66.218.67.33)\n  by m43.grp.scd.yahoo.com with QMQP; 15 May 2007 13:00:43 -0000\r\nReceived: from unknown (HELO mail.arena1.com) (63.116.216.131)\n  by mta7.grp.scd.yahoo.com with SMTP; 15 May 2007 13:00:42 -0000\r\nReceived: from UnknownHost [83.70.80.115] by mail.arena1.com with SMTP;\n   Tue, 15 May 2007 08:57:47 -0400\r\nMessage-ID: &lt;4649AE4B.1080807@...&gt;\r\nDate: Tue, 15 May 2007 13:57:47 +0100\r\nUser-Agent: Thunderbird 2.0.0.0 (Windows/20070326)\r\nMIME-Version: 1.0\r\nTo: Rest List &lt;rest-discuss@yahoogroups.com&gt;\r\nReferences: &lt;d8b5945f0705141115p1f2409d9tefdbcf71ebe013be@...&gt;\r\nIn-Reply-To: &lt;d8b5945f0705141115p1f2409d9tefdbcf71ebe013be@...&gt;\r\nContent-Type: text/plain; charset=UTF-8; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-Declude-Sender: jon@... [83.70.80.115]\r\nX-Declude-Spoolname: -157463278385.eml\r\nX-Declude-RefID: \r\nX-Declude-Note: Scanned by Declude 4.3.14 for spam. &quot;http://www.declude.com/x-note.htm&quot;\r\nX-Declude-Scan: Score [4] at 08:57:57 on 15 May 2007\r\nX-Declude-Fail: Whitelisted\r\nX-Country-Chain: \r\nX-eGroups-Msg-Info: 1:0:0:0\r\nFrom: Jon Hanna &lt;jon@...&gt;\r\nSubject: Re: [rest-discuss] REST and URI naming conventions\r\nX-Yahoo-Group-Post: member; u=164939419; y=6JneXDpSvASb31MwJFJi9rqUiytz5hFi5gY2nOW-qWsYiSkQ\r\nX-Yahoo-Profile: hack_poet\r\n\r\nChad Burt wrote:\n&gt; So basically my post looking for a URI naming convention that allows \n&gt; arbitrary arguments is orthogonal to this mailing list!\n\nIt is and it isn&#39;t. It&#39;s just as RESTful to have &lt;http://example.net/1&gt;\n&lt;http://example.net/2&gt; &lt;http://example.net/3&gt; and so on for ever \nresource in the application.\n\nHowever, good URI design affects the &quot;Coolness&quot; of the URIs \n&lt;http://www.w3.org/Provider/Style/URI&gt; which have\nstrong benefits including some that impact upon RESTfulness - in\nparticular while the same resource can be identified by more than one\nURI (and it&#39;s often useful to do so) the opaqueness of URIs (and it&#39;s\nnot a matter that URIs &quot;should&quot; be opaque - URIs simply are opaque; some\napplications may be interpretting them in certain ways, but the rest of\nthe web is unaware of this) means that using the same URI consistently\nmakes better use of caching, and better matching of URIs in other \ncontexts (in particular, if I have two different URIs I have to assume \nthey refer to different resources - though maybe they don&#39;t, if I have \ntwo URIs that are both the same I know they refer to the same resource).\n\nGood design in URIs also tends to indicate good design elsewhere. And \nthere are other advantages in good URIs; those advantages of coolness \nthat don&#39;t affect REST, search-engine advantages, user-hackability \n(which is a matter of user&#39;s making guesses based on assumptions that \nare NOT RESTful, but who cares if we aren&#39;t actually breaking REST to \nallow for that). As long as a particular URI design isn&#39;t at odds with \nREST, then certainly do make them as good as you can.\n\nWhere a URI design is at odds with REST, and hence not &quot;good design&quot; for \nour purposes, is where it does something that REST says a URI doesn&#39;t do.\n\nIf you have any information in a URI that is not identifying a resource \n(e.g. session information, user-ids, etc) then you are breaking from \nREST and losing its advantages.\n\nIf you require a client application to construct a URI then you are \nbreaking from REST unless the client receives information about how to \nconstruct that URI from another resource&#39;s representation (e.g. HTML \nforms with method=&quot;get&quot; are instructions to a web browser as to how to \nconstruct a URI based on user input, and hence perfectly compliant with \nREST).\n\nIt&#39;s not wrong therefore to, for example, build a URI like \n&lt;http://example.net/grandparent/parent/child.resource&gt; but it is wrong \nfor a client acting on a representation of child.resource to assume that \n&lt;http://example.net/grandparent/parent/&gt; is the URI of a parent resource \n- rather it must receive a link to that URI. Hardcoding &lt;parent \nxlink:href=&quot;../&quot; /&gt; into the code to build a representation of \nchild.resource might do that perfectly well - hardcoding on the server \nand softcoding on the server are the same thing as far as the client can \nsee.\n\nYou generally need to have some sort of &quot;seed&quot; URI to tell a client \nwhere to start - this cannot be prevented.\n\nBeyond that to be perfectly RESTful all URIs must be obtained from \nrepresentations of other resources. Links (including relative links) are \nthe main mechanism, but instructions on how to construct a URI are also \nvalid - HTML forms is an example, but any other mechanism could be used, \ne.g. we could have something like the following:\n\n&lt;constructionPattern pattern=&quot;http://example.net/{parent}/{child}/&quot;/&gt;\n\nNot from any standard, possibly flawed (I just made it up there now) but \ncapable of informing the construction a URI to anything that knows what \n&quot;parent&quot; and &quot;child&quot; mean in this context, and completely not bound to \nany given URI pattern - if we changed the way the server deals with this \nsort of request we could change the above to be, e.g.:\n\n&lt;constructionPattern \npattern=&quot;http://example.net/childMatrix?parent={parent};child={child}&quot;/&gt;\n\n&lt;constructionPattern\npattern=&quot;http://example.net/weDontNeedTheParentAnyway/{child}&quot;/&gt;\n\nor whatever.\n\n&gt; I think I got confused because I was coming at REST from the perspective \n&gt; of how it is implemented in rails.\n\nREST isn&#39;t implemented in rails. REST is USED in rails.\n\nREST is also used in rails in a rails &quot;hello world&quot; webpage, and can be \nused in rails outside of those things explicitly labelled as REST.\n\n\n"}}
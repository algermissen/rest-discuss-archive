{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":289191104,"authorName":"Jan Algermissen","from":"Jan Algermissen &lt;algermissen1971@...&gt;","profile":"algermissen1971","replyTo":"SENDER","senderId":"_v6_a2f1RgCWeS_bf1OPh5WTDJUfQNHAOqRCLQbGRsR0eNu-vq_Od2Hop8mFHpw2PNRQPi_QQq8FqVzxbKJQlRr6v-qnXLtu-J2bystzU4o","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Understanding hypermedia as the engine of application state","postDate":"1207240479","msgId":10594,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEYxNkI3MjJBLTk5RTctNDM2Mi1BQTc1LTU5NjFFMEM5QUFDNkBtYWMuY29tPg==","inReplyToHeader":"PDM3NTY0MTNiMDgwNDAzMDgzOXEzODQ1ZGJiZXQ0MDQ0ZDBjZjIyNWEwOTQwQG1haWwuZ21haWwuY29tPg==","referencesHeader":"PDM3NTY0MTNiMDgwNDAyMjIwMXIzMGJjZjE0M29mMjFkZWVjYmQyZDdkYTQ0QG1haWwuZ21haWwuY29tPiA8Mzc1NjQxM2IwODA0MDMwODM5cTM4NDVkYmJldDQwNDRkMGNmMjI1YTA5NDBAbWFpbC5nbWFpbC5jb20+"},"prevInTopic":10592,"nextInTopic":10595,"prevInTime":10593,"nextInTime":10595,"topicId":10592,"numMessagesInTopic":16,"msgSnippet":"Leonardo, it is all about minimizing the assumptions (and hence the coupling) the client of a Web application may make. When you (the client) make your way","rawEmail":"Return-Path: &lt;algermissen1971@...&gt;\r\nX-Sender: algermissen1971@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 92369 invoked from network); 3 Apr 2008 16:34:59 -0000\r\nX-Received: from unknown (66.218.67.95)\n  by m56.grp.scd.yahoo.com with QMQP; 3 Apr 2008 16:34:59 -0000\r\nX-Received: from unknown (HELO smtpoutm.mac.com) (17.148.16.81)\n  by mta16.grp.scd.yahoo.com with SMTP; 3 Apr 2008 16:34:59 -0000\r\nX-Received: from mac.com (asmtp001-s [10.150.69.64])\n\tby smtpoutm.mac.com (Xserve/smtpout018/MantshX 4.0) with ESMTP id m33GYwjF003706;\n\tThu, 3 Apr 2008 09:34:58 -0700 (PDT)\r\nX-Received: from [10.0.1.200] (d131175.adsl.hansenet.de [80.171.131.175])\n\t(authenticated bits=0)\n\tby mac.com (Xserve/asmtp001/MantshX 4.0) with ESMTP id m33GYlKj016333;\n\tThu, 3 Apr 2008 09:34:49 -0700 (PDT)\r\nIn-Reply-To: &lt;3756413b0804030839q3845dbbet4044d0cf225a0940@...&gt;\r\nReferences: &lt;3756413b0804022201r30bcf143of21deecbd2d7da44@...&gt; &lt;3756413b0804030839q3845dbbet4044d0cf225a0940@...&gt;\r\nMime-Version: 1.0 (Apple Message framework v753)\r\nContent-Type: text/plain; charset=WINDOWS-1252; delsp=yes; format=flowed\r\nMessage-Id: &lt;F16B722A-99E7-4362-AA75-5961E0C9AAC6@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nContent-Transfer-Encoding: quoted-printable\r\nDate: Thu, 3 Apr 2008 18:34:39 +0200\r\nTo: Leonardo Boiko &lt;leoboiko@...&gt;\r\nX-Mailer: Apple Mail (2.753)\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Jan Algermissen &lt;algermissen1971@...&gt;\r\nSubject: Re: [rest-discuss] Understanding hypermedia as the engine of application state\r\nX-Yahoo-Group-Post: member; u=289191104; y=sXetPUG5GHTGMnlMDtNIm325lE_crr3K5badr5wrhJ6MWGFLXQlugV84\r\nX-Yahoo-Profile: algermissen1971\r\n\r\nLeonardo,\n\nit is all about minimizing the assumptions (and hence the coupli=\r\nng)  \nthe client of a Web application may make.\n\nWhen you (the client) make=\r\n your way through the Web app &#39;ordering a  \nbook at Amazon&#39; you know what k=\r\ninds of state changes there are you  \ncould look for, e.g. searching the ca=\r\ntalog, looking a the details of  \na book, looking at reviews, placing book =\r\nin cart, looking at cart,  \nplacing order of card content, canceling order =\r\netc.\n\nYou achieve any of these state changes by following typed links (you =\r\n \njust know the types from reading the page, a machine client would  \nneed =\r\na bit more detailed link types (e.g. the edit-link in Atom/APP)  \nto do the=\r\n same - conceptually it is the same).\n\nIt is your choice to perform any of =\r\nthe state changes the hypermedia  \nyou look at contains and it is the serve=\r\nr&#39;s choice\n\n- at what state you see which transition possibilities\n- which =\r\nuser sees which transition possibilities\n- which links to follow to achive =\r\nthe transition\n\nIOW, the servers delivers hypermedia to you that represents=\r\n your  \ncurrent state in the application (your interaction with Amazon).\nTh=\r\ne server can provide URIs you can go to to allways retrieve you  \ncurrent s=\r\ntate in case you lost it.\n\nThe most extreme effect of the constraint is tha=\r\nt the server can  \nchange the state machine while you execute it (because i=\r\nt is not hard  \nwired in the client!!). E.g. Amazon can introduce such a th=\r\ning as 1- \nclick without shutting down the clients that currently interact =\r\nwith  \nthe application - they simply see one more transition. Ifthey do not=\r\n  \nunderstand the semantics of &#39;1-click&#39; they can ignore them or follow  \nt=\r\nhe &#39;learn more&#39; transition - or be incrementally updated by the  \ndevelopme=\r\nnt teams in the case of machine clients.\n\nHTH,\n\nJan\n\n\nOn 03.04.2008, at 17:=\r\n39, Leonardo Boiko wrote:\n&gt; Hi list.  Recently Roy Fielding has posted in h=\r\nis blog about ROA as\n&gt; defined in the RESTful book; he said that ROA doesn&#39;=\r\nt focus enough in\n&gt; the &quot;hypertext constraint&quot;  =97 that is, &quot;hypermedia as=\r\n the engine of\n&gt; application state&quot; (aka HATEOAS). He also criticizes the\n&gt;=\r\n expression &quot;conectedness&quot; the book uses as being too resource-oriented\n&gt; a=\r\nnd too little engine-oriented.  Sam Ruby answered that they were\n&gt; trying t=\r\no describe it in a way easier to understand than HATEOAS[2].\n&gt;\n&gt; I&#39;ve asked=\r\n this in Sam&#39;s blog, but the discussion was already over and\n&gt; I guess no o=\r\nne noticed.  I&#39;m just some random guy confused with all\n&gt; the terminology, =\r\nand now I can&#39;t sleep properly until I&#39;m sure I\n&gt; understand what HATEOAS m=\r\nean.  I don&#39;t want to get out to buy alcohol\n&gt; &#39;cause it&#39;s cold, so could y=\r\nou guys help me sleep? I&#39;m copying the\n&gt; following list of tentative assert=\r\nions from my comment; do they look\n&gt; more or less correct, or am I saying t=\r\nhings I don&#39;t really understand?\n&gt;\n&gt;\n&gt; 1. The book term &quot;conectedness&quot; mean=\r\ns that the resources exposed by\n&gt;     the service have hyperlinks to one an=\r\nother.  If you draw them as a\n&gt;     graph, the whole graph is a single conn=\r\nected component.\n&gt;\n&gt; 2. &quot;Application state&quot; means whatever state is specifi=\r\nc to the\n&gt;     server-client interaction at hand; in other words, state tha=\r\nt&#39;s  \n&gt; only\n&gt;     visible to a specific client.\n&gt;\n&gt; 3. &quot;The hypertext cons=\r\ntraint&quot; Roy&#39;s talking about in his post means\n&gt;     the same thing as &quot;hype=\r\nrmedia as the engine of application  \n&gt; state&quot; in\n&gt;     his thesis[3].\n&gt;\n&gt; =\r\n4. And HATEOAS means that the changes in application state are\n&gt;     perfor=\r\nmed through hyperlinks.\n&gt;\n&gt; 5. Thus, HATEOAS implies the following requirem=\r\nents:\n&gt;\n&gt;     1. All the possible application states are exposed as resourc=\r\nes  \n&gt; (and\n&gt;         not implemented e.g. with cookies, javascript variabl=\r\nes and  \n&gt; whatnot).\n&gt;\n&gt;     2. All the possible state changes are exposed =\r\nas hyperlinks.  This\n&gt;         implies conectedness, but is a stronger rest=\r\nriction.\n&gt;\n&gt; 6. Compared to simple conectedness, HATEOAS has the added bene=\r\nfit of\n&gt;     &quot;late binding of application alternatives&quot; (Roy).  In other  \n=\r\n&gt; words, the\n&gt;     path you take in the state graph is only decided at runt=\r\nime, when\n&gt;     you&#39;re actually using the application, and the server can  =\r\n\n&gt; present new\n&gt;     states and transitions.  These &quot;server-directed  \n&gt; tr=\r\nansitions&quot; (Assaf)\n&gt;     are how HATEOAS &quot;eliminates the need to do install=\r\nation and  \n&gt; updates\n&gt;     for web applications&quot; (Sam).\n&gt;\n&gt; References:\n&gt;\n=\r\n&gt; [1] http://roy.gbiv.com/untangled/2008/on-software-architecture\n&gt; [2] htt=\r\np://intertwingly.net/blog/2008/03/23/Connecting\n&gt; [3] http://article.gmane.=\r\norg/gmane.comp.web.services.rest/6874\n&gt;\n&gt; --\n&gt; Leonardo Boiko\n&gt;\n&gt; ---------=\r\n---------------------------\n&gt;\n&gt; Yahoo! Groups Links\n&gt;\n&gt;\n&gt;\n\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":69164307,"authorName":"mike amundsen","from":"mike amundsen &lt;mamund@...&gt;","profile":"mamund","replyTo":"SENDER","senderId":"ZcNvl_gtUqAN5gPbeHRJW_-ZVIfHRRmnE7i5CzfH-et9rVvzBXBWBMOi5Ahpew0tttu86sa4D1Ag8fpSPf4RbG8lllMOCRQ","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Loose coupling - a RESTful myth?","postDate":"1296931437","msgId":17324,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEFBTkxrVGltcGVzYUg1NXdTbj1idz1IM0tDVUpRN3IwVFZhK2lucEJKUkE5WUBtYWlsLmdtYWlsLmNvbT4=","inReplyToHeader":"PGlpanRtcytwMzRhQGVHcm91cHMuY29tPg==","referencesHeader":"PGlpanRtcytwMzRhQGVHcm91cHMuY29tPg=="},"prevInTopic":17323,"nextInTopic":17326,"prevInTime":17323,"nextInTime":17325,"topicId":17322,"numMessagesInTopic":13,"msgSnippet":"Jakob: (long-ish post...) A few things to consider when thinking about REST, loose coupling , and the examples you call out in your message... First, I think","rawEmail":"Return-Path: &lt;mca@...&gt;\r\nX-Sender: mca@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 12881 invoked from network); 5 Feb 2011 18:44:00 -0000\r\nX-Received: from unknown (98.137.34.44)\n  by m4.grp.sp2.yahoo.com with QMQP; 5 Feb 2011 18:44:00 -0000\r\nX-Received: from unknown (HELO mail-fx0-f41.google.com) (209.85.161.41)\n  by mta1.grp.sp2.yahoo.com with SMTP; 5 Feb 2011 18:44:00 -0000\r\nX-Received: by fxm12 with SMTP id 12so3438539fxm.28\n        for &lt;rest-discuss@yahoogroups.com&gt;; Sat, 05 Feb 2011 10:43:58 -0800 (PST)\r\nMIME-Version: 1.0\r\nX-Received: by 10.223.72.207 with SMTP id n15mr2174705faj.49.1296931437148; Sat,\n 05 Feb 2011 10:43:57 -0800 (PST)\r\nX-Received: by 10.223.117.74 with HTTP; Sat, 5 Feb 2011 10:43:57 -0800 (PST)\r\nIn-Reply-To: &lt;iijtms+p34a@...&gt;\r\nReferences: &lt;iijtms+p34a@...&gt;\r\nDate: Sat, 5 Feb 2011 13:43:57 -0500\r\nX-Google-Sender-Auth: Z74W6uyA1aot45RMuaWB5Kkrhhg\r\nMessage-ID: &lt;AANLkTimpesaH55wSn=bw=H3KCUJQ7r0TVa+inpBJRA9Y@...&gt;\r\nTo: Jakob Strauch &lt;jakob.strauch@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: mike amundsen &lt;mamund@...&gt;\r\nSubject: Re: [rest-discuss] Loose coupling - a RESTful myth?\r\nX-Yahoo-Group-Post: member; u=69164307; y=qfbouhOjbpFNzpo5O3a9UpE3KyhcgwBIJDsp4ldJNeCf\r\nX-Yahoo-Profile: mamund\r\n\r\nJakob:\n\n(long-ish post...)\n\nA few things to consider when thinking about RE=\r\nST, &#39;loose coupling&#39;,\nand the examples you call out in your message...\n\nFir=\r\nst, I think it&#39;s important to _not_ conflate loose coupling w/\nevolvability=\r\n over time. Several of your examples call out the possible\nnegative consequ=\r\nences of making changes to an already-deployed system.\nLoose coupling _alon=\r\ne_ will not eliminate these problems.\n\nSecond, Fielding identifies a set of=\r\n Architectural Properties of Key\nInterest[1]. It is worth noting that loose=\r\n coupling is not one of the\nitems he identifies. He names seven properties =\r\nthere; one of which is\nModifiability. He also breaks down Modifiability int=\r\no five\nsub-properties. Two of them (Extensibility and Reusability), he\nstat=\r\nes, can be encouraged through the use of loose coupling.\n\nFinally, to addre=\r\nss the general examples in your question:\n\nHTTP AUTH\nHTTP Authentication wa=\r\ns designed to be orthogonal, extensible, and\nnegotiable. Web browsers today=\r\n ship w/ support for a number of Auth\nschemes and will actively negotiate w=\r\n/ servers for a &#39;best match.&#39;\nImplementing solutions that support only one =\r\nAuth scheme (i.e. OAuth)\ninvites trouble for systems that must participate =\r\nin heterogeneous\ndistributed networks. Esp. if the server decides to _drop_=\r\n one scheme\nand replace it with another.  A better tactic is to _add_ schem=\r\nes over\ntime, but not take them away. And only add schemes that support the=\r\n\nHTTP Authentication extensibility|negoitation model.\n\nDOMAIN CHANGES\nAs yo=\r\nu point out, adding new &#39;concepts&#39; to a domain space after\ndeployment will =\r\ncause problems. If you determine the new &#39;concept&#39;s\nMUST be supported by AL=\r\nL clients and servers, you are likely to\ninvalidate all existing participan=\r\nts. However, if you the new concepts\nare treated as optional, existing part=\r\nicipants can continue to use the\nsystem alongside new clients and servers w=\r\nho can take advantage of the\nnew concepts. Another approach is to add new c=\r\noncept&#39;s via\nCode-on-Demand (scripts, plugins, etc.) and thus push all the\n=\r\ndomain-specific details into hosted code on the client. The Web\nbrowser is =\r\na good example (again). This does not, however, solve the\nproblem of requir=\r\ned concepts for other servers.\n\nMEDIA TYPE CHANGES\nThis is really the same =\r\nissue as the DOMAIN CHANGES, I think. If you\npurposely make breaking change=\r\ns (ones that do not support backward\nand|or forward compatibility) all clie=\r\nnts and servers will need to be\nre-coded to accept the new media type. In m=\r\ny experience, making these\nbreaking changes is rarely _required_ but is sti=\r\nll often done. The W3C\nhas a decent write up on techniques to avoid making =\r\nthese mistakes\n[2].\n\nMY UNSOLICITED ADVICE\nI can pass along some techniques=\r\n I employ when working to develop\nsystems that can safely evolve over time.=\r\n  What follows is not &quot;REST,&quot;\njust my personal approach to follow Fielding&#39;=\r\ns principles. You will\nprobably find others on this list with similar _and_=\r\n contradictory\nadvice.\n\nStart with the Media Type(s)\nFind one that will fit=\r\n your Protocol (HTTP, FTP, XMPP) needs first.\nXHTML is still my weapon of c=\r\nhoice&lt;g&gt;. If you decide to design your\nown type; do the hard work needed to=\r\n make it fully support the target\ntransfer protocols (HTTP, FTP, etc.). Als=\r\no, be sure to make the media\ntype design allow for evolvability w/o breakin=\r\ng existing clients or\nservers.  Also, if all participants &quot;code-to-the-medi=\r\na-type&quot; many\nproblems of selecting technologies, languages, etc.become moot=\r\n points.\n\nClearly define your Domain Protocol\nYou need to be able to identi=\r\nfy the domain-specific elements of your\ndesign clearly. Use of &quot;@rel&quot; can g=\r\no a long way to _expressing_ domain\nconcepts, but might not be enough. Cust=\r\nom element names (in XML&#92;JSON\nformats) or element @id or @class values (HTM=\r\nL family) may also be\nneeded to fully express your domain. The domain proto=\r\ncol is usually\nthe most difficult to document and express adequately. Takin=\r\ng the time\nto do it right here will reduce many problems over the issue of\n=\r\nevolvability over time.\n\nDrive application flow through hypermedia links\nSt=\r\nay clear of &quot;orchestration&quot; or other static forms of app-flow\nmanagement. I=\r\nnstead provide links and forms within every response that\nthe client can us=\r\ne to advance the application. Above all DO NOT write\nany application-flow c=\r\node into the client. This will be the first (and\nmost-often) aspect of your=\r\n system to &#39;break&#39; when a change is needed.\nSwitching to hypermedia-driven =\r\ncoding is a major shift (esp. for\nclient coding), but worth the effort.\n\nKe=\r\nep Authentication completely orthogonal to your app-flow\nDo not make &quot;log-i=\r\nn/log-out&quot; part of your work flow. Always model\nauthencation as a layer usi=\r\nng the extensible/negotiable HTTP Auth\nmodel. Mange authorization by mappin=\r\ng transfer protocol methods to\nidentified resources. IOW, make sure the pub=\r\nlic resource model is the\nmodel for which you provide authorization - nothi=\r\nng else.\n\nMaintain Separation of Concerns (SoC) between first-class element=\r\ns of the system\nThe following items should be treated as separate concerns:=\r\n URIs,\nresources, representations, authentication, processing, and storage.=\r\n\nIOW, any of these aspects of the system should be change-able w/o\nbreaking=\r\n other parts of the system.  Product names, frameworks,\nstorage medium, dat=\r\na formats, auth schemes, public URIs, etc.should\nall be able to evolve inde=\r\npendently over time without harming any\nparticipants.\n\nI hopefully these co=\r\nmments give you some ideas on how to approach your\nown scenarios.\n\nMCA\n\n[1]=\r\n http://www.ics.uci.edu/~fielding/pubs/dissertation/net_app_arch.htm#sec_2_=\r\n3\n[2] http://www.w3.org/2001/tag/doc/versioning-strategies\n\nmca\nhttp://amun=\r\ndsen.com/blog/\nhttp://twitter.com@mamund\nhttp://mamund.com/foaf.rdf#me\n\n\n#R=\r\nESTFest 2010\nhttp://rest-fest.googlecode.com\n\n\n\n\nOn Sat, Feb 5, 2011 at 11:=\r\n26, Jakob Strauch &lt;jakob.strauch@...&gt; wrote:\n&gt; It is often stated, that =\r\nRESTful services decouples client and server, as e.g. stated here [1]:\n&gt;\n&gt; =\r\n&quot;Coupling between client and server is removed, server owners need not know=\r\n about client particularities to evolve the servers without breaking client=\r\ns.&quot;\n&gt;\n&gt; But i think, the most server changes will break even the RESTfuls=\r\n=B4 clients. At least in business scenarios:\n&gt;\n&gt; 1. Think about changing yo=\r\nur application protocol due to business changes. Can a client be generic en=\r\nough to compensate this? The link rel semantics of &quot;next&quot; are very clear. B=\r\nut what if i need a relation type, which is not yet described? Which is too=\r\n domain specific.\n&gt;\n&gt; 2. What about the cross-cutting concerns like securit=\r\ny? If i switch from HTTP Basic auth to OAuth, can a generic client adapt to=\r\n this situation automatically?\n&gt;\n&gt; 3. What if i have to evolve a media type=\r\n, which i=B4m using, and i need a new one? (for example by adding new link =\r\nrelations or data fields)\n&gt;\n&gt; In my opinion, i don=B4t see a business value=\r\n in supporting 100% REST style. It might work with &quot;simple&quot; application pro=\r\ntocols like ATOM (which is very nice, but also very generic).\n&gt;\n&gt; Maybe som=\r\neone can enlighten me...\n&gt;\n&gt; [1] http://nordsc.com/ext/classification_of_ht=\r\ntp_based_apis.html\n&gt;\n&gt;\n&gt;\n&gt; ------------------------------------\n&gt;\n&gt; Yahoo! =\r\nGroups Links\n&gt;\n&gt;\n&gt;\n&gt;\n\n"}}
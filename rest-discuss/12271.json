{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"mMrllevKlwblWEJLu62P19bQ6-XsYq2IPJ0zm-3NMBArxQlyimy1na4A8_ydCAuwslm-t4KGP6Zy6m0NsCTGTdh8pbpxq3xWjKQO0PRpOw","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] An approach to deleting multiple resources use one  DELETE","postDate":"1237541496","msgId":12271,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMDkwMzIwMDMzMTM2LjE2OThkNGY2LmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","inReplyToHeader":"PDJmYTU1NDQ3MDkwMzE5MDUwM2szZmMxYzhmMHRlYzk1MjYwODA1YmNjNGNmQG1haWwuZ21haWwuY29tPg==","referencesHeader":"PGU3OGJkYmMwMDkwMjI0MDczOHY0ODRkNmU5NGg0NDQ5ZWIwYjY3YTI4ZDJlQG1haWwuZ21haWwuY29tPgk8MjAwOTAzMTgxNTE5MzYuNDkzMzlmZTQuZXJpY0BiaXNvbnN5c3RlbXMubmV0Pgk8NTAzN2I2ZTQwOTAzMTgxNDI1cDY2Y2E1NzhldWY2NWIzNDAyN2NkY2I4YWVAbWFpbC5nbWFpbC5jb20+CTwyMDA5MDMxODE2MzYwMS40MDQ3ZDA2Yi5lcmljQGJpc29uc3lzdGVtcy5uZXQ+CTw1MDM3YjZlNDA5MDMxODE2MzhuNTVhYWM3ZTBuMzdkMjJkYzNiYzE0YjE3MEBtYWlsLmdtYWlsLmNvbT4JPDIwMDkwMzE4MjEwNTI3LmZlNDJkYWZlLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPDUwMzdiNmU0MDkwMzE5MDA0MXI1MzYwZTA4ZGlmNzE4ZTI3MDQ5MDQwYTljQG1haWwuZ21haWwuY29tPgk8MjAwOTAzMTkwMjA2MDMuMjk5NDBhZTYuZXJpY0BiaXNvbnN5c3RlbXMubmV0Pgk8NTAzN2I2ZTQwOTAzMTkwMTE4aDM4YjhmMDRkeTQzZWIxNzE4YTIwYjEyOGNAbWFpbC5nbWFpbC5jb20+CTwyMDA5MDMxOTAzMTUzOC41ODllZjdhNi5lcmljQGJpc29uc3lzdGVtcy5uZXQ+CTwyZmE1NTQ0NzA5MDMxOTA1MDNrM2ZjMWM4ZjB0ZWM5NTI2MDgwNWJjYzRjZkBtYWlsLmdtYWlsLmNvbT4="},"prevInTopic":12268,"nextInTopic":12272,"prevInTime":12270,"nextInTime":12272,"topicId":12154,"numMessagesInTopic":112,"msgSnippet":"... Because in REST, there is no provision to perform some action against multiple URIs in one request.  If you have a resource that lists all clients whose","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 7055 invoked from network); 20 Mar 2009 09:31:14 -0000\r\nX-Received: from unknown (69.147.108.202)\n  by m4.grp.re1.yahoo.com with QMQP; 20 Mar 2009 09:31:14 -0000\r\nX-Received: from unknown (HELO mxout-08.mxes.net) (216.86.168.183)\n  by mta3.grp.re1.yahoo.com with SMTP; 20 Mar 2009 09:31:13 -0000\r\nX-Received: from BigBison (unknown [65.117.211.162])\n\t(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))\n\t(No client certificate requested)\n\tby smtp.mxes.net (Postfix) with ESMTPSA id 17726D05A0;\n\tFri, 20 Mar 2009 05:31:12 -0400 (EDT)\r\nDate: Fri, 20 Mar 2009 03:31:36 -0600\r\nTo: =?ISO-8859-1?Q?Ant=F3nio?= Mota &lt;amsmota@...&gt;\r\nCc: rest-discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nMessage-Id: &lt;20090320033136.1698d4f6.eric@...&gt;\r\nIn-Reply-To: &lt;2fa554470903190503k3fc1c8f0tec95260805bcc4cf@...&gt;\r\nReferences: &lt;e78bdbc00902240738v484d6e94h4449eb0b67a28d2e@...&gt;\n\t&lt;20090318151936.49339fe4.eric@...&gt;\n\t&lt;5037b6e40903181425p66ca578euf65b34027cdcb8ae@...&gt;\n\t&lt;20090318163601.4047d06b.eric@...&gt;\n\t&lt;5037b6e40903181638n55aac7e0n37d22dc3bc14b170@...&gt;\n\t&lt;20090318210527.fe42dafe.eric@...&gt;\n\t&lt;5037b6e40903190041r5360e08dif718e27049040a9c@...&gt;\n\t&lt;20090319020603.29940ae6.eric@...&gt;\n\t&lt;5037b6e40903190118h38b8f04dy43eb1718a20b128c@...&gt;\n\t&lt;20090319031538.589ef7a6.eric@...&gt;\n\t&lt;2fa554470903190503k3fc1c8f0tec95260805bcc4cf@...&gt;\r\nOrganization: Bison Systems Corporation\r\nX-Mailer: Sylpheed 2.4.5 (GTK+ 2.10.14; i686-pc-mingw32)\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nSubject: Re: [rest-discuss] An approach to deleting multiple resources use\n one  DELETE\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\nAnt=F3nio Mota wrote:\n\n&gt;\n&gt; I don&#39;t see why it is unrestfull for the client =\r\nto say to the server\n&gt; \n&gt; delete all the clients whose name starts with a &#39;=\r\nA&#39;\n&gt;  or\n&gt; delete all the journal entries between 2008-01-01 and 2008-12-31=\r\n\n&gt; \n\nBecause in REST, there is no provision to perform some action against\n=\r\nmultiple URIs in one request.  If you have a resource that lists all\nclient=\r\ns whose names begin with &#39;A&#39; then you can have the client iterate\nover the =\r\nURIs in that resource and DELETE them each in turn.  A REST\nrequest consist=\r\ns of one action taken against one URI, such that each\naction can receive a =\r\nresponse which includes a status code.\n\n&gt;\n&gt; It&#39;s easy to do a\n&gt; \n&gt; GET /cli=\r\nents/A*\n&gt; \n&gt; so why not a DELETE /clients/A*\n&gt; \n\nA REST request consists of=\r\n one action taken against one URI.  You issue\na GET request against a URI, =\r\nand a representation of the resource is\nreturned.  There is no such thing a=\r\ns a wildcard request in REST, even\nthough you can certainly code an applica=\r\ntion this way.  If you really\nwant to see a list of all clients whose name =\r\nbegins with &#39;A&#39; then:\n\nGET /search?clients=3DA*\n\nNow you&#39;ve defined a resou=\r\nrce, which has a URI, and contains the\ndesired data.  But, a DELETE against=\r\n /search?clients=3DA* would not be\nexpected, in a generic interface, to del=\r\nete a bunch of individual\nrecords.  It would be expected to delete the reso=\r\nurce identified\nas /search?clients=3DA* and nothing else.  In a generic int=\r\nerface, a\nDELETE request is issued against each URI targeted for deletion.\n=\r\n\n&gt; \n&gt; Also, if you POST a batch-delete operation\n&gt; \n&gt; POST /clients/deleteF=\r\nactory\n&gt; 1001;1002;1003\n&gt; \n&gt; you are just passing parameters to a resource =\r\nwhose purpose is to\n&gt; delete clients, not to operate against other resource=\r\ns. Maybe it is\n&gt; deleting resources /client/1001 ... but that is a side-eff=\r\nect *of the\n&gt; server*.\n&gt;\n\nNo, it is not.  The client&#39;s request is that the =\r\nserver delete records\n1001-1003.  Those are the semantics of the interactio=\r\nn between\ncomponents, even if the method is an overloaded POST.  What you a=\r\nre\ndescribing is a textbook example of an RPC request, where you are\npassin=\r\ng parameters to some procedure you&#39;re calling on the server.\n\nThe question =\r\nto ask yourself is, &quot;What is returned when I GET /clients/\ndeleteFactory?&quot; =\r\n Nothing?  That strongly suggests an RPC endpoint, not\na REST resource.  Th=\r\ne purpose of that RPC call is to delete resources\nwithout using the DELETE =\r\nmethod.  In REST, the proper way to do this is:\n\nDELETE /client/1001\nDELETE=\r\n /client/1002\nDELETE /client/1003\n\nEach resource you want to delete has a U=\r\nRI.  Each URI has a DELETE\nmethod.  So, call the DELETE method of the URI y=\r\nou want to delete.\nIt&#39;s that straightforward, this is not a wheel which nee=\r\nds reinventing.\n\n&gt;\n&gt; This request requests a &quot;business&quot; operation on a reso=\r\nurce,\n&gt; but from the point-of-view of the client the client doesen&#39;t even k=\r\nnow\n&gt; that exists resources corresponding to 1001...\n&gt; \n\nThe client doesn&#39;t=\r\n need to know.  If the client issues a DELETE request\nto /client/1001 and t=\r\nhat resource doesn&#39;t exist, the response will be\n404 (or perhaps 410 if it =\r\nused to exist).\n\n&gt;\n&gt; Now I admit that having resources like this smells ter=\r\nribly like using\n&gt; verbs in uri&#39;s and thus like RPC. And it doesen&#39;t solve =\r\nthe cache\n&gt; problem.\n&gt; \n\nExactly.  But if you follow REST you won&#39;t have RP=\r\nC endpoints, and your\ncaching problems will have already been solved.\n\n&gt;\n&gt; =\r\nAlso, you said elsewhere that the client sends a &quot;application-state&quot;\n&gt; to t=\r\nhe server, is that a lapse of your, is not the other way around?\n&gt; \n\nYes, I=\r\n&#39;m correct.  ;-)  REST stands for REpresentational State\nTransfer.  Clients=\r\n and servers communicate with each other by passing\nrepresentations of the =\r\nstate of a resource back and forth.  Imagine a\nresource, &quot;picture of me&quot;.  =\r\nI have a representation of this resource on\nmy workstation, &quot;eric.jpg&quot;.  I =\r\nwant to post this photo to my website,\nso I PUT the eric.jpg representation=\r\n to the URI http://ericjbowman.com/\nphotos/eric.jpg.  Before I uploaded thi=\r\ns representation, this was the\napplication state:\n\nGET /photos/eric.jpg\n404=\r\n Not Found\n\nAfter I uploaded the image, this became the new application sta=\r\nte:\n\nGET /photos/eric.jpg\n200 OK + eric.jpg\n\nBy transferring to the server =\r\na representation of my desired application\nstate, I have instructed the ser=\r\nver (by making a PUT request) to change\nthe state of /photos/eric.jpg from =\r\nnot found, to the new state where it\nidentifies the resource &quot;picture of me=\r\n&quot;, and returns the representation\nI uploaded on subsequent GET requests.\n\n&gt;=\r\n\n&gt; I acknowledge that this thread is getting too &quot;dense&quot; for my\n&gt; experienc=\r\ne with REST so bear with me if I&#39;m being too &quot;simplistic&quot;...\n&gt; \n\nActually, =\r\nI think you&#39;re making this all too complicated on yourself...\nbut don&#39;t wor=\r\nry about it, REST is not easy to grasp.  Primarily because\nit&#39;s so differen=\r\nt than anything we&#39;ve been taught before about\nsoftware.  My advice is to l=\r\net go of this notion of &quot;factory resources&quot;\nas it will cause you no end of =\r\nconfusion to try to think of REST in such\nterms.\n\n-Eric\n\n"}}
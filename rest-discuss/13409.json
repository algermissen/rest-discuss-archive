{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":403399802,"authorName":"Benjamin Carlyle","from":"Benjamin Carlyle &lt;benjamincarlyle@...&gt;","profile":"fuzzybsc","replyTo":"SENDER","senderId":"8jCiOaS1DdiX7asnXx49DjhoVbzJZsCullidVCFwA9jCiT-f2HcDXXJWSLYjJfor9mtVHLKjvfY0U7T3Hxohful7UNtCOwZSiA9TZ1XHKWf0lpDtDhMOhMvJ5Q","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Terminology: &quot;Resource Types&quot;?","postDate":"1253456245","msgId":13409,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDU0NDhjZmQ5MDkwOTIwMDcxN3k3NzRjNTIxYW5mMWRhMWQ2MGRmY2UzMzA4QG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PDFDMDg4RDIxLTYxQjMtNEQ0NS1CQUI5LUNCNEQ0NzEyMUEzM0BtYWMuY29tPg==","referencesHeader":"PDc3RTlCQTVBLTBCRkItNDJGQi04NjQzLTRCMzhERUU3OTYwREBpbm5vcS5jb20+CSA8NjQ1NkVDNzAtOUYzQy00RTZBLTkyMTMtODRDQTg0REQyNkY4QG1hYy5jb20+CSA8NTQ0OGNmZDkwOTA4MjgxOTI1eTIzM2U4Yjd1NWNkYzIxZjQxYjU2MmQ2OEBtYWlsLmdtYWlsLmNvbT4JIDwxQzA4OEQyMS02MUIzLTRENDUtQkFCOS1DQjRENDcxMjFBMzNAbWFjLmNvbT4="},"prevInTopic":13211,"nextInTopic":13415,"prevInTime":13408,"nextInTime":13410,"topicId":11221,"numMessagesInTopic":44,"msgSnippet":"... Governance of a REST architecture is applied at a uniform contract level and at a service interface description level. Version control of a uniform","rawEmail":"Return-Path: &lt;fuzzybsc@...&gt;\r\nX-Sender: fuzzybsc@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 37075 invoked from network); 20 Sep 2009 14:18:26 -0000\r\nX-Received: from unknown (69.147.108.200)\n  by m4.grp.re1.yahoo.com with QMQP; 20 Sep 2009 14:18:26 -0000\r\nX-Received: from unknown (HELO mail-pz0-f202.google.com) (209.85.222.202)\n  by mta1.grp.re1.yahoo.com with SMTP; 20 Sep 2009 14:18:26 -0000\r\nX-Received: by pzk40 with SMTP id 40so1852897pzk.7\n        for &lt;rest-discuss@yahoogroups.com&gt;; Sun, 20 Sep 2009 07:17:25 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.143.24.42 with SMTP id b42mr251737wfj.41.1253456245890; Sun, \n\t20 Sep 2009 07:17:25 -0700 (PDT)\r\nIn-Reply-To: &lt;1C088D21-61B3-4D45-BAB9-CB4D47121A33@...&gt;\r\nReferences: &lt;77E9BA5A-0BFB-42FB-8643-4B38DEE7960D@...&gt;\n\t &lt;6456EC70-9F3C-4E6A-9213-84CA84DD26F8@...&gt;\n\t &lt;5448cfd90908281925y233e8b7u5cdc21f41b562d68@...&gt;\n\t &lt;1C088D21-61B3-4D45-BAB9-CB4D47121A33@...&gt;\r\nDate: Mon, 21 Sep 2009 00:17:25 +1000\r\nX-Google-Sender-Auth: 97997bc727390850\r\nMessage-ID: &lt;5448cfd90909200717y774c521anf1da1d60dfce3308@...&gt;\r\nTo: Jan Algermissen &lt;algermissen1971@...&gt;\r\nCc: Stefan Tilkov &lt;stefan.tilkov@...&gt;, REST Discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Type: text/plain; charset=UTF-8\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Benjamin Carlyle &lt;benjamincarlyle@...&gt;\r\nSubject: Re: [rest-discuss] Terminology: &quot;Resource Types&quot;?\r\nX-Yahoo-Group-Post: member; u=403399802; y=MPhOi6-drD5H6oFIY174n-oKc13f4gtIt8FgLwnSuR4JoJE\r\nX-Yahoo-Profile: fuzzybsc\r\n\r\n2009/8/31 Jan Algermissen &lt;algermissen1971@...&gt;:\n&gt; What I am currently trying to get my head around is this:\n&gt;\n&gt; When viewing a REST API as essentially a set of link semantics how\n&gt; can we version such APIs? And do we need to version them at all?\n&gt;\n&gt; I looked at the Atom Publishing Protocol and it does not say that it\n&gt; is a particular version. Suppose we&#39;d add another top level document\n&gt; type that brings in new capabilities - would that lead to APP 2.0? And\n&gt; how would one communicate this to clients?\n\nGovernance of a REST architecture is applied at a uniform contract\nlevel and at a service interface description level. Version control of\na uniform contract is broken up into several facets:\n1. A syntax for resource identifiers that can\n1.1 Be resolved to the point where requests can be issued based on the\nidentifier\n1.2 Includes enough characters to allow a service to defer state back\nto its consumers within these identifiers. Resource identifiers act as\nmessages from the service to itself when state has been returned to\nthe consumer between requests.\n2. A set of methods that are abstractions capable of expressing a\nrange of different service capabilities. This may be one specification\n(eg rfc2616 defining the methods - including response codes - of\nHTTP/1.1) or split into multiple specifications to cover all of the\nmethods and the fundamental communication patterns they permit\n3. A set of media types, which will almost certainly have\ncorresponding individually versioned specifications\nEach service itself has a description of its interface in terms of a\nset of resources and methods on those resources that correspond to the\ncapabilities of the service. This is versioned independently of the\nuniform contract but contains references to the uniform contract for\nmethod and media type definitions.\n\nAt any particular time there will (should) be a small number of ways\nof moving information around the architecture (the methods) that while\nthey may appear low-level (eg get, put, delete) are each high-level\nabstractions of a significant number of service capabilities. For each\nkind of information that can be exchanged in the architecture there\nare a small number of ways of encoding that information. In general,\neach resource is expected to understand all of the elements of the\nuniform contract that are relevant to it and which correspond to\nservice capabilities the service wishes to express.\n\nThe outcome is a high level of integration maturity. One URL can be\nsubstituted for another in the architecture at runtime. Regardless of\nthe specific URL or service the consumer knows what kind of message to\nconstruct. The service knows how to interpret the request and how to\nreturn an appropriate response in a form the consumer understands. The\nuniform interface of each resource enables communication and then gets\nout of the way, permitting dynamic reconfiguration to occur as\nrequired.\n\n"}}
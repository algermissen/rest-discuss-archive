{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":23186829,"authorName":"Paul Prescod","from":"Paul Prescod &lt;paul@...&gt;","replyTo":"SENDER","senderId":"_CkjVJ2-qcfLVGgdyDM7gFFlG1hRiKby0Y4EYjAAkg4ruXipITbdInNVTjsOhaI1TiKvxM-CgqaVnKrQ_WTMeQgab18V4Q","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Why is HTTP hard to design with?","postDate":"1011992276","msgId":304,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDNDNTFDNkQ0LjRCMDA0MUNAcHJlc2NvZC5uZXQ+","referencesHeader":"PFBpbmUuV05ULjQuNDMuMDIwMTI1MTQyMTAwMC4xNDAwLTEwMDAwMEBnYW5kb2xwaC5BU0dBUkQuam1zPg=="},"prevInTopic":300,"nextInTopic":306,"prevInTime":303,"nextInTime":305,"topicId":209,"numMessagesInTopic":77,"msgSnippet":"... There is nothing wrong with inventing a new protocol to solve new problems or to solve old problems better. ... Well, millions of people access their email","rawEmail":"Return-Path: &lt;paul@...&gt;\r\nX-Sender: paul@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_0_1_3); 25 Jan 2002 21:52:49 -0000\r\nReceived: (qmail 39173 invoked from network); 25 Jan 2002 20:58:55 -0000\r\nReceived: from unknown (216.115.97.171)\n  by m12.grp.snv.yahoo.com with QMQP; 25 Jan 2002 20:58:55 -0000\r\nReceived: from unknown (HELO smtp1.ActiveState.com) (209.17.183.249)\n  by mta3.grp.snv.yahoo.com with SMTP; 25 Jan 2002 20:58:55 -0000\r\nReceived: from smtp3.ActiveState.com (smtp3.ActiveState.com [192.168.3.19])\n\tby smtp1.ActiveState.com (8.11.6/8.11.6) with ESMTP id g0PKwr106356;\n\tFri, 25 Jan 2002 12:58:53 -0800\r\nReceived: from prescod.net (ssh1.ActiveState.com [192.168.3.32])\n\tby smtp3.ActiveState.com (8.11.6/8.11.6) with ESMTP id g0PKwqe00337;\n\tFri, 25 Jan 2002 12:58:52 -0800\r\nMessage-ID: &lt;3C51C6D4.4B0041C@...&gt;\r\nDate: Fri, 25 Jan 2002 12:57:56 -0800\r\nX-Mailer: Mozilla 4.76 [en] (Windows NT 5.0; U)\r\nX-Accept-Language: en\r\nMIME-Version: 1.0\r\nTo: &quot;S. Alexander Jacobson&quot; &lt;alex@...&gt;, rest-discuss@yahoogroups.com\r\nSubject: Re: [rest-discuss] Why is HTTP hard to design with?\r\nReferences: &lt;Pine.WNT.4.43.0201251421000.1400-100000@...&gt;\r\nContent-Type: text/plain; charset=us-ascii\r\nContent-Transfer-Encoding: 7bit\r\nX-PerlMx-Spam: Gauge=, Probability=0%, Report=INTERNAL_HOST\r\nX-Filtered-By: PerlMx makes it fast and easy.  See http://www.ActiveState.com/Products/PerlMx/Header\r\nFrom: Paul Prescod &lt;paul@...&gt;\r\nX-Yahoo-Group-Post: member; u=23186829\r\n\r\n&quot;S. Alexander Jacobson&quot; wrote:\n&gt; \n&gt;...\n&gt; \n&gt; That&#39;s nuts.  Then you not only have to write\n&gt; software you have to invent a whole new\n&gt; protocol!!!  \n\nThere is nothing wrong with inventing a new protocol to solve new\nproblems or to solve old problems better.\n\n&gt; .. In particular, you have to\n&gt; rewrite RFC2821(SMTP) to ride on top of HTTP.\n\nWell, millions of people access their email through HTTP (with or\nwithout HTML). And millions of people do File Transfers without the File\nTransfer Protocol. So I don&#39;t see why SMTP will remain immune to the\nonslaught of HTTP.\n\nBut anyhow, we&#39;re talking about inventing new protocols anyhow. If\nyou&#39;re sending purchase orders over SMTP and you have complex workflows\netc., you are inherently inventing a new protocol. Here&#39;s what an essay\nI am writing says:\n\n&lt;p&gt;There is a subtlety here: people think that they can get network\neffects by switching from HTTP to SMTP (e.g. for asychronous\nmessaging). Of course there is some truth in this. If you were writing\nan email client today it would not make sense to support HTTP instead\nof SMTP. That&#39;s simple support for a legacy code base -- like\nsupporting CICS.\n\n&lt;p&gt;On the other hand, if you were developing a new application\nthen the network effects in SMTP&#39;s favour are not so strong. Getting\nbits from one machine to another asynchronously is the least of your\nproblems in a complicated buzzword-compliant, secure, work-flow based\nbusiness-to-business application. The hard problems involve security\nand accountability. And those hard problems are easier solved with a\nuniversal addressing mechanism like the one built into HTTP.\n\n&lt;p&gt;People\nbelieve that SMTP is great because it allows asynchronous notifications\nbut KnowNow has shown how a few hundred bytes of JavaScript can\nimplement peer-to-peer asynchronous notifications using HTTP. Would an\nSMTP solution be any smaller or simpler?\n\n&gt;...\n&gt; &gt; If you&#39;re building a *new* application\n&gt; &gt; then you need to write the software on the client and server sides\n&gt; &gt; anyhow. We all know how little effort it takes to put HTTP on the client\n&gt; &gt; side. I&#39;ve shipped products with HTTP servers written in four different\n&gt; &gt; languages.\n&gt; \n&gt; Writing a dumb SMTP server is pretty straightforward too.  BFD.\n\nRight. So choosing based on what server you have hanging around makes no\nsense. You should choose based on which will help you to model your app\nin the most flexible, scalable, extensible, secure, reliable way. HTTP\nhas URIs. They allow all of that stuff. SMTP does not. It makes that\nstuff really hard.\n\n&gt;...\n&gt; Then your definition of RPC is incoherent.\n&gt; Suppose that XML-RPC were modified so that the\n&gt; method name appeared in the URL rather than the\n&gt; body, would it stop being RPC?\n\nIt depends? Are they setting up private namespaces in the parameters? Or\nare all parameters either URIs or resource representations?\n\n&gt;...\n&gt; &gt; No, it is just a separation of concerns. Yes it takes more round-trips\n&gt; &gt; than the SMTP system. It is also much more functional. The client can\n&gt; &gt; check for status whenever it wants. Other clients can be attached to the\n&gt; &gt; *same* computation because it is a first-class resource. Clients can\n&gt; &gt; share information about what computations they are watching by sharing\n&gt; &gt; the URI. \n&gt; \n&gt; Nothing prevents the server from returning a\n&gt; status URL AND commiting to deliver via email.\n\nFine. Now you are starting to make your solution more complex so that it\nstarts to resemble mine in scope and features. How does your client\ncancel the request if it realizes that the computation is wasted?\n\n&gt;...\n&gt; Your point about disco clients is just insane.\n&gt; Have you heard of SMTP relay?\n\nCan you read?\n\n&gt; &gt; Disconnected clients have the option of polling which they do\n&gt; &gt; not with SMTP (unless there is a mailbox intermediary).\n\nSMTP relay *is* the mailbox intermediary. Sometimes polling is a better\nsolution. That&#39;s why POP uses it. My solution allows polling *and*\ndirect notification *and* intermediated queued notification. And as a\nnew RESTer pointed out it would be easy to add server-queued\nnotification.\n\n&gt;...\n&gt; &gt; The point is that the same system could support *both*. This would be\n&gt; &gt; much harder to do with SMTP.\n&gt; \n&gt; I am not objecting to supporting both!  My\n&gt; contention is simply that using HTTP only\n&gt; precludes callbacks.\n\nI have no idea what you&#39;re saying. How can using HTTP preclude\ncallbacks?\n\n&gt; ...\n&gt; &gt; If I use XHTML or RSS am I using XML? It is real life HTTP up until the\n&gt; &gt; point that where I start doing things against the HTTP model such as\n&gt; &gt; inventing private namespaces or telling the server what to do through\n&gt; &gt; method names or using POST for logical queries.\n&gt; \n&gt; Terrorist_or_not.com uses POST for logical\n&gt; queries?  Is that a problem?  How would you solve\n&gt; it?\n\nIf you want asynch then you are involving server state, so you need to\nuse POST. \n\n&gt; My general point is that you are defining a new\n&gt; protocol on which endpoints have to have made\n&gt; &quot;a priori agreement&quot; (to use MBs words).\n\nCall it a new protocol. What does it matter? Terrorist.com is going to\nrequire a new &quot;protocol&quot; in some sense regardless. Especially if you set\nup a status URI then you are setting up a protocol that spans *two\nother* protocols.\n\nWe&#39;re going to take the &quot;common problem&quot; of asynch notifications and\ndevelop standard conventions. If you want to call that a new protocol\nthen that&#39;s okay too. As longas we don&#39;t abuse HTTP as POSTing\ngetStateName does, then what does it matter what we call it?\n\nThe point is that everything that is already in HTTP is basically\n*right* and we are building on it, rather than working around the flaws\nin it.\n\n&gt;...\n&gt; Your argument is like saying that HTTP is not a\n&gt; new protocol because it already uses TCP/IP.\n\nAre cookies a new protocol? Or an extension to HTTP? \n\n&gt;...\n&gt; To be clear both to you and to Mike.  I am\n&gt; objecting to polling and to the work involved in\n&gt; reinventing the wheel on asynch.\n\nPolling is just an option. Not a requirement. HTTP asych does not\nrequire polling. \n\nReinventing the wheel is necessary if we want to bring asnch to the web.\nSMTP has no concept of URI. Therefore it is not web aware. That isn&#39;t\nsurprising since it predates the web. This is a big limitation that\nmakes it infeasible for many applications. Asynch HTTP is not an option.\nIt is something that needs to happen. Whether you use it for your\napplication or not is up to you.\n\n Paul Prescod\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":339031295,"authorName":"Sam Johnston","from":"Sam Johnston &lt;samj@...&gt;","profile":"sam.johnston@ymail.com","replyTo":"SENDER","senderId":"aXNL2rTAe_-1oml-d2hhwtYSD0rIKvk6uL9FI5FnAIqSlEoR6B2-Sm8DWMqrZYdACSh5hLrKcgZ7-oSD3ZNyE4V29A","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Using HTTP Link: headers for web linking \tnon-hypertext","postDate":"1246455393","msgId":13055,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIxNjA2ZGNmMDkwNzAxMDYzNnM0YzFkYTk1NHUyNGQxYzc4YjhkZDdlMGRlQG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PDJDQzA2RkE1LTkxMjItNEQ4Mi1BNEQ0LTZGRDI3MDUwMzQwREBzdWJidS5vcmc+","referencesHeader":"PDIxNjA2ZGNmMDkwNjI0MDU1M2szZDg4MjU4Mm00MjQ1NGZlNGNhNWU4ZkBtYWlsLmdtYWlsLmNvbT4JIDw0QTQ0MTZEMi41MDgwMzA0QGRlaG9yYS5uZXQ+CSA8Mjg1MDUwNjgtMTkzQS00MjE0LUI1RjUtMThGM0U5N0E5NkM0QHN1YmJ1Lm9yZz4JIDwyMTYwNmRjZjA5MDYzMDAzNDRnNGI5ZjdmYzNrYzUxNDYyNDc4NmVjMmNmZEBtYWlsLmdtYWlsLmNvbT4JIDwwRENDQTBEMC1GNDVGLTRENTYtQTI2Ni0zQjU1QjM4NDUzNzNAc3ViYnUub3JnPgkgPDgxNThhZDc1MDkwNjMwMTEzMnI0NTkxMDg4NHY1MjE2ZGVhZjQ3NWEzYWU4QG1haWwuZ21haWwuY29tPgkgPEYxOTEzOUQ0LUQ4RjAtNEMwRS04NDlDLThDQjZFRkQ1MjUwMEBzdWJidS5vcmc+CSA8MzM4NTU1QTMtODY5Qi00MkJCLTk0MTctMEVBQkI1N0Q4QTk2QHN1YmJ1Lm9yZz4JIDwyMTYwNmRjZjA5MDYzMDEzMDlsMjYyOWU4YjF3ZDQ4NzU1OTE3YTBlZWIwMUBtYWlsLmdtYWlsLmNvbT4JIDwyQ0MwNkZBNS05MTIyLTREODItQTRENC02RkQyNzA1MDM0MERAc3ViYnUub3JnPg=="},"prevInTopic":13054,"nextInTopic":13056,"prevInTime":13054,"nextInTime":13056,"topicId":12926,"numMessagesInTopic":42,"msgSnippet":"... You have designed your own interface with rules such as using your own identifiers, how to find the id field (which presumably lives in the URL and/or","rawEmail":"Return-Path: &lt;samj@...&gt;\r\nX-Sender: samj@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 24970 invoked from network); 1 Jul 2009 13:38:32 -0000\r\nX-Received: from unknown (69.147.108.201)\n  by m7.grp.re1.yahoo.com with QMQP; 1 Jul 2009 13:38:32 -0000\r\nX-Received: from unknown (HELO mail-ew0-f228.google.com) (209.85.219.228)\n  by mta2.grp.re1.yahoo.com with SMTP; 1 Jul 2009 13:38:32 -0000\r\nX-Received: by ewy28 with SMTP id 28so1130271ewy.24\n        for &lt;rest-discuss@yahoogroups.com&gt;; Wed, 01 Jul 2009 06:36:34 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.210.20.6 with SMTP id 6mr178103ebt.73.1246455393652; Wed, 01 \n\tJul 2009 06:36:33 -0700 (PDT)\r\nIn-Reply-To: &lt;2CC06FA5-9122-4D82-A4D4-6FD27050340D@...&gt;\r\nReferences: &lt;21606dcf0906240553k3d882582m42454fe4ca5e8f@...&gt;\n\t &lt;4A4416D2.5080304@...&gt;\n\t &lt;28505068-193A-4214-B5F5-18F3E97A96C4@...&gt;\n\t &lt;21606dcf0906300344g4b9f7fc3kc514624786ec2cfd@...&gt;\n\t &lt;0DCCA0D0-F45F-4D56-A266-3B55B3845373@...&gt;\n\t &lt;8158ad750906301132r45910884v5216deaf475a3ae8@...&gt;\n\t &lt;F19139D4-D8F0-4C0E-849C-8CB6EFD52500@...&gt;\n\t &lt;338555A3-869B-42BB-9417-0EABB57D8A96@...&gt;\n\t &lt;21606dcf0906301309l2629e8b1wd48755917a0eeb01@...&gt;\n\t &lt;2CC06FA5-9122-4D82-A4D4-6FD27050340D@...&gt;\r\nDate: Wed, 1 Jul 2009 15:36:33 +0200\r\nMessage-ID: &lt;21606dcf0907010636s4c1da954u24d1c78b8dd7e0de@...&gt;\r\nTo: Subbu Allamaraju &lt;subbu@...&gt;\r\nCc: Peter Keane &lt;pkeane@...&gt;, Bill de hOra &lt;bill@...&gt;, \n\tREST-Discuss Discussion Group &lt;rest-discuss@yahoogroups.com&gt;, Mark Nottingham &lt;mnot@...&gt;\r\nContent-Type: multipart/alternative; boundary=0015174be5e2f79171046da502ac\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Sam Johnston &lt;samj@...&gt;\r\nSubject: Re: [rest-discuss] Using HTTP Link: headers for web linking \n\tnon-hypertext\r\nX-Yahoo-Group-Post: member; u=339031295; y=yztY1nUuevhY5P9g9YLsNLWCco3_0LLzxqqryWDhNwRPtRtGYB177o6pVXlNcpo8sg\r\nX-Yahoo-Profile: sam.johnston@...\r\n\r\n\r\n--0015174be5e2f79171046da502ac\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: 7bit\r\n\r\nOn Tue, Jun 30, 2009 at 11:52 PM, Subbu Allamaraju &lt;subbu@...&gt; wrote:\n\n&gt; Could you explain why this is a &quot;large deviation from HTTP&quot;? Perhaps some\n&gt; reference to an RFC or spec would help.\n&gt;\n\nYou have designed your own interface with rules such as using your own\nidentifiers, how to find the id field (which presumably lives in the URL\nand/or entity-body), how and where to submit it, what to expect in return,\netc. These rules would have to be documented, understood and (faithfully)\nimplemented by clients wishing to consume your service.\n\nThe task at hand however simply involves linking two resources (identified\nby URLs) together ala section 19.6.1.2 of\nRFC2068&lt;http://tools.ietf.org/html/rfc2068#section-19.6.1.2&gt;.\nThe question then is, knowing that introducing [not so] new HTTP verbs is\ndifficult bordering on impossible, how can it be done using only headers ala\nSet-Cookie.\n\nI am also not sure what you mean by &quot;HTTP was designed to create a web of\n&gt; opaque resources&quot;. Opaque to the protocol operations, or the client, or the\n&gt; server?\n&gt;\n\nHTTP servers typically don&#39;t care what&#39;s inside the entity-body - it&#39;s up to\nthe client to interpret the contents. Now we&#39;re talking about using\nnon-HyperText resources over HTTP in which case we need somewhere for\nmetadata including links - either in-band courtesy wrapper formats like\nAtom, out-of-band with HTTP headers or separately altogether with things\nlike RDF. I know what I think is the most simple & elegant option...\n\nEven in HTML, clients don&#39;t specify links. They just follow them.\n&gt;\n\nYes they do - both directly (think links in rich text areas) and indirectly\n(as the result of some action). This only works because HTML is HyperText...\nfor anything else it&#39;s a non-starter.\n\n\n&gt; As far as this use case is concerned, with the approach you are suggesting,\n&gt; the client will end up implementing a lot of code that really belongs to the\n&gt; server. For instance, it will have to know what it means to mount a storage\n&gt; resource. I am not expert in the particular domain of allocating\n&gt; computing/storage devices, but my hunch is that the interface you are\n&gt; describing is not abstract enough for clients.\n&gt;\n\nThe client just needs to be able to tell the server it wants two things\nlinked - the server works out what that means and how it translates to\noperations on underlying infrastructure. Whether the client has to pull a\nlever (e.g. your controller suggestion above) or suggest the link directly\ndoesn&#39;t make a great deal of difference and certainly doesn&#39;t translate to\n&quot;implementing a lot of code that really belongs to the server&quot;.\n\n\n&gt; HTTP is not SQL. It is not a data manipulation API. Whether you call\n&gt; &quot;attach&quot;, &quot;mount&quot; etc RPC or resources, such functionality belongs to the\n&gt; server.\n&gt;\n\nObviously the actual functionality *is* on the server - it&#39;s just a case of\nexposing it to the clients in an intuitive way. Having to define rules isn&#39;t\nintuitive.\n\n\n&gt; In the book we&#39;re currently writing (\n&gt; http://www.restful-webservices-cookbook.org/), we explicitly encourage\n&gt; using what we call as &quot;sidekick&quot; and &quot;controller&quot; resources to provide a\n&gt; meaningful abstraction to clients. In the absence of such notions, servers\n&gt; will end up providing leaky abstractions to clients, which is certainly not\n&gt; the intent of REST.\n&gt;\n\nI&#39;m not sure that it&#39;s necessary to channel linking requests through\n&quot;controllers&quot; - after all there&#39;s no such mechanism for the WWW and as a\nresult links are used in all manner of weird and wonderful ways. Perhaps it\nmakes sense to link storage devices together for example (e.g. a logical\nvolume pointing back to the physical SAN on which it resides) - I&#39;d rather\nhave clients &quot;just know&quot; how to make such associations rather than have to\nimplement controllers for them on both sides of the conversation.\n\nSam\n\n\n&gt; On Jun 30, 2009, at 1:09 PM, Sam Johnston wrote:\n&gt;\n&gt;  Subbu,\n&gt;&gt;\n&gt;&gt; This is a fairly large deviation from HTTP as the &quot;universal interface&quot;\n&gt;&gt; and\n&gt;&gt; the details would need to be specified for each implementation. HTTP was\n&gt;&gt; designed to create a web of opaque resources, only the linking requirement\n&gt;&gt; was (until now) well satisfied by another standard developed by another\n&gt;&gt; SSO\n&gt;&gt; (that is, HTML). The clients specify the links today so it makes sense\n&gt;&gt; that\n&gt;&gt; they continue to be able to create the links tomorrow, does it not? If the\n&gt;&gt; server doesn&#39;t like the proposed link it doesn&#39;t have to accept it, and it\n&gt;&gt; can always specify links of its own (which is the way it works with\n&gt;&gt; hypertext today - consider &quot;manual&quot; links in blog comments vs &quot;automatic&quot;\n&gt;&gt; links to stylesheets, feeds, etc.)\n&gt;&gt;\n&gt;&gt; Consider some of the things I need to be able to do:\n&gt;&gt;\n&gt;&gt;  - Mount a storage resource on a compute resource\n&gt;&gt;  - Connect a compute resource to a network (or a network to a network\n&gt;&gt;  etc.)\n&gt;&gt;  - Associate arbitrary resources which may be hosted elsewhere (for\n&gt;&gt;  example, PDF build documentation for a server)\n&gt;&gt;\n&gt;&gt; Why would I want to create what is essentially an RPC-style interface\n&gt;&gt; (e.g.\n&gt;&gt; &quot;mount&quot;, &quot;attach&quot;, &quot;associate&quot;, etc.) for this functionality? Granted if\n&gt;&gt; that&#39;s what I wanted to do then the method you propose below is clean\n&gt;&gt; (except that the ID should perhaps be the URL) but is there not another\n&gt;&gt; way?\n&gt;&gt;\n&gt;&gt; Sam\n&gt;&gt;\n&gt;&gt; On Tue, Jun 30, 2009 at 9:57 PM, Subbu Allamaraju &lt;subbu@...&gt;\n&gt;&gt; wrote:\n&gt;&gt;\n&gt;&gt;  Please read the POST as\n&gt;&gt;&gt;\n&gt;&gt;&gt; POST /subbu/cart\n&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; Content-Type: application/x-www-form-urlencoded\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt; id=1234\n&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt; Subbu\n&gt;&gt;&gt;\n&gt;&gt;&gt;\n&gt;&gt;&gt; On Jun 30, 2009, at 12:41 PM, Subbu Allamaraju wrote:\n&gt;&gt;&gt;\n&gt;&gt;&gt; Hi Peter,\n&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; 1.  post the product to the cart &quot;collection&quot;\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt; 2.  add a link to a product pointing to the cart\n&gt;&gt;&gt;&gt;&gt; 3.  add a link to a cart resource pointing to the product\n&gt;&gt;&gt;&gt;&gt; 4.  create a new resource (presumably by POSTing to a known endpoint)\n&gt;&gt;&gt;&gt;&gt; that\n&gt;&gt;&gt;&gt;&gt; is essentially a &quot;cart-product instance&quot; that has a link to each\n&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; This still leaks many server-side details to the client. Here is an\n&gt;&gt;&gt;&gt; alternative.\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; 1. The server has a cart resource, and product resources.\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; 2. Each product resource found in a search will have a link\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; &lt;link rel=&quot;http://shop.org/rels/buy&quot; href=&quot;http://shop.org/subbu/cart\n&gt;&gt;&gt;&gt; &quot;/&gt;\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; The definition of rel says that the client should use POST to add the\n&gt;&gt;&gt;&gt; product to the cart.\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; 3. Client adds the product to the cart\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; POST /subbu/cart\n&gt;&gt;&gt;&gt; Content-Type: application/xml\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; id=1234\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; 4. Server redirects back to the updated cart\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; 303 See Other\n&gt;&gt;&gt;&gt; Location: http://shop.org/subbu/cart\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; This is just generalized version of a web based shopping cart, and\n&gt;&gt;&gt;&gt; provides a simplified interface to the client. As I said before,\n&gt;&gt;&gt;&gt; expecting\n&gt;&gt;&gt;&gt; the client to manage links is akin to clients posting SQL statements to\n&gt;&gt;&gt;&gt; servers.\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; Subbu\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; On Tue, Jun 30, 2009 at 11:59 AM, Subbu Allamaraju &lt;subbu@...&gt;\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt; wrote:\n&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;&gt; Sam,\n&gt;&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t disagree that there are use cases, but I am not sure if\n&gt;&gt;&gt;&gt;&gt;&gt; letting clients manage relations is the right way to implement\n&gt;&gt;&gt;&gt;&gt;&gt; distributed systems. The approach you describe below is similar to a\n&gt;&gt;&gt;&gt;&gt;&gt; client trying to setup foreign key relations between different\n&gt;&gt;&gt;&gt;&gt;&gt; database entities. This model leaks abstractions and is not ideal for\n&gt;&gt;&gt;&gt;&gt;&gt; writing large systems.\n&gt;&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;&gt; For instance, take a simple shopping cart application. The server may\n&gt;&gt;&gt;&gt;&gt;&gt; have decided to use links to associate products to a cart, but that\n&gt;&gt;&gt;&gt;&gt;&gt; does not mean that, clients should be able to create/edit/delete those\n&gt;&gt;&gt;&gt;&gt;&gt; links. Instead, links come into being when the client &quot;adds products\n&gt;&gt;&gt;&gt;&gt;&gt; to a cart&quot; and they go away when the client &quot;removes a product from\n&gt;&gt;&gt;&gt;&gt;&gt; the cart&quot;. That is the right level of abstraction for the client.\n&gt;&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;&gt; IMO, links are for servers to provide navigability between resources,\n&gt;&gt;&gt;&gt;&gt;&gt; and to let clients make state transitions via links.\n&gt;&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;&gt; Subbu\n&gt;&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;&gt; On Jun 30, 2009, at 3:44 AM, Sam Johnston wrote:\n&gt;&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;&gt; Hi Subbu,\n&gt;&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Tue, Jun 30, 2009 at 5:45 AM, Subbu Allamaraju &lt;subbu@...\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;subbu%40subbu.org&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;&gt; wrote:\n&gt;&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; LINK is similar - how a LINK relationship is created/managed/\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; destroyed is\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;  undefined.\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Why isn&#39;t that up to the server(s) managing the resources? Links are\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; for servers to describe relations between resources, and not for\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; clients to manage such relationships.\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; Why so? This use case requires that clients be able to manage links:\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; virtual\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; infrastructure is modeled as compute, storage and network resources\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; and\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; clients create, delete and link them as they see fit. The server can\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; too\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; (for example, implicitly creating a storage resource and linking it\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; when you\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; create a compute resource) but the point of OCCI\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;http://www.occi-wg.org/&gt;is to allow for client manipulation.\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; We&#39;re not the only ones who see a need either... the original\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; authors of the\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; HTTP spec (RFC 2068) including LINK and\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; UNLINK&lt;http://tools.ietf.org/html/rfc2068#section-19.6.1.2&gt;verbs for\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; this around the same as this\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; I-D &lt;\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;&gt; http://ftp.ics.uci.edu/pub/ietf/http/draft-pritchard-http-links-00.txt\n&gt;&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;&gt;  specifying\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;  same in more detail. This is what Mark Nottingham (author of the\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; Link: header I-D among other things, copied) had to say this morning\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; on\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; apps-discuss:\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; *- First and foremost, in the absence of the LINK and UNLINK verbs\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; originally defined in RFC 2068[2] but specifically omitted from RFC\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; 2616[3],\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; what is the preferred mechanism for manipulating these links via\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; HTTP? It\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; appears that this header is intended for GET requests only, but\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; presumably\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; specifying it in POST and PUT requests would be one option that\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; avoids the\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; creation of [not so] &quot;new&quot; verbs (bearing in mind that short of\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; accepting\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; Link: headers from empty POST/PUT requests, it would be necessary to\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; GET and\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; then PUT the entire payload to update links - twice if they were\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; reciprocal). While there was an attempt a dozen years ago to better\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; define\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; the relevant HTTP verbs[4], it strikes me as more sensible to follow\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; the\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; example of the Set-Cookie: header for this rather than WebDAV&#39;s\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; example of\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; creating new verbs (even if we&#39;ve seen them before) but you guys are\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; the\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; experts.*\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; Undefined, but I imagine in a PUT/POST body does indeed make the\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; most sense.\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; Using the Link header in a request doesn&#39;t have well-defined\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; semantics.\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; I wonder then whether it&#39;s not sensible to define these semantics in\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; an[other] Internet Draft (ala Set-Cookie) rather than having everyone\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; running off and inventing their own in-band solutions... doing so\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; would make\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; for some really clever RESTful interfaces.\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sam\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;\n&gt;\n\r\n--0015174be5e2f79171046da502ac\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nOn Tue, Jun 30, 2009 at 11:52 PM, Subbu Allamaraju &lt;span dir=3D&quot;ltr&quot;&gt;&lt;&lt;a=\r\n href=3D&quot;mailto:subbu@...&quot;&gt;subbu@...&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;=\r\ndiv class=3D&quot;gmail_quote&quot;&gt;&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;border=\r\n-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-lef=\r\nt: 1ex;&quot;&gt;\nCould you explain why this is a &quot;large deviation from HTTP&q=\r\nuot;? Perhaps some reference to an RFC or spec would help.&lt;br&gt;\n&lt;/blockquote=\r\n&gt;&lt;div&gt;&lt;br&gt;You have designed your own interface with rules such as using you=\r\nr own identifiers, how to find the id field (which presumably lives in the =\r\nURL and/or entity-body), how and where to submit it, what to expect in retu=\r\nrn, etc. These rules would have to be documented, understood and (faithfull=\r\ny) implemented by clients wishing to consume your service.&lt;br&gt;\n&lt;br&gt;The task=\r\n at hand however simply involves linking two resources (identified by URLs)=\r\n together ala &lt;a href=3D&quot;http://tools.ietf.org/html/rfc2068#section-19.6.1.=\r\n2&quot;&gt;section 19.6.1.2 of RFC2068&lt;/a&gt;. The question then is, knowing that intr=\r\noducing [not so] new HTTP verbs is difficult bordering on impossible, how c=\r\nan it be done using only headers ala Set-Cookie.&lt;br&gt;\n&lt;br&gt;&lt;/div&gt;&lt;blockquote =\r\nclass=3D&quot;gmail_quote&quot; style=3D&quot;border-left: 1px solid rgb(204, 204, 204); m=\r\nargin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;&quot;&gt;I am also not sure what you m=\r\nean by &quot;HTTP was designed to create a web of opaque resources&quot;. O=\r\npaque to the protocol operations, or the client, or the server?&lt;br&gt;\n\n&lt;/bloc=\r\nkquote&gt;&lt;div&gt;&lt;br&gt;HTTP servers typically don&#39;t care what&#39;s inside the=\r\n entity-body - it&#39;s up to the client to interpret the contents. Now we&=\r\n#39;re talking about using non-HyperText resources over HTTP in which case =\r\nwe need somewhere for metadata including links - either in-band courtesy wr=\r\napper formats like Atom, out-of-band with HTTP headers or separately altoge=\r\nther with things like RDF. I know what I think is the most simple &amp; ele=\r\ngant option...&lt;br&gt;\n&lt;br&gt;&lt;/div&gt;&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;bor=\r\nder-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-=\r\nleft: 1ex;&quot;&gt;Even in HTML, clients don&#39;t specify links. They just follow=\r\n them.&lt;div class=3D&quot;im&quot;&gt;\n&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;Yes they do - both dir=\r\nectly (think links in rich text areas) and indirectly (as the result of som=\r\ne action). This only works because HTML is HyperText... for anything else i=\r\nt&#39;s a non-starter.&lt;br&gt;\n=A0&lt;/div&gt;&lt;blockquote class=3D&quot;gmail_quote&quot; style=\r\n=3D&quot;border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; p=\r\nadding-left: 1ex;&quot;&gt;&lt;div class=3D&quot;im&quot;&gt;As far as this use case is concerned, =\r\nwith the approach you are suggesting, the client will end up implementing a=\r\n lot of code that really belongs to the server. For instance, it will have =\r\nto know what it means to mount a storage resource. I am not expert in the p=\r\narticular domain of allocating computing/storage devices, but my hunch is t=\r\nhat the interface you are describing is not abstract enough for clients.&lt;br=\r\n&gt;\n&lt;/div&gt;\n&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;The client just needs to be able to tell the=\r\n server it wants two things linked - the server works out what that means a=\r\nnd how it translates to operations on underlying infrastructure. Whether th=\r\ne client has to pull a lever (e.g. your controller suggestion above) or sug=\r\ngest the link directly doesn&#39;t make a great deal of difference and cert=\r\nainly doesn&#39;t translate to &quot;implementing a lot of code that really=\r\n belongs to the server&quot;.&lt;br&gt;\n=A0&lt;/div&gt;&lt;blockquote class=3D&quot;gmail_quote=\r\n&quot; style=3D&quot;border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0=\r\n.8ex; padding-left: 1ex;&quot;&gt;HTTP is not SQL. It is not a data manipulation AP=\r\nI. Whether you call &quot;attach&quot;, &quot;mount&quot; etc RPC or resour=\r\nces, such functionality belongs to the server.&lt;br&gt;\n\n&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;O=\r\nbviously the actual functionality *is* on the server - it&#39;s just a case=\r\n of exposing it to the clients in an intuitive way. Having to define rules =\r\nisn&#39;t intuitive.&lt;br&gt;=A0&lt;/div&gt;&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D=\r\n&quot;border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padd=\r\ning-left: 1ex;&quot;&gt;\nIn the book we&#39;re currently writing (&lt;a href=3D&quot;http:/=\r\n/www.restful-webservices-cookbook.org/&quot; target=3D&quot;_blank&quot;&gt;http://www.restfu=\r\nl-webservices-cookbook.org/&lt;/a&gt;), we explicitly encourage using what we cal=\r\nl as &quot;sidekick&quot; and &quot;controller&quot; resources to provide a=\r\n meaningful abstraction to clients. In the absence of such notions, servers=\r\n will end up providing leaky abstractions to clients, which is certainly no=\r\nt the intent of REST.&lt;br&gt;\n&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;I&#39;m not sure that it&#3=\r\n9;s necessary to channel linking requests through &quot;controllers&quot; -=\r\n after all there&#39;s no such mechanism for the WWW and as a result links =\r\nare used in all manner of weird and wonderful ways. Perhaps it makes sense =\r\nto link storage devices together for example (e.g. a logical volume pointin=\r\ng back to the physical SAN on which it resides) - I&#39;d rather have clien=\r\nts &quot;just know&quot; how to make such associations rather than have to =\r\nimplement controllers for them on both sides of the conversation.&lt;br&gt;\n&lt;br&gt;S=\r\nam&lt;br&gt;=A0&lt;/div&gt;&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;border-left: 1px =\r\nsolid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;&quot;&gt;&lt;d=\r\niv&gt;&lt;div class=3D&quot;h5&quot;&gt;On Jun 30, 2009, at 1:09 PM, Sam Johnston wrote:&lt;br&gt;\n&lt;=\r\nbr&gt;\n&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;border-left: 1px solid rgb(2=\r\n04, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;&quot;&gt;\nSubbu,&lt;br&gt;\n&lt;=\r\nbr&gt;\nThis is a fairly large deviation from HTTP as the &quot;universal inter=\r\nface&quot; and&lt;br&gt;\nthe details would need to be specified for each implemen=\r\ntation. HTTP was&lt;br&gt;\ndesigned to create a web of opaque resources, only the=\r\n linking requirement&lt;br&gt;\nwas (until now) well satisfied by another standard=\r\n developed by another SSO&lt;br&gt;\n(that is, HTML). The clients specify the link=\r\ns today so it makes sense that&lt;br&gt;\nthey continue to be able to create the l=\r\ninks tomorrow, does it not? If the&lt;br&gt;\nserver doesn&#39;t like the proposed=\r\n link it doesn&#39;t have to accept it, and it&lt;br&gt;\ncan always specify links=\r\n of its own (which is the way it works with&lt;br&gt;\nhypertext today - consider =\r\n&quot;manual&quot; links in blog comments vs &quot;automatic&quot;&lt;br&gt;\nlink=\r\ns to stylesheets, feeds, etc.)&lt;br&gt;\n&lt;br&gt;\nConsider some of the things I need =\r\nto be able to do:&lt;br&gt;\n&lt;br&gt;\n =A0- Mount a storage resource on a compute reso=\r\nurce&lt;br&gt;\n =A0- Connect a compute resource to a network (or a network to a n=\r\network&lt;br&gt;\n =A0etc.)&lt;br&gt;\n =A0- Associate arbitrary resources which may be h=\r\nosted elsewhere (for&lt;br&gt;\n =A0example, PDF build documentation for a server)=\r\n&lt;br&gt;\n&lt;br&gt;\nWhy would I want to create what is essentially an RPC-style inter=\r\nface (e.g.&lt;br&gt;\n&quot;mount&quot;, &quot;attach&quot;, &quot;associate&quot;=\r\n, etc.) for this functionality? Granted if&lt;br&gt;\nthat&#39;s what I wanted to =\r\ndo then the method you propose below is clean&lt;br&gt;\n(except that the ID shoul=\r\nd perhaps be the URL) but is there not another way?&lt;br&gt;\n&lt;br&gt;\nSam&lt;br&gt;\n&lt;br&gt;\nO=\r\nn Tue, Jun 30, 2009 at 9:57 PM, Subbu Allamaraju &lt;&lt;a href=3D&quot;mailto:subb=\r\nu@...&quot; target=3D&quot;_blank&quot;&gt;subbu@...&lt;/a&gt;&gt; wrote:&lt;br&gt;\n&lt;br&gt;\n&lt;blo=\r\nckquote class=3D&quot;gmail_quote&quot; style=3D&quot;border-left: 1px solid rgb(204, 204,=\r\n 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;&quot;&gt;\nPlease read the POST=\r\n as&lt;br&gt;\n&lt;br&gt;\nPOST /subbu/cart&lt;br&gt;\n&lt;blockquote class=3D&quot;gmail_quote&quot; style=\r\n=3D&quot;border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; p=\r\nadding-left: 1ex;&quot;&gt;\nContent-Type: application/x-www-form-urlencoded&lt;br&gt;\n&lt;br=\r\n&gt;\n&lt;/blockquote&gt;\n&lt;br&gt;\nid=3D1234&lt;br&gt;\n&lt;blockquote class=3D&quot;gmail_quote&quot; style=\r\n=3D&quot;border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; p=\r\nadding-left: 1ex;&quot;&gt;\n&lt;br&gt;\n&lt;/blockquote&gt;\n&lt;br&gt;\nSubbu&lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;\nOn Jun 30, =\r\n2009, at 12:41 PM, Subbu Allamaraju wrote:&lt;br&gt;\n&lt;br&gt;\nHi Peter,&lt;br&gt;\n&lt;blockquo=\r\nte class=3D&quot;gmail_quote&quot; style=3D&quot;border-left: 1px solid rgb(204, 204, 204)=\r\n; margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;&quot;&gt;\n&lt;br&gt;\n1. =A0post the produ=\r\nct to the cart &quot;collection&quot;&lt;br&gt;\n&lt;blockquote class=3D&quot;gmail_quote&quot;=\r\n style=3D&quot;border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.=\r\n8ex; padding-left: 1ex;&quot;&gt;\n2. =A0add a link to a product pointing to the car=\r\nt&lt;br&gt;\n3. =A0add a link to a cart resource pointing to the product&lt;br&gt;\n4. =\r\n=A0create a new resource (presumably by POSTing to a known endpoint)&lt;br&gt;\nth=\r\nat&lt;br&gt;\nis essentially a &quot;cart-product instance&quot; that has a link t=\r\no each&lt;br&gt;\n&lt;br&gt;\n&lt;/blockquote&gt;\n&lt;br&gt;\nThis still leaks many server-side detail=\r\ns to the client. Here is an&lt;br&gt;\nalternative.&lt;br&gt;\n&lt;br&gt;\n1. The server has a c=\r\nart resource, and product resources.&lt;br&gt;\n&lt;br&gt;\n2. Each product resource foun=\r\nd in a search will have a link&lt;br&gt;\n&lt;br&gt;\n&lt;link rel=3D&quot;&lt;a href=3D&quot;htt=\r\np://shop.org/rels/buy&quot; target=3D&quot;_blank&quot;&gt;http://shop.org/rels/buy&lt;/a&gt;&quot;=\r\n href=3D&quot;&lt;a href=3D&quot;http://shop.org/subbu/cart&quot; target=3D&quot;_blank&quot;&gt;http=\r\n://shop.org/subbu/cart&lt;/a&gt;&quot;/&gt;&lt;br&gt;\n&lt;br&gt;\nThe definition of rel says t=\r\nhat the client should use POST to add the&lt;br&gt;\nproduct to the cart.&lt;br&gt;\n&lt;br&gt;=\r\n\n3. Client adds the product to the cart&lt;br&gt;\n&lt;br&gt;\nPOST /subbu/cart&lt;br&gt;\nConte=\r\nnt-Type: application/xml&lt;br&gt;\n&lt;br&gt;\nid=3D1234&lt;br&gt;\n&lt;br&gt;\n4. Server redirects ba=\r\nck to the updated cart&lt;br&gt;\n&lt;br&gt;\n303 See Other&lt;br&gt;\nLocation: &lt;a href=3D&quot;http=\r\n://shop.org/subbu/cart&quot; target=3D&quot;_blank&quot;&gt;http://shop.org/subbu/cart&lt;/a&gt;&lt;br=\r\n&gt;\n&lt;br&gt;\nThis is just generalized version of a web based shopping cart, and&lt;b=\r\nr&gt;\nprovides a simplified interface to the client. As I said before, expecti=\r\nng&lt;br&gt;\nthe client to manage links is akin to clients posting SQL statements=\r\n to&lt;br&gt;\nservers.&lt;br&gt;\n&lt;br&gt;\nSubbu&lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;\nOn Tue, Jun 30, 2009 at =\r\n11:59 AM, Subbu Allamaraju &lt;&lt;a href=3D&quot;mailto:subbu@...&quot; target=3D=\r\n&quot;_blank&quot;&gt;subbu@...&lt;/a&gt;&gt;&lt;br&gt;\n&lt;blockquote class=3D&quot;gmail_quote&quot; styl=\r\ne=3D&quot;border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; =\r\npadding-left: 1ex;&quot;&gt;\nwrote:&lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;\n&lt;blockquote class=3D&quot;gmail_quote&quot;=\r\n style=3D&quot;border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.=\r\n8ex; padding-left: 1ex;&quot;&gt;\n&lt;br&gt;\nSam,&lt;br&gt;\n&lt;br&gt;\nI don&#39;t disagree that ther=\r\ne are use cases, but I am not sure if&lt;br&gt;\nletting clients manage relations =\r\nis the right way to implement&lt;br&gt;\ndistributed systems. The approach you des=\r\ncribe below is similar to a&lt;br&gt;\nclient trying to setup foreign key relation=\r\ns between different&lt;br&gt;\ndatabase entities. This model leaks abstractions an=\r\nd is not ideal for&lt;br&gt;\nwriting large systems.&lt;br&gt;\n&lt;br&gt;\nFor instance, take a=\r\n simple shopping cart application. The server may&lt;br&gt;\nhave decided to use l=\r\ninks to associate products to a cart, but that&lt;br&gt;\ndoes not mean that, clie=\r\nnts should be able to create/edit/delete those&lt;br&gt;\nlinks. Instead, links co=\r\nme into being when the client &quot;adds products&lt;br&gt;\nto a cart&quot; and t=\r\nhey go away when the client &quot;removes a product from&lt;br&gt;\nthe cart&quot;=\r\n. That is the right level of abstraction for the client.&lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;\n&lt;/bl=\r\nockquote&gt;\n&lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;\n&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;bo=\r\nrder-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding=\r\n-left: 1ex;&quot;&gt;\n&lt;br&gt;\nIMO, links are for servers to provide navigability betwe=\r\nen resources,&lt;br&gt;\nand to let clients make state transitions via links.&lt;br&gt;\n=\r\n&lt;br&gt;\nSubbu&lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;\nOn Jun 30, 2009, at 3:44 AM, Sam Johnston wrote:&lt;b=\r\nr&gt;\n&lt;br&gt;\nHi Subbu,&lt;br&gt;\n&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;border-lef=\r\nt: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1=\r\nex;&quot;&gt;\n&lt;br&gt;\nOn Tue, Jun 30, 2009 at 5:45 AM, Subbu Allamaraju &lt;&lt;a href=3D=\r\n&quot;mailto:subbu@...&quot; target=3D&quot;_blank&quot;&gt;subbu@...&lt;/a&gt;&lt;br&gt;\n&lt;subb=\r\nu%&lt;a href=3D&quot;http://40subbu.org&quot; target=3D&quot;_blank&quot;&gt;40subbu.org&lt;/a&gt;&gt;&gt;&lt;=\r\nbr&gt;\n&lt;br&gt;\n&lt;/blockquote&gt;\n&lt;br&gt;\nwrote:&lt;br&gt;\n&lt;blockquote class=3D&quot;gmail_quote&quot; st=\r\nyle=3D&quot;border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex=\r\n; padding-left: 1ex;&quot;&gt;\n&lt;br&gt;\nLINK is similar - how a LINK relationship is cr=\r\neated/managed/&lt;br&gt;\n&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;border-left: =\r\n1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;=\r\n&quot;&gt;&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;border-left: 1px solid rgb(204=\r\n, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;&quot;&gt;\n\ndestroyed is&lt;=\r\nbr&gt;\n&lt;br&gt;\n&lt;/blockquote&gt;\nundefined.&lt;br&gt;\n&lt;br&gt;\nWhy isn&#39;t that up to the ser=\r\nver(s) managing the resources? Links are&lt;br&gt;\nfor servers to describe relati=\r\nons between resources, and not for&lt;br&gt;\nclients to manage such relationships=\r\n.&lt;br&gt;\n&lt;br&gt;\n&lt;/blockquote&gt;\n&lt;br&gt;\n&lt;br&gt;\nWhy so? This use case requires that clie=\r\nnts be able to manage links:&lt;br&gt;\nvirtual&lt;br&gt;\ninfrastructure is modeled as c=\r\nompute, storage and network resources&lt;br&gt;\nand&lt;br&gt;\nclients create, delete an=\r\nd link them as they see fit. The server can&lt;br&gt;\ntoo&lt;br&gt;\n(for example, impli=\r\ncitly creating a storage resource and linking it&lt;br&gt;\nwhen you&lt;br&gt;\ncreate a =\r\ncompute resource) but the point of OCCI&lt;br&gt;\n&lt;&lt;a href=3D&quot;http://www.occi-=\r\nwg.org/&quot; target=3D&quot;_blank&quot;&gt;http://www.occi-wg.org/&lt;/a&gt;&gt;is to allow for c=\r\nlient manipulation.&lt;br&gt;\n&lt;br&gt;\nWe&#39;re not the only ones who see a need eit=\r\nher... the original&lt;br&gt;\nauthors of the&lt;br&gt;\nHTTP spec (RFC 2068) including L=\r\nINK and&lt;br&gt;\nUNLINK&lt;&lt;a href=3D&quot;http://tools.ietf.org/html/&quot; target=3D&quot;_bl=\r\nank&quot;&gt;http://tools.ietf.org/html/&lt;/a&gt;rfc2068#section-19.6.1.2&gt;verbs for&lt;b=\r\nr&gt;\nthis around the same as this&lt;br&gt;\nI-D &lt;&lt;br&gt;\n&lt;br&gt;\n&lt;/blockquote&gt;\n&lt;a href=\r\n=3D&quot;http://ftp.ics.uci.edu/pub/ietf/http/draft-pritchard-http-links-00.txt&quot;=\r\n target=3D&quot;_blank&quot;&gt;http://ftp.ics.uci.edu/pub/ietf/http/draft-pritchard-htt=\r\np-links-00.txt&lt;/a&gt;&lt;br&gt;\n&lt;br&gt;\n&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;bord=\r\ner-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-l=\r\neft: 1ex;&quot;&gt;\nspecifying&lt;br&gt;\n&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;borde=\r\nr-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-le=\r\nft: 1ex;&quot;&gt;\n&lt;br&gt;\n&lt;/blockquote&gt;\nsame in more detail. This is what Mark Nottin=\r\ngham (author of the&lt;br&gt;\nLink: header I-D among other things, copied) had to=\r\n say this morning&lt;br&gt;\non&lt;br&gt;\napps-discuss:&lt;br&gt;\n&lt;br&gt;\n*- First and foremost, =\r\nin the absence of the LINK and UNLINK verbs&lt;br&gt;\noriginally defined in RFC 2=\r\n068[2] but specifically omitted from RFC&lt;br&gt;\n2616[3],&lt;br&gt;\nwhat is the prefe=\r\nrred mechanism for manipulating these links via&lt;br&gt;\nHTTP? It&lt;br&gt;\nappears th=\r\nat this header is intended for GET requests only, but&lt;br&gt;\npresumably&lt;br&gt;\nsp=\r\necifying it in POST and PUT requests would be one option that&lt;br&gt;\navoids th=\r\ne&lt;br&gt;\ncreation of [not so] &quot;new&quot; verbs (bearing in mind that shor=\r\nt of&lt;br&gt;\naccepting&lt;br&gt;\nLink: headers from empty POST/PUT requests, it would=\r\n be necessary to&lt;br&gt;\nGET and&lt;br&gt;\nthen PUT the entire payload to update link=\r\ns - twice if they were&lt;br&gt;\nreciprocal). While there was an attempt a dozen =\r\nyears ago to better&lt;br&gt;\ndefine&lt;br&gt;\nthe relevant HTTP verbs[4], it strikes m=\r\ne as more sensible to follow&lt;br&gt;\nthe&lt;br&gt;\nexample of the Set-Cookie: header =\r\nfor this rather than WebDAV&#39;s&lt;br&gt;\nexample of&lt;br&gt;\ncreating new verbs (ev=\r\nen if we&#39;ve seen them before) but you guys are&lt;br&gt;\nthe&lt;br&gt;\nexperts.*&lt;br=\r\n&gt;\n&lt;br&gt;\nUndefined, but I imagine in a PUT/POST body does indeed make the&lt;br&gt;=\r\n\nmost sense.&lt;br&gt;\nUsing the Link header in a request doesn&#39;t have well-d=\r\nefined&lt;br&gt;\nsemantics.&lt;br&gt;\n&lt;br&gt;\nI wonder then whether it&#39;s not sensible =\r\nto define these semantics in&lt;br&gt;\nan[other] Internet Draft (ala Set-Cookie) =\r\nrather than having everyone&lt;br&gt;\nrunning off and inventing their own in-band=\r\n solutions... doing so&lt;br&gt;\nwould make&lt;br&gt;\nfor some really clever RESTful in=\r\nterfaces.&lt;br&gt;\n&lt;br&gt;\nSam&lt;br&gt;\n&lt;br&gt;\n&lt;/blockquote&gt;\n&lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;\n&lt;/blockqu=\r\note&gt;&lt;/blockquote&gt;\n&lt;br&gt;\n&lt;/blockquote&gt;\n&lt;br&gt;\n&lt;/blockquote&gt;&lt;/blockquote&gt;\n&lt;br&gt;\n&lt;=\r\n/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;\n\r\n--0015174be5e2f79171046da502ac--\r\n\n"}}
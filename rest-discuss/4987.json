{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":203744831,"authorName":"Justin Sampson","from":"Justin Sampson &lt;justin@...&gt;","profile":"justin_t_sampson","replyTo":"SENDER","senderId":"OIQpx5x21KfSuY7MDcWB9d-3IsKfMWm4aQiubBuES1jaH6v-IiNHGvGH8etyD_KJGRFoPYYhXVhsaLwYtWgntuU7hpBpAVKZAl4","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] coding question","postDate":"1113033743","msgId":4987,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PFBpbmUuTE5YLjQuNDQuMDUwNDA5MDEwMDA5MC4yNTA2Ny0xMDAwMDBAbmVvdGVycmEuY29tPg==","inReplyToHeader":"PFBpbmUuTkVCLjQuNjIuMDUwNDA4MTkwNzI0MC4xNjUwNEBwYW5peDIucGFuaXguY29tPg=="},"prevInTopic":4986,"nextInTopic":4988,"prevInTime":4986,"nextInTime":4988,"topicId":4983,"numMessagesInTopic":14,"msgSnippet":"... I recommend the book Test-Driven Development, by Kent Beck. Justin","rawEmail":"Return-Path: &lt;justin@...&gt;\r\nX-Sender: justin@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 40835 invoked from network); 9 Apr 2005 08:54:24 -0000\r\nReceived: from unknown (66.218.66.216)\n  by m24.grp.scd.yahoo.com with QMQP; 9 Apr 2005 08:54:24 -0000\r\nReceived: from unknown (HELO neoterra.com) (66.166.16.35)\n  by mta1.grp.scd.yahoo.com with SMTP; 9 Apr 2005 08:54:24 -0000\r\nReceived: from localhost (justin_krasama@localhost)\n\tby neoterra.com (8.12.5/8.11.6) with ESMTP id j3982Nrm025098\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Sat, 9 Apr 2005 01:02:23 -0700\r\nDate: Sat, 9 Apr 2005 01:02:23 -0700 (PDT)\r\nX-X-Sender: justin_krasama@...\r\nTo: rest-discuss@yahoogroups.com\r\nIn-Reply-To: &lt;Pine.NEB.4.62.0504081907240.16504@...&gt;\r\nMessage-ID: &lt;Pine.LNX.4.44.0504090100090.25067-100000@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: TEXT/PLAIN; charset=US-ASCII\r\nX-eGroups-Msg-Info: 1:12:0\r\nFrom: Justin Sampson &lt;justin@...&gt;\r\nSubject: Re: [rest-discuss] coding question\r\nX-Yahoo-Group-Post: member; u=203744831\r\nX-Yahoo-Profile: justin_t_sampson\r\n\r\n&gt; ...I found that regular expressions on the incoming URI are too\n&gt; inflexible. It&#39;s too easy to make a mistake on a reasonably complex\n&gt; regex.\n\nI recommend the book Test-Driven Development, by Kent Beck.\n\nJustin\n\n\nOn Fri, 8 Apr 2005, Lucas Gonze wrote:\n\n&gt; On Sat, 9 Apr 2005, Josh Sled wrote:\n&gt;\n&gt; &gt; How about a declarative resource-space pattern mapping plus a\n&gt; &gt; dispatcher?\n&gt; &gt; \n&gt; &gt;   HEAD /foo stripBody( getFoo() )\n&gt; &gt;   GET /foo getFoo()\n&gt; &gt;   GET /foo?withArgs queryFoo( args )\n&gt; &gt;   POST /foo postFoo()\n&gt; \n&gt; Yeah, that&#39;s exactly the kind of thing I&#39;m wondering about. I could see\n&gt; it leading in the same direction that you go with your other examples,\n&gt; too. For example the argument validator pattern looks good:\n&gt; \n&gt; &gt;   GET /foo?requiredArg1&requiredArg2&* fooQuery(...)\n&gt; &gt;   GET /foo?type2&* fooQuery2( ... )\n&gt; \n&gt; What&#39;s tricky about this is that you want to avoid building castles in\n&gt; the air. Let&#39;s say you develop some kind of unmarshalling\n&gt; infrastructure, which I imagine would be an API which accepted\n&gt; descriptions of stuff in the request and mapped them to functions; the\n&gt; pain of adopting it would have to be less than the pain of using\n&gt; improved idioms.\n&gt; \n&gt; For example, I developed a nice argument validator class for arguments\n&gt; coming in via the URI, but in the end I found that it was too intrusive\n&gt; and ended up not using it.\n&gt; \n&gt; Not to say that this is a bad idea, just that it&#39;ll take a lot of\n&gt; communal trial and error to get it right.\n&gt; \n&gt; Along those lines...\n&gt;\n&gt; &gt; Depending on how identifying the non-query-string part is, something\n&gt; &gt; like:\n&gt; &gt; \n&gt; &gt;   GET /foo/{id:0-9+} getFoo(id)\n&gt; &gt;   GET /foo/{fooId:0-9+}/bar/{barId:[a-zA-Z0-9]+} getBar( fooId, barId )\n&gt; \n&gt; ...I found that regular expressions on the incoming URI are too\n&gt; inflexible. It&#39;s too easy to make a mistake on a reasonably complex\n&gt; regex.\n&gt; \n&gt; - Lucas\n\n\n"}}
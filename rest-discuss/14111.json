{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":69164307,"authorName":"mike amundsen","from":"mike amundsen &lt;mamund@...&gt;","profile":"mamund","replyTo":"SENDER","senderId":"VButE0Q-J_g6i8Qf3RzfO9Ri2TtWxSksEiXz-BSZWU_xHPAZyhoiEKeEfdICALD0-ejhzFvr_639L-MA0g5Bg0MEokzinS4","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] The &quot;purist&quot; C# REST client?","postDate":"1260399492","msgId":14111,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGI1NDhkZjY1MDkxMjA5MTQ1OGwyNTQ4Y2UyZG9hNGZiYzJlYWZmNmU5Y2M1QG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PEI1QUM5MEYyODQ5MzQ5OEI5MEU2MjAzRERFMkE0RTY1QEpyblBDPg==","referencesHeader":"PEI1QUM5MEYyODQ5MzQ5OEI5MEU2MjAzRERFMkE0RTY1QEpyblBDPg=="},"prevInTopic":14110,"nextInTopic":14112,"prevInTime":14110,"nextInTime":14112,"topicId":14110,"numMessagesInTopic":12,"msgSnippet":"JÃ¸rn: This line stands out first: I have avoided Atom Links since, in my experience, these don t serialize well in the C# standard XML serializer. My advice","rawEmail":"Return-Path: &lt;mca@...&gt;\r\nX-Sender: mca@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 61403 invoked from network); 9 Dec 2009 22:58:35 -0000\r\nX-Received: from unknown (66.196.94.107)\n  by m2.grp.sp2.yahoo.com with QMQP; 9 Dec 2009 22:58:35 -0000\r\nX-Received: from unknown (HELO mail-fx0-f225.google.com) (209.85.220.225)\n  by mta3.grp.re1.yahoo.com with SMTP; 9 Dec 2009 22:58:34 -0000\r\nX-Received: by fxm25 with SMTP id 25so7134570fxm.6\n        for &lt;rest-discuss@yahoogroups.com&gt;; Wed, 09 Dec 2009 14:58:14 -0800 (PST)\r\nMIME-Version: 1.0\r\nX-Received: by 10.223.19.200 with SMTP id c8mr2444552fab.55.1260399492076; Wed, \n\t09 Dec 2009 14:58:12 -0800 (PST)\r\nIn-Reply-To: &lt;B5AC90F28493498B90E6203DDE2A4E65@JrnPC&gt;\r\nReferences: &lt;B5AC90F28493498B90E6203DDE2A4E65@JrnPC&gt;\r\nDate: Wed, 9 Dec 2009 17:58:12 -0500\r\nX-Google-Sender-Auth: 8140f45cd15b2449\r\nMessage-ID: &lt;b548df650912091458l2548ce2doa4fbc2eaff6e9cc5@...&gt;\r\nTo: =?ISO-8859-1?Q?J=F8rn_Wildt?= &lt;jw@...&gt;\r\nCc: rest-discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Type: multipart/alternative; boundary=00151747bfe200155e047a53a051\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: mike amundsen &lt;mamund@...&gt;\r\nSubject: Re: [rest-discuss] The &quot;purist&quot; C# REST client?\r\nX-Yahoo-Group-Post: member; u=69164307; y=pXJ7u_H_Un1334p4kE0vw5TbiM2OKp2v34sWHCXsEI95\r\nX-Yahoo-Profile: mamund\r\n\r\n\r\n--00151747bfe200155e047a53a051\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nJ=F8rn:\n\nThis line stands out first: &quot;I have avoided Atom Links since, in m=\r\ny\nexperience, these don&#39;t serialize well in the C# standard XML serializer.=\r\n&quot;\nMy advice is to be wary of serializers when coding for HTTP. There are so=\r\n\nmany variances with incoming responses I think you&#39;ll find it a real task =\r\nto\nbuild apps based on  successfully converting incoming response bodies in=\r\nto\ncode-able objects. Using serializers also tends to lead programmers to\nt=\r\night-binding between the code and the HTTP response body. This means\nchange=\r\ns in the body may blow the serializer code. This is especially true\nwhen wo=\r\nrking with &quot;generic&quot; media-types such as XML and JSON, etc. since\nthey have=\r\n very little semantic value built into them.\n\nThat leads me to another bit =\r\nof advice I&#39;ll offer: think about link\nsemantics from the very start when c=\r\nreating your library. The Web browser\nclient works because the link semanti=\r\ncs of the HTML media-type are\nwell-defined (and pretty narrow). There are a=\r\n limited number of link\nelements. Some are in-doc links (IMG, LINK, SCRIPT,=\r\n etc.), some are\nnavigational links (A, FORM). All, except FORM, are limite=\r\nd to using the GET\nmethod. It&#39;s the semantic model of HTML that allows brow=\r\nsers to properly\nhandle HTTP responses from previously unknown locations an=\r\nd still provide\nfull functionality - even a decade after the semantics wher=\r\ne defined. I\nsuspect you&#39;ll find that building a client to properly locate,=\r\n identify,\nand understand the link semantics of a single media type\n(applic=\r\nation/vnd.movies.movie+xml) is challenging by itself. Building one\nthat han=\r\ndles multiple media-types just adds to the fun&lt;g&gt;.\n\nI also encourage you to=\r\n treat HTTP control data (headers) as top-level\nprogramming objects in your=\r\n library. Allowing programmers to decorate\nrequests with control data (cont=\r\nent-encoding, media-type, authorization,\ncache-control, etc.) and have dire=\r\nct access to the control data on responses\nwill improve the flexibility of =\r\nany client/server built w/ your library.\n\nIn the big picture, I prefer look=\r\ning at HTTP programming from the\nstand-point of &quot;resource programming.&quot; I l=\r\nook for a code library that lets\nme define a resource, associate or or more=\r\n URIs with that resource, handle\nmultiple representations of the resource (=\r\nfor both requests and response\nbodies), and properly decorate requests and =\r\nresponses w/ control data. I\nalso want to make sure it handles mime-types p=\r\nroperly (conneg included),\nconditional requests (GET and PUT), and supports=\r\n flexible authentication\nmodels.\n\nFWIW, I started work on a REST-ful HTTP C=\r\n# framework a while back [1]. It&#39;s\nbeen dormant for quite some time as the =\r\ncurrent version works well for me,\nbut there are lots of places it needs wo=\r\nrk. I&#39;ve also built an HTTP\nutilities library [2] with most all the bits I =\r\nneed for building REST-ful\nHTTP apps. It&#39;s smaller and lighter than my &#39;fra=\r\nmework&#39; library. I mention\nthese as some of the code there might be helpful=\r\n and/or act as a cautionary\ntale as you work on your own projects.\n\nmca\nhtt=\r\np://amundsen.com/blog/\n\n[1] http://exyus.com\n[2]\nhttp://code.google.com/p/m=\r\nikeamundsen/source/browse/#svn/trunk/Amundsen.Utilities\n\n\n\nOn Wed, Dec 9, 2=\r\n009 at 17:00, J=F8rn Wildt &lt;jw@...&gt; wrote:\n\n&gt;\n&gt;\n&gt; There has bee=\r\nn a lot of discussion about the right way to implement a REST\n&gt; service, bu=\r\nt less focus on how you would actually code a client. I have been\n&gt; looking=\r\n at RESTFulie[1], Subbu Alamarju[2], and the Starbucks[3] example,\n&gt; and wo=\r\nuld like to discuss a similar typed approach in C#.\n&gt;\n&gt; I am experimenting =\r\nwith an actual implementation and would like some\n&gt; feedback before getting=\r\n too far :-)\n&gt;\n&gt; Thanks, J=F8rn\n&gt;\n&gt;\n&gt; [1] http://github.com/caelum/restfuli=\r\ne\n&gt; [2] http://www.infoq.com/articles/subbu-allamaraju-rest\n&gt; [3] http://ww=\r\nw.infoq.com/articles/webber-rest-workflow\n&gt;\n&gt;\n&gt; *Service example documentat=\r\nion*\n&gt; In order to discuss a REST client we need a service example. My firs=\r\nt use\n&gt; case is a movie shop where we can search for movies in a specific c=\r\nategory.\n&gt; To do so the shop has published a single search service URL temp=\r\nlate:\n&gt; http://movies.org/movies?category=3D{category&lt;http://movies.org/mov=\r\nies?category=3D%7Bcategory&gt;}.\n&gt;\n&gt;\n&gt; The shop also publishes three ressource=\r\n mime types:\n&gt;\n&gt; // Example &quot;application/vnd.movies.movie+xml&quot;\n&gt; &lt;Movie&gt;\n&gt; =\r\n  &lt;Self href=3D&quot;http://movies.org/movies/91&quot;/&gt;\n&gt;   &lt;Title&gt;Strange Dawn&lt;/Tit=\r\nle&gt;\n&gt;   &lt;Category&gt;Thriller&lt;/Category&gt;\n&gt;   &lt;Director href=3D&quot;http://movies.o=\r\nrg/persons/47&quot;/&gt;\n&gt; &lt;/Movie&gt;\n&gt;\n&gt;  // Example &quot;application/vnd.movies.movie-c=\r\nollection+xml&quot;\n&gt; &lt;Movies&gt;\n&gt;   &lt;Self href=3D&quot;http://movies.org/movies?catego=\r\nry=3DThriller&quot;/&gt;\n&gt;   &lt;Movie&gt;\n&gt;     &lt;Title&gt;Strange Dawn&lt;/Title&gt;\n&gt;     &lt;Self =\r\nhref=3D&quot;http://movies.org/movies/91&quot;/&gt;\n&gt;   &lt;/Movie&gt;\n&gt;    &lt;Movie&gt;...&lt;/Movie&gt;=\r\n\n&gt;   &lt;Movie&gt;...&lt;/Movie&gt;\n&gt; &lt;/Movies&gt;\n&gt;\n&gt; // Example &quot;application/vnd.movies.=\r\nperson+xml&quot;\n&gt; &lt;Person&gt;\n&gt;   &lt;Self href=3D&quot;http://movies.org/persons/47&quot;/&gt;\n&gt; =\r\n  &lt;Name&gt;Richard Strangelove&lt;/Name&gt;\n&gt;   &lt;Photo href=3D&quot;http://facebook.com/p=\r\nhotos/hh31y1&quot;/&gt;\n&gt; &lt;/Person&gt;\n&gt;\n&gt; Comments\n&gt;\n&gt; - I have avoided Atom Links si=\r\nnce, in my experience, these don&#39;t serialize\n&gt; well in the C# standard XML =\r\nserializer. You could although create your own\n&gt; serializer, so this is not=\r\n an important restriction.\n&gt;\n&gt; - Notice how the person type has external re=\r\nferences :-)\n&gt;\n&gt;\n&gt; *Code example - Searching*\n&gt; The cleanest client usage I=\r\n can come up with is:\n&gt;\n&gt;   // A link (template). This should be fetched fr=\r\nom a configuration file.\n&gt;   Link MoviesSearchLink =3D new Link(&quot;\n&gt; http://=\r\nmovies.org/movies?category=3D{category}&quot;);\n&gt;\n&gt;   // Anonymous class with se=\r\narch parameters. Reflection is used to extract\n&gt; values.\n&gt;   // This is abo=\r\nut the simplest way to write a &quot;fixed hashmap&quot; in C#\n&gt;   var movieSearchPar=\r\nameter =3D new { category =3D &quot;Thriller&quot; };\n&gt;\n&gt;   // Get ressource stored a=\r\nt the link endpoint\n&gt;   MovieCollection movies =3D\n&gt; MoviesSearchLink.Get&lt;M=\r\novieCollection&gt;(movieSearchParameter);\n&gt;\n&gt;   // Iterate over all movies and=\r\n print title\n&gt;   foreach (Movie movie in movies)\n&gt;     Console.WriteLine(&quot;T=\r\nitle: &quot; + movie.Title);\n&gt; Comments:\n&gt;\n&gt; - A Link is untyped. We do not know=\r\n what lies at the end of it.\n&gt;\n&gt; - A link knows how to merge parameters int=\r\no URL templates.\n&gt;\n&gt; - The result of GETing a link is typed. The actual typ=\r\ne is defined by the\n&gt; returned mime type.\n&gt;\n&gt; - In order to do something us=\r\nefull with the search we must assume that it\n&gt; returns a MovieCollection. H=\r\nence the generic type specifier in the Get&lt;T&gt;()\n&gt; method. This is apriori i=\r\nnformation which I cannot see how to code without.\n&gt;\n&gt;\n&gt; *Parsing ressource=\r\ns*\n&gt; One piece of magic is how Get&lt;MovieCollection&gt;(params) knows how to co=\r\nnvert\n&gt; the bytes returned from the endpoint to a MovieCollection. For this=\r\n we\n&gt; create a MimeTypeRegistry:\n&gt;\n&gt;   MimeTypeRegistry.Register&lt;MovieColle=\r\nction,\n&gt; MovieCollectionBuilder&gt;(&quot;application/vnd.movies.movie-collection&quot;)=\r\n;\n&gt;\n&gt; which is equal to:\n&gt;\n&gt;    MimeTypeRegistry.Register(typeof(MovieColle=\r\nction),\n&gt; typeof(MovieCollectionBuilder), &quot;application/vnd.movies.movie-col=\r\nlection&quot;);\n&gt;\n&gt; This means: when ever we must parse a specific mime type, we=\r\n look up a\n&gt; builder in the registry and uses this to parse the returned re=\r\nssource\n&gt; representation.\n&gt;\n&gt; The typed Get&lt;MovieCollection&gt;(params) method=\r\n GETs the ressource data,\n&gt; instantiates the corresponding builder, verifie=\r\ns that the built object type\n&gt; matches the requested and returns the built =\r\nobject.\n&gt;\n&gt; Comments:\n&gt;\n&gt; - This is static typing which RESTafarians seems =\r\nto shy away from. But the\n&gt; type depends on the returned ressource, _not_ t=\r\nhe URL. So to my knowledge\n&gt; this is fine.\n&gt;\n&gt; - It is not required to use =\r\nthe type safe Get&lt;T&gt;(), you could also call\n&gt; Get() which returns an object=\r\n. The actual returned type then depends solely\n&gt; on the mime type of the re=\r\nssource, and it is up to the programmer to decide\n&gt; what to do with it.\n&gt;\n&gt;=\r\n - I am quite sure you can write some pretty generic XML builders without\n&gt;=\r\n much overhead.\n&gt;\n&gt; - This is not limited to XML, you could add image/jpeg =\r\nand other well known\n&gt; mime types. You just need to supply a proper builder=\r\n.\n&gt;\n&gt;\n&gt; *Code example - Getting sub-ressources*\n&gt; Now we want to get inform=\r\nation about the director of the movie:\n&gt;\n&gt;   // One of the returned self li=\r\nnks from the search query\n&gt;   Link movieLink =3D movies[0].Self;\n&gt;\n&gt;   // G=\r\net the actual movie\n&gt;   Movie movie =3D movieLink.Get&lt;Movie&gt;();\n&gt;\n&gt;   // Ge=\r\nt the director\n&gt;   MoviePerson director =3D movie.Director.Get&lt;MoviePerson&gt;=\r\n();\n&gt;\n&gt; Comments:\n&gt;\n&gt; - There are no hard coded links here.\n&gt;\n&gt; - The only =\r\napriori information we use is the knowledge of the types of the\n&gt; reference=\r\nd ressources. These types are documented in the mime type in which\n&gt; the li=\r\nnks are used.\n&gt;\n&gt;\n&gt; *Versioning*\n&gt; Now our wonderfull movie shop decides to=\r\n be able to sell and rate movies.\n&gt; They do their own selling, but uses the=\r\n fameous ratings.org service to\n&gt; rate their movies. So the shop creates a =\r\nnew version of the movie mime type:\n&gt;\n&gt; // Example &quot;application/vnd.movies.=\r\nmovie.*v2*+xml&quot;\n&gt; &lt;Movie&gt;\n&gt;   &lt;Self href=3D&quot;http://movies.org/movies/91&quot;/&gt;\n=\r\n&gt;   &lt;Title&gt;Strange Dawn&lt;/Title&gt;\n&gt;   &lt;Category&gt;Thriller&lt;/Category&gt;\n&gt;   &lt;Dire=\r\nctor href=3D&quot;http://movies.org/persons/47&quot;/&gt;\n&gt;   &lt;Orders href=3D&quot;http://mov=\r\nies.org/movies/91/orders&quot;/&gt;\n&gt;   &lt;Ratings href=3D\n&gt; http://ratings.org/ratin=\r\ngs?item=3Dhttp%3a%2f%2fmovies.org%2fmovies%2f91/&gt;\n&gt; &lt;/Movie&gt;\n&gt;\n&gt; In order t=\r\no service both old and new clients the shop decides to return the\n&gt; initial=\r\n movie mime type by default. Never clients should use the Accept\n&gt; header t=\r\no indicate that they want the new version. The same goes for the\n&gt; movies c=\r\nollection type.\n&gt;\n&gt; Our existing client code works happily as it did before=\r\n.\n&gt;\n&gt;\n&gt; *Code example - A new client*\n&gt; The new client code would look like=\r\n this:\n&gt;\n&gt;    // A link (template). This should be fetched from a configura=\r\ntion file.\n&gt;   Link MoviesSearchLink =3D new Link(&quot;\n&gt; http://movies.org/mov=\r\nies?category=3D{category}&quot;);\n&gt;\n&gt;   // Anonymous class with search parameter=\r\ns. Reflection is used to extract\n&gt; values.\n&gt;   // This is about the simples=\r\nt way to write a &quot;fixed hashmap&quot; in C#\n&gt;   var movieSearchParameter =3D new=\r\n { category =3D &quot;thriller&quot; };\n&gt;\n&gt;   // Setting up the Accept header\n&gt;   var=\r\n movieSearchHeaders =3D new { Accept =3D\n&gt; &quot;application/vnd.movies.movie-co=\r\nllection.v2&quot; }\n&gt;\n&gt;   // Get ressource stored at the link endpoint\n&gt;   Movie=\r\nCollection movies =3D\n&gt; MoviesSearchLink.Get&lt;MovieCollection&gt;(movieSearchPa=\r\nrameter,\n&gt; movieSearchHeaders);\n&gt;\n&gt;   // Iterate over all movies and print =\r\ntitle\n&gt;   foreach (Movie movie in movies)\n&gt;     Console.WriteLine(&quot;Title: &quot;=\r\n + movie.Title);\n&gt;\n&gt; *Code example - Buying movies*\n&gt; Now we have a movie w=\r\nhich has an embedded link to it&#39;s sales orders. To buy\n&gt; a movie we post a =\r\nnew order to the sales order collection:\n&gt;\n&gt;    // One of the returned self=\r\n links from the search query\n&gt;   Link movieLink =3D movies[0].Self;\n&gt;\n&gt;   /=\r\n/ Get the actual movie\n&gt;   Movie movie =3D movieLink.Get&lt;Movie&gt;();\n&gt;\n&gt;   //=\r\n Create a new order request\n&gt;   MovieOrderRequest orderRequest =3D new Movi=\r\neOrderRequest(movie.Self, 1 /*\n&gt; quantity */);\n&gt;\n&gt;   // Post the order requ=\r\nest to the order collection\n&gt;   // Assume it returns the newly created orde=\r\nr\n&gt;   MovieOrder order =3D movie.Orders.Post(orderRequest);\n&gt;\n&gt; Comments:\n&gt;=\r\n\n&gt; - The POST result in a redirect to the newly created order. The system G=\r\nETs\n&gt; this new order and returns it. This means we loose the intermediate d=\r\nata\n&gt; returned from the POST.\n&gt;\n&gt;\n&gt; *Other verbs*\n&gt; The Link class is has b=\r\nuilt-in support for GET/PUT/POST/DELETE. Other verbs\n&gt; can be executed thro=\r\nugh a generic &quot;Request&quot; method:\n&gt;\n&gt;   SomeType x =3D someLink.Request(&quot;SOME=\r\nVERB&quot;, somePayload);\n&gt;\n&gt;\n&gt; *Caching*\n&gt; The Link class and it&#39;s associted me=\r\nthods should of course respect ETag and\n&gt; if-not-modified-since etc. This w=\r\nould require the framework to be\n&gt; initialized with a cache implementation =\r\nof some kind.\n&gt;\n&gt;\n&gt; *Error handling*\n&gt; I would suggest using execptions for=\r\n error handling.\n&gt;\n&gt;\n&gt;\n&gt;\n&gt; \n\r\n--00151747bfe200155e047a53a051\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;div&gt;J=F8rn:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;This line stands out first:=A0&quot;&lt;=\r\nspan class=3D&quot;Apple-style-span&quot; style=3D&quot;font-family: Arial; &quot;&gt;I have avoid=\r\ned Atom Links since, in my experience,=A0these don&#39;t serialize well in =\r\nthe C# standard XML serializer.&quot;&lt;/span&gt;&lt;/div&gt;\n&lt;div&gt;&lt;span class=3D&quot;Appl=\r\ne-style-span&quot; style=3D&quot;font-family: Arial; &quot;&gt;My advice is to be wary of ser=\r\nializers when coding for HTTP. There are so many variances with incoming re=\r\nsponses I think you&#39;ll find it a real task to build apps based on =A0su=\r\nccessfully converting incoming response bodies into code-able objects. Usin=\r\ng serializers also tends to lead programmers to tight-binding between the c=\r\node and the HTTP response body. This means changes in the body may blow the=\r\n serializer code. This is especially true when working with &quot;generic&q=\r\nuot; media-types such as XML and JSON, etc. since they have very little sem=\r\nantic value built into them.&lt;/span&gt;&lt;/div&gt;\n&lt;div&gt;&lt;span class=3D&quot;Apple-style-s=\r\npan&quot; style=3D&quot;font-family: Arial; &quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=3D&quot;Ap=\r\nple-style-span&quot; style=3D&quot;font-family: Arial; &quot;&gt;That leads me to another bit=\r\n of advice I&#39;ll offer: think about link semantics from the very start w=\r\nhen creating your library. The Web browser client works because the link se=\r\nmantics of the HTML media-type are well-defined (and pretty narrow). There =\r\nare a limited number of link elements. Some are in-doc links (IMG, LINK, SC=\r\nRIPT, etc.), some are navigational links (A, FORM). All, except FORM, are l=\r\nimited to using the GET method. It&#39;s the semantic model of HTML that al=\r\nlows browsers to properly handle HTTP responses from previously unknown loc=\r\nations and still provide full functionality - even a decade after the seman=\r\ntics where defined. I suspect you&#39;ll find that building a client to pro=\r\nperly locate, identify, and=A0understand=A0the link semantics of a single m=\r\nedia type (application/vnd.movies.movie+xml) is challenging by itself. Buil=\r\nding one that handles multiple media-types just adds to the fun&lt;g&gt;.&lt;/=\r\nspan&gt;&lt;/div&gt;\n&lt;div&gt;&lt;span class=3D&quot;Apple-style-span&quot; style=3D&quot;font-family: Ari=\r\nal; &quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=3D&quot;Apple-style-span&quot; style=3D&quot;font-=\r\nfamily: Arial; &quot;&gt;I also encourage you to treat HTTP control data (headers) =\r\nas top-level programming objects in your library. Allowing programmers to d=\r\necorate requests with control data (content-encoding, media-type, authoriza=\r\ntion, cache-control, etc.) and have direct access to the control data on re=\r\nsponses will improve the flexibility of any client/server built w/ your lib=\r\nrary.&lt;/span&gt;&lt;/div&gt;\n&lt;div&gt;&lt;span class=3D&quot;Apple-style-span&quot; style=3D&quot;font-fami=\r\nly: Arial; &quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D=\r\n&quot;Arial&quot;&gt;In the big picture, I prefer looking at HTTP programming from the s=\r\ntand-point of &quot;resource programming.&quot; I look for a code library t=\r\nhat lets me define a resource, associate or or more URIs with that resource=\r\n, handle multiple representations of the resource (for both requests and re=\r\nsponse bodies), and properly decorate requests and responses w/ control dat=\r\na. I also want to make sure it handles mime-types properly (conneg included=\r\n), conditional requests (GET and PUT), and supports flexible authentication=\r\n models.=A0&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;Aria=\r\nl&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;Arial&quot;&gt;FW=\r\nIW,=A0&lt;/font&gt;I started work on a REST-ful HTTP C# framework a while back [1=\r\n]. It&#39;s been dormant for quite some time as the current version works w=\r\nell for me, but there are lots of places it needs work. I&#39;ve also built=\r\n an HTTP utilities library=A0[2]=A0with most all the bits I need for buildi=\r\nng REST-ful HTTP apps. It&#39;s smaller and lighter than my &#39;framework&=\r\n#39; library. I mention these as some of the code there might be helpful an=\r\nd/or act as a cautionary tale as you work on your own projects.&lt;/div&gt;\n&lt;div&gt;=\r\n&lt;br&gt;&lt;/div&gt;&lt;div&gt;mca&lt;br&gt;&lt;a href=3D&quot;http://amundsen.com/blog/&quot;&gt;http://amundsen=\r\n.com/blog/&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;[1] &lt;a href=3D&quot;http://exyus.com&quot;&gt;http://ex=\r\nyus.com&lt;/a&gt;&lt;/div&gt;&lt;div&gt;[2]=A0&lt;a href=3D&quot;http://code.google.com/p/mikeamundse=\r\nn/source/browse/#svn/trunk/Amundsen.Utilities&quot;&gt;http://code.google.com/p/mik=\r\neamundsen/source/browse/#svn/trunk/Amundsen.Utilities&lt;/a&gt;&lt;/div&gt;\n&lt;div&gt;&lt;br cl=\r\near=3D&quot;all&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;div class=3D&quot;gmail_quote&quot;&gt;On Wed, Dec 9, 2009 at 17:00=\r\n, J=F8rn Wildt &lt;span dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:jw@...&quot;&gt;=\r\njw@...&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote class=3D&quot;gmail_quot=\r\ne&quot; style=3D&quot;margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex;&quot;=\r\n&gt;\n\n\n\n\n\n\n\n        \n\n\n\n\n\n\n&lt;div&gt;\n\n\n\n\n&lt;br&gt;&lt;br&gt;\n\n\n\n\n\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=\r\n=3D&quot;Arial&quot;&gt;There has been a lot of discussion about the right \nway to imple=\r\nment a REST service, but less focus on how you would actually code a \nclien=\r\nt. I have been looking at RESTFulie[1], Subbu Alamarju[2], and the \nStarbuc=\r\nks[3] example, and would like to discuss a similar typed approach in \nC#.&lt;/=\r\nfont&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&lt;/font&gt;=A0&lt;/div&gt;\n&lt;div&gt;&lt;fon=\r\nt size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;I am experimenting with an actual implementatio=\r\nn \nand would like some feedback before getting too far :-)&lt;/font&gt;&lt;/div&gt;\n&lt;di=\r\nv&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&lt;/font&gt;=A0&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; fa=\r\nce=3D&quot;Arial&quot;&gt;Thanks, J=F8rn&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Aria=\r\nl&quot;&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;[1] &lt;a&gt;http://github.com/caelum/rest=\r\nfulie&lt;/a&gt;&lt;/div&gt;\n&lt;div&gt;[2] &lt;a&gt;http://www.infoq.com/articles/subbu-allamaraju-=\r\nrest&lt;/a&gt;&lt;/div&gt;\n&lt;div&gt;[3] &lt;a href=3D&quot;http://www.infoq.com/articles/webber-res=\r\nt-workflow&quot; target=3D&quot;_blank&quot;&gt;http://www.infoq.com/articles/webber-rest-wor=\r\nkflow&lt;/a&gt;&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;A=\r\nrial&quot;&gt;&lt;/font&gt;=A0&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&lt;strong&gt;Service=\r\n example \ndocumentation&lt;/strong&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D=\r\n&quot;Arial&quot;&gt;In order to discuss a REST client we need a service \nexample. &lt;/fon=\r\nt&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;My first use case is a movie shop where \n=\r\nwe can search for movies in a specific category. To do so the shop has publ=\r\nished \na single search service URL template: &lt;a href=3D&quot;http://movies.org/m=\r\novies?category=3D%7Bcategory&quot; target=3D&quot;_blank&quot;&gt;http://movies.org/movies?ca=\r\ntegory=3D{category&lt;/a&gt;}. \n&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial=\r\n&quot;&gt;&lt;/font&gt;=A0&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;The shop also publi=\r\nshes=A0three ressource mime \ntypes:&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=\r\n=3D&quot;Arial&quot;&gt;&lt;/font&gt;=A0&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;// Example=\r\n \n&quot;application/vnd.movies.movie+xml&quot;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=\r\n=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&lt;Movie&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=\r\n=3D&quot;Arial&quot;&gt;=A0 &lt;Self \nhref=3D&quot;&lt;a href=3D&quot;http://movies.org/movies/9=\r\n1&quot; target=3D&quot;_blank&quot;&gt;http://movies.org/movies/91&lt;/a&gt;&quot;/&gt;&lt;/font&gt;&lt;/div=\r\n&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;=A0 &lt;Title&gt;Strange \nDawn&lt;/T=\r\nitle&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;=A0 \n&lt;Categor=\r\ny&gt;Thriller&lt;/Category&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;A=\r\nrial&quot;&gt;=A0 &lt;Director \nhref=3D&quot;&lt;a href=3D&quot;http://movies.org/persons/4=\r\n7&quot; target=3D&quot;_blank&quot;&gt;http://movies.org/persons/47&lt;/a&gt;&quot;/&gt;&lt;/font&gt;&lt;/di=\r\nv&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&lt;/Movie&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;f=\r\nont size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&lt;/font&gt;=A0&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=\r\n=3D&quot;Arial&quot;&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;A=\r\nrial&quot;&gt;// Example \n&quot;application/vnd.movies.movie-collection+xml&quot;&lt;/=\r\nfont&gt;&lt;/div&gt;\n&lt;div&gt;&lt;Movies&gt;&lt;/div&gt;\n&lt;div&gt;=A0 &lt;Self \nhref=3D&quot;&lt;a hr=\r\nef=3D&quot;http://movies.org/movies?category=3DThriller&quot; target=3D&quot;_blank&quot;&gt;http:=\r\n//movies.org/movies?category=3DThriller&lt;/a&gt;&quot;/&gt;&lt;/div&gt;\n&lt;div&gt;=A0 &lt;M=\r\novie&gt;&lt;/div&gt;&lt;/font&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;=A0=\r\n =A0 &lt;Title&gt;Strange \nDawn&lt;/Title&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=\r\n=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;=A0=A0=A0 &lt;Self \nhref=3D&quot;&lt;a href=3D&quot;http://mo=\r\nvies.org/movies/91&quot; target=3D&quot;_blank&quot;&gt;http://movies.org/movies/91&lt;/a&gt;&quot;=\r\n/&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;=A0 &lt;/Movie&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=\r\n=3D&quot;Arial&quot;&gt;\n&lt;div&gt;=A0 &lt;Movie&gt;...&lt;/Movie&gt;&lt;/div&gt;\n&lt;div&gt;=A0 &lt;Movi=\r\ne&gt;...&lt;/Movie&gt;&lt;/div&gt;&lt;/Movies&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;di=\r\nv&gt;// Example &quot;application/vnd.movies.person+xml&quot;&lt;/div&gt;\n&lt;div&gt;&lt;P=\r\nerson&gt;&lt;/div&gt;\n&lt;div&gt;=A0 &lt;Self href=3D&quot;&lt;a href=3D&quot;http://movies.org=\r\n/persons/47&quot; target=3D&quot;_blank&quot;&gt;http://movies.org/persons/47&lt;/a&gt;&quot;/&gt;&lt;=\r\n/div&gt;\n&lt;div&gt;=A0 &lt;Name&gt;Richard Strangelove&lt;/Name&gt;&lt;/div&gt;\n&lt;div&gt;=A0 =\r\n&lt;Photo href=3D&quot;&lt;a href=3D&quot;http://facebook.com/photos/hh31y1&quot; target=\r\n=3D&quot;_blank&quot;&gt;http://facebook.com/photos/hh31y1&lt;/a&gt;&quot;/&gt;&lt;/div&gt;\n&lt;div&gt;&lt=\r\n;/Person&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&lt;/font&gt;=A0&lt;/d=\r\niv&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;Comments&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font s=\r\nize=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&lt;/font&gt;=A0&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Ari=\r\nal&quot;&gt;- I have avoided Atom Links since, in my \nexperience,=A0these don&#39;t=\r\n serialize well in the C# standard XML serializer. \nYou could although=A0cr=\r\neate your own serializer, so this is not an important \nrestriction.&lt;/font&gt;&lt;=\r\n/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&lt;/font&gt;=A0&lt;/div&gt;\n&lt;div&gt;&lt;font size=\r\n=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;- Notice how the person type has external \nreferences=\r\n :-)&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&lt;/font&gt;=A0&lt;/div&gt;\n&lt;di=\r\nv&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&lt;/font&gt;=A0&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; fa=\r\nce=3D&quot;Arial&quot;&gt;&lt;strong&gt;Code example - \nSearching&lt;/strong&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;=\r\nfont size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;The cleanest client usage I can come up with=\r\n \nis:&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&lt;/font&gt;=A0&lt;/div&gt;\n&lt;d=\r\niv&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;=A0 // A link (template). This should be=\r\n fetched \nfrom a configuration file.&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; fac=\r\ne=3D&quot;Arial&quot;&gt;=A0=A0Link MoviesSearchLink =3D new Link(&quot;&lt;a&gt;http://movies=\r\n.org/movies?category=3D{category&lt;/a&gt;}&quot;);&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=\r\n=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&lt;/font&gt;=A0&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;=\r\n&gt;=A0 // Anonymous class with search parameters. \nReflection is used to extr=\r\nact values.&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;=A0 // This i=\r\ns about the simplest way to write a \n&quot;fixed hashmap&quot; in C#&lt;/font&gt;=\r\n&lt;/div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;\n&lt;div&gt;=A0 var movieSearchParameter =\r\n=3D new { category =3D &quot;Thriller&quot; };&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;=\r\n=A0 // Get ressource stored at the link endpoint&lt;/div&gt;\n&lt;div&gt;=A0 MovieCollec=\r\ntion movies =3D \nMoviesSearchLink.Get&lt;MovieCollection&gt;(movieSearchPar=\r\nameter);&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;=A0 // Iterate over all movies and print=\r\n title&lt;/div&gt;\n&lt;div&gt;=A0 foreach (Movie movie in movies)&lt;/div&gt;\n&lt;div&gt;=A0=A0=A0 =\r\nConsole.WriteLine(&quot;Title: &quot; + movie.Title);&lt;br&gt;&lt;/div&gt;\n&lt;div&gt;Commen=\r\nts:&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;- A Link is untyped. We do not know what lies=\r\n at the end of it.&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;- A link knows how to merge pa=\r\nrameters into URL templates.&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;- The result of GETi=\r\nng a link is typed. The actual type is defined by the \nreturned mime type.&lt;=\r\n/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;- In order to do something usefull with the searc=\r\nh we must assume that it \nreturns a MovieCollection. Hence the generic type=\r\n specifier in the \nGet&lt;T&gt;() method. This is apriori information=A0whi=\r\nch I cannot see how \nto code without.&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;=\r\ndiv&gt;&lt;strong&gt;Parsing ressources&lt;/strong&gt;&lt;/div&gt;\n&lt;div&gt;One piece of magic is ho=\r\nw Get&lt;MovieCollection&gt;(params) knows how to \nconvert the=A0bytes retu=\r\nrned from the endpoint to a MovieCollection. For this \nwe create a MimeType=\r\nRegistry:&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;=A0 MimeTypeRegistry.Register&lt;MovieC=\r\nollection, \nMovieCollectionBuilder&gt;(&quot;application/vnd.movies.movie-c=\r\nollection&quot;);&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;which is equal to:&lt;/div&gt;\n&lt;div&gt;=\r\n=A0&lt;/div&gt;\n&lt;div&gt;\n&lt;div&gt;=A0 MimeTypeRegistry.Register(typeof(MovieCollection),=\r\n \ntypeof(MovieCollectionBuilder), \n&quot;application/vnd.movies.movie-colle=\r\nction&quot;);&lt;/div&gt;&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;This means: when ever we must=\r\n parse a specific mime type, we look up a \nbuilder in the registry and uses=\r\n this to parse the returned ressource \nrepresentation.&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;=\r\n\n&lt;div&gt;The typed Get&lt;MovieCollection&gt;(params) method GETs the ressourc=\r\ne \ndata, instantiates the corresponding builder, verifies that the built ob=\r\nject \ntype matches the requested and returns the built object.&lt;/div&gt;\n&lt;div&gt;=\r\n=A0&lt;/div&gt;\n&lt;div&gt;Comments:&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;- This is static typing =\r\nwhich RESTafarians seems to shy away from. But the \ntype depends on the ret=\r\nurned ressource, _not_ the URL. So to my knowledge this \nis fine.&lt;/div&gt;\n&lt;di=\r\nv&gt;=A0&lt;/div&gt;\n&lt;div&gt;- It is not required to use the type safe Get&lt;T&gt;(), =\r\nyou could also \ncall Get() which returns an object. The actual returned typ=\r\ne then depends solely \non the mime type of the ressource, and it is up to t=\r\nhe programmer to decide what \nto do with it.&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;- I =\r\nam quite sure you can write some pretty generic XML builders without \nmuch =\r\noverhead.&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;- This is not limited to XML, you could=\r\n add image/jpeg and other well known \nmime types. You just need to supply a=\r\n proper builder.&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;&lt;strong&gt;Code exam=\r\nple - Getting sub-ressources&lt;/strong&gt;&lt;/div&gt;\n&lt;div&gt;Now we want to get informa=\r\ntion about the director of the movie:&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;=A0 // One =\r\nof the returned self links from the search query&lt;/div&gt;\n&lt;div&gt;=A0 Link movieL=\r\nink =3D movies[0].Self;&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;=A0 // Get the actual mov=\r\nie&lt;/div&gt;\n&lt;div&gt;=A0 Movie movie =3D movieLink.Get&lt;Movie&gt;();&lt;/div&gt;\n&lt;div&gt;=\r\n=A0&lt;/div&gt;\n&lt;div&gt;=A0 // Get the director&lt;/div&gt;\n&lt;div&gt;=A0 MoviePerson director =\r\n=3D \nmovie.Director.Get&lt;MoviePerson&gt;();&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;Com=\r\nments:&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;- There are no hard coded links here.&lt;/div=\r\n&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;- The only apriori information we use is the knowledg=\r\ne of the types of the \nreferenced ressources. These types=A0are documented =\r\nin the mime type in which \nthe links=A0are used.&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;=\r\n=A0&lt;/div&gt;\n&lt;div&gt;&lt;strong&gt;Versioning&lt;/strong&gt;&lt;/div&gt;\n&lt;div&gt;Now our wonderfull mo=\r\nvie shop decides to be able to sell and rate movies. \nThey do their own sel=\r\nling, but uses the fameous &lt;a href=3D&quot;http://ratings.org&quot; target=3D&quot;_blank&quot;=\r\n&gt;ratings.org&lt;/a&gt; service to rate \ntheir movies. So=A0the shop=A0creates a n=\r\new version of the movie mime \ntype:&lt;/div&gt;\n&lt;div&gt;=A0\n&lt;div&gt;&lt;font size=3D&quot;2&quot; fa=\r\nce=3D&quot;Arial&quot;&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;// Example \n&quot;applic=\r\nation/vnd.movies.movie.&lt;strong&gt;v2&lt;/strong&gt;+xml&quot;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;fon=\r\nt size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&lt;Movie&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2=\r\n&quot; face=3D&quot;Arial&quot;&gt;=A0 &lt;Self \nhref=3D&quot;&lt;a href=3D&quot;http://movies.org/mo=\r\nvies/91&quot; target=3D&quot;_blank&quot;&gt;http://movies.org/movies/91&lt;/a&gt;&quot;/&gt;&lt;/font=\r\n&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;=A0 &lt;Title&gt;Strange \nDawn=\r\n&lt;/Title&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;=A0 \n&lt;C=\r\nategory&gt;Thriller&lt;/Category&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; fac=\r\ne=3D&quot;Arial&quot;&gt;=A0 &lt;Director \nhref=3D&quot;&lt;a href=3D&quot;http://movies.org/per=\r\nsons/47&quot; target=3D&quot;_blank&quot;&gt;http://movies.org/persons/47&lt;/a&gt;&quot;/&gt;&lt;/fon=\r\nt&gt;&lt;/div&gt;\n&lt;div&gt;=A0 &lt;Orders href=3D&quot;&lt;a href=3D&quot;http://movies.org/movi=\r\nes/91/orders&quot; target=3D&quot;_blank&quot;&gt;http://movies.org/movies/91/orders&lt;/a&gt;&quot=\r\n;/&gt;&lt;/div&gt;\n&lt;div&gt;=A0 &lt;Ratings href=3D&lt;a href=3D&quot;http://ratings.org/rati=\r\nngs?item=3Dhttp%3a%2f%2fmovies.org%2fmovies%2f91&quot; target=3D&quot;_blank&quot;&gt;http://=\r\nratings.org/ratings?item=3Dhttp%3a%2f%2fmovies.org%2fmovies%2f91&lt;/a&gt;/&gt;&lt;/=\r\ndiv&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&lt;/Movie&gt;&lt;/font&gt;&lt;/div&gt;&lt;/font=\r\n&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;In order to service both old and new clie=\r\nnts the shop decides to return the \ninitial movie mime type by default. Nev=\r\ner clients should use the Accept header \nto indicate that they want=A0the n=\r\new version. The same goes for the movies \ncollection type.&lt;/div&gt;\n&lt;div&gt;=A0&lt;/=\r\ndiv&gt;\n&lt;div&gt;Our existing client code works happily as it did before.&lt;/div&gt;\n&lt;d=\r\niv&gt;=A0&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;&lt;strong&gt;Code example - A new client&lt;/stron=\r\ng&gt;&lt;/div&gt;\n&lt;div&gt;The new client code would look like this:&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div=\r\n&gt;\n&lt;div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;=A0 // A link (template). This=\r\n should be fetched \nfrom a configuration file.&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=\r\n=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;=A0=A0Link MoviesSearchLink =3D new Link(&quot;&lt;a&gt;htt=\r\np://movies.org/movies?category=3D{category&lt;/a&gt;}&quot;);&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;=\r\nfont size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&lt;/font&gt;=A0&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=\r\n=3D&quot;Arial&quot;&gt;=A0 // Anonymous class with search parameters. \nReflection is us=\r\ned to extract values.&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;=A0=\r\n // This is about the simplest way to write a \n&quot;fixed hashmap&quot; in=\r\n C#&lt;/font&gt;&lt;/div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;\n&lt;div&gt;=A0 var movieSearchPa=\r\nrameter =3D new { category =3D &quot;thriller&quot; };&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;=\r\n\n&lt;div&gt;=A0 // Setting up the Accept header&lt;/div&gt;\n&lt;div&gt;=A0 var movieSearchHea=\r\nders =3D new { Accept =3D \n&quot;application/vnd.movies.movie-collection.v2=\r\n&quot; }&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;=A0 // Get ressource stored at the link =\r\nendpoint&lt;/div&gt;\n&lt;div&gt;=A0 MovieCollection movies =3D \nMoviesSearchLink.Get&lt=\r\n;MovieCollection&gt;(movieSearchParameter, \nmovieSearchHeaders);&lt;/div&gt;\n&lt;div=\r\n&gt;=A0&lt;/div&gt;\n&lt;div&gt;=A0 // Iterate over all movies and print title&lt;/div&gt;\n&lt;div&gt;=\r\n=A0 foreach (Movie movie in movies)&lt;/div&gt;\n&lt;div&gt;=A0=A0=A0 Console.WriteLine(=\r\n&quot;Title: &quot; + \nmovie.Title);&lt;br&gt;&lt;/div&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n=\r\n&lt;div&gt;&lt;strong&gt;Code example - Buying movies&lt;/strong&gt;&lt;/div&gt;\n&lt;div&gt;Now we have a=\r\n movie which has an embedded link to it&#39;s sales orders. To buy \na movie=\r\n we post a new order to the sales order collection:&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;d=\r\niv&gt;\n&lt;div&gt;=A0 // One of the returned self links from the search query&lt;/div&gt;\n=\r\n&lt;div&gt;=A0 Link movieLink =3D movies[0].Self;&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;=A0 /=\r\n/ Get the actual movie&lt;/div&gt;\n&lt;div&gt;=A0 Movie movie =3D movieLink.Get&lt;Movi=\r\ne&gt;();&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;=A0 //=A0Create a new order request&lt;/div=\r\n&gt;\n&lt;div&gt;=A0 MovieOrderRequest orderRequest =3D new MovieOrderRequest(movie.S=\r\nelf, 1 \n/* quantity */);&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;=A0 // Post the order re=\r\nquest to the order collection&lt;/div&gt;\n&lt;div&gt;=A0 // Assume it returns the newly=\r\n created order&lt;/div&gt;\n&lt;div&gt;=A0=A0MovieOrder order \n=3D=A0movie.Orders.Post(o=\r\nrderRequest);&lt;/div&gt;&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;Comments:&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div=\r\n&gt;\n&lt;div&gt;- The POST result in a redirect to the newly created=A0order. The sy=\r\nstem \nGETs this new order and returns it. This means we loose the intermedi=\r\nate data \nreturned from the POST.&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;=\r\n&lt;strong&gt;Other verbs&lt;/strong&gt;&lt;/div&gt;\n&lt;div&gt;The Link class is has built-in supp=\r\nort for GET/PUT/POST/DELETE. Other verbs \ncan be executed through a generic=\r\n &quot;Request&quot; method:&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;=A0 SomeType x =3D s=\r\nomeLink.Request(&quot;SOMEVERB&quot;, somePayload);&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;d=\r\niv&gt;=A0&lt;/div&gt;\n&lt;div&gt;&lt;strong&gt;Caching&lt;/strong&gt;&lt;/div&gt;\n&lt;div&gt;The Link class and it=\r\n&#39;s associted methods should of course respect ETag and \nif-not-modified=\r\n-since etc. This would require the framework to be initialized \nwith a cach=\r\ne implementation of some kind.&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;&lt;st=\r\nrong&gt;Error handling&lt;/strong&gt;&lt;/div&gt;\n&lt;div&gt;I would suggest using execptions fo=\r\nr error handling.&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;&lt;/font&gt;\n\n\n\n\n\n&lt;br&gt;\n\n   =\r\n \n    \n&lt;br&gt;\n\n\n\n\n&lt;div width=3D&quot;1&quot; style=3D&quot;color:white;clear:both&quot;&gt;&lt;/div&gt;\n\n&lt;=\r\n/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;\n\r\n--00151747bfe200155e047a53a051--\r\n\n"}}
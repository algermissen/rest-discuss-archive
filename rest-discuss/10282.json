{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":228155998,"authorName":"Mike Schinkel","from":"&quot;Mike Schinkel&quot; &lt;mikeschinkel@...&gt;","profile":"mikeschinkel","replyTo":"SENDER","senderId":"zlQIm-Pox3EG1U8pHQzx89hKMZQDnydurt6D-mrsd_FO_MZZKVD2t8qybYluPHKnB4AreaRoKhygI98iDUhsrMnFoVy9NFAQuM92QBVokA","spamInfo":{"isSpam":false,"reason":"12"},"subject":"RE: [rest-discuss] bootstrapping","postDate":"1200735280","msgId":10282,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDE0ODcwMWM4NWE3ZSQ4NTVlMDY1MCQwNzAyYThjMEBHdWlkZXMubG9jYWw+","inReplyToHeader":"PDUwMzdiNmU0MDgwMTE4MjIwNnE1NmE5YmU3M21lMGZjNGExYmU2MjZmMTYyQG1haWwuZ21haWwuY29tPg==","referencesHeader":"PGZta3M3OCtrMTVrQGVHcm91cHMuY29tPiA8MGYzZTAxYzg1ODdmJDlkOGFjZjcwJDA3MDJhOGMwQEd1aWRlcy5sb2NhbD4gPDUwMzdiNmU0MDgwMTE2MjIzOWc3NzdiNDY3ZHE2NGIxMzczMzAwMDk4OGFjQG1haWwuZ21haWwuY29tPiA8MTA1NDAxYzg1OGU3JDQ4ZmNiNWYwJDA3MDJhOGMwQEd1aWRlcy5sb2NhbD4gPDUwMzdiNmU0MDgwMTE3MTkxN2gyZDM2ZTQ4MG43NjAzNzY1OTg1ZDBjNzU2QG1haWwuZ21haWwuY29tPiA8YzgyMDQ1NDMwODAxMTgxMzU5ajJjMWQyNDBkbGRhMDc4NzMwMGVhYjhiZGFAbWFpbC5nbWFpbC5jb20+IDw1MDM3YjZlNDA4MDExODE3MTdnNzZhZTk4NmFzYWM5OTA1ODk2MGRhNmYwZUBtYWlsLmdtYWlsLmNvbT4gPDE0MzIwMWM4NWEzZSQ4ODM1ODQ2MCQwNzAyYThjMEBHdWlkZXMubG9jYWw+IDw1MDM3YjZlNDA4MDExODE5MDlwNmZhOTYzNjJqYzc4OGFlMDI2ZWEzMWZjMkBtYWlsLmdtYWlsLmNvbT4gPDE0NWMwMWM4NWE1YSQ3NDJlN2ZhMCQwNzAyYThjMEBHdWlkZXMubG9jYWw+IDw1MDM3YjZlNDA4MDExODIyMDZxNTZhOWJlNzNtZTBmYzRhMWJlNjI2ZjE2MkBtYWlsLmdtYWlsLmNvbT4="},"prevInTopic":10281,"nextInTopic":10283,"prevInTime":10281,"nextInTime":10283,"topicId":10201,"numMessagesInTopic":65,"msgSnippet":"... So how you would represent those, in an object model, and can you provide an example so we are not dealing in abstracts? ... Well, unless we have some","rawEmail":"Return-Path: &lt;mikeschinkel@...&gt;\r\nX-Sender: mikeschinkel@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 60316 invoked from network); 19 Jan 2008 09:34:45 -0000\r\nX-Received: from unknown (66.218.67.97)\n  by m45.grp.scd.yahoo.com with QMQP; 19 Jan 2008 09:34:45 -0000\r\nX-Received: from unknown (HELO hs-out-2122.google.com) (64.233.178.249)\n  by mta18.grp.scd.yahoo.com with SMTP; 19 Jan 2008 09:34:44 -0000\r\nX-Received: by hs-out-2122.google.com with SMTP id 4so110032hsl.8\n        for &lt;rest-discuss@yahoogroups.com&gt;; Sat, 19 Jan 2008 01:34:44 -0800 (PST)\r\nX-Received: by 10.150.146.14 with SMTP id t14mr1459705ybd.122.1200735284305;\n        Sat, 19 Jan 2008 01:34:44 -0800 (PST)\r\nReturn-Path: &lt;mikeschinkel@...&gt;\r\nX-Received: from desktop ( [69.94.221.21])\n        by mx.google.com with ESMTPS id 18sm7433625wry.17.2008.01.19.01.34.41\n        (version=SSLv3 cipher=RC4-MD5);\n        Sat, 19 Jan 2008 01:34:43 -0800 (PST)\r\nTo: &quot;&#39;Assaf Arkin&#39;&quot; &lt;assaf@...&gt;\r\nCc: &lt;rest-discuss@yahoogroups.com&gt;\r\nReferences: &lt;fmks78+k15k@...&gt; &lt;0f3e01c8587f$9d8acf70$0702a8c0@...&gt; &lt;5037b6e40801162239g777b467dq64b13733000988ac@...&gt; &lt;105401c858e7$48fcb5f0$0702a8c0@...&gt; &lt;5037b6e40801171917h2d36e480n7603765985d0c756@...&gt; &lt;c82045430801181359j2c1d240dlda0787300eab8bda@...&gt; &lt;5037b6e40801181717g76ae986asac99058960da6f0e@...&gt; &lt;143201c85a3e$88358460$0702a8c0@...&gt; &lt;5037b6e40801181909p6fa96362jc788ae026ea31fc2@...&gt; &lt;145c01c85a5a$742e7fa0$0702a8c0@...&gt; &lt;5037b6e40801182206q56a9be73me0fc4a1be626f162@...&gt;\r\nDate: Sat, 19 Jan 2008 04:34:40 -0500\r\nKeywords: Archived\r\nMessage-ID: &lt;148701c85a7e$855e0650$0702a8c0@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain;\n\tcharset=&quot;us-ascii&quot;\r\nContent-Transfer-Encoding: 7bit\r\nX-Mailer: Microsoft Office Outlook 11\r\nX-MimeOLE: Produced By Microsoft MimeOLE V6.00.2900.3198\r\nthread-index: AchaYXRTDoJDNdKEQ/6DFJ3ws+JA9QAFfQlw\r\nIn-Reply-To: &lt;5037b6e40801182206q56a9be73me0fc4a1be626f162@...&gt;\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Mike Schinkel&quot; &lt;mikeschinkel@...&gt;\r\nSubject: RE: [rest-discuss] bootstrapping\r\nX-Yahoo-Group-Post: member; u=228155998; y=ir0R33B6JQ7nMlv1DEcy5-V3Mz-WSSYN2mj8ZJJHR8h0xC-xJMde\r\nX-Yahoo-Profile: mikeschinkel\r\n\r\n&gt; &gt; &gt; Those are the things we need to decide on first, before \n&gt; we even get \n&gt; &gt; &gt; to create an abstract model.\n&gt; &gt;\n&gt; &gt; So rather than use an analogy, what specific things do you think we \n&gt; &gt; need to decide on first related to RESTful web services?\n&gt; \n&gt; So far I mapped out the following:\n&gt; \n&gt; 1.  Describe a collection of resources (one or more).\n&gt; \n&gt; 2.  Describe which headers are used with that collection.  \n&gt; I&#39;m following HTTP 1.1, so no need to describe the headers \n&gt; themselves, but you may want to know where I&#39;m allowing \n&gt; conditional GET and PUT, for example.\n&gt; \n&gt; 3.  Describe which content types are supported by that collection.\n&gt; And that should allow you to go all the way into structure \n&gt; and semantics of the various content types.\n&gt; \n&gt; 4.  Describe which status codes are returned and what they \n&gt; mean, for cases that are more specific than the HTTP spec.\n&gt; \n&gt; 5.  URL templates for entry points (mapped to #1), optionally \n&gt; separate from the base path.\n&gt; \n&gt; 6.  URL selection from content types (mapped to #1).\n&gt; \n&gt; 7.  Authentication mechanism.\n\nSo how you would represent those, in an object model, and can you provide an\nexample so we are not dealing in abstracts?\n\n&gt; That depends on which abstract model happens first.  If it&#39;s \n&gt; the one I like, I&#39;m going to side with you that there&#39;s no \n&gt; clear need to have more than one.  If it&#39;s the one I don&#39;t \n&gt; like, I&#39;m going to have a laundry list of precise features \n&gt; I&#39;m missing to justify a different one.  And, I do reserve to \n&gt; change my opinion over time, and in the words of the other \n&gt; camp, &quot;see the light&quot; :-)\n\n\nWell, unless we have some vested interests in doing something less than\noptimal, which I don&#39;t, let&#39;s assume we&#39;ll work toward an optimal solution.\n:-)\n\n&gt; Those deal with discovery, that&#39;s an important problem to \n&gt; solve, but understand that until I have something to \n&gt; discover, I don&#39;t have a discovery problem.\n\nFine, but once you have something to discover you do have that problem so\nlet&#39;s work towards both.\n\nAssaf Arkin wrote:\n&gt; &gt; &gt; &gt; Oh, I agree.  But I&#39;m instead talking about \n&gt; &quot;standardizing&quot; a meta \n&gt; &gt; &gt; &gt; approach; IOW a method for traversing web services that 5\n&gt; &gt; &gt; years from\n&gt; &gt; &gt; &gt; now could be built into browsers because it gained\n&gt; &gt; &gt; widespread usage.\n&gt; &gt; &gt; &gt; I&#39;d like to see a well-known way to publish that they are\n&gt; &gt; &gt; &quot;n&quot; number\n&gt; &gt; &gt; &gt; of services available, here are their local identifiers, their \n&gt; &gt; &gt; &gt; URLs/URI Templates, and here are the content types they\n&gt; &gt; &gt; return.  Local\n&gt; &gt; &gt; &gt; identifiers might be things like &quot;shopping-cart&quot;,\n&gt; &gt; &gt; &quot;add-item&quot;, &quot;empty-cart&quot;, and so on.\n&gt; &gt; &gt;\n&gt; &gt; &gt; Isn&#39;t that the responsibility of HTML?\n&gt; &gt;\n&gt; &gt; Uh, it can be. But riddle me this; given an abitrary HTML document, \n&gt; &gt; how does my client figure out what URL is the &quot;add-item&quot; \n&gt; URL?  Or the &quot;empty-cart&quot;\n&gt; &gt; URL?  Or, or, or...?\n&gt; \n&gt; And do what with it?  If your client is able to add an item \n&gt; to an Amazon shopping cart, that&#39;s because it&#39;s designed \n&gt; around the Amazon shopping cart semantics, part of what it \n&gt; knows is how to find the add-item URL, maybe by CSS selecting \n&gt; it from HTML, running XPath against XML, navigating the \n&gt; object tree in JSON, etc.  \n\nAs some point you actually do have to start talking about concrete\nimplementations and not always discussing it in the abstract.  You can&#39;t\nnavigate the object tree in JSON unless you know what properties will\nidentifies what each URL is for, etc.\n\nThere&#39;s two approaches here; we can let everyone design their services from\nscratch each time, such as you suggest with the hypothetical Amazon shopping\ncart or we can extract out the commonalities such as coming up with a common\nway to detemine the URL, content-type, status code, etc. needs to implement\nthe Amazon shopping cart. To me the latter is far more pragmatic because\nyou&#39;ll have to do it anyway for the former; why reinvent the wheel each\ntime?\n\n&gt; &gt; HTML (or JSON, or Atom, or, or, or...) are necessary, but \n&gt; not sufficient.\n&gt; \n&gt; I agree, I just don&#39;t see that as a browser problem.\n\nI never said it was a browser &quot;problem&quot;, but a browser could make it more\naccessible and I see that as desirable.\n\n&gt; I wasn&#39;t making a person statement on you, and apologize that \n&gt; it came across that way.\n\nAccepted.\n\n&gt; I&#39;m making an observation that if you take something like \n&gt; Oracle that&#39;s designed for the enterprise, it ends up being \n&gt; used only in the enterprise.  If you take something like \n&gt; MySQL that&#39;s designed to be used everywhere, it ends up being \n&gt; used everywhere including the enterprise.  It&#39;s not so much \n&gt; inside vs outside, as some people thing, but rather walled vs \n&gt; everywhere.\n&gt; \n&gt; Wearing my enterprise hat, I would strongly favor everywhere \n&gt; technology even for use inside the enterprise, and one of the \n&gt; reasons I&#39;m not particularly big on WS-* these days is \n&gt; because WS-* is walled technology.\n\nI agree completely.\n\n&gt; 1. Let&#39;s say the URL template for a collection of pending \n&gt; tasks resources is:\n&gt; \n&gt; {base}/person/{name}/pending\n&gt; \n&gt; There&#39;s a few content type descriptions, the XML one will say \n&gt; (abbreviated):\n&gt; \n&gt; &lt;tasks&gt;\n&gt;   &lt;task&gt;\n&gt;     . . .\n&gt;     &lt;attachments&gt; ... &lt;/attachments&gt;\n&gt;   &lt;/task&gt;*\n&gt; &lt;/tasks&gt;\n&gt; \n&gt; So now you have an entry point that, given an account name, \n&gt; let&#39;s you find all the pending tasks for that person, which \n&gt; returns a list of tasks.\n\nBy &quot;content type description&quot; do you mean &quot;mime type&quot; or something else?\n\nAnd are you saying that for &quot;{base}/person/{name}/pending&quot; the software\nwould do the substitution on {base} and {name}, and if so, where does it get\nthat; from another URL?  Or are you envisioning that the URI Template would\nsimply be documented in a spoken language and the client developer would\ntranslate that into code?  If yes, that is not consistent with HATEOAS as\nfar as I understand HATEOAS (although it is consistent with what I think is\na reasonable and even preferred approach in many use cases.)  \n\n&gt; 2.  Separately it specifies a collection of resources dealing \n&gt; with attachments, which doesn&#39;t have a URL template, but has \n&gt; a content type description, again briefly:\n&gt; \n&gt; &lt;attachments&gt;\n&gt;   &lt;attachment&gt;\n&gt;      ...\n&gt;      &lt;url&gt; ... &lt;/url&gt;\n&gt;   &lt;/attchment&gt;\n&gt; &lt;/attachments&gt;\n&gt; \n&gt; And specifies that the attachment element up above (in #1) is \n&gt; a URL to a resource from that collection, so you know that \n&gt; navigating there will get you the list of attachments for a \n&gt; given task.\n\nWhen you say &quot;Separately it specifies...&quot; what is &quot;it?&quot;   The representation\nreturned by &quot;{base}/person/{name}/pending&quot;, or something else?  If the\nformer, are you saying the &lt;attachments&gt; element provides the URL for the\nattachments media type?  Answer only if you need to correct my\nunderstanding.\n\n&gt; 3.  Separately it specifies a collection of resources for \n&gt; attachments themselves, and specifies that the url element \n&gt; above (in #2) is a URL to a resource from that collection.\n&gt; \n&gt; So now you can write a client that given a name can download \n&gt; all the attachments for that person&#39;s pending tasks.\n\nFine.  So why not just use &quot;{base}/person/{name}/pending/{task}/attachments&quot;\nto return a list of URLs attached?  \n\nAnd if the answer no because of HATEOAS, I&#39;m going to question &quot;Does it\nreally make a difference whether our client knows the word &quot;attachments&quot; but\nthat it be in the representation and not in the URL?  Either way the client\nwill need to know about attachments so the whole requirement to navigate\nrather than just call a URL documented as a URI Template seems to me to be a\nnon-sequiter (except in the case where the client is doing something generic\n*and* we have a generic way to handle HATEOAS navigation for well-known use\ncases, so as &quot;associated files&quot; like your attachements. This &quot;generic\nmethod&quot; I speak of is actually what I&#39;m suggesting we identify as a Service\nObject Model.)\n\n-- \n-Mike Schinkel\nhttp://www.mikeschinkel.com/blogs/\nhttp://www.welldesignedurls.org\nhttp://atlanta-web.org \n\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":435049665,"authorName":"Markus KARG","from":"&quot;Markus KARG&quot; &lt;markus@...&gt;","profile":"headcrashing","replyTo":"SENDER","senderId":"0gs9NFPGzCisUvnBKPznr_mvLb6lUoA_qQ-0slyT7khE-lBo5rxBLk8kMvnlL3KCP8VRY-TWO7OjHFzbqnGfI2Rn8NkBlKaAPYBqfCI","spamInfo":{"isSpam":false,"reason":"12"},"subject":"RE: [rest-discuss] Re: [Jersey] Moved thread to rest-discuss / HATEOAS-via-HTTP: Which HTTP Method to use to follow link?","postDate":"1267347097","msgId":14939,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDAwMGMwMWNhYjg1MyQzZDNjMmE3MCRiN2I0N2Y1MCRAZXU+","inReplyToHeader":"PDQxMTI1Ni4xNDMyMi5xbUB3ZWI1NTkwOC5tYWlsLnJlMy55YWhvby5jb20+","referencesHeader":"PDAwMTUwMWNhYjc4OCQ4ZmNiOTZjMCRhZjYyYzQ0MCRAZXU+IDw0MTEyNTYuMTQzMjIucW1Ad2ViNTU5MDgubWFpbC5yZTMueWFob28uY29tPg=="},"prevInTopic":14936,"nextInTopic":0,"prevInTime":14938,"nextInTime":14940,"topicId":14827,"numMessagesInTopic":27,"msgSnippet":"Kevin, there are several solutions to that. I ll outline three here, there might be more. The third is the one we recently discussed regards HATEOAS. First of","rawEmail":"Return-Path: &lt;markus@...&gt;\r\nX-Sender: markus@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 2573 invoked from network); 28 Feb 2010 08:51:42 -0000\r\nX-Received: from unknown (66.196.94.106)\n  by m4.grp.sp2.yahoo.com with QMQP; 28 Feb 2010 08:51:42 -0000\r\nX-Received: from unknown (HELO smtprelay01.ispgateway.de) (80.67.31.35)\n  by mta2.grp.re1.yahoo.com with SMTP; 28 Feb 2010 08:51:42 -0000\r\nX-Received: from [88.66.44.29] (helo=MarkusPC)\n\tby smtprelay01.ispgateway.de with esmtpsa (TLSv1:AES128-SHA:128)\n\t(Exim 4.68)\n\t(envelope-from &lt;markus@...&gt;)\n\tid 1NlesF-0002sE-MC; Sun, 28 Feb 2010 09:51:40 +0100\r\nTo: &quot;&#39;Kevin Duffey&#39;&quot; &lt;andjarnic@...&gt;,\n\t&lt;rest-discuss@yahoogroups.com&gt;\r\nReferences: &lt;001501cab788$8fcb96c0$af62c440$@eu&gt; &lt;411256.14322.qm@...&gt;\r\nIn-Reply-To: &lt;411256.14322.qm@...&gt;\r\nDate: Sun, 28 Feb 2010 09:51:37 +0100\r\nOrganization: HeadCrash\r\nMessage-ID: &lt;000c01cab853$3d3c2a70$b7b47f50$@eu&gt;\r\nMIME-Version: 1.0\r\nContent-Type: multipart/alternative;\n\tboundary=&quot;----=_NextPart_000_000D_01CAB85B.9F009270&quot;\r\nX-Mailer: Microsoft Office Outlook 12.0\r\nThread-Index: Acq32zndmiqkAEfURy2cAoN/u+Q+dAAcsGQg\r\nContent-Language: de\r\nX-Df-Sender: markus@...\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Markus KARG&quot; &lt;markus@...&gt;\r\nSubject: RE: [rest-discuss] Re: [Jersey] Moved thread to rest-discuss / HATEOAS-via-HTTP: Which HTTP Method to use to follow link?\r\nX-Yahoo-Group-Post: member; u=435049665; y=rEgqxR89nzK6MZL2FaxKlWeaFLiDJqcmZW45rcuvbYCqNbjqZjSg\r\nX-Yahoo-Profile: headcrashing\r\n\r\n\r\n------=_NextPart_000_000D_01CAB85B.9F009270\r\nContent-Type: text/plain;\n\tcharset=&quot;US-ASCII&quot;\r\nContent-Transfer-Encoding: 7bit\r\n\r\nKevin,\n\n \n\nthere are several solutions to that. I&#39;ll outline three here, there might be\nmore. The third is the one we recently discussed regards HATEOAS.\n\n \n\nFirst of all, your client could invoke the OPTIONS method and inspect the\nAllow header\n(http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.7) to learn\nabout the currently allowed (i. e. possible) http methods on one particular\nURI. The server is free to decide at that point what he responds, so it\ncould use the authentication information for example to decide with respect\nto the user&#39;s access rights, or it could check the resource&#39;s state to\ndedice with respect to the business status. You client can do that check for\neach URI right at the time of receiving it, far before the GUI rendered the\nreceived entity on the screen. This is a rather good method to use if the\nmedia type (see below) is not able to define the link type.\n\n \n\nSecond, if your client just wants to know whether GET is allowed, it could\nat that time do a HEAD or GET and cache the result. As HEAD or GET are\nidempotent, this is no risk. If HEAD or GET is not allowed, the server would\nrespond with an Allow header, so you would know what insted is possible. I\nsee this solution only in special cases.\n\n \n\nThird and possibly best (and &quot;the&quot; RESTful solution), would be to not use\ngeneral link syntax but specific business information. In HTML it is defined\nthat &lt;A&gt; is a general link, which can be followed solely by HEAD or GET. It\nis not defined to use any other http method. So a browser knows a set of\npossible and impossible methods just due to the fact that the link is there\nand is &lt;A&gt; (in contrast to the link is not there, or the tag being not &lt;A&gt;).\nSo a HTML aware client can learn from that to either render a link or not,\nand to use GET. This is what we currently discuss as &quot;learn from the media\ntype&quot;: The browser knows the media type (here: HTML), so by inspecting the\nactual content (here: HTML) it will know from the content what method to use\n(here: GET since it is &lt;A&gt;). Let&#39;s assume your home-brewn media type. Its\nschema could contain the definition of different types of links - not just\n&lt;A&gt; but let&#39;s say &lt;X&gt; and &lt;Y&gt;. Just as the HTML specification says that &lt;A&gt;\nresults in HEAD or GET, your home-brewn specification would say that &lt;X&gt; can\nonly be GET or HEAD, while &lt;Y&gt; could be POST (since it serves as an inbound\nfor creation of new stuff for example). Since your client is aware of your\nhome-brewn media type, it will know your specification. As a result, it will\nknow what the associated http methods are. And your server will either\ncontain the particular link in the document, or it will abstain, and such\nhas control the tell the client what currently is possible to do. That&#39;s\nHATEOAS.\n\n \n\nForth, if your business model is rather simple (or it makes sense to turn it\ninto a simple one), you can just rely on the http specification, which\ndefines what the methods are good for. In this scenarioa your resources are\nsuch atomic that it is rather clear what POST  / GET / PUT / DELETE will be\ngood for. That&#39;s CRUD. Whether or not this is a useful method on that\nresource might be clear from the resource itself or can be learned from the\nfirst solution.\n\n \n\nRegards\n\nMarkus\n\n \n\nFrom: rest-discuss@yahoogroups.com [mailto:rest-discuss@yahoogroups.com] On\nBehalf Of Kevin Duffey\nSent: Samstag, 27. Februar 2010 19:23\nTo: rest-discuss@yahoogroups.com\nSubject: RE: [rest-discuss] Re: [Jersey] Moved thread to rest-discuss /\nHATEOAS-via-HTTP: Which HTTP Method to use to follow link?\n\n \n\n\n\n\n\n\n\nMarkus,\n\nGave you a bad example, yes, create is a command and not a resource. My bad.\n\nSo summing up what you said, you did clear up the media type use. For a\nresource /orders, I would have one media type, say,\napplication/vnd.com.mypackage.orders+xml (perhaps two, with a +json on the\nend). That would work for ALL resource calls, be it to create, get, put a\nsingle item or a list of them. The same one XSD segment would work in all\ncases. I see that now. Thank you.\n\nI was confused I think partly because of Jan&#39;s and some other responses on\nthe Jersey forum regarding using media types for everything. I suppose I\nthought with how Jersey handles methods for specific media types (even tho\nyou can use the same custom one on multiple methods), I thought perhaps what\nwas meant was to use specific media types for each method\n(post/put/get/delete) so that you did NOT need to specify in a response link\nthe method to use.\n\nAs for the right method to use... you&#39;re saying that just like a web page,\nif I were to copy a link off of a web site, and try to PUT that link to the\nserver, I&#39;d probably get a 405 method not allowed or some error response\nback. So basically, a list of links that come back to the client in response\nto a a resource request would simply be a bunch of URIs, that is it. No\nmedia type specification, not methods allowed to be called on it. The client\nconsumer simply has to trial and error to the server... if a client calls\nGET on /orders, and the authentication for the user making that request\ndeems the user can NOT delete/update individual orders, the client UI still\nshows DELETE/UPDATE links. When the user, whose not allowed to\ndelete/update, clicks one of those links, basically the server responds\nsaying you&#39;re not allowed to do this. Is that what I am understanding you to\nsay?\n\nIf so, I don&#39;t agree with that because I want to build a dynamic UI (if I am\na consumer of this API) that gives &quot;hints&quot; so to speak on what a user can do\nat a given point. I expect my reply to give me the bare minimum essential\ninformation so I can represent the users next set of actions correctly. I\nsurely wouldn&#39;t want to provide links to delete/update if the user can&#39;t do\nthis. There has to be some correct/common/agreed upon/best practices manner\nin which REST developers are returning these URIs with enough information to\nallow a client consumer to render a UI that allows its users to make choices\nit&#39;s allowed to make, and not present every possibility. \n\nSo, would you give me an example of how you might do something like this?\nShow me two xml snippets.. using the same resource (lets use /orders or\n/cart your choice), one user is only allowed to GET resource items, the\nother can do the full gamut.. update/delete/get. Show me how you would\nrespond in both scenarios so that I can see how the response URIs are\nformatted to allow the client consumer to know what can be done and present\nit as such in a UI to end users.\n\nThank you.\n\n\n\n\n\n\n\n\n\n\r\n------=_NextPart_000_000D_01CAB85B.9F009270\r\nContent-Type: text/html;\n\tcharset=&quot;US-ASCII&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;html xmlns:v=3D&quot;urn:schemas-microsoft-com:vml&quot; xmlns:o=3D&quot;urn:schemas-micr=\r\nosoft-com:office:office&quot; xmlns:w=3D&quot;urn:schemas-microsoft-com:office:word&quot; =\r\nxmlns:m=3D&quot;http://schemas.microsoft.com/office/2004/12/omml&quot; xmlns=3D&quot;http:=\r\n//www.w3.org/TR/REC-html40&quot;&gt;\n\n&lt;head&gt;\n&lt;meta http-equiv=3DContent-Type conten=\r\nt=3D&quot;text/html; charset=3Dus-ascii&quot;&gt;\n&lt;meta name=3DGenerator content=3D&quot;Micr=\r\nosoft Word 12 (filtered medium)&quot;&gt;\n&lt;!--[if !mso]&gt;\n&lt;style&gt;\nv&#92;:* {behavior:url=\r\n(#default#VML);}\no&#92;:* {behavior:url(#default#VML);}\nw&#92;:* {behavior:url(#def=\r\nault#VML);}\n.shape {behavior:url(#default#VML);}\n&lt;/style&gt;\n&lt;![endif]--&gt;\n&lt;sty=\r\nle&gt;\n&lt;!--\n /* Font Definitions */\n @font-face\n\t{font-family:&quot;Cambria Math&quot;;\n=\r\n\tpanose-1:2 4 5 3 5 4 6 3 2 4;}\n@font-face\n\t{font-family:Calibri;\n\tpanose-1=\r\n:2 15 5 2 2 2 4 3 2 4;}\n@font-face\n\t{font-family:Tahoma;\n\tpanose-1:2 11 6 4=\r\n 3 5 4 4 2 4;}\n@font-face\n\t{font-family:Verdana;\n\tpanose-1:2 11 6 4 3 5 4 4=\r\n 2 4;}\n /* Style Definitions */\n p.MsoNormal, li.MsoNormal, div.MsoNormal\n\t=\r\n{margin:0cm;\n\tmargin-bottom:.0001pt;\n\tfont-size:12.0pt;\n\tfont-family:&quot;Times=\r\n New Roman&quot;,&quot;serif&quot;;}\na:link, span.MsoHyperlink\n\t{mso-style-priority:99;\n\tc=\r\nolor:blue;\n\ttext-decoration:underline;}\na:visited, span.MsoHyperlinkFollowe=\r\nd\n\t{mso-style-priority:99;\n\tcolor:purple;\n\ttext-decoration:underline;}\np\n\t{=\r\nmso-style-priority:99;\n\tmso-margin-top-alt:auto;\n\tmargin-right:0cm;\n\tmso-ma=\r\nrgin-bottom-alt:auto;\n\tmargin-left:0cm;\n\tfont-size:12.0pt;\n\tfont-family:&quot;Ti=\r\nmes New Roman&quot;,&quot;serif&quot;;}\np.ygrp-photo-title, li.ygrp-photo-title, div.ygrp-=\r\nphoto-title\n\t{mso-style-name:ygrp-photo-title;\n\tmso-margin-top-alt:auto;\n\tm=\r\nargin-right:0cm;\n\tmso-margin-bottom-alt:auto;\n\tmargin-left:0cm;\n\ttext-align=\r\n:center;\n\tfont-size:10.0pt;\n\tfont-family:&quot;Times New Roman&quot;,&quot;serif&quot;;}\np.ad, =\r\nli.ad, div.ad\n\t{mso-style-name:ad;\n\tmso-margin-top-alt:auto;\n\tmargin-right:=\r\n0cm;\n\tmso-margin-bottom-alt:auto;\n\tmargin-left:0cm;\n\tfont-size:12.0pt;\n\tfon=\r\nt-family:&quot;Times New Roman&quot;,&quot;serif&quot;;}\np.ad1, li.ad1, div.ad1\n\t{mso-style-nam=\r\ne:ad1;\n\tmso-margin-top-alt:auto;\n\tmargin-right:0cm;\n\tmso-margin-bottom-alt:=\r\nauto;\n\tmargin-left:0cm;\n\tfont-size:12.0pt;\n\tfont-family:&quot;Times New Roman&quot;,&quot;=\r\nserif&quot;;}\nspan.EmailStyle21\n\t{mso-style-type:personal-reply;\n\tfont-family:&quot;C=\r\nalibri&quot;,&quot;sans-serif&quot;;\n\tcolor:#1F497D;}\n.MsoChpDefault\n\t{mso-style-type:expo=\r\nrt-only;\n\tfont-size:10.0pt;}\n@page Section1\n\t{size:612.0pt 792.0pt;\n\tmargin=\r\n:70.85pt 70.85pt 2.0cm 70.85pt;}\ndiv.Section1\n\t{page:Section1;}\n--&gt;\n&lt;/style=\r\n&gt;\n&lt;!--[if gte mso 9]&gt;&lt;xml&gt;\n &lt;o:shapedefaults v:ext=3D&quot;edit&quot; spidmax=3D&quot;1026=\r\n&quot; /&gt;\n&lt;/xml&gt;&lt;![endif]--&gt;&lt;!--[if gte mso 9]&gt;&lt;xml&gt;\n &lt;o:shapelayout v:ext=3D&quot;ed=\r\nit&quot;&gt;\n  &lt;o:idmap v:ext=3D&quot;edit&quot; data=3D&quot;1&quot; /&gt;\n &lt;/o:shapelayout&gt;&lt;/xml&gt;&lt;![endi=\r\nf]--&gt;\n&lt;/head&gt;\n\n&lt;body lang=3DDE link=3Dblue vlink=3Dpurple&gt;\n\n&lt;div class=3DSe=\r\nction1&gt;\n\n&lt;p class=3DMsoNormal&gt;&lt;span style=3D&#39;font-size:11.0pt;font-family:&quot;=\r\nCalibri&quot;,&quot;sans-serif&quot;;\ncolor:#1F497D&#39;&gt;Kevin,&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/p&gt;\n\n&lt;p clas=\r\ns=3DMsoNormal&gt;&lt;span style=3D&#39;font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-s=\r\nerif&quot;;\ncolor:#1F497D&#39;&gt;&lt;o:p&gt;&nbsp;&lt;/o:p&gt;&lt;/span&gt;&lt;/p&gt;\n\n&lt;p class=3DMsoNormal&gt;&lt;s=\r\npan style=3D&#39;font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;\ncolor:#1F=\r\n497D&#39;&gt;there are several solutions to that. I&#39;ll outline three here,\nthere m=\r\night be more. The third is the one we recently discussed regards\nHATEOAS.&lt;o=\r\n:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/p&gt;\n\n&lt;p class=3DMsoNormal&gt;&lt;span style=3D&#39;font-size:11.0pt;=\r\nfont-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;\ncolor:#1F497D&#39;&gt;&lt;o:p&gt;&nbsp;&lt;/o:p&gt;&lt;/span&gt;=\r\n&lt;/p&gt;\n\n&lt;p class=3DMsoNormal&gt;&lt;span style=3D&#39;font-size:11.0pt;font-family:&quot;Cal=\r\nibri&quot;,&quot;sans-serif&quot;;\ncolor:#1F497D&#39;&gt;First of all, your client could invoke t=\r\nhe OPTIONS method and\ninspect the Allow header (&lt;a\nhref=3D&quot;http://www.w3.or=\r\ng/Protocols/rfc2616/rfc2616-sec14.html#sec14.7&quot;&gt;http://www.w3.org/Protocols=\r\n/rfc2616/rfc2616-sec14.html#sec14.7&lt;/a&gt;)\nto learn about the currently allow=\r\ned (i. e. possible) http methods on one\nparticular URI. The server is free =\r\nto decide at that point what he responds, so\nit could use the authenticatio=\r\nn information for example to decide with respect\nto the user&#39;s access right=\r\ns, or it could check the resource&#39;s state to dedice\nwith respect to the bus=\r\niness status. You client can do that check for each URI right\nat the time o=\r\nf receiving it, far before the GUI rendered the received entity on\nthe scre=\r\nen. This is a rather good method to use if the media type (see below)\nis no=\r\nt able to define the link type.&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/p&gt;\n\n&lt;p class=3DMsoNormal=\r\n&gt;&lt;span style=3D&#39;font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;\ncolor:=\r\n#1F497D&#39;&gt;&lt;o:p&gt;&nbsp;&lt;/o:p&gt;&lt;/span&gt;&lt;/p&gt;\n\n&lt;p class=3DMsoNormal&gt;&lt;span style=3D&#39;=\r\nfont-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;\ncolor:#1F497D&#39;&gt;Second,=\r\n if your client just wants to know whether GET is allowed,\nit could at that=\r\n time do a HEAD or GET and cache the result. As HEAD or GET are\nidempotent,=\r\n this is no risk. If HEAD or GET is not allowed, the server would\nrespond w=\r\nith an Allow header, so you would know what insted is possible. I see\nthis =\r\nsolution only in special cases.&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/p&gt;\n\n&lt;p class=3DMsoNormal=\r\n&gt;&lt;span style=3D&#39;font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;\ncolor:=\r\n#1F497D&#39;&gt;&lt;o:p&gt;&nbsp;&lt;/o:p&gt;&lt;/span&gt;&lt;/p&gt;\n\n&lt;p class=3DMsoNormal&gt;&lt;span style=3D&#39;=\r\nfont-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;\ncolor:#1F497D&#39;&gt;Third a=\r\nnd possibly best (and &quot;the&quot; RESTful solution),\nwould be to not us=\r\ne general link syntax but specific business information. In\nHTML it is defi=\r\nned that &lt;A&gt; is a general link, which can be followed\nsolely by HEAD =\r\nor GET. It is not defined to use any other http method. So a browser\nknows =\r\na set of possible and impossible methods just due to the fact that the\nlink=\r\n is there and is &lt;A&gt; (in contrast to the link is not there, or the\nta=\r\ng being not &lt;A&gt;). So a HTML aware client can learn from that to eithe=\r\nr\nrender a link or not, and to use GET. This is what we currently discuss a=\r\ns\n&quot;learn from the media type&quot;: The browser knows the media type (=\r\nhere:\nHTML), so by inspecting the actual content (here: HTML) it will know =\r\nfrom the\ncontent what method to use (here: GET since it is &lt;A&gt;). Let&#39;=\r\ns assume your\nhome-brewn media type. Its schema could contain the definitio=\r\nn of different\ntypes of links - not just &lt;A&gt; but let&#39;s say &lt;X&gt; =\r\nand &lt;Y&gt;. Just\nas the HTML specification says that &lt;A&gt; results i=\r\nn HEAD or GET, your\nhome-brewn specification would say that &lt;X&gt; can o=\r\nnly be GET or HEAD,\nwhile &lt;Y&gt; could be POST (since it serves as an in=\r\nbound for creation of\nnew stuff for example). Since your client is aware of=\r\n your home-brewn media\ntype, it will know your specification. As a result, =\r\nit will know what the\nassociated http methods are. And your server will eit=\r\nher contain the particular\nlink in the document, or it will abstain, and su=\r\nch has control the tell the\nclient what currently is possible to do. That&#39;s=\r\n HATEOAS.&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/p&gt;\n\n&lt;p class=3DMsoNormal&gt;&lt;span style=3D&#39;font-s=\r\nize:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;\ncolor:#1F497D&#39;&gt;&lt;o:p&gt;&nbsp;&lt;/=\r\no:p&gt;&lt;/span&gt;&lt;/p&gt;\n\n&lt;p class=3DMsoNormal&gt;&lt;span style=3D&#39;font-size:11.0pt;font-=\r\nfamily:&quot;Calibri&quot;,&quot;sans-serif&quot;;\ncolor:#1F497D&#39;&gt;Forth, if your business model=\r\n is rather simple (or it makes\nsense to turn it into a simple one), you can=\r\n just rely on the http specification,\nwhich defines what the methods are go=\r\nod for. In this scenarioa your resources\nare such atomic that it is rather =\r\nclear what POST&nbsp; / GET / PUT / DELETE\nwill be good for. That&#39;s CRUD. W=\r\nhether or not this is a useful method on that\nresource might be clear from =\r\nthe resource itself or can be learned from the\nfirst solution.&lt;o:p&gt;&lt;/o:p&gt;&lt;/=\r\nspan&gt;&lt;/p&gt;\n\n&lt;p class=3DMsoNormal&gt;&lt;span style=3D&#39;font-size:11.0pt;font-family=\r\n:&quot;Calibri&quot;,&quot;sans-serif&quot;;\ncolor:#1F497D&#39;&gt;&lt;o:p&gt;&nbsp;&lt;/o:p&gt;&lt;/span&gt;&lt;/p&gt;\n\n&lt;p cl=\r\nass=3DMsoNormal&gt;&lt;span style=3D&#39;font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans=\r\n-serif&quot;;\ncolor:#1F497D&#39;&gt;Regards&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/p&gt;\n\n&lt;p class=3DMsoNormal=\r\n&gt;&lt;span style=3D&#39;font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;\ncolor:=\r\n#1F497D&#39;&gt;Markus&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/p&gt;\n\n&lt;p class=3DMsoNormal&gt;&lt;span style=3D&#39;=\r\nfont-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;\ncolor:#1F497D&#39;&gt;&lt;o:p&gt;&n=\r\nbsp;&lt;/o:p&gt;&lt;/span&gt;&lt;/p&gt;\n\n&lt;div style=3D&#39;border:none;border-left:solid blue 1.5=\r\npt;padding:0cm 0cm 0cm 4.0pt&#39;&gt;\n\n&lt;div&gt;\n\n&lt;div style=3D&#39;border:none;border-top=\r\n:solid #B5C4DF 1.0pt;padding:3.0pt 0cm 0cm 0cm&#39;&gt;\n\n&lt;p class=3DMsoNormal&gt;&lt;b&gt;&lt;=\r\nspan lang=3DEN-US style=3D&#39;font-size:10.0pt;font-family:\n&quot;Tahoma&quot;,&quot;sans-ser=\r\nif&quot;&#39;&gt;From:&lt;/span&gt;&lt;/b&gt;&lt;span lang=3DEN-US style=3D&#39;font-size:10.0pt;\nfont-fam=\r\nily:&quot;Tahoma&quot;,&quot;sans-serif&quot;&#39;&gt; rest-discuss@yahoogroups.com\n[mailto:rest-discu=\r\nss@yahoogroups.com] &lt;b&gt;On Behalf Of &lt;/b&gt;Kevin Duffey&lt;br&gt;\n&lt;b&gt;Sent:&lt;/b&gt; Samst=\r\nag, 27. Februar 2010 19:23&lt;br&gt;\n&lt;b&gt;To:&lt;/b&gt; rest-discuss@yahoogroups.com&lt;br&gt;\n=\r\n&lt;b&gt;Subject:&lt;/b&gt; RE: [rest-discuss] Re: [Jersey] Moved thread to rest-discus=\r\ns /\nHATEOAS-via-HTTP: Which HTTP Method to use to follow link?&lt;o:p&gt;&lt;/o:p&gt;&lt;/=\r\nspan&gt;&lt;/p&gt;\n\n&lt;/div&gt;\n\n&lt;/div&gt;\n\n&lt;p class=3DMsoNormal&gt;&lt;o:p&gt;&nbsp;&lt;/o:p&gt;&lt;/p&gt;\n\n&lt;p c=\r\nlass=3DMsoNormal&gt;&lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;\n&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;\n\n&lt;table class=3DMsoNormalTa=\r\nble border=3D0 cellspacing=3D0 cellpadding=3D0&gt;\n &lt;tr&gt;\n  &lt;td valign=3Dtop st=\r\nyle=3D&#39;padding:0cm 0cm 0cm 0cm&#39;&gt;\n  &lt;p class=3DMsoNormal style=3D&#39;margin-bot=\r\ntom:12.0pt&#39;&gt;Markus,&lt;br&gt;\n  &lt;br&gt;\n  Gave you a bad example, yes, create is a c=\r\nommand and not a resource. My bad.&lt;br&gt;\n  &lt;br&gt;\n  So summing up what you said=\r\n, you did clear up the media type use. For a\n  resource /orders, I would ha=\r\nve one media type, say,\n  application/vnd.com.mypackage.orders+xml (perhaps=\r\n two, with a +json on the\n  end). That would work for ALL resource calls, b=\r\ne it to create, get, put a\n  single item or a list of them. The same one XS=\r\nD segment would work in all\n  cases. I see that now. Thank you.&lt;br&gt;\n  &lt;br&gt;\n=\r\n  I was confused I think partly because of Jan&#39;s and some other responses o=\r\nn\n  the Jersey forum regarding using media types for everything. I suppose =\r\nI\n  thought with how Jersey handles methods for specific media types (even =\r\ntho\n  you can use the same custom one on multiple methods), I thought perha=\r\nps what\n  was meant was to use specific media types for each method\n  (post=\r\n/put/get/delete) so that you did NOT need to specify in a response link\n  t=\r\nhe method to use.&lt;br&gt;\n  &lt;br&gt;\n  As for the right method to use... you&#39;re say=\r\ning that just like a web page, if\n  I were to copy a link off of a web site=\r\n, and try to PUT that link to the\n  server, I&#39;d probably get a 405 method n=\r\not allowed or some error response\n  back. So basically, a list of links tha=\r\nt come back to the client in response\n  to a a resource request would simpl=\r\ny be a bunch of URIs, that is it. No media\n  type specification, not method=\r\ns allowed to be called on it. The client\n  consumer simply has to trial and=\r\n error to the server... if a client calls GET\n  on /orders, and the authent=\r\nication for the user making that request deems the\n  user can NOT delete/up=\r\ndate individual orders, the client UI still shows\n  DELETE/UPDATE links. Wh=\r\nen the user, whose not allowed to delete/update,\n  clicks one of those link=\r\ns, basically the server responds saying you&#39;re not\n  allowed to do this. Is=\r\n that what I am understanding you to say?&lt;br&gt;\n  &lt;br&gt;\n  If so, I don&#39;t agree=\r\n with that because I want to build a dynamic UI (if I am\n  a consumer of th=\r\nis API) that gives &quot;hints&quot; so to speak on what a\n  user can do at=\r\n a given point. I expect my reply to give me the bare minimum\n  essential i=\r\nnformation so I can represent the users next set of actions\n  correctly. I =\r\nsurely wouldn&#39;t want to provide links to delete/update if the\n  user can&#39;t =\r\ndo this. There has to be some correct/common/agreed upon/best\n  practices m=\r\nanner in which REST developers are returning these URIs with\n  enough infor=\r\nmation to allow a client consumer to render a UI that allows its\n  users to=\r\n make choices it&#39;s allowed to make, and not present every\n  possibility. &lt;b=\r\nr&gt;\n  &lt;br&gt;\n  So, would you give me an example of how you might do something =\r\nlike this?\n  Show me two xml snippets.. using the same resource (lets use /=\r\norders or /cart\n  your choice), one user is only allowed to GET resource it=\r\nems, the other can\n  do the full gamut.. update/delete/get. Show me how you=\r\n would respond in both\n  scenarios so that I can see how the response URIs =\r\nare formatted to allow the\n  client consumer to know what can be done and p=\r\nresent it as such in a UI to\n  end users.&lt;br&gt;\n  &lt;br&gt;\n  Thank you.&lt;o:p&gt;&lt;/o:p=\r\n&gt;&lt;/p&gt;\n  &lt;/td&gt;\n &lt;/tr&gt;\n&lt;/table&gt;\n\n&lt;p class=3DMsoNormal&gt;&lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;\n&lt;o:=\r\np&gt;&lt;/o:p&gt;&lt;/p&gt;\n\n&lt;div&gt;\n\n&lt;p class=3DMsoNormal&gt;&lt;span style=3D&#39;color:white&#39;&gt;&lt;o:p&gt;=\r\n&lt;/o:p&gt;&lt;/span&gt;&lt;/p&gt;\n\n&lt;/div&gt;\n\n&lt;/div&gt;\n\n&lt;/div&gt;\n\n&lt;/body&gt;\n\n&lt;/html&gt;\n\r\n------=_NextPart_000_000D_01CAB85B.9F009270--\r\n\n"}}
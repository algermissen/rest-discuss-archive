{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":147780944,"authorName":"A. Pagaltzis","from":"&quot;A. Pagaltzis&quot; &lt;pagaltzis@...&gt;","profile":"a22pag","replyTo":"SENDER","senderId":"TVWlQkVIup77gLHCCiD34yYeuLQ8MQ4nxpL5pOGFjjCx7RkUpL1Dq1Sy9ZohpGXJ6_3z_4y86UeP_b4Rxc8j4w0KrjL8LMs0","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: Interface definition languages and service registries for REST services","postDate":"1186718931","msgId":9582,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMDcwODEwMDQwODUxLkdNMTU1NjZAa2xhbmdyYXVtPg==","inReplyToHeader":"PDI4Mjc2Y2YwMDcwODAyMTg0MXc3ZTYxMGZiYnNjZmEyMTkyZTljOGUzOTc0QG1haWwuZ21haWwuY29tPg==","referencesHeader":"PDI4Mjc2Y2YwMDcwODAyMTg0MXc3ZTYxMGZiYnNjZmEyMTkyZTljOGUzOTc0QG1haWwuZ21haWwuY29tPg=="},"prevInTopic":9581,"nextInTopic":9583,"prevInTime":9581,"nextInTime":9583,"topicId":9547,"numMessagesInTopic":23,"msgSnippet":"Hi Olivier, ... I think there is a conflation of ideas here. My most widely cited weblog entry (that started life as a post on this list) goes into this: ","rawEmail":"Return-Path: &lt;pagaltzis@...&gt;\r\nX-Sender: pagaltzis@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 31093 invoked from network); 10 Aug 2007 04:30:15 -0000\r\nReceived: from unknown (66.218.66.71)\n  by m54.grp.scd.yahoo.com with QMQP; 10 Aug 2007 04:30:15 -0000\r\nReceived: from unknown (HELO mail.gmx.net) (213.165.64.20)\n  by mta13.grp.scd.yahoo.com with SMTP; 10 Aug 2007 04:30:15 -0000\r\nReceived: (qmail invoked by alias); 10 Aug 2007 04:08:52 -0000\r\nReceived: from static-87-79-236-202.netcologne.de (EHLO klangraum) [87.79.236.202]\n  by mail.gmx.net (mp004) with SMTP; 10 Aug 2007 06:08:52 +0200\r\nX-Authenticated: #163624\r\nX-Provags-ID: V01U2FsdGVkX19s8RJbw6FsYX0/p/eAh95ufPw+ksKEFIs0fuQWRa\n\tCOTpJxk5JPtlqu\r\nDate: Fri, 10 Aug 2007 06:08:51 +0200\r\nTo: rest-discuss@yahoogroups.com\r\nMessage-ID: &lt;20070810040851.GM15566@klangraum&gt;\r\nMail-Followup-To: rest-discuss@yahoogroups.com\r\nReferences: &lt;28276cf00708021841w7e610fbbscfa2192e9c8e3974@...&gt;\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=utf-8\r\nContent-Disposition: inline\r\nContent-Transfer-Encoding: 8bit\r\nIn-Reply-To: &lt;28276cf00708021841w7e610fbbscfa2192e9c8e3974@...&gt;\r\nUser-Agent: Mutt/1.4.2.1i\r\nX-Y-GMX-Trusted: 0\r\nX-eGroups-Msg-Info: 1:0:0:0\r\nFrom: &quot;A. Pagaltzis&quot; &lt;pagaltzis@...&gt;\r\nSubject: Re: Interface definition languages and service registries for REST services\r\nX-Yahoo-Group-Post: member; u=147780944; y=8TUYbme-_SUukA7ZJTyuS7uTn8WE5F5V4WdibHvIf_LO\r\nX-Yahoo-Profile: a22pag\r\n\r\nHi Olivier,\n\n* Olivier Pernet &lt;o.pernet@...&gt; [2007-08-03 17:00]:\n&gt; What do you think of the idea of having an interface definition\n&gt; language for REST services ? It seems some people outright\n&gt; reject the idea, while others support it in the form of WADL.\n\nI think there is a conflation of ideas here. My most widely cited\nweblog entry (that started life as a post on this list) goes into\nthis:\n\n    http://plasmasturm.org/log/460/\n\nBasically, “these are not your father’s interface descriptions.”\n\nI think WADL is mistaken, but I don’t think the concept of\ngenerating code from a description needs to be abandoned. I just\nthink it needs to describe different things than an IDL as we\nknow it describes.\n\nSpecifically, I think what we need is a description language that\ncould be implemented as a vocabulary to be embedded into a\nRelax NG or Schematron schema, which identifies which parts of a\ndocument conforming to that schema are links, or forms, and\nspecifies what semantics this form or link implies; eg. the\nRelax NG grammar for Atompub in XML syntax form contains, among\nother things, this:\n\n    &lt;element name=&quot;app:collection&quot;&gt;\n      &lt;ref name=&quot;appCommonAttributes&quot;/&gt;\n      &lt;attribute name=&quot;href&quot;&gt;\n        &lt;ref name=&quot;atomURI&quot;/&gt;\n      &lt;/attribute&gt;\n      &lt;interleave&gt;\n        &lt;ref name=&quot;atomTitle&quot;/&gt;\n        &lt;zeroOrMore&gt;\n          &lt;ref name=&quot;appAccept&quot;/&gt;\n        &lt;/zeroOrMore&gt;\n        &lt;zeroOrMore&gt;\n          &lt;ref name=&quot;appCategories&quot;/&gt;\n        &lt;/zeroOrMore&gt;\n        &lt;zeroOrMore&gt;\n          &lt;ref name=&quot;extensionSansTitleElement&quot;/&gt;\n        &lt;/zeroOrMore&gt;\n      &lt;/interleave&gt;\n    &lt;/element&gt;\n\nWe could turn this grammar into a description language for a\nRESTful system by saying something like the following, where I’m\ngoing to zoom on the `href` attribute part:\n\n    &lt;attribute name=&quot;href&quot;&gt;\n      &lt;ref name=&quot;atomURI&quot;/&gt;\n      &lt;ridl:link&gt;\n        &lt;ridl:request&gt;\n          &lt;ridl:method name=&quot;GET&quot;/&gt;\n          &lt;ridl:response content-type=&quot;application/atom+xml&quot;/&gt;\n        &lt;/ridl:method&gt;\n        &lt;ridl:request&gt;\n          &lt;ridl:method name=&quot;POST&quot;&gt;\n          &lt;ridl:content-type name=&quot;application/atom+xml;entry&quot;/&gt;\n          &lt;ridl:response content-type=&quot;application/atom+xml;entry&quot;&gt;\n        &lt;/ridl:request&gt;\n        &lt;ridl:request&gt;\n          &lt;ridl:method name=&quot;POST&quot;&gt;\n          &lt;ridl:content-type name=&quot;*/*&quot;/&gt;\n          &lt;ridl:response content-type=&quot;application/atom+xml;entry&quot;&gt;\n        &lt;/ridl:request&gt;\n      &lt;/ridl:link&gt;\n    &lt;/attribute&gt;\n\nThe “RIDL” vocabulary I used here is highly incomplete, of\ncourse, and the nesting might come out differently also, but it’s\na sketch that demonstrates the sort of approach I envision. There\nwould be a corresponding `ridl:form` element, and a lot more\nelements specifying the pre- and post-conditions each particular\nrequest/response cycle must fulfill.\n\nAssuming we have all these facilities, then you could take\nRIDL-annotated `atomsvc.rng` and `atom.rng` grammars and run them\nthrough a code generator that will construct out a library which\npresents an API based on the semantics of Atompub Service and\nCategory Documents and Atom Feed Documents.\n\nBut which knows nothing about the URIs your Atompub service uses.\n\nNor does it know anything about Atompub at all, of course.\n\nThe library just follows links and submits forms as you make\ncalls against its API. Of course you would then have to couple it\nwith some hand-written code to fill in the gaps, namely why and\nwhen to make the requests that the annotation specifies as\nacceptable – the knowledge of what the levers in an Atompub\nservice *mean*, rather than just what the levers are.\n\nWhat we have here is much like WADL, but rather than being a\nstand-alone IDL telling you which URIs to make what requests\nagainst, it is embedded in a grammar such that it explains where\nto find the relevant URIs in a representation that will be\nreturned by the service at run time, *and then* what requests to\nmake against *those*.\n\nRegards,\n-- \nAristotle Pagaltzis // &lt;http://plasmasturm.org/&gt;\n\n"}}
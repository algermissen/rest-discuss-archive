{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":270444633,"authorName":"donald.strong@nab.com.au","from":"donald.strong@...","profile":"illyrian_au","replyTo":"SENDER","senderId":"Lxi4MfiLh9z3buGGzn41T5o3K6FMuCqZ0YwHjlzZtBgVx6acm6SWdg83GQaADVctVHDvwXcUTceQuYRvepyn","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: How to compromise when designing a RESTful API?","postDate":"1158906220","msgId":6562,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PE9GQjVCNDVBN0IuMTdGNkQ4MzEtT05DQTI1NzFFRi4wMDAyQkJCMC1DQTI1NzFGMS4wMDIzMzQ1OEBuYWIuY29tLmF1Pg==","inReplyToHeader":"PGxvb20uMjAwNjA5MTZUMDc0MDA1LTc3MEBwb3N0LmdtYW5lLm9yZz4="},"prevInTopic":0,"nextInTopic":0,"prevInTime":6561,"nextInTime":6563,"topicId":6562,"numMessagesInTopic":1,"msgSnippet":"Hi Vincent, I have copied this to the rest-discuss list as well. ... of ... function ... refactor ... operations ... REST is not just about CRUD operations on","rawEmail":"Return-Path: &lt;Donald.Strong@...&gt;\r\nX-Sender: Donald.Strong@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 61209 invoked from network); 22 Sep 2006 06:34:54 -0000\r\nReceived: from unknown (66.218.66.217)\n  by m23.grp.scd.yahoo.com with QMQP; 22 Sep 2006 06:34:54 -0000\r\nReceived: from unknown (HELO mxkxout01.national.com.au) (203.57.241.225)\n  by mta2.grp.scd.yahoo.com with SMTP; 22 Sep 2006 06:34:54 -0000\r\nReceived: from mxkxout01.national.com.au (localhost.localdomain [127.0.0.1])\n\tby mxkxout01.national.com.au (Postfix) with ESMTP id 5FC2334008;\n\tFri, 22 Sep 2006 16:24:33 +1000 (EST)\r\nReceived: from smtphostkx01.au.thenational.com (unknown [10.20.238.25])\n\tby mxkxout01.national.com.au (Postfix) with ESMTP id 4FC6F34003;\n\tFri, 22 Sep 2006 16:24:33 +1000 (EST)\r\nReceived: from nauhub30a.global.thenational.com (melwmslnh04.shh.wfs.thenational.com [10.16.135.64])\n\tby smtphostkx01.au.thenational.com (Postfix) with ESMTP id 6BA1E51606;\n\tFri, 22 Sep 2006 16:24:33 +1000 (EST)\r\nIn-Reply-To: &lt;loom.20060916T074005-770@...&gt;\r\nTo: discuss@..., rest-discuss@yahoogroups.com\r\nCc: discuss@..., news &lt;news@...&gt;\r\nX-Mailer: Lotus Notes Release 6.5.1 January 21, 2004\r\nMessage-ID: &lt;OFB5B45A7B.17F6D831-ONCA2571EF.0002BBB0-CA2571F1.00233458@...&gt;\r\nDate: Fri, 22 Sep 2006 16:23:40 +1000\r\nX-MIMETrack: Serialize by Router on NAUHUB30A/VIC/NAB/NAG_AP(Release 6.5.5|November 30, 2005) at\n 22/09/2006 04:24:33 PM\r\nMIME-Version: 1.0\r\nContent-type: text/plain; charset=US-ASCII\r\nX-eGroups-Msg-Info: 1:0:0:0\r\nFrom: donald.strong@...\r\nSubject: Re: How to compromise when designing a RESTful API?\r\nX-Yahoo-Group-Post: member; u=270444633; y=NxaACIjIY7JTrk3Ul7yl8zu6vRO0WSuit_L0M44rsemyDzuOTPA\r\nX-Yahoo-Profile: illyrian_au\r\n\r\n\nHi Vincent,\n\nI have copied this to the rest-discuss list as well.\n\n&gt; Sorry for the rather long post,but after reviewing all the available REST\n&gt; literature, I still have no answer to my rather philosophical question.\n&gt;\n&gt; I understand that adopting a RESTful model means I have to think in terms\nof\n&gt; manipulating addressable resources instead of thinking in terms of\nfunction\n&gt; calls. Great, but what do you do with  operations you absolutely can&#39;t\nrefactor\n&gt; according to this model?\n\n&gt; Specifically, operations  that involve more than one resource, and\noperations\n&gt; that require some extra business logic (other than CRUD operation on the\n&gt; resource itself).\n\nREST is not just about CRUD operations on resources identified by a URI.\n\nI have made some comments on this in a previous post to the rest-discuss\nlist.\nhttp://tech.groups.yahoo.com/group/rest-discuss/message/4573\n\nA few people give the impression that GET/PUT/DELETE/POST(a) is the &quot;true\nREST way&quot;\nand that GET/POST(p) is the dark side. This ignores the fact that the most\nsuccessful REST style Application framework (HTML over HTTP) uses\nGET/POST(p)\nalmost exclusively.\n/* POST(a) = append to the URI, POST(p) = process this. */\n\nNow, you can think of POST as a &quot;disguised RPC call&quot; and in the trivial\ncase\nit is similar, but that ignores other possibilities for the use of POST.\n\nA Resource is not necessarily a discrete entity on the server (such as a\nfile).\nIt may be a view onto a number of entities on the server, similar to a\ndatabase\nview over a number of tables.\n\nBenjamin Carlyle gives an excellant description...\n\nhttp://tech.groups.yahoo.com/group/rest-discuss/message/5972\n\nSo if you implement a resource as a view onto a set of related entities in\nyour\ndomain model, then updating or POSTing to that view can modify many\nentities at\nonce, execute your business logic and wrap the whole lot up in a\ntransaction.\n(by domain model I mean the business data and logic implemented on the\nserver)\n\nThinking of it another way, you are telling your domain model what you want\nto\nachieve, not how you want to do it.\n\n&gt; An example of the first type of operations would be money transfer:  you\nwant to\n&gt; transfer money from account A to account B. If I were to adhere strictly\nto the\n&gt; REST philosophy, I would either:\n&gt; 1)decrement A, submit A with a PUT; increment B, submit B with a PUT; and\nmanage\n&gt; the recovery process from the client should  one operation fail.\n&gt; 2)Create a MoneyTransferOrder object (fromAccount, toAccount,amount)and\nsave it\n&gt; with a POST.\n\n3) POST an instruction to your account, represented by a URI, with\ninstructions\n   to transfer an amount of money to another account, represented by a URI.\n   This may create a new resource representing the transaction. The\nsuccess/failure\n   of the operation will be returned in the response body along with the\nURI to\n   the transaction. There is no &quot;REST says you must create a transaction&quot;\nbut in\n   this case it is probably a good idea.\n\n&gt; The former is -of course- a non-starter. The latter is just a way of\ndisguising\n&gt; an RPC call; I think it violates the REST principle in the sense that\nthe\n&gt; MoneyTransferOrder resource is defined for the sole purpose of passing\n&gt; parameters to server-side service,  and cannot be retrieved later (i.e.\nit&#39;s not\n&gt; really a resource).\n\nNothing, anywhere says that POST must create a resource.\n\n&gt; An example of the second type of operations would be the closeAccount\noperation.\n&gt; Maybe I want to send a notification to a manager every time an account is\n&gt; closed. Again, I see two options:\n&gt; 1)set the isClosed proprty to True and save with a PUT. On the server, I\nwould\n&gt; have to diff the account with the value in the database, this would allow\nme to\n&gt; detect that the account has been closed, and send the notification.\n&gt; 2)Create a CancellationOrder object, and save it with a POST\n\nWhen using a POST as a &quot;process this&quot; operation you can send a request to\nyour\naccount URI to close the account and the business logic that closes the\naccount\ncan send a notification to any other interested party by POSTing another\nrequest to their URI. In this case your Account and the Manager may be on\nopposite\nsides of the world. You just don&#39;t care when you are using URIs to address\nresources.\n\n&gt; The problem with the first approach is that the server has to guess what\n&gt; operation the client intended to complete. The second approach suffers\nfrom the\n&gt; same RPC-in-disguise problem mentioned before.\n\n&gt; Conclusion?\n&gt;\n&gt; Well, my conclusion is that a RESTful architecture is particularly well\nsuited\n&gt; for applications where the entire business logic is done on the client\nand the\n&gt; server acts only has a data repository (e.g. del.icio.us).\n&gt; For other applications, you&#39;ll have to leave with the fact that you may\nhave\n&gt; maybe 30% of your calls that are in fact RPC calls -i.e. a POST where you\npas\n&gt; the operation&#39;s name parameters. That&#39;s -from what I saw- how the\nupcoming.org\n&gt; API is designed.\n&gt;\n&gt; What do you Restfarians think? Am I missing the boat on this one?\n&gt;\n\nI hope you can see that POST is a bit more that a substitute for RPC.\n\nI have not commented on PUT/DELETE/POST(a) here but I do not diminish their\nrole either. As you have observed, they have limitations. They have similar\nqualities to other Data Service mechanisms, like Relational Databases, in\nthat\nyou can store data and have the data checked for type correctness and\nreferential\nintegrity, but you cannot use them to implement business logic. At least,\nnot\nwithout a lot more effort than is worthwhile.\n\nI am not suggesting that there is a clear delineation between these groups\nof HTTP methods. They can\nbe used intermixed, but I believe  it helps clarify your thinking to view\nthem in this way.\n\nAs far as HTTP is concerned there is absolutely no difference between\nPOST(p) and POST(a).\nThe transfer protocol does not care what you intend to do with the request.\nThe transfer protocol\nonly cares that the request is unsafe, not indempotent and that you cannot\ncache the responses.\n\nPart of the confusion about REST has been that people have taken an\nArchitectural Model for the\ninternet and tried to use it to evaluate distributed applications when it\nwas intended to evaluate\ntransfer protocols. The constraints that dictate the desired behaviour of\nUser Agents, Proxies\nand Origin Servers don&#39;t always map well to Banking application and Wikis.\n\nREST is not about the Atom protocol. That is an application protocol. But\nthe Atom protocol has\nbeen designed with REST in mind. My understanding is that the Atom protocol\ndoes not use\nthe &quot;process this&quot; version of POST. Thats fine. HTML does not use PUT or\nDELETE. Both could\nbe described as RESTful applications but neither of them defines REST.\n\nRegards\nDonald.\n\n\nNational Australia Bank Ltd - ABN 12 004 044 937\nThis email may contain confidential information. If you are not the intended recipient, please immediately notify us at postmaster@... or by replying to the sender, and then destroy all copies of this email. Except where this email indicates otherwise, views expressed in this email are those of the sender and not of National Australia Bank Ltd. Advice in this email does not take account of your objectives, financial situation, or needs. It is important for you to consider these matters and, if the e-mail refers to a product(s), you should read the relevant Product Disclosure Statement(s)/other disclosure document(s) before making any decisions. If you do not want email marketing from us in future, forward this email with &quot;unsubscribe&quot; in the subject line to Unsubscriptions@... in order to stop marketing emails from this sender. National Australia Bank Ltd does not represent that this email is free of errors, viruses or interference.\n\n"}}
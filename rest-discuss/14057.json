{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":279478415,"authorName":"Ant√≥nio Mota","from":"=?windows-1252?Q?Ant=F3nio_Mota?= &lt;amsmota@...&gt;","profile":"amsmota","replyTo":"SENDER","senderId":"ojKYOpO4KhcXoDl-UlrsMylgn_lvS19Dx3ESgG-0oXcwVpqCxM2TDVqXbnwN7PVjeeN9MelftdMk2ndL8ZP2l3-Vr08yTu_4YAHnHx8jnEf_LXG1cT1sUvzOMgE","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Framework","postDate":"1259237179","msgId":14057,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDRCMEU2RjNCLjMwOTA1MDRAZ21haWwuY29tPg==","inReplyToHeader":"PDg3emw2YTVscHAud2wlYmVyZW5kQHBvYm94LmNvbT4=","referencesHeader":"PGhlajRkbSs2c2tkQGVHcm91cHMuY29tPiA8ODd6bDZhNWxwcC53bCViZXJlbmRAcG9ib3guY29tPg=="},"prevInTopic":14056,"nextInTopic":14058,"prevInTime":14056,"nextInTime":14058,"topicId":14050,"numMessagesInTopic":13,"msgSnippet":"I myself I m not a big fan of frameworks, I even wrote elsewhere about what I consider a anti-pattern that I called Framework Oriented Design Architecture, or","rawEmail":"Return-Path: &lt;amsmota@...&gt;\r\nX-Sender: amsmota@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 58755 invoked from network); 26 Nov 2009 12:06:43 -0000\r\nX-Received: from unknown (66.196.94.106)\n  by m3.grp.sp2.yahoo.com with QMQP; 26 Nov 2009 12:06:43 -0000\r\nX-Received: from unknown (HELO mail-ew0-f218.google.com) (209.85.219.218)\n  by mta2.grp.re1.yahoo.com with SMTP; 26 Nov 2009 12:06:43 -0000\r\nX-Received: by ewy10 with SMTP id 10so707569ewy.18\n        for &lt;rest-discuss@yahoogroups.com&gt;; Thu, 26 Nov 2009 04:06:21 -0800 (PST)\r\nX-Received: by 10.216.85.147 with SMTP id u19mr2857698wee.88.1259237181292;\n        Thu, 26 Nov 2009 04:06:21 -0800 (PST)\r\nReturn-Path: &lt;amsmota@...&gt;\r\nX-Received: from ?10.44.18.194? (089-101-144121.ntlworld.ie [89.101.144.121])\n        by mx.google.com with ESMTPS id q9sm1528963gve.15.2009.11.26.04.06.19\n        (version=TLSv1/SSLv3 cipher=RC4-MD5);\n        Thu, 26 Nov 2009 04:06:19 -0800 (PST)\r\nMessage-ID: &lt;4B0E6F3B.3090504@...&gt;\r\nDate: Thu, 26 Nov 2009 12:06:19 +0000\r\nUser-Agent: Thunderbird 2.0.0.23 (Windows/20090812)\r\nMIME-Version: 1.0\r\nTo: berend@...\r\nCc: dhillon_sjsu &lt;narpal.dhillon@...&gt;, \n rest-discuss@yahoogroups.com\r\nReferences: &lt;hej4dm+6skd@...&gt; &lt;87zl6a5lpp.wl%berend@...&gt;\r\nIn-Reply-To: &lt;87zl6a5lpp.wl%berend@...&gt;\r\nContent-Type: text/plain; charset=windows-1252; format=flowed\r\nContent-Transfer-Encoding: 8bit\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: =?windows-1252?Q?Ant=F3nio_Mota?= &lt;amsmota@...&gt;\r\nSubject: Re: [rest-discuss] Framework\r\nX-Yahoo-Group-Post: member; u=279478415; y=vXN4_wy4RkRFC3CT0BLJzYuU1of2FPkwr43SOUv8jBb7QQ\r\nX-Yahoo-Profile: amsmota\r\n\r\nI myself I&#39;m not a big fan of frameworks, I even wrote elsewhere about \nwhat I consider a anti-pattern that I called Framework Oriented Design \nArchitecture, or FODA for short (Portuguese speakers will appreciate the \nirony...).\n\nBasically, what I call FODA is a more or less current practice of \nchoosing a Framework (or two or three) and then design the architecture \naround the framework, rather than doing the opposite, and then having to \n&quot;fit&quot; the architecture to what the framework(s) can or not do, instead \nof the business model that it was supposed to fit.\n\nThe best example of this is the myriad of applications that start by \nchoose &quot;Spring + Hibernate&quot; without taking into account the limitations \nof those two frameworks, and then conform to those limitations that in \nturn limit the business value of the solution.\n\nThat being said, it is undoubtedly true that frameworks are very useful \nin avoiding writing &quot;plumbing&quot; code and speeding up development. Like \nSpring Core when correctly used (I&#39;m not so sure about Hibernate...)\n\nSo of course, IMO, frameworks have their space in REST as in any \ndevelopment style, as long they do not dictate the overall architecture. \nSo I would say, design your architecture first (simply putting the ideas \nin your head in a consistent order, defining clearly the ends to which \nit aims, even designing some fancy squares and circles and lines in a \nnapkin, not necessarily a &quot;formal&quot; design - but remember you&#39;ll need \nthat formality later in the process) and from them look not only at the \nframeworks that gives you what you need, but also *how* they do it, \nbecause probably you will need *some* of the functionalities of the \nframework but you will want to avoid to commit yourself to the whole \nstack it provides - or you risk falling into a FODA.\n\nFor instance, since the beginning we knew that for business reasons we \nhad to support not only HTTP but a few other methods of communicating \nwith our clients/business partners, and we build the design with that in \nmind. Had we chosen a framework in the first place and we had to deal \nwith big problems down the road - like choosing Jersey, that gives what \nwe need but only for HTTP, or Restlet, that supports some other \nprotocols but is way too &quot;expensive&quot; (not in money, but technologically \nspeaking) to one of the goals of our design - to be simple and &quot;light&quot;. \nAnd expansible.\n\nSo we end up using Spring (core, beans, context), Spring Batch, Spring \nWeb/MVC (only for the HTTP connector), big chunks of Jersey, \nSpring-Integration (on hold now), Hibernate (against my will) and a few \nothers like JackRabbit, Funanbol, jBPM and others for very specific things.\n\nI hope this helps you in analysing the frameworks.\n\n\nberend@... wrote:\n&gt;\n&gt; &gt;&gt;&gt;&gt;&gt; &quot;dhillon&quot; == dhillon sjsu &lt;narpal.dhillon@... \n&gt; &lt;mailto:narpal.dhillon%40ymail.com&gt;&gt; writes:\n&gt;\n&gt; dhillon&gt; Hello I am new to the REST development. I have general\n&gt; dhillon&gt; question that which is the most popular and mostly used\n&gt; dhillon&gt; framework for RESTful web services. e.g. Jerset, Restlet\n&gt; dhillon&gt; or Rails. I am not asking for a specific language, but in\n&gt; dhillon&gt; general.\n&gt;\n&gt; REST and framework don&#39;t belong in the same sentence. That&#39;s the short\n&gt; answer.\n&gt;\n&gt; The longer answer is that you don&#39;t need one, nor want one. If your\n&gt; framework cannot tell you the HTTP method, doesn&#39;t allow (or makes it\n&gt; heard) you to query or specify headers, it&#39;s probably not useful for\n&gt; REST either.\n&gt;\n&gt; -- \n&gt; Cheers,\n&gt;\n&gt; Berend de Boer\n&gt;\n&gt; \n\n\n"}}
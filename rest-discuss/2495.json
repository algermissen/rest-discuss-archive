{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":69125415,"authorName":"Mathews, Walden","from":"&quot;Mathews, Walden&quot; &lt;waldenm@...&gt;","profile":"waldenmathews","replyTo":"SENDER","senderId":"K6DFspM_wQlQaqnf5YWtje-IVkwX_XK0QoiGq7NRG1RewxPshHuNrULWEVoOd_CCw4K71TRUQt0bqm-tJlfuF5Ul-yrcA6mlzAg","spamInfo":{"isSpam":false,"reason":"0"},"subject":"RE: [rest-discuss] REST and the Web","postDate":"1031667015","msgId":2495,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDEzNzNENjM0MkZBMUQ0MTE5QTUxMDBFMDI5NDM3RjY0MDE1NUY5MTRAY2xpZmZvcmQuZGV2by5pbHguY29tPg=="},"prevInTopic":2494,"nextInTopic":2496,"prevInTime":2494,"nextInTime":2496,"topicId":2493,"numMessagesInTopic":19,"msgSnippet":"... According to Fielding, REST provided valuable guidance in some of the more recent design of web protocol, and in that sense he s declaring it to work ,","rawEmail":"Return-Path: &lt;waldenm@...&gt;\r\nX-Sender: waldenm@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_1_0_1); 10 Sep 2002 14:10:19 -0000\r\nReceived: (qmail 27872 invoked from network); 10 Sep 2002 14:10:19 -0000\r\nReceived: from unknown (66.218.66.216)\n  by m1.grp.scd.yahoo.com with QMQP; 10 Sep 2002 14:10:19 -0000\r\nReceived: from unknown (HELO mail.ilx.com) (199.119.33.174)\n  by mta1.grp.scd.yahoo.com with SMTP; 10 Sep 2002 14:10:19 -0000\r\nReceived: from clifford.devo.ilx.com (clifford.devo.ilx.com [172.27.56.72])\n\tby mail.ilx.com (8.9.3/8.9.3) with ESMTP id KAA54582;\n\tTue, 10 Sep 2002 10:10:17 -0400 (EDT)\n\t(envelope-from waldenm@...)\r\nReceived: by clifford.devo.ilx.com with Internet Mail Service (5.5.2653.19)\n\tid &lt;R9QJC0AL&gt;; Tue, 10 Sep 2002 10:10:17 -0400\r\nMessage-ID: &lt;1373D6342FA1D4119A5100E029437F640155F914@...&gt;\r\nTo: &quot;&#39;Seairth Jacobs&#39;&quot; &lt;seairth@...&gt;,\n        rest-discuss\n\t &lt;rest-discuss@yahoogroups.com&gt;\r\nSubject: RE: [rest-discuss] REST and the Web\r\nDate: Tue, 10 Sep 2002 10:10:15 -0400\r\nMIME-Version: 1.0\r\nX-Mailer: Internet Mail Service (5.5.2653.19)\r\nContent-Type: text/plain\r\nFrom: &quot;Mathews, Walden&quot; &lt;waldenm@...&gt;\r\nX-Yahoo-Group-Post: member; u=69125415\r\nX-Yahoo-Profile: waldenmathews\r\n\r\n\n\n&gt; -----Original Message-----\n&gt; From: Seairth Jacobs [mailto:seairth@...]\n&gt; Sent: Tuesday, September 10, 2002 1:15 AM\n&gt; To: rest-discuss\n&gt; Subject: [rest-discuss] REST and the Web\n&gt; \n&gt; \n&gt; I have been learning REST for some time now, and I feel that \n&gt; I have even\n&gt; more to learn.  However, I keep coming to one conclusion in \n&gt; partcicular.\n&gt; This conclusion may not be very popular within this list, \n&gt; esp. since this\n&gt; list is generally pro-HTTP.  But I like sticking my neck out, so here\n&gt; goes...\n&gt; \n&gt; \n&gt; The most common &quot;proof&quot; that REST works is HTTP.  This makes sense\n&gt; considering that Fielding had been looking at HTTP when he \n&gt; did his work on\n&gt; REST.  Also, considering that he helped author HTTP 1.1, this \n&gt; would lend\n&gt; even more credence to the statement that &quot;The Web proves that \n&gt; REST works.&quot;\n\nAccording to Fielding, REST provided valuable guidance in some\nof the more recent design of web protocol, and in that sense he&#39;s\ndeclaring it to &quot;work&quot;, but we mostly mean something else when\nwe talk about REST &quot;working&quot;.\n\n&gt; \n&gt; Because of this, I have focused on learning REST as it \n&gt; applies to HTTP,\n&gt; though I had initially started by trying to learn REST \n&gt; independent of any\n&gt; application or protocol.  In this learning process, I \n&gt; continually run into\n&gt; questions that do not seem to have clear, understandable answers.\n&gt; Considering that HTTP was considered RESTful, I thought this \n&gt; to be an odd\n&gt; thing.  I would expect a RESTful protocol to clearly show how the REST\n&gt; architecture works.\n\nThe protocol itself can support REST architected applications, but\nit can&#39;t control the way it is used, just like you can&#39;t prevent\nhouses from being used as targets on Halloween.  So while HTTP may\nbe considered &quot;RESTful&quot;, the same doesn&#39;t go for all applications\nof HTTP.\n\nBut sans applications (which admittedly makes architecture study\nthat much harder) you can see HTTP as an example of a way to bring\nREST style to life.  You can see that it has a limited number of\nvery generic methods, that it has uniform identifiers built right\nin, that it separates client from server in each task it undertakes,\nthat it has directives for caching, and so on.  One of the things\nHTTP doesn&#39;t do well is constrain applications from holding\nconversational state on the server.  Another thing it really can&#39;t\nconstrain is whether your application can directly address the\nresources in its domain or whether you tunnel all requests through\na single identifier.\n\nInstead of thinking of HTTP as a proof of REST, it might be more\nproductive to think of REST of a guideline for using HTTP for\nmaximum benefit.\n\n&gt; \n&gt; Then it hit me.  I have let myself fall victem to marketing \n&gt; hype!\n\nIn the application design arena, this is inevitable, even when\nyou go in with your eyes wide open.  The fact is that we&#39;re\nonly playing a game here, applying heuristics to find the best\npatterns to spend time with.  There&#39;s no way to do this without\nemploying faith, because otherwise you&#39;d never make any\nsweeping decisions.  So unlax.  REST isn&#39;t perfect; neither is\nHTTP.  Still, the discovery of simple forms that do powerful\nwork is an exciting discovery.  I had a ball piecing together\nthe puzzle of how to map a set of entitlements function calls\nonto an entitlements resource model, and I&#39;m still having fun\nrefining that model and selling the results.  I can tell it&#39;s\ngood because the API keeps shrinking without losing function.\n\n&gt; And here\n&gt; is why I say that.  I took it as gospel that HTTP === REST.  \n&gt; I believed in\n&gt; the statement that &quot;The Web proves that REST works.&quot;  But I \n&gt; kept coming up\n&gt; with these &quot;issues&quot; I couldn&#39;t reconcile.  So I sat down this \n&gt; weekend and\n&gt; instead of considering *what* wasn&#39;t reconciling, I \n&gt; considered *why* it\n&gt; wasn&#39;t reconciling.  And I think I finally hit upon the reason.\n&gt; \n&gt; HTTP is not as RESTful as we would all like to believe.  For \n&gt; years, people\n&gt; have been building web sites, mostly static pages.  Did these \n&gt; people use\n&gt; HTTP PUT to update the server?  Absolutely not!  They used \n&gt; FTP.  They used\n&gt; the access to their HTTP server through their local network.  To some\n&gt; extent, they even used HTML Form-base file uploads via POST.  But PUT?\n&gt; Hardly.  The exact same could be said for DELETE.\n\nREST merely says that connectors are constrained to a limited set\nof very generic methods.  HTTP supplies such a set of methods, plus\nsome rules for when they apply.  I&#39;m not sure if REST says\nthat there has to be a resource modification method that&#39;s\nidempotent, a retrieval method that&#39;s safe, etc.  I&#39;m pretty sure\nREST says nothing about there having to be a deletion method.\nSo, the fact that you can design systems around GET and POST\ndoesn&#39;t disprove REST; nor does it disprove HTTP.  The argument\nin favor of using what&#39;s already in HTTP instead of reinventing\nis different from the more general argument for styling applications\nwith REST, IMO.\n\nThe distinction is there if you wish to observe it, but culturally\nthe two seem to blend in the name of common sense.\n\n&gt; In the end, this does not make the Web a killer app that \n&gt; proves REST works.\n&gt; If anything, it proves that certain aspects of REST work \n&gt; (i.e. GET).  Beyond\n&gt; that, I am beginning to feel that HTTP has as much to prove as a truly\n&gt; RESTful tool as does just about any other web-based \n&gt; technology out there\n&gt; right now....\n\nThat&#39;s a fair assessment, and it corresponds with my experience\nin trying to go beyond what Jackson calls the &quot;static information\nframe&quot;-type application using HTTP.  Making intricate behaviors\noccur through a very generic interface is a real challenge.  But,\nthe fact that I can use the web to research the things I do gives\ncredibility to the fact that at least the GET side is &quot;killer&quot;.\n\nWalden\n\n"}}
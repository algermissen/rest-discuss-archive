{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":401876259,"authorName":"Will Hartung","from":"Will Hartung &lt;willh@...&gt;","profile":"gaminginparis","replyTo":"SENDER","senderId":"oetiGqhFWBU18r3TqTGbk1ATKiwI185PoVclkJ4FHF0FgtvhKi1P2Vrzc2SydDmpBCRXEdl6uM_yXiKWkeGfapD9TfAxGvc9Kw","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] minimizing coupling with rest processes/trying to \tachieve a goal","postDate":"1275001567","msgId":15432,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEFBTkxrVGlrT0QtbUNhTHZKcDV6clRaekxhZHdHUk5VT3V2TEtrVUpxY21BOUBtYWlsLmdtYWlsLmNvbT4=","inReplyToHeader":"PEFBTkxrVGlsaFhLT05NVllYNUR5Mk9CUHFPaGtEZ2JGUzFISzdQRWFQUzN2dEBtYWlsLmdtYWlsLmNvbT4=","referencesHeader":"PEFBTkxrVGltU3lZclg5SFphSzY5dC1zYWVDNS1YN3BRQVBQMEN1Y3BzV0d3M0BtYWlsLmdtYWlsLmNvbT4JPEFBTkxrVGludzZ3Z2tiVEQxMFlkZ25YbURhSFZFMXlFdzZjOHBFMFVPQkl4V0BtYWlsLmdtYWlsLmNvbT4JPEFBTkxrVGlsaFhLT05NVllYNUR5Mk9CUHFPaGtEZ2JGUzFISzdQRWFQUzN2dEBtYWlsLmdtYWlsLmNvbT4="},"prevInTopic":15431,"nextInTopic":15434,"prevInTime":15431,"nextInTime":15433,"topicId":15425,"numMessagesInTopic":10,"msgSnippet":"On Thu, May 27, 2010 at 2:23 PM, Guilherme Silveira ... Truthfully, this is where the robustness of a REST system comes from. A REST systems power, IMHO, is","rawEmail":"Return-Path: &lt;willh@...&gt;\r\nX-Sender: willh@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 4002 invoked from network); 27 May 2010 23:06:10 -0000\r\nX-Received: from unknown (98.137.34.44)\n  by m2.grp.sp2.yahoo.com with QMQP; 27 May 2010 23:06:10 -0000\r\nX-Received: from unknown (HELO mail-pv0-f173.google.com) (74.125.83.173)\n  by mta1.grp.sp2.yahoo.com with SMTP; 27 May 2010 23:06:10 -0000\r\nX-Received: by pvg12 with SMTP id 12so358342pvg.18\n        for &lt;rest-discuss@yahoogroups.com&gt;; Thu, 27 May 2010 16:06:10 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.140.255.11 with SMTP id c11mr8556738rvi.137.1275001567328; \n\tThu, 27 May 2010 16:06:07 -0700 (PDT)\r\nX-Received: by 10.141.32.16 with HTTP; Thu, 27 May 2010 16:06:07 -0700 (PDT)\r\nIn-Reply-To: &lt;AANLkTilhXKONMVYX5Dy2OBPqOhkDgbFS1HK7PEaPS3vt@...&gt;\r\nReferences: &lt;AANLkTimSyYrX9HZaK69t-saeC5-X7pQAPP0CucpsWGw3@...&gt;\n\t&lt;AANLkTinw6wgkbTD10YdgnXmDaHVE1yEw6c8pE0UOBIxW@...&gt;\n\t&lt;AANLkTilhXKONMVYX5Dy2OBPqOhkDgbFS1HK7PEaPS3vt@...&gt;\r\nDate: Thu, 27 May 2010 16:06:07 -0700\r\nMessage-ID: &lt;AANLkTikOD-mCaLvJp5zrTZzLadwGRNUOuvLKkUJqcmA9@...&gt;\r\nTo: Guilherme Silveira &lt;guilherme.silveira@...&gt;\r\nCc: rest-discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nFrom: Will Hartung &lt;willh@...&gt;\r\nSubject: Re: [rest-discuss] minimizing coupling with rest processes/trying to \n\tachieve a goal\r\nX-Yahoo-Group-Post: member; u=401876259; y=DkAHDAzVRQWW5OsRYqqTct8ub5HOcpH8CiSpC1xJgGpf_6mwd3cYWw\r\nX-Yahoo-Profile: gaminginparis\r\n\r\nOn Thu, May 27, 2010 at 2:23 PM, Guilherme Silveira\n&lt;guilherme.silveira@...&gt; wrote:\n&gt;&gt; Making that underlying infrastructure, the translating of the media\n&gt;&gt; types and supported operations in to code easier to create would be a\n&gt;&gt; real boon. Such as doing a GET from #itemList, a GET that\n&gt;&gt; automatically redirects if it has too. That alone would add a lot of\n&gt;&gt; robustness to client code.\n&gt;\n&gt; I think thats the code I was trying to achieve earlier, less syntax\n&gt; noise, easier to access through i.e http:\n&gt; &quot;at(&#39;entry_point&#39;).get.links.relation.get...&quot;\n&gt;\n&gt; I will try to keep following both paths.\n\nTruthfully, this is where the robustness of a REST system comes from.\n\nA REST systems power, IMHO, is that it&#39;s underlying structure need not\nbe static. Simply ensuring that clients are looking up URIs out of\npayloads is a great leap in robustness, because Well Behaved Servers\ncan send out links to other physical systems. The stateless nature\nallows for easier back end transparency.\n\nConsider these 4 basic features of REST over HTTP, all of which add to\nits robustness and flexibility.\n\n1) Servers servicing requests behing load balancers. Since much of\nHTTP can be connectionless, load balancers can more freely direct\ntraffic to different systems based on load or failure or whatever.\nThis routing is (can be) invisible to the client. Since REST is\nstateless, server transitions ideally can be done more easily.\n\n2) Proxies. HTTP Proxies add robustness by offloading the origin\nservers for frequent, appropriate requests. The Proxy can even serve\nup content if the host server is down. Caching has lots of issues, and\nis difficult to do right. But the capability is there, again, at the\nHTTP protocol level. The REST Client wouldn&#39;t be ignorant of the fact\nthat a Proxy intervened.\n\n3) HTTP Redirect. At the HTTP Protocol, this is a client routing\ninstruction. Most every other popular protocol lacks this kind of\nfeature, the ability to tell someone at Window A to go to Window B.\nThis is at the HTTP Protocol, not the REST protocol. A well\nimplemented client will not even know the re-routing has happened. A\nSMART Client will take the Redirect and, assuming it&#39;s a permanent\nredirect, perhaps in the future always redirect the same request\nautomatically so as not to incur the cost of the redirect later. The\nSmart Client can maintain an internal table of these, perhaps.\n\n4) HATEOS. Following links. Client can connect to System A, who&#39;s\npayload directs them to System B. At the base level, the client is\naware of this change, since the underlying address changes (and of\ncourse could run in to access issues -- perhaps the new address is to\na blocked server, for example). But at the REST Client level, this is\neffectively invisible. Since the URIs are opaque, &quot;one is as good as\nthe other&quot; as long as its role in the workflow is well defined. The\n&quot;#buyNow&quot; can be a completely different URI from request to request,\nbut, ostensibly, any of them could be use by a REST client. This\nability lets the servers direct the clients &quot;transparently&quot;, at the\nREST protocol level, for whatever reason necessary (load, failure, new\nversion of service, etc.).\n\nThe first two work with &quot;dumb clients&quot;. The second two require a more\nrobust client. Make these robust client easier to write is key, I\nthink, to moving REST farther down field and easier, BETTER, adoption.\n\nI don&#39;t think there is much beyond this that can be done to keep\nstupid applications from being stupid. Instead, more work can be done\nto promote better practices, promote solid examples of those\npractices, and perhaps tooling or libraries to enable better\npractices.\n\nFor example, no matter what is done at the client end, how it&#39;s coded,\netc., there&#39;s not much that can be done if the host server goes dead.\nAnd as the host server service definition drifts from the\nspecification implemented by the client, the more close to death it\nbecomes. It takes conscious effort and work to make a robust, backward\ncompatible service layer and ages and evolves well.\n\nIt&#39;s easy to imagine how a service can add a new media type for a new\nversion of a service. How existing types can have new references added\nto them promoting the new types, but also having reference to the\noriginal types for existing clients.\n\nHow the clients need only implement the new media type, and change to\nstart looking for the new relationships and following those, thus\nincrementally changing. Then, after 6 months, &quot;suddenly&quot; the service\nremoves the old references, and perhaps support for the old media\ntype. That, IMHO, is a well behaved service. But that adds an extra\nwork burden to the provider.\n\nI don&#39;t see good ways of making that easier, save simply trying to\nempower developers to perhaps make those kinds of well behaved servers\neasier to create for their users. Well Behaved Clients and Well\nBehaved Servers are the key to the real robustness. REST gives us the\nability to do both, and HTTP happens manifest some of those\ncharacteristics in handy ways.\n\n"}}
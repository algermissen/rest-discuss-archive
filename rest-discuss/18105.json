{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":242972596,"authorName":"Jørn Wildt","from":"=?iso-8859-1?Q?J=F8rn_Wildt?= &lt;jw@...&gt;","profile":"jorn_lind_nielsen","replyTo":"SENDER","senderId":"9sC5pr22JtxZ2bnjEmXvt7cnhvi5blOjIpOOTZsk0jp-UNMx46iZI-DJwh8uQeSqBlr1-KzXzX2KRVkiyPT9lQLoZt6uJSo8q1uHa1iwrR6wKwBlyET83uw","spamInfo":{"isSpam":false,"reason":"3"},"subject":"Best approach for a complex API?","postDate":"1324325331","msgId":18105,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDRDOTIxQUQ2NDM2MzQ5ODE5REU2QzBEOUU0QjYyOUIwQEpyblBDPg=="},"prevInTopic":0,"nextInTopic":18107,"prevInTime":18104,"nextInTime":18106,"topicId":18105,"numMessagesInTopic":11,"msgSnippet":"I am at the beginning of a project where we need a web/http-based API for reading and creating complex objects (more on that later). Right now I need to decide","rawEmail":"Return-Path: &lt;jw@...&gt;\r\nX-Sender: jw@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 26134 invoked from network); 19 Dec 2011 20:08:33 -0000\r\nX-Received: from unknown (98.137.34.45)\n  by m7.grp.sp2.yahoo.com with QMQP; 19 Dec 2011 20:08:33 -0000\r\nX-Received: from unknown (HELO smtp1.cybercity.dk) (212.242.43.251)\n  by mta2.grp.sp2.yahoo.com with SMTP; 19 Dec 2011 20:08:33 -0000\r\nX-Received: from uf6.cybercity.dk (uf6.cybercity.dk [212.242.42.50])\n\tby smtp1.cybercity.dk (Postfix) with ESMTP id CC423586814\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Mon, 19 Dec 2011 21:08:46 +0100 (CET)\r\nX-Received: from JrnPC (port439.ds1-aroe.adsl.cybercity.dk [212.242.220.134])\n\t(Authenticated sender: dsl164923)\n\tby uf6.cybercity.dk (Postfix) with ESMTPA id A0D48E37D1E\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Mon, 19 Dec 2011 21:08:32 +0100 (CET)\r\nMessage-ID: &lt;4C921AD6436349819DE6C0D9E4B629B0@JrnPC&gt;\r\nTo: &quot;Rest Discussion List&quot; &lt;rest-discuss@yahoogroups.com&gt;\r\nDate: Mon, 19 Dec 2011 21:08:51 +0100\r\nMIME-Version: 1.0\r\nContent-Type: text/plain;\n\tformat=flowed;\n\tcharset=&quot;iso-8859-1&quot;;\n\treply-type=original\r\nContent-Transfer-Encoding: 8bit\r\nX-Priority: 3\r\nX-MSMail-Priority: Normal\r\nX-Mailer: Microsoft Windows Mail 6.0.6002.18197\r\nX-MimeOLE: Produced By Microsoft MimeOLE V6.0.6002.18463\r\nX-eGroups-Msg-Info: 2:3:4:0:0\r\nFrom: =?iso-8859-1?Q?J=F8rn_Wildt?= &lt;jw@...&gt;\r\nSubject: Best approach for a complex API?\r\nX-Yahoo-Group-Post: member; u=242972596; y=k1jecwdnZS7RvqiasT_Cde632QwH9s880FS-NV9_DQzxD8oJ-2n8WhX2960\r\nX-Yahoo-Profile: jorn_lind_nielsen\r\n\r\nI am at the beginning of a project where we need a web/http-based API for \nreading and creating complex objects (more on that later). Right now I need \nto decide wether to do this with a SOAP service or a REST API.\n\nSOAP has the benefits of being well understood and having lots of tooling \nthereby making it easy to get up and running. REST has some more long term \nbenefits but requires a bit more work up front.\n\nI would rather do it with REST but doing REST right puts some burden on the \nclient that I struggle with. It is extremely easy to create a SOAP service \nin .NET using WCF and create a proxy client that works with it. Creating a \nREST client requires a bit more work if it must know how to follow links via \nlink-relations, read (x)forms definitions on the fly and so on.\n\nThe API works with case files in a case management system (*). A case file \ncontains dossiers, dossiers contain documents, and dossiers can be \nassociated with various persons and/or organizations (parties) - like for \ninstance a responsible party.\n\nSo I need to read case files, dossiers, binary documents and parties. I also \nneed to be able to create those entities and create the hierarchical \nrelationship between them. I expect to have web ressources for the entities: \ncase file, dossier, document, party ... and, no, I am not going to expose my \ninternal entity types as web objects, there will be some kind of \ntransformation to a public facing representation.\n\nMy first design question is; what content type should I use for representing \nthese entities? By using HTML I can use &lt;form&gt; and &lt;a&gt; as hypermedia \ncontrols - but then there is no well known machine readable representation \nof the entities except RDFa which I have found rather difficult to use due \nto lack of tooling in .NET.\n\nI could also use some proprietary XML variation. That would solve the entity \nrepresentation but leave me without well known hypermedia controls. That \ncould although be fixed by allowing elements like ATOM links and such in the \nXML.\n\nInitial scenario: the API must support creation of a case file, adding a \ndossier, and associate various parties to it. That can be a two step \noperation - 1) post case file data, 2) post dossier data with reference to \n(1) and included party references. The result would probably be a &quot;403 \ncreated&quot; with a link to the new case file resource.\n\nSecond scenario: add additional binary documents to the dossier. That should \nbe easy with the dossier representation having a link to its document \ncollection such that the client can post new documents to the collection. It \nshould be possible to represent a document upload using only standard HTTP \nheaders, posted content type, and binary data in the body.\n\nMy biggest concern is what content types to use in order to make it as easy \nto use from .NET as possible while still being a &quot;real&quot; REST API?\n\nWhat I would like to be able to do, is to write code like this when creating \nfor instance a new case file:\n\n  // Assume &quot;CaseFile&quot; corresponds to the public facing content type\n  CaseFile f = new CaseFile();\n  f.Title = &quot;A new case file&quot;;\n  f.OtherProperties = ...;\n\n  Uri createCaseFileUri = ... a way to fetch the URI - how? ...\n  Uri newCaseFileUri = createCaseFileUri.SerializeAndPostSomeData(f);\n\nWhere would you guys start with such a project? What tools would you use for \na C# .NET client (the server is built on Open Rasta)?\n\nThanks, J�rn\n\n(*) I have mentioned this some time ago on this mailing list, but the \nproject has been sleeping for some time, so now time has come to re-think \nbits of it.\n\n\n"}}
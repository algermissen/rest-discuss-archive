{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":124198377,"authorName":"William Martinez Pomares","from":"&quot;William Martinez Pomares&quot; &lt;wmartinez@...&gt;","profile":"willmarpo","replyTo":"SENDER","senderId":"ByHiWUN5MWruRxKCJveElPT6LltTPkt-NKnRdIW9bEe3YtXLKehOHiAy42yNQMM6wrVqfWFvp1pssPhDCNZ8fTFFSYLj4BBtbZWFqOsktRBPpCCFMrlRNQKC","spamInfo":{"isSpam":false,"reason":"6"},"subject":"Re: Credit Cards, Transactions, and REST","postDate":"1254692520","msgId":13673,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGhhYjRyOCtvdTZwQGVHcm91cHMuY29tPg==","inReplyToHeader":"PDRBQzYwMkRGLjEwMTA1MDNAcmVkaGF0LmNvbT4="},"prevInTopic":13664,"nextInTopic":13679,"prevInTime":13672,"nextInTime":13674,"topicId":13472,"numMessagesInTopic":21,"msgSnippet":"Hello Bill. I would not tell you you are breaking REST constrains, but I would like to check on some notes. 1. The idea of the stateless server is an easy one.","rawEmail":"Return-Path: &lt;wmartinez@...&gt;\r\nX-Sender: wmartinez@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 13499 invoked from network); 4 Oct 2009 21:42:10 -0000\r\nX-Received: from unknown (98.137.34.46)\n  by m8.grp.re1.yahoo.com with QMQP; 4 Oct 2009 21:42:10 -0000\r\nX-Received: from unknown (HELO n38b.bullet.mail.sp1.yahoo.com) (66.163.168.152)\n  by mta3.grp.sp2.yahoo.com with SMTP; 4 Oct 2009 21:42:10 -0000\r\nX-Received: from [69.147.65.149] by n38.bullet.mail.sp1.yahoo.com with NNFMP; 04 Oct 2009 21:42:01 -0000\r\nX-Received: from [98.137.34.72] by t9.bullet.mail.sp1.yahoo.com with NNFMP; 04 Oct 2009 21:42:01 -0000\r\nDate: Sun, 04 Oct 2009 21:42:00 -0000\r\nTo: rest-discuss@yahoogroups.com\r\nMessage-ID: &lt;hab4r8+ou6p@...&gt;\r\nIn-Reply-To: &lt;4AC602DF.1010503@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;ISO-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-Yahoo-Newman-Property: groups-compose\r\nX-eGroups-Msg-Info: 1:6:0:0:0\r\nFrom: &quot;William Martinez Pomares&quot; &lt;wmartinez@...&gt;\r\nSubject: Re: Credit Cards, Transactions, and REST\r\nX-Yahoo-Group-Post: member; u=124198377; y=nvfRIIE69vz8LNqauAkIHIC4_4zpm4B3H-i_WtsECbyWOMeu\r\nX-Yahoo-Profile: willmarpo\r\n\r\nHello Bill.\n\nI would not tell you you are breaking REST constrains, but I w=\r\nould like to check on some notes.\n\n1. The idea of the stateless server is a=\r\nn easy one. As a distributed system, you may have one or more servers that =\r\nshould be able to respond to any client. The request from that client may b=\r\ne the first one of an application sequence, or the 10th, you have to serve =\r\nit with no memory of the other 9. In this way, you can add or remove server=\r\ns with no problem to clients.\n\n2. Now, resources are in the cloud. That mea=\r\nns we cannot assume a resource is IN one particular server. Any server we c=\r\nontact will have to use the same resource. This is very difficult part of i=\r\nmplementation, since you may need to implement duplication of information a=\r\nnd fail overs. But that is totally unknown by client.\n\n3. On, particular, t=\r\nwo phase commit. For this, I assume there are two different data sources, a=\r\nnd you can commit to each one separately, but when a transaction involves i=\r\nndividual transactions at each source, then you use the famous two phase co=\r\nmmit. Each source is a participant, right?\n\n4. Ok, on to your proposal. One=\r\n server dedicated to the management of transactions, given we need to send =\r\nto it, manually, all the transaction steps and actions, may suffer some sca=\r\nlability problems.\nOn the other hand you have the client that needs to do a=\r\nll that processing to commit the transaction. \n\nMy feeling is that exposing=\r\n the data entities as resources, and leaving to the client all the commit p=\r\nrocessing, is exposing too much the application detail. May not break REST,=\r\n but adds unnecessary complexity.\n\nNow, the two phase commit assumes we hav=\r\ne two sources, and you depict them as the airline resource and the hotel ro=\r\nom resource. It is them implied that both are like databases, even more, se=\r\nparated database engines. And, your client will have to drive the transacti=\r\non management to change data in both and then to commit. That is implicitly=\r\n forcing the concepts of a resource, but still it sounds like REST. \n\nSo fa=\r\nr, so good. Now, my question would be: should I need to do all that to actu=\r\nally reserve a package using REST?  Well, to imagine how would I do it, I&#39;d=\r\n actually follow an online reservation workflow and see what happens:\na. I =\r\nenter and search for a flight. System returns a list of flights and I selec=\r\nt one. At this time a draft reservation is created with my flight in it. (T=\r\nhink a PUT of the empty reservation followed by a POST of the flight).\nb. T=\r\nhen the system offers me to add a hotel reservation, and from the provided =\r\nlist I select one too. That is added to my draft reservation (another POST)=\r\n.\nc. Finally, I add my credit card information and post a confirmation (Ano=\r\nther POST).\n\nThis last action is served by server number 5 of 10 currently =\r\nserving. That server 5 needs to complete the POST, and if unable, it will r=\r\neturn an error to the client. Well, that server uses the draft reservation =\r\nresource information to call a transaction manager to commit all changes. I=\r\nf it fails, server 5 returns the error. That is totally opaque to the clien=\r\nt, which only confirms and receives a yes or no to that request. Depending =\r\non that response, the client retries, updates the selection of flights or h=\r\notel and confirms again, or even desists and eliminates the reservation. Si=\r\nmple, ha.\n\nThe difference in this process is that client is freed from know=\r\ning the transaction is happening. Resources are just that, no databases nor=\r\n tables that need transactions and the client doesn&#39;t have to  choose the u=\r\nse of single or two phase commits. You can scale since you can change the n=\r\number of servers or transaction managers without touching the client. AND, =\r\neach client interaction leaves the system in a stable state. Actually, this=\r\n can be RESTFull too!.\n\nSo, if we can hide the complexity of the transactio=\r\nn, why do we need to expose that complexity to the client? I may do it if t=\r\nhat brings some benefit. My question will then be, which benefits will I fo=\r\nund from one implementation to the other one, or why one of them is not sui=\r\ntable for some particular business case.\n\nCheers.\n\nWilliam Martinez Pomares=\r\n.\n\n\n--- In rest-discuss@yahoogroups.com, Bill Burke &lt;bburke@...&gt; wrote:\n&gt;\n&gt;=\r\n \n&gt; \n&gt; Kristian Nordal wrote:\n&gt; &gt; Hi,\n&gt; &gt; \n&gt; &gt; On Oct 2, 2009, at 12:25 AM,=\r\n Bediako George wrote:\n&gt; &gt; \n&gt; &gt;&gt;\n&gt; &gt;&gt;\n&gt; &gt;&gt; Hullo Benjamin,\n&gt; &gt;&gt;\n&gt; &gt;&gt; I must=\r\n admit I am having some trouble understanding the distinction \n&gt; &gt;&gt; you mak=\r\ne between server state and application state.  In principal I \n&gt; &gt;&gt; get the=\r\n theoretical difference, but I think the examples you give \n&gt; &gt;&gt; don&#39;t nece=\r\nssarily illustrate the point, and in one case confuses me.\n&gt; &gt; \n&gt; &gt; I&#39;m als=\r\no struggling with the difference between application state and \n&gt; &gt; server =\r\nstate (which I assume is the same as &quot;resource state&quot;). Can \n&gt; &gt; someone po=\r\nint me to a good definition of &quot;application state&quot;?\n&gt; &gt; \n&gt; &gt; Will some kind=\r\ns of state never stop being &quot;application state&quot;, no matter \n&gt; &gt; how or wher=\r\ne it&#39;s stored? If I were to move for instance typical session \n&gt; &gt; state in=\r\nto it&#39;s own resources, and treat those resources as any regular \n&gt; &gt; resour=\r\nce in my application - will those resources for some definitions \n&gt; &gt; of st=\r\nate still be application state (and a violation of the stateless \n&gt; &gt; const=\r\nraint)? Or does the fact that I&#39;ve re-modelled it as resources make \n&gt; &gt; it=\r\n resource state?\n&gt; &gt; \n&gt; \n&gt; Yeah, somebody will have to explain to me why (o=\r\nr if) the Reservation \n&gt; example I gave breaks the stateless constraint of =\r\nREST.  Where I think \n&gt; it doesn&#39;t break the constraint is that instead of =\r\nstoring a specific \n&gt; &quot;view&quot; of a resource for a specific client (like the =\r\nRichardson/Ruby \n&gt; O&#39;Reilly book example on transactions), the state change=\r\n is modeled as a \n&gt; resource in and of itself.  A Reservation still has a l=\r\not of meaning to \n&gt; clients other than the Travel Agent.\n&gt; \n&gt; Also, whether=\r\n or not the Reservation has been fulfilled is a valid state \n&gt; of the resou=\r\nrce.  Just because I chose to model that state with a \n&gt; specific media typ=\r\ne (a generic transactional one) shouldn&#39;t matter IMO \n&gt; as its an implement=\r\nation detail.\n&gt; \n&gt; \n&gt; -- \n&gt; Bill Burke\n&gt; JBoss, a division of Red Hat\n&gt; htt=\r\np://bill.burkecentral.com\n&gt;\n\n\n\n"}}
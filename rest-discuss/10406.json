{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":147780944,"authorName":"Aristotle Pagaltzis","from":"Aristotle Pagaltzis &lt;pagaltzis@...&gt;","profile":"a22pag","replyTo":"SENDER","senderId":"YfEIRYgo3rZzNrcnWyYLnqTELkMEjQXjTdXQ-I26xrYIicvAGiZwmTvU7ShckeNJVvQ-PUSpbLcwlykibDhKHkF2VyYv5Age1ad_A0Y","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: Is PHP more RESTful than J2EE, Django or Rails?","postDate":"1203255134","msgId":10406,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMDgwMjE3MTMzMjE0LkdBMTIzODhAa2xhbmdyYXVtPg==","inReplyToHeader":"PDIwMDgwMjEwMDI1NzMzLkdCMjE4MzVAaGFycG8ubGFpdHMudXRleGFzLmVkdT4=","referencesHeader":"PDM0M2VjYjNlMDgwMjA3MTYxNWc2NTM3ODU3YWw0NjE1NWU1M2ViMDE5MjNAbWFpbC5nbWFpbC5jb20+IDw0N0FCRTA4Ni43MDYwM0BhbmNvbmFmYW1pbHkuY29tPiA8MzQzZWNiM2UwODAyMDgwNDA4dzNjZDU4Yzhjczk3MGZiNGI4YjhmZTg2Y2JAbWFpbC5nbWFpbC5jb20+IDw5ZWViZjU3NDA4MDIwODA0NDh1MmU5YzQ5MWNvNmM4ZThkYWM1ZjhiODA2NkBtYWlsLmdtYWlsLmNvbT4gPDM0M2VjYjNlMDgwMjA4MDUwN2s0NzQyMjdlMmlhY2YyMWMzZjk1MGIxYjcyQG1haWwuZ21haWwuY29tPiA8OTI3NDQxYjMwODAyMDgxMTI3dTcxM2ZjMWJhbzNmMTEyZjZiMjljZmUwYTFAbWFpbC5nbWFpbC5jb20+IDwzNDNlY2IzZTA4MDIwODEyMDZ0MWU0ZDNlMDdsZmM0YmI2ZWE3Yjg3ZGY3ZUBtYWlsLmdtYWlsLmNvbT4gPDIwMDgwMjA4MjIwMjE1LkdBMjMwMDBAaGFycG8ubGFpdHMudXRleGFzLmVkdT4gPDIwMDgwMjEwMDE1MzU0LkdMMjM3OThAa2xhbmdyYXVtPiA8MjAwODAyMTAwMjU3MzMuR0IyMTgzNUBoYXJwby5sYWl0cy51dGV4YXMuZWR1Pg=="},"prevInTopic":10382,"nextInTopic":10412,"prevInTime":10405,"nextInTime":10407,"topicId":10356,"numMessagesInTopic":19,"msgSnippet":"... When you built your first PHP app, were you new only to PHP or also to HTTP? I know that when I was new to HTTP, I wrote my Perl CGI scripts in the style","rawEmail":"Return-Path: &lt;pagaltzis@...&gt;\r\nX-Sender: pagaltzis@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 20631 invoked from network); 17 Feb 2008 13:32:21 -0000\r\nX-Received: from unknown (66.218.67.94)\n  by m45.grp.scd.yahoo.com with QMQP; 17 Feb 2008 13:32:21 -0000\r\nX-Received: from unknown (HELO mail.gmx.net) (213.165.64.20)\n  by mta15.grp.scd.yahoo.com with SMTP; 17 Feb 2008 13:32:20 -0000\r\nX-Received: (qmail invoked by alias); 17 Feb 2008 13:32:15 -0000\r\nX-Received: from static-87-79-236-202.netcologne.de (EHLO klangraum) [87.79.236.202]\n  by mail.gmx.net (mp022) with SMTP; 17 Feb 2008 14:32:15 +0100\r\nX-Authenticated: #163624\r\nX-Provags-ID: V01U2FsdGVkX19QXo9MChJQLqgfSSKCdYfGxbgJQtp12CeVm05xiS\n\t92f1FLvmfqoxyK\r\nDate: Sun, 17 Feb 2008 14:32:14 +0100\r\nTo: rest-discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nMessage-ID: &lt;20080217133214.GA12388@klangraum&gt;\r\nMail-Followup-To: rest-discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nReferences: &lt;343ecb3e0802071615g6537857al46155e53eb01923@...&gt; &lt;47ABE086.70603@...&gt; &lt;343ecb3e0802080408w3cd58c8cs970fb4b8b8fe86cb@...&gt; &lt;9eebf5740802080448u2e9c491co6c8e8dac5f8b8066@...&gt; &lt;343ecb3e0802080507k474227e2iacf21c3f950b1b72@...&gt; &lt;927441b30802081127u713fc1bao3f112f6b29cfe0a1@...&gt; &lt;343ecb3e0802081206t1e4d3e07lfc4bb6ea7b87df7e@...&gt; &lt;20080208220215.GA23000@...&gt; &lt;20080210015354.GL23798@klangraum&gt; &lt;20080210025733.GB21835@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=utf-8\r\nContent-Disposition: inline\r\nContent-Transfer-Encoding: 8bit\r\nIn-Reply-To: &lt;20080210025733.GB21835@...&gt;\r\nUser-Agent: Mutt/1.5.17 (2007-11-01)\r\nX-Y-GMX-Trusted: 0\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Aristotle Pagaltzis &lt;pagaltzis@...&gt;\r\nSubject: Re: Is PHP more RESTful than J2EE, Django or Rails?\r\nX-Yahoo-Group-Post: member; u=147780944; y=--gtS5fNIbOmjTGyE26700CmSAwyDTovpmp887Zhm9MR\r\nX-Yahoo-Profile: a22pag\r\n\r\n* Peter Keane &lt;pkeane@...&gt; [2008-02-10 04:00]:\n&gt; On Sun, Feb 10, 2008 at 02:53:54AM +0100, Aristotle Pagaltzis wrote:\n&gt; &gt; Natively PHP leads you toward a style where you structure\n&gt; &gt; your URI space around operations implemented by scripts which\n&gt; &gt; operate on things identified by a database key passed via\n&gt; &gt; query parameter. That???s crystal clear RPC style: you put\n&gt; &gt; the verb in the URI and use app-specific identifiers for your\n&gt; &gt; resources. PHP does not encourage a resource-oriented design\n&gt; &gt; at all.\n&gt; \n&gt; I need to take exception with [that], as your description is\n&gt; nothing like any PHP app I have ever built. Are there bad PHP\n&gt; programs (even widely popular ones) and books that promote bad\n&gt; practices? Yup. I have spent a good bit of time building apps\n&gt; in Struts & Catalyst, but my favorite experiences were with\n&gt; Template::Toolkit, Class::DBI (I suspect I&#39;d use DBIx::Class\n&gt; now), and a simple url dispatcher in mod_perl. While I&#39;d prefer\n&gt; to be working w/ Perl, I have found PHP to be a perfectly\n&gt; suitable way to build clean, stable, resource-oriented apps.\n\nWhen you built your first PHP app, were you new only to PHP or\nalso to HTTP? I know that when I was new to HTTP, I wrote my Perl\nCGI scripts in the style that I outlined above as being what PHP\nleads people to, and I know that many many people new to HTTP\nwrite their first (or, indeed, every) PHP app that way.\n\nNovices don’t go meta as their first official act. They want to\nget something practical done, and they use whatever’s available\nand seems like it will advance them toward that end. If a URI\ndispatcher is not among those things, then they’ll build one only\nif they came to PHP from an environment that taught them why it\nis a good idea to have one. If this is their first HTTP app, they\nhave no such instinct.\n\nSo I stand by my claim that PHP instills the opposite of good\nHTTP design principles in people who are new to HTTP as well as\nPHP. If you had the fortune of prior experience, more power to\nyou, but then you are not the rule.\n\n&gt; &gt; Or you can use a framework and not bother reinventing the URI\n&gt; &gt; dispatcher wheel yet again.\n&gt; \n&gt; Well, the URL dispatcher isn&#39;t so difficult to create, and it\n&gt; happens to be something that I want to do my own way (not\n&gt; Django&#39;s or Catalyst&#39;s or Rail&#39;s). And thankfully for open\n&gt; source code, I get to see how all of those folks do it, so I\n&gt; can glean good ideas.\n\nA regex-to-code map style dispatcher is not difficult to write at\nall, but it’s also not very good in my opinion. I used to think\nit was as good as you’d want, like everyone else does, until I\nencountered Catalyst’s Chained dispatch type.\n\n(For thos who don’t know, basically that lets you break up a URI\nand dispatch the bits left to right to a series of intermediate\ncontroller methods, so you can split out the tasks that are\ncommon to several controller methods, going from the general to\nthe specific. It lets you write extremely DRY code.)\n\nAnother interesting idea is Nevow Object Traversal, although it\nwould need to be couched in sufficient syntactic sugar to make it\nas concise as it is flexible. However, if you want flexible and\npowerful, it’ll be rather hard to beat.\n\nBasically, writing the most trivial and obvious possible\ndispatcher *is* easy (6-lines-of-code easy), but writing one that\ncan actually help you write less code is quite a bit more work;\nwork that I don’t really care to invest and then maintain for all\neternity.\n\n&gt; Frankly, you can write bad code in *any* language and when the\n&gt; only choice is PHP, it is certainly possible to make solid\n&gt; apps.\n\nThat’s not really an argument; short of deliberately obfuscated\nlanguages, you can write solid apps in just about anything. The\nquestion is not whether it can be done; the question is whether\nit’s a good idea.\n\n&gt; I&#39;d actually like to see good practices encouraged in the PHP\n&gt; community rather than have it all written off.\n\nThat’s kind of like saying one would like to see good practices\nencourages in Excel spreadsheet programming, rather than have it\nall written off. A laudable goal, but…\n\nNot that it matters too much either way, anway: it’s never all\ngoing to be written off, no matter what happens. (Which is in\nfact a much stronger incentive for wanting to encourage good\npractices.)\n\nRegards,\n-- \nAristotle Pagaltzis // &lt;http://plasmasturm.org/&gt;\n\n"}}
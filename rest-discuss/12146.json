{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":198897688,"authorName":"Dong Liu","from":"Dong Liu &lt;edongliu@...&gt;","profile":"edonliu","replyTo":"SENDER","senderId":"gbYH2h2QLnnM_QeOTaEfsvNotu2GxQG_yZaxbzfHB-ecM-ePgY0Sop4G0gtfpv_FkE9fuoZLpCArR40iSEP5HTqdngU","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] &quot;Asynchronous&quot; RESTful application","postDate":"1235413653","msgId":12146,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGU3OGJkYmMwMDkwMjIzMTAyN240ODRmZmJiNmc2MWM2NmRlMWEzY2FmYTEwQG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PDEyNzgyNDc4NDQ0ODcwODAxNjAxODM5MDcxNTM3MjQ2MTc2MDgzMS1XZWJtYWlsQG1lLmNvbT4=","referencesHeader":"PDEyNzgyNDc4NDQ0ODcwODAxNjAxODM5MDcxNTM3MjQ2MTc2MDgzMS1XZWJtYWlsQG1lLmNvbT4="},"prevInTopic":12145,"nextInTopic":12147,"prevInTime":12145,"nextInTime":12147,"topicId":12142,"numMessagesInTopic":6,"msgSnippet":"As Jan said, the connection can be closed any time between request-reply pairs in a conversation. This can be done by specify client request Connection: close","rawEmail":"Return-Path: &lt;edongliu@...&gt;\r\nX-Sender: edongliu@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 63328 invoked from network); 23 Feb 2009 18:27:34 -0000\r\nX-Received: from unknown (66.218.67.94)\n  by m43.grp.scd.yahoo.com with QMQP; 23 Feb 2009 18:27:34 -0000\r\nX-Received: from unknown (HELO wa-out-1112.google.com) (209.85.146.177)\n  by mta15.grp.scd.yahoo.com with SMTP; 23 Feb 2009 18:27:34 -0000\r\nX-Received: by wa-out-1112.google.com with SMTP id j4so1184939wah.20\n        for &lt;rest-discuss@yahoogroups.com&gt;; Mon, 23 Feb 2009 10:27:34 -0800 (PST)\r\nMIME-Version: 1.0\r\nX-Received: by 10.115.111.3 with SMTP id o3mr1761800wam.210.1235413653128; Mon, \n\t23 Feb 2009 10:27:33 -0800 (PST)\r\nIn-Reply-To: &lt;127824784448708016018390715372461760831-Webmail@...&gt;\r\nReferences: &lt;127824784448708016018390715372461760831-Webmail@...&gt;\r\nDate: Mon, 23 Feb 2009 12:27:33 -0600\r\nMessage-ID: &lt;e78bdbc00902231027n484ffbb6g61c66de1a3cafa10@...&gt;\r\nTo: Rest List &lt;rest-discuss@yahoogroups.com&gt;\r\nCc: apd486@..., Jan Algermissen &lt;algermissen1971@...&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Dong Liu &lt;edongliu@...&gt;\r\nSubject: Re: [rest-discuss] &quot;Asynchronous&quot; RESTful application\r\nX-Yahoo-Group-Post: member; u=198897688; y=RCEzhxxqHKGXEuVesJ_E-7zVJEUE_eEwLcwkKbYymfxqYA\r\nX-Yahoo-Profile: edonliu\r\n\r\nAs Jan said, the connection can be closed any time between\nrequest-reply pairs in a conversation. This\ncan be done by specify client request Connection: close header or\nserver specific configurations.\n\nFrom the message exchange pattern point of view, what you mean is an\nasync conversation.\nSee http://www.enterpriseintegrationpatterns.com/ramblings/09_correlation.html\nby Gregor for details.\n\nIn implementation, if you do not need a connection for maintaining\nconversation state,\nthen the connection can be closed. However, if you do not want to\nclose that connection for saving open\nconnection time of later messages then you need to use NIO of java in\ngeneral to handle the large number\nof concurrent connections. Grizzly mentioned by Stefan is one option,\nand Jetty is also a good candidate.\nYou can also turn the system&#39;s parameter of max idle time for a TCP\nconnection to limit the number of\nopened connections.\n\nNice to see someone else doing similar stuff as I am currently working on.\n\nCheers,\n\nDong\n\n\nOn Mon, Feb 23, 2009 at 6:57 AM, Jan Algermissen\n&lt;algermissen1971@...&gt; wrote:\n&gt;\n&gt; Hi Adolfo,\n&gt;\n&gt; I am also not entirely sure I completely understand what you ask, but I think you are asking whether the client-server HTTP connection persists after a 202 Response?\n&gt;\n&gt; The HTTP Interaction regarding 202 would be something like this:\n&gt;\n&gt; -&gt; POST /orders\n&gt; &lt;order&gt;&lt;item id=&quot;10&quot;/&gt;&lt;/order&gt;\n&gt;\n&gt; &lt;- 202 Accepted\n&gt; Location /pending-orders/19\n&gt; &lt;order processingStatus=&quot;pending&quot;/&gt;\n&gt;\n&gt; Client then periodically polls /pending-orders/19:\n&gt;\n&gt; -&gt; GET /pending-orders/19\n&gt;\n&gt; &lt;- 200 Ok\n&gt; &lt;order processingStatus=&quot;pending&quot;/&gt;\n&gt;\n&gt; [wait]\n&gt;\n&gt; -&gt; GET /pending-orders/19\n&gt;\n&gt; &lt;- 200 Ok\n&gt; &lt;order processingStatus=&quot;pending&quot;/&gt;\n&gt;\n&gt; [wait]\n&gt;\n&gt; &gt; GET /pending-orders/19\n&gt;\n&gt; &lt;- 301 Moved Permanently\n&gt; Location: /orders/188\n&gt;\n&gt;\n&gt; -&gt; GET /orders/188\n&gt;\n&gt; &lt;- 200 Ok\n&gt; &lt;order id=&quot;188&quot;&gt;&lt;item id=&quot;10&quot;/&gt;&lt;/order&gt;\n&gt;\n&gt; The client or server can close the TCP connection between any of these requests.\n&gt;\n&gt; Does that help?\n&gt;\n&gt; Jan\n&gt;\n&gt; On Monday, February 23, 2009, at 11:39AM, &quot;Stefan Tilkov&quot; &lt;stefan.tilkov@...&gt; wrote:\n&gt; &gt;I&#39;m not entirely sure I understand what you&#39;re asking for, but you\n&gt; &gt;might want to check out Grizzly:\n&gt; &gt;\n&gt; &gt;http://weblogs.java.net/blog/jfarcand/archive/2006/02/grizzly_part_ii.html\n&gt; &gt;\n&gt; &gt;Stefan\n&gt; &gt;--\n&gt; &gt;Stefan Tilkov, http://www.innoq.com/blog/st/\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;On 21.02.2009, at 18:23, Adolfo Perez wrote:\n&gt; &gt;\n&gt; &gt;&gt; OK, I&#39;m abusing the term &quot;asynchronous&quot; here but it seems I need to\n&gt; &gt;&gt; in order to describe my problem :).\n&gt; &gt;&gt;\n&gt; &gt;&gt; We have a set of Java applications that take anywhere from 5 min to\n&gt; &gt;&gt; 60 min to execute.\n&gt; &gt;&gt;\n&gt; &gt;&gt; One of the solutions we implemented had the server write the request\n&gt; &gt;&gt; to a database, send a 202 to the client and work the request later\n&gt; &gt;&gt; on a different thread.\n&gt; &gt;&gt;\n&gt; &gt;&gt; The constraint we have is that we are using Jersey and we need to\n&gt; &gt;&gt; take advantage of the load balancing features provided by Apache and\n&gt; &gt;&gt; Tomcat/Jetty, so we end up with a large number of long lasting\n&gt; &gt;&gt; simultaneous connections.\n&gt; &gt;&gt;\n&gt; &gt;&gt; &quot;Asynchronous&quot; approaches I have found are trying to solve a\n&gt; &gt;&gt; different problem. Since a servlet is blocking, a request makes the\n&gt; &gt;&gt; thread wait. The proposed solutions look to release threads back\n&gt; &gt;&gt; into the pool and be made available for other requests not to keep\n&gt; &gt;&gt; it running for a long time.\n&gt; &gt;&gt;\n&gt; &gt;&gt; How do you, in a RESTful way and using standard load balancing\n&gt; &gt;&gt; techniques (i.e. those provided by Apache + Tomcat/Jetty), work\n&gt; &gt;&gt; requests &quot;asynchronously&quot; so that you can release client connections?\n&gt; &gt;&gt;\n&gt; &gt;&gt; +Adolfo\n&gt; &gt;&gt;\n&gt; &gt;&gt;\n&gt; &gt;&gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;------------------------------------\n&gt; &gt;\n&gt; &gt;Yahoo! Groups Links\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; \n\n"}}
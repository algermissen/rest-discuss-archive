{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":289191104,"authorName":"Jan Algermissen","from":"Jan Algermissen &lt;algermissen1971@...&gt;","profile":"algermissen1971","replyTo":"SENDER","senderId":"-AU1-b8on7L-TNyV5Js60TJkZAcphV2gG8lM9j8DSeJkXG73mATahE9TzW-xi--6x4j_hDMQm0ecMp02f1Y1yEsFhDCdTy3m1Wue3ib5AIk","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Restful Approaches to some Enterprise Integration Problems","postDate":"1277919490","msgId":15762,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDBGNjQ3NEZFLUI3NTItNDg4QS05Nzk4LUQzODRBQzY2RjFGNkBtYWMuY29tPg==","inReplyToHeader":"PDE0NzgzNC4zNzA1LnFtQHdlYjExMDcxNC5tYWlsLmdxMS55YWhvby5jb20+","referencesHeader":"PDE0NzgzNC4zNzA1LnFtQHdlYjExMDcxNC5tYWlsLmdxMS55YWhvby5jb20+"},"prevInTopic":15761,"nextInTopic":15763,"prevInTime":15761,"nextInTime":15763,"topicId":15761,"numMessagesInTopic":45,"msgSnippet":"Bryan, ... HTTP solves this problem by way of the concept of idempotent methods. You can call a GET, PUT or DELETE any number of times until the server","rawEmail":"Return-Path: &lt;algermissen1971@...&gt;\r\nX-Sender: algermissen1971@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 20754 invoked from network); 30 Jun 2010 17:38:14 -0000\r\nX-Received: from unknown (98.137.34.46)\n  by m10.grp.re1.yahoo.com with QMQP; 30 Jun 2010 17:38:14 -0000\r\nX-Received: from unknown (HELO asmtpout025.mac.com) (17.148.16.100)\n  by mta3.grp.sp2.yahoo.com with SMTP; 30 Jun 2010 17:38:14 -0000\r\nMIME-version: 1.0\r\nContent-transfer-encoding: 7BIT\r\nContent-type: text/plain; charset=us-ascii\r\nX-Received: from [10.18.18.59] ([194.146.213.16])\n by asmtp025.mac.com (Sun Java(tm) System Messaging Server 6.3-8.01 (built Dec\n 16 2008; 32bit)) with ESMTPSA id &lt;0L4U00MBH8ZN8R80@...&gt; for\n rest-discuss@yahoogroups.com; Wed, 30 Jun 2010 10:38:14 -0700 (PDT)\r\nX-Proofpoint-Spam-Details: rule=notspam policy=default score=0 spamscore=0\n ipscore=0 phishscore=0 bulkscore=0 adultscore=0 classifier=spam adjust=0\n reason=mlx engine=6.0.2-1004200000 definitions=main-1006300098\r\nX-Proofpoint-Virus-Version: vendor=fsecure\n engine=1.12.8161:2.4.5,1.2.40,4.0.166\n definitions=2010-06-29_03:2010-02-06,2010-06-29,2010-06-30 signatures=0\r\nIn-reply-to: &lt;147834.3705.qm@...&gt;\r\nDate: Wed, 30 Jun 2010 19:38:10 +0200\r\nCc: REST Discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nMessage-id: &lt;0F6474FE-B752-488A-9798-D384AC66F1F6@...&gt;\r\nReferences: &lt;147834.3705.qm@...&gt;\r\nTo: Bryan Taylor &lt;bryan_w_taylor@...&gt;\r\nX-Mailer: Apple Mail (2.1078)\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Jan Algermissen &lt;algermissen1971@...&gt;\r\nSubject: Re: [rest-discuss] Restful Approaches to some Enterprise Integration\n Problems\r\nX-Yahoo-Group-Post: member; u=289191104; y=zpud3wEDDF7gwC0b_Ed3z1FxZPRYbCrs_4x_Ki32fbUHaBs1niRNCRey\r\nX-Yahoo-Profile: algermissen1971\r\n\r\nBryan,\n\nOn Jun 30, 2010, at 6:41 PM, Bryan Taylor wrote:\n\n&gt; My company is examining adopting a RESTful model to its enterprise architecture. Part of the discussion comes down to finding RESTful idioms, standards, and/or tools to apply to certain recurring enterprise integration problems.\n&gt; \n&gt; Specifically, we are trying to find RESTful solutions to:\n&gt; \n&gt; 1) Guaranteed Delivery - we need a paradigm to follow so that one service can transfer a sequence of resource representations to another reliably even though both services and the network suffer temporary unreliability\n\nHTTP solves this problem by way of the concept of idempotent methods. You can call a GET, PUT or DELETE any number of times until the server responds. IOW: keep trying until you have an answer from the server.\n\nPOST is non idempotent[1] but there are ways to work around this, for example by including request IDs in the POST. The server needs to keep track of the IDs it has seen for some time. This allows the server to detect re-postings\n\n[1] That is why your bbrowser ask you for confirmation upon you re-POSTING some request.\n\n&gt; \n&gt; 2) Distributed Transactions - we need a paradigm to allow state changes on multiple services to happen so that the changes succeed or fail as a unit\n\nWhy do you need distributed transactions? The usual (and orthogonal to REST-or-not) answer is that you rather do those things with compensations anyway. 2PC is an illusion.\n\n&gt; \n&gt; 3) Long running operations - we need asynchronous invocations between services and a mechanism for the invoking service to find out when the invoked service is done given that this work may take indefinitely long\n\n\nUse polling. The HTTP response code for this kind of stuff is 202 Acepted.\n\n\n&gt; \n&gt; 4) Workflow Orchestration - we would like to have orchestration services that define business processes via standardized representations (eg BPMN), then execute instances of those processes and build up an process instance execution data resource by interacting with other RESTful resources using message exchange patterns that could specify the above behaviors.\n\nOne way to address this is to have a coordinating service (see Process Manager Pattern of Hohpe&#39;s Enterprise Integration Patterns). Consider for example, how a trouble ticketing system coordinates the various human or machine clients. The Trouble Ticket itself is the instance execution data resource. My experience is that you usually have these data resource in legacy applications anyway (contracts in a contract management system, orders in the order management systems etc.). I suggest you use those.\n\nIf you want to work with something like BPMN and generation, my idea would be to generate client side code from the model because it is in a RESTful system really the *client component* (aka user agent) that determines the application.\n\n\n&gt; \n&gt; I&#39;m sure that some of these topics have been discussed to death. I&#39;m not looking to repeat the details in one thread, but just wondering if people can give me quick dump of the conventional wisdom\n\nI am afraid you won&#39;t be able to skip the learning curve :-) The quick dump would be quite a large dump :-)\n\n&gt; as to how to approach such problems, and/or point me to solutions (or alternatives) that they consider consistent with RESTful approaches.\n&gt; \n&gt; I found the Rest-* effort at http://www.jboss.org/reststar . The name of this project tweaks me, but some of the specs under it seem relevant.\n\nRoy on REST-*: http://tech.groups.yahoo.com/group/rest-discuss/message/13266  (&#39;nuf said :-)\n\n&gt; Are there others? Are these problems that the community sees value in solving through standards and tooling?\n\nAll the standards are there (HTTP 1.1 and friends) execpt for the media types. These are where your modeling effort should (erm...must) go. \n\n\n\nJan\n\nP.S. I&#39;ll leave it at this and await your follow-up questions\n\n\n\n\n&gt; \n&gt; \n&gt; \n&gt; \n&gt; \n&gt; \n&gt; ------------------------------------\n&gt; \n&gt; Yahoo! Groups Links\n&gt; \n&gt; \n&gt; \n\n-----------------------------------\n Jan Algermissen, Consultant\n NORD Software Consulting\n\n Mail: algermissen@...\n Blog: http://www.nordsc.com/blog/\n Work: http://www.nordsc.com/\n-----------------------------------\n\n\n\n\n\n"}}
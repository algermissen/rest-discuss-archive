{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":383005568,"authorName":"scameron02","from":"&quot;scameron02&quot; &lt;scott.cameron@...&gt;","profile":"scameron02","replyTo":"SENDER","senderId":"l1livMHJIUSNEmAx0BUbaS9ZJa02fy4OVrmzK09hQFeYRBnkSZquWeS0AcoNav_TSzSkNwGSh13EWn6_ONSV4yWLHFpRjbcYA5Xs","spamInfo":{"isSpam":false,"reason":"6"},"subject":"Re: RESTful batch transactions a red herring.","postDate":"1237395547","msgId":12228,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGdwcjk4citoYmk2QGVHcm91cHMuY29tPg==","inReplyToHeader":"PDIwMDkwMzEyMDUzNTUyLjMwM2M0YzE5LmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4="},"prevInTopic":12220,"nextInTopic":12231,"prevInTime":12227,"nextInTime":12229,"topicId":12213,"numMessagesInTopic":15,"msgSnippet":"... GET ... What about the (so far) less common cases outside the Web, such as Enterprise-level distributed applications?  There are certainly many examples in","rawEmail":"Return-Path: &lt;scott.cameron@...&gt;\r\nX-Sender: scott.cameron@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 94333 invoked from network); 18 Mar 2009 16:59:08 -0000\r\nX-Received: from unknown (69.147.108.202)\n  by m8.grp.re1.yahoo.com with QMQP; 18 Mar 2009 16:59:08 -0000\r\nX-Received: from unknown (HELO n13d.bullet.sp1.yahoo.com) (69.147.64.236)\n  by mta3.grp.re1.yahoo.com with SMTP; 18 Mar 2009 16:59:07 -0000\r\nX-Received: from [69.147.65.150] by n13.bullet.sp1.yahoo.com with NNFMP; 18 Mar 2009 16:59:07 -0000\r\nX-Received: from [98.137.34.73] by t7.bullet.mail.sp1.yahoo.com with NNFMP; 18 Mar 2009 16:59:07 -0000\r\nDate: Wed, 18 Mar 2009 16:59:07 -0000\r\nTo: rest-discuss@yahoogroups.com\r\nMessage-ID: &lt;gpr98r+hbi6@...&gt;\r\nIn-Reply-To: &lt;20090312053552.303c4c19.eric@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: multipart/alternative; boundary=&quot;6-7838936926-8533323228=:2&quot;\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-Yahoo-Newman-Property: groups-compose\r\nX-eGroups-Msg-Info: 1:6:0:0:0\r\nFrom: &quot;scameron02&quot; &lt;scott.cameron@...&gt;\r\nSubject: Re: RESTful batch transactions a red herring.\r\nX-Yahoo-Group-Post: member; u=383005568; y=klIbZplYN7aI4-wgK-pZS9qFvNsAHvUYxnl9em5F72iLX-VgDA\r\nX-Yahoo-Profile: scameron02\r\n\r\n\r\n--6-7838936926-8533323228=:2\r\nContent-Type: text/plain; charset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n\n--- In rest-discuss@yahoogroups.com, &quot;Eric J. Bowman&quot; &lt;eric@...&gt; wrote:\n&gt;\n=\r\n&gt; In the common case of the Web, DELETE traffic is a tiny fraction of\nGET\n&gt;=\r\n traffic.  So it just doesn&#39;t _matter_ that some sort of client logic\n&gt; lik=\r\ne my HTML form can accomplish the same objective as discrete DELETE\n&gt; reque=\r\nsts in one round trip, in terms of bandwidth.  Splitting hairs.\n&gt; Same with=\r\n batch updates.  The bandwidth conserved by caching GET\n&gt; traffic is an ord=\r\ner of magnitude greater than that consumed by fringe\n&gt; cases where bandwidt=\r\nh could be saved by batching multiple DELETE (or\n&gt; PUT or POST) requests.  =\r\nREST optimizes for GET, not batch processing.\n&gt;\n\nWhat about the (so far) le=\r\nss common cases outside the Web, such as\nEnterprise-level distributed appli=\r\ncations?  There are certainly many\nexamples in that domain where high-volum=\r\ne writing (create/update/delete)\nis a requirement and efficiency is key (as=\r\n is atomicity).\n\nAre you suggesting that as an architecture style in its &quot;p=\r\nure&quot; form,\nREST is only appropriate for the common case of read-heavy Web\na=\r\npplications?  This seems to sell the style short.  Certainly, in its\ncurren=\r\nt form it does not directly address some of the problems\nassociated with wr=\r\nite-intensive applications.  But the fundamental\nconstraints still hold val=\r\nue for these apps, and so far I haven&#39;t seen\nany better alternative for bui=\r\nlding general purpose distibuted systems.\n\nIs the style so set in stone tha=\r\nt new applications for it shouldn&#39;t be\nexplored, even if it means looking a=\r\nt things from a slightly unorthodox\nangle?  Who knows, maybe it turns out t=\r\nhat it is possible to solve some\nof these problem in a way that is at least=\r\n consistent with the\nfundamental constraints of REST.  It seems to me that =\r\nthis forum is\nexactly the right place to explore that kind of thing.\n\nCheer=\r\ns,\nscott\n\n\r\n--6-7838936926-8533323228=:2\r\nContent-Type: text/html; charset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;font face=3D&quot;georgia&quot; size=3D&quot;2&quot;&gt;&lt;br&gt;--- In rest-discuss@yahoogroups.com, =\r\n&quot;Eric J. Bowman&quot; &lt;eric@...&gt; wrote:&lt;br&gt;&gt; &lt;br&gt;&gt; In the common cas=\r\ne of the Web, DELETE traffic is a tiny fraction of GET&lt;br&gt;&gt; traffic.  So=\r\n it just doesn&#39;t _matter_ that some sort of client logic&lt;br&gt;&gt; like my HT=\r\nML form can accomplish the same objective as discrete DELETE&lt;br&gt;&gt; reques=\r\nts in one round trip, in terms of bandwidth.  Splitting hairs.&lt;br&gt;&gt; Same=\r\n with batch updates.  The bandwidth conserved by caching GET&lt;br&gt;&gt; traffi=\r\nc is an order of magnitude greater than that consumed by fringe&lt;br&gt;&gt; cas=\r\nes where bandwidth could be saved by batching multiple DELETE (or&lt;br&gt;&gt; P=\r\nUT or POST) requests.  REST optimizes for GET, not batch processing.&lt;br&gt;&gt=\r\n; &lt;br&gt;&lt;br&gt;What about the (so far) less common cases outside the Web, such a=\r\ns Enterprise-level distributed applications?&nbsp; There are certainly many=\r\n examples in that domain where high-volume writing (create/update/delete) i=\r\ns a requirement and efficiency is key (as is atomicity).&lt;br&gt;&lt;br&gt;Are you sug=\r\ngesting that as an architecture style in its &quot;pure&quot; form, REST is only appr=\r\nopriate for the common case of read-heavy Web applications?&nbsp; This seem=\r\ns to sell the style short.&nbsp; Certainly, in its current form it does not=\r\n directly address some of the problems associated with write-intensive appl=\r\nications.&nbsp; But the fundamental constraints still hold value for these =\r\napps, and so far I haven&#39;t seen any better alternative for building general=\r\n purpose distibuted systems.&lt;br&gt;&lt;br&gt;Is the style so set in stone that new a=\r\npplications for it shouldn&#39;t be explored, even if it means looking at thing=\r\ns from a slightly unorthodox angle?&nbsp; Who knows, maybe it turns out tha=\r\nt it is possible to solve some of these problem in a way that is at least c=\r\nonsistent with the fundamental constraints of REST.&nbsp; It seems to me th=\r\nat this forum is exactly the right place to explore that kind of thing.&lt;br&gt;=\r\n&lt;br&gt;Cheers,&lt;br&gt;scott&lt;br&gt;&lt;/font&gt;\n\r\n--6-7838936926-8533323228=:2--\r\n\n"}}
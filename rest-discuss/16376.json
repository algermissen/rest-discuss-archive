{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"yYpFGbfaZy9nOkMN2lEXhqiawu7OBufbxiSHxIYuNppB5MbuueAWIeppoW5ekyqtwZSi6D7Swmcrl5K3uSqSraGkWnA7LHSYH3N4JDwf8A","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Gopher and the Uniform Interface","postDate":"1282613303","msgId":16376,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMTAwODIzMTkyODIzLjQ5NzJlNzcxLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4="},"prevInTopic":0,"nextInTopic":0,"prevInTime":16375,"nextInTime":16377,"topicId":16376,"numMessagesInTopic":1,"msgSnippet":"This discussion of media type identifiers refers to traffic traversing the Internet only. I m feeling all nostalgic for Gopher... the ISP I opened in 1994 had","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 11165 invoked from network); 24 Aug 2010 01:28:33 -0000\r\nX-Received: from unknown (66.196.94.106)\n  by m17.grp.re1.yahoo.com with QMQP; 24 Aug 2010 01:28:33 -0000\r\nX-Received: from unknown (HELO mxout-08.mxes.net) (216.86.168.183)\n  by mta2.grp.re1.yahoo.com with SMTP; 24 Aug 2010 01:28:33 -0000\r\nX-Received: from bigbison (unknown [65.117.211.162])\n\t(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))\n\t(No client certificate requested)\n\tby smtp.mxes.net (Postfix) with ESMTPSA id 0F81F509DA\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Mon, 23 Aug 2010 21:28:19 -0400 (EDT)\r\nDate: Mon, 23 Aug 2010 19:28:23 -0600\r\nTo: rest-discuss@yahoogroups.com\r\nMessage-Id: &lt;20100823192823.4972e771.eric@...&gt;\r\nOrganization: Bison Systems Corporation\r\nX-Mailer: Sylpheed 3.0.3 (GTK+ 2.10.14; i686-pc-mingw32)\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=US-ASCII\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nSubject: Gopher and the Uniform Interface\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\nThis discussion of media type identifiers refers to traffic traversing\nthe Internet only.\n\nI&#39;m feeling all nostalgic for Gopher... the ISP I opened in 1994 had a\ngopherspace to fetch the customer agreement and such as text files for\nprinting.  It took me another couple of months to get httpd and a\nwebsite up and running, despite having started that work well before\nattempting the Gopher (which took all of five minutes to deploy). I\nkilled off my Gopher about a year later.  The state of Gopher affairs\nin 2010 is not good; support was removed from IE 7, and the next\nFirefox release as of this writing kills it off, too.\n\nGopher may be used to instantiate REST, with one big glaring mismatch,\nbut the results are clearly &quot;the REST style&quot; otherwise.  Then we&#39;ll see\nwhat happens if we try to Gopher an Atom system, to prove my point about\nopaque vs. transparent media type identifiers...\n\nMy XBEL blogroll example would be fun to turn into a gopherspace that\nreads the blogroll.xbel file instead of a filesystem; after all, Gopher\nis just a hierarchical collection of annotated links.  Updating the\ndeployed Gopher from one that reads the filesystem, to one that reads\nan XBEL file, is an implementation detail hidden behind a uniform\ninterface.  So, Gopher meets the layered-system constraint.\n\nIdentification of resources?  Check.  Manipulation of resources via\nrepresentation?  Check.  URIs ending in .html aren&#39;t considered to be\nHTML, they&#39;re considered to be whatever media type they&#39;re tagged as,\nso a user agent might be instructed to treat it as raw text or transfer\nit as a binary file.  It&#39;s this distinction that precludes many\nprotocols from instantiating REST, although such protocols may be\nincluded in REST systems to the extent that they&#39;re compliant with the\nuniform interface.\n\n(FTP considers the type to be whatever the host OS has registered for\nthe filename extension.  While it may be included in a REST system to\nthe extent allowed by standard methods, FTP cannot instantiate REST.)\n\nGopher is a stateless client-server protocol.  But, it lacks caching,\nso it can&#39;t fully instantiate REST (client-only caching isn&#39;t the same\nthing as anarchic scalability).  IMO, a REST mismatch like this is not\nas big a deal as a mismatch which goes *against* the style, but there\ncan be no doubt that caching is a constraint -- REST says it is, and\nonly defines one optional constraint, code on demand -- which you can\ndo in Gopher by serving HTML with embedded javascript, btw, provided\nyour client can distinguish a retrieved text representation as HTML.\n\nHypertext constraint?  Check.  Application state is driven by hyperlink\nprotocol headers.  Where Gopher really falls short, is its inability to\ndifferentiate between, say, Atom and HTML over the wire -- both are\neither binary files for transfer, or raw text for display.  Which leaves\nself-descriptive messaging.\n\nGopher defines a limited number of media type identifiers, which\nclients use to select a codec for processing the payload, just like\nHTTP.  This decoupling is what allows clients and servers to evolve\nindependently.  Only those identifiers defined by Gopher are self-\ndescriptive, so only those identifiers are part of Gopher&#39;s uniform\ninterface.  Unless and until the spec changes, it just doesn&#39;t account\nfor serving Atom as Atom or HTML as HTML -- although an Atom feed could\nbe refactored into links-as-protocol-headers.\n\nTo extend Gopher to account for HTML vs. Atom over-the-wire, would\nrequire the introduction of new, custom, unregistered, non-ubiquitous,\nprivate, nonstandard identifiers to point to these ubiquitous media\ntypes instead of &#39;0&#39; for both.  It could be done, but without changing\nthe spec to account for these new identifiers they just can&#39;t be\nconsidered part of the uniform interface of the Gopher protocol, which\ndiscourages such extensions while providing a mechanism for them and\nstressing that the results will only interoperate by chance, not design.\n\nUsing a private identifier that&#39;s only understood by nonstandard\nclients and servers, couples those servers to those clients while\neliminating the possibility of serendipitous re-use by anyone with a\nstandard Gopher client.  That isn&#39;t self-descriptive messaging, that&#39;s\nexactly the sort of library-based API style Roy compares to the\nnetwork-based API REST style in 6.5.1:\n\n&quot;\nA library-based API provides a set of code entry points and associated\nsymbol/parameter sets so that a programmer can use someone else&#39;s code\nto do the dirty work of maintaining the actual interface between like\nsystems, provided that the programmer obeys the architectural and\nlanguage restrictions that come with that code. The assumption is that\nall sides of the communication use the same API, and therefore the\ninternals of the interface are only important to the API developer and\nnot the application developer.\n\n...\n\nWhy is this important? Because it differentiates a system where network\nintermediaries can be effective agents from a system where they can be,\nat most, routers.\n&quot;\n\nSee, were Gopher cacheable, not only would private identifiers restrict\nthe service to nonstandard clients, it would also short-circuit the\nability of intermediaries to participate in the communication beyond\nbeing routers, i.e. the HTTPS effect (tunneling, not encryption).  So\nit is with non-ubiquitous media type identifiers in HTTP -- the\nmessaging is not self-descriptive, because it relies on understanding\nnonstandard implementation details (library-based APIs) instead of\ncommon knowledge (network-based APIs) inherent in ubiquitous media\ntypes.\n\nSo the tradeoffs involved in using Gopher instead of HTTP to serve up\nmy blogroll are easy to identify; the useful knowledge REST gives me is\nwhat informs my choice of protocol.  I&#39;m not willing to sacrifice the\nanarchic scalability of HTTP caching, or the improved serendipitous re-\nuse of serving a list of annotated links as payload as opposed to\nheaders.  Nor am I willing to release an application-specific client\nlibrary that understands unregistered identifiers and couple my service\nto it, to use Gopher.\n\nMy choice of the ubiquitous XBEL media type is RESTful, but there&#39;s no\nself-descriptive-messaging-compliant way to serve it over HTTP at this\ntime.  Which is a lot less of an issue than using a custom media type\nidentifier, particularly an unregistered one, to refer to some media\ntype nobody has ever heard of (vs. XBEL, which has specific handling\nwidely implemented by many browsers and online bookmarking services).\n\nServing ubiquitous XBEL as ubiquitous application/xml is also not the\nanswer.  XBEL has a specific processing model that&#39;s widely implemented,\nand is not reflected by using application/xml as an identifier.  No\nother XML language triggers this processing model, so XBEL is crying\nout for a unique differentiator to reflect its real-world handling.\n\nThe only way to RESTfully serve XBEL is to use a media type identifier\nwhich engages that codec.  Once a registered identifier comes along,\nXBEL joins HTML, Atom, SVG and other existing markup languages capable\nof driving a hypertext API, as part of HTTP&#39;s uniform interface.  Until\nthen, despite being a ubiquitous media type, serving XBEL is a REST\nmismatch.\n\nSee RFC 1436 (specifically section 4) for an example of an almost-\nRESTful protocol with a similar uniform interface for defining\nnetwork-based APIs rather than library-based APIs...  Registered\nidentifiers pointing to obscure, application-specific processing models\nmay meet the self-descriptive messaging constraint, but they don&#39;t\nmeet the requirement of standardized types.  On the Internet, only\nthose media types with widely-deployed processing models and registered\nidentifiers are part of HTTP&#39;s uniform interface, just as with Gopher,\nonly 0-9, g, I and T are part of the uniform interface.\n\nSuch types continue to evolve.  Hopefully, application/xbel+xml will\neventually be accepted into the IANA standards tree.  Aside from the\nstandards body, XBEL meets all the requirements.  But in the here-and-\nnow world of today, serving XBEL is unequivocally a REST mismatch.\n\nThe goal of REST development (like RFC 1436.4) is to refactor your\nsystem such that it can utilize the uniform interface provided by your\nprotocol of choice.  If your starting position is to define a custom\nmedia type to send over the Internet, you aren&#39;t following the REST\nstyle.  Not in Gopher, and not in HTTP.\n\n&quot;\nA network-based API is an on-the-wire syntax, with defined semantics,\nfor application interactions. A network-based API does not place any\nrestrictions on the application code aside from the need to read/write\nto the network, but does place restrictions on the set of semantics\nthat can be effectively communicated across the interface.\n&quot;\n\nThe uniform interface restriction, is that the semantics of an HTTP\ninteraction be transparently defined by ubiquitous media types, via the\nmechanism of the IANA registry of media type identifiers.  Anything-\ngoes, opaque strings do not effectively communicate semantics across\nthe interface.\n\n-Eric\n\n"}}
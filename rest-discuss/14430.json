{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"1Rcy2hCnxfWkzWZuBek8Z5__yMall4UYptzYL2vzHmrlCw7RS670FCghSjaBbJ1o1t3WPlGKVbki6Ce80wUGEgugDzZahh7oJfRsNfk5Og","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: Methods and the uniform interface [was: Re: [rest-discuss] REST  isn&#39;t hard to learn, it&#39;s just taught wrong.","postDate":"1262123795","msgId":14430,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMDkxMjI5MTQ1NjM1LmFhY2EwZDUwLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","inReplyToHeader":"PDM5MTVjNjlkMDkxMjI5MDkxNnk2ZDQ2NmYxM205YTllY2I0NThmMDVmMDM3QG1haWwuZ21haWwuY29tPg==","referencesHeader":"PDQ5OTg4ODQ0MDkxMjIxMDYwN3EzMTdlMmQ4aTQ3OWEzNjU2ZjQxMjViZWFAbWFpbC5nbWFpbC5jb20+CTwyMDA5MTIyMTE5MzY0MC45YzY5M2E5YS5lcmljQGJpc29uc3lzdGVtcy5uZXQ+CTw0QjMxMDBBNC4xMDUwMDAxQGdtYWlsLmNvbT4JPDIwMDkxMjIzMTMxNTEwLjgzYzNiODcyLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPDRCMzJCQkFBLjIwODA5MDdAZ21haWwuY29tPgk8MjAwOTEyMjMxODMzNDkuY2Y5MmNiOTEuZXJpY0BiaXNvbnN5c3RlbXMubmV0Pgk8RDkwNzY3MzctRTNDRC00NERFLUFGQUItNTA2NDU4MjAyN0MxQHN1YmJ1Lm9yZz4JPDIwMDkxMjIzMTk1MjU4LmMwYTk5ZTExLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPDJmYTU1NDQ3MDkxMjI0MDQwNGszYzY3YmJmY29mNzdkODEyOTg5ODNkYWJmQG1haWwuZ21haWwuY29tPgk8MjAwOTEyMjQxODE3MDkuMDk2OTVmMzguZXJpY0BiaXNvbnN5c3RlbXMubmV0Pgk8MzkxNWM2OWQwOTEyMjkwOTE2eTZkNDY2ZjEzbTlhOWVjYjQ1OGYwNWYwMzdAbWFpbC5nbWFpbC5jb20+"},"prevInTopic":14428,"nextInTopic":14431,"prevInTime":14429,"nextInTime":14431,"topicId":14293,"numMessagesInTopic":37,"msgSnippet":"... Roy s statement applies to any request method.  Your client doesn t even get to decide what GET means.  Remember the brouhaha with Google Web Accelerator","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 25389 invoked from network); 29 Dec 2009 21:57:01 -0000\r\nX-Received: from unknown (66.196.94.107)\n  by m5.grp.sp2.yahoo.com with QMQP; 29 Dec 2009 21:57:01 -0000\r\nX-Received: from unknown (HELO mxout-08.mxes.net) (216.86.168.183)\n  by mta3.grp.re1.yahoo.com with SMTP; 29 Dec 2009 21:57:01 -0000\r\nX-Received: from bigbison (unknown [65.117.211.162])\n\t(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))\n\t(No client certificate requested)\n\tby smtp.mxes.net (Postfix) with ESMTPSA id 69699509B4;\n\tTue, 29 Dec 2009 16:56:53 -0500 (EST)\r\nDate: Tue, 29 Dec 2009 14:56:35 -0700\r\nTo: Will Hartung &lt;willh@...&gt;\r\nCc: =?ISO-8859-1?Q?Ant=F3nio?= Mota &lt;amsmota@...&gt;, Subbu Allamaraju\n &lt;subbu@...&gt;, Roger Gonzalez &lt;roger.gonzalez@...&gt;, Tim Williams\n &lt;williamstw@...&gt;, mike amundsen &lt;mamund@...&gt;, berend@...,\n rest-discuss@yahoogroups.com\r\nMessage-Id: &lt;20091229145635.aaca0d50.eric@...&gt;\r\nIn-Reply-To: &lt;3915c69d0912290916y6d466f13m9a9ecb458f05f037@...&gt;\r\nReferences: &lt;499888440912210607q317e2d8i479a3656f4125bea@...&gt;\n\t&lt;20091221193640.9c693a9a.eric@...&gt;\n\t&lt;4B3100A4.1050001@...&gt;\n\t&lt;20091223131510.83c3b872.eric@...&gt;\n\t&lt;4B32BBAA.2080907@...&gt;\n\t&lt;20091223183349.cf92cb91.eric@...&gt;\n\t&lt;D9076737-E3CD-44DE-AFAB-5064582027C1@...&gt;\n\t&lt;20091223195258.c0a99e11.eric@...&gt;\n\t&lt;2fa554470912240404k3c67bbfcof77d81298983dabf@...&gt;\n\t&lt;20091224181709.09695f38.eric@...&gt;\n\t&lt;3915c69d0912290916y6d466f13m9a9ecb458f05f037@...&gt;\r\nOrganization: Bison Systems Corporation\r\nX-Mailer: Sylpheed 2.6.0 (GTK+ 2.10.14; i686-pc-mingw32)\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=US-ASCII\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nSubject: Re: Methods and the uniform interface [was: Re: [rest-discuss] REST\n  isn&#39;t hard to learn, it&#39;s just taught wrong.\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\nWill Hartung wrote:\n&gt;\n&gt; Roy wrote:\n&gt; &gt; \n&gt; &gt; You don&#39;t get to decide what POST means -- that is decided by the\n&gt; &gt; resource. Its purpose is supposed to be described in the same\n&gt; &gt; context in which you found the URI that you are posting to.\n&gt; &gt; Presumably, that context (a hypertext representation in some media\n&gt; &gt; type understood by your client) tells you or your agent what to\n&gt; &gt; expect from the POST using some combination of standard\n&gt; &gt; elements/relations and human-readable text. The HTTP response will\n&gt; &gt; tell you what happened as a result... \n&gt; &gt;\n&gt; \n&gt; The confusion, specifically in regards to this statement and\n&gt; contrasting it with DELETE, is that POST is a much more &quot;wide open&quot;\n&gt; verb than DELETE. POST has an expectation of a media type argument,\n&gt; and has different behaviors. DELETE has none of these. There is no\n&gt; payload other than the URI, and there&#39;s no result other than success\n&gt; or failure.\n&gt; \n\nRoy&#39;s statement applies to any request method.  Your client doesn&#39;t even\nget to decide what GET means.  Remember the brouhaha with Google Web\nAccelerator deleting resources?  Some Web systems are designed with non-\nidempotent GETs, for whatever reason.  While this may be documented\nusing &quot;standard elements/relations and human-readable text... described\nin the same context in which you found the URI that you are&quot; GETting, it\nbreaks the generic interface (by violating the HTTP spec).\n\nAs for DELETE, I&#39;ve already described its different behaviors\npertaining to collections.  DELETE requests may contain more than just\ntarget URI and method.  Other headers may also come into play...\n\n&gt;\n&gt; Arguably, the availability of a DELETE link in the hypertext informs\n&gt; the client that a DELETE is possible, but that is all.\n&gt; \n\nNo, the presence of DELETE in an Allow: header informs the client that\na DELETE is possible, but that is all.\n\nA self-documenting, hypertext-driven REST API may instruct the client\nto do a HEAD request on each URL appearing in a &lt;form&gt; listing\ndeletable resources, and further instruct the client that it must\nperform a conditional DELETE (to avoid deleting a resource that someone\nelse just altered, always consider time and multi-user).  If the Allow:\nheader is implemented, the hypertext may instruct the client to exclude\nany resource from the deletable collection that didn&#39;t explicitly\nAllow: DELETE when the HEAD request was made.\n\nYes, DELETE results in success or failure, however it&#39;s up to DELETE&#39;s\nimplementation for a given resource to determine the failure mode...\nperhaps 401 to initiate challenge-response.  Informing the user as to\nwhy the DELETE failed differentiates the uniform REST interface from\nthe generic HTTP interface.  Calling the DELETE method of a resource\nout-of-band of the hypertext application may even have caused the\nfailure, as we shall see...\n\n(I haven&#39;t checked RFC 2616bis lately, but AFAIK the Allow: header may\nbe sent with GET and HEAD requests, not just as part of a 405 response.)\n\n&gt;\n&gt; The Standard Interface defines what the individual verbs do, but does\n&gt; not define when they are or are not available. Just because everyone\n&gt; &quot;knows&quot; what DELETE does, does not mean that any and all resources\n&gt; can, or should be deleted.\n&gt;\n\nThe generic interface defines the possibilities for individual methods,\nbut does not define what they do within the context of an application.\nA client script coded against libcurl can make a HEAD request against a\nresource, and infer from the Allow: header that DELETE has actually\nbeen implemented for the resource.\n\nThe script may then make a standard DELETE request against the\nresource, which may fail for any variety of reasons (the user isn&#39;t\nprivileged enough, or the request wasn&#39;t conditional, etc.) which all\ncome down to the failure of the client to be instructed in the _use_ of\nthe interface in-band by hypertext.\n\nSure, in theory, curl can DELETE any resource out there, because DELETE\nis part of the generic interface.  But in practice, the Web isn&#39;t that\nsimple, which you stated as, &quot;Thus the distinction between Standard\nInterface and actual behavior.&quot;\n\n&gt; \n&gt; You could see an interesting argument between a server and a client\n&gt; when a client tells teh server to delete a resource, and then\n&gt; complains that the server actually did delete the resource rather than\n&gt; return an error. The server can say &quot;Why did you delete the resource,\n&gt; I&#39;ve never sent you anything that told you that you could.&quot; because\n&gt; the server never sent a media type with a DELETE link in it.\n&gt; \n\nTypical REST systems have multiple clients -- a simple weblog has its\nnative (X)HTML interface as one client, and any number of feed readers/\naggregators.  (I don&#39;t mean client in the &quot;user&quot; sense, here.)\n\nA REST developer understands that the visible nature of REST APIs lead\nto serendipitous re-use, and doesn&#39;t really care if external developers\nare following the hypertext constraint...  What matters is the native\nhypertext client, as that&#39;s what self-documents all the self-descriptive\nmessaging that&#39;s going on to drive application state, so hypothetically:\n\nAny resource which implements HTTP DELETE can require such a request to\noriginate from a specific URL using REFERER.  So you can restrict DELETE\nto originate from the native hypertext client.  Graceful degradation is\nprovided by a 403 response linking to the hypertext client, and\nexplaining that it must be used in order to DELETE resources on the\nsystem.\n\nGranted, a savvy curl user can bypass this requirement, but REFERER is\nHTTP&#39;s answer to your hypothetical.  A standard Atom Protocol client may\nknow how to DELETE Atom resources on a system, but lacking a REFERER\nwill receive a 403 response, if the server wants to enforce the\nhypertext constraint implemented in its native hypertext client.\n\n&gt; \n&gt; But this is still confusing regarding non-hypertext media types,\n&gt; notably common things like JPGs etc., which typically do not have a\n&gt; representation that tells the client what it can and can not do. I\n&gt; guess the only way for this information to be conveyed would be on,\n&gt; say, an index page.\n&gt; \n\nOr using Atom media entries, designed to solve this very problem...\n\n&gt;\n&gt; For example: http://example.com/images can return a result listing all\n&gt; of the images, a link to POST to add an image, and individual links to\n&gt; PUT and DELETE all of the existing images.\n&gt; \n\nCareful, when you say &quot;link&quot; you&#39;re implying GET.  Do you mean to say\nthat this index page has a link that I can follow which causes an image\nto be deleted?  Or do you mean that this index page is a &lt;form&gt; which\nthe human or machine user can drive to the next application state?\n\n&gt;\n&gt; But, clearly, you can not get this information by getting the resource\n&gt; itself, http://example.com/images/pic1.jpg, as that media type is not\n&gt; hypertext capable.\n&gt; \n\nSure you can.  An Atom media entry (pic1.atom) uses hypertext to link\nitself to pic1.jpg, while pic1.jpg can use a Link header to attach\nitself to pic1.atom.  Atom Protocol specifies that deletion of\npic1.atom will cause pic1.jpg to be removed as well.  A HEAD request to\npic1.jpg doesn&#39;t Allow: DELETE, but reveals Link: alternate=pic1.atom.\nIf a HEAD request to pic1.atom reveals Allow: DELETE then we have a\nself-describing Atom Protocol interface.  It isn&#39;t self-documenting --\nall we know is that a DELETE on pic1.atom is the mechanism for removing\npic1.jpg, we don&#39;t know *how* to DELETE pic1.atom (unless we rely on\nout-of-band knowledge and just DELETE it willy-nilly).\n\n-Eric\n\n"}}
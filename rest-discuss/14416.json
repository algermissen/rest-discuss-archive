{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"RiI7YlmcX9vVzUvnaySLlUAxiWmMIgH8tsnRbgAJQ5ZfhSQ4qbWFeDBKbhRcThki6Q-vE_oKpS6EpW3_i1ClS2x4PSRDYFqDK3qYkuoH6g","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: Methods and the uniform interface [was: Re: [rest-discuss] REST  isn&#39;t hard to learn, it&#39;s just taught wrong.","postDate":"1261703829","msgId":14416,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMDkxMjI0MTgxNzA5LjA5Njk1ZjM4LmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","inReplyToHeader":"PDJmYTU1NDQ3MDkxMjI0MDQwNGszYzY3YmJmY29mNzdkODEyOTg5ODNkYWJmQG1haWwuZ21haWwuY29tPg==","referencesHeader":"PDQ5OTg4ODQ0MDkxMjIxMDYwN3EzMTdlMmQ4aTQ3OWEzNjU2ZjQxMjViZWFAbWFpbC5nbWFpbC5jb20+CTxiNTQ4ZGY2NTA5MTIyMTA3MTl0MzdhODhmNzZ5ZGUxY2JlODdjNjY3NTA1YUBtYWlsLmdtYWlsLmNvbT4JPDQ5OTg4ODQ0MDkxMjIxMDg1M2k1OTJlNmQ1dTY3ZmI1ZmZmNzk3ZDBmMjRAbWFpbC5nbWFpbC5jb20+CTwyMDA5MTIyMTE5MzY0MC45YzY5M2E5YS5lcmljQGJpc29uc3lzdGVtcy5uZXQ+CTw0QjMxMDBBNC4xMDUwMDAxQGdtYWlsLmNvbT4JPDIwMDkxMjIzMTMxNTEwLjgzYzNiODcyLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPDRCMzJCQkFBLjIwODA5MDdAZ21haWwuY29tPgk8MjAwOTEyMjMxODMzNDkuY2Y5MmNiOTEuZXJpY0BiaXNvbnN5c3RlbXMubmV0Pgk8RDkwNzY3MzctRTNDRC00NERFLUFGQUItNTA2NDU4MjAyN0MxQHN1YmJ1Lm9yZz4JPDIwMDkxMjIzMTk1MjU4LmMwYTk5ZTExLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPDJmYTU1NDQ3MDkxMjI0MDQwNGszYzY3YmJmY29mNzdkODEyOTg5ODNkYWJmQG1haWwuZ21haWwuY29tPg=="},"prevInTopic":14412,"nextInTopic":14421,"prevInTime":14415,"nextInTime":14417,"topicId":14293,"numMessagesInTopic":37,"msgSnippet":"... I have extracted and posted lots of Roy s comments, in these two posts: http://tech.groups.yahoo.com/group/rest-discuss/message/14392 ","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 1747 invoked from network); 25 Dec 2009 01:17:21 -0000\r\nX-Received: from unknown (98.137.34.46)\n  by m12.grp.re1.yahoo.com with QMQP; 25 Dec 2009 01:17:21 -0000\r\nX-Received: from unknown (HELO mxout-08.mxes.net) (216.86.168.183)\n  by mta3.grp.sp2.yahoo.com with SMTP; 25 Dec 2009 01:17:21 -0000\r\nX-Received: from bigbison (unknown [65.117.211.162])\n\t(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))\n\t(No client certificate requested)\n\tby smtp.mxes.net (Postfix) with ESMTPSA id 88E95509B4;\n\tThu, 24 Dec 2009 20:17:19 -0500 (EST)\r\nDate: Thu, 24 Dec 2009 18:17:09 -0700\r\nTo: =?ISO-8859-1?Q?Ant=F3nio?= Mota &lt;amsmota@...&gt;\r\nCc: Subbu Allamaraju &lt;subbu@...&gt;, Roger Gonzalez\n &lt;roger.gonzalez@...&gt;, Tim Williams &lt;williamstw@...&gt;, mike\n amundsen &lt;mamund@...&gt;, berend@..., rest-discuss@yahoogroups.com\r\nMessage-Id: &lt;20091224181709.09695f38.eric@...&gt;\r\nIn-Reply-To: &lt;2fa554470912240404k3c67bbfcof77d81298983dabf@...&gt;\r\nReferences: &lt;499888440912210607q317e2d8i479a3656f4125bea@...&gt;\n\t&lt;b548df650912210719t37a88f76yde1cbe87c667505a@...&gt;\n\t&lt;499888440912210853i592e6d5u67fb5fff797d0f24@...&gt;\n\t&lt;20091221193640.9c693a9a.eric@...&gt;\n\t&lt;4B3100A4.1050001@...&gt;\n\t&lt;20091223131510.83c3b872.eric@...&gt;\n\t&lt;4B32BBAA.2080907@...&gt;\n\t&lt;20091223183349.cf92cb91.eric@...&gt;\n\t&lt;D9076737-E3CD-44DE-AFAB-5064582027C1@...&gt;\n\t&lt;20091223195258.c0a99e11.eric@...&gt;\n\t&lt;2fa554470912240404k3c67bbfcof77d81298983dabf@...&gt;\r\nOrganization: Bison Systems Corporation\r\nX-Mailer: Sylpheed 2.6.0 (GTK+ 2.10.14; i686-pc-mingw32)\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nSubject: Re: Methods and the uniform interface [was: Re: [rest-discuss] REST\n  isn&#39;t hard to learn, it&#39;s just taught wrong.\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\nAnt=F3nio Mota wrote:\n&gt;\n&gt; But if DELETE is part of the well-known REST unif=\r\norm interface, why\n&gt; cannot be used on it&#39;s own? It is out-of-band informat=\r\nion, but that\n&gt; is OK as part of the definition of the interface. I remembe=\r\nred\n&gt; reading I think a answer from Roy that started by &quot;of course there is=\r\n\n&gt; out-of-band information...&quot;. There will always have to be some kind\n&gt; of=\r\n out-of-band information...\n&gt; \n\nI have extracted and posted lots of Roy&#39;s c=\r\nomments, in these two posts:\n\nhttp://tech.groups.yahoo.com/group/rest-discu=\r\nss/message/14392\nhttp://tech.groups.yahoo.com/group/rest-discuss/message/14=\r\n388\n\nYou&#39;re after the second link, and the link to the original for all his=\r\n\ncomments at the top of the first link.  Roy&#39;s quote about out-of-band\ninfo=\r\nrmation finishes as follows, and he clarifies further:\n\n&quot;\nREST doesn&#39;t elim=\r\ninate the need for a clue. What REST does is\nconcentrate that need for prio=\r\nr knowledge into readily standardizable\nforms.  That is the essential disti=\r\nnction between data-oriented and\ncontrol-oriented integration.\n\n...\n\nThe me=\r\ndia type identifies a specification that defines how a\nrepresentation is to=\r\n be processed. That is out-of-band information (all\ncommunication is depend=\r\nent on some prior knowledge).  What you are\nmissing is that each representa=\r\ntion contains the specific instructions\nfor interfacing with a given servic=\r\ne, provided in-band.  The media type\nis a generic processing model that eve=\r\nry agent can learn if there\naren&#39;t too many of them (hence the need for sta=\r\nndards).\n&quot;\n\nThe reason you can&#39;t DELETE willy-nilly despite DELETE being pa=\r\nrt of\nthe generic (cross-protocol) interface (a key distinction from your\nd=\r\nescription of it being automatically part of a uniform REST interface)\nis b=\r\necause a REST API must be hypertext-driven.  The client MUST be\ninstructed =\r\nwhat to DELETE *in-band* within the hypertext representation.\n\nSo your choi=\r\nce of media type for a hypertext-driven RESTful DELETE must\nencompass the u=\r\nse of the DELETE method.  The media type of the target\nof deletion isn&#39;t re=\r\nlevant in a RESTful DELETE (but we know the target\nhas a DELETE method to c=\r\nall because it&#39;s part of the generic interface\nof whatever URI scheme is us=\r\ned to identify the resource), only the media\ntype of the hypertext represen=\r\ntation driving the change in application\nstate is relevant.  The required p=\r\nrior knowledge for the client to\nperform a hypertext-driven RESTful DELETE =\r\ncomes from how fully the\nclient implements various standard media types.\n\nN=\r\not all text/html clients understand HTML 5&#39;s use of DELETE, and not\nall app=\r\nlication/xhtml+xml clients understand Xforms&#39; use of DELETE.\nDELETE in appl=\r\nication/xhtml+xml is standardized; Xforms 1.1 is a mature\nstandard with Xfo=\r\nrms 1.2 already under development, due to the success\nof Xforms 1.0 (grante=\r\nd, only behind the firewall, not on the Web).\nDELETE in text/html is readil=\r\ny standardizable; HTML 5 is nowhere near a\nmature standard, but its use in =\r\na REST system would at this time have\nto be called REST* by my definition b=\r\necause there&#39;s no way of knowing\nwhether any specific use of HTML 5 will ma=\r\nke the final draft.\n\nTo obtain a uniform REST interface (which is, itself, =\r\na generic\ninterface as Roy explains in his thesis), the constraint of hyper=\r\nmedia\nas the engine of application state must be applied.  Meaning that the=\r\n\nDELETE call itself must be in-band within the hypertext representation\ndri=\r\nving changes in application state.  I can&#39;t stress that enough.  In\norder f=\r\nor Firefox to fully implement the application/xhtml+xml media\ntype requires=\r\n the use of an Xforms plugin which allows the use of any\nmethod allowed by =\r\nthe protocol involved (different URI schemes may be\nused to identify resour=\r\nces, i.e. Firefox already knew how to do FTP\nGET, now it knows how to do FT=\r\nP DELETE, same as with HTTP, while\nallowing HTTP PATCH to boot -- all nice =\r\nand standardized by the plugin).\n\nUntil the text/html media type is extende=\r\nd by HTML 5 to encompass\nDELETE, using text/html for anything other than GE=\r\nT or POST is\nnonstandard, yet clearly standardizable if the representation =\r\nis HTML 5.\n\nI hope my verbose clarifications don&#39;t just cause more confusio=\r\nn.  :-(\nYou could just take Roy&#39;s authoritative comment at face value, just=\r\n\nsubstitue DELETE for POST, and read &quot;posting to&quot; as &quot;deleting&quot;:\n\n&quot;\nYou don=\r\n&#39;t get to decide what POST means -- that is decided by the\nresource.  Its p=\r\nurpose is supposed to be described in the same context\nin which you found t=\r\nhe URI that you are posting to.  Presumably, that\ncontext (a hypertext repr=\r\nesentation in some media type understood by\nyour client) tells you or your =\r\nagent what to expect from the POST using\nsome combination of standard eleme=\r\nnts/relations and human-readable\ntext.  The HTTP response will tell you wha=\r\nt happened as a result...\n&quot;\n\nAll resources have a DELETE method, that&#39;s a g=\r\niven.  What matters in\nREST is the context from which that method is called=\r\n.  In my example,\nthe URIs I&#39;m DELETEing are within context -- they appear =\r\nin standard\nlistbox &lt;option&gt; elements where the listbox has a delete button=\r\n linked\nto a &lt;model&gt; defining its action as looping through the selected UR=\r\nIs,\ncalling each target&#39;s DELETE method.  This is the difference between\na =\r\nuniform REST interface, and a generic HTTP interface -- the hypertext\nconst=\r\nraint that Roy&#39;s up on his high horse about throughout the\nreferenced weblo=\r\ng post and its comments:\n\n&quot;\nIn terms of testing a specification, the hardes=\r\nt part is identifying\nwhen a RESTful protocol is actually dependent on out-=\r\nof-band\ninformation...  What I look for are requirements on processing beha=\r\nvior\nthat are defined outside of the media type specification.  One of the\n=\r\neasiest ways to see that is when a protocol calls for the use of a\ngeneric =\r\nmedia type (like application/xml or application/json) and then\nrequires tha=\r\nt it be processed in a way that is special to the\nprotocol/API.\n&quot;\n\nRoy is u=\r\nsing the term &quot;processing behavior&quot; in a way which I read to\nencompass prot=\r\nocol methods.  The application/xml and application/json\nmedia types simply =\r\naren&#39;t capable of instructing a client how to DELETE\nanything, so if the cl=\r\nient &quot;just knows&quot; how to DELETE those media types\n(or some target URL conta=\r\nined within), then the client is not being\ninstructed by hypertext, and the=\r\n API is coupling client to server\nthrough out-of-band information.  The cli=\r\nent MUST be instructed what\ntarget resource (of any media type) to DELETE b=\r\ny some in-band self-\ndocumenting hypertext API (such as that provided by us=\r\ning the Xforms\nvocabulary within the application/xhtml+xml media type, in m=\r\ny example)\nin order to achieve a uniform REST interface.\n\n&gt;\n&gt; Also, what is=\r\n wrong with client/server coupling if you are using a\n&gt; method of the unifo=\r\nrm interface? It is not expectable that the\n&gt; uniform interface verb that n=\r\now is defined by DELETE will be changed\n&gt; to something else by the server, =\r\nlike for example the server can do\n&gt; for URI structures.\n&gt; \n\nWhat&#39;s wrong i=\r\ns that you aren&#39;t making the distinction between the\ngeneric interface, and=\r\n the specific subset of the generic interface\ndefined by REST&#39;s uniform int=\r\nerface uber-constraint.  The server may\nvery well change over time how it h=\r\nandles a DELETE request on a\ncollection, but in REST all representations ar=\r\ne updated by the server,\nsuch that clients are instructed differently than =\r\nbefore instead of\nbreaking their hard-coded DELETE implementation mechanism=\r\n. All the\nclient needs to do is refresh its representation, instead of the =\r\nclient\nor developer needing to care that the server&#39;s DELETE implementation=\r\n\nmechanism has changed regarding collections.\n\n&quot;\nDo you see the difference?=\r\n  Encoding knowledge within clients and\nservers of the other side&#39;s impleme=\r\nntation mechanism is what we are\ntrying to avoid.\n&quot;\n\n&gt;\n&gt; And also, what you=\r\n say suggests that the same resource whose\n&gt; representation can be retrieve=\r\nd in, say, mediatype/a and mediatype/b,\n&gt; can be deleted when retrieved wit=\r\nh a and not with b, depending on\n&gt; those media types definition? I feel it =\r\nshould be a &quot;property&quot; of the\n&gt; resource to be or not deletable, and not a =\r\n&quot;property&quot; of the\n&gt; media-type.\n&gt; \n\nBeing deletable _is_ a property of the =\r\nresource, as determined by\nwhether or not that resource implements the DELE=\r\nTE method, not by media\ntype.  It can even be expressed in an HTTP Allow: h=\r\neader.  What matters\nis that a media type be used which is capable of instr=\r\nucting a client\n*how* and *what* to DELETE, by presenting the client with s=\r\nome\nhypertext representation presenting the target URL(s) and teaching it\nt=\r\nhat deletion exists as an option for changing application state.\n\nThe appli=\r\ncation is what the (human or machine) user is trying to\naccomplish, i.e. de=\r\nlete some resource(s).  The application is\ntransitioning frome one steady-s=\r\ntate to another.  The first steady-\nstate presents a collection of URLs tha=\r\nt mey be deleted.  The next\nsteady-state (assuming successful deletion) pre=\r\nsents a shortened\ncollection of URLs that may be deleted.\n\n(Or, the hyperte=\r\nxt interface may define itself as the resource to be\ndeleted, and this acti=\r\non may result in the removal of all variant\nrepresentations.  Or, the hyper=\r\ntext interface may define some specific\nvariant of itself (by the variant&#39;s=\r\n own URL) as the target for\ndeletion -- regardless of that target&#39;s media t=\r\nype.)\n\nThe number of transitional states is proportional to the number of\nr=\r\nesources selected for deletion.  These transitional states and the\nnext ste=\r\nady-state do not require their own URIs, the &quot;page&quot; is\ndynamically updated =\r\n-- a success response to an individual DELETE\ncauses a resource to be remov=\r\ned from the list the user is viewing,\nwhile failure causes the resource to =\r\nremain in the list (a machine is\nmore interested in having the HTTP respons=\r\ne codes present it with\ntransitional-state knowledge).  However, if other u=\r\nsers are capable of\ndeleting resources, the &quot;page&quot; will need to be refreshe=\r\nd to obtain an\naccurate representation of resource state (application state=\r\n is on the\nclient; resource state is on the server -- they are not the same=\r\n).\n\nOr, to liberally (and hopefully, correctly) re-phrase Roy:\n\n&quot;\nYou don&#39;t=\r\n get to decide what DELETE means -- that is decided by the\nresource (which =\r\nmay be a collection whose DELETE implementation\nfunctions as a bulk-DELETE =\r\nof all members, or just results in the\ndeletion of only the collection reso=\r\nurce itself).  DELETE&#39;s purpose is\nsupposed to be described in the same con=\r\ntext in which you found the URI\nthat you are deleting (like a &lt;form&gt; presen=\r\nting a list of URLs to\ndelete and specifying the DELETE action method for a=\r\n corresponding\nbutton).  Presumably, that &lt;form&gt; tells you or your agent wh=\r\nat to expect\nfrom the DELETE using some combination of standard elements/re=\r\nlations\nand human-readable text.  The HTTP response will tell you what happ=\r\nened\nas a result...\n&quot;\n\nHTH anyone trying to come to grips with the hypertex=\r\nt constraint.\n\n-Eric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}}
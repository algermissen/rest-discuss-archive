{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":277681928,"authorName":"Andrew S. Townley","from":"&quot;Andrew S. Townley&quot; &lt;ast@...&gt;","profile":"adz1092","replyTo":"SENDER","senderId":"0FJrvVcimHFWhmP8EHmb65tp_U_k3To7EdggIg7VXluZFVEGJxSjoKDOFgqPu2tyCPjmQd39OX7d18tH3zngCKVLiaLrgn_sv-mgTuk","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Yet another thread on URI Opacitity (aka Use of\tMetadata in URIs)","postDate":"1209551716","msgId":10674,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDEyMDk1NTE3MTYuNzE5OS4xMjQuY2FtZWxAbGlubmE+","inReplyToHeader":"PGZ2OGU3dStoY2I4QGVHcm91cHMuY29tPg==","referencesHeader":"PGZ2OGU3dStoY2I4QGVHcm91cHMuY29tPg=="},"prevInTopic":10669,"nextInTopic":10681,"prevInTime":10673,"nextInTime":10675,"topicId":10669,"numMessagesInTopic":3,"msgSnippet":"... ﻿Hi Nick, Thanks for your comments.  I fully understand and agree that loose coupling must be bootstrapped by tight coupling somewhere.  ﻿I think ","rawEmail":"Return-Path: &lt;ast@...&gt;\r\nX-Sender: ast@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 19817 invoked from network); 30 Apr 2008 10:35:22 -0000\r\nX-Received: from unknown (66.218.67.97)\n  by m49.grp.scd.yahoo.com with QMQP; 30 Apr 2008 10:35:22 -0000\r\nX-Received: from unknown (HELO valleyforge.networkredux.net) (64.128.80.17)\n  by mta18.grp.scd.yahoo.com with SMTP; 30 Apr 2008 10:35:22 -0000\r\nX-Received: from [83.70.241.237] (helo=[10.0.8.102])\n\tby valleyforge.networkredux.net with esmtpsa (SSLv3:AES256-SHA:256)\n\t(Exim 4.63)\n\t(envelope-from &lt;ast@...&gt;)\n\tid 1Jr9eg-0007c4-NX; Wed, 30 Apr 2008 03:35:19 -0700\r\nTo: Nick Gall &lt;nick.gall@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nIn-Reply-To: &lt;fv8e7u+hcb8@...&gt;\r\nReferences: &lt;fv8e7u+hcb8@...&gt;\r\nContent-Type: text/plain; charset=utf-8\r\nDate: Wed, 30 Apr 2008 11:35:16 +0100\r\nMessage-Id: &lt;1209551716.7199.124.camel@linna&gt;\r\nMime-Version: 1.0\r\nX-Mailer: Evolution 2.22.1 \r\nContent-Transfer-Encoding: quoted-printable\r\nX-AntiAbuse: This header was added to track abuse, please include it with any abuse report\r\nX-AntiAbuse: Primary Hostname - valleyforge.networkredux.net\r\nX-AntiAbuse: Original Domain - yahoogroups.com\r\nX-AntiAbuse: Originator/Caller UID/GID - [0 0] / [47 12]\r\nX-AntiAbuse: Sender Address Domain - atownley.org\r\nX-Source: \r\nX-Source-Args: \r\nX-Source-Dir: \r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Andrew S. Townley&quot; &lt;ast@...&gt;\r\nSubject: Re: [rest-discuss] Yet another thread on URI Opacitity (aka Use of\n\tMetadata in URIs)\r\nX-Yahoo-Group-Post: member; u=277681928; y=G-2ukPBCXtS-pCCz0OuIHKoxtZ0vvtsUWaCP7Vezkvlryw\r\nX-Yahoo-Profile: adz1092\r\n\r\nOn Wed, 2008-04-30 at 00:24 +0000, Nick Gall wrote:\n&gt; A discussion on the s=\r\nubject of this post recent broke out in the SOA\n&gt; discussion group -- see W=\r\nOA vs SOA  and URI design. I think this group\n&gt; is the more appropriate for=\r\num for such a discussion, so I am posting\n&gt; my reply here.\n&gt; \n&gt; On Tue, Apr=\r\n 29, 2008 at 1:59 PM, Andrew S. Townley &lt;ast@...&gt;\n&gt; wrote:\n&gt; &gt; I s=\r\nee it that the client should save a reference to the current\n&gt; resource\n&gt; &gt;=\r\n if it finds that resulting resource &quot;interesting&quot;, but it shouldn&#39;t\n&gt; know=\r\n\n&gt; &gt; that it can retrieve that resource again using some kind of template\n&gt;=\r\n &gt; operation to construct a URI. That&#39;s what I meant about &quot;URIs only\n&gt; &gt; b=\r\neing meaningful to whomever resolves them&quot;. Certain layers of the\n&gt; &gt; clien=\r\nt may need to resolve parts of the URI, e.g. the scheme, host\n&gt; and\n&gt; &gt; por=\r\nt in the case of HTTP, but that&#39;s as far as it should go, because\n&gt; &gt; that&#39;=\r\ns the only part that&#39;s meaningful to the client according to\n&gt; the\n&gt; &gt; publ=\r\nished specification.\n&gt; \n&gt; While I agree with many of your sentiments overal=\r\nl, I think your\n&gt; strictprohibition against URI templates goes too far. I p=\r\nosted my\n&gt; reply as acomment to your blog post on URI opacity . I also post=\r\ned my\n&gt; reply in theREST discussion group. I think that is the more\n&gt; appro=\r\npriate forum forthis issue. I look forward to continuing the\n&gt; insightful d=\r\niscussionthere.\n&gt; \n&gt; While I agree that there is a tradeoff between the eas=\r\ne of\n&gt; use/understanding gained by placing human-understandable metadata in=\r\n\n&gt; URIs and the ease of interface change (enabled by loose coupling), I\n&gt; t=\r\nhink you are leaning a bit too far on the ease of change side.\n&gt; \n&gt; In part=\r\nicular, the advice in the Dan Connolly quote is out of date and\n&gt; out of to=\r\nuch with the TAG recommendation concerning this Metadata in\n&gt; URIs. One of =\r\nkey its conclusions is:\n&gt; \n&gt; &quot;Assignment authorities may publish specificat=\r\nions detailing the\n&gt; structure and semantics of the URIs they assign. Other=\r\n users of those\n&gt; URIs may use such specifications to infer information abo=\r\nut resources\n&gt; identified by URI assigned by that authority.&quot;\n&gt; \n&gt; Both Tim=\r\n Berners-Lee (whose &quot;Cool URIs&quot; is also superceded by the\n&gt; finding) and Da=\r\nn Connolly approved this finding.\n&gt; \n&gt; So your statement that &quot;if you think=\r\n this [Flickr&#39;s URI template] is a\n&gt; &quot;hypermedia application&quot;, you need som=\r\ne serious help&quot; seems a bit over\n&gt; the top, given that the TAG finding expl=\r\nicitly allows such templating\n&gt; =E2=80=94 both in HTML FORMs and out-of-ban=\r\nd interface documentation.\n&gt; \n&gt; I&#39;d be curious about your thoughts on the f=\r\ninding, especially what\n&gt; parts you disagree with. \n\n=EF=BB=BFHi Nick,\n\nTha=\r\nnks for your comments.  I fully understand and agree that loose\ncoupling mu=\r\nst be bootstrapped by tight coupling somewhere.  =EF=BB=BFI think\nthere&#39;s a=\r\n number of issues intertwined here, so I&#39;ll do my best to try\nand untangle =\r\nthem so you can see where I&#39;m coming from.\n\nFirst off, I&#39;m not prohibiting =\r\nanything.  I&#39;m trying to say that there\nmust be a better way.  The Web&#39;s a =\r\nbit like society:  you can&#39;t really\nprohibit anything, all you can really d=\r\no is choose to penalize someone\nafter they do something you don&#39;t like in t=\r\nhe hopes that it won&#39;t happen\nagain.\n\nThanks for the link to the TAG recomm=\r\nendation.  I hadn&#39;t seen it because\nI hadn&#39;t gone looking for things like t=\r\nhat for a while.  Where I am with\nmy thinking mostly comes from giving a lo=\r\nt of thought to URIs being used\n&quot;universally&quot; to identify things from the p=\r\nerspective of trying to hang\nsemantics off them using Topic Maps, and then =\r\ndetermine what rights the\nusers of those URIs have to &quot;peek inside&quot;, genera=\r\nte or augment them\nwithin their own system implementations.\n\nI&#39;ve given thi=\r\ns question a lot of thought and gone around in a more than\na few circles to=\r\n get where I am, but I stand by my assertion that URIs\nare just sequences o=\r\nf bytes conforming to the RFC specification that\nhave context-dependent mea=\r\nning.  Those contexts are pretty limited in my\nview, and anywhere outside o=\r\nf those contexts, you&#39;d better be treating\nURIs as sequences of bytes.\n\nThe=\r\n first of these contexts is the naming authority.  This is the entity\nthat =\r\n*constructs* the URI in the first place and then somehow publishes\nthat URI=\r\n into the void.  Because they create it, they own it and the\ndetailed inter=\r\npretation of what resource the URI actually identifies can\nonly be determin=\r\ned by the naming authority.  Other entities can make\nassertions about the U=\r\nRI, but those assertions should ultimately be\nbased on things like &quot;this by=\r\nte sequence&quot; (the URI) identifies &quot;this\nbyte sequence&quot; (the representation)=\r\n.  If someone wants or needs to get\nback to the representation, they need t=\r\no have the URI as created by the\nnaming authority.\n\nThe second of these con=\r\ntexts is the act of dereferencing the URI by a\nclient so that it can reques=\r\nt the representation it identifies.  Here&#39;s\nwhere the RFC comes into play, =\r\nbecause it says how that byte sequence\nshould be interpreted during URI res=\r\nolution.  In this context, the\nclient needs to know how to resolve the serv=\r\ner, so it can then process\nthe scheme, host, port, etc. so it can make the =\r\nTCP connection and then\nhand off the byte sequence to the thing on the othe=\r\nr end of the\nconnection to hopefully resolve the resource.\n\nI want to be cl=\r\near that while this context involves the client, it is\ncompletely separate =\r\nfrom any application-specific logic or processing\nthat the client needs to =\r\ndo to interact with the service.\n\nSo, that means we&#39;ve 3 broad contexts of =\r\nuse for the URI:\n\n1) use by the naming authority\n2) use by the client agent=\r\n in connecting to the naming authority\n3) everything else\n\nSo far, I think =\r\nthis is in-line with the TAG recommendation.  The area\nof debate is all abo=\r\nut context #3:  everything else.\n\n&gt; For me, the key takeaway is the followi=\r\nng:\n&gt; \n&gt; &quot;Good Practice: Resource metadata that will change SHOULD NOT be\n&gt;=\r\n encoded in a URI.&quot;\n&gt; \n&gt; I would generalize that to:\n&gt; \n&gt; &quot;Resource metadat=\r\na that will change should not be encoded in the\n&gt; client in either hardcode=\r\nd URI metadata elements or hardcoded format\n&gt; metadata elements.&quot;\n&gt; \n&gt; It d=\r\noesn&#39;t matter whether a metadata element is in a documented URI\n&gt; template =\r\nor in a documented microformat template, or in a documented\n&gt; resource repr=\r\nesentation schema =E2=80=94 if the element documented and then\n&gt; encoded (e=\r\ng &quot;hardcoded&quot;) into the client, then you have tight\n&gt; coupling.\n\nAs you say=\r\n, you&#39;ve got to have tight coupling somewhere, but I don&#39;t\nnecessarily agre=\r\ne with your generalization or your assertion that it\ndoesn&#39;t mater where th=\r\ne metadata lives.  I don&#39;t see how you&#39;re going to\nget any useful applicati=\r\non processing done if you don&#39;t have some amount\nof hard-coded data process=\r\ning in your client somewhere.  The question is\nwhere to put it.\n\nMy answer =\r\nto this part of the issue is that you should put your &quot;hard\ncoded&quot;, tightly=\r\n-coupled processing as far away as possible from anything\nto do with intera=\r\ncting with the information service provider&#39;s service\ninterface.  Maybe an =\r\nexample will help.\n\nIf I&#39;m interacting via the Web, I know my client needs =\r\nto deal with\nURIs--primarily HTTP URLs.  It doesn&#39;t make sense to hard-code=\r\n the URL\nof my service provider into my client, but it&#39;s logical to hard-co=\r\nde URI\nprocessing and TCP connection logic into a library used by my client=\r\n\nbecause I can use that in a much wider context than this particular\nservic=\r\ne.\n\nTo me, the same sort of rules should apply to interacting with the\nserv=\r\nice.  Let&#39;s say I have an invoice management service that holds\ndigitized v=\r\nersions of all my organizations AP invoices.  I want to write\na tool that p=\r\nrocesses those invoices in some way (what it does exactly\ndoesn&#39;t really ma=\r\ntter).  Because my invoice management service is\noutsourced to a 3rd-party =\r\nthat does all of the manual data entry, I\ndon&#39;t have direct access to the i=\r\nnformation, but my invoices are\navailable via a Web service accessible usin=\r\ng HTTP.  My invoice data is\nrepresented using UBL&#39;s NES profile so I don&#39;t =\r\nhave to re-invent what an\ninvoice looks like.\n\nSo far, there&#39;s the followin=\r\ng architectural aspects in this scenario:\n\n1) Information transfer will be =\r\naccomplished using HTTP\n2) Information representation will be accomplished =\r\nusing UBL/NES\n3) Information identification will require a URI (implied fro=\r\nm #1)\n4) Information location, resolution and retrieval will require a URI\n=\r\n(also implied from #1)\n\nLooking at this, I see 3 very broad application sco=\r\npes and 1 very narrow\napplication scope.  Items 1-3 will likely be the same=\r\n across any\noutsourcing partner that I choose, however, #4 is totally speci=\r\nfic to\nthe service provider and is a by-product of the way they implement t=\r\nheir\ninformation service.\n\nSome time passes.  I acquire another company in =\r\na geographically remote\nlocation.  I want to integrate their AP function wi=\r\nth the corporate one,\nbut because they&#39;re geographically remote, it doesn&#39;t=\r\n make sense to have\nthe same 3rd-party outsourcing partner.  Eventually, I =\r\nend up with 2 AP\nprocessing outsourcing partners, both of whom use HTTP, UR=\r\nIs and UBL/NES\nto get me my information, but who use dramatically different=\r\n\nimplementation technologies, causing differences in the way their URIs\nare=\r\n constructed.  I don&#39;t have any influence over their technology\nplatform de=\r\ncisions, but both of them do provide me with the most\neconomically viable A=\r\nP processing services for their geographic\nlocation.\n\nThe difference betwee=\r\nn #3 and #4 is why this whole opacity or URI\nmetadata issue matters at all.=\r\n  While you&#39;re using the same byte\nsequence for both, you&#39;re using it very =\r\ndifferently.\n\nMy argument is that you should be able to design your client&#39;=\r\ns\napplication logic entirely based around #3 and not need to care about #4\n=\r\nat all.  I see hypermedia as a way to make that happen.\n\nBefore I go any fu=\r\nrther, I stand by my statement that you said was OTT,\nbecause to me hyperme=\r\ndia applications are driven by the services that\nprovide them.  Once the cl=\r\nient has *initially* accessed the service, the\navailable operations and fur=\r\nther interactions should be completely under\nthe control of the service.  T=\r\nhe client can make decisions based on the\nhypermedia it is presented, but i=\r\nts interactions should be entirely\ndriven by the service&#39;s current applicat=\r\nion state, represented to the\nclient through the hypermedia resource it is =\r\ngiven.\n\nLooking at the remainder of the TAG recommendation, sections 2.2,\nG=\r\nuessing information from a URI, and 2.5, URIs that are convenient for\npeopl=\r\ne to use, are interesting.  Earlier on the other list, I said:\n&quot;each human-=\r\nreadable URL should be a separate service.&quot;  I think the\nultimate definitio=\r\nn of &quot;service&quot; is defined by those being served and\nnot by the service prov=\r\nider.\n\nIn 2.2 & 2.5, the example is http://example.org/weather/Chicago is u=\r\nsed\nas an example that can be printed on a bus and will provide the current=\r\n\nrepresentation of the weather in Chicago.  In this case, I&#39;d say the\nservi=\r\nce is &quot;providing the weather in Chicago&quot; and not &quot;providing the\nweather&quot;.  =\r\nSome other service may provide the same weather at\nhttp://airports.org/weat=\r\nher?location=3DORD.  This is fine, and I won&#39;t\nargue with you that one isn&#39;=\r\nt more logical and &#39;friendlier&#39; or easier to\ntype than the other.  The good=\r\n practice recommendation is that\n\n&quot;URIs intended for direct use by people s=\r\nhould be easy to understand,\nand should be suggestive of the resource actua=\r\nlly named.&quot;\n\nAgain, not dramatically different than my earlier position.  R=\r\negarding\nthe guessing discussed in 2.2, this is something that you&#39;re never=\r\n going\nto be able to stop.  I do find myself thinking about my own URI usag=\r\ne as\na URI consumer and the number of times I&#39;m tempted to guess.  Most of\n=\r\nthem seem to boil down to a single, more fundamental issue:  the service\nUI=\r\n is difficult to use.\n\nEvery instance that I can think of where I&#39;ve typed =\r\nin a URI beyond the\nDNS name was because finding the information I wanted w=\r\nas either\nconvoluted or deliberately inaccessible after I ended up at a pag=\r\ne\nthrough search results that was obviously part of a larger resource, but\n=\r\nthere wasn&#39;t any obvious link to the rest of it.\n\nEither way, I don&#39;t reall=\r\ny have an issue with the recommendation, but I\nwould expect the interaction=\r\n model of the service presented to me once I\nactually retrieved that initia=\r\nl resource to allow me to easily explore\nother information provided by the =\r\nservice so that I wouldn&#39;t have to\nresort to URI guessing games.\n\nThis real=\r\nly only leaves 2.3 HTML Forms, and Documenting Metadata\nAssignment policies=\r\n.  Here&#39;s where I think the initial jump-off point\nfor URI templating start=\r\ned, and here&#39;s probably where I have my biggest\nissues regarding the recomm=\r\nendation.\n\n&gt;From the recommendation:\n\n&quot;HTML forms [HTMLForms] and now XForm=\r\ns [XFORMS] each provide a means by\nwhich an authority can assert its suppor=\r\nt for a class of parameterized\nURIs, while simultaneously programming Web c=\r\nlients to prompt for the\nnecessary parameters.&quot;\n\nI think the terminology us=\r\ned and subsequent inferences made from this\nstatement isn&#39;t as clear as it =\r\ncould be and open to broader\ninterpretation than it should be.  The reason =\r\nis related to one of my\npoints on the other list:\n\n=EF=BB=BFOn Tue, 2008-04=\r\n-29 at 18:59 +0100, Andrew S. Townley wrote:\n&gt; =EF=BB=BFURIs are funny beas=\r\nts in [regarding the URI design of a particular service] \n&gt; because of the =\r\nnature of the Web. I really see them doing a bit of double\n&gt; duty at times.=\r\n  On one hand, Anne&#39;s right that they do constitute the \n&gt; service&#39;s extern=\r\nal interface, but I find myself asking if that&#39;s by design\n&gt; or by accident=\r\n.\n&gt; \n&gt; On the Web, you need URIs to interact with a service so that the ser=\r\nvice\n&gt; can walk you through the valid application states it&#39;s willing to\n&gt; =\r\nsupport, but does that mean that each one of these URIs is or should be\n&gt; e=\r\nqually important?  By definition of the URIs and the Web, the answer is\n&gt; y=\r\nes, because the &quot;dangling hyperlink&quot; capability was the real innovation\n&gt; o=\r\nf the Web over other hypermedia systems.\n\nTo me, what an HTML or XForm does=\r\n is provide an assertion to the client\nthat:\n\n        for this resource, re=\r\npresenting this service application state,\n        you have the following p=\r\notential state transition.  To\n        accomplish the state transition, you=\r\n can supply additional\n        information (as specified by the form).\n    =\r\n    \nI don&#39;t agree that the form&#39;s action and method imply any sort of\n*lon=\r\ng-lived*, binding assertion that a naming authority will broadly\nsupport a =\r\nclass of parameterized URIs.  Again, this comes back to my\nunderstanding of=\r\n hypermedia (and we can argue about that separately).\nTo me, the *hypermedi=\r\na* aspect of this interaction says that:\n\n        For *this particular* res=\r\nource representation, identified by the\n        *current URI used to retrie=\r\nve it*, the client has the following\n        state transition options.\n    =\r\n    \nThat&#39;s a big difference from saying &quot;an authority can assert its suppo=\r\nrt\nfor a class of parameterized URIs&quot; and subsequently taking that to mean\n=\r\n&quot;unconditionally and outside the context of the particular resource\ndefinin=\r\ng said support&quot;.\n\nThis is the crux of why I stand behind my assertion that =\r\nusing URI\ntemplates over HTTP does not imply you have a hypermedia applicat=\r\nion.\n\nI make a clear and distinct difference between the actions of a\nhyper=\r\nmedia interaction handling library constructing a URI and\nsubmitting a subs=\r\nequent request to a service based on information\nextracted from the hyperme=\r\ndia it received as the result of a previous\nresource request and a client c=\r\nreating a URI following a published\nservice API specification and submittin=\r\ng that URI to a service without\nthe service first expressing that this is a=\r\n valid state transition.\n\nWith API&#39;s based on URI templates, the API specif=\r\nication is playing the\nrole that I believe could be fulfilled by a semantic=\r\nally stable\nhypermedia interaction vocabulary.  Because no such critter cur=\r\nrently\nexists and is widely adopted, people building automated clients for\n=\r\nWeb-based information services have no choice but to come up with some\nothe=\r\nr means to &quot;get the job done&quot;.\n\nJust because it has to be done, doesn&#39;t mea=\r\nn that it should or must be\ndone, and it certainly doesn&#39;t mean that it&#39;s a=\r\n hypermedia application.\nIf your interaction model depends on following an =\r\nAPI call sequence\nbased on constructed URIs (the API parameters) that is no=\r\nt defined\nwithin the hypermedia exchanged between the client and the servic=\r\ne, then\nI truly fail to see how you have a hypermedia application.  You may=\r\n be\npushing hypermedia representations around, but then they&#39;re effectively=\r\n\nopaque data blobs and not part of the interaction model.\n\nIf the service p=\r\nrovider/URI naming authority wants to use parameterized\ntemplates to constr=\r\nuct the URIs it places in hypermedia representations,\nthen that&#39;s perfectly=\r\n fine and makes good architectural sense.  However,\nif it&#39;s done by the cli=\r\nent, I think it&#39;s a potential danger and means\nthat your service consumer m=\r\nust support N APIs and N API-specific\ntemplating models to interact with N =\r\nservices.\n\nWhy should this be necessary?\n\n&gt; But there is no escaping some a=\r\nmount of tight coupling. All loosely\n&gt; coupled aspects of an interface depe=\r\nnd directly or indirectly on tight\n&gt; coupling somewhere else. In other word=\r\ns loose coupling must be\n&gt; bootstrapped via tight coupling.\n&gt; \n&gt; Thinking t=\r\nhrough what parts of an interface must be tight so that the\n&gt; other parts c=\r\nan be loose is the essence of good interface design.\n&gt; Choose wisely and yo=\r\nu get stable interfaces that are productive for\n&gt; decades (eg TCP/IP, SCSI,=\r\n HTTP, HTML, URI). Choose poorly and you get\n&gt; either unstable interfaces a=\r\nre arthritic ones.\n\nAgreed.\n\nast\n-- \nAndrew S. Townley &lt;ast@...\nht=\r\ntp://atownley.org\n\n\n"}}
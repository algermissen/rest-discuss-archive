{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":455444475,"authorName":"Jo St√∏rset","from":"=?iso-8859-1?Q?Jo_St=F8rset?= &lt;storset@...&gt;","profile":"jostorset","replyTo":"SENDER","senderId":"7hSlcKOrHY5kdlIyytRah6NVAPs42XwpJOuepuDOJNa9Rq4c2avhhhASRZHVmy9w5eWUsbyVasRQczAA33s8K23DQnT31RtuNiP0EwGVNfYThmnQkvBX0g","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: Leveraging &quot;legacy&quot; XML standards in restful web APIs?","postDate":"1298438643","msgId":17376,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEU5ODI2NzRDLUREQzYtNDEwQy05MzE1LUM5OTEwQzE0QTYyNkBnbWFpbC5jb20+","inReplyToHeader":"PEY4OEI3NjA4LTM2NzctNEI5QS05QkY1LTZFQTMwQkI4NjEwNEBnbWFpbC5jb20+","referencesHeader":"PEY4OEI3NjA4LTM2NzctNEI5QS05QkY1LTZFQTMwQkI4NjEwNEBnbWFpbC5jb20+"},"prevInTopic":17366,"nextInTopic":0,"prevInTime":17375,"nextInTime":17377,"topicId":17366,"numMessagesInTopic":2,"msgSnippet":"Sorry, this was sent a bit early, and I see it s hardly read worthy as it is. SInce it got sent in the first place, let me add a tl;dr version (so you can at","rawEmail":"Return-Path: &lt;storset@...&gt;\r\nX-Sender: storset@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 26477 invoked from network); 23 Feb 2011 05:24:18 -0000\r\nX-Received: from unknown (66.196.94.107)\n  by m11.grp.re1.yahoo.com with QMQP; 23 Feb 2011 05:24:18 -0000\r\nX-Received: from unknown (HELO mail-yw0-f47.google.com) (209.85.213.47)\n  by mta3.grp.re1.yahoo.com with SMTP; 23 Feb 2011 05:24:18 -0000\r\nX-Received: by mail-yw0-f47.google.com with SMTP id 8so1213270ywg.6\n        for &lt;rest-discuss@yahoogroups.com&gt;; Tue, 22 Feb 2011 21:24:18 -0800 (PST)\r\nX-Received: by 10.150.150.3 with SMTP id x3mr4516222ybd.336.1298438658104;\n        Tue, 22 Feb 2011 21:24:18 -0800 (PST)\r\nReturn-Path: &lt;storset@...&gt;\r\nX-Received: from [192.168.1.4] ([122.166.65.142])\n        by mx.google.com with ESMTPS id y64sm4607712yha.9.2011.02.22.21.24.14\n        (version=TLSv1/SSLv3 cipher=OTHER);\n        Tue, 22 Feb 2011 21:24:17 -0800 (PST)\r\nContent-Type: text/plain; charset=iso-8859-1\r\nMime-Version: 1.0 (Apple Message framework v1082)\r\nIn-Reply-To: &lt;F88B7608-3677-4B9A-9BF5-6EA30BB86104@...&gt;\r\nDate: Wed, 23 Feb 2011 10:54:03 +0530\r\nContent-Transfer-Encoding: quoted-printable\r\nMessage-Id: &lt;E982674C-DDC6-410C-9315-C9910C14A626@...&gt;\r\nReferences: &lt;F88B7608-3677-4B9A-9BF5-6EA30BB86104@...&gt;\r\nTo: rest-discuss@yahoogroups.com\r\nX-Mailer: Apple Mail (2.1082)\r\nFrom: =?iso-8859-1?Q?Jo_St=F8rset?= &lt;storset@...&gt;\r\nSubject: Re: Leveraging &quot;legacy&quot; XML standards in restful web APIs?\r\nX-Yahoo-Group-Post: member; u=455444475; y=G6evQfMIiZsSpkCvLz6raCsEHXE_7Px15ZVWVtyhGriS-9N6\r\nX-Yahoo-Profile: jostorset\r\n\r\nSorry, this was sent a bit early, and I see it&#39;s hardly read worthy as it i=\r\ns. \n\nSInce it got sent in the first place, let me add a tl;dr version (so y=\r\nou can at least understand what I tried writing :)\n\nContext: There are alre=\r\nady in place xml standards and deployed technical infrastructure for workin=\r\ng with this xml for batch processing.\nMain question: Are there any patterns=\r\n or &quot;best practices&quot; out there for evaluating how to go about making the &quot;s=\r\ntrategic&quot; choices when building a &quot;parallel&quot; web api? \n\nThe broad options I=\r\n tried to discuss:\n- just move existing batch operations &quot;as is&quot; onto web (=\r\nleast work, but is clunky to work with for new clients and doesn&#39;t really e=\r\nncourage unexpected uses).\n- build a separate solution for web api (adds co=\r\nmplexity and maintenance, but allows for optimized solutions and restfulnes=\r\ns)\n- try to utilize the existing solutions, but try to webify them (what I =\r\nthink makes sense, at least in my immediate context, but poses some problem=\r\ns and I&#39;m uncertain of the value)\n\nIf choosing the last one, any experience=\r\ns on how to go about trying to balance backwards compatibility and restfuln=\r\ness &quot;for the future&quot; (while not wasting resources unnecessary)?\n\nJo\n\nDen 22=\r\n. feb. 2011 kl. 16.07 skrev Jo St=F8rset:\n\n&gt; Hi,\n&gt; \n&gt; I seem to keep findin=\r\ng myself in a position where I find it difficult to choose the &quot;right&quot; leve=\r\nl of restful-ness and granularity, and how to represent references/links, i=\r\nn web api cases where there is a batch oriented &quot;legacy&quot; already in place. =\r\n\n&gt; \n&gt; Since I haven&#39;t seen it discussed much in REST circles, I thought I&#39;d=\r\n see if I could generate some discussion/feedback on this type of scenario.=\r\n At least I find it a challenge, so maybe others do as well, and have exper=\r\niences they could share?\n&gt; \n&gt; The context is one where there are existing a=\r\nnd fairly well-structured and internally consistent XML standards for repre=\r\nsenting the domain and typically batch oriented/semi-manual processes that =\r\npush chunks of large xml stuctures between systems. Leveraging this existin=\r\ng format and the technical infrastructure and processes surrounding it when=\r\n implementing a more granular and flexible web api seem to be a necessity a=\r\nnd a no-brainer. Especially as the batch processes are not going to go away=\r\n any time soon, not having maintain two completely separate &quot;api&quot; infrastru=\r\nctures seem to be important.\n&gt; \n&gt; But this approach poses some challenges. =\r\nMore specifically I find it being difficult to 1) choose the level of restf=\r\nul-ness and granularity to aim for, and 2) if I go for what I find the most=\r\n &quot;logical&quot; and &quot;serendipitous&quot; fine granularity, I always seem to want to r=\r\nepresent references or links differently in the two scenarios.\n&gt; \n&gt; To move=\r\n in some kind of resource orientation for major concepts in the domain is e=\r\nasy, these concepts are already defined in the xml and generally are easy t=\r\no define. Reusing the xml fragments that represent a resource, would maybe =\r\nsimplified look something like (never mind the details :)\n&gt; \n&gt; ...\n&gt; &lt;dataS=\r\nets&gt;\n&gt;  &lt;dataSet id=3D&quot;1&quot;&gt;\n&gt;    &lt;... lots of info... /&gt;\n&gt;    &lt;dataElements&gt;=\r\n\n&gt;      &lt;dataElementRef id=3D&quot;1&quot;/&gt;\n&gt;    &lt;/dataElements&gt;\n&gt;  &lt;/dataSet&gt;\n&gt; &lt;/d=\r\nataSets&gt;\n&gt; &lt;dataElements&gt;\n&gt;  &lt;dataElement id=3D&quot;1&quot;&gt;\n&gt;    &lt;... lots of info.=\r\n.. /&gt;\n&gt;  &lt;/dataElement&gt;\n&gt; &lt;/dataElements&gt;\n&gt; ...\n&gt; \n&gt; What I would immediate=\r\nly want to do in the api context would be something like having separate re=\r\nsources for dataSet and dataElement and give represent them with fragments =\r\nlike this:\n&gt; \n&gt; &lt;dataSet id=3D&quot;1&quot; href=3D&quot;url&quot; &gt;\n&gt;  &lt;... lots of info... /&gt;=\r\n\n&gt;  &lt;dataElements&gt;\n&gt;    &lt;dataElementRef id=3D&quot;1&quot; href=3D&quot;url&quot; name=3D&quot;Descr=\r\niptive name suitable for link naming&quot; /&gt;\n&gt;  &lt;/dataElements&gt;\n&gt; &lt;/dataSet&gt;\n&gt; =\r\n\n&gt; &lt;dataElement id=3D&quot;1&quot; href=3D&quot;url&quot;&gt;\n&gt;  &lt;... lots of info... /&gt;\n&gt;  &lt;dataS=\r\nets&gt;\n&gt;    &lt;dataSet id=3D&quot;1&quot; href=3D&quot;url&quot; name=3D&quot;Descriptive name suitable =\r\nfor link naming&quot; /&gt;\n&gt;  &lt;/dataSets&gt;\n&gt; &lt;/dataElement&gt;\n&gt; \n&gt; So basically I wou=\r\nld want to \n&gt; - use links as references\n&gt; - it seems to be a good idea to i=\r\nnclude a minimal description of the resource for more human readable contex=\r\nts (think javascript with a json-variant of this xml)\n&gt; - add two way refer=\r\nencing\n&gt; \n&gt; Does this make sense? \n&gt; \n&gt; I am thinking this makes sense, and=\r\n I should be able to append the schema with optional definitions of the add=\r\ned structure. It would break an existing parser validating against the old =\r\nschema, but that should be possible to solve using some clever switching in=\r\n the internal implementation that could drop these extra elements (and name=\r\nspace declaration) when talking to legacy infrastructure.\n&gt; \n&gt; But, the xml=\r\n schema I would come up with would never the less not be the same as the co=\r\nmmon standard that is shared knowledge. For unknowing clients I could try t=\r\no add mechanisms for &quot;negotiating down&quot; to the  standard xml. But it could =\r\nbe difficult to know this for &quot;unknown&quot;/loosely coupled peer systems such t=\r\nhat in the end the &quot;standard&quot; xml will end up being used most of the time. =\r\nIt would seem that the potential &quot;serendipitous&quot; benefits of adding hyperme=\r\ndia and two-way linking would quickly end up being a relatively high cost w=\r\nith little benefit. Would it be better to just use the xml as defined in th=\r\ne standard and not aim for as much restfulness?\n&gt; \n&gt; Is it too granular?\n&gt; =\r\n\n&gt; I know this is really impossible to evaluate generally, but since all ex=\r\nisting infrastructure are working on larger chunks of xml, is there even a =\r\npoint in splitting the domain into the &quot;logical&quot; resources in the web api. =\r\nMight I just as well just move the existing &quot;import/export&quot; commands to the=\r\n web as course grained rpc style methods and save myself the trouble of try=\r\ning to combine a restful web api with legacy infrastructure that I won&#39;t ge=\r\nt rid of anyway?\n&gt; \n&gt; Or should I in the end just avoid trying to merge the=\r\n two &quot;apis&quot; and let them work on separate optimized models, taking the doub=\r\nle cost? \n&gt; \n&gt; I guess what I am asking, are there patterns to this kind of=\r\n challenge that can shed some light on how to approach it? It would seem to=\r\n be a kind of challenge others should have met as well :)\n&gt; \n&gt; Jo\n\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":289191104,"authorName":"Jan Algermissen","from":"Jan Algermissen &lt;algermissen1971@...&gt;","profile":"algermissen1971","replyTo":"SENDER","senderId":"SC3b5QESbg5lEYpO2ah6UAGtvmcztU9nIN1Qd9ulhADUvE8bS2Yg-SOJS81GGdfXCOQR1GqUd5Y85fzKdY7gBISnW-_4N9A_Ibs_qYo56AU","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Idea for a REST client","postDate":"1267353411","msgId":14942,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDYxREQ1RTM3LUNERkYtNEUyRC1CMzZGLUNBOEU5RDg0RjQwNUBtYWMuY29tPg==","inReplyToHeader":"PGE2YjJjYWY0MTAwMjI4MDIxMGk1NDg2Yzk3M3EzN2QxMzI4ZWI4MjhkMTNmQG1haWwuZ21haWwuY29tPg==","referencesHeader":"PDFBRDNCRjgyLTQ5ODItNEFDMC1CRjM1LTRCMTg0QkFGN0Y0NkBnbWFpbC5jb20+IDxBMDgzMDBERC00NTMzLTQ5NDctQTQxMy03MTg4MThDNDE3QTdAbWFjLmNvbT4gPGE2YjJjYWY0MTAwMjI4MDIxMGk1NDg2Yzk3M3EzN2QxMzI4ZWI4MjhkMTNmQG1haWwuZ21haWwuY29tPg=="},"prevInTopic":14940,"nextInTopic":14944,"prevInTime":14941,"nextInTime":14943,"topicId":14934,"numMessagesInTopic":11,"msgSnippet":"... But what does the client do if it does not receive application/vnd.myapplication.root? ... ah, see. Yes, that is the right direction. Suppose the","rawEmail":"Return-Path: &lt;algermissen1971@...&gt;\r\nX-Sender: algermissen1971@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 11700 invoked from network); 28 Feb 2010 10:37:11 -0000\r\nX-Received: from unknown (98.137.34.44)\n  by m4.grp.sp2.yahoo.com with QMQP; 28 Feb 2010 10:37:11 -0000\r\nX-Received: from unknown (HELO asmtpout023.mac.com) (17.148.16.98)\n  by mta1.grp.sp2.yahoo.com with SMTP; 28 Feb 2010 10:37:11 -0000\r\nMIME-version: 1.0\r\nContent-transfer-encoding: 7BIT\r\nContent-type: text/plain; charset=us-ascii\r\nX-Received: from [192.168.2.102] ([84.144.48.69])\n by asmtp023.mac.com (Sun Java(tm) System Messaging Server 6.3-8.01 (built Dec\n 16 2008; 32bit)) with ESMTPSA id &lt;0KYJ003HHS5GHH20@...&gt; for\n rest-discuss@yahoogroups.com; Sun, 28 Feb 2010 02:36:56 -0800 (PST)\r\nX-Proofpoint-Spam-Details: rule=notspam policy=default score=0 spamscore=0\n ipscore=0 phishscore=0 bulkscore=0 adultscore=0 classifier=spam adjust=0\n reason=mlx engine=5.0.0-0908210000 definitions=main-1002280035\r\nIn-reply-to: &lt;a6b2caf41002280210i5486c973q37d1328eb828d13f@...&gt;\r\nDate: Sun, 28 Feb 2010 11:36:51 +0100\r\nCc: Jan Vincent &lt;jvliwanag@...&gt;,\n REST Discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nMessage-id: &lt;61DD5E37-CDFF-4E2D-B36F-CA8E9D84F405@...&gt;\r\nReferences: &lt;1AD3BF82-4982-4AC0-BF35-4B184BAF7F46@...&gt;\n &lt;A08300DD-4533-4947-A413-718818C417A7@...&gt;\n &lt;a6b2caf41002280210i5486c973q37d1328eb828d13f@...&gt;\r\nTo: Mark Derricutt &lt;mark@...&gt;\r\nX-Mailer: Apple Mail (2.1077)\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Jan Algermissen &lt;algermissen1971@...&gt;\r\nSubject: Re: [rest-discuss] Idea for a REST client\r\nX-Yahoo-Group-Post: member; u=289191104; y=BR8KNUUHpCxukN29IQ1b34QNvEzw7hWvcfdNAU-_mohhN-tk8LKQuZ9O\r\nX-Yahoo-Profile: algermissen1971\r\n\r\n\nOn Feb 28, 2010, at 11:10 AM, Mark Derricutt wrote:\n\n&gt; Hi,\n&gt; \n&gt; Would it be more acceptable with something like this:\n&gt; \n&gt;   get_user_by_email(email) {\n&gt;     from(&quot;/&quot;)\n&gt;       .on(&quot;vnd.myapplication.root&quot;, 200) { |Root|\n&gt;         Root.follow(&quot;#users_link&quot;)\n&gt; \n&gt; In this minor modification, we&#39;re checking for successfully receiving content of a specific media type,\n\nBut what does the client do if it does not receive application/vnd.myapplication.root?\n\n&gt; then following a named link which (we shall assume) the media types documentation says will be present.\n&gt; \n&gt; My reading of HATEOAS  says we should only need to know the root URL for an API.  With such an API above, I could imagine having multiple on(mediatype, code) blocks for the various media types (or versions of media type) the client can handle.\n\nah, see. Yes, that is the right direction. Suppose the appication uses the media types A, B and C (client develoiper needs to know which types are used by server, otherwise it could not develop the client in the first place). The programming model is then to decide how to pursue the client&#39;s overall goal (e.g. to buy a book) for each of the possible reprsentation types (and status codes of course).\n\nDuring that process the client might adapt the evaluation rules, which reflects the client advancing through its own intermediate states while it is working towards its goal.\n\nThe really challanging part is to come up with a client side API that on the one hand exposes that programming model to force the client developer to apply it but on the other hand to make it intuitive enough to be usable.\n\nThe underlying issue really is to &#39;mediate&#39; between the two state machines (the one of the Web application and the one of the client working towards its goal).\n\nThink of a purchase at Amazon: you enter the site, look for a means to browse through the catalogue, pick an item, put it into the cart, go to check-out and purchase. Within that flow, you go through your own states that change how you interprete the next application state. You need to have reached your own &#39;watching at list of interesting items&#39; state to actually pick one.\n\nSuppose you entered Amazon with a bookmark of a certain item (maybe because that happened to be the top link in your history) - you interprete that application state differently as you would if you already had chosen that item. What you usually will do is go from the item where you enetered Amazon to the overview page or enter a search directly.\n\nSo instead of assuming the entry link will take you to the start page, in your mind you have several rules to interpret the initial application state: if it is the start page start browsing, if it is an item page, go to start page first and then start browsing.\n\nDoes that help?\n\n\nJan\n\n&gt; \n&gt; Would this be more acceptable in your mind?\n&gt; \n&gt; Mark\n&gt; \n&gt; \n&gt; -- \n&gt; Pull me down under...\n&gt; \n&gt; On Sun, Feb 28, 2010 at 2:21 AM, Jan Algermissen &lt;algermissen1971@...&gt; wrote:\n&gt; Jan\n&gt; \n&gt; On Feb 27, 2010, at 10:15 AM, Jan Vincent wrote:\n&gt; \n&gt; &gt;\n&gt; &gt;\n&gt; &gt; Hi guys,\n&gt; &gt;\n&gt; &gt; I wish to create a framework for accessing REST resources over HTTP. I wish to focus on xhtml Content-Type in particular. The idea is that the developer would provide instructions on how to get to the resource from a single URL.\n&gt; &gt;\n&gt; &gt; Implementation-wise however, the framework would provide all the necessary plumbing to take care of caching and what not.\n&gt; &gt;\n&gt; &gt; Consider three resources:\n&gt; &gt;\n&gt; &gt; Root Resource - primary URL (&quot;/&quot;), entry point for the service, has a link to the User List\n&gt; &gt; User List - lists all users, on GET, may accept a query string &quot;email&quot; to search for a specific user, contains link to the users&#39; respective profiles\n&gt; &gt; User Profile - the profile of a user\n&gt; &gt;\n&gt; &gt; In order to implement something like get_user_by_email, the developer would have to describe how to get from the Root Resource to the User Profile. In code, a developer using the framework would do something like:\n&gt; &gt;\n&gt; &gt; get_user_by_email(email) {\n&gt; &gt;   from(&quot;/&quot;)\n&gt; &gt;     .on(200) { |Root|\n&gt; &gt;       Root.follow(&quot;#users_link&quot;)\n&gt; &gt;         .on(200) { |Users|\n&gt; &gt;           Users.fill_in(&quot;#search_form&quot;, {&quot;email&quot;: email})\n&gt; &gt;             .on(200) { |SearchResult|\n&gt; &gt;                SearchResult ...get_first_result...\n&gt; &gt;                  .on(200) { |Profile|\n&gt; &gt;                    return profile_to_some_struct(Profile)\n&gt; &gt;                  }\n&gt; &gt;             }\n&gt; &gt;         }\n&gt; &gt;     }\n&gt; &gt; }\n&gt; &gt;\n&gt; &gt; I&#39;m still working on how to best express this intent as code, and it&#39;s pretty ugly now I must admit.\n&gt; \n&gt; The problem (from a RESTfulness POV) with this is that the code assumes a certain state machine of the application. If the server decides to change that state machine, the code will break.\n&gt; \n&gt; If the service publishes information that allows the client to make such assumptions as manifested by the code above, the service is not RESTful but is an &quot;HTTP-based Type I&quot; &lt;http://nordsc.com/ext/classification_of_http_based_apis.html#http-type-one&gt; (or &quot;HTTP-based Type II&quot;) API.\n&gt; \n&gt; If the server does not publish such information the code above just represents guess-work which would be worse because the coupling would actually be hidden inside the code.\n&gt; \n&gt; When you think about such a framework approach, keep in mind that it will lead to tightly coupled systems no matter how &quot;Webby&quot; the system looks. If the service evolves, the client will break.\n&gt; \n&gt; Whether this is actually a bad thing depends on the requirements - maybe long term evolvability has been traded for getting something started fast and maybe the expected system lifetime is so short that evolvability does not matter, but you need to be aware of this to make an informed decision.\n&gt; \n&gt; Jan\n&gt; \n&gt; \n&gt; \n&gt; \n&gt; &gt;\n&gt; &gt; However, the framework doesn&#39;t really execute the instructions by the developer directly. Instead, it uses its built in cache to get the result. From the example above, the framework would do things in reverse:\n&gt; &gt;\n&gt; &gt; 1. Is there a cache* of the result to a call to get_user_by_email(email)? If YES, return prior result, If NO, go to step 2\n&gt; &gt; 2. Is there a cache of the result to a call getting the search matches of a user given a specified email? If YES, using that result, go down the code -- following the link to the user profile, then returning the result. If NO, go to step 3.\n&gt; &gt; 3. Is there a cache of the list of users? If YES, go on and fill in the search form, etc. If NO, go to step 4\n&gt; &gt; 4. Is there a cache of the root resource? If YES, go back steps 3,2,1. If NO, get the root resource, and then go further back the steps.\n&gt; &gt;\n&gt; &gt; * When I say cached, I generally mean that there has been a prior call, and the result was cached AND the cache hasn&#39;t expired yet based on the server cache instructions\n&gt; &gt;\n&gt; &gt; The framework forms a tree of possible scenarios. It starts from the most optimistic test (step 1) on the leaf, and if it fails, goes back to its parent.\n&gt; &gt;\n&gt; &gt; I believe this would be useful especially if the applications that are going to be built don&#39;t follow the UI style of web pages following linked documents. Is this a HATEOAS respecting client? I&#39;d truly appreciate some inputs.\n&gt; &gt;\n&gt; &gt; FYI, I&#39;ll start development of an Erlang version at http://bitbucket.org/jvliwanag/restr/ . Though, there&#39;s nothing there yet now. Hehe.\n&gt; &gt;\n&gt; &gt; Jan Vincent Liwanag\n&gt; &gt; jvliwanag@...\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; \n&gt; -----------------------------------\n&gt;  Jan Algermissen, Consultant\n&gt;  NORD Software Consulting\n&gt; \n&gt;  Mail: algermissen@...\n&gt;  Blog: http://www.nordsc.com/blog/\n&gt;  Work: http://www.nordsc.com/\n&gt; -----------------------------------\n&gt; \n&gt; \n&gt; \n&gt; \n&gt; \n&gt; \n&gt; ------------------------------------\n&gt; \n&gt; Yahoo! Groups Links\n&gt; \n&gt; \n&gt; \n&gt; \n\n-----------------------------------\n Jan Algermissen, Consultant\n NORD Software Consulting\n\n Mail: algermissen@...\n Blog: http://www.nordsc.com/blog/\n Work: http://www.nordsc.com/\n-----------------------------------\n\n\n\n\n\n"}}
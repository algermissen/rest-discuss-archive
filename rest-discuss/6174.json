{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":87113616,"authorName":"Mike Dierken","from":"&quot;Mike Dierken&quot; &lt;mdierken@...&gt;","profile":"mdierken","replyTo":"SENDER","senderId":"4_93kTh_pzKMyzq5tYGDgqUqLV9RZJGWIz8Mwlm1CFCtyWADgUSMKXsLEn0C8XtIGMWyDjq6YtgdOneGafgEe0iI6f1rcBpap9jZ9A","spamInfo":{"isSpam":false,"reason":"12"},"subject":"RE: [rest-discuss] REST & Internal Integration","postDate":"1146378542","msgId":6174,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEJBWTEwMS1EQVYzRTU5QjcxOUIzRDg3REY1M0M0OUVEOEIwMEBwaHguZ2JsPg==","inReplyToHeader":"PDdFRDY5QzI3LTRGMEEtNDk2RC1BREFDLUU0MkVGMjFFQkJBMkBtYWMuY29tPg=="},"prevInTopic":6173,"nextInTopic":6175,"prevInTime":6173,"nextInTime":6175,"topicId":5992,"numMessagesInTopic":12,"msgSnippet":"Mike, Sorry I haven t responded sooner... To make up for it, I wrote a really long response. I don t have anything against JMS or messaging systems, they are","rawEmail":"Return-Path: &lt;mdierken@...&gt;\r\nX-Sender: mdierken@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 38046 invoked from network); 30 Apr 2006 06:29:01 -0000\r\nReceived: from unknown (66.218.66.217)\n  by m31.grp.scd.yahoo.com with QMQP; 30 Apr 2006 06:29:01 -0000\r\nReceived: from unknown (HELO hotmail.com) (64.4.56.75)\n  by mta2.grp.scd.yahoo.com with SMTP; 30 Apr 2006 06:29:01 -0000\r\nReceived: from mail pickup service by hotmail.com with Microsoft SMTPSVC;\n\t Sat, 29 Apr 2006 23:28:50 -0700\r\nMessage-ID: &lt;BAY101-DAV3E59B719B3D87DF53C49ED8B00@...&gt;\r\nReceived: from 207.202.171.254 by BAY101-DAV3.phx.gbl with DAV;\n\tSun, 30 Apr 2006 06:28:49 +0000\r\nX-Originating-Email: [mdierken@...]\r\nX-Sender: mdierken@...\r\nTo: &quot;&#39;Mike Herrick&#39;&quot; &lt;mherrick66@...&gt;\r\nCc: &lt;rest-discuss@yahoogroups.com&gt;\r\nDate: Sat, 29 Apr 2006 23:29:02 -0700\r\nMIME-Version: 1.0\r\nContent-Type: text/plain;\n\tcharset=&quot;us-ascii&quot;\r\nContent-Transfer-Encoding: 7bit\r\nX-Mailer: Microsoft Office Outlook, Build 11.0.5510\r\nX-MimeOLE: Produced By Microsoft MimeOLE V6.00.2900.2869\r\nThread-Index: AcZk40qvsPt/mUAkRpG9EF8JxMBdSAHNJeyg\r\nIn-Reply-To: &lt;7ED69C27-4F0A-496D-ADAC-E42EF21EBBA2@...&gt;\r\nX-OriginalArrivalTime: 30 Apr 2006 06:28:50.0868 (UTC) FILETIME=[58596F40:01C66C1F]\r\nX-eGroups-Msg-Info: 1:12:0:0\r\nFrom: &quot;Mike Dierken&quot; &lt;mdierken@...&gt;\r\nSubject: RE: [rest-discuss] REST & Internal Integration\r\nX-Yahoo-Group-Post: member; u=87113616; y=IvthtHZT7U0xdW6EZ3dqrIFXgk0wU_afyLQ67oVthBuGKkY\r\nX-Yahoo-Profile: mdierken\r\n\r\nMike,\nSorry I haven&#39;t responded sooner... To make up for it, I wrote a really long\nresponse.\n\nI don&#39;t have anything against JMS or messaging systems, they are great\ntools. And just like HTTP, they work wonders when used in the right\nsituation. This thread is interesting to me because there hasn&#39;t been much\ndiscussion about applying aspects of REST to a classical asynchronous\nmessaging based system. \nIn my opinion, there are a couple things that are similar between the two -\nsimple and common interactions for many kinds of applications (send message,\nreceive message, etc), payload formats independent of message framing, and\nso on. But there are a few things common in REST that I don&#39;t see in JMS or\nother messaging systems :\n\n1) application semantics : sending a message in REST means something\n(delete, modify, retrieve, etc), whereas sending a message in JMS or other\nmessaging systems is just sending a message (and it usually has unknown\nconsequences, which requires endless coordination to work out the details)\n\n2) resource identifiers : this sort of follows from being an application\nprotocol - the protocol is all about interacting with resources, which\nprovides a framework for modelling applications (above just moving bytes\nfrom point a to point b).\n\n3) hypertext (as the engine of application state) : this is one of the\nfacets of REST that took me the longest to put into practice, but has paid\noff very well. Using documents with tags that help pick out the resource\nidentifiers is invaluable in a dynamic, adaptive and configuration-free\nsystem. Many systems have dynamically retrieved configurations, and this\nprovides part of the benefit of hypertext, and when links (resource\nidentifiers that can be interacted with) are used a lot of config file\nprocessing becomes generalizable and just falls away. For example, at work\nwe recently built a large scale real-time data publishing system and the\nconsuming systems have a link to a &#39;directory service&#39;, which is an xml blob\nwith elements with links to the subjects to subscribe to, links to the\ncold-start data to bootstrap with and so on. The cold-start data is somewhat\nlarge, but by teaching the clients to &#39;just follow the links&#39;, the data\ncould be arbitrarily partitioned by the server. In addition, with a little\nthought you could put multiple links in there and have parallel streams\nbeing retrieved by the client - a good way to utilize all that bandwidth\njust laying around.\n\n\n&gt; I spend most of my time working on a system that has approximately 50\n&gt; services. The services are pretty stupid, all they know is\n&gt; they get an event XML input. They typically respond with an\n&gt; XML event. They listen on a set of JMS Topics or a Topic\n&gt; pattern (e.g., COMPANYNAME.LINEOFBUSINESS.NOUN.*).\n&gt; They also typically respond to set of Topics. What I like\n&gt; about JMS in the system is the guaranteed delivery & durable\n&gt; subscriptions. The service impls don&#39;t care about the network\n&gt; because they know that JMS is there. \nThese are extremely useful tools - durable subscriptions, guaranteed\ndelivery, etc. But from my point of view the &#39;service&#39; isn&#39;t all that\n&#39;stupid&#39;. The service is everything the outside world would see, and that\nincludes those handy things like disconnected use and reliability. The code\nthat plugs into this is simplified by that environment, which is hufely\nvaluable. I&#39;m not a messaging or protocol expert, but I always thought that\nHTTP over TCP/IP provided guaranteed delivery within the connection - I&#39;d\nlike to hear from others on how we should consider the &#39;guarantee-ness&#39; of\nHTTP (within a connection). The extra complexity of guaranteed delivery\noutside of a TCP/IP connection provides support for the disconnected use\ncases you mention, and I think this would be a great thing for a Web-scale\nsystem to provide, but I don&#39;t see it happening yet and I&#39;m not sure why. \n\n\n&gt; Also, durable subscriptions are great [...]\n&gt; I would really like to see an HTTP based pub/sub like this. \n&gt; Idon&#39;t know enough about REST to know if it would be evil to do. \n&gt; I babbled about that a bit more here:\n&gt; http://fuzzypanic.blogspot.com/2006/03/httppox-xml-based-eda-pub-sub.html\n&gt; Let me know if you know of anything.\nThere have been a few companies doing that - you found mod_pubsub already,\nwhich was a spin-out from KnowNow (which I helped start up many years ago,\nfor a short period of time). Supposedly Renkoo may be doing work to make\nmod-pubsub live again. The toy &#39;messaging&#39; web app I linked to last time\nshows that it&#39;s very easy to build messaging with pure HTTP, and with modern\nsystems supporting non-blocking IO, it&#39;s not too hard to be efficient. The\nhard part is the pump that keeps the messages flowing along the durable\nsubscriptions, dealing with cycles and other plumbing issues.\n\nYou ask a very good question though - is pubsub compatible with REST? If\nREST is about application level semantics, you could model messages,\nsubscriptions, etc. as resources and go that route. But then what are the\nmessages about? How are those raised to the application level so that common\nsemantics can be applied?\n\n\n&gt; Sure, but that block means something typically - it means the\n&gt; message was persisted so the client doesn&#39;t have to ferret it\n&gt; away just in case something bad happens later. \n&gt; With Web Style, you can do that too - my point is you have to do that\n&gt; yourself (client ferret away the data that was PUT/POST).\nI see this as partly a difference in whether the client host or the server\nhost has some persistent storage. If there is no client persistent storage,\nthen the client application logic needs to know when the server has taken\nhold of the data in some persistent fashion (if that&#39;s the goal in that\nsituation). The other part is how well the application behaves in the face\nof an outage or disconnection - picking up where you left off is harder if\nthe application doesn&#39;t store the state as it makes progress. My hunch is\nthat making progress when outbound messages are not being delivered isn&#39;t a\nhuge win most of the time - if there was work that could be accomplished\nwithout outbound network traffic, then it should be accomplished regardless\nof the messaging style.\n\n\n&gt; Nope, I mean make pub/sub more RESTful. \n&gt; Like I said, I don&#39;t know enough about REST principals to know if \n&gt; this is evil or not. I have a decent messaging middleware product today. \n&gt; I&#39;m happy with it - I just want to know if its overkill or not or\n&gt; if there is a simpler way. If some of my integration types\n&gt; are best handled via JMS, fine with me. I just want to ask\n&gt; the &quot;stupid question&quot; - to make sure I&#39;m not thinking JMS is\n&gt; better then it is.\nJMS is fine. I have to ask though, how often do you use JMS to integrate\nwith groups outside your control, or outside your company?\n\n&gt; &gt; Here is a sample app I wrote a while back that does what you are talking\nabout : \n&gt; &gt;\nhttp://www.searchalert.net:8080/dierken/events/chat.html?topic=rest-discuss\n&gt; &gt; The underlying system holds messages here:\nhttp://www.searchalert.net:8080/xmlrouter/msgs/rest-discuss\n&gt; So what is on the server - is there messaging behind it?\nNope, just a 50 line servlet and the messages in-memory in a linked list.\n\n\n\n&gt; &gt; Are you sure you didn&#39;t mean N+1 responses?\n&gt; I&#39;m talking about a client sending 1 request, having N\n&gt; services subscribe and send a response to the client.\nI was kidding. The issue I was alluding to is - how do you know you&#39;ve\nreceived all the messages or if there is still one more straggler? The\npubsub approach is &#39;supposed&#39; to be about loosely coupled systems, but if\nthe publisher has to change to meet the specifications of each consumer,\nthen that loose coupling has just tightened.\n\n\n"}}
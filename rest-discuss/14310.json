{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":289191104,"authorName":"Jan Algermissen","from":"Jan Algermissen &lt;algermissen1971@...&gt;","profile":"algermissen1971","replyTo":"SENDER","senderId":"5Gc4EKmbgr2CyyhaOB-foZGGN4IPmVUdtxxEFY89ZFnmmGtEqia3h5Deeqv40-LFDAX2H3nxrU4a96x_ZqIeXVfSzy-vzRUlLe5kChYg4co","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Re: RESTful M2M Systems and Resource Typing","postDate":"1261430319","msgId":14310,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEVFQTg0RTA5LTlFNDctNDEyNy04OUQzLTBFOTVENDlDMkFFREBtYWMuY29tPg==","inReplyToHeader":"PGRlNzBiMzlkMDkxMjIxMTExOXMxODhjYThkNHM1YmU0ZGFkMGI3MGUxNTA3QG1haWwuZ21haWwuY29tPg==","referencesHeader":"PGhnbnBmaCtwcGZrQGVHcm91cHMuY29tPiA8MjZERUVBQTUtNTJCMi00QzQxLTlENDAtMEQ3MTZEMDFGMDc0QG1hYy5jb20+IDxkZTcwYjM5ZDA5MTIyMTExMTlzMTg4Y2E4ZDRzNWJlNGRhZDBiNzBlMTUwN0BtYWlsLmdtYWlsLmNvbT4="},"prevInTopic":14306,"nextInTopic":14311,"prevInTime":14309,"nextInTime":14311,"topicId":14156,"numMessagesInTopic":134,"msgSnippet":"Noah, (see below), ... I is usually not that negative on the open Web because the overall expectations are not that strict; people allways plan for any kinds","rawEmail":"Return-Path: &lt;algermissen1971@...&gt;\r\nX-Sender: algermissen1971@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 24166 invoked from network); 21 Dec 2009 21:18:49 -0000\r\nX-Received: from unknown (66.196.94.107)\n  by m11.grp.re1.yahoo.com with QMQP; 21 Dec 2009 21:18:49 -0000\r\nX-Received: from unknown (HELO asmtpout013.mac.com) (17.148.16.88)\n  by mta3.grp.re1.yahoo.com with SMTP; 21 Dec 2009 21:18:48 -0000\r\nMIME-version: 1.0\r\nContent-type: text/plain; charset=ISO-8859-1; format=flowed; delsp=yes\r\nX-Received: from [192.168.2.102] ([84.144.117.28])\n by asmtp013.mac.com (Sun Java(tm) System Messaging Server 6.3-8.01 (built Dec\n 16 2008; 32bit)) with ESMTPSA id &lt;0KV00033YTV31440@...&gt; for\n rest-discuss@yahoogroups.com; Mon, 21 Dec 2009 13:18:45 -0800 (PST)\r\nCc: Jorn Wildt &lt;jw@...&gt;, rest-discuss@yahoogroups.com\r\nMessage-id: &lt;EEA84E09-9E47-4127-89D3-0E95D49C2AED@...&gt;\r\nTo: Noah Campbell &lt;noahcampbell@...&gt;\r\nIn-reply-to: &lt;de70b39d0912211119s188ca8d4s5be4dad0b70e1507@...&gt;\r\nContent-transfer-encoding: quoted-printable\r\nDate: Mon, 21 Dec 2009 22:18:39 +0100\r\nReferences: &lt;hgnpfh+ppfk@...&gt;\n &lt;26DEEAA5-52B2-4C41-9D40-0D716D01F074@...&gt;\n &lt;de70b39d0912211119s188ca8d4s5be4dad0b70e1507@...&gt;\r\nX-Mailer: Apple Mail (2.936)\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Jan Algermissen &lt;algermissen1971@...&gt;\r\nSubject: Re: [rest-discuss] Re: RESTful M2M Systems and Resource Typing\r\nX-Yahoo-Group-Post: member; u=289191104; y=rLeSLtgqS57rhW2leOr5mrsHLSKx85MpuR4Mo98u8pWIRjS-91d0Gw_Q\r\nX-Yahoo-Profile: algermissen1971\r\n\r\nNoah,\n\n(see below),\n\nOn Dec 21, 2009, at 8:19 PM, Noah Campbell wrote:\n\n&gt; &quot;=\r\nAtomPub for example enables the client *implementor* to assume that  \n&gt; a G=\r\nET on a collection will return an Atom feed document.&quot;\n&gt;\n&gt; To your prior po=\r\nint, something is broken, but what?  Is it the  \n&gt; architectural style (by =\r\nasking it on this mailing list it may be  \n&gt; that you think it is)?  Is it =\r\nthe transport HTTP?  Is it the  \n&gt; specification?  Is it the implementor of=\r\n the server or the client?   \n&gt; Is it something else?\n&gt;\n&gt; You focus on the =\r\nassumption being negative and rightly so, but lets  \n&gt; be formal about what=\r\n an assumption is.  You&#39;ve alluded to an  \n&gt; assumption not met as negative=\r\n.\n\nI is usually not that negative on the open Web because the overall  \nexp=\r\nectations are not that strict; people allways plan for any kinds of  \nchang=\r\nes to happen and REST advantage here is that the uniform  \ninterface enable=\r\ns the communication (the talking to each other) to  \nsucceed even if there =\r\nis an error. Instead of everything falling apart  \nthe client user or devel=\r\noper can pick up the clue (e.g. the 406 body)  \nand follow her nose to fix =\r\nthings.\n\nBut this is a model that is very hard to sell inside the enterpris=\r\ne  \nbecause the business level contracts require a certain degree of  \ncert=\r\nainty (e.g. SLAs). Saying &quot;hey, if business transactions suddenly  \nstop wo=\r\nrking, look at the lock file and see what the service owner  \nsuggested as =\r\na fix. Nah, this will not happen evry often, just be  \nprepared for it in a=\r\nny case&quot;.\n\nOTH, it might be the price to pay for the evolvability extreme o=\r\nf not  \nneeding any kind of out of band communication between client and  \n=\r\nserver developer at all. Possibly, if you compare investment in time  \nand =\r\ntravel resources etc. involved in discussing interfaces of the  \nSOAP style=\r\n with the cost of some missing transactions it might even  \nmake a compelli=\r\nng case. (Like airline rather pay customers some money  \nfor overbooked fli=\r\nghts than to make sure that every passenger  \ndefinitely gets a seat. The l=\r\natter just costs less).\n\nThis would lead to &quot;If you are going to adopt REST=\r\n with all the  \nbenefits do it all the way through and believe that the bus=\r\niness level  \nharm occasionally done by evolution costs far less than runni=\r\nng a SOAP  \narchitecture in the long run.\n\n&gt; If I had to translate this int=\r\no code it would look like this:\n&gt;\n&gt; fread (buffer, 1, lSize, pFile)\n&gt;\n&gt; The=\r\nre is an assumption here given all the variables are initialized  \n&gt; correc=\r\ntly.  Do you see it?\n&gt;\n&gt; The return value is not checked.  The read may not=\r\n have read all the  \n&gt; data in the file in this particular call.  Who is th=\r\ne guilty party?   \n&gt; Is it the architecture, POSIX?  Is it the specificatio=\r\nn, http://www.cplusplus.com/reference/clibrary/cstdio/fread/? \n&gt;  Is it the=\r\n implementation, GNU? Is it the implementor?  I&#39;d argue  \n&gt; it&#39;s the implem=\r\nentor.  C has a long established history of using  \n&gt; return values to indi=\r\ncate success (as well as return values...but  \n&gt; errno provides a (kludgy?)=\r\n workaround).\n&gt;\n&gt; I would urge an implementer to understand the architectur=\r\ne style,  \n&gt; the specification, the implementation and focus very hard on m=\r\naking  \n&gt; sure assumptions like the above are not scattered through out the=\r\n  \n&gt; code.  Since REST is about two remote systems communicating, I&#39;d  \n&gt; a=\r\nrgue that any client must validate any assumption before  \n&gt; proceeding, in=\r\ncluding checking the error code.  If not, the client  \n&gt; will be be brittle=\r\n, prone to error, and cost more in ongoing  \n&gt; maintenance.  Good, robust a=\r\npplications assume nothing.\n&gt;\n&gt; Let&#39;s assume for a moment the AtomPub spec =\r\nrepresents the typical  \n&gt; spec for a service.  It assumes RESTful architec=\r\ntural style using  \n&gt; the HTTP transport.  To your point, the service must =\r\nbehave has  \n&gt; specified for any goal to be obtained.   Aspects of the http=\r\n  \n&gt; transport &quot;leak&quot; into the interaction even those it has not been  \n&gt; s=\r\npecified.  The spec doesn&#39;t call out all the different response  \n&gt; codes a=\r\nnd how to handle them, it relies on those familiar with the  \n&gt; HTTP transp=\r\nort to deal with those gracefully.  Case in point, if you  \n&gt; do:\n&gt;\n&gt; GET /=\r\n\n&gt; Accept: application/atomsvc+xml\n&gt;\n&gt; and get a\n&gt;\n&gt; 307: Moved Temporarily=\r\n\n&gt; Location: /svc.atom\n&gt;\n&gt; or\n&gt;\n&gt; 305: Use Proxy\n&gt; Location: /proxy/svc.ato=\r\nm\n&gt;\n&gt; or\n&gt;\n&gt; 401: Unauthorized\n&gt; www-authenticate: basic\n&gt;\n&gt; Is this an err=\r\nor?\n&gt;\n&gt; Roy thesis doesn&#39;t explicitly say yes or no.  However, the argument=\r\n  \n&gt; for a uniform interface is that the intermediary can participate  \n&gt; w=\r\nithout affecting the remote call.  I&#39;ll extrapolate a little in  \n&gt; that a =\r\nuniform interface provides a common behavior that permeates  \n&gt; all levels =\r\nof an architecture, including the implementation.  The  \n&gt; testers should b=\r\ne not be surprised to see the 3 response outline  \n&gt; above and should be ab=\r\nle to accommodate appropriately.\n&gt;\n\nAgreed and I see your point. But (sorry=\r\n :-) I&#39;d expect an HTTP client  \nconnector to be able to follow these redir=\r\nects or authenticate on its  \nown without even propagating it to the next l=\r\nevel. Most client  \nconnectors do so (depending on config of course). So, I=\r\n&#39;d limit what  \nwe are talking about to steady states and leave out the tra=\r\nnsient ones.\n\nHowever, I understand you to say that an AtomPub client imple=\r\nmentation  \nthat uses an HTTP client connector must of course implement all=\r\n of  \nHTTP. And yes, I agree that the 406 must be handled correctly. But  \n=\r\nthen? there is no possible recovery from the broken expectation to  \nreceiv=\r\ne an Atom feed.\n\n\n&gt; Hopefully this response helps move the discussion forwa=\r\nrd :)\n\nThanks for keeping up with this. I am just sorry that I seem to be s=\r\no  \nunable to get this accross.\n\nJan\n\n\n&gt;\n&gt; -Noah\n&gt;\n&gt; On Mon, Dec 21, 2009 a=\r\nt 4:35 AM, Jan Algermissen &lt;algermissen1971@... \n&gt; &gt; wrote:\n&gt;\n&gt; On Dec =\r\n21, 2009, at 1:25 PM, Jorn Wildt wrote:\n&gt;\n&gt; &gt; Oh, lets backtrack a bit. You=\r\n said earlier on:\n&gt; &gt;\n&gt; &gt;&gt; In the enterprise people want to develop clients=\r\n and services in\n&gt; &gt;&gt; parallel, shich rules out client design by inspecting=\r\n the runtime\n&gt; &gt;&gt; behavior of a service.\n&gt; &gt;\n&gt; &gt; Then I said: you need not =\r\nexpect at runtime, you can have a mock. To\n&gt; &gt; this you answered: no, you b=\r\nuild clients on specs.\n&gt; &gt;\n&gt; &gt; What I was trying to say was: if you build c=\r\nlients on specs and RFC\n&gt; &gt; 5023 (application/atomsrv+xml) is a spec, then =\r\nwhat is keeping you\n&gt; &gt; from building any kind of REST client on similar sp=\r\necs for other\n&gt; &gt; media types? If both server and client agrees on the medi=\r\na type spec\n&gt; &gt; then both can be built individually and simultaneously.\n&gt;\n&gt;=\r\n\n&gt; No, that is all fine and I agree. I am questioning the RESTfulness of\n&gt; =\r\nspecs that allow the clients to make assumptions about the hypermedia\n&gt; it =\r\nwill receive at some point in the interaction. AtomPub for example\n&gt; enable=\r\ns the client *implementor* to assume that a GET on a collection\n&gt; will retu=\r\nrn an Atom feed document. This is equivalent to making an\n&gt; assumption abou=\r\nt the application state to be in after the GET to the\n&gt; collection.\n&gt;\n&gt; And=\r\n I am trying to say that M2M clients (besides passibe, server\n&gt; driven craw=\r\nlers) can only be built when such contracts are in place.\n&gt;\n&gt; Jan\n&gt;\n&gt;\n&gt; &gt;\n&gt;=\r\n &gt; /J=F8rn\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt; ------------------------------------\n&gt; &gt;\n&gt; &gt; Yah=\r\noo! Groups Links\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt;\n&gt; --------------------------------------\n&gt; J=\r\nan Algermissen\n&gt;\n&gt; Mail: algermissen@...\n&gt; Blog: http://algermissen.blo=\r\ngspot.com/\n&gt; Home: http://www.jalgermissen.com\n&gt; --------------------------=\r\n------------\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt; ------------------------------------\n&gt;\n&gt; Yahoo! Gr=\r\noups Links\n&gt;\n&gt;\n&gt;\n&gt;\n\n--------------------------------------\nJan Algermissen\n=\r\n\nMail: algermissen@...\nBlog: http://algermissen.blogspot.com/\nHome: htt=\r\np://www.jalgermissen.com\n--------------------------------------\n\n\n\n\n"}}
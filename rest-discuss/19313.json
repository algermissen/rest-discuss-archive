{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":460230079,"authorName":"Brian Craft","from":"Brian Craft &lt;craft.brian@...&gt;","profile":"firstbakingbook","replyTo":"SENDER","senderId":"P5lmQJBZcP0uc6dow2W3OwXE_xaMfl3VMz87d3HhGIAIHOvIXUOz_LzcmQblaV3uUdYkspxVp7BgB3NRzo48B6ZfhwLmDtHj-hw","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] the meaning of stateless","postDate":"1366564363","msgId":19313,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PENBR1ZiWEw0QWh0QkJKS1VCQUx2WXFBcTdHSnNnQkZLeFctN1pYWDVXM0c3OWtjSmJUUUBtYWlsLmdtYWlsLmNvbT4=","inReplyToHeader":"PENBUFdfOG03bmtZV3lRZTVmUWVqWUJ0aTl1TlUtdTZ3WGZnZ0VjTEhuOUZYRytNTm01QUBtYWlsLmdtYWlsLmNvbT4=","referencesHeader":"PENBR1ZiWEw2X09IT2hPVFMwa2YwU0tjV0EtPXpLWWJLTFFXVldmQm9US09tZzd2WHhFQUBtYWlsLmdtYWlsLmNvbT4JPENBUFdfOG03bmtZV3lRZTVmUWVqWUJ0aTl1TlUtdTZ3WGZnZ0VjTEhuOUZYRytNTm01QUBtYWlsLmdtYWlsLmNvbT4="},"prevInTopic":19310,"nextInTopic":19314,"prevInTime":19312,"nextInTime":19314,"topicId":19309,"numMessagesInTopic":86,"msgSnippet":"Storing session information isn t negotiable, and is orthogonal to API design. For example, no one sits down to design an API and says Oh, a restful API is","rawEmail":"Return-Path: &lt;craft.brian@...&gt;\r\nX-Sender: craft.brian@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 70945 invoked by uid 102); 21 Apr 2013 17:12:45 -0000\r\nX-Received: from unknown (HELO mta1.grp.bf1.yahoo.com) (10.193.84.135)\n  by m1.grp.bf1.yahoo.com with SMTP; 21 Apr 2013 17:12:45 -0000\r\nX-Received: (qmail 2371 invoked from network); 21 Apr 2013 17:12:44 -0000\r\nX-Received: from unknown (HELO mail-lb0-f175.google.com) (209.85.217.175)\n  by mta1.grp.bf1.yahoo.com with SMTP; 21 Apr 2013 17:12:44 -0000\r\nX-Received: by mail-lb0-f175.google.com with SMTP id o10so4966546lbi.20\n        for &lt;rest-discuss@yahoogroups.com&gt;; Sun, 21 Apr 2013 10:12:44 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.112.161.97 with SMTP id xr1mr11855619lbb.15.1366564364074;\n Sun, 21 Apr 2013 10:12:44 -0700 (PDT)\r\nX-Received: by 10.114.16.68 with HTTP; Sun, 21 Apr 2013 10:12:43 -0700 (PDT)\r\nIn-Reply-To: &lt;CAPW_8m7nkYWyQe5fQejYBti9uNU-u6wXfggEcLHn9FXG+MNm5A@...&gt;\r\nReferences: &lt;CAGVbXL6_OHOhOTS0kf0SKcWA-=zKYbKLQWVWfBoTKOmg7vXxEA@...&gt;\n\t&lt;CAPW_8m7nkYWyQe5fQejYBti9uNU-u6wXfggEcLHn9FXG+MNm5A@...&gt;\r\nDate: Sun, 21 Apr 2013 10:12:43 -0700\r\nMessage-ID: &lt;CAGVbXL4AhtBBJKUBALvYqAq7GJsgBFKxW-7ZXX5W3G79kcJbTQ@...&gt;\r\nTo: mca &lt;mca@...&gt;\r\nCc: rest-discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Type: multipart/alternative; boundary=001a11c33af07bc58304dae20f8c\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Brian Craft &lt;craft.brian@...&gt;\r\nSubject: Re: [rest-discuss] the meaning of stateless\r\nX-Yahoo-Group-Post: member; u=460230079; y=gg5KlO-vYg85C_XVZozw4QWfG0TdWZcIp8-jaKA22Q6FPGslS0_hfluGnkpDbn7YuSA7dsrzMSnkWmg\r\nX-Yahoo-Profile: firstbakingbook\r\n\r\n\r\n--001a11c33af07bc58304dae20f8c\r\nContent-Type: text/plain; charset=ISO-8859-1\r\n\r\nStoring session information isn&#39;t negotiable, and is orthogonal to API\ndesign. For example, no one sits down to design an API and says &quot;Oh, a\nrestful API is stateless, so I can&#39;t use HTTPS, because it stores session\nstate on the server.&quot; The API design occurs independent of the statefulness\nof the communication, which is dictated  by security concerns.  And the API\ncan be redeployed without change to HTTP, so the statefulness had no\nbearing on it.\n\nThe FTP example is more enlightening.  It&#39;s only slightly different than\nthe &quot;query by POST&quot; technique that is said to be RESTful. The main\ndifference is that in &quot;query by POST&quot; an id for the query is returned by\nthe server. So in the FTP example, if the server returned an id for the\ntarget directory of a &quot;cd&quot;, and future requests referenced this id, would\nit then be &quot;stateless&quot; and &quot;RESTful&quot;? And if so, how does that jibe with\nthe claims in the dissertation that statelessness means &quot;session state is\nkept entirely on the client&quot;, and &quot;Scalability is improved because not\nhaving to store state between requests allows the server component to\nquickly free resources and further simplifies implementation.&quot; The server\ndoes, in fact,  store and manage resources for the session.\n\n\nOn Sat, Apr 20, 2013 at 4:51 PM, mca &lt;mca@...&gt; wrote:\n\n&gt; Fielding&#39;s definition of stateless is:\n&gt;\n&gt; &quot;[C]ommunication must be stateless in nature ... such that each request\n&gt; from client to server must contain all of the information necessary to\n&gt; understand the request, and cannot take advantage of any stored context on\n&gt; the server.&quot;[1]\n&gt;\n&gt; This constraint is not about how resources state is changed on the server\n&gt; (clients send representations to the server) or how application state\n&gt; changed on the client (servers send representations to the client).\n&gt; Instead, this constraint is about the nature of the messages\n&gt; (representations via entity-bodies + metadata via headers) that are sent\n&gt; between client and server when changing each other&#39;s state.\n&gt;\n&gt; Each message stands alone and does not depend upon previous messages.\n&gt;\n&gt; &lt;snip&gt;\n&gt; Perhaps to clarify what is meant in REST by &quot;stateless&quot; someone could give\n&gt; examples of things that *aren&#39;t* &quot;stateless&quot;, and contrast them to REST.\n&gt; &lt;/snip&gt;\n&gt;\n&gt; HTTP servers that maintain persistent session state for each client during\n&gt; the life of the client-server interaction set are not stateless.\n&gt;\n&gt; FTP servers that allow clients to change directories relative to the\n&gt; results of a directory change in a previous request (cd ../..) are not\n&gt; stateless.\n&gt;\n&gt; Hopefully, this gives you some helpful ideas.\n&gt;\n&gt;\n&gt; [1]\n&gt; http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm#sec_5_1_3\n&gt;\n&gt;\n&gt;\n&gt; mca\n&gt; +1.859.757.1449\n&gt; skype: mca.amundsen\n&gt; http://amundsen.com/blog/\n&gt; http://twitter.com/mamund\n&gt; https://github.com/mamund\n&gt; http://www.linkedin.com/in/mikeamundsen\n&gt;\n&gt;\n&gt;\n&gt; On Sat, Apr 20, 2013 at 10:33 AM, Brian Craft &lt;craft.brian@...&gt;wrote:\n&gt;\n&gt;&gt;\n&gt;&gt;\n&gt;&gt; I don&#39;t understand how the word &quot;stateless&quot; is being used in REST.\n&gt;&gt; Obviously POST and PUT create state on the server. Obviously, requests\n&gt;&gt; after a state change depend on that state change (e.g. by using a URL that\n&gt;&gt; was not valid before the state change).\n&gt;&gt;\n&gt;&gt; I can almost live with this usage of &quot;stateless&quot; for persistent objects\n&gt;&gt; stored on the server, because it can be thought of as not being &quot;session\n&gt;&gt; state&quot;: it lasts longer than a session. But in any moderately complex web\n&gt;&gt; app, if you try to design a REST API you will quickly hit GET size limits\n&gt;&gt; when doing complex queries. And then the suggestion is to do something like\n&gt;&gt; POST the query parameters, returning a Location header for a &quot;query&quot; object\n&gt;&gt; that can be fetched with GET. How is that not storing session data on the\n&gt;&gt; server? How is that different from non-REST solutions?\n&gt;&gt;\n&gt;&gt; There are three obvious differences between POSTing a query and just\n&gt;&gt; generically using POST instead of GET. POSTing a query requires two\n&gt;&gt; round-trips to the server, bad for latency. POSTing a query and using a\n&gt;&gt; Location header limits the response to the creation of a single object,\n&gt;&gt; which is fine for 1990&#39;s full-page-load design, but is unrealistic for any\n&gt;&gt; moderately complex ajax app, where an API call will result in the creation\n&gt;&gt; of multiple objects (e.g. creating related images). And POSTing a query\n&gt;&gt; requires the tracking of large numbers of transient &quot;query&quot; objects, hugely\n&gt;&gt; complicating both client and server, the very thing REST is supposed to\n&gt;&gt; avoid.\n&gt;&gt;\n&gt;&gt; Perhaps to clarify what is meant in REST by &quot;stateless&quot; someone could\n&gt;&gt; give examples of things that *aren&#39;t* &quot;stateless&quot;, and contrast them to\n&gt;&gt; REST.\n&gt;&gt;\n&gt;&gt;\n&gt;&gt; \n&gt;\n&gt;\n&gt;\n\r\n--001a11c33af07bc58304dae20f8c\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;div dir=3D&quot;ltr&quot;&gt;Storing session information isn&#39;t negotiable, and is o=\r\nrthogonal to API design. For example, no one sits down to design an API and=\r\n says &quot;Oh, a restful API is stateless, so I can&#39;t use HTTPS, becau=\r\nse it stores session state on the server.&quot; The API design occurs indep=\r\nendent of the statefulness of the communication, which is dictated =A0by se=\r\ncurity concerns. =A0And the API can be redeployed without change to HTTP, s=\r\no the statefulness had no bearing on it.&lt;div&gt;\n&lt;br&gt;&lt;/div&gt;&lt;div style&gt;The FTP =\r\nexample is more enlightening. =A0It&#39;s only slightly different than the =\r\n&quot;query by POST&quot; technique that is said to be RESTful. The main di=\r\nfference is that in &quot;query by POST&quot; an id for the query is return=\r\ned by the server. So in the FTP example, if the server returned an id for t=\r\nhe target directory of a &quot;cd&quot;, and future requests referenced thi=\r\ns id, would it then be &quot;stateless&quot; and &quot;RESTful&quot;? And i=\r\nf so, how does that jibe with the claims in the dissertation that stateless=\r\nness means &quot;session state is kept entirely on the client&quot;, and &q=\r\nuot;Scalability is improved because not having to store state between reque=\r\nsts allows the server component to quickly free resources and further simpl=\r\nifies implementation.&quot; The server does, in fact, =A0store and manage r=\r\nesources for the session.&lt;/div&gt;\n&lt;/div&gt;&lt;div class=3D&quot;gmail_extra&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;d=\r\niv class=3D&quot;gmail_quote&quot;&gt;On Sat, Apr 20, 2013 at 4:51 PM, mca &lt;span dir=3D&quot;=\r\nltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:mca@...&quot; target=3D&quot;_blank&quot;&gt;mca@amundsen=\r\n.com&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;ma=\r\nrgin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex&quot;&gt;\n&lt;div dir=3D&quot;l=\r\ntr&quot;&gt;&lt;font face=3D&quot;arial, helvetica, sans-serif&quot;&gt;Fielding&#39;s definition o=\r\nf stateless is:&lt;/font&gt;&lt;div&gt;&lt;font face=3D&quot;arial, helvetica, sans-serif&quot;&gt;&lt;br&gt;=\r\n&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=3D&quot;arial, helvetica, sans-serif&quot;&gt;&quot;[C]&lt;spa=\r\nn style&gt;ommunication must be stateless in nature ...&lt;/span&gt;&lt;span style&gt;=A0s=\r\nuch that each request from client to server must contain all of the informa=\r\ntion necessary to understand the request, and cannot take advantage of any =\r\nstored context on the server.&quot;[1]&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;\n\n\n&lt;div&gt;&lt;span sty=\r\nle&gt;&lt;font face=3D&quot;arial, helvetica, sans-serif&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div=\r\n&gt;&lt;font color=3D&quot;#000000&quot; face=3D&quot;arial, helvetica, sans-serif&quot;&gt;This constra=\r\nint is not about how resources state is changed on the server (clients send=\r\n representations to the server) or how application state changed on the cli=\r\nent (servers send representations to the client). Instead, this constraint =\r\nis about the nature of the messages (representations via entity-bodies + me=\r\ntadata via headers) that are sent between client and server when changing e=\r\nach other&#39;s state.&lt;/font&gt;&lt;/div&gt;\n\n\n&lt;div&gt;&lt;font color=3D&quot;#000000&quot; face=3D&quot;=\r\narial, helvetica, sans-serif&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=3D&quot;#000000&quot;=\r\n face=3D&quot;arial, helvetica, sans-serif&quot;&gt;Each message stands alone and does n=\r\not depend upon previous messages.=A0&lt;/font&gt;&lt;/div&gt;\n\n\n&lt;div&gt;&lt;font color=3D&quot;#00=\r\n0000&quot; face=3D&quot;arial, helvetica, sans-serif&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;snip&=\r\ngt;&lt;/div&gt;&lt;div&gt;&lt;div class=3D&quot;im&quot;&gt;&lt;div dir=3D&quot;ltr&quot; style=3D&quot;font-family:arial=\r\n,sans-serif;font-size:12.727272033691406px&quot;&gt;Perhaps to clarify what is mean=\r\nt in REST by &quot;stateless&quot; someone could give examples of things th=\r\nat *aren&#39;t* &quot;stateless&quot;, and contrast them to REST.&lt;/div&gt;\n\n\n&lt;=\r\n/div&gt;&lt;div style=3D&quot;font-family:arial,sans-serif;font-size:12.72727203369140=\r\n6px&quot;&gt;&lt;/snip&gt;&lt;/div&gt;&lt;div style=3D&quot;font-family:arial,sans-serif;font-siz=\r\ne:12.727272033691406px&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=3D&quot;font-family:arial,sans-seri=\r\nf;font-size:12.727272033691406px&quot;&gt;\n\n\nHTTP servers that maintain persistent =\r\nsession state for each client during the life of the client-server interact=\r\nion set are not stateless.=A0&lt;/div&gt;&lt;div style=3D&quot;font-family:arial,sans-ser=\r\nif;font-size:12.727272033691406px&quot;&gt;&lt;br&gt;\n\n\n&lt;/div&gt;&lt;div style=3D&quot;font-family:a=\r\nrial,sans-serif;font-size:12.727272033691406px&quot;&gt;FTP servers that allow clie=\r\nnts to change directories relative to the results of a directory change in =\r\na previous request=A0(cd ../..)=A0are not stateless.=A0&lt;/div&gt;\n\n\n&lt;div style=\r\n=3D&quot;font-family:arial,sans-serif;font-size:12.727272033691406px&quot;&gt;&lt;br&gt;&lt;/div&gt;=\r\n&lt;div style=3D&quot;font-family:arial,sans-serif;font-size:12.727272033691406px&quot;&gt;=\r\nHopefully, this gives you some helpful ideas.=A0&lt;/div&gt;&lt;div style=3D&quot;font-fa=\r\nmily:arial,sans-serif;font-size:12.727272033691406px&quot;&gt;\n\n\n&lt;br&gt;&lt;/div&gt;&lt;div sty=\r\nle=3D&quot;font-family:arial,sans-serif;font-size:12.727272033691406px&quot;&gt;&lt;br&gt;&lt;/di=\r\nv&gt;&lt;div style=3D&quot;font-family:arial,sans-serif;font-size:12.727272033691406px=\r\n&quot;&gt;[1]=A0&lt;a href=3D&quot;http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_=\r\narch_style.htm#sec_5_1_3&quot; style=3D&quot;font-family:arial;font-size:small&quot; targe=\r\nt=3D&quot;_blank&quot;&gt;http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_s=\r\ntyle.htm#sec_5_1_3&lt;/a&gt;&lt;/div&gt;\n\n\n&lt;div style=3D&quot;font-family:arial,sans-serif;f=\r\nont-size:12.727272033691406px&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div cl=\r\nass=3D&quot;gmail_extra&quot;&gt;&lt;br clear=3D&quot;all&quot;&gt;&lt;div&gt;mca&lt;div&gt;&lt;a href=3D&quot;tel:%2B1.859.=\r\n757.1449&quot; value=3D&quot;+18597571449&quot; target=3D&quot;_blank&quot;&gt;+1.859.757.1449&lt;/a&gt;&lt;br&gt;\n=\r\nskype: mca.amundsen&lt;br&gt;&lt;a href=3D&quot;http://amundsen.com/blog/&quot; target=3D&quot;_bla=\r\nnk&quot;&gt;http://amundsen.com/blog/&lt;/a&gt;&lt;br&gt;\n\n&lt;a href=3D&quot;http://twitter.com/mamund=\r\n&quot; target=3D&quot;_blank&quot;&gt;http://twitter.com/mamund&lt;/a&gt;&lt;br&gt;&lt;a href=3D&quot;https://git=\r\nhub.com/mamund&quot; target=3D&quot;_blank&quot;&gt;https://github.com/mamund&lt;/a&gt;&lt;br&gt;&lt;a href=\r\n=3D&quot;http://www.linkedin.com/in/mikeamundsen&quot; target=3D&quot;_blank&quot;&gt;http://www.l=\r\ninkedin.com/in/mikeamundsen&lt;/a&gt;&lt;br&gt;\n\n\n&lt;br&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;br&gt;&lt;br&gt;&lt;div class=\r\n=3D&quot;gmail_quote&quot;&gt;&lt;div&gt;&lt;div class=3D&quot;h5&quot;&gt;On Sat, Apr 20, 2013 at 10:33 AM, B=\r\nrian Craft &lt;span dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:craft.brian@...&quot; t=\r\narget=3D&quot;_blank&quot;&gt;craft.brian@...&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;\n&lt;/div&gt;&lt;/di=\r\nv&gt;&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;margin:0 0 0 .8ex;border-left:=\r\n1px #ccc solid;padding-left:1ex&quot;&gt;\n\n\n\n\n\n\n\n\n        \n\n\n\n\n&lt;div&gt;&lt;div&gt;&lt;div class=\r\n=3D&quot;h5&quot;&gt;\n\n\n\n\n\n&lt;br&gt;&lt;br&gt;\n\n\n\n\n&lt;div dir=3D&quot;ltr&quot;&gt;&lt;span style=3D&quot;font-family:aria=\r\nl,sans-serif;font-size:12.727272033691406px&quot;&gt;I don&#39;t understand how the=\r\n word &quot;stateless&quot; is being used in REST. Obviously POST and PUT c=\r\nreate state on the server. Obviously, requests after a state change depend =\r\non that state change (e.g. by using a URL that was not valid before the sta=\r\nte change).&lt;/span&gt;&lt;div style=3D&quot;font-family:arial,sans-serif;font-size:12.7=\r\n27272033691406px&quot;&gt;\n\n\n\n&lt;br&gt;&lt;/div&gt;&lt;div style=3D&quot;font-family:arial,sans-serif;=\r\nfont-size:12.727272033691406px&quot;&gt;I can almost live with this usage of &quot;=\r\nstateless&quot; for persistent objects stored on the server, because it can=\r\n be thought of as not being &quot;session state&quot;: it lasts longer than=\r\n a session. But in any moderately complex web app, if you try to design a R=\r\nEST API you will quickly hit GET size limits when doing complex queries. An=\r\nd then the suggestion is to do something like POST the query parameters, re=\r\nturning a Location header for a &quot;query&quot; object that can be fetche=\r\nd with GET. How is that not storing session data on the server? How is that=\r\n different from non-REST solutions?&lt;/div&gt;\n\n\n\n&lt;div style=3D&quot;font-family:aria=\r\nl,sans-serif;font-size:12.727272033691406px&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=3D&quot;font-f=\r\namily:arial,sans-serif;font-size:12.727272033691406px&quot;&gt;There are three obvi=\r\nous differences between POSTing a query and just generically using POST ins=\r\ntead of GET. POSTing a query requires two round-trips to the server, bad fo=\r\nr latency. POSTing a query and using a Location header limits the response =\r\nto the creation of a single object, which is fine for 1990&#39;s full-page-=\r\nload design, but is unrealistic for any moderately complex ajax app, where =\r\nan API call will result in the creation of multiple objects (e.g. creating =\r\nrelated images). And POSTing a query requires the tracking of large numbers=\r\n of transient &quot;query&quot; objects, hugely complicating both client an=\r\nd server, the very thing REST is supposed to avoid.&lt;/div&gt;\n\n\n\n&lt;div style=3D&quot;=\r\nfont-family:arial,sans-serif;font-size:12.727272033691406px&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div=\r\n style=3D&quot;font-family:arial,sans-serif;font-size:12.727272033691406px&quot;&gt;Perh=\r\naps to clarify what is meant in REST by &quot;stateless&quot; someone could=\r\n give examples of things that *aren&#39;t* &quot;stateless&quot;, and contr=\r\nast them to REST.&lt;/div&gt;\n\n\n\n&lt;/div&gt;\n\n\n\n\n\n\n&lt;br&gt;\n\n    \n    \n&lt;br&gt;\n\n\n\n\n&lt;div width=\r\n=3D&quot;1&quot; style=3D&quot;color:white;clear:both&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n\n\n\n&lt;/blockquote&gt;=\r\n&lt;/div&gt;&lt;br&gt;&lt;/div&gt;\n&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;\n\r\n--001a11c33af07bc58304dae20f8c--\r\n\n"}}
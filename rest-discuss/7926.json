{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":272750603,"authorName":"Duncan Cragg","from":"Duncan Cragg &lt;rest-discuss@...&gt;","profile":"duncan_b_cragg","replyTo":"SENDER","senderId":"zAhtlRa4OCJbGHrVYLTa3Xm5Zdl_iUJnIfZ7shAXFlHPGynW45Yj-hFflPosjl15iKptsKLYkvoJZrI9-O4Eg2vpef9EPzbAOyzt2A","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Re: how to model actions","postDate":"1171932178","msgId":7926,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQ1REE0NDEyLjkwNjA3MDVAY2lsdXgub3JnPg==","inReplyToHeader":"PDExNjkzMDAzNjguNTEzMC45OS5jYW1lbEBsb2NhbGhvc3QubG9jYWxkb21haW4+","referencesHeader":"PDQ1QTVEQjg3LjMwNzA3QHFsdXN0ZXJzLmNvbT4JIDw0NWE1ZGUxYi4yZTA0YjZjOS4wYThhLmZmZmY5NTllQG14Lmdvb2dsZS5jb20+CSA8MzQzZWNiM2UwNzAxMTIwMzAwajFiNDBhMzE2cTk3ZGYwYjYzMDE1MjNlMTlAbWFpbC5nbWFpbC5jb20+CSA8NDVBNzhCREQuMzA4MDkwN0BxbHVzdGVycy5jb20+CSA8MTE2ODYxMTE3NC41MzIzLjQ1LmNhbWVsQGxvY2FsaG9zdC5sb2NhbGRvbWFpbj4JIDw0NUFDMkU0QS4yMDIwNzA0QGNpbHV4Lm9yZz4gPDExNjkzMDAzNjguNTEzMC45OS5jYW1lbEBsb2NhbGhvc3QubG9jYWxkb21haW4+"},"prevInTopic":7649,"nextInTopic":0,"prevInTime":7925,"nextInTime":7927,"topicId":7510,"numMessagesInTopic":39,"msgSnippet":"I ve once again been impossibly busy, so everyone that was watching this thread has no doubt forgotten what it was all about... ... I m hoping to see if","rawEmail":"Return-Path: &lt;rest-discuss@...&gt;\r\nX-Sender: rest-discuss@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 22712 invoked from network); 19 Feb 2007 23:48:16 -0000\r\nReceived: from unknown (66.218.66.72)\n  by m27.grp.scd.yahoo.com with QMQP; 19 Feb 2007 23:48:16 -0000\r\nReceived: from unknown (HELO qg.cilux.org) (212.23.31.158)\n  by mta14.grp.scd.yahoo.com with SMTP; 19 Feb 2007 23:48:16 -0000\r\nReceived: from cilux.org (qg [127.0.0.1])\n\tby qg.cilux.org (8.12.8/8.12.8) with ESMTP id l1K0gwqS018177;\n\tTue, 20 Feb 2007 00:42:59 GMT\r\nMessage-ID: &lt;45DA4412.9060705@...&gt;\r\nDate: Tue, 20 Feb 2007 00:42:58 +0000\r\nUser-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.7b) Gecko/20040316\r\nX-Accept-Language: en-us, en\r\nMIME-Version: 1.0\r\nTo: Benjamin Carlyle &lt;benjamincarlyle@...&gt;,\n   rest-discuss@yahoogroups.com\r\nCc: Duncan Cragg &lt;rest-discuss@...&gt;\r\nReferences: &lt;45A5DB87.30707@...&gt;\t &lt;45a5de1b.2e04b6c9.0a8a.ffff959e@...&gt;\t &lt;343ecb3e0701120300j1b40a316q97df0b6301523e19@...&gt;\t &lt;45A78BDD.3080907@...&gt;\t &lt;1168611174.5323.45.camel@...&gt;\t &lt;45AC2E4A.2020704@...&gt; &lt;1169300368.5130.99.camel@...&gt;\r\nIn-Reply-To: &lt;1169300368.5130.99.camel@...&gt;\r\nContent-Type: text/plain; charset=us-ascii; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:0:0:0\r\nFrom: Duncan Cragg &lt;rest-discuss@...&gt;\r\nReply-To: rest-discuss@...\r\nSubject: Re: [rest-discuss] Re: how to model actions\r\nX-Yahoo-Group-Post: member; u=272750603; y=OZtq0-29pRMWOozVZGnosfGozVkJDrgaLoZ7HJyAeVbs-5wIl9Qr0x0\r\nX-Yahoo-Profile: duncan_b_cragg\r\n\r\nI&#39;ve once again been impossibly busy, so everyone that was watching this \nthread has no doubt forgotten what it was all about...\n\nI was trying to explain my REST pattern:\n\n&gt;&gt;So - I promote a /symmetric/ REST point of view, with\n&gt;&gt;active resources being dependent on each other and conveying\n&gt;&gt;state between themselves with either GET or POST depending\n&gt;&gt;on which party initiates the transfer.\n&gt;&gt;\n&gt;&gt;I do hope and believe this pattern is still REST-compatible.\n&gt;&gt;Please read part 3 of my series \n&gt;&gt;(http://duncan-cragg.org/blog/post/business-functions-rest-dialogues/) \n&gt;&gt;for more explanation of this pattern.\n&gt;&gt;\nI&#39;m hoping to see if &#39;Symmetric REST&#39; is a clean subset of REST - i.e., \nadding more constraints, not fewer or different ones.\n\nSymmetric REST has definitive answers to the following issues that recur \nso often on this list:\n\n  -: The meaning (nearly said &#39;semantics&#39;!) of POST\n  -: Client state, cookies, and user identity\n  -: Using PUT/POST/DELETE vs just using POST\n  -: Queries\n  -: Opaque/Transparent URIs\n\n\nThe essence of my pattern is that, instead of some opaque client that&#39;s \noutside of the world of resources, we see each HTTP GET or POST as being \nperformed on behalf of a peer resource, and see them both as simply \nforms of state transfer between resources - one pull, the other push.\n\n\nA specific case of this is shown in a form POST, the data of which has a \ncontent-type, but no URI! So we can&#39;t subsequently save a reference to \nthe POSTed data and GET it again later. The POST is the one and only \nchance we have to see the data.\n\nAnother case in point is client state stored in Cookies. It feels like \nit should be a URI identifying the user (&#39;s browser/machine).\n\nWhen a server receives a POST, it cares who sent it and whether they are \nauthorised to try and affect things on the server. Each submitter may \nhave different motives and variants on things being POSTed, and the \nserver has to reconcile them itself - it can&#39;t necessarily just do what \nthe clients want. We have client sources wanting something, and server \nresources wanting perhaps something else.\n\nSo a POST is as much about the client as it is about the target resource \n- perhaps more so.  In a Resource-Oriented Architecture, we really \nshould be dignifying POST data with a URI and talking about its valid \ncontent-types in the same way as we do for server resources we would GET.\n\nA form submission, complete with cookie, is an announcement of the \n&#39;state of the user&#39; - the cookie /is/ like a URI and the POST body is a \nnotification of their &#39;state&#39; (of mind at the time).\n\nA client is now just another &#39;server&#39; with /resources/ that themselves \nperform GETs and POSTs and which can, symmetrically, be targets of GETs \nand POSTs. We may need Comet-like patterns to get this to work in a browser.\n\nSo - a resource GETs to pull the state of a peer resource, and POSTs to \npush its /own/ state to a peer.  Better still, a resource can push its \nURI (perhaps in a Content-Location: header in a request message), and \nlet the target GET the content when its ready.  Adding Content-Location: \nto a request header is perhaps a little non-HTTP, but shouldn&#39;t be non-REST.\n\nNow, all resources are active entities responsible for their own destiny \nand interact using GET/POST, or &#39;using REST&#39;.\n\n\nBenjamin Carlyle had some excellent things to say, as always, so I&#39;d \nlike to pick up from there:\n\n&gt; I haven&#39;t read your content in detail as yet, but you also seem to be\n&gt; including a pub/sub mechanism in your model. Again without knowing how\n&gt; much of this you have covered exactly, subscription also has its\n&gt; complications :)\n&gt; \nYes - the next obvious step is to implement pub/sub: we can keep track \nof those peer resources that are interested in us, and POST to them our \nstate whenever it changes.  Alternatively, we can use one of the many \nopen- or long-GET patterns to receive updates.  Better still, POST or \nlong-GET the /fact/ of a change, then use normal GET to fetch the new \nstate, allowing normal caches to fill up and allowing lazy cacheing.\n\nWhat, um, &#39;complications&#39; did you have in mind?  Time out of \nsubscriptions, scalability of vast numbers of subscriptions, that kind \nof thing?\n\n\n&gt;&gt;-: Alternatively - what seems to be the subject of this thread - \n&gt;&gt;it may have *real-world dependency*: maybe it can&#39;t just switch \n&gt;&gt;to &#39;running&#39; until the real world thing it models actually /is/ \n&gt;&gt;running! So, when it receives a direct transformation intent, \n&gt;&gt;it goes off and satisfies that constraint by ensuring it&#39;s \n&gt;&gt;ticking over in reality, and only then changes its visible \n&gt;&gt;state to &#39;running&#39;.\n&gt; \n&gt; I&#39;m a SCADA guy, so this is a kind of resource that comes frequently to\n&gt; mind for me. This kind of resource can have knock-on effects also. If I\n&gt; start a fan in a chiller plant for a building I am likely to see changes\n&gt; to the resources demarcating temperature guage state. These changes slip\n&gt; between resources via the implementation of these resources,\n&gt; specifically the monitoring of changes to real world conditions.\n&gt; \nI was a SCADA guy. Nearly 30 years ago, but it&#39;s still in me blood.. =0) \nThe &#39;feeling&#39; of REST and declarative approaches generally is the same \nas that I used to get when designing logic circuits, and especially \ncontrollers, in my teenage (it&#39;s OK, I discovered girls eventually)!\n\n\n&gt;&gt;-: Finally, the resource may be *smart*, and decide to switch to \n&gt;&gt;&#39;running&#39; because of the rule that, as long as Joe&#39;s resource is \n&gt;&gt;running, it should be running itself. So it spots Joe&#39;s resource \n&gt;&gt;running, and starts running without even being told to! That&#39;s what I \n&gt;&gt;was talking about in part 3 of my dialogues.\n&gt; \n&gt; I suspect this is also the kind of resource that models most business\n&gt; functions... though I would like to cut to the specifics. I see a set of\n&gt; resources as an API to a service that expose its functionality in an\n&gt; architecturally-consistent way. Importantly, they are not services in\n&gt; their own right. They share state with each other, but this is not the\n&gt; same as communicating with each other by RESTful means. They are\n&gt; implemented with objects or with embedded database procedures. These\n&gt; implementation-level entities talk to each other. That interaction is\n&gt; what affects the service&#39;s resources.\n&gt; \n&gt; So you have a service that is managing which other\n&gt; services/devices/functions are running in its system. It observes a\n&gt; change in one, and starts the other. The actual observation could be an\n&gt; object notifying others via an observer pattern, .. or pub/sub\n&gt; notification mechanism or by GET polling.\n&gt; \n&gt; The systems I work with tend to have a lot of pub/sub relationships to\n&gt; trigger knock-on behaviours between services. This is necessary because\n&gt; changes to the real world are unpredictable to even the most aware\n&gt; components in the architecture. Within a service we would typicically be\n&gt; talking about the observer pattern. ..\n&gt; \n\nNow - this is where you get to the heart of the issue (excellent \nresponse! thanks): I /am/ suggesting that our in-process programs should \nbe event-driven, and use the observer pattern as the only interaction \nmode between domain objects. Objects will have open state and no methods \n- apart from GET and POST. So, OK, they&#39;re not really objects in the \ntraditional sense. This is where we switch from imperative to \ndeclarative models. We can program in declarative rules, triggered by \nevents over state. Then distributing such a program is simply &#39;draw a \ndividing line through and drop HTTP - used symmetric-RESTfully - in the \nmiddle&#39;! Needless to say, SEDA would be a good fit to this, server-side..\n\n\nQuickly on the remaining points (this has turned out to be too long \nagain) - URIs: opaque - if you want content and content syntax, it goes \nin the body - end of discussion =0) So Queries: POST-redirect pattern. \nPUT/DELETE: if you want imperative stuff like that, stick it in a \nspecial &#39;Builder&#39; content type and POST it instead - you have much freer \nreign to do all sorts of other hypermedia manipulations anyway like \nthat, plus it prevents people seeing REST as = CRUD and expecting a \ndatabase... [sorry to any recent Rails arrivals who are bemused by all \nthis!]\n\n\nOK - I&#39;ve gone on enough.   Any comments (even &quot;wha&#39;???&quot;) are welcome. \nIn fact, especially &quot;wha&#39;???&quot; - it helps me hone my presentation! =0)\n\nCheers!\n\nDuncan\n\nPS - Joe: did you get my email? Anyway, thanks for the good stuff at \nhttp://wellformedweb.org/story/1. What do you /now/ think about the Well \nFormed Web?\n\n_________________________________\nDuncan Cragg\nhttp://duncan-cragg.org/blog/\n\n\n\n\n\n"}}
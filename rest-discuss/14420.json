{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":343278744,"authorName":"Subbu Allamaraju","from":"Subbu Allamaraju &lt;subbu@...&gt;","profile":"sallamar","replyTo":"SENDER","senderId":"R7sAuJ-FRlDq-2jIKsmgTfDBVyXjweju9ZNyOVkMVxjFAlb30juzIoBa5tV-7mFuB0wLu6lQJLVUQ4PKDwmirs875AMHVsVTXA","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] REST isn&#39;t hard to learn, it&#39;s just taught wrong.","postDate":"1261797360","msgId":14420,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDFFNDk3QkFFLUI0QjYtNDE4RS1BMjY3LUNENzdDQTZEMDhGNkBzdWJidS5vcmc+","inReplyToHeader":"PDIwMDkxMjI1MDA1MDUzLjNjOTk5ZDdlLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","referencesHeader":"PDIwMDkxMjIwMjEyNjMzLjcxNWNhOTQyLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4gPDg3aXFjMHp6aWcud2wlYmVyZW5kQHBvYm94LmNvbT4gPDIwMDkxMjIwMjI0NjEyLmI4MzVmNTAyLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4gPDIwMDkxMjIwMjI1OTQwLjc1MzdlOTMxLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4gPDIwMDkxMjIxMDAzNjA1LjdjZDkwNzBiLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4gPDIwMDkxMjIxMTcwNzM1LjZiMzkxOWNlLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4gPEJBNjU3OEYxLTQ3NzgtNDY0Ri1BRUM2LTlDQTYzQzRGMEJCRkBzdWJidS5vcmc+IDwzRkU5ODRGMi1GNThELTRGMkYtODhFNy1GRkJBMzFFMUI5RTJAaW5ub3EuY29tPiA8MjAwOTEyMjIxNDIyMzcuNDEwMDQyMDQuZXJpY0BiaXNvbnN5c3RlbXMubmV0PiA8MzdBQzczMTUtMTlGRC00RjVELUFGREItNzMxMTE3RjhBQkM5QGlubm9xLmNvbT4gPDIwMDkxMjIzMTU1NTI5LmY4OWUzYjhkLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4gPDM1NTFFOTlBLTNERjgtNEMzQy04NDgwLTlBNkY3NDIzOUIxQUBpbm5vcS5jb20+IDwyMDA5MTIyMzIwMTMwMy41ZDk2NGNjZS5lcmljQGJpc29uc3lzdGVtcy5uZXQ+IDw2MzZFOEJFQS0zMzlDLTQxQTMtQTdFMi1FODNCNzYwQTdGMjJAc3ViYnUub3JnPiA8MjAwOTEyMjUwMDUwNTMuM2M5OTlkN2UuZXJpY0BiaXNvbnN5c3RlbXMubmV0Pg=="},"prevInTopic":14419,"nextInTopic":14422,"prevInTime":14419,"nextInTime":14421,"topicId":14255,"numMessagesInTopic":44,"msgSnippet":"Three key points: a. Media types provide protocol level visibility. This is fundamental. I don t think I argued against this. b. The Goodrelations ontology","rawEmail":"Return-Path: &lt;subbu@...&gt;\r\nX-Sender: subbu@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 95153 invoked from network); 26 Dec 2009 03:16:25 -0000\r\nX-Received: from unknown (98.137.34.45)\n  by m14.grp.re1.yahoo.com with QMQP; 26 Dec 2009 03:16:25 -0000\r\nX-Received: from unknown (HELO mail-yw0-f183.google.com) (209.85.211.183)\n  by mta2.grp.sp2.yahoo.com with SMTP; 26 Dec 2009 03:16:24 -0000\r\nX-Received: by ywh13 with SMTP id 13so12762714ywh.29\n        for &lt;rest-discuss@yahoogroups.com&gt;; Fri, 25 Dec 2009 19:16:24 -0800 (PST)\r\nX-Received: by 10.101.4.9 with SMTP id g9mr1865697ani.61.1261797384450;\n        Fri, 25 Dec 2009 19:16:24 -0800 (PST)\r\nReturn-Path: &lt;subbu@...&gt;\r\nX-Received: from ?192.168.1.101? (c-71-231-199-80.hsd1.or.comcast.net [71.231.199.80])\n        by mx.google.com with ESMTPS id 23sm4088959yxe.36.2009.12.25.19.16.22\n        (version=TLSv1/SSLv3 cipher=RC4-MD5);\n        Fri, 25 Dec 2009 19:16:23 -0800 (PST)\r\nMime-Version: 1.0 (Apple Message framework v1077)\r\nContent-Type: text/plain; charset=us-ascii\r\nIn-Reply-To: &lt;20091225005053.3c999d7e.eric@...&gt;\r\nDate: Fri, 25 Dec 2009 19:16:00 -0800\r\nCc: Stefan Tilkov &lt;stefan.tilkov@...&gt;,\n rest-discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Transfer-Encoding: quoted-printable\r\nMessage-Id: &lt;1E497BAE-B4B6-418E-A267-CD77CA6D08F6@...&gt;\r\nReferences: &lt;20091220212633.715ca942.eric@...&gt; &lt;87iqc0zzig.wl%berend@...&gt; &lt;20091220224612.b835f502.eric@...&gt; &lt;20091220225940.7537e931.eric@...&gt; &lt;20091221003605.7cd9070b.eric@...&gt; &lt;20091221170735.6b3919ce.eric@...&gt; &lt;BA6578F1-4778-464F-AEC6-9CA63C4F0BBF@...&gt; &lt;3FE984F2-F58D-4F2F-88E7-FFBA31E1B9E2@...&gt; &lt;20091222142237.41004204.eric@...&gt; &lt;37AC7315-19FD-4F5D-AFDB-731117F8ABC9@...&gt; &lt;20091223155529.f89e3b8d.eric@...&gt; &lt;3551E99A-3DF8-4C3C-8480-9A6F74239B1A@...&gt; &lt;20091223201303.5d964cce.eric@...&gt; &lt;636E8BEA-339C-41A3-A7E2-E83B760A7F22@...&gt; &lt;20091225005053.3c999d7e.eric@...&gt;\r\nTo: Eric J. Bowman &lt;eric@...&gt;\r\nX-Mailer: Apple Mail (2.1077)\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Subbu Allamaraju &lt;subbu@...&gt;\r\nSubject: Re: [rest-discuss] REST isn&#39;t hard to learn, it&#39;s just taught wrong.\r\nX-Yahoo-Group-Post: member; u=343278744; y=OxXmZKGsSempDx1hsCRRErHVaFaLzUTQUCeFS00UrqesGmw\r\nX-Yahoo-Profile: sallamar\r\n\r\nThree key points:\n\na. Media types provide protocol level visibility. This i=\r\ns fundamental. I don&#39;t think I argued against this.\n\nb. The Goodrelations o=\r\nntology example below actually illustrates the conventions I am referring t=\r\no (thanks for the example). For instance, the protocol sees the representat=\r\nion in Example 1 of http://www.ebusiness-unibw.org/wiki/Rdfa4google as a te=\r\nxt/html representation. In other words, Goodrelations is invisible at the p=\r\nrotocol level, and applications that understand that ontology can decipher =\r\nextra meaning. There is a weakening of media types of here, but that&#39;s okay=\r\n since the protocol does not need to know about it. Web servers, caches, pr=\r\noxies, user agents et. al. work fine treating the representations as text/h=\r\ntml.\n\nc. Taking one step further, in some cases, such shared understanding =\r\nmay be informal and local. Most custom applications belong here. These appl=\r\nications can layer some shared understanding into representations of standa=\r\nrd media types. I would not argue for standardization of such shared unders=\r\ntanding in terms of new media types or some other ontology as long as proto=\r\ncol level visibility is maintained for correct execution and interpretation=\r\n of the protocol. Informal fine.\n \nI see this as a sliding scale.\n\nSubbu\n\nO=\r\nn Dec 24, 2009, at 11:50 PM, Eric J. Bowman wrote:\n\n&gt; Subbu Allamaraju wrot=\r\ne:\n&gt;&gt; \n&gt;&gt; On Dec 23, 2009, at 7:13 PM, Eric J. Bowman wrote:\n&gt;&gt; \n&gt;&gt;&gt; Until =\r\nsuch time as a standard is accepted, I will refer to my\n&gt;&gt;&gt; system as REST*=\r\n because the system only becomes RESTful at that\n&gt;&gt;&gt; point, as if by magic.=\r\n..  If there&#39;s no standardization effort\n&gt;&gt;&gt; involved, then the proprietary=\r\n result fragments the Web and does\n&gt;&gt;&gt; not achieve the goals of REST, and a=\r\ns a consequence, cannot be\n&gt;&gt;&gt; called REST or even REST* because of the lac=\r\nk of intent to use\n&gt;&gt;&gt; standards, a key element of the style.\n&gt;&gt; \n&gt;&gt; Sorry,=\r\n but I must say that this is a fallacious approach for building\n&gt;&gt; networke=\r\nd applications. The goal of building *completely* decoupled\n&gt;&gt; applications=\r\n (with *no* out-of-band knowledge) is as unsound as the\n&gt;&gt; &quot;local-is-remote=\r\n&quot; approach that RPC tried.\n&gt;&gt; \n&gt; \n&gt; Uh, look back at those quotes of Roy&#39;s =\r\nI excerpted, as he makes the\n&gt; argument better than I can.  The key to the =\r\nREST style is that out-of-\n&gt; band information be encompassed within standar=\r\nd methods, media types,\n&gt; and link relations.  This is what the self-descri=\r\nptive messaging\n&gt; constraint is all about, isn&#39;t it?  My shared understandi=\r\nng of well-\n&gt; known media types I see in HTTP headers tells me an awful lot=\r\n about\n&gt; processing the payload without my knowing any specifics of the sys=\r\ntem;\n&gt; application/vnd.hypothetical tells me nothing unless I _do_ know the=\r\n\n&gt; specifics of the system...\n&gt; \n&gt; &quot;\n&gt; Do you see the difference?  Encoding=\r\n knowledge within clients and\n&gt; servers of the other side&#39;s implementation =\r\nmechanism is what we are\n&gt; trying to avoid.\n&gt; &quot;\n&gt; \n&gt; How does any non-stand=\r\nardizable media type that&#39;s tied to a specific\n&gt; implementation where each =\r\nside has encoded knowledge of the other\n&gt; side&#39;s implementation mechanism q=\r\nualify as &quot;decoupled&quot;?\n&gt; \n&gt;&gt; \n&gt;&gt; The set of problems that\n&gt;&gt; demand that de=\r\ngree of decoupling is small, and extending that notion\n&gt;&gt; to every applicat=\r\nion (to be branded RESTful to satisfy a particular\n&gt;&gt; interpretation of RES=\r\nT) is prohibitively expensive.\n&gt;&gt; \n&gt; \n&gt; The entire problem of the Web itsel=\r\nf demands the decoupling illustrated\n&gt; by browsers evolving the capability =\r\nof displaying inline images whose\n&gt; media types evolved one-at-a-time from =\r\nimage/gif through image/jpeg to\n&gt; image/png, despite years of constant radi=\r\ncal change within the\n&gt; text/html media type&#39;s definition.  Along came text=\r\n/css and text/\n&gt; javascript (initially and enduringly as application/x-java=\r\nscript) and\n&gt; syndication media types like RSS and Atom, then application/j=\r\nson.  The\n&gt; whole fact that we can build cross-browser Rich Internet Applic=\r\nations\n&gt; today is due to a shared understanding of an evolving set of stand=\r\nard\n&gt; media types.  Why wouldn&#39;t this phenomenon be key to the REST style?\n=\r\n&gt; \n&gt; The REST style not only calls for standards-based evolution, it has be=\r\nen\n&gt; defined by what happened on the real-world Web -- the fact that the\n&gt; =\r\ndecoupling provided by standard media types is responsible for the\n&gt; specta=\r\ncular growth and success of the Web.  I&#39;m going to have to throw\n&gt; another =\r\nRoy quote at you:\n&gt; \n&gt; &quot;\n&gt; REST is software design on the scale of decades:=\r\n every detail is\n&gt; intended to promote software longevity and independent e=\r\nvolution. Many\n&gt; of the constraints are directly opposed to short-term effi=\r\nciency...\n&gt; Most don&#39;t think they need to design past the current release.\n=\r\n&gt; &quot;\n&gt; \n&gt; A shared understanding of well-known media types is what allows\n&gt; =\r\ndecoupling, decoupling is what allows independent evolution (as we&#39;ve\n&gt; see=\r\nn with browsers and what have come to be known as Rich Internet\n&gt; Applicati=\r\nons), and every detail of REST (like standardization) is\n&gt; intended to prom=\r\note this.\n&gt; \n&gt; Nowhere can anything I have said be construed as suggesting =\r\nthat REST\n&gt; be extended to every system.  I am in fact saying the opposite.=\r\n  The\n&gt; purpose of starting a project by modeling resources and deriving a =\r\nREST\n&gt; architectural model is to guide the development of the implementatio=\r\nn.\n&gt; There may be no need for the initial release to contain a full mapping=\r\n\n&gt; of the implementation to the model.  Subsequent releases are guided by\n&gt;=\r\n defining what additional mapping(s) to the model will be included in\n&gt; the=\r\n revised implementation.\n&gt; \n&gt; The end result of achieving a REST system may=\r\n take an amount of time\n&gt; best measured in years.  Which is no big thing, b=\r\necause REST is meant\n&gt; to guide the development of systems whose lifespan m=\r\nay well encompass\n&gt; decades.  But until all REST constraints in an architec=\r\ntural model are\n&gt; reflected in mappings to the implementation, the system c=\r\nannot be\n&gt; considered REST, only a derivative of the style.  Which doesn&#39;t\n=\r\n&gt; necessarily matter.\n&gt; \n&gt; To say that an implementation lacks mappings to =\r\na REST architectural\n&gt; model is not to pass a value judgment against the sy=\r\nstem.  It is meant\n&gt; to provide a measure by which to judge an implementati=\r\non against the\n&gt; Platonic Ideal for distributed hypermedia systems.  If the=\r\n needs of the\n&gt; system at any point in time are being met by its implementa=\r\ntion, then\n&gt; there is no need to map it to additional REST constraints, is =\r\nthere?\n&gt; \n&gt; The problem is that the needs of a system tend to change over t=\r\nime.\n&gt; Unanticipated growth could create the urgent need to apply another o=\r\nf\n&gt; REST&#39;s constraints.  The disciplined approach is to create additional\n&gt;=\r\n mappings to the architectural model in the implementation, which has\n&gt; hop=\r\nefully allowed for this by the developers&#39; recognition at some point\n&gt; in t=\r\nhe past that growth requires change.\n&gt; \n&gt; Informed decisions to ignore cons=\r\ntraints out-of-the-box but allow for\n&gt; their addition in a future release, =\r\ncan only be made for Web systems in\n&gt; terms of the benefits and tradeoffs o=\r\nf applying REST&#39;s constraints (as\n&gt; we lack any other vocabulary).  My enti=\r\nre proposed model-centric\n&gt; approach to REST is to provide the basis for th=\r\nese informed decisions\n&gt; through the visualization and analysis of a REST a=\r\nrchitectural model and\n&gt; its implementation, as the system evolves over tim=\r\ne.\n&gt; \n&gt; The current conversation on this list is the epitome of current-\n&gt; =\r\nrelease design:  starting by identifying the end result as REST and\n&gt; wingi=\r\nng it from there, as reflected in the state of real-world REST\n&gt; APIs at th=\r\nis time, rather than starting by modeling resources and\n&gt; following an info=\r\nrmed approach.  Argument may be made that no new API\n&gt; needs full-on REST c=\r\nonformity out-of-the-box, therefore REST is more\n&gt; desirable as the goal of=\r\n a release cycle.  Since REST is just an\n&gt; architectural style, an abstract=\r\n, REST must be modeled somehow in order\n&gt; to be used to guide that release =\r\ncycle.\n&gt; \n&gt;&gt; \n&gt;&gt; Even in the case\n&gt;&gt; of the web, where things seem to work =\r\nin an autonomous fashion, we\n&gt;&gt; need a &quot;human&quot; user to guess the semantics =\r\nand drive the hypermedia\n&gt;&gt; engine for every application.\n&gt;&gt; \n&gt; \n&gt; No we do=\r\nn&#39;t.  Advances like the GoodRelations ontology show us that\n&gt; it&#39;s possible=\r\n to build a machine-readable interface for any number of\n&gt; specific shoppin=\r\ng cart implementations.  I go through socks pretty\n&gt; fast.  I like &#39;em fres=\r\nh, besides, I haven&#39;t seen anybody darn a sock\n&gt; since before my Grandmom d=\r\nied (although in these times, we may see a\n&gt; resurgence in sock darning).  =\r\nSo I need a new six-pack of Sock-brand\n&gt; mid-calf white athletic socks in s=\r\nize XL delivered to my shack in the\n&gt; boonies every six weeks.\n&gt; \n&gt; I ought=\r\n to be able to create an agent allowing me to enter (or search\n&gt; for) store=\r\n URIs who sell Socks-brand socks online, at my convenience as\n&gt; configurati=\r\non.  Once every six weeks, my agent places an order at the\n&gt; store with the=\r\n lowest combination of price and delivery charge, and\n&gt; once every six week=\r\ns the local UPS lady delivers new socks to my door.\n&gt; I don&#39;t care where or=\r\n how the order was placed, where it was out-of-\n&gt; stock, or what the price =\r\nvariation was -- so long as my Socks arrive\n&gt; at regular intervals and I&#39;m =\r\nnot overpaying for them.\n&gt; \n&gt; As Web technology continues to evolve, this b=\r\necomes possible -- best-\n&gt; price cross-supplier automated resupply.  Despit=\r\ne the fact that each\n&gt; merchant likely has its own human-driven interface, =\r\nthe fact that the\n&gt; merchants have collectively accepted an ontology for us=\r\ne within\n&gt; standard media types is what makes it possible for agents to get=\r\n what\n&gt; they need from the same representations intended for human manipula=\r\ntion.\n&gt; \n&gt; I&#39;m a bachelor guy, so I&#39;ll be an early adopter of any technolog=\r\ny that\n&gt; does my shopping for me.  I hate not being able to find my specifi=\r\nc\n&gt; brand and flavor/scent of toothpaste/deodorant, despite the Wal-Mart\n&gt; =\r\n20 miles away.  So please don&#39;t tell me I&#39;m doomed to forever having to\n&gt; a=\r\nctually *shop* for basic necessities, online or off...  :-(\n&gt; \n&gt;&gt; \n&gt;&gt; Let&#39;s=\r\n say, we start with your assertion that (a) everything must be\n&gt;&gt; communica=\r\nted in-band, and (b) the media type must be standard. Let&#39;s\n&gt;&gt; apply this t=\r\no Flickr as an example...\n&gt;&gt; \n&gt; \n&gt; I&#39;d rather stick with Dare Obasanjo&#39;s ex=\r\nample I excerpted and linked to\n&gt; above in this thread, as it stayed on-top=\r\nic to Roy&#39;s blog post.  There\n&gt; clearly exist several takes on the problem =\r\nof a Contacts API, none of\n&gt; which are RESTful, and all of which are vendor=\r\n-specific.  But there&#39;s\n&gt; nothing about a Contacts API that can&#39;t be implem=\r\nented in the REST\n&gt; style.  So there&#39;s no reason a REST architectural model=\r\n of a Contacts\n&gt; API can&#39;t be derived from these existing efforts, for the =\r\npurpose of\n&gt; guiding a standardization effort.  I don&#39;t see how this leads =\r\nto\n&gt; zillions of standards, but I do see how it leads away from the existin=\r\ng\n&gt; fragmentation to a Web where clients can easily interact with any vendo=\r\nr\n&gt; Contacts List through the same generic REST API instead of being hard-\n=\r\n&gt; coded to support each vendor-specific non-REST Contacts API.\n&gt; \n&gt; This de=\r\nrived REST architectural model guides use and/or development of\n&gt; media typ=\r\nes and link relations.  A new media type would have to\n&gt; describe how metho=\r\nds are used.  Any new link relation or application of\n&gt; an existing link re=\r\nlation would need to be described by the new media\n&gt; type.  Or, the REST ar=\r\nchitectural model guides the development towards\n&gt; standard media types fle=\r\nshed out with a Contact-API-specific ontology\n&gt; within, to allow more choic=\r\ne in media types and link relations within\n&gt; implementations.  If vendors c=\r\nan agree on methods and media types,\n&gt; while each providing vendor-specific=\r\n ontology within, interoperability\n&gt; between implementations is much easier=\r\n for a net positive effect.\n&gt; \n&gt; Implementations derived from this model ar=\r\ne the visualizations which are\n&gt; then analyzed for interoperability.  The r=\r\neal-world analog would be the\n&gt; development of Atom Protocol, where analysi=\r\ns of the interoperability of\n&gt; evolving implementations led to revisions of=\r\n the protocol.  The evolving\n&gt; standard for a RESTful Contacts API is guide=\r\nd by the REST architectural\n&gt; model.  A RESTful Contacts API built using ex=\r\nperimental media types\n&gt; or link relations is considered REST* because the =\r\nstandardization effort\n&gt; exists, but since it&#39;s subject to change based on =\r\nREST how can it be\n&gt; REST until it&#39;s finalized?  Paradoxical, I know.\n&gt; \n&gt; =\r\nSince the development of the new standard is guided by and evaluated\n&gt; agai=\r\nnst REST, the standard isn&#39;t complete until this is accomplished.\n&gt; So how =\r\ncan an implementation of an evolving standard be considered REST\n&gt; when the=\r\n standards process itself hasn&#39;t yet come to that conclusion?\n&gt; Only when t=\r\nhe experimental bits become standard, may the asterisk be\n&gt; removed, becaus=\r\ne only then is out-of-band information encompassed\n&gt; within a well-known me=\r\ndia type and decoupling of clients and servers\n&gt; achieved.\n&gt; \n&gt; Experimenta=\r\nl implementations being used to guide development of a new\n&gt; media type can=\r\n&#39;t be REST because the self-descriptive messaging\n&gt; constraint is broken un=\r\ntil the standard is finalized.  Until then,\n&gt; clients are coupled to server=\r\ns by the use of the nonstandard media type.\n&gt; There, I&#39;ve officially run ou=\r\nt of ways to re-state that...\n&gt; \n&gt;&gt; \n&gt;&gt; A more reasonable thing to do is st=\r\nart off with some standard media\n&gt;&gt; types and formats, and mix them up with=\r\n some conventions to make\n&gt;&gt; representations specific to each application d=\r\nomain. For example,\n&gt;&gt; using an atom:link in XML is a convention. Using RFC=\r\n-3339 for dates\n&gt;&gt; and times is another convention. Mixing RDFa and microfo=\r\nrmats with\n&gt;&gt; HTML and XHTML is yet another convention. Such conventions do=\r\nn&#39;t aim\n&gt;&gt; to eliminate decoupling, but they reduce the amount of of specif=\r\nicity\n&gt;&gt; but leave room for evolution and promote interoperability. \n&gt;&gt; \n&gt; =\r\n\n&gt; I don&#39;t understand how someone who wrote that paragraph can be\n&gt; disagre=\r\neing with me on the importance of standards to the self-\n&gt; descriptive mess=\r\naging constraint (or the critical importance of that\n&gt; constraint to the RE=\r\nST style).  You obviously understand the importance\n&gt; of self-documenting h=\r\nypertext-driven APIs.  I obviously understand it\n&gt; too, as written above an=\r\nd because I chose these quotes from Roy to post:\n&gt; \n&gt; &quot;\n&gt; It has value beca=\r\nuse it is far easier to standardize representation and\n&gt; relation types tha=\r\nn it is to standardize objects and object-specific\n&gt; interfaces. In other w=\r\nords, there are fewer things to learn and they\n&gt; can be recombined in unant=\r\nicipated ways while remaining understandable\n&gt; to the client.\n&gt; \n&gt; ...\n&gt; \n&gt;=\r\n Exposing that vocabulary in the representations makes it easy to learn\n&gt; a=\r\nnd be adopted by others. Some of it will be standardized, some of it\n&gt; will=\r\n be domain-specific, but ultimately the agents will have to be\n&gt; adaptable =\r\nto new vocabulary.\n&gt; &quot;\n&gt; \n&gt; So it seems to me that we&#39;re disagreeing on whe=\r\nre to start.  It is my\n&gt; belief that the logical starting place is the mode=\r\nling of resources.\n&gt; Some minimal REST architectural model must exist, befo=\r\nre it can inform\n&gt; decisions about which media types to use, how to recombi=\r\nne them in\n&gt; unanticipated ways (like my use of application/atomcat+xml as =\r\na delta\n&gt; to PATCH categories within application/atom+xml), as well as wher=\r\ne this\n&gt; approach falls short and calls for the extension or creation of a =\r\nmedia\n&gt; type, and where to draw the line between standardized and domain-\n&gt;=\r\n specific ontologies within a media type.  There are too many possible\n&gt; im=\r\nplementations of any REST system to start with implementation details.\n&gt; \n&gt;=\r\n -Eric\n\n\n"}}
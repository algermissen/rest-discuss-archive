{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":289191104,"authorName":"Jan Algermissen","from":"Jan Algermissen &lt;algermissen1971@...&gt;","profile":"algermissen1971","replyTo":"SENDER","senderId":"PorOrkmZ7HQh7-XSVNbQB4rQhVdTqWHSdsQ6b7EMdFec4xPFTnZy6oMgOfSEX5xjzj038lABgwDr1Y6xvXfYaqXnBz_rC_PntLwfwRpxMhs","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Atom feed vs. list of orders","postDate":"1281178072","msgId":16215,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEJFM0Q4NjU5LUI3NjItNDc1OS1CQzhDLTEzQjREQTk4NUM1RkBtYWMuY29tPg==","inReplyToHeader":"PEYxOTYyNjQ2RDNCNjQ2NDJCN0M5QTA2MDY4RUUxRTY0MEUxNDNCMTFAZXgxMC5ob3N0ZWRleGNoYW5nZS5sb2NhbD4=","referencesHeader":"PEUyQjIwMjIyLUU1MTEtNEFCOC1BMkNFLUEyMUM4MTVFOTI1NEBtYWMuY29tPiA8RjE5NjI2NDZEM0I2NDY0MkI3QzlBMDYwNjhFRTFFNjQwRTE0Mzg1N0BleDEwLmhvc3RlZGV4Y2hhbmdlLmxvY2FsPiA8RUE2MDczMkMtM0IwMC00NUQ0LThGRDgtMDJFQjFCMjE0NEY1QG1hYy5jb20+IDxGMTk2MjY0NkQzQjY0NjQyQjdDOUEwNjA2OEVFMUU2NDBFMTQzQjExQGV4MTAuaG9zdGVkZXhjaGFuZ2UubG9jYWw+"},"prevInTopic":16211,"nextInTopic":16216,"prevInTime":16214,"nextInTime":16216,"topicId":16194,"numMessagesInTopic":86,"msgSnippet":"... I knew you were going to say that :-) Let s see: The implementor of the server side chooses to expose the order list as HTML and Atom. In the Atom case,","rawEmail":"Return-Path: &lt;algermissen1971@...&gt;\r\nX-Sender: algermissen1971@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 19553 invoked from network); 7 Aug 2010 10:49:00 -0000\r\nX-Received: from unknown (98.137.34.44)\n  by m3.grp.sp2.yahoo.com with QMQP; 7 Aug 2010 10:49:00 -0000\r\nX-Received: from unknown (HELO asmtpout024.mac.com) (17.148.16.99)\n  by mta1.grp.sp2.yahoo.com with SMTP; 7 Aug 2010 10:49:00 -0000\r\nMIME-version: 1.0\r\nContent-transfer-encoding: 7BIT\r\nContent-type: text/plain; charset=us-ascii\r\nX-Received: from [10.129.155.151] ([80.187.145.78])\n by asmtp024.mac.com (Sun Java(tm) System Messaging Server 6.3-8.01 (built Dec\n 16 2008; 32bit)) with ESMTPSA id &lt;0L6S008WG3BTJQ70@...&gt; for\n rest-discuss@yahoogroups.com; Sat, 07 Aug 2010 03:47:57 -0700 (PDT)\r\nX-Proofpoint-Spam-Details: rule=notspam policy=default score=0 spamscore=0\n ipscore=0 phishscore=0 bulkscore=0 adultscore=0 classifier=spam adjust=0\n reason=mlx engine=6.0.2-1004200000 definitions=main-1008070042\r\nX-Proofpoint-Virus-Version: vendor=fsecure\n engine=2.50.10432:5.0.10011,1.0.148,0.0.0000\n definitions=2010-08-06_09:2010-08-06,2010-08-06,1970-01-01 signatures=0\r\nIn-reply-to:\n &lt;F1962646D3B64642B7C9A06068EE1E640E143B11@...&gt;\r\nDate: Sat, 07 Aug 2010 12:47:52 +0200\r\nCc: REST Discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nMessage-id: &lt;BE3D8659-B762-4759-BC8C-13B4DA985C5F@...&gt;\r\nReferences: &lt;E2B20222-E511-4AB8-A2CE-A21C815E9254@...&gt;\n &lt;F1962646D3B64642B7C9A06068EE1E640E143857@...&gt;\n &lt;EA60732C-3B00-45D4-8FD8-02EB1B2144F5@...&gt;\n &lt;F1962646D3B64642B7C9A06068EE1E640E143B11@...&gt;\r\nTo: Robert Brewer &lt;fumanchu@...&gt;\r\nX-Mailer: Apple Mail (2.1081)\r\nFrom: Jan Algermissen &lt;algermissen1971@...&gt;\r\nSubject: Re: [rest-discuss] Atom feed vs. list of orders\r\nX-Yahoo-Group-Post: member; u=289191104; y=v0dudjWCwr3ST3j9XbvmmaBaV68t9WLwIeAZHueD-N4_mTofubcKnfk3\r\nX-Yahoo-Profile: algermissen1971\r\n\r\n\nOn Aug 7, 2010, at 12:25 AM, Robert Brewer wrote:\n\n&gt;&gt; Jan Algermissen wrote:\n\n&gt;&gt; The question is whether Accept: text/html is indeed sufficient. Is it\n&gt;&gt; true that the user agent can persue its implemented goal of compiling\n&gt; a\n&gt;&gt; list of all newly ordered items from any HTML document?\n&gt;&gt; \n&gt;&gt; Suppose the server provides both, application/order and text/html as\n&gt;&gt; representations of the list of new orders. When a user agent comes\n&gt;&gt; along that says Accept: text/html the server can freely assume\n&gt; browser-\n&gt;&gt; like capabilities of the user agent (any HTML will do; even an &lt;ul&gt;\n&gt;&gt; with items referring to scanned PNGs of the orders). IOW, the owner of\n&gt;&gt; the server is free to change the implementation for text/html as long\n&gt;&gt; as a) the resource semantics remain stable (list of new orders) and\n&gt;&gt; valid HTML is returned.\n&gt;&gt; \n&gt;&gt; How would the user agent implementation deal with HTML? Special\n&gt;&gt; syntactic assumptions are not allowed (because of Accept: text/html)\n&gt; or\n&gt;&gt; would mean a hidden coupling. How would a user agent distinguish\n&gt;&gt; between an HTML it does not understand but that contains orders (e.g.\n&gt;&gt; the list of scanned order images) and an empty list of orders that is\n&gt;&gt; augmented with some HTML it does not (and need not) understand?\n&gt;&gt; \n&gt;&gt; IMO that is impossible and hence Accept: text/html does not cut it.\n&gt; \n&gt; I think all that demonstrates is that HTML is too generic to be useful\n&gt; for your particular task, not that all media types require &quot;special\n&gt; syntactic assumptions&quot; (whether implicit or explicit). The fact that you\n&gt; can make a &quot;list&quot; in HTML using any of a hundred types of tags doesn&#39;t\n&gt; mean Atom, for example, also suffers from the same inappropriateness to\n&gt; your task.\n&gt; \n&gt; \n\nI knew you were going to say that :-)\n\nLet&#39;s see:\n\nThe implementor of the server side chooses to expose the order list as HTML and Atom. In the Atom case, she would write sth like this (in JAX-RS):\n\n@Path(&quot;/new-orders&quot;)\nclass NewOrders {\n\n  @GET\n  @Produces(&quot;text/html&quot;)\n  public Response newOrdersAsHTML() {\n     // ...\n  }\n\n  @GET\n  @Produces(&quot;application/atom+xml&quot;)\n  public Response newOrdersAsAtomFeed() {\n       \n  }\n}\n\n\nWhen it comes to implementing (or changing) the Atom-producing method, the server developer need not (must not) be concerned with any client expectations. All that matters is to produce any valid Atom feed[1].\n\nGiven that, it would be a perfectly fine implementation to produce an Atom feed such as this:\n\n&lt;feed&gt;\n  &lt;entry&gt;\n    &lt;summary type=&quot;xhtml&quot;&gt;\n      &lt;xhtml:div xmlns:xhtml=&quot;http://www.w3.org/1999/xhtml&quot;&gt;\n        &lt;xhtml:h1&gt;Order 551-A-1272&lt;/xhtml:h1&gt;\n        &lt;xhtml:ul&gt;\n          &lt;xhtml:li&gt;Device Foo, Item Price: ... &lt;/xhtml:li&gt;\n          &lt;xhtml:li&gt;Screw Bar, Item Price: ... &lt;/xhtml:li&gt;\n        &lt;/xhtml:ul&gt;\n        &lt;xhtml:b&gt;Total: 600 EUR&lt;/xhtml:b&gt;   \n      &lt;/xhtml:div&gt;\n    &lt;/summary&gt;\n    &lt;content type=&quot;image/png&quot; src=&quot;/scan-archive/orders/551-A-1272.png&quot;/&gt;\n  &lt;/entry&gt;\n  &lt;entry&gt;\n    &lt;summary type=&quot;xhtml&quot;&gt;\n      &lt;xhtml:div xmlns:xhtml=&quot;http://www.w3.org/1999/xhtml&quot;&gt;\n        &lt;xhtml:h1&gt;Order 551-A-1273&lt;/xhtml:h1&gt;\n        &lt;xhtml:ul&gt;\n          &lt;xhtml:li&gt;Device Foo, Item Price: ... &lt;/xhtml:li&gt;\n          &lt;xhtml:li&gt;Screw Bar, Item Price: ... &lt;/xhtml:li&gt;\n        &lt;/xhtml:ul&gt;\n        &lt;xhtml:b&gt;Total: 600 EUR&lt;/xhtml:b&gt;   \n      &lt;/xhtml:div&gt;\n    &lt;/summary&gt;\n    &lt;content type=&quot;image/png&quot; src=&quot;/scan-archive/orders/551-A-1273.png&quot;/&gt;\n  &lt;/entry&gt;\n&lt;/feed&gt;\n\n\nIf you develop a user agent that says Accept: application/atom+xml;type=feed you must be prepared to receive the above feed.\n\nWhile a usual feed reader (e.g. Apple Mail) would be able to perform it&#39;s implemented goal based on that feed our compile-list-of-newly-ordered-items user agent would definitely not be able to do what it is implemented to do.\n\nTwo questions arise:\n\n1. How does the user agent detect that it cannot perform its task but (despite having a perfectly valid answer)\n2. What to do about that\n\n\n1.:\nGiven the feed above, how do we need to implement the client to report to the user (e.g. someone that at some point looks in a log file or someone that uses the business intelligence application that uses the compiled reports about newly ordered items) that a correct answer was received, that it did indeed contain orders but that the list could not be processed as intended?\n\nFirst of all, the client trusts the higher level assumption that the resource indeed provides the list of new orders. This is the same kind of trust that any browser has when it follows an &lt;img src=&quot;&quot;/&gt; hypermedia control. The server told the user agent something about the referenced resource and the client can reasonably expect that to be true (otherwise we would deal with a broken server and that is not the issue here).\n\nSince the client expects the feed to represent the list of new orders, it is IMHO reasonable to assume that any entry in that feed points to a new order. No entries would mean &#39;no new orders&#39;. This is IMHO not semantic tunneling through the Atom feed because the assumption is backed by the semantics of the resource as advertised by the server.\n\nThe feed appearently contains two entries, hence the user agent can be programmed to understand that there are two new orders to process. When it comes to processing the orders the user agent will have to realize that neither the summary nor the referenced content is available in a format that is sufficient to extract the ordered items automatically. Hence the user agent has to report an error eventually leading to some human action to fix the situation:\n\n2.:\nWe reach question #2 once the fact that a problem exists for the user agent has reached a human. What is he supposed to do? There are three options:\n\na) call the server developer and negotiate a certain format for the Atom feed\nb) adjust the user agent implementation to handle the format received (e.g. parse out the HTML from the summary or OCR the scanned orders)\nc) do nothing except mark the compiled report as &#39;wrong&#39; or &#39;unusable&#39;. IWO, accept the fact that the user goal cannot be satisfied\n\na) Leads to coupling (if it is at all possible/desireable to call the server implementor)\nb) Does not improve the situation because the format can just change again tomorrow\nc) is the honest option but provides no business value\n\nIn my opinion, the only thing to really improve the situation is to standardize a format that allows the server developer to actually determine the user agent expectations (capabilities) from the Accept header. If we had application/orderlist (or at least application/atom+xml;profile=orderlist) the server developer would need to either add a new response-producing method or send a 406.\n\nDoes that sufficiently illustrate the point?\n\nJan\n\n\n[1] and of course be true to be true to the server&#39;s own statement that the resource represents\n    the new orders. It would be bad to serve a list of shipped orders, for example.\n\n\n\n\n\n\n&gt; Robert Brewer\n&gt; fumanchu@...\n&gt; \n\n-----------------------------------\n Jan Algermissen, Consultant\n NORD Software Consulting\n\n Mail: algermissen@...\n Blog: http://www.nordsc.com/blog/\n Work: http://www.nordsc.com/\n-----------------------------------\n\n\n\n\n\n"}}
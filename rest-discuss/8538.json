{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":247794027,"authorName":"Kevin Christen","from":"Kevin Christen &lt;kevin_christen@...&gt;","profile":"kmc146","replyTo":"SENDER","senderId":"XW64W1j5zqN7fvUSjGT5cqGSIcGhbgPwunQsgD9biCVk2c8MwETK7gvwnQecKwTqPRbOy2-67wMM2QZkR21H7e9ubb58YY6iUDQ6hAHaLHXlHcU","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] REST and encapsulation","postDate":"1179873227","msgId":8538,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PE9GRjRFNTdFREYuNjU4OEY4N0QtT044NjI1NzJFMy4wMDc4ODJGRC04NjI1NzJFMy4wMDdCRjE4M0BtY2sudXMucmF5LmNvbT4=","inReplyToHeader":"PDMxMTY2MzhFQjZENUY3NERCQjlFMDMwOUZCQkNCMTQ0MDM2MjgzOTFAYXpzbXN4NDExLmFtci5jb3JwLmludGVsLmNvbT4="},"prevInTopic":8536,"nextInTopic":8539,"prevInTime":8537,"nextInTime":8539,"topicId":8521,"numMessagesInTopic":21,"msgSnippet":"Encapsulation in OO-land is used to prevent transitions to invalid states. In REST, state transitions are accomplished by traversing links (hypertext as the","rawEmail":"Return-Path: &lt;Kevin_Christen@...&gt;\r\nX-Sender: Kevin_Christen@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 68763 invoked from network); 22 May 2007 22:34:00 -0000\r\nReceived: from unknown (66.218.66.68)\n  by m50.grp.scd.yahoo.com with QMQP; 22 May 2007 22:34:00 -0000\r\nReceived: from unknown (HELO dfw-mailout1.raytheon.com) (199.46.199.198)\n  by mta11.grp.scd.yahoo.com with SMTP; 22 May 2007 22:33:59 -0000\r\nReceived: from dmoutc00.directory.ray.com (dmoutc00.directory.ray.com [147.25.138.116])\n\tby dfw-mailout1.raytheon.com (Switch-3.2.5/Switch-3.2.5) with ESMTP id l4MMXotD016791;\n\tTue, 22 May 2007 22:33:55 GMT\r\nReceived: from dmsmtpc00.directory.ray.com (dmsmtpc00.directory.ray.com [138.126.175.34])\n\tby dmoutc00.directory.ray.com (Switch-3.2.5/Switch-3.2.5) with ESMTP id l4MMXo6s019198\n\tsender Kevin_Christen@...;\n\tTue, 22 May 2007 22:33:50 GMT\r\nReceived: from mk2-msg04.mck.us.ray.com (mk2-msg04.mck.us.ray.com [138.126.191.159])\n\tby dmsmtpc00.directory.ray.com (8.12.11/8.12.11) with ESMTP id l4MMXm6K020302\n\tsender Kevin_Christen@...;\n\tTue, 22 May 2007 22:33:48 GMT\r\nIn-Reply-To: &lt;3116638EB6D5F74DBB9E0309FBBCB14403628391@...&gt;\r\nTo: &quot;Peters, Daniel R&quot; &lt;daniel.r.peters@...&gt;\r\nCc: &quot;Rest List&quot; &lt;rest-discuss@yahoogroups.com&gt;\r\nMIME-Version: 1.0\r\nX-Mailer: Lotus Notes Release 6.5.2 June 01, 2004\r\nMessage-ID: &lt;OFF4E57EDF.6588F87D-ON862572E3.007882FD-862572E3.007BF183@...&gt;\r\nDate: Tue, 22 May 2007 17:33:47 -0500\r\nX-MIMETrack: Serialize by Router on MK2-MSG04/SRV/Raytheon(Release 7.0.2FP1HF96 | March\n 1, 2007) at 05/22/2007 17:33:47,\n\tSerialize complete at 05/22/2007 17:33:47\r\nContent-Type: multipart/alternative; boundary=&quot;=_alternative 007BF17F862572E3_=&quot;\r\nX-eGroups-Msg-Info: 1:0:0:0\r\nFrom: Kevin Christen &lt;kevin_christen@...&gt;\r\nSubject: Re: [rest-discuss] REST and encapsulation\r\nX-Yahoo-Group-Post: member; u=247794027; y=8UMA7FRR6PEribbDj7mxWKwy8novT__uJJ-FzixVlrnk\r\nX-Yahoo-Profile: kmc146\r\n\r\n\r\n--=_alternative 007BF17F862572E3_=\r\nContent-Type: text/plain; charset=&quot;US-ASCII&quot;\r\n\r\nEncapsulation in OO-land is used to prevent transitions to invalid states. \n In REST, state transitions are accomplished by traversing links \n(hypertext as the engine of application state).  To add the flavor of an \ninvalid state transition to your example let&#39;s say that once completed,  a \nresource can&#39;t be made incomplete again.  Then I think something like your \nlast approach works best:\n\n&lt;object&gt;\n    &lt;IsComplete/&gt; \n    ....\n&lt;/object&gt;\n\nfor complete resources, and\n\n&lt;object&gt;\n    &lt;IsIncomplete/&gt; \n    ....\n    &lt;MarkComplete href=&#39;..../lists/completeItems&#39;/&gt;\n&lt;/object&gt;\n\nfor incomplete resources.\n\nBut if you want to get by without hypertext in this example, the server \nwould reject the POST of a representation like this\n\n&lt;object&gt;\n    &lt;completeState&gt;INCOMPLETE&lt;/completeState&gt;\n&lt;/object&gt;\n\nto an already complete resource, probably with a 409 CONFLICT (The request \ncould not be completed due to a conflict with the current state of the \nresource).\n\nIn either approach, encapsulation is being provided by the server&#39;s \nbusiness logic.  In the first approach, the server doesn&#39;t hand out URLs \nthat would allow invalid state transitions.  In the second approach the \nserver rejects representations that would cause invalid state transitions. \n But it&#39;s not really in the representation that that&#39;s accomplished, it&#39;s \nin the server logic.\n\nRegards,\nKevin Christen\n\nrest-discuss@yahoogroups.com wrote on 05/22/2007 03:22:30 PM:\n\n&gt; Hi,\n&gt; \n&gt; I&#39;m new to the world of REST web services.  I&#39;ve done a bit of study\n&gt; on the subject, and I&#39;m ready to start trying out some ideas. \n&gt; Before I stumble forward, though, I want to see what the general \n&gt; consensus is on a few issues that my reading hasn&#39;t really clarified.\n&gt; \n&gt; The first one centers on the notion of encapsulation.  For example, \n&gt; if I am building an application from objects, most good advice urges\n&gt; you to encapsulate the object&#39;s state where possible.  For example, \n&gt; if I design a class that can be either COMPLETE, or INCOMPLETE, a \n&gt; design that exposes methods like:\n&gt; \n&gt; object.MarkComplete and\n&gt; object MarkIncomplete\n&gt; \n&gt; to effect a change to the CompleteState and\n&gt; \n&gt; object.IsComplete and\n&gt; object.IsIncomplete\n&gt; \n&gt; to observe the state seems to be generally preferred over a design \n&gt; that gives clients direct access to the object&#39;s state through \n&gt; &quot;setter&quot; and &quot;getter&quot; methods like:\n&gt; \n&gt; object.SetCompleteState(COMPLETE/INCOMPLETE) and\n&gt; object.GetCompleteState\n&gt; \n&gt; or maybe \n&gt; \n&gt; object.IsComplete(bool) and\n&gt; bool object.IsComplete\n&gt; \n&gt; My question is what to do about exposing an object like this as a \n&gt; resource.  The basic approach that seems most common would seem to \n&gt; prefer a &quot;setter/getter&quot; approach by passing a representation like this:\n&gt; \n&gt; &lt;object&gt;\n&gt;     &lt;completeState&gt;INCOMPLETE&lt;/completeState&gt;\n&gt; &lt;/object&gt;\n&gt; \n&gt; into and out of the restful web service.  This seems to me to fly in\n&gt; the face of the notion of encapsulation. \n&gt; \n&gt; Assuming encapsulation of this sort is an important feature of \n&gt; RESTful design (Is it?), I am thinking of different ways to approach\n&gt; this to preserve the encapsulation.\n&gt; \n&gt; The first idea I had would change the representation so that it&#39;s \n&gt; contents are more &quot;method-like&quot; than &quot;data-like&quot;:\n&gt; \n&gt; &lt;object&gt;\n&gt;     &lt;MarkComplete/&gt;\n&gt; &lt;/object&gt;\n&gt; \n&gt; or \n&gt; \n&gt; &lt;object&gt;\n&gt;     &lt;MarkIncomplete/&gt;\n&gt; &lt;/object&gt;\n&gt; \n&gt; for PUTs\n&gt; \n&gt; and \n&gt; \n&gt; &lt;object&gt;\n&gt;     &lt;IsComplete/&gt;\n&gt; &lt;/object&gt;\n&gt; \n&gt; for GETs\n&gt; \n&gt; So when the representation is passed into the web service through a \n&gt; PUT or POST, the presence of the tag is essentially an indication to\n&gt; the service to apply the &quot;MarkComplete&quot; method to the resource. \n&gt; This seems a lot like protocol tunneling to me, so I assume it&#39;s \n&gt; poor design. Maybe there&#39;s a distinction that is eluding me, so I \n&gt; thought I would include it.\n&gt; \n&gt; The next idea I had was to expose resources representing the \n&gt; collection of &quot;complete&quot; items and the collection of &quot;incomplete&quot; \n&gt; items.  In order to change the state of a resource, I could POST the\n&gt; Uri of the resource to the proper collection and code behind the \n&gt; scenes would take care of updating the state appropriately.\n&gt; \n&gt; This seems a lot more RESTful to me, but it seems to be problematic \n&gt; for the client; the client will have to obtain the &quot;complete&quot; item \n&gt; list, for example, and then search it in order to see if a given \n&gt; item&#39;s state is COMPLETE.\n&gt; \n&gt; So, next, I thought that perhaps I would embed the status into the \n&gt; representation for testing set membership, but only allow \n&gt; modifications using the list resources.  So the client would see \n&gt; something like before:\n&gt; \n&gt; &lt;object&gt;\n&gt;     &lt;IsComplete/&gt;\n&gt; &lt;/object&gt;\n&gt; \n&gt; or more probably:\n&gt; \n&gt; &lt;object&gt;\n&gt;     &lt;IsComplete/&gt; \n&gt;     ....\n&gt;     &lt;MarkComplete href=&#39;..../lists/completeItems&#39;/&gt;\n&gt;     &lt;MarkIncomplete href=&#39;..../lists/IncompleteItems&#39;/&gt;\n&gt; &lt;/object&gt;\n&gt; \n&gt; or some similar variation.\n&gt; \n&gt; Changing the &lt;IsComplete/&gt; to something else and then PUTting the \n&gt; new representation back to the item&#39;s Url would be ignored.  The \n&gt; state would only change if the client POSTed the Url of the item to \n&gt; the appropriate list.\n&gt; \n&gt; This seems okay to me.  It protects encapsulation in that the client\n&gt; has no way to directly observe or change the resource&#39;s private \n&gt; state.  It also seems to me (remember, I am a novice) to follow REST\n&gt; principles.  The lack of symmetry for observing and changing the \n&gt; state seems a little cumbersome to me, though.\n&gt; \n&gt; So, which of these approaches is best from a design standpoint, and \n&gt; are there others that are better?\n&gt; \n&gt; Thanks in advance for any insight.\n&gt; \n&gt; \n&gt;  \r\n--=_alternative 007BF17F862572E3_=\r\nContent-Type: text/html; charset=&quot;US-ASCII&quot;\r\n\r\n\n&lt;br&gt;&lt;font size=2 face=&quot;sans-serif&quot;&gt;Encapsulation in OO-land is used to\nprevent transitions to invalid states. &nbsp;In REST, state transitions\nare accomplished by traversing links (hypertext as the engine of application\nstate). &nbsp;To add the flavor of an invalid state transition to your\nexample let&#39;s say that once completed, &nbsp;a resource can&#39;t be made incomplete\nagain. &nbsp;Then I think something like your last approach works best:&lt;/font&gt;\n&lt;br&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&lt;object&gt;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&nbsp; &nbsp; &lt;IsComplete/&gt; &lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&nbsp; &nbsp; ....&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&lt;/object&gt;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;\n&lt;br&gt;&lt;font size=2 face=&quot;sans-serif&quot;&gt;for complete resources, and&lt;/font&gt;\n&lt;br&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&lt;object&gt;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&nbsp; &nbsp; &lt;IsIncomplete/&gt; &lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&nbsp; &nbsp; ....&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&nbsp; &nbsp; &lt;MarkComplete href=&#39;..../lists/completeItems&#39;/&gt;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&lt;/object&gt;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;\n&lt;br&gt;&lt;font size=2 face=&quot;sans-serif&quot;&gt;for incomplete resources.&lt;/font&gt;\n&lt;br&gt;\n&lt;br&gt;&lt;font size=2 face=&quot;sans-serif&quot;&gt;But if you want to get by without hypertext\nin this example, the server would reject the POST of a representation like\nthis&lt;/font&gt;\n&lt;br&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&lt;object&gt;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&nbsp; &nbsp; &lt;completeState&gt;INCOMPLETE&lt;/completeState&gt;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&lt;/object&gt;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;\n&lt;br&gt;&lt;font size=2 face=&quot;sans-serif&quot;&gt;to an already complete resource, probably\nwith a 409 CONFLICT (The request could not be completed due to a conflict\nwith the current state of the resource).&lt;/font&gt;\n&lt;br&gt;\n&lt;br&gt;&lt;font size=2 face=&quot;sans-serif&quot;&gt;In either approach, encapsulation is\nbeing provided by the server&#39;s business logic. &nbsp;In the first approach,\nthe server doesn&#39;t hand out URLs that would allow invalid state transitions.\n&nbsp;In the second approach the server rejects representations that would\ncause invalid state transitions. &nbsp;But it&#39;s not really in the representation\nthat that&#39;s accomplished, it&#39;s in the server logic.&lt;/font&gt;\n&lt;br&gt;\n&lt;br&gt;&lt;font size=2 face=&quot;sans-serif&quot;&gt;Regards,&lt;/font&gt;\n&lt;br&gt;&lt;font size=2 face=&quot;sans-serif&quot;&gt;Kevin Christen&lt;/font&gt;\n&lt;br&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;rest-discuss@yahoogroups.com wrote on 05/22/2007 03:22:30\nPM:&lt;br&gt;\n&lt;br&gt;\n&gt; Hi,&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &nbsp;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; I&#39;m new to the world of REST web services. &nbsp;I&#39;ve\ndone a bit of study&lt;br&gt;\n&gt; on the subject, and I&#39;m ready to start trying out some ideas. &nbsp;&lt;br&gt;\n&gt; Before I stumble forward, though, I want to see what the general &lt;br&gt;\n&gt; consensus is on a few issues that my reading hasn&#39;t really clarified.&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &nbsp;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; The first one centers on the notion of encapsulation.\n&nbsp;For example, &lt;br&gt;\n&gt; if I am building an application from objects, most good advice urges&lt;br&gt;\n&gt; you to encapsulate the object&#39;s state where possible. &nbsp;For example,\n&lt;br&gt;\n&gt; if I design a class that can be either COMPLETE, or INCOMPLETE, a\n&lt;br&gt;\n&gt; design that exposes methods like:&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &nbsp;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; object.MarkComplete and&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; object MarkIncomplete&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &nbsp;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; to effect a change to the CompleteState and&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &nbsp;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; object.IsComplete and&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; object.IsIncomplete&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &nbsp;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; to observe the state seems to be generally preferred\nover a design &lt;br&gt;\n&gt; that gives clients direct access to the object&#39;s state through &lt;br&gt;\n&gt; &quot;setter&quot; and &quot;getter&quot; methods like:&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &nbsp;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; object.SetCompleteState(COMPLETE/INCOMPLETE)\nand&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; object.GetCompleteState&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &nbsp;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; or maybe &lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &nbsp;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; object.IsComplete(bool) and&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; bool object.IsComplete&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &nbsp;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; My question is what to do about exposing an object\nlike this as a &lt;br&gt;\n&gt; resource. &nbsp;The basic approach that seems most common would seem\nto &lt;br&gt;\n&gt; prefer a &quot;setter/getter&quot; approach by passing a representation\nlike this:&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &nbsp;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &lt;object&gt;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &nbsp; &nbsp; &lt;completeState&gt;INCOMPLETE&lt;/completeState&gt;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &lt;/object&gt;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &nbsp;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; into and out of the restful web service. &nbsp;This\nseems to me to fly in&lt;br&gt;\n&gt; the face of the notion of encapsulation. &lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &nbsp;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; Assuming encapsulation of this sort is an important\nfeature of &lt;br&gt;\n&gt; RESTful design (Is it?), I am thinking of different ways to approach&lt;br&gt;\n&gt; this to preserve the encapsulation.&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &nbsp;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; The first idea I had would change the representation\nso that it&#39;s &lt;br&gt;\n&gt; contents are more &quot;method-like&quot; than &quot;data-like&quot;:&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &nbsp;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &lt;object&gt;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &nbsp; &nbsp; &lt;MarkComplete/&gt;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &lt;/object&gt;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &nbsp;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; or &lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &nbsp;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &lt;object&gt;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &nbsp; &nbsp; &lt;MarkIncomplete/&gt;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &lt;/object&gt;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &nbsp;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; for PUTs&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &nbsp;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; and &lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &nbsp; &lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &lt;object&gt;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &nbsp; &nbsp; &lt;IsComplete/&gt;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &lt;/object&gt;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &nbsp;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; for GETs&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &nbsp;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; So when the representation is passed into the\nweb service through a &lt;br&gt;\n&gt; PUT or POST, the presence of the tag is essentially an indication\nto&lt;br&gt;\n&gt; the service to apply the &quot;MarkComplete&quot; method to the resource.\n&nbsp;&lt;br&gt;\n&gt; This seems a lot like protocol tunneling to me, so I assume it&#39;s &lt;br&gt;\n&gt; poor design. Maybe there&#39;s a distinction that is eluding me, so I\n&lt;br&gt;\n&gt; thought I would include it.&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &nbsp;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; The next idea I had was to expose resources representing\nthe &lt;br&gt;\n&gt; collection of &quot;complete&quot; items and the collection of &quot;incomplete&quot;\n&lt;br&gt;\n&gt; items. &nbsp;In order to change the state of a resource, I could POST\nthe&lt;br&gt;\n&gt; Uri of the resource to the proper collection and code behind the &lt;br&gt;\n&gt; scenes would take care of updating the state appropriately.&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &nbsp;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; This seems a lot more RESTful to me, but it seems\nto be problematic &lt;br&gt;\n&gt; for the client; the client will have to obtain the &quot;complete&quot;\nitem &lt;br&gt;\n&gt; list, for example, and then search it in order to see if a given &lt;br&gt;\n&gt; item&#39;s state is COMPLETE.&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &nbsp;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; So, next, I thought that perhaps I would embed\nthe status into the &lt;br&gt;\n&gt; representation for testing set membership, but only allow &lt;br&gt;\n&gt; modifications using the list resources. &nbsp;So the client would\nsee &lt;br&gt;\n&gt; something like before:&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &nbsp;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &lt;object&gt;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &nbsp; &nbsp; &lt;IsComplete/&gt;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &lt;/object&gt;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &nbsp;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; or more probably:&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &nbsp; &lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &lt;object&gt;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &nbsp; &nbsp; &lt;IsComplete/&gt; &lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &nbsp; &nbsp; ....&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &nbsp; &nbsp; &lt;MarkComplete href=&#39;..../lists/completeItems&#39;/&gt;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &nbsp; &nbsp; &lt;MarkIncomplete href=&#39;..../lists/IncompleteItems&#39;/&gt;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &lt;/object&gt;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &nbsp;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; or some similar variation.&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &nbsp;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; Changing the &lt;IsComplete/&gt; to something\nelse and then PUTting the &lt;br&gt;\n&gt; new representation back to the item&#39;s Url would be ignored. &nbsp;The\n&lt;br&gt;\n&gt; state would only change if the client POSTed the Url of the item to\n&lt;br&gt;\n&gt; the appropriate list.&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &nbsp;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; This seems okay to me. &nbsp;It protects encapsulation\nin that the client&lt;br&gt;\n&gt; has no way to directly observe or change the resource&#39;s private &lt;br&gt;\n&gt; state. &nbsp;It also seems to me (remember, I am a novice) to follow\nREST&lt;br&gt;\n&gt; principles. &nbsp;The lack of symmetry for observing and changing\nthe &lt;br&gt;\n&gt; state seems a little cumbersome to me, though.&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &nbsp;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; So, which of these approaches is best from a\ndesign standpoint, and &lt;br&gt;\n&gt; are there others that are better?&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &nbsp;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; Thanks in advance for any insight.&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &nbsp;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt; &nbsp;&lt;/tt&gt;&lt;/font&gt;\n&lt;br&gt;&lt;font size=2&gt;&lt;tt&gt;&gt;  &lt;/tt&gt;&lt;/font&gt;\r\n--=_alternative 007BF17F862572E3_=--\r\n\n"}}
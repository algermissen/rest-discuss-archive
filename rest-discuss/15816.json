{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":210009313,"authorName":"Glenn Block","from":"Glenn Block &lt;glenn.block@...&gt;","profile":"glenn_block","replyTo":"SENDER","senderId":"HtGlTu2HsZdyuRoLkBibLfy2sA-Iwg0gFC8NcUv_a9AiORL-XcSZVLj6DxLxMdMI9tw26eW9vmikLTJFbGkO_V_Xrz9ZNAbEnMo","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Re: Restful Approaches to some Enterprise \tIntegration Problems","postDate":"1278581089","msgId":15816,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEFBTkxrVGluaGlaMUJrR2JpWjhBU3A3bjhDTFhXT3hpSlVWSncyXzBJRVlEdUBtYWlsLmdtYWlsLmNvbT4=","inReplyToHeader":"PDVDQjA1QjdCLTc2QUMtNDA2NS05MEE1LTVBQzIwNDg1RTcwQUBtYWMuY29tPg==","referencesHeader":"PGkwdWxraCtsdnI5QGVHcm91cHMuY29tPgk8MDYxQzYzMkEtRERCNy00REUzLUIyMEQtRTgxRjY3NzIxQzA4QGdiaXYuY29tPgk8QUFOTGtUaW5rU21tb3JSb3MxazJiWkY3WllmUDBTR3ZGTDc1dzBMclNhc3VzQG1haWwuZ21haWwuY29tPgk8NUNCMDVCN0ItNzZBQy00MDY1LTkwQTUtNUFDMjA0ODVFNzBBQG1hYy5jb20+"},"prevInTopic":15815,"nextInTopic":15817,"prevInTime":15815,"nextInTime":15817,"topicId":15761,"numMessagesInTopic":45,"msgSnippet":"Thanks all!","rawEmail":"Return-Path: &lt;glenn.block@...&gt;\r\nX-Sender: glenn.block@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 24213 invoked from network); 8 Jul 2010 09:24:52 -0000\r\nX-Received: from unknown (98.137.34.45)\n  by m11.grp.re1.yahoo.com with QMQP; 8 Jul 2010 09:24:52 -0000\r\nX-Received: from unknown (HELO mail-qw0-f41.google.com) (209.85.216.41)\n  by mta2.grp.sp2.yahoo.com with SMTP; 8 Jul 2010 09:24:51 -0000\r\nX-Received: by qwk4 with SMTP id 4so203238qwk.14\n        for &lt;rest-discuss@yahoogroups.com&gt;; Thu, 08 Jul 2010 02:24:51 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.224.78.133 with SMTP id l5mr3420379qak.286.1278581090185; Thu, \n\t08 Jul 2010 02:24:50 -0700 (PDT)\r\nX-Received: by 10.229.219.85 with HTTP; Thu, 8 Jul 2010 02:24:49 -0700 (PDT)\r\nIn-Reply-To: &lt;5CB05B7B-76AC-4065-90A5-5AC20485E70A@...&gt;\r\nReferences: &lt;i0ulkh+lvr9@...&gt;\n\t&lt;061C632A-DDB7-4DE3-B20D-E81F67721C08@...&gt;\n\t&lt;AANLkTinkSmmorRos1k2bZF7ZYfP0SGvFL75w0LrSasus@...&gt;\n\t&lt;5CB05B7B-76AC-4065-90A5-5AC20485E70A@...&gt;\r\nDate: Thu, 8 Jul 2010 02:24:49 -0700\r\nMessage-ID: &lt;AANLkTinhiZ1BkGbiZ8ASp7n8CLXWOxiJUVJw2_0IEYDu@...&gt;\r\nTo: Jan Algermissen &lt;algermissen1971@...&gt;\r\nCc: REST Discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Type: multipart/alternative; boundary=00c09f8a511fb27254048adcdb1c\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Glenn Block &lt;glenn.block@...&gt;\r\nSubject: Re: [rest-discuss] Re: Restful Approaches to some Enterprise \n\tIntegration Problems\r\nX-Yahoo-Group-Post: member; u=210009313; y=-6KcMhI8q0Q8mVygxdAYCXOfnoSOqeXm63UD3kU0tKfmp5mTsF4\r\nX-Yahoo-Profile: glenn_block\r\n\r\n\r\n--00c09f8a511fb27254048adcdb1c\r\nContent-Type: text/plain; charset=ISO-8859-1\r\n\r\nThanks all!\n\nOn Thu, Jul 8, 2010 at 2:11 AM, Jan Algermissen &lt;algermissen1971@...&gt;wrote:\n\n&gt;\n&gt; On Jul 8, 2010, at 7:52 AM, Glenn Block wrote:\n&gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt; Hi Roy\n&gt; &gt;\n&gt; &gt; Any thoughs on HTML5 Web Sockets wrt REST? Would it be viable to have a\n&gt; REST resources that can communicate changes (events) through web sockets? Or\n&gt; would you say that it is orthagonal?\n&gt;\n&gt; While it is certainly possible (and even with pure HTTP[1]) it would be\n&gt; against the simplicity/understandability goals of REST because it\n&gt; complicates the architecture (client components take a server role).\n&gt;\n&gt; I&#39;d try to go with polling as long as possible.\n&gt;\n&gt; Jan\n&gt;\n&gt;\n&gt; [1] http://sourceforge.net/projects/mod-pubsub/\n&gt;\n&gt;\n&gt;\n&gt; &gt;\n&gt; &gt; Thanks\n&gt; &gt; Glenn\n&gt; &gt;\n&gt; &gt; On Wed, Jul 7, 2010 at 8:25 PM, Roy T.Fielding &lt;fielding@...&gt;\n&gt; wrote:\n&gt; &gt;\n&gt; &gt;\n&gt; &gt; On Jul 6, 2010, at 12:22 AM, bryan_w_taylor wrote:\n&gt; &gt; &gt; --- In rest-discuss@yahoogroups.com, &quot;Roy T. Fielding&quot; &lt;fielding@...&gt;\n&gt; wrote:\n&gt; &gt; &gt;\n&gt; &gt; &gt; &gt; &gt; Specifically, we are trying to find RESTful solutions to:\n&gt; &gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; &gt; 1) Guaranteed Delivery - we need a paradigm to follow so that one\n&gt; service can transfer a sequence of resource representations to another\n&gt; reliably even though both services and the network suffer temporary\n&gt; unreliability\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; That doesn&#39;t sound like a problem encountered by RESTful\n&gt; &gt; &gt; &gt; architectures. Reliable upload of multiple files can be\n&gt; &gt; &gt; &gt; performed using a single zip file, but the assumption being made\n&gt; &gt; &gt; &gt; here is that the client has a shared understanding of what the\n&gt; &gt; &gt; &gt; server is intending to do with those files. That&#39;s coupling.\n&gt; &gt; &gt;\n&gt; &gt; &gt; I don&#39;t follow. Several people have given good simple answers saying to\n&gt; use the idempotent nature of PUT (or fake it with POST) until a GET of the\n&gt; resource succeeds or add an HTTP header of If-None-Match: * and repeat the\n&gt; PUT until you get a 412 Precondition Failed response, so I thought this was\n&gt; a slam dunk.\n&gt; &gt;\n&gt; &gt; I guess it depends on how you define guaranteed delivery. You can\n&gt; &gt; certainly do such things with HTTP, but doing CRUD ops via HTTP does\n&gt; &gt; not automatically make it a RESTful paradigm.\n&gt; &gt;\n&gt; &gt;\n&gt; &gt; &gt; But that answers &quot;how&quot; and I think you are getting at &quot;why&quot;. I&#39;m\n&gt; imagining that we have two servers A and B, where A plays the role of the\n&gt; client in the interaction. Events happen on server A and server B must\n&gt; receive some representation related to each event or unacceptable business\n&gt; consequences occur.\n&gt; &gt;\n&gt; &gt; Ah, typical event-based integration. That&#39;s a good architectural\n&gt; &gt; style for some applications. Why use REST to do that?\n&gt; &gt;\n&gt; &gt;\n&gt; &gt; &gt; Why can&#39;t we merge the functionality of server A and B? Lots of\n&gt; reasons: Security, regulatory compliance, use of 3rd party systems,\n&gt; organizational boundaries and/or politics are a few. The way a company\n&gt; manages it&#39;s systems engineering work is to partition business functionality\n&gt; into pieces, give ownership of each piece to a team, and align physical\n&gt; resources like servers to those teams. If this imposes constraints not found\n&gt; in RESTful systems, then I have no choice but to deal with those.\n&gt; &gt;\n&gt; &gt; Yes, but the RESTful solution is not to pretend that REST is an\n&gt; &gt; event-based integration style. What you want to do with REST is\n&gt; &gt; re-architect the system into more isolated parts that are event-based\n&gt; &gt; (usually a very small communication subsystem) and the remainder\n&gt; &gt; as a layered information system. The reason to do this, presumably,\n&gt; &gt; is to expose the RESTful interface to consumers instead of exposing\n&gt; &gt; the much more complex (and brittle) event interface.\n&gt; &gt;\n&gt; &gt; For example, CQ5 has a content repository based on the JCR\n&gt; &gt; interface, which includes both observation (change event notifiers)\n&gt; &gt; and RESTful interaction. The observation is behind the resource\n&gt; &gt; interface, so the fact that it isn&#39;t RESTful itself does not\n&gt; &gt; interfere with the multi-organizational, long-lived applications\n&gt; &gt; that might only use the Web interface.\n&gt; &gt;\n&gt; &gt;\n&gt; &gt; &gt; &gt; Applications like that are usually accomplished via code-on-demand.\n&gt; &gt; &gt; &gt; The problem you will run into here is implementation issues\n&gt; &gt; &gt; &gt; regarding current browsers, not architectural issues and\n&gt; &gt; &gt; &gt; certainly not a style issue. Most such tools are developed\n&gt; &gt; &gt; &gt; as browser extensions or app-specific clients, mostly because\n&gt; &gt; &gt; &gt; they need unfettered access to the filesystem and because\n&gt; &gt; &gt; &gt; browsers (for some unknown reason) don&#39;t include integrity checks\n&gt; &gt; &gt; &gt; in normal file uploads.\n&gt; &gt; &gt;\n&gt; &gt; &gt; I expect the clients of most of our services would count as &quot;app\n&gt; specific clients&quot;. These might be our other services, our app servers that\n&gt; host user interfaces, or sometimes we will allow external business entities\n&gt; (customers, partners, suppliers, etc...) to write such apps directly. I\n&gt; don&#39;t mind going beyond browser limitations.\n&gt; &gt; &gt;\n&gt; &gt; &gt; &gt; &gt; 2) Distributed Transactions - we need a paradigm to allow state\n&gt; changes on multiple services to happen so that the changes succeed or fail\n&gt; as a unit\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; Again, not a characteristic of RESTful architectures. If the\n&gt; &gt; &gt; &gt; client knows the transaction is distributed, you have failed.\n&gt; &gt; &gt; &gt; There are lots of ways to solve this kind of problem on the\n&gt; &gt; &gt; &gt; back-end of services interfaces, behind the resource abstraction,\n&gt; &gt; &gt; &gt; but none of those are relevant to the REST architectural style\n&gt; &gt; &gt; &gt; that might apply on the front-end of the service interface.\n&gt; &gt; &gt;\n&gt; &gt; &gt; This one I accept doesn&#39;t fit in a RESTful solution, and in other posts\n&gt; in this thread, we are exploring several of other ways you mention.\n&gt; &gt; &gt;\n&gt; &gt; &gt; &gt; &gt; 3) Long running operations - we need asynchronous invocations\n&gt; between services and a mechanism for the invoking service to find out when\n&gt; the invoked service is done given that this work may take indefinitely long\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; Any resource can behave as a long-running service. Just program it\n&gt; that way.\n&gt; &gt; &gt;\n&gt; &gt; &gt; Right, the question is how, exactly. Good solutions have been posted in\n&gt; this thread for this. Subbu&#39;s RESTful Web Services Cookbook solves this in\n&gt; examples 1.10 and 1.11. I think this was another slam dunk.\n&gt; &gt; &gt;\n&gt; &gt; &gt; I&#39;m curious what you think about using so called &quot;web hooks&quot; for this\n&gt; kind of thing. Would you consider this a violation of the client-server\n&gt; constraint?\n&gt; &gt;\n&gt; &gt; No, web hooks is just someone&#39;s marketing term for registering\n&gt; &gt; notifications. The components that act on them are still either\n&gt; &gt; clients or servers during the communication (i.e., they are not\n&gt; &gt; trying to do both at the same time and functionality is still\n&gt; &gt; split across components). This is not a new concept. E.g.,\n&gt; &gt;\n&gt; &gt; http://www.xent.com/FoRK-archive/apr98/0445.html\n&gt; &gt;\n&gt; &gt; http://www.xent.com/FoRK-archive/august98/0307.html\n&gt; &gt;\n&gt; &gt;\n&gt; &gt; &gt; &gt; &gt; 4) Workflow Orchestration - we would like to have orchestration\n&gt; services that define business processes via standardized representations (eg\n&gt; BPMN), then execute instances of those processes and build up an process\n&gt; instance execution data resource by interacting with other RESTful resources\n&gt; using message exchange patterns that could specify the above behaviors.\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; That is a system, not an integration problem. If you want to\n&gt; &gt; &gt; &gt; solve it, buy a full-featured WCM system like Day&#39;s CQ5.\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; http://www.day.com/day/en/products/web_content_management.html\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; (sorry, I don&#39;t have a way to answer that one without sounding\n&gt; &gt; &gt; &gt; like a sales plug -- it is, after all, why I work for a WCM vendor).\n&gt; &gt; &gt;\n&gt; &gt; &gt; No need to apologize for pointing me to a product that might be useful\n&gt; for us. I&#39;ve been in several sales presentations in the last couple weeks\n&gt; with different vendors who have big fancy workflow engines. They all want to\n&gt; talk about WS-BPEL and orchestrating our SOAP endpoints. I enjoy the look of\n&gt; confusion when I mention that we are considering not allowing any new\n&gt; services to be created using SOAP. That seems to get their attention. They\n&gt; say &quot;what will you do instead?&quot; and I say use HTTP and they say &quot;huh?&quot;.\n&gt; &gt;\n&gt; &gt; As much as I like doing things in HTTP, there are many closed systems\n&gt; &gt; that are better implemented in an efficient RPC syntax or a wire\n&gt; &gt; protocol specifically designed for message queues. Use whatever\n&gt; &gt; works best for the specific architecture behind the resource interface\n&gt; &gt; and then apply REST as the external facade to support large-scale\n&gt; &gt; integration and reusability of the information produced/consumed.\n&gt; &gt;\n&gt; &gt; Note, however, that SOAP is fairly unique for being the least efficient\n&gt; &gt; way of doing anything. That&#39;s what happens when core protocol design\n&gt; &gt; is driven by marketing.\n&gt; &gt;\n&gt; &gt; ....Roy\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt; \n&gt;\n&gt;  -----------------------------------\n&gt;  Jan Algermissen, Consultant\n&gt;  NORD Software Consulting\n&gt;\n&gt;  Mail: algermissen@...\n&gt;  Blog: http://www.nordsc.com/blog/\n&gt;  Work: http://www.nordsc.com/\n&gt; -----------------------------------\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n\r\n--00c09f8a511fb27254048adcdb1c\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nThanks all!&lt;br&gt;&lt;br&gt;\n&lt;div class=3D&quot;gmail_quote&quot;&gt;On Thu, Jul 8, 2010 at 2:11 =\r\nAM, Jan Algermissen &lt;span dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:algermissen1971=\r\n@...&quot;&gt;algermissen1971@...&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;\n&lt;blockquote sty=\r\nle=3D&quot;BORDER-LEFT: #ccc 1px solid; MARGIN: 0px 0px 0px 0.8ex; PADDING-LEFT:=\r\n 1ex&quot; class=3D&quot;gmail_quote&quot;&gt;\n&lt;div class=3D&quot;im&quot;&gt;&lt;br&gt;On Jul 8, 2010, at 7:52 =\r\nAM, Glenn Block wrote:&lt;br&gt;&lt;br&gt;&gt;&lt;br&gt;&gt;&lt;br&gt;&gt; Hi Roy&lt;br&gt;&gt;&lt;br&gt;&gt; A=\r\nny thoughs on HTML5 Web Sockets wrt REST? Would it be viable to have a REST=\r\n resources that can communicate changes (events) through web sockets? Or wo=\r\nuld you say that it is orthagonal?&lt;br&gt;\n&lt;br&gt;&lt;/div&gt;While it is certainly poss=\r\nible (and even with pure HTTP[1]) it would be against the simplicity/unders=\r\ntandability goals of REST because it complicates the architecture (client c=\r\nomponents take a server role).&lt;br&gt;&lt;br&gt;\nI&#39;d try to go with polling as lo=\r\nng as possible.&lt;br&gt;&lt;br&gt;Jan&lt;br&gt;&lt;br&gt;&lt;br&gt;[1] &lt;a href=3D&quot;http://sourceforge.net=\r\n/projects/mod-pubsub/&quot; target=3D&quot;_blank&quot;&gt;http://sourceforge.net/projects/mo=\r\nd-pubsub/&lt;/a&gt;&lt;br&gt;\n&lt;div&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div class=3D&quot;h5&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&gt;&lt;br&gt;&=\r\ngt; Thanks&lt;br&gt;&gt; Glenn&lt;br&gt;&gt;&lt;br&gt;&gt; On Wed, Jul 7, 2010 at 8:25 PM, Ro=\r\ny T.Fielding &lt;&lt;a href=3D&quot;mailto:fielding@...&quot;&gt;fielding@...&lt;/a&gt;=\r\n&gt; wrote:&lt;br&gt;&gt;&lt;br&gt;&gt;&lt;br&gt;&gt; On Jul 6, 2010, at 12:22 AM, bryan_w_ta=\r\nylor wrote:&lt;br&gt;\n&gt; &gt; --- In &lt;a href=3D&quot;mailto:rest-discuss@yahoogroups=\r\n.com&quot;&gt;rest-discuss@yahoogroups.com&lt;/a&gt;, &quot;Roy T. Fielding&quot; &lt;fie=\r\nlding@...&gt; wrote:&lt;br&gt;&gt; &gt;&lt;br&gt;&gt; &gt; &gt; &gt; Specifically, we a=\r\nre trying to find RESTful solutions to:&lt;br&gt;\n&gt; &gt; &gt; &gt;&lt;br&gt;&gt; &gt=\r\n; &gt; &gt; 1) Guaranteed Delivery - we need a paradigm to follow so that o=\r\nne service can transfer a sequence of resource representations to another r=\r\neliably even though both services and the network suffer temporary unreliab=\r\nility&lt;br&gt;\n&gt; &gt; &gt;&lt;br&gt;&gt; &gt; &gt; That doesn&#39;t sound like a pr=\r\noblem encountered by RESTful&lt;br&gt;&gt; &gt; &gt; architectures. Reliable uplo=\r\nad of multiple files can be&lt;br&gt;&gt; &gt; &gt; performed using a single zip =\r\nfile, but the assumption being made&lt;br&gt;\n&gt; &gt; &gt; here is that the cli=\r\nent has a shared understanding of what the&lt;br&gt;&gt; &gt; &gt; server is inte=\r\nnding to do with those files. That&#39;s coupling.&lt;br&gt;&gt; &gt;&lt;br&gt;&gt; &gt=\r\n; I don&#39;t follow. Several people have given good simple answers saying =\r\nto use the idempotent nature of PUT (or fake it with POST) until a GET of t=\r\nhe resource succeeds or add an HTTP header of If-None-Match: * and repeat t=\r\nhe PUT until you get a 412 Precondition Failed response, so I thought this =\r\nwas a slam dunk.&lt;br&gt;\n&gt;&lt;br&gt;&gt; I guess it depends on how you define guar=\r\nanteed delivery. You can&lt;br&gt;&gt; certainly do such things with HTTP, but do=\r\ning CRUD ops via HTTP does&lt;br&gt;&gt; not automatically make it a RESTful para=\r\ndigm.&lt;br&gt;&gt;&lt;br&gt;\n&gt;&lt;br&gt;&gt; &gt; But that answers &quot;how&quot; and I =\r\nthink you are getting at &quot;why&quot;. I&#39;m imagining that we have tw=\r\no servers A and B, where A plays the role of the client in the interaction.=\r\n Events happen on server A and server B must receive some representation re=\r\nlated to each event or unacceptable business consequences occur.&lt;br&gt;\n&gt;&lt;b=\r\nr&gt;&gt; Ah, typical event-based integration. That&#39;s a good architectural=\r\n&lt;br&gt;&gt; style for some applications. Why use REST to do that?&lt;br&gt;&gt;&lt;br&gt;&=\r\ngt;&lt;br&gt;&gt; &gt; Why can&#39;t we merge the functionality of server A and B=\r\n? Lots of reasons: Security, regulatory compliance, use of 3rd party system=\r\ns, organizational boundaries and/or politics are a few. The way a company m=\r\nanages it&#39;s systems engineering work is to partition business functiona=\r\nlity into pieces, give ownership of each piece to a team, and align physica=\r\nl resources like servers to those teams. If this imposes constraints not fo=\r\nund in RESTful systems, then I have no choice but to deal with those.&lt;br&gt;\n&=\r\ngt;&lt;br&gt;&gt; Yes, but the RESTful solution is not to pretend that REST is an=\r\n&lt;br&gt;&gt; event-based integration style. What you want to do with REST is&lt;br=\r\n&gt;&gt; re-architect the system into more isolated parts that are event-based=\r\n&lt;br&gt;\n&gt; (usually a very small communication subsystem) and the remainder&lt;=\r\nbr&gt;&gt; as a layered information system. The reason to do this, presumably,=\r\n&lt;br&gt;&gt; is to expose the RESTful interface to consumers instead of exposin=\r\ng&lt;br&gt;\n&gt; the much more complex (and brittle) event interface.&lt;br&gt;&gt;&lt;br&gt;=\r\n&gt; For example, CQ5 has a content repository based on the JCR&lt;br&gt;&gt; int=\r\nerface, which includes both observation (change event notifiers)&lt;br&gt;&gt; an=\r\nd RESTful interaction. The observation is behind the resource&lt;br&gt;\n&gt; inte=\r\nrface, so the fact that it isn&#39;t RESTful itself does not&lt;br&gt;&gt; interf=\r\nere with the multi-organizational, long-lived applications&lt;br&gt;&gt; that mig=\r\nht only use the Web interface.&lt;br&gt;&gt;&lt;br&gt;&gt;&lt;br&gt;&gt; &gt; &gt; Applicatio=\r\nns like that are usually accomplished via code-on-demand.&lt;br&gt;\n&gt; &gt; &gt=\r\n; The problem you will run into here is implementation issues&lt;br&gt;&gt; &gt; =\r\n&gt; regarding current browsers, not architectural issues and&lt;br&gt;&gt; &gt; =\r\n&gt; certainly not a style issue. Most such tools are developed&lt;br&gt;\n&gt; &g=\r\nt; &gt; as browser extensions or app-specific clients, mostly because&lt;br&gt;&g=\r\nt; &gt; &gt; they need unfettered access to the filesystem and because&lt;br&gt;&=\r\ngt; &gt; &gt; browsers (for some unknown reason) don&#39;t include integrit=\r\ny checks&lt;br&gt;\n&gt; &gt; &gt; in normal file uploads.&lt;br&gt;&gt; &gt;&lt;br&gt;&gt; &g=\r\nt; I expect the clients of most of our services would count as &quot;app sp=\r\necific clients&quot;. These might be our other services, our app servers th=\r\nat host user interfaces, or sometimes we will allow external business entit=\r\nies (customers, partners, suppliers, etc...) to write such apps directly. I=\r\n don&#39;t mind going beyond browser limitations.&lt;br&gt;\n&gt; &gt;&lt;br&gt;&gt; &gt=\r\n; &gt; &gt; 2) Distributed Transactions - we need a paradigm to allow state=\r\n changes on multiple services to happen so that the changes succeed or fail=\r\n as a unit&lt;br&gt;&gt; &gt; &gt;&lt;br&gt;&gt; &gt; &gt; Again, not a characteristic =\r\nof RESTful architectures. If the&lt;br&gt;\n&gt; &gt; &gt; client knows the transa=\r\nction is distributed, you have failed.&lt;br&gt;&gt; &gt; &gt; There are lots of =\r\nways to solve this kind of problem on the&lt;br&gt;&gt; &gt; &gt; back-end of ser=\r\nvices interfaces, behind the resource abstraction,&lt;br&gt;\n&gt; &gt; &gt; but n=\r\none of those are relevant to the REST architectural style&lt;br&gt;&gt; &gt; &gt;=\r\n that might apply on the front-end of the service interface.&lt;br&gt;&gt; &gt;&lt;b=\r\nr&gt;&gt; &gt; This one I accept doesn&#39;t fit in a RESTful solution, and in=\r\n other posts in this thread, we are exploring several of other ways you men=\r\ntion.&lt;br&gt;\n&gt; &gt;&lt;br&gt;&gt; &gt; &gt; &gt; 3) Long running operations - we =\r\nneed asynchronous invocations between services and a mechanism for the invo=\r\nking service to find out when the invoked service is done given that this w=\r\nork may take indefinitely long&lt;br&gt;\n&gt; &gt; &gt;&lt;br&gt;&gt; &gt; &gt; Any res=\r\nource can behave as a long-running service. Just program it that way.&lt;br&gt;&g=\r\nt; &gt;&lt;br&gt;&gt; &gt; Right, the question is how, exactly. Good solutions ha=\r\nve been posted in this thread for this. Subbu&#39;s RESTful Web Services Co=\r\nokbook solves this in examples 1.10 and 1.11. I think this was another slam=\r\n dunk.&lt;br&gt;\n&gt; &gt;&lt;br&gt;&gt; &gt; I&#39;m curious what you think about usin=\r\ng so called &quot;web hooks&quot; for this kind of thing. Would you conside=\r\nr this a violation of the client-server constraint?&lt;br&gt;&gt;&lt;br&gt;&gt; No, web=\r\n hooks is just someone&#39;s marketing term for registering&lt;br&gt;\n&gt; notifi=\r\ncations. The components that act on them are still either&lt;br&gt;&gt; clients o=\r\nr servers during the communication (i.e., they are not&lt;br&gt;&gt; trying to do=\r\n both at the same time and functionality is still&lt;br&gt;&gt; split across comp=\r\nonents). This is not a new concept. E.g.,&lt;br&gt;\n&gt;&lt;br&gt;&gt; &lt;a href=3D&quot;http:=\r\n//www.xent.com/FoRK-archive/apr98/0445.html&quot; target=3D&quot;_blank&quot;&gt;http://www.x=\r\nent.com/FoRK-archive/apr98/0445.html&lt;/a&gt;&lt;br&gt;&gt;&lt;br&gt;&gt; &lt;a href=3D&quot;http://=\r\nwww.xent.com/FoRK-archive/august98/0307.html&quot; target=3D&quot;_blank&quot;&gt;http://www.=\r\nxent.com/FoRK-archive/august98/0307.html&lt;/a&gt;&lt;br&gt;\n&gt;&lt;br&gt;&gt;&lt;br&gt;&gt; &gt; =\r\n&gt; &gt; 4) Workflow Orchestration - we would like to have orchestration s=\r\nervices that define business processes via standardized representations (eg=\r\n BPMN), then execute instances of those processes and build up an process i=\r\nnstance execution data resource by interacting with other RESTful resources=\r\n using message exchange patterns that could specify the above behaviors.&lt;br=\r\n&gt;\n&gt; &gt; &gt;&lt;br&gt;&gt; &gt; &gt; That is a system, not an integration pro=\r\nblem. If you want to&lt;br&gt;&gt; &gt; &gt; solve it, buy a full-featured WCM sy=\r\nstem like Day&#39;s CQ5.&lt;br&gt;&gt; &gt; &gt;&lt;br&gt;&gt; &gt; &gt; &lt;a href=3D&quot;htt=\r\np://www.day.com/day/en/products/web_content_management.html&quot; target=3D&quot;_bla=\r\nnk&quot;&gt;http://www.day.com/day/en/products/web_content_management.html&lt;/a&gt;&lt;br&gt;\n=\r\n&gt; &gt; &gt;&lt;br&gt;&gt; &gt; &gt; (sorry, I don&#39;t have a way to answer t=\r\nhat one without sounding&lt;br&gt;&gt; &gt; &gt; like a sales plug -- it is, afte=\r\nr all, why I work for a WCM vendor).&lt;br&gt;&gt; &gt;&lt;br&gt;&gt; &gt; No need to a=\r\npologize for pointing me to a product that might be useful for us. I&#39;ve=\r\n been in several sales presentations in the last couple weeks with differen=\r\nt vendors who have big fancy workflow engines. They all want to talk about =\r\nWS-BPEL and orchestrating our SOAP endpoints. I enjoy the look of confusion=\r\n when I mention that we are considering not allowing any new services to be=\r\n created using SOAP. That seems to get their attention. They say &quot;what=\r\n will you do instead?&quot; and I say use HTTP and they say &quot;huh?&quot=\r\n;.&lt;br&gt;\n&gt;&lt;br&gt;&gt; As much as I like doing things in HTTP, there are many =\r\nclosed systems&lt;br&gt;&gt; that are better implemented in an efficient RPC synt=\r\nax or a wire&lt;br&gt;&gt; protocol specifically designed for message queues. Use=\r\n whatever&lt;br&gt;\n&gt; works best for the specific architecture behind the reso=\r\nurce interface&lt;br&gt;&gt; and then apply REST as the external facade to suppor=\r\nt large-scale&lt;br&gt;&gt; integration and reusability of the information produc=\r\ned/consumed.&lt;br&gt;\n&gt;&lt;br&gt;&gt; Note, however, that SOAP is fairly unique for=\r\n being the least efficient&lt;br&gt;&gt; way of doing anything. That&#39;s what h=\r\nappens when core protocol design&lt;br&gt;&gt; is driven by marketing.&lt;br&gt;&gt;&lt;br=\r\n&gt;&gt; ....Roy&lt;br&gt;\n&gt;&lt;br&gt;&gt;&lt;br&gt;&gt;&lt;br&gt;&gt;&lt;br&gt;&gt;&lt;br&gt;&gt;&lt;br&gt;&gt; &lt;br&gt;=\r\n&lt;br&gt;&lt;/div&gt;\n&lt;div&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div class=3D&quot;h5&quot;&gt;----------------------------=\r\n-------&lt;br&gt;=A0Jan Algermissen, Consultant&lt;br&gt;=A0NORD Software Consulting&lt;br=\r\n&gt;&lt;br&gt;=A0Mail: &lt;a href=3D&quot;mailto:algermissen@...&quot;&gt;algermissen@...&lt;/a=\r\n&gt;&lt;br&gt;=A0Blog: &lt;a href=3D&quot;http://www.nordsc.com/blog/&quot; target=3D&quot;_blank&quot;&gt;htt=\r\np://www.nordsc.com/blog/&lt;/a&gt;&lt;br&gt;\n=A0Work: &lt;a href=3D&quot;http://www.nordsc.com/=\r\n&quot; target=3D&quot;_blank&quot;&gt;http://www.nordsc.com/&lt;/a&gt;&lt;br&gt;-------------------------=\r\n----------&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;\n\r\n--00c09f8a511fb27254048adcdb1c--\r\n\n"}}
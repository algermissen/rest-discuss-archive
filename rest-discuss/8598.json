{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":237604743,"authorName":"Bill de hOra","from":"Bill de hOra &lt;bill@...&gt;","profile":"bdehora","replyTo":"SENDER","senderId":"Y21uJwxl4RtFdbbjZ5iut3MSzGXa11mlidgF4f8fJy4Hp2LNNEGwrJMIT55lx2ly0UCrhp2nAekQLIHwlGAAitO9hT7n","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] How to do /posts/yyyy[/mm[/dd]] and /posts/id RESTfully?","postDate":"1180122053","msgId":8598,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQ2NTczQkM1LjMwNjA1MDJAZGVob3JhLm5ldD4=","inReplyToHeader":"PDg3ZDUwb2VvNnAuZnNmQGthbmdhLnRhcHNlbGxmZXJyaWVyLmNvLnVrPg==","referencesHeader":"PDQ2NTcyQ0E3LjMwNTA3MDlAbWlzY2hrby5jb20+IDw4N2Q1MG9lbzZwLmZzZkBrYW5nYS50YXBzZWxsZmVycmllci5jby51az4="},"prevInTopic":8597,"nextInTopic":8599,"prevInTime":8597,"nextInTime":8599,"topicId":8593,"numMessagesInTopic":16,"msgSnippet":"... cal_dict = { queryset : Calendar.objects.all(), extra_context : {}, } urlpatterns += patterns( django.views.generic.date_based , ","rawEmail":"Return-Path: &lt;bill@...&gt;\r\nX-Sender: bill@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 96772 invoked from network); 25 May 2007 19:41:05 -0000\r\nReceived: from unknown (66.218.67.36)\n  by m49.grp.scd.yahoo.com with QMQP; 25 May 2007 19:41:05 -0000\r\nReceived: from unknown (HELO chilco.textdrive.com) (207.7.108.242)\n  by mta10.grp.scd.yahoo.com with SMTP; 25 May 2007 19:41:05 -0000\r\nReceived: from [192.168.2.180] (83-71-68-243.b-ras1.prp.dublin.eircom.net [83.71.68.243])\n\tby chilco.textdrive.com (Postfix) with ESMTP id 610E6DCC59\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Fri, 25 May 2007 19:40:56 +0000 (UTC)\r\nMessage-ID: &lt;46573BC5.3060502@...&gt;\r\nDate: Fri, 25 May 2007 20:40:53 +0100\r\nUser-Agent: Thunderbird 1.5.0.10 (X11/20070403)\r\nMIME-Version: 1.0\r\nTo: rest-discuss@yahoogroups.com\r\nReferences: &lt;46572CA7.3050709@...&gt; &lt;87d50oeo6p.fsf@...&gt;\r\nIn-Reply-To: &lt;87d50oeo6p.fsf@...&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:0:0:0\r\nFrom: Bill de hOra &lt;bill@...&gt;\r\nSubject: Re: [rest-discuss] How to do /posts/yyyy[/mm[/dd]] and /posts/id\n RESTfully?\r\nX-Yahoo-Group-Post: member; u=237604743; y=99JrTkfP8jagiEQGXZrVP_EphDoVb3AGkeGu2G20--0WZQ\r\nX-Yahoo-Profile: bdehora\r\n\r\nNic James Ferrier wrote:\n&gt; \n&gt; \n&gt; Scott Chapman &lt;scott_list@... &lt;mailto:scott_list%40mischko.com&gt;&gt; \n&gt; writes:\n&gt; \n&gt;  &gt; It seems that many of the web frameworks out there map RESTful URL&#39;s \n&gt; to code\n&gt;  &gt; more comfortably if there&#39;s only one parameter (i.e. \n&gt; /posts_by_date/yyyy-mm-dd\n&gt;  &gt; rather than /posts_by_date/yyyy/mm/dd), especially if the URL goes \n&gt; beyond that\n&gt;  &gt; (i.e. /posts_by_date/yyyy-mm-dd/author/ID).\n&gt;  &gt;\n&gt;  &gt; What&#39;s the most RESTful way of doing this?\n&gt; \n&gt; This is not really about REST but about URI composition.\n&gt; \n&gt; As far as frameworks go, Django let&#39;s you map uris like this:\n&gt; \n&gt; (r&#39;^diary/(?P&lt;month&gt;[0-9]+)/&lt;?&lt;day&gt;[0-9]$&#39;, &#39;cal.views.show&#39;)\n\ncal_dict = {\n     &#39;queryset&#39;: Calendar.objects.all(),\n     &quot;extra_context&quot;: {},\n}\n\nurlpatterns += patterns(&#39;django.views.generic.date_based&#39;,\n(r&#39;^diary/?P&lt;year&gt;&#92;d{4})/(?P&lt;month&gt;&#92;d{2})/(?P&lt;day&gt;&#92;w{1,2})/(?P&lt;slug&gt;[-&#92;w]+)/&#39;, \n     &#39;object_detail&#39;,\ndict(cal_dict, month_format=&quot;%m&quot;, slug_field=&#39;uid&#39;)),\n...\n)\n\nwhich combines a date based archive with an arbitrary object field at \nthe end (&#39;slug_field&#39; above); that avoid the primary keys that other \nframeworks use by default.\n\nAs a result I&#39;ve gotten into a habit of sometimes giving objects uid \nfields (which can be pumped into atom:ids as well). I seem to recall \nMike Koziarski thinking it was boneheaded to put arbitrary data like \nthat on an object, but the upside is that database autoincrements will \nnever burn me once I partition or have to re-import.\n\nDjango is one of the best framework available if you&#39;re serious about \nthis REST stuff. It does etags, cache control (+vary), compression, \naccess to headers, charset, without making a big deal out of any of it. \nI&#39;ve nothing but good things to say about a framework that provides \nmethods like get_object_or_404().\n\ncheers\nBill\n\n"}}
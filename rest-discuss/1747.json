{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":80827773,"authorName":"Seairth Jacobs","from":"&quot;Seairth Jacobs&quot; &lt;seairth@...&gt;","profile":"seairthjacobs","replyTo":"SENDER","senderId":"fvShoXuTmnJ4uYRekLpNVK2L7qFandBDFeMPkUlrXTsMwcZ8k6B2WiKY07yCwBGDGjRTm5ES0hRGCJyCljPtkW8jiKcM1ZJCWBeV1ms","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] An attempt at a RESTful implementation","postDate":"1026170275","msgId":1747,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDAwMTQwMWMyMjZkNSRiMTNlODdmMCRhMDAwYThjMEBzZWFpcnRobGFwdG9wPg==","referencesHeader":"PEI5NEYzRjJBLjNDMzYlamJvbmVAZGVlcGZpbGUuY29tPg=="},"prevInTopic":1738,"nextInTopic":1749,"prevInTime":1746,"nextInTime":1748,"topicId":1728,"numMessagesInTopic":9,"msgSnippet":"From: Jeff Bone  ... the ... Actually, GTP is a good deal different from HTTP (at least as I see it). One of the primary differences is","rawEmail":"Return-Path: &lt;seairth@...&gt;\r\nX-Sender: seairth@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_0_7_4); 8 Jul 2002 23:17:15 -0000\r\nReceived: (qmail 99666 invoked from network); 8 Jul 2002 23:17:14 -0000\r\nReceived: from unknown (66.218.66.216)\n  by m11.grp.scd.yahoo.com with QMQP; 8 Jul 2002 23:17:14 -0000\r\nReceived: from unknown (HELO mail.bbglobex.com) (208.251.163.4)\n  by mta1.grp.scd.yahoo.com with SMTP; 8 Jul 2002 23:17:14 -0000\r\nReceived: from seairthlaptop [68.10.252.33] by mail.bbglobex.com with ESMTP\n  (SMTPD32-6.06) id AC6F2A3F00A0; Mon, 08 Jul 2002 19:12:47 -0400\r\nMessage-ID: &lt;001401c226d5$b13e87f0$a000a8c0@seairthlaptop&gt;\r\nTo: &quot;rest-discuss&quot; &lt;rest-discuss@yahoogroups.com&gt;\r\nReferences: &lt;B94F3F2A.3C36%jbone@...&gt;\r\nSubject: Re: [rest-discuss] An attempt at a RESTful implementation\r\nDate: Mon, 8 Jul 2002 19:17:55 -0400\r\nMIME-Version: 1.0\r\nContent-Type: text/plain;\n\tcharset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: 8bit\r\nX-Priority: 3\r\nX-MSMail-Priority: Normal\r\nX-Mailer: Microsoft Outlook Express 6.00.2600.0000\r\nX-MIMEOLE: Produced By Microsoft MimeOLE V6.00.2600.0000\r\nFrom: &quot;Seairth Jacobs&quot; &lt;seairth@...&gt;\r\nX-Yahoo-Group-Post: member; u=80827773\r\nX-Yahoo-Profile: seairthjacobs\r\n\r\nFrom: &quot;Jeff Bone&quot; &lt;jbone@...&gt;\n&gt;\n&gt; Seairth, I donï¿½t mean to stir the pot, but what you&#39;ve just described *is*\n&gt; semantically equivalent to HTTP.  It seems to me that you only differ on\nthe\n&gt; detail and &quot;syntax,&quot; not the high-level semantics.  To wit:\n&gt;\n&gt; GTP       HTTP\n&gt; ------    -----\n&gt; GET       GET\n&gt; DELETE    DELETE\n&gt; EDIT      PUT or POST\n&gt; ADD       PUT or POST\n&gt; PUT       xxx response code\n&gt;\n&gt; The major exception seems to be that you have a notion of a &quot;response\n&gt; method&quot; indicated by PUT.  I&#39;m not sure what that buys you, really.\n\nActually, GTP is a good deal different from HTTP (at least as I see it).\nOne of the primary differences is that it is not necessarily a client-server\nprotocol.  It is perfectly correct send a PUT message and get a DELETE\nmessage in return.  In other words, there is no set relationship between\nwhat message is received based and what message was sent.  This is an\napplication-specific issue, not a protocol issue.  HTTP has a distinctive\nclient and server parts.  Yes, it is possible to have a given application\nimplement both parts and effectively allow for peer-to-peer communication.\nBut, to my knowledge, this was not the intent of HTTP (and more or less\nstill isn&#39;t).  On the other hand, it is entirely forseeable to design\npeer-to-peer, client-server, etc. applications in GTP.\n\nIf you were to map GTP verbs to HTTP verbs (sticking to the client-server\npattern only), you would probably end up with:\n\nHTTP        GTP\n-----          -----\nGET          GET\nDELETE   DELETE\nPUT          GET, conditionally followed by an ADD or EDIT\nPOST       PUT\nresponse   PUT, always used as the &quot;response&quot; from the &quot;server&quot;\n\n\nAgain, a request can potentially receive a response that uses any of the\nverbs.  PUT is just the most generic response and is equatable to HTTP\nresponses *when implementing an HTTP-like GTP-based application*.  The real\nstrength is in being able to get back any sort of message.  Here are some\nexamples:\n\n* Two peer-to-peer programs could use PUT to send heartbeats to one another.\n* An &quot;offline address book&quot; client application could send a PUT message to a\nserver, which would return an EDIT message to instruct the client to update\none or more local entries.\n* A client application could initiate a session with a GET message.  The\nserver may then respond with a GET message indicating that it wants to know\nmore about the client capabilities.  The client would then respond with a\nPUT message.\n* One server (A) could be queuing requests to go to another server (B).\nServer A might start with a PUT message to Server B to indicate its status.\nServer B would then issue a GET message for the next message in the queue.\nServer A would then send whatever message was queued.  This process would\nrepeat itself until Server A sent a final PUT message indicating that there\nare no more queued messages.\n\nIt may be possible to force implementation all of the above on top of HTTP,\nbut that feels to me like the proverbial &quot;square peg in a round hole&quot;.  This\nis why I do not consider GTP and HTTP to be &quot;semantically equivalent&quot;.\n\n&gt; Consider:  HTTP PUT creates / replaces / updates the state of a resource\n&gt; given some data (representation) of the desired resource state.  When\n&gt; performed on an enclosing container resource, this can be considered an\nADD.\n&gt; Similarly, when performed on any existing resource, it&#39;s an EDIT.  Your\nPUT,\n&gt; in the backchannel case, is basically equivalent to (a single,\nnonspecific)\n&gt; HTTP response code --- truthfully, it doesn&#39;t serve much purpose at all,\n&gt; because subsequent information would be needed to discern the actual\nintent\n&gt; / meaning of the resource.\n\nPart of this, I think I have already answered up top.  As for the HTTP PUT\nverb being an &quot;ADD if not exist, otherwise EDIT&quot;, I have always had issues\nwith this.  PUT is the logical equivalent of:\n\n    IF GET\n        EDIT\n    ELSE\n        ADD\n    END\n\nIn my opinion (for what little that is worth), HTTP PUT is a &quot;lazy&quot; verb.\nYou are attempting to perform a compoung command using a single command.\nThis seems to me to be a particularly non-RESTian verb.\n\n&gt; In general, your model - as with HTTP applications that use PUT - seems to\n&gt; work with a less abstract notion of resource than i.e. applications that\n&gt; encapsulate resource state behind GET and POST;  with POST-based apps, you\n&gt; can&#39;t ever actually set the state of a resource directly, at best you ask\n&gt; the resource or its container to do that for you.  You never GET resource\n&gt; state directly, you merely get a representation.  And that encapsulation\nis\n&gt; a good thing.  Your model is actually weaker than HTTP, because it doesn&#39;t\n&gt; accommodate the more abstract application of POST, meaning &quot;feed some\n&gt; arbitrary data to a resource&quot; with the resource itself being responsible\nfor\n&gt; the interpretation.  (If PUT is a valid GTP *request* method, then GTP\nisn&#39;t\n&gt; weaker --- it&#39;s semantically equivalent, as originally asserted.)\n\nOkay, given that GTP PUT can be used like HTTP POST and that GTP is not like\nHTTP, would you still say that GTP is still weaker?    GTP allows the\n&quot;representation&quot; of a resource to be sent instead of the resource itself.  A\nGTP message can never perform an action.  Only the recipient can determine\nwhat actions can and can&#39;t be taken.  Only the recipient performs the actual\naction.  To me, this is REST-like abstraction.  The actual level of\nabstraction reached depends entirely on the actual implementation of a\nGTP-enabled application.  GTP just makes the facilities available.\n\nYou know, I am almost beginning to get an idea. Maybe GTP is more of a\ngeneric foundation protocol.  GTP itself is neither RESTful not non-RESTful.\nInstead, it provides a foundation on which RESTful applications can be built\n(a la HTTP-alike).  HTTP is more of a combination of a protocol and an\napplication in this sense.  Increasingly, people are using HTTP less as an\napplication and more as a foundation protocol.  The difference is that GTP\nis designed from the ground up to provide only the foundation and leaves the\n actual REST implementation to the application level that sits on top of it.\nOn the other hand, maybe I am just fooling myself here.  :)\n\n&gt; Similarly, I&#39;m not sure what ONX buys you over XML.  In both cases\n&gt; (GTP/HTTP, ONX/XML) the differences seem superficial at best.\n\nYes, ONX is similar to XML.  However, the devil is in the details.  ONX is\nspecifically designed to accomodate data in ways that XML is unsuited for.\nIt is also designed to be more efficiently parsable.  This allows for faster\nprocessing times and faster network transmission times.  As I point out in\nthe GTP introduction, GTP could be written with XML as well.  &quot;ONX vs. XML&quot;\nis not the issue here.\n\n&gt; I don&#39;t mean to dis your effort, but it&#39;s worth asking whether your effort\n&gt; wouldn&#39;t be better spent trying to get what you want to do done with HTTP\n&gt; and XML rather than reinventing them.  We see further when we stand on the\n&gt; shoulders of giants. :-)\n\nAnd yet, if HTTP and XML were truly the &quot;dynamic duo&quot; that everyone wants to\nbelieve they are, this list (and several others) wouldn&#39;t exist.\n\n---\nSeairth Jacobs\nseairth@...\n\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":265354406,"authorName":"Alan Dean","from":"&quot;Alan Dean&quot; &lt;alan.dean+rest-discuss@...&gt;","profile":"alan_james_dean","replyTo":"SENDER","senderId":"UApF1G-VSDXzYR_AcpSiJ_VDm7xoTs_B02tefWUnbuXosrRXaFHYTR3TjqdPcxb5jUAVGjx6QGF4Qinyq0TvfTVuts8i4otZxDiMJHtp643MKRGnIw","spamInfo":{"isSpam":false,"reason":"4"},"subject":"Re: Meaning of stateless","postDate":"1145091939","msgId":5970,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGUxcWQxMytnNTQ3QGVHcm91cHMuY29tPg==","inReplyToHeader":"PDQ0NDA1MzkzLjUwODAwQHZlaWNvbi5jb20+"},"prevInTopic":5968,"nextInTopic":5971,"prevInTime":5969,"nextInTime":5971,"topicId":5951,"numMessagesInTopic":26,"msgSnippet":"... In addition to being volatile, session state is private and opaque. Yes, session state can be replicated amongst servers in a single web farm but that","rawEmail":"Return-Path: &lt;alan.dean+rest-discuss@...&gt;\r\nX-Sender: alan.dean+rest-discuss@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 50105 invoked from network); 15 Apr 2006 09:05:47 -0000\r\nReceived: from unknown (66.218.66.166)\n  by m17.grp.scd.yahoo.com with QMQP; 15 Apr 2006 09:05:47 -0000\r\nReceived: from unknown (HELO n17a.bullet.scd.yahoo.com) (66.94.237.46)\n  by mta5.grp.scd.yahoo.com with SMTP; 15 Apr 2006 09:05:46 -0000\r\nComment: DomainKeys? See http://antispam.yahoo.com/domainkeys\r\nReceived: from [66.218.66.59] by n17.bullet.scd.yahoo.com with NNFMP; 15 Apr 2006 09:05:39 -0000\r\nReceived: from [66.218.66.78] by t8.bullet.scd.yahoo.com with NNFMP; 15 Apr 2006 09:05:39 -0000\r\nDate: Sat, 15 Apr 2006 09:05:39 -0000\r\nTo: rest-discuss@yahoogroups.com\r\nMessage-ID: &lt;e1qd13+g547@...&gt;\r\nIn-Reply-To: &lt;44405393.50800@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;ISO-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-Yahoo-Newman-Property: groups-compose\r\nX-eGroups-Msg-Info: 2:4:8:0\r\nFrom: &quot;Alan Dean&quot; &lt;alan.dean+rest-discuss@...&gt;\r\nSubject: Re: Meaning of stateless\r\nX-Yahoo-Group-Post: member; u=265354406; y=0IKgStomDrxrLkGg5lL-Xc1a_oGiFm9XSU2c_Y8Lgi3OLZKK4NNNys5V\r\nX-Yahoo-Profile: alan_james_dean\r\n\r\n--- In rest-discuss@yahoogroups.com, Lyle Kopnicky &lt;lyle@...&gt; wrote:\n\n&gt; * s=\r\nnip *\n&gt; I&#39;m not sure why session state is not scalable.  It can be replicat=\r\ned \n&gt; amongst servers like anything else.\n\n\nIn addition to being volatile, =\r\nsession state is private and opaque.\nYes, session state can be replicated a=\r\nmongst servers in a single web\nfarm but that misses Roys scalability: that =\r\nyou can leverage\nintermediaries to achieve scalability. If the resource at =\r\na URL has\nthe cache headers appropriately then servers that you do not cont=\r\nrol\nand know nothing about can intercept requests and serve responses from\n=\r\na cache rather than having to propagate every request back to the host.\n\nAn=\r\n example. Let&#39;s say that you are writing a news web site. You design\nthe si=\r\nte in a RESTful manner, publishing articles in the form:\n\n    http://exampl=\r\ne.com/news/article/name\n\nIf you add &quot;Cache-Control: public&quot; the intermediar=\r\nies know that they\ndo not need to obtain a &#39;live&#39; copy of the article from =\r\nexample.com\nevery time. These intermediaries might include the users browse=\r\nr, or a\nproxy server. You can also set the &quot;Expires&quot; header to indicate whe=\r\nn\ncached resources become stale.\n\nThis is clearly far more scalable because=\r\n the example.com servers need\nnot receive every client request. Not only th=\r\nat, but the example.com\nservers can themselves implement cache support to r=\r\nelieve the\nindividual cost of requests, and this can be layered on top of t=\r\nhe\nlive application transparently.\n\nNone of this is possible if the data at=\r\n a URL is not a resource, but\nis instead based upon private, opaque, volati=\r\nle session state.\n\nI think that many software developers have become hostag=\r\ne to the\ndevelopment frameworks that they utilise. In turn, many frameworks=\r\n\nhave made session state a fundamental building block of web\ndevelopment be=\r\ncause it permits sloppy design. In the pursuit of\nproductivity, framework p=\r\nroviders have sought to abstract away the\nfundamental nature of HTTP and pr=\r\netend that it is stateful. Why?\nBecause stateless development is harder. A =\r\nconcrete example? These\ndays I develop using the .NET Framework. If you tak=\r\ne at ASP.NET &#39;from\n15,000 feet&#39; then you can see that the objective of WebF=\r\norms is to\npretend that a web page can be written in the same way that a Wi=\r\nndows\nForms application can be written. This is simply not so. One is an\nap=\r\nple, the other is an orange. No matter how you squint, they aren&#39;t\nthe same=\r\n. Not all of ASP.NET is evil though: HttpModules and\nHttpHandlers have allo=\r\nwed developers to write &#39;native HTTP&#39;\napplications again, where ASP(.OLD) d=\r\nid not (unless you knew how to\nwrite ISAPI extensions).\n\n\n&gt; * snip *\n&gt; Mayb=\r\ne I need a good definition of scalability.\n\nRoys provides this definition:\n=\r\n\n&quot;2.3.2 Scalability\n\nScalability refers to the ability of the architecture =\r\nto support large\nnumbers of components, or interactions among components, w=\r\nithin an\nactive configuration. Scalability can be improved by simplifying\nc=\r\nomponents, by distributing services across many components\n(decentralizing =\r\nthe interactions), and by controlling interactions and\nconfigurations as a =\r\nresult of monitoring. Styles influence these\nfactors by determining the loc=\r\nation of application state, the extent\nof distribution, and the coupling be=\r\ntween components. \n\nScalability is also impacted by the frequency of intera=\r\nctions, whether\nthe load on a component is distributed evenly over time or =\r\noccurs in\npeaks, whether an interaction requires guaranteed delivery or a\nb=\r\nest-effort, whether a request involves synchronous or asynchronous\nhandling=\r\n, and whether the environment is controlled or anarchic (i.e.,\ncan you trus=\r\nt the other components?).&quot;\n\n&gt; &gt;&gt; If you want to have things like online ban=\r\nking, or personalized site \n&gt; &gt;&gt; pages (like Yahoo can do), or web mail, I =\r\ndon&#39;t see how you can\navoid \n&gt; &gt;&gt; having two things.  E.g., the URL for you=\r\nr April bank statement is \n&gt; &gt;&gt; http://www.bank.com/statements/200604, and =\r\nyour identity is\npassed along \n&gt; &gt;&gt; some other way, say through a cookie. \n=\r\n\n\nI think that the URL above is not RESTful because if I browse there\nthen =\r\nI will receive a different resource than if you browse there. A\nRESTful URL=\r\n would be\n\n    http://example.com/bank/statements/200604/alan.dean\n\nThe pro=\r\nvided credentials would then be used the grant or deny access\nto the resour=\r\nce of &quot;Alan Dean&#39;s April 2006 Bank Statements&quot;.\n\nAgain, personalized pages =\r\nare not inherently RESTful. If you have a\nnews site, you may be tempted to =\r\npublish this URL:\n\n    http://example.com/news/headlines\n\nand then to provi=\r\nde some means of personalizing the content according\nto a user. I would arg=\r\nue that if you want to offer personalized news,\nthen you would be better to=\r\n have a standard headlines page (common to\nall) at the above URL but suppor=\r\nt a personal news page at:\n\n    http://example.com/news/headlines/alan.dean=\r\n\n\nThis way, the resource is indicated properly. I think of it as\nbecoming t=\r\nransparent - no need for smoke and mirrors.\n\n&gt; &gt; Authentication is not tang=\r\nenital to the resource. It is part of the\n&gt; &gt; resource. \n\n\nI would disagree=\r\n. Authentication is not part of the resource, it is\npart of the request pay=\r\nload.\n\n\n&gt; HTTP authentication is part of the header.\n&gt; Part of the header &lt;=\r\n&gt; Part of the URL.  There&#39;s a lot of talk that it \n&gt; isn&#39;t RESTful unless t=\r\nhe resource identification is in the URL, not\njust \n&gt; any place in the head=\r\ner.\n\n\nI think my examples above show this clearly.\n\n\n&gt; &gt;  You can even do\n&gt;=\r\n &gt; cookie authentication this way (by keeping the auth details in the\n&gt; &gt; h=\r\neader).\n&gt; &gt;   \n&gt; So cookies aren&#39;t really any different than HTTP authentic=\r\nation,\nright?  \n&gt; They are both passed through the header.  They both requi=\r\nre that the \n&gt; client store state - the authentication details.\n\n\nNot neces=\r\nsarily. Part of the drive to federated authentication is\nprevent the need t=\r\no every node to store credentials data for\nauthentication purposes.\n\n\n&gt; &gt; B=\r\nut the caching model in HTTP works for resources. Nothing else. So\n&gt; &gt; a ca=\r\nche can handle resource changes... Last Modified resource caching\n&gt; &gt; is pa=\r\nrticularly easy to implement (hence it&#39;s inclusion in many\n&gt; &gt; frameworks).=\r\n\n&gt; &gt;   \n&gt; So I guess the caching model will be broken, if you use HTTP \n&gt; a=\r\nuthentication details to select a resource.  Doesn&#39;t that make HTTP \n&gt; auth=\r\nentication non-RESTful?\n\n\nNo HTTP Auth is not inherently non-RESTful. It is=\r\n simply a\nstandardized means of propagating credentials data with a request=\r\n.\nCertainly, as indicated above, you can write non-RESTful web sites\nthat u=\r\nse HTTP Auth. Nor is HTTP Auth required for REST. It is simply\none means of=\r\n securing a resource if you choose to do so.\n\nAlan Dean\nLead Developer, Onl=\r\nineTravel.com\n\n\n\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"PQUmwmV322wRnEre9m0_zIRM7CGuNu549WZnjXS77Y_5XLVFMSm5Ujq4_Kdjo73eZL1fcIx1IEwWzZIwH4UJl4vg3Wag4aykXQ-hT-1NKw","spamInfo":{"isSpam":false,"reason":"12"},"subject":"RDF as IDL for M2M","postDate":"1273598831","msgId":15346,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMTAwNTExMTEyNzExLmNjNTY4NGUxLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4="},"prevInTopic":0,"nextInTopic":15355,"prevInTime":15345,"nextInTime":15347,"topicId":15346,"numMessagesInTopic":3,"msgSnippet":"Recent m2m discussions on rest-discuss have had me thinking quite deeply about the problem.  For any given XHTML application steady- state on my REST system,","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 69315 invoked from network); 11 May 2010 17:27:30 -0000\r\nX-Received: from unknown (98.137.34.45)\n  by m13.grp.re1.yahoo.com with QMQP; 11 May 2010 17:27:30 -0000\r\nX-Received: from unknown (HELO mxout-08.mxes.net) (216.86.168.183)\n  by mta2.grp.sp2.yahoo.com with SMTP; 11 May 2010 17:27:30 -0000\r\nX-Received: from bigbison (unknown [65.117.211.162])\n\t(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))\n\t(No client certificate requested)\n\tby smtp.mxes.net (Postfix) with ESMTPSA id C850D509E0\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Tue, 11 May 2010 13:27:29 -0400 (EDT)\r\nDate: Tue, 11 May 2010 11:27:11 -0600\r\nTo: rest-discuss@yahoogroups.com\r\nMessage-Id: &lt;20100511112711.cc5684e1.eric@...&gt;\r\nOrganization: Bison Systems Corporation\r\nX-Mailer: Sylpheed 3.0.0 (GTK+ 2.10.14; i686-pc-mingw32)\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=US-ASCII\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nSubject: RDF as IDL for M2M\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\nRecent m2m discussions on rest-discuss have had me thinking quite\ndeeply about the problem.  For any given XHTML application steady-\nstate on my REST system, regardless of the form language I am using, \nan XSLT template may be developed which outputs the metadata as RDF\n(GRDDL).  It occurs to me that, because my domain-specific vocabulary\nremains static across variant representations (generated on the user\nagent using Xforms and/or XSLT), so does the XSLT pattern for GRDDL-\ngenerating RDF from these variants.\n\n(You&#39;ll notice that my RESTful take on Semweb doesn&#39;t assign URIs to\nRDF representations.  A limited number of XSLT GRDDL transformations\nare assigned URIs and linked to from the application steady-states.\nThe idea is that RDF can describe an m2m starting point for any\nfunction provided by a REST application, by linking to its machine-\nreadable hypertext interface using link relations.  This approach falls\na few link relations shy of standardization, though.)\n\nI was surprised to discover this.  I have lots of example/test files\nfor my system, one is a static-page WIP for the Xforms interface, with\nRDFa matching my demo (except without syntax errors like @instance-of).\nRegardless of the specific markup, the metadata stays constant (well,\nnot exactly, but it will when I&#39;ve refactored a bit as a result of this\nresearch).  In fact, the RDF pattern (the XSLT generating it) for my\nweblog, or for some other weblog using my domain-specific vocabulary,\nregardless of its URI allocation scheme, stays constant.  Here&#39;s that\npattern again (I posted this several weeks ago), somewhat:\n\n&lt;rdf:Description about=&quot;#{//*[@instanceof=&#39;wiski:weblog-entry&#39;]/@id}&quot;&gt;\n&lt;link rel=&#39;self&#39; href=&#39;{./@about}.atom&#39;\n&lt;link rel=&#39;edit&#39; href=\n&quot;{document(concat(./@about,&#39;.atom&#39;))//*[@rel=&#39;edit&#39;]/@href}&quot;/&gt;\n&lt;link rel=&#39;replies&#39; href=\n&quot;{document(concat(./@about,&#39;.atom&#39;))//*[@rel=&#39;replies&#39;]/@href}&quot;/&gt;\n&lt;link rel=&#39;alternate&#39; href=&#39;{./@about}&#39;/&gt;\n&lt;link rel=&#39;etc&#39; href=&#39;{etc.}&#39;/&gt;\n&lt;/rdf:Description&gt;\n\nThe post-new-entry form, if present, is always:\n//*[@instanceof=&#39;wiski:weblog-entry&#39;][1]\nWhile a post-new-comment form, if present, is always:\n//*[@instanceof=&#39;wiski:weblog-comment&#39;][1]\n\nSo, having an understanding of the domain-specific vocabulary expressed\nas RDFa metadata on my weblog, allows a spambot to be programmed to\nfollow the API from starting points in the RDF, i.e. the spambot needs\nto know how to post a reply to a collection, so it looks in the RDF for\nrel=&#39;replies&#39;, which informs the bot where to look in the steady-state\nit generated, to find the interface for posting a reply to any entry or\ncomment it encounters.\n\nSo it makes sense to provide m2m capability using Semweb (kinda the\nwhole point) technology, based on standard link relations to make it\nRESTful.  Given the m2m purpose of Semweb, it makes sense to use\nfragments, and link explicitly to form controls in the generated RDF.\n\nThis requires a worldview that allows link relation semantics to vary\nbased on context -- if the intent is to view a comment thread, rel=\n&#39;replies&#39; points to the comment thread, whereas if the intent is to\npost a comment (via RDF introspection) then rel=&#39;replies&#39; points to a\nform control.\n\nTaking an OO perspective, link relations may identify properties or\nmethods, depending on the context in which they appear -- if a user\nagent wants the rel=&#39;replies&#39; method, it looks in the RDF, if it wants\nthe rel=&#39;replies&#39; property it looks in the steady-state.  Like so:\n\n&lt;rdf:Description about=&#39;#post-1&#39;&gt;&lt;!--object in steady state--&gt;\n&lt;link rel=&#39;source&#39; href=&#39;/2006/aug/09/11.atom&#39;/&gt;&lt;!--property--&gt;\n&lt;link rel=&#39;edit&#39; href=&#39;#post-1.edit&#39;/&gt;&lt;!--method--&gt;\n&lt;link rel=&#39;replies&#39; href=&#39;/2006/aug/09/11#comment-0.edit&#39;/&gt;&lt;!--method--&gt;\n&lt;link rel=&#39;self&#39; href=&#39;/2006/aug/09/11&#39;/&gt;&lt;!--property--&gt;\n&lt;!--nonexistent link relation would be a property in the steady state--&gt;\n&lt;link rel=&#39;tags&#39; href=&#39;#tags-1.edit&#39;/&gt;&lt;!--method--&gt;\n&lt;/rdf:Description&gt;\n\nIn a threaded-comment architecture, each comment has its own unique\nrel=&#39;replies&#39; URI, whereas in my flat-comment architecture, each comment\nshares the same rel=&#39;replies&#39; URI.  If the m2m goal is to reply to\na comment instead of an entry, the RDF link for rel=&#39;replies&#39; for the \n//*[@instanceof=&#39;wiski:weblog-comment&#39;] of interest is followed, not\nthe rel=&#39;replies&#39; link in the steady-state (which doesn&#39;t point to the\nform control).\n\nWhen my architecture is extended to support threaded comments, it isn&#39;t\nthe m2m intent that will change -- only the target URI will change. The\nXSLT pattern doesn&#39;t change, it&#39;s still reading in the same &lt;form&gt;\nfield with the same method with the same media type, but the RDF output\nfrom GRDDL reflects the new, unique target URIs for each comment&#39;s rel=\n&#39;replies&#39;.  Until a comment is made, there is no rel=&#39;replies&#39; in the\nsteady-state, only in the RDF.\n\nSpambots coded against my GRDDL output automatically follow the new API,\nbecause the RDF is defining a... &gt;gasp&lt; ...contract to follow for\nintrospecting the rel=&#39;replies&#39; interface, regardless of how the markup\n(or even method, say I change to PUT instead of tunneling over POST\nwhen a firewall rule is relaxed) evolves over time.  I&#39;m guaranteeing a\nmetadata vocabulary which describes my interfaces, not any particular\ninterface description.\n\nIn other words, the Semantic Web provides a Framework for Describing\nResources (duh).  In the case of my weblog, the manipulable resources\nare all represented as Atom, but *how* to manipulate resource state is\ncontained within XHTML application steady-states.  An RDF view of a\nsteady-state is just a framework for exposing the resources of interest\nmaking up that steady-state, and their interfaces -- in the OO view of\nit, each rdf:Description element identifies an object of interest in the\nmarkup, while the child elements describe its properties and methods.\n\nThis is where RDF differs from an Interface Definition Language.  The\nproperties and methods I&#39;m referring to aren&#39;t HTTP methods as in IDLs,\nrather standard link relations and specific application functions.  The\nXSLT GRDDL pattern above merely *points to* a given object&#39;s hypertext-\nembedded property and method definitions.  It&#39;s a framework, and a nice\nm2m entry point... this is about the first time the terms &quot;Semweb&quot; and\n&quot;RDF&quot; haven&#39;t elicited shoulder-shrugs from me as regards my own\nsystem.  I&#39;d only been halfheartedly using RDFa without really grokking\nthe point of it.\n\nSo the form control for commenting on #post-1 is located at its rel=self\nURI&#39;s #comment-0.edit, which will contain method, target and media type\ninstructions... very useful knowledge for a spambot to glean, once it\nknows where to look, provided by a rel=&#39;replies&#39; that&#39;s only present in\nthe RDF -- the steady-state would just give a link to the comment\nthread, if it even has rel=&#39;replies&#39;, whereas the RDF links to the\ncomment thread&#39;s post-reply control.\n\nMy application&#39;s &quot;edit method&quot; points at either an HTML &lt;fieldset&gt; or an\nXforms &lt;group&gt; containing form fields for title, slug header, content,\ndraft, tags and submission.  My Xforms interface looks somewhat like:\n&lt;xfm:group id=&#39;post-1.edit&gt;...&lt;xfm:send submission=&#39;post-1.save&#39;/&gt;\n&lt;/xfm:trigger&gt;&lt;/xfm:group&gt;.  The xfm:send is referencing the Xforms\nmodel in the &lt;head&gt;, or perhaps the RDFa could link to #post-1.save...\n\nHere&#39;s the very incomplete gist of it (I&#39;ve worked out the document\nstructure, now I&#39;m working on the submissions so I can code the system\nto handle them):\n\n&lt;xfm:model&gt;\n...\n&lt;xfm:submission id=&#39;post-1.save&#39; ref=&quot;instance(&#39;post-1.src&#39;)&quot; method=\n&#39;put&#39; validate=&#39;false&#39; serialization=&#39;application/atom+xml; type=entry&#39;&gt;\n&lt;!-- xfm:repeat logic may be used instead of static values --&gt;\n&lt;xfm:resource&gt;/2006/aug/09/11.atom.draft&lt;/xfm:resource&gt;\n&lt;!-- if app:draft (in the xfm:model) = true() then previous line, else\n&lt;xfm:resource&gt;/2006/aug/09/11.atom&lt;/xfm:resource&gt;\n&lt;xfm:header&gt;&lt;!-- todo: make this header optional --&gt;\n &lt;xfm:name&gt;slug&lt;/xfm:name&gt;\n &lt;xfm:value&gt;&lt;!-- $post-1-slug --&gt;&lt;/xfm:value&gt;\n&lt;/xfm:header&gt;\n&lt;xfm:header&gt;\n &lt;xfm:name&gt;If-Match&lt;/xfm:name&gt;\n &lt;xfm:value&gt;&lt;!-- $post-1-etag --&gt;&lt;/xfm:value&gt;\n&lt;/xfm:header&gt;\n&lt;/xfm:submission&gt;\n...\n&lt;/xfm:model&gt;\n\nSee why I like Xforms?  The model instructs the user agent *how* to \nconditionally submit entries, comments and edits by following its nose.\nNow, that&#39;s what I call a self-documenting API.  The target URI can&#39;t be\nknown until the parameters of the request for the &quot;edit post&quot; state\ntransition are known (due to whether or not it&#39;s a draft, *.draft is not\nworld-readable on my system), which is why rel=&#39;edit&#39; in the RDF points\nto a self-documenting interface instead of a source document -- it&#39;s a\nmethod, not a property, in OO-speak (and in terms of m2m intent).\n\nThe referenced form fields for editing tags has buttons for apply,\nremove, reset and commit.  Following the commit button (or when draft\nis toggled to false) leads to the xfm:model for the application\nfunction, which gives instructions for target URI, method (PATCH) and\nmedia type (application/atomcat+xml).\n\nIf &#39;tags&#39; were an understood link relation, pointing it to a &lt;ul&gt; would\nindicate non-editable, whereas pointing it to an element within a form\nwould indicate otherwise.  This way, user agents are instructed where\nto look for the interface for a task, allowing that interface to evolve.\nInitially, I&#39;ll implement tags as part of the POST or PUT for creating\nor editing, only later will it be a standalone PATCH function.\n\nThe link in the RDF stays the same (points to the tag-editing control),\nbut the hypertext will indicate a different method over time.  So the\ncontract specifies where to look for the URI, method and media type.\nNot what the URI, method or media type should be.\n\nUsers who lack privilege to do a certain operation will get different\ntarget URIs in the RDF GRDDL output.  For example, if you can&#39;t change\na post&#39;s tags, then the link points to #post-1.tags not #tags-1.edit.\nI suppose it&#39;s a drawback that the RDF isn&#39;t explicit about editability,\nbut it isn&#39;t difficult to check the self-or-parent axis for form\nelements, either.  Or look for an Accept response header.\n\nAnyway, just thought I&#39;d share the idea of using link relations to\nidentify m2m goals inside RDF documents, linking directly to API\ncontrols using fragments, instead of linking to source documents.\n\n-Eric\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"cSOzhsIPBNdauH-S_-Sq81COazrqC4FN4SexET3CJn-3_BoFW7zvMWHD79qseXx1im6VYotIkfrsRfamFAi1rjaZcqs_N38Tjn_GvPZhDg","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] REST, HTTP, Web, Internet [was Atom feed vs. list of orders]","postDate":"1282698110","msgId":16393,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMTAwODI0MTkwMTUwLjkxZGYwZTIzLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","inReplyToHeader":"PDEyODI2NzI5MjAuMTczNTcuMTYzLmNhbWVsQGJhY2twYWNrPg==","referencesHeader":"PEFBTkxrVGluNlctcDhxX3Bmc29FR3JiT1NtRnFDWFNqVENfZnZnTDEyOW8xdUBtYWlsLmdtYWlsLmNvbT4JPEFBTkxrVGlrMTMyS3RfPW1aQytrYm5NQlVLZUJtOGE5cEVma0VaOHNab0M5RkBtYWlsLmdtYWlsLmNvbT4JPEFBTkxrVGlua25fUTdZRGhqbS1LWlBBYTlNRj16eXNlODFMS0x0VTZYX1U1VEBtYWlsLmdtYWlsLmNvbT4JPEFBTkxrVGluV25OdXVXWGJLZGVUWmFmOW9aYzZLQlo9VG5wVXk1Q25YZmZZZEBtYWlsLmdtYWlsLmNvbT4JPEFBTkxrVGk9b1Qxc0t5VjNjUD0tejd6dFJlcEVPMFk1Mi01QkMzc1NVWDFvYUBtYWlsLmdtYWlsLmNvbT4JPEFBTkxrVGk9aFRyekVYRzk1VHl5Q0ZmNlVNVnY0XzMrM2FCTlBUZk9CdmszZ0BtYWlsLmdtYWlsLmNvbT4JPDIwMTAwODIzMDIxODUwLjI1ZTM4M2Q1LmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPDEyODI1NTQ2MjAuMTczNTcuNjguY2FtZWxAYmFja3BhY2s+CTwyMDEwMDgyMzA0MTMyMi44MDIzNmU2Yy5lcmljQGJpc29uc3lzdGVtcy5uZXQ+CTwxMjgyNTk2MTAyLjE3MzU3LjExNS5jYW1lbEBiYWNrcGFjaz4JPDFEQjYyQkM3LUQ3MkQtNDVBRi05NTgwLTMwNUM3NkI1Njc5RkBtYWMuY29tPgk8MjAxMDA4MjMxNjIzNDEuODdlY2Q4MjcuZXJpY0BiaXNvbnN5c3RlbXMubmV0Pgk8QUFOTGtUaW5CamtLYlZMNTMxZVhFS1MxYXZwX0c0TFVoVXp3aFVmODBWc28wQG1haWwuZ21haWwuY29tPgk8MjAxMDA4MjQwNDQ2MzguMWQ5ZDQ1ZGQuZXJpY0BiaXNvbnN5c3RlbXMubmV0Pgk8MTI4MjY3MjkyMC4xNzM1Ny4xNjMuY2FtZWxAYmFja3BhY2s+"},"prevInTopic":16392,"nextInTopic":16394,"prevInTime":16392,"nextInTime":16394,"topicId":16269,"numMessagesInTopic":139,"msgSnippet":"... That sounds like more of a job for RDF than JSON, but I d need way more details about your problem space than I m willing to read in an e-mail, to pass","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 26778 invoked from network); 25 Aug 2010 01:01:53 -0000\r\nX-Received: from unknown (98.137.34.46)\n  by m4.grp.sp2.yahoo.com with QMQP; 25 Aug 2010 01:01:53 -0000\r\nX-Received: from unknown (HELO mxout-08.mxes.net) (216.86.168.183)\n  by mta3.grp.sp2.yahoo.com with SMTP; 25 Aug 2010 01:01:53 -0000\r\nX-Received: from bigbison (unknown [65.117.211.162])\n\t(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))\n\t(No client certificate requested)\n\tby smtp.mxes.net (Postfix) with ESMTPSA id 408D7509DE;\n\tTue, 24 Aug 2010 21:01:51 -0400 (EDT)\r\nDate: Tue, 24 Aug 2010 19:01:50 -0600\r\nTo: juergen.brendel@...\r\nCc: Mike Kelly &lt;mike@...&gt;, Jan Algermissen\n &lt;algermissen1971@...&gt;, Glenn Block &lt;glenn.block@...&gt;, mike\n amundsen &lt;mamund@...&gt;, Peter Williams &lt;pezra@...&gt;,\n rest-discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nMessage-Id: &lt;20100824190150.91df0e23.eric@...&gt;\r\nIn-Reply-To: &lt;1282672920.17357.163.camel@backpack&gt;\r\nReferences: &lt;AANLkTin6W-p8q_pfsoEGrbOSmFqCXSjTC_fvgL129o1u@...&gt;\n\t&lt;AANLkTik132Kt_=mZC+kbnMBUKeBm8a9pEfkEZ8sZoC9F@...&gt;\n\t&lt;AANLkTinkn_Q7YDhjm-KZPAa9MF=zyse81LKLtU6X_U5T@...&gt;\n\t&lt;AANLkTinWnNuuWXbKdeTZaf9oZc6KBZ=TnpUy5CnXffYd@...&gt;\n\t&lt;AANLkTi=oT1sKyV3cP=-z7ztRepEO0Y52-5BC3sSUX1oa@...&gt;\n\t&lt;AANLkTi=hTrzEXG95TyyCFf6UMVv4_3+3aBNPTfOBvk3g@...&gt;\n\t&lt;20100823021850.25e383d5.eric@...&gt;\n\t&lt;1282554620.17357.68.camel@backpack&gt;\n\t&lt;20100823041322.80236e6c.eric@...&gt;\n\t&lt;1282596102.17357.115.camel@backpack&gt;\n\t&lt;1DB62BC7-D72D-45AF-9580-305C76B5679F@...&gt;\n\t&lt;20100823162341.87ecd827.eric@...&gt;\n\t&lt;AANLkTinBjkKbVL531eXEKS1avp_G4LUhUzwhUf80Vso0@...&gt;\n\t&lt;20100824044638.1d9d45dd.eric@...&gt;\n\t&lt;1282672920.17357.163.camel@backpack&gt;\r\nOrganization: Bison Systems Corporation\r\nX-Mailer: Sylpheed 3.0.3 (GTK+ 2.10.14; i686-pc-mingw32)\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=US-ASCII\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nSubject: Re: [rest-discuss] REST, HTTP, Web, Internet [was Atom feed vs.\n list of orders]\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\nJuergen Brendel wrote:\n&gt; \n&gt; I think one reason for the push-back could be that fine-grained,\n&gt; specific media types can certainly have advantages. For example, in my\n&gt; application I use JSON to return meta information about available\n&gt; resources...\n&gt;\n\nThat sounds like more of a job for RDF than JSON, but I&#39;d need way more\ndetails about your problem space than I&#39;m willing to read in an e-mail,\nto pass judgment or offer alternatives...  ;-)\n\n&gt;\n&gt; ...but also to return raw data when you access these resources. While\n&gt; currently I use application/json for both cases, this doesn&#39;t\n&gt; actually feel quite right. As I keep following links, all I ever see\n&gt; is that with the next link I will get application/json.\n&gt;\n\nIt also sounds like you&#39;re figuring out why JSON isn&#39;t the right media\ntype to use for driving a hypertext application -- I don&#39;t understand\nwhat you mean by &quot;following links&quot; in JSON, because there&#39;s no\ndefinition of &quot;link&quot; in JSON...\n\n&gt;\n&gt; But that doesn&#39;t help self-descriptiveness at all. Sometimes I would\n&gt; like to let the client know that the next link will return meta\n&gt; information (schemas and other such things), while that other link\n&gt; yields raw data (maybe records from a database).\n&gt; \n\nUsing HTML as your hypertext engine, makes it very easy to define links\nto metadata, and even their media type -- &lt;link/&gt;.  That way, your\nmessaging is self-descriptive and your API is self-documenting (two\nseparate concepts often confused).  You let the client know these\nthings not necessarily by the media type identifier you send over the\nwire, but also by the media type identifiers you include in your\ncontent as @type.\n\nThere is no such thing as a self-documenting JSON API, because JSON\ndefines no hypertext controls.\n\nDon&#39;t make me list again, all the wildly divergent back-end services\nthat HTML has proven itself capable of encapsulating.  Is your API\n*really* a unique snowflake where this time-tested, tried-and-true\ndesign pattern that was the inspiration for REST in the first place,\nmust be dismissed as inadequate?  Try it.  It might just work, in which\ncase you&#39;d be well on your way to a widely-interoperable system on the\nInternet, thanks to the uniform interface.\n\n&gt;\n&gt; If you are restricting yourself to IANA registered types, what do you\n&gt; suggest is the best way to go about improving the situation I\n&gt; described?\n&gt; \n\nI don&#39;t restrict myself to IANA registered types, hence the whole\ndiscussion about how my use of application/xbel+xml is a REST mismatch.\nWhich hasn&#39;t stopped me from using it, in the least...\n\nMy suggestion is that whatever your back-end system may be, you wrap it\nwith standard hypertext to drive application state, most likely HTML.\nTools like XSLT allow you to generate that HTML content from your other\nmedia types, while HTML instructs the client how to manipulate your\nother media types.\n\nEncapsulation is the way to go, not trying to use JSON as a replacement\nfor an actual hypertext language capable of driving application state.\nREST development involves exactly such refactoring of a system to fit\nthe existing uniform interface, by re-using standardized media types as\nthey&#39;re intended -- JSON isn&#39;t intended as a replacement for HTML or\nany other hypertext API language.\n\n&gt; \n&gt; There he writes:\n&gt; \n&gt; A REST API should spend almost all of its descriptive effort\n&gt; in defining the media type(s) used for representing resources and\n&gt; driving application state, or in defining extended relation\n&gt; names and/or hypertext-enabled mark-up for existing standard\n&gt; media types.\n&gt;         \n&gt; Here he seems to imply that designing your own media type is OK\n&gt; (&quot;spend ... effort in defining the media type(s)&quot;).\n&gt;\n\nThis is a mis-read of Roy.  The REST API of my demo project doesn&#39;t\nneed to spend *any* descriptive effort defining the media types used,\nbecause I haven&#39;t introduced any new media types.  Thus, all such\ndocumentation is already &quot;in-band&quot;.\n\nMy REST API spends all its out-of-band descriptive effort explaining\nthat I&#39;m using the opaque string &#39;application/xbel+xml&#39; as an\nidentifier for the XBEL media type, which if registered, removes this\ndescription because now it&#39;s &quot;in-band&quot;.\n\nNo custom media types = no descriptive effort defining them...\nNo extended link relations = no descriptive effort defining them...\nNo hypertext extensions = no descriptive effort defining them...\n\nWhat Roy isn&#39;t doing, is recommending against re-using standardized\ntypes -- that would mean Roy is contradicting his thesis, which he\ndoesn&#39;t do...  What Roy is describing, is the proper way to evolve a\nnew media type, if and only if you really need to go that route -- to\nmake a point about the hypertext constraint, not to contradict best\npractice.\n\n&gt; \n&gt; Further in the same post he writes:\n&gt; \n&gt; A REST API should be entered with no prior knowledge beyond\n&gt; the initial URI (bookmark) and set of standardized media types that\n&gt; are appropriate for the intended audience (i.e., expected to\n&gt; be understood by any client that might use the API).\n&gt; \n&gt; Here he seems to be only concerned with server and client, not\n&gt; intermediaries. He says &quot;standardized media types that are appropriate\n&gt; for the intended audience&quot;. While we can&#39;t be 100% certain, it\n&gt; certainly sounds like he&#39;s talking about &quot;standardized&quot; in a way that\n&gt; makes sense to the client (maybe using an internal registry or just\n&gt; the fact that client and server code were written by the same person).\n&gt; \n\nRoy is discussing the REST style in general.  I keep qualifying my\nassertions with &quot;HTTP over the Internet&quot; because I&#39;m discussing that\nparticular instantiation of REST.  If you&#39;re on an intranet, then your\ncustom media type is expected to be understood by any client that might\nuse the API.  On the Internet, if you&#39;re designing for serendipitous re-\nuse and anarchic scalability, then you need to use a media type that&#39;s\ngenerally understood by some class of deployed client.  Quoting Roy:\n\n&quot;REST does not demand that everyone agree on a single format for the\nexchange of data -- only that the participants in the communication\nagree.&quot;\n\nUsing HTTP over the Internet makes potentially everybody a participant\nin the communication, in which case you need to use standardized types,\nunless of course your API really is a unique snowflake that can&#39;t be\nrefactored to use standardized types (which is much more of an edge\ncase than all the custom media types flying around in REST discussions\nwould seem to indicate).\n\n&gt;\n&gt; This seems to accommodate the case where I create a RESTful\n&gt; application using my own (non IANA registered) media types, which is\n&gt; used across all branch offices, where I know my clients and servers,\n&gt;\n\nOK...\n\n&gt;\n&gt; but the traffic traverses the public Internet.\n&gt; \n\nNot OK, unless you&#39;re using HTTPS.  There is simply no way to square\nthe use of an unregistered identifier with REST if you&#39;re talking about\nsending it over the Internet via HTTP.\n\n&gt; \n&gt; I understand your points about intermediaries on the Internet. They\n&gt; don&#39;t know what to do with your data if the content type is\n&gt; proprietary. However, if you are forced to restrict yourself to IANA\n&gt; standardized media types, even if maybe something more\n&gt; custom-designed would be more appropriate, then you risk those same\n&gt; intermediaries to screw up your data.\n&gt;\n\nIf you&#39;re using media types properly, this is a trivial concern when\ncompared to the entirely undefined treatment of unregistered\nidentifiers.\n\n&gt;\n&gt; For example, there are some proxies that will re-compress images into\n&gt; lower-quality versions in order to reduce bandwidth usage. But there\n&gt; was this one example (I think Roy himself did that?) where he used a\n&gt; PNG to send a bit-array. &quot;How brilliant! An IANA standard type used\n&gt; for something so surprising!&quot; we proclaim. But if that thing goes\n&gt; through one of those compressing proxies ... well, your information\n&gt; is lost.\n&gt; \n\nI won&#39;t dispute the existence of accelerators out there.  But I&#39;ve\nnever heard of one taking the time to compress a black-and-white GIF,\nunless the largest dimensions for that GIF in the markup are smaller\nthan the actual dimensions of the GIF, in which case it&#39;ll be resized.\n\nRegardless, there are ways to head off this problem.  The Content-MD5\nheader allows the payload to be validated.  If it&#39;s been changed, the\nclient can repeat the request using &#39;Cache-Control: max-age=0&#39; to\nensure the response comes from the origin server, bypassing any such\ntranscoding proxies.  This also heads off any man-in-the-middle\nexploits added to the GIF.\n\n&gt;\n&gt; So, by being forced to use IANA standard types for everything we could\n&gt; give those intermediaries a false sense of security as to what they\n&gt; can do with the content.\n&gt; \n\nNo, not if the media type is being used properly.  GIF files have a\nknown security profile, obvious to anyone who sees &#39;image/gif&#39; as an\nidentifier.  Using a GIF to hold a sparse-bit array doesn&#39;t change the\ncodec or anything else, from how every other GIF is handled.  There may\nbe security considerations for the consumer of that data *after* the\nimage is decoded into an array, but this has no bearing on the security\nprofile of image/gif as understood by intermediaries.\n\nA gateway filtering GIF images for known exploits is unaffected by the\npost-decoding security considerations of a consumer.  Defining a new\nmedia type for a sparse-bit array would result in an identifier with an\nunknown security profile.  Using GIF but assigning it a private\nidentifier bypasses the Web&#39;s security architecture.\n\nUsing GIF means your system is leveraging the known security profile of\nimage/gif and the fact that intermediaries MAY filter out known\nexploits, making your communications inherently more secure.  The\norigin server and any consumers can implement standard libraries to\nfilter out known exploits, in case the image/gif being transferred\nwasn&#39;t exploit-filtered by chance somewhere and was compromised.\n\nSo I&#39;m quite comfortable with using GIF as a data format for something\nbesides images meant for viewing, because there aren&#39;t any unknowns I\nneed to worry about -- like there are with any new media type until\nit&#39;s been out there long enough to become a standard, and even then the\nsecurity profile won&#39;t be as well-known as that of image/gif due to the\nmaturity of that media type.\n\n-Eric\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":352334505,"authorName":"Craig McClanahan","from":"Craig McClanahan &lt;craigmcc@...&gt;","profile":"craig_mcclanahan","replyTo":"SENDER","senderId":"mHam-TuxckxNHPa-NveHaLHqsva729IU727qg36XNY2PZfmv7YtSzxM5nZVuBb1k6SfKLli3ZTz6GL_s9sNlfqODo5uPDCD1610xeg","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Differentiating HTTP-based APIs","postDate":"1267169963","msgId":14919,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGY4YjM5YWNlMTAwMjI1MjMzOXAzNmE5N2U4YnA2ZTRkMWYwYzc1NzcwOGM2QG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PGQxMTYwMzg2MTAwMjI1MjIyNmo2NGI4ZDM0MmlmZmRkYTRlNmQ4NjgzMzkwQG1haWwuZ21haWwuY29tPg==","referencesHeader":"PGY4YjM5YWNlMTAwMjI1MTEzN3A1Mzk1NzRiMWdmMGFlZjFlNzMzMjkyMTNAbWFpbC5nbWFpbC5jb20+CSA8NTUxOTUuNzYwNjAucW1Ad2ViNTU5MDgubWFpbC5yZTMueWFob28uY29tPgkgPGQxMTYwMzg2MTAwMjI1MjIyNmo2NGI4ZDM0MmlmZmRkYTRlNmQ4NjgzMzkwQG1haWwuZ21haWwuY29tPg=="},"prevInTopic":14918,"nextInTopic":14920,"prevInTime":14918,"nextInTime":14920,"topicId":14904,"numMessagesInTopic":31,"msgSnippet":"2010/2/25 Felipe Ga√∫cho  ... *different* classes for the *resource* domain model and the *business* domain model.  Then, each kind of class","rawEmail":"Return-Path: &lt;craigmcc@...&gt;\r\nX-Sender: craigmcc@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 82530 invoked from network); 26 Feb 2010 07:39:24 -0000\r\nX-Received: from unknown (98.137.34.44)\n  by m2.grp.sp2.yahoo.com with QMQP; 26 Feb 2010 07:39:24 -0000\r\nX-Received: from unknown (HELO mail-pw0-f44.google.com) (209.85.160.44)\n  by mta1.grp.sp2.yahoo.com with SMTP; 26 Feb 2010 07:39:24 -0000\r\nX-Received: by pwi3 with SMTP id 3so6626298pwi.31\n        for &lt;rest-discuss@yahoogroups.com&gt;; Thu, 25 Feb 2010 23:39:24 -0800 (PST)\r\nMIME-Version: 1.0\r\nX-Received: by 10.143.25.37 with SMTP id c37mr433840wfj.172.1267169963586; Thu, \n\t25 Feb 2010 23:39:23 -0800 (PST)\r\nIn-Reply-To: &lt;d11603861002252226j64b8d342iffdda4e6d8683390@...&gt;\r\nReferences: &lt;f8b39ace1002251137p539574b1gf0aef1e73329213@...&gt;\n\t &lt;55195.76060.qm@...&gt;\n\t &lt;d11603861002252226j64b8d342iffdda4e6d8683390@...&gt;\r\nDate: Thu, 25 Feb 2010 23:39:23 -0800\r\nMessage-ID: &lt;f8b39ace1002252339p36a97e8bp6e4d1f0c757708c6@...&gt;\r\nTo: =?ISO-8859-1?Q?Felipe_Ga=FAcho?= &lt;fgaucho@...&gt;\r\nCc: Kevin Duffey &lt;andjarnic@...&gt;, REST Discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Type: multipart/alternative; boundary=00504501803b8cb60904807bffee\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Craig McClanahan &lt;craigmcc@...&gt;\r\nReply-To: craigmcc@...\r\nSubject: Re: [rest-discuss] Differentiating HTTP-based APIs\r\nX-Yahoo-Group-Post: member; u=352334505; y=NVhTuPSMcPQyuNYJdRGRCiZ21H1tQvkxjQ1Qv-8IzgZOdoPCGfZI3TBIgQ\r\nX-Yahoo-Profile: craig_mcclanahan\r\n\r\n\r\n--00504501803b8cb60904807bffee\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n2010/2/25 Felipe Ga=FAcho &lt;fgaucho@...&gt;\n\n&gt;\n&gt;\n&gt; There is only 1 drawba=\r\nck in your solution: JAXB unfortunately doesn&#39;t allow\n&gt; you to add extra an=\r\nnotations in the generated files, so you need to manually\n&gt; manage the ORM.=\r\n. Despite that there is a large community that believes that\n&gt; isolating do=\r\nmain model from business model is a better approach than mix\n&gt; them togethe=\r\nr.. (a long Java Design Patterns discussion I will avoid here)\n&gt;\n&gt; You&#39;re m=\r\nissing a key feature of what both Kevin and I said ... use\n*different* clas=\r\nses for the *resource* domain model and the *business*\ndomain model.  Then,=\r\n each kind of class can have the annotations that are\nrelevant for that tie=\r\nr.  If you think about an MVC style architecture, and\ntake the point of vie=\r\nw of the server developer, the classes representing\nyour resources are part=\r\n of the view tier, while the classes representing the\nbusiness domain are p=\r\nart of the model tier.\n\nThe value of putting the resource model classes in =\r\na separate library is\nthat, if you use one of several JAX-RS implementation=\r\ns like Jersey, you can\nleverage the same JAX-RS infrastructure for serializ=\r\nation on the client side\n(when you have a Java based client) as on the serv=\r\ner side, thus reducing\ndevelopment effort and potential for impedance misma=\r\ntches.  But that is\northogonal to the idea that the two models are often di=\r\nfferent.\n\n&gt; One alternative is to use the package-info file to manage the n=\r\namespaces\n&gt; and do annotate the model classes directly.. it is more program=\r\nmatic\n&gt; approach but you preserve the namespaces as well... and then you ca=\r\nn\n&gt; annotate the classes also as Entities and you get the DB roundtrip for\n=\r\n&gt; free.. and Jersey + CDI com inject the EntityManager in your service laye=\r\nr\n&gt; if you want... and it scales like hell :) eheh\n&gt;\n&gt;\n&gt; the problem still =\r\nremains: how to control the hypermedia workflow.. I&#39;ve\n&gt; seen people adopti=\r\nng custom annotations and several other tricks but so far\n&gt; a stable soluti=\r\non didn&#39;t emerged ... we are waiting your best thoughts :)\n&gt;\n&gt; Managing wor=\r\nkflow, like obeying the hypermedia constraint, is a view tier\nconcern (from=\r\n the point of view of a server side developer).  All you need\nto do is defi=\r\nne the appropriate hypermedia links into your representations\n(and therefor=\r\ne into your resource model classes if you&#39;re using Java and\nJAX-RS), and po=\r\npulate them appropriately when a JAX-RS resource method is\ncalled.  In the =\r\nmean time, your JPA or Hibernate classes representing the\nbusiness domain m=\r\nodel can remain serenely oblivious to things like URIs.\nThat&#39;s a good thing=\r\n, because a REST API is typically not the only way that\nsuch business model=\r\n objects get manipulated.\n\nSelf-test time:  are you storing URIs in your da=\r\ntabase?  If so, think\nagain.  Are you using values (like primary keys) from=\r\n your business domain\nmodel classes in order to calculate the URIs that sho=\r\nw up in your resource\nmodel classes?  That&#39;s OK, although you should not fe=\r\nel constrained to build\nURIs in the fashion you typically see\n(&quot;.../custome=\r\nrs/{customerID}/orders/{orderID}&quot;).  The only part of the\nserver side logic=\r\n that cares about the generated URIs should be the logic\nthat processes inc=\r\noming requests from those generated URIs.  In the case of\na JAX-RS based se=\r\nrver application, that &quot;care&quot; is expressed by @Path\nannotations.  Fortunate=\r\nly, JAX-RS also has APIs to &quot;reverse engineer&quot; an\nappropriate resource URI =\r\nfrom the @Path annotations that are present in many\ncases, so if you levera=\r\nge this functionality when generating URIs in your\nresource representations=\r\n, you still have to change only one thing -- the\n@Path annotations -- to ch=\r\nange the URIs included in your representations.\n\nIn the shopping cart use c=\r\nase (no, I don&#39;t care if some people don&#39;t like it\nas an example :-), a wel=\r\nl designed REST API should *not* define a URI\ntemplate like &quot;/checkout&quot; tha=\r\nt accepts a POST with a shopping cart\nrepresentation.  Instead, the represe=\r\nntation of the cart last sent by the\nserver should include a URI you can PO=\r\nST to to initiate checkout on *this*\nshopping cart instance (and it should =\r\nbe included only if the cart is in a\nstate that is appropriate for checkout=\r\n) ... for security, you&#39;re much better\noff if the server generates a random=\r\n string based URI for this, which\nexpires after a short amount of time, to =\r\nreduce the opportunity for client\ninitiated mischief.\n\nA properly coded cli=\r\nent, then, will need to understand how to extract this\nURI from the represe=\r\nntation, and understand that it needs to do a POST with\nthe current cart co=\r\nntents as its request body.  But, as far as the client is\nconcerned, the UR=\r\nI itself is an opaque string.\n\nCraig\n\r\n--00504501803b8cb60904807bffee\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n2010/2/25 Felipe Ga=FAcho &lt;span dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:fgaucho@g=\r\nmail.com&quot;&gt;fgaucho@...&lt;/a&gt;&gt;&lt;/span&gt;&lt;br&gt;&lt;div class=3D&quot;gmail_quote&quot;&gt;&lt;b=\r\nlockquote class=3D&quot;gmail_quote&quot; style=3D&quot;border-left: 1px solid rgb(204, 20=\r\n4, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;&quot;&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;div=\r\n style=3D&quot;background-color: rgb(255, 255, 255);&quot;&gt;\n&lt;span&gt;=A0&lt;/span&gt;\n\n\n&lt;div&gt;\n=\r\n  &lt;div&gt;\n\n\n    &lt;div&gt;\n      \n      \n      &lt;p&gt;There is only 1 drawback in your=\r\n solution: JAXB unfortunately doesn&#39;t allow you to add extra annotation=\r\ns in the generated files, so you need to manually manage the ORM.. Despite =\r\nthat there is a large community that believes that isolating domain model f=\r\nrom business model is a better approach than mix them together.. (a long Ja=\r\nva Design Patterns discussion I will avoid here)&lt;br&gt;\n\n&lt;br&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;=\r\n/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;You&#39;re missing a key feature of what both =\r\nKevin and I said ... use *different* classes for the *resource* domain mode=\r\nl and the *business* domain model.=A0 Then, each kind of class can have the=\r\n annotations that are relevant for that tier.=A0 If you think about an MVC =\r\nstyle architecture, and take the point of view of the server developer, the=\r\n classes representing your resources are part of the view tier, while the c=\r\nlasses representing the business domain are part of the model tier.&lt;br&gt;\n&lt;br=\r\n&gt;The value of putting the resource model classes in a separate library is t=\r\nhat, if you use one of several JAX-RS implementations like Jersey, you can =\r\nleverage the same JAX-RS infrastructure for serialization on the client sid=\r\ne (when you have a Java based client) as on the server side, thus reducing =\r\ndevelopment effort and potential for impedance mismatches.=A0 But that is o=\r\nrthogonal to the idea that the two models are often different.&lt;br&gt;\n&lt;/div&gt;&lt;b=\r\nlockquote class=3D&quot;gmail_quote&quot; style=3D&quot;border-left: 1px solid rgb(204, 20=\r\n4, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;&quot;&gt;&lt;div style=3D&quot;backg=\r\nround-color: rgb(255, 255, 255);&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;p&gt;One alternative is to u=\r\nse the package-info file to manage the namespaces and do annotate the model=\r\n classes directly.. it is more programmatic approach but you preserve the n=\r\namespaces as well... and then you can annotate the classes also as Entities=\r\n and you get the DB roundtrip for free.. and Jersey + CDI com inject the En=\r\ntityManager in your service layer if you want... and it scales like hell :)=\r\n eheh&lt;br&gt;\n\n&lt;br&gt;&lt;br&gt;the problem still remains: how to control the hypermedia=\r\n workflow.. I&#39;ve seen people adopting custom annotations and several ot=\r\nher tricks but so far a stable solution didn&#39;t emerged ... we are waiti=\r\nng your best thoughts :)&lt;/p&gt;\n&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;div class=3D&quot;h5&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;/=\r\ndiv&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;Managing workflow, like obeyi=\r\nng the hypermedia constraint, is a view tier concern (from the point of vie=\r\nw of a server side developer).=A0 All you need to do is define the appropri=\r\nate hypermedia links into your representations (and therefore into your res=\r\nource model classes if you&#39;re using Java and JAX-RS), and populate them=\r\n appropriately when a JAX-RS resource method is called.=A0 In the mean time=\r\n, your JPA or Hibernate classes representing the business domain model can =\r\nremain serenely oblivious to things like URIs.=A0 That&#39;s a good thing, =\r\nbecause a REST API is typically not the only way that such business model o=\r\nbjects get manipulated.&lt;br&gt;\n&lt;br&gt;Self-test time:=A0 are you storing URIs in =\r\nyour database?=A0 If so, think again.=A0 Are you using values (like primary=\r\n keys) from your business domain model classes in order to calculate the UR=\r\nIs that show up in your resource model classes?=A0 That&#39;s OK, although =\r\nyou should not feel constrained to build URIs in the fashion you typically =\r\nsee (&quot;.../customers/{customerID}/orders/{orderID}&quot;).=A0 The only =\r\npart of the server side logic that cares about the generated URIs should be=\r\n the logic that processes incoming requests from those generated URIs.=A0 I=\r\nn the case of a JAX-RS based server application, that &quot;care&quot; is e=\r\nxpressed by @Path annotations.=A0 Fortunately, JAX-RS also has APIs to &quo=\r\nt;reverse engineer&quot; an appropriate resource URI from the @Path annotat=\r\nions that are present in many cases, so if you leverage this functionality =\r\nwhen generating URIs in your resource representations, you still have to ch=\r\nange only one thing -- the @Path annotations -- to change the URIs included=\r\n in your representations.&lt;br&gt;\n&lt;br&gt;In the shopping cart use case (no, I don&=\r\n#39;t care if some people don&#39;t like it as an example :-), a well desig=\r\nned REST API should *not* define a URI template like &quot;/checkout&quot; =\r\nthat accepts a POST with a shopping cart representation.=A0 Instead, the re=\r\npresentation of the cart last sent by the server should include a URI you c=\r\nan POST to to initiate checkout on *this* shopping cart instance (and it sh=\r\nould be included only if the cart is in a state that is appropriate for che=\r\nckout) ... for security, you&#39;re much better off if the server generates=\r\n a random string based URI for this, which expires after a short amount of =\r\ntime, to reduce the opportunity for client initiated mischief.&lt;br&gt;\n&lt;br&gt;A pr=\r\noperly coded client, then, will need to understand how to extract this URI =\r\nfrom the representation, and understand that it needs to do a POST with the=\r\n current cart contents as its request body.=A0 But, as far as the client is=\r\n concerned, the URI itself is an opaque string.&lt;br&gt;\n&lt;br&gt;Craig&lt;br&gt;&lt;br&gt;&lt;/div&gt;=\r\n&lt;/div&gt;\n\r\n--00504501803b8cb60904807bffee--\r\n\n"}}
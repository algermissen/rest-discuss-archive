{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":124198377,"authorName":"William Martinez Pomares","from":"&quot;William Martinez Pomares&quot; &lt;wmartinez@...&gt;","profile":"willmarpo","replyTo":"SENDER","senderId":"adfhsx6IcH3JCaNM_9kv2R0yVAtkWC-2rFPfNXLs9UPk55RpD3HgCoA2hizFIA87Tri0AF0e6A1TLlv5FXR5MflK3UN3kpkc-7a5mnQ2xxQhueuBMhQy4Tc6","spamInfo":{"isSpam":false,"reason":"6"},"subject":"Re: how REST is explained","postDate":"1284918441","msgId":16623,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGk3NWliOStmZzZnQGVHcm91cHMuY29tPg==","inReplyToHeader":"PDI5MzQ1MS42NTUwNy5xbUB3ZWIyODMwMy5tYWlsLnVrbC55YWhvby5jb20+"},"prevInTopic":16621,"nextInTopic":16624,"prevInTime":16622,"nextInTime":16624,"topicId":16621,"numMessagesInTopic":10,"msgSnippet":"Hello Sean. I work on academia too. But I teach Software Architecture fundamentals. So, I mention REST simple as an example in many of the class sessions, and","rawEmail":"Return-Path: &lt;wmartinez@...&gt;\r\nX-Sender: wmartinez@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 79252 invoked from network); 19 Sep 2010 17:47:22 -0000\r\nX-Received: from unknown (98.137.34.45)\n  by m3.grp.sp2.yahoo.com with QMQP; 19 Sep 2010 17:47:22 -0000\r\nX-Received: from unknown (HELO n45b.bullet.mail.sp1.yahoo.com) (66.163.168.159)\n  by mta2.grp.sp2.yahoo.com with SMTP; 19 Sep 2010 17:47:22 -0000\r\nX-Received: from [69.147.65.172] by n45.bullet.mail.sp1.yahoo.com with NNFMP; 19 Sep 2010 17:47:21 -0000\r\nX-Received: from [98.137.34.72] by t14.bullet.mail.sp1.yahoo.com with NNFMP; 19 Sep 2010 17:47:21 -0000\r\nDate: Sun, 19 Sep 2010 17:47:21 -0000\r\nTo: rest-discuss@yahoogroups.com\r\nMessage-ID: &lt;i75ib9+fg6g@...&gt;\r\nIn-Reply-To: &lt;293451.65507.qm@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;ISO-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-Yahoo-Newman-Property: groups-compose\r\nX-eGroups-Msg-Info: 1:6:0:0:0\r\nFrom: &quot;William Martinez Pomares&quot; &lt;wmartinez@...&gt;\r\nSubject: Re: how REST is explained\r\nX-Yahoo-Group-Post: member; u=124198377; y=W_V0VqEysd7BWH_vMt5T4-7iLzwHoWH94Fw1tpBqnNvMKJ3Y\r\nX-Yahoo-Profile: willmarpo\r\n\r\nHello Sean.\nI work on academia too. But I teach Software Architecture funda=\r\nmentals.\n\nSo, I mention REST simple as an example in many of the class sess=\r\nions, and I have one just devoted to explain the constrains and actually to=\r\n wipe the idea of REST as an easy Web Service engine.\n\nBut, I do not start =\r\nin any of the two explanations you just mentioned. I actually start with Ch=\r\napter 4. My students already know what an architectural style is and also m=\r\nany of the properties. Chapter 4 explains what properties and requirements =\r\nthe Web had. It helps a lot to understand why the constrains, and also help=\r\ns to build up criteria to choose REST for an app or not. \n\nBTW, chapter 2 (=\r\n 2.3 Architectural Properties of Key Interest) may be confused with the act=\r\nual properties of the web. Be careful with that. Section 2.3 lists the prop=\r\nerties that are somehow affected by the styles in chapter 3, and they are p=\r\nroperties that are generally important for Networked applications. The web =\r\nis just one particular type of networked application, it is a large distrib=\r\nuted hypermedia system. The particular requirements (and the ones REST in c=\r\nhapter 5 tries to fulfill) are in chapter 4. \n\nTo me, the dissertation is a=\r\nn excellent real life example of architecting, following a clear methodolog=\r\ny to generate a style, and that can be applied to other applications, but t=\r\nhat doesn&#39;t mean all my next applications should be REST. Roy gives an exam=\r\nple in the conclusions, REST is optimized for large grain hypermedia transf=\r\ner, if you have a computational intensive system, REST may not be for you.\n=\r\n\nIn other words, I use REST as an analytical example. I try not to teach it=\r\n as a set of rules and constrains.\nCheers!\n\nWilliam Martinez.\n\n--- In rest-=\r\ndiscuss@yahoogroups.com, Sean Kennedy &lt;seandkennedy@...&gt; wrote:\n&gt;\n&gt; Hi,\n&gt;  =\r\n   I work in academia and do my best to inform students as to the benefits =\r\nof \n&gt; RESTful designs. When I first came across REST it was explained as a =\r\nstyle that \n&gt; follows the following constraints [1]:\n&gt; \n&gt; \t* Give everythin=\r\ng an id\n&gt; \t* Link things to each other\n&gt; \t* Use standard methods\n&gt; \t* Multi=\r\nple representations\n&gt; \t* Stateless communication \n&gt; I read Roy&#39;s thesis ove=\r\nr the summer and my summary of it is as follows:\n&gt; \n&gt; &quot;REST is a hybrid sty=\r\nle derived from other network-based architectural styles. \n&gt; The use of an =\r\narchitectural style applies the associated constraints on the \n&gt; system. Ea=\r\nch constraint induces certain properties e.g. simplicity and \n&gt; scalability=\r\n. Thus, a style applies (it=E2=80=99s) constraints, which induce certain \n&gt;=\r\n properties. \n&gt; \n&gt; \n&gt; Fielding defines the properties of key interest when =\r\nconsidering the target \n&gt; architecture of network-based hypermedia (the Web=\r\n); for example: scalability, \n&gt; simplicity, visibility and independent evol=\r\nvability. Fielding then evaluates \n&gt; several common network-based architect=\r\nural styles (e.g. client-server) for the \n&gt; properties they would induce. F=\r\nielding then derives REST by applying the styles \n&gt; that induce the propert=\r\nies he requires. To do this, Fielding firstly defines the \n&gt; =E2=80=9Cnull=\r\n=E2=80=9D style i.e. a style with no constraints at all. Fielding then adds=\r\n certain \n&gt; pre-defined styles, which induce the desired properties for the=\r\n target \n&gt; architecture of network-based hypermedia. This hybrid style is c=\r\nombined with \n&gt; other constraints (most notably the uniform interface const=\r\nraint to form the \n&gt; REST architectural style. REST =3D LCODC$SS + Uniform =\r\nInterface&quot;\n&gt; \n&gt; Would this be an accurate summary of REST from Roys&#39; thesis=\r\n? Which way should I \n&gt; explain REST to my students - I suspect both. Note =\r\nthat I will use [1] in any \n&gt; event as I view it as an excellent presentati=\r\non by Stefan.\n&gt; \n&gt; Thanks,\n&gt; Sean.\n&gt; \n&gt; [1] Stefan \n&gt; Tilkov, http://wiki.p=\r\narleys.com/display/PARLEYS/Home#talk=3D31817742;slide=3D13;\n&gt;\n\n\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":272793929,"authorName":"Kevin Duffey","from":"Kevin Duffey &lt;andjarnic@...&gt;","profile":"andjarnic","replyTo":"SENDER","senderId":"ySbwBV3YLWvq82fDVZdEcIMEhMxV9Ocyi4bKG3LcsrApWKnpU7YWJu7Cp8wEu9DtDV0vfUd_Y10P_kwFGHL5lBdPZvmDLWvBbg","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Differentiating HTTP-based APIs","postDate":"1267257606","msgId":14932,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDU3OTgwMS4zNjE1NS5xbUB3ZWI1NTkwMS5tYWlsLnJlMy55YWhvby5jb20+","inReplyToHeader":"PGQxMTYwMzg2MTAwMjI2MDEzMHMyOTU1Y2VlZm0zMDc5ODg4YjIwMDI2NzcxQG1haWwuZ21haWwuY29tPg=="},"prevInTopic":14929,"nextInTopic":14943,"prevInTime":14931,"nextInTime":14933,"topicId":14904,"numMessagesInTopic":31,"msgSnippet":"Hi Felipe, So, it seems you are really having a hard time with this issue of reducing how much code it takes to do what you would like.Â  As Craig said, you re","rawEmail":"Return-Path: &lt;andjarnic@...&gt;\r\nX-Sender: andjarnic@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 84872 invoked from network); 27 Feb 2010 08:02:38 -0000\r\nX-Received: from unknown (66.196.94.106)\n  by m11.grp.re1.yahoo.com with QMQP; 27 Feb 2010 08:02:38 -0000\r\nX-Received: from unknown (HELO n8.bullet.re3.yahoo.com) (68.142.237.93)\n  by mta2.grp.re1.yahoo.com with SMTP; 27 Feb 2010 08:02:38 -0000\r\nX-Received: from [68.142.237.89] by n8.bullet.re3.yahoo.com with NNFMP; 27 Feb 2010 08:00:12 -0000\r\nX-Received: from [66.196.97.145] by t5.bullet.re3.yahoo.com with NNFMP; 27 Feb 2010 08:00:12 -0000\r\nX-Received: from [127.0.0.1] by omp203.mail.re3.yahoo.com with NNFMP; 27 Feb 2010 08:00:12 -0000\r\nX-Yahoo-Newman-Property: ymail-3\r\nX-Yahoo-Newman-Id: 434949.79943.bm@...\r\nX-Received: (qmail 38123 invoked by uid 60001); 27 Feb 2010 08:00:11 -0000\r\nMessage-ID: &lt;579801.36155.qm@...&gt;\r\nX-YMail-OSG: OXRstv0VM1nzjikAoIY050AMnBwktrWJFEOug0G90I.6P_l\n XKN3.14p3jqcjb9XoTdFCxxvU5g7YUVL2KgMzYkDtGTq2kl2jNkAg_GJczbQ\n XpZM4GFvFeUpFjGABGzH8Gu7em_4yeTy2l_7MQ_slqZU37tMoLDleHg4lnVJ\n lei1EZRXiDjz8rHxPgiLZdybRROvC8.A4Ux9o__2.u0YuA2joa4mPG3eijd1\n XfHZwQm8zEOuvJ5bwL82cq2L4keu251FvUBR2G1rPeycEv6F2k2oKIl8CJih\n F21sr.YRs96tk3HKwR27KQG.tNmJHDrhaqqtaeVsE\r\nX-Received: from [99.22.138.61] by web55901.mail.re3.yahoo.com via HTTP; Sat, 27 Feb 2010 00:00:06 PST\r\nX-Mailer: YahooMailClassic/9.2.12 YahooMailWebService/0.8.100.260964\r\nDate: Sat, 27 Feb 2010 00:00:06 -0800 (PST)\r\nTo: rest-discuss@yahoogroups.com\r\nIn-Reply-To: &lt;d11603861002260130s2955ceefm3079888b20026771@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: multipart/alternative; boundary=&quot;0-1874641678-1267257606=:36155&quot;\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Kevin Duffey &lt;andjarnic@...&gt;\r\nSubject: Re: [rest-discuss] Differentiating HTTP-based APIs\r\nX-Yahoo-Group-Post: member; u=272793929; y=GZb0rYxo8d9tMyaJOxJycro_UFdGkF3LmrkAFpZ3fi46lVTt\r\nX-Yahoo-Profile: andjarnic\r\n\r\n\r\n--0-1874641678-1267257606=:36155\r\nContent-Type: text/plain; charset=utf-8\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nHi Felipe,\n\nSo, it seems you are really having a hard time with this issue =\r\nof reducing how much code it takes to do what you would like.=C2=A0 As Crai=\r\ng said, you&#39;re allowing your &quot;view&quot; tier mix in with your &quot;model&quot; tier. Nei=\r\nther should know about the other. There is a reason, in my opinion, MVC has=\r\n stuck around so long and is so well known and implemented. To break this w=\r\nell sought after development paradigm in order to reduce some code to me is=\r\n going backwards.\n\nNow, there are some things you could do that could keep =\r\nthe concerns separated, but at the same time reduce code... but usually get=\r\nting something for free means giving something up. I&#39;ll fill you in on some=\r\nthing I&#39;ve done recently that works, although I have not tested it, I imagi=\r\nne I may be giving up a little performance for a lot of convenience. In the=\r\n end, there are things I can do to increase performance... but if I mix my =\r\nmodel with my view tiers, and some other business need comes up that requir=\r\nes a different view with the same model.. I am going to have to write a lot=\r\n of new code or spend a lot of time rewriting it the way it should be, whic=\r\nh is separated.\n\nSo, what I did was to use XSD with JAXB for my &quot;view&quot; mode=\r\nl that allows me to automatically thanks to the wonders of JAXB and Jersey&#39;=\r\ns ability to convert incoming xml/json requests into objects, and vice vers=\r\na, send xml/json in response from my XSD objects. Now, as you say, and I to=\r\no have done, my XSD/JAXB classes have pretty much identical method names an=\r\nd properties. For example, my user entity is basically a name, street, city=\r\n, state zip, area, country, phone and email. Likewise, my XSD mimics those =\r\nfields, and in my case they are basically identical. Enough so that the gen=\r\nerated XSD/JAXB object properties match with the entity bean property names=\r\n.\n\nWhat I decided to do was in my ejb session beans, which are stateless us=\r\ning the @Stateless, to pass in the JAXB model object as a paramter to the m=\r\nethod that would utilize the same entity bean on the back end. I also utili=\r\nzed the apache BeanUtils class to copy properties for me. This is where it =\r\nmight cause a slight performance hiccup..I am not entirely sure how the cop=\r\ny method does what it does, but I am guessing with reflection. Still, refle=\r\nction is much faster now, so I am far less worried about a fraction more ti=\r\nme lost given the benefits I get of the separation and cleaner code. And me=\r\nanwhile, as you can see, it&#39;s not that much code. This particular implement=\r\nation works with all objects, so I can quickly copy/paste this method for w=\r\nhatever my needs are. I am not having to call tons of user.setXxx(u.getXxx(=\r\n)) methods in code.\n\n@Stateless\npublic class UserEJBSession{\n=C2=A0 @Persis=\r\ntenceContext(unitName =3D &quot;myPersistenceUnit&quot;)\n=C2=A0 EntityManager em;\n\n=\r\n=C2=A0 public long createUser(com.myjaxbgeneratedpackage.models.User user) =\r\n{\n=C2=A0=C2=A0=C2=A0 User u =3D new User();\n\n=C2=A0=C2=A0=C2=A0 try {\n=C2=\r\n=A0=C2=A0=C2=A0 =C2=A0=C2=A0=C2=A0 BeanUtils.copyProperties(u, user);\n=C2=\r\n=A0=C2=A0=C2=A0 } catch (InvocationTargetException ite) {\n=C2=A0=C2=A0=C2=\r\n=A0 =C2=A0=C2=A0=C2=A0 ite.printStackTrace(System.out);\n=C2=A0=C2=A0=C2=A0 =\r\n} catch (IllegalAccessException e) {\n=C2=A0=C2=A0=C2=A0 =C2=A0=C2=A0=C2=A0 =\r\ne.printStackTrace(System.out);\n=C2=A0=C2=A0=C2=A0 }\n\n=C2=A0=C2=A0=C2=A0 em.=\r\npersist(u);\n=C2=A0=C2=A0=C2=A0 em.flush();\n=C2=A0=C2=A0=C2=A0 em.refresh(u)=\r\n;\n=C2=A0=C2=A0=C2=A0 return u.getId().longValue();\n=C2=A0 }\n\n\n\nThe above, t=\r\no me, is not much code, it works, and it allows me to keep my domains and v=\r\niews separated. It allows me to make use of my domains for other purposes. =\r\nI generally put my JAXB/XSD into a separate project, build it and put the .=\r\njar into this projects /lib directory. Thus, it is perfectly fine for my ej=\r\nb session to &quot;see&quot; the JAXB model classes. I am NOT allowing my entity clas=\r\nses to use the JAXB objects. The session bean also does not dictate the &quot;vi=\r\new&quot; going back. The resource class (which would call this createUser method=\r\n passing in to it the JAXB user object that it created when the request cam=\r\ne in with the xml or json of a user) gets back the response from this metho=\r\nd and then figures out what to respond with. If this were a web site, it wo=\r\nuld forward to some JSP page, perhaps setting some request scoped propertie=\r\ns that the JSP page could use for it&#39;s response. As my service is a rest se=\r\nrvice, it would return a response with probably a 201\n created and a URI li=\r\nnking to the new created resource. The point being, the service does not se=\r\ne or know about the back end entity model, and the back end entity model kn=\r\nows nothing of the view or the JAXB classes.\n\nAnother thing to think about.=\r\n Part of JEE6 is this new profile setup, where by you can install a subset =\r\nof the JEE6 spec as part of the container. For example, I think the Web Pro=\r\nfile provides the servlet/jsp, some ejb but not all of it, no JMS, etc. I d=\r\non&#39;t know for sure, but it may be that if you were to try to deploy your ap=\r\np with your mixed models as you have them now, they may not deploy into thi=\r\ns Web Profile container. Don&#39;t quote me on this, but it is something to thi=\r\nnk about.\n\nAnother thing to consider is scalability. Given that the ejb/ent=\r\nity stuff is going to be working with the database, it&#39;s likely that it wil=\r\nl require more time to work with back end resources. As such, you may need =\r\nto scale the server farm (for larger sites) more so in that tier than say, =\r\nthe front end rest/jsp/servlet view tier. If you deploy everything complete=\r\nly mixed up, that is fine, but often times many of the front end requests c=\r\nan be handled via cache, or non-back end needs and responded to quickly. By=\r\n separating it, you could provide fewer servers to handle the majority of f=\r\nront end requests, while scaling up the back end as needed.\n\nHTH\n\n\n\njust a =\r\nquestion about your domain model sharing:\n\n\n\nand what about the code ?\n\n\n\nI=\r\nf you code the whole engine logic in a code, and you need a second\n\napplica=\r\ntion to access the same data, you will need to recode the\n\nengine logic aga=\r\nin ?\n\n\n\nok, we all think about &quot;reuse of components&quot;, but so far I&#39;ve seen\n=\r\n\nugly hack in the code to simulate the hypermedia engine and that&#39;s\n\nwhat I=\r\n am trying to do better.. but your points are good.. I will\n\ndigest them an=\r\nd try to incorporate the best I can in my design\n\nhere.....\n\n\n\n2010/2/26 Fe=\r\nlipe Ga=C3=BAcho &lt;fgaucho@gmail. com&gt;:\n\n&gt; excellent points.. I will conside=\r\nr that...\n\n&gt;\n\n&gt; 2010/2/26 Craig McClanahan &lt;craigmcc@gmail. com&gt;:\n\n&gt;&gt; 2010/=\r\n2/25 Felipe Ga=C3=BAcho &lt;fgaucho@gmail. com&gt;:\n\n&gt;&gt;&gt;&gt; You&#39;re missing a key fe=\r\nature of what both Kevin and I said ... use\n\n&gt;&gt;&gt;&gt; *different* classes for t=\r\nhe *resource* domain model and the *business*\n\n&gt;&gt;&gt;&gt; domain model.\n\n&gt;&gt;&gt;\n\n&gt;&gt;&gt;=\r\n yes, I am aware about that... but the effort to maintain the mapping\n\n&gt;&gt;&gt; =\r\nbetween those models generates an extra and unnecessary development\n\n&gt;&gt;&gt; ef=\r\nfort ,.... I also noticed some people having a third model when the\n\n&gt;&gt;&gt; da=\r\nta will be rendered in the presentation layer.. (a managedbean or\n\n&gt;&gt;&gt; othe=\r\nr component..) ... My experiment is looking to reduce the amount of\n\n&gt;&gt;&gt; ef=\r\nfort required to synchronize all those models, having only one\n\n&gt;&gt;&gt; model..=\r\n and it works fine and the performance is better and\n\n&gt;&gt;&gt; maintenance effor=\r\nt much less than the traditional MVC design...\n\n&gt;&gt;\n\n&gt;&gt; In your business dom=\r\nain objects, do you store the CSS style class that\n\n&gt;&gt; should be used to di=\r\nsplay this object in a browser? =C2=A0Of course not:\n\n&gt;&gt;\n\n&gt;&gt; * The *name* o=\r\nf the style class is totally up to the designer.\n\n&gt;&gt;\n\n&gt;&gt; * Do *you* know an=\r\ny designers that care about backwards compatibility\n\n&gt;&gt; of style names? =C2=\r\n=A0I don&#39;t either ...\n\n&gt;&gt; =C2=A0but I don&#39;t care, as long as the designer u=\r\npdates all the\n\n&gt;&gt; corresponding HTML pages when the style name changes.\n\n&gt;=\r\n&gt;\n\n&gt;&gt; * Style names can be changed at any time (for example, when you refre=\r\nsh\n\n&gt;&gt; =C2=A0the look and feel characteristics of your website).\n\n&gt;&gt;\n\n&gt;&gt; * =\r\nAnd, of course, there is normally more than one webapp\n\n&gt;&gt; =C2=A0that needs=\r\n to be able to render this business domain object,\n\n&gt;&gt; =C2=A0so having only=\r\n one style name would not be useful.\n\n&gt;&gt;\n\n&gt;&gt; The same principles apply to d=\r\nesigning resource representations -- we\n\n&gt;&gt; should assume that there will b=\r\ne more than one representation that\n\n&gt;&gt; includes this particular object, an=\r\nd more than one RESTful application\n\n&gt;&gt; that needs to provide access to it,=\r\n so assuming any *single* approach\n\n&gt;&gt; is not likely to help all our users.=\r\n\n\n&gt;&gt;\n\n&gt;&gt;&gt;\n\n&gt;&gt;&gt;\n\n&gt;&gt;&gt;&gt; Then, each kind of class can have the annotations that=\r\n are relevant for that tier.\n\n&gt;&gt;&gt;\n\n&gt;&gt;&gt; Usually the classes are identical an=\r\nd you are just including a copy\n\n&gt;&gt;&gt; layer to transfer data between them :)=\r\n\n\n&gt;&gt;&gt;\n\n&gt;&gt;&gt;&gt; Managing workflow, like obeying the hypermedia constraint, is a=\r\n view tier concern (from the point of view of a server side developer).\n\n&gt;&gt;=\r\n&gt;\n\n&gt;&gt;&gt; May be, may be not.. in my case the model contains the sate of the\n\n=\r\n&gt;&gt;&gt; application, so it is a business concern :)\n\n&gt;&gt;&gt;\n\n&gt;&gt;\n\n&gt;&gt; There is prett=\r\ny much always more than one application needing your\n\n&gt;&gt; data, so it&#39;s more=\r\n than one business concern :-). =C2=A0Ideally, you can\n\n&gt;&gt; share the busine=\r\nss domain objects across these applications, but the\n\n&gt;&gt; reality is you&#39;ll =\r\nneed multiple RESTful resource representations that\n\n&gt;&gt; include data from t=\r\nhese business domain objects, for the same reason\n\n&gt;&gt; that you will need mu=\r\nltiple HTML representations (even within the same\n\n&gt;&gt; webapp, how many diff=\r\nerent pages include information from particular\n\n&gt;&gt; domain objects?). =C2=\r\n=A0One size does not fit all.\n\n&gt;&gt;\n\n&gt;&gt;&gt;&gt; That&#39;s a good thing, because a REST=\r\n API is typically not the only way that\n\n&gt;&gt;&gt;&gt; such business model objects g=\r\net manipulated.\n\n&gt;&gt;&gt;\n\n&gt;&gt;&gt; yes, but the effort to manage the hypermedia just=\r\n in time makes the\n\n&gt;&gt;&gt; whole application much slower.. and it is a repetti=\r\nve task.. that is\n\n&gt;&gt;&gt; one of the reasons that motivated me to push the lin=\r\nks in the\n\n&gt;&gt;&gt; database....\n\n&gt;&gt;&gt;\n\n&gt;&gt;&gt;&gt; Self-test time:=C2=A0 are you storin=\r\ng URIs in your database?\n\n&gt;&gt;&gt;\n\n&gt;&gt;&gt; yes. The sate of the application is pers=\r\nistent :) and scales quite\n\n&gt;&gt;&gt; well since I don&#39;t need to recalculate the =\r\nsate on every request..\n\n&gt;&gt;&gt; (ok, memcache can help a bit, but anyway... th=\r\ne hypermedia engine it\n\n&gt;&gt;&gt; is the heavy part of the request - eliminating =\r\nthat I have much faster\n\n&gt;&gt;&gt; services)\n\n&gt;&gt;\n\n&gt;&gt; Scale for one application is=\r\n nice (although I&#39;m waiting for your\n\n&gt;&gt; benchmarks to show that the overhe=\r\nad of calculating URIs dynamically\n\n&gt;&gt; is crushing, given how cheap CPU tim=\r\ne is versus other server side\n\n&gt;&gt; resources). =C2=A0How about scale for mul=\r\ntiple applications?\n\n&gt;&gt;\n\n&gt;&gt; Oh, you only have one? =C2=A0Good for you! =C2=\r\n=A0But that&#39;s not a particularly\n\n&gt;&gt; common problem domain.\n\n&gt;&gt;\n\n&gt;&gt;&gt;\n\n&gt;&gt;&gt;&gt; =\r\na JAX-RS based server application, that &quot;care&quot; is expressed by @Path\n\n&gt;&gt;&gt;\n\n=\r\n&gt;&gt;&gt; I am experimenting with that idea.. in order to use regular\n\n&gt;&gt;&gt; expres=\r\nsions or other DSL facilty to manipulate the final URI\n\n&gt;&gt;&gt; dinamically. . =\r\nperhaps storing just the tail of the URI in the databse\n\n&gt;&gt;&gt; or other forma=\r\nt of information that lead me a chance to produce the\n\n&gt;&gt;&gt; external represe=\r\nntation by demand.. this part is my current\n\n&gt;&gt;&gt; research.... .. (I prefer =\r\nthe &quot;experimentation&quot; word since I am not a\n\n&gt;&gt;&gt; formal researcher.. )\n\n&gt;&gt;&gt;=\r\n\n\n&gt;&gt;\n\n&gt;&gt; Please think about the idea that the same business domain resource=\r\ns\n\n&gt;&gt; may need to be exposed by different applications, using different\n\n&gt;&gt;=\r\n resource representations, and different URI schemes, all at the same\n\n&gt;&gt; t=\r\nime. =C2=A0Or, even within the same application, exposed in different\n\n&gt;&gt; p=\r\nages (web app) or resources (RESTful web service) at the same time.\n\n&gt;&gt;\n\n&gt;&gt;=\r\n Personal history lesson -- when I was first learning web development\n\n&gt;&gt; (=\r\nmid-late 1990s), I figured &quot;why not have a toHTML() method on all my\n\n&gt;&gt; Ja=\r\nva business domain model classes&quot;? =C2=A0It quickly became clear that\n\n&gt;&gt; d=\r\nifferent pages within the same app, as well as different apps, needed\n\n&gt;&gt; d=\r\nifferent HTML representations of the same business objects. =C2=A0Indeed,\n\n=\r\n&gt;&gt; this realization was one of the motivating factors that led to the\n\n&gt;&gt; c=\r\nreation of Struts.\n\n&gt;&gt;\n\n&gt;&gt; The same is true for RESTful resource representa=\r\ntions. =C2=A0There will be\n\n&gt;&gt; more than one representation that requires i=\r\nnformation from a\n\n&gt;&gt; particular business domain model object, as well as m=\r\nore than one\n\n&gt;&gt; application (each with their own resource and representati=\r\non\n\n&gt;&gt; requirements) .\n\n&gt;&gt;\n\n&gt;&gt; In MVC terms: =C2=A0Model classes !=3D View =\r\nclasses.\n\n&gt;&gt;\n\n&gt;&gt;&gt;&gt; @Path annotations -- to change the URIs included in your=\r\n representations.\n\n&gt;&gt;&gt;\n\n&gt;&gt;&gt; yes, but you need to iterate over the collectio=\r\nns and change manually\n\n&gt;&gt;&gt; each URI, what can lead you to manipulate thous=\r\nand of strings before\n\n&gt;&gt;&gt; to respond to the client.. this part scares me..=\r\n. (think about a\n\n&gt;&gt;&gt; collection with 100 elements, each with 20 URIs)\n\n&gt;&gt;\n=\r\n\n&gt;&gt; For amusement, you should go grab a raw Atom or RSS feed =C2=A0from a b=\r\nusy\n\n&gt;&gt; feed source (I use Google Reader for my feed aggregator, but the sa=\r\nme\n\n&gt;&gt; principle applies to anyone who provides feeds) and see how many URI=\r\ns\n\n&gt;&gt; are included. =C2=A0 And, funny thing, none of the apps that *created=\r\n* that\n\n&gt;&gt; content had any idea that *I* would be aggregating their feeds, =\r\nvia\n\n&gt;&gt; Google Reader, for my own use.\n\n&gt;&gt;\n\n&gt;&gt; URIs in RESTful web services=\r\n are a view tier concern, just like CSS style names.\n\n&gt;&gt;\n\n&gt;&gt;&gt;\n\n&gt;&gt;&gt;&gt; In the =\r\nshopping cart use case (no, I don&#39;t care if some people don&#39;t like it\n\n&gt;&gt;&gt;&gt;=\r\n as an example :-), a well designed REST API should *not* define a URI\n\n&gt;&gt;&gt;=\r\n&gt; template like &quot;/checkout&quot; that accepts a POST with a shopping cartURI\n\n&gt;&gt;=\r\n&gt;\n\n&gt;&gt;&gt; That is a basic REST principle .. and it is not related to the way y=\r\nou\n\n&gt;&gt;&gt; store or calculate the URIs...\n\n&gt;&gt;&gt;\n\n&gt;&gt;\n\n&gt;&gt; Unfortunately, *lots* o=\r\nf theoretically &quot;RESTful API&quot; specifications\n\n&gt;&gt; include instructions on ho=\r\nw to calculate the URI for a particular\n\n&gt;&gt; operation (versus telling the c=\r\nlient &quot;get the URI you need from the\n\n&gt;&gt; current representation of the reso=\r\nurce.). =C2=A0And I&#39;m as guilty as anyone\n\n&gt;&gt; else at violating the hyperme=\r\ndia constraint this way, in my earlier\n\n&gt;&gt; work. =C2=A0But, my point in thi=\r\ns particular scenario was, assuming that\n\n&gt;&gt; there was a single URI for &quot;ch=\r\neckout&quot;, for *all* shopping carts, is\n\n&gt;&gt; technically feasible, but not a g=\r\nood idea.\n\n&gt;&gt;\n\n&gt;&gt;&gt;&gt; concerned, the URI itself is an opaque string.\n\n&gt;&gt;&gt;\n\n&gt;&gt;=\r\n&gt; yes......\n\n&gt;&gt;&gt;\n\n&gt;&gt;&gt; thanks for your feedback... interesting. . I will kee=\r\np thinking about\n\n&gt;&gt;&gt; your thoughts....\n\n&gt;&gt;&gt;\n\n&gt;&gt;&gt;\n\n&gt;&gt;&gt; =C2=A0Felipe Ga=C3=\r\n=BAcho\n\n&gt;&gt;&gt;\n\n&gt;&gt;\n\n&gt;&gt; Craig\n\n&gt;&gt;\n\n&gt;\n\n&gt;\n\n&gt;\n\n&gt; --\n\n&gt; ------------ --------- ----=\r\n----- --------- ---\n\n&gt; =C2=A0 Felipe Ga=C3=BAcho\n\n&gt; =C2=A0 10+ Java Program=\r\nmer\n\n&gt; =C2=A0 CEJUG Senior Advisor\n\n&gt;\n\n\n\n-- \n\n------------ --------- ------=\r\n--- --------- ---\n\n   Felipe Ga=C3=BAcho\n\n   10+ Java Programmer\n\n   CEJUG =\r\nSenior Advisor\n\n\n\n    \n     \n\n    \n    \n\n\n \n\n\n\n  \n\n\n\n\n\n\n      \r\n--0-1874641678-1267257606=:36155\r\nContent-Type: text/html; charset=utf-8\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;table cellspacing=3D&quot;0&quot; cellpadding=3D&quot;0&quot; border=3D&quot;0&quot; &gt;&lt;tr&gt;&lt;td valign=3D&quot;=\r\ntop&quot; style=3D&quot;font: inherit;&quot;&gt;Hi Felipe,&lt;br&gt;&lt;br&gt;So, it seems you are really=\r\n having a hard time with this issue of reducing how much code it takes to d=\r\no what you would like.&nbsp; As Craig said, you&#39;re allowing your &quot;view&quot; tie=\r\nr mix in with your &quot;model&quot; tier. Neither should know about the other. There=\r\n is a reason, in my opinion, MVC has stuck around so long and is so well kn=\r\nown and implemented. To break this well sought after development paradigm i=\r\nn order to reduce some code to me is going backwards.&lt;br&gt;&lt;br&gt;Now, there are=\r\n some things you could do that could keep the concerns separated, but at th=\r\ne same time reduce code... but usually getting something for free means giv=\r\ning something up. I&#39;ll fill you in on something I&#39;ve done recently that wor=\r\nks, although I have not tested it, I imagine I may be giving up a little pe=\r\nrformance for a lot of convenience. In the end, there are things I can do t=\r\no\n increase performance... but if I mix my model with my view tiers, and so=\r\nme other business need comes up that requires a different view with the sam=\r\ne model.. I am going to have to write a lot of new code or spend a lot of t=\r\nime rewriting it the way it should be, which is separated.&lt;br&gt;&lt;br&gt;So, what =\r\nI did was to use XSD with JAXB for my &quot;view&quot; model that allows me to automa=\r\ntically thanks to the wonders of JAXB and Jersey&#39;s ability to convert incom=\r\ning xml/json requests into objects, and vice versa, send xml/json in respon=\r\nse from my XSD objects. Now, as you say, and I too have done, my XSD/JAXB c=\r\nlasses have pretty much identical method names and properties. For example,=\r\n my user entity is basically a name, street, city, state zip, area, country=\r\n, phone and email. Likewise, my XSD mimics those fields, and in my case the=\r\ny are basically identical. Enough so that the generated XSD/JAXB object pro=\r\nperties match with the entity bean property names.&lt;br&gt;&lt;br&gt;What I\n decided t=\r\no do was in my ejb session beans, which are stateless using the @Stateless,=\r\n to pass in the JAXB model object as a paramter to the method that would ut=\r\nilize the same entity bean on the back end. I also utilized the apache Bean=\r\nUtils class to copy properties for me. This is where it might cause a sligh=\r\nt performance hiccup..I am not entirely sure how the copy method does what =\r\nit does, but I am guessing with reflection. Still, reflection is much faste=\r\nr now, so I am far less worried about a fraction more time lost given the b=\r\nenefits I get of the separation and cleaner code. And meanwhile, as you can=\r\n see, it&#39;s not that much code. This particular implementation works with al=\r\nl objects, so I can quickly copy/paste this method for whatever my needs ar=\r\ne. I am not having to call tons of user.setXxx(u.getXxx()) methods in code.=\r\n&lt;br&gt;&lt;br&gt;@Stateless&lt;br&gt;public class UserEJBSession{&lt;br&gt;&nbsp; @PersistenceCo=\r\nntext(unitName =3D &quot;myPersistenceUnit&quot;)&lt;br&gt;&nbsp;\n EntityManager em;&lt;br&gt;&lt;br=\r\n&gt;&nbsp; public long createUser(com.myjaxbgeneratedpackage.models.User user)=\r\n {&lt;br&gt;&nbsp;&nbsp;&nbsp; User u =3D new User();&lt;br&gt;&lt;br&gt;&nbsp;&nbsp;&nbsp; t=\r\nry {&lt;br&gt;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; BeanUtils.copyProperties(u, u=\r\nser);&lt;br&gt;&nbsp;&nbsp;&nbsp; } catch (InvocationTargetException ite) {&lt;br&gt;&n=\r\nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ite.printStackTrace(System.out);&lt;br&gt;&nb=\r\nsp;&nbsp;&nbsp; } catch (IllegalAccessException e) {&lt;br&gt;&nbsp;&nbsp;&nbsp; =\r\n&nbsp;&nbsp;&nbsp; e.printStackTrace(System.out);&lt;br&gt;&nbsp;&nbsp;&nbsp; }&lt;b=\r\nr&gt;&lt;br&gt;&nbsp;&nbsp;&nbsp; em.persist(u);&lt;br&gt;&nbsp;&nbsp;&nbsp; em.flush();&lt;b=\r\nr&gt;&nbsp;&nbsp;&nbsp; em.refresh(u);&lt;br&gt;&nbsp;&nbsp;&nbsp; return u.getId().=\r\nlongValue();&lt;br&gt;&nbsp; }&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;The above, to me, is not much code,=\r\n it works, and it allows me to keep my domains and views separated. It allo=\r\nws me to make use of my domains for other purposes. I generally put my JAXB=\r\n/XSD into a separate project, build it and\n put the .jar into this projects=\r\n /lib directory. Thus, it is perfectly fine for my ejb session to &quot;see&quot; the=\r\n JAXB model classes. I am NOT allowing my entity classes to use the JAXB ob=\r\njects. The session bean also does not dictate the &quot;view&quot; going back. The re=\r\nsource class (which would call this createUser method passing in to it the =\r\nJAXB user object that it created when the request came in with the xml or j=\r\nson of a user) gets back the response from this method and then figures out=\r\n what to respond with. If this were a web site, it would forward to some JS=\r\nP page, perhaps setting some request scoped properties that the JSP page co=\r\nuld use for it&#39;s response. As my service is a rest service, it would return=\r\n a response with probably a 201 created and a URI linking to the new create=\r\nd resource. The point being, the service does not see or know about the bac=\r\nk end entity model, and the back end entity model knows nothing of the view=\r\n or the JAXB classes.&lt;br&gt;&lt;br&gt;Another\n thing to think about. Part of JEE6 is=\r\n this new profile setup, where by you can install a subset of the JEE6 spec=\r\n as part of the container. For example, I think the Web Profile provides th=\r\ne servlet/jsp, some ejb but not all of it, no JMS, etc. I don&#39;t know for su=\r\nre, but it may be that if you were to try to deploy your app with your mixe=\r\nd models as you have them now, they may not deploy into this Web Profile co=\r\nntainer. Don&#39;t quote me on this, but it is something to think about.&lt;br&gt;&lt;br=\r\n&gt;Another thing to consider is scalability. Given that the ejb/entity stuff =\r\nis going to be working with the database, it&#39;s likely that it will require =\r\nmore time to work with back end resources. As such, you may need to scale t=\r\nhe server farm (for larger sites) more so in that tier than say, the front =\r\nend rest/jsp/servlet view tier. If you deploy everything completely mixed u=\r\np, that is fine, but often times many of the front end requests can be hand=\r\nled via cache, or non-back end\n needs and responded to quickly. By separati=\r\nng it, you could provide fewer servers to handle the majority of front end =\r\nrequests, while scaling up the back end as needed.&lt;br&gt;&lt;br&gt;HTH&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b=\r\nr&gt;&lt;blockquote style=3D&quot;border-left: 2px solid rgb(16, 16, 255); margin-left=\r\n: 5px; padding-left: 5px;&quot;&gt;&lt;div id=3D&quot;yiv266972162&quot;&gt;&lt;div id=3D&quot;ygrp-mlmsg&quot; =\r\nstyle=3D&quot;&quot;&gt;&lt;div id=3D&quot;ygrp-msg&quot; style=3D&quot;&quot;&gt;&lt;div id=3D&quot;ygrp-text&quot;&gt;&lt;p&gt;just a =\r\nquestion about your domain model sharing:&lt;br&gt;\n&lt;br&gt;\nand what about the code =\r\n?&lt;br&gt;\n&lt;br&gt;\nIf you code the whole engine logic in a code, and you need a sec=\r\nond&lt;br&gt;\napplication to access the same data, you will need to recode the&lt;br=\r\n&gt;\nengine logic again ?&lt;br&gt;\n&lt;br&gt;\nok, we all think about &quot;reuse of components=\r\n&quot;, but so far I&#39;ve seen&lt;br&gt;\nugly hack in the code to simulate the hypermedi=\r\na engine and that&#39;s&lt;br&gt;\nwhat I am trying to do better.. but your points are=\r\n good.. I will&lt;br&gt;\ndigest them and try to incorporate the best I can in my =\r\ndesign&lt;br&gt;\nhere.....&lt;br&gt;\n&lt;br&gt;\n2010/2/26 Felipe Ga=C3=BAcho &lt;&lt;a rel=3D&quot;no=\r\nfollow&quot; ymailto=3D&quot;mailto:fgaucho%40gmail.com&quot; target=3D&quot;_blank&quot; href=3D&quot;/m=\r\nc/compose?to=3Dfgaucho%40gmail.com&quot;&gt;fgaucho@gmail. com&lt;/a&gt;&gt;:&lt;br&gt;\n&gt; ex=\r\ncellent points.. I will consider that...&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; 2010/2/26 Craig =\r\nMcClanahan &lt;&lt;a rel=3D&quot;nofollow&quot; ymailto=3D&quot;mailto:craigmcc%40gmail.com&quot; =\r\ntarget=3D&quot;_blank&quot; href=3D&quot;/mc/compose?to=3Dcraigmcc%40gmail.com&quot;&gt;craigmcc@g=\r\nmail. com&lt;/a&gt;&gt;:&lt;br&gt;\n&gt;&gt; 2010/2/25 Felipe Ga=C3=BAcho &lt;&lt;a rel=3D&quot;=\r\nnofollow&quot; ymailto=3D&quot;mailto:fgaucho%40gmail.com&quot; target=3D&quot;_blank&quot; href=3D&quot;=\r\n/mc/compose?to=3Dfgaucho%40gmail.com&quot;&gt;fgaucho@gmail. com&lt;/a&gt;&gt;:&lt;br&gt;\n&gt;&=\r\ngt;&gt;&gt; You&#39;re missing a key feature of what both Kevin and I said ... =\r\nuse&lt;br&gt;\n&gt;&gt;&gt;&gt; *different* classes for the *resource* domain mode=\r\nl and the *business*&lt;br&gt;\n&gt;&gt;&gt;&gt; domain model.&lt;br&gt;\n&gt;&gt;&gt;&lt;br=\r\n&gt;\n&gt;&gt;&gt; yes, I am aware about that... but the effort to maintain the=\r\n mapping&lt;br&gt;\n&gt;&gt;&gt; between those models generates an extra and unnec=\r\nessary development&lt;br&gt;\n&gt;&gt;&gt; effort ,.... I also noticed some people=\r\n having a third model when the&lt;br&gt;\n&gt;&gt;&gt; data will be rendered in th=\r\ne presentation layer.. (a managedbean or&lt;br&gt;\n&gt;&gt;&gt; other component..=\r\n) ... My experiment is looking to reduce the amount of&lt;br&gt;\n&gt;&gt;&gt; eff=\r\nort required to synchronize all those models, having only one&lt;br&gt;\n&gt;&gt;&=\r\ngt; model.. and it works fine and the performance is better and&lt;br&gt;\n&gt;&gt=\r\n;&gt; maintenance effort much less than the traditional MVC design...&lt;br&gt;\n&=\r\ngt;&gt;&lt;br&gt;\n&gt;&gt; In your business domain objects, do you store the CSS =\r\nstyle class that&lt;br&gt;\n&gt;&gt; should be used to display this object in a br=\r\nowser? &nbsp;Of course not:&lt;br&gt;\n&gt;&gt;&lt;br&gt;\n&gt;&gt; * The *name* of the s=\r\ntyle class is totally up to the designer.&lt;br&gt;\n&gt;&gt;&lt;br&gt;\n&gt;&gt; * Do *y=\r\nou* know any designers that care about backwards compatibility&lt;br&gt;\n&gt;&gt;=\r\n of style names? &nbsp;I don&#39;t either ...&lt;br&gt;\n&gt;&gt; &nbsp;but I don&#39;t ca=\r\nre, as long as the designer updates all the&lt;br&gt;\n&gt;&gt; corresponding HTML=\r\n pages when the style name changes.&lt;br&gt;\n&gt;&gt;&lt;br&gt;\n&gt;&gt; * Style names=\r\n can be changed at any time (for example, when you refresh&lt;br&gt;\n&gt;&gt; &nb=\r\nsp;the look and feel characteristics of your website).&lt;br&gt;\n&gt;&gt;&lt;br&gt;\n&gt=\r\n;&gt; * And, of course, there is normally more than one webapp&lt;br&gt;\n&gt;&gt;=\r\n &nbsp;that needs to be able to render this business domain object,&lt;br&gt;\n&gt=\r\n;&gt; &nbsp;so having only one style name would not be useful.&lt;br&gt;\n&gt;&gt;=\r\n&lt;br&gt;\n&gt;&gt; The same principles apply to designing resource representatio=\r\nns -- we&lt;br&gt;\n&gt;&gt; should assume that there will be more than one repres=\r\nentation that&lt;br&gt;\n&gt;&gt; includes this particular object, and more than o=\r\nne RESTful application&lt;br&gt;\n&gt;&gt; that needs to provide access to it, so =\r\nassuming any *single* approach&lt;br&gt;\n&gt;&gt; is not likely to help all our u=\r\nsers.&lt;br&gt;\n&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt;&gt; T=\r\nhen, each kind of class can have the annotations that are relevant for that=\r\n tier.&lt;br&gt;\n&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt; Usually the classes are identical =\r\nand you are just including a copy&lt;br&gt;\n&gt;&gt;&gt; layer to transfer data b=\r\netween them :)&lt;br&gt;\n&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt;&gt; Managing workflow, lik=\r\ne obeying the hypermedia constraint, is a view tier concern (from the point=\r\n of view of a server side developer).&lt;br&gt;\n&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt; May=\r\n be, may be not.. in my case the model contains the sate of the&lt;br&gt;\n&gt;&gt=\r\n;&gt; application, so it is a business concern :)&lt;br&gt;\n&gt;&gt;&gt;&lt;br&gt;\n&gt;=\r\n&gt;&lt;br&gt;\n&gt;&gt; There is pretty much always more than one application nee=\r\nding your&lt;br&gt;\n&gt;&gt; data, so it&#39;s more than one business concern :-). &n=\r\nbsp;Ideally, you can&lt;br&gt;\n&gt;&gt; share the business domain objects across =\r\nthese applications, but the&lt;br&gt;\n&gt;&gt; reality is you&#39;ll need multiple RE=\r\nSTful resource representations that&lt;br&gt;\n&gt;&gt; include data from these bu=\r\nsiness domain objects, for the same reason&lt;br&gt;\n&gt;&gt; that you will need =\r\nmultiple HTML representations (even within the same&lt;br&gt;\n&gt;&gt; webapp, ho=\r\nw many different pages include information from particular&lt;br&gt;\n&gt;&gt; dom=\r\nain objects?). &nbsp;One size does not fit all.&lt;br&gt;\n&gt;&gt;&lt;br&gt;\n&gt;&gt;&g=\r\nt;&gt; That&#39;s a good thing, because a REST API is typically not the only wa=\r\ny that&lt;br&gt;\n&gt;&gt;&gt;&gt; such business model objects get manipulated.&lt;br=\r\n&gt;\n&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt; yes, but the effort to manage the hypermedi=\r\na just in time makes the&lt;br&gt;\n&gt;&gt;&gt; whole application much slower.. a=\r\nnd it is a repettive task.. that is&lt;br&gt;\n&gt;&gt;&gt; one of the reasons tha=\r\nt motivated me to push the links in the&lt;br&gt;\n&gt;&gt;&gt; database....&lt;br&gt;\n&=\r\ngt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt;&gt; Self-test time:&nbsp; are you storing URIs=\r\n in your database?&lt;br&gt;\n&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt; yes. The sate of the a=\r\npplication is persistent :) and scales quite&lt;br&gt;\n&gt;&gt;&gt; well since I =\r\ndon&#39;t need to recalculate the sate on every request..&lt;br&gt;\n&gt;&gt;&gt; (ok,=\r\n memcache can help a bit, but anyway... the hypermedia engine it&lt;br&gt;\n&gt;&g=\r\nt;&gt; is the heavy part of the request - eliminating that I have much fast=\r\ner&lt;br&gt;\n&gt;&gt;&gt; services)&lt;br&gt;\n&gt;&gt;&lt;br&gt;\n&gt;&gt; Scale for one appli=\r\ncation is nice (although I&#39;m waiting for your&lt;br&gt;\n&gt;&gt; benchmarks to sh=\r\now that the overhead of calculating URIs dynamically&lt;br&gt;\n&gt;&gt; is crushi=\r\nng, given how cheap CPU time is versus other server side&lt;br&gt;\n&gt;&gt; resou=\r\nrces). &nbsp;How about scale for multiple applications?&lt;br&gt;\n&gt;&gt;&lt;br&gt;\n&g=\r\nt;&gt; Oh, you only have one? &nbsp;Good for you! &nbsp;But that&#39;s not a pa=\r\nrticularly&lt;br&gt;\n&gt;&gt; common problem domain.&lt;br&gt;\n&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt=\r\n;&lt;br&gt;\n&gt;&gt;&gt;&gt; a JAX-RS based server application, that &quot;care&quot; is ex=\r\npressed by @Path&lt;br&gt;\n&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt; I am experimenting with =\r\nthat idea.. in order to use regular&lt;br&gt;\n&gt;&gt;&gt; expressions or other D=\r\nSL facilty to manipulate the final URI&lt;br&gt;\n&gt;&gt;&gt; dinamically. . perh=\r\naps storing just the tail of the URI in the databse&lt;br&gt;\n&gt;&gt;&gt; or oth=\r\ner format of information that lead me a chance to produce the&lt;br&gt;\n&gt;&gt;&=\r\ngt; external representation by demand.. this part is my current&lt;br&gt;\n&gt;&gt=\r\n;&gt; research.... .. (I prefer the &quot;experimentation&quot; word since I am not a=\r\n&lt;br&gt;\n&gt;&gt;&gt; formal researcher.. )&lt;br&gt;\n&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&lt;br&gt;\n&=\r\ngt;&gt; Please think about the idea that the same business domain resources=\r\n&lt;br&gt;\n&gt;&gt; may need to be exposed by different applications, using diffe=\r\nrent&lt;br&gt;\n&gt;&gt; resource representations, and different URI schemes, all =\r\nat the same&lt;br&gt;\n&gt;&gt; time. &nbsp;Or, even within the same application, =\r\nexposed in different&lt;br&gt;\n&gt;&gt; pages (web app) or resources (RESTful web=\r\n service) at the same time.&lt;br&gt;\n&gt;&gt;&lt;br&gt;\n&gt;&gt; Personal history less=\r\non -- when I was first learning web development&lt;br&gt;\n&gt;&gt; (mid-late 1990=\r\ns), I figured &quot;why not have a toHTML() method on all my&lt;br&gt;\n&gt;&gt; Java b=\r\nusiness domain model classes&quot;? &nbsp;It quickly became clear that&lt;br&gt;\n&gt;&=\r\ngt; different pages within the same app, as well as different apps, needed&lt;=\r\nbr&gt;\n&gt;&gt; different HTML representations of the same business objects. &=\r\nnbsp;Indeed,&lt;br&gt;\n&gt;&gt; this realization was one of the motivating factor=\r\ns that led to the&lt;br&gt;\n&gt;&gt; creation of Struts.&lt;br&gt;\n&gt;&gt;&lt;br&gt;\n&gt;&gt=\r\n; The same is true for RESTful resource representations. &nbsp;There will b=\r\ne&lt;br&gt;\n&gt;&gt; more than one representation that requires information from =\r\na&lt;br&gt;\n&gt;&gt; particular business domain model object, as well as more tha=\r\nn one&lt;br&gt;\n&gt;&gt; application (each with their own resource and representa=\r\ntion&lt;br&gt;\n&gt;&gt; requirements) .&lt;br&gt;\n&gt;&gt;&lt;br&gt;\n&gt;&gt; In MVC terms: &=\r\nnbsp;Model classes !=3D View classes.&lt;br&gt;\n&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt;&gt; @Pa=\r\nth annotations -- to change the URIs included in your representations.&lt;br&gt;\n=\r\n&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt; yes, but you need to iterate over the collect=\r\nions and change manually&lt;br&gt;\n&gt;&gt;&gt; each URI, what can lead you to ma=\r\nnipulate thousand of strings before&lt;br&gt;\n&gt;&gt;&gt; to respond to the clie=\r\nnt.. this part scares me... (think about a&lt;br&gt;\n&gt;&gt;&gt; collection with=\r\n 100 elements, each with 20 URIs)&lt;br&gt;\n&gt;&gt;&lt;br&gt;\n&gt;&gt; For amusement, =\r\nyou should go grab a raw Atom or RSS feed &nbsp;from a busy&lt;br&gt;\n&gt;&gt; fe=\r\ned source (I use Google Reader for my feed aggregator, but the same&lt;br&gt;\n&gt=\r\n;&gt; principle applies to anyone who provides feeds) and see how many URIs=\r\n&lt;br&gt;\n&gt;&gt; are included. &nbsp; And, funny thing, none of the apps that =\r\n*created* that&lt;br&gt;\n&gt;&gt; content had any idea that *I* would be aggregat=\r\ning their feeds, via&lt;br&gt;\n&gt;&gt; Google Reader, for my own use.&lt;br&gt;\n&gt;&g=\r\nt;&lt;br&gt;\n&gt;&gt; URIs in RESTful web services are a view tier concern, just =\r\nlike CSS style names.&lt;br&gt;\n&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt;&gt; In=\r\n the shopping cart use case (no, I don&#39;t care if some people don&#39;t like it&lt;=\r\nbr&gt;\n&gt;&gt;&gt;&gt; as an example :-), a well designed REST API should *no=\r\nt* define a URI&lt;br&gt;\n&gt;&gt;&gt;&gt; template like &quot;/checkout&quot; that accepts=\r\n a POST with a shopping cartURI&lt;br&gt;\n&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt; That is a=\r\n basic REST principle .. and it is not related to the way you&lt;br&gt;\n&gt;&gt;&=\r\ngt; store or calculate the URIs...&lt;br&gt;\n&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&lt;br&gt;\n&gt;&g=\r\nt; Unfortunately, *lots* of theoretically &quot;RESTful API&quot; specifications&lt;br&gt;\n=\r\n&gt;&gt; include instructions on how to calculate the URI for a particular&lt;=\r\nbr&gt;\n&gt;&gt; operation (versus telling the client &quot;get the URI you need fro=\r\nm the&lt;br&gt;\n&gt;&gt; current representation of the resource.). &nbsp;And I&#39;m =\r\nas guilty as anyone&lt;br&gt;\n&gt;&gt; else at violating the hypermedia constrain=\r\nt this way, in my earlier&lt;br&gt;\n&gt;&gt; work. &nbsp;But, my point in this pa=\r\nrticular scenario was, assuming that&lt;br&gt;\n&gt;&gt; there was a single URI fo=\r\nr &quot;checkout&quot;, for *all* shopping carts, is&lt;br&gt;\n&gt;&gt; technically feasibl=\r\ne, but not a good idea.&lt;br&gt;\n&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt;&gt; concerned, the UR=\r\nI itself is an opaque string.&lt;br&gt;\n&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt; yes......&lt;b=\r\nr&gt;\n&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt; thanks for your feedback... interesting. .=\r\n I will keep thinking about&lt;br&gt;\n&gt;&gt;&gt; your thoughts....&lt;br&gt;\n&gt;&gt;=\r\n&gt;&lt;br&gt;\n&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt; &nbsp;Felipe Ga=C3=BAcho&lt;br&gt;\n&gt;&gt=\r\n;&gt;&lt;br&gt;\n&gt;&gt;&lt;br&gt;\n&gt;&gt; Craig&lt;br&gt;\n&gt;&gt;&lt;br&gt;\n&gt;&lt;br&gt;\n&gt;&lt;br&gt;\n&g=\r\nt;&lt;br&gt;\n&gt; --&lt;br&gt;\n&gt; ------------ --------- --------- --------- ---&lt;br&gt;\n=\r\n&gt; &nbsp; Felipe Ga=C3=BAcho&lt;br&gt;\n&gt; &nbsp; 10+ Java Programmer&lt;br&gt;\n&gt;=\r\n &nbsp; CEJUG Senior Advisor&lt;br&gt;\n&gt;&lt;br&gt;\n&lt;br&gt;\n-- &lt;br&gt;\n------------ -------=\r\n-- --------- --------- ---&lt;br&gt;\n   Felipe Ga=C3=BAcho&lt;br&gt;\n   10+ Java Progra=\r\nmmer&lt;br&gt;\n   CEJUG Senior Advisor&lt;br&gt;\n&lt;/p&gt;\n\n    &lt;/div&gt;\n     \n\n\n\n \n\n\n&lt;/div&gt;&lt;/=\r\nblockquote&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;br&gt;\n\n      \r\n--0-1874641678-1267257606=:36155--\r\n\n"}}
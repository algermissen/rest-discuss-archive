{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":198897688,"authorName":"Dong Liu","from":"Dong Liu &lt;edongliu@...&gt;","profile":"edonliu","replyTo":"SENDER","senderId":"nNww9QToAxFt7P6O7vm77khS2bsgKhk7tzUjFavIbwgeSa_daYm6JYDPYSl-ZEGbsKNSCB2gTd6_rF_WNXPfnOi0Z9c","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Why HATEOAS?","postDate":"1238600780","msgId":12368,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGU3OGJkYmMwMDkwNDAxMDg0Nm01MGVjMzc4OGcxOTE5MjM0ZjdkZmVkYjdhQG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PGY4YjM5YWNlMDkwMzMxMTc1OWwzY2JjZGFmNWoyZDkwZWU5NzJhMjJmNGFiQG1haWwuZ21haWwuY29tPg==","referencesHeader":"PDU1YzYwZTM3MDkwMzMxMTcwMXg0YWRhYzAyZG8zNjliNWQ4NjE3MDBmNmU2QG1haWwuZ21haWwuY29tPgkgPGY4YjM5YWNlMDkwMzMxMTc1OWwzY2JjZGFmNWoyZDkwZWU5NzJhMjJmNGFiQG1haWwuZ21haWwuY29tPg=="},"prevInTopic":12367,"nextInTopic":12369,"prevInTime":12367,"nextInTime":12369,"topicId":12357,"numMessagesInTopic":27,"msgSnippet":"Good summary. A perspective helped me understand HATEOAS is to think a system as a combination of multiple state machines. These state machines are distributed","rawEmail":"Return-Path: &lt;edongliu@...&gt;\r\nX-Sender: edongliu@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 93235 invoked from network); 1 Apr 2009 15:46:31 -0000\r\nX-Received: from unknown (98.137.34.44)\n  by m3.grp.re1.yahoo.com with QMQP; 1 Apr 2009 15:46:31 -0000\r\nX-Received: from unknown (HELO wa-out-1112.google.com) (209.85.146.176)\n  by mta1.grp.sp2.yahoo.com with SMTP; 1 Apr 2009 15:46:31 -0000\r\nX-Received: by wa-out-1112.google.com with SMTP id m34so51675wag.25\n        for &lt;rest-discuss@yahoogroups.com&gt;; Wed, 01 Apr 2009 08:46:20 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.114.190.18 with SMTP id n18mr5307513waf.101.1238600780628; \n\tWed, 01 Apr 2009 08:46:20 -0700 (PDT)\r\nIn-Reply-To: &lt;f8b39ace0903311759l3cbcdaf5j2d90ee972a22f4ab@...&gt;\r\nReferences: &lt;55c60e370903311701x4adac02do369b5d861700f6e6@...&gt;\n\t &lt;f8b39ace0903311759l3cbcdaf5j2d90ee972a22f4ab@...&gt;\r\nDate: Wed, 1 Apr 2009 09:46:20 -0600\r\nMessage-ID: &lt;e78bdbc00904010846m50ec3788g1919234f7dfedb7a@...&gt;\r\nTo: Rest List &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Dong Liu &lt;edongliu@...&gt;\r\nSubject: Re: [rest-discuss] Why HATEOAS?\r\nX-Yahoo-Group-Post: member; u=198897688; y=uQJlWWyht6zsmNT4ZRSCQaagzVv3dAYqjKduLBQ6RrxIXQ\r\nX-Yahoo-Profile: edonliu\r\n\r\nGood summary.\n\nA perspective helped me understand HATEOAS is to think a sys=\r\ntem as a\ncombination of multiple state machines. These state machines are\nd=\r\nistributed and flexible. Hypermedia is the representation of such\ndistribut=\r\ned state machines. Hypermedia makes asynchronous\nconversations among multip=\r\nle parties possible and easy.\n\nCheers,\n\nDong\n\nOn Tue, Mar 31, 2009 at 6:59 =\r\nPM, Craig McClanahan &lt;craigmcc@...&gt; wrote:\n&gt; On Tue, Mar 31, 2009 at =\r\n5:01 PM, Solomon Duskis &lt;sduskis@...&gt; wrote:\n&gt;\n&gt;&gt; [snip]\n&gt;\n&gt;&gt; Assumin=\r\ng that the practical barriers of entry are removed, what practical\n&gt;&gt; benef=\r\nits will we see?\n&gt;&gt;\n&gt;\n&gt; I know exactly where you are coming from with these=\r\n questions ... I\n&gt; felt the same way until recently. I&#39;ve designed several =\r\nREST APIs\n&gt; over the last couple of years, but up until the most recent one=\r\n, I\n&gt; designed and documented them in the &quot;typical&quot; way, describing the URI=\r\n\n&gt; structure of the application and letting the client figure out what to\n&gt;=\r\n send when. My most recent effort is contributing to the design of the\n&gt; RE=\r\nST architecture for the Sun Cloud API[1] to control virtual\n&gt; machines and =\r\nso on. In addition, I&#39;m very focused on writing client\n&gt; language bindings =\r\nfor this API in multiple languages (Ruby, Python,\n&gt; Java) ... so I get a fi=\r\nrst hand feel for programming to this API at a\n&gt; very low level.\n&gt;\n&gt; We sta=\r\nrted from the presumption that the service would publish only\n&gt; *one* well-=\r\nknown URI (returning a &quot;cloud&quot; representation containing\n&gt; representations =\r\nfor, and/or URI links to representations for, all the\n&gt; cloud resources tha=\r\nt are accessible to the calling user). Every other\n&gt; URI in the entire syst=\r\nem (including all those that do state changes)\n&gt; are discovered by examinin=\r\ng these representations. Even in the early\n&gt; days, I can see some significa=\r\nnt, practical, short term benefits we\n&gt; have gained from taking this approa=\r\nch:\n&gt;\n&gt; * REDUCED CLIENT CODING ERRORS. Looking back at all the REST client=\r\n\n&gt; side interfaces\n&gt; that I, or people I work with, have built, about 90% o=\r\nf the bugs\n&gt; have been in the construction\n&gt; of the right URIs for the serv=\r\ner. Typical mistakes are leaving out\n&gt; path segments, getting them\n&gt; in the=\r\n wrong order, or forgetting to URL encode things. All this\n&gt; goes away when=\r\n the server\n&gt; hands you exactly the right URI to use for every circumstance=\r\n.\n&gt;\n&gt; * REDUCED INVALID STATE TRANSITION CALLS. When the client decides\n&gt; w=\r\nhich URI to call and\n&gt; when, they run the risk of attempting to request sta=\r\nte transitions\n&gt; that are not valid for the current\n&gt; state of the server s=\r\nide resource. An example from my problem\n&gt; domain ... it&#39;s not allowed to\n&gt;=\r\n &quot;start&quot; a virtual machine (VM) until you have &quot;deployed&quot; it. The\n&gt; server =\r\nknows about URIs to\n&gt; initiate each of the state changes (via a POST), but =\r\nthe\n&gt; representation of the VM lists only the\n&gt; URIs for state transitions =\r\nthat are valid from the current state.\n&gt; This makes it extremely easy\n&gt; for=\r\n the client to understand that trying to start a VM that hasn&#39;t\n&gt; been depl=\r\noyed yet is not legal,\n&gt; because there will be no corresponding URI in the =\r\nVM representation.\n&gt;\n&gt; * FINE GRAINED EVOLUTION WITHOUT (NECESSARILY) BREAK=\r\nING OLD CLIENTS.\n&gt; At any given time, the client of any REST API is going t=\r\no be\n&gt; programmed with *some* assumptions\n&gt; about what the system can do. B=\r\nut, if you document a restriction to\n&gt; &quot;pay attention to only those\n&gt; aspec=\r\nts of the representation that you know about&quot;, plus a server\n&gt; side discipl=\r\nine to add things later\n&gt; that don&#39;t disrupt previous behavior, you can evo=\r\nlve APIs fairly\n&gt; quickly without breaking all clients,\n&gt; or having to supp=\r\nort multiple versions of the API simultaneously on\n&gt; your server. You don&#39;t=\r\n have to\n&gt; wait years for serendipity benefits :-). Especially compared to\n=\r\n&gt; something like SOAP where the\n&gt; syntax of your representations is version=\r\ned (in the WSDL), so you\n&gt; have to mess with the clients\n&gt; on every single =\r\nchange.\n&gt;\n&gt; Having drunk the HATEOAS koolaid now, I would have a really har=\r\nd time\n&gt; going back :-).\n&gt;\n&gt; Craig McClanahan\n&gt;\n&gt; [1] http://kenai.com/proj=\r\nects/suncloudapis/pages/Home\n&gt; \n\n\n\n-- \nhttp://dongnotes.blogspot.com/\n\n"}}
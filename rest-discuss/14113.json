{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":292691042,"authorName":"Steve Bjorg","from":"Steve Bjorg &lt;steveb@...&gt;","profile":"steve_bjorg","replyTo":"SENDER","senderId":"p4a0FbHCsxwLNNR48-gdqEOiFkK0hiV0VJp3buGSqw5tx2-YTH7EV7NFwJWJC-yUo7prMqiiDUtjYGFGL8qMDlw1ZUwQBInAJQ","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] The &quot;purist&quot; C# REST client?","postDate":"1260404419","msgId":14113,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDdDMTEwMjQzLTlCQkEtNEZENy05OTM5LTNFM0ZCRDZEOUQzMUBtaW5kdG91Y2guY29tPg==","inReplyToHeader":"PGI1NDhkZjY1MDkxMjA5MTQ1OGwyNTQ4Y2UyZG9hNGZiYzJlYWZmNmU5Y2M1QG1haWwuZ21haWwuY29tPg==","referencesHeader":"PEI1QUM5MEYyODQ5MzQ5OEI5MEU2MjAzRERFMkE0RTY1QEpyblBDPiA8YjU0OGRmNjUwOTEyMDkxNDU4bDI1NDhjZTJkb2E0ZmJjMmVhZmY2ZTljYzVAbWFpbC5nbWFpbC5jb20+"},"prevInTopic":14112,"nextInTopic":14114,"prevInTime":14112,"nextInTime":14114,"topicId":14110,"numMessagesInTopic":12,"msgSnippet":"Mike, It sounds like your library is quite similar to the one we developed for our application as well.  MindTouch Dream [1] is a .NET framework for building","rawEmail":"Return-Path: &lt;steveb@...&gt;\r\nX-Sender: steveb@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 12202 invoked from network); 10 Dec 2009 00:20:22 -0000\r\nX-Received: from unknown (66.196.94.106)\n  by m3.grp.sp2.yahoo.com with QMQP; 10 Dec 2009 00:20:22 -0000\r\nX-Received: from unknown (HELO smtp-2.01.com) (38.102.63.181)\n  by mta2.grp.re1.yahoo.com with SMTP; 10 Dec 2009 00:20:21 -0000\r\nX-Received: from localhost (localhost.localdomain [127.0.0.1])\n\tby smtp-2.01.com (Postfix) with ESMTP id 7A8F61AD493;\n\tWed,  9 Dec 2009 18:20:21 -0600 (CST)\r\nX-Received: from smtp-2.01.com ([127.0.0.1])\n\tby localhost (smtp-2.01.com [127.0.0.1]) (amavisd-new, port 10024)\n\twith ESMTP id It5k62Oa+ceE; Wed,  9 Dec 2009 18:20:21 -0600 (CST)\r\nX-Received: by smtp-2.01.com (Postfix, from userid 99)\n\tid 5403A1AD439; Wed,  9 Dec 2009 18:20:21 -0600 (CST)\r\nX-Received: from [192.168.1.100] (ip68-111-253-2.sd.sd.cox.net [68.111.253.2])\n\tby smtp-2.01.com (Postfix) with ESMTP id 72BE21AD4BB;\n\tWed,  9 Dec 2009 18:20:20 -0600 (CST)\r\nMime-Version: 1.0 (Apple Message framework v1077)\r\nContent-Type: multipart/alternative; boundary=Apple-Mail-24-776861516\r\nIn-Reply-To: &lt;b548df650912091458l2548ce2doa4fbc2eaff6e9cc5@...&gt;\r\nDate: Wed, 9 Dec 2009 16:20:19 -0800\r\nCc: =?iso-8859-1?Q?J=F8rn_Wildt?= &lt;jw@...&gt;,\n rest-discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nMessage-Id: &lt;7C110243-9BBA-4FD7-9939-3E3FBD6D9D31@...&gt;\r\nReferences: &lt;B5AC90F28493498B90E6203DDE2A4E65@JrnPC&gt; &lt;b548df650912091458l2548ce2doa4fbc2eaff6e9cc5@...&gt;\r\nTo: mike amundsen &lt;mamund@...&gt;\r\nX-Mailer: Apple Mail (2.1077)\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Steve Bjorg &lt;steveb@...&gt;\r\nSubject: Re: [rest-discuss] The &quot;purist&quot; C# REST client?\r\nX-Yahoo-Group-Post: member; u=292691042; y=Iz80sqBFQDGATAwwhAnese2mjZvLMegavvyO2LRFb9TTNfDz_yM\r\nX-Yahoo-Profile: steve_bjorg\r\n\r\n\r\n--Apple-Mail-24-776861516\r\nContent-Transfer-Encoding: quoted-printable\r\nContent-Type: text/plain;\n\tcharset=windows-1252\r\n\r\nMike,\n\nIt sounds like your library is quite similar to the one we developed=\r\n for our application as well.  MindTouch Dream [1] is a .NET framework for =\r\nbuilding portable web-services that can run as a standalone process, window=\r\ns service, or natively under IIS.  It also runs under Linux using Mono.  Dr=\r\neam is used by quite a few sites including Mozilla [2], Novell [3], and Was=\r\nhington Post [4].  The license is Apache 2.0 for easy reuse.\n\nIt&#39;s quite fu=\r\nn to build an entire application with a RESTful interface. :)\n\n- Steve\n\n[1]=\r\n http://developer.mindtouch.com/Dream\n[2] https://developer.mozilla.org/\n[3=\r\n] http://monodevelop.com/\n[4] http://whorunsgov.com/\n\n--------------\nSteve =\r\nG. Bjorg\nhttp://mindtouch.com\nhttp://twitter.com/bjorg\nirc.freenode.net #mi=\r\nndtouch\n\nOn Dec 9, 2009, at 2:58 PM, mike amundsen wrote:\n\n&gt; \n&gt; J=F8rn:\n&gt; \n=\r\n&gt; This line stands out first: &quot;I have avoided Atom Links since, in my exper=\r\nience, these don&#39;t serialize well in the C# standard XML serializer.&quot;\n&gt; My =\r\nadvice is to be wary of serializers when coding for HTTP. There are so many=\r\n variances with incoming responses I think you&#39;ll find it a real task to bu=\r\nild apps based on  successfully converting incoming response bodies into co=\r\nde-able objects. Using serializers also tends to lead programmers to tight-=\r\nbinding between the code and the HTTP response body. This means changes in =\r\nthe body may blow the serializer code. This is especially true when working=\r\n with &quot;generic&quot; media-types such as XML and JSON, etc. since they have very=\r\n little semantic value built into them.\n&gt; \n&gt; That leads me to another bit o=\r\nf advice I&#39;ll offer: think about link semantics from the very start when cr=\r\neating your library. The Web browser client works because the link semantic=\r\ns of the HTML media-type are well-defined (and pretty narrow). There are a =\r\nlimited number of link elements. Some are in-doc links (IMG, LINK, SCRIPT, =\r\netc.), some are navigational links (A, FORM). All, except FORM, are limited=\r\n to using the GET method. It&#39;s the semantic model of HTML that allows brows=\r\ners to properly handle HTTP responses from previously unknown locations and=\r\n still provide full functionality - even a decade after the semantics where=\r\n defined. I suspect you&#39;ll find that building a client to properly locate, =\r\nidentify, and understand the link semantics of a single media type (applica=\r\ntion/vnd.movies.movie+xml) is challenging by itself. Building one that hand=\r\nles multiple media-types just adds to the fun&lt;g&gt;.\n&gt; \n&gt; I also encourage you=\r\n to treat HTTP control data (headers) as top-level programming objects in y=\r\nour library. Allowing programmers to decorate requests with control data (c=\r\nontent-encoding, media-type, authorization, cache-control, etc.) and have d=\r\nirect access to the control data on responses will improve the flexibility =\r\nof any client/server built w/ your library.\n&gt; \n&gt; In the big picture, I pref=\r\ner looking at HTTP programming from the stand-point of &quot;resource programmin=\r\ng.&quot; I look for a code library that lets me define a resource, associate or =\r\nor more URIs with that resource, handle multiple representations of the res=\r\nource (for both requests and response bodies), and properly decorate reques=\r\nts and responses w/ control data. I also want to make sure it handles mime-=\r\ntypes properly (conneg included), conditional requests (GET and PUT), and s=\r\nupports flexible authentication models. \n&gt; \n&gt; FWIW, I started work on a RES=\r\nT-ful HTTP C# framework a while back [1]. It&#39;s been dormant for quite some =\r\ntime as the current version works well for me, but there are lots of places=\r\n it needs work. I&#39;ve also built an HTTP utilities library [2] with most all=\r\n the bits I need for building REST-ful HTTP apps. It&#39;s smaller and lighter =\r\nthan my &#39;framework&#39; library. I mention these as some of the code there migh=\r\nt be helpful and/or act as a cautionary tale as you work on your own projec=\r\nts.\n&gt; \n&gt; mca\n&gt; http://amundsen.com/blog/\n&gt; \n&gt; [1] http://exyus.com\n&gt; [2] ht=\r\ntp://code.google.com/p/mikeamundsen/source/browse/#svn/trunk/Amundsen.Utili=\r\nties\n&gt; \n&gt; \n&gt; \n&gt; On Wed, Dec 9, 2009 at 17:00, J=F8rn Wildt &lt;jw@fjeldgruppen=\r\n.dk&gt; wrote:\n&gt; \n&gt; \n&gt; There has been a lot of discussion about the right way =\r\nto implement a REST service, but less focus on how you would actually code =\r\na client. I have been looking at RESTFulie[1], Subbu Alamarju[2], and the S=\r\ntarbucks[3] example, and would like to discuss a similar typed approach in =\r\nC#.\n&gt;  \n&gt; I am experimenting with an actual implementation and would like s=\r\nome feedback before getting too far :-)\n&gt;  \n&gt; Thanks, J=F8rn\n&gt;  \n&gt;  \n&gt; [1] =\r\nhttp://github.com/caelum/restfulie\n&gt; [2] http://www.infoq.com/articles/subb=\r\nu-allamaraju-rest\n&gt; [3] http://www.infoq.com/articles/webber-rest-workflow\n=\r\n&gt;  \n&gt;  \n&gt; Service example documentation\n&gt; In order to discuss a REST client=\r\n we need a service example. My first use case is a movie shop where we can =\r\nsearch for movies in a specific category. To do so the shop has published a=\r\n single search service URL template: http://movies.org/movies?category=3D{c=\r\nategory}.\n&gt;  \n&gt; The shop also publishes three ressource mime types:\n&gt;  \n&gt; /=\r\n/ Example &quot;application/vnd.movies.movie+xml&quot;\n&gt; &lt;Movie&gt;\n&gt;   &lt;Self href=3D&quot;ht=\r\ntp://movies.org/movies/91&quot;/&gt;\n&gt;   &lt;Title&gt;Strange Dawn&lt;/Title&gt;\n&gt;   &lt;Category&gt;=\r\nThriller&lt;/Category&gt;\n&gt;   &lt;Director href=3D&quot;http://movies.org/persons/47&quot;/&gt;\n&gt;=\r\n &lt;/Movie&gt;\n&gt;  \n&gt; // Example &quot;application/vnd.movies.movie-collection+xml&quot;\n&gt; =\r\n&lt;Movies&gt;\n&gt;   &lt;Self href=3D&quot;http://movies.org/movies?category=3DThriller&quot;/&gt;\n=\r\n&gt;   &lt;Movie&gt;\n&gt;     &lt;Title&gt;Strange Dawn&lt;/Title&gt;\n&gt;     &lt;Self href=3D&quot;http://mo=\r\nvies.org/movies/91&quot;/&gt;\n&gt;   &lt;/Movie&gt;\n&gt;   &lt;Movie&gt;...&lt;/Movie&gt;\n&gt;   &lt;Movie&gt;...&lt;/M=\r\novie&gt;\n&gt; &lt;/Movies&gt;\n&gt;  \n&gt; // Example &quot;application/vnd.movies.person+xml&quot;\n&gt; &lt;P=\r\nerson&gt;\n&gt;   &lt;Self href=3D&quot;http://movies.org/persons/47&quot;/&gt;\n&gt;   &lt;Name&gt;Richard =\r\nStrangelove&lt;/Name&gt;\n&gt;   &lt;Photo href=3D&quot;http://facebook.com/photos/hh31y1&quot;/&gt;\n=\r\n&gt; &lt;/Person&gt;\n&gt;  \n&gt; Comments\n&gt;  \n&gt; - I have avoided Atom Links since, in my e=\r\nxperience, these don&#39;t serialize well in the C# standard XML serializer. Yo=\r\nu could although create your own serializer, so this is not an important re=\r\nstriction.\n&gt;  \n&gt; - Notice how the person type has external references :-)\n&gt;=\r\n  \n&gt;  \n&gt; Code example - Searching\n&gt; The cleanest client usage I can come up=\r\n with is:\n&gt;  \n&gt;   // A link (template). This should be fetched from a confi=\r\nguration file.\n&gt;   Link MoviesSearchLink =3D new Link(&quot;http://movies.org/mo=\r\nvies?category=3D{category}&quot;);\n&gt;  \n&gt;   // Anonymous class with search parame=\r\nters. Reflection is used to extract values.\n&gt;   // This is about the simple=\r\nst way to write a &quot;fixed hashmap&quot; in C#\n&gt;   var movieSearchParameter =3D ne=\r\nw { category =3D &quot;Thriller&quot; };\n&gt;  \n&gt;   // Get ressource stored at the link =\r\nendpoint\n&gt;   MovieCollection movies =3D MoviesSearchLink.Get&lt;MovieCollectio=\r\nn&gt;(movieSearchParameter);\n&gt;  \n&gt;   // Iterate over all movies and print titl=\r\ne\n&gt;   foreach (Movie movie in movies)\n&gt;     Console.WriteLine(&quot;Title: &quot; + m=\r\novie.Title);\n&gt; Comments:\n&gt;  \n&gt; - A Link is untyped. We do not know what lie=\r\ns at the end of it.\n&gt;  \n&gt; - A link knows how to merge parameters into URL t=\r\nemplates.\n&gt;  \n&gt; - The result of GETing a link is typed. The actual type is =\r\ndefined by the returned mime type.\n&gt;  \n&gt; - In order to do something usefull=\r\n with the search we must assume that it returns a MovieCollection. Hence th=\r\ne generic type specifier in the Get&lt;T&gt;() method. This is apriori informatio=\r\nn which I cannot see how to code without.\n&gt;  \n&gt;  \n&gt; Parsing ressources\n&gt; On=\r\ne piece of magic is how Get&lt;MovieCollection&gt;(params) knows how to convert t=\r\nhe bytes returned from the endpoint to a MovieCollection. For this we creat=\r\ne a MimeTypeRegistry:\n&gt;  \n&gt;   MimeTypeRegistry.Register&lt;MovieCollection, Mo=\r\nvieCollectionBuilder&gt;(&quot;application/vnd.movies.movie-collection&quot;);\n&gt;  \n&gt; whi=\r\nch is equal to:\n&gt;  \n&gt;   MimeTypeRegistry.Register(typeof(MovieCollection), =\r\ntypeof(MovieCollectionBuilder), &quot;application/vnd.movies.movie-collection&quot;);=\r\n\n&gt;  \n&gt; This means: when ever we must parse a specific mime type, we look up=\r\n a builder in the registry and uses this to parse the returned ressource re=\r\npresentation.\n&gt;  \n&gt; The typed Get&lt;MovieCollection&gt;(params) method GETs the =\r\nressource data, instantiates the corresponding builder, verifies that the b=\r\nuilt object type matches the requested and returns the built object.\n&gt;  \n&gt; =\r\nComments:\n&gt;  \n&gt; - This is static typing which RESTafarians seems to shy awa=\r\ny from. But the type depends on the returned ressource, _not_ the URL. So t=\r\no my knowledge this is fine.\n&gt;  \n&gt; - It is not required to use the type saf=\r\ne Get&lt;T&gt;(), you could also call Get() which returns an object. The actual r=\r\neturned type then depends solely on the mime type of the ressource, and it =\r\nis up to the programmer to decide what to do with it.\n&gt;  \n&gt; - I am quite su=\r\nre you can write some pretty generic XML builders without much overhead.\n&gt; =\r\n \n&gt; - This is not limited to XML, you could add image/jpeg and other well k=\r\nnown mime types. You just need to supply a proper builder.\n&gt;  \n&gt;  \n&gt; Code e=\r\nxample - Getting sub-ressources\n&gt; Now we want to get information about the =\r\ndirector of the movie:\n&gt;  \n&gt;   // One of the returned self links from the s=\r\nearch query\n&gt;   Link movieLink =3D movies[0].Self;\n&gt;  \n&gt;   // Get the actua=\r\nl movie\n&gt;   Movie movie =3D movieLink.Get&lt;Movie&gt;();\n&gt;  \n&gt;   // Get the dire=\r\nctor\n&gt;   MoviePerson director =3D movie.Director.Get&lt;MoviePerson&gt;();\n&gt;  \n&gt; =\r\nComments:\n&gt;  \n&gt; - There are no hard coded links here.\n&gt;  \n&gt; - The only apri=\r\nori information we use is the knowledge of the types of the referenced ress=\r\nources. These types are documented in the mime type in which the links are =\r\nused.\n&gt;  \n&gt;  \n&gt; Versioning\n&gt; Now our wonderfull movie shop decides to be ab=\r\nle to sell and rate movies. They do their own selling, but uses the fameous=\r\n ratings.org service to rate their movies. So the shop creates a new versio=\r\nn of the movie mime type:\n&gt;  \n&gt; // Example &quot;application/vnd.movies.movie.v2=\r\n+xml&quot;\n&gt; &lt;Movie&gt;\n&gt;   &lt;Self href=3D&quot;http://movies.org/movies/91&quot;/&gt;\n&gt;   &lt;Title=\r\n&gt;Strange Dawn&lt;/Title&gt;\n&gt;   &lt;Category&gt;Thriller&lt;/Category&gt;\n&gt;   &lt;Director href=\r\n=3D&quot;http://movies.org/persons/47&quot;/&gt;\n&gt;   &lt;Orders href=3D&quot;http://movies.org/m=\r\novies/91/orders&quot;/&gt;\n&gt;   &lt;Ratings href=3Dhttp://ratings.org/ratings?item=3Dht=\r\ntp%3a%2f%2fmovies.org%2fmovies%2f91/&gt;\n&gt; &lt;/Movie&gt;\n&gt;  \n&gt; In order to service =\r\nboth old and new clients the shop decides to return the initial movie mime =\r\ntype by default. Never clients should use the Accept header to indicate tha=\r\nt they want the new version. The same goes for the movies collection type.\n=\r\n&gt;  \n&gt; Our existing client code works happily as it did before.\n&gt;  \n&gt;  \n&gt; Co=\r\nde example - A new client\n&gt; The new client code would look like this:\n&gt;  \n&gt;=\r\n   // A link (template). This should be fetched from a configuration file.\n=\r\n&gt;   Link MoviesSearchLink =3D new Link(&quot;http://movies.org/movies?category=\r\n=3D{category}&quot;);\n&gt;  \n&gt;   // Anonymous class with search parameters. Reflect=\r\nion is used to extract values.\n&gt;   // This is about the simplest way to wri=\r\nte a &quot;fixed hashmap&quot; in C#\n&gt;   var movieSearchParameter =3D new { category =\r\n=3D &quot;thriller&quot; };\n&gt;  \n&gt;   // Setting up the Accept header\n&gt;   var movieSear=\r\nchHeaders =3D new { Accept =3D &quot;application/vnd.movies.movie-collection.v2&quot;=\r\n }\n&gt;  \n&gt;   // Get ressource stored at the link endpoint\n&gt;   MovieCollection=\r\n movies =3D MoviesSearchLink.Get&lt;MovieCollection&gt;(movieSearchParameter, mov=\r\nieSearchHeaders);\n&gt;  \n&gt;   // Iterate over all movies and print title\n&gt;   fo=\r\nreach (Movie movie in movies)\n&gt;     Console.WriteLine(&quot;Title: &quot; + movie.Tit=\r\nle);\n&gt;  \n&gt; Code example - Buying movies\n&gt; Now we have a movie which has an =\r\nembedded link to it&#39;s sales orders. To buy a movie we post a new order to t=\r\nhe sales order collection:\n&gt;  \n&gt;   // One of the returned self links from t=\r\nhe search query\n&gt;   Link movieLink =3D movies[0].Self;\n&gt;  \n&gt;   // Get the a=\r\nctual movie\n&gt;   Movie movie =3D movieLink.Get&lt;Movie&gt;();\n&gt;  \n&gt;   // Create a=\r\n new order request\n&gt;   MovieOrderRequest orderRequest =3D new MovieOrderReq=\r\nuest(movie.Self, 1 /* quantity */);\n&gt;  \n&gt;   // Post the order request to th=\r\ne order collection\n&gt;   // Assume it returns the newly created order\n&gt;   Mov=\r\nieOrder order =3D movie.Orders.Post(orderRequest);\n&gt;  \n&gt; Comments:\n&gt;  \n&gt; - =\r\nThe POST result in a redirect to the newly created order. The system GETs t=\r\nhis new order and returns it. This means we loose the intermediate data ret=\r\nurned from the POST.\n&gt;  \n&gt;  \n&gt; Other verbs\n&gt; The Link class is has built-in=\r\n support for GET/PUT/POST/DELETE. Other verbs can be executed through a gen=\r\neric &quot;Request&quot; method:\n&gt;  \n&gt;   SomeType x =3D someLink.Request(&quot;SOMEVERB&quot;, =\r\nsomePayload);\n&gt;  \n&gt;  \n&gt; Caching\n&gt; The Link class and it&#39;s associted methods=\r\n should of course respect ETag and if-not-modified-since etc. This would re=\r\nquire the framework to be initialized with a cache implementation of some k=\r\nind.\n&gt;  \n&gt;  \n&gt; Error handling\n&gt; I would suggest using execptions for error =\r\nhandling.\n&gt;  \n&gt;  \n&gt; \n&gt; \n&gt; \n&gt; \n&gt; \n\n\r\n--Apple-Mail-24-776861516\r\nContent-Transfer-Encoding: quoted-printable\r\nContent-Type: text/html;\n\tcharset=windows-1252\r\n\r\n&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body style=3D&quot;word-wrap: break-word; -webkit-nbsp-mode:=\r\n space; -webkit-line-break: after-white-space; &quot;&gt;&lt;div&gt;Mike,&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;=\r\n/div&gt;&lt;div&gt;It sounds like your library is quite similar to the one we develo=\r\nped for our application as well. &nbsp;MindTouch Dream [1] is a .NET framew=\r\nork for building portable web-services that can run as a standalone process=\r\n, windows service, or natively under IIS. &nbsp;It also runs under Linux us=\r\ning Mono. &nbsp;Dream is used by quite a few sites including Mozilla [2], N=\r\novell [3], and Washington Post [4]. &nbsp;The license is Apache 2.0 for eas=\r\ny reuse.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;It&#39;s quite fun to build an entire applica=\r\ntion with a RESTful interface. :)&lt;/div&gt;&lt;br&gt;&lt;div&gt;\n&lt;span class=3D&quot;Apple-style=\r\n-span&quot; style=3D&quot;border-collapse: separate; color: rgb(0, 0, 0); font-family=\r\n: Helvetica; font-size: 12px; font-style: normal; font-variant: normal; fon=\r\nt-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; =\r\ntext-align: auto; text-indent: 0px; text-transform: none; white-space: norm=\r\nal; widows: 2; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -=\r\nwebkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: no=\r\nne; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0; &quot;&gt;&lt;span c=\r\nlass=3D&quot;Apple-style-span&quot; style=3D&quot;border-collapse: separate; color: rgb(0,=\r\n 0, 0); font-family: Helvetica; font-size: 12px; font-style: normal; font-v=\r\nariant: normal; font-weight: normal; letter-spacing: normal; line-height: n=\r\normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: nor=\r\nmal; widows: 2; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; =\r\n-webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: n=\r\none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; &quot;&gt;&lt;div=\r\n style=3D&quot;word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-bre=\r\nak: after-white-space; &quot;&gt;&lt;span class=3D&quot;Apple-style-span&quot; style=3D&quot;border-c=\r\nollapse: separate; color: rgb(0, 0, 0); font-family: Helvetica; font-size: =\r\n12px; font-style: normal; font-variant: normal; font-weight: normal; letter=\r\n-spacing: normal; line-height: normal; orphans: 2; text-indent: 0px; text-t=\r\nransform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-=\r\nborder-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webk=\r\nit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webki=\r\nt-text-stroke-width: 0px; &quot;&gt;&lt;div style=3D&quot;word-wrap: break-word; -webkit-nb=\r\nsp-mode: space; -webkit-line-break: after-white-space; &quot;&gt;&lt;span class=3D&quot;App=\r\nle-style-span&quot; style=3D&quot;border-collapse: separate; color: rgb(0, 0, 0); fon=\r\nt-family: Helvetica; font-size: 12px; font-style: normal; font-variant: nor=\r\nmal; font-weight: normal; letter-spacing: normal; line-height: normal; orph=\r\nans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows=\r\n: 2; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-bor=\r\nder-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webki=\r\nt-text-size-adjust: auto; -webkit-text-stroke-width: 0px; &quot;&gt;&lt;div style=3D&quot;w=\r\nord-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-w=\r\nhite-space; &quot;&gt;&lt;span class=3D&quot;Apple-style-span&quot; style=3D&quot;border-collapse: se=\r\nparate; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spa=\r\ncing: 0px; color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px; fo=\r\nnt-style: normal; font-variant: normal; font-weight: normal; letter-spacing=\r\n: normal; line-height: normal; -webkit-text-decorations-in-effect: none; te=\r\nxt-indent: 0px; -webkit-text-size-adjust: auto; text-transform: none; orpha=\r\nns: 2; white-space: normal; widows: 2; word-spacing: 0px; &quot;&gt;&lt;div style=3D&quot;w=\r\nord-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-w=\r\nhite-space; &quot;&gt;&lt;span class=3D&quot;Apple-style-span&quot; style=3D&quot;border-collapse: se=\r\nparate; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spa=\r\ncing: 0px; color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px; fo=\r\nnt-style: normal; font-variant: normal; font-weight: normal; letter-spacing=\r\n: normal; line-height: normal; -webkit-text-decorations-in-effect: none; te=\r\nxt-indent: 0px; -webkit-text-size-adjust: auto; text-transform: none; orpha=\r\nns: 2; white-space: normal; widows: 2; word-spacing: 0px; &quot;&gt;&lt;span class=3D&quot;=\r\nApple-style-span&quot; style=3D&quot;border-collapse: separate; -webkit-border-horizo=\r\nntal-spacing: 0px; -webkit-border-vertical-spacing: 0px; color: rgb(0, 0, 0=\r\n); font-family: Helvetica; font-size: 12px; font-style: normal; font-varian=\r\nt: normal; font-weight: normal; letter-spacing: normal; line-height: normal=\r\n; -webkit-text-decorations-in-effect: none; text-indent: 0px; -webkit-text-=\r\nsize-adjust: auto; text-transform: none; orphans: 2; white-space: normal; w=\r\nidows: 2; word-spacing: 0px; &quot;&gt;&lt;div style=3D&quot;margin-top: 0px; margin-right:=\r\n 0px; margin-bottom: 0px; margin-left: 0px; &quot;&gt;- Steve&lt;/div&gt;&lt;div style=3D&quot;ma=\r\nrgin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; &quot;&gt;&lt;=\r\nbr class=3D&quot;khtml-block-placeholder&quot;&gt;&lt;/div&gt;&lt;div style=3D&quot;margin-top: 0px; m=\r\nargin-right: 0px; margin-bottom: 0px; margin-left: 0px; &quot;&gt;[1]&nbsp;&lt;a href=\r\n=3D&quot;http://developer.mindtouch.com/Dream&quot;&gt;http://developer.mindtouch.com/Dr=\r\neam&lt;/a&gt;&lt;/div&gt;&lt;div style=3D&quot;margin-top: 0px; margin-right: 0px; margin-botto=\r\nm: 0px; margin-left: 0px; &quot;&gt;[2]&nbsp;&lt;a href=3D&quot;https://developer.mozilla.o=\r\nrg/&quot;&gt;https://developer.mozilla.org/&lt;/a&gt;&lt;/div&gt;&lt;div style=3D&quot;margin-top: 0px;=\r\n margin-right: 0px; margin-bottom: 0px; margin-left: 0px; &quot;&gt;[3]&nbsp;&lt;a hre=\r\nf=3D&quot;http://monodevelop.com/&quot;&gt;http://monodevelop.com/&lt;/a&gt;&lt;/div&gt;&lt;div style=\r\n=3D&quot;margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0p=\r\nx; &quot;&gt;[4]&nbsp;&lt;a href=3D&quot;http://whorunsgov.com/&quot;&gt;http://whorunsgov.com/&lt;/a&gt;=\r\n&lt;/div&gt;&lt;div style=3D&quot;margin-top: 0px; margin-right: 0px; margin-bottom: 0px;=\r\n margin-left: 0px; &quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=3D&quot;margin-top: 0px; margin-right:=\r\n 0px; margin-bottom: 0px; margin-left: 0px; &quot;&gt;--------------&lt;/div&gt;&lt;div styl=\r\ne=3D&quot;margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0=\r\npx; &quot;&gt;Steve G. Bjorg&lt;/div&gt;&lt;div style=3D&quot;margin-top: 0px; margin-right: 0px;=\r\n margin-bottom: 0px; margin-left: 0px; &quot;&gt;&lt;a href=3D&quot;http://mindtouch.com&quot;&gt;h=\r\nttp://mindtouch.com&lt;/a&gt;&lt;/div&gt;&lt;div style=3D&quot;margin-top: 0px; margin-right: 0=\r\npx; margin-bottom: 0px; margin-left: 0px; &quot;&gt;&lt;a href=3D&quot;http://twitter.com/b=\r\njorg&quot;&gt;http://twitter.com/bjorg&lt;/a&gt;&lt;/div&gt;&lt;div style=3D&quot;margin-top: 0px; marg=\r\nin-right: 0px; margin-bottom: 0px; margin-left: 0px; &quot;&gt;&lt;div style=3D&quot;margin=\r\n-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; &quot;&gt;&lt;a hr=\r\nef=3D&quot;http://irc.freenode.net&quot;&gt;irc.freenode.net&lt;/a&gt; #mindtouch&lt;/div&gt;&lt;/div&gt;&lt;=\r\n/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;\n&lt;/=\r\ndiv&gt;\n\n&lt;br&gt;&lt;div&gt;&lt;div&gt;On Dec 9, 2009, at 2:58 PM, mike amundsen wrote:&lt;/div&gt;&lt;=\r\nbr class=3D&quot;Apple-interchange-newline&quot;&gt;&lt;blockquote type=3D&quot;cite&quot;&gt;\n\n\n\n&lt;div s=\r\ntyle=3D&quot;background-color: #fff;&quot;&gt;\n&lt;span style=3D&quot;display:none&quot;&gt;&nbsp;&lt;/span=\r\n&gt;\n\n\n\n    &lt;div id=3D&quot;ygrp-text&quot;&gt;&lt;div&gt;&lt;br class=3D&quot;webkit-block-placeholder&quot;&gt;=\r\n&lt;/div&gt;&lt;div&gt;J=F8rn:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;This line stands out first:&nbs=\r\np;&quot;&lt;span class=3D&quot;Apple-style-span&quot; style=3D&quot;font-family: Arial;&quot;&gt;I have av=\r\noided Atom Links since, in my experience,&nbsp;these don&#39;t serialize well i=\r\nn the C# standard XML serializer.&quot;&lt;/span&gt;&lt;/div&gt;\n&lt;div&gt;&lt;span class=3D&quot;Apple-s=\r\ntyle-span&quot; style=3D&quot;font-family: Arial;&quot;&gt;My advice is to be wary of seriali=\r\nzers when coding for HTTP. There are so many variances with incoming respon=\r\nses I think you&#39;ll find it a real task to build apps based on &nbsp;success=\r\nfully converting incoming response bodies into code-able objects. Using ser=\r\nializers also tends to lead programmers to tight-binding between the code a=\r\nnd the HTTP response body. This means changes in the body may blow the seri=\r\nalizer code. This is especially true when working with &quot;generic&quot; media-type=\r\ns such as XML and JSON, etc. since they have very little semantic value bui=\r\nlt into them.&lt;/span&gt;&lt;/div&gt;\n&lt;div&gt;&lt;span class=3D&quot;Apple-style-span&quot; style=3D&quot;f=\r\nont-family: Arial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=3D&quot;Apple-style-span&quot; =\r\nstyle=3D&quot;font-family: Arial;&quot;&gt;That leads me to another bit of advice I&#39;ll o=\r\nffer: think about link semantics from the very start when creating your lib=\r\nrary. The Web browser client works because the link semantics of the HTML m=\r\nedia-type are well-defined (and pretty narrow). There are a limited number =\r\nof link elements. Some are in-doc links (IMG, LINK, SCRIPT, etc.), some are=\r\n navigational links (A, FORM). All, except FORM, are limited to using the G=\r\nET method. It&#39;s the semantic model of HTML that allows browsers to properly=\r\n handle HTTP responses from previously unknown locations and still provide =\r\nfull functionality - even a decade after the semantics where defined. I sus=\r\npect you&#39;ll find that building a client to properly locate, identify, and&n=\r\nbsp;understand&nbsp;&lt;wbr&gt;the link semantics of a single media type (applica=\r\ntion/&lt;wbr&gt;vnd.movies.&lt;wbr&gt;movie+xml) is challenging by itself. Building one=\r\n that handles multiple media-types just adds to the fun&lt;g&gt;.&lt;/span&gt;&lt;/d=\r\niv&gt;\n&lt;div&gt;&lt;span class=3D&quot;Apple-style-span&quot; style=3D&quot;font-family: Arial;&quot;&gt;&lt;br=\r\n&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=3D&quot;Apple-style-span&quot; style=3D&quot;font-family: A=\r\nrial;&quot;&gt;I also encourage you to treat HTTP control data (headers) as top-lev=\r\nel programming objects in your library. Allowing programmers to decorate re=\r\nquests with control data (content-encoding, media-type, authorization, cach=\r\ne-control, etc.) and have direct access to the control data on responses wi=\r\nll improve the flexibility of any client/server built w/ your library.&lt;/spa=\r\nn&gt;&lt;/div&gt;\n&lt;div&gt;&lt;span class=3D&quot;Apple-style-span&quot; style=3D&quot;font-family: Arial;=\r\n&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;Arial&quot;&gt;In =\r\nthe big picture, I prefer looking at HTTP programming from the stand-point =\r\nof &quot;resource programming.&quot; I look for a code library that lets me define a =\r\nresource, associate or or more URIs with that resource, handle multiple rep=\r\nresentations of the resource (for both requests and response bodies), and p=\r\nroperly decorate requests and responses w/ control data. I also want to mak=\r\ne sure it handles mime-types properly (conneg included), conditional reques=\r\nts (GET and PUT), and supports flexible authentication models.&nbsp;&lt;/font&gt;=\r\n&lt;/div&gt;\n&lt;div&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;Arial&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/di=\r\nv&gt;&lt;div&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;Arial&quot;&gt;FWIW,&nbsp;&lt;/font&gt;I =\r\nstarted work on a REST-ful HTTP C# framework a while back [1]. It&#39;s been do=\r\nrmant for quite some time as the current version works well for me, but the=\r\nre are lots of places it needs work. I&#39;ve also built an HTTP utilities libr=\r\nary&nbsp;[2]&nbsp;with most all the bits I need for building REST-ful HTTP =\r\napps. It&#39;s smaller and lighter than my &#39;framework&#39; library. I mention these=\r\n as some of the code there might be helpful and/or act as a cautionary tale=\r\n as you work on your own projects.&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;mca&lt;br&gt;&lt;a href=\r\n=3D&quot;http://amundsen.com/blog/&quot;&gt;http://amundsen.&lt;wbr&gt;com/blog/&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;/=\r\ndiv&gt;&lt;div&gt;[1] &lt;a href=3D&quot;http://exyus.com/&quot;&gt;http://exyus.&lt;wbr&gt;com&lt;/a&gt;&lt;/div&gt;&lt;=\r\ndiv&gt;[2]&nbsp;&lt;a href=3D&quot;http://code.google.com/p/mikeamundsen/source/browse=\r\n/#svn/trunk/Amundsen.Utilities&quot;&gt;http://code.&lt;wbr&gt;google.com/&lt;wbr&gt;p/mikeamun=\r\ndsen/&lt;wbr&gt;source/browse/&lt;wbr&gt;#svn/trunk/&lt;wbr&gt;Amundsen.&lt;wbr&gt;Utilities&lt;/a&gt;&lt;/d=\r\niv&gt;\n&lt;div&gt;&lt;br clear=3D&quot;all&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;div class=3D&quot;gmail_quote&quot;&gt;On Wed, Dec 9=\r\n, 2009 at 17:00, J=F8rn Wildt &lt;span dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:jw@fj=\r\neldgruppen.dk&quot;&gt;jw@fjeldgruppen.&lt;wbr&gt;dk&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote=\r\n class=3D&quot;gmail_quote&quot; style=3D&quot;border-left:1px #ccc solid;&quot;&gt;\n\n\n\n\n\n\n\n      =\r\n  \n\n\n\n\n\n\n&lt;div&gt;\n\n\n\n\n&lt;br&gt;&lt;br&gt;\n\n\n\n\n\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;There=\r\n has been a lot of discussion about the right \nway to implement a REST serv=\r\nice, but less focus on how you would actually code a \nclient. I have been l=\r\nooking at RESTFulie[1]&lt;wbr&gt;, Subbu Alamarju[2], and the \nStarbucks[3] examp=\r\nle, and would like to discuss a similar typed approach in \nC#.&lt;/font&gt;&lt;/div&gt;=\r\n\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&lt;/font&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;&lt;font size=\r\n=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;I am experimenting with an actual implementation \nand=\r\n would like some feedback before getting too far :-)&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;fon=\r\nt size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&lt;/font&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=\r\n=3D&quot;Arial&quot;&gt;Thanks, J=F8rn&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;=\r\n&gt;\n&lt;div&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;[1] &lt;a&gt;http://github.&lt;wbr&gt;com/ca=\r\nelum/&lt;wbr&gt;restfulie&lt;/a&gt;&lt;/div&gt;\n&lt;div&gt;[2] &lt;a&gt;http://www.infoq.&lt;wbr&gt;com/article=\r\ns/&lt;wbr&gt;subbu-allamaraju&lt;wbr&gt;-rest&lt;/a&gt;&lt;/div&gt;\n&lt;div&gt;[3] &lt;a href=3D&quot;http://www.=\r\ninfoq.com/articles/webber-rest-workflow&quot; target=3D&quot;_blank&quot;&gt;http://www.infoq=\r\n.&lt;wbr&gt;com/articles/&lt;wbr&gt;webber-rest-&lt;wbr&gt;workflow&lt;/a&gt;&lt;/div&gt;\n&lt;div&gt;&nbsp;&lt;/di=\r\nv&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&lt;/font&gt;&nbsp;&lt;/div&gt;\n&lt;d=\r\niv&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&lt;strong&gt;Service example \ndocumentation&lt;/=\r\nstrong&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;In order to discu=\r\nss a REST client we need a service \nexample. &lt;/font&gt;&lt;font size=3D&quot;2&quot; face=\r\n=3D&quot;Arial&quot;&gt;My first use case is a movie shop where \nwe can search for movie=\r\ns in a specific category. To do so the shop has published \na single search =\r\nservice URL template: &lt;a href=3D&quot;http://movies.org/movies?category=3D%7Bcat=\r\negory&quot; target=3D&quot;_blank&quot;&gt;http://movies.&lt;wbr&gt;org/movies?&lt;wbr&gt;category=3D&lt;wbr=\r\n&gt;{category&lt;/a&gt;}. \n&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&lt;/font=\r\n&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;The shop also publishes&=\r\nnbsp;three ressource mime \ntypes:&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=\r\n=3D&quot;Arial&quot;&gt;&lt;/font&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;// Exam=\r\nple \n&quot;application/&lt;wbr&gt;vnd.movies.&lt;wbr&gt;movie+xml&quot;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font s=\r\nize=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&lt;Movie&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; f=\r\nace=3D&quot;Arial&quot;&gt;&nbsp; &lt;Self \nhref=3D&quot;&lt;a href=3D&quot;http://movies.org/movies/=\r\n91&quot; target=3D&quot;_blank&quot;&gt;http://movies.&lt;wbr&gt;org/movies/&lt;wbr&gt;91&lt;/a&gt;&quot;/&gt;&lt;/font=\r\n&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&nbsp; &lt;Title&gt;Strange \nD=\r\nawn&lt;/Title&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&nbsp; =\r\n\n&lt;Category&gt;Thriller&lt;/Category&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;=\r\n2&quot; face=3D&quot;Arial&quot;&gt;&nbsp; &lt;Director \nhref=3D&quot;&lt;a href=3D&quot;http://movies.org=\r\n/persons/47&quot; target=3D&quot;_blank&quot;&gt;http://movies.&lt;wbr&gt;org/persons/&lt;wbr&gt;47&lt;/a&gt;&quot;/=\r\n&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&lt;/Movie&gt;&lt;/font=\r\n&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&lt;/font&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;&lt;font=\r\n size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;\n&lt;div&gt;&lt;font size=\r\n=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;// Example \n&quot;application/&lt;wbr&gt;vnd.movies.&lt;wbr&gt;movie-c=\r\nollection&lt;wbr&gt;+xml&quot;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;Movies&gt;&lt;/div&gt;\n&lt;div&gt;&nbsp; &lt;=\r\nSelf \nhref=3D&quot;&lt;a href=3D&quot;http://movies.org/movies?category=3DThriller&quot; targ=\r\net=3D&quot;_blank&quot;&gt;http://movies.&lt;wbr&gt;org/movies?&lt;wbr&gt;category=3D&lt;wbr&gt;Thriller&lt;/=\r\na&gt;&quot;/&gt;&lt;/div&gt;\n&lt;div&gt;&nbsp; &lt;Movie&gt;&lt;/div&gt;&lt;/font&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;fo=\r\nnt size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&nbsp; &nbsp; &lt;Title&gt;Strange \nDawn&lt;/T=\r\nitle&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&nbsp;&nbsp;&nbs=\r\np; &lt;Self \nhref=3D&quot;&lt;a href=3D&quot;http://movies.org/movies/91&quot; target=3D&quot;_bla=\r\nnk&quot;&gt;http://movies.&lt;wbr&gt;org/movies/&lt;wbr&gt;91&lt;/a&gt;&quot;/&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&nbsp=\r\n; &lt;/Movie&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;\n&lt;div&gt;&nbsp; &l=\r\nt;Movie&gt;...&lt;/Movie&gt;&lt;/div&gt;\n&lt;div&gt;&nbsp; &lt;Movie&gt;...&lt;/Movie&g=\r\nt;&lt;/div&gt;&lt;/Movies&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;// Example &quot;app=\r\nlication/&lt;wbr&gt;vnd.movies.&lt;wbr&gt;person+xml&quot;&lt;/div&gt;\n&lt;div&gt;&lt;Person&gt;&lt;/div&gt;\n&lt;=\r\ndiv&gt;&nbsp; &lt;Self href=3D&quot;&lt;a href=3D&quot;http://movies.org/persons/47&quot; target=\r\n=3D&quot;_blank&quot;&gt;http://movies.&lt;wbr&gt;org/persons/&lt;wbr&gt;47&lt;/a&gt;&quot;/&gt;&lt;/div&gt;\n&lt;div&gt;&nb=\r\nsp; &lt;Name&gt;Richard Strangelove&lt;/Name&gt;&lt;/div&gt;\n&lt;div&gt;&nbsp; &lt;Phot=\r\no href=3D&quot;&lt;a href=3D&quot;http://facebook.com/photos/hh31y1&quot; target=3D&quot;_blank&quot;&gt;h=\r\nttp://facebook.&lt;wbr&gt;com/photos/&lt;wbr&gt;hh31y1&lt;/a&gt;&quot;/&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/Person=\r\n&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&lt;/font&gt;&nbsp;&lt;/div&gt;\n&lt;=\r\ndiv&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;Comments&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=\r\n=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&lt;/font&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Ari=\r\nal&quot;&gt;- I have avoided Atom Links since, in my \nexperience,&nbsp;these don&#39;t =\r\nserialize well in the C# standard XML serializer. \nYou could although&nbsp;=\r\ncreate your own serializer, so this is not an important \nrestriction.&lt;/font=\r\n&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&lt;/font&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;&lt;font=\r\n size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;- Notice how the person type has external \nrefer=\r\nences :-)&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&lt;/font&gt;&nbsp;&lt;/=\r\ndiv&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&lt;/font&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;&lt;font si=\r\nze=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&lt;strong&gt;Code example - \nSearching&lt;/strong&gt;&lt;/font&gt;&lt;/=\r\ndiv&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;The cleanest client usage I can c=\r\nome up with \nis:&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&lt;/font&gt;&=\r\nnbsp;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&nbsp; // A link (template=\r\n). This should be fetched \nfrom a configuration file.&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;fo=\r\nnt size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&nbsp;&nbsp;Link MoviesSearchLink =3D new Link=\r\n(&quot;&lt;a&gt;http://movies.&lt;wbr&gt;org/movies?&lt;wbr&gt;category=3D&lt;wbr&gt;{category&lt;/a&gt;}&quot;);&lt;/=\r\nfont&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&lt;/font&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;&lt;=\r\nfont size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&nbsp; // Anonymous class with search parame=\r\nters. \nReflection is used to extract values.&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=\r\n=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&nbsp; // This is about the simplest way to write a \n=\r\n&quot;fixed hashmap&quot; in C#&lt;/font&gt;&lt;/div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;\n&lt;div&gt;&nb=\r\nsp; var movieSearchParamete&lt;wbr&gt;r =3D new { category =3D &quot;Thriller&quot; };&lt;/div=\r\n&gt;\n&lt;div&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;&nbsp; // Get ressource stored at the link endpoin=\r\nt&lt;/div&gt;\n&lt;div&gt;&nbsp; MovieCollection movies =3D \nMoviesSearchLink.&lt;wbr&gt;Get&l=\r\nt;MovieCollection&gt;(movieSearchParamet&lt;wbr&gt;er);&lt;/div&gt;\n&lt;div&gt;&nbsp;&lt;/div&gt;\n&lt;=\r\ndiv&gt;&nbsp; // Iterate over all movies and print title&lt;/div&gt;\n&lt;div&gt;&nbsp; for=\r\neach (Movie movie in movies)&lt;/div&gt;\n&lt;div&gt;&nbsp;&nbsp;&nbsp; Console.WriteLin=\r\ne(&quot;Title: &quot; + movie.Title)&lt;wbr&gt;;&lt;br&gt;&lt;/div&gt;\n&lt;div&gt;Comments:&lt;/div&gt;\n&lt;div&gt;&nbsp;=\r\n&lt;/div&gt;\n&lt;div&gt;- A Link is untyped. We do not know what lies at the end of it.=\r\n&lt;/div&gt;\n&lt;div&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;- A link knows how to merge parameters into U=\r\nRL templates.&lt;/div&gt;\n&lt;div&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;- The result of GETing a link is=\r\n typed. The actual type is defined by the \nreturned mime type.&lt;/div&gt;\n&lt;div&gt;&=\r\nnbsp;&lt;/div&gt;\n&lt;div&gt;- In order to do something usefull with the search we must=\r\n assume that it \nreturns a MovieCollection. Hence the generic type specifie=\r\nr in the \nGet&lt;T&gt;() method. This is apriori information&nbsp;which I c=\r\nannot see how \nto code without.&lt;/div&gt;\n&lt;div&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;&nbsp;&lt;/div&gt;\n&lt;=\r\ndiv&gt;&lt;strong&gt;Parsing ressources&lt;/strong&gt;&lt;/div&gt;\n&lt;div&gt;One piece of magic is ho=\r\nw Get&lt;MovieCollection&gt;(params) knows how to \nconvert the&nbsp;bytes r=\r\neturned from the endpoint to a MovieCollection. For this \nwe create a MimeT=\r\nypeRegistry:&lt;/div&gt;\n&lt;div&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;&nbsp; MimeTypeRegistry.&lt;wbr&gt;Regi=\r\nster&lt;MovieCollection, \nMovieCollectionBuil&lt;wbr&gt;der&gt;(&quot;application/&lt;wbr=\r\n&gt;vnd.movies.&lt;wbr&gt;movie-collection&quot;);&lt;/div&gt;\n&lt;div&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;which is =\r\nequal to:&lt;/div&gt;\n&lt;div&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;\n&lt;div&gt;&nbsp; MimeTypeRegistry.&lt;wbr&gt;R=\r\negister(&lt;wbr&gt;typeof(MovieColl&lt;wbr&gt;ection), \ntypeof(MovieCollect&lt;wbr&gt;ionBuil=\r\nder)&lt;wbr&gt;, \n&quot;application/&lt;wbr&gt;vnd.movies.&lt;wbr&gt;movie-collection&quot;);&lt;/div&gt;&lt;/di=\r\nv&gt;\n&lt;div&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;This means: when ever we must parse a specific mi=\r\nme type, we look up a \nbuilder in the registry and uses this to parse the r=\r\neturned ressource \nrepresentation.&lt;/div&gt;\n&lt;div&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;The typed G=\r\net&lt;MovieCollection&gt;(params) method GETs the ressource \ndata, instanti=\r\nates the corresponding builder, verifies that the built object \ntype matche=\r\ns the requested and returns the built object.&lt;/div&gt;\n&lt;div&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;=\r\nComments:&lt;/div&gt;\n&lt;div&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;- This is static typing which RESTaf=\r\narians seems to shy away from. But the \ntype depends on the returned ressou=\r\nrce, _not_ the URL. So to my knowledge this \nis fine.&lt;/div&gt;\n&lt;div&gt;&nbsp;&lt;/di=\r\nv&gt;\n&lt;div&gt;- It is not required to use the type safe Get&lt;T&gt;(), you could=\r\n also \ncall Get() which returns an object. The actual returned type then de=\r\npends solely \non the mime type of the ressource, and it is up to the progra=\r\nmmer to decide what \nto do with it.&lt;/div&gt;\n&lt;div&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;- I am qui=\r\nte sure you can write some pretty generic XML builders without \nmuch overhe=\r\nad.&lt;/div&gt;\n&lt;div&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;- This is not limited to XML, you could ad=\r\nd image/jpeg and other well known \nmime types. You just need to supply a pr=\r\noper builder.&lt;/div&gt;\n&lt;div&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;&lt;strong&gt;Code e=\r\nxample - Getting sub-ressources&lt;/strong&gt;&lt;/div&gt;\n&lt;div&gt;Now we want to get info=\r\nrmation about the director of the movie:&lt;/div&gt;\n&lt;div&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;&nbsp=\r\n; // One of the returned self links from the search query&lt;/div&gt;\n&lt;div&gt;&nbsp;=\r\n Link movieLink =3D movies[0].Self;&lt;/div&gt;\n&lt;div&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;&nbsp; // =\r\nGet the actual movie&lt;/div&gt;\n&lt;div&gt;&nbsp; Movie movie =3D movieLink.Get&lt;Mov=\r\nie&gt;();&lt;/div&gt;\n&lt;div&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;&nbsp; // Get the director&lt;/div&gt;\n&lt;di=\r\nv&gt;&nbsp; MoviePerson director =3D \nmovie.Director.&lt;wbr&gt;Get&lt;MoviePerson&g=\r\nt;();&lt;/div&gt;\n&lt;div&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;Comments:&lt;/div&gt;\n&lt;div&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;-=\r\n There are no hard coded links here.&lt;/div&gt;\n&lt;div&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;- The onl=\r\ny apriori information we use is the knowledge of the types of the \nreferenc=\r\ned ressources. These types&nbsp;are documented in the mime type in which \nt=\r\nhe links&nbsp;are used.&lt;/div&gt;\n&lt;div&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;&lt;str=\r\nong&gt;Versioning&lt;/strong&gt;&lt;/div&gt;\n&lt;div&gt;Now our wonderfull movie shop decides to=\r\n be able to sell and rate movies. \nThey do their own selling, but uses the =\r\nfameous &lt;a href=3D&quot;http://ratings.org/&quot; target=3D&quot;_blank&quot;&gt;ratings.org&lt;/a&gt; s=\r\nervice to rate \ntheir movies. So&nbsp;the shop&nbsp;creates a new version o=\r\nf the movie mime \ntype:&lt;/div&gt;\n&lt;div&gt;&nbsp;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Ari=\r\nal&quot;&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;// Example \n&quot;application/&lt;wbr&gt;vnd=\r\n.movies.&lt;wbr&gt;movie.&lt;strong&gt;v2&lt;/strong&gt;+xml&quot;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D=\r\n&quot;2&quot; face=3D&quot;Arial&quot;&gt;&lt;Movie&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D=\r\n&quot;Arial&quot;&gt;&nbsp; &lt;Self \nhref=3D&quot;&lt;a href=3D&quot;http://movies.org/movies/91&quot; ta=\r\nrget=3D&quot;_blank&quot;&gt;http://movies.&lt;wbr&gt;org/movies/&lt;wbr&gt;91&lt;/a&gt;&quot;/&gt;&lt;/font&gt;&lt;/div=\r\n&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&nbsp; &lt;Title&gt;Strange \nDawn&lt=\r\n;/Title&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&nbsp; \n&lt;C=\r\nategory&gt;Thriller&lt;/Category&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; fac=\r\ne=3D&quot;Arial&quot;&gt;&nbsp; &lt;Director \nhref=3D&quot;&lt;a href=3D&quot;http://movies.org/perso=\r\nns/47&quot; target=3D&quot;_blank&quot;&gt;http://movies.&lt;wbr&gt;org/persons/&lt;wbr&gt;47&lt;/a&gt;&quot;/&gt;&lt;/=\r\nfont&gt;&lt;/div&gt;\n&lt;div&gt;&nbsp; &lt;Orders href=3D&quot;&lt;a href=3D&quot;http://movies.org/mov=\r\nies/91/orders&quot; target=3D&quot;_blank&quot;&gt;http://movies.&lt;wbr&gt;org/movies/&lt;wbr&gt;91/orde=\r\nrs&lt;/a&gt;&quot;/&gt;&lt;/div&gt;\n&lt;div&gt;&nbsp; &lt;Ratings href=3D&lt;a href=3D&quot;http://ratings=\r\n.org/ratings?item=3Dhttp%3a%2f%2fmovies.org%2fmovies%2f91&quot; target=3D&quot;_blank=\r\n&quot;&gt;http://ratings.&lt;wbr&gt;org/ratings?&lt;wbr&gt;item=3Dhttp%&lt;wbr&gt;3a%2f%2fmovies.&lt;wbr=\r\n&gt;org%2fmovies%&lt;wbr&gt;2f91&lt;/a&gt;/&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;=\r\n&gt;&lt;/Movie&gt;&lt;/font&gt;&lt;/div&gt;&lt;/font&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;div&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;In o=\r\nrder to service both old and new clients the shop decides to return the \nin=\r\nitial movie mime type by default. Never clients should use the Accept heade=\r\nr \nto indicate that they want&nbsp;the new version. The same goes for the m=\r\novies \ncollection type.&lt;/div&gt;\n&lt;div&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;Our existing client co=\r\nde works happily as it did before.&lt;/div&gt;\n&lt;div&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;&nbsp;&lt;/div=\r\n&gt;\n&lt;div&gt;&lt;strong&gt;Code example - A new client&lt;/strong&gt;&lt;/div&gt;\n&lt;div&gt;The new clie=\r\nnt code would look like this:&lt;/div&gt;\n&lt;div&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;\n&lt;div&gt;&lt;font size=\r\n=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&nbsp; // A link (template). This should be fetched \n=\r\nfrom a configuration file.&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial=\r\n&quot;&gt;&nbsp;&nbsp;Link MoviesSearchLink =3D new Link(&quot;&lt;a&gt;http://movies.&lt;wbr&gt;org=\r\n/movies?&lt;wbr&gt;category=3D&lt;wbr&gt;{category&lt;/a&gt;}&quot;);&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=\r\n=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&lt;/font&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Ari=\r\nal&quot;&gt;&nbsp; // Anonymous class with search parameters. \nReflection is used t=\r\no extract values.&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&nbsp; =\r\n// This is about the simplest way to write a \n&quot;fixed hashmap&quot; in C#&lt;/font&gt;&lt;=\r\n/div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;\n&lt;div&gt;&nbsp; var movieSearchParamete&lt;w=\r\nbr&gt;r =3D new { category =3D &quot;thriller&quot; };&lt;/div&gt;\n&lt;div&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;&nbs=\r\np; // Setting up the Accept header&lt;/div&gt;\n&lt;div&gt;&nbsp; var movieSearchHeaders=\r\n =3D new { Accept =3D \n&quot;application/&lt;wbr&gt;vnd.movies.&lt;wbr&gt;movie-collection&lt;w=\r\nbr&gt;.v2&quot; }&lt;/div&gt;\n&lt;div&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;&nbsp; // Get ressource stored at th=\r\ne link endpoint&lt;/div&gt;\n&lt;div&gt;&nbsp; MovieCollection movies =3D \nMoviesSearchL=\r\nink.&lt;wbr&gt;Get&lt;MovieCollection&gt;(movieSearchParamet&lt;wbr&gt;er, \nmovieSearch=\r\nHeaders)&lt;wbr&gt;;&lt;/div&gt;\n&lt;div&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;&nbsp; // Iterate over all movi=\r\nes and print title&lt;/div&gt;\n&lt;div&gt;&nbsp; foreach (Movie movie in movies)&lt;/div&gt;\n=\r\n&lt;div&gt;&nbsp;&nbsp;&nbsp; Console.WriteLine(&quot;Title: &quot; + \nmovie.Title)&lt;wbr&gt;;&lt;b=\r\nr&gt;&lt;/div&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;&lt;strong&gt;Code example - Buying =\r\nmovies&lt;/strong&gt;&lt;/div&gt;\n&lt;div&gt;Now we have a movie which has an embedded link t=\r\no it&#39;s sales orders. To buy \na movie we post a new order to the sales order=\r\n collection:&lt;/div&gt;\n&lt;div&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;\n&lt;div&gt;&nbsp; // One of the return=\r\ned self links from the search query&lt;/div&gt;\n&lt;div&gt;&nbsp; Link movieLink =3D mo=\r\nvies[0].Self;&lt;/div&gt;\n&lt;div&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;&nbsp; // Get the actual movie&lt;/=\r\ndiv&gt;\n&lt;div&gt;&nbsp; Movie movie =3D movieLink.Get&lt;Movie&gt;();&lt;/div&gt;\n&lt;div&gt;&=\r\nnbsp;&lt;/div&gt;\n&lt;div&gt;&nbsp; //&nbsp;Create a new order request&lt;/div&gt;\n&lt;div&gt;&nbsp=\r\n; MovieOrderRequest orderRequest =3D new MovieOrderRequest(&lt;wbr&gt;movie.Self,=\r\n 1 \n/* quantity */);&lt;/div&gt;\n&lt;div&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;&nbsp; // Post the order =\r\nrequest to the order collection&lt;/div&gt;\n&lt;div&gt;&nbsp; // Assume it returns the =\r\nnewly created order&lt;/div&gt;\n&lt;div&gt;&nbsp;&nbsp;MovieOrder order \n=3D&nbsp;movie=\r\n.Orders.&lt;wbr&gt;Post(orderReques&lt;wbr&gt;t);&lt;/div&gt;&lt;/div&gt;\n&lt;div&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;Co=\r\nmments:&lt;/div&gt;\n&lt;div&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;- The POST result in a redirect to the=\r\n newly created&nbsp;order. The system \nGETs this new order and returns it. =\r\nThis means we loose the intermediate data \nreturned from the POST.&lt;/div&gt;\n&lt;d=\r\niv&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;&lt;strong&gt;Other verbs&lt;/strong&gt;&lt;/div&gt;\n&lt;=\r\ndiv&gt;The Link class is has built-in support for GET/PUT/POST/&lt;wbr&gt;DELETE. Ot=\r\nher verbs \ncan be executed through a generic &quot;Request&quot; method:&lt;/div&gt;\n&lt;div&gt;&=\r\nnbsp;&lt;/div&gt;\n&lt;div&gt;&nbsp; SomeType x =3D someLink.Request(&quot;SOMEVERB&quot;, somePay=\r\nload)&lt;wbr&gt;;&lt;/div&gt;\n&lt;div&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;&lt;strong&gt;Caching&lt;=\r\n/strong&gt;&lt;/div&gt;\n&lt;div&gt;The Link class and it&#39;s associted methods should of cou=\r\nrse respect ETag and \nif-not-modified-&lt;wbr&gt;since etc. This would require th=\r\ne framework to be initialized \nwith a cache implementation of some kind.&lt;/d=\r\niv&gt;\n&lt;div&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;&lt;strong&gt;Error handling&lt;/strong=\r\n&gt;&lt;/div&gt;\n&lt;div&gt;I would suggest using execptions for error handling.&lt;/div&gt;\n&lt;di=\r\nv&gt;&nbsp;&lt;/div&gt;\n&lt;div&gt;&nbsp;&lt;/div&gt;&lt;/font&gt;\n\n\n\n\n\n&lt;br&gt;\n\n    \n    \n&lt;br&gt;\n\n\n\n\n&lt;div =\r\nwidth=3D&quot;1&quot; style=3D&quot;color:white;&quot;&gt;&lt;/div&gt;\n\n&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;di=\r\nv&gt;&lt;br class=3D&quot;webkit-block-placeholder&quot;&gt;&lt;/div&gt;\n\n    &lt;/div&gt;\n     \n\n    \n\n&lt;/=\r\ndiv&gt;\n\n\n\n&lt;!-- end group email --&gt;\n\n&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/body&gt;&lt;/html&gt;\r\n--Apple-Mail-24-776861516--\r\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":148737865,"authorName":"Hugh Winkler","from":"&quot;Hugh Winkler&quot; &lt;hughw@...&gt;","profile":"hwinkler99","replyTo":"SENDER","senderId":"Ni01kYnJ_ypgozr8LS4116U-9-4d_KCyRPhfCZHgy-Y5Vp1L5CqWeZu9FYsVOUGTBI1RMTeEsf4uepFtAk_V_zduelliOrs","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Atompub missed opportunity","postDate":"1167876373","msgId":7426,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDkyNzQ0MWIzMDcwMTAzMTgwNnc0MTA2Nzg4M2s4ZmVmM2QyNDgxMDMxYTBiQG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PDExNjc4MjQzNzkuMTk5NzUuNTUuY2FtZWxAbG9jYWxob3N0LmxvY2FsZG9tYWluPg==","referencesHeader":"PDkyNzQ0MWIzMDYxMjI4MTI1N2w3ZTc4MjQyYnM5NTYyMjBiZTFjNTFmZTQ2QG1haWwuZ21haWwuY29tPgkgPDExNjc1MTg3MjQuNDYzNy4xMi5jYW1lbEBsb2NhbGhvc3QubG9jYWxkb21haW4+CSA8OTI3NDQxYjMwNjEyMzAxNzA4aTIwYTlhYzJlb2Y5N2IwYTliODBjOTQ2ZGRAbWFpbC5nbWFpbC5jb20+CSA8MTE2NzYwODE5Ni41MTU3LjE1LmNhbWVsQGxvY2FsaG9zdC5sb2NhbGRvbWFpbj4JIDw5Mjc0NDFiMzA3MDEwMjEwMzFqM2E0MGRmNzFnNDE0YTY1YTdlYTViMWUwMEBtYWlsLmdtYWlsLmNvbT4JIDwxMTY3ODI0Mzc5LjE5OTc1LjU1LmNhbWVsQGxvY2FsaG9zdC5sb2NhbGRvbWFpbj4="},"prevInTopic":7404,"nextInTopic":7433,"prevInTime":7425,"nextInTime":7427,"topicId":7295,"numMessagesInTopic":25,"msgSnippet":"Benjamin, ... Objection: Clients can t be programmed to complete forms Counter-example: This machine automatically fills out a form based on a vocabulary","rawEmail":"Return-Path: &lt;hwinkler@...&gt;\r\nX-Sender: hwinkler@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 63657 invoked from network); 4 Jan 2007 02:44:08 -0000\r\nReceived: from unknown (66.218.67.36)\n  by m41.grp.scd.yahoo.com with QMQP; 4 Jan 2007 02:44:08 -0000\r\nReceived: from unknown (HELO nf-out-0910.google.com) (64.233.182.184)\n  by mta10.grp.scd.yahoo.com with SMTP; 4 Jan 2007 02:44:07 -0000\r\nReceived: by nf-out-0910.google.com with SMTP id o25so7894933nfa\n        for &lt;rest-discuss@yahoogroups.com&gt;; Wed, 03 Jan 2007 18:35:06 -0800 (PST)\r\nReceived: by 10.82.184.2 with SMTP id h2mr1859233buf.1167876373480;\n        Wed, 03 Jan 2007 18:06:13 -0800 (PST)\r\nReceived: by 10.82.116.19 with HTTP; Wed, 3 Jan 2007 18:06:13 -0800 (PST)\r\nMessage-ID: &lt;927441b30701031806w41067883k8fef3d2481031a0b@...&gt;\r\nDate: Wed, 3 Jan 2007 20:06:13 -0600\r\nTo: &quot;Benjamin Carlyle&quot; &lt;benjamincarlyle@...&gt;\r\nCc: &quot;REST Discuss&quot; &lt;rest-discuss@yahoogroups.com&gt;\r\nIn-Reply-To: &lt;1167824379.19975.55.camel@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nContent-Disposition: inline\r\nReferences: &lt;927441b30612281257l7e78242bs956220be1c51fe46@...&gt;\n\t &lt;1167518724.4637.12.camel@...&gt;\n\t &lt;927441b30612301708i20a9ac2eof97b0a9b80c946dd@...&gt;\n\t &lt;1167608196.5157.15.camel@...&gt;\n\t &lt;927441b30701021031j3a40df71g414a65a7ea5b1e00@...&gt;\n\t &lt;1167824379.19975.55.camel@...&gt;\r\nX-Google-Sender-Auth: efa055ab8f75f9e2\r\nX-eGroups-Msg-Info: 1:0:0:0\r\nX-eGroups-From: &quot;Hugh Winkler&quot; &lt;hughw@...&gt;\r\nFrom: &quot;Hugh Winkler&quot; &lt;hughw@...&gt;\r\nSubject: Re: [rest-discuss] Atompub missed opportunity\r\nX-Yahoo-Group-Post: member; u=148737865; y=W7sDhVbzgv-uHrqfi7cT1MbALz3esKjO1LSkQ_qAupo1f5Izog\r\nX-Yahoo-Profile: hwinkler99\r\n\r\nBenjamin,\n\n----------------------\nObjection: &quot;Clients can&#39;t be programmed to complete forms&quot;\n\nCounter-example: This machine automatically fills out a form based on\na vocabulary every day: Your web browser, when it pre-fills form\nfields for you. Browsers know that user name and password fields on\nHTML forms usually have consistent names. And Google Toolbar saves\nsome common personal info about you and auto-populates your name,\naddress, etc, based on a common vocabulary. You just program a client\nto map information it has, to fields identified by name -- a\nvocabulary.\n\n\n----------------------\nMisconception: &quot;Forms are schemas&quot;\n\nCorrection: Forms are  queries made by the server to the client. &quot;Give\nme the data you have named &#39;author-email&quot;.  Schemas describe relations\namong objects. They describe models, not messages.\n\n\n----------------------\n\nStarry-eyed delusion: A Standards process can capture the union of all\nthe semantics any server could manifest.\nCorollary: Exchanging these documents is &quot;scalable&quot;\n\nReal world experience: RosettaNet PIP 3A4. Thoroughly specified\nschemas describing almost every possible Purchase Order Request and\nResponse. Guess how long it takes one large computer manufacturer to\nshake out enough impedance mismatches to get going with each new\ntrading partner? 30-60 days, and that is a dedicated team of experts\nexchanging test messages, &quot;validating&quot; them, discovering and resolving\nthe semantic mismatches in even the &quot;valid&quot; documents. So that&#39;s one\nor two months per partner. How long does it take to ramp on just 100\npartners? Years. Not  web scale, is it?\n\nExchanging pre-defined special purpose documents, as APP does,\nsatisfies REST&#39;s definition, but it&#39;s not webby.  Forms have proven\ntheir scalability on the web, because they promote loose coupling.\nThey offer hope that web services could be deployed at web scale.\n\nHugh\n\n\nOn 1/3/07, Benjamin Carlyle &lt;benjamincarlyle@...&gt; wrote:\n&gt; On Tue, 2007-01-02 at 12:31 -0600, Hugh Winkler wrote:\n&gt; &gt; On 12/31/06, Benjamin Carlyle &lt;benjamincarlyle@...&gt; wrote:\n&gt; &gt; &gt; On Sat, 2006-12-30 at 19:08 -0600, Hugh Winkler wrote:\n&gt; &gt; &gt; &gt; On 12/30/06, Benjamin Carlyle &lt;benjamincarlyle@...&gt; wrote:\n&gt; &gt; &gt; &gt; &gt; I&#39;m not sure who you think will interpret this form on the client\n&gt; &gt; &gt; &gt; side.\n&gt; &gt; &gt; &gt; &gt; You see, the thing is that the atom document format is already a\n&gt; &gt; &gt; &gt; form. A\n&gt; &gt; &gt; &gt; &gt; client has already received the form by being programmed in a\n&gt; &gt; &gt; &gt; particular\n&gt; &gt; &gt; &gt; &gt; way, and is now submitting the form. It knows what information\n&gt; &gt; &gt; &gt; should be\n&gt; &gt; &gt; &gt; &gt; placed in each of the named fields. It knows how to construct the\n&gt; &gt; &gt; &gt; end\n&gt; &gt; &gt; &gt; &gt; document.\n&gt; &gt; &gt; &gt; Ah, but it is a standard form for all servers -- not for my particular\n&gt; &gt; &gt; &gt; server app. And to know what kind of form to submit, you read a spec\n&gt; &gt; &gt; &gt; -- you did not GET the description from the server. It&#39;s all baked in\n&gt; &gt; &gt; &gt; at design time.\n&gt; &gt; &gt; Exactly. It has been agreed ahead of time.\n&gt; &gt; That&#39;s the problem --- &quot;ahead of time&quot; rather than dynamically at run time.\n&gt;\n&gt; What you have to understand here, is that you are trying to replace\n&gt; human agreement with machine agreement. Humans are good at negotiating\n&gt; standards like atom. It&#39;s a hard problem, but standards get nailed out.\n&gt; Information producers agree to transform their internal models into the\n&gt; standard format. Information consumers agree that the standard format is\n&gt; a suitable source of data for their internal models. Internal models\n&gt; often have to bend as part of this process, and eventually realign\n&gt; around a competent standard to be more simliar than they are different.\n&gt;\n&gt; Machines are not good at negotiation. You give a machine a form to fill\n&gt; out, and the machine already needs to know how to fill out the form\n&gt; before it starts. The form says &quot;title&quot;, &quot;summary&quot;, &quot;content&quot;. The\n&gt; machine already needs an internal model that has those elements. The\n&gt; form says &quot;don&#39;t give me the summary&quot;, the client could have code\n&gt; written to say &quot;only send the subset of the standard which the server\n&gt; says it can accept&quot;. That&#39;s as good as you can do.\n&gt;\n&gt; You can&#39;t give a client an arbitrary form that isn&#39;t a simple subset and\n&gt; expect it to know what to do. If the client software wasn&#39;t written to\n&gt; know that only one author might be supported on the other side, it can&#39;t\n&gt; choose which author it should supply any better than the server side.\n&gt; You are lucky if it can interpret the server&#39;s instructions not to\n&gt; supply more than one at all.\n&gt;\n&gt; You can&#39;t arbitrarily place restrictions on the client as to how it\n&gt; should fill out its content. The only practical way to do it is to write\n&gt; a program that the client must run over a standard atom data model in\n&gt; order to fit the server&#39;s point of view. And guess what: That&#39;s the same\n&gt; program you would run on the server side if the client just submitted\n&gt; the atom document in the first place.\n&gt;\n&gt; Clients can&#39;t deal with unexpected server demands. Server demands are\n&gt; only expected if they are negotiated between humans, which is to say\n&gt; they are part of the atom specification. You can&#39;t do any better than\n&gt; what is in the standard by supplying a form.\n&gt;\n&gt; &gt; &gt;Now, I can just send my POST\n&gt; &gt; &gt; request and know that the server understands a useful subset of what I\n&gt; &gt; &gt; am sending them.\n&gt; &gt; Not sure how you would know it understands a useful subset. You won&#39;t\n&gt; &gt; have the slightest idea what parts of your document it understands, or\n&gt; &gt; doesn&#39;t. doesn&#39;t handle multiple authors? Can only accept text/plain\n&gt; &gt; for &lt;title&gt;?\n&gt;\n&gt; I know it understands because we agreed on the content through the atom\n&gt; standardisation process. We agreed that I would send this much and the\n&gt; server would understand that much. Whether understand means &quot;completely\n&gt; model&quot; is up to the server. It is free to cut the xhtml out of its\n&gt; title. It is even free to use the xhtml content as text/plain. That&#39;s\n&gt; its perrogative. What is not in its perrogative is to reject a\n&gt; well-formed and valid atom document. If it intends to do that it should\n&gt; not claim to understand atom in the first place.\n&gt;\n&gt; &gt; &gt; What you are suggesting is that I first need to obtain a schema document\n&gt; &gt; &gt; (which you are calling a form)\n&gt; &gt; A schema document is not a form. Maybe we should stay away from XML\n&gt; &gt; for a moment. Think HTML form...  which is a little &quot;program&quot; telling\n&gt; &gt; the UA how to serialize a submission.\n&gt;\n&gt; You are describing the set of valid documents I can submit to you. You\n&gt; can call it a form if you like, but it is more correctly a schema.\n&gt;\n&gt; If you are no longer talking about a schema, and are now talking about a\n&gt; program to transform my atom content into your sub-atom content... then\n&gt; why aren&#39;t you running that program on the server side?\n&gt;\n&gt; &gt; &gt; to see if the server is actually\n&gt; &gt; &gt; understanding only a subset of the atom vocabulary.\n&gt; &gt; Not a subset... could be a superset.\n&gt;\n&gt; Now you are talking about the client supplying more elements than it\n&gt; knows how to supply. You are presumably talking about extensions to the\n&gt; standard, but extensions are standards too. Extensions require human\n&gt; agreement between client and server in order to be understood.\n&gt;\n&gt; &gt; &gt; Then I need to\n&gt; &gt; &gt; customize my content to conform to this subset. As a machine, I don&#39;t\n&gt; &gt; &gt; have any good way of doing that.\n&gt; &gt; See, you have this problem anyway. If you are sending a server stuff\n&gt; &gt; it doesn&#39;t understand, or not enough stuff, your application will\n&gt; &gt; fail.\n&gt;\n&gt; But I have already agreed through the standardisation process with the\n&gt; server that it will understand my content. My application will only fail\n&gt; if the server fails to implement the specification.\n&gt;\n&gt; &gt; With forms, at least, your application knows &quot;Hey, I don&#39;t know how to\n&gt; &gt; fill out this required field&quot;. Same as a human would using an HTML\n&gt; &gt; form. Your client can report that to a human for correction.\n&gt;\n&gt; It only knows if I write code. I only write code if I have communicated\n&gt; with the guy who wrote the server about what is permissible. I have\n&gt; already done this. We called that conversation the atom standardisation\n&gt; process.\n&gt;\n&gt; Why do you think a human in the loop can do anything about the failure\n&gt; to communicate? Are they going to hack on their client application every\n&gt; time a server says it only understands an unexpectedly-small subset of\n&gt; atom or demands an extension element be supplied? No... if there is a\n&gt; human in the loop she will write an email to the server&#39;s administrator\n&gt; to inform him of his bug in failing to implement the specification. It\n&gt; is not the client&#39;s problem. It is the server&#39;s problem.\n&gt;\n&gt; &gt; Atom (and any application protocol based on exchanging known document\n&gt; &gt; types) has to trade off between exhaustively specifying application\n&gt; &gt; behavior and exhaustively specifying failure handling.\n&gt;\n&gt; And exhaustively supporting forwards-compatability for extensions, and\n&gt; exhaustively trading server and client-side complexity for protocol\n&gt; features.\n&gt;\n&gt; &gt; &gt;If I come up to a server that has\n&gt; &gt; &gt; support for an unexpectedly small subset of atom, I then have to\n&gt; &gt; &gt; customize my content in an unexpected way.\n&gt; &gt; It is better for you to do the customizing. TTake the example of a\n&gt; &gt; server that simply cannot honor text/html or application/xhtml+xml in\n&gt; &gt; the title field. It can only handle text/plain. Atom protocol says\n&gt; &gt; nothing at the moment about this situation, except that the server can\n&gt; &gt; change your POSted data as it needs to. So presently my server either\n&gt; &gt; a) rejects your submission or b) stores it as text/plain.  Better\n&gt; &gt; would be for your client to receive an Xform with a constraint\n&gt; &gt; specifiying &quot;text/plain&quot; only -- then, if the user had any imprtant\n&gt; &gt; rich content they wanted to put in the title, they can at least try to\n&gt; &gt; compensate.\n&gt;\n&gt; No no no.... the client doesn&#39;t know how to customise the content. As\n&gt; the author of the client I relied on the atom specification that says I\n&gt; can supply a content element and I did. Now your server is telling me it\n&gt; doesn&#39;t understand it and wants a summary element instead? My client is\n&gt; not written to deal with that. The server can deal with its own\n&gt; shortcomings, thankyou. If it doesn&#39;t understand the protocol it should\n&gt; stop speaking it.\n&gt;\n&gt; If the server doesn&#39;t understand xhtml in the title, then tough! It\n&gt; knows that it must be expected to deal with xhtml in the title because\n&gt; we agreed through the standardisation process that it should be capable.\n&gt; How it provides that support as the atom spec rightly points out is up\n&gt; to the server. Maybe it will strip out anything in angle-brackets before\n&gt; storing the value into its internal title variable. Maybe it will just\n&gt; use the xhtml content verbatim. That&#39;s the server&#39;s problem. It isn&#39;t\n&gt; permitted to reject my submission. How is my client supposed to know\n&gt; that what it needs to do in the face of this dumb server? We already\n&gt; agreed that xhtml was fine, and now this server wants to go back on\n&gt; that? Move complexity to me, will you? No thanks. I&#39;ll find another\n&gt; server to talk to. Maybe one that understands xhtml in the title.\n&gt;\n&gt; &gt; &gt;That is to say, I way that\n&gt; &gt; &gt; noone programmed me to customise my content in :)\n&gt; &gt; Well, you would have programmed it from this pov, so you would have\n&gt; &gt; handled these exceptional situations.\n&gt;\n&gt; I don&#39;t write client software to deal with broken servers that don&#39;t\n&gt; implment the spec. It is up to the server to deal with the problem if it\n&gt; can&#39;t translate my request precisely.\n&gt;\n&gt; &gt; &gt; The server, on the other hand, is in a good position to customise the\n&gt; &gt; &gt; content. It knows which subset of atom it understands, and it knows what\n&gt; &gt; &gt; atom is generally. It knows multiple authors might be required, so is in\n&gt; &gt; &gt; a position to either model those multiple authors or use an algorithm to\n&gt; &gt; &gt; select an author for its model from the available list.\n&gt; &gt; See above. Yes, you are describing the undesirable behavior the\n&gt; &gt; current APP forces you into.\n&gt;\n&gt; Quite the opposite. Your suggestion doesn&#39;t hold water. The spec\n&gt; reflects decades of experience in developing protocols that work and can\n&gt; evolve succesfully for decades to come. Do you think you can do better\n&gt; without having written software on more than one side of the\n&gt; client/server fence?\n&gt;\n&gt; &gt; &gt; &gt; What I proposed is that the form delivered by a server have just the\n&gt; &gt; &gt; &gt; elements that make sense for the server. My server might not know what\n&gt; &gt; &gt; &gt; to do with a &lt;source&gt; element. Using the standard &quot;form&quot;, my server\n&gt; &gt; &gt; &gt; has to have handling in place if you submit a &lt;source&gt; element, and it\n&gt; &gt; &gt; &gt; has to describe to you the problem if you do submit &lt;source&gt; and my\n&gt; &gt; &gt; &gt; server rejects it.\n&gt; &gt; &gt; All atom elements make sense to the server, even if they don&#39;t fit the\n&gt; &gt; &gt; server&#39;s internal model.\n&gt; &gt; &gt; The server implements atom, after all.\n&gt; &gt; not so -- the client may submit extgension elements the server isn&#39;t aware of.\n&gt;\n&gt; And the server is required to ignore them and the client is required to\n&gt; accept that old servers will ignore them. That&#39;s the way extensible\n&gt; protocols work. If the extension is good it will be supported. If it is\n&gt; not it will be ignored, sidelined, and eventually forgotten.\n&gt;\n&gt; &gt; &gt; What you\n&gt; &gt; &gt; are suggesting is adding an extra message exchange to move the\n&gt; &gt; &gt; complexity of fitting atom into the server&#39;s model back to the client.\n&gt; &gt; &gt; Neither side is going to be great at solving a model mismatch problem,\n&gt; &gt; &gt; but the client is likely to be downright incapable.\n&gt; &gt; As above: The client is in the best position to take corrective\n&gt; &gt; action, so as to best fulfill its intent.\n&gt;\n&gt; Show me the code. Your solution requires me to write client-side code\n&gt; every time a new kind of dumb server is placed on the internet. That\n&gt; doesn&#39;t work. That doesn&#39;t scale. Machines can&#39;t negotiate, only humans\n&gt; can... and we already have. If you have anything more to add to that\n&gt; conversation you had better to do it. Don&#39;t try to hold a separate\n&gt; conversation with my client software. It doesn&#39;t know how to hold that\n&gt; conversation.\n&gt;\n&gt; &gt; Forms made the web adaptive. Go to any airline reservation web site.\n&gt; &gt; They&#39;re all the same, but different too. They mostly do the same\n&gt; &gt; things, but Orbitz offers packages with hotels and cars, while Delta\n&gt; &gt; offers connections with partner airlines, and  Priceline won&#39;t let you\n&gt; &gt; see the itinerary. There&#39;s some shared vocabulary among all those\n&gt; &gt; sites but varying behavior. If the airlines standardize their\n&gt; &gt; vocabulary for forms, you could program a client to interact,\n&gt; &gt; adaptively, with all those sites. But you could not constrain\n&gt; &gt; Priceline&#39;s app to squeeze into the same behavior model as Delta&#39;s.\n&gt; &gt; And you shouldn&#39;t -- you should encourage diversity among web apps, as\n&gt; &gt; has been successful on the web to date.\n&gt;\n&gt; The evolvability of HTML and HTTP are what have been successful on the\n&gt; web to date. Atom follows the evolvability and agreement model of its\n&gt; predecessors. Do you really want your web server to have to retrieve a\n&gt; form from every browser that requests a html page before it can be\n&gt; returned? When that form says &quot;I don&#39;t understand paragraph markers&quot;,\n&gt; what will your web server do to make the content fit?\n&gt;\n&gt; Benjamin.\n&gt;\n&gt;\n\n"}}
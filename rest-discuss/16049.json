{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"0ca1J-1iiTKMvs9ROdsx0iE-VL6IwElUxcpNzxOFisAmLyKa5foTYYkqm_4GFCmcmX5cRJKc415ZAOnCJi0c6d8R3A1P_5sx4fKrjX4nuQ","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Google proposes RPC style APIs over REST","postDate":"1280534305","msgId":16049,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMTAwNzMwMTc1ODI1LjY1NTZmZGEyLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","inReplyToHeader":"PDEyODA1MjY4OTcuMjQzNi40NzcuY2FtZWxAZGVob3JhLWxhcHRvcD4=","referencesHeader":"PGkydGhyditzZjd0QGVHcm91cHMuY29tPgk8MjAxMDA3MzAwMzA5NDIuZmQyZTE0MjAuZXJpY0BiaXNvbnN5c3RlbXMubmV0Pgk8MTI4MDUxNzU4MS4yNDM2LjIyOC5jYW1lbEBkZWhvcmEtbGFwdG9wPgk8MjAxMDA3MzAxMzQ4MDMuZDI3ODk2Y2QuZXJpY0BiaXNvbnN5c3RlbXMubmV0Pgk8MTI4MDUyNjg5Ny4yNDM2LjQ3Ny5jYW1lbEBkZWhvcmEtbGFwdG9wPg=="},"prevInTopic":16048,"nextInTopic":16050,"prevInTime":16048,"nextInTime":16050,"topicId":16015,"numMessagesInTopic":60,"msgSnippet":"... I defined HEAD, GET and POST for the same example URI.  POST is only incorrect if the request has retrieval semantics, because those semantics are defined","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 55902 invoked from network); 30 Jul 2010 23:59:05 -0000\r\nX-Received: from unknown (98.137.34.46)\n  by m11.grp.re1.yahoo.com with QMQP; 30 Jul 2010 23:59:05 -0000\r\nX-Received: from unknown (HELO mxout-08.mxes.net) (216.86.168.183)\n  by mta3.grp.sp2.yahoo.com with SMTP; 30 Jul 2010 23:59:05 -0000\r\nX-Received: from bigbison (unknown [65.117.211.162])\n\t(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))\n\t(No client certificate requested)\n\tby smtp.mxes.net (Postfix) with ESMTPSA id BDD8E509B4;\n\tFri, 30 Jul 2010 19:59:04 -0400 (EDT)\r\nDate: Fri, 30 Jul 2010 17:58:25 -0600\r\nTo: bill@...\r\nCc: Suresh &lt;sureshkk@...&gt;, rest-discuss@yahoogroups.com\r\nMessage-Id: &lt;20100730175825.6556fda2.eric@...&gt;\r\nIn-Reply-To: &lt;1280526897.2436.477.camel@dehora-laptop&gt;\r\nReferences: &lt;i2thrv+sf7t@...&gt;\n\t&lt;20100730030942.fd2e1420.eric@...&gt;\n\t&lt;1280517581.2436.228.camel@dehora-laptop&gt;\n\t&lt;20100730134803.d27896cd.eric@...&gt;\n\t&lt;1280526897.2436.477.camel@dehora-laptop&gt;\r\nOrganization: Bison Systems Corporation\r\nX-Mailer: Sylpheed 3.0.3 (GTK+ 2.10.14; i686-pc-mingw32)\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nSubject: Re: [rest-discuss] Google proposes RPC style APIs over REST\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\nBill de h=D3ra wrote:\n&gt;\n&gt; &gt; \n&gt; &gt; &gt; I&#39;d agree with PUT over POST because you=\r\n get a caching option\n&gt; &gt; &gt; (which is usually what you want for image opera=\r\ntions). Whether to\n&gt; &gt; &gt; use GET seems like an it depends thing - if a reso=\r\nurce was\n&gt; &gt; &gt; created as a side effect of that GET, then GET was not the r=\r\night\n&gt; &gt; &gt; thing.\n&gt; &gt; &gt; \n&gt; &gt; \n&gt; &gt; There&#39;s no rule against GET creating a re=\r\nsource; GET just means the\n&gt; &gt; client didn&#39;t request it and can&#39;t be held t=\r\no account for it.\n&gt; \n&gt; No argument. But that doesn&#39;t explain why POST is in=\r\ncorrect.\n&gt; \n\nI defined HEAD, GET and POST for the same example URI.  POST i=\r\ns only\nincorrect if the request has retrieval semantics, because those\nsema=\r\nntics are defined for GET.  So it&#39;s a violation of the self-\ndescriptive me=\r\nssaging constraint, as surely as if Google&#39;s search\ninterface were to make =\r\nun-cacheable POST requests.  What&#39;s really\nincorrect is this notion that ro=\r\ntate is a verb, not a parameter.\n\nIf GET /image.jpg is your only dereferenc=\r\neable resource, then the only\nway you&#39;re going to avoid the lost-update pro=\r\nblem is to have the client\nrotate the image and PUT it back, as per slide 5=\r\n3.  OTOH, if you treat\nrotation as a parameter, you create a finite set of =\r\nsubresources which\ncan respond to GET or HEAD requests with Etags represent=\r\ning each\npossible state of the parent resource.\n\nThis is the only way to av=\r\noid lost-update, and quite elegantly at\nthat.  Each time the parent image i=\r\ns rotated, the set of subresources\nchanges, generating new Etags.  The Etag=\r\n of /image.jpg doesn&#39;t factor\nin, except on PUT, if POSTs all have query st=\r\nrings (i.e. we don&#39;t\ndefine an action for POST /image.jpg without a query).=\r\n  So my way&#39;s\nrobust if a 200 response is dropped, in addition to avoiding =\r\nlost-\nupdate.\n\nSomething about &quot;allow[ing] the forces that influence system=\r\n behavior to\nflow naturally, in harmony with the system&quot; seems to apply her=\r\ne.  Using\nPOST to toggle a rotation in an RPC fashion is not in harmony wit=\r\nh the\nREST paradigm of transferring representations of application state.\n\n=\r\n&gt; \n&gt; &gt; If I can create form markup that builds that query, and return 400\n&gt;=\r\n &gt; for any value over 360 or under -360, well, that&#39;s about as simple\n&gt; &gt; a=\r\ns hypertext REST APIs get.\n&gt; \n&gt; I don&#39;t follow your argument, as POST and G=\r\nET are equally valid for a\n&gt; form.\n&gt;\n\nI deliberately didn&#39;t specify method.=\r\n  Forms define a set of resources\non which any method may be called, provid=\r\ned it&#39;s supported by the forms\nlanguage.  GET dereferences a rotated repres=\r\nentation of the parent\nresource.  PUT or POST executes a rotation of the pa=\r\nrent resource,\ndepending on whether an entity body is sent, using the repla=\r\ncement\nsemantics of PUT or the process-this semantics of POST.  GET isn&#39;t\nd=\r\noing any rotating, it&#39;s dereferencing subresources identified by\nparameter.=\r\n  REST examples don&#39;t come any simpler.\n\n&gt;\n&gt; The decision point seems to be=\r\n a whether a resource was created\n&gt; or not - only the server can know and t=\r\nhe server therefore can\n&gt; dictate the appropriate method (especially if its=\r\n forms driven). So\n&gt; either method may be appropriate.\n&gt; \n\nI think that&#39;s a=\r\n paper tiger.  It only matters whether a resource was\ncreated, in those cas=\r\nes where a 201 response needs to be generated,\ni.e. the user instructed the=\r\n user agent to create a new resource (like\nposting the image in the first p=\r\nlace).  The decision point is RPC vs.\nREST.  Do you have POST-only endpoint=\r\ns, or can you also GET them?\n\nGranted, RPC typically means you have some /s=\r\nervice endpoint that can&#39;t\nbe dereferenced, and everything beyond it is a q=\r\nuery-string POST.  In\nthis case, Google allows /service (as /image.jpg) to =\r\nbe dereferenced,\nbut this only makes it less RPC-ish, not more RESTful, sin=\r\nce the key\nconstraint being violated is identification of resources.  The r=\r\nesult\nis the same, everything beyond the endpoint is a query-string POST.\n\n=\r\nTreating rotation as a parameter is a lot less dangerous than treating\nit a=\r\ns a tunneled method.  If it&#39;s a parameter, it&#39;s easy to define\nwhich resour=\r\nces of interest need their own identifier -- one URI for\neach of 360 degree=\r\ns of rotation, or one URI for each of four 90-degree\nrotations, and 4xx the=\r\n rest.\n\n(I should have used /image.jpg;rot=3D90 as my example, to make it m=\r\nore\nclear that rotation is just a parameter, not a method or a query.)\n\n-Er=\r\nic\n\n"}}
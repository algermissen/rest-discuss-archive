{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"rN8YTbR92t1nM9Bl8A4wb3ROFgLOecHXwKT2L0OYTkuCe7S3ulbQPVIft8_aEkMBOjTEOG0PcnP2JzTVGlhkx20fLsoiYOOeoEI-YiSFZQ","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] URI design, part 2","postDate":"1354345722","msgId":19198,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMTIxMjAxMDAwODQyLmIyNGY5NGQwLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","inReplyToHeader":"PENBTk1QazI0aHJRN3JYN2FLY3Y4TEh4S1AzQloraU9pVVZYd1lWdDZ2eUFDQTJNc3NfZ0BtYWlsLmdtYWlsLmNvbT4=","referencesHeader":"PENBTk1QazI3MmlTb0UzNFlLUzlBX3BNK2N0ejJvYjg5TS12M2txUGkxRHF1d2dpNkpqZ0BtYWlsLmdtYWlsLmNvbT4JPENGNTUyMDExLUI0MTgtNEFFNC04MEM2LTQzRjk5MTJFQTcyNUBuaWNrc2hhbmtzLmNvbT4JPDIwMTIxMTMwMTQxMjU0LmYzZDU5ZmE4LmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPENBTk1QazI0aHJRN3JYN2FLY3Y4TEh4S1AzQloraU9pVVZYd1lWdDZ2eUFDQTJNc3NfZ0BtYWlsLmdtYWlsLmNvbT4="},"prevInTopic":19197,"nextInTopic":19199,"prevInTime":19197,"nextInTime":19199,"topicId":19187,"numMessagesInTopic":28,"msgSnippet":"... Well, what are you expecting to GET from /cancel, or are you just using that URL to invoke a procedure? If so, then there are a few places Roy s thesis","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 68178 invoked from network); 1 Dec 2012 07:09:01 -0000\r\nX-Received: from unknown (98.137.35.161)\n  by m3.grp.sp2.yahoo.com with QMQP; 1 Dec 2012 07:09:01 -0000\r\nX-Received: from unknown (HELO mxout-08.mxes.net) (216.86.168.183)\n  by mta5.grp.sp2.yahoo.com with SMTP; 1 Dec 2012 07:09:01 -0000\r\nX-Received: from bigbison (unknown [65.117.211.162])\n\t(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))\n\t(No client certificate requested)\n\tby smtp.mxes.net (Postfix) with ESMTPSA id C069A509B5;\n\tSat,  1 Dec 2012 02:09:00 -0500 (EST)\r\nDate: Sat, 1 Dec 2012 00:08:42 -0700\r\nTo: Max Toro &lt;maxtoroq@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nMessage-Id: &lt;20121201000842.b24f94d0.eric@...&gt;\r\nIn-Reply-To: &lt;CANMPk24hrQ7rX7aKcv8LHxKP3BZ+iOiUVXwYVt6vyACA2Mss_g@...&gt;\r\nReferences: &lt;CANMPk272iSoE34YKS9A_pM+ctz2ob89M-v3kqPi1Dquwgi6Jjg@...&gt;\n\t&lt;CF552011-B418-4AE4-80C6-43F9912EA725@...&gt;\n\t&lt;20121130141254.f3d59fa8.eric@...&gt;\n\t&lt;CANMPk24hrQ7rX7aKcv8LHxKP3BZ+iOiUVXwYVt6vyACA2Mss_g@...&gt;\r\nOrganization: Bison Systems Corporation\r\nX-Mailer: Sylpheed 3.1.1 (GTK+ 2.10.14; i686-pc-mingw32)\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=US-ASCII\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nSubject: Re: [rest-discuss] URI design, part 2\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\nMax Toro wrote:\n&gt;\n&gt; What I&#39;d love to get is an answer like: POST /orders/1/cancel is not\n&gt; REST compliant because chapter x of Fielding&#39;s dissertation explicitly\n&gt; or implicitly says it&#39;s not allowed or it&#39;s discouraged. After knowing\n&gt; what is or isn&#39;t REST then I&#39;d love to learn more about the pros and\n&gt; cons of different architectural and implementation styles.\n&gt;\n\nWell, what are you expecting to GET from /cancel, or are you just using\nthat URL to invoke a procedure? If so, then there are a few places Roy&#39;s\nthesis admonishes against it in Chapter 6 -- the rest of REST is about\npositive, rather than negative, reinforcement of the identification of\nresources constraint. Suggested reading: 6.5.2; 6.2.1, in particular:\n&quot;REST [defines] a resource to be the semantics of what the author\nintends to identify.&quot;\n\nNot the semantics of a method invocation.  What does /cancel identify?\nSounds to me like a method of tunneling DELETE through POST which\nidentifies nothing, iow a procedure endpoint, which is characteristic\nof various styles but not of the REST style.  The hypertext constraint\nonly makes sense if your resources make sense, in that their URLs are\nidentifiers rather than endpoints.\n\nRoy&#39;s thesis really must be considered in its entirety, to understand\nthe uniform interface constraint (of which identification of resources\nis a sub-constraint).  Chapter 1 introduces the notion of applying\ndesign-by-constraint to networked software architecture, as inspired\nby Eames IIRC.  &quot;A style is a named set of constraints on architectural\nelements that induces the set of properties desired of the\narchitecture.&quot; (4.3)\n\nChapter 2 defines terminology associated with networked software\narchitecture, which is required for understanding Chapter 3, which lays\nout a methodology for evaluating various styles and applies this to\nseveral examples.  Most importantly, Chapter 3 identifies the\nconstraints associated with various styles, and describes the properties\nthey induce in a system (which may or may not be beneficial or\ndetrimental to the system you&#39;re designing; remember there is no best\narchitecture, only that which is best for your system).  Which is of\ncourse required for understanding Chapter 4.\n\nChapter 4 considers the problems raised by the WWW, and suggests that\nthe architecture may be improved by applying design-by-constraint to it,\nin order to address those problems.  First, by identifying the desirable\nproperties of the early Web, and the constraints responsible for them;\nnext, by extending that architecture by adding additional constraints,\nresulting in a new hybrid style consisting of aspects of existing\nstyles. Of course, this is required for understanding Chapter 5.\n\n&quot;REST provides a set of architectural constraints that, WHEN APPLIED\nAS A WHOLE, emphasizes scalability of component interactions, generality\nof interfaces, independent deployment of components, and intermediary\ncomponents to reduce interaction latency, enforce security, and\nencapsulate legacy systems.&quot; (4.4)\n\nWhich brings us to Chapter 5, and the short answer to your question:\n&quot;POSTing to /cancel violates the Identification of Resources constraint,\nand is therefore unRESTful.&quot;  But I&#39;ve found that just giving that\nanswer tends to upset folks who&#39;ve only read Chapter 5, then they get\ndefensive about why can&#39;t they call their API RESTful, accusations of\npedantry follow, and threads devolve into general ugliness, heheh...\n\nMy point is, you&#39;ll have a much harder time trying to understand REST\nby being told bluntly what is and isn&#39;t RESTful, than you will by\nreading Roy&#39;s thesis in its entirety.  As computer science dissertations\ngo, Roy produced a functional work of art, much as an Eames chair isn&#39;t\njust a piece of furniture.  Understanding what the constraints are, and\nwhere they come from, is vital to understanding how they&#39;re applied to\nthe Web to derive REST, and why they must be implemented as a whole to\nachieve REST.\n\nOnly then will it become apparent when they&#39;re being violated, as in\nthe example given of POSTing to an unGETtable /cancel URL.  That level\nof understanding comes from the bottom up, not from the top down, IMO.\nKnowing what is or isn&#39;t REST depends on understanding the pros and\ncons of various architectural styles, because that&#39;s what constraints\nare, and constraints must be understood before their application to the\nWeb as REST can be understood.\n\nMore importantly, understanding REST as a style makes one a better\narchitect, because sometimes it&#39;s advantageous to deviate from REST&#39;s\nconstraints.  Which is why I&#39;m always on about how saying something\nisn&#39;t REST is not a value judgment, just a fact.  Understanding Roy&#39;s\nthesis allows you to identify the constraints you have applied, and\nunderstand that as its own architectural style derived from REST, to\nuse as a guide to developing that system -- but also to understand\nwhich desirable properties of REST you&#39;re forfeiting in the bargain.\n\nMaking informed decisions about which constraints to apply, is making\nuse of REST as a tool for long-term development.  It may not be\nfeasible to apply all the constraints initially, if REST is truly what\nyour system needs.  In which case your system design can account for\nthis, becoming more RESTful over time, instead of painting yourself\ninto a corner where the system needs re-architecting rather than\nimplementing another constraint as an extension.\n\n-Eric\n\n"}}
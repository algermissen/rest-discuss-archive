{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":112610298,"authorName":"Roger L. Costello","from":"&quot;Roger L. Costello&quot; &lt;costello@...&gt;","replyTo":"SENDER","senderId":"pPZMST59LY6C6McvG9gbuLOkoD6EOz9ToovINK0mL2gZAOrSILYTISvi6dj35VAvOwImS3WfUDmjticEGwcQFa-SXS5b0yu1FlQiLvq8_g","spamInfo":{"isSpam":false,"reason":"12"},"subject":"REST Issues","postDate":"1118000385","msgId":5084,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMDUwNjA1MTkzOS5qNTVKZG5LMDI4ODdAc210cC1iZWRmb3JkLWRyLm1pdHJlLm9yZz4="},"prevInTopic":0,"nextInTopic":5085,"prevInTime":5083,"nextInTime":5085,"topicId":5084,"numMessagesInTopic":13,"msgSnippet":"Hi Folks, A colleague and I have put together a list of issues (below) that we have heard raised in objection to REST.  We have tried to address each of these ","rawEmail":"Return-Path: &lt;costello@...&gt;\r\nX-Sender: costello@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 20479 invoked from network); 5 Jun 2005 19:39:51 -0000\r\nReceived: from unknown (66.218.66.167)\n  by m23.grp.scd.yahoo.com with QMQP; 5 Jun 2005 19:39:51 -0000\r\nReceived: from unknown (HELO smtp-bedford-dr.mitre.org) (192.160.51.65)\n  by mta6.grp.scd.yahoo.com with SMTP; 5 Jun 2005 19:39:50 -0000\r\nReceived: from smtp-bedford-dr.mitre.org (localhost.localdomain [127.0.0.1])\n\tby smtp-bedford-dr.mitre.org (8.11.6/8.11.6) with SMTP id j55JdoA02935\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Sun, 5 Jun 2005 15:39:50 -0400\r\nReceived: from smtp-bedford-dr.mitre.org (localhost.localdomain [127.0.0.1])\n\tby smtp-bedford-dr.mitre.org (Postfix) with ESMTP id EA8B74F8D8\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Sun,  5 Jun 2005 15:39:49 -0400 (EDT)\r\nReceived: from MAILHUB2 (mailhub2.mitre.org [129.83.28.8])\n\tby smtp-bedford-dr.mitre.org (8.11.6/8.11.6) with ESMTP id j55JdnK02887;\n\tSun, 5 Jun 2005 15:39:49 -0400\r\nMessage-Id: &lt;200506051939.j55JdnK02887@...&gt;\r\nReceived: from mm118907-pc.mitre.org (129.83.57.26) by mailhub2.mitre.org with SMTP\n        id 12819858; Sun, 05 Jun 2005 15:39:44 -0400\r\nTo: &lt;rest-discuss@yahoogroups.com&gt;\r\nDate: Sun, 5 Jun 2005 15:39:45 -0400\r\nMIME-Version: 1.0\r\nContent-Type: multipart/alternative;\n\tboundary=&quot;----=_NextPart_000_01BB_01C569E4.CC800890&quot;\r\nX-Mailer: Microsoft Office Outlook, Build 11.0.5510\r\nX-MIMEOLE: Produced By Microsoft MimeOLE V6.00.2900.2180\r\nThread-index: AcVqBlNf1UUhVF+vQdmrZC5bqk8ZWg==\r\nX-eGroups-Msg-Info: 1:12:0\r\nFrom: &quot;Roger L. Costello&quot; &lt;costello@...&gt;\r\nSubject: REST Issues\r\nX-Yahoo-Group-Post: member; u=112610298\r\n\r\n\r\n------=_NextPart_000_01BB_01C569E4.CC800890\r\nContent-Type: text/plain;\n\tcharset=&quot;us-ascii&quot;\r\nContent-Transfer-Encoding: 7bit\r\n\r\nHi Folks,\n \nA colleague and I have put together a list of issues (below) that we have\nheard raised in objection to REST.  We have tried to address each of these\nissues.  We invite you to participate by:\n \n1. Adding your own response to these issues. \n2. We invite you to respond to our responses, i.e., are our responses to the\nissues correct, compelling and logical?  \n \n/Roger\n \nBTW, I really like the the term &quot;REST design pattern&quot;.  You will see that we\nhave used it liberally in the below writeup. \n \n\nREST Issues\n\n\nRoger L. Costello and Timothy D. Kehoe\n\n\nREST is a set of design patterns for large scale networked applications. The\nREST design patterns have been employed on the Web for 20 years. It has a\nproven track record. Yet despite this, there are still many questions and\nissues being raised. Some of them are legitimate and deserve attention.\nBelow we identify some of the issues that have been raised.\n\n\nIssue 1: Workflow requires multiple machine-to-machine (M2M) interactions.\nHTTP was not designed for multiple M2M interactions. Therefore REST is\ninadequate for workflow.\n\nIt is true that the original purpose of HTTP was to be a point-to-point\nprotocol. But that doesn&#39;t mean that HTTP is inapplicable; it simply means\nthat it needs to be repurposed. It is very common for technologies to be\nrepurposed to meet needs that weren&#39;t originally conceived. Consider lasers:\ntheir original purpose was to be a weapon. When lasers were created in the\n40&#39;s no one envisioned that they would ultimately be used to play CDs and\nDVDs, or used as pointers to Powerpoint presentations!\n\nIt should be pointed out that SOAP wasn&#39;t designed for what it&#39;s being used\nfor today. It was originally designed as a technology for serializing\nobjects to do remote procedure calls, i.e., a Simple Object Access Protocol.\n\n \n\n\nIssue 2: A SOAP header enables expression of Quality of Service (QoS).\n\nWe agree that QoS is an important feature, but we disagree that QoS\ninformation should be hidden inside a header (which is hidden inside a SOAP\nenvelope). QoS information should be elevated right up front in a URL.\n\nSuppose that you were to put QoS information inside a SOAP header. How\nwould, say, priorities be expressed? As 1, 2, 3? As high, medium, low? Why\ncouldn&#39;t you simply have three different URLs, one for each priority queue?\nFor example:\n\nThe URL for high-priority clients:\n\nhttp://www.example.org/xpress\n\n\n\nThe URL for medium-priority clients:\n\nhttp://www.example.org/expedited\n\n\n\nThe URL for low-priority clients:\n\nhttp://www.example.org\n\n\n\nThere is an important lesson to be learned from this:\n\nURLs are cheap! Use them!\n\nThere are many advantages to using multiple URLs to express QoS: \n\n\n*\tYou can assign the URLs to different machines - use a fast machine\nfor the high priority service. \n\n*\tThis REST QoS design pattern scales nicely and facilitates load\nbalancing. \n\nThus we see that embedding QoS info inside a SOAP header is only one\napproach, and not necessarily the best approach.\n\nIn fact, if we look to the real world we see the REST QoS design pattern\nemployed in countless places. Consider making an airline reservation:\nthere&#39;s an 800 number for the regular customer, an 800 number for frequent\nflyers, and an 800 number for elite members. This lesson was learned long\nago in the real world:\n\nTelephone numbers are cheap! Use them!\n\nThere are countless other examples where the REST QoS design pattern is\nemployed: bank queues, highway express lanes, etc.\n\n\nIssue 3: A SOAP header enables expression of security.\n\nLet&#39;s start from basic principles. The basis of all security is to identify\nwho you are. Based upon who you are defines what you can do. In our company\nthe direction on authentication (i.e., determining who you are) is PKI/PKE.\nOur perspective is that when you invoke a web service you are invoking a\nblack box. (Note that this is consistent with layered architectures) Thus, a\nclient identifies who he is using a PKI certificate and the web service\ndecides what it can do, given the client&#39;s access privileges.\n\nCertainly it is possible to embed a PKI certificate inside a SOAP header.\nBut why not attach it to the outermost envelope (HTTP) rather than embedding\nit within two layers of SOAP wrapping? We acknowledge that there may be some\nsecurity things that you currently can&#39;t attach to an HTTP header (e.g.,\nKerberos tickets). The question, then, is: &quot;Where is the right place to\nstandardize? Should the standardization be done at the HTTP level, or at the\nSOAP level?&quot; This is a critical issue. The issue is not whether to\nstandardize but, rather, where to standardize. We have coined a term which\nwe feel is generally applicable:\n\nThe Principle of the Highest Standard\n\n&quot;Given two standards bodies, one which encompasses the other (i.e., is a\nhigher standards body), it is better to standardize at the higher level,\ni.e., with the higher standards body.&quot;\n\nThe rationale for this principle is as follows. Consider HTTP. It is the\nuniversal protocol of the Web. It impacts all Web technologies. There has\nbeen a lot of innovation based on HTTP. And since HTTP is such a widely\nimpacting technology, there are many eyes on it and the HTTP committee is\nheld to a very high barometer. Thus it generates a standard that is open and\nless likely to be influenced by powerful corporate interests. Conversely\nSOAP is, relatively, a small and isolated Web technology. Standardization\nwithin the SOAP technology will have little impact on the majority of the\nWeb. This diminishes the opportunity for innovation. \n\nSo, getting back to the issue of security. Let&#39;s assume that HTTP does not\nsupport some security feature, say, Kerberos tickets. Should standardization\noccur at the SOAP level to incorporate Kerberos tickets within a SOAP\nheader? Or, should standardization occur at the HTTP level? The Principle of\nHighest Standard makes the answer clear - the standardization should occur\nat the HTTP level. Thus, we would recommend that the HTTP working group\nextend the HTTP standard. If there is security at the HTTP level then it\nbroadens the options for security on all media, e.g., XHTML pages, audio\nfiles, MPEG files, or even plain HTML pages. Conversely, if the security is\nembedded within SOAP then it isolates the solution to only that use (only to\nSOAP tool vendors). \n\n \n\n\nIssue 4: Embedding security in SOAP enables passing around the security\ninformation, thereby facilitating single sign-on.\n\nWhy is it easier to extract security information from a SOAP header than it\nis to extract security information from an HTTP header? I can extract\ninformation from the HTTP header and pass it around (put it into another\nHTTP header) just as easily (or easier) as passing around XML. \n\nLet&#39;s explore this issue of passing security information around in more\ndepth. One of three things can happen when you invoke a web service. Let&#39;s\nconsider the three cases: \n\n\n1.\tAll the work is done at the Web service, and the results are\nreturned. It seems reasonable that some sort of identity token such as PKI\nshould be sufficient for security. \n\n2.\tThe Web service has to call on other services because it&#39;s an\naggregator. Instead, the Web service could simply pass back to the client\nall the links and let the client execute all the separate steps. (Recurse on\neach of these until you get to the first model.) \n\n3.\tThe Web service processes the information that it retrieves from\nother services, i.e., the Web service adds value. The Web service is\nconfronted with two alternatives: \n\n\n*\tShould the Web service pass the client&#39;s PKI certificate (thus, the\nWeb service is pretending to be the client)? This smells of forgery,\ndeception, man-in-the-middle. This is not an attractive option. \n\n*\tOr, should the Web service pass its own PKI certificates? The\nproblem is that the Web service&#39;s certificate may have access privileges\nthat the client doesn&#39;t have, or vice versa. \n\nWe agree that there is an issue here. We need some way of chaining\ncertificates. We recommend approaching the HTTP working group to ask for an\nextension to support chaining. \n\nNote: It&#39;s certainly okay to have both camps (REST and SOAP) work on the\nproblem and let the marketplace sort it out. \n\n\nIssue 5: SOAP can be wrapped in different wrappers (HTTP, SMTP, etc). So, if\none wrapper is unsuitable then simply wrap the SOAP in a more suitable\nwrapper. REST always requires wrapping in HTTP. Thus, you are forever stuck\nwith the limitations of HTTP.\n\nThis is simply false. HTTP itself can be wrapped in any number of different\nwrappers. Example, we could wrap HTTP (a synchronous protocol) within an\nSMTP wrapper and thus has an asynchronous protocol.\n\n\nSome Key Advantages of REST\n\n\n1.\tREST gets you talking about resources and information and data\nsharing. The focus is on the data. This is consistent with the goal of\nNet-centrity - information sharing. Information sharing is what the Web is\nall about. The Web is a distributed hypermedia system. The Web is\nimplemented with HTTP. REST is a design pattern that uses HTTP. \n\n2.\tREST has a proven track record. Contrast with SOAP which is yet to\nbe proven. \n\n\r\n------=_NextPart_000_01BB_01C569E4.CC800890\r\nContent-Type: text/html;\n\tcharset=&quot;us-ascii&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot;&gt;\n&lt;HTML&gt;&lt;HEAD&gt;=\r\n\n&lt;META http-equiv=3DContent-Type content=3D&quot;text/html; charset=3Dus-ascii&quot;&gt;=\r\n\n&lt;META content=3D&quot;MSHTML 6.00.2900.2627&quot; name=3DGENERATOR&gt;&lt;/HEAD&gt;\n&lt;BODY&gt;\n&lt;D=\r\nIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;SPAN class=3D155311819-05062005&gt;Hi \nFolks,&lt;=\r\n/SPAN&gt;&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;SPAN \nclass=3D1553118=\r\n19-05062005&gt;&lt;/SPAN&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;SP=\r\nAN class=3D155311819-05062005&gt;A colleague and I \nhave put together a list o=\r\nf issues&nbsp;(below)&nbsp;that we have heard raised \nin objection to REST.=\r\n&nbsp; We have tried to address each of these issues.&nbsp; \nWe invite you =\r\nto participate by:&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;SP=\r\nAN \nclass=3D155311819-05062005&gt;&lt;/SPAN&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=\r\n=3DArial size=3D2&gt;&lt;SPAN class=3D155311819-05062005&gt;1. Adding \nyour&nbsp;own=\r\n response&nbsp;to these issues.&nbsp;&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=\r\n=3DArial size=3D2&gt;&lt;SPAN class=3D155311819-05062005&gt;2. We invite you to \nres=\r\npond to our responses, i.e., are our responses to the issues correct, \ncomp=\r\nelling&nbsp;and logical?&nbsp; &lt;/SPAN&gt;&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial=\r\n size=3D2&gt;&lt;SPAN \nclass=3D155311819-05062005&gt;&lt;/SPAN&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV=\r\n&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;SPAN \nclass=3D155311819-05062005&gt;/Roger&lt;/SPAN=\r\n&gt;&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;SPAN \nclass=3D155311819-05=\r\n062005&gt;&lt;/SPAN&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;SPAN cl=\r\nass=3D155311819-05062005&gt;BTW, I really like \nthe the term &quot;REST design patt=\r\nern&quot;.&nbsp; You will see that we have used it \nliberally in the below write=\r\nup.&nbsp;&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;&nbsp=\r\n;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT size=3D2&gt;&lt;SPAN class=3D155311819-05062005&gt;\n&lt;CENTER&gt;\n&lt;H1&gt;=\r\n&lt;FONT face=3DArial&gt;REST Issues&lt;/FONT&gt;&lt;/H1&gt;\n&lt;H3&gt;&lt;FONT face=3DArial&gt;Roger L. =\r\nCostello and Timothy D. Kehoe&lt;/FONT&gt;&lt;/H3&gt;&lt;/CENTER&gt;\n&lt;P&gt;&lt;FONT face=3DArial&gt;RE=\r\nST is a set of design patterns for large scale networked \napplications. The=\r\n REST design patterns have been employed on the Web for 20 \nyears. It has a=\r\n proven track record. Yet despite this, there are still many \nquestions and=\r\n issues being raised. Some of them are legitimate and deserve \nattention. B=\r\nelow we identify some of the issues that have been \nraised.&lt;/FONT&gt;&lt;/P&gt;\n&lt;TAB=\r\nLE&gt;\n  &lt;TBODY&gt;\n  &lt;TR&gt;\n    &lt;TD&gt;\n      &lt;P&gt;&lt;FONT face=3DArial&gt;&lt;FONT size=3D2&gt;&lt;B=\r\n&gt;Issue 1:&lt;/B&gt; &lt;I&gt;Workflow requires \n      multiple machine-to-machine (M2M)=\r\n interactions. HTTP was not designed for \n      multiple M2M interactions. =\r\nTherefore REST is inadequate for \n      workflow.&lt;/I&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/P&gt;\n   =\r\n   &lt;P&gt;&lt;FONT face=3DArial size=3D2&gt;It is true that the original purpose of H=\r\nTTP \n      was to be a point-to-point protocol. But that doesn&#39;t mean that =\r\nHTTP is \n      inapplicable; it simply means that it needs to be repurposed=\r\n. It is very \n      common for technologies to be repurposed to meet needs =\r\nthat weren&#39;t \n      originally conceived. Consider lasers: their original p=\r\nurpose was to be a \n      weapon. When lasers were created in the 40&#39;s no o=\r\nne envisioned that they \n      would ultimately be used to play CDs and DVD=\r\ns, or used as pointers to \n      Powerpoint presentations!&lt;/FONT&gt;&lt;/P&gt;\n     =\r\n &lt;P&gt;&lt;FONT face=3DArial size=3D2&gt;It should be pointed out that SOAP wasn&#39;t \n=\r\n      designed for what it&#39;s being used for today. It was originally design=\r\ned as \n      a technology for serializing objects to do remote procedure ca=\r\nlls, i.e., a \n      Simple Object Access Protocol.&lt;/FONT&gt;&lt;/P&gt;\n      &lt;P&gt;&lt;FON=\r\nT face=3DArial size=3D2&gt;&lt;/FONT&gt;&nbsp;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;\n  &lt;TR&gt;\n    &lt;TD&gt;\n      &lt;=\r\nP&gt;&lt;FONT face=3DArial&gt;&lt;FONT size=3D2&gt;&lt;B&gt;Issue 2:&lt;/B&gt; &lt;I&gt;A SOAP header enable=\r\ns \n      expression of Quality of Service (QoS).&lt;/I&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/P&gt;\n    =\r\n  &lt;P&gt;&lt;FONT face=3DArial size=3D2&gt;We agree that QoS is an important feature,=\r\n but \n      we disagree that QoS information should be hidden inside a head=\r\ner (which \n      is hidden inside a SOAP envelope). QoS information should =\r\nbe elevated \n      right up front in a URL.&lt;/FONT&gt;&lt;/P&gt;\n      &lt;P&gt;&lt;FONT face=\r\n=3DArial size=3D2&gt;Suppose that you were to put QoS information \n      insid=\r\ne a SOAP header. How would, say, priorities be expressed? As 1, 2, 3? \n    =\r\n  As high, medium, low? Why couldn&#39;t you simply have three different URLs, =\r\n\n      one for each priority queue? For example:&lt;/FONT&gt;&lt;/P&gt;&lt;PRE&gt;&lt;FONT face=\r\n=3DArial size=3D2&gt;The URL for high-priority clients:\nhttp://www.example.org=\r\n/xpress\n\nThe URL for medium-priority clients:\nhttp://www.example.org/expedi=\r\nted\n\nThe URL for low-priority clients:\nhttp://www.example.org\n&lt;/FONT&gt;&lt;/PRE&gt;=\r\n\n      &lt;P&gt;&lt;FONT face=3DArial size=3D2&gt;There is an important lesson to be le=\r\narned from \n      this:&lt;/FONT&gt;&lt;/P&gt;\n      &lt;P&gt;&lt;B&gt;&lt;FONT face=3DArial size=3D2&gt;=\r\nURLs are cheap! Use them!&lt;/FONT&gt;&lt;/B&gt;&lt;/P&gt;\n      &lt;P&gt;&lt;FONT face=3DArial size=\r\n=3D2&gt;There are many advantages to using multiple \n      URLs to express QoS=\r\n: &lt;/FONT&gt;\n      &lt;UL&gt;\n        &lt;LI&gt;&lt;FONT face=3DArial size=3D2&gt;You can assign=\r\n the URLs to different \n        machines - use a fast machine for the high =\r\npriority service. &lt;/FONT&gt;\n        &lt;LI&gt;&lt;FONT face=3DArial size=3D2&gt;This REST=\r\n QoS design pattern scales nicely \n        and facilitates load balancing. =\r\n&lt;/FONT&gt;&lt;/LI&gt;&lt;/UL&gt;\n      &lt;P&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;&lt;/P&gt;\n      &lt;P=\r\n&gt;&lt;FONT face=3DArial size=3D2&gt;Thus we see that embedding QoS info inside a \n=\r\n      SOAP header is only one approach, and not necessarily the best \n     =\r\n approach.&lt;/FONT&gt;&lt;/P&gt;\n      &lt;P&gt;&lt;FONT face=3DArial size=3D2&gt;In fact, if we l=\r\nook to the real world we see \n      the REST QoS design pattern employed in=\r\n countless places. Consider making \n      an airline reservation: there&#39;s a=\r\nn 800 number for the regular customer, an \n      800 number for frequent fl=\r\nyers, and an 800 number for elite members. This \n      lesson was learned l=\r\nong ago in the real world:&lt;/FONT&gt;&lt;/P&gt;\n      &lt;P&gt;&lt;B&gt;&lt;FONT face=3DArial size=\r\n=3D2&gt;Telephone numbers are cheap! Use \n      them!&lt;/FONT&gt;&lt;/B&gt;&lt;/P&gt;\n      &lt;P&gt;=\r\n&lt;FONT face=3DArial size=3D2&gt;There are countless other examples where the \n =\r\n     REST QoS design pattern is employed: bank queues, highway express lane=\r\ns, \n      etc.&lt;/FONT&gt;&lt;/P&gt;\n      &lt;P&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;=\r\n/TD&gt;&lt;/TR&gt;\n  &lt;TR&gt;\n    &lt;TD&gt;\n      &lt;P&gt;&lt;FONT face=3DArial&gt;&lt;FONT size=3D2&gt;&lt;B&gt;Iss=\r\nue 3:&lt;/B&gt; &lt;I&gt;A SOAP header enables \n      expression of security.&lt;/I&gt;&lt;/FONT=\r\n&gt;&lt;/FONT&gt;&lt;/P&gt;\n      &lt;P&gt;&lt;FONT face=3DArial size=3D2&gt;Let&#39;s start from basic pr=\r\ninciples. The basis of \n      all security is to identify who you are. Base=\r\nd upon &lt;I&gt;who&lt;/I&gt; you are \n      defines &lt;I&gt;what&lt;/I&gt; you can do. In our com=\r\npany the direction on \n      authentication (i.e., determining who you are)=\r\n is PKI/PKE. Our perspective \n      is that when you invoke a web service y=\r\nou are invoking a black box. (Note \n      that this is consistent with laye=\r\nred architectures) Thus, a client \n      identifies who he is using a PKI c=\r\nertificate and the web service decides \n      what it can do, given the cli=\r\nent&#39;s access privileges.&lt;/FONT&gt;&lt;/P&gt;\n      &lt;P&gt;&lt;FONT face=3DArial size=3D2&gt;Ce=\r\nrtainly it is possible to embed a PKI \n      certificate inside a SOAP head=\r\ner. But why not attach it to the outermost \n      envelope (HTTP) rather th=\r\nan embedding it within two layers of SOAP \n      wrapping? We acknowledge t=\r\nhat there may be some security things that you \n      currently can&#39;t attac=\r\nh to an HTTP header (e.g., Kerberos tickets). The \n      question, then, is=\r\n: &quot;Where is the right place to standardize? Should the \n      standardizati=\r\non be done at the HTTP level, or at the SOAP level?&quot; This is \n      a criti=\r\ncal issue. The issue is not &lt;I&gt;whether&lt;/I&gt; to standardize but, \n      rathe=\r\nr, &lt;I&gt;where&lt;/I&gt; to standardize. We have coined a term which we feel \n      =\r\nis generally applicable:&lt;/FONT&gt;&lt;/P&gt;\n      &lt;P&gt;&lt;B&gt;&lt;FONT face=3DArial size=3D2=\r\n&gt;The Principle of the Highest \n      Standard&lt;/FONT&gt;&lt;/B&gt;&lt;/P&gt;\n      &lt;P&gt;&lt;FONT=\r\n face=3DArial size=3D2&gt;&quot;&lt;I&gt;Given two standards bodies, one which \n      enc=\r\nompasses the other (i.e., is a higher standards body), it is better to \n   =\r\n   standardize at the higher level, i.e., with the higher standards \n      =\r\nbody.&lt;/I&gt;&quot;&lt;/FONT&gt;&lt;/P&gt;\n      &lt;P&gt;&lt;FONT face=3DArial size=3D2&gt;The rationale fo=\r\nr this principle is as follows. \n      Consider HTTP. It is &lt;I&gt;the&lt;/I&gt; univ=\r\nersal protocol of the Web. It impacts \n      all Web technologies. There ha=\r\ns been a lot of innovation based on HTTP. \n      And since HTTP is such a w=\r\nidely impacting technology, there are many eyes \n      on it and the HTTP c=\r\nommittee is held to a very high barometer. Thus it \n      generates a stand=\r\nard that is open and less likely to be influenced by \n      powerful corpor=\r\nate interests. Conversely SOAP is, relatively, a small and \n      isolated =\r\nWeb technology. Standardization within the SOAP technology will \n      have=\r\n little impact on the majority of the Web. This diminishes the \n      oppor=\r\ntunity for innovation. &lt;/FONT&gt;&lt;/P&gt;\n      &lt;P&gt;&lt;FONT face=3DArial size=3D2&gt;So,=\r\n getting back to the issue of security. \n      Let&#39;s assume that HTTP does =\r\nnot support some security feature, say, \n      Kerberos tickets. Should sta=\r\nndardization occur at the SOAP level to \n      incorporate Kerberos tickets=\r\n within a SOAP header? Or, should \n      standardization occur at the HTTP =\r\nlevel? The Principle of Highest Standard \n      makes the answer clear - th=\r\ne standardization should occur at the HTTP \n      level. Thus, we would rec=\r\nommend that the HTTP working group extend the \n      HTTP standard. If ther=\r\ne is security at the HTTP level then it broadens the \n      options for sec=\r\nurity on all media, e.g., XHTML pages, audio files, MPEG \n      files, or e=\r\nven plain HTML pages. Conversely, if the security is embedded \n      within=\r\n SOAP then it isolates the solution to only that use (only to SOAP \n      t=\r\nool vendors). &lt;/FONT&gt;&lt;/P&gt;\n      &lt;P&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;&nbsp=\r\n;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;\n  &lt;TR&gt;\n    &lt;TD&gt;\n      &lt;P&gt;&lt;FONT face=3DArial&gt;&lt;FONT size=3D2&gt;=\r\n&lt;B&gt;Issue 4:&lt;/B&gt; &lt;I&gt;Embedding security in \n      SOAP enables passing around=\r\n the security information, thereby facilitating \n      single sign-on.&lt;/I&gt;&lt;=\r\n/FONT&gt;&lt;/FONT&gt;&lt;/P&gt;\n      &lt;P&gt;&lt;FONT face=3DArial size=3D2&gt;Why is it easier to =\r\nextract security \n      information from a SOAP header than it is to extrac=\r\nt security information \n      from an HTTP header? I can extract informatio=\r\nn from the HTTP header and \n      pass it around (put it into another HTTP =\r\nheader) just as easily (or \n      easier) as passing around XML. &lt;/FONT&gt;&lt;/P=\r\n&gt;\n      &lt;P&gt;&lt;FONT face=3DArial size=3D2&gt;Let&#39;s explore this issue of passing =\r\nsecurity \n      information around in more depth. One of three things can h=\r\nappen when you \n      invoke a web service. Let&#39;s consider the three cases:=\r\n &lt;/FONT&gt;\n      &lt;OL&gt;\n        &lt;LI&gt;&lt;FONT face=3DArial size=3D2&gt;All the work is=\r\n done at the Web service, and \n        the results are returned. It seems r=\r\neasonable that some sort of identity \n        token such as PKI should be s=\r\nufficient for security. &lt;/FONT&gt;\n        &lt;LI&gt;&lt;FONT face=3DArial size=3D2&gt;The=\r\n Web service has to call on other \n        services because it&#39;s an aggrega=\r\ntor. Instead, the Web service could \n        simply pass back to the client=\r\n all the links and let the client execute \n        all the separate steps. =\r\n(Recurse on each of these until you get to the \n        first model.) &lt;/FON=\r\nT&gt;\n        &lt;LI&gt;&lt;FONT face=3DArial size=3D2&gt;The Web service processes the in=\r\nformation \n        that it retrieves from other services, i.e., the Web ser=\r\nvice adds value. \n        The Web service is confronted with two alternativ=\r\nes: &lt;/FONT&gt;\n        &lt;UL&gt;\n          &lt;LI&gt;&lt;FONT face=3DArial size=3D2&gt;Should t=\r\nhe Web service pass the client&#39;s \n          PKI certificate (thus, the Web =\r\nservice is pretending to be the \n          client)? This smells of forgery,=\r\n deception, man-in-the-middle. This is \n          not an attractive option.=\r\n &lt;/FONT&gt;\n          &lt;LI&gt;&lt;FONT face=3DArial size=3D2&gt;Or, should the Web servi=\r\nce pass its own \n          PKI certificates? The problem is that the Web se=\r\nrvice&#39;s certificate \n          may have access privileges that the client d=\r\noesn&#39;t have, or vice \n          versa. &lt;/FONT&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/OL&gt;\n      &lt;P=\r\n&gt;&lt;FONT face=3DArial size=3D2&gt;We agree that there is an issue here. We need =\r\n\n      some way of chaining certificates. We recommend approaching the HTTP=\r\n \n      working group to ask for an extension to support chaining. \n      &lt;=\r\n/FONT&gt;&lt;/P&gt;&lt;FONT face=3DArial size=3D2&gt;Note: It&#39;s certainly okay to have bot=\r\nh \n      camps (REST and SOAP) work on the problem and let the marketplace =\r\nsort it \n      out. &lt;/FONT&gt;\n      &lt;P&gt;&lt;/P&gt;\n      &lt;P&gt;&lt;FONT face=3DArial size=\r\n=3D2&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;\n  &lt;TR&gt;\n    &lt;TD&gt;\n      &lt;P&gt;&lt;FONT face=3DArial&gt;&lt;FON=\r\nT size=3D2&gt;&lt;B&gt;Issue 5:&lt;/B&gt; &lt;I&gt;SOAP can be wrapped in \n      different wrapp=\r\ners (HTTP, SMTP, etc). So, if one wrapper is unsuitable \n      then simply =\r\nwrap the SOAP in a more suitable wrapper. REST always requires \n      wrapp=\r\ning in HTTP. Thus, you are forever stuck with the limitations of \n      HTT=\r\nP.&lt;/I&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/P&gt;\n      &lt;P&gt;&lt;FONT face=3DArial size=3D2&gt;This is simpl=\r\ny false. HTTP itself can be \n      wrapped in any number of different wrapp=\r\ners. Example, we could wrap HTTP \n      (a synchronous protocol) within an =\r\nSMTP wrapper and thus has an \n      asynchronous protocol.&lt;/FONT&gt;&lt;/P&gt;&lt;/TD&gt;&lt;=\r\n/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;\n&lt;H3&gt;&lt;FONT face=3DArial size=3D2&gt;Some Key Advantages of=\r\n REST&lt;/FONT&gt;&lt;/H3&gt;\n&lt;OL&gt;\n  &lt;LI&gt;&lt;FONT face=3DArial&gt;REST gets you talking about=\r\n resources and information and \n  data sharing. The focus is on the data. T=\r\nhis is consistent with the goal of \n  Net-centrity - information sharing. I=\r\nnformation sharing is what the Web is all \n  about. The Web is a distribute=\r\nd hypermedia system. The Web is implemented with \n  HTTP. REST is a design =\r\npattern that uses HTTP. &lt;/FONT&gt;\n  &lt;LI&gt;&lt;FONT face=3DArial&gt;REST has a proven =\r\ntrack record. Contrast with SOAP which \n  is yet to be proven. &lt;/FONT&gt;&lt;/LI&gt;=\r\n&lt;/OL&gt;&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;\n\r\n------=_NextPart_000_01BB_01C569E4.CC800890--\r\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":203744831,"authorName":"Justin T. Sampson","from":"&quot;Justin T. Sampson&quot; &lt;justin@...&gt;","profile":"justin_t_sampson","replyTo":"SENDER","senderId":"vsGdwJFf3w9cepbcsyhCCvR4-tk7VpRTSlN4KV7rD6ulrLszARzxs9q_vrYO185fhE82sMAn1508mGTU5Nd1IzNxWUBzj8RsPvY_087CzQ","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Status Monitor Lifecycle","postDate":"1155924203","msgId":6490,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGNkY2EwNzBmMDYwODE4MTEwM24xZTM2NjM2ZHFiYjlhNWFkYzhhMGIyMGQwQG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PDcxMWE3M2RmMDYwODE4MDcxMW4zMGNlZDczMXQ4MGIwNjBiMDAzZWI0YmU0QG1haWwuZ21haWwuY29tPg==","referencesHeader":"PDRCQTM5OEFDRDI5ODdDNDlBMTAyN0Q5RUFGMjc1NjNGQTI4MkEzQEpTWUVYQ0hFVlMzLmplcnNleS5tb3VyYW50LmxvY2FsPgkgPDQ0RTVDNEQ5LjEwODA2MDZAbW9udHBldGl0Lm5ldD4JIDw3MTFhNzNkZjA2MDgxODA3MTFuMzBjZWQ3MzF0ODBiMDYwYjAwM2ViNGJlNEBtYWlsLmdtYWlsLmNvbT4="},"prevInTopic":6489,"nextInTopic":6491,"prevInTime":6489,"nextInTime":6491,"topicId":6487,"numMessagesInTopic":5,"msgSnippet":"The solutions mentioned when this comes up do usually sound to me like RPC or API thinking -- what prior agreements can the client and server make for","rawEmail":"Return-Path: &lt;justintsampson@...&gt;\r\nX-Sender: justintsampson@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 90278 invoked from network); 18 Aug 2006 18:04:36 -0000\r\nReceived: from unknown (66.218.66.167)\n  by m27.grp.scd.yahoo.com with QMQP; 18 Aug 2006 18:04:36 -0000\r\nReceived: from unknown (HELO py-out-1112.google.com) (64.233.166.182)\n  by mta6.grp.scd.yahoo.com with SMTP; 18 Aug 2006 18:04:35 -0000\r\nReceived: by py-out-1112.google.com with SMTP id o67so1222413pye\n        for &lt;rest-discuss@yahoogroups.com&gt;; Fri, 18 Aug 2006 11:03:23 -0700 (PDT)\r\nReceived: by 10.35.91.10 with SMTP id t10mr6344905pyl;\n        Fri, 18 Aug 2006 11:03:23 -0700 (PDT)\r\nReceived: by 10.35.69.7 with HTTP; Fri, 18 Aug 2006 11:03:23 -0700 (PDT)\r\nMessage-ID: &lt;cdca070f0608181103n1e36636dqbb9a5adc8a0b20d0@...&gt;\r\nDate: Fri, 18 Aug 2006 11:03:23 -0700\r\nTo: rest-discuss@yahoogroups.com\r\nIn-Reply-To: &lt;711a73df0608180711n30ced731t80b060b003eb4be4@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nContent-Disposition: inline\r\nReferences: &lt;4BA398ACD2987C49A1027D9EAF27563FA282A3@...&gt;\n\t &lt;44E5C4D9.1080606@...&gt;\n\t &lt;711a73df0608180711n30ced731t80b060b003eb4be4@...&gt;\r\nX-Google-Sender-Auth: 33b42648ff8bdcb3\r\nX-eGroups-Msg-Info: 1:0:0:0\r\nFrom: &quot;Justin T. Sampson&quot; &lt;justin@...&gt;\r\nSubject: Re: [rest-discuss] Status Monitor Lifecycle\r\nX-Yahoo-Group-Post: member; u=203744831; y=8W2Ul39s9gcienAz_e8c0kJIOVFehDDs3_gzgZQ1a3YgRLx2IzPLowsyDA\r\nX-Yahoo-Profile: justin_t_sampson\r\n\r\nThe solutions mentioned when this comes up do usually sound to me like\nRPC or API thinking -- &quot;what prior agreements can the client and\nserver make for monitoring the status of a long-running process?&quot; I\nlike instead to think of a Web service as just a machine-readable Web\napplication, so I would suggest looking to human-readable Web\napplications for inspiration. In this case, there are a few ways that\nWeb applications tend to handle this kind of thing:\n\nA. &quot;Please wait...&quot; page\n    1. User presses button to initiate some operation, on a page at url1\n    2. Browser does a POST to server, to some url2 specified in the\nHTML form containing the button\n    3. Server begins operation, and responds with a redirect to a\n&quot;Please wait...&quot; page at some other url3\n    4. The &quot;Please wait...&quot; page contains embedded instructions for\nthe browser to automatically refresh the page every few seconds\n    5. When the operation is complete, the page at url3 changes to\n&quot;Operation complete! Please go _here_ to view the results.&quot; with a\nlink to some new url4.\n    6. The user clicks on the link, etc.\n\nB. &quot;Operations in progress&quot; page\n    1 & 2. As above.\n    3. Server begins operation, and response with a redirect to an\n&quot;Operations in progress&quot; page listing various operations in progress.\n    4. User refreshes the page as desired, or comes back to it later.\n    5. When operation is complete, entry for that operation on the\npage changes to &quot;Operation complete&quot; with a link to a results page.\n\nC. &quot;Alerts&quot; widget\n    1 & 2. As above.\n    3. Server begins operation, and response with a page saying &quot;Your\noperation is in progress. You will see an alert on your _dashboard_\nwhen it is complete.&quot; with a link to a common dashboard page that the\nuser is otherwise familiar with.\n    4. Sometime later, the user checks an &quot;Alerts&quot; widget on their\ndashboard page, which will contain a link to a results page when the\noperation is complete.\n\nThe common feature of all of them is hypertext as the engine of\napplication state, including in some cases code on demand; the server\ntells the user what&#39;s going on, and tells the browser how to help to\nuser navigate.\n\nCheers,\nJustin\n\n\nOn 8/18/06, Dave Pawson &lt;dave.pawson@...&gt; wrote:\n\n&gt; On 18/08/06, Claude Montpetit &lt;claude@...&gt; wrote:\n&gt;\n&gt;  &gt;  When monitoring is necessary, the resource that we manipulate is an\n&gt;  &gt;  &quot;Operation Request&quot;. For example, we can post a DeleteOperationRequest\n&gt;  &gt;  resource:\n&gt;  &gt;\n&gt;  &gt;  POST: http//example.com/deleteOperationRequest\n&gt;  &gt;\n&gt;  &gt;  passing the URI of the resource to be deleted.\n&gt;  &gt;\n&gt;  &gt;  This returns the URI of the new deleteOperationRequest resource.\n&gt;  &gt;\n&gt;  &gt;  GETting this resource will provide information on the operation: done,\n&gt;  &gt;  failed, cancelled, running (with % done), invoked by, started at, and so\n&gt;\n&gt;\n&gt;  &gt;  It is a little RPCish to use a &quot;DeleteOperation&quot;, but the fact that this\n&gt;  &gt;  is an actual resource (&quot;DeleteOperationRequest&quot;), this seems RESTful\n&gt;  &gt;  enough to me. I&#39;d like to hear cleaner solutions or comments on this\n&gt;  &gt;  approach though.\n&gt;\n&gt;\n&gt;  Another variant.\n&gt;  We PUT a file for processing.\n&gt;  GET on the same url for status.\n&gt;  Once the file has been processed a response\n&gt;  is loaded to the url providing status.\n&gt;  Clearly the GET fails until the response is available.\n&gt;\n&gt;  regards\n&gt;\n&gt;  --\n&gt;  Dave Pawson\n&gt;  XSLT XSL-FO FAQ.\n&gt;  http://www.dpawson.co.uk\n\n"}}
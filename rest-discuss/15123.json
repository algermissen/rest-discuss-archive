{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"S8YA-1wEsiWnsDASLbzeT-0K79L3agaRjALr4aIhPacmNU_GOkp8ccDryYORGli6XDiXn43LlY0RFqt-UrpjuKj8rVzEJThHW4UMIZd0Yw","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] client keeps its state","postDate":"1270507310","msgId":15123,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMTAwNDA1MTY0MTUwLjAxOGE3YmVhLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","inReplyToHeader":"PDk3ODY2OS41NjYwOC5xbUB3ZWIxMTQ2MTUubWFpbC5ncTEueWFob28uY29tPg==","referencesHeader":"PDk3ODY2OS41NjYwOC5xbUB3ZWIxMTQ2MTUubWFpbC5ncTEueWFob28uY29tPg=="},"prevInTopic":15120,"nextInTopic":15124,"prevInTime":15122,"nextInTime":15124,"topicId":15101,"numMessagesInTopic":33,"msgSnippet":"... No, saying this has nothing to do with REST or declaring it off-topic to rest-discuss would be extreme; I did neither.  ;-) ... Agreed.  To more explicitly","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 25595 invoked from network); 5 Apr 2010 22:42:25 -0000\r\nX-Received: from unknown (66.196.94.105)\n  by m1.grp.sp2.yahoo.com with QMQP; 5 Apr 2010 22:42:25 -0000\r\nX-Received: from unknown (HELO mxout-08.mxes.net) (216.86.168.183)\n  by mta1.grp.re1.yahoo.com with SMTP; 5 Apr 2010 22:42:22 -0000\r\nX-Received: from bigbison (unknown [65.117.211.162])\n\t(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))\n\t(No client certificate requested)\n\tby smtp.mxes.net (Postfix) with ESMTPSA id A8716509B4;\n\tMon,  5 Apr 2010 18:42:18 -0400 (EDT)\r\nDate: Mon, 5 Apr 2010 16:41:50 -0600\r\nTo: Stuart Charlton &lt;stuartcharlton@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nMessage-Id: &lt;20100405164150.018a7bea.eric@...&gt;\r\nIn-Reply-To: &lt;978669.56608.qm@...&gt;\r\nReferences: &lt;978669.56608.qm@...&gt;\r\nOrganization: Bison Systems Corporation\r\nX-Mailer: Sylpheed 3.0.0 (GTK+ 2.10.14; i686-pc-mingw32)\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=US-ASCII\r\nContent-Transfer-Encoding: 7bit\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nSubject: Re: [rest-discuss] client keeps its state\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\nStuart Charlton wrote:\n&gt; \n&gt;&gt; The problem is, how does a machine user deduce which of the presented\n&gt;&gt; state-transition options will advance it towards its goal?  This is a\n&gt;&gt; problem orthogonal to REST, which is not to say off-topic to rest-\n&gt;&gt; discuss.  Once the client component arrives at the proper steady-\n&gt;&gt; state REST doesn&#39;t enter the equation again, until the user requests\n&gt;&gt; some transition to the next steady-state in their specific\n&gt;&gt; application.\n&gt;\n&gt; That&#39;s rather extreme.\n&gt;\n\nNo, saying this has nothing to do with REST or declaring it off-topic\nto rest-discuss would be extreme; I did neither.  ;-)\n\n&gt;\n&gt; Implementers clearly are curious how to retain the constraints of the\n&gt; architecture and build m2m agents. While the techniques for building\n&gt; goal-directed agents aren&#39;t particular to REST, they&#39;re certainly of\n&gt; interest to this audience, and it&#39;s been a sorely lacking area of\n&gt; exploration, IMO.\n&gt; \n\nAgreed.  To more explicitly state my position:  Discussions of m2m REST\nconsistently violate the layered-system and self-descriptive-messaging\nconstraints.  We need to change the discussion so these m2m agents are\nmanipulating the API, not the other way &#39;round...\n\nFirst, user and user-agent are combined into client-component.  This\nleads to (amongst other horrors) APIs where a separate media type is\nused to represent each resource state, enforcing a 1:1 relationship\nbetween resource state and application state -- itself a violation of\nthe layered-system constraint -- by solving a vocabulary problem over\nthe wire, i.e. at the protocol layer.\n\nSolving a vocabulary problem over the wire with custom media types\nresults from a violation of the layered-system constraint, and carries\nthat error forward.  The resulting API violates the self-descriptive-\nmessaging constraint and HTTP by failing to use well-known, registered\nmedia types to derive application steady-states.\n\nAll led to from the notion that an m2m client is a user-agent not a\nuser, and that a REST application instructs these m2m user-agents what\nto do.  Which is entirely backwards from what a REST application *is*.\nThe user informs the user-agent of the next step, the series of steps\nfrom initial URI to completion of some task is defined as a &quot;REST\napplication&quot;.  Not the other way around!  Not even for m2m!  No!\n\nThis mess may be avoided from the get-go by applying some REST\ndiscipline and recognizing that a user and a user-agent are indeed\nseparate layers in a system, regardless of the nature of the user.\nSo, in order to have a discussion about m2m REST, we must distinguish\nbetween user and user-agent, avoiding the paper tiger of machine vs.\nhuman user-agents -- such a distinction being a violation of the\nlayered-system constraint.\n\nThe distinction between human and machine belongs in the user component\nof a REST system.  The problem is, how do we inform the user of the\nmeaning of the possible state transitions?  When the user is human, the\nsolution is simple -- natural language.  When the user is a machine,\nthe solution is no less simple -- machine language -- just harder to\nimplement.  Either way, these domain-specific (even if standardized)\nvocabularies must be embedded within the standard methods, media types\nand link relations making up the REST API.\n\nThe first thing you need in a REST API are standard link relations,\nmethods and media types to instruct user-agents how to arrive at an\napplication steady-state when a URI is dereferenced.  Domain-specific\nvocabularies are used which allow the user-agent to inform the user\nwhat options there are and what information is required to proceed,\ni.e. natural-language descriptions of form fields and submission\nbuttons in a shopping-cart system.\n\nIt&#39;s the human user instructing the user-agent how to proceed.\n\nDomain-specific vocabularies which allow the user-agent to inform a\nmachine user what options there are and what information is required\nto proceed, i.e. machine-language descriptions of form fields and\nsubmission buttons in a shopping-cart system, are embedded within the\nsteady-state just like natural-language vocabularies, except as\nmetadata instead of as content.\n\nIt&#39;s the machine user instructing the user-agent how to proceed.\n\nThis is RESTful m2m development and must be emphasized.  It must also be\nemphasized that &quot;user decides what to do&quot; isn&#39;t part of a REST\napplication -- it *defines* any given REST application (what the user\nis trying to do).  So please, folks, stop writing m2m HTTP APIs which\ninstruct the *user* how to proceed and calling the result a REST\napplication.\n\nREST ends at &quot;user-agent informs the user what it can do&quot;, while &quot;user\ndecides what to do&quot; is out-of-scope.  This isn&#39;t extremist, it&#39;s central\nto having the entire m2m discussion; the point is, the discussion must\nbe framed properly as &quot;how does the user-agent inform the user of its\noptions&quot; not &quot;how does the API instruct the user of the next step&quot;\n(which leaps right across the user-agent layer, while standing the\ndefinition of &quot;REST application&quot; on its head, you see).\n\n-Eric\n\n"}}
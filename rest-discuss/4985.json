{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":42263874,"authorName":"Lucas Gonze","from":"Lucas Gonze &lt;lgonze@...&gt;","profile":"lucas_gonze","replyTo":"SENDER","senderId":"meVENfT5A7dRv0JF_-M2-xx0iZPi1t7mXHZp6hsn5-AdDOiuJAgxNBnhV6xlIXgIF_3tEXEL8CbkWomUi0bM2oF_t6Z8","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] coding question","postDate":"1113025343","msgId":4985,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PFBpbmUuTkVCLjQuNjIuMDUwNDA4MTkwNzI0MC4xNjUwNEBwYW5peDIucGFuaXguY29tPg==","inReplyToHeader":"PDIwMDUwNDA5MDUwMzM3LkdBMTMyOTBAcGhvZW5peC5hc3luY2hyb25vdXMub3JnPg==","referencesHeader":"PFBpbmUuTkVCLjQuNjIuMDUwNDA4MTgzMjU2MC4xNjUwNEBwYW5peDIucGFuaXguY29tPiA8MjAwNTA0MDkwNTAzMzcuR0ExMzI5MEBwaG9lbml4LmFzeW5jaHJvbm91cy5vcmc+"},"prevInTopic":4984,"nextInTopic":4986,"prevInTime":4984,"nextInTime":4986,"topicId":4983,"numMessagesInTopic":14,"msgSnippet":"... Yeah, that s exactly the kind of thing I m wondering about.  I could see it leading in the same direction that you go with your other examples, ... What s","rawEmail":"Return-Path: &lt;lgonze@...&gt;\r\nX-Sender: lgonze@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 16979 invoked from network); 9 Apr 2005 05:42:24 -0000\r\nReceived: from unknown (66.218.66.172)\n  by m23.grp.scd.yahoo.com with QMQP; 9 Apr 2005 05:42:24 -0000\r\nReceived: from unknown (HELO mail2.panix.com) (166.84.1.73)\n  by mta4.grp.scd.yahoo.com with SMTP; 9 Apr 2005 05:42:23 -0000\r\nReceived: from panix2.panix.com (panix2.panix.com [166.84.1.2])\n\tby mail2.panix.com (Postfix) with ESMTP id 1CAA0A6F86;\n\tSat,  9 Apr 2005 01:42:23 -0400 (EDT)\r\nReceived: from localhost (lgonze@localhost)\n\tby panix2.panix.com (8.11.6p3/8.8.8/PanixN1.1) with ESMTP id j395gNl16450;\n\tSat, 9 Apr 2005 01:42:23 -0400 (EDT)\r\nDate: Fri, 8 Apr 2005 19:42:23 -1000 (HST)\r\nTo: Josh Sled &lt;jsled@...&gt;\r\nCc: lucas@..., rest-discuss@yahoogroups.com\r\nIn-Reply-To: &lt;20050409050337.GA13290@...&gt;\r\nMessage-ID: &lt;Pine.NEB.4.62.0504081907240.16504@...&gt;\r\nReferences: &lt;Pine.NEB.4.62.0504081832560.16504@...&gt;\n &lt;20050409050337.GA13290@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: TEXT/PLAIN; charset=US-ASCII; format=flowed\r\nX-eGroups-Msg-Info: 1:12:0\r\nFrom: Lucas Gonze &lt;lgonze@...&gt;\r\nReply-To: lucas@...\r\nSubject: Re: [rest-discuss] coding question\r\nX-Yahoo-Group-Post: member; u=42263874\r\nX-Yahoo-Profile: lucas_gonze\r\n\r\nOn Sat, 9 Apr 2005, Josh Sled wrote:\n&gt; How about a declarative resource-space pattern mapping plus a dispatcher?\n&gt; \n&gt;   HEAD /foo stripBody( getFoo() )\n&gt;   GET /foo getFoo()\n&gt;   GET /foo?withArgs queryFoo( args )\n&gt;   POST /foo postFoo()\n\nYeah, that&#39;s exactly the kind of thing I&#39;m wondering about.  I could see \nit leading in the same direction that you go with your other examples, \ntoo.  For example the argument validator pattern looks good:\n\n&gt;   GET /foo?requiredArg1&requiredArg2&* fooQuery(...)\n&gt;   GET /foo?type2&* fooQuery2( ... )\n\nWhat&#39;s tricky about this is that you want to avoid building castles in the \nair.  Let&#39;s say you develop some kind of unmarshalling infrastructure, \nwhich I imagine would be an API which accepted descriptions of stuff in \nthe request and mapped them to functions; the pain of adopting it would \nhave to be less than the pain of using improved idioms.\n\nFor example, I developed a nice argument validator class for arguments \ncoming in via the URI, but in the end I found that it was too intrusive \nand ended up not using it.\n\nNot to say that this is a bad idea, just that it&#39;ll take a lot of communal \ntrial and error to get it right.\n\nAlong those lines...\n&gt; Depending on how identifying the non-query-string part is, something like:\n&gt; \n&gt;   GET /foo/{id:0-9+} getFoo(id)\n&gt;   GET /foo/{fooId:0-9+}/bar/{barId:[a-zA-Z0-9]+} getBar( fooId, barId )\n\n...I found that regular expressions on the incoming URI are too \ninflexible.  It&#39;s too easy to make a mistake on a reasonably complex \nregex.\n\n- Lucas\n\n\n"}}
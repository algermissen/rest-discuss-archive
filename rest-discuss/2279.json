{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":98624433,"authorName":"bhaugen32","from":"&quot;bhaugen32&quot; &lt;bhaugen32@...&gt;","profile":"bhaugen32","replyTo":"SENDER","senderId":"aoPxm-boAclH8ell9VTcXdYgoQrtrV6Q3DSuDg37ZMIdxBR3pYRcrZJdk1DqxdzkjSQla7c0istc-IA_rbERINRmRLw31YgG","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: transfers and dining philosophers (was Re:squaring)","postDate":"1030708159","msgId":2279,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGFrbm0zditsNzdvQGVHcm91cHMuY29tPg==","inReplyToHeader":"PDAwZTYwMWMyNGVkMSQ2MzU1OTY0MCQyYTAxMTRhY0BOSVRFTy5DT00+"},"prevInTopic":2274,"nextInTopic":2282,"prevInTime":2278,"nextInTime":2280,"topicId":2255,"numMessagesInTopic":11,"msgSnippet":"... [...] ... In my opinion, you got it. Read also Jeff Bone s Dining Philosophers in REST : http://www.xent.com/pipermail/fork/2001-August/002923.html ","rawEmail":"Return-Path: &lt;bhaugen32@...&gt;\r\nX-Sender: bhaugen32@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_1_0_1); 30 Aug 2002 11:49:20 -0000\r\nReceived: (qmail 99546 invoked from network); 30 Aug 2002 11:49:20 -0000\r\nReceived: from unknown (66.218.66.217)\n  by m7.grp.scd.yahoo.com with QMQP; 30 Aug 2002 11:49:20 -0000\r\nReceived: from unknown (HELO n15.grp.scd.yahoo.com) (66.218.66.70)\n  by mta2.grp.scd.yahoo.com with SMTP; 30 Aug 2002 11:49:20 -0000\r\nReceived: from [66.218.67.142] by n15.grp.scd.yahoo.com with NNFMP; 30 Aug 2002 11:49:20 -0000\r\nDate: Fri, 30 Aug 2002 11:49:19 -0000\r\nTo: rest-discuss@yahoogroups.com\r\nSubject: Re: transfers and dining philosophers (was Re:squaring)\r\nMessage-ID: &lt;aknm3v+l77o@...&gt;\r\nIn-Reply-To: &lt;00e601c24ed1$63559640$2a0114ac@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Length: 4307\r\nX-Mailer: Yahoo Groups Message Poster\r\nFrom: &quot;bhaugen32&quot; &lt;bhaugen32@...&gt;\r\nX-Yahoo-Group-Post: member; u=98624433\r\nX-Yahoo-Profile: bhaugen32\r\n\r\n&quot;Jeffrey Winter&quot; wrote:\n&gt; ... when multiple\n&gt; resources need to be updated in an atomic way.\n&gt; \n&gt; For example, how do you handle transferring money from\n&gt; a savings account to a checking account?\n[...]\n&gt; For example, you could request the creation of a\n&gt; &quot;transfer&quot; resource\n&gt; \n&gt;  POST /user/joe/accounts/transfers\n&gt;  &lt;transfer from-account=&quot;savings/1234&quot;\n&gt; to-account=&quot;checking/2345&quot;&gt;50&lt;/transfer&gt;\n&gt; \n&gt; on successful transfer:\n&gt; \n&gt;  201 Created\n&gt;  Location: /user/joe/accounts/transfers/00001\n&gt; \n&gt; if insufficient funds:\n&gt; \n&gt;   400 Bad Request\n&gt; \n&gt; A GET against /transfers could return a transfer history, etc.\n\nIn my opinion, you got it.\n\nRead also Jeff Bone&#39;s &quot;Dining Philosophers in REST&quot;:\nhttp://www.xent.com/pipermail/fork/2001-August/002923.html\n\n&lt;excerpt&gt;\nClay [Shirky] posed race conditions as a challenge that perhaps \ncannot be\novercome with the REST design practice of using HTTP&#39;s generic\ninterfaces and resource modeling, due to a perceived need to\natomically perform a series of HTTP methods.  The claim is that an\nRPC interface, by allowing the encapsulation of the desired\noperations into one specialized interface that can be tunneled\nthrough and atomically performed in the context of a single POST.\n\nThe latter strategy --- take care of all the necessaries in a single\nPOST --- is correct, but it doesn&#39;t require the introduction of\nspecialized method interfaces, just the appropriate decomposition\ninto resources.  I&#39;d already been working on a short but hopefully\nenlightening example --- the venerable Dining Philosophers,\nserendipity! --- to demonstrate how resource modeling can handle a\nsimilar problem.  \n\n[...]\n\nAssume that the problem space --- tables, forks, what have you --- is\nimplemented as a Web Service using the REST style.  The philosophers\nthemselves are the client applications which consume the Web\nService. \n\n[...]\n\nImagine that we have introduced to the problem space two waiters;\nthey act on behalf of the philosophers, who have been instructed not\nto pick up or put down the forks directly themselves.  (In fact they\ncannot because we don&#39;t model the forks directly.)  The desired\natomic behavior is encapsulated in and between the waiters.  One\nwaiter is tasked with observing the table and, at a philosopher&#39;s\nrequest and if possible, taking from the philosopher their ticket,\nremoving the two adjacent forks from the table and handing them to\nthe philosopher.  The other waiter performs the reverse function,\nexchanging forks for the corresponding ticket and placing them on the\ntable.\n\n[...]\nThe critical sections which are usually protected by mutexes are\nimplemented in the waiters, and each is engaged through a single HTTP\ntransaction.\n\n[...]\n\nSo:  REST can do Dining Philosophers; the trick is just to\nencapsulate the critical sections into local objects and reify them\nas resources.  The notion that you need some kind of transactional\ncontrol at the protocol level is, in fact, a boondoggle;\ntransactions are always a higher-level abstraction, and any\nlower-level but complete abstraction --- INVOKE, GET / PUT / POST,\nREAD / WRITE / TAKE, etc. are all sufficient;  transactions can be\nprovided either locally or as higher-level semantics layered atop but\nconforming to the semantics of the substrate.\n\nMore generally, this should at least suggest that the primary\ndifference between REST and procedure calling is in modeling the\nproblem domain as a set of resources --- nouns --- each of which can\nbe potentially active but which responds to a generic interface.\nThis as opposed to the RPC approach of specialized interfaces. \n\n[...]\n\nThe problem is one of modeling, not one of the richness and \nexpressivity of either approach.\n\n[...]\n\nit&#39;s always a bad idea to manage transactions (i.e., attempt to \nguarantee atomicity of a sequence of actions, *even if this is made \npossible by the underlying communication model*) non-locally. \nWhenever possible --- and it&#39;s always possible --- atomic sequences \nof interactions should be managed by intermediate objects local to \nthe resources being locked and manipulated; it&#39;s trivial to \nencapsulate transactions into a single atomic exchange, and exposing \nthose encapsulations as first class entities is generally a pretty \ngood idea. And it certainly fits with the REST model of the world. \n&lt;/excerpt&gt;\n\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":7519858,"authorName":"Mark Baker","from":"Mark Baker &lt;distobj@...&gt;","profile":"gonga_thrash","replyTo":"SENDER","senderId":"1EUrSVgKLaXWDsn5FD2Wl_rbYN0w5sonSWEEHihnIhc2Y5m1QmWe3Tp65mwjkwHnF8nqj8vTc0if-t54a2e6obWNuQ","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Querying with POST","postDate":"1098194648","msgId":4571,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMDQxMDE5MTQwNDA4LkdUMjQwNThAbWFya2Jha2VyLmNhPg==","inReplyToHeader":"PDQxNzUwRjU1LjQwMjA2MDZAYml0d29ya2luZy5vcmc+","referencesHeader":"PDIwMDQxMDA5MjAyNzI5LkdNMzIwNEBtYXJrYmFrZXIuY2E+IDxjbDJvOWMrY3JqMkBlR3JvdXBzLmNvbT4gPDIwMDQxMDE5MTIxNzM4LkdSMjQwNThAbWFya2Jha2VyLmNhPiA8NDE3NTBGNTUuNDAyMDYwNkBiaXR3b3JraW5nLm9yZz4="},"prevInTopic":4570,"nextInTopic":4572,"prevInTime":4570,"nextInTime":4572,"topicId":4554,"numMessagesInTopic":73,"msgSnippet":"Hi Joe, ... No, the POST invocation isn t RESTful by itself.  In the examples people have given, the client expects that a particular POST invocation will","rawEmail":"Return-Path: &lt;distobj@...&gt;\r\nX-Sender: distobj@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 82098 invoked from network); 19 Oct 2004 14:02:23 -0000\r\nReceived: from unknown (66.218.66.172)\n  by m25.grp.scd.yahoo.com with QMQP; 19 Oct 2004 14:02:23 -0000\r\nReceived: from unknown (HELO bork.markbaker.ca) (216.126.80.155)\n  by mta4.grp.scd.yahoo.com with SMTP; 19 Oct 2004 14:02:23 -0000\r\nReceived: from mbaker by bork.markbaker.ca with local (Exim 3.36 #1 (Debian))\n\tid 1CJuau-0002db-00; Tue, 19 Oct 2004 10:04:08 -0400\r\nDate: Tue, 19 Oct 2004 10:04:08 -0400\r\nTo: Joe Gregorio &lt;joe@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nMessage-ID: &lt;20041019140408.GT24058@...&gt;\r\nReferences: &lt;20041009202729.GM3204@...&gt; &lt;cl2o9c+crj2@...&gt; &lt;20041019121738.GR24058@...&gt; &lt;41750F55.4020606@...&gt;\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=us-ascii\r\nContent-Disposition: inline\r\nIn-Reply-To: &lt;41750F55.4020606@...&gt;\r\nUser-Agent: Mutt/1.3.28i\r\nX-eGroups-Remote-IP: 216.126.80.155\r\nFrom: Mark Baker &lt;distobj@...&gt;\r\nSubject: Re: [rest-discuss] Querying with POST\r\nX-Yahoo-Group-Post: member; u=7519858\r\nX-Yahoo-Profile: gonga_thrash\r\n\r\nHi Joe,\n\nOn Tue, Oct 19, 2004 at 08:57:57AM -0400, Joe Gregorio wrote:\n&gt; Mark Baker wrote:\n&gt; &gt;Hi Bryan,\n&gt; &gt;\n&gt; &gt;That approach suffers from the same implementation dependency that I\n&gt; &gt;described with the other approaches, namely that there&#39;s an expectation\n&gt; &gt;by the client that the query results will be located at the URI\n&gt; &gt;provided in the Location header (even with the URI proxying trick).\n&gt; \n&gt; This brings up a nagging question in the back of head\n&gt; every time you raise this point. \n&gt; \n&gt;  &quot;Are idioms allowed?&quot;\n&gt; \n&gt; That is, we have GET, PUT, POST and DELETE, our fundamental\n&gt; ways of dereferencing a URI. We&#39;ll assume that we are putting\n&gt; together nice RESTful services and using all these methods correctly.\n&gt; What happens when we start combining these dereferences? \n&gt; \n&gt; For example:\n&gt;   POST is used to create new resources\n&gt;   GET is used to retrieve a representation of a resource\n&gt; \n&gt; On their own they&#39;re RESTful,\n\nNo, the POST invocation isn&#39;t RESTful by itself.  In the examples\npeople have given, the client expects that a particular POST invocation\nwill result in a resource being created (and furthermore, that this\nresource will have a particular relationship to the POSTed\nrepresentation).\n\nSometimes it&#39;s hard to see the forest for the trees here.  I&#39;ve found it\nhelpful to focus on one of the primary objectives of the uniform\ninterface; substitutability, i.e. the ability to substitute one service\nimplementing POST with another service implementing POST.\nQuery-via-POST fails this test because the expectation about the query\nresults being returned cannot be provided by other services.  For\nexample, if one swapped in a resource which spat out the input document\nto a printer, then clearly it wouldn&#39;t meet the expectation of\nperforming a query.\n\n&gt; but combined in the\n&gt; manner described below for querying, if I understand\n&gt; you correctly, the whole is not as RESTful.\n&gt; \n&gt; Two more examples:\n&gt; \n&gt; The first is mnot&#39;s solution to the reliable POST \n&gt; problem[1]. (Or Paul Prescod&#39;s solution[2].)\n\n[1] seems fine to me from this POV, though it has the issue that it\ncreates an unbounded number of identifiers for a single resource (the\norder form processor) - but that&#39;s likely worth the tradeoff to get the\ndesirable only-once behaviour without requiring a browser upgrade.\n\n[2] has the same issues I&#39;m discussing here regarding the use of 201.\nThat&#39;s not to say that it isn&#39;t workable, only that it isn&#39;t purely\nRESTful, which tells you that you&#39;re making a design tradeoff; is that\ntradeoff worth it in this case?  Maybe.\n\n&gt; The second example is the real reason for the\n&gt; why this nags at me so much, in the Atom Publishing \n&gt; Protocol we are combining operations into idioms,\n&gt; the most prevalent one being that of a collection[3]:\n&gt; \n&gt;  POST to a Collection resource to create a new subordinate resource\n&gt;    (Returns a 201 and the URI of newly created resource returned via \n&gt;    Location: header)\n\nBut is a 201 *expected*?  What if 200 was returned?  Would an Atom\nclient be able to proceed?\n\n&gt;  GET on the Collection resource to retrieve a list of the subordinate \n&gt;  resources\n&gt;  GET, PUT and DELETE on the subordinate resources act as expected.\n\nThose seem fine to me.\n\n&gt; [1] http://www.mnot.net/blog/2003/09/13/click_submit_only_once\n&gt; [2] http://www.prescod.net/reliable_http.html\n&gt; [3] http://intertwingly.net/wiki/pie/PaceCollectionIdiom\n\nIt&#39;s all about *expectation*;\n\nhttp://pluralsight.com/blogs/aaron/archive/2004/08/27/2092.aspx\n(ironic, no? 8-)\n\nMark.\n-- \nMark Baker.   Ottawa, Ontario, CANADA.        http://www.markbaker.ca\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":276981344,"authorName":"Ryan J. McDonough","from":"&quot;Ryan J. McDonough&quot; &lt;ryan@...&gt;","profile":"damnhandy2000","replyTo":"SENDER","senderId":"gPLTRAQKmabnsE2H2qPHAHGfzPxFV6qZfOqic7ljk2PkUC0OoLx-gON7fWxwFPV4Ytz0wJPqc0QraPq4nCrBrOIhlN7TyE0HSgiUovdGfA","spamInfo":{"isSpam":false,"reason":"12"},"subject":"How to express a means to merge specific revisions of a resource","postDate":"1312558260","msgId":17666,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDU2QTE0QzU3LTFEQzUtNDJEQi1BRjk2LUE5RkQ2Nzg1N0U2QkBkYW1uaGFuZHkuY29tPg=="},"prevInTopic":0,"nextInTopic":17667,"prevInTime":17665,"nextInTime":17667,"topicId":17666,"numMessagesInTopic":2,"msgSnippet":"I am working on a HTTP interface to a persietent store that is backed by a slightly tweaked version of Project Voldemort. The problem I am faced with is how to","rawEmail":"Return-Path: &lt;ryan@...&gt;\r\nX-Sender: ryan@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 7863 invoked from network); 5 Aug 2011 15:31:03 -0000\r\nX-Received: from unknown (98.137.34.46)\n  by crsgroups4-scan.grp.sp2.yahoo.com with QMQP; 5 Aug 2011 15:31:03 -0000\r\nX-Received: from unknown (HELO mail-vx0-f174.google.com) (209.85.220.174)\n  by mta3.grp.sp2.yahoo.com with SMTP; 5 Aug 2011 15:31:03 -0000\r\nX-Received: by vxi9 with SMTP id 9so1449683vxi.5\n        for &lt;rest-discuss@yahoogroups.com&gt;; Fri, 05 Aug 2011 08:31:03 -0700 (PDT)\r\nX-Received: by 10.52.91.79 with SMTP id cc15mr2360643vdb.284.1312558263120;\n        Fri, 05 Aug 2011 08:31:03 -0700 (PDT)\r\nReturn-Path: &lt;ryan@...&gt;\r\nX-Received: from [192.168.1.12] (c-71-233-32-148.hsd1.ma.comcast.net [71.233.32.148])\n        by mx.google.com with ESMTPS id ca9sm1477908vdc.3.2011.08.05.08.31.01\n        (version=TLSv1/SSLv3 cipher=OTHER);\n        Fri, 05 Aug 2011 08:31:02 -0700 (PDT)\r\nContent-Type: multipart/alternative; boundary=&quot;Apple-Mail=_EE197967-1F88-498F-8732-C66D6A4577F9&quot;\r\nDate: Fri, 5 Aug 2011 11:31:00 -0400\r\nMessage-Id: &lt;56A14C57-1DC5-42DB-AF96-A9FD67857E6B@...&gt;\r\nTo: rest-discuss@yahoogroups.com\r\nMime-Version: 1.0 (Apple Message framework v1244.3)\r\nX-Mailer: Apple Mail (2.1244.3)\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Ryan J. McDonough&quot; &lt;ryan@...&gt;\r\nSubject: How to express a means to merge specific revisions of a resource\r\nX-Yahoo-Group-Post: member; u=276981344; y=Uk98JUAhQWUkD5Fkg4gQ50GONiVp-lUQ8n-b3oCMckh1m48of_DXsg\r\nX-Yahoo-Profile: damnhandy2000\r\n\r\n\r\n--Apple-Mail=_EE197967-1F88-498F-8732-C66D6A4577F9\r\nContent-Transfer-Encoding: quoted-printable\r\nContent-Type: text/plain;\n\tcharset=us-ascii\r\n\r\nI am working on a HTTP interface to a persietent store that is backed by a =\r\nslightly tweaked version of Project Voldemort. The problem I am faced with =\r\nis how to be able to expose a means to the caller a way to invalidate speci=\r\nfic reivision IDs without having to rely on out of band information. Curren=\r\ntly, there is an option on the table to use only ETags to express this, but=\r\n I&#39;m not convinced that this is the right approach. I am not expert on ETag=\r\ns, so I thought I&#39;d bring the question up here.\n\nRight now, our interface i=\r\ns rather simple and is similar to the proposed Voldemort REST API describe =\r\nhere:\n\nhttps://github.com/afeinberg/voldemort/wiki/REST-API-Proposal\n\nCurre=\r\nntly, we are using ETags rather than a custom HTTP header to convey revisio=\r\nns. Many of our applications that will use this API will be passing through=\r\n intermediaries, many of which are already known to strip non-standard HTTP=\r\n headers. For the most part, the use of ETags works fine to handle typical =\r\nconditional write operations. If the revision the client has is not current=\r\n, we can successfully block the write until the caller resolves the conflic=\r\nts. This works just dandy right now.\n\nWhat doesn&#39;t work so good is when we =\r\nhave the condition that the server has more than one version of the value d=\r\nue a downed node or replication issue. Our native API have the following pa=\r\nrameters:\n\nThe new state of the value\nA collection of the revision IDs to i=\r\nnvalidate\n\nOne of our requirements is to only invalidate the revisions that=\r\n the client wants to. If the system has version &#39;a&#39;, &#39;b&#39;, and &#39;c&#39; for resou=\r\nrce &#39;/mystore/12345&#39;, they should be able to create version &#39;ab&#39; from &#39;a&#39; a=\r\nnd &#39;b&#39;, leaving version &#39;c&#39; alone.\n\nHere&#39;s our process flow works right now=\r\n: a client issues a GET:\n\nGET /mystore/12345 HTTP/1.1\nHost: mydb.example.co=\r\nm\nAccept: application/octet-stream, multipart/mixed;q=3D0.8, application/js=\r\non;q=3D0.7, */*;q=3D0.5\n\nIf there are multiple revisions, they&#39;d get someth=\r\nig like so:\n\nHTTP/1.1 300 Multiple Choices\nLast-Modified: Thu, 21 Apr 2011 =\r\n18:24:31 GMT\nContent-Type: multipart/mixed; boundry=3D&quot;rev&quot;\nDate: Thu, 28 A=\r\npr 2011 17:43:52 GMT\n\n--rev\nLocation: http://mydb.example.com/mystore/12345=\r\n?rev=3Da\nContent-Type: application/octet-stream\nETag: a\nLast-Modified: Thu,=\r\n 21 Apr 2011 18:24:31 GMT\n\n...binary content...\n\n--rev\nLocation: http://myd=\r\nb.example.com/mystore/12345?rev=3Db\nContent-Type: application/octet-stream\n=\r\nETag: b\nLast-Modified: Fri, 22 Apr 2011 18:24:31 GMT\n\n...binary content...\n=\r\n\n--rev\nLocation: http://mydb.example.com/mystore/12345?rev=3Dc\nContent-Type=\r\n: application/octet-stream\nETag: c\nLast-Modified: Fri, 22 Apr 2011 18:32:31=\r\n GMT\n\n...binary content...\n\nWe&#39;re using mutlipart for clients that prefer t=\r\no get all revisions in one go, and this response is necessarily etched in s=\r\ntone. Now to resolve revisions &#39;a&#39; and &#39;b&#39;, it has been suggested that we d=\r\no soemthing like so:\n\nPUT /mystore/12345 HTTP/1.1\nHost: mydb.example.com\nCo=\r\nntent-Type: application/octet-stream\nIf-Match: &quot;a&quot;, &quot;b&quot;\n\n...new state of th=\r\ne entity...\n\nIn this case, we should end up with versions &#39;ab&#39; and &#39;c&#39;. \n\nT=\r\nhe problems I see with this approach are as follows:\n\nThe HTTP specificatio=\r\nn seems to suggest that in the conditional write case, the server should al=\r\nways maintain a single, current version of the representation. In this case=\r\n, we&#39;ve got multiple revisions that are current.\nIncluding the Etag in the =\r\nmultipart/mixed response required out-of-band information. The client must =\r\nknow that they must do something special with the etag value for each part.=\r\n\nIf we use multiple resources for each revision, it also requires out-of-ba=\r\nnd information in that you need to know that you need the etags from each r=\r\nevision resource you want to merge.\n\nAs an alternative approach, it is like=\r\nly better to express the specific versions you want to merge in the URI rat=\r\nher than etags. But now we&#39;ve got two different ways of resolving conflicts=\r\n based on the condition. \n\nRyan-\n\n\n\r\n--Apple-Mail=_EE197967-1F88-498F-8732-C66D6A4577F9\r\nContent-Transfer-Encoding: quoted-printable\r\nContent-Type: text/html;\n\tcharset=us-ascii\r\n\r\n&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body style=3D&quot;word-wrap: break-word; -webkit-nbsp-mode:=\r\n space; -webkit-line-break: after-white-space; &quot;&gt;&lt;div&gt;I am working on a HTT=\r\nP interface to a persietent store that is backed by a slightly tweaked vers=\r\nion of Project Voldemort. The problem I am faced with is how to be able to =\r\nexpose a means to the caller a way to invalidate specific reivision IDs wit=\r\nhout having to rely on out of band information. Currently, there is an opti=\r\non on the table to use only ETags to express this, but I&#39;m not convinced th=\r\nat this is the right approach. I am not expert on ETags, so I thought I&#39;d b=\r\nring the question up here.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Right now, our interfac=\r\ne is rather simple and is similar to the proposed Voldemort REST API descri=\r\nbe here:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;a href=3D&quot;https://github.com/afeinberg/v=\r\noldemort/wiki/REST-API-Proposal&quot;&gt;https://github.com/afeinberg/voldemort/wik=\r\ni/REST-API-Proposal&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Currently, we are using ET=\r\nags rather than a custom HTTP header to convey revisions. Many of our appli=\r\ncations that will use this API will be passing through intermediaries, many=\r\n of which are already known to strip non-standard HTTP headers. For the mos=\r\nt part, the use of ETags works fine to handle typical conditional write ope=\r\nrations. If the revision the client has is not current, we can successfully=\r\n block the write until the caller resolves the conflicts. This works just d=\r\nandy right now.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;What doesn&#39;t work so good is when =\r\nwe have the condition that the server has more than one version of the valu=\r\ne due a downed node or replication issue. Our native API have the following=\r\n parameters:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;The new state of the value&lt;/l=\r\ni&gt;&lt;li&gt;A collection of the revision IDs to invalidate&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;b=\r\nr&gt;&lt;/div&gt;&lt;div&gt;One of our requirements is to only invalidate the revisions th=\r\nat the client wants to. If the system has version &#39;a&#39;, &#39;b&#39;, and &#39;c&#39; for res=\r\nource &#39;/mystore/12345&#39;, they should be able to create version &#39;ab&#39; from &#39;a&#39;=\r\n and &#39;b&#39;, leaving version &#39;c&#39; alone.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Here&#39;s our pr=\r\nocess flow works right now: a client issues a GET:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div=\r\n&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;&#39;Courier New&#39;&quot;&gt;GET /mystore/12345=\r\n HTTP/1.1&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;&#39;Courie=\r\nr New&#39;&quot;&gt;Host: &lt;a href=3D&quot;http://mydb.example.com&quot;&gt;mydb.example.com&lt;/a&gt;&lt;/fon=\r\nt&gt;&lt;/div&gt;&lt;div&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;&#39;Courier New&#39;&quot;&gt;Accept=\r\n: application/octet-stream, multipart/mixed;q=3D0.8, application/json;q=3D0=\r\n.7, */*;q=3D0.5&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;If there are multiple revis=\r\nions, they&#39;d get somethig like so:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;font class=3D&quot;=\r\nApple-style-span&quot; face=3D&quot;&#39;Courier New&#39;&quot;&gt;HTTP/1.1 300 Multiple Choices&lt;/fon=\r\nt&gt;&lt;/div&gt;&lt;div&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;&#39;Courier New&#39;&quot;&gt;Last-M=\r\nodified: Thu, 21 Apr 2011 18:24:31 GMT&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font class=3D&quot;Appl=\r\ne-style-span&quot; face=3D&quot;&#39;Courier New&#39;&quot;&gt;Content-Type: multipart/mixed; boundry=\r\n=3D&quot;rev&quot;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;&#39;Courier=\r\n New&#39;&quot;&gt;Date: Thu, 28 Apr 2011 17:43:52 GMT&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font class=3D&quot;=\r\nApple-style-span&quot; face=3D&quot;&#39;Courier New&#39;&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font class=\r\n=3D&quot;Apple-style-span&quot; face=3D&quot;&#39;Courier New&#39;&quot;&gt;--rev&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font c=\r\nlass=3D&quot;Apple-style-span&quot; face=3D&quot;&#39;Courier New&#39;&quot;&gt;Location: &lt;a href=3D&quot;http:=\r\n//mydb.example.com/mystore/12345?rev=3Da&quot;&gt;http://mydb.example.com/mystore/1=\r\n2345?rev=3Da&lt;/a&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;=\r\n&#39;Courier New&#39;&quot;&gt;Content-Type: application/octet-stream&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;fon=\r\nt class=3D&quot;Apple-style-span&quot; face=3D&quot;&#39;Courier New&#39;&quot;&gt;ETag: a&lt;/font&gt;&lt;/div&gt;&lt;di=\r\nv&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;&#39;Courier New&#39;&quot;&gt;Last-Modified: Th=\r\nu, 21 Apr 2011 18:24:31 GMT&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font class=3D&quot;Apple-style-spa=\r\nn&quot; face=3D&quot;&#39;Courier New&#39;&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font class=3D&quot;Apple-style-=\r\nspan&quot; face=3D&quot;&#39;Courier New&#39;&quot;&gt;&lt;i&gt;...binary content...&lt;/i&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;=\r\nfont class=3D&quot;Apple-style-span&quot; face=3D&quot;&#39;Courier New&#39;&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;di=\r\nv&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;&#39;Courier New&#39;&quot;&gt;--rev&lt;/font&gt;&lt;/div=\r\n&gt;&lt;div&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;&#39;Courier New&#39;&quot;&gt;Location: &lt;a =\r\nhref=3D&quot;http://mydb.example.com/mystore/12345?rev=3Db&quot;&gt;http://mydb.example.=\r\ncom/mystore/12345?rev=3Db&lt;/a&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font class=3D&quot;Apple-style-s=\r\npan&quot; face=3D&quot;&#39;Courier New&#39;&quot;&gt;Content-Type: application/octet-stream&lt;/font&gt;&lt;/=\r\ndiv&gt;&lt;div&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;&#39;Courier New&#39;&quot;&gt;ETag: b&lt;/f=\r\nont&gt;&lt;/div&gt;&lt;div&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;&#39;Courier New&#39;&quot;&gt;Last=\r\n-Modified: Fri, 22 Apr 2011 18:24:31 GMT&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font class=3D&quot;Ap=\r\nple-style-span&quot; face=3D&quot;&#39;Courier New&#39;&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font class=3D=\r\n&quot;Apple-style-span&quot; face=3D&quot;&#39;Courier New&#39;&quot;&gt;&lt;i&gt;...binary content...&lt;/i&gt;&lt;/font=\r\n&gt;&lt;/div&gt;&lt;div&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;&#39;Courier New&#39;&quot;&gt;&lt;br&gt;&lt;/f=\r\nont&gt;&lt;/div&gt;&lt;div&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;&#39;Courier New&#39;&quot;&gt;--re=\r\nv&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;&#39;Courier New&#39;&quot;&gt;=\r\nLocation: &lt;a href=3D&quot;http://mydb.example.com/mystore/12345?rev=3Dc&quot;&gt;http://=\r\nmydb.example.com/mystore/12345?rev=3Dc&lt;/a&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font class=3D&quot;=\r\nApple-style-span&quot; face=3D&quot;&#39;Courier New&#39;&quot;&gt;Content-Type: application/octet-st=\r\nream&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;&#39;Courier New=\r\n&#39;&quot;&gt;ETag: c&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;&#39;Couri=\r\ner New&#39;&quot;&gt;Last-Modified: Fri, 22 Apr 2011 18:32:31 GMT&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;fon=\r\nt class=3D&quot;Apple-style-span&quot; face=3D&quot;&#39;Courier New&#39;&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;=\r\nfont class=3D&quot;Apple-style-span&quot; face=3D&quot;&#39;Courier New&#39;&quot;&gt;&lt;i&gt;...binary content=\r\n...&lt;/i&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;We&#39;re using mutlipart for clients t=\r\nhat prefer to get all revisions in one go, and this response is necessarily=\r\n etched in stone. Now to resolve revisions &#39;a&#39; and &#39;b&#39;, it has been suggest=\r\ned that we do soemthing like so:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;font class=3D&quot;Ap=\r\nple-style-span&quot; face=3D&quot;&#39;Courier New&#39;&quot;&gt;PUT /mystore/12345 HTTP/1.1&lt;/font&gt;&lt;/=\r\ndiv&gt;&lt;div&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;&#39;Courier New&#39;&quot;&gt;Host: &lt;a h=\r\nref=3D&quot;http://mydb.example.com&quot;&gt;mydb.example.com&lt;/a&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font=\r\n class=3D&quot;Apple-style-span&quot; face=3D&quot;&#39;Courier New&#39;&quot;&gt;Content-Type: applicatio=\r\nn/octet-stream&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;&#39;C=\r\nourier New&#39;&quot;&gt;If-Match: &quot;a&quot;, &quot;b&quot;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;font class=\r\n=3D&quot;Apple-style-span&quot; face=3D&quot;&#39;Courier New&#39;&quot;&gt;...new state of the entity...&lt;=\r\n/font&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;In this case, we should end up with version=\r\ns &#39;ab&#39; and &#39;c&#39;.&nbsp;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The problems I see with this=\r\n approach are as follows:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;The HTTP specifi=\r\ncation seems to suggest that in the conditional write case, the server shou=\r\nld always maintain a single, current version of the representation. In this=\r\n case, we&#39;ve got multiple revisions that are current.&lt;/li&gt;&lt;li&gt;Including the=\r\n Etag in the multipart/mixed response required out-of-band information. The=\r\n client must know that they must do something special with the etag value f=\r\nor each part.&lt;/li&gt;&lt;li&gt;If we use multiple resources for each revision, it al=\r\nso requires out-of-band information in that you need to know that you need =\r\nthe etags from each revision resource you want to merge.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;di=\r\nv&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;As an alternative approach, it is likely better to express=\r\n the specific versions you want to merge in the URI rather than etags. But =\r\nnow we&#39;ve got two different ways of resolving conflicts based on the condit=\r\nion.&nbsp;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Ryan-&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/di=\r\nv&gt;&lt;/body&gt;&lt;/html&gt;\r\n--Apple-Mail=_EE197967-1F88-498F-8732-C66D6A4577F9--\r\n\n"}}
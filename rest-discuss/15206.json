{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":124198377,"authorName":"William Martinez Pomares","from":"&quot;William Martinez Pomares&quot; &lt;wmartinez@...&gt;","profile":"willmarpo","replyTo":"SENDER","senderId":"03FDhZjkoEnQhrrbzqRkC5ltCzZxHKoxOK47fOGETe7vIweNVhc7gIi-ZU_-Yr7eSkqxJoAfr1gxg5VMBV_YjtjFeB3BzVkWyyb1VypPs4c4O_fh2wlxfGkl","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: How comes to life an &quot;Application&quot; in the sense of  Roy&#39;s dissertation?","postDate":"1270943776","msgId":15206,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGhwcjM3MCtrbTdnQGVHcm91cHMuY29tPg==","inReplyToHeader":"PDIwMTAwNDEwMDgyODAzLjQzMzQxMDFhLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4="},"prevInTopic":15205,"nextInTopic":15207,"prevInTime":15205,"nextInTime":15207,"topicId":15152,"numMessagesInTopic":30,"msgSnippet":"Hello Erick. I see the discussion it getting interesting. All your points make sense and I do agree with most of them. Still, I think due to my quick writing,","rawEmail":"Return-Path: &lt;wmartinez@...&gt;\r\nX-Sender: wmartinez@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 77119 invoked from network); 10 Apr 2010 23:56:29 -0000\r\nX-Received: from unknown (66.196.94.107)\n  by m3.grp.sp2.yahoo.com with QMQP; 10 Apr 2010 23:56:29 -0000\r\nX-Received: from unknown (HELO n37b.bullet.mail.sp1.yahoo.com) (66.163.168.151)\n  by mta3.grp.re1.yahoo.com with SMTP; 10 Apr 2010 23:56:29 -0000\r\nX-Received: from [69.147.65.171] by n37.bullet.mail.sp1.yahoo.com with NNFMP; 10 Apr 2010 23:56:17 -0000\r\nX-Received: from [98.137.34.72] by t13.bullet.mail.sp1.yahoo.com with NNFMP; 10 Apr 2010 23:56:17 -0000\r\nDate: Sat, 10 Apr 2010 23:56:16 -0000\r\nTo: rest-discuss@yahoogroups.com\r\nMessage-ID: &lt;hpr370+km7g@...&gt;\r\nIn-Reply-To: &lt;20100410082803.4334101a.eric@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;ISO-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-Yahoo-Newman-Property: groups-compose\r\nFrom: &quot;William Martinez Pomares&quot; &lt;wmartinez@...&gt;\r\nSubject: Re: How comes to life an &quot;Application&quot; in the sense of  Roy&#39;s dissertation?\r\nX-Yahoo-Group-Post: member; u=124198377; y=aZnc2v4zm0EaivDXn7Sqt6hRYUeJwTM61h1xdFWimtRvdbhx\r\nX-Yahoo-Profile: willmarpo\r\n\r\nHello Erick.\nI see the discussion it getting interesting.\n\nAll your points =\r\nmake sense and I do agree with most of them. Still, I think due to my quick=\r\n writing, I was no clear and you understood some concepts a little bit diff=\r\nerent from what I was trying to say. Also, you take some other concepts und=\r\ner a light that I do think may lead to some confusion. So, quickly, let me =\r\nclarify.\n\n1. I&#39;m not comparing REST to a computer, nor to hardware. I was g=\r\niven an example of a system, any system. Sorry about that.\n\n2. To me, any i=\r\nnterface is in the limits of a system. What is outside the limits is the cl=\r\nient of the system. And here is a confusion many engineering students have =\r\nwhen we look at client-server style. They assume the server is a system and=\r\n the client the one that uses it, but in that style both elements are part =\r\nof the system!\n\nSame in REST. When I mention client of an API, I mean the c=\r\nlient that will use the system (and thus, not part of it) through an interf=\r\nace. REST uses the client-server style, in which the client is part of the =\r\nsystem, not outside or it. It may need an interface to communicate with the=\r\n server, but this interface is not an external one. \n\nThis is a little hard=\r\n to explain. We have a REST system, which includes the clients in the terms=\r\n of the client-server style. The BIG REST system is the web, as a whole. Cl=\r\nients are part of that system, and the particular thing about the API those=\r\n In-system client use, is that API is a network based API (as opposed as a =\r\nlibrary based one).\n\n3. So... All you say is totally correct for the client=\r\ns (user agents) in the REST system (your REST system, not the Web). Now, on=\r\n the web, you also have clients of your REST system, that is also on the we=\r\nb (we assume you can have a private REST system in your own cloud, that is =\r\nnot a sin). YOur system maybe is not a REST system (as you mention of WP), =\r\nand you made that REST wrapper (an API) so it can be used in the web (the b=\r\nig system) so other people in the web can use your system. You are building=\r\n an API, that starts as an adapter and (if you change WP to become RESTfull=\r\n) ends up as a facade. \n\nYou are building then and API. For you WP system. =\r\nTwo things. That was my point: what I actually see is people having a non-R=\r\nEST system that want to build a REST API. An adapter.   \n\nSo, I guess we ar=\r\ne on the same page, only that you use the term API and System as similar/th=\r\ne same thing (blurring the limit between the API and the encompassed system=\r\n, as if they were parts of a whole, which is not bad), while I actually wan=\r\nt to state the difference. When a client comes to me saying: &quot;We want to mo=\r\nve on and become REST&quot;, I ask : Do you want your old system to be re-archit=\r\nected using REST, or do you want to build an API around it?\nWhen a client c=\r\nomes saying they want an API, I surely know there is a system (certainly no=\r\nt REST) on the back, that wants to be exposed to the web. \n\nWilliam Martine=\r\nz Pomares\n\n--- In rest-discuss@yahoogroups.com, &quot;Eric J. Bowman&quot; &lt;eric@...&gt;=\r\n wrote:\n&gt;\n&gt; To clarify what I mean by an &quot;incalculable number&quot; of REST appl=\r\nications\n&gt; for any given REST system, an analogy is that the 26 letters of =\r\nthe\n&gt; alphabet lead to an incalculable number of words.  Some words are\n&gt; i=\r\nncredibly common -- conjunctions come to mind.  Same with REST\n&gt; applicatio=\r\nns; there will be common usage patterns, of varying length,\n&gt; and these may=\r\n be optimized.\n&gt; \n&gt; &quot;William Martinez Pomares&quot; wrote:\n&gt; &gt;\n&gt; &gt; I do differen=\r\ntiate the concepts. A system is that collection of\n&gt; &gt; components organized=\r\n and with particular interactions. Those may\n&gt; &gt; support different applicat=\r\nions, that are not more than a set of task\n&gt; &gt; to produce a goal. A system =\r\nis my computer, and applications uses\n&gt; &gt; some of the components to achieve=\r\n a goal.\n&gt; &gt; \n&gt; \n&gt; I&#39;m only interested in using the term &quot;system&quot; in the RE=\r\nST sense so\n&gt; clearly evident in the thesis.  I may, in other contexts, use=\r\n the term\n&gt; &quot;system&quot; in the sysadmin sense, to refer to a physical system. =\r\n I don&#39;t\n&gt; like to talk about system in the sysadmin sense on rest-discuss,=\r\n even\n&gt; as an analogy, to avoid confusion and because hardware setup isn&#39;t\n=\r\n&gt; relevant to REST.\n&gt; \n&gt; We don&#39;t call REST systems &quot;applications&quot; because =\r\nthat takes a whole\n&gt; slew of components and connectors for granted, in orde=\r\nr for it to\n&gt; work.  So I don&#39;t like the analogy -- a browser application u=\r\nses other\n&gt; components resident on the same physical system, but others are=\r\n located\n&gt; across the network.  REST applications are distributed.\n&gt; \n&gt; &gt;\n&gt;=\r\n &gt; So, you may create a system that supports several apps, even some you\n&gt; =\r\n&gt; didn&#39;t think of!\n&gt; &gt; \n&gt; \n&gt; Exactly what&#39;s meant by &quot;serendipitous re-use&quot;=\r\n.  ;-)  This is exactly\n&gt; what I mean when I say a REST system has an &quot;inca=\r\nlculable number&quot; of\n&gt; applications.  The developer can&#39;t possibly imagine t=\r\nhe possible use\n&gt; cases, more on that in my next response to Jan...\n&gt; \n&gt; &gt;\n=\r\n&gt; &gt; Now, System is not an API. I actually argue about the term REST API\n&gt; &gt;=\r\n since it comes, I think, from the idea that REST is a Service or RPC\n&gt; &gt; r=\r\neplacement.\n&gt; &gt; \n&gt; \n&gt; You&#39;re right, the system encompasses many components,=\r\n but these things\n&gt; are out of the REST developer&#39;s hands.  Everything that=\r\n is in the REST\n&gt; developer&#39;s hands, is the API for making the overall syst=\r\nem do work.\n&gt; \n&gt; I think the term REST API was derived from the fundamental=\r\n nature of\n&gt; REST itself.  This is the basis for my interchangeable usage o=\r\nf &quot;REST\n&gt; system&quot; and &quot;REST API&quot;...\n&gt; \n&gt; &quot;The resource implementation detai=\r\nls are hidden behind the interface.&quot;\n&gt; \n&gt; While the connection to and natur=\r\ne of the backend are certainly parts\n&gt; of your overall system architecture,=\r\n they&#39;ve nothing to do with REST\n&gt; architecture.  REST is all about the com=\r\nmunication between connectors\n&gt; over the wire -- REST applications are dist=\r\nributed.\n&gt; \n&gt; So we&#39;re only concerned with the self-documenting interfaces =\r\nthat\n&gt; describe a REST system to the world, and the response codes a system=\r\n\n&gt; generates to various methods invoked on various resources.  You know --\n=\r\n&gt; the API... ;-).\n&gt; \n&gt; &gt;\n&gt; &gt; An API is a layer between your system and an e=\r\nxternal client. Of\n&gt; &gt; course, that client is not part of your system.\n&gt; &gt;\n=\r\n&gt; \n&gt; User agent is a better term than client.  The user agent is absolutely=\r\n a\n&gt; part of the system.  In fact, REST applications are executed within\n&gt; =\r\nuser agents -- the application state isn&#39;t always held entirely within\n&gt; th=\r\ne representation of a resource, it usually must be rendered to obtain\n&gt; an =\r\napplication steady-state.  The combination of representation plus\n&gt; user ag=\r\nent *is* the REST application.  If HTML + browser, it&#39;s a browser\n&gt; applica=\r\ntion (with, of course, a client connector).\n&gt; \n&gt; &quot;[T]he interaction of a re=\r\nal system usually involves an extensive number\n&gt; of components, resulting i=\r\nn an overall view that is obscured by the\n&gt; details.&quot;\n&gt; \n&gt; An API is the la=\r\nyer between your system and external components, like\n&gt; caches.  The user a=\r\ngent may not ever contact the origin server directly,\n&gt; and a cache may be =\r\nable to serve all requests without contacting the\n&gt; origin server either.  =\r\nThat cache becomes part of your system -- one of\n&gt; those components that we=\r\n take for granted -- it&#39;s executing a REST\n&gt; application against the origin=\r\n server, to determine resource state\n&gt; using conditional requests.\n&gt; \n&gt; So =\r\na REST API is truly a programming interface for applications,\n&gt; whether the=\r\ny&#39;re executing on the requesting user-agent or on some\n&gt; intermediary.  How=\r\n would a cache know how to service requests on behalf\n&gt; of my origin server=\r\n, if it can&#39;t be programmed to understand my service\n&gt; parameters?  I progr=\r\nam intermediaries the same way I program user\n&gt; agents, with a REST API.\n&gt; =\r\n\n&gt; &gt;\n&gt; &gt; API may be a facade, or an adapter. If a facade, if the system is\n=\r\n&gt; &gt; REST, the API is a REST constrained simplification of the system. If\n&gt; =\r\n&gt; an adapter, the API is something that will convert, say, RPC\n&gt; &gt; interact=\r\nions into REST interactions. \n&gt; &gt; \n&gt; \n&gt; I don&#39;t see the distinction, and I =\r\ndon&#39;t see how such a distinction can\n&gt; be made.  Give me a bunch of RPC end=\r\npoints, and I can code you a REST\n&gt; system to drive them.  Since the implem=\r\nentation details are hidden\n&gt; behind the interface, the API is something th=\r\nat will transfer\n&gt; representations of application state to user agents, and=\r\n instruct them\n&gt; how to transfer representations of desired application sta=\r\nte to the\n&gt; origin server.\n&gt; \n&gt; REST is a layered-system architecture.  I a=\r\npply REST constraints to the\n&gt; communication between the connectors of my b=\r\nack-end system, but this is\n&gt; not part of my API since it&#39;s an implementati=\r\non detail hidden behind\n&gt; the interface to the world.  That interface to th=\r\ne world is my API.\n&gt; \n&gt; &gt;\n&gt; &gt; The most typical is you have non-REST system =\r\n(SOA maybe, or a plain\n&gt; &gt; old OO) and you want to be REST. You create an A=\r\nPI, Adapter, that\n&gt; &gt; will allow REST like clients to use your OO system as=\r\n a REST one. The\n&gt; &gt; API will accept HTTP operations in one face, and in th=\r\ne other one\n&gt; &gt; will invoke object methods. \n&gt; &gt;\n&gt; \n&gt; Bear with me...\n&gt; \n&gt; =\r\nIn my case, the non-REST system is WordPress.  I create a REST layer to\n&gt; e=\r\nncapsulate this legacy system, just like the thesis says.  WP only\n&gt; genera=\r\ntes Atom Entry, Atom Feed and Atom Category documents.  WP creates\n&gt; the UR=\r\nI allocation scheme you see in my demo via a module with a couple\n&gt; of supp=\r\nort functions for my template, which generates Atom instead of\n&gt; HTML.  But=\r\n, WP is incapable of responding to that URI allocation scheme\n&gt; directly wi=\r\nthout extensive modification.\n&gt; \n&gt; Which is OK by me, since I don&#39;t want to=\r\n expose WP to the world; it\n&gt; runs on its own IP and rejects requests from =\r\nany IP that isn&#39;t the\n&gt; encapsulation layer&#39;s or mine (initially, I&#39;ll use =\r\nthe WP interface\n&gt; until development is completed on the Xforms interface, =\r\nthen I&#39;ll cut\n&gt; out the CP, and have the main page return a configuration f=\r\norm to the\n&gt; admin user when an OPTIONS request is made with proper credent=\r\nials).\n&gt; \n&gt; The encapsulation layer converts all requests to /index.php?p=\r\n=3D{x}, and\n&gt; acts as a reverse-proxy/cache for the response.  A request to=\r\n post a\n&gt; comment to a thread is handled by the encapsulation layer; once h=\r\nandled\n&gt; (validated and such), the request is passed on to WP using Atom\n&gt; =\r\nProtocol.  The encapsulation layer creates separate Atom Feeds for each\n&gt; t=\r\nhread, whereas WP&#39;s Atom Protocol capability considers the entire\n&gt; weblog =\r\nas a single collection.\n&gt; \n&gt; The future of my project consists of replacing=\r\n WP with an Atom Store.\n&gt; The encapsulation layer (REST wrapper) has a modu=\r\nlar design, to support\n&gt; interfacing with multiple source generators.  So a=\r\n new module is needed\n&gt; which, instead of abstracting out /index.php?p=3D{x=\r\n} into a hierarchical\n&gt; URI allocation scheme, abstracts out the URI alloca=\r\ntion scheme of the\n&gt; Atom Store (which is the same as that used in my atom:=\r\nid&#39;s, btw) into my\n&gt; site&#39;s URI allocation scheme.\n&gt; \n&gt; So, I can swap out =\r\na MySQL-driven WP content generation layer for a\n&gt; simple Atom Store XMLDB-=\r\ndriven content generation layer that&#39;s not in\n&gt; any way similar except for =\r\nits abilities to generate Atom content that\n&gt; exactly matches what WP gener=\r\nates, and accept posts via Atom Protocol.\n&gt; The REST wrapper completely iso=\r\nlates this madness from the outside\n&gt; world. Commenters on my weblog won&#39;t =\r\nnotice a thing -- because I\n&gt; haven&#39;t changed the API in the slightest.  (M=\r\ny back-end API changes a\n&gt; bit, but it&#39;s using Atom Protocol either way.)\n&gt;=\r\n \n&gt; By sharing the self-documenting interfaces to my system with the world,=\r\n\n&gt; I am providing a stable API which is unaffected by the nature of my\n&gt; ba=\r\nck-end implementation.  The API is the interface behind which the\n&gt; impleme=\r\nntation details are hidden.  REST API &quot;Implementations are\n&gt; decoupled from=\r\n the services they provide, which encourages independent\n&gt; evolvability.&quot;\n&gt;=\r\n \n&gt; Do you see how I just described a REST API which evolves from your\n&gt; &quot;a=\r\ndapter&quot; into your &quot;facade&quot; over time?  WP isn&#39;t RESTful, but the Atom\n&gt; Sto=\r\nre certainly will be.  This distinction has no impact whatsoever on\n&gt; any a=\r\npplication running against my system, because it&#39;s hidden behind\n&gt; the gene=\r\nric connector interface, which is the point of a REST API.\n&gt; \n&gt; &gt; \n&gt; &gt; See =\r\nhow I see it?\n&gt; &gt; \n&gt; \n&gt; Nope, sorry.  You&#39;re trying to make a distinction w=\r\nhich assumes the API\n&gt; is coupled to the back-end implementation, when such=\r\n coupling doesn&#39;t\n&gt; exist in a REST API.\n&gt; \n&gt; -Eric\n&gt;\n\n\n\n"}}
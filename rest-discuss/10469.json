{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":302633978,"authorName":"Daniel Yokomizo","from":"&quot;Daniel Yokomizo&quot; &lt;daniel.yokomizo@...&gt;","profile":"daniel_yokomiso","replyTo":"SENDER","senderId":"kVu1TG8lLyPb3t76-O7STUpqDVg6GVf6Kd4L1IqefJ52qgpzE79ZkCxbfmgIGuWDoVJFY79jV0aRmCZ8knKrtUGv3jQxjz9oIVQx-WtoKzEUdJSM","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Objects at REST...","postDate":"1205358697","msgId":10469,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGU1YzZlY2FiMDgwMzEyMTQ1MXk1ZWQyZWM1MHA1MTI5ZGE0NTRiOTk3MzJAbWFpbC5nbWFpbC5jb20+","inReplyToHeader":"PDQ3RDgwODA5LjI4OTkuMjRFQjNEODRAYW5kcnplai5jaGFlcm9uLmNvbT4=","referencesHeader":"PDQ3RDc4NjBELjMyNzUuMjJFRjgwNjBAYW5kcnplai5jaGFlcm9uLmNvbT4JIDxlNWM2ZWNhYjA4MDMxMjA2MjNrNmFiNzdlMTNxZDdlMzVkMzU2ZjkxMzM5Y0BtYWlsLmdtYWlsLmNvbT4JIDw0N0Q4MDgwOS4yODk5LjI0RUIzRDg0QGFuZHJ6ZWouY2hhZXJvbi5jb20+"},"prevInTopic":10466,"nextInTopic":10477,"prevInTime":10468,"nextInTime":10470,"topicId":10454,"numMessagesInTopic":17,"msgSnippet":"On Wed, Mar 12, 2008 at 6:42 PM, Andrzej Jan Taramina ... I m not encouraging anything. As I said the primary method of interaction is basically REST using","rawEmail":"Return-Path: &lt;daniel.yokomizo@...&gt;\r\nX-Sender: daniel.yokomizo@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 47781 invoked from network); 12 Mar 2008 21:51:42 -0000\r\nX-Received: from unknown (66.218.67.97)\n  by m46.grp.scd.yahoo.com with QMQP; 12 Mar 2008 21:51:42 -0000\r\nX-Received: from unknown (HELO fg-out-1718.google.com) (72.14.220.157)\n  by mta18.grp.scd.yahoo.com with SMTP; 12 Mar 2008 21:51:39 -0000\r\nX-Received: by fg-out-1718.google.com with SMTP id e21so2611886fga.10\n        for &lt;rest-discuss@yahoogroups.com&gt;; Wed, 12 Mar 2008 14:51:37 -0700 (PDT)\r\nX-Received: by 10.86.73.17 with SMTP id v17mr1113608fga.37.1205358697705;\n        Wed, 12 Mar 2008 14:51:37 -0700 (PDT)\r\nX-Received: by 10.86.99.14 with HTTP; Wed, 12 Mar 2008 14:51:37 -0700 (PDT)\r\nMessage-ID: &lt;e5c6ecab0803121451y5ed2ec50p5129da454b99732@...&gt;\r\nDate: Wed, 12 Mar 2008 18:51:37 -0300\r\nTo: andrzej@...\r\nCc: rest-discuss@yahoogroups.com\r\nIn-Reply-To: &lt;47D80809.2899.24EB3D84@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: 7bit\r\nContent-Disposition: inline\r\nReferences: &lt;47D7860D.3275.22EF8060@...&gt;\n\t &lt;e5c6ecab0803120623k6ab77e13qd7e35d356f91339c@...&gt;\n\t &lt;47D80809.2899.24EB3D84@...&gt;\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Daniel Yokomizo&quot; &lt;daniel.yokomizo@...&gt;\r\nSubject: Re: [rest-discuss] Objects at REST...\r\nX-Yahoo-Group-Post: member; u=302633978; y=0KeiEVkX_stbffY2ELVMt_KTsfQ_5f3-R7QNo8862TA6ZcOYZKL932du\r\nX-Yahoo-Profile: daniel_yokomiso\r\n\r\nOn Wed, Mar 12, 2008 at 6:42 PM, Andrzej Jan Taramina\n&lt;andrzej@...&gt; wrote:\n&gt;\n&gt;  Daniel suggests:\n&gt;\n&gt;  &gt; otherwise we treat methods as subordinate URLs of\n&gt;  &gt; the parent objects (e.g. /articles/1/publish()), but it only accepts\n&gt;  &gt; GET (we return a representation to fill the parameters and submit it,\n&gt;  &gt; usually is a xhtml form but it can be something else for other\n&gt;  &gt; media-types) and POST for invocation responding with redirect. It will\n&gt;  &gt; emphasize not using RPC style methods but if you must it should use\n&gt;  &gt; safe semantics.\n&gt;\n&gt;  That&#39;s the start of a very slippery slope.  You&#39;re basically encouraging the\n&gt;  OO folks to tunnel RPC over HTTP.\n\nI&#39;m not encouraging anything. As I said the primary method of\ninteraction is basically REST using whatever verbs you are want to\nwork with (e.g. HTTP, WebDAV), but there&#39;s a escape clause, which is\ndifferent from encouraging. As I said it only supports POST, which\ngives almost no guarantees and it return a 303 if there&#39;s a return to\na know resource (no body in any case), so the user of the framework\nmust work with resources.\n\nREST is an architectural choice that don&#39;t suit all needs, as a\nframework provider I need to either address this (which I decided to\ndo in a way that is semantically correct) or ignore it and let the\nprogrammers come with a thousand non-conforming solutions.\n\n&gt;  I think we&#39;ve had enough discussions of why that is not such a good idea on\n&gt;  the rest forums already.\n&gt;\n&gt;  But you just proved my point...thanks!\n&gt;\n&gt;\n&gt;  &gt; Obviously I&#39;m biased for it but I think it&#39;s a good way to develop an\n&gt;  &gt; application, because the user&#39;s interface will map the domain model.\n&gt;\n&gt;  That doesn&#39;t work in the world of machine to machine communications, since it\n&gt;  is rare that disparate systems have common domain or object models.\n\nIt doesn&#39;t matter if the user is a machine or a human. If the model we\nuse to expose the resources is different from the domain model,\notherwise the programmer have to write especialized code to do the\nmapping. It&#39;s the same issue with ORM, this kind of impedance mismatch\nalways requires more work.\n\n&gt;  The better approach in that scenario is to design a data representation\n&gt;  format that is better suited to the integration and transmission of\n&gt;  information, rather than cater to internal implementation models on both\n&gt;  sides.\n&gt;\n&gt;\n&gt;  &gt; As we can use URIs to identify objects we can save those in other\n&gt;  &gt; systems, so we are planning to use URIs for every inter application\n&gt;  &gt; references, which lends itself to very easy integration.\n&gt;\n&gt;  I beg to differ.  Common/consistent URI&#39;s are a help, but a properly designed\n&gt;  data representation, with concomittent semantic definitions, independent of\n&gt;  back end domain/object models is what makes integration easier, though even\n&gt;  at the best of times, integration is still hard.\n\nInstead of sending &lt;customer id=&#39;XXX&#39;/&gt; we respond with &lt;customer\nref=&#39;/customers/XXX&#39;/&gt; which is the REST approach. It&#39;s easier to have\nintegration if we know that every resource is sent with its\ncorresponding URI.\n\n&gt;  &gt; Also if the\n&gt;  &gt; only interface to your app is via REST, everything can be an WS\n&gt;  &gt; without additional effort.\n&gt;\n&gt;  What you&#39;re doing isn&#39;t REST for the most part.  It&#39;s using HTTP as a\n&gt;  transport mechanism for RPC and inter-object distributed communications.\n\nWhy do you think so? If I have all my operations working on resources\nand I&#39;m able to issue a DELETE /orders/XXX, it can work if the client\nis a browser or another app. The whole idea behind RESTful Web\nServices is about this. My apps are resource oriented, the only usage\nof POST in the app I&#39;m working right now is when I want to create new\nresources (i.e. POST /resources). To my app it doesn&#39;t matter if the\nrequest comes from a browser or another machine, that&#39;s why I say that\nI have no effort providing WS for everything.\n\n&gt;   It&#39;s also great because you think much more\n&gt;  &gt; about your domain and don&#39;t worry with user interfaces, because this\n&gt;  &gt; problem is solved, so essentially you know that in the interface you\n&gt;  &gt; can just navigate via URIs and find what do you want (e.g.\n&gt;  &gt; /authors/Joe_Blogger/posts?published=false) which makes much easier to\n&gt;  &gt; write ajax widgets in the app without up front design.\n&gt;\n&gt;  You are mixing metaphors.  Integration is not an Ajax-based activity\n&gt;  (usually), since Ajax is geared towards user UIs, not machine to machine\n&gt;  integration, the latter being the much harder problem to solve, and providing\n&gt;  much more benefit when it is solved (think healthcare for a good example of\n&gt; this).\n\nAjax is just an example. When I talked about ease of integration it\nwas an earlier point. My point is if you have a generic way to\nexposing your domain via arbitrary composable URIs you don&#39;t need to\npredict that in some place of yoru system you&#39;ll need to provide a\nlist of something filtered by some arbitrary criteria, the framework\njust maps the URI to the objects, filter the available results,\nchooses the response&#39;s content type using negotiation and the\nregistered representations for the resulting object and gives it to\nthe user. As an example you can build a mashup in another app that\ncalls an arbitrary URI of your app and gets the result as XML or JSON\nor whatever. As the URI represents object navigation is possible to\njust GET /blogs/XXX/posts/YYY/author and get a JSON which can be used\nby a javascript widget or another app, instead of doing GET /blogs/XXX\nparse the results, GET /posts/YYY parse the results and then GET\n/authors/ZZZ.\n\n&gt;  Andrzej Jan Taramina\n&gt;  Chaeron Corporation: Enterprise System Solutions\n&gt;  http://www.chaeron.com\n\nDaniel Yokomizo.\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":87113616,"authorName":"S. Mike Dierken","from":"&quot;S. Mike Dierken&quot; &lt;mdierken@...&gt;","profile":"mdierken","replyTo":"SENDER","senderId":"eky9Fjvbx3W8S-eFEUpE1UUPspFcbODy-w4Jf7lsmC3pAdOHxdViHu8DYNyVZhYyWJff1rgev3zFg1PE7vUF-2pJNdtk3anD1dGAJofT9Q","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Implementing RESTful Queue with HTTP","postDate":"1026622858","msgId":1853,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PE9FNjQ2TUxyMUtYekN3NnFxRlQwMDAwYjRlZUBob3RtYWlsLmNvbT4=","referencesHeader":"PEI5NTNCQkM5LjNERkMlamJvbmVAZGVlcGZpbGUuY29tPiA8MDBjODAxYzIyOWI3JGEwN2YwYzcwJDJhMDExNGFjQE5JVEVPLkNPTT4gPE9FMzN3UlBRSVdETzNoUkRUNlowMDAwMDUzM0Bob3RtYWlsLmNvbT4="},"prevInTopic":0,"nextInTopic":1855,"prevInTime":1852,"nextInTime":1854,"topicId":1853,"numMessagesInTopic":10,"msgSnippet":"I ve been thinking about how to implement a Queue with HTTP. I m not interested in uber-efficiency, just the  requirement of one and only one consumer of a","rawEmail":"Return-Path: &lt;mdierken@...&gt;\r\nX-Sender: mdierken@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_0_7_4); 14 Jul 2002 04:55:15 -0000\r\nReceived: (qmail 94744 invoked from network); 14 Jul 2002 04:55:15 -0000\r\nReceived: from unknown (66.218.66.217)\n  by m14.grp.scd.yahoo.com with QMQP; 14 Jul 2002 04:55:15 -0000\r\nReceived: from unknown (HELO hotmail.com) (64.4.16.199)\n  by mta2.grp.scd.yahoo.com with SMTP; 14 Jul 2002 04:55:15 -0000\r\nReceived: from mail pickup service by hotmail.com with Microsoft SMTPSVC;\n\t Sat, 13 Jul 2002 21:55:15 -0700\r\nTo: &quot;rest-discuss&quot; &lt;rest-discuss@yahoogroups.com&gt;\r\nReferences: &lt;B953BBC9.3DFC%jbone@...&gt; &lt;00c801c229b7$a07f0c70$2a0114ac@...&gt; &lt;OE33wRPQIWDO3hRDT6Z00000533@...&gt;\r\nSubject: Implementing RESTful Queue with HTTP\r\nDate: Sat, 13 Jul 2002 22:00:58 -0700\r\nMIME-Version: 1.0\r\nContent-Type: text/plain;\n\tcharset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: 7bit\r\nX-Priority: 3\r\nX-MSMail-Priority: Normal\r\nX-Mailer: Microsoft Outlook Express 5.50.4133.2400\r\nX-MimeOLE: Produced By Microsoft MimeOLE V5.50.4133.2400\r\nMessage-ID: &lt;OE646MLr1KXzCw6qqFT0000b4ee@...&gt;\r\nX-OriginalArrivalTime: 14 Jul 2002 04:55:15.0094 (UTC) FILETIME=[A48CD360:01C22AF2]\r\nFrom: &quot;S. Mike Dierken&quot; &lt;mdierken@...&gt;\r\nX-Yahoo-Group-Post: member; u=87113616\r\nX-Yahoo-Profile: mdierken\r\n\r\n\nI&#39;ve been thinking about how to implement a Queue with HTTP. I&#39;m not\ninterested in uber-efficiency, just the  requirement of one and only one\nconsumer of a message.\n\nI&#39;ve got two approaches to model the queue - a visible (i.e. list-able)\ncollection of messages and as a &#39;head&#39; or &#39;next&#39; message. I&#39;m not sure the\n&#39;head&#39; approach will work.\n\na) Visible collection\nA client lists the messages and tries to process them one at a time. Tricky\nclients can use some sort of hashing algorithm to avoid collisions with\nother clients, but I&#39;m not concerned with that. But how do the clients\nactually &#39;take&#39; a message?\n\n1 New method - TAKE\nSomebody mentioned a while back a tuple-space system that had a &#39;take&#39;\noperation - which sounds about what is needed for a queue.  But I don&#39;t like\nthis approach.\n\n2 lock a message with PUT\nThe listing of pending messages includes a URI for each message and a URI\nfor a &#39;lock&#39; for a message. The client does a conditional PUT that succeeds\nonly if the lock resource doesn&#39;t already exist (something like\nif-none-match: * or maybe if-not-modified-since)\n\n3 remove message from queue with DELETE\nThe listing provides URIs which represent /links/ to messages which have\nURIs independent of being part of a queue. The client removed the message\nfrom the queue by doing a DELETE on the URI for the &#39;message in outbox&#39;\nresource. It then is free to get the message (as is anybody else, like for\naudits, referencing, etc.).\n\n4 others...\nAny others?\n\nIt&#39;s interesting that #2 and #3 use two URIs for each message, but different\nmethods. I guess the difference is #2 says &quot;PUT the status of &#39;not in\nqueue&#39;&quot; and #3 says &quot;DELETE from queue&quot;. I think I llike #2 better since it\ndepends on the value of a resource, rather than the existence of a resource.\n\n\n\n"}}
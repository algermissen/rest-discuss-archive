{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":304236879,"authorName":"Peter Williams","from":"Peter Williams &lt;pezra@...&gt;","profile":"peter_e_williams","replyTo":"SENDER","senderId":"GlO5gjee03TMtMfJK72obCAQuuTZluz5oRQsURCwdCe71ZR_PJmHyHE16mTJMFg837KsHauOH1k_t1kJ-lkjeUeDKcbzoiyw-4OlhMmR","spamInfo":{"isSpam":false,"reason":"4"},"subject":"Content-Location best practice? (was: Determining which Media type \tfor post/put)","postDate":"1276818599","msgId":15724,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEFBTkxrVGltMVlQZXYwVENWYXdDNFlGV2hMNmJ4WGtTTGlGNV9WOUljTloyUkBtYWlsLmdtYWlsLmNvbT4="},"prevInTopic":0,"nextInTopic":15725,"prevInTime":15723,"nextInTime":15725,"topicId":15724,"numMessagesInTopic":11,"msgSnippet":"I want to leave the HTTP best practice part of this for a bit. That is of less interest to me than fully understanding the REST aspects.  Once we have settle","rawEmail":"Return-Path: &lt;pezra@...&gt;\r\nX-Sender: pezra@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 21483 invoked from network); 17 Jun 2010 23:51:00 -0000\r\nX-Received: from unknown (98.137.34.45)\n  by m10.grp.re1.yahoo.com with QMQP; 17 Jun 2010 23:51:00 -0000\r\nX-Received: from unknown (HELO mail-ww0-f48.google.com) (74.125.82.48)\n  by mta2.grp.sp2.yahoo.com with SMTP; 17 Jun 2010 23:51:00 -0000\r\nX-Received: by wwi18 with SMTP id 18so571613wwi.35\n        for &lt;rest-discuss@yahoogroups.com&gt;; Thu, 17 Jun 2010 16:49:59 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.216.165.208 with SMTP id e58mr253725wel.57.1276818599133; Thu, \n\t17 Jun 2010 16:49:59 -0700 (PDT)\r\nX-Received: by 10.216.13.206 with HTTP; Thu, 17 Jun 2010 16:49:59 -0700 (PDT)\r\nDate: Thu, 17 Jun 2010 17:49:59 -0600\r\nMessage-ID: &lt;AANLkTim1YPev0TCVawC4YFWhL6bxXkSLiF5_V9IcNZ2R@...&gt;\r\nTo: Rest List &lt;rest-discuss@yahoogroups.com&gt;, &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\nX-eGroups-Msg-Info: 2:4:8:0:2\r\nFrom: Peter Williams &lt;pezra@...&gt;\r\nSubject: Content-Location best practice? (was: Determining which Media type \n\tfor post/put)\r\nX-Yahoo-Group-Post: member; u=304236879; y=wQul9BlKRPc6GJaJMDIcDNIHBjvhHQJJOQEOjPKO_lyJim1NedKE1Am8jA\r\nX-Yahoo-Profile: peter_e_williams\r\n\r\nI want to leave the HTTP best practice part of this for a bit.\nThat is of l=\r\ness interest to me than fully understanding the REST\naspects.  Once we have=\r\n settle whether this is a requirement of the\nREST style we can come back to=\r\n the implementation details.\n\nOn Thu, Jun 17, 2010 at 2:16 PM, Eric J. Bowm=\r\nan &lt;eric@...&gt; wrote:\n&gt; ... (see below)\n&gt; Variants are resource=\r\ns.\n\nI don&#39;t think this is required to be true.  A variant is a resource\nif,=\r\n and only if, the server decides it is.  If the server decides that\na varia=\r\nnt is a resource it will assign the variant a resource\nidentifier.\n\nAs the =\r\ndissertation says,[1]\n\n  a resource R is a temporally varying membership fu=\r\nnction MR(t),\n  which for time t maps to a set of entities, or values, whic=\r\nh are\n  equivalent.\n\nIf the server decides that a particular xml entity is =\r\nequivalent to a\nparticular json entity it is perfectly with-in it rights to=\r\n serve both\nof the as representations of the same resource.  The rules for\n=\r\ndefining equivalence seem left entirely to the server&#39;s discretion.\n\nI don&#39;=\r\nt see any suggestion in the dissertation, though perhaps i just\nmissed it, =\r\nthat it all non-byte-for-byte identical entities must, or\neven should, be t=\r\nreated as separate resources.  Of course a server\nmight choose to make any =\r\nentity a resource.  Or even more than one\nresource.  That decision also see=\r\nms to be left entirely up to the\nserver.\n\nWhy you think that all variants m=\r\nust also be resources in their own\nright?\n\nPeter Williams\nhttp://barelyenou=\r\ngh.org\n\n[1]: http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_s=\r\ntyle.htm#sec_5_2_1_1\n\n\n&gt; Peter Williams wrote:\n&gt;&gt;\n&gt;&gt; &gt; Using Content-Locati=\r\non, we can associate one application/xhtml+xml\n&gt;&gt; &gt; variant with multiple c=\r\nombinations of selection headers, i.e. a\n&gt;&gt; &gt; one-to-many mapping. =A0This =\r\ncan&#39;t be done without some means of\n&gt;&gt; &gt; distinguishing one variant from an=\r\nother, without sniffing content.\n&gt;&gt;\n&gt;&gt; Providing a `content-location` allow=\r\ns more efficient caching by\n&gt;&gt; allowing mapping a variety of selection head=\r\ners to a single entity in\n&gt;&gt; caches. =A0Agreed. =A0On the other hand, vigor=\r\nous use of `etag` would\n&gt;&gt; provide similar improvements to the cache hit ra=\r\nte. =A0It is a big step\n&gt;&gt; from &quot;Content-Location can improve cache hit rat=\r\nes&quot; to, &quot;conneg is\n&gt;&gt; useless without Content-Location&quot;.\n&gt;&gt;\n&gt;\n&gt; My position=\r\n is that assigning URIs to variants is both a REST constraint\n&gt; and HTTP be=\r\nst-practice. =A0I haven&#39;t said &quot;conneg is useless without\n&gt; Content-Locatio=\r\nn,&quot; particularly as I&#39;ve kept saying &quot;except for\n&gt; caching&quot;... I get your m=\r\neaning, though, but &quot;Content-Location can\n&gt; improve cache hit rates&quot; is you=\r\nr strawman, not my position.\n&gt;\n&gt; Over the course of the thread, I may have =\r\nstaked out too rigid a\n&gt; position, that the only way to distinguish variant=\r\ns from one another is\n&gt; by assigning Content-Location URIs to them. =A0You =\r\nare correct, Etag may\n&gt; be used to distinguish variants, and this can incre=\r\nase cache hit rates\n&gt; even when Content-Location is absent.\n&gt;\n&gt; But, this d=\r\noes not follow REST, so it does not change my advice...\n&gt;\n&gt;&gt;\n&gt;&gt; A conformin=\r\ng cache will not respond with an inappropriate\n&gt;&gt; representation if the ser=\r\nver sends an appropriate `vary` header.\n&gt;&gt;\n&gt;\n&gt; OK. =A0I was giving one exam=\r\nple of aberrant cache behavior, which doesn&#39;t\n&gt; apply to the specifics of u=\r\nsing Etag in combination with Vary. =A0My way\n&gt; of doing things is to make =\r\nmy system compliant with HTTP 1.0 caches to\n&gt; the fullest extent possible, =\r\nbecause last I heard there were still\n&gt; plenty of HTTP 1.0 caches deployed =\r\nout there on the real-world Web.\n&gt;\n&gt; So to my way of thinking, conneg shoul=\r\nd work independently of caching\n&gt; scheme, i.e. Etag or Expires both work wh=\r\nen Vary is combined with\n&gt; Content-Location... which is probably another re=\r\nason for that SHOULD.\n&gt;\n&gt;&gt;\n&gt;&gt; (Though it might miss a valid chance to serve=\r\n a cached entity.)\n&gt;&gt;\n&gt;\n&gt; The other drawback to relying on Etag to cover fo=\r\nr a missing Content-\n&gt; Location, is that on the real-world, anarchically-sc=\r\nalable Web, myriad\n&gt; cases exist where a cache may legitimately decide to s=\r\nerve a stale\n&gt; representation. =A0This loss of control is the tradeoff to c=\r\naching. =A0By\n&gt; omitting Content-Location, you&#39;re preventing the cache from=\r\n identifying\n&gt; the proper variant to send, forcing it to contact the origin=\r\n server,\n&gt; which presumably it had good reason to avoid doing (like if that=\r\n server\n&gt; is unavailable from the cache&#39;s location). =A0When Content-Locati=\r\non is\n&gt; omitted, much uncertainty is introduced which is otherwise avoided =\r\nby\n&gt; following the SHOULD.\n&gt;\n&gt;&gt;\n&gt;&gt; Private caches at the user agent are les=\r\ns susceptible to selection\n&gt;&gt; criteria explosion. =A0Repeated requests from=\r\n a single user agent are\n&gt;&gt; likely to all be quite similar. =A0In my experi=\r\nence private caches are\n&gt;&gt; far more important than caching intermediates, a=\r\nnyway.\n&gt;&gt;\n&gt;\n&gt; My experience disagrees with your experience. =A0When I first=\r\n started\n&gt; doing Web development in late 1993, it was by downloading Mosaic=\r\n via my\n&gt; Compuserve account, and creating pages on my local filesystem. =\r\n=A0My\n&gt; first experience with HTTP was in 1994, after I&#39;d opened my own ISP=\r\n. =A0I\n&gt; was an early member of the Colorado Internet Cooperative Associati=\r\non,\n&gt; whose board consisted of most of the authors of &quot;UNIX System\n&gt; Admini=\r\nstration Handbook&quot;.\n&gt;\n&gt; One of whom was Evi (who had a second home in Steam=\r\nboat Springs, but\n&gt; went with my non-coop competition because I only offere=\r\nd PPP and she\n&gt; demanded CSLIP), who, in her position as a professor at CU-=\r\nBoulder, was\n&gt; instrumental in the student-led development of squid. =A0The=\r\n first anyone\n&gt; really ever heard of squid was at a coop meeting, to an ISP=\r\n-dominated\n&gt; audience. =A0So in my (heavily-ISP-weighted) experience, share=\r\nd caches\n&gt; are far more important than private.\n&gt;\n&gt; But, this is just one p=\r\nreference vs. another. =A0I do not take the view\n&gt; that REST constraints wh=\r\nich don&#39;t apply to a particular system, are\n&gt; irrelevant. =A0Thus, constrai=\r\nnts intended to increase visibility to\n&gt; intermediary components are still =\r\npart of the style, even when we only\n&gt; care about private caches which don&#39;=\r\nt require us to follow such\n&gt; constraints.\n&gt;\n&gt; You are presenting an edge c=\r\nase of not caring about shared caches,\n&gt; showing that Content-Location isn&#39;=\r\nt required. =A0I cannot be persuaded\n&gt; that any edge case nullifies the bes=\r\nt-practice advice I&#39;m giving. =A0I\n&gt; only agree that your edge case exists,=\r\n not that you&#39;re better off by\n&gt; not meeting the identification of resource=\r\ns constraint.\n&gt;\n&gt; REST is the Platonic Ideal for the long-term development =\r\nof a system --\n&gt; just because you&#39;re setting Cache-Control: private today, =\r\ndoesn&#39;t mean\n&gt; you shouldn&#39;t be able to change it tomorrow, by just changin=\r\ng the Cache-\n&gt; Control header. =A0If your system wasn&#39;t designed with a lon=\r\ng-term view\n&gt; of REST, then you can&#39;t just change Cache-Control, you must a=\r\nlso add\n&gt; Content-Location.\n&gt;\n&gt; So what I&#39;m saying is, start with Content-L=\r\nocation even if you don&#39;t\n&gt; see an immediate need for it. =A0By making it y=\r\nour habit to follow this\n&gt; best practice, you&#39;ll never regret having avoide=\r\nd it. =A0Instead of\n&gt; tailoring my solutions to the specific needs of the s=\r\nystem I&#39;m\n&gt; developing, I follow REST and develop a Uniform Interface, beca=\r\nuse I\n&gt; know that works in the present and will continue to work in the fut=\r\nure,\n&gt; so I won&#39;t have to re-architect any system in response to its evolvi=\r\nng\n&gt; needs. =A0Tweaking an existing system&#39;s headers is easier than adding =\r\nnew\n&gt; headers.\n&gt;\n&gt;&gt;\n&gt;&gt; `content-location` is a terribly useful header. =A0U=\r\nsing it does\n&gt;&gt; increase the cache hit rates for negotiated resources. =A0H=\r\nowever,\n&gt;&gt; skipping `content-location` in a negotiated response does not vi=\r\nolate\n&gt;&gt; any of the REST constraints that i can see.\n&gt;&gt;\n&gt;\n&gt; Variants are re=\r\nsources. =A0As such, REST requires them to be identified,\n&gt; in order for on=\r\ne variant to be distinguishable from another. =A0Etag does\n&gt; not meet this =\r\nconstraint, because Etags are transient, in that they\n&gt; change over time fo=\r\nr any given representation. =A0The purpose of\n&gt; assigning a URI is to decla=\r\nre a static mapping. =A0This is why assigning\n&gt; URIs to variants is a best =\r\npractice -- provide one URI for a set of\n&gt; Etagged entities to map to.\n&gt;\n&gt; =\r\nIn HTTP, REST&#39;s requirement of assigning URIs to variants is reflected\n&gt; in=\r\n the SHOULD about Content-Location. =A0So to apply REST in HTTP, the\n&gt; SHOU=\r\nLD is followed. =A0You are pointing to an edge case, where avoiding\n&gt; Conte=\r\nnt-Location can still be made to work. =A0But you haven&#39;t explained\n&gt; why m=\r\ninting those URIs is undesirable, i.e. &quot;works without it&quot; does not\n&gt; justif=\r\ny avoiding Content-Location. =A0&quot;Compression&quot; justifies avoiding\n&gt; Content-=\r\nLocation, i.e. ignoring the SHOULD, but I still haven&#39;t seen\n&gt; any other ca=\r\nse where that SHOULD shouldn&#39;t be taken as a MUST (if, that\n&gt; is, you&#39;re fo=\r\nllowing REST and applying the identification of resources\n&gt; constraint).\n&gt;\n=\r\n&gt; I still wouldn&#39;t want to touch a non-compression conneg system that\n&gt; avo=\r\nids Content-Location with a ten-foot pole. =A0There is no simpler way\n&gt; to =\r\ndevelop and maintain a conneg system, than to assign URIs to\n&gt; variants (ex=\r\ncept for compression), even if those URIs aren&#39;t exposed\n&gt; beyond the firew=\r\nall. =A0I&#39;ve developed enough conneg systems to know that\n&gt; at some point, =\r\nmost likely more than one point, I will need to examine\n&gt; variants directly=\r\n, bypassing the negotiation mechanism entirely (as\n&gt; opposed to testing the=\r\n mechanism by altering selection headers).\n&gt;\n&gt; To me, this is a stronger ar=\r\ngument than any edge case where Content-\n&gt; Location isn&#39;t technically neede=\r\nd by a caching scheme -- I don&#39;t care,\n&gt; assign URIs to your variants anywa=\r\ny, because REST requires it, and\n&gt; because it would be insane to develop an=\r\nd maintain a conneg system\n&gt; without doing so (except for compression). =A0=\r\nSpoken from experience.\n&gt;\n&gt; There is still no downside to assigning URIs to=\r\n variants, so I still\n&gt; don&#39;t see the point in examining edge cases. =A0Why=\r\n *not* assign URIs to\n&gt; variants? =A0What is it we&#39;re so desperately trying=\r\n to avoid here, that we\n&gt; would disregard best practice by ignoring RFC 261=\r\n6&#39;s SHOULD? =A0Not\n&gt; caring about shared caching isn&#39;t a reason, particular=\r\nly given that\n&gt; this is rest-discuss, where our concern is targeting the sw=\r\neet-spot in\n&gt; the deployed Web which allows anarchic scalability (shared ca=\r\nching).\n&gt;\n&gt; The identification of resources constraint, applied in HTTP by =\r\nusing\n&gt; Content-Location to assign URIs to variants, allows for anarchic\n&gt; =\r\nscalability. =A0Edge cases where that level of scalability aren&#39;t\n&gt; require=\r\nd, are not sufficient reason not to apply the constraint anyway,\n&gt; and don&#39;=\r\nt change best practice. =A0Best practice in REST is to apply REST\n&gt; constra=\r\nints and follow HTTP. =A0Assigning URIs to variants is required by\n&gt; REST a=\r\nnd strongly recommended as best practice by HTTP. =A0Even if\n&gt; avoiding thi=\r\ns has no downside today, REST development means not assuming\n&gt; that tomorro=\r\nw&#39;s needs are the same as today&#39;s; design for the future.\n&gt;\n&gt; So the only a=\r\ndvice I can give about assigning URIs to variants, is to\n&gt; do just exactly =\r\nthat. =A0There is no REST argument *against* doing so,\n&gt; and a key REST con=\r\nstraint will be met by following this best practice.\n&gt; This really is as si=\r\nmple as the black-and-white clarity of the advice I\n&gt; keep giving. =A0Even =\r\nif one doesn&#39;t uderstand it, I promise you that it&#39;s\n&gt; far easier to learn =\r\nREST by implementing best practices and learning\n&gt; from them, than trying t=\r\no learn REST by avoiding best practices in one&#39;s\n&gt; implementations, then tr=\r\nying to rectify the results with REST ex-post-\n&gt; facto.\n&gt;\n&gt; REST should be =\r\nany Web system&#39;s long-term goal. =A0I don&#39;t fault a system\n&gt; for not implem=\r\nenting a constraint, if applying the constraint carries\n&gt; an immediate cost=\r\n which outweighs the constraint&#39;s long-term benefits.\n&gt; This is not such a =\r\ncase. =A0Identification of resources is fundamental,\n&gt; and has no costs to =\r\nimplement. =A0I would even say that to avoid\n&gt; assigning URIs to variants, =\r\ncarries greater immediate costs (in terms\n&gt; of development hours alone) tha=\r\nn are incurred by assigning them. =A0So I\n&gt; still don&#39;t see any theoretical=\r\n or cost-benefit reasons to avoid\n&gt; assigning URIs to variants.\n&gt;\n&gt; -Eric\n&gt;=\r\n\n\n"}}
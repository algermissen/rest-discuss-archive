{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":209178813,"authorName":"Chuck Hinson","from":"Chuck Hinson &lt;chuck.hinson@...&gt;","profile":"chucking24","replyTo":"SENDER","senderId":"66X-GZSLI7-XQ238KEL0jSxCaT5rCGsq4pzsZ0ZggxnQHeY0NnOHec4yYBwFBfGagT5rVyLSUpo4XRplslhO-FApLJsYssCjSZNUEQ","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Doc types for batch updates","postDate":"1275832219","msgId":15558,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEFBTkxrVGlrN21CcmpOY1MzRzVNTjFEaTRQTjl4UUdLQzZrdkJ5OWV0ektEakBtYWlsLmdtYWlsLmNvbT4=","inReplyToHeader":"PDIwMTAwNjA1MDUwMzQyLjM5ODI0NTI0LmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","referencesHeader":"PGh1YzFkcStwc2pvQGVHcm91cHMuY29tPgk8MjAxMDA2MDUwNTAzNDIuMzk4MjQ1MjQuZXJpY0BiaXNvbnN5c3RlbXMubmV0Pg=="},"prevInTopic":15554,"nextInTopic":15559,"prevInTime":15557,"nextInTime":15559,"topicId":15547,"numMessagesInTopic":10,"msgSnippet":"... It s not that we re modeling our data as a table - it is a table. We ve been asked to provide users the ability to define and create tables with arbitrary","rawEmail":"Return-Path: &lt;chuck.hinson@...&gt;\r\nX-Sender: chuck.hinson@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 563 invoked from network); 6 Jun 2010 13:50:19 -0000\r\nX-Received: from unknown (98.137.34.46)\n  by m14.grp.re1.yahoo.com with QMQP; 6 Jun 2010 13:50:19 -0000\r\nX-Received: from unknown (HELO mail-pw0-f44.google.com) (209.85.160.44)\n  by mta3.grp.sp2.yahoo.com with SMTP; 6 Jun 2010 13:50:19 -0000\r\nX-Received: by pwi8 with SMTP id 8so1502613pwi.17\n        for &lt;rest-discuss@yahoogroups.com&gt;; Sun, 06 Jun 2010 06:50:19 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.143.27.41 with SMTP id e41mr2389525wfj.343.1275832219101; Sun, \n\t06 Jun 2010 06:50:19 -0700 (PDT)\r\nX-Received: by 10.142.58.6 with HTTP; Sun, 6 Jun 2010 06:50:19 -0700 (PDT)\r\nIn-Reply-To: &lt;20100605050342.39824524.eric@...&gt;\r\nReferences: &lt;huc1dq+psjo@...&gt;\n\t&lt;20100605050342.39824524.eric@...&gt;\r\nDate: Sun, 6 Jun 2010 09:50:19 -0400\r\nMessage-ID: &lt;AANLkTik7mBrjNcS3G5MN1Di4PN9xQGKC6kvBy9etzKDj@...&gt;\r\nTo: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Chuck Hinson &lt;chuck.hinson@...&gt;\r\nSubject: Re: [rest-discuss] Doc types for batch updates\r\nX-Yahoo-Group-Post: member; u=209178813; y=0wAnHaAeItA2zaccgeN6xk_IR7xS32Y70OZcslEeTyHeb2kjqg\r\nX-Yahoo-Profile: chucking24\r\n\r\nOn Sat, Jun 5, 2010 at 7:03 AM, Eric J. Bowman &lt;eric@...&gt; wrote:\n&gt; First, +1 to Craig&#39;s answer.  Second, I&#39;m answering Chuck backwards...\n&gt;\n&gt; Chuck Hinson wrote:\n&gt;&gt;\n&gt;&gt; Does anyone have any pointers to some examples of MIME types or\n&gt;&gt; application protocols that support this sort of model?\n&gt;&gt;\n&gt;\n&gt; Yes, XHTML + Xforms.  It sounds like you&#39;ve modeled your data as\n&gt; tabular, in which case HTML&#39;s &lt;table&gt; markup has all the machine-\n&gt; readable goodness you require.\n\nIt&#39;s not that we&#39;re modeling our data as a table - it is a table.\nWe&#39;ve been asked to provide users the ability to define and create\ntables with arbitrary numbers of columns (this presents some\ninteresting but solvable database issues).  Over time, they will need\nto update the values in various cells in these tables.  When they do\ntheir updates, they are going to want to make all of their changes and\nthen click save; they will not stand for having to press save after\nediting each cell or row in the table - hence the batch update.\n\n[Also, if I send the changes as a single batch, I get a sort of\npoor-mans transaction - either the request completes (and all of the\nchanges in the batch are succeed) or the request fails (and all of the\nchanges in the batch fail).]\n\n\n&gt; But, I don&#39;t think you need batch-update requests.  If you insist, I\n&gt; still think you should build your system without that optimization,\n&gt; first.  It&#39;ll be up and running faster, and give you a baseline to\n&gt; benchmark your PUT optimization against to prove that it doesn&#39;t do\n&gt; much...\n\nI dont think there&#39;s much question the batch update is needed.  If a\nuser wants to update a status column in every row in a 50 row table,\nI&#39;m not sure sending 50 PUT requests when they click the save button\nis appropriate.\n\nBut that&#39;s really a separate issue, and it&#39;s not the one I&#39;m worried\nabout.  The harder part is the result of dealing with user-defined\ntables with arbitrary numbers of columns.  I dont want to get down in\nthe weeds, but basically, rows from the user-defined tables do not map\ndirectly to records in the database.  Instead, each field in a row is\nstored as a separate record in the database.  A table with 10 columns\nand 50 rows is 500 records in the database.  If a user is only\nupdating values in a single column I&#39;d rather only do 50 updates, and\nnot 500.\n\nI could change my logical model to let clients deal with tables at the\ncell level, but that seems to me to be making clients deal with an\nunnecessarily complex model (though having the client mark which\nfields in a row have been changed is probably not much different).  I\nwould much rather stick with a logical model where clients can deal\nwith the table at the row level and not burden them with complexity\nthat&#39;s really a result of the back-end implementation.\n\n\n&gt;\n&gt; I&#39;m not sure I understand.  Is your application steady-state made up of\n&gt; multiple resources, i.e. each row has its own URL?\n&gt;\n\nAt this point, the primary resource is the user-defined table.  It is\npossible that other services may want to access individual rows, but\nmore likely, they&#39;ll want to be able to retrieve one or two columns\nfor all of the rows in the table.  And even if they do want a single\nrow, it&#39;ll likely be addressed as a query of the table resource, and\nnot directly.  So most get requests will be for the table (or some\nportion of it) and not individual rows.\n\n&gt;\n&gt;&gt;\n&gt;&gt; I&#39;m looking for examples of MIME types/protocols that work with\n&gt;&gt; collections of things, but support batch updates on collection\n&gt;&gt; members rather than requiring separate updates for each collection\n&gt;&gt; member.\n&gt;&gt;\n&gt;\n\nMy main concern at this point is to come up with a document type that\ncan be used for all interactions with these user-defined tables.  I\nwould prefer that clients not have to use a separate document type to\ndo updates.\n\n\n--Chuck\n\n"}}
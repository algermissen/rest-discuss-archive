{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":85662250,"authorName":"Jason Erickson","from":"Jason Erickson &lt;jason@...&gt;","profile":"jason_h_erickson","replyTo":"SENDER","senderId":"1-fOKAJsIwgf7WZfIxHRAcnYeDNv4KJuI8cEmqhkN_qLnI_vQRX9bJH1DT8p4AQh7OpC7lSKf65E2I8UcWJXZITCJ7a4KArQo3laN4_dYg","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] REST and HATEOAS in the context of native applications?","postDate":"1311875455","msgId":17622,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDVCQ0M4NzY0LTc4QjMtNDFDOC1CN0IwLTY5RjNDNzg4NEJBN0BqYXNvbmVyaWNrc29uLmNvbT4=","inReplyToHeader":"PDk3MDc3OTgyLUZCNzUtNDBBQi1BOTFCLUJGN0ZFNzNBQkQ2REBtZS5jb20+","referencesHeader":"PGowcGI3ZCtpYWRpQGVHcm91cHMuY29tPiA8ODd0eWE3cDU5cS53bCViZXJlbmRAcG9ib3guY29tPiA8OTcwNzc5ODItRkI3NS00MEFCLUE5MUItQkY3RkU3M0FCRDZEQG1lLmNvbT4="},"prevInTopic":17621,"nextInTopic":17623,"prevInTime":17621,"nextInTime":17623,"topicId":17617,"numMessagesInTopic":40,"msgSnippet":"I agree that Berend is wrong to suggest not worrying about HATEOAS.  It s very powerful if you can finally get your head around it.  However, I don t agree","rawEmail":"Return-Path: &lt;jason@...&gt;\r\nX-Sender: jason@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 6972 invoked from network); 28 Jul 2011 17:50:57 -0000\r\nX-Received: from unknown (66.196.94.105)\n  by m17.grp.re1.yahoo.com with QMQP; 28 Jul 2011 17:50:57 -0000\r\nX-Received: from unknown (HELO smtpauth18.prod.mesa1.secureserver.net) (64.202.165.31)\n  by mta1.grp.re1.yahoo.com with SMTP; 28 Jul 2011 17:50:57 -0000\r\nX-Received: (qmail 16843 invoked from network); 28 Jul 2011 17:50:56 -0000\r\nX-Received: from unknown (98.207.17.161)\n  by smtpauth18.prod.mesa1.secureserver.net (64.202.165.31) with ESMTP; 28 Jul 2011 17:50:56 -0000\r\nMime-Version: 1.0 (Apple Message framework v1084)\r\nContent-Type: multipart/alternative; boundary=Apple-Mail-21-708290084\r\nDate: Thu, 28 Jul 2011 10:50:55 -0700\r\nIn-Reply-To: &lt;97077982-FB75-40AB-A91B-BF7FE73ABD6D@...&gt;\r\nTo: rest-discuss@yahoogroups.com\r\nReferences: &lt;j0pb7d+iadi@...&gt; &lt;87tya7p59q.wl%berend@...&gt; &lt;97077982-FB75-40AB-A91B-BF7FE73ABD6D@...&gt;\r\nMessage-Id: &lt;5BCC8764-78B3-41C8-B7B0-69F3C7884BA7@...&gt;\r\nX-Mailer: Apple Mail (2.1084)\r\nFrom: Jason Erickson &lt;jason@...&gt;\r\nSubject: Re: [rest-discuss] REST and HATEOAS in the context of native applications?\r\nX-Yahoo-Group-Post: member; u=85662250; y=mti4t4-8dOrW3sKJtp4HZlyGeATq4IycE8fMtSsarkY755uRjEr4axSglg\r\nX-Yahoo-Profile: jason_h_erickson\r\n\r\n\r\n--Apple-Mail-21-708290084\r\nContent-Transfer-Encoding: quoted-printable\r\nContent-Type: text/plain;\n\tcharset=windows-1252\r\n\r\nI agree that Berend is wrong to suggest not worrying about HATEOAS.  It&#39;s v=\r\nery powerful if you can finally get your head around it.  However, I don&#39;t =\r\nagree that you get *none* of the benefits of REST unless you apply *all* of=\r\n the constraints. \n\nRoy Fielding says that if you&#39;re not doing HATEOAS, you=\r\n&#39;re not REST.  Fair enough.  He coined the term, it&#39;s his dissertation, he =\r\ngets to say.  \n\nBut can&#39;t you get most of the performance and scalability b=\r\nenefits as well as some robustness from simply building CRUD services corre=\r\nctly using the HTTP verbs and response codes?  This reaches level two in th=\r\ne Richardson maturity model and is the foundation of Amazon&#39;s S3 storage sy=\r\nstem.  That system may not be RESTful, but it seems to scale and perform qu=\r\nite well. \n\nThe challenge for me in understanding HATEOAS is when you try t=\r\no apply it to non-HTML user interfaces, such as iPhone apps.  More specific=\r\nally, confusing a RESTful service and a REST friendly client.\n\nSay for exam=\r\nple, you have a requirement that the application has to work offline and th=\r\nen sync up data later when it has a network connection.  You can do all tha=\r\nt syncing up using truly RESTful services, but how in the world can you hav=\r\ne the server driving user interface application state when you aren&#39;t even =\r\nconnected to the server?  So, the &quot;application state&quot; in this example has t=\r\no be limited to the sync logic - the machine-to-machine communication.  But=\r\n then for the user-interface part, you still have to have have state driven=\r\n by your understanding of the state transitions at the time that you wrote =\r\nthe code, thus tightly coupling your user interface to the server state-tra=\r\nnsitions.\n\nHowever, the fact that a client must make assumptions about the =\r\nservice does not mean that the service cannot be RESTful.  You just can&#39;t a=\r\nlways build a RESTful client.\n\nI&#39;m open to being wrong about these things, =\r\nbut this is the way I understand it.\n\nOn Jul 28, 2011, at 4:34 AM, Jan Alge=\r\nrmissen wrote:\n\n&gt; \n&gt; On Jul 28, 2011, at 3:23 AM, Berend de Boer wrote:\n&gt; \n=\r\n&gt; &gt; There are levels of REST, so I suggest you don&#39;t worry too much about\n&gt;=\r\n &gt; HATEOAS.\n&gt; \n&gt; This is serious mis-information, Berend.  \n&gt; \n&gt; The intent=\r\nion behind using the REST architectural style is to create systems that hav=\r\ne a well determined set of properties (certain performance, certain scalabi=\r\nlity, certain evolvability ...[1]). These properties are *only* induced if =\r\n*all* of RESTs constraints are applied. There is no &#39;I&#39;ll do half of the co=\r\nnstraints and get half of the benefits&#39; approach.\n&gt; \n\n&gt; \n&gt; There are no lev=\r\nels of REST. It is an either-or thing.\n&gt; \n&gt; \n&gt; And, in addition to that, th=\r\ne hypermedia constraint is *the* most important one. It is the hardest to u=\r\nnderstand (at least for me it was) but the most enlightening one also. Inst=\r\nead of putting it aside, I suggest you dive right into it, all the way unti=\r\nl you grok it.\n&gt; \n&gt; Jan\n&gt; \n&gt; [1] See the dissertation for all of them.\n&gt; \n&gt;=\r\n \n\n\r\n--Apple-Mail-21-708290084\r\nContent-Transfer-Encoding: quoted-printable\r\nContent-Type: text/html;\n\tcharset=windows-1252\r\n\r\n&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body style=3D&quot;word-wrap: break-word; -webkit-nbsp-mode:=\r\n space; -webkit-line-break: after-white-space; &quot;&gt;I agree that Berend is wro=\r\nng to suggest not worrying about HATEOAS. &nbsp;It&#39;s very powerful if you c=\r\nan finally get your head around it. &nbsp;However, I don&#39;t agree that you g=\r\net *none* of the benefits of REST unless you apply *all* of the constraints=\r\n.&nbsp;&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Roy Fielding says that if you&#39;re not doing =\r\nHATEOAS,&nbsp;&lt;a href=3D&quot;http://roy.gbiv.com/untangled/2008/rest-apis-must-=\r\nbe-hypertext-driven&quot;&gt;you&#39;re not REST&lt;/a&gt;. &nbsp;Fair enough. &nbsp;He coine=\r\nd the term, it&#39;s his dissertation, he gets to say. &nbsp;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/d=\r\niv&gt;&lt;div&gt;But can&#39;t you get most of the performance and scalability benefits =\r\nas well as some robustness from simply building CRUD services correctly usi=\r\nng the HTTP verbs and response codes? &nbsp;This reaches level two in the&n=\r\nbsp;&lt;a href=3D&quot;http://martinfowler.com/articles/richardsonMaturityModel.htm=\r\nl&quot;&gt;Richardson maturity model&lt;/a&gt;&nbsp;and is the foundation of Amazon&#39;s S3 =\r\nstorage system. &nbsp;That system may not be RESTful, but it seems to scale=\r\n and perform quite well.&nbsp;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The challenge for m=\r\ne in understanding HATEOAS is when you try to apply it to non-HTML user int=\r\nerfaces, such as iPhone apps. &nbsp;More specifically, confusing a RESTful =\r\nservice and a REST friendly client.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Say for exampl=\r\ne, you have a requirement that the application has to work offline and then=\r\n sync up data later when it has a network connection. &nbsp;You can do all =\r\nthat syncing up using truly RESTful services, but how in the world can you =\r\nhave the server driving user interface application state when you aren&#39;t ev=\r\nen connected to the server? &nbsp;So, the &quot;application state&quot; in this examp=\r\nle has to be limited to the sync logic - the machine-to-machine communicati=\r\non. &nbsp;But then for the user-interface part, you still have to have have=\r\n state driven by your understanding of the state transitions at the time th=\r\nat you wrote the code, thus tightly coupling your user interface to the ser=\r\nver state-transitions.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;However, the fact that a cl=\r\nient must make assumptions about the service does not mean that the service=\r\n cannot be RESTful. &nbsp;You just can&#39;t always build a RESTful client.&lt;/di=\r\nv&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I&#39;m open to being wrong about these things, but this =\r\nis the way I understand it.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;On Jul 28, 2=\r\n011, at 4:34 AM, Jan Algermissen wrote:&lt;/div&gt;&lt;br class=3D&quot;Apple-interchange=\r\n-newline&quot;&gt;&lt;blockquote type=3D&quot;cite&quot;&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;div style=3D&quot;background-=\r\ncolor: rgb(255, 255, 255); position: static; z-index: auto; &quot;&gt;\n&lt;span style=\r\n=3D&quot;display:none&quot;&gt;&nbsp;&lt;/span&gt;\n\n\n\n    &lt;div id=3D&quot;ygrp-text&quot;&gt;&lt;p&gt;&lt;br&gt;\nOn Jul=\r\n 28, 2011, at 3:23 AM, Berend de Boer wrote:&lt;br&gt;\n&lt;br&gt;\n&gt; There are levels=\r\n of REST, so I suggest you don&#39;t worry too much about&lt;br&gt;\n&gt; HATEOAS.&lt;br&gt;=\r\n\n&lt;br&gt;\nThis is serious mis-information, Berend. &nbsp;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;=\r\n&lt;/div&gt;&lt;/blockquote&gt;&lt;blockquote type=3D&quot;cite&quot;&gt;&lt;div style=3D&quot;background-color=\r\n: rgb(255, 255, 255); position: static; z-index: auto; &quot;&gt;&lt;div id=3D&quot;ygrp-ml=\r\nmsg&quot; style=3D&quot;position:relative;&quot;&gt;&lt;div id=3D&quot;ygrp-msg&quot; style=3D&quot;z-index: 1;=\r\n&quot;&gt;&lt;div id=3D&quot;ygrp-text&quot;&gt;&lt;p&gt;The intention behind using the REST architectura=\r\nl style is to create systems that have a well determined set of properties =\r\n(certain performance, certain scalability, certain evolvability ...[1]). Th=\r\nese properties are *only* induced if *all* of RESTs constraints are applied=\r\n. There is no &#39;I&#39;ll do half of the constraints and get half of the benefits=\r\n&#39; approach.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;div&gt;&lt;blockquote =\r\ntype=3D&quot;cite&quot;&gt;&lt;div style=3D&quot;background-color: rgb(255, 255, 255); position:=\r\n static; z-index: auto; &quot;&gt;&lt;div id=3D&quot;ygrp-mlmsg&quot; style=3D&quot;position:relative=\r\n;&quot;&gt;&lt;div id=3D&quot;ygrp-msg&quot; style=3D&quot;z-index: 1;&quot;&gt;&lt;div id=3D&quot;ygrp-text&quot;&gt;&lt;p&gt;\n&lt;br=\r\n&gt;\nThere are no levels of REST. It is an either-or thing.&lt;br&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div=\r\n&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;blockquote type=3D&quot;cite&quot;&gt;&lt;div style=3D&quot;backgroun=\r\nd-color: rgb(255, 255, 255); position: static; z-index: auto; &quot;&gt;&lt;div id=3D&quot;=\r\nygrp-mlmsg&quot; style=3D&quot;position:relative;&quot;&gt;&lt;div id=3D&quot;ygrp-msg&quot; style=3D&quot;z-in=\r\ndex: 1;&quot;&gt;&lt;div id=3D&quot;ygrp-text&quot;&gt;&lt;p&gt;&lt;br&gt;\nAnd, in addition to that, the hyperm=\r\nedia constraint is *the* most important one. It is the hardest to understan=\r\nd (at least for me it was) but the most enlightening one also. Instead of p=\r\nutting it aside, I suggest you dive right into it, all the way until you gr=\r\nok it.&lt;br&gt;\n&lt;br&gt;\nJan&lt;br&gt;\n&lt;br&gt;\n[1] See the dissertation for all of them.&lt;br&gt;\n=\r\n&lt;br&gt;\n&lt;/p&gt;\n\n    &lt;/div&gt;\n     \n\n    \n\n&lt;/div&gt;\n\n\n\n&lt;!-- end group email --&gt;\n\n&lt;/bl=\r\nockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;\r\n--Apple-Mail-21-708290084--\r\n\n"}}
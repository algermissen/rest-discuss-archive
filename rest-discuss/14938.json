{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":362018624,"authorName":"Jan Vincent Liwanag","from":"Jan Vincent Liwanag &lt;jvliwanag@...&gt;","profile":"jv.liwanag","replyTo":"SENDER","senderId":"Ik_BjDX61NXEqaEjyI0t34A54BWTNWXhwoWuPc3FYNTLz66f_X5tCplZ-LMIdpgeuN1HS9tSQQXyzwA7V9nsfijZdwv6UZzcz7XinaCAMLg","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Idea for a REST client","postDate":"1267331682","msgId":14938,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGIyMjczNDkyMTAwMjI3MjAzNHQxNzg3MzU5ZHk3YzhkZDIwZTg5MzlhM2ExQG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PEU1MkJCOEFDLUFFRkYtNENEQS05RDcwLTgzQjhCOTY0Qzg5OEBnbWFpbC5jb20+","referencesHeader":"PDFBRDNCRjgyLTQ5ODItNEFDMC1CRjM1LTRCMTg0QkFGN0Y0NkBnbWFpbC5jb20+CSA8QTA4MzAwREQtNDUzMy00OTQ3LUE0MTMtNzE4ODE4QzQxN0E3QG1hYy5jb20+CSA8NjlFOEZBQTItNTZENi00QkU4LTg2MTgtQzk0QUI1N0RGRDMzQGdtYWlsLmNvbT4JIDxGMUM5NDc5MS1DNkU3LTQ3NDItQUYzNy0wM0VBMjI2NDM4MkVAbWFjLmNvbT4JIDxFNTJCQjhBQy1BRUZGLTRDREEtOUQ3MC04M0I4Qjk2NEM4OThAZ21haWwuY29tPg=="},"prevInTopic":14937,"nextInTopic":14940,"prevInTime":14937,"nextInTime":14939,"topicId":14934,"numMessagesInTopic":11,"msgSnippet":"After careful thought, I believe I understand HATEOAS better now. My question however is, since the current resource dictates where I can go, does this mean","rawEmail":"Return-Path: &lt;jvliwanag@...&gt;\r\nX-Sender: jvliwanag@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 21295 invoked from network); 28 Feb 2010 04:34:43 -0000\r\nX-Received: from unknown (98.137.34.44)\n  by m3.grp.sp2.yahoo.com with QMQP; 28 Feb 2010 04:34:43 -0000\r\nX-Received: from unknown (HELO mail-px0-f190.google.com) (209.85.216.190)\n  by mta1.grp.sp2.yahoo.com with SMTP; 28 Feb 2010 04:34:43 -0000\r\nX-Received: by pxi28 with SMTP id 28so539508pxi.25\n        for &lt;rest-discuss@yahoogroups.com&gt;; Sat, 27 Feb 2010 20:34:43 -0800 (PST)\r\nMIME-Version: 1.0\r\nX-Received: by 10.141.22.14 with SMTP id z14mr1448674rvi.208.1267331682784; Sat, \n\t27 Feb 2010 20:34:42 -0800 (PST)\r\nIn-Reply-To: &lt;E52BB8AC-AEFF-4CDA-9D70-83B8B964C898@...&gt;\r\nReferences: &lt;1AD3BF82-4982-4AC0-BF35-4B184BAF7F46@...&gt;\n\t &lt;A08300DD-4533-4947-A413-718818C417A7@...&gt;\n\t &lt;69E8FAA2-56D6-4BE8-8618-C94AB57DFD33@...&gt;\n\t &lt;F1C94791-C6E7-4742-AF37-03EA2264382E@...&gt;\n\t &lt;E52BB8AC-AEFF-4CDA-9D70-83B8B964C898@...&gt;\r\nDate: Sun, 28 Feb 2010 12:34:42 +0800\r\nMessage-ID: &lt;b22734921002272034t1787359dy7c8dd20e8939a3a1@...&gt;\r\nTo: rest-discuss@yahoogroups.com\r\nContent-Type: multipart/alternative; boundary=000e0cd1b76ec3dacd0480a1a617\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Jan Vincent Liwanag &lt;jvliwanag@...&gt;\r\nSubject: Re: [rest-discuss] Idea for a REST client\r\nX-Yahoo-Group-Post: member; u=362018624; y=ILui_89hKpjHhqKfNx4022GiEP5_eq9kAq2LDWzaR5gFimmvFB0\r\nX-Yahoo-Profile: jv.liwanag\r\n\r\n\r\n--000e0cd1b76ec3dacd0480a1a617\r\nContent-Type: text/plain; charset=ISO-8859-1\r\n\r\nAfter careful thought, I believe I understand HATEOAS better now. My\nquestion however is, since the current resource dictates where I can go,\ndoes this mean that in an application, the UI is highly dependent on which\nstate I am right now? For web applications, this is understandable. But for\ndesktop applications, this may not be so. Say, I create a rich address book\napp. Assume further that I have a simple feature wherein if I hover on a\ncontact&#39;s entry, I display that contact&#39;s brief profile information. How do\nI accomplish this? Which resource should I be at?\n\nIn addition to this, is it feasible to access multiple REST web services,\nthereby maintaining more than one current &#39;state&#39;?\n\nOn Feb 28, 2010, at 9:20 AM, Jan Algermissen wrote:\n\n&gt; Jan,\n&gt;\n&gt; On Feb 28, 2010, at 1:17 AM, Jan Vincent wrote:\n&gt;\n&gt;&gt; I&#39;m not sure again, why some knowledge of the state machine on the server\nwould be a bad thing.\n&gt;\n&gt; It is bad because it couples client and server. This has the effect that\nthe server owner needs to be aware of its clients to anticipate the impact\nof change. REST aims to eliminate that coupling.\n&gt;\n&gt;&gt; The idea I have is something like that of a user browsing through\ndifferent pages of a website, the difference being is that it is based on\nsome script. Should the server decide to deviate from that script, then yes,\nthings would be screwed up.\n&gt;\n&gt; Yep - and REST focusses on the server being able to change without things\nscrewing up. This can only be achieved if the client adheres to the\nhypermedia constraint. Meaning that the client must look at any steady state\n(that it is being put into by the server) how to proceed to achieve its\noverall goal. The client must only decide this based on the current steady\nstate after having reached it.\n&gt;\n&gt;&gt;\n&gt;&gt; As such, the content-types provide some form of contract that some\nelements would need to exist on the representations the restful service\nserves.\n&gt;\n&gt; But the client must not make any design time assumptions about the content\ntype it will actually receive.\n&gt;\n&gt;&gt; In the example provided below, I assume the presence of certain links,\nand some forms I could fill out.\n&gt;\n&gt; The hypermedia constraint forbids such assumptions.\n&gt;\n&gt; This is of course not to say that clients that make such assumptions\ncannot be appropriate for a given set of requirements. But it is important\nto understand that the system you end up with is not RESTful because client\nand server are coupled around these assumptions.\n&gt;\n&gt; In my opinion, RESTful systems have two essential benefits: Simplicity and\neliminating the need for service owners to communicate with client owners\nwhen they intend to change the service to support some previously\nunanticipated requirement (think &quot;business agility&quot;).\n&gt;\n&gt; Simplicity is a huge benefit in itself and achieving it does not depend on\nadhering to the hypermedia constraint (see my HTTP-based Type I/II).\nHowever, being able to evolve the components of a complex system (think &quot;The\nWeb&quot; or &quot;enterprise integration&quot;) at an independent pace easily justifies\nthe effort of building a truly RESTful system.\n&gt;\n&gt; Jan\n&gt;\n&gt;\n&gt;&gt; I don&#39;t really care about the format of the URL, and to some extent, even\nthe methods (since I simply fill out forms on the xhtml representation).\n&gt;&gt;\n&gt;&gt; Moreover, I liken what I have described below as something like tabbed\nbrowsing by some user. The user, goes on to the main site, clicks on the\nlists of users, fills in a form to search for some user and then clicks on\nthe result. If another search is needed, a new &#39;tab&#39; is opened to save the\nold resource (say, the setting on the browser is to open the same page on\nthe former tab), hit &#39;back&#39; to the search users form, and search again.\n&gt;&gt;\n&gt;&gt; On Feb 27, 2010, at 9:21 PM, Jan Algermissen wrote:\n&gt;&gt;\n&gt;&gt;&gt; Jan\n&gt;&gt;&gt;\n&gt;&gt;&gt; On Feb 27, 2010, at 10:15 AM, Jan Vincent wrote:\n&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; Hi guys,\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; I wish to create a framework for accessing REST resources over HTTP. I\nwish to focus on xhtml Content-Type in particular. The idea is that the\ndeveloper would provide instructions on how to get to the resource from a\nsingle URL.\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; Implementation-wise however, the framework would provide all the\nnecessary plumbing to take care of caching and what not.\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; Consider three resources:\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; Root Resource - primary URL (&quot;/&quot;), entry point for the service, has a\nlink to the User List\n&gt;&gt;&gt;&gt; User List - lists all users, on GET, may accept a query string &quot;email&quot;\nto search for a specific user, contains link to the users&#39; respective\nprofiles\n&gt;&gt;&gt;&gt; User Profile - the profile of a user\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; In order to implement something like get_user_by_email, the developer\nwould have to describe how to get from the Root Resource to the User\nProfile. In code, a developer using the framework would do something like:\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; get_user_by_email(email) {\n&gt;&gt;&gt;&gt; from(&quot;/&quot;)\n&gt;&gt;&gt;&gt;  .on(200) { |Root|\n&gt;&gt;&gt;&gt;    Root.follow(&quot;#users_link&quot;)\n&gt;&gt;&gt;&gt;      .on(200) { |Users|\n&gt;&gt;&gt;&gt;        Users.fill_in(&quot;#search_form&quot;, {&quot;email&quot;: email})\n&gt;&gt;&gt;&gt;          .on(200) { |SearchResult|\n&gt;&gt;&gt;&gt;             SearchResult ...get_first_result...\n&gt;&gt;&gt;&gt;               .on(200) { |Profile|\n&gt;&gt;&gt;&gt;                 return profile_to_some_struct(Profile)\n&gt;&gt;&gt;&gt;               }\n&gt;&gt;&gt;&gt;          }\n&gt;&gt;&gt;&gt;      }\n&gt;&gt;&gt;&gt;  }\n&gt;&gt;&gt;&gt; }\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; I&#39;m still working on how to best express this intent as code, and it&#39;s\npretty ugly now I must admit.\n&gt;&gt;&gt;\n&gt;&gt;&gt; The problem (from a RESTfulness POV) with this is that the code assumes\na certain state machine of the application. If the server decides to change\nthat state machine, the code will break.\n&gt;&gt;&gt;\n&gt;&gt;&gt; If the service publishes information that allows the client to make such\nassumptions as manifested by the code above, the service is not RESTful but\nis an &quot;HTTP-based Type I&quot; &lt;\nhttp://nordsc.com/ext/classification_of_http_based_apis.html#http-type-one&gt;\n(or &quot;HTTP-based Type II&quot;) API.\n&gt;&gt;&gt;\n&gt;&gt;&gt; If the server does not publish such information the code above just\nrepresents guess-work which would be worse because the coupling would\nactually be hidden inside the code.\n&gt;&gt;&gt;\n&gt;&gt;&gt; When you think about such a framework approach, keep in mind that it\nwill lead to tightly coupled systems no matter how &quot;Webby&quot; the system looks.\nIf the service evolves, the client will break.\n&gt;&gt;&gt;\n&gt;&gt;&gt; Whether this is actually a bad thing depends on the requirements - maybe\nlong term evolvability has been traded for getting something started fast\nand maybe the expected system lifetime is so short that evolvability does\nnot matter, but you need to be aware of this to make an informed decision.\n&gt;&gt;&gt;\n&gt;&gt;&gt; Jan\n&gt;&gt;&gt;\n&gt;&gt;&gt;\n&gt;&gt;&gt;\n&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; However, the framework doesn&#39;t really execute the instructions by the\ndeveloper directly. Instead, it uses its built in cache to get the result.\nFrom the example above, the framework would do things in reverse:\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; 1. Is there a cache* of the result to a call to\nget_user_by_email(email)? If YES, return prior result, If NO, go to step 2\n&gt;&gt;&gt;&gt; 2. Is there a cache of the result to a call getting the search matches\nof a user given a specified email? If YES, using that result, go down the\ncode -- following the link to the user profile, then returning the result.\nIf NO, go to step 3.\n&gt;&gt;&gt;&gt; 3. Is there a cache of the list of users? If YES, go on and fill in the\nsearch form, etc. If NO, go to step 4\n&gt;&gt;&gt;&gt; 4. Is there a cache of the root resource? If YES, go back steps 3,2,1.\nIf NO, get the root resource, and then go further back the steps.\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; * When I say cached, I generally mean that there has been a prior call,\nand the result was cached AND the cache hasn&#39;t expired yet based on the\nserver cache instructions\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; The framework forms a tree of possible scenarios. It starts from the\nmost optimistic test (step 1) on the leaf, and if it fails, goes back to its\nparent.\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; I believe this would be useful especially if the applications that are\ngoing to be built don&#39;t follow the UI style of web pages following linked\ndocuments. Is this a HATEOAS respecting client? I&#39;d truly appreciate some\ninputs.\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; FYI, I&#39;ll start development of an Erlang version at\nhttp://bitbucket.org/jvliwanag/restr/ . Though, there&#39;s nothing there yet\nnow. Hehe.\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; Jan Vincent Liwanag\n&gt;&gt;&gt;&gt; jvliwanag@...\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;\n&gt;&gt;&gt; -----------------------------------\n&gt;&gt;&gt; Jan Algermissen, Consultant\n&gt;&gt;&gt; NORD Software Consulting\n&gt;&gt;&gt;\n&gt;&gt;&gt; Mail: algermissen@...\n&gt;&gt;&gt; Blog: http://www.nordsc.com/blog/\n&gt;&gt;&gt; Work: http://www.nordsc.com/\n&gt;&gt;&gt; -----------------------------------\n&gt;&gt;&gt;\n&gt;&gt;&gt;\n&gt;&gt;&gt;\n&gt;&gt;&gt;\n&gt;&gt;\n&gt;&gt; Jan Vincent Liwanag\n&gt;&gt; jvliwanag@...\n&gt;&gt;\n&gt;&gt;\n&gt;&gt;\n&gt;\n&gt; -----------------------------------\n&gt; Jan Algermissen, Consultant\n&gt; NORD Software Consulting\n&gt;\n&gt; Mail: algermissen@...\n&gt; Blog: http://www.nordsc.com/blog/\n&gt; Work: http://www.nordsc.com/\n&gt; -----------------------------------\n&gt;\n&gt;\n&gt;\n&gt;\n\nJan Vincent Liwanag\njvliwanag@...\n\r\n--000e0cd1b76ec3dacd0480a1a617\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;div class=3D&quot;gmail_quote&quot;&gt;After careful thought, I believe I understand HA=\r\nTEOAS better now. My question however is, since the current resource dictat=\r\nes where I can go, does this mean that in an application, the UI is highly =\r\ndependent on which state I am right now? For web applications, this is unde=\r\nrstandable. But for desktop applications, this may not be so. Say, I create=\r\n a rich address book app. Assume further that I have a simple feature where=\r\nin if I hover on a contact&#39;s entry, I display that contact&#39;s brief =\r\nprofile information. How do I accomplish this? Which resource should I be a=\r\nt?&lt;br&gt;\n\n&lt;br&gt;\nIn addition to this, is it feasible to access multiple REST we=\r\nb services, thereby maintaining more than one current &#39;state&#39;?&lt;br&gt;\n=\r\n&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;div class=3D&quot;h5&quot;&gt;&lt;br&gt;\nOn Feb 28, 2010, at 9:20 AM, Jan Alg=\r\nermissen wrote:&lt;br&gt;\n&lt;br&gt;\n&gt; Jan,&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; On Feb 28, 2010, at 1:=\r\n17 AM, Jan Vincent wrote:&lt;br&gt;\n&gt;&lt;br&gt;\n&gt;&gt; I&#39;m not sure again, why=\r\n some knowledge of the state machine on the server would be a bad thing.&lt;br=\r\n&gt;\n&gt;&lt;br&gt;\n&gt; It is bad because it couples client and server. This has th=\r\ne effect that the server owner needs to be aware of its clients to anticipa=\r\nte the impact of change. REST aims to eliminate that coupling.&lt;br&gt;\n&gt;&lt;br&gt;=\r\n\n&gt;&gt; The idea I have is something like that of a user browsing through=\r\n different pages of a website, the difference being is that it is based on =\r\nsome script. Should the server decide to deviate from that script, then yes=\r\n, things would be screwed up.&lt;br&gt;\n\n&gt;&lt;br&gt;\n&gt; Yep - and REST focusses on=\r\n the server being able to change without things screwing up. This can only =\r\nbe achieved if the client adheres to the hypermedia constraint. Meaning tha=\r\nt the client must look at any steady state (that it is being put into by th=\r\ne server) how to proceed to achieve its overall goal. The client must only =\r\ndecide this based on the current steady state after having reached it.&lt;br&gt;\n=\r\n\n&gt;&lt;br&gt;\n&gt;&gt;&lt;br&gt;\n&gt;&gt; As such, the content-types provide some for=\r\nm of contract that some elements would need to exist on the representations=\r\n the restful service serves.&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; But the client must not make=\r\n any design time assumptions about the content type it will actually receiv=\r\ne.&lt;br&gt;\n&gt;&lt;br&gt;\n&gt;&gt; In the example provided below, I assume the presen=\r\nce of certain links, and some forms I could fill out.&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; The=\r\n hypermedia constraint forbids such assumptions.&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; This is =\r\nof course not to say that clients that make such assumptions cannot be appr=\r\nopriate for a given set of requirements. But it is important to understand =\r\nthat the system you end up with is not RESTful because client and server ar=\r\ne coupled around these assumptions.&lt;br&gt;\n\n&gt;&lt;br&gt;\n&gt; In my opinion, RESTf=\r\nul systems have two essential benefits: Simplicity and eliminating the need=\r\n for service owners to communicate with client owners when they intend to c=\r\nhange the service to support some previously unanticipated requirement (thi=\r\nnk &quot;business agility&quot;).&lt;br&gt;\n\n&gt;&lt;br&gt;\n&gt; Simplicity is a huge b=\r\nenefit in itself and achieving it does not depend on adhering to the hyperm=\r\nedia constraint (see my HTTP-based Type I/II). However, being able to evolv=\r\ne the components of a complex system (think &quot;The Web&quot; or &quot;en=\r\nterprise integration&quot;) at an independent pace easily justifies the eff=\r\nort of building a truly RESTful system.&lt;br&gt;\n\n&gt;&lt;br&gt;\n&gt; Jan&lt;br&gt;\n&gt;&lt;br&gt;=\r\n\n&gt;&lt;br&gt;\n&gt;&gt; I don&#39;t really care about the format of the URL, and=\r\n to some extent, even the methods (since I simply fill out forms on the xht=\r\nml representation).&lt;br&gt;\n&gt;&gt;&lt;br&gt;\n&gt;&gt; Moreover, I liken what I have=\r\n described below as something like tabbed browsing by some user. The user, =\r\ngoes on to the main site, clicks on the lists of users, fills in a form to =\r\nsearch for some user and then clicks on the result. If another search is ne=\r\neded, a new &#39;tab&#39; is opened to save the old resource (say, the sett=\r\ning on the browser is to open the same page on the former tab), hit &#39;ba=\r\nck&#39; to the search users form, and search again.&lt;br&gt;\n\n&gt;&gt;&lt;br&gt;\n&gt;&=\r\ngt; On Feb 27, 2010, at 9:21 PM, Jan Algermissen wrote:&lt;br&gt;\n&gt;&gt;&lt;br&gt;\n&g=\r\nt;&gt;&gt; Jan&lt;br&gt;\n&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt; On Feb 27, 2010, at 10:15 =\r\nAM, Jan Vincent wrote:&lt;br&gt;\n&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&g=\r\nt;&gt;&lt;br&gt;\n&gt;&gt;&gt;&gt; Hi guys,&lt;br&gt;\n&gt;&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt;&=\r\ngt; I wish to create a framework for accessing REST resources over HTTP. I =\r\nwish to focus on xhtml Content-Type in particular. The idea is that the dev=\r\neloper would provide instructions on how to get to the resource from a sing=\r\nle URL.&lt;br&gt;\n\n&gt;&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt;&gt; Implementation-wise howe=\r\nver, the framework would provide all the necessary plumbing to take care of=\r\n caching and what not.&lt;br&gt;\n&gt;&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt;&gt; Consider t=\r\nhree resources:&lt;br&gt;\n&gt;&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt;&gt; Root Resource - p=\r\nrimary URL (&quot;/&quot;), entry point for the service, has a link to the =\r\nUser List&lt;br&gt;\n&gt;&gt;&gt;&gt; User List - lists all users, on GET, may acc=\r\nept a query string &quot;email&quot; to search for a specific user, contain=\r\ns link to the users&#39; respective profiles&lt;br&gt;\n&gt;&gt;&gt;&gt; User Prof=\r\nile - the profile of a user&lt;br&gt;\n&gt;&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt;&gt; In or=\r\nder to implement something like get_user_by_email, the developer would have=\r\n to describe how to get from the Root Resource to the User Profile. In code=\r\n, a developer using the framework would do something like:&lt;br&gt;\n\n&gt;&gt;&gt=\r\n;&gt;&lt;br&gt;\n&gt;&gt;&gt;&gt; get_user_by_email(email) {&lt;br&gt;\n&gt;&gt;&gt;&gt; =\r\nfrom(&quot;/&quot;)&lt;br&gt;\n&gt;&gt;&gt;&gt; =A0.on(200) { |Root|&lt;br&gt;\n&gt;&gt;&=\r\ngt;&gt; =A0 =A0Root.follow(&quot;#users_link&quot;)&lt;br&gt;\n&gt;&gt;&gt;&gt; =\r\n=A0 =A0 =A0.on(200) { |Users|&lt;br&gt;\n&gt;&gt;&gt;&gt; =A0 =A0 =A0 =A0Users.fil=\r\nl_in(&quot;#search_form&quot;, {&quot;email&quot;: email})&lt;br&gt;\n&gt;&gt;&gt;=\r\n&gt; =A0 =A0 =A0 =A0 =A0.on(200) { |SearchResult|&lt;br&gt;\n&gt;&gt;&gt;&gt; =A0 =\r\n=A0 =A0 =A0 =A0 =A0 SearchResult ...get_first_result...&lt;br&gt;\n&gt;&gt;&gt;&gt=\r\n; =A0 =A0 =A0 =A0 =A0 =A0 =A0 .on(200) { |Profile|&lt;br&gt;\n&gt;&gt;&gt;&gt; =A0=\r\n =A0 =A0 =A0 =A0 =A0 =A0 =A0 return profile_to_some_struct(Profile)&lt;br&gt;\n&gt=\r\n;&gt;&gt;&gt; =A0 =A0 =A0 =A0 =A0 =A0 =A0 }&lt;br&gt;\n&gt;&gt;&gt;&gt; =A0 =A0 =\r\n=A0 =A0 =A0}&lt;br&gt;\n&gt;&gt;&gt;&gt; =A0 =A0 =A0}&lt;br&gt;\n&gt;&gt;&gt;&gt; =A0}&lt;br=\r\n&gt;\n&gt;&gt;&gt;&gt; }&lt;br&gt;\n&gt;&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt;&gt; I&#39;m stil=\r\nl working on how to best express this intent as code, and it&#39;s pretty u=\r\ngly now I must admit.&lt;br&gt;\n&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt; The problem (from a=\r\n RESTfulness POV) with this is that the code assumes a certain state machin=\r\ne of the application. If the server decides to change that state machine, t=\r\nhe code will break.&lt;br&gt;\n&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt; If the service publis=\r\nhes information that allows the client to make such assumptions as manifest=\r\ned by the code above, the service is not RESTful but is an &quot;HTTP-based=\r\n Type I&quot; &lt;&lt;a href=3D&quot;http://nordsc.com/ext/classification_of_http_b=\r\nased_apis.html#http-type-one&quot; target=3D&quot;_blank&quot;&gt;http://nordsc.com/ext/class=\r\nification_of_http_based_apis.html#http-type-one&lt;/a&gt;&gt; (or &quot;HTTP-base=\r\nd Type II&quot;) API.&lt;br&gt;\n\n&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt; If the server does=\r\n not publish such information the code above just represents guess-work whi=\r\nch would be worse because the coupling would actually be hidden inside the =\r\ncode.&lt;br&gt;\n&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt; When you think about such a framewo=\r\nrk approach, keep in mind that it will lead to tightly coupled systems no m=\r\natter how &quot;Webby&quot; the system looks. If the service evolves, the c=\r\nlient will break.&lt;br&gt;\n&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt; Whether this is actuall=\r\ny a bad thing depends on the requirements - maybe long term evolvability ha=\r\ns been traded for getting something started fast and maybe the expected sys=\r\ntem lifetime is so short that evolvability does not matter, but you need to=\r\n be aware of this to make an informed decision.&lt;br&gt;\n\n&gt;&gt;&gt;&lt;br&gt;\n&gt;&=\r\ngt;&gt; Jan&lt;br&gt;\n&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;=\r\n&gt;&lt;br&gt;\n&gt;&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt;&gt; However, the framework doesn=\r\n&#39;t really execute the instructions by the developer directly. Instead, =\r\nit uses its built in cache to get the result. From the example above, the f=\r\nramework would do things in reverse:&lt;br&gt;\n\n&gt;&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt;=\r\n&gt; 1. Is there a cache* of the result to a call to get_user_by_email(emai=\r\nl)? If YES, return prior result, If NO, go to step 2&lt;br&gt;\n&gt;&gt;&gt;&gt; 2=\r\n. Is there a cache of the result to a call getting the search matches of a =\r\nuser given a specified email? If YES, using that result, go down the code -=\r\n- following the link to the user profile, then returning the result. If NO,=\r\n go to step 3.&lt;br&gt;\n\n&gt;&gt;&gt;&gt; 3. Is there a cache of the list of use=\r\nrs? If YES, go on and fill in the search form, etc. If NO, go to step 4&lt;br&gt;=\r\n\n&gt;&gt;&gt;&gt; 4. Is there a cache of the root resource? If YES, go back=\r\n steps 3,2,1. If NO, get the root resource, and then go further back the st=\r\neps.&lt;br&gt;\n&gt;&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt;&gt; * When I say cached, I gener=\r\nally mean that there has been a prior call, and the result was cached AND t=\r\nhe cache hasn&#39;t expired yet based on the server cache instructions&lt;br&gt;\n=\r\n&gt;&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt;&gt; The framework forms a tree of possibl=\r\ne scenarios. It starts from the most optimistic test (step 1) on the leaf, =\r\nand if it fails, goes back to its parent.&lt;br&gt;\n&gt;&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;=\r\n&gt;&gt; I believe this would be useful especially if the applications that=\r\n are going to be built don&#39;t follow the UI style of web pages following=\r\n linked documents. Is this a HATEOAS respecting client? I&#39;d truly appre=\r\nciate some inputs.&lt;br&gt;\n\n&gt;&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt;&gt; FYI, I&#39;ll=\r\n start development of an Erlang version at &lt;a href=3D&quot;http://bitbucket.org/=\r\njvliwanag/restr/&quot; target=3D&quot;_blank&quot;&gt;http://bitbucket.org/jvliwanag/restr/&lt;/=\r\na&gt; . Though, there&#39;s nothing there yet now. Hehe.&lt;br&gt;\n\n&gt;&gt;&gt;&gt;=\r\n&lt;br&gt;\n&gt;&gt;&gt;&gt; Jan Vincent Liwanag&lt;br&gt;\n&gt;&gt;&gt;&gt; &lt;a href=3D&quot;m=\r\nailto:jvliwanag@...&quot;&gt;jvliwanag@...&lt;/a&gt;&lt;br&gt;\n&gt;&gt;&gt;&gt;&lt;br&gt;=\r\n\n&gt;&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt=\r\n;&gt;&lt;br&gt;\n&gt;&gt;&gt;&gt; &lt;br&gt;\n&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt; -------------=\r\n----------------------&lt;br&gt;\n&gt;&gt;&gt; Jan Algermissen, Consultant&lt;br&gt;\n&gt=\r\n;&gt;&gt; NORD Software Consulting&lt;br&gt;\n&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt; Mail: =\r\n&lt;a href=3D&quot;mailto:algermissen@...&quot;&gt;algermissen@...&lt;/a&gt;&lt;br&gt;\n&gt;&gt;=\r\n&gt; Blog: &lt;a href=3D&quot;http://www.nordsc.com/blog/&quot; target=3D&quot;_blank&quot;&gt;http:/=\r\n/www.nordsc.com/blog/&lt;/a&gt;&lt;br&gt;\n&gt;&gt;&gt; Work: &lt;a href=3D&quot;http://www.nord=\r\nsc.com/&quot; target=3D&quot;_blank&quot;&gt;http://www.nordsc.com/&lt;/a&gt;&lt;br&gt;\n&gt;&gt;&gt; ----=\r\n-------------------------------&lt;br&gt;\n&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt;&lt;br&gt;\n&gt;&=\r\ngt;&gt;&lt;br&gt;\n&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&lt;br&gt;\n&gt;&gt; Jan Vincent Liwanag&lt;br&gt;\n=\r\n&gt;&gt; &lt;a href=3D&quot;mailto:jvliwanag@...&quot;&gt;jvliwanag@...&lt;/a&gt;&lt;br&gt;=\r\n\n&gt;&gt;&lt;br&gt;\n&gt;&gt;&lt;br&gt;\n&gt;&gt;&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; ---------------------=\r\n--------------&lt;br&gt;\n&gt; Jan Algermissen, Consultant&lt;br&gt;\n&gt; NORD Software =\r\nConsulting&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; Mail: &lt;a href=3D&quot;mailto:algermissen@...&quot;&gt;a=\r\nlgermissen@...&lt;/a&gt;&lt;br&gt;\n&gt; Blog: &lt;a href=3D&quot;http://www.nordsc.com/blog=\r\n/&quot; target=3D&quot;_blank&quot;&gt;http://www.nordsc.com/blog/&lt;/a&gt;&lt;br&gt;\n&gt; Work: &lt;a href=\r\n=3D&quot;http://www.nordsc.com/&quot; target=3D&quot;_blank&quot;&gt;http://www.nordsc.com/&lt;/a&gt;&lt;br=\r\n&gt;\n&gt; -----------------------------------&lt;br&gt;\n&gt;&lt;br&gt;\n&gt;&lt;br&gt;\n&gt;&lt;br&gt;\n&=\r\ngt;&lt;br&gt;\n&lt;br&gt;\nJan Vincent Liwanag&lt;br&gt;\n&lt;a href=3D&quot;mailto:jvliwanag@...&quot;=\r\n&gt;jvliwanag@...&lt;/a&gt;&lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;\n&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br&gt;\n\r\n--000e0cd1b76ec3dacd0480a1a617--\r\n\n"}}
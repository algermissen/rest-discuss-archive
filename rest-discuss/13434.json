{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":352334505,"authorName":"Craig McClanahan","from":"Craig McClanahan &lt;craigmcc@...&gt;","profile":"craig_mcclanahan","replyTo":"SENDER","senderId":"E0BaXc__Z8UD30lYk_IYehD1WnN94cQ0E4-TOW_jaRX1dX9kfhGaSlZXLlVhT3vK-2Y6D-NcTd97oEuk2o6I6ds5SpavOTKL7H6tBA","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Re: Media Type Version Negotiation","postDate":"1253521026","msgId":13434,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGY4YjM5YWNlMDkwOTIxMDExN2g3NWJmMzdhNmw4MWRkNWI5MWJmZDBhNThlQG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PEU2RTcwNTJDLUY0MjQtNEQ5RS04QkNBLTlGQ0ZBODMxOUI0QUBzdWJidS5vcmc+","referencesHeader":"PGg4ZWVucStuYTV1QGVHcm91cHMuY29tPiA8NEFBRTM0QzguMzA5MDMwNkBteWthbmpvLmNvLnVrPgkgPGRlNzBiMzlkMDkwOTE0MDkyNnAzNDk4NjgxYnExYmMzMGMwNDg2YmMyNzcxQG1haWwuZ21haWwuY29tPgkgPDI4ZTI1NzExMDkwOTE0MTE0MG4xNGRkZGYwOHVmMDgyOWE0ODY4ZTU5OGYyQG1haWwuZ21haWwuY29tPgkgPGRlNzBiMzlkMDkwOTE1MjIzMngzZjMyNDZmOWljNDZhZDg3NWY4ZDg0MkBtYWlsLmdtYWlsLmNvbT4JIDw0OTk4ODg0NDA5MDkxNjA0MTZ4ZTc1NGZhNGxlZjA3YjY0NzZjYzY1OGQwQG1haWwuZ21haWwuY29tPgkgPDI1OWE5ODQ0MDkwOTE5MTgwOHU0MWEwYThicGViOWFmNTBjNzVjMmU2ZTFAbWFpbC5nbWFpbC5jb20+CSA8NURFNEIyMUUtQ0JCOC00QjExLTk5MzctM0U2ODFGMzkyNDczQHN1YmJ1Lm9yZz4JIDwyOGUyNTcxMTA5MDkyMDIxMjF0MTM1YTkzODlnODJkZWVlMDI3ZDQ0NjZkZEBtYWlsLmdtYWlsLmNvbT4JIDxFNkU3MDUyQy1GNDI0LTREOUUtOEJDQS05RkNGQTgzMTlCNEFAc3ViYnUub3JnPg=="},"prevInTopic":13431,"nextInTopic":13438,"prevInTime":13433,"nextInTime":13435,"topicId":13218,"numMessagesInTopic":43,"msgSnippet":"Grumble grumble ... Yahoo s message formatting makes it tedious to do nested responses in GMail ... grumble grumble. ... However, the server instance who sees","rawEmail":"Return-Path: &lt;craigmcc@...&gt;\r\nX-Sender: craigmcc@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 71799 invoked from network); 21 Sep 2009 08:17:09 -0000\r\nX-Received: from unknown (98.137.34.46)\n  by m3.grp.sp2.yahoo.com with QMQP; 21 Sep 2009 08:17:09 -0000\r\nX-Received: from unknown (HELO mail-vw0-f198.google.com) (209.85.212.198)\n  by mta3.grp.sp2.yahoo.com with SMTP; 21 Sep 2009 08:17:08 -0000\r\nX-Received: by vws36 with SMTP id 36so2134342vws.22\n        for &lt;rest-discuss@yahoogroups.com&gt;; Mon, 21 Sep 2009 01:17:07 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.220.101.105 with SMTP id b41mr5119771vco.59.1253521026746; \n\tMon, 21 Sep 2009 01:17:06 -0700 (PDT)\r\nIn-Reply-To: &lt;E6E7052C-F424-4D9E-8BCA-9FCFA8319B4A@...&gt;\r\nReferences: &lt;h8eenq+na5u@...&gt; &lt;4AAE34C8.3090306@...&gt;\n\t &lt;de70b39d0909140926p3498681bq1bc30c0486bc2771@...&gt;\n\t &lt;28e257110909141140n14dddf08uf0829a4868e598f2@...&gt;\n\t &lt;de70b39d0909152232x3f3246f9ic46ad875f8d842@...&gt;\n\t &lt;499888440909160416xe754fa4lef07b6476cc658d0@...&gt;\n\t &lt;259a98440909191808u41a0a8bpeb9af50c75c2e6e1@...&gt;\n\t &lt;5DE4B21E-CBB8-4B11-9937-3E681F392473@...&gt;\n\t &lt;28e257110909202121t135a9389g82deee027d4466dd@...&gt;\n\t &lt;E6E7052C-F424-4D9E-8BCA-9FCFA8319B4A@...&gt;\r\nDate: Mon, 21 Sep 2009 01:17:06 -0700\r\nMessage-ID: &lt;f8b39ace0909210117h75bf37a6l81dd5b91bfd0a58e@...&gt;\r\nTo: Subbu Allamaraju &lt;subbu@...&gt;\r\nCc: Peter Williams &lt;pezra@...&gt;, Rest List &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Type: multipart/alternative; boundary=0016368328508489610474121b22\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Craig McClanahan &lt;craigmcc@...&gt;\r\nReply-To: craigmcc@...\r\nSubject: Re: [rest-discuss] Re: Media Type Version Negotiation\r\nX-Yahoo-Group-Post: member; u=352334505; y=mkl3nOdefKE6ZwOgrrAsQeCugI5sdLA5jDNTylUJ1faqWDAL972e9bA2nA\r\nX-Yahoo-Profile: craig_mcclanahan\r\n\r\n\r\n--0016368328508489610474121b22\r\nContent-Type: text/plain; charset=ISO-8859-1\r\n\r\nGrumble grumble ... Yahoo&#39;s message formatting makes it tedious to do nested\nresponses in GMail ... grumble grumble.\n\nOn Sun, Sep 20, 2009 at 10:31 PM, Subbu Allamaraju &lt;subbu@...&gt; wrote:\n\n&gt; &gt; &gt; a. Media type versioning assumes that the same server instance\n&gt; &gt; &gt; supports all versions. But larger systems may not be able to support\n&gt; &gt; &gt; multiple versions on the same runtime.\n&gt; &gt;\n&gt; &gt; Many times a single cluster can serve all the versions that are\n&gt; &gt; supported. On the other hand, there is no reason requests could not\n&gt; &gt; be dispatched to different environments based on the mime type.\n\n&gt; Yes, except that things like load balancers do IP based routing. They\n&gt; don&#39;t go so far as looking at HTTP headers.\nHowever, the server instance who sees a request for a non-supported version\nis still free to redirect the client request to a server instance that does\nnot how to respond to that version.\n\n&gt; &gt; &gt; b. It further assumes versioning changes can be represented by\n&gt; &gt; &gt; representations. In reality, versioning changes do bring in new\n&gt; &gt; &gt; resources and new processing flows.\n&gt; &gt;\n&gt; &gt; Of course, many changes require the introduction of new flavors of\n&gt; &gt; resources. That would usually indicate the need for a new media type\n&gt; &gt; because new flavors of resources obviously mean new (or significantly\n&gt; &gt; changed) process flows. I don&#39;t really see how either media type or\n&gt; &gt; URI based versioning would be better or worse in this situation.\n\n&gt; I mean new resources, not flavors of existing resources.\n\nThis whole area is why I think that versioning representations is too fine\ngrained to be sufficient.  What you really want is for the client to be able\nto say &quot;I am programmed to assume version X.Y of this entire interface&quot;,\nwhich can trigger a fairly complex set of semantic adaptations (deleting\ndeprecated representations, and adding fields to existing ones, as well as\nadding new ones).\n\nIn my experience, having the client specify a &quot;spec version&quot; dependency in\nan HTTP header (without including version information in the media types)\nhas made possible fairly robust support for *all* the kinds of changes you\nmight encounter in API-level version changes.\n\n&gt; &gt; &gt; c. The purported benefit of versioning by media types is that client-\n&gt; &gt; &gt; side databases don&#39;t need to be changed since the URIs are the same.\n&gt; &gt; &gt; This is fine in small systems, but migrating a client from one version\n&gt; &gt; &gt; to another version may require not just code changes, but database\n&gt; &gt; &gt; upgrades. This may be due to changes in the information content of\n&gt; &gt; &gt; representations that the clients need to store,.\n&gt; &gt;\n&gt; &gt; Migrating a client from one version of an API to another does often\n&gt; &gt; require many changes. However, many changes will not necessarily\n&gt; &gt; invalidate of all the bookmarks (ie, persisted references to\n&gt; &gt; resources) that clients have collected. URI based versioning\n&gt; &gt; effectively locks clients that require bookmarking into the version\n&gt; &gt; they started with.\n\n&gt; I wouldn&#39;t say locking - URIs will need to be replaced. This is not as\n&gt; bad as it sounds. There are ways to tackle this.\nIn a fully discoverable HATEOAS API, the details of URI construction should\nbe opaque to the clients, so this should not be an issue.  As long as the\nserver understands the version preferences of the client, it can construct\nappropriate URIs (or return appropriate errors if the client preferences\ncannot be satisfied).\n\n&gt; &gt; &gt; d. Not every HTTP level software can distinguish between\n&gt; &gt; &gt; representation of a resource.\n&gt; &gt;\n&gt; &gt; Maybe, fortunately all the HTTP software i am familiar with has\n&gt; &gt; support for specifying and retrieving the values of HTTP header\n&gt; &gt; fields. Any software that does not support this very basic feature\n&gt; &gt; does not really support HTTP regardless of its claims. With that\n&gt; &gt; capability you can implement content negotiation pretty trivially.\n\n&gt; It does not matter what such software claims and how we judge them. It\n&gt; is reality, and can&#39;t be ignored. When it comes to operational aspects\n&gt; like log analysis, monitoring, routing, and security, tools currently\n&gt; don&#39;t deal well with media types.\nWhy should they have to?\n\n&gt; &gt; &gt; Given all these, even though URI based versioning looks inelegant, URI\n&gt; &gt; &gt; based versioning is more pragmatic, and is proven to work.\n&gt; &gt;\n&gt; &gt; Things often look inelegant because they are. URI based versioning\n&gt; &gt; can be made to work for some situations and many applications, but not\n&gt; &gt; without a disproportionate level of effort. URI based version is not\n&gt; &gt; more pragmatic, just more common. It has many downsides and the only\n&gt; &gt; thing it has going for it is that it is more common. Despite the\n&gt; &gt; implication otherwise, media type based versioning has been used\n&gt; &gt; successfully in the real world.\n\n&gt; I won&#39;t dispute that, but also not take such a strong position. Media\n&gt; type based versioning is not a one-size-fits-all solution. There are a\n&gt; number of cases where treating representations as resources has\n&gt; operational advantages. Versioning is one of those.\n\n&gt; Finally, media type based versioning does require complete control of\n&gt; all media types that the server has to deal with. Not all media types\n&gt; are in your control. So, the moment the server is faced with\n&gt; versioning a well-known media type, it will have to mint new URIs for\n&gt; new versions.\n\nAs stated above, I have found versioning media types to be insufficient to\ndeal with the kinds of semantic changes to a service that often go along\nwith representation changes -- to say nothing of the fact that services can\nchange their functionality *without* necessarily changing the\nrepresentations being exchanged.  It would be useful if clients could deal\nwith that kind of change too.\n\n&gt; Subbu\n\nCraig McClanahan\n\r\n--0016368328508489610474121b22\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nGrumble grumble ... Yahoo&#39;s message formatting makes it tedious to do n=\r\nested responses in GMail ... grumble grumble.&lt;br&gt;\n&lt;br&gt;\nOn Sun, Sep 20, 2009=\r\n at 10:31 PM, Subbu Allamaraju &lt;span dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:subb=\r\nu@...&quot;&gt;subbu@...&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;span&gt;&lt;/=\r\nspan&gt;&lt;br&gt;\n&lt;div class=3D&quot;im&quot;&gt;&gt; &gt; &gt; a. Media type versioning assumes=\r\n that the same server instance&lt;br&gt;\n&gt; &gt; &gt; supports all versions. Bu=\r\nt larger systems may not be able to support&lt;br&gt;\n&gt; &gt; &gt; multiple ver=\r\nsions on the same runtime.&lt;br&gt;\n&gt; &gt;&lt;br&gt;\n&gt; &gt; Many times a single =\r\ncluster can serve all the versions that are&lt;br&gt;\n&gt; &gt; supported. On the=\r\n other hand, there is no reason requests could not&lt;br&gt;\n&gt; &gt; be dispatc=\r\nhed to different environments based on the mime type.&lt;br&gt;\n&lt;br&gt;&lt;/div&gt;\n\n&gt; =\r\nYes, except that things like load balancers do IP based routing. They  &lt;br&gt;=\r\n\n\n&gt; don&#39;t go so far as looking at HTTP headers.\n&lt;div class=3D&quot;im&quot;&gt;&lt;b=\r\nr&gt;\nHowever, the server instance who sees a request for a non-supported\nvers=\r\nion is still free to redirect the client request to a server\ninstance that =\r\ndoes not how to respond to that version.&lt;br&gt;&lt;/div&gt;\n&lt;br&gt;\n\n&gt; &gt; &gt; b. =\r\nIt further assumes versioning changes can be represented by&lt;br&gt;\n\n&gt; &gt; =\r\n&gt; representations. In reality, versioning changes do bring in new&lt;br&gt;\n\n&=\r\ngt; &gt; &gt; resources and new processing flows.&lt;br&gt;\n\n&gt; &gt;&lt;br&gt;\n\n&gt; =\r\n&gt; Of course, many changes require the introduction of new flavors of&lt;br&gt;=\r\n\n\n&gt; &gt; resources. That would usually indicate the need for a new media=\r\n type&lt;br&gt;\n\n&gt; &gt; because new flavors of resources obviously mean new (o=\r\nr significantly&lt;br&gt;\n\n&gt; &gt; changed) process flows. I don&#39;t really s=\r\nee how either media type or&lt;br&gt;\n\n&gt; &gt; URI based versioning would be be=\r\ntter or worse in this situation.&lt;br&gt;\n\n&lt;br&gt;\n\n&gt; I mean new resources, not =\r\nflavors of existing resources.&lt;br&gt;\n\n&lt;br&gt;\nThis whole area is why I think tha=\r\nt versioning representations\nis too fine grained to be sufficient.=A0 What =\r\nyou really want is for the\nclient to be able to say &quot;I am programmed t=\r\no assume version X.Y of this\nentire interface&quot;, which can trigger a fa=\r\nirly complex set of semantic adaptations\n(deleting deprecated representatio=\r\nns, and adding fields to existing ones, as well as adding new ones).=A0 &lt;br=\r\n&gt;\n&lt;br&gt;\nIn my experience, having the client specify a &quot;spec version&quo=\r\nt; dependency\nin an HTTP header (without including version information in t=\r\nhe media\ntypes) has made possible fairly robust support for *all* the kinds=\r\n of\nchanges you might encounter in API-level version changes.&lt;br&gt;\n&lt;br&gt;\n&gt;=\r\n &gt; &gt; c. The purported benefit of versioning by media types is that  c=\r\nlient-&lt;br&gt;\n&gt; &gt; &gt; side databases don&#39;t need to be changed since=\r\n the URIs are the same.&lt;br&gt;\n&gt; &gt; &gt; This is fine in small systems, b=\r\nut migrating a client from one   version&lt;br&gt;\n&gt; &gt; &gt; to another vers=\r\nion may require not just code changes, but database&lt;br&gt;\n&gt; &gt; &gt; upgr=\r\nades. This may be due to changes in the information content of&lt;br&gt;\n&gt; &gt=\r\n; &gt; representations that the clients need to store,.&lt;br&gt;\n&gt; &gt;&lt;br&gt;\n&=\r\ngt; &gt; Migrating a client from one version of an API to another does ofte=\r\nn&lt;br&gt;\n&gt; &gt; require many changes. However, many changes will not necess=\r\narily&lt;br&gt;\n&gt; &gt; invalidate of all the bookmarks (ie, persisted referenc=\r\nes to&lt;br&gt;\n&gt; &gt; resources) that clients have collected. URI based versi=\r\noning&lt;br&gt;\n&gt; &gt; effectively locks clients that require bookmarking into=\r\n the version&lt;br&gt;\n&gt; &gt; they started with.&lt;br&gt;\n&lt;br&gt;\n&gt; I wouldn&#39;t =\r\nsay locking - URIs will need to be replaced. This is not as  &lt;br&gt;\n&gt; bad =\r\nas it sounds. There are ways to tackle this.&lt;div class=3D&quot;im&quot;&gt;&lt;br&gt;In a full=\r\ny discoverable HATEOAS API, the details of URI construction should be opaqu=\r\ne to the clients, so this should not be an issue.=A0 As long as the server =\r\nunderstands the version preferences of the client, it can construct appropr=\r\niate URIs (or return appropriate errors if the client preferences cannot be=\r\n satisfied).&lt;br&gt;\n&lt;br&gt;\n&gt; &gt; &gt; d. Not every HTTP level software can d=\r\nistinguish between&lt;br&gt;&gt; &gt; &gt; representation of a resource.&lt;br&gt;\n&gt;=\r\n &gt;&lt;br&gt;\n&gt; &gt; Maybe, fortunately all the HTTP software i am familiar =\r\nwith has&lt;br&gt;\n&gt; &gt; support for specifying and retrieving the values of =\r\nHTTP header&lt;br&gt;\n&gt; &gt; fields. Any software that does not support this v=\r\nery basic feature&lt;br&gt;\n&gt; &gt; does not really support HTTP regardless of =\r\nits claims. With that&lt;br&gt;\n&gt; &gt; capability you can implement content ne=\r\ngotiation pretty trivially.&lt;br&gt;\n&lt;br&gt;&lt;/div&gt;\n&gt; It does not matter what suc=\r\nh software claims and how we judge them. It  &lt;br&gt;\n&gt; is reality, and can&=\r\n#39;t be ignored. When it comes to operational aspects  &lt;br&gt;\n&gt; like log =\r\nanalysis, monitoring, routing, and security, tools currently  &lt;br&gt;\n&gt; don=\r\n&#39;t deal well with media types.&lt;div class=3D&quot;im&quot;&gt;&lt;br&gt;Why should they hav=\r\ne to?&lt;br&gt;\n&lt;br&gt;\n&gt; &gt; &gt; Given all these, even though URI based versio=\r\nning looks inelegant,  URI&lt;br&gt;\n&gt; &gt; &gt; based versioning is more prag=\r\nmatic, and is proven to work.&lt;br&gt;\n&gt; &gt;&lt;br&gt;\n&gt; &gt; Things often look=\r\n inelegant because they are. URI based versioning&lt;br&gt;\n&gt; &gt; can be made=\r\n to work for some situations and many applications, but not&lt;br&gt;\n&gt; &gt; w=\r\nithout a disproportionate level of effort. URI based version is not&lt;br&gt;\n&gt=\r\n; &gt; more pragmatic, just more common. It has many downsides and the only=\r\n&lt;br&gt;\n&gt; &gt; thing it has going for it is that it is more common. Despite=\r\n the&lt;br&gt;\n&gt; &gt; implication otherwise, media type based versioning has b=\r\neen used&lt;br&gt;\n&gt; &gt; successfully in the real world.&lt;br&gt;\n&lt;br&gt;&lt;/div&gt;\n&gt; =\r\nI won&#39;t dispute that, but also not take such a strong position. Media  =\r\n&lt;br&gt;\n&gt; type based versioning is not a one-size-fits-all solution. There =\r\nare a  &lt;br&gt;\n&gt; number of cases where treating representations as resource=\r\ns has  &lt;br&gt;\n&gt; operational advantages. Versioning is one of those.&lt;br&gt;\n&lt;b=\r\nr&gt;\n&gt; Finally, media type based versioning does require complete control =\r\nof  &lt;br&gt;\n&gt; all media types that the server has to deal with. Not all med=\r\nia types  &lt;br&gt;\n&gt; are in your control. So, the moment the server is faced=\r\n with  &lt;br&gt;\n&gt; versioning a well-known media type, it will have to mint n=\r\new URIs for  &lt;br&gt;\n&gt; new versions.&lt;br&gt;\n&lt;br&gt;As stated above, I have found =\r\nversioning media types to be insufficient to deal with the kinds of semanti=\r\nc changes to a service that often go along with representation changes -- t=\r\no say nothing of the fact that services can change their functionality *wit=\r\nhout* necessarily changing the representations being exchanged.=A0 It would=\r\n be useful if clients could deal with that kind of change too.&lt;br&gt;\n&lt;br&gt;\n&gt=\r\n; Subbu&lt;br&gt;\n\n \n\n      \n\n    \n    &lt;br&gt;Craig McClanahan&lt;img src=3D&quot;http://geo=\r\n.yahoo.com/serv?s=3D97359714/grpId=3D4319255/grpspId=3D1705701014/msgId=3D1=\r\n3431/stime=3D1253511184/nc1=3D1/nc2=3D2/nc3=3D3&quot; height=3D&quot;1&quot; width=3D&quot;1&quot;&gt; =\r\n&lt;br&gt;&lt;br&gt;\n\r\n--0016368328508489610474121b22--\r\n\n"}}
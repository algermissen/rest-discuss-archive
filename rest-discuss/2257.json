{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":119393616,"authorName":"michael@perthwesternaustralia.com","from":"michael@...","profile":"firepipe_au","replyTo":"SENDER","senderId":"F6DGlWrfC-EcPfZqUM3rx0IiXsVkxb7XIfHUDdnCqKhJCGoYkQ9XgPWSWzCnallZRbXPXS1i7AIG2tKrPEE0uVmVpMxNMPKj","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Searching Containers","postDate":"1030501992","msgId":2257,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMDIwODI4MDIzMzEyLjYxMzYucW1haWxAd2VibWFpbDIuaWluZXQubmV0LmF1Pg=="},"prevInTopic":2231,"nextInTopic":0,"prevInTime":2256,"nextInTime":2258,"topicId":2198,"numMessagesInTopic":3,"msgSnippet":"It seems to me like there s already a standard in place for searching a URI.  The index.htm and default.htm files are traditionally what are returned to a","rawEmail":"Return-Path: &lt;michael@...&gt;\r\nX-Sender: michael@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_1_0_1); 28 Aug 2002 02:33:15 -0000\r\nReceived: (qmail 35798 invoked from network); 28 Aug 2002 02:33:15 -0000\r\nReceived: from unknown (66.218.66.217)\n  by m2.grp.scd.yahoo.com with QMQP; 28 Aug 2002 02:33:15 -0000\r\nReceived: from unknown (HELO webmail2.iinet.net.au) (203.59.2.13)\n  by mta2.grp.scd.yahoo.com with SMTP; 28 Aug 2002 02:33:14 -0000\r\nReceived: (qmail 6137 invoked by uid 33); 28 Aug 2002 02:33:12 -0000\r\nDate: 28 Aug 2002 02:33:12 -0000\r\nMessage-ID: &lt;20020828023312.6136.qmail@...&gt;\r\nContent-Type: text/plain\r\nContent-Disposition: inline\r\nContent-Transfer-Encoding: binary\r\nMIME-Version: 1.0\r\nTo: rest-discuss@yahoogroups.com\r\nSubject: Re: [rest-discuss] Searching Containers\r\nX-Mailer: iiNet WebMail v2\r\nFrom: michael@...\r\nReply-To: michael@...\r\nX-Yahoo-Group-Post: member; u=119393616\r\nX-Yahoo-Profile: firepipe_au\r\n\r\nIt seems to me like there&#39;s already a &#39;standard&#39; in place for searching\r\na URI.  The index.htm and default.htm files are traditionally what are\r\nreturned to a browser when a requested URI is not &#39;fine-grained&#39; enough:\r\n\r\nwww.somedomain.com/images\r\n\r\nIf there is no index.htm file there, I get a list of the files in that\r\ndirectory.  Problem is, if there&#39;s 100,000 files there, you&#39;re going to\r\nhave to wait a while to get a list of them all.\r\n\r\nIn a RESTful world, with a little more smarts going on behind the\r\nscenes, we should be able to ask a URI what we&#39;re allowed to do:\r\n\r\nGET / HTTP/1.0\r\n\r\nmight return\r\n\r\n&lt;resources&gt;\r\n    &lt;resource&gt;/users&lt;/resource&gt;\r\n    &lt;resource&gt;/groups&lt;/resource&gt;\r\n&lt;/resources&gt;\r\n\r\nAh, there is a /users, and a /groups resource I am allowed to &#39;use&#39;.\r\nFor more information, I can do\r\n\r\nGET /users HTTP/1.0\r\n\r\nMy intention is to look up a user with a username of &#39;xxx&#39;, but I don&#39;t\r\nyet know how to do this.  GETting /users helpfully tells me this:\r\n\r\n&lt;allowed-operations&gt;\r\n    &lt;operation name=&quot;search&quot;&gt;\r\n        &lt;http-method&gt;GET&lt;/http-method&gt;\r\n        &lt;required-subcontext&gt;\r\n            &lt;name&gt;username&lt;/name&gt;\r\n&lt;subcontext-value-pattern&gt;[a-z][A-Z]&lt;/subcontext-value-pattern&gt;\r\n            &lt;subcontext-value-pattern&gt;regexp&lt;/subcontext-value-pattern&gt;\r\n        &lt;/required-subcontext&gt;\r\n        &lt;use-uri&gt;www.somedomain.com/users/username&lt;/use-uri&gt;\r\n    &lt;/operation&gt;\r\n    &lt;operation name=&quot;new&quot;&gt;\r\n        &lt;http-method&gt;PUT&lt;/http-method&gt;\r\n        &lt;required-parameter&gt;\r\n            &lt;name&gt;username&lt;/name&gt;\r\n\r\n&lt;parameter-value-pattern&gt;[a-z][A-Z]&lt;/parameter-value-pattern&gt;\r\n        &lt;/required-parameter&gt;\r\n        &lt;required-parameter&gt;\r\n            &lt;name&gt;password&lt;/name&gt;\r\n\r\n&lt;parameter-value-pattern&gt;[a-z][A-Z][0-9][!@%-_.]&lt;/parameter-value-patter\r\nn&gt;\r\n        &lt;/required-parameter&gt;\r\n    &lt;/operation&gt;\r\n&lt;/allowed-operations&gt;\r\n\r\nNow, both machines and people (with help from an XSLT stylesheet, if\r\nneeds be) can see that I can search /users by providing a &#39;username&#39;\r\nparameter (subcontext), or create a new user by providing a username and\r\npassword.  My RESTful application defines the resource associated with\r\nthe user in question as /users/username.  I can use a regular expression\r\nfor the /username bit to smarten up my queries.  One may envisage even\r\nproviding a fill-in-the-blanks SQL string in a\r\n&#39;subcontext-value-pattern&#39; element (all security issues aside).\r\n\r\nEssentially, a search is a GET, so we should use it.  However, without\r\nknowing how to perform the right kind of GET on a resource, we&#39;re stuck\r\n(how does the client know to use the &#39;username&#39; parameter in a query\r\nstring?).  This, I think, is the difference between a &#39;document&#39;\r\nresource (ie a user&#39;s details), and a &#39;processor&#39; resource that performs\r\noperations - you don&#39;t need to know anything more about a document\r\nexcept where to get it.  With a processor, you need to know what it\r\ndoes, so it should tell you when you invoke its base URI.  This\r\ndescription of a processor&#39;s operations is essentially RDF (though I\r\nhaven&#39;t used the syntax) as I understand it.\r\n\r\n\r\n- Michael\r\n\r\n\r\n\r\n----- Original Message -----\r\nFrom: inthedarkplace\r\nTo: rest-discuss@yahoogroups.com\r\nSent: Friday, August 23, 2002 10:39 AM\r\nSubject: [rest-discuss] Searching Containers\r\n\r\n\r\nGuys,\r\n\r\nI&#39;m curious; has anybody established any best practices for\r\nperforming arbitrary searching of collection resources? Eg, say I\r\nhave the collection /users and I want to find a user with the\r\nusername &#39;kd&#39;. What&#39;s the most RESTful and elegant way to do this?\r\n\r\nIt seems like there&#39;s basically three options.\r\n\r\n1) Have the user POST an XML-document describing the query to the\r\ncollection\r\n\r\nPros: Logically intuitive. If I have a collection, I should ask it to\r\nexecute queries.\r\n\r\nCons: Because searching is not a mutator-method (ie it doesn&#39;t change\r\nthe state of the users collection) it doesn&#39;t seem like POST is the\r\nbest method. But neither do GET, PUT, or DELETE make much sense\r\nunless  I do a GET with a body which I&#39;ve been told is in poor taste.\r\nThis also makes it very difficult to write the collection code\r\nbecause now the collection must parse the XML document, figure out\r\nwhich operation is happening (either user creation or searching) and\r\nthen essentially reparse the algorithm.\r\n\r\n2) Have the user do a GET on the users collection, passing the search\r\nquery in through the query string. eg /users?username=&#39;xxx&#39;\r\n\r\nPros: Intuitive. This is what for the query string is for, I think.\r\nIt also allows the user to bookmark searches which might be\r\npotentially very useful for working with sets of users.\r\n\r\nCons: Severely limits the expressiveness of queries. Also puts more\r\ncode in the users code, but this isn&#39;t a huge issue.\r\n\r\n3) Create a special query resource located at /users/query. This\r\nquery resource can have simply queries passed in through the query\r\nstring or more complex queries passed in through a POST.\r\n\r\nPros: This seems to the most elegant. It also makes sense because\r\nPOSTing to a query resource can be seen as creating a query.\r\nPotentially, this query could even be assigned a URI. Because queries\r\ncan be passed in through GET or POST it allows for arbitrarily\r\nexpressive queries.\r\n\r\nCons: Potentially, this could lead to resource explosion because\r\nevery container resource now needs an additional &#39;query&#39; resource.\r\nThis might not be such a good thing.\r\n\r\nRight now I&#39;m leaning more towards number 3. But I&#39;m curious, what\r\nother solutions have people come up with?\r\n\r\n- inthedarkplace\r\n\n"}}
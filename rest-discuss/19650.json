{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":558312292,"authorName":"Philippe Marsteau","from":"Philippe Marsteau &lt;marsteau@...&gt;","replyTo":"SENDER","senderId":"A8jH7yUZkXpC_nx-Ae9T_cIKJbElorEu0WCeokAnXhKYI-mOvLRQO-eiOOaIWK4tdhIguiew0mwO6DAWQDsaYUd_de88LsY71-jckOk","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Reactive REST","postDate":"1400507361","msgId":19650,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDVDMEI3NEJCLTVGRDYtNDZBOC1BMEFGLUJDOERENjg4NDIwM0BnbWFpbC5jb20+","inReplyToHeader":"PDkwNzE2NDFBLTIzMDAtNEQ2Ri05RjhELTFENzFBOTVCRjA0M0BnbWFpbC5jb20+","referencesHeader":"PDE0MTU4MTQuNFdXR21uOWNNdUBmdWNoc2lhPiA8NDM3NjcyMTEudGd1TWJqcHJ1aUBmdWNoc2lhPiA8NTM3ODA5QTEuMTA2MDMwN0BiZXJrZWxleS5lZHU+IDwyMDkwNzQ2NS5hT1oyajAzcFRzQGZ1Y2hzaWE+IDw5MDcxNjQxQS0yMzAwLTRENkYtOUY4RC0xRDcxQTk1QkYwNDNAZ21haWwuY29tPg=="},"prevInTopic":19649,"nextInTopic":19651,"prevInTime":19649,"nextInTime":19651,"topicId":19643,"numMessagesInTopic":14,"msgSnippet":"FWIW, HTTP is an APPLICATION (transfer) protocol and not a TRANPORT protocol. TCP is the transport protocol HTTP uses. I think the benefits of REST","rawEmail":"Return-Path: &lt;marsteau@...&gt;\r\nX-Sender: marsteau@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 66392 invoked by uid 102); 19 May 2014 13:49:23 -0000\r\nX-Received: from unknown (HELO mtaq2.grp.bf1.yahoo.com) (10.193.84.33)\n  by m14.grp.bf1.yahoo.com with SMTP; 19 May 2014 13:49:23 -0000\r\nX-Received: (qmail 6257 invoked from network); 19 May 2014 13:49:23 -0000\r\nX-Received: from unknown (HELO mail-qc0-f178.google.com) (209.85.216.178)\n  by mtaq2.grp.bf1.yahoo.com with SMTP; 19 May 2014 13:49:23 -0000\r\nX-Received: by mail-qc0-f178.google.com with SMTP id l6so9106108qcy.9\n        for &lt;rest-discuss@yahoogroups.com&gt;; Mon, 19 May 2014 06:49:23 -0700 (PDT)\r\nX-Received: by 10.224.37.10 with SMTP id v10mr43328866qad.98.1400507362873;\n        Mon, 19 May 2014 06:49:22 -0700 (PDT)\r\nX-Original-Return-Path: &lt;marsteau@...&gt;\r\nX-Received: from Oracles-iPhone (modemcable083.64-177-173.mc.videotron.ca. [173.177.64.83])\n        by mx.google.com with ESMTPSA id 11sm10847990qgv.20.2014.05.19.06.49.20\n        for &lt;multiple recipients&gt;\n        (version=SSLv3 cipher=RC4-SHA bits=128/128);\n        Mon, 19 May 2014 06:49:21 -0700 (PDT)\r\nDate: Mon, 19 May 2014 09:49:21 -0400\r\nTo: Hubert A Le Van Gong &lt;hubertlvg@...&gt;\r\nCc: Michael Schuerig &lt;michael.lists@...&gt;, rest-discuss\n &lt;rest-discuss@yahoogroups.com&gt;\r\nMessage-ID: &lt;5C0B74BB-5FD6-46A8-A0AF-BC8DD6884203@...&gt;\r\nIn-Reply-To: &lt;9071641A-2300-4D6F-9F8D-1D71A95BF043@...&gt;\r\nReferences: &lt;1415814.4WWGmn9cMu@fuchsia&gt; &lt;43767211.tguMbjprui@fuchsia&gt;\n &lt;537809A1.1060307@...&gt; &lt;20907465.aOZ2j03pTs@fuchsia&gt;\n &lt;9071641A-2300-4D6F-9F8D-1D71A95BF043@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: multipart/alternative; boundary=&quot;537a0be1_327b23c6_212&quot;\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nSubject: Re: [rest-discuss] Reactive REST\r\nX-Yahoo-Group-Post: member; u=558312292\r\nFrom: Philippe Marsteau &lt;marsteau@...&gt;\r\n\r\n\r\n--537a0be1_327b23c6_212\r\nContent-Type: text/plain; charset=&quot;UTF-8&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nFWIW, HTTP is an APPLICATION (transfer) protocol and not a TRANPORT protoco=\r\nl. TCP is the transport protocol HTTP uses. I think the benefits of REST ar=\r\nchitectural style over Pub/Sub style is the scalability associated to not r=\r\nequire servers to keep tracks of clients. The statelessness constraint mean=\r\ns a 2nd calls of a client shouldn&#39;t/mustn&#39;t assume something on the server =\r\nfollowing a previous call, like an HTTP (application) session could be used=\r\n for on the server). Because of the assessment, you can literally swap one =\r\nmachine with another (or use true load balancing solutions w/o sharing or d=\r\nistributing caches) without any impacts for the clients open &quot;sessions&quot; (fr=\r\nom a client perspective). To achieve this, any input that a second call nee=\r\nds following a first call should be transferred to client after each call (=\r\nstate is transfered to client instead of kept on server).  This being said =\r\nyou certainly can model a pub/sub polling scenario within REST constraints.=\r\n The pushing scenario however do require state on the server that belongs t=\r\no client. Because the client determines lifecycle of these &quot;push config&quot; dy=\r\nnamic resources, eg when to delete it, that data need to be kept in sync be=\r\ntween machines, and handling* that extra state breaks statelessness of REST=\r\n (*handling like in auto-expiring subscriptions over time, etc.)  The other=\r\n technical pb of pub/sub over HTTP are firewalls or related network issues.=\r\n It is not uncommon that clients have firewalls in place that let outgoing =\r\ncalls but require IP whitelisting to let calls come in. That further reduce=\r\ns scalability of such model (basically each client must be seen as a server=\r\n and vice-versa). The clients costs is typically higher than server (client=\r\ns establish the HTTP connection and close them as appropriate for their use=\r\n cases). This cost is acceptable because you usually have many clients for =\r\none server. If the server had to pay that connection cost (eg to push data)=\r\n, it would be central and all clients would deal with a less responsive ser=\r\nver as a result.  Finally, pub/sub model implies a level of trusts normal H=\r\nTTP app servers do not need to have. Blindly connecting to any HTTP endpoin=\r\nt opens to security vulnerabilities. The client (subscriber) will typically=\r\n expect some shared secret or key cert exchange, and the server may not be =\r\nwilling to blindly post data to unknown locations.  Hope this helps. Intere=\r\nsting discussion. Pub/sub scenarios clearly exist and are adapted for some =\r\nuse cases, but I don&#39;t thing HTTP transfer protocol is adapted. BTW, Roy&#39;s =\r\ndissertation did mention Pub/Sub (as well as others) style before describin=\r\ng REST style; refer to it to compare the constraints with one another, and =\r\nwhy he believed REST style was better suited for scalability.     \n\n---Phil=\r\n\n\nOn May 19, 2014 at 2:55:29 AM EDT, Hubert A Le Van Gong hubertlvg@gmail.c=\r\nom [rest-discuss] &lt;rest-discuss@yahoogroups.com&gt; wrote: =C2=A0      Hi Mich=\r\nael,  I don&#39;t quite follow why you think a permanent HTTP session is agains=\r\nt RESTful principles. Isn&#39;t the HTTP session management at a different leve=\r\nl (transport) than the actual resource management and the stateless princip=\r\nles associated to it? In the same vein, would you also consider one cannot =\r\ndefine a RESTful service over persistent HTTPS connections for instance?   =\r\nBest, Hubert  On May 18, 2014, at 8:02 AM, Michael Schuerig michael.lists@s=\r\nchuerig.de [rest-discuss] &lt;rest-discuss@yahoogroups.com&gt; wrote: On Saturday=\r\n 17 May 2014 18:15:13 Erik Wilde=C2=A0dret@...=C2=A0[rest-discuss]=\r\n wrote:&gt; i guess i am having trouble with looking at a connection as a reso=\r\nurce&gt; with state (unless you talk about network monitoring and management&gt; =\r\nscenarios, which are an entirely different beast).No, a connection isn&#39;t a =\r\nresource. But keeping a connection open from=C2=A0each client to the server=\r\n puts a strain on the server. Ideally, a=C2=A0RESTful service is loaded onl=\r\ny &quot;dynamically&quot; in the sense that the=C2=A0(&quot;static&quot;) number of clients is =\r\nirrelevant, what counts is the=C2=A0(&quot;dynamic&quot;) number of requests per unit=\r\n of time. My understanding of=C2=A0REST is that this is deliberate and very=\r\n helpful for scalability. Open=C2=A0connections are a strain on a service e=\r\nven in the absence of any=C2=A0requests. For one thing, a single server can=\r\n only manage a limited=C2=A0number of open connections at a time.In REST, a=\r\nt least as far as I understand it(!), state is only supposed=C2=A0to figure=\r\n as transferred resource state; session state is prohibited.My understandin=\r\ng may be wrong and I&#39;m perfectly willing to tone down the=C2=A0RESTful idea=\r\nl for practical purposes. The point I&#39;m trying to make is=C2=A0purely a mat=\r\nter of classification, ie that I think persistent=C2=A0connections are not =\r\nRESTful.&gt; but it is entirely possible to envisage that HTTP pull is like UP=\r\nS&gt; ground and free, whereas there may be UPS overnight which costs a bit&gt; b=\r\nut is faster. if you do that, you get to specify your identifier, and&gt; then=\r\n (and this is why i call this &quot;reverse REST&quot;) you become the&gt; resource to b=\r\ne pushed to, i.e. your resource needs to be known by the&gt; event source. the=\r\nre are tons of PubSub approaches out there, only&gt; that coming up with one t=\r\nhat works robustly and in a scalable at web&gt; scale so far hasn&#39;t worked. th=\r\ne main reason is that for pull, sources&gt; don&#39;t need to know the consumers, =\r\nwhereas for push that state needs&gt; to be maintained, which is expensive.So,=\r\n is &quot;reverse REST&quot; still RESTful? Yes, the individual push request=C2=A0fro=\r\nm server to client probably qualifies. The architecture as a whole=C2=A0pro=\r\nbably doesn&#39;t. As you write, state needs to be maintained which=C2=A0hinder=\r\ns scalability.A truly RESTful solution would have to do without such state.=\r\n *I* don&#39;t=C2=A0see how that is possible, but that&#39;s why I started this dis=\r\ncussion.Also, I&#39;d like to repeat that I don&#39;t mean not being RESTful, or no=\r\nt=C2=A0being reactive, as some kind of condemnation. Both approaches offer =\r\nvery=C2=A0sensible advice in general, I&#39;m interested in seeing how well the=\r\ny fit=C2=A0together.[...]&gt; &gt;&gt; a push model. there are a variety of push pro=\r\ntocols (PuSH, MQTT,&gt; &gt;&gt; APN,&gt; &gt;&gt; C2DM, sMAP) out there, but none so far has=\r\n taken over the world.&gt; &gt;=C2=A0&gt; &gt; I don&#39;t know anything about these models=\r\n/protocols. Do they work in&gt; &gt; practice at this time? In particular, if the=\r\n client is a single-page&gt; &gt; application running in a browser?&gt;=C2=A0&gt; these=\r\n are two very different questions. they work very well in&gt; practice, for ex=\r\nample across all iOS devices (APN), across all&gt; android devices (C2DM), in =\r\nbuilding automation scenarios (sMAP), or&gt; in large sensor network settings =\r\n(MQTT).=C2=A0OK, I take these as existence proofs that push works in practi=\r\nce.&gt; they all come with different&gt; design goals and constraints, and it see=\r\nms that you have something&gt; specific in mind as well. as long as you don&#39;t =\r\nbetter understand the&gt; specific constraints of the scenario you have in min=\r\nd, picking a&gt; solution (or writing down the requirements for a new one) pro=\r\nbably&gt; will be hard.Right now I&#39;m not trying to do anything, I&#39;m first and =\r\nforemost trying=C2=A0to understand the landscape. As a consequence, my spec=\r\nific questions=C2=A0keep changing. My starting point was the question &quot;What=\r\n would a=C2=A0&#39;reactive&#39; and RESTful web application look like from browser=\r\n through=C2=A0app server to database&quot;. Especially when it comes to the comm=\r\nunication=C2=A0between browser (or rather JavaScript-client) and app server=\r\n, I don&#39;t=C2=A0see how to reconcile statelessness and event-drivenness.Mich=\r\nael--=C2=A0Michael Schuerigmailto:michael@...://www.schuerig.de=\r\n/michael/                       \r\n--537a0be1_327b23c6_212\r\nContent-Type: text/html; charset=&quot;UTF-8&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nFWIW, HTTP is an APPLICATION (transfer) protocol and not a TRANPORT protoco=\r\nl. TCP is the transport protocol HTTP uses.&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I think the =\r\nbenefits of REST architectural style over Pub/Sub style is the scalability =\r\nassociated to not require servers to keep tracks of clients. The statelessn=\r\ness constraint means a 2nd calls of a client shouldn&#39;t/mustn&#39;t assume somet=\r\nhing on the server following a previous call, like an HTTP (application) se=\r\nssion could be used for on the server). Because of the assessment, you can =\r\nliterally swap one machine with another (or use true load balancing solutio=\r\nns w/o sharing or distributing caches) without any impacts for the clients =\r\nopen &quot;sessions&quot; (from a client perspective). To achieve this, any input tha=\r\nt a second call needs following a first call should be transferred to clien=\r\nt after each call (state is transfered to client instead of kept on server)=\r\n.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;This being said you certainly can model a pub/su=\r\nb polling scenario within REST constraints. The pushing scenario however do=\r\n require state on the server that belongs to client. Because the client det=\r\nermines lifecycle of these &quot;push config&quot; dynamic resources, eg when to dele=\r\nte it, that data need to be kept in sync between machines, and handling* th=\r\nat extra state breaks statelessness of REST (*handling like in auto-expirin=\r\ng subscriptions over time, etc.)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The other technic=\r\nal pb of pub/sub over HTTP are firewalls or related network issues. It is n=\r\not uncommon that clients have firewalls in place that let outgoing calls bu=\r\nt require IP whitelisting to let calls come in. That further reduces scalab=\r\nility of such model (basically each client must be seen as a server and vic=\r\ne-versa). The clients costs is typically higher than server (clients establ=\r\nish the HTTP connection and close them as appropriate for their use cases).=\r\n This cost is acceptable because you usually have many clients for one serv=\r\ner. If the server had to pay that connection cost (eg to push data), it wou=\r\nld be central and all clients would deal with a less responsive server as a=\r\n result.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Finally, pub/sub model implies a level of=\r\n trusts normal HTTP app servers do not need to have. Blindly connecting to =\r\nany HTTP endpoint opens to security vulnerabilities. The client (subscriber=\r\n) will typically expect some shared secret or key cert exchange, and the se=\r\nrver may not be willing to blindly post data to unknown locations.&lt;/div&gt;&lt;di=\r\nv&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Hope this helps. Interesting discussion. Pub/sub scenarios=\r\n clearly exist and are adapted for some use cases, but I don&#39;t thing HTTP t=\r\nransfer protocol is adapted. BTW, Roy&#39;s dissertation did mention Pub/Sub (a=\r\ns well as others) style before describing REST style; refer to it to compar=\r\ne the constraints with one another, and why he believed REST style was bett=\r\ner suited for scalability.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;div id=3D&quot;boxer-meta&quot;&gt;&lt;/div&gt;&lt;div =\r\nid=3D&quot;attachments&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;span id=3D&quot;draft-break&quot;&gt;&lt;/span&gt;---&lt;br&gt;Phil&lt;=\r\nspan id=3D&quot;draft-break&quot;&gt;&lt;/span&gt;&lt;div&gt;&lt;div&gt;On May 19, 2014 at 2:55:29 AM EDT,=\r\n Hubert A Le Van Gong hubertlvg@... [rest-discuss] &lt;rest-discuss@y=\r\nahoogroups.com&gt; wrote:&lt;br&gt;&lt;blockquote type=3D&quot;cite&quot;&gt;&lt;div&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n  =\r\n\n\n&lt;span style=3D&quot;display:none&quot;&gt;&nbsp;&lt;/span&gt;\n\n\n\n    &lt;div id=3D&quot;ygrp-text&quot;&gt;\n=\r\n       \n       \n      &lt;p&gt;Hi Michael,&lt;/p&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I don&#39;t quite f=\r\nollow why you think a permanent HTTP session is against RESTful principles.=\r\n Isn&#39;t the HTTP session management at a different level (transport) than th=\r\ne actual resource management and the stateless principles associated to it?=\r\n&lt;/div&gt;&lt;div&gt;In the same vein, would you also consider one cannot define a RE=\r\nSTful service over persistent HTTPS connections for instance?&lt;/div&gt;&lt;div&gt;&lt;br=\r\n&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Best,&lt;/div&gt;&lt;div&gt;Hubert&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;=\r\n&lt;br&gt;&lt;div&gt;&lt;div&gt;On May 18, 2014, at 8:02 AM, Michael Schuerig &lt;a href=3D&quot;mail=\r\nto:michael.lists@...&quot;&gt;michael.lists@...&lt;/a&gt; [rest-discuss] =\r\n&lt;&lt;a href=3D&quot;mailto:rest-discuss@yahoogroups.com&quot;&gt;rest-discuss@yahoogroup=\r\ns.com&lt;/a&gt;&gt; wrote:&lt;/div&gt;&lt;br&gt;&lt;blockquote type=3D&quot;cite&quot;&gt;&lt;div style=3D&quot;font-=\r\nfamily: Helvetica;font-size: 12px;font-style: normal;font-variant: normal;f=\r\nont-weight: normal;letter-spacing: normal;text-align: start;text-indent: 0p=\r\nx;text-transform: none;white-space: normal;&quot;&gt;&lt;div id=3D&quot;ygrp-mlmsg&quot; style=\r\n=3D&quot;font-size: 13px;font-family: Arial, helvetica, clean, sans-serif;&quot;&gt;&lt;div=\r\n id=3D&quot;ygrp-msg&quot;&gt;&lt;div id=3D&quot;ygrp-text&quot; style=3D&quot;font-family: Georgia;&quot;&gt;&lt;p s=\r\ntyle=3D&quot;margin: 0px 0px 1em;&quot;&gt;On Saturday 17 May 2014 18:15:13 Erik Wilde&lt;s=\r\npan&gt;&nbsp;&lt;/span&gt;&lt;a href=3D&quot;mailto:dret@...&quot; style=3D&quot;font-family:=\r\n Verdana;&quot;&gt;dret@...&lt;/a&gt;&lt;span&gt;&nbsp;&lt;/span&gt;[rest-&lt;br&gt;discuss] wrote=\r\n:&lt;br&gt;&lt;br&gt;&gt; i guess i am having trouble with looking at a connection as a=\r\n resource&lt;br&gt;&gt; with state (unless you talk about network monitoring and =\r\nmanagement&lt;br&gt;&gt; scenarios, which are an entirely different beast).&lt;br&gt;&lt;b=\r\nr&gt;No, a connection isn&#39;t a resource. But keeping a connection open from&lt;spa=\r\nn&gt;&nbsp;&lt;/span&gt;&lt;br&gt;each client to the server puts a strain on the server. I=\r\ndeally, a&lt;span&gt;&nbsp;&lt;/span&gt;&lt;br&gt;RESTful service is loaded only &quot;dynamically=\r\n&quot; in the sense that the&lt;span&gt;&nbsp;&lt;/span&gt;&lt;br&gt;(&quot;static&quot;) number of clients =\r\nis irrelevant, what counts is the&lt;span&gt;&nbsp;&lt;/span&gt;&lt;br&gt;(&quot;dynamic&quot;) number =\r\nof requests per unit of time. My understanding of&lt;span&gt;&nbsp;&lt;/span&gt;&lt;br&gt;RES=\r\nT is that this is deliberate and very helpful for scalability. Open&lt;span&gt;&n=\r\nbsp;&lt;/span&gt;&lt;br&gt;connections are a strain on a service even in the absence of=\r\n any&lt;span&gt;&nbsp;&lt;/span&gt;&lt;br&gt;requests. For one thing, a single server can onl=\r\ny manage a limited&lt;span&gt;&nbsp;&lt;/span&gt;&lt;br&gt;number of open connections at a ti=\r\nme.&lt;br&gt;&lt;br&gt;In REST, at least as far as I understand it(!), state is only su=\r\npposed&lt;span&gt;&nbsp;&lt;/span&gt;&lt;br&gt;to figure as transferred resource state; sessi=\r\non state is prohibited.&lt;br&gt;&lt;br&gt;My understanding may be wrong and I&#39;m perfec=\r\ntly willing to tone down the&lt;span&gt;&nbsp;&lt;/span&gt;&lt;br&gt;RESTful ideal for practi=\r\ncal purposes. The point I&#39;m trying to make is&lt;span&gt;&nbsp;&lt;/span&gt;&lt;br&gt;purely =\r\na matter of classification, ie that I think persistent&lt;span&gt;&nbsp;&lt;/span&gt;&lt;b=\r\nr&gt;connections are not RESTful.&lt;br&gt;&lt;br&gt;&gt; but it is entirely possible to e=\r\nnvisage that HTTP pull is like UPS&lt;br&gt;&gt; ground and free, whereas there m=\r\nay be UPS overnight which costs a bit&lt;br&gt;&gt; but is faster. if you do that=\r\n, you get to specify your identifier, and&lt;br&gt;&gt; then (and this is why i c=\r\nall this &quot;reverse REST&quot;) you become the&lt;br&gt;&gt; resource to be pushed to, i=\r\n.e. your resource needs to be known by the&lt;br&gt;&gt; event source. there are =\r\ntons of PubSub approaches out there, only&lt;br&gt;&gt; that coming up with one t=\r\nhat works robustly and in a scalable at web&lt;br&gt;&gt; scale so far hasn&#39;t wor=\r\nked. the main reason is that for pull, sources&lt;br&gt;&gt; don&#39;t need to know t=\r\nhe consumers, whereas for push that state needs&lt;br&gt;&gt; to be maintained, w=\r\nhich is expensive.&lt;br&gt;&lt;br&gt;So, is &quot;reverse REST&quot; still RESTful? Yes, the ind=\r\nividual push request&lt;span&gt;&nbsp;&lt;/span&gt;&lt;br&gt;from server to client probably q=\r\nualifies. The architecture as a whole&lt;span&gt;&nbsp;&lt;/span&gt;&lt;br&gt;probably doesn&#39;=\r\nt. As you write, state needs to be maintained which&lt;span&gt;&nbsp;&lt;/span&gt;&lt;br&gt;h=\r\ninders scalability.&lt;br&gt;&lt;br&gt;A truly RESTful solution would have to do withou=\r\nt such state. *I* don&#39;t&lt;span&gt;&nbsp;&lt;/span&gt;&lt;br&gt;see how that is possible, but=\r\n that&#39;s why I started this discussion.&lt;br&gt;&lt;br&gt;Also, I&#39;d like to repeat that=\r\n I don&#39;t mean not being RESTful, or not&lt;span&gt;&nbsp;&lt;/span&gt;&lt;br&gt;being reactiv=\r\ne, as some kind of condemnation. Both approaches offer very&lt;span&gt;&nbsp;&lt;/sp=\r\nan&gt;&lt;br&gt;sensible advice in general, I&#39;m interested in seeing how well they f=\r\nit&lt;span&gt;&nbsp;&lt;/span&gt;&lt;br&gt;together.&lt;br&gt;&lt;br&gt;[...]&lt;br&gt;&gt; &gt;&gt; a push mod=\r\nel. there are a variety of push protocols (PuSH, MQTT,&lt;br&gt;&gt; &gt;&gt; APN=\r\n,&lt;br&gt;&gt; &gt;&gt; C2DM, sMAP) out there, but none so far has taken over th=\r\ne world.&lt;br&gt;&gt; &gt;&lt;span&gt;&nbsp;&lt;/span&gt;&lt;br&gt;&gt; &gt; I don&#39;t know anything=\r\n about these models/protocols. Do they work in&lt;br&gt;&gt; &gt; practice at thi=\r\ns time? In particular, if the client is a single-page&lt;br&gt;&gt; &gt; applicat=\r\nion running in a browser?&lt;br&gt;&gt;&lt;span&gt;&nbsp;&lt;/span&gt;&lt;br&gt;&gt; these are two =\r\nvery different questions. they work very well in&lt;br&gt;&gt; practice, for exam=\r\nple across all iOS devices (APN), across all&lt;br&gt;&gt; android devices (C2DM)=\r\n, in building automation scenarios (sMAP), or&lt;br&gt;&gt; in large sensor netwo=\r\nrk settings (MQTT).&lt;span&gt;&nbsp;&lt;/span&gt;&lt;br&gt;&lt;br&gt;OK, I take these as existence=\r\n proofs that push works in practice.&lt;br&gt;&lt;br&gt;&gt; they all come with differe=\r\nnt&lt;br&gt;&gt; design goals and constraints, and it seems that you have somethi=\r\nng&lt;br&gt;&gt; specific in mind as well. as long as you don&#39;t better understand=\r\n the&lt;br&gt;&gt; specific constraints of the scenario you have in mind, picking=\r\n a&lt;br&gt;&gt; solution (or writing down the requirements for a new one) probab=\r\nly&lt;br&gt;&gt; will be hard.&lt;br&gt;&lt;br&gt;Right now I&#39;m not trying to do anything, I&#39;=\r\nm first and foremost trying&lt;span&gt;&nbsp;&lt;/span&gt;&lt;br&gt;to understand the landsca=\r\npe. As a consequence, my specific questions&lt;span&gt;&nbsp;&lt;/span&gt;&lt;br&gt;keep chan=\r\nging. My starting point was the question &quot;What would a&lt;span&gt;&nbsp;&lt;/span&gt;&lt;b=\r\nr&gt;&#39;reactive&#39; and RESTful web application look like from browser through&lt;spa=\r\nn&gt;&nbsp;&lt;/span&gt;&lt;br&gt;app server to database&quot;. Especially when it comes to the=\r\n communication&lt;span&gt;&nbsp;&lt;/span&gt;&lt;br&gt;between browser (or rather JavaScript-=\r\nclient) and app server, I don&#39;t&lt;span&gt;&nbsp;&lt;/span&gt;&lt;br&gt;see how to reconcile =\r\nstatelessness and event-drivenness.&lt;br&gt;&lt;br&gt;Michael&lt;br&gt;&lt;br&gt;--&lt;span&gt;&nbsp;&lt;/s=\r\npan&gt;&lt;br&gt;Michael Schuerig&lt;br&gt;&lt;a href=3D&quot;mailto:michael@...&quot; style=3D=\r\n&quot;font-family: Verdana;&quot;&gt;mailto:michael@...&lt;/a&gt;&lt;br&gt;&lt;a href=3D&quot;http:/=\r\n/www.schuerig.de/michael/&quot; style=3D&quot;font-family: Verdana;&quot;&gt;http://www.schue=\r\nrig.de/michael/&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;=\r\nbr&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;\n\n    &lt;/div&gt;\n      \n\n    \n\n\n\n\n\n&lt;!-- end group email --&gt;\n\n&lt;/=\r\ndiv&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;\r\n--537a0be1_327b23c6_212--\r\n\n"}}
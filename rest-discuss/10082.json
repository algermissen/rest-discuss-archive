{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":69164307,"authorName":"mike amundsen","from":"&quot;mike amundsen&quot; &lt;mamund@...&gt;","profile":"mamund","replyTo":"SENDER","senderId":"iU2Ke9RBFK6Ar3pd2Tt3BN40rxw-daLshem9cVSVia6wtXdtIgihTM1NqS2wpd29Z9IE_xG9DyocfXqL2-7nbMre50LsXd-UVQ","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] RESTful design for Articles & Tags?","postDate":"1198811430","msgId":10082,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGI1NDhkZjY1MDcxMjI3MTkxMG0zN2QwNDQ1M2c4YmJjYjkzZjgxMzAyYzA5QG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PDA2NzIwMWM4NDhmYiRmNTJkMGE2MCQwNzAyYThjMEBHdWlkZXMubG9jYWw+","referencesHeader":"PGFscGluZS5MTlguMC45OTk5LjA3MTIwMTA5NTQyNjAuMTk5MThAaGFycG8ubGFpdHMudXRleGFzLmVkdT4JIDw0NzUyMDJBMS44MDYwOTAyQG1ldGFsYWIudW5jLmVkdT4JIDxhbHBpbmUuTE5YLjAuOTk5OS4wNzEyMDEyMTQ1MDAwLjIwODgyQGhhcnBvLmxhaXRzLnV0ZXhhcy5lZHU+CSA8NDc1MkE5NTMuNDAwMDgwM0BtZXRhbGFiLnVuYy5lZHU+CSA8YWxwaW5lLkxOWC4wLjk5OTkuMDcxMjAyMDgxMzM4MC4yNTgwMkBoYXJwby5sYWl0cy51dGV4YXMuZWR1PgkgPDQ3NTJFMjBBLjYwNzA4MDlAbWV0YWxhYi51bmMuZWR1PgkgPGFscGluZS5MTlguMC45OTk5LjA3MTIwMjEyMTIyNTAuMjY0NjFAaGFycG8ubGFpdHMudXRleGFzLmVkdT4JIDw0NzY5MDYxOS4xMDZAbWV0YWxhYi51bmMuZWR1PgkgPDllZWJmNTc0MDcxMjI2MDI1N2g2OGUyMDYwNm83Nzg0NzQ5ZjAzMzE1ZjdmQG1haWwuZ21haWwuY29tPgkgPDA2NzIwMWM4NDhmYiRmNTJkMGE2MCQwNzAyYThjMEBHdWlkZXMubG9jYWw+"},"prevInTopic":10081,"nextInTopic":10083,"prevInTime":10081,"nextInTime":10083,"topicId":9891,"numMessagesInTopic":99,"msgSnippet":"MikeS: Seems like this is all about how to tag one or more articles using a RESTful pattern. I would consider defining a TagArticle resource that would look","rawEmail":"Return-Path: &lt;mca@...&gt;\r\nX-Sender: mca@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 18876 invoked from network); 28 Dec 2007 03:10:35 -0000\r\nX-Received: from unknown (66.218.67.94)\n  by m53.grp.scd.yahoo.com with QMQP; 28 Dec 2007 03:10:35 -0000\r\nX-Received: from unknown (HELO fk-out-0910.google.com) (209.85.128.185)\n  by mta15.grp.scd.yahoo.com with SMTP; 28 Dec 2007 03:10:35 -0000\r\nX-Received: by fk-out-0910.google.com with SMTP id z23so3651768fkz.5\n        for &lt;rest-discuss@yahoogroups.com&gt;; Thu, 27 Dec 2007 19:10:31 -0800 (PST)\r\nX-Received: by 10.78.180.18 with SMTP id c18mr10738748huf.24.1198811430534;\n        Thu, 27 Dec 2007 19:10:30 -0800 (PST)\r\nX-Received: by 10.78.33.13 with HTTP; Thu, 27 Dec 2007 19:10:30 -0800 (PST)\r\nMessage-ID: &lt;b548df650712271910m37d04453g8bbcb93f81302c09@...&gt;\r\nDate: Thu, 27 Dec 2007 22:10:30 -0500\r\nTo: rest-discuss@yahoogroups.com\r\nIn-Reply-To: &lt;067201c848fb$f52d0a60$0702a8c0@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: 7bit\r\nContent-Disposition: inline\r\nReferences: &lt;alpine.LNX.0.9999.0712010954260.19918@...&gt;\n\t &lt;475202A1.8060902@...&gt;\n\t &lt;alpine.LNX.0.9999.0712012145000.20882@...&gt;\n\t &lt;4752A953.4000803@...&gt;\n\t &lt;alpine.LNX.0.9999.0712020813380.25802@...&gt;\n\t &lt;4752E20A.6070809@...&gt;\n\t &lt;alpine.LNX.0.9999.0712021212250.26461@...&gt;\n\t &lt;47690619.106@...&gt;\n\t &lt;9eebf5740712260257h68e20606o7784749f03315f7f@...&gt;\n\t &lt;067201c848fb$f52d0a60$0702a8c0@...&gt;\r\nX-Google-Sender-Auth: 0a59f645643fc8f8\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;mike amundsen&quot; &lt;mamund@...&gt;\r\nSubject: Re: [rest-discuss] RESTful design for Articles & Tags?\r\nX-Yahoo-Group-Post: member; u=69164307; y=SP6O2WUemdcOQh0Ky-EqO1ieampvVS5NAgKbVO8bhRhc\r\nX-Yahoo-Profile: mamund\r\n\r\nMikeS:\n\nSeems like this is all about how to &quot;tag&quot; one or more articles using a\nRESTful pattern. I would consider defining a TagArticle resource that\nwould look something like this:\n\n&lt;article id=&quot;{article-id}&quot;&gt;\n  &lt;tag id=&quot;{tag1-id}&quot; /&gt;\n  &lt;tag id=&quot;{tag2-id&quot; /&gt;\n  ...\n&lt;/article&gt;\n\nThis would then be used to inform the server of the tags that apply to\na single article. you can GET, PUT, and DELETE this resource as you\nwish. You can use a Microformat approach (see the rel-tag spec) or\neven Atom as the mime-type for the document.\n\nTo keep things simple, I&#39;d always treat PUT as a complete replacement.\nAs has been discussed here, you might consider PATCH instead of PUT if\nyou really want to do partial updates.\n\nMikeA\n\nOn Dec 27, 2007 9:47 PM, Mike Schinkel &lt;mikeschinkel@...&gt; wrote:\n&gt; Hi all:\n&gt;\n&gt; I am working on a client project and I&#39;d like to get some input on a RESTful\n&gt; design for one aspect. The technical upshot is I am creating a RESTful layer\n&gt; on a subset of functionality for the tables in the Drupal CMS v5.x using\n&gt; MySQL and PHP 4.4.7. I&#39;ll describe the situation in abstract but also in\n&gt; specifics since the Drupal schema design is publically known.\n&gt;\n&gt; At an abstract level I have a table with a list of articles, a second tables\n&gt; with a list of predefined tags, a third table with a list of predefined tag\n&gt; categories, and a forth table that joins tags to articles. Each tag is\n&gt; assigned to a tag category, and each article can have one or more tags where\n&gt; tags can be applied to any number of articles.\n&gt;\n&gt; I plan to present the user with a list of HTML &lt;input type=&quot;checkbox&quot;&gt;\n&gt; elements, let them select the appropriate tags, and then use AJAX to update\n&gt; the server via a RESTful web service as the default Drupal UI for managing\n&gt; terms on nodes is  at best archaic and abyssmally inefficient.\n&gt;\n&gt; On the Apache/PHP/MySQL end there will be a sparse martix, i.e. if an\n&gt; article has two tags (i.e. &#39;news&#39; and &#39;human-interest&#39;) there will only be\n&gt; two records in the &quot;article-tags&quot; table even though it is possible to have\n&gt; tens of applicable tags for an article type.  The web service will likely\n&gt; need to INSERT any newly assigned tags and DELETE any formerly assigned\n&gt; tags.\n&gt;\n&gt; I can envision having either issuing the INSERTs and DELETEs individually as\n&gt; the user selects and deselects tags, or it could be done on a &quot;batch submit&quot;\n&gt; basis. I think I&#39;m learning toward the latter to be more consistent with the\n&gt; way the web normally works, i.e. &quot;Make all changes on a form and then click\n&gt; submit to saved or just abandon to not save&quot; as my users are not techies. On\n&gt; the other hand, I&#39;d like to understand the best practice for resource\n&gt; interaction for both approaches.\n&gt;\n&gt; Here is what I&#39;ve come up with along with my justification; I&#39;d appreciate\n&gt; and critique of my approach along with any specific rationale.  BTW, I plan\n&gt; to use simple &#39;application/x-www-form-urlencoded&#39; for POST & PUT requests\n&gt; and JSON for GET and possibly POST and PUT responses.\n&gt;\n&gt; To assign a tag to an article I could PUT to the following resource since I\n&gt; know the tag-id in advance, and I assume the following should return a &#39;200\n&gt; OK&#39;:\n&gt;\n&gt;         PUT /articles/{article-id}/tags/{tag-id}\n&gt;\n&gt; Alternately I could POST to the same URL and get back a &#39;201 Created&#39;:\n&gt;\n&gt;         POST /articles/{article-id}/tags/{tag-id}\n&gt;\n&gt; Which is preferred or is there some better alternate, and why?\n&gt;\n&gt; To unassign a tag from an article I think I would obviously DELETE the same\n&gt; resouce and expect back a 200 OK if it worked, right?\n&gt;\n&gt;         DELETE /articles/{article-id}/tags/{tag-id}\n&gt;\n&gt; On the other hand it seems a bit harder to pin down an obvious approach to\n&gt; support the &quot;batch submit&quot; user interaction. I assume this is the\n&gt; appropriate resource URL however I&#39;m really not sure whether to PUT or POST\n&gt; to it?\n&gt;\n&gt;         /articles/{article-id}/tags\n&gt;\n&gt; Also, when I PUT or POST should I submit:\n&gt;\n&gt; 1.) Just the tags the user wants assigned after they press submit?\n&gt; 2.) A list of changed tags, i.e. which tags to assign and which tag to\n&gt; unassign?\n&gt; 3.) All potential tags with each one designated as &quot;assigned&quot; or\n&gt; &quot;not-assigned&quot;?\n&gt; 4.) Support all three and have a mode value specifying which mode to use?\n&gt; 5.) Or some other approach?\n&gt;\n&gt; BTW, I&#39;m expecting that the attributes I&#39;ll use for the the &lt;input&gt;\n&gt; element&#39;s &quot;id&quot; will be of the format &quot;article_{article-id}_tag_{tag-id}&quot;\n&gt; where an example might look like: &quot;article_1152_tag_215&quot;.\n&gt;\n&gt; So what you do you think?  How do you think it should be best done? Thanks\n&gt; in advance for helping me think through my first real-world RESTful web api.\n&gt;\n&gt; --\n&gt; -Mike Schinkel\n&gt; http://www.mikeschinkel.com/blogs/\n&gt; http://www.welldesignedurls.org\n&gt; http://atlanta-web.org\n&gt;\n&gt; P.S. For those familar with Drupal or are for those interested in looking\n&gt; into Drupal my &#39;articles&#39; are stored in MySQL using the &#39;node&#39; table with an\n&gt; integer primary key of &#39;nid&#39; and a &#39;type&#39; field with a value of &#39;article&#39;;\n&gt; the tag categories are stored in the &#39;vocabulary&#39; table with an integer\n&gt; primary key of &#39;vid&#39; and a &#39;name&#39; field containing the vocabulary&#39;s\n&gt; human-readable description; the tags themselves are stored in the\n&gt; &#39;term_data&#39; table with an integer primary key of &#39;tid&#39;, an integer foreign\n&gt; key to the &#39;vocabulary&#39; table called &#39;vid&#39;, and a &#39;name&#39; field for the\n&gt; term&#39;s human-readable description of the term; and the terms (tags) are\n&gt; related to the nodes (articles) via the &#39;term_node&#39; table using the integer\n&gt; foreign keys &#39;nid&#39; and &#39;tid&#39;.\n&gt;\n&gt;\n&gt;\n&gt;\n&gt; Yahoo! Groups Links\n&gt;\n&gt;\n&gt;\n&gt;\n\n\n\n-- \nmca\n&quot;In a time of universal deceit, telling the truth becomes a\nrevolutionary act. &quot; (George Orwell)\n\n"}}
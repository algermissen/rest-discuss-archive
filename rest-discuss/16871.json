{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":69164307,"authorName":"mike amundsen","from":"mike amundsen &lt;mamund@...&gt;","profile":"mamund","replyTo":"SENDER","senderId":"SnIX0qRqAAWX5PKH68yk72gePIgDXXCUbmK96h4RZFFcNe2FvczM1XMZLLnlhh8HWhEdRixFe7d2hfbKo8kNmV88AfDwNYw","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Re: Partial PUT debate","postDate":"1289415921","msgId":16871,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEFBTkxrVGludzE5Rm5rRVMzWFgxU0U5Z016bytLSGlib1FGVitFVXF3bU85VkBtYWlsLmdtYWlsLmNvbT4=","inReplyToHeader":"PGliZXBpcitmazRpQGVHcm91cHMuY29tPg==","referencesHeader":"PEFBTkxrVGltWFYya0h1cHNHdXBpTVJYZCtyam1RNXF1SDk2NW9fSkV5eDFaaEBtYWlsLmdtYWlsLmNvbT4JPGliZXBpcitmazRpQGVHcm91cHMuY29tPg=="},"prevInTopic":16870,"nextInTopic":16872,"prevInTime":16870,"nextInTime":16872,"topicId":16839,"numMessagesInTopic":40,"msgSnippet":" At some moment, PATCH looks to me like POST but with an update intention. Probably the POST description, by enumerating the 3 uses, reduces a little bit","rawEmail":"Return-Path: &lt;mca@...&gt;\r\nX-Sender: mca@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 85868 invoked from network); 10 Nov 2010 19:05:22 -0000\r\nX-Received: from unknown (66.196.94.106)\n  by m15.grp.re1.yahoo.com with QMQP; 10 Nov 2010 19:05:22 -0000\r\nX-Received: from unknown (HELO mail-gy0-f177.google.com) (209.85.160.177)\n  by mta2.grp.re1.yahoo.com with SMTP; 10 Nov 2010 19:05:22 -0000\r\nX-Received: by gyf1 with SMTP id 1so273270gyf.8\n        for &lt;rest-discuss@yahoogroups.com&gt;; Wed, 10 Nov 2010 11:05:22 -0800 (PST)\r\nMIME-Version: 1.0\r\nX-Received: by 10.204.65.204 with SMTP id k12mr8608655bki.169.1289415921219;\n Wed, 10 Nov 2010 11:05:21 -0800 (PST)\r\nX-Received: by 10.223.122.147 with HTTP; Wed, 10 Nov 2010 11:05:21 -0800 (PST)\r\nIn-Reply-To: &lt;ibepir+fk4i@...&gt;\r\nReferences: &lt;AANLkTimXV2kHupsGupiMRXd+rjmQ5quH965o_JEyx1Zh@...&gt;\n\t&lt;ibepir+fk4i@...&gt;\r\nDate: Wed, 10 Nov 2010 14:05:21 -0500\r\nX-Google-Sender-Auth: yVJtJMcf3WmTXuc5Y-yGAbLrr5U\r\nMessage-ID: &lt;AANLkTinw19FnkES3XX1SE9gMzo+KHiboQFV+EUqwmO9V@...&gt;\r\nTo: William Martinez Pomares &lt;wmartinez@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\nFrom: mike amundsen &lt;mamund@...&gt;\r\nSubject: Re: [rest-discuss] Re: Partial PUT debate\r\nX-Yahoo-Group-Post: member; u=69164307; y=SpfU6sKLAOFSD_qsUeAjey3LG0e8lM1yFi1YyeH3xT4q\r\nX-Yahoo-Profile: mamund\r\n\r\n&lt;snip&gt;\nAt some moment, PATCH looks to me like POST but with an update\ninten=\r\ntion. Probably the POST description, by enumerating the 3 uses,\nreduces a l=\r\nittle bit the POST semantic, although it is kept open.\nI mean, the payload =\r\nin POST is not necessarily a (sub)resource\nrepresentation. It is a payload =\r\nsent to a resource, who will act\naccordingly. PATCH does the same but denot=\r\ning an intention of changing\nthe resource in a predictable way.\n&lt;/snip&gt;\nWel=\r\nl, from my POV, PATCH changes the semantics of the &quot;write&quot; by\ndescribing a =\r\nrepresentation of &quot;change instructions&quot; rather than a\nrepresentation of the=\r\n resource (as in PUT). This is, IMO, the key\nvalue of PATCH. It&#39;s not about=\r\n &quot;partial&quot;; it&#39;s not about &quot;create&quot; or\n&quot;update.&quot; Instead it&#39;s about &quot;change=\r\n instructions.&quot;\n\nI think it&#39;s also important to keep in mind the change ins=\r\ntructions\nmight be sent to a URI that represents a composite resource\n(serv=\r\ner-side mashup) or a resource that represents a list of other\nresources; no=\r\nt just a &quot;single item&quot; URI.\n\nThis is decidedly not CRUD.\n\n&lt;snip&gt;\nNot sure i=\r\nf my feeling is wrong or not, but PATCH transfers, somehow,\nresponsibility =\r\nto client about the particular modifications to a\nresource, while POST keep=\r\ns that in the server. With PATCH, client\nshould be aware and careful with w=\r\nhat it is requesting, with POST the\nserver is the one under control (or sho=\r\nuld be). With patch, if not\nused carefully, we may need the client to know =\r\nmuch more that\ndesirable about the resource structure.\n&lt;/snip&gt;\n\nI understan=\r\nd your POV here. The assumption is that &quot;sending the change\ninstructions...=\r\n&quot; means the client has some added level of power over\nthe server&#39;s acceptan=\r\nce of the document. I don&#39;t read that meaning\ninto the RFC and, myself, do =\r\nnot write this added power into my\nimplementations of PATCH.\n\nRight now my =\r\nimplementations scan the document for &quot;well-formedness&quot;\nand &quot;validity&quot; (yes=\r\n, i am using XML right now) and, finally, do a\nconcurrency check (has someo=\r\nne else updated before this request?).\nOnce all that is done, the &quot;change i=\r\nnstructions&quot; are reviewed to\ninternal consistency (are these change instruc=\r\ntions logically sound?\n,etc.). The first two checks are well-within the cli=\r\nent&#39;s knowledge\nspace (e.g. the client can know whether they will pass the =\r\ntest).\nHowever, the last two steps (concurrency and logical soundness) are\n=\r\nout-side the client&#39;s knowledge and are the responsibility of the\nserver. T=\r\nhis is really the same as accepting a POST or PUT\nrepresentation; the serve=\r\nr is responsible for concurrency checks and\nfor logical soundness.\n\nSo, at =\r\nleast in my implementations of PATCH so far, I am not granting\nthe client a=\r\nny additional power over the use of POST or PUT\nrepresentations.\n\nmca\nhttp:=\r\n//amundsen.com/blog/\nhttp://twitter.com@mamund\nhttp://mamund.com/foaf.rdf#m=\r\ne\n\n\n#RESTFest 2010\nhttp://rest-fest.googlecode.com\n\n\n\n\nOn Wed, Nov 10, 2010=\r\n at 13:51, William Martinez Pomares\n&lt;wmartinez@...&gt; wrote:\n&gt; Inter=\r\nesting.\n&gt; Jan also agrees.\n&gt; I do too. There is a need and ways people over=\r\ncome that need.\n&gt;\n&gt; Still, I&#39;m not totally convinced.\n&gt;\n&gt; Granted, PUT and =\r\nPATCH are totally different things, no discussion there. The distinction sh=\r\nouldn&#39;t even be there, explained in the PATCH description, as PUT is a crea=\r\ntional operation. Still, I guess it is there due to the extended use of PUT=\r\n as an Update operation.\n&gt;\n&gt; At some moment, PATCH looks to me like POST bu=\r\nt with an update intention. Probably the POST description, by enumerating t=\r\nhe 3 uses, reduces a little bit the POST semantic, although it is kept open=\r\n.\n&gt; I mean, the payload in POST is not necessarily a (sub)resource represen=\r\ntation. It is a payload sent to a resource, who will act accordingly. PATCH=\r\n does the same but denoting an intention of changing the resource in a pred=\r\nictable way.\n&gt;\n&gt; Not sure if my feeling is wrong or not, but PATCH transfer=\r\ns, somehow, responsibility to client about the particular modifications to =\r\na resource, while POST keeps that in the server. With PATCH, client should =\r\nbe aware and careful with what it is requesting, with POST the server is th=\r\ne one under control (or should be). With patch, if not used carefully, we m=\r\nay need the client to know much more that desirable about the resource stru=\r\ncture.\n&gt;\n&gt; About visibility, and about the update intention, I guess it is =\r\ngood to have clear in the line we are trying to update something. But, I st=\r\nill think we are trying to force CRUD into HTTP, and the update may be some=\r\nhow better if performed silently by the server based on posted data, rather=\r\n the directly commanded by the client.\n&gt;\n&gt; I know, blurred line.\n&gt;\n&gt; Willia=\r\nm Martinez Pomares\n&gt;\n&gt;\n&gt; --- In rest-discuss@yahoogroups.com, mike amundsen=\r\n &lt;mamund@...&gt; wrote:\n&gt;&gt;\n&gt;&gt; William:\n&gt;&gt;\n&gt;&gt; &lt;snip&gt;\n&gt;&gt; &gt; So, PATCH may work, b=\r\nut I feel still it is not the full solution. At the end, as you say, we may=\r\n need to go back and use POST.\n&gt;&gt; &gt; What do you think?\n&gt;&gt; &lt;/snip&gt;\n&gt;&gt;\n&gt;&gt; Fro=\r\nm my POV, there are two things to keep in mind here:\n&gt;&gt; - The affect the PA=\r\nTCH RFC has on how we view|use PUT\n&gt;&gt; - The affect the PATCH RFC has on how=\r\n we view|use POST\n&gt;&gt;\n&gt;&gt; PATCH AND PUT\n&gt;&gt; One of the things that sets PATCH =\r\napart from PUT is that the RFC[1]\n&gt;&gt; describes the PATCH payload as &quot;a set =\r\nof instructions...&quot;\n&gt;&gt; &lt;quote&gt;\n&gt;&gt; The difference between the PUT and PATCH =\r\nrequests is reflected in the\n&gt;&gt; =A0 =A0way the server processes the enclose=\r\nd entity to modify the resource\n&gt;&gt; =A0 =A0identified by the Request-URI. =\r\n=A0In a PUT request, the enclosed entity\n&gt;&gt; =A0 =A0is considered to be a mo=\r\ndified version of the resource stored on the\n&gt;&gt; =A0 =A0origin server, and t=\r\nhe client is requesting that the stored version\n&gt;&gt; =A0 =A0be replaced. =A0W=\r\nith PATCH, however, the enclosed entity contains a set\n&gt;&gt; =A0 =A0of instruc=\r\ntions describing how a resource currently residing on the\n&gt;&gt; =A0 =A0origin =\r\nserver should be modified to produce a new version. =A0The PATCH\n&gt;&gt; =A0 =A0=\r\nmethod affects the resource identified by the Request-URI, and it\n&gt;&gt; =A0 =\r\n=A0also MAY have side effects on other resources; i.e., new resources\n&gt;&gt; =\r\n=A0 =A0may be created, or existing ones modified, by the application of a\n&gt;=\r\n&gt; =A0 =A0PATCH.\n&gt;&gt; &lt;/quote&gt;\n&gt;&gt;\n&gt;&gt; There are no details on what that set of =\r\ninstructions looks like; that\n&gt;&gt; detail is left open for implementors to wo=\r\nrk out. It is also\n&gt;&gt; interesting to note that the PATCH RFC makes allowanc=\r\nes for the\n&gt;&gt; possibility that the results of a PATCH request MAY be the cr=\r\neation of\n&gt;&gt; a new resource.\n&gt;&gt;\n&gt;&gt; PATCH AND POST\n&gt;&gt; In the past, I used th=\r\ne basic approach described in PATCH ( a set of\n&gt;&gt; instructions delineated b=\r\ny a media type) but used the existing POST\n&gt;&gt; method to complete the task. =\r\nUsually that meant I minted a URI for\n&gt;&gt; handling &quot;change instructions&quot; (e.=\r\ng. /my-customers/1;patch or\n&gt;&gt; /my-customers/1/patch/, or /patches/my-custo=\r\nmer/1, etc.).\n&gt;&gt;\n&gt;&gt; Now, with this new method, I don&#39;t need to mint a new U=\r\nRI to handle\n&gt;&gt; &quot;change instructions.&quot; I only need to tell clients that a n=\r\new method\n&gt;&gt; (PATCH) is valid for an existing resource (e.g. /my-customers/=\r\n1) and\n&gt;&gt; that any execution of PATCH against a resource needs to use the p=\r\nroper\n&gt;&gt; media-type (e.g. application/vnd.amundsen.patch, etc.).\n&gt;&gt;\n&gt;&gt; To m=\r\ne this is a major improvement in both the visibility and accuracy\n&gt;&gt; of my =\r\nHTTP interactions. No more overloading POST using a special\n&gt;&gt; &quot;patch URI.&quot;=\r\n My documentation can be clearer and my client can learn\n&gt;&gt; the details of =\r\na target media type and apply that to multiple\n&gt;&gt; resources safely.\n&gt;&gt;\n&gt;&gt; T=\r\nhat&#39;s my viewpoint, anyway.\n&gt;&gt;\n&gt;&gt; [1] http://tools.ietf.org/html/rfc5789\n&gt;&gt;=\r\n\n&gt;&gt; mca\n&gt;&gt; http://amundsen.com/blog/\n&gt;&gt; http://twitter.com@mamund\n&gt;&gt; http:/=\r\n/mamund.com/foaf.rdf#me\n&gt;&gt;\n&gt;&gt;\n&gt;&gt; #RESTFest 2010\n&gt;&gt; http://rest-fest.googlec=\r\node.com\n&gt;&gt;\n&gt;&gt;\n&gt;&gt;\n&gt;&gt;\n&gt;&gt; On Wed, Nov 10, 2010 at 11:32, William Martinez Poma=\r\nres\n&gt;&gt; &lt;wmartinez@...&gt; wrote:\n&gt;&gt; &gt; Hi Mike!\n&gt;&gt; &gt; Sorry, I&#39;m posting in this=\r\n discussion although I prefer to avoid HTTP related ones. Not my level of d=\r\netail.\n&gt;&gt; &gt;\n&gt;&gt; &gt; Still, this is interesting.\n&gt;&gt; &gt; I dislike a little bit PA=\r\nTCH. There are several reasons, these are just a couple:\n&gt;&gt; &gt;\n&gt;&gt; &gt; 1. One o=\r\nf important part of PATCH is the payload, as it defines the changes. And th=\r\nat payload is not standardized.\n&gt;&gt; &gt;\n&gt;&gt; &gt; 2. As Payload is important, it ma=\r\nkes the resource update much more representational oriented. That is, like =\r\npatching a source code file. Also, it makes the resource expose its attribu=\r\ntes, avoiding data hiding\n&gt;&gt; &gt;\n&gt;&gt; &gt; 3. Although it may be generic, adjustin=\r\ng the alpha channel of an image may not be as intuitive. In this case, the =\r\nPATCH Payload should request the change of the alpha channel. Metadata?\n&gt;&gt; =\r\n&gt;\n&gt;&gt; &gt; 4. Not all resources are just a bunch of fields, some can be more co=\r\nmplex and the update should be done by the server based on certain conditio=\r\nns or requests.\n&gt;&gt; &gt;\n&gt;&gt; &gt; So, PATCH may work, but I feel still it is not th=\r\ne full solution. At the end, as you say, we may need to go back and use POS=\r\nT.\n&gt;&gt; &gt; What do you think?\n&gt;&gt; &gt;\n&gt;&gt; &gt; William Martinez Pomares.\n&gt;&gt; &gt; --- In =\r\nrest-discuss@yahoogroups.com, mike amundsen &lt;mamund@&gt; wrote:\n&gt;&gt; &gt;&gt;\n&gt;&gt; &gt;&gt; Pa=\r\nrtial updates should be done using PATCH [1]\n&gt;&gt; &gt;&gt; Complete updates should =\r\nbe done using PUT.\n&gt;&gt; &gt;&gt; When those methods are not practical, POST can be =\r\nused instead.\n&gt;&gt; &gt;&gt;\n&gt;&gt; &gt;&gt; Subbu&#39;s &quot;RESTful Web Services Cookbook&quot; has a ver=\r\ny good chapter (&quot;11.\n&gt;&gt; &gt;&gt; Miscellaneous Writes&quot;) [2] that includes more th=\r\nan one section\n&gt;&gt; &gt;&gt; covering strategies for partial updates, too.\n&gt;&gt; &gt;&gt;\n&gt;&gt;=\r\n &gt;&gt; [1] http://tools.ietf.org/html/rfc5789\n&gt;&gt; &gt;&gt; [2] http://bit.ly/bRCwGj\n&gt;=\r\n&gt; &gt;&gt;\n&gt;&gt; &gt;&gt; mca\n&gt;&gt; &gt;&gt; http://amundsen.com/blog/\n&gt;&gt; &gt;&gt; http://twitter.com@mam=\r\nund\n&gt;&gt; &gt;&gt; http://mamund.com/foaf.rdf#me\n&gt;&gt; &gt;&gt;\n&gt;&gt; &gt;&gt;\n&gt;&gt; &gt;&gt; #RESTFest 2010\n&gt;&gt;=\r\n &gt;&gt; http://rest-fest.googlecode.com\n&gt;&gt; &gt;&gt;\n&gt;&gt; &gt;\n&gt;&gt; &gt;\n&gt;&gt; &gt;\n&gt;&gt; &gt;\n&gt;&gt; &gt; --------=\r\n----------------------------\n&gt;&gt; &gt;\n&gt;&gt; &gt; Yahoo! Groups Links\n&gt;&gt; &gt;\n&gt;&gt; &gt;\n&gt;&gt; &gt;\n&gt;=\r\n&gt; &gt;\n&gt;&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt; ------------------------------------\n&gt;\n&gt; Yahoo! Groups Lin=\r\nks\n&gt;\n&gt;\n&gt;\n&gt;\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":80827773,"authorName":"Seairth Jacobs","from":"&quot;Seairth Jacobs&quot; &lt;seairth@...&gt;","profile":"seairthjacobs","replyTo":"SENDER","senderId":"MQaxVAEvuHfCWWzhZg9sypuSnE8g5EuZZUsEVqt-gUPiozO2Ol1eM3YPdwzTfh2EsxHN0uKr3sKbhTcuiDdSH9n3NDq8QutszGpvcfc","spamInfo":{"isSpam":false,"reason":"0"},"subject":"GET Query String or POST content? (was Re: [rest-discuss] Amazon & Google & REST)","postDate":"1027090783","msgId":1903,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDAwMTgwMWMyMmYzNCRlYWM3MjYwMCQ2NTAwYThjMEBzZWFpcnRobGFwdG9wPg==","referencesHeader":"PE5EQkJMTkNPTUNQTEtBQk5KQkxLR0VEUEdCQUEucmFtaW5Ad2l6ZW4uY29tPiA8T0U3NTEwR2FpNG9tUlhmMkxUcjAwMDAwMTdkQGhvdG1haWwuY29tPg=="},"prevInTopic":0,"nextInTopic":1911,"prevInTime":1902,"nextInTime":1904,"topicId":1903,"numMessagesInTopic":2,"msgSnippet":"... string, ... I ... the ... Okay, suppose you had an html form that looked something like:  ","rawEmail":"Return-Path: &lt;seairth@...&gt;\r\nX-Sender: seairth@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_0_7_4); 19 Jul 2002 14:59:02 -0000\r\nReceived: (qmail 29586 invoked from network); 19 Jul 2002 14:59:02 -0000\r\nReceived: from unknown (66.218.66.218)\n  by m4.grp.scd.yahoo.com with QMQP; 19 Jul 2002 14:59:02 -0000\r\nReceived: from unknown (HELO mail.bbglobex.com) (208.251.163.4)\n  by mta3.grp.scd.yahoo.com with SMTP; 19 Jul 2002 14:59:01 -0000\r\nReceived: from seairthlaptop [68.10.252.58] by mail.bbglobex.com with ESMTP\n  (SMTPD32-6.06) id A84724B00AE; Fri, 19 Jul 2002 10:55:03 -0400\r\nMessage-ID: &lt;001801c22f34$eac72600$6500a8c0@seairthlaptop&gt;\r\nTo: &lt;rest-discuss@yahoogroups.com&gt;\r\nReferences: &lt;NDBBLNCOMCPLKABNJBLKGEDPGBAA.ramin@...&gt; &lt;OE7510Gai4omRXf2LTr0000017d@...&gt;\r\nSubject: GET Query String or POST content? (was Re: [rest-discuss] Amazon & Google & REST)\r\nDate: Fri, 19 Jul 2002 10:59:43 -0400\r\nMIME-Version: 1.0\r\nContent-Type: text/plain;\n\tcharset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: 7bit\r\nX-Priority: 3\r\nX-MSMail-Priority: Normal\r\nX-Mailer: Microsoft Outlook Express 6.00.2600.0000\r\nX-MimeOLE: Produced By Microsoft MimeOLE V6.00.2600.0000\r\nFrom: &quot;Seairth Jacobs&quot; &lt;seairth@...&gt;\r\nX-Yahoo-Group-Post: member; u=80827773\r\nX-Yahoo-Profile: seairthjacobs\r\n\r\n&gt; The identifier of a resource - the URI or URL - is the /whole/ text\nstring,\n&gt; not just the segments with &#39;/&#39; characters. This is an important point and\nI\n&gt; myself didn&#39;t realize it for a long time. The resource is identifed by\n&gt; path+query - not just the &#39;path&#39;. Appending a query string onto a path\n&gt; identifies a /different/ resource. There are many more resources than you\n&gt; would think at first.\n&gt;\n&gt; The query string (after the &#39;?&#39; character) is a part of the whole resource\n&gt; identifier. It happens to be a part that is easy to describe to developers\n&gt; when they want to construct the full identifier. If you can&#39;t construct\nthe\n&gt; identifier, you have to harvest it from some sort of XML (or other media\n&gt; format) and that is just as complex as telling people how to construct the\n&gt; darn URI in the first place...\n\nOkay, suppose you had an html form that looked something like:\n\n&lt;form action=&quot;http://seairth.com/getinformation&quot;&gt;\n&lt;input name=&quot;userid&quot; type=&quot;text&quot;&gt;\n&lt;/form&gt;\n\nNow, if I were to submit it using the GET method, you would have a URL that\nlooked like:\n\nhttp://seairth.com/getinformation?userid=seairth\n\nOn the other hand, if I were to submit it using POST, you would have:\n\nhttp://seairth.com/getinformation\n\nand the content of the message would have:\n\nuserid=seairth\n\n\nNow, you are saying that the two resulting URLs above are different\nidentifiers.  On the on hand, I would say that the GET should be used here\nsince the intent of this request is idempotent.  On the other hand, using a\nGET allows the client to create it&#39;s own identifier (of which their could be\nan unlimited number of variations).  Using a POST would mean that the same\nidentifier was is every time.  Also, since the client does not know whether\nit&#39;s action is idempotent or not, using POST acknowledges this possibility.\nHowever, using POST would not allow effective caching since the same URL\n(identifier) may return different results for each request.\n\nSo, in REST fashion, what would be the more appropriate method here?\n\n\nPart of the reason I am asking this has to do with GTP [1].  After reading\nsome of the discussions on this list and reading the Axioms of Web\nArchitecture [2] piece, I had thought that I could make the following\nrequirement:\n\nIn the {from} and {to} nodes, the URI used is always controlled by the owner\nof the URI.  In other words, the recipient of the URI is never allowed to\nmodify the URI and thereby create a new identifier.  Instead, anything\ngenerated by the recipient would go inside a {get}, {put}, {add}, {edit}, or\n{delete} node.  In this case, the difference between {get} and {put} here\nare their intent, specifically that {get} should be used for idempotent\nmessages while {put} does not have that restriction.  In the above example,\nyou would end up with a GTP message that looked something like:\n\n{onx\n    {gtp\n        {to [URI &quot;gtp://seairth.com/getinformation&quot;]}\n        {get [userid &quot;seairth&quot;]}\n    }gtp\n}onx\n\nor\n\n{onx\n    {gtp\n        {to [URI &quot;gtp://seairth.com/getinformation&quot;]}\n        {put [userid &quot;seairth&quot;]}\n    }gtp\n}onx\n\n\nwhere the actual choice of which verb is used is based on the intent (in\nthis case, more likely the {get}).  As a note, I have no problem with the\nURI containing a query string as long as the owner of the URI set the query\nstring (e.g. to maintain a session id).  I would not expect this usage to be\ncommon, but I don&#39;t see any reason for disallowing it.\n\nThen you come along and pointed out that query strings (the part that the\nclient has the ability to create) are (or can be) part of the identifier.\nSo this got me to wondering if enforcing this separation in GTP was a good\nthing or not.  I think it helps to provide a clean and consistant set of\nrules as to how URIs should be used.  But, is this RESTful?\n\n[1] www.seairth.com/web/rpc/gtp.html\n[2] www.w3.org/DesignIssues/Axioms.html\n\n---\nSeairth Jacobs\nseairth@...\n\n\n"}}
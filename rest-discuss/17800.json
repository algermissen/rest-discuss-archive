{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":210009313,"authorName":"Glenn Block","from":"Glenn Block &lt;glenn.block@...&gt;","profile":"glenn_block","replyTo":"SENDER","senderId":"cG1-3Rjr_8ijGcSdt2riJzB4Ep93xcai9ANWGTPllOfinpzKqYIhea4SFrayatiFz_99C6ocg5cFu5c2kpX1llMOq2gFXYgvUWY","spamInfo":{"isSpam":false,"reason":"12"},"subject":"RE: [rest-discuss] Should a RESTful API expose use cases & view models rather than entities?","postDate":"1317188607","msgId":17800,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PC00Njg3NDM3NTA4NjIzMzU4MTMwQHVua25vd25tc2dpZD4="},"prevInTopic":17799,"nextInTopic":17802,"prevInTime":17799,"nextInTime":17801,"topicId":17795,"numMessagesInTopic":16,"msgSnippet":"Another +1. The question of view models / entities is an implementation detail that is not related to REST or HTTP. Practically some folks do return models on","rawEmail":"Return-Path: &lt;glenn.block@...&gt;\r\nX-Sender: glenn.block@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 21655 invoked from network); 28 Sep 2011 05:43:30 -0000\r\nX-Received: from unknown (98.137.34.46)\n  by m14.grp.sp2.yahoo.com with QMQP; 28 Sep 2011 05:43:30 -0000\r\nX-Received: from unknown (HELO mail-fx0-f45.google.com) (209.85.161.45)\n  by mta3.grp.sp2.yahoo.com with SMTP; 28 Sep 2011 05:43:29 -0000\r\nX-Received: by fxh13 with SMTP id 13so251353fxh.4\n        for &lt;rest-discuss@yahoogroups.com&gt;; Tue, 27 Sep 2011 22:43:28 -0700 (PDT)\r\nX-Received: by 10.223.101.2 with SMTP id a2mr431459fao.2.1317188608157; Tue, 27\n Sep 2011 22:43:28 -0700 (PDT)\r\nMIME-Version: 1.0\r\nDate: Tue, 27 Sep 2011 22:43:27 -0700\r\nMessage-ID: &lt;-4687437508623358130@unknownmsgid&gt;\r\nTo: mike amundsen &lt;mamund@...&gt;, &quot;danhaywood@...&quot; &lt;dan@...&gt;\r\nCc: &quot;rest-discuss@yahoogroups.com&quot; &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Type: multipart/alternative; boundary=0015174feccc17697104adf9df21\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Glenn Block &lt;glenn.block@...&gt;\r\nSubject: RE: [rest-discuss] Should a RESTful API expose use cases & view\n models rather than entities?\r\nX-Yahoo-Group-Post: member; u=210009313; y=1AUWIhbfB2B-k3AiGE-l-kQHdzXBA6ZcnNhnkijCIG4toNheJ10\r\nX-Yahoo-Profile: glenn_block\r\n\r\n\r\n--0015174feccc17697104adf9df21\r\nContent-Type: text/plain; charset=windows-1252\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nAnother +1. The question of view models / entities is an implementation\ndet=\r\nail that is not related to REST or HTTP. Practically some folks do return\nm=\r\nodels on the server which are transformed into a representation. For those\n=\r\ncases I recommend using DTOs rather than the domain model because it remove=\r\ns\nany client coupling.\n\nThe potential for coupling exists in that case beca=\r\nuse you are returning\nsome sort of model. The alternative is no model and s=\r\nimply execute server\nlogic to directly create a representation.\n\nSent from =\r\nmy Windows Phone\n------------------------------\nFrom: mike amundsen\nSent: 9=\r\n/27/2011 1:39 PM\nTo: danhaywood@...\nCc: rest-discuss@yahoogroups.com\n=\r\nSubject: Re: [rest-discuss] Should a RESTful API expose use cases & view\nmo=\r\ndels rather than entities?\n\n\n\nDan:\n\nTo better support evolability over time=\r\n, REST-style implementations\nrely on the media type as the only &quot;shared und=\r\nerstanding&quot; between\nclient and server. Clients do not rely on a list of pro=\r\ncedures (RPC),\nan object-graph (OO), or a list of fixed URIs, etc. in order=\r\n to make\nrequests and process results. Clients are &quot;bound&quot; not to the objec=\r\nt\nmodel, view, etc, but to the media type and the hypermedia elements\n(link=\r\ns and forms, etc.) within that media type definition.\n\nThis binding to the =\r\nhypermedia controls within a media type means\nchanges on the server in the =\r\nRPC list, object model, URIs used to\nexpose functionality, etc. will have n=\r\no &quot;breaking effect&quot; on the\nclient (since the client only cares about the hy=\r\npermedia controls\nthemselves). And that means the two parties and independe=\r\nntly evolve\nover time (use new procedure lists, add/remove object models, e=\r\ntc.)\nw/o running the risk of &quot;breaking&quot; each other (as long as it is the\nhy=\r\npermedia controls that are used as &quot;shared understanding&quot;).\n\nFor this reaso=\r\nn, what is represented by a response *does* matter, but\nnot in ways traditi=\r\nonally understood by &quot;local&quot; programming models\n(RPC, OO, etc.). What is re=\r\npresented is that _state_ of the app, not\nthe programming style (OO, etc.) =\r\nof the server implementation.\n\nHopefully that makes some sense&lt;g&gt;.\n\nmca\nhtt=\r\np://amundsen.com/blog/\nhttp://twitter.com@mamund\nhttp://mamund.com/foaf.rdf=\r\n#me\n\nOn Mon, Sep 26, 2011 at 02:57, danhaywood@...\n&lt;dan@haywood-assoc=\r\niates.co.uk&gt; wrote:\n&gt; ... or doesn&#39;t it matter?\n&gt;\n&gt; The consensus would see=\r\nm to be to for the former (use cases + view\nmodels).  On the other hand, al=\r\nl representations have a media type, the\npoint of which is to allow the cli=\r\nent and server to evolve independently.\n That being the case, why does it m=\r\natter what is being represented?\n&gt;\n&gt; Thanks in advance\n&gt; Dan\n&gt;\n&gt;\n&gt;\n&gt; ------=\r\n------------------------------\n&gt;\n&gt; Yahoo! Groups Links\n&gt;\n&gt;\n&gt;\n&gt;\n \n\r\n--0015174feccc17697104adf9df21\r\nContent-Type: text/html; charset=windows-1252\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;html&gt;&lt;head&gt;&lt;meta content=3D&quot;text/html; charset=3Dutf-8&quot; http-equiv=3D&quot;Cont=\r\nent-Type&quot;&gt;&lt;/head&gt;&lt;body&gt;&lt;div&gt;&lt;div style=3D&quot;font-family: Calibri,sans-serif; =\r\nfont-size: 11pt;&quot;&gt;Another +1. The question of view models / entities is an =\r\nimplementation detail that is not related to REST or HTTP. Practically some=\r\n folks do return models on the server which are transformed into a represen=\r\ntation. For those cases I recommend using DTOs rather than the domain model=\r\n because it removes any client coupling. &lt;br&gt;\n&lt;br&gt;The potential for couplin=\r\ng exists in that case because you are returning some sort of model. The alt=\r\nernative is no model and simply execute server logic to directly create a r=\r\nepresentation.&lt;br&gt;&lt;br&gt;Sent from my Windows Phone&lt;br&gt;\n&lt;/div&gt;&lt;/div&gt;&lt;hr&gt;&lt;span =\r\nstyle=3D&quot;font-family: Tahoma,sans-serif; font-size: 10pt; font-weight: bold=\r\n;&quot;&gt;From: &lt;/span&gt;&lt;span style=3D&quot;font-family: Tahoma,sans-serif; font-size: 1=\r\n0pt;&quot;&gt;mike amundsen&lt;/span&gt;&lt;br&gt;&lt;span style=3D&quot;font-family: Tahoma,sans-serif=\r\n; font-size: 10pt; font-weight: bold;&quot;&gt;Sent: &lt;/span&gt;&lt;span style=3D&quot;font-fam=\r\nily: Tahoma,sans-serif; font-size: 10pt;&quot;&gt;9/27/2011 1:39 PM&lt;/span&gt;&lt;br&gt;\n&lt;spa=\r\nn style=3D&quot;font-family: Tahoma,sans-serif; font-size: 10pt; font-weight: bo=\r\nld;&quot;&gt;To: &lt;/span&gt;&lt;span style=3D&quot;font-family: Tahoma,sans-serif; font-size: 1=\r\n0pt;&quot;&gt;&lt;a href=3D&quot;mailto:danhaywood@...&quot;&gt;danhaywood@...&lt;/a&gt;&lt;/spa=\r\nn&gt;&lt;br&gt;\n&lt;span style=3D&quot;font-family: Tahoma,sans-serif; font-size: 10pt; font=\r\n-weight: bold;&quot;&gt;Cc: &lt;/span&gt;&lt;span style=3D&quot;font-family: Tahoma,sans-serif; f=\r\nont-size: 10pt;&quot;&gt;&lt;a href=3D&quot;mailto:rest-discuss@yahoogroups.com&quot;&gt;rest-discu=\r\nss@yahoogroups.com&lt;/a&gt;&lt;/span&gt;&lt;br&gt;\n&lt;span style=3D&quot;font-family: Tahoma,sans-s=\r\nerif; font-size: 10pt; font-weight: bold;&quot;&gt;Subject: &lt;/span&gt;&lt;span style=3D&quot;f=\r\nont-family: Tahoma,sans-serif; font-size: 10pt;&quot;&gt;Re: [rest-discuss] Should =\r\na RESTful API expose use cases &amp; view models rather than entities?&lt;/spa=\r\nn&gt;&lt;br&gt;\n&lt;br&gt;&lt;/body&gt;&lt;/html&gt;\n\n\n\n&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n\n\n\n\n\n\n\n&lt;body style=3D&quot;ba=\r\nckground-color: #fff;&quot;&gt;\n&lt;span style=3D&quot;display:none&quot;&gt;=A0&lt;/span&gt;\n\n\n&lt;div id=\r\n=3D&quot;ygrp-mlmsg&quot; style=3D&quot;position:relative;&quot;&gt;\n  &lt;div id=3D&quot;ygrp-msg&quot; style=\r\n=3D&quot;z-index: 1;&quot;&gt;\n\n\n    &lt;div id=3D&quot;ygrp-text&quot;&gt;\n      \n      \n      &lt;p&gt;Dan:&lt;=\r\nbr&gt;\n&lt;br&gt;\nTo better support evolability over time, REST-style implementation=\r\ns&lt;br&gt;\nrely on the media type as the only &quot;shared understanding&quot; b=\r\netween&lt;br&gt;\nclient and server. Clients do not rely on a list of procedures (=\r\nRPC),&lt;br&gt;\nan object-graph (OO), or a list of fixed URIs, etc. in order to m=\r\nake&lt;br&gt;\nrequests and process results. Clients are &quot;bound&quot; not to =\r\nthe object&lt;br&gt;\nmodel, view, etc, but to the media type and the hypermedia e=\r\nlements&lt;br&gt;\n(links and forms, etc.) within that media type definition.&lt;br&gt;\n=\r\n&lt;br&gt;\nThis binding to the hypermedia controls within a media type means&lt;br&gt;\n=\r\nchanges on the server in the RPC list, object model, URIs used to&lt;br&gt;\nexpos=\r\ne functionality, etc. will have no &quot;breaking effect&quot; on the&lt;br&gt;\nc=\r\nlient (since the client only cares about the hypermedia controls&lt;br&gt;\nthemse=\r\nlves). And that means the two parties and independently evolve&lt;br&gt;\nover tim=\r\ne (use new procedure lists, add/remove object models, etc.)&lt;br&gt;\nw/o running=\r\n the risk of &quot;breaking&quot; each other (as long as it is the&lt;br&gt;\nhype=\r\nrmedia controls that are used as &quot;shared understanding&quot;).&lt;br&gt;\n&lt;br=\r\n&gt;\nFor this reason, what is represented by a response *does* matter, but&lt;br&gt;=\r\n\nnot in ways traditionally understood by &quot;local&quot; programming mode=\r\nls&lt;br&gt;\n(RPC, OO, etc.). What is represented is that _state_ of the app, not=\r\n&lt;br&gt;\nthe programming style (OO, etc.) of the server implementation.&lt;br&gt;\n&lt;br=\r\n&gt;\nHopefully that makes some sense&lt;g&gt;.&lt;br&gt;\n&lt;br&gt;\nmca&lt;br&gt;\n&lt;a href=3D&quot;htt=\r\np://amundsen.com/blog/&quot;&gt;http://amundsen.com/blog/&lt;/a&gt;&lt;br&gt;\n&lt;a href=3D&quot;http:/=\r\n/twitter.com@mamund&quot;&gt;http://twitter.com@mamund&lt;/a&gt;&lt;br&gt;\n&lt;a href=3D&quot;http://ma=\r\nmund.com/foaf.rdf#me&quot;&gt;http://mamund.com/foaf.rdf#me&lt;/a&gt;&lt;br&gt;\n&lt;br&gt;\nOn Mon, Se=\r\np 26, 2011 at 02:57, &lt;a href=3D&quot;mailto:danhaywood%40ymail.com&quot;&gt;danhaywood@y=\r\nmail.com&lt;/a&gt;&lt;br&gt;\n&lt;&lt;a href=3D&quot;mailto:dan%40haywood-associates.co.uk&quot;&gt;dan@=\r\nhaywood-associates.co.uk&lt;/a&gt;&gt; wrote:&lt;br&gt;\n&gt; ... or doesn&#39;t it matt=\r\ner?&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; The consensus would seem to be to for the former (use=\r\n cases + view models). =A0On the other hand, all representations have a med=\r\nia type, the point of which is to allow the client and server to evolve ind=\r\nependently. =A0That being the case, why does it matter what is being repres=\r\nented?&lt;br&gt;\n\n&gt;&lt;br&gt;\n&gt; Thanks in advance&lt;br&gt;\n&gt; Dan&lt;br&gt;\n&gt;&lt;br&gt;\n&gt;&lt;=\r\nbr&gt;\n&gt;&lt;br&gt;\n&gt; ------------------------------------&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; Ya=\r\nhoo! Groups Links&lt;br&gt;\n&gt;&lt;br&gt;\n&gt;&lt;br&gt;\n&gt;&lt;br&gt;\n&gt;&lt;br&gt;\n&lt;/p&gt;\n\n    &lt;/div&gt;\n=\r\n     \n\n    \n    &lt;div style=3D&quot;color: #fff; height: 0;&quot;&gt;&lt;/div&gt;\n\n\n&lt;/body&gt;\n\n\n&lt;=\r\nhead&gt;\n  &lt;style type=3D&quot;text/css&quot;&gt;\n  &lt;!--\n  #ygrp-mkp {\n  border: 1px solid =\r\n#d8d8d8;\n  font-family: Arial;\n  margin: 10px 0;\n  padding: 0 10px;\n}\n\n#ygr=\r\np-mkp hr {\n  border: 1px solid #d8d8d8;\n}\n\n#ygrp-mkp #hd {\n  color: #628c2a=\r\n;\n  font-size: 85%;\n  font-weight: 700;\n  line-height: 122%;\n  margin: 10px=\r\n 0;\n}\n\n#ygrp-mkp #ads {\n  margin-bottom: 10px;\n}\n\n#ygrp-mkp .ad {\n  padding=\r\n: 0 0;\n}\n\n#ygrp-mkp .ad p {\n  margin: 0;\n}\n\n#ygrp-mkp .ad a {\n  color: #000=\r\n0ff;\n  text-decoration: none;\n}\n  #ygrp-sponsor #ygrp-lc {\n  font-family: A=\r\nrial;\n}\n\n#ygrp-sponsor #ygrp-lc #hd {\n  margin: 10px 0px;\n  font-weight: 70=\r\n0;\n  font-size: 78%;\n  line-height: 122%;\n}\n\n#ygrp-sponsor #ygrp-lc .ad {\n =\r\n margin-bottom: 10px;\n  padding: 0 0;\n}\n\n  a {\n    color: #1e66ae;\n  }\n\n  #=\r\nactions {\n    font-family: Verdana;\n    font-size: 11px;\n    padding: 10px =\r\n0;\n  }\n\n  #activity {\n    background-color: #e0ecee;\n    float: left;\n    f=\r\nont-family: Verdana;\n    font-size: 10px;\n    padding: 10px;\n  }\n\n  #activi=\r\nty span {\n    font-weight: 700;\n  }\n\n  #activity span:first-child {\n    tex=\r\nt-transform: uppercase;\n  }\n\n  #activity span a {\n    color: #5085b6;\n    t=\r\next-decoration: none;\n  }\n\n  #activity span span {\n    color: #ff7900;\n  }\n=\r\n\n  #activity span .underline {\n    text-decoration: underline;\n  }\n\n  .atta=\r\nch {\n    clear: both;\n    display: table;\n    font-family: Arial;\n    font-=\r\nsize: 12px;\n    padding: 10px 0;\n    width: 400px;\n  }\n\n  .attach div a {\n =\r\n   text-decoration: none;\n  }\n\n  .attach img {\n    border: none;\n    paddin=\r\ng-right: 5px;\n  }\n\n  .attach label {\n    display: block;\n    margin-bottom:=\r\n 5px;\n  }\n\n  .attach label a {\n    text-decoration: none;\n  }\n  \n  blockquo=\r\nte {\n    margin: 0 0 0 4px;\n  }\n\n  .bold {\n    font-family: Arial;\n    font=\r\n-size: 13px;\n    font-weight: 700;\n  }\n\n  .bold a {\n    text-decoration: no=\r\nne;\n  }\n\n  dd.last p a {\n    font-family: Verdana;\n    font-weight: 700;\n  =\r\n}\n\n  dd.last p span {\n    margin-right: 10px;\n    font-family: Verdana;\n   =\r\n font-weight: 700;\n  }\n\n  dd.last p span.yshortcuts {\n    margin-right: 0;\n=\r\n  }\n\n  div.attach-table div div a {\n    text-decoration: none;\n  }\n\n  div.a=\r\nttach-table {\n    width: 400px;\n  }\n\n  div.file-title a, div.file-title a:a=\r\nctive, div.file-title a:hover, div.file-title a:visited {\n    text-decorati=\r\non: none;\n  }\n\n  div.photo-title a, div.photo-title a:active, div.photo-tit=\r\nle a:hover, div.photo-title a:visited {\n    text-decoration: none;\n  }\n\n  d=\r\niv#ygrp-mlmsg #ygrp-msg p a span.yshortcuts {\n    font-family: Verdana;\n   =\r\n font-size: 10px;\n    font-weight: normal;\n  }\n\n  .green {\n    color: #628c=\r\n2a;\n  }\n\n  .MsoNormal {\n    margin: 0 0 0 0;\n  }\n\n  o {\n    font-size: 0;\n =\r\n }\n\n  #photos div {\n    float: left;\n    width: 72px;\n  }\n\n  #photos div di=\r\nv {\n    border: 1px solid #666666;\n    height: 62px;\n    overflow: hidden;\n=\r\n    width: 62px;\n  }\n\n  #photos div label {\n    color: #666666;\n    font-si=\r\nze: 10px;\n    overflow: hidden;\n    text-align: center;\n    white-space: no=\r\nwrap;\n    width: 64px;\n  }\n\n  #reco-category {\n    font-size: 77%;\n  }\n\n  #=\r\nreco-desc {\n    font-size: 77%;\n  }\n\n  .replbq {\n    margin: 4px;\n  }\n\n  #y=\r\ngrp-actbar div a:first-child {\n   /* border-right: 0px solid #000;*/\n    ma=\r\nrgin-right: 2px;\n    padding-right: 5px;\n  }\n\n  #ygrp-mlmsg {\n    font-size=\r\n: 13px;\n    font-family: Arial, helvetica,clean, sans-serif;\n    *font-size=\r\n: small;\n    *font: x-small;\n  }\n\n  #ygrp-mlmsg table {\n    font-size: inhe=\r\nrit;\n    font: 100%;\n  }\n\n  #ygrp-mlmsg select, input, textarea {\n    font:=\r\n 99% Arial, Helvetica, clean, sans-serif;\n  }\n\n  #ygrp-mlmsg pre, code {\n  =\r\n  font:115% monospace;\n    *font-size:100%;\n  }\n\n  #ygrp-mlmsg * {\n    line=\r\n-height: 1.22em;\n  }\n\n  #ygrp-mlmsg #logo {\n    padding-bottom: 10px;\n  }\n\n=\r\n  #ygrp-mlmsg a {\n    color: #1E66AE;\n  }\n\n  #ygrp-msg p a {\n    font-famil=\r\ny: Verdana;\n  }\n\n  #ygrp-msg p#attach-count span {\n    color: #1E66AE;\n    =\r\nfont-weight: 700;\n  }\n\n  #ygrp-reco #reco-head {\n    color: #ff7900;\n    fo=\r\nnt-weight: 700;\n  }\n\n  #ygrp-reco {\n    margin-bottom: 20px;\n    padding: 0=\r\npx;\n  }\n\n  #ygrp-sponsor #ov li a {\n    font-size: 130%;\n    text-decoratio=\r\nn: none;\n  }\n\n  #ygrp-sponsor #ov li {\n    font-size: 77%;\n    list-style-t=\r\nype: square;\n    padding: 6px 0;\n  } \n\n  #ygrp-sponsor #ov ul {\n    margin:=\r\n 0;\n    padding: 0 0 0 8px;\n  }\n\n  #ygrp-text {\n    font-family: Georgia;\n =\r\n }\n\n  #ygrp-text p {\n    margin: 0 0 1em 0;\n  }\n\n  #ygrp-text tt {\n    font=\r\n-size: 120%;\n  }\n\n  #ygrp-vital ul li:last-child {\n    border-right: none !=\r\nimportant; \n  } \n  --&gt;\n  &lt;/style&gt;\n&lt;/head&gt;\n\n\n&lt;/html&gt;\n\n\n\r\n--0015174feccc17697104adf9df21--\r\n\n"}}
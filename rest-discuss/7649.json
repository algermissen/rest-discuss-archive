{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":184797058,"authorName":"Benjamin Carlyle","from":"Benjamin Carlyle &lt;benjamincarlyle@...&gt;","profile":"fuzzybsc","replyTo":"SENDER","senderId":"tRNrUxZjjFAeGkKTUwTb_pANfhpvVxf65iIHdpcfP_SVc0larND5Vvk89FDKm-_lN5D52tM9IV8B2xyp1f6eYz7gRNn_Ate41kNUjI4yRig13XEMjrZUtpA","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Re: how to model actions","postDate":"1169300368","msgId":7649,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDExNjkzMDAzNjguNTEzMC45OS5jYW1lbEBsb2NhbGhvc3QubG9jYWxkb21haW4+","inReplyToHeader":"PDQ1QUMyRTRBLjIwMjA3MDRAY2lsdXgub3JnPg==","referencesHeader":"PDQ1QTVEQjg3LjMwNzA3QHFsdXN0ZXJzLmNvbT4JIDw0NWE1ZGUxYi4yZTA0YjZjOS4wYThhLmZmZmY5NTllQG14Lmdvb2dsZS5jb20+CSA8MzQzZWNiM2UwNzAxMTIwMzAwajFiNDBhMzE2cTk3ZGYwYjYzMDE1MjNlMTlAbWFpbC5nbWFpbC5jb20+CSA8NDVBNzhCREQuMzA4MDkwN0BxbHVzdGVycy5jb20+CSA8MTE2ODYxMTE3NC41MzIzLjQ1LmNhbWVsQGxvY2FsaG9zdC5sb2NhbGRvbWFpbj4JIDw0NUFDMkU0QS4yMDIwNzA0QGNpbHV4Lm9yZz4="},"prevInTopic":7648,"nextInTopic":7926,"prevInTime":7648,"nextInTime":7650,"topicId":7510,"numMessagesInTopic":39,"msgSnippet":"... I think you are talking about making the POST idempotent by including a unique identifier in the request content. If so, it sounds like an ","rawEmail":"Return-Path: &lt;benjamincarlyle@...&gt;\r\nX-Sender: benjamincarlyle@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 6383 invoked from network); 20 Jan 2007 13:40:57 -0000\r\nReceived: from unknown (66.218.66.218)\n  by m29.grp.scd.yahoo.com with QMQP; 20 Jan 2007 13:40:57 -0000\r\nReceived: from unknown (HELO mail03.syd.optusnet.com.au) (211.29.132.184)\n  by mta3.grp.scd.yahoo.com with SMTP; 20 Jan 2007 13:40:57 -0000\r\nReceived: from c210-49-93-69.rochd2.qld.optusnet.com.au (c210-49-93-69.rochd2.qld.optusnet.com.au [210.49.93.69])\n\tby mail03.syd.optusnet.com.au (8.13.1/8.13.1) with ESMTP id l0KDdS3x027217;\n\tSun, 21 Jan 2007 00:39:30 +1100\r\nTo: Duncan Cragg &lt;rest-discuss@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nIn-Reply-To: &lt;45AC2E4A.2020704@...&gt;\r\nReferences: &lt;45A5DB87.30707@...&gt;\n\t &lt;45a5de1b.2e04b6c9.0a8a.ffff959e@...&gt;\n\t &lt;343ecb3e0701120300j1b40a316q97df0b6301523e19@...&gt;\n\t &lt;45A78BDD.3080907@...&gt;\n\t &lt;1168611174.5323.45.camel@...&gt;\n\t &lt;45AC2E4A.2020704@...&gt;\r\nContent-Type: text/plain\r\nDate: Sat, 20 Jan 2007 23:39:28 +1000\r\nMessage-Id: &lt;1169300368.5130.99.camel@...&gt;\r\nMime-Version: 1.0\r\nX-Mailer: Evolution 2.6.3 \r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:0:0:0\r\nFrom: Benjamin Carlyle &lt;benjamincarlyle@...&gt;\r\nSubject: Re: [rest-discuss] Re: how to model actions\r\nX-Yahoo-Group-Post: member; u=184797058; y=JlD-N1hW77c0KDiWRpMMHrrXduArSbK_6S-61xzIP7CJg20\r\nX-Yahoo-Profile: fuzzybsc\r\n\r\nOn Tue, 2007-01-16 at 01:45 +0000, Duncan Cragg wrote:\n&gt; So - I promote a /symmetric/ REST point of view, with active\n&gt; resources \n&gt; being dependent on each other and conveying state between themselves \n&gt; with either GET or POST depending on which party initiates the\n&gt; transfer.\n&gt; \n&gt; I do hope and believe this pattern is still REST-compatible. Please\n&gt; read \n&gt; part 3 of my series \n&gt; (http://duncan-cragg.org/blog/post/business-functions-rest-dialogues/) \n&gt; for more explanation of this pattern.\n&gt; \n&gt; Of course, I probably end up thereby promoting POST idempotency, but\n&gt; I \n&gt; see that as a good thing. Example: if you&#39;ve added something to a\n&gt; list, \n&gt; adding it again doesn&#39;t do anything. For some function\n&gt; same(resx,resy), \n&gt; of course.\n\nI think you are talking about making the POST idempotent by including a\nunique identifier in the request content. If so, it sounds like an\napplication-specific form of idempotency. The server understands the\nmessage, and when it goes to file it away it notices it already has a\nmatching record. This approach is often valid from the server side,\nhowever the client is not in a particularly good position to predict\nwhat whether its request will be processed multiple times.\n\nI haven&#39;t read your content in detail as yet, but you also seem to be\nincluding a pub/sub mechanism in your model. Again without knowing how\nmuch of this you have covered exactly, subscription also has its\ncomplications :)\n\n&gt; I break REST interaction down into three modes - from dumb to smart,\n&gt; via \n&gt; dependent:\n&gt; -: If a resource receives such a direct transformation request or \n&gt; intent, it may be *dumb* and go ahead and do just what it&#39;s told, \n&gt; whenever it&#39;s told. That&#39;s what I was talking about in parts 1 and 2\n&gt; of \n&gt; the dialogues. It&#39;s a bit like a database. I&#39;d still do without PUT\n&gt; and \n&gt; DELETE, mind, to prevent it being seen that way!\n\nSo, a flat file or equivalent that doesn&#39;t have any overlap with other\nresources.\n\n&gt; -: Alternatively - what seems to be the subject of this thread - it\n&gt; may \n&gt; have *real-world dependency*: maybe it can&#39;t just switch to &#39;running&#39; \n&gt; until the real world thing it models actually /is/ running! So, when\n&gt; it \n&gt; receives a direct transformation intent, it goes off and satisfies\n&gt; that \n&gt; constraint by ensuring it&#39;s ticking over in reality, and only then \n&gt; changes its visible state to &#39;running&#39;.\n\nI&#39;m a SCADA guy, so this is a kind of resource that comes frequently to\nmind for me. This kind of resource can have knock-on effects also. If I\nstart a fan in a chiller plant for a building I am likely to see changes\nto the resources demarcating temperature guage state. These changes slip\nbetween resources via the implementation of these resources,\nspecifically the monitoring of changes to real world conditions.\n\n&gt; -: Finally, the resource may be *smart*, and decide to switch to \n&gt; &#39;running&#39; because of the rule that, as long as Joe&#39;s resource is \n&gt; running, it should be running itself. So it spots Joe&#39;s resource \n&gt; running, and starts running without even being told to! That&#39;s what I \n&gt; was talking about in part 3 of my dialogues.\n\nI suspect this is also the kind of resource that models most business\nfunctions... though I would like to cut to the specifics. I see a set of\nresources as an API to a service that expose its functionality in an\narchitecturally-consistent way. Importantly, they are not services in\ntheir own right. They share state with each other, but this is not the\nsame as communicating with each other by RESTful means. They are\nimplemented with objects or with embedded database procedures. These\nimplementation-level entities talk to each other. That interaction is\nwhat affects the service&#39;s resources.\n\nSo you have a service that is managing which other\nservices/devices/functions are running in its system. It observes a\nchange in one, and starts the other. The actual observation could be an\nobject notifying others via an observer pattern, it could be a process\nstarting or stopping and generating a SIGCHILD. It could be a resource\nmonitored via a configured or pub/sub notification mechanism or by GET\npolling.\n\nThe systems I work with tend to have a lot of pub/sub relationships to\ntrigger knock-on behaviours between services. This is necessary because\nchanges to the real world are unpredictable to even the most aware\ncomponents in the architecture. Within a service we would typicically be\ntalking about the observer pattern. Between services and their cluster\nmanagement software we would be talking about the cluster keeping track\nof which processes have started and not yet died.\n\nBenjamin.\n\n\n\n"}}
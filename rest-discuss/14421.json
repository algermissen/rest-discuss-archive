{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"aO19rTwFP-p5yVuLkUdF47Y2tmfHmfCsE3BW-Wy4J-EbYaIRDQpyJg0SmE_lJCsZbSATXqb1VgLaM3ywtqqTobeGitzUOnC8iDMcXsUX-w","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: Methods and the uniform interface [was: Re: [rest-discuss] REST isn&#39;t hard to learn, it&#39;s just taught wrong.","postDate":"1261820289","msgId":14421,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMDkxMjI2MDIzODA5LmM0M2EyNDg1LmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","inReplyToHeader":"PDIwMDkxMjI0MTgxNzA5LjA5Njk1ZjM4LmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","referencesHeader":"PDQ5OTg4ODQ0MDkxMjIxMDYwN3EzMTdlMmQ4aTQ3OWEzNjU2ZjQxMjViZWFAbWFpbC5nbWFpbC5jb20+CTxiNTQ4ZGY2NTA5MTIyMTA3MTl0MzdhODhmNzZ5ZGUxY2JlODdjNjY3NTA1YUBtYWlsLmdtYWlsLmNvbT4JPDQ5OTg4ODQ0MDkxMjIxMDg1M2k1OTJlNmQ1dTY3ZmI1ZmZmNzk3ZDBmMjRAbWFpbC5nbWFpbC5jb20+CTwyMDA5MTIyMTE5MzY0MC45YzY5M2E5YS5lcmljQGJpc29uc3lzdGVtcy5uZXQ+CTw0QjMxMDBBNC4xMDUwMDAxQGdtYWlsLmNvbT4JPDIwMDkxMjIzMTMxNTEwLjgzYzNiODcyLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPDRCMzJCQkFBLjIwODA5MDdAZ21haWwuY29tPgk8MjAwOTEyMjMxODMzNDkuY2Y5MmNiOTEuZXJpY0BiaXNvbnN5c3RlbXMubmV0Pgk8RDkwNzY3MzctRTNDRC00NERFLUFGQUItNTA2NDU4MjAyN0MxQHN1YmJ1Lm9yZz4JPDIwMDkxMjIzMTk1MjU4LmMwYTk5ZTExLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPDJmYTU1NDQ3MDkxMjI0MDQwNGszYzY3YmJmY29mNzdkODEyOTg5ODNkYWJmQG1haWwuZ21haWwuY29tPgk8MjAwOTEyMjQxODE3MDkuMDk2OTVmMzguZXJpY0BiaXNvbnN5c3RlbXMubmV0Pg=="},"prevInTopic":14416,"nextInTopic":14427,"prevInTime":14420,"nextInTime":14422,"topicId":14293,"numMessagesInTopic":37,"msgSnippet":"... Unless, of course, you re applying REST s optional Code on Demand constraint.  Careful -- I m not changing positions or invalidating anything I ve said; I","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 8726 invoked from network); 26 Dec 2009 09:38:27 -0000\r\nX-Received: from unknown (66.196.94.106)\n  by m3.grp.sp2.yahoo.com with QMQP; 26 Dec 2009 09:38:27 -0000\r\nX-Received: from unknown (HELO mxout-08.mxes.net) (216.86.168.183)\n  by mta2.grp.re1.yahoo.com with SMTP; 26 Dec 2009 09:38:26 -0000\r\nX-Received: from bigbison (unknown [65.117.211.162])\n\t(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))\n\t(No client certificate requested)\n\tby smtp.mxes.net (Postfix) with ESMTPSA id F0709509DB;\n\tSat, 26 Dec 2009 04:38:24 -0500 (EST)\r\nDate: Sat, 26 Dec 2009 02:38:09 -0700\r\nTo: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nCc: =?ISO-8859-1?Q?Ant=F3nio?= Mota &lt;amsmota@...&gt;, Subbu Allamaraju\n &lt;subbu@...&gt;, Roger Gonzalez &lt;roger.gonzalez@...&gt;, Tim Williams\n &lt;williamstw@...&gt;, mike amundsen &lt;mamund@...&gt;, berend@...,\n rest-discuss@yahoogroups.com\r\nMessage-Id: &lt;20091226023809.c43a2485.eric@...&gt;\r\nIn-Reply-To: &lt;20091224181709.09695f38.eric@...&gt;\r\nReferences: &lt;499888440912210607q317e2d8i479a3656f4125bea@...&gt;\n\t&lt;b548df650912210719t37a88f76yde1cbe87c667505a@...&gt;\n\t&lt;499888440912210853i592e6d5u67fb5fff797d0f24@...&gt;\n\t&lt;20091221193640.9c693a9a.eric@...&gt;\n\t&lt;4B3100A4.1050001@...&gt;\n\t&lt;20091223131510.83c3b872.eric@...&gt;\n\t&lt;4B32BBAA.2080907@...&gt;\n\t&lt;20091223183349.cf92cb91.eric@...&gt;\n\t&lt;D9076737-E3CD-44DE-AFAB-5064582027C1@...&gt;\n\t&lt;20091223195258.c0a99e11.eric@...&gt;\n\t&lt;2fa554470912240404k3c67bbfcof77d81298983dabf@...&gt;\n\t&lt;20091224181709.09695f38.eric@...&gt;\r\nOrganization: Bison Systems Corporation\r\nX-Mailer: Sylpheed 2.6.0 (GTK+ 2.10.14; i686-pc-mingw32)\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=US-ASCII\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nSubject: Re: Methods and the uniform interface [was: Re: [rest-discuss] REST\n isn&#39;t hard to learn, it&#39;s just taught wrong.\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\n&quot;Eric J. Bowman&quot; wrote:\n&gt; \n&gt; The reason you can&#39;t DELETE willy-nilly despite DELETE being part of\n&gt; the generic (cross-protocol) interface (a key distinction from your\n&gt; description of it being automatically part of a uniform REST\n&gt; interface) is because a REST API must be hypertext-driven.  The\n&gt; client MUST be instructed what to DELETE *in-band* within the\n&gt; hypertext representation.\n&gt; \n\nUnless, of course, you&#39;re applying REST&#39;s optional Code on Demand\nconstraint.  Careful -- I&#39;m not changing positions or invalidating\nanything I&#39;ve said; I see this conversation as an excellent teaching\nmoment for CoD.  Roy&#39;s dissertation defines this constraint:\n\n&quot;\nREST allows client functionality to be extended by downloading and\nexecuting code in the form of applets or scripts. This simplifies\nclients by reducing the number of features required to be pre-\nimplemented. Allowing features to be downloaded after deployment\nimproves system extensibility. However, it also reduces visibility, and\nthus is only an optional constraint within REST.\n&quot;\n\nThus does REST allow for pragmatism, over rigid adherence to theory.\nRoy&#39;s example, though, is a relic of its times, when Java applets were\nall the rage.  So let&#39;s use CoD to solve the problem of browser-based\nRESTful DELETE in a backwards-compatible fashion that doesn&#39;t rely on\nXforms or HTML 5, neither of which is very compatible with the current\nbrowser state of affairs, let alone backwards-compatible to older\nclients.\n\nWe create an HTML 4.01 representation, using a standard selectbox and a\nDELETE button.  Since HTML 4.01 doesn&#39;t define DELETE, the button can&#39;t\nbe directly linked to a browser&#39;s DELETE facility -- which it does\nhave, via XHR -- which results in a hypertext-driven API where the\nDELETE action must be described within Javascript.  So the DELETE\nbutton is just triggering a script.\n\nThe loss of visibility is obvious.  To decipher the API, the Javascript\nmust be deciphered against a DOM view of the HTML 4.01 document (like\nwith firebug).  This is made easier somewhat, by using standard JS\nlibraries like jquery or mootools, which both allow CSS selectors to be\nused in the scripts, abstracting away the DOM-direct selection inherent\nto JS.  Whereas anyone familiar with hypertext can refer to human-\nreadable markup to decipher an Xforms interface, even without prior\nknowledge of Xforms, by simply driving the app and viewing source.\n\nThis leads to a machine-readability problem.  In order to determine the\nnature of the possible state transitions, an agent would need to have\nsome sort of parser which could interpret the API defined in the JS.\nSuch a parser would not only have to be able to decipher XHR requests\nabstracted away differently by every JS library out there, but also be\nable to decipher custom XHR JS in order to function.\n\nThis is essentially the same problem which has led to the enthusiasm\nfor RDFa.  Each microformat requires its own custom parser to\nintrospect and read metadata.  RDFa provided a generic framework for\nexpressing embedded microformat/microdata metadata.  An RDFa parser\nworks the same for every vocabulary, making it easy to write clients\nwhich take action based upon the metadata output of the parser.\n\nXforms provides the same sort of benefit for machine-readable APIs,\nallowing a generic parser to accurately interpret the interface\nregardless of protocol and without any knowledge of system specifics.\nThe difference between the Xforms/HTML 5 and HTML 4.01 + CoD approaches\nis visibility, in this case the Xforms/HTML 5 approach results in a\nself-documenting API, while the HTML 4.01 + CoD approach does not.  The\nconsequence is one of serendipitous re-use, gained by using a media\ntype that encompasses the desired methods&#39; use instead of hiding the\napplication behavior behind a scripting language.\n\n&quot;\nAn optional constraint allows us to design an architecture that\nsupports the desired behavior in the general case, but with the\nunderstanding that it may be disabled within some contexts.\n&quot;\n\nThe general case, in this case, is browsers with Javascript activated\nthat aren&#39;t behind firewalls that block Javascript.  Where neither\nexists, the context is &quot;no Javascript&quot; which disables the desired\napplication behavior.  A self-documenting hypertext API does not suffer\nfrom this issue, although for the DELETE problem it&#39;s more theoretical\nthan pragmatic at this time, since it&#39;s less likely to work in the real\nworld than an XHR CoD solution.\n\nJust understand that the CoD constraint is used to extend clients to\nallow for nonstandard methods and media types.  In this case, using\nHTML 4.01 to DELETE constitutes a nonstandard method.  In a recent\nthread, I discussed using Java applets to deal with proprietary media\ntypes RESTfully through CoD.  Properly used and understood, CoD&#39;s a\nvaluable tool, but it doesn&#39;t begin to make most AJAX-y sites RESTful.\n\n-Eric\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":69164307,"authorName":"mike amundsen","from":"mike amundsen &lt;mamund@...&gt;","profile":"mamund","replyTo":"SENDER","senderId":"kwYft3TBV7IiqdMWg5OFz_e2eQzOMxJ1bE0qsQnWtnsjI4gm0rYda__odJ05WPgQu_MnPKeXuOh1Jqh8PiK9BokryQUvX6I","spamInfo":{"isSpam":false,"reason":"4"},"subject":"Re: [rest-discuss] Qs on building a good REST client","postDate":"1240021506","msgId":12514,"canDelete":false,"contentTrasformed":false,"systemMessage":true,"headers":{"messageIdInHeader":"PGI1NDhkZjY1MDkwNDE3MTkyNXg0ZmM2Yjg5OHVjNDA1MDJlZTMzYmZmN2UwQG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PDQ5RTkzNDE3LjcwNTA4MDZAZ21haWwuY29tPg==","referencesHeader":"PGdzOWI4aytlazRrQGVHcm91cHMuY29tPgkgPDI4ZTI1NzExMDkwNDE3MDg1OXIyMmFmODY4M3ExMDI4ZGU4NTlmNzM5NGI5QG1haWwuZ21haWwuY29tPgkgPDQ5RTkzNDE3LjcwNTA4MDZAZ21haWwuY29tPg=="},"prevInTopic":12467,"nextInTopic":0,"prevInTime":12513,"nextInTime":12515,"topicId":12442,"numMessagesInTopic":5,"msgSnippet":"Jan: I approach writing REST-ful clients as state machines. Some are very limited, of course.  Basically, I build clients that can handle a set of media-types","rawEmail":"Return-Path: &lt;mca@...&gt;\r\nReceived: (qmail 35722 invoked from network); 29 Apr 2009 07:04:06 -0000\r\nReceived: from unknown (69.147.108.201)\n  by m8.grp.re1.yahoo.com with QMQP; 29 Apr 2009 07:04:06 -0000\r\nReceived: from unknown (HELO n42b.bullet.mail.sp1.yahoo.com) (66.163.168.156)\n  by mta2.grp.re1.yahoo.com with SMTP; 29 Apr 2009 07:04:06 -0000\r\nDKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=yahoogroups.com; s=lima; t=1240988616; bh=tUkjCRQrVT8e+oLucn4poX/D2D90e7kyvRE6gQt+XD4=; h=Received:Received:X-Sender:X-Apparently-To:X-Received:X-Received:X-Received:X-Received:MIME-Version:X-Received:In-Reply-To:References:Date:X-Google-Sender-Auth:Message-ID:To:Content-Type:X-Originating-IP:X-eGroups-Msg-Info:From:Subject:X-Yahoo-Group-Post:X-Yahoo-Profile:Sender:X-Yahoo-Marked-Not-Spam:X-Yahoo-Newman-Property:X-eGroups-Approved-By:X-eGroups-Auth; b=W8jgij5p73o6nzLJxn+yhm/OIuV3V1MnWHXQZXY4j2V51WrUyPtJijx1sbhwtaL/x6H6wZ1cLT8ma8ktk4dDnVJ8j1HuAHI47wGq4XFMERgGyQ18dcUo/E8ZApT8Topi\r\nReceived: from [69.147.65.151] by n42.bullet.mail.sp1.yahoo.com with NNFMP; 29 Apr 2009 07:03:36 -0000\r\nReceived: from [98.137.34.33] by t5.bullet.mail.sp1.yahoo.com with NNFMP; 29 Apr 2009 07:03:36 -0000\r\nX-Sender: mca@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 57559 invoked from network); 18 Apr 2009 02:25:09 -0000\r\nX-Received: from unknown (98.137.34.45)\n  by m1.grp.re1.yahoo.com with QMQP; 18 Apr 2009 02:25:09 -0000\r\nX-Received: from unknown (HELO mail-fx0-f175.google.com) (209.85.220.175)\n  by mta2.grp.sp2.yahoo.com with SMTP; 18 Apr 2009 02:25:09 -0000\r\nX-Received: by fxm23 with SMTP id 23so1243948fxm.0\n        for &lt;rest-discuss@yahoogroups.com&gt;; Fri, 17 Apr 2009 19:25:06 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.223.125.144 with SMTP id y16mr954028far.93.1240021506525; Fri, \n\t17 Apr 2009 19:25:06 -0700 (PDT)\r\nIn-Reply-To: &lt;49E93417.7050806@...&gt;\r\nReferences: &lt;gs9b8k+ek4k@...&gt;\n\t &lt;28e257110904170859r22af8683q1028de859f7394b9@...&gt;\n\t &lt;49E93417.7050806@...&gt;\r\nDate: Fri, 17 Apr 2009 22:25:06 -0400\r\nX-Google-Sender-Auth: 0906e16b80413d90\r\nMessage-ID: &lt;b548df650904171925x4fc6b898uc40502ee33bff7e0@...&gt;\r\nTo: rest-discuss@yahoogroups.com\r\nContent-Type: multipart/alternative; boundary=00504502e501690a3f0467cb0135\r\nX-eGroups-Msg-Info: 2:4:8:0:0\r\nFrom: mike amundsen &lt;mamund@...&gt;\r\nSubject: Re: [rest-discuss] Qs on building a good REST client\r\nX-Yahoo-Group-Post: member; u=69164307; y=9ZPBK205foiF8m11-c3dBSO4h7OPKrqR4z7BKsMx01XT\r\nX-Yahoo-Profile: mamund\r\nX-Yahoo-Marked-Not-Spam: \r\nX-Yahoo-Newman-Property: groups-system\r\nX-eGroups-Approved-By: gonga_thrash &lt;distobj@...&gt; via web; 29 Apr 2009 07:03:36 -0000\r\n\r\n\r\n--00504502e501690a3f0467cb0135\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: 7bit\r\n\r\nJan:\n\nI approach writing REST-ful clients as state machines. Some are very\nlimited, of course.  Basically, I build clients that can handle a set of\nmedia-types (I&#39;m one of those who favors application/vnd.**** media-types).\nThat means, once a server publishes a media-type,changes like the one you\nillustrate are not allowed since it will break the client. However, the\nserver might issue a new media-type to handle breaking changes like the one\nyou show.\n\nAs for URIs, the server maintains at least one &#39;entry point&#39; URI that the\nclient must know in advance. After that each representation sent from the\nserver can have one or more link elements (links, forms, etc.) that contain\nviable URIs for the next step(s) the client can take to advance the app\nstate for that client session. To make this easier to handle for\nmachine-to-machine communication, I also rely heavily on the &quot;rel&quot; value as\na decoration on the link elements. This also means the client must have a\nvocabulary of understood rel values as a way to select navigation options\n(or inform humans of the same).\n\nThis approach frees the client app builder from commiting tight-binding\nerrors by assuming the workflow themselves (hence the state machine and the\ndecoarated hypermedia links in the representations). This also allows the\nserver to safely modify the workflow of the app w/o risking problems w/\ntightly-bound clients.\n\nWhen the number of media types is small and the workflow otoins (rel)\nlimited, apps like this are relatively easy to build. As the number of\nmedia-types and rel options increases, so does the client coding challenge.\nFor these reasons, the Web browser has had great sucess by limiting it&#39;s\nmedia-type support to a handlful of powerful options (HTML,CSS,JS,binaries);\nrecognizing only a slight few rel-types (rel=&quot;stylesheet&quot;, etc.) and relying\non humans to do the heavying lifting.\n\nmca\nhttp://amundsen.com/blog/\n\n\n\nOn Fri, Apr 17, 2009 at 21:59, Jan Vincent Liwanag &lt;jvliwanag@...&gt;wrote:\n\n&gt;\n&gt;\n&gt; On 4/17/09 11:59 PM, Peter Williams wrote:\n&gt;\n&gt; On Fri, Apr 17, 2009 at 1:31 AM, jv.liwanag &lt;jvliwanag@...&gt; &lt;jvliwanag@...&gt; wrote:\n&gt;\n&gt;\n&gt;  My concerns are:\n&gt; 1 - Let as assume another server app consuming a RESTful service. At\n&gt; start-up, it gets the links useful from the root URL then traverses them as\n&gt; necessary. Assuming there are elements, such as forms, these are probably\n&gt; stored as well. However, when the RESTful service evolves, say, changes the\n&gt; URIs, etc, the consumer&#39;s data would be outdated. How is this best handled?\n&gt;\n&gt; I could opt to always start each request with the root URL all the time,\n&gt; then follow the necessary links all the time. Of course, it&#39;ll be best to\n&gt; take advantage of caching and/or conditional GETs here.\n&gt;\n&gt;\n&gt;  Starting at the top and working through the hypermedia is my preferred\n&gt; approach.  With basic caching and conditional requests acceptable\n&gt; performance is quite easy to maintain.\n&gt;\n&gt;\n&gt;\n&gt;  2 - What&#39;s a good guideline on what stuff to watch out in the\n&gt; representations? I wouldn&#39;t want my representations to always adhere to a\n&gt; specific schema so as not to hinder its evolution. But some things have to\n&gt; be kept constant for older REST clients on the same service working right?\n&gt; What&#39;s a good guideline for those? (i.e. a specific XPath will always point\n&gt; to a specific information regardless of whatever revisions the service goes\n&gt; through.)\n&gt;\n&gt;\n&gt;  I have not built any clients that use XML base services, but for\n&gt; clients that use JSON representations i have used a very similar\n&gt; approach.  Basically, creating domain objects by making requests and\n&gt; extracting each individual piece of the data i wanted by name, or\n&gt; path, and storing them in instance variables in the object.  In XML,\n&gt; using XPath would be equivalent so i expect that would work pretty\n&gt; well.\n&gt;\n&gt;\n&gt;  My concern about using XPath though (or traversing objects using &#39;.&#39; in\n&gt; JSON) is that I can&#39;t freely change my representation. Say, if I wanted to\n&gt; change from\n&gt;\n&gt; {&#39;first_name&#39;:&#39;jv&#39;, &#39;last_name&#39;:&#39;liwanag&#39;}\n&gt;\n&gt; to\n&gt;\n&gt; {&#39;name&#39;:{&#39;first&#39;:&#39;jv&#39;, &#39;last_name&#39;:&#39;liwanag&#39;}}\n&gt;\n&gt; on a system that is already deployed.\n&gt;\n&gt; I was wondering if there are good guidelines/tools my clients can use so\n&gt; that it can handle that type of change. I was looking recently at WADL and\n&gt; it does offer a good solution to changing URLs and request parameters. I was\n&gt; wondering if there is a good tool to anticipate changing representations as\n&gt; well.\n&gt;\n&gt; In XML, a (possibly bad) idea I can think of is to give the users a fixed\n&gt; schema then have stylesheets ready to transform the XML if a change is\n&gt; present. Maybe create a workable standard which defines the stylesheets for\n&gt; the resources that changed.\n&gt;\n&gt; --\n&gt; Peter Williamshttp://barelyenough.org\n&gt;\n&gt;  Jan Vincent Liwanag\n&gt;\n&gt;\n&gt; \n&gt;\n\r\n--00504502e501690a3f0467cb0135\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nJan:&lt;br&gt;&lt;br&gt;I approach writing REST-ful clients as state machines. Some are=\r\n very limited, of course.=A0 Basically, I build clients that can handle a s=\r\net of media-types (I&#39;m one of those who favors application/vnd.**** med=\r\nia-types). That means, once a server publishes a media-type,changes like th=\r\ne one you illustrate are not allowed since it will break the client. Howeve=\r\nr, the server might issue a new media-type to handle breaking changes like =\r\nthe one you show.&lt;br&gt;\n&lt;br&gt;As for URIs, the server maintains at least one &#=\r\n39;entry point&#39; URI that the client must know in advance. After that ea=\r\nch representation sent from the server can have one or more link elements (=\r\nlinks, forms, etc.) that contain viable URIs for the next step(s) the clien=\r\nt can take to advance the app state for that client session. To make this e=\r\nasier to handle for machine-to-machine communication, I also rely heavily o=\r\nn the &quot;rel&quot; value as a decoration on the link elements. This also=\r\n means the client must have a vocabulary of understood rel values as a way =\r\nto select navigation options (or inform humans of the same).&lt;br&gt;\n&lt;br&gt;This a=\r\npproach frees the client app builder from commiting tight-binding errors by=\r\n assuming the workflow themselves (hence the state machine and the decoarat=\r\ned hypermedia links in the representations). This also allows the server to=\r\n safely modify the workflow of the app w/o risking problems w/ tightly-boun=\r\nd clients.&lt;br&gt;\n&lt;br&gt;When the number of media types is small and the workflow=\r\n otoins (rel) limited, apps like this are relatively easy to build. As the =\r\nnumber of media-types and rel options increases, so does the client coding =\r\nchallenge.=A0 For these reasons, the Web browser has had great sucess by li=\r\nmiting it&#39;s media-type support to a handlful of powerful options (HTML,=\r\nCSS,JS,binaries); recognizing only a slight few rel-types (rel=3D&quot;styl=\r\nesheet&quot;, etc.) and relying on humans to do the heavying lifting.&lt;br&gt;\n&lt;=\r\nbr&gt;mca&lt;br&gt;&lt;a href=3D&quot;http://amundsen.com/blog/&quot;&gt;http://amundsen.com/blog/&lt;/=\r\na&gt;&lt;br&gt;&lt;br&gt;\n&lt;br&gt;&lt;br&gt;&lt;div class=3D&quot;gmail_quote&quot;&gt;On Fri, Apr 17, 2009 at 21:59=\r\n, Jan Vincent Liwanag &lt;span dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:jvliwanag@gma=\r\nil.com&quot;&gt;jvliwanag@...&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote class=3D&quot;g=\r\nmail_quote&quot; style=3D&quot;border-left: 1px solid rgb(204, 204, 204); margin: 0pt=\r\n 0pt 0pt 0.8ex; padding-left: 1ex;&quot;&gt;\n\n\n\n\n\n\n\n        \n\n\n\n  \n\n&lt;div bgcolor=3D=\r\n&quot;#ffffff&quot; text=3D&quot;#000000&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;div class=3D&quot;h5&quot;&gt;\n\n\n\n\n&lt;br&gt;&lt;br&gt;\n=\r\n\n\n\n\n\nOn 4/17/09 11:59 PM, Peter Williams wrote:\n&lt;blockquote type=3D&quot;cite&quot;&gt;\n=\r\n  &lt;pre&gt;On Fri, Apr 17, 2009 at 1:31 AM, jv.liwanag &lt;a href=3D&quot;mailto:jvliwa=\r\nnag@...&quot; target=3D&quot;_blank&quot;&gt;&lt;jvliwanag@...&gt;&lt;/a&gt; wrote:\n  &lt;=\r\n/pre&gt;\n  &lt;blockquote type=3D&quot;cite&quot;&gt;\n    &lt;pre&gt;My concerns are:\n1 - Let as ass=\r\nume another server app consuming a RESTful service. At\nstart-up, it gets th=\r\ne links useful from the root URL then traverses them as\nnecessary. Assuming=\r\n there are elements, such as forms, these are probably\nstored as well. Howe=\r\nver, when the RESTful service evolves, say, changes the\nURIs, etc, the cons=\r\numer&#39;s data would be outdated. How is this best handled?\n\nI could opt t=\r\no always start each request with the root URL all the time,\nthen follow the=\r\n necessary links all the time. Of course, it&#39;ll be best to\ntake advanta=\r\nge of caching and/or conditional GETs here.\n    &lt;/pre&gt;\n  &lt;/blockquote&gt;\n  &lt;p=\r\nre&gt;Starting at the top and working through the hypermedia is my preferred\na=\r\npproach.  With basic caching and conditional requests acceptable\nperformanc=\r\ne is quite easy to maintain.\n\n  &lt;/pre&gt;\n  &lt;blockquote type=3D&quot;cite&quot;&gt;\n    &lt;pr=\r\ne&gt;2 - What&#39;s a good guideline on what stuff to watch out in the\nreprese=\r\nntations? I wouldn&#39;t want my representations to always adhere to a\nspec=\r\nific schema so as not to hinder its evolution. But some things have to\nbe k=\r\nept constant for older REST clients on the same service working right?\nWhat=\r\n&#39;s a good guideline for those? (i.e. a specific XPath will always point=\r\n\nto a specific information regardless of whatever revisions the service goe=\r\ns\nthrough.)\n    &lt;/pre&gt;\n  &lt;/blockquote&gt;\n  &lt;pre&gt;I have not built any clients =\r\nthat use XML base services, but for\nclients that use JSON representations i=\r\n have used a very similar\napproach.  Basically, creating domain objects by =\r\nmaking requests and\nextracting each individual piece of the data i wanted b=\r\ny name, or\npath, and storing them in instance variables in the object.  In =\r\nXML,\nusing XPath would be equivalent so i expect that would work pretty\nwel=\r\nl.\n  &lt;/pre&gt;\n&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;\nMy concern about using XPath though (=\r\nor traversing objects using &#39;.&#39; in\nJSON) is that I can&#39;t freely=\r\n change my representation. Say, if I wanted\nto change from &lt;br&gt;\n&lt;br&gt;\n{&#39;=\r\nfirst_name&#39;:&#39;jv&#39;, &#39;last_name&#39;:&#39;liwanag&#39;}&lt;br&gt;\n&lt;b=\r\nr&gt;\nto&lt;br&gt;\n&lt;br&gt;\n{&#39;name&#39;:{&#39;first&#39;:&#39;jv&#39;, &#39;last_nam=\r\ne&#39;:&#39;liwanag&#39;}}&lt;br&gt;\n&lt;br&gt;\non a system that is already deployed.&lt;b=\r\nr&gt;\n&lt;br&gt;\nI was wondering if there are good guidelines/tools my clients can u=\r\nse\nso that it can handle that type of change. I was looking recently at\nWAD=\r\nL and it does offer a good solution to changing URLs and request\nparameters=\r\n. I was wondering if there is a good tool to anticipate\nchanging representa=\r\ntions as well.&lt;br&gt;\n&lt;br&gt;\nIn XML, a (possibly bad) idea I can think of is to =\r\ngive the users a\nfixed schema then have stylesheets ready to transform the =\r\nXML if a\nchange is present. Maybe create a workable standard which defines =\r\nthe\nstylesheets for the resources that changed.&lt;div class=3D&quot;im&quot;&gt;&lt;br&gt;\n&lt;bloc=\r\nkquote type=3D&quot;cite&quot;&gt;\n  &lt;pre&gt;--\nPeter Williams\n&lt;a href=3D&quot;http://barelyenou=\r\ngh.org&quot; target=3D&quot;_blank&quot;&gt;http://barelyenough.org&lt;/a&gt;\n  &lt;/pre&gt;\n&lt;/blockquote=\r\n&gt;&lt;/div&gt;\nJan Vincent Liwanag&lt;br&gt;\n\n\n\n\n\n\n&lt;br&gt;\n\n    \n    \n&lt;br&gt;\n\n\n\n\n&lt;div width=\r\n=3D&quot;1&quot; style=3D&quot;color: white; clear: both;&quot;&gt;&lt;/div&gt;\n&lt;/div&gt;\n\n&lt;/blockquote&gt;&lt;/d=\r\niv&gt;&lt;br&gt;\n\r\n--00504502e501690a3f0467cb0135--\r\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":121832671,"authorName":"Terrence Molson","from":"Terrence Molson &lt;inthedarkplace@...&gt;","profile":"inthedarkplace","replyTo":"SENDER","senderId":"XpwE-f7nyxtwvfmE8oOeUtgvGyc7Qfy_l8DOk-cbn9H7o2jeBhLC3ikjdNkmFAwblVkTnDbTT7BwpEfBZElIMndCJFLtZ73mIVH_otwD7M3C","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] squaring (was Re:HTTP and safety)","postDate":"1030646474","msgId":2271,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMDIwODI5MTg0MTE0LjU1MTIyLnFtYWlsQHdlYjEzMDAxLm1haWwueWFob28uY29tPg==","inReplyToHeader":"PDAwZTYwMWMyNGVkMSQ2MzU1OTY0MCQyYTAxMTRhY0BOSVRFTy5DT00+"},"prevInTopic":2270,"nextInTopic":2274,"prevInTime":2270,"nextInTime":2272,"topicId":2255,"numMessagesInTopic":11,"msgSnippet":"Jeff, Well, after reading and rereading the standard and Fielding s thesis and some other texts on document-centric modelling (which HTTP is heavi;ly based on","rawEmail":"Return-Path: &lt;inthedarkplace@...&gt;\r\nX-Sender: inthedarkplace@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_1_0_1); 30 Aug 2002 02:07:11 -0000\r\nReceived: (qmail 56935 invoked from network); 29 Aug 2002 22:45:31 -0000\r\nReceived: from unknown (66.218.66.218)\n  by m13.grp.scd.yahoo.com with QMQP; 29 Aug 2002 22:45:31 -0000\r\nReceived: from unknown (HELO web13001.mail.yahoo.com) (216.136.174.11)\n  by mta3.grp.scd.yahoo.com with SMTP; 29 Aug 2002 22:45:31 -0000\r\nMessage-ID: &lt;20020829184114.55122.qmail@...&gt;\r\nReceived: from [160.39.169.30] by web13001.mail.yahoo.com via HTTP; Thu, 29 Aug 2002 11:41:14 PDT\r\nDate: Thu, 29 Aug 2002 11:41:14 -0700 (PDT)\r\nSubject: Re: [rest-discuss] squaring (was Re:HTTP and safety)\r\nTo: Jeffrey Winter &lt;j.winter@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nIn-Reply-To: &lt;00e601c24ed1$63559640$2a0114ac@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: multipart/alternative; boundary=&quot;0-1841418092-1030646474=:55100&quot;\r\nFrom: Terrence Molson &lt;inthedarkplace@...&gt;\r\nX-Yahoo-Group-Post: member; u=121832671\r\nX-Yahoo-Profile: inthedarkplace\r\n\r\n\r\n--0-1841418092-1030646474=:55100\r\nContent-Type: text/plain; charset=us-ascii\r\n\r\n\nJeff,\nWell, after reading and rereading the standard and Fielding&#39;s thesis and some other texts on document-centric modelling (which HTTP is heavi;ly based on though Fielding nor TBL ever admit it, GET, PUT, DELETE, POST are directly analagous to READ, WRITE, DELETE, XX) I think the only valid uses of POST are as follows:\n1) Resource Creation.\n2) Append-To-Document\n3) Document Processor\nNote that 1,2,3 are all very much alike. For example, if you consider /purchase-orders the collection of purchase orders in the system then POST&#39;ing a new purchase-order to that collection can be seen as using 1 or 2. There are subtle and important differences between them. Still, RPC never enters the picture. You are always passing fully formed documents that could possibly stand alone.\n- itdp\n Jeffrey Winter wrote:&gt; Again, in case it&#39;s not clear above, it&#39;s about\n&gt; *discriminating*  RPC from REST, if indeed they\n&gt; are partitioned (I don&#39;t think they are).\n\nIt seems to me that the difference breaks down along\nthe lines of how POST can be used:\n\n1. To request the creation of a subordinate resource.\n\n2. As a logical PUT (or DELETE).  There was a thread\nearlier this month about whether or not it is okay to\nuse POST to perform partial resource updates. I recall that\nit was suggested that it is purer (and sometimes necessary)\nto update the entire resource using a PUT, but performance\nrequirements, etc., may preclude doing so.  In this case,\nusing POST is okay.\n\n3. To request a resource to perform some action upon some\nlogically subordinate data.\n\n4. To tunnel RPC over HTTP to make arbitrary calls.\n\nSo, the question is: is there a meaningful difference\nbetween 3 and 4?\n\nI think there is. RPC generally POSTs to some generic URL;\nessentially, the id of the resource being acted upon becomes\nthe first parameter in the procedure call.  With REST you\nhave at least moved the first parameter out to a real URL.\n\nBeyond that though, when confronted with an problem where\nsome RPC-ish approach may be considered, the recourse\nmodel can be refactored to make it more RESTful.\n\nFor a simplified example such as squaring numbers, using\nthe GET/PUT semantics is the way to go, but for a more\ngeneral case were some arbitrary level of backend processing\nneeds to occur, a POST operation would often need to be employed.\n\nThis would seem to hold especially when multiple\nresources need to be updated in an atomic way.\n\nFor example, how do you handle transferring money from\na savings account to a checking account?\n\n\nSam Ruby has an article (that I believe someone here had\nreferenced before) where he makes the statement:\n\n&quot;It is the expression of higher level operations (particularly\nones that perform non-atomic updates) that SOAP&#39;s value\nproposition becomes apparent.  Sometimes, one truly wants\nto have an atomic &quot;transfer funds from savings to checking&quot;\ntransaction instead of simply a series of discrete GET and PUT&#39;s.&quot;\n\n[http://radio.weblogs.com/0101679/stories/2002/07/20/restSoap.html]\n\nSurely you can&#39;t just GET the account representations, update\nthe balance in each and then PUT them back one at a time.\n\nI understand the sentiment behind Ruby&#39;s statement, but I don&#39;t\nagree that REST precludes doing atomic operations, so long as\nPOST semantics are employed.\n\n\nFor example, you could request the creation of a\n&quot;transfer&quot; resource\n\nPOST /user/joe/accounts/transfers\n&lt;transfer from-account=&quot;savings/1234&quot;\nto-account=&quot;checking/2345&quot;&gt;50&lt;/transfer&gt;\n\non successful transfer:\n\n201 Created\nLocation: /user/joe/accounts/transfers/00001\n\nif insufficient funds:\n\n  400 Bad Request\n\nA GET against /transfers could return a transfer history, etc.\n\n\n\nIf you did something like POST the to-account number and amount\nto the from-acount resource:\n\nPOST /user/joe/savings/transfer\n&lt;transfer to-account=&quot;2345&quot;&gt;50&lt;/transfer&gt;\n\none could argue that this is RESTful since you are asking the\naccount resource to work with logically subordinate data, but\nusing POST in this way does start to &quot;smell&quot; like RPC.\n\n\nThanks,\n- Jeff\n\n\nYahoo! Groups SponsorADVERTISEMENT\n\nTo unsubscribe from this group, send an email to:\nrest-discuss-unsubscribe@yahoogroups.com\n\n\n\nYour use of Yahoo! Groups is subject to the Yahoo! Terms of Service. \n\n\n\n---------------------------------\nDo You Yahoo!?\nYahoo! Finance - Get real-time stock quotes\r\n--0-1841418092-1030646474=:55100\r\nContent-Type: text/html; charset=us-ascii\r\n\r\n&lt;P&gt;Jeff,\n&lt;P&gt;Well, after reading and rereading the standard and Fielding&#39;s thesis and some other texts on document-centric modelling (which HTTP is heavi;ly&nbsp;based on though Fielding nor TBL ever admit it, GET, PUT, DELETE, POST&nbsp;are directly&nbsp;analagous to READ, WRITE, DELETE, XX) I think the only valid uses of POST are as follows:\n&lt;P&gt;1) Resource Creation.\n&lt;P&gt;2) Append-To-Document\n&lt;P&gt;3) Document Processor\n&lt;P&gt;Note that 1,2,3 are all very much alike. For example, if you consider /purchase-orders the collection of purchase orders in the system then POST&#39;ing a new purchase-order to that collection can be seen as using 1 or 2. There are subtle and important differences between them. Still, RPC never enters the picture. You are always passing fully formed documents that could possibly stand alone.\n&lt;P&gt;- itdp\n&lt;P&gt;&nbsp;&lt;B&gt;&lt;I&gt;Jeffrey Winter &lt;J.WINTER@...&gt;&lt;/I&gt;&lt;/B&gt;wrote:\n&lt;BLOCKQUOTE style=&quot;PADDING-LEFT: 5px; MARGIN-LEFT: 5px; BORDER-LEFT: #1010ff 2px solid&quot;&gt;&lt;TT&gt;&gt; Again, in case it&#39;s not clear above, it&#39;s about&lt;BR&gt;&gt; *discriminating*&nbsp; RPC from REST, if indeed they&lt;BR&gt;&gt; are partitioned (I don&#39;t think they are).&lt;BR&gt;&lt;BR&gt;It seems to me that the difference breaks down along&lt;BR&gt;the lines of how POST can be used:&lt;BR&gt;&lt;BR&gt;1. To request the creation of a subordinate resource.&lt;BR&gt;&lt;BR&gt;2. As a logical PUT (or DELETE).&nbsp; There was a thread&lt;BR&gt;earlier this month about whether or not it is okay to&lt;BR&gt;use POST to perform partial resource updates. I recall that&lt;BR&gt;it was suggested that it is purer (and sometimes necessary)&lt;BR&gt;to update the entire resource using a PUT, but performance&lt;BR&gt;requirements, etc., may preclude doing so.&nbsp; In this case,&lt;BR&gt;using POST is okay.&lt;BR&gt;&lt;BR&gt;3. To request a resource to perform some action upon some&lt;BR&gt;logically subordinate data.&lt;BR&gt;&lt;BR&gt;4. To tunnel RPC over HTTP to make arbitrary calls.&lt;BR&gt;&lt;BR&gt;So, the question is: is there a meaningful difference&lt;BR&gt;between 3 and 4?&lt;BR&gt;&lt;BR&gt;I think there is. RPC generally POSTs to some generic URL;&lt;BR&gt;essentially, the id of the resource being acted upon becomes&lt;BR&gt;the first parameter in the procedure call.&nbsp; With REST you&lt;BR&gt;have at least moved the first parameter out to a real URL.&lt;BR&gt;&lt;BR&gt;Beyond that though, when confronted with an problem where&lt;BR&gt;some RPC-ish approach may be considered, the recourse&lt;BR&gt;model can be refactored to make it more RESTful.&lt;BR&gt;&lt;BR&gt;For a simplified example such as squaring numbers, using&lt;BR&gt;the GET/PUT semantics is the way to go, but for a more&lt;BR&gt;general case were some arbitrary level of backend processing&lt;BR&gt;needs to occur, a POST operation would often need to be employed.&lt;BR&gt;&lt;BR&gt;This would seem to hold especially when multiple&lt;BR&gt;resources need to be updated in an atomic way.&lt;BR&gt;&lt;BR&gt;For example, how do you handle transferring money from&lt;BR&gt;a savings account to a checking account?&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;Sam Ruby has an article (that I believe someone here had&lt;BR&gt;referenced before) where he makes the statement:&lt;BR&gt;&lt;BR&gt;&quot;It is the expression of higher level operations (particularly&lt;BR&gt;ones that perform non-atomic updates) that SOAP&#39;s value&lt;BR&gt;proposition becomes apparent.&nbsp; Sometimes, one truly wants&lt;BR&gt;to have an atomic &quot;transfer funds from savings to checking&quot;&lt;BR&gt;transaction instead of simply a series of discrete GET and PUT&#39;s.&quot;&lt;BR&gt;&lt;BR&gt;[&lt;A href=&quot;http://radio.weblogs.com/0101679/stories/2002/07/20/restSoap.html]&quot;&gt;http://radio.weblogs.com/0101679/stories/2002/07/20/restSoap.html]&lt;/A&gt;&lt;BR&gt;&lt;BR&gt;Surely you can&#39;t just GET the account representations, update&lt;BR&gt;the balance in each and then PUT them back one at a time.&lt;BR&gt;&lt;BR&gt;I understand the sentiment behind Ruby&#39;s statement, but I don&#39;t&lt;BR&gt;agree that REST precludes doing atomic operations, so long as&lt;BR&gt;POST semantics are employed.&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;For example, you could request the creation of a&lt;BR&gt;&quot;transfer&quot; resource&lt;BR&gt;&lt;BR&gt;POST /user/joe/accounts/transfers&lt;BR&gt;&lt;transfer from-account=&quot;savings/1234&quot;&lt;BR&gt;to-account=&quot;checking/2345&quot;&gt;50&lt;/transfer&gt;&lt;BR&gt;&lt;BR&gt;on successful transfer:&lt;BR&gt;&lt;BR&gt;201 Created&lt;BR&gt;Location: /user/joe/accounts/transfers/00001&lt;BR&gt;&lt;BR&gt;if insufficient funds:&lt;BR&gt;&lt;BR&gt;&nbsp; 400 Bad Request&lt;BR&gt;&lt;BR&gt;A GET against /transfers could return a transfer history, etc.&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;If you did something like POST the to-account number and amount&lt;BR&gt;to the from-acount resource:&lt;BR&gt;&lt;BR&gt;POST /user/joe/savings/transfer&lt;BR&gt;&lt;transfer to-account=&quot;2345&quot;&gt;50&lt;/transfer&gt;&lt;BR&gt;&lt;BR&gt;one could argue that this is RESTful since you are asking the&lt;BR&gt;account resource to work with logically subordinate data, but&lt;BR&gt;using POST in this way does start to &quot;smell&quot; like RPC.&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;Thanks,&lt;BR&gt;- Jeff&lt;BR&gt;&lt;BR&gt;&lt;/TT&gt;&lt;BR&gt;&lt;BR&gt;&lt;TT&gt;To unsubscribe from this group, send an email to:&lt;BR&gt;rest-discuss-unsubscribe@yahoogroups.com&lt;BR&gt;&lt;BR&gt;&lt;/TT&gt;&lt;BR&gt;&lt;BR&gt;&lt;TT&gt;Your use of Yahoo! Groups is subject to the &lt;A href=&quot;http://docs.yahoo.com/info/terms/&quot;&gt;Yahoo! Terms of Service&lt;/A&gt;.&lt;/TT&gt; &lt;BR&gt;&lt;/BLOCKQUOTE&gt;&lt;p&gt;&lt;br&gt;&lt;hr size=1&gt;&lt;b&gt;Do You Yahoo!?&lt;/b&gt;&lt;br&gt;\n&lt;a href=&quot;http://rd.yahoo.com/finance/mailsig/new/*http://finance.yahoo.com&quot;&gt;Yahoo! Finance&lt;/a&gt; - Get real-time stock quotes\r\n--0-1841418092-1030646474=:55100--\r\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":93099516,"authorName":"Josh Sled","from":"Josh Sled &lt;jsled@...&gt;","profile":"joshsled","replyTo":"SENDER","senderId":"5TJFQpDAzJWE6-NJ7GHnvVJrutnxZBwR74C7wRKiqcCUpWFSPHJzqPnX5Ph4G24MGxdb2v3kjWp7wXgtdt2bc2CDqejZeOtSZQ","spamInfo":{"isSpam":false,"reason":"0"},"subject":"uniform interfaces","postDate":"1104416881","msgId":4735,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDExMDQ0MTY4NzIuMTMxMjYuMTMyNi5jYW1lbEBwaG9lbml4Pg==","inReplyToHeader":"PDAwM2YwMWM0ZWRjMiQ2Nzk2MDVlMCQ2MGQ0YThjMEBXQUxERU5OT1RFQk9PSz4=","referencesHeader":"PGNxcnJ0Mys4ZGxtQGVHcm91cHMuY29tPiA8MTEwNDI3NTkyMS4yMzU3OC4zMC5jYW1lbEBwaG9lbml4PgkgPEM1MTA2ODg0LTU5NDItMTFEOS1CM0FGLTAwMEQ5MzMyNEFENkBnYml2LmNvbT4JIDwxMTA0MzMxNjc4LjIzNTYzLjIzLmNhbWVsQHBob2VuaXg+CSA8MDAzZjAxYzRlZGMyJDY3OTYwNWUwJDYwZDRhOGMwQFdBTERFTk5PVEVCT09LPg=="},"prevInTopic":4734,"nextInTopic":4736,"prevInTime":4734,"nextInTime":4736,"topicId":4721,"numMessagesInTopic":25,"msgSnippet":"... Every time I read RFC 2616 section 9.5, I come away with two meanings: * process data * subordinate [...] in the same way that a file is subordinate to a","rawEmail":"Return-Path: &lt;jsled@...&gt;\r\nX-Sender: jsled@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 5319 invoked from network); 30 Dec 2004 14:25:58 -0000\r\nReceived: from unknown (66.218.66.217)\n  by m8.grp.scd.yahoo.com with QMQP; 30 Dec 2004 14:25:58 -0000\r\nReceived: from unknown (HELO phoenix.asynchronous.org) (216.114.142.253)\n  by mta2.grp.scd.yahoo.com with SMTP; 30 Dec 2004 14:25:57 -0000\r\nReceived: (qmail 15612 invoked by uid 1000); 30 Dec 2004 09:28:01 -0500\r\nTo: Walden Mathews &lt;walden@...&gt;,\n  &quot;Roy T. Fielding&quot; &lt;fielding@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nIn-Reply-To: &lt;003f01c4edc2$679605e0$60d4a8c0@WALDENNOTEBOOK&gt;\r\nReferences: &lt;cqrrt3+8dlm@...&gt; &lt;1104275921.23578.30.camel@phoenix&gt;\n\t &lt;C5106884-5942-11D9-B3AF-000D93324AD6@...&gt;\n\t &lt;1104331678.23563.23.camel@phoenix&gt;\n\t &lt;003f01c4edc2$679605e0$60d4a8c0@WALDENNOTEBOOK&gt;\r\nContent-Type: text/plain\r\nContent-Transfer-Encoding: 7bit\r\nOrganization: Asynchronous.org\r\nMessage-Id: &lt;1104416872.13126.1326.camel@phoenix&gt;\r\nMime-Version: 1.0\r\nX-Mailer: Ximian Evolution 1.4.5 \r\nDate: Thu, 30 Dec 2004 09:28:01 -0500\r\nX-eGroups-Remote-IP: 216.114.142.253\r\nFrom: Josh Sled &lt;jsled@...&gt;\r\nReply-To: jsled@...\r\nSubject: uniform interfaces\r\nX-Yahoo-Group-Post: member; u=93099516\r\nX-Yahoo-Profile: joshsled\r\n\r\nOn Wed, 2004-12-29 at 11:21, Walden Mathews wrote:\n&gt; Josh,\n&gt; \n&gt; | As per HTTP, POST has two meanings ... &quot;submit data-block for\n&gt; | data-handling&quot; as well as &quot;resource {creation,annotation,extension}&quot;.\n&gt; | These represent very different designs; I still think it&#39;s critical to\n&gt; | distinguish the two.  But, yes, they&#39;re &quot;levels of HTTP&quot;, not &quot;levels of\n&gt; | REST&quot;.\n&gt; \n&gt; POST can&#39;t have two meanings per the spec., because the spec\n&gt; does not define a way to discriminate two meanings for POST.\n&gt; Or do I fail to get your meaning?\n\nEvery time I read RFC 2616 section 9.5, I come away with two meanings:\n\n* process data\n\n* &quot;subordinate [...] in the same way that a file is subordinate to \n  a directory containing it [...]&quot;.\n\nThe latter reading is reinforced when taken in combination with the\ndefinition of the semantics of the PUT and DELETE methods.\n\nBut, no, there&#39;s no way within the protocol to discriminate between them\n[and there doesn&#39;t really need to be since the server is in control of\nthe conversation, which is really important].\n\nPOST then must have &quot;process message&quot; semantic, which subsumes &quot;create\nsubordinate resource&quot;.  But there are clearly two different senses [in\nthe wordnet ... uh ... sense] at play in the wording of the spec.\n\n[And to be clear, my use of &quot;distinguish&quot; in the quoted text was more\nabout person/person communication, not client/server...]\n\n\n&gt; My understanding is that POST has *one* meaning, and potentially\n&gt; infinite consequences, depending on server whim.  Such is the\n&gt; nature of implicit invoation.\n\nFor some reason I like it better when it has a constrained meaning\nrather than an unconstrained one.  But it is the unconstrained meaning\nis what has enabled the web to grow, and I like that.  So now I&#39;m\nconfused. :)\n\n\nIn any case, I maintain that there are different levels of HTTP:\n\n0/ POST\n1/ POST+GET\n2/ POST+GET+PUT+DELETE(+HEAD,OPTIONS,TRACE,CONNECT)\n3/ HTTP + WebDAV [RFC 2518]\n...\n\n\nSo a question is: is (0) RESTful?\n\nIn the beginning there was POST.  I can see how GET would be factored\nout of POST, specifically for optimizations of safety and\ncache-control.  PUT and DELETE could be further factored out, but as\nexperience shows: not to great benefit.  The extensions specified in\nWebDAV are [perhaps] further factored out in order to gain particular\noperational efficiencies and capabilities...\n\nI&#39;m really just trying to understand better what &quot;uniform&quot; and\n&quot;hypermedia as the engine of application state&quot; means, especially as\nconstrasted with RPC.\n\nSection 5.1.5 of the dissertation claims that the Uniform Interface\nconstraint is the key differentiator of REST to other network-based\nstyles...  but when we allow the possibility that POST has multiple\nmeanings and a very loose semantic, it seems to chip away at that\nuniformity.\n\nAt what point does the interface become non-uniform?\n\nIs it strictly a function of what method-support-packages [?] are built\ninto the client?\n\nAnd is there something besides uniformity -- the notion that each method\nhas the same semantic between any pair of components -- that is\nimportant?  If we only had the uniform-though-weak POST operation, the\nweb wouldn&#39;t have the same character as it does now, but it would still\nbe uniform.  Is the GET/POST distinction critical?  [I&#39;m _certain_ it\nis, but why, exactly?  Is it operational &quot;safe&quot;ness?  Idempotency? \nBoth?]\n\nLet&#39;s say that the client receives from the server -- via a uniform and\ninterface like HTTP -- sufficient information which is unique to that\nparticular server, which allows the client to formulate a sequence of\nmethod-invocations which carry out some task.  In terms of RESTfulness,\ndoes it matter if the methods in the elements of that sequence are of a\nlimited set [the HTTP verbs, for instance]?  (potential answer: yes,\nbecause of the visibility/known-semantics of those operations.)\n\nAnd if not ... what about a client that gets such server-interaction\ninformation from a third-party registry rather than the server itself at\nrun-time? \n\nOr are all cases non-RESTful not because of the lack of uniform\ninterface, but because hypermedia has stopped becoming the engine of\napplication state...?\n\nIs the violation of REST that the client proactively performs more than\none action without the server&#39;s direction?\n\nWhat about a client which understands how to perform long sequences of\ninteraction with a server, but periodically utilizes the server&#39;s\nresponses as a rough guide to application state?\n\nDoes it matter if the server provides the client with code[-on-demand]\n-- a javascript &quot;ui-engine&quot; for instance -- that formulates and calls\nthe non-uniform methods [or, calls the existing &quot;uniform&quot; methods in\nnon-uniform ways]?\n\n\n[I&#39;ve re-edited this message for far too long, now, so I send it with\nthe disclaimer that I&#39;m well-aware the preceding paragraphs are\nless-than-coherent. If you&#39;ve even read this far, thanks.]\n\n...jsled\n\n-- \nhttp://asynchronous.org/ - `a=jsled; b=asynchronous.org; echo ${a}@${b}`\n\n"}}
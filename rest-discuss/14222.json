{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":69164307,"authorName":"mike amundsen","from":"mike amundsen &lt;mamund@...&gt;","profile":"mamund","replyTo":"SENDER","senderId":"2KMn8MC9fn93j3O-ykvdlNykKLTFyyVWzb5s-KFeUWIYTwjC-XzfGOijQjfy5-IEfLaH_WJjhhy4qmeIjBhg4JordBRmIX4","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] RESTful M2M Systems and Resource Typing","postDate":"1261160806","msgId":14222,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGI1NDhkZjY1MDkxMjE4MTAyNm8xYWEzYmNmMHliMWY4YjY3YjJlMmNlMzhAbWFpbC5nbWFpbC5jb20+","inReplyToHeader":"PDM0MjZDRjI2LTg1OEMtNDJEMi1CRTcwLUNFQ0U0RUMwMDQ0QkBtYWMuY29tPg==","referencesHeader":"PENCNEU1MkVDLTQ2RTktNDhFNC05QkY2LTVFNUVFMjg1NDM4OEBtYWMuY29tPgkgPDYzNDU1NUFELTg5RkItNDY4Ny1CQUQ1LUY4NUJDNDIzMTRBRkBtYWMuY29tPgkgPDRCMkEzQ0JFLjQwNTA0MDFAbXlrYW5qby5jby51az4JIDxDNzRBMEY1My03RDMxLTQ5NzYtODA1OC1DQkQwREYyNzg4NEFAbWFjLmNvbT4JIDw0QjJCNzZFNy4zMDIwMjAxQG15a2Fuam8uY28udWs+CSA8MTk2MkJDNUYtNkJFMi00QjRBLTk4RUYtMThEMzkzMDM1RjJFQG1hYy5jb20+CSA8MzQzZWNiM2UwOTEyMTgwNzEweDliMjk1ODlrOTE2OWFmZWMzMWJiMmYyMEBtYWlsLmdtYWlsLmNvbT4JIDw5RDk5RkQwMi0xNzA3LTQ5MjEtOTE1QS01REQwMzREREI0MTNAbWFjLmNvbT4JIDwzNDNlY2IzZTA5MTIxODA5MzNzNDEyYWU5ZGN5MjM0NGVjYjUxY2NlYzE3NUBtYWlsLmdtYWlsLmNvbT4JIDwzNDI2Q0YyNi04NThDLTQyRDItQkU3MC1DRUNFNEVDMDA0NEJAbWFjLmNvbT4="},"prevInTopic":14221,"nextInTopic":14223,"prevInTime":14221,"nextInTime":14223,"topicId":14156,"numMessagesInTopic":134,"msgSnippet":" How do you code the client s last line without being sure about the media type being returned?  This is not the question you should be asking.","rawEmail":"Return-Path: &lt;mca@...&gt;\r\nX-Sender: mca@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 49759 invoked from network); 18 Dec 2009 18:26:48 -0000\r\nX-Received: from unknown (66.196.94.105)\n  by m3.grp.sp2.yahoo.com with QMQP; 18 Dec 2009 18:26:48 -0000\r\nX-Received: from unknown (HELO mail-fx0-f225.google.com) (209.85.220.225)\n  by mta1.grp.re1.yahoo.com with SMTP; 18 Dec 2009 18:26:47 -0000\r\nX-Received: by fxm25 with SMTP id 25so2464354fxm.6\n        for &lt;rest-discuss@yahoogroups.com&gt;; Fri, 18 Dec 2009 10:26:47 -0800 (PST)\r\nMIME-Version: 1.0\r\nX-Received: by 10.223.4.84 with SMTP id 20mr5232896faq.97.1261160806489; Fri, 18 \n\tDec 2009 10:26:46 -0800 (PST)\r\nIn-Reply-To: &lt;3426CF26-858C-42D2-BE70-CECE4EC0044B@...&gt;\r\nReferences: &lt;CB4E52EC-46E9-48E4-9BF6-5E5EE2854388@...&gt;\n\t &lt;634555AD-89FB-4687-BAD5-F85BC42314AF@...&gt;\n\t &lt;4B2A3CBE.4050401@...&gt;\n\t &lt;C74A0F53-7D31-4976-8058-CBD0DF27884A@...&gt;\n\t &lt;4B2B76E7.3020201@...&gt;\n\t &lt;1962BC5F-6BE2-4B4A-98EF-18D393035F2E@...&gt;\n\t &lt;343ecb3e0912180710x9b29589k9169afec31bb2f20@...&gt;\n\t &lt;9D99FD02-1707-4921-915A-5DD034DDB413@...&gt;\n\t &lt;343ecb3e0912180933s412ae9dcy2344ecb51ccec175@...&gt;\n\t &lt;3426CF26-858C-42D2-BE70-CECE4EC0044B@...&gt;\r\nDate: Fri, 18 Dec 2009 13:26:46 -0500\r\nX-Google-Sender-Auth: 3d4b4d00447b9283\r\nMessage-ID: &lt;b548df650912181026o1aa3bcf0yb1f8b67b2e2ce38@...&gt;\r\nTo: Jan Algermissen &lt;algermissen1971@...&gt;\r\nCc: Bob Haugen &lt;bob.haugen@...&gt;, REST Discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Type: text/plain; charset=windows-1252\r\nContent-Transfer-Encoding: quoted-printable\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: mike amundsen &lt;mamund@...&gt;\r\nSubject: Re: [rest-discuss] RESTful M2M Systems and Resource Typing\r\nX-Yahoo-Group-Post: member; u=69164307; y=QcZVzXEL8V0DTSq3znjiwZ16Ci80IfYz6AQ7gpqv3-lO\r\nX-Yahoo-Profile: mamund\r\n\r\n&lt;snip&gt;\nHow do you code the client&#39;s last line without being sure about the\n=\r\nmedia type being returned?\n&lt;/snip&gt;\nThis is not the question you should be a=\r\nsking. Instead, you should ask:\n1 - what tells the client how to complete t=\r\nhe XXX state transition\n2 - what informs the client that the XXX state tran=\r\nsition exists in\nany given response\n\nIn both cases, the answer is in out-of=\r\n-band documentation. It may be\ntrue that the out-of-band documentation, alo=\r\nng with explaining the two\nitems above _also_ defines a string to include i=\r\nn the accept header\nthat we call a &quot;custom media-type,&quot; but there is no req=\r\nuirement for\nthat.\n\nI&#39;ve built a few goal-seeking clients that look for rel=\r\n attributes on\ndocument elements in order to complete their work. bots do t=\r\nhis all\nthe time w/o making any requirements on the media-type returned.\n\nm=\r\nca\nhttp://amundsen.com/blog/\n\n\n\n\nOn Fri, Dec 18, 2009 at 13:10, Jan Algermi=\r\nssen &lt;algermissen1971@...&gt; wrote:\n&gt;\n&gt; On Dec 18, 2009, at 6:33 PM, Bob =\r\nHaugen wrote:\n&gt;\n&gt;&gt; On Fri, Dec 18, 2009 at 10:03 AM, Jan Algermissen\n&gt;&gt; &lt;al=\r\ngermissen1971@...&gt; wrote:\n&gt;&gt;&gt;\n&gt;&gt;&gt; On Dec 18, 2009, at 4:10 PM, Bob Haug=\r\nen wrote:\n&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; On Fri, Dec 18, 2009 at 6:58 AM, Jan Algermissen\n&gt;&gt;&gt;&gt; &lt;a=\r\nlgermissen1971@...&gt; wrote:\n&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt; My point is that REST forbids th=\r\nat clients make any assumptions\n&gt;&gt;&gt;&gt;&gt; based\n&gt;&gt;&gt;&gt;&gt; on such &#39;classification&#39;.=\r\n\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; Not trying to argue, just to understand:\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; Where/how doe=\r\ns REST forbid such assumptions? =A0(I just re-scanned\n&gt;&gt;&gt;&gt; Roy&#39;s\n&gt;&gt;&gt;&gt; disse=\r\nrtation, and might have missed something, but did not see\n&gt;&gt;&gt;&gt; anything qui=\r\nte that hard and fast.) And what is the functional\n&gt;&gt;&gt;&gt; difference between =\r\nprior assumptions and reacting to or requesting\n&gt;&gt;&gt;&gt; media type?\n&gt;&gt;&gt;\n&gt;&gt;&gt; I =\r\nthink the last post is also answering this. Yes?\n&gt;&gt;\n&gt;&gt; Not quite.\n&gt;&gt;\n&gt;&gt; Fro=\r\nm Roy&#39;s blog entry that you quoted:\n&gt;&gt; &quot;The only types that are significant=\r\n to a client are the current\n&gt;&gt; representation=92s media type and standardi=\r\nzed relation names.&quot;\n&gt;&gt;\n&gt;&gt; Standardized relation names (as I think you have=\r\n argued in this\n&gt;&gt; discussion, and I agree) are roughly equivalent to types=\r\n in roughly\n&gt;&gt; the sense of typed function parameters. =A0(Handwave handwav=\r\ne handwave\n&gt;&gt; magic happens here...)\n&gt;&gt;\n&gt;&gt;&gt; If you design for a problem spa=\r\nce that\n&gt;&gt;&gt; involves more specific hypermedia semantics you end up with a\n&gt;=\r\n&gt;&gt; coupling that\n&gt;&gt;&gt; is surprisingly similar to non uniform interfaces, bec=\r\nause so many\n&gt;&gt;&gt; things\n&gt;&gt;&gt; are being said about resources at design time. =\r\nYou end up asking\n&gt;&gt;&gt; yourself:\n&gt;&gt;&gt; &quot;Damn, what exactly is it that I actual=\r\nly *can* change about a\n&gt;&gt;&gt; service\n&gt;&gt;&gt; implementation without messing up t=\r\nhe clients?&quot; Sure, I can add a new\n&gt;&gt;&gt; extension here and add a new support=\r\ned media type there - but\n&gt;&gt;&gt; significantly\n&gt;&gt;&gt; changing the state machine,=\r\n for example? Not sure.\n&gt;&gt;\n&gt;&gt; Can you make that all clear with media types =\r\nand relation names?\n&gt;\n&gt; An ordering example:\n&gt;\n&gt; Suppose you are to design =\r\nan ordering service. You might do the\n&gt; following:\n&gt; (A rather silly approa=\r\nch, but suitable for this example)\n&gt;\n&gt; Define a service document media type=\r\n application/ordering-srv+xml that\n&gt; includes a &lt;order-processor href=3D&quot;&quot;/=\r\n&gt; element to tell the client where\n&gt; the resource is that accepts orders. E=\r\nxample:\n&gt;\n&gt; &lt;service&gt;\n&gt; =A0 &lt;order-processor href=3D&quot;/service/1234&quot;/&gt;\n&gt; &lt;/s=\r\nervice&gt;\n&gt;\n&gt; Next, specify that clients place orders by POSTing to the order=\r\n-\n&gt; processor resource and that the response will be 201 with location to\n&gt;=\r\n new resource that represents the order. (This specifies the client\n&gt; goal =\r\nof place-order (AtomPub calls the client goals &#39;protocol\n&gt; operations&#39;, BTW=\r\n).\n&gt;\n&gt; Specify some application/order+xml for representing orders and inclu=\r\nde\n&gt; an element &lt;lineItems href=3D&quot;&quot;&gt; to holde the line items of the order.=\r\n\n&gt; An order would look like this:\n&gt;\n&gt; &lt;order&gt;\n&gt; =A0 &lt;buyuer&gt;...&lt;/buyer&gt;\n&gt; =\r\n=A0 &lt;lineItems href=3D&quot;/orders/6/lineItems&quot;&gt;\n&gt; =A0 =A0 &lt;items&gt;Green Doll&lt;/i=\r\ntem&gt;\n&gt; =A0 &lt;/lineItems&gt;\n&gt; &lt;/order&gt;\n&gt;\n&gt; Specify another hypermedia semantic:=\r\n The list of lineItems of the\n&gt; order is identified by the href of the line=\r\nItem element.\n&gt;\n&gt; Specify another goal &#39;add-lineitem-to-order&#39; as: POST to =\r\nthe lineItems\n&gt; resource (s.a.) of the order to add a line item. (Service s=\r\nhould\n&gt; respond with a 303 See Other and the order URI to indicate successf=\r\nul\n&gt; update of the order.\n&gt;\n&gt; (Gee - not brilliant but I hope you get the p=\r\noint :-)\n&gt;\n&gt; Now, you can write a client that places an order and adds a li=\r\nne item\n&gt; and consists of the following pseudo code:\n&gt;\n&gt; - bootstrap with a=\r\n GET to the published service URI, receiving the\n&gt; service document.\n&gt; - cl=\r\nient now knows URI of order processor\n&gt; - client POSTs order to order proce=\r\nssor\n&gt; - client keeps as orderUri the Location URI of the 201 response\n&gt; - =\r\nclient does a GET on orderUri\n&gt; - client uses response to find lineItems re=\r\nsource and POSTs new line\n&gt; item.\n&gt;\n&gt; The issue is this: How do you code th=\r\ne client&#39;s last line without\n&gt; being sure about the media type being return=\r\ned? There is nothing that\n&gt; tells you that the order will be given to the c=\r\nlient as application/\n&gt; order+xml. A human driven client would not care but=\r\n just process the\n&gt; response and show whetever state transitions are availa=\r\nble to the\n&gt; human user (one of them possibly being &#39;post here to add line =\r\nitem&#39;).\n&gt; If the response was not application/order+xml the &#39;add line item&#39;=\r\n goal\n&gt; would not be shown.\n&gt;\n&gt; The machine client OTH has the hard coded g=\r\noal of really adding the\n&gt; line item and to code that you must know that th=\r\nere is a reason to\n&gt; expect the GET on the order to return application/orde=\r\nr+xml. The only\n&gt; way to know that is by baking it into the service specifi=\r\ncation:\n&gt; Resources that are orders (oops, a &#39;type&#39;!) are represented as\n&gt; =\r\napplication/order+xml (maybe others too, but that one at least)\n&gt;\n&gt; The eff=\r\nect of this is that the client developer knows at design time\n&gt; that from t=\r\nhe application state &#39;an order X&#39; there will be a\n&gt; transition &#39;add line it=\r\nem to X&#39; available. This is contrary to the\n&gt; idea of the client *discoveri=\r\nng* the transition at run time.\n&gt;\n&gt; Sure, one could code &quot;if have add-lineI=\r\ntem transition then add line\n&gt; item else do nothing&quot;, but this just turns a=\r\n failing client assumption\n&gt; into the execution of an else-branch. The issu=\r\ne does not go away: if\n&gt; you want to code a client that orders and then add=\r\ns the line item you\n&gt; rely on the assumption that after placing an order th=\r\nere will be the\n&gt; transition to add the line item. This coupldes the server=\r\n to the\n&gt; client quite heavily.\n&gt;\n&gt; Pew - sorry for the mess, I hope you ge=\r\nt the point.\n&gt;\n&gt; Jan\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n=\r\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;&gt;\n&gt;&gt;\n&gt;&gt; ------------------------------------\n&gt;&gt;\n&gt;&gt; Yahoo! Grou=\r\nps Links\n&gt;&gt;\n&gt;&gt;\n&gt;&gt;\n&gt;\n&gt; --------------------------------------\n&gt; Jan Algermis=\r\nsen\n&gt;\n&gt; Mail: algermissen@...\n&gt; Blog: http://algermissen.blogspot.com/\n=\r\n&gt; Home: http://www.jalgermissen.com\n&gt; -------------------------------------=\r\n-\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt; ------------------------------------\n&gt;\n&gt; Yahoo! Groups Links\n=\r\n&gt;\n&gt;\n&gt;\n&gt;\n\n"}}
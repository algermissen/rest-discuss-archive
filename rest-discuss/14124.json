{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":164939419,"authorName":"Jon Hanna","from":"Jon Hanna &lt;jon@...&gt;","profile":"hack_poet","replyTo":"SENDER","senderId":"l00wxZfpcFUxNnRbvhxhn6Ar4xeF1lmG1tbUK8Qy0gHs3MDlWj0PBmDLCsXKLCsjNQSBBXcnDIp6OqoD3W0g5vUUxIQ","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] The &quot;purist&quot; C# REST client?","postDate":"1260543332","msgId":14124,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDRCMjI1RDY0LjYwOTAwMDVAaGFja2NyYWZ0Lm5ldD4=","inReplyToHeader":"PDE2NEQwMjQ2MDRGMDRDNkVCQjlDOEI5MUFGNkMwN0M0QEpyblBDPg==","referencesHeader":"PEI1QUM5MEYyODQ5MzQ5OEI5MEU2MjAzRERFMkE0RTY1QEpyblBDPiA8MzkxNWM2OWQwOTEyMDkxNTQ4aTU3ZDgxNmJkazNjZDEzMDE4NjNjNWUzYjdAbWFpbC5nbWFpbC5jb20+IDwxNjREMDI0NjA0RjA0QzZFQkI5QzhCOTFBRjZDMDdDNEBKcm5QQz4="},"prevInTopic":14118,"nextInTopic":14125,"prevInTime":14123,"nextInTime":14125,"topicId":14110,"numMessagesInTopic":12,"msgSnippet":"... I made a stab at wrapping the WebRequest object with a CachedWebRequest object that applied such functionality and then presented the same interface known","rawEmail":"Return-Path: &lt;jon@...&gt;\r\nX-Sender: jon@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 57037 invoked from network); 11 Dec 2009 14:55:50 -0000\r\nX-Received: from unknown (66.196.94.106)\n  by m14.grp.re1.yahoo.com with QMQP; 11 Dec 2009 14:55:50 -0000\r\nX-Received: from unknown (HELO mail.smorgasblog.ie) (78.137.159.78)\n  by mta2.grp.re1.yahoo.com with SMTP; 11 Dec 2009 14:55:49 -0000\r\nX-Received: from [192.168.100.11] ([86.47.160.33])\n\tby mail.smorgasblog.ie\n\t; Fri, 11 Dec 2009 14:53:34 +0000\r\nMessage-ID: &lt;4B225D64.6090005@...&gt;\r\nDate: Fri, 11 Dec 2009 14:55:32 +0000\r\nUser-Agent: Thunderbird 2.0.0.23 (Windows/20090812)\r\nMIME-Version: 1.0\r\nTo: rest-discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nReferences: &lt;B5AC90F28493498B90E6203DDE2A4E65@JrnPC&gt; &lt;3915c69d0912091548i57d816bdk3cd1301863c5e3b7@...&gt; &lt;164D024604F04C6EBB9C8B91AF6C07C4@JrnPC&gt;\r\nIn-Reply-To: &lt;164D024604F04C6EBB9C8B91AF6C07C4@JrnPC&gt;\r\nContent-Type: text/plain; charset=UTF-8; format=flowed\r\nContent-Transfer-Encoding: 8bit\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Jon Hanna &lt;jon@...&gt;\r\nSubject: Re: [rest-discuss] The &quot;purist&quot; C# REST client?\r\nX-Yahoo-Group-Post: member; u=164939419; y=pEos0gz3tJo5YV0OyiPstq0-sVEjA8g10-oeCCdG4oj_b8k5\r\nX-Yahoo-Profile: hack_poet\r\n\r\nJÃ¸rn Wildt wrote:\n&gt;&gt; The common headers should be First Class. I shouldn&#39;t have to set an\n&gt;&gt; &quot;If-Modified&quot; myself, I should be able to link.setIfModifiedSince(myDate),\n&gt;&gt; so I don&#39;t have to marshal the dates myself.\n&gt; \n&gt; It is my hope that such thing could be handled by a transparent caching \n&gt; layer. The cache will know what was returned last time, and insert that \n&gt; automatically in the headers. I do although not know if this is \n&gt; possible/practical.\n\nI made a stab at wrapping the WebRequest object with a CachedWebRequest \nobject that applied such functionality and then presented the same \ninterface known to all C# coders. I never took it very far, but was \nhappy enough that it could certainly be done (all I wanted to know at \nthe time).\n\nAllowing your framework to have it&#39;s means of obtaining a WebRequest \noverridden, may be all you need to allow for such cache handling as a \nseparate component.\n\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":289191104,"authorName":"Jan Algermissen","from":"Jan Algermissen &lt;algermissen1971@...&gt;","profile":"algermissen1971","replyTo":"SENDER","senderId":"Dg8pReuA6HRGirdaE98JPIXo8sB3QKuDL1BaklTJjgcZP_KKDBnMAvH1ODAypqSefHTuOb0ckE6dy7O85FE8VWAGeI7Bz083R9tVoLorg-8","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] RESTful M2M Systems and Resource Typing","postDate":"1261055024","msgId":14192,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEYzRTM2RTlBLTk4NUMtNDVEOS1CNTNCLTFEODgwQUEzM0U1M0BtYWMuY29tPg==","inReplyToHeader":"PDM5MTVjNjlkMDkxMjE2MTgxMnU2MDlmZmEyOWczMWYzYmFjYzg4YjY0YjNmQG1haWwuZ21haWwuY29tPg==","referencesHeader":"PENCNEU1MkVDLTQ2RTktNDhFNC05QkY2LTVFNUVFMjg1NDM4OEBtYWMuY29tPiA8YjU0OGRmNjUwOTEyMTYwNzU4cTQ2NDMwODA4djg4OTgzNjk0MjhmNWQ5MTVAbWFpbC5nbWFpbC5jb20+IDwzNDJGMDRBNC1BQjc2LTRGOUMtODI4NS01NkFBQTAxNkNCNDBAbWFjLmNvbT4gPGI1NDhkZjY1MDkxMjE2MDkxMWoxYWEwN2Q2ZHFhOGQxMjU5ZmE3Mjc0ODcwQG1haWwuZ21haWwuY29tPiA8MzkxNWM2OWQwOTEyMTYxMDM5cDc1ZGQzNzFka2ZjZDJiZWI4MGNjYThlOThAbWFpbC5nbWFpbC5jb20+IDw5MTZBRDUyMS01RkYxLTRFOTItQTFCRC01QzUyQkRBOUQyMzFAbWFjLmNvbT4gPGRlNzBiMzlkMDkxMjE2MTQ0OHQ0NmMxODJhY2piMTU3MjI3NjU2NDg2OWM2QG1haWwuZ21haWwuY29tPiA8NzU4NEY3N0MtRUU2Ni00N0FBLUJFRkUtRkZGQjNCNDA4RDI5QG1hYy5jb20+IDwzOTE1YzY5ZDA5MTIxNjE2MjhwNjc5YjFiZmJtOTU1Nzc3YzM0ZGNlNTc3ZUBtYWlsLmdtYWlsLmNvbT4gPEYyOEE5N0JBLTlGMjYtNDkzNC05QTZELUQ3QTY2RTg1QjkyREBtYWMuY29tPiA8MzkxNWM2OWQwOTEyMTYxODEydTYwOWZmYTI5ZzMxZjNiYWNjODhiNjRiM2ZAbWFpbC5nbWFpbC5jb20+"},"prevInTopic":14191,"nextInTopic":14193,"prevInTime":14191,"nextInTime":14193,"topicId":14156,"numMessagesInTopic":134,"msgSnippet":"Will, ... But what enables you to say the former is kind and the latter is mean? You say this based on AtomPub saying that collections are represented as Atom","rawEmail":"Return-Path: &lt;algermissen1971@...&gt;\r\nX-Sender: algermissen1971@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 46401 invoked from network); 17 Dec 2009 13:03:50 -0000\r\nX-Received: from unknown (66.196.94.105)\n  by m13.grp.re1.yahoo.com with QMQP; 17 Dec 2009 13:03:50 -0000\r\nX-Received: from unknown (HELO asmtpout012.mac.com) (17.148.16.87)\n  by mta1.grp.re1.yahoo.com with SMTP; 17 Dec 2009 13:03:49 -0000\r\nMIME-version: 1.0\r\nContent-transfer-encoding: 7BIT\r\nContent-type: text/plain; charset=US-ASCII; format=flowed; delsp=yes\r\nX-Received: from [192.168.2.102] ([84.144.119.169])\n by asmtp012.mac.com (Sun Java(tm) System Messaging Server 6.3-8.01 (built Dec\n 16 2008; 32bit)) with ESMTPSA id &lt;0KUS001LDSA8RG90@...&gt; for\n rest-discuss@yahoogroups.com; Thu, 17 Dec 2009 05:03:49 -0800 (PST)\r\nCc: Noah Campbell &lt;noahcampbell@...&gt;, mike amundsen &lt;mamund@...&gt;,\n REST Discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nMessage-id: &lt;F3E36E9A-985C-45D9-B53B-1D880AA33E53@...&gt;\r\nTo: Will Hartung &lt;willh@...&gt;\r\nIn-reply-to: &lt;3915c69d0912161812u609ffa29g31f3bacc88b64b3f@...&gt;\r\nDate: Thu, 17 Dec 2009 14:03:44 +0100\r\nReferences: &lt;CB4E52EC-46E9-48E4-9BF6-5E5EE2854388@...&gt;\n &lt;b548df650912160758q46430808v8898369428f5d915@...&gt;\n &lt;342F04A4-AB76-4F9C-8285-56AAA016CB40@...&gt;\n &lt;b548df650912160911j1aa07d6dqa8d1259fa7274870@...&gt;\n &lt;3915c69d0912161039p75dd371dkfcd2beb80cca8e98@...&gt;\n &lt;916AD521-5FF1-4E92-A1BD-5C52BDA9D231@...&gt;\n &lt;de70b39d0912161448t46c182acjb1572276564869c6@...&gt;\n &lt;7584F77C-EE66-47AA-BEFE-FFFB3B408D29@...&gt;\n &lt;3915c69d0912161628p679b1bfbm955777c34dce577e@...&gt;\n &lt;F28A97BA-9F26-4934-9A6D-D7A66E85B92D@...&gt;\n &lt;3915c69d0912161812u609ffa29g31f3bacc88b64b3f@...&gt;\r\nX-Mailer: Apple Mail (2.936)\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Jan Algermissen &lt;algermissen1971@...&gt;\r\nSubject: Re: [rest-discuss] RESTful M2M Systems and Resource Typing\r\nX-Yahoo-Group-Post: member; u=289191104; y=Y3cvjG1flhpy2ut6U-rUNiuYGbSf0nhMYR77iYuFGjBshViJ-6svPpQu\r\nX-Yahoo-Profile: algermissen1971\r\n\r\nWill,\n\nOn Dec 17, 2009, at 3:12 AM, Will Hartung wrote:\n\n&gt;&gt;\n&gt;\n&gt; No, the server CAN evolve. It can say &quot;atom feeds are the suck, don&#39;t\n&gt; use them, now we have Neutrino feeds!&quot;.\n&gt;\n&gt; If it&#39;s a kind server it will retain Atom compatibility if the client\n&gt; requests it. If you have atom+xml in your Accept, you get Atom. If you\n&gt; have */* or something else, you might get neutrino+xml instead.\n&gt;\n&gt; If it&#39;s a mean, nasty server, then it shuts you out cold with a 406\n&gt; and a list of &quot;support these or there&#39;s the door&quot; media types.\n&gt;\n\nBut what enables you to say the former is kind and the latter is mean?  \nYou say this based on AtomPub saying that collections are represented  \nas Atom feed documents. Otherwise, there would simply be no  \nexpectation of receiving Atom feeds as a response to a GET to the  \ncollection.\n\nHow could you express that expectation in a spec without first saying  \nthat there are resources that are collections?\n\nThe spec itself needs a resource classification to build upon.\n\nSo, AtomPub says that some resources are collections, how a client  \ndetermines what resources are collections and that clients can  \nretrieve collections as Atom feeds.\n\nMachine clients use this classification information to code something  \nlike this:\n\n- retrieve service doc\n- pick a collection (e.g. based on category information)\n- GET collection and expect at least application/atom+xml feed doc\n   (this line of code manifests the client assumption described above)\n\n\nWith human driven clients the situation is different: you write the  \nuser agent to process the service doc and display the list of  \ncollections. Then, when the user clicks on one the user agent does a  \nGET and the returned representation is dispatched to the media type  \nhandler available for *whatever* is returned. There need not be any  \nassumption about the response being a feed because the user agent  \nsimply hands it to the next level which is the human user, deciding  \nonly then the next action to take.\n\nM2M clients need to decide what action to take at implementation time.  \nEven if there are a number of expectations and the matching one is  \npicked at run time, you still need to make the decision which  \nexpectations to support at implementation time.\n\nJan\n\n\n\n&gt; Part of the process is empowering things like Con neg so that the\n&gt; servers and clients can agree on content. Yea, the client can not\n&gt; &quot;evolve&quot; to supporting the new content until it&#39;s been coded. But that\n&gt; doesn&#39;t mean that servers can not be good citizens and be backward,\n&gt; even if deprecated, compatible.\n&gt;\n&gt; It puts a burden on server developers, but that&#39;s just the truth of\n&gt; it. At least con neg is an OPTION that CAN be supported.\n&gt;\n&gt; And why can&#39;t the client discern resources? if the client sees the\n&gt; Atom feed, it goes one way. If it sees the Neutrino feed, another way.\n&gt; Properly developed, the client can jump back and forth across both\n&gt; types. Heck, say you had load balanced servers, and one supported atom\n&gt; and the other neutrino -- you hadn&#39;t updated the second on yet. The\n&gt; client can transparently jump back and forth between the formats as it\n&gt; bounces across the servers, because the client IS leveraging the media\n&gt; types, and because the server is providing the links to move forward,\n&gt; rather than the client trying to shove Atom links down the throat of a\n&gt; Neutrino server.\n&gt;\n&gt; So, in that sense, I think evolution can be handled pretty elegantly.\n&gt;\n&gt;&gt; In the human Web the same problem exists but the capabilities of  \n&gt;&gt; the human\n&gt;&gt; brain to react to change (and follow previously unexpected links)  \n&gt;&gt; does put\n&gt;&gt; the server in the position to evolve much more independently. I am  \n&gt;&gt; sure that\n&gt;&gt; Amazon could mess around with the whole shop and the way ordering  \n&gt;&gt; works and\n&gt;&gt; the user would still be able to buy a book. This is the huge  \n&gt;&gt; benefit of REST\n&gt;&gt; - it just does not apply that easily to the M2M case.\n&gt;\n&gt; But think about that.\n&gt;\n&gt; That &quot;mess around&quot;, from the users pov, be cosmetic. They rearranged\n&gt; the screen, the &quot;add to cart&quot; button in on the left now, and &quot;checkout\n&gt; button&quot; below it, or whatever.\n&gt;\n&gt; The links those buttons go to are immaterial. Nobody cares.\n&gt;\n&gt; Now the content sent to those links, those matter. If amazon renamed\n&gt; &quot;itemNo&quot; to &quot;productUUID&quot; then, you know, shame on them. Your M2M\n&gt; client is toast. But the semantics conveyed by the link rels\n&gt; &quot;add-to-cart&quot;, &quot;checkout&quot;, those haven&#39;t changed (unless they renamed\n&gt; those as well -- more sillyness). They could add &quot;add-to-wish-list&quot;,\n&gt; and your client may not know what that is, but it probably doesn&#39;t are\n&gt; either.\n&gt;\n&gt;&gt; And I think this needs to be said clearly and honestly and it needs  \n&gt;&gt; to be\n&gt;&gt; theoretically captured.\n&gt;\n&gt; In an M2M scenario, ALL APIs are &quot;tightly coupled&quot;. That&#39;s just the\n&gt; fact of it. APIs are contacts. Change the contract, bad things happen.\n&gt; Design APIs with growth and flexibility in mind, and you can have a\n&gt; more forgiving client/server experience.\n&gt;\n&gt; By using media types and HATEOAS, the clients retain a bit of\n&gt; discoverability. It&#39;s not so much discoverability, as it is state\n&gt; awareness. It can &quot;know&quot; where it is at any point of the process, and\n&gt; it &quot;knows&quot; where to go from there. If it follows the links given with\n&gt; the types specified, the client will be told where to go next.\n&gt;\n&gt; This is key. The client isn&#39;t &quot;waiting to do the next thing&quot;. It&#39;s not\n&gt; got a &quot;list of things to do&quot;, and going through them one by one.\n&gt; Rather it has a list of guideposts that it&#39;s told to follow, and the\n&gt; actual PATH it takes isn&#39;t known to the client until it reaches a goal\n&gt; post.\n&gt;\n&gt; Now you can code all of that in to the client, it &quot;knows&quot; where to go,\n&gt; it build URLs, and when things change, the client breaks. Because the\n&gt; client is a stupid client and while it functioned, it did it all the\n&gt; wrong way.\n&gt;\n&gt; So, that&#39;s, to me, where some of the robustness of the whole thing\n&gt; comes from, even in a M2M world.\n&gt;\n&gt; Regards,\n&gt;\n&gt; Will Hartung\n&gt; (willh@...)\n&gt;\n&gt;\n&gt; ------------------------------------\n&gt;\n&gt; Yahoo! Groups Links\n&gt;\n&gt;\n&gt;\n\n--------------------------------------\nJan Algermissen\n\nMail: algermissen@...\nBlog: http://algermissen.blogspot.com/\nHome: http://www.jalgermissen.com\n--------------------------------------\n\n\n\n\n"}}
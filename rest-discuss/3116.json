{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":112610298,"authorName":"Roger L. Costello","from":"&quot;Roger L. Costello&quot; &lt;costello@...&gt;","replyTo":"SENDER","senderId":"U8IfdUD7JKWJdVJS0-XW8q4H073qF3-DU7_XheJqM52DutNxoNdscJ_AWvzS-LL6JTN74p76IBrV6chXgKTTETnnTIxGlYe5l1dDO4h9uw","spamInfo":{"isSpam":false,"reason":"0"},"subject":"A Simple Extension of the Current Web Architecture to Support the Next  Generation Web Services","postDate":"1040917933","msgId":3116,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDNFMEIyNUFELkJEM0JBRkJAbWl0cmUub3JnPg=="},"prevInTopic":0,"nextInTopic":3117,"prevInTime":3115,"nextInTime":3117,"topicId":3116,"numMessagesInTopic":3,"msgSnippet":"Hi Folks, Below I describe a simple technique for evolving the current HTML-based Web service architecture to support the next generation Web services. The","rawEmail":"Return-Path: &lt;costello@...&gt;\r\nX-Sender: costello@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_2_3_0); 26 Dec 2002 15:52:19 -0000\r\nReceived: (qmail 81320 invoked from network); 26 Dec 2002 15:52:19 -0000\r\nReceived: from unknown (66.218.66.216)\n  by m8.grp.scd.yahoo.com with QMQP; 26 Dec 2002 15:52:19 -0000\r\nReceived: from unknown (HELO smtpproxy2.mitre.org) (192.80.55.70)\n  by mta1.grp.scd.yahoo.com with SMTP; 26 Dec 2002 15:52:19 -0000\r\nReceived: from avsrv1.mitre.org (avsrv1.mitre.org [129.83.20.58])\n\tby smtpproxy2.mitre.org (8.11.3/8.11.3) with ESMTP id gBQFqIV21810\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Thu, 26 Dec 2002 10:52:18 -0500 (EST)\r\nReceived: from MAILHUB1 (mailhub1.mitre.org [129.83.20.31])\n\tby smtpsrv1.mitre.org (8.11.3/8.11.3) with ESMTP id gBQFqGi05148\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Thu, 26 Dec 2002 10:52:17 -0500 (EST)\r\nReceived: from rogers-pc.mitre.org (129.83.57.41) by mailhub1.mitre.org with SMTP\n        id 575351; Thu, 26 Dec 2002 10:52:13 -0500\r\nMessage-ID: &lt;3E0B25AD.BD3BAFB@...&gt;\r\nDate: Thu, 26 Dec 2002 10:52:13 -0500\r\nOrganization: The MITRE Corporation\r\nX-Mailer: Mozilla 4.75 [en]C-20000818M  (Windows NT 5.0; U)\r\nX-Accept-Language: en\r\nMIME-Version: 1.0\r\nTo: rest-discuss@yahoogroups.com\r\nCc: &quot;Costello,Roger L.&quot; &lt;costello@...&gt;,\n   &quot;Jacobs,David B.&quot; &lt;djacobs@...&gt;\r\nSubject: A Simple Extension of the Current Web Architecture to Support the Next \n Generation Web Services\r\nContent-Type: text/plain; charset=us-ascii\r\nContent-Transfer-Encoding: 7bit\r\nFrom: &quot;Roger L. Costello&quot; &lt;costello@...&gt;\r\nX-Yahoo-Group-Post: member; u=112610298\r\n\r\nHi Folks,\n\nBelow I describe a simple technique for evolving the current HTML-based\nWeb service architecture to support the next generation Web services. \nThe approach is RESTful.  That is, it capitalizes on the current Web\narchitecture. I would be very interested in your thoughts.\n\nConsider what is involved in setting up a Web site today.  I will take\nmy Web site as an example.  Creating my Web site was really\nstraightforward - I created an HTML page that contained the content, and\nin the header section of the HTML I added a &lt;meta&gt; tag to provide\nsubject and category metadata.  In a short period of time many different\nsearch engines had indexed and categorized my Web site.  Further, over\ntime other Web sites have linked to my Web site.\n\nMy Web site is a Web service, in its simplest form.  It is an HTML-based\nWeb service.  It provides an information service to Web clients.  My\nservice has metadata.  \n\nToday&#39;s Web service architectural model has three key ingredients -\ncontent, metadata, and search engines (matchmakers).  This architectural\nmodel has many wonderful properties:\n\n1. It is massively scalable.\n2. It is a completely distributed architecture.\n3. It is a lightweight architecture - just build a Web service and\nyou&#39;re done.\n4. Standard Web components are used - URIs to identify a Web service,\nthe HTTP verbs (GET, PUT, POST, DELETE) to access and manipulate the\nservice.\n5. Tremendous interconnectedness - others link to my Web service and I\ncan link to other Web services.  Recall Metcalf&#39;s Law which states that\nthe value of a networked system is related exponentially to the amount\nof interconnections.\n6. A wonderful side-effect of the architecture is a whole search engine\ncottage industry has been created.  This is because the Web services are\ndecoupled from the search engines. \n\nSince the current Web architecture has been so successful, it seems\nreasonable to use that architecture at least as the starting point for\nthe next generation of Web services.  Here&#39;s how the next generation Web\nservices would operate if we simply apply the current approach:  \n\n    A client invoking a next generation Web service will receive \n    SOAP or XML or XML-RPC content, with metadata bundled into the \n    response (analogous to today where the client receives \n    HTML content with metadata bundled in).\n\nHowever, there is a problem with simply applying the current approach to\nthe next generation of Web services: \n\n    The next generation Web services will be a lot more complicated,\n    so the metadata will need to be a lot more involved, i.e.,\n    bigger.  You don&#39;t want clients to be forced to receive an \n    extensive description of everything the service does and all the \n    instructions on how to use the service every time they use a \n    Web service.  The first time they use it they will want to \n    view the service description metadata but from then on they \n    will not.\n\nSo we probably want to keep the metadata and the service representation\nseparate.  This has the additional benefit of flexibility with regards\nto the format of the metadata - it could be expressed as RDF or DAML or\nOWL or even XHTML.\n\nHowever, keeping the metadata separate from the service representation\nthen introduces a problem: \n\n    - if a client has the URL to a service, how does the client\n      locate the metadata for the service?\n    - alternatively, if the client has the URL to the metadata,\n      how does the client locate the service?\n\nThis is solved very simply by introducing two new HTTP headers:\n\n    - The Meta-Location HTTP header provides the URL to the metadata\n    - The Meta-About HTTP header provides the URL to the service.\n\nThat&#39;s it!  With these simple changes we can extend the current\n(HTML-based) Web services architecture to meet the challenges of the\nnext generation Web services.  Let&#39;s review what changes are made to the\ncurrent Web services architecture:\n\n1. Separate the metadata from the service representation \n2. A URL to a Web service results in returning a representation of the\nservice.  The HTTP header contains Meta-Location, which provides the URL\nto the service&#39;s metadata.\n3. A URL to the metadata results in returning a representation of the\nmetadata.  The HTTP header contains Meta-About, which provides the URL\nto the service.\n\nThis approach retains all of the wonderful properties of the current\n(HTML-based) Web services architecture:\n\n1. It is massively scalable.\n2. It is a completely distributed architecture.\n3. It is a lightweight architecture - just build the Web service, create\nyour metadata, and you&#39;re done.\n4. The standard Web components are used - URIs to identify the Web\nservice and the metadata, the HTTP verbs (GET, PUT, POST, DELETE) to\naccess and manipulate the service and metadata.\n5. Tremendous interconnectedness - others link to my Web service and to\nmy metadata and I can link my Web service or my metadata to other Web\nservices or metadata.\n6. The search engine cottage industry is enhanced further.  The industry\nwill grow at an increasing rate as new types of search engines will be\nrequired.  For example, for RDF-based services there will be RDF-based\nsearch engines that will enable inductive and deductive reasoning; for\nDAML/OWL-based services there will be DAML and OWL tools that enable\nassociations using ontologies; and, of course, there will continue to be\nthe old HTML-based search tools for browser-based clients.\n\nLastly, I would like to highlight one very important point:\n\nAfter creating my Web site I did not then &quot;register&quot; it (anywhere).  The\nsearch engines found my Web site.  I did not have to go out and find the\nsearch engines.  This is a good thing.  The responsibility is on the\nsearch engines to keep track of the Web sites (Web services) that are\nout there.  The responsibility is not on individual Web site developers\nto keep track of what search engines are out there.\n\nMatchmaker (search engine) tool axiom:\n\n   The onus is on the matchmaker tools to find the Web \n   services, and provide information to clients based upon \n   the Web services description metadata.  \n\nThus, the matchmakers cannot require, nor expect, Web services to\nregister with them.  The burden is thus on the matchmakers, not on the\nWeb services.\n\nStated another way: the matchmakers must remain decoupled from the Web\nservice and its service description.  \n\nComments?  /Roger\n\n\n"}}
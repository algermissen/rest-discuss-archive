{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":87113616,"authorName":"S. Mike Dierken","from":"&quot;S. Mike Dierken&quot; &lt;mdierken@...&gt;","profile":"mdierken","replyTo":"SENDER","senderId":"f4dr8ekVZ1JrWbEQaG2KS34GS6NXh3z2UoiNFEs0kNePA-SebLAQhdPpJhQ06ToqU_SmrJOIaWHI2U8eH82BCCJF9kjn0IsJcWMVQ5blMA","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] representational completeness","postDate":"1085008169","msgId":4352,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEJBWTE2LURBVjM5WWdhUldORlYwMDAxMDQxYkBob3RtYWlsLmNvbT4=","referencesHeader":"PDIwMDQwNTE4MjA0ODIyLkNGQjk2MTgzMjBAemFjaHMucGxhY2Uub3JnPiA8QkFZMTYtREFWMTJVZm56U0s1aTAwMDBmYTU4QGhvdG1haWwuY29tPiA8ODA3MUY1MzgtQTlBQy0xMUQ4LUFCRTItMDAwQTk1Q0ZFOURFQGRlZXBmaWxlLmNvbT4gPEJBWTE2LURBVjU4MWFXQ2RNZncwMDAwZmI0NEBob3RtYWlsLmNvbT4gPDEyRjZDRkM2LUE5QkUtMTFEOC1BQkUyLTAwMEE5NUNGRTlERUBkZWVwZmlsZS5jb20+"},"prevInTopic":4351,"nextInTopic":4353,"prevInTime":4351,"nextInTime":4353,"topicId":4337,"numMessagesInTopic":24,"msgSnippet":"Interesting post (no pun intended). Partial update .vs. full update is an interesting area. I agree that it can easily get intricate and non-uniform across","rawEmail":"Return-Path: &lt;mdierken@...&gt;\r\nX-Sender: mdierken@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 53050 invoked from network); 19 May 2004 23:26:47 -0000\r\nReceived: from unknown (66.218.66.218)\n  by m21.grp.scd.yahoo.com with QMQP; 19 May 2004 23:26:47 -0000\r\nReceived: from unknown (HELO hotmail.com) (65.54.186.219)\n  by mta3.grp.scd.yahoo.com with SMTP; 19 May 2004 23:26:47 -0000\r\nReceived: from mail pickup service by hotmail.com with Microsoft SMTPSVC;\n\t Wed, 19 May 2004 16:26:34 -0700\r\nReceived: from 207.202.171.254 by bay16-dav39.bay16.hotmail.com with DAV;\n\tWed, 19 May 2004 23:26:34 +0000\r\nX-Originating-Email: [mdierken@...]\r\nX-Sender: mdierken@...\r\nTo: &quot;Jeff Bone&quot; &lt;jbone@...&gt;,\n\t&lt;rest-discuss@yahoogroups.com&gt;\r\nReferences: &lt;20040518204822.CFB9618320@...&gt; &lt;BAY16-DAV12UfnzSK5i0000fa58@...&gt; &lt;8071F538-A9AC-11D8-ABE2-000A95CFE9DE@...&gt; &lt;BAY16-DAV581aWCdMfw0000fb44@...&gt; &lt;12F6CFC6-A9BE-11D8-ABE2-000A95CFE9DE@...&gt;\r\nDate: Wed, 19 May 2004 16:09:29 -0700\r\nMIME-Version: 1.0\r\nContent-Type: text/plain;\n\tcharset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: 7bit\r\nX-Priority: 3\r\nX-MSMail-Priority: Normal\r\nX-Mailer: Microsoft Outlook Express 6.00.2800.1409\r\nX-MimeOLE: Produced By Microsoft MimeOLE V6.00.2800.1409\r\nMessage-ID: &lt;BAY16-DAV39YgaRWNFV0001041b@...&gt;\r\nX-OriginalArrivalTime: 19 May 2004 23:26:34.0643 (UTC) FILETIME=[B97DCE30:01C43DF8]\r\nX-eGroups-Remote-IP: 65.54.186.219\r\nFrom: &quot;S. Mike Dierken&quot; &lt;mdierken@...&gt;\r\nSubject: Re: [rest-discuss] representational completeness\r\nX-Yahoo-Group-Post: member; u=87113616\r\nX-Yahoo-Profile: mdierken\r\n\r\nInteresting post (no pun intended).\nPartial update .vs. full update is an interesting area. I agree that it can\neasily get intricate and non-uniform across service providers. I believe\nthere are a small number of generally useful approaches to partial update\nwhen restricted to the realm of XML representations. Specifically with\nstructured data that has a clear set of named region within the xml\ndocument, the presence of that named element implies a full replacement of\nall data with that name. The absence of a named data element implies no\nchange to that portion of the resource.\n\n\n&quot;Clearly I&#39;ve done a 180 on that;  but now I wonder\nif there&#39;s really a RESTful benefit to having both PUT and POST...&quot;\nI think the difference between the two have to do with addressing - a PUT\nallows the client to determine the URI of new resources, a POST allows the\nserver to determine the URI of new resources.\n\n\n\n----- Original Message ----- \nFrom: &quot;Jeff Bone&quot; &lt;jbone@...&gt;\nTo: &quot;S. Mike Dierken&quot; &lt;mdierken@...&gt;\nCc: &quot;rest-discuss&quot; &lt;rest-discuss@yahoogroups.com&gt;\nSent: Wednesday, May 19, 2004 10:58 AM\nSubject: Re: [rest-discuss] representational completeness\n\n\n&gt;\n&gt; Mike, hope you don&#39;t mind me redirecting this to the list...\n&gt;\n&gt; On May 19, 2004, at 11:51 AM, S. Mike Dierken wrote:\n&gt;\n&gt; &gt; I thought he asked if it was required...\n&gt;\n&gt; I think it&#39;s less of a question of &quot;required&quot; than &quot;prudent.&quot;\n&gt;\n&gt; To try to clarify:  let&#39;s say I&#39;ve got a resource that represents an\n&gt; object with three &quot;properties&quot;:  foo, bar, and baz that hold integers.\n&gt; When I do a GET on that resource, it gives me an XML representation\n&gt; with elements foo, bar, and baz, e.g.\n&gt;\n&gt; &lt;something id=456&gt;\n&gt;     &lt;foo&gt;1&lt;/foo&gt;\n&gt;     &lt;bar&gt;2&lt;/bar&gt;\n&gt;     &lt;baz&gt;3&lt;/baz&gt;\n&gt; &lt;/something&gt;\n&gt;\n&gt; When I implement the POST handler for that resource, should I allow\n&gt; people to update &quot;somethings&quot; by providing a partial representation?\n&gt; That is, say I&#39;ve got a something with id=456.  A client gets a\n&gt; representation as above by doing\n&gt;\n&gt; GET /Something/456\n&gt;\n&gt; The client then wants to change the value of that something&#39;s foo.\n&gt; Should the implementer of the post handler (and definer of the\n&gt; representation format, XML or otherwise --- could just be form\n&gt; variables) allow the client to say:\n&gt;\n&gt; POST /Something/456\n&gt;\n&gt; &lt;something id=456&gt;\n&gt;     &lt;foo&gt;5&lt;/foo&gt;\n&gt; &lt;/something&gt;\n&gt;\n&gt; or is it better to require a complete representation:\n&gt;\n&gt; &lt;something id=456&gt;\n&gt;     &lt;foo&gt;5&lt;/foo&gt;\n&gt;     &lt;bar&gt;2&lt;/bar&gt;\n&gt;     &lt;baz&gt;3&lt;/baz&gt;\n&gt; &lt;/something&gt;\n&gt;\n&gt; Note that the requirement is really one imposed by the implementer of\n&gt; the post handler, not something inherent in REST or HTTP --- perhaps\n&gt; obviously.  But perhaps less obviously --- and this is my contention\n&gt; --- allowing for partial representations on a POST actually *does*\n&gt; undermine some of the benefits of REST from a compositional complexity\n&gt; and integration perspective.  Namely, the opportunity space for\n&gt; impedance mismatches, errors, and mistakes between the provider of the\n&gt; POST interface and the client go up combinatorically in the number of\n&gt; permutations of elements in the representation that are allowable as\n&gt; partial representations;  as well, the specification problem is much\n&gt; larger and the code on both ends of the wire is both necessarily more\n&gt; complex and more fragile.\n&gt;\n&gt; The further, perhaps more controversial claim I&#39;m making is that\n&gt; allowing partial representations is in fact PRECISELY equivalent to\n&gt; allowing arbitrary RPC methods with type-specific signatures.  In fact,\n&gt; if we allow partial representations in the above case all we&#39;ve done is\n&gt; the following, forgive the notation, you get my point:  instead of\n&gt; having e.g. several methods:\n&gt;\n&gt; setFoo(foo),\n&gt; setBar(bar)\n&gt; setBaz(baz)\n&gt; setFooBar(foo, bar)\n&gt; setFooBaz(foo, baz)\n&gt; setBarBaz(bar, baz)\n&gt; setFooBarBaz(foo, bar, baz)\n&gt;\n&gt; ...we&#39;ve essentially created the same number of methods --- they&#39;re\n&gt; just polymorphic, all called POST, and use a hand-crafted dispatcher.\n&gt;\n&gt; POST(foo),\n&gt; POST(bar)\n&gt; POST(baz)\n&gt; POST(foo, bar)\n&gt; POST(foo, baz)\n&gt; POST(bar, baz)\n&gt; POST(foo, bar, baz)\n&gt;\n&gt; Things get even uglier even faster when we&#39;ve got repeated elements or\n&gt; subelements.  Assume\n&gt;\n&gt; GET /Something/456\n&gt;\n&gt; gives you\n&gt;\n&gt; &lt;something id=456&gt;\n&gt;     &lt;foos&gt;\n&gt;        &lt;foo&gt;12&lt;/foo&gt;\n&gt;        &lt;foo&gt;21&lt;/foo&gt;\n&gt;        &lt;foo&gt;76&lt;/foo&gt;\n&gt;     &lt;/foos&gt;\n&gt;     &lt;bar&gt;2&lt;/bar&gt;\n&gt;     &lt;baz&gt;3&lt;/baz&gt;\n&gt; &lt;/something&gt;\n&gt;\n&gt; Now assuming I allow partial representations;  you try to post the\n&gt; following:\n&gt;\n&gt; POST /Something/456\n&gt;\n&gt; &lt;something id=456&gt;\n&gt;     &lt;foos&gt;\n&gt;        &lt;foo&gt;37&lt;/foo&gt;\n&gt;     &lt;/foos&gt;\n&gt; &lt;/something&gt;\n&gt;\n&gt; WTF does THAT mean?  This feels very API / RPC to me.  One might be\n&gt; tempted to say that means &quot;add another &lt;foo/&gt; to &lt;foos/&gt; with a value\n&gt; of 37&quot;, so that a subsequent get returns:\n&gt;\n&gt; &lt;something id=456&gt;\n&gt;     &lt;foos&gt;\n&gt;        &lt;foo&gt;12&lt;/foo&gt;\n&gt;        &lt;foo&gt;21&lt;/foo&gt;\n&gt;        &lt;foo&gt;76&lt;/foo&gt;\n&gt;        &lt;foo&gt;37&lt;/foo&gt;\n&gt;     &lt;/foos&gt;\n&gt;     &lt;bar&gt;2&lt;/bar&gt;\n&gt;     &lt;baz&gt;3&lt;/baz&gt;\n&gt; &lt;/something&gt;\n&gt;\n&gt; But notice:  we&#39;ve now taken something that was entirely explicit in\n&gt; the representation and made it totally obscure, implicit, and dependent\n&gt; on the implementation of the post handler.  You might equally well\n&gt; expect the above post followed by a get to return either of the\n&gt; following:\n&gt;\n&gt; &lt;something id=456&gt;\n&gt;     &lt;foos&gt;\n&gt;        &lt;foo&gt;37&lt;/foo&gt;\n&gt;     &lt;/foos&gt;\n&gt;     &lt;bar&gt;2&lt;/bar&gt;\n&gt;     &lt;baz&gt;3&lt;/baz&gt;\n&gt; &lt;/something&gt;\n&gt;\n&gt; or\n&gt;\n&gt; &lt;something id=456&gt;\n&gt;     &lt;foos&gt;\n&gt;        &lt;foo&gt;37&lt;/foo&gt;\n&gt;     &lt;/foos&gt;\n&gt; &lt;/something&gt;\n&gt;\n&gt; Things get STILL WORSE when there is semantic meaning in the ordering\n&gt; of the subelements.  As an example, let&#39;s say:\n&gt;\n&gt; GET /Something/456\n&gt;\n&gt; gives you\n&gt;\n&gt; &lt;something id=456&gt;\n&gt;     &lt;foos&gt;\n&gt;        &lt;foo&gt;12&lt;/foo&gt;\n&gt;        &lt;foo&gt;21&lt;/foo&gt;\n&gt;        &lt;foo&gt;76&lt;/foo&gt;\n&gt;     &lt;/foos&gt;\n&gt;     &lt;bar&gt;2&lt;/bar&gt;\n&gt;     &lt;baz&gt;3&lt;/baz&gt;\n&gt; &lt;/something&gt;\n&gt;\n&gt; You now post\n&gt;\n&gt; &lt;something id=456&gt;\n&gt;     &lt;foos&gt;\n&gt;        &lt;foo&gt;76&lt;/foo&gt;\n&gt;        &lt;foo&gt;12&lt;/foo&gt;\n&gt;        &lt;foo&gt;21&lt;/foo&gt;\n&gt;     &lt;/foos&gt;\n&gt;     &lt;bar&gt;2&lt;/bar&gt;\n&gt;     &lt;baz&gt;3&lt;/baz&gt;\n&gt; &lt;/something&gt;\n&gt;\n&gt; You would probably expect the subsequent\n&gt;\n&gt; GET /Something/456\n&gt;\n&gt; to give you\n&gt;\n&gt; &lt;something id=456&gt;\n&gt;     &lt;foos&gt;\n&gt;        &lt;foo&gt;76&lt;/foo&gt;\n&gt;        &lt;foo&gt;12&lt;/foo&gt;\n&gt;        &lt;foo&gt;21&lt;/foo&gt;\n&gt;     &lt;/foos&gt;\n&gt;     &lt;bar&gt;2&lt;/bar&gt;\n&gt;     &lt;baz&gt;3&lt;/baz&gt;\n&gt; &lt;/something&gt;\n&gt;\n&gt; rather than\n&gt;\n&gt; &lt;something id=456&gt;\n&gt;     &lt;foos&gt;\n&gt;        &lt;foo&gt;12&lt;/foo&gt;\n&gt;        &lt;foo&gt;21&lt;/foo&gt;\n&gt;        &lt;foo&gt;76&lt;/foo&gt;\n&gt;     &lt;/foos&gt;\n&gt;     &lt;bar&gt;2&lt;/bar&gt;\n&gt;     &lt;baz&gt;3&lt;/baz&gt;\n&gt; &lt;/something&gt;\n&gt;\n&gt; --- but, with partial representations, does\n&gt;\n&gt; GET /Something/456\n&gt;\n&gt; &lt;something id=456&gt;\n&gt;     &lt;foos&gt;\n&gt;        &lt;foo&gt;12&lt;/foo&gt;\n&gt;        &lt;foo&gt;21&lt;/foo&gt;\n&gt;        &lt;foo&gt;76&lt;/foo&gt;\n&gt;     &lt;/foos&gt;\n&gt;     &lt;bar&gt;2&lt;/bar&gt;\n&gt;     &lt;baz&gt;3&lt;/baz&gt;\n&gt; &lt;/something&gt;\n&gt;\n&gt; followed by\n&gt;\n&gt; POST /Something/456\n&gt;\n&gt; &lt;something id=456&gt;\n&gt;     &lt;foos&gt;\n&gt;        &lt;foo&gt;37&lt;/foo&gt;\n&gt;     &lt;/foos&gt;\n&gt; &lt;/something&gt;\n&gt;\n&gt; followed by\n&gt;\n&gt; GET /Something/456\n&gt;\n&gt; give you\n&gt;\n&gt; &lt;something id=456&gt;\n&gt;     &lt;foos&gt;\n&gt;        &lt;foo&gt;12&lt;/foo&gt;\n&gt;        &lt;foo&gt;21&lt;/foo&gt;\n&gt;        &lt;foo&gt;76&lt;/foo&gt;\n&gt;        &lt;foo&gt;37&lt;/foo&gt;\n&gt;     &lt;/foos&gt;\n&gt;     &lt;bar&gt;2&lt;/bar&gt;\n&gt;     &lt;baz&gt;3&lt;/baz&gt;\n&gt; &lt;/something&gt;\n&gt;\n&gt; or\n&gt;\n&gt; &lt;something id=456&gt;\n&gt;     &lt;foos&gt;\n&gt;        &lt;foo&gt;37&lt;/foo&gt;\n&gt;        &lt;foo&gt;12&lt;/foo&gt;\n&gt;        &lt;foo&gt;21&lt;/foo&gt;\n&gt;        &lt;foo&gt;76&lt;/foo&gt;\n&gt;     &lt;/foos&gt;\n&gt;     &lt;bar&gt;2&lt;/bar&gt;\n&gt;     &lt;baz&gt;3&lt;/baz&gt;\n&gt; &lt;/something&gt;\n&gt;\n&gt; or even something else?\n&gt;\n&gt; In order to disambiguate all this, the representation format will have\n&gt; to be extended further to allow the poster to specify where in the foo\n&gt; order things go.  ICK.  We&#39;re now merrily bobsledding down a slippery\n&gt; slope of increasing complexity and ambiguity that directly impact the\n&gt; compositional benefits of REST, easily avoided by avoiding partial\n&gt; representations entirely.\n&gt;\n&gt; IMHO, while it&#39;s a bit outside REST per se, the operative / stylistic\n&gt; principle should be to insist on representational completeness in all\n&gt; cases where practical (and that&#39;s essentially everywhere) for both POST\n&gt; and PUT.  Notwithstanding that, delta encodings are useful particularly\n&gt; when hucking around large chunks of semi- or unstructured information.\n&gt; But delta encodings are usually treated in a much more opaque fashion\n&gt; than what we&#39;re talking about here, and handled with conneg dispatch.\n&gt;\n&gt; Aside:  back before Mark, Roy and company forced a REST gestalt on me,\n&gt; I used to claim that the only necessary method was e.g. POST (or\n&gt; INVOKE, whatever.)  Clearly I&#39;ve done a 180 on that;  but now I wonder\n&gt; if there&#39;s really a RESTful benefit to having both PUT and POST...\n&gt;\n&gt; jb\n&gt;\n&gt;\n\n"}}
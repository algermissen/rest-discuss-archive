{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":80827773,"authorName":"Seairth Jacobs","from":"&quot;Seairth Jacobs&quot; &lt;seairth@...&gt;","profile":"seairthjacobs","replyTo":"SENDER","senderId":"eAvyx-J7G1efuaZll2N6dWH7ecQJFYQCTUXQVsCvOqr8iiDwtCHWEjgbDLz4wOF5XXETr4kwwZHqHK93kxhHlhftzbXyzq7nwoX4JXg","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] ReST vs MoST Messaging","postDate":"1060653454","msgId":3889,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDAwYTUwMWMzNjA3NSQxOTMxMDkzMCRhMDAwYThjMEBTZWFpcnRoQTMxPg==","referencesHeader":"PDI1OTUwMDgyMi4xMDYwMzU0NjU5QGxvY2FsaG9zdD4gPDEwNjA0MjAxMTAuMzE0NDQuMjMuY2FtZWxAcGlvdXBpb3U+IDwyNDU1OTM2ODUuMTA2MDYxMDg0NUBsb2NhbGhvc3Q+"},"prevInTopic":3888,"nextInTopic":3891,"prevInTime":3888,"nextInTime":3890,"topicId":3880,"numMessagesInTopic":23,"msgSnippet":"From: Alex Jacobson  ... index. ... If I understand correctly, the idea is that if a resource is labeled as a container (where container has","rawEmail":"Return-Path: &lt;seairth@...&gt;\r\nX-Sender: seairth@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 27323 invoked from network); 12 Aug 2003 01:57:39 -0000\r\nReceived: from unknown (66.218.66.217)\n  by m20.grp.scd.yahoo.com with QMQP; 12 Aug 2003 01:57:39 -0000\r\nReceived: from unknown (HELO lakemtao01.cox.net) (68.1.17.244)\n  by mta2.grp.scd.yahoo.com with SMTP; 12 Aug 2003 01:57:39 -0000\r\nReceived: from SeairthA31 ([68.96.198.4]) by lakemtao01.cox.net\n          (InterMail vM.5.01.04.05 201-253-122-122-105-20011231) with SMTP\n          id &lt;20030812015739.OHJZ7142.lakemtao01.cox.net@SeairthA31&gt;\n          for &lt;rest-discuss@yahoogroups.com&gt;;\n          Mon, 11 Aug 2003 21:57:39 -0400\r\nMessage-ID: &lt;00a501c36075$19310930$a000a8c0@SeairthA31&gt;\r\nTo: &quot;rest-discuss&quot; &lt;rest-discuss@yahoogroups.com&gt;\r\nReferences: &lt;259500822.1060354659@localhost&gt; &lt;1060420110.31444.23.camel@pioupiou&gt; &lt;245593685.1060610845@localhost&gt;\r\nSubject: Re: [rest-discuss] ReST vs MoST Messaging\r\nDate: Mon, 11 Aug 2003 21:57:34 -0400\r\nMIME-Version: 1.0\r\nContent-Type: text/plain;\n\tcharset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: 7bit\r\nX-Priority: 3\r\nX-MSMail-Priority: Normal\r\nX-Mailer: Microsoft Outlook Express 6.00.2800.1158\r\nX-MimeOLE: Produced By Microsoft MimeOLE V6.00.2800.1165\r\nFrom: &quot;Seairth Jacobs&quot; &lt;seairth@...&gt;\r\nX-Yahoo-Group-Post: member; u=80827773\r\nX-Yahoo-Profile: seairthjacobs\r\n\r\nFrom: &quot;Alex Jacobson&quot; &lt;alex@...&gt;\n&gt;\n&gt; If the server returns an index in response to a GET without an Accept\n&gt; header, the resource is an index and NOT a container.  That means the\n&gt; semantics of POST  should be with respect to that index and not a\n&gt; container.  In other words, if the resource IS an index, then POST means\n&gt; add an entry to the index and NOT add a message to a container; messages\n&gt; must be stored somewhere else a la DJ Bernstein.\n&gt;\n&gt; If the server returns a container in response to a GET without an Accept\n&gt; header, the resource is a container and not an index.  That means the\n&gt; semantics of POST should be with respect to the container and not an\nindex.\n&gt; In other words, if the resource is a container, then POST means add a\n&gt; message to the container and can at your option affect an index.  Messages\n&gt; are stored in the container  a la SMTP.  Note, nothing constrains the\n&gt; server from providing an index in response to a GET with a an &quot;Accept:\n&gt; text/x-yannick-index&quot;, but that is really beside the point.\n\nIf I understand correctly, the idea is that if a resource is labeled as a\n&quot;container&quot; (where &quot;container&quot; has mutually agreed upon semantics), then a\nclient absolutely knows how and when each of the HTTP methods can be used on\nthat resource.  And what happens when you don&#39;t want to provide all\ncapabilities of a container?  For instances, what if the only function you\nwant to support is POST of a message and the only successful response is\n202?  Once posted, there is no way to GET, PUT, DELETE, etc the message (via\nthat URI, anyhow).  It seems to me you would have to define the container\nwith restrictions or define a entirely new model (&quot;drop box&quot;?).  But then\nwhat if the next time, you need something similar that provides only POST\nand GET, except that also the expected response for the POST is either 201\nor 302?\n\nLet&#39;s take another look at RNA...\n\nThe interface is split into two URI types:  Identity and Inbox.  In either\ncase, the &quot;client&quot; (likely a remote server) may only POST an xml-based RNA\ndocument.  In the case of the Identity URI, there is a simple rule that says\n&quot;if recipient likes the request entity, it will return a 200 with a similar\nresponse entity, possibly adding or setting elements; otherwise, it will\nreject the request appropriately.&quot;  In the case of the Inbox URI, there is a\nsimple rule that says &quot;if recipient likes the request entity, it will return\na 202 (no response entity);  otherwise, it will reject the request\nappropriately.&quot;  The Identity and Inbox URI have different criteria and\ntherefore do not necessarily return all of the same possible 4xx responses.\nNow, as it happens to be that the Identity URI is highly visible, it also\ndefines the use of the GET method, which has absolutely no rules on how it\nis implemented (beyond the semantics of a GET).  This is because people tend\nto plug highly visible URIs into their web browsers and expect to get\nsomething understandable back.  The Inbox URI, on the other hand, is\nrelatively hidden from the general user and therefore does not have the GET\nmethod defined.\n\nSo, how can this be modeled in a way that would replace the need for\ndocumentation?  What are the data models of the two URI types?  What allows\nthe client to know the valid range of RNA documents (in this case,\nxml-based) that can be sent in the request entity, and in the case of the\nIdentity URI, returned in the response entity?  What if RNA were rewritten\nto use ONX or YAML or some entirely proprietary format?  What allows the\nclients to know what each of the possible 2xx, 3xx, and 4xx response codes\nmean in context to the request such that it may correct its problem and try\nagain?\n\nIf you know how to model all of this in a clear, simple manner that doesn&#39;t\ntie RNA&#39;s hands in any way, I&#39;m all for it.  But what I feel you are\nproposing is either too limiting or is too complicated.  Heck, I&#39;ve got the\nentire English language to write the spec with and I&#39;m *still* not entirely\ncomfortable with the wording.\n\n---\nSeairth Jacobs\nseairth@...\n\n\n"}}
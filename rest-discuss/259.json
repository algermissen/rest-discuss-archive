{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":0,"authorName":"S. Alexander Jacobson","from":"&quot;S. Alexander Jacobson&quot; &lt;alex@...&gt;","replyTo":"SENDER","senderId":"I1uoWChpcsghVDU5hQdGcQmdYVaU4zu3GcBFH_yoKWs4dIpICwurIn0B5s8U0GbyOUsyMyCoi5iAtoluCTRF9gIgA4OnmoFwWUKmdQ","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Why is HTTP hard to design with?","postDate":"1011937611","msgId":259,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PFBpbmUuV05ULjQuNDMuMDIwMTI0MjMzMjA4MC4xNDAwLTEwMDAwMEBnYW5kb2xwaC5BU0dBUkQuam1zPg==","inReplyToHeader":"PDIwMDIwMTI0MjE0Mi5RQUEyNTE1NEBtYXJrYmFrZXIuY2E+"},"prevInTopic":258,"nextInTopic":260,"prevInTime":258,"nextInTime":260,"topicId":209,"numMessagesInTopic":77,"msgSnippet":"... Mark, please don t accuse me of pulling a Dave Winer :-)  You would agree that it is possible to understand REST without agreeing that it is the solution","rawEmail":"Return-Path: &lt;alex@...&gt;\r\nX-Sender: alex@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_0_1_3); 25 Jan 2002 05:45:58 -0000\r\nReceived: (qmail 98551 invoked from network); 25 Jan 2002 05:45:57 -0000\r\nReceived: from unknown (216.115.97.171)\n  by m12.grp.snv.yahoo.com with QMQP; 25 Jan 2002 05:45:57 -0000\r\nReceived: from unknown (HELO mail.vo.com) (208.36.81.99)\n  by mta3.grp.snv.yahoo.com with SMTP; 25 Jan 2002 05:45:57 -0000\r\nReceived: from gandolph.ASGARD.jms (alexhome2 [66.108.152.69])\n\tby mail.vo.com (8.12.1/8.12.1) with ESMTP id g0P5jLFv003427\n\t(version=TLSv1/SSLv3 cipher=RC4-MD5 bits=128 verify=NO);\n\tFri, 25 Jan 2002 00:45:22 -0500\r\nDate: Fri, 25 Jan 2002 00:46:51 -0500 (Eastern Standard Time)\r\nTo: Mark Baker &lt;distobj@...&gt;\r\nCc: &quot;S. Mike Dierken&quot; &lt;mdierken@...&gt;, &lt;rest-discuss@yahoogroups.com&gt;\r\nSubject: Re: [rest-discuss] Why is HTTP hard to design with?\r\nIn-Reply-To: &lt;200201242142.QAA25154@...&gt;\r\nMessage-ID: &lt;Pine.WNT.4.43.0201242332080.1400-100000@...&gt;\r\nX-X-Sender: alex@...\r\nMIME-Version: 1.0\r\nContent-Type: TEXT/PLAIN; charset=US-ASCII\r\nFrom: &quot;S. Alexander Jacobson&quot; &lt;alex@...&gt;\r\nX-Yahoo-Group-Post: public\r\n\r\nOn Thu, 24 Jan 2002, Mark Baker wrote:\n&gt; Alex, no offense dude, but you don&#39;t get REST yet.  It would really\n&gt; help things a lot in this discussion if you stopped pulling a Dave\n&gt; Winer by thinking you understand it, and dismissing it so quickly\n&gt; as unsuitable.\n\nMark, please don&#39;t accuse me of pulling a Dave\nWiner :-)  You would agree that it is possible to\nunderstand REST without agreeing that it is the\nsolution to all problems.\n\nUnless REST is a religion, I think it comes down\nto this:\n1. Is HTTP really the best model for your app.\n2. If not, is it worth implementing in HTTP anyway\nto gain the advantages of reusability,\ninteroperation, etc.\n\nI think there are many cases where it is not.\nI think many of your arguments in favor of HTTP\nare not in favor of a real HTTP but rather some\nhypothetical HTTP.\n\nThat being said, I&#39;ve learned a lot in this\ndiscussion and will strive to implement more\nconsistently with HTTP in the future.\n\n&gt; You&#39;re damned right.  Putting something on the Web requires being able\n&gt; to see things as a nail.  Some things won&#39;t ever be nails, but with\n&gt; REST, the vast majority of things can be seen as nails.\n\nYes.  I get this and agree.\n\n&gt; &gt; I don&#39;t deny that HTTP is a wonderful thing.\n&gt; &gt; However, I could quite reasonably make the claim\n&gt; &gt; that you can do everything you can do in HTTP\n&gt; &gt; using SMTP.\n&gt;\n&gt; Nope.  How would you retrieve information with SMTP, without additional\n&gt; a priori agreement?\n\nHow do autoreplies work?  Send an empty message to\nan email address and get an autoreply.  There are\nlots of more sophisticated versions of this.\n\nBtw, implementing asynch with HTTP also requires\nprior agreement.\n\n&gt; HTTP can use persistent connections on a GET to receive information.\n&gt; This is safe if the information that&#39;s received isn&#39;t another protocol\n&gt; (like an encapsulated message/http).\n\nTalk about HTTP abuse!  Given that most real HTTP\nclients/servers will time out a connection, I\nthink this one is impractical.\n\nNote, the reason for closing connections is that\nholding open a thread or child process(!!) for\neach client is expensive.\n\nIn theory one could design a special purpose web\nserver that does polling, but that is not the same\none you would use for CGI or servlets.\n\nOnce you have to write your own HTTPd for the\napplication, re-using HTTP seems much less\nexciting.\n\n&gt; But you first have to model your presence app as a set of resources.\n&gt; e.g. each user gets a URI, a persistent GET to that URI returns a\n&gt; stream of presence messages as their presence status changes, etc..\n\nAgain, that may be, but since you also have to\nwrite a custom client, I don&#39;t see the bonus of\nHTTP here.\n\nA simpler approach might just be to have the\nclient open a socket connection with some auth\ninformation, and to multiplex chat messages back\nand forth on that socket.\n\nYou might argue that the HTTP approach is better\nbecause it is more likely to get through the\nfirewall.  However, it is equally likely that the\nfirewall will shut down excesively long HTTP\nconnections.\n\n&gt; &gt; Even in traditional client/server (long\n&gt; &gt; connections), there was nothing that prevented\n&gt; &gt; this from happening.  Its just that the protocol\n&gt; &gt; itself is defined in terms of clients making\n&gt; &gt; requests of servers.\n&gt;\n&gt; Name a protocol that doesn&#39;t work this way.\n\nThat is my point.  Doing P2P with HTTP also\nrequires &quot;additional a priori agreement.&quot;\nYou seemed to be claiming otherwise.\n\nMy general point then is that once you require a\npriori agreement, you might as well use protocols\nfor which that a priori agreement is already well\ndefined.\n\nFor messaging, that would be SMTP.\nFor news distribution, that would be NNTP\nFor presence, it need not be HTTP and it might\nvery well be IRC.\n\n&gt; &gt; Ok, name an app that can&#39;t be modelled as a set of\n&gt; &gt; email addresses.\n&gt;\n&gt; The Web.\n\nSee above, re auto-replies.\n\n&gt; &gt; The issue is whether the app SHOULD be modelled as\n&gt; &gt; a set of HTTP resources or a email addresses or\n&gt; &gt; whatever.\n&gt;\n&gt; In part, that&#39;s true.  But often (unless you&#39;ve been doing this as long\n&gt; as I have 8-), you won&#39;t know until you try.  You&#39;re not even trying.\n\nI am trying.  But in general I am trying to use\nwhatever protocol people are already using for\nwhatever I am doing.\n\n&gt; &gt; Congratulations.  Looks cool.  Doesn&#39;t mean that\n&gt; &gt; was the best way to go.  For example, would you\n&gt; &gt; use HTTP for an IM client (if you needed to\n&gt; &gt; support large numbers of them)?  Having millions\n&gt; &gt; of clients polling for messages seems like a bad\n&gt; &gt; idea.\n&gt;\n&gt; If I could offload to a proxy farm, sure.  Proxies are an integral part\n&gt; of REST for this and other reasons.\n\nMy point is that you would rather design a\nprotocol that doesn&#39;t impose so much load on your\nserver.  I&#39;d rather run 1 presence server on my\nown protocl than 10 proxy servers using HTTP.\n\n&gt; But as I said, if you can use TCP, you can probably use HTTP.  Can that\n&gt; IM app use TCP?\n\nSure.  Client keeps a socket open.  Server watches\nTCP to make sure the connection is still open.\n\nThis is hugely lighter weight than your HTTP\nimplementation.\n\n&gt; &gt; I&#39;m not sure you read the problem correctly.\n&gt; &gt;\n&gt; &gt; The client is simply making a query to the server\n&gt; &gt; and getting a yes/no response.\n&gt; &gt;\n&gt; &gt; In other words, it is making an idempotent\n&gt; &gt; request.\n&gt;\n&gt; You mean that if a picture of a terrorist was submitted, that nobody\n&gt; would want to store it?  Seriously?\n\nThe client stores it and has procedures for\ndelivering the message to the master terrorist\ndatabase if recognition happens.  The local\nterrorist server has a local copy of the database.\n(whatever).\n\n&gt; If there is a chance that it might not be idempotent, then you have to\n&gt; use POST.\n\nYour talking about a different application.\n\n&gt; But as Paul and I discussed a while ago, HTTP is missing a method to\n&gt; support idempotent operations on content, like transcoding or whatever.\n&gt; This is not a failing in REST, it is a missing feature of HTTP, but it\n&gt; could easily be added.\n\nBut it not part of HTTP!!!\nThere is the theory of HTTP and the reality of the\nHTTP protocol and the further reality of its\nimplementations.\n\n\n&gt; That is, other idempotent requests are fine (OPTIONS is one), so long as\n&gt; it doesn&#39;t act on the information space formed by GET, and that GET\n&gt; remains the only method used for URI resolution (i.e. when you click on\n&gt; a URI, it can only ever mean GET).  A new idempotent data submission\n&gt; method would be fine.\n\nIf you are using POST then you lose the benefit of\ncaching and therefore much of the benefit of HTTP.\n\nBut, more to the point, sending multiple pictures\nto a server is NOT modeling the application as a\nset of resources (whether you use GET or POST).\nIt is a form of RPC!\n\n&gt; &gt; The server may take a long time to respond to\n&gt; &gt; the query so it may issue a 202 Accepted.  But,\n&gt; &gt; if it does, then we also need a convention for\n&gt; &gt; delivery of the reply.\n&gt;\n&gt; One convention is described in RFC 2616.  Put a URI in the body of\n&gt; the 202 response that represents the completed request.\n\nHTTP doesn&#39;t deliver.  RFC2616 is incredibly\nvague on this issue.  The result is that\napplications are forced into a priori\nnegotiations.  I am trying, in MIME-RPC to firm\nit up, so that two applications written by\nstrangers can talk to each other.\n\nDo you have a better idea?\n\n&gt; &gt; I think MIME-RPC provides these conventions and\n&gt; &gt; allows this application to be deployed over\n&gt; &gt; SMTP almost exactly as it would be deployed over\n&gt; &gt; HTTP.\n&gt;\n&gt; That&#39;s because you&#39;re building a new protocol and tunneling it over\n&gt; SMTP and HTTP.  i.e. you&#39;re disregarding the view of the world that\n&gt; each of these other application protocols attempts to enforce.\n&gt; You&#39;ve also got a hammer it seems; one that likes to flatten\n&gt; everything to ensure a consistent view of the world.  8-)\n\nMIME-RPC isn&#39;t really a new protocol.  It is just\na recognition that we are all already using MIME\nand should enjoy it with the transport that makes\nsense for your application.\n\nRFC2045: When you want asynchronous messaging,\nsend MIME over SMTP\nRFC2616: When you want to do synchronous\nmessaging, send MIME over HTTP.\nRFC977: When you want to distribute/replicate\nmessages, use MIME over NNTP\nRFCxxx: When you want to do p2p messaging, send\nMIME over ____?\n\nThis is the Internet.  I&#39;m just pointing it out.\n\n-Alex-\n\n___________________________________________________________________\nS. Alexander Jacobson                   i2x Media\n1-212-787-1914 voice                    1-603-288-1280 fax\n\n\n\n\n"}}
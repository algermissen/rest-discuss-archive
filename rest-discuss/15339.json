{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":69164307,"authorName":"mike amundsen","from":"mike amundsen &lt;mamund@...&gt;","profile":"mamund","replyTo":"SENDER","senderId":"e76QyZw3N5rg9IkGCsHgMHfvz1IiYLQkCsnX7ovVRL9nsJfqzaCqhs6DqLs4QybhHCXjPK41KwjymG0dl_0HsTriwY0EeIY","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] PUT/POST content type hints","postDate":"1273529278","msgId":15339,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEFBTkxrVGltR0xEak54ZGQ1aTBaS055SVE3dTBjcnMzN1p4cXoyZExySjJDN0BtYWlsLmdtYWlsLmNvbT4=","inReplyToHeader":"PEFBTkxrVGlsT0poLS1tRk5kQmY3bkNFVEdXcEpRamIybklhNnlIZXM2WnRxNEBtYWlsLmdtYWlsLmNvbT4=","referencesHeader":"PEFBTkxrVGlseHpTY21NV1A4SndSclF0cTFyRHpOLU5VQzFrMjZyeUU0b2N3VUBtYWlsLmdtYWlsLmNvbT4JIDw0QkU4NkY1OC42MDYwMjA5QHNpdGVwZW4uY29tPgkgPEFBTkxrVGluNEVNaUZEcVdjMWRydGpwcndIb3dMb3BvVWRWWklwQlVKZ01QdkBtYWlsLmdtYWlsLmNvbT4JIDxBQU5Ma1RpbE9KaC0tbUZOZEJmN25DRVRHV3BKUWpiMm5JYTZ5SGVzNlp0cTRAbWFpbC5nbWFpbC5jb20+"},"prevInTopic":15338,"nextInTopic":15340,"prevInTime":15338,"nextInTime":15340,"topicId":15322,"numMessagesInTopic":12,"msgSnippet":"Exposing and discovering POST and PUT options is done a couple different ways: 1) HTML uses templated inputs via the FORM and INPUT elements to tell clients","rawEmail":"Return-Path: &lt;mca@...&gt;\r\nX-Sender: mca@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 70584 invoked from network); 10 May 2010 22:08:00 -0000\r\nX-Received: from unknown (98.137.34.44)\n  by m4.grp.sp2.yahoo.com with QMQP; 10 May 2010 22:08:00 -0000\r\nX-Received: from unknown (HELO mail-ww0-f47.google.com) (74.125.82.47)\n  by mta1.grp.sp2.yahoo.com with SMTP; 10 May 2010 22:07:59 -0000\r\nX-Received: by wwb39 with SMTP id 39so944379wwb.20\n        for &lt;rest-discuss@yahoogroups.com&gt;; Mon, 10 May 2010 15:07:58 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.216.172.21 with SMTP id s21mr2859634wel.165.1273529278488; \n\tMon, 10 May 2010 15:07:58 -0700 (PDT)\r\nX-Received: by 10.216.29.72 with HTTP; Mon, 10 May 2010 15:07:58 -0700 (PDT)\r\nIn-Reply-To: &lt;AANLkTilOJh--mFNdBf7nCETGWpJQjb2nIa6yHes6Ztq4@...&gt;\r\nReferences: &lt;AANLkTilxzScmMWP8JwRrQtq1rDzN-NUC1k26ryE4ocwU@...&gt;\n\t &lt;4BE86F58.6060209@...&gt;\n\t &lt;AANLkTin4EMiFDqWc1drtjprwHowLopoUdVZIpBUJgMPv@...&gt;\n\t &lt;AANLkTilOJh--mFNdBf7nCETGWpJQjb2nIa6yHes6Ztq4@...&gt;\r\nDate: Mon, 10 May 2010 18:07:58 -0400\r\nX-Google-Sender-Auth: DQHWDPL3sA3CqdSqnLR0asC1kA0\r\nMessage-ID: &lt;AANLkTimGLDjNxdd5i0ZKNyIQ7u0crs37Zxqz2dLrJ2C7@...&gt;\r\nTo: Avdi Grimm &lt;avdi@...&gt;\r\nCc: Guilherme Silveira &lt;guilherme.silveira@...&gt;, Kris Zyp &lt;kris@...&gt;, \n\tREST-Discuss Discussion Group &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\nFrom: mike amundsen &lt;mamund@...&gt;\r\nSubject: Re: [rest-discuss] PUT/POST content type hints\r\nX-Yahoo-Group-Post: member; u=69164307; y=bsfvQYOGN3cl1wNzAEc5MOBA4tisTBIJwEErF7SFtgF5\r\nX-Yahoo-Profile: mamund\r\n\r\nExposing and discovering POST and PUT options is done a couple different wa=\r\nys:\n\n1) HTML uses templated inputs via the FORM and INPUT elements to tell\n=\r\nclients how to handle both templated queries (FORM action=3D&quot;get&quot;) and\ntemp=\r\nlated writes (FORM action=3D&quot;post&quot;). [1]\n\n2) AtomPub handles this by identi=\r\nfying two important links (Collection\nURI and Member URI) and instructing c=\r\nlients and servers that the\nCollection URI can be used to create members (v=\r\nia HTTP POST) and the\nMember URI can be used for both updating entires (via=\r\n PUT) and\nremoving entries (via HTTP DELETE) [2]\n\nThe common thread here is=\r\n that the details on how to discover the\nrules for writing data to the serv=\r\ner is spelled out in the media type\ndocumentation.  This is fine as long as=\r\n you are using a media type\nthat has these details delineated in the media-=\r\ntype (HTML,\nAtom/AtomPub, SMIL, etc). Data-Oriented media-types such as XML=\r\n, JSON,\nRDF, CSV, etc do not have these read/write semantics defined and th=\r\nat\ncan be a real bummer&lt;g&gt;.\n\nYou can get around this limitation by document=\r\nation a set of link\nrelations that your clients and servers will need to un=\r\nderstand; by\nimporting other sub-sets of media types (e.g. XForms for XML, =\r\netc.)\ninto your representations and telling clients and servers to refer to=\r\n\nrelated documentation for guidance; or you can design and document you\nown=\r\n media-type that has all the necessary template and link relation\ndetails f=\r\nor your clients and servers to implement.\n\nmca\nhttp://amundsen.com/blog/\n\n[=\r\n1] http://www.w3.org/TR/REC-html40/interact/forms.html#edef-FORM\n[2] http:/=\r\n/tools.ietf.org/html/rfc5023#section-5\n\n\nOn Mon, May 10, 2010 at 17:44, Avd=\r\ni Grimm &lt;avdi@...&gt; wrote:\n&gt; On Mon, May 10, 2010 at 4:55 PM, Guilherme=\r\n Silveira\n&gt; &lt;guilherme.silveira@...&gt; wrote:\n&gt;&gt; If POSTing is your=\r\n system entry point, your rest library should guess a media type (+profile)=\r\n and POST it, if it gets back a 415, try it with any of the media types tha=\r\nt the server has told you it understands.\n&gt;\n&gt; So there&#39;s no way to safely d=\r\niscover an acceptable list of POST\n&gt; formats? The library must performs a p=\r\notentially state-changing\n&gt; operation in order to get info about supported =\r\noperations?\n&gt;\n&gt; It seems like there&#39;s an asymmetry here... HTTP provides co=\r\npious ways\n&gt; to discover content type of representations, content types of =\r\nlinked\n&gt; resources, and alternative representations of resources; but when =\r\nit\n&gt; comes to POSTing data the means of discovery are practically\n&gt; nonexis=\r\ntent.\n&gt;\n&gt; My interest, incidentally, is in making APIs explorable as a way =\r\nto\n&gt; make them more accessible to developers. I have a project\n&gt; [http://gi=\r\nthub.com/avdi/rack-stereoscope] which seeks to put an\n&gt; explorable HTML fro=\r\nntend on API based solely on hints gleaned from\n&gt; from Link headers, conten=\r\nt types, etc.; and I&#39;m wondering if there are\n&gt; any general ways to structu=\r\nre services so that projects like\n&gt; Stereoscope can discover the shape of d=\r\nata expected to be POSTed and\n&gt; show that to =A0a developer in a helpful wa=\r\ny.\n&gt;\n&gt; --\n&gt; Avdi\n&gt;\n&gt;\n&gt; ------------------------------------\n&gt;\n&gt; Yahoo! Grou=\r\nps Links\n&gt;\n&gt;\n&gt;\n&gt;\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":526345930,"authorName":"Diederik","from":"&quot;Diederik&quot; &lt;diedermans@...&gt;","profile":"diederik.vanleeuwen@ymail.com","replyTo":"SENDER","senderId":"bSY6KBogBfZW8B-VtsSK8xQSR1bMn3OAi6piPUf-1aAu-eOL-xXKnZsqaBaaNDQn8XBB3LeH6MCp4bDr-3oNO9DTYRwMJlXj","spamInfo":{"isSpam":false,"reason":"12"},"subject":"&quot;Framing the Future&quot;, a RESTful two-phase commit pattern","postDate":"1334159470","msgId":18779,"canDelete":false,"contentTrasformed":false,"systemMessage":true,"headers":{"messageIdInHeader":"PGptNDk5ZSs3bHNnQGVHcm91cHMuY29tPg=="},"prevInTopic":0,"nextInTopic":0,"prevInTime":18778,"nextInTime":18780,"topicId":18779,"numMessagesInTopic":1,"msgSnippet":"Hi, We are working on a REST API for the server-side of a graphical modeling platform. Our resources - models, diagrams and elements - are hierarchical by","rawEmail":"Return-Path: &lt;diedermans@...&gt;\r\nReceived: (qmail 465 invoked from network); 12 Apr 2012 00:11:47 -0000\r\nReceived: from unknown (98.137.35.161)\n  by m2.grp.sp2.yahoo.com with QMQP; 12 Apr 2012 00:11:47 -0000\r\nReceived: from unknown (HELO ng2-ip2.bullet.mail.bf1.yahoo.com) (98.139.164.141)\n  by mta5.grp.sp2.yahoo.com with SMTP; 12 Apr 2012 00:11:47 -0000\r\nDKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=yahoogroups.com; s=lima; t=1334189505; bh=ltdNQo0CUZBQS//c54mbpaFiU0s2YWY9snrZ2Wl4xVE=; h=Received:Received:X-Sender:X-Apparently-To:X-Received:X-Received:X-Received:X-Received:X-Received:Date:To:Message-ID:User-Agent:MIME-Version:Content-Type:X-Mailer:X-Yahoo-Newman-Property:X-Originating-IP:X-eGroups-Msg-Info:X-Yahoo-Post-IP:From:Subject:X-Yahoo-Group-Post:X-Yahoo-Profile:X-YGroups-SubInfo:Sender:X-eGroups-Approved-By:X-eGroups-Auth; b=DMC8Qtv2gqE4ckREKhcxISngHiVRcUjA0P+oqnXYCPVgxyBRe6yFEMPZOlNgn5xZHLBAMgl0ARPE3gOF/860R+HbK7c2bRwpTMkbmaC+oDjF4iqsDkVo3MyIuJONEl7B\r\nReceived: from [98.139.164.121] by ng2.bullet.mail.bf1.yahoo.com with NNFMP; 12 Apr 2012 00:11:45 -0000\r\nReceived: from [98.137.34.72] by tg2.bullet.mail.bf1.yahoo.com with NNFMP; 12 Apr 2012 00:11:45 -0000\r\nX-Sender: diedermans@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 46980 invoked from network); 11 Apr 2012 15:51:13 -0000\r\nX-Received: from unknown (98.137.35.162)\n  by m1.grp.sp2.yahoo.com with QMQP; 11 Apr 2012 15:51:13 -0000\r\nX-Received: from unknown (HELO ng6-ip1.bullet.mail.ne1.yahoo.com) (98.138.215.153)\n  by mta6.grp.sp2.yahoo.com with SMTP; 11 Apr 2012 15:51:12 -0000\r\nX-Received: from [98.138.217.177] by ng6.bullet.mail.ne1.yahoo.com with NNFMP; 11 Apr 2012 15:51:12 -0000\r\nX-Received: from [98.137.34.72] by tg2.bullet.mail.ne1.yahoo.com with NNFMP; 11 Apr 2012 15:51:12 -0000\r\nDate: Wed, 11 Apr 2012 15:51:10 -0000\r\nTo: rest-discuss@yahoogroups.com\r\nMessage-ID: &lt;jm499e+7lsg@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: multipart/alternative; boundary=&quot;2-6477838150-2498518207=:1&quot;\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-Yahoo-Newman-Property: groups-system\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Diederik&quot; &lt;diedermans@...&gt;\r\nSubject: &quot;Framing the Future&quot;, a RESTful two-phase commit pattern\r\nX-Yahoo-Group-Post: member; u=526345930; y=FtNH0JbDZ8uJFg9BSaDHQvPNE4ei-sPJYhqNtc9mV5Rev9mef5ZGoIUgiBj3v-DkZsJAfog4ty0\r\nX-Yahoo-Profile: diederik.vanleeuwen@...\r\nX-eGroups-Approved-By: gonga_thrash &lt;distobj@...&gt; via web; 12 Apr 2012 00:11:44 -0000\r\n\r\n\r\n--2-6477838150-2498518207=:1\r\nContent-Type: text/plain; charset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nHi,\n\nWe are working on a REST API for the server-side of a graphical modeli=\r\nng\nplatform. Our resources - models, diagrams and elements - are\nhierarchic=\r\nal by nature and our server keeps track of revisions of these\nmodels.\n\nThe =\r\nplatform allows users to work on the same models simultaneous.\nConcurrency =\r\nis realized using a git-inspired strategy; when a user\nstarts working, he s=\r\ntarts working on a new revision that is not yet\nshared with others. The uns=\r\nhared update a user is working on, does\nreside on the server, so the user c=\r\nan close his session and continue\nlater wihout having to share his changes.=\r\n\n\nAs a user&#39;s work evolves, the system claims the resources he touches,\nmak=\r\ning sure he can effectuate his changes at a later point in time. This\npessi=\r\nmistic approach appears to fit our customers the best. Of course\nclaims hav=\r\ne a time-out to avoid dead-lock and/or starvation.\n\nTo expose the functions=\r\n that we support in a RESTful way, we came up\nwith a two-phase-commit-patte=\r\nrn we like to refer to as the &#39;framing the\nfuture&#39;-pattern: A user can fram=\r\ne a resource by posting a frame to it,\ncreate or update child resources by =\r\nposting these to the frame instead\nof the resource and have these changes t=\r\nake affect somewhere in the\nfuture:\n\nWe use Frames, Catches and Patches as =\r\na means to let clients transfer\npreliminary state as if it were final state=\r\n, with the guarantee that\nthis state can be finalized later. The terminolgy=\r\n should be understood\nas follows: A Frame represents a snapshot view on you=\r\nr resource, a Catch\nrefreshes your snapshot and a Patch effectuates your ch=\r\nanges to it.\nFrames present resources as if your are the only one changing =\r\nthem,\nwithout actually putting your changes to effect. So you don&#39;t bother\n=\r\nothers with your changes and others don&#39;t bother you with theirs... Yet.\nBe=\r\ncause you can choose to catch up with patches others made by posting a\nCatc=\r\nh. And if you would choose to post a Patch, others may in turn post\na Catch=\r\n to catch up with your changes.\n\nFrom within a Frame you see exactly the sa=\r\nme resources as from outside a\nFrame, at least for the time you don&#39;t do an=\r\ny (preliminary) updates from\nwithin that Frame and as long as nobody else e=\r\nffectuates any updates.\nWhen you do update resources from within your Frame=\r\n, these resources\nonly reflect your changes within that Frame; from outside=\r\n your Frame\nthese resources will show as before. One could say a Frame prov=\r\nides you\nwith a view on your resources as if your changes have actually tak=\r\nen\nplace and as if changes someone else made after you created your Frame\nh=\r\nave never taken place.\n\nOnly when you post a Catch to your Frame, it will r=\r\neflect changes that\nwere finalized from outside your Frame and only when yo=\r\nu post a Patch to\nyour Frame, your changes will in turn be effectuated. Aft=\r\ner posting a\nPatch, all resources will reflect your changes, both from with=\r\nin your\nFrame and from outside your Frame; only other Frames that were crea=\r\nted\nbeofre you patched won&#39;t show your changes as long as these don&#39;t catch=\r\n\nup. From this point on you can keep on using your Frame to make new\nchange=\r\ns. These changes will be treated like before you posted your first\nPatch; y=\r\nou will need to post another Patch to finalize these new\nchanges.\n\nA Frame =\r\nprovides certainty when it comes to finalizing your changes, but\nonly to a =\r\ncertain extend. A Frame comes with a time-out; when the Frame\nexpires it wo=\r\nn&#39;t accept any postings anymore, which means you will loose\nyour changes af=\r\nter your last Patch. After each Patch, a Frame&#39;s\nexpiration date will be re=\r\nset. As long as a Frame does not expire, it\nwill use a pessimistic claiming=\r\n strategy to ensure you can finalize your\nchanges later. As a consequence, =\r\nupdates you make from within a Frame,\nmay bounce as resources may already b=\r\ne claimed by other users from\nwithin their Frames.\n\nAll can be illustrated =\r\nusing the following scenario with two users that\nadd an element to the same=\r\n diagram of a model in parallel:\n\n// before posting a frame User 1 sees a s=\r\ningle element in diagram 1 of\nmodel 1\n// after posting a new element within=\r\n his frame, the diagram shows\nelements 1 and 2\nUser 1 GET @ /models/1/diagr=\r\nams/1/elements -&gt; [element 1]\nUser 1 POST frame @ /models/1/frames -&gt; frame=\r\n 1\nUser 1 POST element @ /models/1/frames/1/diagrams/1/elements -&gt; element\n=\r\n2\nUser 1 GET @ /models/1/frames/1/diagrams/1/elements -&gt; [element 1,\nelemen=\r\nt 2]\n\n// as the updates of User 1 are preliminary, User 2 also sees only on=\r\ne\nelement\n// after posting a new element within his frame, the diagram show=\r\ns\nelements 1 and 3\nUser 2 GET @ /models/1/diagrams/1/elements -&gt; [element 1=\r\n]\nUser 2 POST frame @ /models/1/frames -&gt; frame 2\nUser 2 POST element @ /mo=\r\ndels/1/frames/2/diagrams/1/elements -&gt; element\n3\nUser 2 GET @ /models/1/fra=\r\nmes/2/diagrams/1/elements -&gt; [element 1,\nelement 3]\nUser 2 POST patch @ /mo=\r\ndels/1/frames/2/patches -&gt; patch 1\nUser 2 DELETE @ /models/1/frames/2\n\n// e=\r\nven though User 2 posted a patch, User 1 still only sees elements 1\nand 2\n/=\r\n/ however, after posting a catch, frame 1 does reflect the changes of\nUser =\r\n2\nUser 1 GET @ /models/1/frames/1/diagrams/1/elements -&gt; [element 1,\nelemen=\r\nt 2]\nUser 1 POST catch @ /models/1/frames/1/catches -&gt; catch 1\nUser 1 GET @=\r\n /models/1/frames/1/diagrams/1/elements -&gt; [element 1,\nelement 2, element 3=\r\n]\nUser 1 POST patch @ /models/1/frames/1/patches -&gt; patch 1\nUser 1 DELETE @=\r\n /models/1/frames/1\n\n// now that both users shared their updates by posting=\r\n a patch to their\nframe\n// the actual resource reflects all the updates and=\r\n show the same to all\nusers\nUser 1 GET @ /models/1/diagrams/1/elements -&gt; [=\r\nelement 1, element 2,\nelement 3]\nUser 2 GET @ /models/1/diagrams/1/elements=\r\n -&gt; [element 1, element 2,\nelement 3]\n\nI&#39;m curious what other&#39;s think about=\r\n this approach, so please share your\nthoughts on this pattern.\n\nRegards,\nDi=\r\nederik van Leeuwen\n\r\n--2-6477838150-2498518207=:1\r\nContent-Type: text/html; charset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;font face=3D&quot;georgia&quot;&gt;Hi,&lt;br&gt;&lt;br&gt;We are working on a REST API for the serv=\r\ner-side of a graphical modeling platform. Our resources - models, diagrams =\r\nand elements - are hierarchical by nature and our server keeps track of rev=\r\nisions of these models.&lt;br&gt;&lt;br&gt;The platform allows users to work on the sam=\r\ne models simultaneous. Concurrency is realized using a git-inspired strateg=\r\ny; when a user starts working, he starts working on a new revision that is =\r\nnot yet shared with others. The unshared update a user is working on, does =\r\nreside on the server, so the user can close his session and continue later =\r\nwihout having to share his changes.&lt;br&gt;&lt;br&gt;As a user&#39;s work evolves, the sy=\r\nstem claims the resources he touches, making sure he can effectuate his cha=\r\nnges at a later point in time. This pessimistic approach appears to fit our=\r\n customers the best. Of course claims have a time-out to avoid dead-lock an=\r\nd/or starvation.&lt;br&gt;&lt;br&gt;To expose the functions that we support in a RESTfu=\r\nl way, we came up with a two-phase-commit-pattern we like to refer to as th=\r\ne &#39;framing the future&#39;-pattern: A user can frame a resource by posting a fr=\r\name to it, create or update child resources by posting these to the frame i=\r\nnstead of the resource and have these changes take affect somewhere in the =\r\nfuture:&lt;br&gt;&lt;br&gt;We use Frames, Catches and Patches as a means to let clients=\r\n transfer preliminary state as if it were final state, with the guarantee t=\r\nhat this state can be finalized later. The terminolgy should be understood =\r\nas follows: A Frame represents a snapshot view on your resource, a Catch re=\r\nfreshes your snapshot and a Patch effectuates your changes to it. Frames pr=\r\nesent resources as if your are the only one changing them, without actually=\r\n putting your changes to effect. So you don&#39;t bother others with your chang=\r\nes and others don&#39;t bother you with theirs... Yet. Because you can choose t=\r\no catch up with patches others made by posting a Catch. And if you would ch=\r\noose to post a Patch, others may in turn post a Catch to catch up with your=\r\n changes.&lt;br&gt;&lt;br&gt;From within a Frame you see exactly the same resources as =\r\nfrom outside a Frame, at least for the time you don&#39;t do any (preliminary) =\r\nupdates from within that Frame and as long as nobody else effectuates any u=\r\npdates. When you do update resources from within your Frame, these resource=\r\ns only reflect your changes within that Frame; from outside your Frame thes=\r\ne resources will show as before. One could say a Frame provides you with a =\r\nview on your resources as if your changes have actually taken place and as =\r\nif changes someone else made after you created your Frame have never taken =\r\nplace.&lt;br&gt;&lt;br&gt;Only when you post a Catch to your Frame, it will reflect cha=\r\nnges that were finalized from outside your Frame and only when you post a P=\r\natch to your Frame, your changes will in turn be effectuated. After posting=\r\n a Patch, all resources will reflect your changes, both from within your Fr=\r\name and from outside your Frame; only other Frames that were created beofre=\r\n you patched won&#39;t show your changes as long as these don&#39;t catch up. From =\r\nthis point on you can keep on using your Frame to make new changes. These c=\r\nhanges will be treated like before you posted your first Patch; you will ne=\r\ned to post another Patch to finalize these new changes.&lt;br&gt;&lt;br&gt;A Frame prov=\r\nides certainty when it comes to finalizing your changes, but only to a cert=\r\nain extend. A Frame comes with a time-out; when the Frame expires it won&#39;t =\r\naccept any postings anymore, which means you will loose your changes after =\r\nyour last Patch. After each Patch, a Frame&#39;s expiration date will be reset.=\r\n As long as a Frame does not expire, it will use a pessimistic claiming str=\r\nategy to ensure you can finalize your changes later. As a consequence, upda=\r\ntes you make from within a Frame, may bounce as resources may already be cl=\r\naimed by other users from within their Frames.&lt;br&gt;&lt;br&gt;All can be illustrate=\r\nd using the following scenario with two users that add an element to the sa=\r\nme diagram of a model in parallel:&lt;br&gt;&lt;br&gt;// before posting a frame User 1 =\r\nsees a single element in diagram 1 of model 1&lt;br&gt;// after posting a new ele=\r\nment within his frame, the diagram shows elements 1 and 2&lt;br&gt;User 1 GET @ /=\r\nmodels/1/diagrams/1/elements -&gt; [element 1]&lt;br&gt;User 1 POST frame @ /mode=\r\nls/1/frames -&gt; frame 1&lt;br&gt;User 1 POST element @ /models/1/frames/1/diagr=\r\nams/1/elements -&gt; element 2&lt;br&gt;User 1 GET @ /models/1/frames/1/diagrams/=\r\n1/elements -&gt; [element 1, element 2]&lt;br&gt;&lt;br&gt;// as the updates of User 1 =\r\nare preliminary, User 2 also sees only one element&lt;br&gt;// after posting a ne=\r\nw element within his frame, the diagram shows elements 1 and 3&lt;br&gt;User 2 GE=\r\nT @ /models/1/diagrams/1/elements -&gt; [element 1]&lt;br&gt;User 2 POST frame @ =\r\n/models/1/frames -&gt; frame 2&lt;br&gt;User 2 POST element @ /models/1/frames/2/=\r\ndiagrams/1/elements -&gt; element 3&lt;br&gt;User 2 GET @ /models/1/frames/2/diag=\r\nrams/1/elements -&gt; [element 1, element 3]&lt;br&gt;User 2 POST patch @ /models=\r\n/1/frames/2/patches -&gt; patch 1&lt;br&gt;User 2 DELETE @ /models/1/frames/2&lt;br&gt;=\r\n&lt;br&gt;// even though User 2 posted a patch, User 1 still only sees elements 1=\r\n and 2&lt;br&gt;// however, after posting a catch, frame 1 does reflect the chang=\r\nes of User 2&lt;br&gt;User 1 GET @ /models/1/frames/1/diagrams/1/elements -&gt; [=\r\nelement 1, element 2]&lt;br&gt;User 1 POST catch @ /models/1/frames/1/catches -&g=\r\nt; catch 1&lt;br&gt;User 1 GET @ /models/1/frames/1/diagrams/1/elements -&gt; [el=\r\nement 1, element 2, element 3]&lt;br&gt;User 1 POST patch @ /models/1/frames/1/pa=\r\ntches -&gt; patch 1&lt;br&gt;User 1 DELETE @ /models/1/frames/1&lt;br&gt;&lt;br&gt;// now tha=\r\nt both users shared their updates by posting a patch to their frame&lt;br&gt;// t=\r\nhe actual resource reflects all the updates and show the same to all users&lt;=\r\nbr&gt;User 1 GET @ /models/1/diagrams/1/elements -&gt; [element 1, element 2, =\r\nelement 3]&lt;br&gt;User 2 GET @ /models/1/diagrams/1/elements -&gt; [element 1, =\r\nelement 2, element 3]&lt;br&gt;&lt;br&gt;I&#39;m curious what other&#39;s think about this appr=\r\noach, so please share your thoughts on this pattern.&lt;br&gt;&lt;br&gt;Regards,&lt;br&gt;Die=\r\nderik van Leeuwen&lt;/font&gt;\n\r\n--2-6477838150-2498518207=:1--\r\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":69164307,"authorName":"mike amundsen","from":"mike amundsen &lt;mamund@...&gt;","profile":"mamund","replyTo":"SENDER","senderId":"t9GB8Ifl2MJwevwcSLH2c_xDzIO5NU_PAwqlDk0VF5jIv1CbnyP2xb72HLqUIBPZfn1upshtskHP-yXPrrYlz3x6zT2ugjM","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] the meaning of stateless","postDate":"1366503603","msgId":19310,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PENBUFdfOG03NHlYdHY5YVBuTndvVWpBWlFHX05XNFdRanpqMnhnUXc4c2RKbXhVOGVpUUBtYWlsLmdtYWlsLmNvbT4=","inReplyToHeader":"PENBUFdfOG03bmtZV3lRZTVmUWVqWUJ0aTl1TlUtdTZ3WGZnZ0VjTEhuOUZYRytNTm01QUBtYWlsLmdtYWlsLmNvbT4=","referencesHeader":"PENBR1ZiWEw2X09IT2hPVFMwa2YwU0tjV0EtPXpLWWJLTFFXVldmQm9US09tZzd2WHhFQUBtYWlsLmdtYWlsLmNvbT4gPENBUFdfOG03bmtZV3lRZTVmUWVqWUJ0aTl1TlUtdTZ3WGZnZ0VjTEhuOUZYRytNTm01QUBtYWlsLmdtYWlsLmNvbT4="},"prevInTopic":19309,"nextInTopic":19313,"prevInTime":19309,"nextInTime":19311,"topicId":19309,"numMessagesInTopic":86,"msgSnippet":"","rawEmail":"Return-Path: &lt;mca@...&gt;\r\nX-Sender: mca@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 52895 invoked by uid 102); 21 Apr 2013 00:20:24 -0000\r\nX-Received: from unknown (HELO mta2.grp.bf1.yahoo.com) (10.193.84.150)\n  by m1.grp.bf1.yahoo.com with SMTP; 21 Apr 2013 00:20:24 -0000\r\nX-Received: (qmail 26112 invoked from network); 21 Apr 2013 00:20:23 -0000\r\nX-Received: from unknown (HELO mail-we0-f176.google.com) (74.125.82.176)\n  by mta2.grp.bf1.yahoo.com with SMTP; 21 Apr 2013 00:20:23 -0000\r\nX-Received: by mail-we0-f176.google.com with SMTP id s10so749wey.35\n        for &lt;rest-discuss@yahoogroups.com&gt;; Sat, 20 Apr 2013 17:20:23 -0700 (PDT)\r\nX-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;\n        d=google.com; s=20120113;\n        h=x-received:mime-version:sender:in-reply-to:references:from:date\n         :x-google-sender-auth:message-id:subject:to:cc:content-type\n         :x-gm-message-state;\n        bh=FQFEiTAqmTY7X3Zp/D2DLp4t/FSaFSye929Z0R8ihWE=;\n        b=BHHDLk1VCigpgenGcO0+QdR+SnULnZR+XdjrKG2IOHWf+Snno2ZOjrZji7LILldDRR\n         CH1I4nzlDtJ1saG6csYeaYDGIuKiz2KbtfoSMptTBm1e0QeHtl/ymj6/iDSG4GauZdJ+\n         CXHiCCT8Rv4qBMtG+uru8DkxsAOo2dkPYWn4TEoxhDQyQ5P5/t7llhgnzrVOp7HqnfYJ\n         uyrVig40qp5X1rXEw3TS8EJ0NjPTkJzskH81UK1EIJHOELH4BHiJFEJ1I+WIyncEeuje\n         H3VP4dXIdz0kwCzgsOYj7mIvLGHTIA9VAL0qezjiABvmQnc9ihpOoY+iU+sVMYAjvH5d\n         c5EA==\r\nX-Received: by 10.194.89.169 with SMTP id bp9mr38729825wjb.57.1366503623181;\n Sat, 20 Apr 2013 17:20:23 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.194.136.176 with HTTP; Sat, 20 Apr 2013 17:20:03 -0700 (PDT)\r\nIn-Reply-To: &lt;CAPW_8m7nkYWyQe5fQejYBti9uNU-u6wXfggEcLHn9FXG+MNm5A@...&gt;\r\nReferences: &lt;CAGVbXL6_OHOhOTS0kf0SKcWA-=zKYbKLQWVWfBoTKOmg7vXxEA@...&gt;\n &lt;CAPW_8m7nkYWyQe5fQejYBti9uNU-u6wXfggEcLHn9FXG+MNm5A@...&gt;\r\nDate: Sat, 20 Apr 2013 20:20:03 -0400\r\nX-Google-Sender-Auth: hhhJL_T1vG7DthtXQkbAbT8FOVs\r\nMessage-ID: &lt;CAPW_8m74yXtv9aPnNwoUjAZQG_NW4WQjzj2xgQw8sdJmxU8eiQ@...&gt;\r\nTo: Brian Craft &lt;craft.brian@...&gt;\r\nCc: rest-discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Type: multipart/alternative; boundary=047d7bf198940b4ce604dad3eb50\r\nX-Gm-Message-State: ALoCoQlWWiLQtRRTskqOEaka0hcFzF1vD5NRIehyKf5yR0vZzHVBKcaVx9FjFOncV4qMWiD1P6rq\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: mike amundsen &lt;mamund@...&gt;\r\nSubject: Re: [rest-discuss] the meaning of stateless\r\nX-Yahoo-Group-Post: member; u=69164307; y=IgodLa09hRPUJMPtj81h-oQpIIjKvZZszG-1hJ_0D-wh\r\nX-Yahoo-Profile: mamund\r\n\r\n\r\n--047d7bf198940b4ce604dad3eb50\r\nContent-Type: text/plain; charset=ISO-8859-1\r\n\r\nFielding&#39;s definition of stateless is:\n\n&gt;\n&gt; &quot;[C]ommunication must be stateless in nature ... such that each request\n&gt; from client to server must contain all of the information necessary to\n&gt; understand the request, and cannot take advantage of any stored context on\n&gt; the server.&quot;[1]\n&gt;\n&gt; This constraint is not about how resources state is changed on the server\n&gt; (clients send representations to the server) or how application state\n&gt; changed on the client (servers send representations to the client).\n&gt; Instead, this constraint is about the nature of the messages\n&gt; (representations via entity-bodies + metadata via headers) that are sent\n&gt; between client and server when changing each other&#39;s state.\n&gt;\n&gt; Each message stands alone and does not depend upon previous messages.\n&gt;\n&gt; &lt;snip&gt;\n&gt; Perhaps to clarify what is meant in REST by &quot;stateless&quot; someone could give\n&gt; examples of things that *aren&#39;t* &quot;stateless&quot;, and contrast them to REST.\n&gt; &lt;/snip&gt;\n&gt;\n&gt; HTTP servers that maintain persistent session state for each client during\n&gt; the life of the client-server interaction set are not stateless.\n&gt;\n&gt; FTP servers that allow clients to change directories relative to the\n&gt; results of a directory change in a previous request (cd ../..) are not\n&gt; stateless.\n&gt;\n&gt; Hopefully, this gives you some helpful ideas.\n&gt;\n&gt;\n&gt; [1]\n&gt; http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm#sec_5_1_3\n&gt;\n&gt;\n&gt;\n&gt; mca\n&gt; +1.859.757.1449\n&gt; skype: mca.amundsen\n&gt; http://amundsen.com/blog/\n&gt; http://twitter.com/mamund\n&gt; https://github.com/mamund\n&gt; http://www.linkedin.com/in/mikeamundsen\n&gt;\n&gt;\n&gt;\n&gt; On Sat, Apr 20, 2013 at 10:33 AM, Brian Craft &lt;craft.brian@...&gt;wrote:\n&gt;\n&gt;&gt;\n&gt;&gt;\n&gt;&gt; I don&#39;t understand how the word &quot;stateless&quot; is being used in REST.\n&gt;&gt; Obviously POST and PUT create state on the server. Obviously, requests\n&gt;&gt; after a state change depend on that state change (e.g. by using a URL that\n&gt;&gt; was not valid before the state change).\n&gt;&gt;\n&gt;&gt; I can almost live with this usage of &quot;stateless&quot; for persistent objects\n&gt;&gt; stored on the server, because it can be thought of as not being &quot;session\n&gt;&gt; state&quot;: it lasts longer than a session. But in any moderately complex web\n&gt;&gt; app, if you try to design a REST API you will quickly hit GET size limits\n&gt;&gt; when doing complex queries. And then the suggestion is to do something like\n&gt;&gt; POST the query parameters, returning a Location header for a &quot;query&quot; object\n&gt;&gt; that can be fetched with GET. How is that not storing session data on the\n&gt;&gt; server? How is that different from non-REST solutions?\n&gt;&gt;\n&gt;&gt; There are three obvious differences between POSTing a query and just\n&gt;&gt; generically using POST instead of GET. POSTing a query requires two\n&gt;&gt; round-trips to the server, bad for latency. POSTing a query and using a\n&gt;&gt; Location header limits the response to the creation of a single object,\n&gt;&gt; which is fine for 1990&#39;s full-page-load design, but is unrealistic for any\n&gt;&gt; moderately complex ajax app, where an API call will result in the creation\n&gt;&gt; of multiple objects (e.g. creating related images). And POSTing a query\n&gt;&gt; requires the tracking of large numbers of transient &quot;query&quot; objects, hugely\n&gt;&gt; complicating both client and server, the very thing REST is supposed to\n&gt;&gt; avoid.\n&gt;&gt;\n&gt;&gt; Perhaps to clarify what is meant in REST by &quot;stateless&quot; someone could\n&gt;&gt; give examples of things that *aren&#39;t* &quot;stateless&quot;, and contrast them to\n&gt;&gt; REST.\n&gt;&gt;\n&gt;&gt;\n&gt;&gt; \n&gt;\n&gt;\n&gt;\n\r\n--047d7bf198940b4ce604dad3eb50\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;div dir=3D&quot;ltr&quot;&gt;&lt;span style=3D&quot;font-family:arial,helvetica,sans-serif&quot;&gt;Fie=\r\nlding&#39;s definition of stateless is:&lt;/span&gt;&lt;br&gt;&lt;div class=3D&quot;gmail_extra=\r\n&quot;&gt;&lt;div class=3D&quot;gmail_quote&quot;&gt;&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;mar=\r\ngin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex&quot;&gt;\n\n&lt;div dir=3D&quot;l=\r\ntr&quot;&gt;&lt;div&gt;&lt;font face=3D&quot;arial, helvetica, sans-serif&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;=\r\n&lt;font face=3D&quot;arial, helvetica, sans-serif&quot;&gt;&quot;[C]&lt;span style&gt;ommunicati=\r\non must be stateless in nature ...&lt;/span&gt;&lt;span style&gt;=A0such that each requ=\r\nest from client to server must contain all of the information necessary to =\r\nunderstand the request, and cannot take advantage of any stored context on =\r\nthe server.&quot;[1]&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;\n\n\n&lt;div&gt;&lt;span style&gt;&lt;font face=3D&quot;a=\r\nrial, helvetica, sans-serif&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=3D&quot;#0=\r\n00000&quot; face=3D&quot;arial, helvetica, sans-serif&quot;&gt;This constraint is not about h=\r\now resources state is changed on the server (clients send representations t=\r\no the server) or how application state changed on the client (servers send =\r\nrepresentations to the client). Instead, this constraint is about the natur=\r\ne of the messages (representations via entity-bodies + metadata via headers=\r\n) that are sent between client and server when changing each other&#39;s st=\r\nate.&lt;/font&gt;&lt;/div&gt;\n\n\n&lt;div&gt;&lt;font color=3D&quot;#000000&quot; face=3D&quot;arial, helvetica, =\r\nsans-serif&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=3D&quot;#000000&quot; face=3D&quot;arial, he=\r\nlvetica, sans-serif&quot;&gt;Each message stands alone and does not depend upon pre=\r\nvious messages.=A0&lt;/font&gt;&lt;/div&gt;\n\n\n&lt;div&gt;&lt;font color=3D&quot;#000000&quot; face=3D&quot;aria=\r\nl, helvetica, sans-serif&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;snip&gt;&lt;/div&gt;&lt;div&gt;&lt;div=\r\n class=3D&quot;im&quot;&gt;&lt;div dir=3D&quot;ltr&quot; style=3D&quot;font-family:arial,sans-serif;font-s=\r\nize:12.727272033691406px&quot;&gt;Perhaps to clarify what is meant in REST by &quot=\r\n;stateless&quot; someone could give examples of things that *aren&#39;t* &q=\r\nuot;stateless&quot;, and contrast them to REST.&lt;/div&gt;\n\n\n&lt;/div&gt;&lt;div style=3D=\r\n&quot;font-family:arial,sans-serif;font-size:12.727272033691406px&quot;&gt;&lt;/snip&gt;=\r\n&lt;/div&gt;&lt;div style=3D&quot;font-family:arial,sans-serif;font-size:12.7272720336914=\r\n06px&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=3D&quot;font-family:arial,sans-serif;font-size:12.727=\r\n272033691406px&quot;&gt;\n\n\nHTTP servers that maintain persistent session state for =\r\neach client during the life of the client-server interaction set are not st=\r\nateless.=A0&lt;/div&gt;&lt;div style=3D&quot;font-family:arial,sans-serif;font-size:12.72=\r\n7272033691406px&quot;&gt;&lt;br&gt;\n\n\n&lt;/div&gt;&lt;div style=3D&quot;font-family:arial,sans-serif;fo=\r\nnt-size:12.727272033691406px&quot;&gt;FTP servers that allow clients to change dire=\r\nctories relative to the results of a directory change in a previous request=\r\n=A0(cd ../..)=A0are not stateless.=A0&lt;/div&gt;\n\n\n&lt;div style=3D&quot;font-family:ari=\r\nal,sans-serif;font-size:12.727272033691406px&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=3D&quot;font-=\r\nfamily:arial,sans-serif;font-size:12.727272033691406px&quot;&gt;Hopefully, this giv=\r\nes you some helpful ideas.=A0&lt;/div&gt;&lt;div style=3D&quot;font-family:arial,sans-ser=\r\nif;font-size:12.727272033691406px&quot;&gt;\n\n\n&lt;br&gt;&lt;/div&gt;&lt;div style=3D&quot;font-family:a=\r\nrial,sans-serif;font-size:12.727272033691406px&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=3D&quot;fon=\r\nt-family:arial,sans-serif;font-size:12.727272033691406px&quot;&gt;[1]=A0&lt;a href=3D&quot;=\r\nhttp://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm#sec_=\r\n5_1_3&quot; style=3D&quot;font-family:arial;font-size:small&quot; target=3D&quot;_blank&quot;&gt;http:/=\r\n/www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm#sec_5_1_3&lt;=\r\n/a&gt;&lt;/div&gt;\n\n&lt;span class=3D&quot;HOEnZb&quot;&gt;&lt;font color=3D&quot;#888888&quot;&gt;\n&lt;div style=3D&quot;fo=\r\nnt-family:arial,sans-serif;font-size:12.727272033691406px&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;=\r\nbr&gt;&lt;/div&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=3D&quot;gmail_extra&quot;&gt;&lt;span class=\r\n=3D&quot;HOEnZb&quot;&gt;&lt;font color=3D&quot;#888888&quot;&gt;&lt;br clear=3D&quot;all&quot;&gt;&lt;div&gt;mca&lt;div&gt;\n\n&lt;a hre=\r\nf=3D&quot;tel:%2B1.859.757.1449&quot; value=3D&quot;+18597571449&quot; target=3D&quot;_blank&quot;&gt;+1.859=\r\n.757.1449&lt;/a&gt;&lt;br&gt;skype: mca.amundsen&lt;br&gt;&lt;a href=3D&quot;http://amundsen.com/blog=\r\n/&quot; target=3D&quot;_blank&quot;&gt;http://amundsen.com/blog/&lt;/a&gt;&lt;br&gt;\n&lt;a href=3D&quot;http://tw=\r\nitter.com/mamund&quot; target=3D&quot;_blank&quot;&gt;http://twitter.com/mamund&lt;/a&gt;&lt;br&gt;&lt;a hre=\r\nf=3D&quot;https://github.com/mamund&quot; target=3D&quot;_blank&quot;&gt;https://github.com/mamund=\r\n&lt;/a&gt;&lt;br&gt;&lt;a href=3D&quot;http://www.linkedin.com/in/mikeamundsen&quot; target=3D&quot;_blan=\r\nk&quot;&gt;http://www.linkedin.com/in/mikeamundsen&lt;/a&gt;&lt;br&gt;\n\n\n&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/font=\r\n&gt;&lt;/span&gt;&lt;div&gt;&lt;div class=3D&quot;h5&quot;&gt;\n&lt;br&gt;&lt;br&gt;&lt;div class=3D&quot;gmail_quote&quot;&gt;On Sat, =\r\nApr 20, 2013 at 10:33 AM, Brian Craft &lt;span dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mail=\r\nto:craft.brian@...&quot; target=3D&quot;_blank&quot;&gt;craft.brian@...&lt;/a&gt;&gt;&lt;/=\r\nspan&gt; wrote:&lt;br&gt;&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;margin:0 0 0 .8e=\r\nx;border-left:1px #ccc solid;padding-left:1ex&quot;&gt;\n\n\n\n\n\n\n\n\n\n        \n\n\n\n\n&lt;div&gt;=\r\n\n\n\n\n\n\n&lt;br&gt;&lt;br&gt;\n\n\n\n\n&lt;div dir=3D&quot;ltr&quot;&gt;&lt;span style=3D&quot;font-family:arial,sans-s=\r\nerif;font-size:12.727272033691406px&quot;&gt;I don&#39;t understand how the word &q=\r\nuot;stateless&quot; is being used in REST. Obviously POST and PUT create st=\r\nate on the server. Obviously, requests after a state change depend on that =\r\nstate change (e.g. by using a URL that was not valid before the state chang=\r\ne).&lt;/span&gt;&lt;div style=3D&quot;font-family:arial,sans-serif;font-size:12.727272033=\r\n691406px&quot;&gt;\n\n\n\n&lt;br&gt;&lt;/div&gt;&lt;div style=3D&quot;font-family:arial,sans-serif;font-siz=\r\ne:12.727272033691406px&quot;&gt;I can almost live with this usage of &quot;stateles=\r\ns&quot; for persistent objects stored on the server, because it can be thou=\r\nght of as not being &quot;session state&quot;: it lasts longer than a sessi=\r\non. But in any moderately complex web app, if you try to design a REST API =\r\nyou will quickly hit GET size limits when doing complex queries. And then t=\r\nhe suggestion is to do something like POST the query parameters, returning =\r\na Location header for a &quot;query&quot; object that can be fetched with G=\r\nET. How is that not storing session data on the server? How is that differe=\r\nnt from non-REST solutions?&lt;/div&gt;\n\n\n\n&lt;div style=3D&quot;font-family:arial,sans-s=\r\nerif;font-size:12.727272033691406px&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=3D&quot;font-family:ar=\r\nial,sans-serif;font-size:12.727272033691406px&quot;&gt;There are three obvious diff=\r\nerences between POSTing a query and just generically using POST instead of =\r\nGET. POSTing a query requires two round-trips to the server, bad for latenc=\r\ny. POSTing a query and using a Location header limits the response to the c=\r\nreation of a single object, which is fine for 1990&#39;s full-page-load des=\r\nign, but is unrealistic for any moderately complex ajax app, where an API c=\r\nall will result in the creation of multiple objects (e.g. creating related =\r\nimages). And POSTing a query requires the tracking of large numbers of tran=\r\nsient &quot;query&quot; objects, hugely complicating both client and server=\r\n, the very thing REST is supposed to avoid.&lt;/div&gt;\n\n\n\n&lt;div style=3D&quot;font-fam=\r\nily:arial,sans-serif;font-size:12.727272033691406px&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=\r\n=3D&quot;font-family:arial,sans-serif;font-size:12.727272033691406px&quot;&gt;Perhaps to=\r\n clarify what is meant in REST by &quot;stateless&quot; someone could give =\r\nexamples of things that *aren&#39;t* &quot;stateless&quot;, and contrast th=\r\nem to REST.&lt;/div&gt;\n\n\n\n&lt;/div&gt;\n\n\n\n\n\n\n&lt;br&gt;\n\n    \n    \n&lt;br&gt;\n\n\n\n\n&lt;div width=3D&quot;1&quot;=\r\n style=3D&quot;color:white;clear:both&quot;&gt;&lt;/div&gt;\n\n\n\n&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;/=\r\ndiv&gt;&lt;/div&gt;\n&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;\n\r\n--047d7bf198940b4ce604dad3eb50--\r\n\n"}}
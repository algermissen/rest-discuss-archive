{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":135166739,"authorName":"Jeffrey Winter","from":"&quot;Jeffrey Winter&quot; &lt;JeffreyWinter@...&gt;","profile":"kimberliewinter","replyTo":"SENDER","senderId":"8kv_dG3FEWGkua2sb2P2t6BUFj6Bw7Wo8wWaw9FdQTkJ3Dshw1ZnbRyfpja8CvZafkWIBIG0D4jN_7Ur_HV1aUnfsChbdHY6nmEGGntMGg","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] RESTful Queues","postDate":"1103155208","msgId":4707,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDAwNWQwMWM0ZTMwMiQzNjk1YzA0MCQ2NDAxYThjMEB3aW50ZXI+","referencesHeader":"PDAwMjAwMWM0ZTJlNiQwMmE0ZDk5MCQzNTY4MGEwYUBjcmQuY29tPiA8NDFDMEEyRUEuOTAzMDEwOEB2ZG0uY2M+ICA8MDAwYTAxYzRlMmU4JGMwZDc2YzUwJDM1NjgwYTBhQGNyZC5jb20+IDwxMTAzMTQ1Mzc0LjEzMDI5LjkuY2FtZWxAcGhvZW5peD4="},"prevInTopic":4706,"nextInTopic":4708,"prevInTime":4706,"nextInTime":4708,"topicId":4698,"numMessagesInTopic":21,"msgSnippet":"Okay, here s another crack at this using GET and DELETE. 1. Start with a queue at /queue.  A GET at that queue hangs until a message occurs. GET /queue The","rawEmail":"Return-Path: &lt;JeffreyWinter@...&gt;\r\nX-Sender: JeffreyWinter@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 28141 invoked from network); 16 Dec 2004 00:03:46 -0000\r\nReceived: from unknown (66.218.66.166)\n  by m6.grp.scd.yahoo.com with QMQP; 16 Dec 2004 00:03:46 -0000\r\nReceived: from unknown (HELO moe.crd.com) (209.51.250.33)\n  by mta5.grp.scd.yahoo.com with SMTP; 16 Dec 2004 00:03:46 -0000\r\nReceived: from winter ([65.96.172.188] unverified) by moe.crd.com with Microsoft SMTPSVC(5.0.2195.6713);\n\t Wed, 15 Dec 2004 19:03:45 -0500\r\nMessage-ID: &lt;005d01c4e302$3695c040$6401a8c0@winter&gt;\r\nTo: &lt;rest-discuss@yahoogroups.com&gt;\r\nReferences: &lt;002001c4e2e6$02a4d990$35680a0a@...&gt; &lt;41C0A2EA.9030108@...&gt;  &lt;000a01c4e2e8$c0d76c50$35680a0a@...&gt; &lt;1103145374.13029.9.camel@phoenix&gt;\r\nDate: Wed, 15 Dec 2004 19:00:08 -0500\r\nMIME-Version: 1.0\r\nContent-Type: text/plain;\n\tcharset=&quot;Windows-1252&quot;\r\nContent-Transfer-Encoding: 7bit\r\nX-Priority: 3\r\nX-MSMail-Priority: Normal\r\nX-Mailer: Microsoft Outlook Express 6.00.3790.181\r\nX-MimeOLE: Produced By Microsoft MimeOLE V6.00.3790.181\r\nReturn-Path: jeffreywinter@...\r\nX-OriginalArrivalTime: 16 Dec 2004 00:03:45.0440 (UTC) FILETIME=[B5E5EA00:01C4E302]\r\nX-eGroups-Remote-IP: 209.51.250.33\r\nFrom: &quot;Jeffrey Winter&quot; &lt;JeffreyWinter@...&gt;\r\nSubject: Re: [rest-discuss] RESTful Queues\r\nX-Yahoo-Group-Post: member; u=135166739\r\nX-Yahoo-Profile: kimberliewinter\r\n\r\nOkay, here&#39;s another crack at this using GET and DELETE.\n\n1. Start with a queue at /queue.  A\n   GET at that queue hangs until a message occurs.\n\n     GET /queue\n\n   The reponse indicates a redirect to the URL\n   where the first message is located:\n\n     HTTP/1.1 303 See Other\n     Location: /queue/19348\n\n   Any subsiquent request at the /queue resource would\n   return the same event id until the client has\n   acknowledged receipt (and a new message arrives.)\n\n2. The client does a GET at that location to get the\n   message:\n\n     GET /queue/19348\n\n   The response contains the message:\n\n     HTTP/1.1 200 OK\n\n     &lt;message&gt;...&lt;/message&gt;\n\n   Any subsiquent requests at that location will return\n   the same message state without effecting the state\n   of the queue itself.\n\n3. The client is responsible for deleting the message\n   off the head of the queue.  This is in effect an\n   acknowledgement to the server that the message was\n   received by the client:\n\n     DELETE /queue/19348\n\n   The response informs the client that the message\n   is gone:\n\n     HTTP/1.1 204 No Content\n\n   Any subsiquent DELETE requests at that location\n   have no effect (as is approriate for an idempotent\n   method.)  This may be necessary if, for example,\n   the communication channel were lost; the client can\n   safely repeat the DELETE message without effecting\n   the state of the queue itself.\n\n   The server can now make the next event\n   available at another location when necessary.\n\n4. Any new request at the queue would return the\n   location of the next event, e.g.:\n\n     GET /queue\n     Host: events.crims\n\n   Returns a different location than the initial\n   request:\n\n     HTTP/1.1 303 See Other\n     Location: /queue/38293\n\n5. An extension header could be employeed on the\n   response to the DELETE (or even the GET) which\n   would give the location of the next event, thus\n   avoiding the need to the redirect from the\n   queue root.\n\n     HTTP/1.1 204 No Context\n     X-NextMessage: /queue/38293\n\nSince they are &quot;safe&quot; methods, the client can repeatedly\ninvoke a GET or a DELETE on any resource if for any\nreason communication or context has been lost, and can\nre-establish context by invoking a GET on the queue root.\n\n\n"}}
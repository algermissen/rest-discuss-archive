{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":87113616,"authorName":"S. Mike Dierken","from":"&quot;S. Mike Dierken&quot; &lt;mdierken@...&gt;","profile":"mdierken","replyTo":"SENDER","senderId":"S5lib1-VAuWfgpVL00brQZvJ-2W2SS7rrn0BFSSfFlzQ2nLF2eOHIS28gRFG7toP5nz2Y7tKgxfwTMdRf5NmWLA3eOEg5qJN68VYo-LqLg","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Idea: Simple Web Service Behaviour Language","postDate":"1013732839","msgId":726,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PE9FMjNjWVRqcjhjVTZ4ZlBUZWkwMDAwYTRmMUBob3RtYWlsLmNvbT4=","referencesHeader":"PDNDNkMzOTBCLjExNEEzRjhAcHJlc2NvZC5uZXQ+"},"prevInTopic":725,"nextInTopic":727,"prevInTime":725,"nextInTime":727,"topicId":725,"numMessagesInTopic":41,"msgSnippet":"I really like the idea. Discovery is a missing piece with REST and HTTP - at least in the statically defined way you describe. I also like that the design","rawEmail":"Return-Path: &lt;mdierken@...&gt;\r\nX-Sender: mdierken@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_0_2); 15 Feb 2002 00:27:21 -0000\r\nReceived: (qmail 2116 invoked from network); 15 Feb 2002 00:27:20 -0000\r\nReceived: from unknown (216.115.97.167)\n  by m9.grp.snv.yahoo.com with QMQP; 15 Feb 2002 00:27:20 -0000\r\nReceived: from unknown (HELO hotmail.com) (64.4.16.80)\n  by mta1.grp.snv.yahoo.com with SMTP; 15 Feb 2002 00:27:20 -0000\r\nReceived: from mail pickup service by hotmail.com with Microsoft SMTPSVC;\n\t Thu, 14 Feb 2002 16:27:20 -0800\r\nTo: &lt;rest-discuss@yahoogroups.com&gt;,\n\t&quot;Paul Prescod&quot; &lt;paul@...&gt;\r\nReferences: &lt;3C6C390B.114A3F8@...&gt;\r\nSubject: Re: [rest-discuss] Idea: Simple Web Service Behaviour Language\r\nDate: Thu, 14 Feb 2002 16:27:19 -0800\r\nMIME-Version: 1.0\r\nContent-Type: text/plain;\n\tcharset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: 7bit\r\nX-Priority: 3\r\nX-MSMail-Priority: Normal\r\nX-Mailer: Microsoft Outlook Express 5.50.4807.1700\r\nX-MIMEOLE: Produced By Microsoft MimeOLE V5.50.4807.1700\r\nMessage-ID: &lt;OE23cYTjr8cU6xfPTei0000a4f1@...&gt;\r\nX-OriginalArrivalTime: 15 Feb 2002 00:27:20.0258 (UTC) FILETIME=[87A6C220:01C1B5B7]\r\nFrom: &quot;S. Mike Dierken&quot; &lt;mdierken@...&gt;\r\nX-Yahoo-Group-Post: member; u=87113616\r\nX-Yahoo-Profile: mdierken\r\n\r\nI really like the idea. Discovery is a missing piece with REST and HTTP - at\nleast in the statically defined way you describe.\nI also like that the design /starts/ with lots of documents and lots of\nservices, rather than just one as in wsdl.\n\nmike\n\n----- Original Message -----\nFrom: &quot;Paul Prescod&quot; &lt;paul@...&gt;\nTo: &lt;rest-discuss@yahoogroups.com&gt;\nSent: Thursday, February 14, 2002 2:24 PM\nSubject: [rest-discuss] Idea: Simple Web Service Behaviour Language\n\n\n&gt; Idea I&#39;ve been noodling....\n&gt; ====\n&gt; Abstract\n&gt;\n&gt; The basic model of a REST Web Service is that services are described as\n&gt; webs of documents. Typically the documents will be dynamically generated\n&gt; but that is not necessarily the case. Just as with services based on\n&gt; COM, CORBA or SOAP, it would be nice to have a declaration of a\n&gt; service&#39;s behaviour in advance so that reliable software can be\n&gt; constructed with less testing.\n&gt;\n&gt; Insofar as a service consists of documents, especially XML documents,\n&gt; XML schemas provide a partial description of the service. What they do\n&gt; not describe is the transitions from one document to another. That&#39;s\n&gt; what SWSBL does. It is intended to be the IDL/WSDL for HTTP web\n&gt; services. Just as with IDL it may one day make sense to &quot;bind&quot; SWSBL\n&gt; into a statically typed programming language to make the construction of\n&gt; type-incorrect client software more difficult.\n&gt;\n&gt; Model\n&gt;\n&gt; Think of a web service as a web of document types. The &quot;find airline\n&gt; seat&quot; document points to the &quot;reserve seat&quot; document through a URI. That\n&gt; document points to the &quot;purchase seat&quot; document through a URI and so\n&gt; forth. Each document has associated with it an XML Schema but also a\n&gt; behaviour description (or perhaps just a fragment of a behaviour\n&gt; description ). The &quot;root&quot; behaviour description for a service asserts\n&gt; that a particular URI references a service that conforms to a particular\n&gt; behaviour description.\n&gt; As you move from document to document following links, each link is\n&gt; strongly and statically typed by the Behaviour Description. A failure to\n&gt; conform is a runtime error, just as with non-validation against an XML\n&gt; Schema or WSDL service description.\n&gt;\n&gt; Sometimes the client wants to send information to the server. HTTP\n&gt; allows you to do this either by POSTing to a document or PUTting to a\n&gt; URI provided by the server. So beyond being strongly typed, each URI\n&gt; must have associated with it a set of possible methods and inputs. Think\n&gt; of this as a 4-tuple:\n&gt;\n&gt;  * HTTP method\n&gt;  * query parameters\n&gt;  * HTTP headers\n&gt;  * body content (often XML in some vocabulary)\n&gt;\n&gt; SWSBL will help the service provider to define these valid inputs in\n&gt; advance so that client software can be reliably constructed.\n&gt;\n&gt; Sometimes you have an option of PUT and/or POST and/or DELETE so we must\n&gt; have multiple possible input actions associated with each URI. The input\n&gt; to PUT is likely to be very different than the input to POST and DELETE\n&gt; or GET have no body inputs. SWSBL will allow that.\n&gt;\n&gt; Once the HTTP request has been made, a response comes back. In order to\n&gt; build robust, statically typed, services we want to know what valid\n&gt; range of responses are legal. So for each sort of input, a range of\n&gt; valid outputs may be described. These consist of HTTP response and body\n&gt; content (perhaps constrained to one or more XML vocabularies). If a\n&gt; statically typed programming language has data binding then one can\n&gt; imagine that each &quot;type&quot; of input maps to a particular method and the\n&gt; result of the method would be either an XML DOM or the statically typed\n&gt; result of the data binding. (e.e. IPurchaseOrder instead of\n&gt; IDOMDocument). To make this binding easier, input types should be named,\n&gt; similar to operations in WSDL.\n&gt;\n&gt; The fundamental difference between this model and WSDL&#39;s is that this is\n&gt; about interactions between web service components (every page is a\n&gt; component) whereas WSDL is about describing a single web service\n&gt; component (only one SWSBL page).\n&gt;\n&gt;\n&gt; To unsubscribe from this group, send an email to:\n&gt; rest-discuss-unsubscribe@yahoogroups.com\n&gt;\n&gt;\n&gt;\n&gt; Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/\n&gt;\n&gt;\n&gt;\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":10266038,"authorName":"Jeff Bone","from":"Jeff Bone &lt;jbone@...&gt;","replyTo":"SENDER","senderId":"canLKTm2I6Dnwm68A6j4rffApKd-70yiHloB1PpoMSt8_ly_FYWGtvgwpGrW3Q_mtlOTmto010Dgd4OObmjQfQg","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Re: Teaching Paul about Filesystems ;-) was re:  Opacity Reconsidered","postDate":"1015548330","msgId":931,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDNDODgwOUE5LjJDOUU2QTZBQGp1bXAubmV0Pg==","referencesHeader":"PDNDODY5ODNGLjFDRkIxN0VBQGp1bXAubmV0PiA8M0M4NjlGMDQuNEJBNDk1MzRAcHJlc2NvZC5uZXQ+IDwzQzg2QTZDQy5CM0M3OUE1MUBqdW1wLm5ldD4gPDNDODZBQjA3LjhFRjlDNDMxQHByZXNjb2QubmV0PiA8M0M4NkFFMTUuNTEzRTA0MjJAanVtcC5uZXQ+IDwzQzg2QjJERC5ENERCMUYwOEBwcmVzY29kLm5ldD4gPDNDODZDQkM3LjUyQjU3RTM0QGp1bXAubmV0PiA8M0M4NkQxNEEuOEQwRkE5RTdAcHJlc2NvZC5uZXQ+IDwzQzg2REQ4RC5ENDQwOEI3NUBqdW1wLm5ldD4gPDNDODZFODIyLkI5MDM0NjJAcHJlc2NvZC5uZXQ+IDwzQzg3MEJBNy45Q0M5QjZCMUBqdW1wLm5ldD4gPDNDODdBRDhGLjEzQ0RENDE0QHByZXNjb2QubmV0Pg=="},"prevInTopic":930,"nextInTopic":933,"prevInTime":930,"nextInTime":932,"topicId":903,"numMessagesInTopic":24,"msgSnippet":"Geez, Paul, you re going for an alltime record in how many times one can be demonstrably wrong in a single e-mail.  Please take the time to read this if we re","rawEmail":"Return-Path: &lt;jbone@...&gt;\r\nX-Sender: jbone@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: unknown); 8 Mar 2002 02:29:58 -0000\r\nReceived: (qmail 12432 invoked from network); 8 Mar 2002 00:49:04 -0000\r\nReceived: from unknown (216.115.97.172)\n  by m4.grp.snv.yahoo.com with QMQP; 8 Mar 2002 00:49:04 -0000\r\nReceived: from unknown (HELO blanco.clickfeed.com) (207.8.92.96)\n  by mta2.grp.snv.yahoo.com with SMTP; 8 Mar 2002 00:49:03 -0000\r\nReceived: from jump.net (cust-92-97.customer.jump.net [207.8.92.97])\n\tby blanco.clickfeed.com (8.10.0/8.10.0) with ESMTP id g280mxO26819;\n\tThu, 7 Mar 2002 18:48:59 -0600\r\nMessage-ID: &lt;3C8809A9.2C9E6A6A@...&gt;\r\nDate: Thu, 07 Mar 2002 18:45:30 -0600\r\nX-Mailer: Mozilla 4.7 [en]C-CCK-MCD {Sony}  (Win98; I)\r\nX-Accept-Language: en\r\nMIME-Version: 1.0\r\nTo: Paul Prescod &lt;paul@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nSubject: Re: [rest-discuss] Re: Teaching Paul about Filesystems ;-) was re: \n Opacity Reconsidered\r\nReferences: &lt;3C86983F.1CFB17EA@...&gt; &lt;3C869F04.4BA49534@...&gt; &lt;3C86A6CC.B3C79A51@...&gt; &lt;3C86AB07.8EF9C431@...&gt; &lt;3C86AE15.513E0422@...&gt; &lt;3C86B2DD.D4DB1F08@...&gt; &lt;3C86CBC7.52B57E34@...&gt; &lt;3C86D14A.8D0FA9E7@...&gt; &lt;3C86DD8D.D4408B75@...&gt; &lt;3C86E822.B903462@...&gt; &lt;3C870BA7.9CC9B6B1@...&gt; &lt;3C87AD8F.13CDD414@...&gt;\r\nContent-Type: text/plain; charset=us-ascii\r\nContent-Transfer-Encoding: 7bit\r\nFrom: Jeff Bone &lt;jbone@...&gt;\r\nX-Yahoo-Group-Post: member; u=10266038\r\n\r\n\nGeez, Paul, you&#39;re going for an alltime record in how many times one can be demonstrably wrong in a\nsingle e-mail.  Please take the time to read this if we&#39;re going to keep this up, as we&#39;re now\nhitting a point where I&#39;m demonstrating the incorrectness of certain of your assertions *repeatedly*\nand yet you keep insisting on them.  I have no problem with *either* being wrong or telling somebody\nthey are wrong --- mistakes made once are good, but the same mistakes made multiple times are stupid\nand annoying.  I&#39;m sorry if that&#39;s inflammatory, but if you can&#39;t learn, don&#39;t argue.\n\nPaul Prescod wrote:\n\n&gt; Well, go do the research! I have not run into any problems that name\n&gt; transparency would help me to solve. The examples you&#39;ve presented have\n&gt; been trivially solvable with hypertext, using existing techniques.\n\nNot true.  For the *fourth* time (counting the Wiki) here&#39;s a trivial example that debunks this\nmyth, a problem which generative names solve which cannot be solved via hypertext.  You are a Web\ncrawler.  Your job is to find all the public objects on a Web server, *including the one or ones\nthat are not linked to by other objects.*  Generative, structured names can solve this problem.\nHypermedia cannot, as by definition these objects are not part of the hypergraph.\n\nPaul, you can go on asserting till the cows come home that I haven&#39;t give you such an example, but\nthe problem appears to be that you haven&#39;t read it, undertood it, and acknowledged it.\n\n&gt; You\n&gt; admit that making name-based navigation work as well as hypertext\n&gt; navigation would require a bunch of new standards, so I think you need\n&gt; to demonstrate that there is some payoff for that effort.\n\nNo more, say, than you need to demonstrate the advantages of e.g. WRDL.\n\n&gt; Here are the\n&gt; advantages I&#39;ve heard you cite:\n&gt;\n&gt;  1. Guessability for humans -- nobody disputes the value of this. But\n&gt; the authoritative way to navigate for humans must be hypertext. i.e.\n&gt; I&#39;ll kick your ass if you build a site with a /search but no search\n&gt; button. On the other hand, having a search button that goes to\n&gt; www.google.com rather than /search seems acceptable to me. So you may\n&gt; create URIs that are readable but you should ACT as if they are opaque.\n\nThe last statement is non-sequiter from your example.  But let&#39;s be clear:  there is a *difference*\nbetween navigation and directly naming an object.  Both are useful in different contexts.  In\ngeneral, however, navigation is more expensive than just simply &quot;going&quot; to the resource in\nquestion.  If in order to get to your search page I must first pull up your front page and click a\nlink, this is less useful than being able to type in .../search and get to the same place.\n\n&gt;  2. Guessability for computers -- the only way you could make things\n&gt; guessable for computers is to invent this &quot;generative grammar&quot; thing.\n\nIt&#39;s not an invention, we&#39;ve been using generative grammars for ages.  The question is how and\nwhether to apply this kind of thing to the Web in order to (a) solve problems hypermedia cannot\nsolve, such as dealing with objects that do not reside in hypermedia and / or link inconcistencies,\nor (b) solve problems that hypermedia can solve but for which name-based solutions are easier, more\nuseful, or more efficient.\n\n&gt; First, we already have most of that in HTML forms and XForms. Second,\n&gt; guessability is never as good as certainty and certainty can be provided\n&gt; more easily through hypertext.\n\nI&#39;m not arguing purely for guessability.  Consider:  if I am on a UNIX box, I don&#39;t have to &quot;guess&quot;\nwhether /etc, /dev, etc. will be there --- they will.  I know this because I know the organizational\nstructure that the OS conforms to and presents through the filesystem.\n\n&gt; You do not demonstrate why\n&gt; this is better.\n\nThe above example (which you&#39;re blissfully refusing to grok ;-) demonstrates one way in which this\nis &quot;better&quot; i.e. useful for tasks hypermedia isn&#39;t useful for.\n\n&gt; By the way, note that in Unix it is common to &quot;discover&quot;\n&gt; new files by going to a directory and getting a listing. Getting a\n&gt; listing in HTTP is doing a GET and parsing the XML. Unix programs do not\n&gt; discover the list of new processes by poking at /proc/random_number.\n&gt; Rather they do an LS and *parse the result* (semantically...of course\n&gt; this is not precisely what happens in C programs).\n\nThat&#39;s true, and this is a good point.  However, programs on various UNIXen *do* indeed &quot;construct&quot;\nsynthetic filenames synthetically based on conventions, rules, etc.  Debuggers contruct filenames to\nreference the /proc/n/mem psuedofile representing the memory of PID n that they are debugging.\nLogging systems manipulate filenames of e.g. the form /var/logs/&lt;software&gt;/&lt;year&gt;/&lt;month&gt;/&lt;day&gt; and\nso on.  Archives of various things synthesize filenames much like the following to organize the\ninformation they manage.  These things don&#39;t &quot;discover&quot; anything by traversing the filesystem from\nsome well-known entry point;  they have a priori information about how the namespace is organized,\nand they use this constructively to manage the information space.\n\nThere&#39;s several additional examples of the use of structured names that are not and cannot be\naccomodated in hypermedia or other navigational metaphors.  In all cases, names are computed rather\nthan navigated to.\n\n&gt; 3. As a resource modeling tool -- if you treat this as similar to 1., I\n&gt; have no problem with it. Make meaningful names for communication among\n&gt; humans and then write software that treats the names as meaningless.\n\nThat&#39;s how this started, in a sense, but the more I thought about it the more I discovered that\nstructured and semantically-meaningful names were as or even more useful to softare.\n\n&gt; Nobody, anywhere, would say that it is bad to embed information names.\n\nTBL would, and does in his explanation / justification / rationalization of the Opacity Axiom and\nelsewhere.\n\n&gt; The problem is making names the canonical source for information.\n\nDid you think I suggested this?  If so, you&#39;re wrong.\n\n&gt; &gt; As for the horrors of new schema languages, conventions, and interface definition systems...\n&gt; &gt; WRDL?  I rest my case.  If you&#39;re going to argue, you should at least try not to argue with\n&gt; &gt; yourself. ;-)  (Sometimes, that&#39;s hard --- trust me, I know. ;-)\n&gt;\n&gt; WRDL is based on the notion that the hypertext is the definitive means\n&gt; for navigating between components.\n\nSo what you&#39;re telling me is that invention of new &quot;schema languages, conventions, and interface\ndefinition systems&quot; is a futile activity, to be discouraged and avoided...  unless you&#39;re dogma\ncompliant?  GMAB.  I&#39;m not casting aspersions on your effort at all.  Rather, I believe that such\neffort is valid regardless of whether it conforms to doctrine or not, particularly if deviating from\ndoctrine produces something useful that does not devalue other doctrinologically-appropriate tools.\n\n&gt; If we made names the definitive means\n&gt; then your new language would probably be a appropriate. But as I\n&gt; understand it, what you are arguing is that we should have both.\n\nWhat I am arguing is that we *do* have both (relative URI) and that TBL&#39;s own Design Principle of\nTolerance as well as the general attention to extensibility and openness in other areas of Web\ndesign argues --- contrary to the axiom --- for opening up the semantics of URI for other purposes,\nin effect *truly* allowing namespace owners to use their namespaces as they see fit.  (They already\ndo the latter;  I&#39;m simply advocating a mechanism to encourage more discipline and consistency.)\n\n&gt; Names\n&gt; should be the definitive in some circumstances and hypertext in others.\n&gt; That means we need both WRDL (or something like it) and a generative\n&gt; grammar language. We need both WRDL&#39;s notion of a resource type and your\n&gt; notion of a URI interface type. Until I hear some compelling advantages\n&gt; for having two different, parallel authoritative navigation mechanisms,\n&gt; I&#39;d rather apply Occam&#39;s razor.\n\nOccam&#39;s razor only applies if the mechanisms (navigation and name generation) are expressively\nequivalent.  They aren&#39;t, as I&#39;ve demonstrated repeatedly with my crawler example.  Both models need\nto exist.  (Actually, while it&#39;s provably true that generative names can do things hypergraph\ntraversal cannot, the converse has yet to be proven in this discussion.  But I&#39;m generously willing\nto grant that it&#39;s probably the case that both mechanisms are necessary.)\n\n&gt; My model: Somebody gives me a URI, like\n&gt; &quot;www.foobar.com/blahservice.xml&quot;.\n\nI completely understand your model.  I took the time to do so.  I rather like it.\n\n&gt; Now what do YOU propose? I look at the URI document and then I take its\n&gt; name and tack on a /jeffsnamingconventions or a /paulsnamingconventions\n&gt; or a /mikesnamingconventions, etc., etc. until I get a &quot;hit&quot;? When I\n&gt; find a hit I know what generative grammar it is using and I construct\n&gt; other names based on the base name?\n\nThis is a bit of a bad example;  generative names are bad for generating names in sparse\nnamespaces.  They&#39;re good, for example, for calculating the name of a particular archival object\ngiven the name of an earlier one + a syntax for representing time in the name + an understanding of\nthe &quot;period&quot; of the archive.\n\n&gt; The value of namespaces as organizational tools depends heavily on the\n\nThanks for the lesson, Paul, I&#39;m quite familiar with Plan 9. ;-)\n\n&gt; &gt; ... You make this\n&gt; &gt; assertion with very little backup, and contrary to the prevailing opinion of some of the\n&gt; &gt; world&#39;s most influential computer scientists.\n&gt;\n&gt; Once again you&#39;re shifting around.\n\nThere&#39;s a lot of ground to cover in debunking the myth of opacity.\n\n&gt; I&#39;m talking about good application\n&gt; design in a system with the constaints of the Web or (to some extent)\n&gt; CIFS/SMB. Plan 9 is a totally different world because Plan 9 is an\n&gt; *operating system* not just a file system and it manages many things in\n&gt; the kernel that we cannot do on the Web.\n\nThis argument isn&#39;t compelling.  We&#39;re talking about the use of namespaces and naming.  There are\nsimilarities.  There are differences.  As long as we don&#39;t ignore these, it&#39;s possible to use\nlessons learned in one in the other context.\n\n&gt; Yes, if we could push namespace\n&gt; merging onto the client side on the Web then of course that would be a\n&gt; very powerful tool.\n\nDo you think I&#39;m suggesting that?  I&#39;m not.\n\n&gt; In fact, hypertext is all we can transmit to the\n&gt; client side so in essence we do namespace merging using hypertext.\n\nThe latter assertion is false.  A large majority by volume of the traffic on the Web is not\nhypertext but rather opaque media objects.\n\n&gt; That only works because you have *kernel support* for making namespaces\n&gt; look very different than physical layout.\n\nThis is false.  The very thing I was referring you to which you *clearly* haven&#39;t bothered to\ninvestigate --- AT&T&#39;s 3DFS --- is a userspace per-process virtual filesystem implementation that\nruns on many different platforms with no kernel support at all.\n\n&gt; The web *has no such thing*. I\n&gt; can&#39;t have a file &quot;appear to be&quot; on one machine for one user and on\n&gt; another machine for another user without considerable runtime expense\n&gt; and complexity.\n\nThis is also trivially false, as demonstrated by (for instance) mirroring, etc.\n\n&gt; Once you address it on the Web we&#39;ll be able to use namespaces as an\n&gt; organizational tool on the Web.\n\nBut I&#39;m not going to be allowed to address it if everybody wants to continue being delusional about\nURI opacity. ;-)\n\njb\n\n\n\n"}}
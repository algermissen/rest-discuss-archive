{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":63473576,"authorName":"Lucas Gonze","from":"&quot;Lucas Gonze&quot; &lt;lucas@...&gt;","profile":"lucas_gonze","replyTo":"SENDER","senderId":"ecVTCIo0P02J-AujcbV9T35ln3ktvr2hy3ReqgZZqGN63VtPzaDfpp2TWwZBwgsK-rjDjAXg7znsuIzVCb4wS55IqJBJGw","spamInfo":{"isSpam":false,"reason":"0"},"subject":"a proposal for secure notifications","postDate":"1012159936","msgId":360,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PE5FQkJKSUhNTUxLSEVPUE5PR0hETUVNQkZKQUEubHVjYXNAZ29uemUuY29tPg=="},"prevInTopic":0,"nextInTopic":361,"prevInTime":359,"nextInTime":361,"topicId":360,"numMessagesInTopic":23,"msgSnippet":"In the following proposal I suggest a secure mechanism for event notifications. The purpose of this design is to maximize security.  As with all my recent","rawEmail":"Return-Path: &lt;lucas@...&gt;\r\nX-Sender: lucas@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_0_1_3); 27 Jan 2002 19:33:12 -0000\r\nReceived: (qmail 1014 invoked from network); 27 Jan 2002 19:33:11 -0000\r\nReceived: from unknown (216.115.97.167)\n  by m12.grp.snv.yahoo.com with QMQP; 27 Jan 2002 19:33:11 -0000\r\nReceived: from unknown (HELO mail2.panix.com) (166.84.0.213)\n  by mta1.grp.snv.yahoo.com with SMTP; 27 Jan 2002 19:33:11 -0000\r\nReceived: from lucas (159-98.nyc.dsl.access.net [166.84.159.98])\n\tby mail2.panix.com (Postfix) with SMTP id 37C868EE9\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Sun, 27 Jan 2002 14:33:10 -0500 (EST)\r\nTo: &quot;Rest-Discuss&quot; &lt;rest-discuss@yahoogroups.com&gt;\r\nSubject: a proposal for secure notifications\r\nDate: Sun, 27 Jan 2002 14:32:16 -0500\r\nMessage-ID: &lt;NEBBJIHMMLKHEOPNOGHDMEMBFJAA.lucas@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain;\n\tcharset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: 7bit\r\nX-Priority: 3 (Normal)\r\nX-MSMail-Priority: Normal\r\nX-Mailer: Microsoft Outlook IMO, Build 9.0.2416 (9.0.2910.0)\r\nX-MimeOLE: Produced By Microsoft MimeOLE V5.00.2919.6600\r\nImportance: Normal\r\nFrom: &quot;Lucas Gonze&quot; &lt;lucas@...&gt;\r\nX-Yahoo-Group-Post: member; u=63473576\r\nX-Yahoo-Profile: lucas_gonze\r\n\r\nIn the following proposal I suggest a secure mechanism for event notifications.\nThe purpose of this design is to maximize security.  As with all my recent work,\ne.g. the aREST design for application-level notification support, it is an\nexperiment to explore a particular aspect of the problem space.\n\nMany solutions for implementing HTTP notifications use callbacks to a sink-side\nHTTP server.  However running a full featured HTTP server creates very serious\nsecurity problems.  From a security perspective an ideal solution would be only\na little less secure than running an HTTP client, and running a full server\nmakes that impossible.\n\nThe sink must operate a protocol designed for extreme paranoia.  I will call\nthis protocol &quot;Paranoid Sink Protocol&quot;, or PSP.  The goal of PSP is to make HTTP\nevent notifications secure.  The name &quot;PSP&quot; is a placeholder -- it may or may\nnot be HTTP.  PSP exists exclusively to notify HTTP clients that they should\ninitiate an HTTP request.  All risky activities are performed via requests, thus\npreserving the existing security levels of web clients.\n\nDESIGN\n=======\n\nHere is a sample of a PSP transaction:\n1) A client uses HTTP 1.0 or later to request notifications on a resource.  The\nclient provides a PSP URI.  The client and server construct a secure ticket to\nidentify valid PSP notifications.  The ticket might, for example, be a public\nkey or a secret token.  The server provides a URI for picking up events once\nnotification has been received.\n2) Time passes.\n3) The source node emits a PSP notification.  The notification contains only\nenough information to validate the ticket.  It does not contain the callback\naddress.  It is a fixed length to prevent buffer overflow attacks.\n4) The sink validates the ticket and disconnects without a response of any kind.\n5) The sink requests the event from the event pickup URI.\n\nTo prevent port scanning, PSP does not return either a TCP ACK or an HTTP\nresponse.  However there does exist an ACK in the form of the sink poll in #5\nabove.  A source MUST assume that a #3 notification not followed by a #5 poll\nhas not been received.\n\nTo prevent buffer overflows and to make TCP unnecessary, PSP uses fixed length\nmessages.  512 bytes should be enough.\n\nTo protect the sink from malicious parties, notifications MUST be idempotent.\nThe sink need not store any information about the message after transmission.\nAll notifications and polls related to a specific ticket are identical.  A\nsingle poll picks up all stored messages.\n\nIMPLEMENTATION\n==============\n\nFor an implementation of PSP, HTTP 0.9 fits perfectly.  It can legally ride over\nUDP or IP, does not require any response at all, and only supports idempotent\noperations.  Its brutally trivial nature makes implementations orders of\nmagnitude easier to secure than HTTP 1.1 implementations.\n\nThe security of PSP is dependent on security of the (#1) event subscription and\nticket negotiation.  Adequate security of #1 is a big what-if.  Design of the\nticket negotiation is a challenge to be taken seriously.\n\nTo prevent packet sniffers from spoofing notifications, the ticket should be\nrenegotiated at each (#5) request.  Since the request will not be observable\nbefore the first notification is sent, and subsequent notifications (spoofs or\nnot) have no effect, sucessful spoofing will have no worse an effect than\nsending random packets.\n\nIt is apparent that, due to the requirement that notifications must be followed\nup with a request, PSP is not designed for performance.  The only problem it\naddresses is security.\n\nSee http://www.w3.org/Protocols/HTTP/AsImplemented.html for the HTTP 0.9\nspecification.\n\n- Lucas\n\n\n\n"}}
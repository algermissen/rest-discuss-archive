{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":228155998,"authorName":"Mike Schinkel","from":"&quot;Mike Schinkel&quot; &lt;mikeschinkel@...&gt;","profile":"mikeschinkel","replyTo":"SENDER","senderId":"vAyx9cRc2P8oX0LgJS64ypw6q5BRtwEr8aJaDVfS2lqpfnBwr54L0GROgwZ6-907eERf6CP3kOc7-8cxt9HjZ48l48X-kXsX8CE1ODEduQ","spamInfo":{"isSpam":false,"reason":"12"},"subject":"RE: [rest-discuss] bootstrapping","postDate":"1200803709","msgId":10288,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDE1NTAwMWM4NWIxZCRkNzcyOThkMCQwNzAyYThjMEBHdWlkZXMubG9jYWw+","inReplyToHeader":"PDUwMzdiNmU0MDgwMTE5MTgwNGk0NzlmN2JkNWcyZmZkMWU1YTViNmRjNThAbWFpbC5nbWFpbC5jb20+","referencesHeader":"PGZta3M3OCtrMTVrQGVHcm91cHMuY29tPiA8YzgyMDQ1NDMwODAxMTgxMzU5ajJjMWQyNDBkbGRhMDc4NzMwMGVhYjhiZGFAbWFpbC5nbWFpbC5jb20+IDw1MDM3YjZlNDA4MDExODE3MTdnNzZhZTk4NmFzYWM5OTA1ODk2MGRhNmYwZUBtYWlsLmdtYWlsLmNvbT4gPDE0MzIwMWM4NWEzZSQ4ODM1ODQ2MCQwNzAyYThjMEBHdWlkZXMubG9jYWw+IDw1MDM3YjZlNDA4MDExODE5MDlwNmZhOTYzNjJqYzc4OGFlMDI2ZWEzMWZjMkBtYWlsLmdtYWlsLmNvbT4gPDE0NWMwMWM4NWE1YSQ3NDJlN2ZhMCQwNzAyYThjMEBHdWlkZXMubG9jYWw+IDw1MDM3YjZlNDA4MDExODIyMDZxNTZhOWJlNzNtZTBmYzRhMWJlNjI2ZjE2MkBtYWlsLmdtYWlsLmNvbT4gPDE0ODcwMWM4NWE3ZSQ4NTVlMDY1MCQwNzAyYThjMEBHdWlkZXMubG9jYWw+IDw1MDM3YjZlNDA4MDExOTAyNTRqMzRjMzE4ZnIyNTIwOWQwN2U4Y2Q0ZmNmQG1haWwuZ21haWwuY29tPiA8MTUyYzAxYzg1YWU1JDExZTRmZjUwJDA3MDJhOGMwQEd1aWRlcy5sb2NhbD4gPDUwMzdiNmU0MDgwMTE5MTgwNGk0NzlmN2JkNWcyZmZkMWU1YTViNmRjNThAbWFpbC5nbWFpbC5jb20+"},"prevInTopic":10287,"nextInTopic":10289,"prevInTime":10287,"nextInTime":10289,"topicId":10201,"numMessagesInTopic":65,"msgSnippet":"... Well, even though I don t like conneg I recognize others do so wouldn t argue against incorporating conneg in a general purpose web service model. ... Just","rawEmail":"Return-Path: &lt;mikeschinkel@...&gt;\r\nX-Sender: mikeschinkel@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 52457 invoked from network); 20 Jan 2008 04:35:13 -0000\r\nX-Received: from unknown (66.218.67.94)\n  by m53.grp.scd.yahoo.com with QMQP; 20 Jan 2008 04:35:13 -0000\r\nX-Received: from unknown (HELO an-out-0708.google.com) (209.85.132.251)\n  by mta15.grp.scd.yahoo.com with SMTP; 20 Jan 2008 04:35:13 -0000\r\nX-Received: by an-out-0708.google.com with SMTP id c28so370076ana.57\n        for &lt;rest-discuss@yahoogroups.com&gt;; Sat, 19 Jan 2008 20:35:13 -0800 (PST)\r\nX-Received: by 10.100.225.19 with SMTP id x19mr11289296ang.60.1200803712959;\n        Sat, 19 Jan 2008 20:35:12 -0800 (PST)\r\nReturn-Path: &lt;mikeschinkel@...&gt;\r\nX-Received: from desktop ( [69.94.221.21])\n        by mx.google.com with ESMTPS id 74sm3373805wra.19.2008.01.19.20.35.10\n        (version=SSLv3 cipher=RC4-MD5);\n        Sat, 19 Jan 2008 20:35:10 -0800 (PST)\r\nTo: &quot;&#39;Assaf Arkin&#39;&quot; &lt;assaf@...&gt;\r\nCc: &lt;rest-discuss@yahoogroups.com&gt;\r\nReferences: &lt;fmks78+k15k@...&gt; &lt;c82045430801181359j2c1d240dlda0787300eab8bda@...&gt; &lt;5037b6e40801181717g76ae986asac99058960da6f0e@...&gt; &lt;143201c85a3e$88358460$0702a8c0@...&gt; &lt;5037b6e40801181909p6fa96362jc788ae026ea31fc2@...&gt; &lt;145c01c85a5a$742e7fa0$0702a8c0@...&gt; &lt;5037b6e40801182206q56a9be73me0fc4a1be626f162@...&gt; &lt;148701c85a7e$855e0650$0702a8c0@...&gt; &lt;5037b6e40801190254j34c318fr25209d07e8cd4fcf@...&gt; &lt;152c01c85ae5$11e4ff50$0702a8c0@...&gt; &lt;5037b6e40801191804i479f7bd5g2ffd1e5a5b6dc58@...&gt;\r\nDate: Sat, 19 Jan 2008 23:35:09 -0500\r\nKeywords: Archived\r\nMessage-ID: &lt;155001c85b1d$d77298d0$0702a8c0@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain;\n\tcharset=&quot;us-ascii&quot;\r\nContent-Transfer-Encoding: 7bit\r\nX-Mailer: Microsoft Office Outlook 11\r\nX-MimeOLE: Produced By Microsoft MimeOLE V6.00.2900.3198\r\nthread-index: AchbCLoXy87zXokVQvybPLkenwhcggAB9oPw\r\nIn-Reply-To: &lt;5037b6e40801191804i479f7bd5g2ffd1e5a5b6dc58@...&gt;\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Mike Schinkel&quot; &lt;mikeschinkel@...&gt;\r\nSubject: RE: [rest-discuss] bootstrapping\r\nX-Yahoo-Group-Post: member; u=228155998; y=59S5IXYuVrRi_62SpjYcjrB7YHuR30IX32CFTmaCvebNpcyWryz2\r\nX-Yahoo-Profile: mikeschinkel\r\n\r\nAssaf Arkin wrote:\n&gt; &gt; Personally I really dislike conneg because, like a box of \n&gt; &gt; chocolates,  given a URL you never know what someone \n&gt; &gt; else you give the link to is gonna get.\n&gt; \n&gt; I like both, and I imagine you&#39;d be able to do something like:\n&gt; \n&gt; resource &#39;task&#39;\n&gt;   url &#39;/tasks/{id}&#39;\n&gt;   url &#39;/tasks/{id}.{format}&#39;\n\nWell, even though I don&#39;t like conneg I recognize others do so wouldn&#39;t\nargue against incorporating conneg in a general purpose web service model.\n:)\n\nJust to be clear, I do see cases where conneg is useful but in most cases\nI&#39;d like to see it 302 redirected to an explicit URL that doesn&#39;t use\nconneg.\n\n&gt; &gt; Well if you are saying that your &lt;task&gt; information is \n&gt; wrapped up in \n&gt; &gt; an &quot;application/xml&quot; content type and that the caller &quot;just has to \n&gt; &gt; know&quot; that its contains a list of tasks with specific structure and \n&gt; &gt; semantics than I&#39;ll\n&gt; \n&gt; No.  I&#39;m saying I have caller specifically requesting tasks \n&gt; and expecting an XML or JSON representation of that task.  If \n&gt; they didn&#39;t know what to do with a task, why would they request it?\n\nYou are going to wrong direction. :-) I&#39;m saying they should not only know\nwhat to do with tasks, they should expect a task-specific mime-type too.\n\n&gt; &gt; agree with Joe Gregorio [2] that you really need to find an \n&gt; &gt; existing mime-type that already supports tasks and use it, \n&gt; &gt; or define and register a new mime-type for your task list \n&gt; &gt; that fits your needs with a preference towards reusing a \n&gt; &gt; specific task-specific mime-type.  A description just does \n&gt; &gt; not cover it.\n&gt; \n&gt; Some people suggested you can also return HTML with \n&gt; microformats, or some other semantic HTML.  That&#39;s a \n&gt; possibility and turns out that handling semantic HTML with \n&gt; CSS selector is not much more complicated than XPath on XML.  \n&gt; So let&#39;s say that&#39;s an alternative content type for some clients.\n&gt; \n&gt; Would we go and define the application/html+task MIME type?  \n&gt; Is there a MIME type for blog posts (hAtom)?  What about eBay \n&gt; auctions, and you can bet people are scraping them left and right?\n\nYou ask good rhetorical questions. In reality I think that we should in fact\nhave an &quot;application/html+task&quot; MIME type, but ideally it would be\n&quot;text/html/task&quot; where all software that could process &quot;text/html&quot; would\nstill process it as such, but sofware that understands &quot;text/html/task&quot;\ncould know to handle it specially. But we know that handling of MIME types\ndoesn&#39;t work that way, so unfortunately that wouldn&#39;t work, now will it?\nAnother approach would be to add a &quot;Content-subtype&quot; header to that could be\nused to identify subtypes, but then we&#39;ve split type into two values instead\nof just one and that&#39;s not so good (although it could be a stop-gap approach\nassuming we ammend the relevent mime-type specs to say that Content-type can\nhave any level of subtypes and use that when both client and server\nunderstand and use a Content-subtype when they don&#39;t.\n\nSo what I&#39;m seeing is a need to be able to have a content type seen as both\na general type &quot;text/html&quot; and as a more specific type &quot;text/html/task&quot; just\nas an object-oriented language that supports inheritance can interact with\nan object as it is was an instance of the base class and as an instance of\nthe inherited class. I think with Atom this would be especially useful\nbecause Atom really is a great example of a generic abstract mime-type from\nwhich specialized mime-types could be created but for which it would be\ngreat of software that understand Atom could still process as Atom.  \n\nBut I general I don&#39;t have a perfect solution yet.  Suggestions?\n\n&gt; &gt; &gt; &gt; Fine.  So why not just use\n&gt; &gt; &gt; &quot;{base}/person/{name}/pending/{task}/attachments&quot;\n&gt; &gt; &gt; &gt; to return a list of URLs attached?\n&gt; &gt; &gt;\n&gt; &gt; &gt; The scenario I have here is one of getting all the tasks \n&gt; and their \n&gt; &gt; &gt; attachments, so you already have the URL to these \n&gt; attachments, from \n&gt; &gt; &gt; the same source that provides the task ID, so why go to \n&gt; the pain of \n&gt; &gt; &gt; composing that URL?\n&gt; &gt;\n&gt; &gt; Maybe my client code got the task list days ago (I&#39;m \n&gt; assuming unique \n&gt; &gt; and non-changing {task} ids which you&#39;d scare me if you say \n&gt; they are \n&gt; &gt; not.)  Or I might get that URL from another system that \n&gt; traversed the task list for me.\n&gt; &gt; There are many use-cases for going directly to a task and/or its \n&gt; &gt; attachments so requiring I first get the full list of tasks \n&gt; before I \n&gt; &gt; can access a task seems to me to be an undue burden; it \n&gt; uses bandwidth \n&gt; &gt; unneccessarily, it inhibits performance, and it adds \n&gt; complexity to development.\n&gt; \n&gt; Each task has a URL specifically so you can go and retrieve \n&gt; it, you don&#39;t have to lookup a URL you already have.\n&gt; \n&gt; Going from task URL to attachments URL requires one of three things:\n&gt; \n&gt; 1.  Query task to find where the attachments are.\n&gt; 2.  Compose the URL you have using a URL template.\n&gt; 3.  Decompose the URL you have into parameters, recompose \n&gt; them again into a URL template.\n&gt; \n&gt; Now, if the resulting URL happens to be \n&gt; {task_url}/attachments, you can easily do #2.  If it doesn&#39;t, \n&gt; you&#39;ll have to follow the more laborious #3.  Attachments is \n&gt; probably not a good specific example to show why #3 is \n&gt; necessary, so let&#39;s talk about task owners.  The URL for a \n&gt; task owner is not  /tasks/{id}/owner, maybe /people/{owner}, \n&gt; or maybe some directory server.\n\nGood example.\n\n&gt; &gt; I assert that least coupling is &quot;a&quot; goal, not the &quot;only&quot; \n&gt; goal, and not \n&gt; &gt; always a &quot;good&quot; goal.\n&gt; &gt;\n&gt; &gt; Coupling can be a good thing when it sets forth \n&gt; well-considered constraints.\n&gt; &gt; REST over HTTP is currently &quot;coupled&quot; to &quot;GET&quot;, &quot;PUT&quot;, \n&gt; &quot;POST&quot;, and &quot;DELETE&quot;\n&gt; &gt; and I think we all agree here that that is a good thing. \n&gt; There is more \n&gt; &gt; and more code becoming coupled to the Atom specification \n&gt; and I doubt \n&gt; &gt; anyone here would see that as bad either. So coupling when \n&gt; fundamental \n&gt; &gt; and well-considered can actually be a very good thing.\n&gt; \n&gt; No coupling says the client and server have to be de-coupled \n&gt; except for cross-cutting generic knowledge, which would cover \n&gt; things like HTTP, Atom.  Least coupling goes one step further \n&gt; and acknowledges some coupling is desirables -- besides the \n&gt; cross-cutting stuff -- and looks for optimal minimum.  I&#39;m \n&gt; only concerned that it be possible to do least coupling, for \n&gt; any value of least.\n\nI&#39;m concerned that if it isn&#39;t spelled out people look at the goal of &quot;least\ncoupling&quot; to mean &quot;minimize coupling at ALL costs.&quot;  Enough said.\n\n&gt; &gt; &gt; These are thoughts, not conclusions:\n&gt; &gt; &gt; - I don&#39;t have (yet) a use case for accessing attachments \n&gt; directly, \n&gt; &gt; &gt; but certainly for accessing them from the task, so maybe \n&gt; link from \n&gt; &gt; &gt; the task?\n&gt; &gt;\n&gt; &gt; I want a list of all attachments, regardless of task, in \n&gt; order to be \n&gt; &gt; able to archive attachments for space management; there&#39;s a \n&gt; use-case.\n&gt; \n&gt; How would you find all the IDs to fit in the template?  \n\nI call the &quot;{base}/attachments&quot; and get them. So as I say that, yes it is\nlink traversal but coming from another location.  But (IMO) I shouldn&#39;t have\nto first GET the &quot;{base}&quot; URL to find the &quot;{base}/attachments&quot; URL in its\nrepresentation; I should just be able to know the URI Template from the docs\nand GET the attachments URL directly.\n\n&gt; Wouldn&#39;t it just be easier to look up something like \n&gt; /attachments/updated, sorted by update time, and operate on \n&gt; the returned list?\n\nPoint taken. We are coming to the same conclusions.  That&#39;s what good debate\nresults in. :)\n\n&gt; &gt; 301 or proxy\n&gt; \n&gt; Proxy is absolutely out of the question\n\nIn all cases?  Why?  \n\n&gt; rewriting rules are very hard.  My URL template may \n&gt; be something like:\n&gt;   /tasks/{task_id}/attachments/{attach_id}\n&gt; The content management may decide to store them as:\n&gt;   /content/{uuid}\n\n\tREQUEST\n\tGET /tasks/{task_id}/attachments/{attach_id}\n\n\tRESPONSE\n\t301 - Moved Permanently\n\tLocation: {other}/content/{uuid}\n\n&gt; I just find it easier to write a generic client that works \n&gt; with either one by following URLs, so a URL is definitely \n&gt; going to be present.\n\nYou may find it easier on you the service publisher, but I&#39;m more concerned\nwith it being easier for the service client author.  There&#39;s one service\npublisher but an infinite number of potential service client authors. The\neconomics are better to put the burden on the service publisher instead of\non all the service clients, IMO.\n\n&gt; \n&gt; &gt; &gt; - It&#39;s actually slightly easier to write functional code for \n&gt; &gt; &gt; traversing links than composing URLs, which may be a sign \n&gt; that it&#39;s \n&gt; &gt; &gt; the better model?\n&gt; &gt;\n&gt; &gt; Yes, but it is easier for humans to compose URLs than \n&gt; traverse links \n&gt; &gt; when the links don&#39;t return HTML as a content type.\n&gt; \n&gt; 1.  curl URL that returns JSON\n&gt; 2.  find the item you want to follow, double click the URL, \n&gt; Ctrl-C 3.  curl + Ctrl-V\n\nThat works for a professional developer but not for an &quot;accidental&quot;\nprogrammer.  Frankly, I don&#39;t even have CURL on my system (does it even\nexist for Windows?) and until I found Fiddler for IE dealing with that kind\nof stuff was even hard for me and around here I am consider *the* technical\nguru, at least among some of my peers [1].  \n\nAnd maybe those peers are the ones I should tell you about. They are &quot;web\nentrepreneurs&quot; where probably 60-70% want to offer something on the web but\nare not technical and don&#39;t have funding to hire others to do it so they\nneed to learn how to do it themselves. It&#39;s that type of person I want to\nempower (and not as a vested interest; I genuinely want to empower them to\ncreate great new web properties for purely altruistic reasons.)  And it&#39;s\nmost of those people (the 60-70%) who simply won&#39;t ever be able to\naccomplish anything with REST if it is not as brain-dead simple as possible.\n\n-- \n-Mike Schinkel\nhttp://www.mikeschinkel.com/blogs/\nhttp://www.welldesignedurls.org\nhttp://atlanta-web.org \n\n[1] http://web.meetup.com/32/\n\n\n"}}
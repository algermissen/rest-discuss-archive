{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":0,"authorName":"Lucas Gonze","from":"Lucas Gonze &lt;lgonze@...&gt;","replyTo":"SENDER","senderId":"p0Xt-Nh6RLOB7tS69qvmRxvVuQMiS9CvzTQs1eq-UYTPSi8VxnuAtiV78FxF1HgmdrtK10LcAWcQsQI53lpMzL_lRshv","spamInfo":{"isSpam":false,"reason":"0"},"subject":"socket-level mods","postDate":"1026333459","msgId":1792,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PFBpbmUuTE5YLjQuNDQuMDIwNzEwMTU0NTM5MC4zMTI5Ni0xMDAwMDBAbG9jYWxob3N0LmxvY2FsZG9tYWluPg==","inReplyToHeader":"PEI5NTFGODI1LjNEN0ElamJvbmVAZGVlcGZpbGUuY29tPg=="},"prevInTopic":1791,"nextInTopic":1793,"prevInTime":1791,"nextInTime":1793,"topicId":1733,"numMessagesInTopic":74,"msgSnippet":"I ve been musing for a while about how to do everything you see in peer to peer with http.  Bidirectional communications are a real blocking factor. What I","rawEmail":"Return-Path: &lt;lgonze@...&gt;\r\nX-Sender: lgonze@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_0_7_4); 10 Jul 2002 20:41:52 -0000\r\nReceived: (qmail 20197 invoked from network); 10 Jul 2002 20:41:51 -0000\r\nReceived: from unknown (66.218.66.217)\n  by m6.grp.scd.yahoo.com with QMQP; 10 Jul 2002 20:41:51 -0000\r\nReceived: from unknown (HELO mail3.panix.com) (166.84.1.74)\n  by mta2.grp.scd.yahoo.com with SMTP; 10 Jul 2002 20:41:51 -0000\r\nReceived: from 159-98.nyc.dsl.access.net (159-98.nyc.dsl.access.net [166.84.159.98])\n\tby mail3.panix.com (Postfix) with ESMTP id E65F598188\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Wed, 10 Jul 2002 16:41:50 -0400 (EDT)\r\nDate: Wed, 10 Jul 2002 16:37:39 -0400 (EDT)\r\nX-X-Sender: lgonze@...\r\nCc: rest-discuss@yahoogroups.com\r\nSubject: socket-level mods\r\nIn-Reply-To: &lt;B951F825.3D7A%jbone@...&gt;\r\nMessage-ID: &lt;Pine.LNX.4.44.0207101545390.31296-100000@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: TEXT/PLAIN; charset=US-ASCII\r\nFrom: Lucas Gonze &lt;lgonze@...&gt;\r\nX-Yahoo-Group-Post: public\r\n\r\n\nI&#39;ve been musing for a while about how to do everything you see in peer to \npeer with http.  Bidirectional communications are a real blocking factor.\n\nWhat I mean by bidirectional is allow either side in a transaction to \ninitiate requests.  The way to do this in HTTP is to have both sides \nestablish a separate connection.  But this doesn&#39;t really solve the \nproblems.  The problems are:\n\n* long lasting connections.  HTTP is designed around one-shot connections\nto pick up some hypertext.  Mechanisms to get a bunch of files keep the\nconnection open, but only until a batch of related resources have been\ntransferred.  P2P often uses an ongoing stream.  Now, maybe you can argue\nthat ongoing streams make no sense, but that&#39;s swimming upstream.  You\ncould argue that P2P designs should be rebuilt to use hypertext, but\nthat&#39;s also swimming upstream.  P2P has gotten a huge amount of thought\nput into it and it uses ongoing connections so often for a reason.\n\n* efficiency.  Using two sockets instead of one, plus the cost of \nmaintaining open connections, is a brutual efficiency hit.\n\n* firewall transgression.  being able to able to establish a server\nconnection to a node behind a firewall, by having the server create the\nTCP connection but otherwise act as a server, is a critical tool.  few p2p\napps could live without it.\n\n* event mechanisms.  given a single unidirectional connection there is no\nway for a server to initiate an event, short of the knownow hack of\nrunning events along the backstream to the client.\n\n* coordinating related events on the two streams.  It is much easier to do\nthis with a single connection than with two.  (Years ago I actually did\nwrite a coordinator for two connections, and it was a bear to get the\ndetails right.)\n\nI&#39;ve done enough preliminary hacking in Tomcat to know that I can munge\nthe socket layer -- exclusively stuff below HTTP -- to support long\nlasting connections where both parties can act as a client, server or\nboth.  But I am queasy about how this interacts with REST design.\n\nThe new design would still work by resource modelling.  However it would \nnot be oriented towards hypertext, so stuff related to connection keep \nalive would be hairy.  It would not work with existing proxies, but that&#39;s \nnot a REST issue IMO.  \n\nOn the other hand, the new design would be HTTP to the letter, because\nHTTP doesn&#39;t say anyting about the socket layer.\n\n...thoughts?\n\n- Lucas\n\n\n\n\n\n\n"}}
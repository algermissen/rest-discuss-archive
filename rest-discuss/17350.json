{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":69164307,"authorName":"mike amundsen","from":"mike amundsen &lt;mamund@...&gt;","profile":"mamund","replyTo":"SENDER","senderId":"6Wbp_Qs7UvwggNv8BEtIz_TlzmLWNm9BpUt3yeAfIjxI36CSIDdVxGpzMPtBvdnabAwT5xiGzWJL3P5Byjew6S5ZQF7n_LY","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Help us design a RESTful API","postDate":"1297700086","msgId":17350,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEFBTkxrVGk9QkcrOHAxVVFKOFFqVlQySnUzaVlIQTJWVEs3akxyc1paRFVRNEBtYWlsLmdtYWlsLmNvbT4=","inReplyToHeader":"PEFBTkxrVGlrLW89djhiZHN3OTJhcVlneVpwT0xmRVE4Y3Z3RVVUQlJYZzVxdEBtYWlsLmdtYWlsLmNvbT4=","referencesHeader":"PGlqOW81OCtwaXJuQGVHcm91cHMuY29tPgk8QUFOTGtUaWstbz12OGJkc3c5MmFxWWd5WnBPTGZFUThjdndFVVRCUlhnNXF0QG1haWwuZ21haWwuY29tPg=="},"prevInTopic":17349,"nextInTopic":0,"prevInTime":17349,"nextInTime":17351,"topicId":17348,"numMessagesInTopic":3,"msgSnippet":"A good source for guidance on creating REST interfaces can be found on Roy Fielding s blog: ","rawEmail":"Return-Path: &lt;mca@...&gt;\r\nX-Sender: mca@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 82821 invoked from network); 14 Feb 2011 16:14:47 -0000\r\nX-Received: from unknown (98.137.34.44)\n  by m4.grp.sp2.yahoo.com with QMQP; 14 Feb 2011 16:14:47 -0000\r\nX-Received: from unknown (HELO mail-fx0-f47.google.com) (209.85.161.47)\n  by mta1.grp.sp2.yahoo.com with SMTP; 14 Feb 2011 16:14:47 -0000\r\nX-Received: by fxm17 with SMTP id 17so5297429fxm.20\n        for &lt;rest-discuss@yahoogroups.com&gt;; Mon, 14 Feb 2011 08:14:46 -0800 (PST)\r\nMIME-Version: 1.0\r\nX-Received: by 10.223.106.134 with SMTP id x6mr4730661fao.73.1297700086311; Mon,\n 14 Feb 2011 08:14:46 -0800 (PST)\r\nX-Received: by 10.223.109.71 with HTTP; Mon, 14 Feb 2011 08:14:46 -0800 (PST)\r\nIn-Reply-To: &lt;AANLkTik-o=v8bdsw92aqYgyZpOLfEQ8cvwEUTBRXg5qt@...&gt;\r\nReferences: &lt;ij9o58+pirn@...&gt;\n\t&lt;AANLkTik-o=v8bdsw92aqYgyZpOLfEQ8cvwEUTBRXg5qt@...&gt;\r\nDate: Mon, 14 Feb 2011 11:14:46 -0500\r\nX-Google-Sender-Auth: lYTFO_mXyGNY_Z2g0hWGRhhOUQs\r\nMessage-ID: &lt;AANLkTi=BG+8p1UQJ8QjVT2Ju3iYHA2VTK7jLrsZZDUQ4@...&gt;\r\nTo: Alessandro Nadalin &lt;alessandro.nadalin@...&gt;, \n\trest-discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Type: multipart/alternative; boundary=001636c5b4d8ab6b11049c4058d9\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: mike amundsen &lt;mamund@...&gt;\r\nSubject: Re: [rest-discuss] Help us design a RESTful API\r\nX-Yahoo-Group-Post: member; u=69164307; y=kpLdLpvUZmOsohcCcAT5YVRwvAdmysJ3q1ZLEPzfmgMj\r\nX-Yahoo-Profile: mamund\r\n\r\n\r\n--001636c5b4d8ab6b11049c4058d9\r\nContent-Type: text/plain; charset=ISO-8859-1\r\n\r\nA good source for guidance on creating REST interfaces can be found on Roy\nFielding&#39;s blog:\nhttp://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven\n\n&lt;http://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven&gt;Also,\nURI construction is not a concern of REST and actually can be an\nanti-pattern for RESTful implementations as you&#39;ll end up Aw/ strong\ncoupling between clients and the URI. This can make it possibly problematic\nto modify the server&#39;s handling of URIs, move the server to a new location,\nrev the underlying foundation connector framework, etc.\n\nAnother approach is to focus on the state-transfers need to support your\nplanned interactions, map that to hypermedia controls within a media type,\nand le the resources identify themselves in the process.\n\n&lt;!-- get a feed --&gt;\n&lt;a href=&quot;...&quot; rel=&quot;feed&quot; /&gt;\n\n&lt;!-- get a feed item --&gt;\n&lt;a href=&quot;...&quot; rel=&quot;item&quot; /&gt;\n\n&lt;!-- get user profile --&gt;\n&lt;a href=&quot;...&quot; rel=&quot;user-profile&quot; /&gt;\n\n&lt;!-- add follower --&gt;\n&lt;form action=&quot;...&quot; method=&quot;post&quot; class=&quot;followers&quot;&gt;\n&lt;input type=&quot;hidden&quot; name=&quot;this-user&quot; value=&quot;...&quot; /&gt;\n&lt;input type=&quot;text&quot; name=&quot;follower-to-add&quot; value=&quot;...&quot; /&gt;\n&lt;/form&gt;\n\nBy defining the state interactions in some media-type (I picked HTML, but\nthere are many others including designing your own), you end of focusing on\nthe important elements (exposing resources, exposing data elements to send\nto the server, etc.). You can then program clients to recognize the\nhypermedia controls in the message and act accordingly (i.e. prompt users to\nfill in values, invoke the proper protocol method to send the state to the\nserver, etc.). And you can program the server to recognize the incoming\nstate transfers, evaluate them for problem, process them, and return the\nproper response (including resource representations containing the resulting\ndata, etc.).\n\nWhile this takes more up-front planning, it frees you to use any URI or\nresource model you wish in order to achieve your goal. You can even change\nthe URIs/resources along the way w/o invalidating any client code since\nclients are looking for hypermedia in responses, not URIs.\n\nI am working on an experiment related to this mode of RESTful\nimplementation[1]. As luck would have it, the example I chose looks a bit\nlike yours, too![2]  This experiment is based on some recent work I&#39;ve done\nbut is still very new. Feel free to scan that document and ask any questions\nyou might have.\n\nHopefully this will give you some ideas.\n\n[1] http://amundsen.com/blog/archives/1093\n[2] http://amundsen.com/hypermedia/profiles/\n\n\nmca\nhttp://amundsen.com/blog/\nhttp://twitter.com@mamund\nhttp://mamund.com/foaf.rdf#me\n\n\n#RESTFest 2010\nhttp://rest-fest.googlecode.com\n\n\n\nOn Mon, Feb 14, 2011 at 03:46, Alessandro Nadalin &lt;\nalessandro.nadalin@...&gt; wrote:\n\n&gt;\n&gt;\n&gt;\n&gt;\n&gt; 2011/2/14 logan_henriquez &lt;logan_henriquez@...&gt;\n&gt;\n&gt;\n&gt;&gt;\n&gt;&gt; My team is developing a RESTful API into a business collaboration\n&gt;&gt; application that you can think of as Facebook for business. There are users,\n&gt;&gt; groups, and news feeds for users and groups. There are also business related\n&gt;&gt; objects of many types. Interested in getting your opinion on a design\n&gt;&gt; question.\n&gt;&gt;\n&gt;&gt; When you think about getting or posting content to a news feed for a user\n&gt;&gt; or group, which of the below is more natural?\n&gt;&gt;\n&gt;&gt; Option A\n&gt;&gt;\n&gt;&gt; /feeds/entity/:id/items # to post, delete feed items or get\n&gt;&gt; # group or business object related feed items\n&gt;&gt; /feeds/user/:user_id/items # to get/post/delete feed items relating to a\n&gt;&gt; user\n&gt;&gt; /users/:id # to get user profile\n&gt;&gt; /users/:id/followers # to get/add followers\n&gt;&gt; ... there are lots of other child resources under users\n&gt;&gt; /groups/:id\n&gt;&gt; /groups/:id/members # to get/add followers\n&gt;&gt; /object/:id # get info about the object\n&gt;&gt;\n&gt;&gt; OR\n&gt;&gt;\n&gt;&gt; Option B\n&gt;&gt;\n&gt;&gt; /users/:id/feeds/items # to get/post/delete feed data\n&gt;&gt; /groups/:id/feeds/items # to get/post/delete feed data\n&gt;&gt; /users/:id # to get user profile\n&gt;&gt; /users/:id/followers # to get/add followers\n&gt;&gt; ... lots of other child resources under users\n&gt;&gt; /groups/:id\n&gt;&gt; /groups/:id/members # to get/add followers\n&gt;&gt; /object/:id/feed/items # get a feed related to an object\n&gt;&gt; /object/:id # get info about the object\n&gt;&gt;\n&gt;&gt; The advantage of A is that you can use the same URL for all posts (but not\n&gt;&gt; for reads because users have different types of feeds than groups or the\n&gt;&gt; various business objects). The advantage of the latter is it shows the type\n&gt;&gt; of parent the feed belongs to and may be used for reads or writes or the\n&gt;&gt; other actions that live under each type of parent (like users or groups).\n&gt;&gt;\n&gt;\n&gt; Design your URLs thinking at your entities as an implicit hierarchy, mostly\n&gt; derived from your domain,\n&gt; That should solve most of your doubts :)\n&gt;\n&gt;\n&gt;&gt;\n&gt;&gt;\n&gt;\n&gt;\n&gt; --\n&gt; Nadalin Alessandro\n&gt; www.odino.org\n&gt; www.twitter.com/_odino_\n&gt;\n&gt;\n&gt;\n&gt; \n\r\n--001636c5b4d8ab6b11049c4058d9\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nA good source for guidance on creating REST interfaces can be found on Roy =\r\nFielding&#39;s blog:&lt;div&gt;&lt;a href=3D&quot;http://roy.gbiv.com/untangled/2008/rest=\r\n-apis-must-be-hypertext-driven&quot;&gt;http://roy.gbiv.com/untangled/2008/rest-api=\r\ns-must-be-hypertext-driven&lt;/a&gt;&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;a href=3D&quot;http://=\r\nroy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven&quot;&gt;&lt;/a&gt;Also, U=\r\nRI construction is not a concern of REST and actually can be an anti-patter=\r\nn for RESTful implementations as you&#39;ll end up Aw/ strong coupling betw=\r\neen clients and the URI. This can make it possibly problematic to modify th=\r\ne server&#39;s handling of URIs, move the server to a new location, rev the=\r\n underlying foundation connector framework, etc.&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;=\r\nAnother approach is to focus on the state-transfers need to support your pl=\r\nanned interactions, map that to hypermedia controls within a media type, an=\r\nd le the resources identify themselves in the process.=A0&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/=\r\ndiv&gt;&lt;div&gt;&lt;!-- get a feed --&gt;&lt;/div&gt;&lt;div&gt;&lt;a href=3D&quot;...&quot; r=\r\nel=3D&quot;feed&quot; /&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;!-- get a feed ite=\r\nm --&gt;&lt;/div&gt;&lt;div&gt;&lt;a href=3D&quot;...&quot; rel=3D&quot;item&quot; /&gt=\r\n;&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;!-- get user profile --&gt;&lt;/div&gt;&lt;div&gt;&lt;a=\r\n href=3D&quot;...&quot; rel=3D&quot;user-profile&quot; /&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;=\r\n&lt;/div&gt;&lt;div&gt;&lt;!-- add follower --&gt;&lt;/div&gt;&lt;div&gt;&lt;form action=3D&quot;..=\r\n.&quot; method=3D&quot;post&quot; class=3D&quot;followers&quot;&gt;&lt;/div&gt;\n&lt;=\r\ndiv&gt;&lt;input type=3D&quot;hidden&quot; name=3D&quot;this-user&quot; value=\r\n=3D&quot;...&quot; /&gt;&lt;/div&gt;&lt;div&gt;&lt;input type=3D&quot;text&quot; name=\r\n=3D&quot;follower-to-add&quot; value=3D&quot;...&quot; /&gt;&lt;/div&gt;&lt;div&gt;&lt;=\r\n/form&gt;&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;By defining the state interactions in s=\r\nome media-type (I picked HTML, but there are many others including designin=\r\ng your own), you end of focusing on the important elements (exposing resour=\r\nces, exposing data elements to send to the server, etc.). You can then prog=\r\nram clients to recognize the hypermedia controls in the message and act acc=\r\nordingly (i.e. prompt users to fill in values, invoke the proper protocol m=\r\nethod to send the state to the server, etc.). And you can program the serve=\r\nr to recognize the incoming state transfers, evaluate them for problem, pro=\r\ncess them, and return the proper response (including resource representatio=\r\nns containing the resulting data, etc.).&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;While th=\r\nis takes more up-front planning, it frees you to use any URI or resource mo=\r\ndel you wish in order to achieve your goal. You can even change the URIs/re=\r\nsources along the way w/o invalidating any client code since clients are lo=\r\noking for hypermedia in responses, not URIs.=A0&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I=\r\n am working on an experiment related to this mode of RESTful implementation=\r\n[1]. As luck would have it, the example I chose looks a bit like yours, too=\r\n![2] =A0This experiment is based on some recent work I&#39;ve done but is s=\r\ntill very new. Feel free to scan that document and ask any questions you mi=\r\nght have.&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Hopefully this will give you some ideas=\r\n.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;[1]=A0&lt;a href=3D&quot;http://amundsen.com/blog/archiv=\r\nes/1093&quot;&gt;http://amundsen.com/blog/archives/1093&lt;/a&gt;&lt;/div&gt;&lt;div&gt;[2]=A0&lt;a href=\r\n=3D&quot;http://amundsen.com/hypermedia/profiles/&quot;&gt;http://amundsen.com/hypermedi=\r\na/profiles/&lt;/a&gt;&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br clear=3D&quot;all&quot;&gt;mca&lt;br&gt;&lt;a href=\r\n=3D&quot;http://amundsen.com/blog/&quot; target=3D&quot;_blank&quot;&gt;http://amundsen.com/blog/&lt;=\r\n/a&gt;&lt;br&gt;&lt;a href=3D&quot;http://twitter.com&quot; target=3D&quot;_blank&quot;&gt;http://twitter.com&lt;=\r\n/a&gt;@mamund&lt;br&gt;&lt;a href=3D&quot;http://mamund.com/foaf.rdf#me&quot; target=3D&quot;_blank&quot;&gt;h=\r\nttp://mamund.com/foaf.rdf#me&lt;/a&gt;&lt;br&gt;\n&lt;br&gt;&lt;br&gt;#RESTFest 2010 &lt;br&gt;&lt;a href=3D&quot;=\r\nhttp://rest-fest.googlecode.com&quot; target=3D&quot;_blank&quot;&gt;http://rest-fest.googlec=\r\node.com&lt;/a&gt;&lt;br&gt;&lt;br&gt;\n&lt;br&gt;&lt;br&gt;&lt;div class=3D&quot;gmail_quote&quot;&gt;On Mon, Feb 14, 2011=\r\n at 03:46, Alessandro Nadalin &lt;span dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:aless=\r\nandro.nadalin@...&quot;&gt;alessandro.nadalin@...&lt;/a&gt;&gt;&lt;/span&gt; wrote:=\r\n&lt;br&gt;&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;margin:0 0 0 .8ex;border-lef=\r\nt:1px #ccc solid;padding-left:1ex;&quot;&gt;\n\n\n\n\n\n\n\n        \n\n\n\n\n&lt;div&gt;\n\n\n\n\n\n&lt;br&gt;&lt;br=\r\n&gt;\n\n\n\n\n&lt;br&gt;&lt;br&gt;&lt;div class=3D&quot;gmail_quote&quot;&gt;2011/2/14 logan_henriquez &lt;span di=\r\nr=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:logan_henriquez@...&quot; target=3D&quot;_blank=\r\n&quot;&gt;logan_henriquez@...&lt;/a&gt;&gt;&lt;/span&gt;&lt;div class=3D&quot;im&quot;&gt;&lt;br&gt;&lt;blockquote=\r\n class=3D&quot;gmail_quote&quot; style=3D&quot;margin:0 0 0 .8ex;border-left:1px #ccc soli=\r\nd;padding-left:1ex&quot;&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;div style=3D&quot;background-color:#fff&quot;&gt;\n&lt;=\r\nspan&gt;=A0&lt;/span&gt;\n\n\n&lt;div&gt;\n  &lt;div&gt;\n\n\n    &lt;div&gt;\n      \n      \n      &lt;p&gt;My team =\r\nis developing a RESTful API into a business collaboration application that =\r\nyou can think of as Facebook for business. There are users, groups, and new=\r\ns feeds for users and groups. There are also business related objects of ma=\r\nny types.  Interested in getting your opinion on a design question.&lt;br&gt;\n\n\n&lt;=\r\nbr&gt;\nWhen you think about getting or posting content to a news feed for a us=\r\ner or group, which of the below is more natural?&lt;br&gt;\n&lt;br&gt;\nOption A&lt;br&gt;\n&lt;br&gt;=\r\n\n/feeds/entity/:id/items     # to post, delete feed items or get&lt;br&gt;\n      =\r\n                   # group or business object related feed items&lt;br&gt;\n/feeds=\r\n/user/:user_id/items  # to get/post/delete feed items relating to a user&lt;br=\r\n&gt;\n/users/:id                           # to get user profile&lt;br&gt;\n/users/:id=\r\n/followers        # to get/add followers&lt;br&gt;\n... there are lots of other ch=\r\nild resources under users&lt;br&gt;\n/groups/:id&lt;br&gt;\n/groups/:id/members          =\r\n# to get/add followers&lt;br&gt;\n/object/:id                  # get info about th=\r\ne object&lt;br&gt;\n&lt;br&gt;\nOR&lt;br&gt;\n&lt;br&gt;\nOption B&lt;br&gt;\n&lt;br&gt;\n/users/:id/feeds/items     =\r\n  # to get/post/delete feed data &lt;br&gt;\n/groups/:id/feeds/items      # to get=\r\n/post/delete feed data&lt;br&gt;\n/users/:id                     # to get user pro=\r\nfile&lt;br&gt;\n/users/:id/followers         # to get/add followers&lt;br&gt;\n... lots o=\r\nf other child resources under users&lt;br&gt;\n/groups/:id&lt;br&gt;\n/groups/:id/members=\r\n          # to get/add followers&lt;br&gt;\n/object/:id/feed/items       # get a f=\r\need related to an object&lt;br&gt;\n/object/:id                         # get info=\r\n about the object&lt;br&gt;\n&lt;br&gt;\nThe advantage of A is that you can use the same =\r\nURL for all posts (but not for reads because users have different types of =\r\nfeeds than groups or the various business objects). The advantage of the la=\r\ntter is it shows the type of parent the feed belongs to and may be used for=\r\n reads or writes or the other actions that live under each type of parent (=\r\nlike users or groups).&lt;br&gt;\n\n&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;=\r\nbr&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;Design your URLs thinking at your entities as an implic=\r\nit hierarchy, mostly derived from your domain,=A0&lt;/div&gt;&lt;div&gt;That should sol=\r\nve most of your doubts :)&lt;/div&gt;\n&lt;div&gt;\n=A0&lt;/div&gt;&lt;blockquote class=3D&quot;gmail_q=\r\nuote&quot; style=3D&quot;margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1e=\r\nx&quot;&gt;&lt;div style=3D&quot;background-color:#fff&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;p&gt;\n&lt;br&gt;\n&lt;/p&gt;\n\n    &lt;=\r\n/div&gt;\n     \n\n    \n    &lt;div style=3D&quot;color:#fff;min-height:0&quot;&gt;&lt;/div&gt;\n\n\n&lt;/div=\r\n&gt;\n\n\n\n  \n\n\n\n\n\n\n&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;br clear=3D&quot;all&quot;&gt;&lt;br&gt;-- &lt;=\r\nbr&gt;Nadalin Alessandro&lt;br&gt;&lt;a href=3D&quot;http://www.odino.org&quot; target=3D&quot;_blank&quot;=\r\n&gt;www.odino.org&lt;/a&gt;&lt;br&gt;&lt;a href=3D&quot;http://www.twitter.com/_odino_&quot; target=3D&quot;=\r\n_blank&quot;&gt;www.twitter.com/_odino_&lt;/a&gt;&lt;br&gt;\n\n&lt;br&gt;\n\n\n\n\n\n\n&lt;br&gt;\n\n    \n    \n&lt;br&gt;\n\n\n=\r\n\n\n&lt;div width=3D&quot;1&quot; style=3D&quot;color:white;clear:both&quot;&gt;&lt;/div&gt;\n\n\n\n&lt;/blockquote&gt;=\r\n&lt;/div&gt;&lt;br&gt;&lt;/div&gt;\n\r\n--001636c5b4d8ab6b11049c4058d9--\r\n\n"}}
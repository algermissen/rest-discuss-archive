{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":289191104,"authorName":"Jan Algermissen","from":"Jan Algermissen &lt;algermissen1971@...&gt;","profile":"algermissen1971","replyTo":"SENDER","senderId":"KXfiz65PqFpsw01-h7zG8vjjkJSa8l4pHAP4shfCKt7iUfBdNZ9ZamRv4iRLq4Qinrk2WnZlflvzq94HdYXDJvBA39nWbpNjE0aMYnwwsSw","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Re: RESTful M2M Systems and Resource Typing","postDate":"1261436753","msgId":14313,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDkwMDYwQjg2LUMyRUUtNDQ5My1BRkNDLUY3NDcxNTkxODMxOEBtYWMuY29tPg==","inReplyToHeader":"PGRlNzBiMzlkMDkxMjIxMTQ0N3Q2YzM1MDRlN2s4YTZhMDI2OTZhMmJkYTEwQG1haWwuZ21haWwuY29tPg==","referencesHeader":"PGhnbnBmaCtwcGZrQGVHcm91cHMuY29tPiA8MjZERUVBQTUtNTJCMi00QzQxLTlENDAtMEQ3MTZEMDFGMDc0QG1hYy5jb20+IDxkZTcwYjM5ZDA5MTIyMTExMTlzMTg4Y2E4ZDRzNWJlNGRhZDBiNzBlMTUwN0BtYWlsLmdtYWlsLmNvbT4gPEVFQTg0RTA5LTlFNDctNDEyNy04OUQzLTBFOTVENDlDMkFFREBtYWMuY29tPiA8ZGU3MGIzOWQwOTEyMjExNDQ3dDZjMzUwNGU3azhhNmEwMjY5NmEyYmRhMTBAbWFpbC5nbWFpbC5jb20+"},"prevInTopic":14312,"nextInTopic":14314,"prevInTime":14312,"nextInTime":14314,"topicId":14156,"numMessagesInTopic":134,"msgSnippet":"Noah, umm, I tried to say the opposite than you understood. What I meant is that if you really adopt REST you should do it in the same fashion as it works on","rawEmail":"Return-Path: &lt;algermissen1971@...&gt;\r\nX-Sender: algermissen1971@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 48235 invoked from network); 21 Dec 2009 23:07:11 -0000\r\nX-Received: from unknown (66.196.94.107)\n  by m14.grp.re1.yahoo.com with QMQP; 21 Dec 2009 23:07:11 -0000\r\nX-Received: from unknown (HELO asmtpout011.mac.com) (17.148.16.86)\n  by mta3.grp.re1.yahoo.com with SMTP; 21 Dec 2009 23:07:10 -0000\r\nMIME-version: 1.0\r\nContent-type: text/plain; charset=ISO-8859-1; format=flowed; delsp=yes\r\nX-Received: from [192.168.2.102] ([84.144.117.28])\n by asmtp011.mac.com (Sun Java(tm) System Messaging Server 6.3-8.01 (built Dec\n 16 2008; 32bit)) with ESMTPSA id &lt;0KV000FCPYTU9490@...&gt; for\n rest-discuss@yahoogroups.com; Mon, 21 Dec 2009 15:05:58 -0800 (PST)\r\nCc: REST Discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nMessage-id: &lt;90060B86-C2EE-4493-AFCC-F74715918318@...&gt;\r\nTo: Noah Campbell &lt;noahcampbell@...&gt;\r\nIn-reply-to: &lt;de70b39d0912211447t6c3504e7k8a6a02696a2bda10@...&gt;\r\nContent-transfer-encoding: quoted-printable\r\nDate: Tue, 22 Dec 2009 00:05:53 +0100\r\nReferences: &lt;hgnpfh+ppfk@...&gt;\n &lt;26DEEAA5-52B2-4C41-9D40-0D716D01F074@...&gt;\n &lt;de70b39d0912211119s188ca8d4s5be4dad0b70e1507@...&gt;\n &lt;EEA84E09-9E47-4127-89D3-0E95D49C2AED@...&gt;\n &lt;de70b39d0912211447t6c3504e7k8a6a02696a2bda10@...&gt;\r\nX-Mailer: Apple Mail (2.936)\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Jan Algermissen &lt;algermissen1971@...&gt;\r\nSubject: Re: [rest-discuss] Re: RESTful M2M Systems and Resource Typing\r\nX-Yahoo-Group-Post: member; u=289191104; y=Gix3I_2fl42ryrWCkd1kI7P5oftha58b_DAlR8XyEUwqrOd6Hc3o92rj\r\nX-Yahoo-Profile: algermissen1971\r\n\r\nNoah,\n\numm, I tried to say the opposite than you understood. What I meant i=\r\ns  \nthat if you really adopt REST you should do it in the same fashion as  =\r\n\nit works on the open Web (including an occasional 406 for example).  \nThe =\r\ncost of the system not running until you fixed the clients to  \ncatch up wi=\r\nth the (rare but possible) unexpected server evolution  \nshould be less tha=\r\nn the overall additional cost of adopting a WS-*  \nlike technology.\n\nIOW, R=\r\nEST is economically cheaper than SOAP even if you embrace the  \noccasional =\r\nproblems[1] resulting from truly uncoupled components.\n\n[1] &#39;Problem&#39; meani=\r\nng: a communication problem based on the client  \nbeing a machine, not a hu=\r\nman.\n\nJan\n\n\n\nOn Dec 21, 2009, at 11:47 PM, Noah Campbell wrote:\n\n&gt; &quot;This wo=\r\nuld lead to &quot;If you are going to adopt REST with all the  \n&gt; benefits do it=\r\n all the way through and believe that the business  \n&gt; level harm occasiona=\r\nlly done by evolution costs far less than  \n&gt; running a SOAP architecture i=\r\nn the long run.&quot;\n&gt;\n&gt; Basically, no.  If your notion that SOAP somehow solve=\r\nd the problems  \n&gt; that you&#39;ve identified being an issue in REST then I&#39;m c=\r\nurious how  \n&gt; you over came SOAP&#39;s shortcoming&#39;s.  If anything, SOAP is mo=\r\nre rigid  \n&gt; and this leads to increase cost in the face of change.  This h=\r\nas  \n&gt; nothing to do with SOAP the architecture, but more SOAP the  \n&gt; impl=\r\nementation.  WSDL has done more harm than good, IMO.  I&#39;ve seen  \n&gt; POX wor=\r\nk really well, but again it&#39;s a different architecture than  \n&gt; REST.\n&gt;\n&gt; I=\r\n&#39;m curious how SLA enforcement is achieved with a SOAP architecture?\n&gt;\n&gt; -N=\r\noah\n&gt;\n&gt; On Mon, Dec 21, 2009 at 1:18 PM, Jan Algermissen &lt;algermissen1971@m=\r\nac.com \n&gt; &gt; wrote:\n&gt; Noah,\n&gt;\n&gt; (see below),\n&gt;\n&gt;\n&gt; On Dec 21, 2009, at 8:19 =\r\nPM, Noah Campbell wrote:\n&gt;\n&gt; &quot;AtomPub for example enables the client *imple=\r\nmentor* to assume that  \n&gt; a GET on a collection will return an Atom feed d=\r\nocument.&quot;\n&gt;\n&gt; To your prior point, something is broken, but what?  Is it th=\r\ne  \n&gt; architectural style (by asking it on this mailing list it may be  \n&gt; =\r\nthat you think it is)?  Is it the transport HTTP?  Is it the  \n&gt; specificat=\r\nion?  Is it the implementor of the server or the client?   \n&gt; Is it somethi=\r\nng else?\n&gt;\n&gt; You focus on the assumption being negative and rightly so, but=\r\n lets  \n&gt; be formal about what an assumption is.  You&#39;ve alluded to an  \n&gt; =\r\nassumption not met as negative.\n&gt;\n&gt; I is usually not that negative on the o=\r\npen Web because the overall  \n&gt; expectations are not that strict; people al=\r\nlways plan for any kinds  \n&gt; of changes to happen and REST advantage here i=\r\ns that the uniform  \n&gt; interface enables the communication (the talking to =\r\neach other) to  \n&gt; succeed even if there is an error. Instead of everything=\r\n falling  \n&gt; apart the client user or developer can pick up the clue (e.g. =\r\nthe  \n&gt; 406 body) and follow her nose to fix things.\n&gt;\n&gt; But this is a mode=\r\nl that is very hard to sell inside the enterprise  \n&gt; because the business =\r\nlevel contracts require a certain degree of  \n&gt; certainty (e.g. SLAs). Sayi=\r\nng &quot;hey, if business transactions  \n&gt; suddenly stop working, look at the lo=\r\nck file and see what the  \n&gt; service owner suggested as a fix. Nah, this wi=\r\nll not happen evry  \n&gt; often, just be prepared for it in any case&quot;.\n&gt;\n&gt; OTH=\r\n, it might be the price to pay for the evolvability extreme of  \n&gt; not need=\r\ning any kind of out of band communication between client and  \n&gt; server dev=\r\neloper at all. Possibly, if you compare investment in time  \n&gt; and travel r=\r\nesources etc. involved in discussing interfaces of the  \n&gt; SOAP style with =\r\nthe cost of some missing transactions it might even  \n&gt; make a compelling c=\r\nase. (Like airline rather pay customers some  \n&gt; money for overbooked fligh=\r\nts than to make sure that every passenger  \n&gt; definitely gets a seat. The l=\r\natter just costs less).\n&gt;\n&gt; This would lead to &quot;If you are going to adopt R=\r\nEST with all the  \n&gt; benefits do it all the way through and believe that th=\r\ne business  \n&gt; level harm occasionally done by evolution costs far less tha=\r\nn  \n&gt; running a SOAP architecture in the long run.\n&gt;\n&gt;\n&gt; If I had to transl=\r\nate this into code it would look like this:\n&gt;\n&gt; fread (buffer, 1, lSize, pF=\r\nile)\n&gt;\n&gt; There is an assumption here given all the variables are initialize=\r\nd  \n&gt; correctly.  Do you see it?\n&gt;\n&gt; The return value is not checked.  The =\r\nread may not have read all the  \n&gt; data in the file in this particular call=\r\n.  Who is the guilty party?   \n&gt; Is it the architecture, POSIX?  Is it the =\r\nspecification, http://www.cplusplus.com/reference/clibrary/cstdio/fread/? \n=\r\n&gt;  Is it the implementation, GNU? Is it the implementor?  I&#39;d argue  \n&gt; it&#39;=\r\ns the implementor.  C has a long established history of using  \n&gt; return va=\r\nlues to indicate success (as well as return values...but  \n&gt; errno provides=\r\n a (kludgy?) workaround).\n&gt;\n&gt; I would urge an implementer to understand the=\r\n architecture style,  \n&gt; the specification, the implementation and focus ve=\r\nry hard on making  \n&gt; sure assumptions like the above are not scattered thr=\r\nough out the  \n&gt; code.  Since REST is about two remote systems communicatin=\r\ng, I&#39;d  \n&gt; argue that any client must validate any assumption before  \n&gt; pr=\r\noceeding, including checking the error code.  If not, the client  \n&gt; will b=\r\ne be brittle, prone to error, and cost more in ongoing  \n&gt; maintenance.  Go=\r\nod, robust applications assume nothing.\n&gt;\n&gt; Let&#39;s assume for a moment the A=\r\ntomPub spec represents the typical  \n&gt; spec for a service.  It assumes REST=\r\nful architectural style using  \n&gt; the HTTP transport.  To your point, the s=\r\nervice must behave has  \n&gt; specified for any goal to be obtained.   Aspects=\r\n of the http  \n&gt; transport &quot;leak&quot; into the interaction even those it has no=\r\nt been  \n&gt; specified.  The spec doesn&#39;t call out all the different response=\r\n  \n&gt; codes and how to handle them, it relies on those familiar with the  \n&gt;=\r\n HTTP transport to deal with those gracefully.  Case in point, if you  \n&gt; d=\r\no:\n&gt;\n&gt; GET /\n&gt; Accept: application/atomsvc+xml\n&gt;\n&gt; and get a\n&gt;\n&gt; 307: Moved=\r\n Temporarily\n&gt; Location: /svc.atom\n&gt;\n&gt; or\n&gt;\n&gt; 305: Use Proxy\n&gt; Location: /p=\r\nroxy/svc.atom\n&gt;\n&gt; or\n&gt;\n&gt; 401: Unauthorized\n&gt; www-authenticate: basic\n&gt;\n&gt; Is=\r\n this an error?\n&gt;\n&gt; Roy thesis doesn&#39;t explicitly say yes or no.  However, =\r\nthe argument  \n&gt; for a uniform interface is that the intermediary can parti=\r\ncipate  \n&gt; without affecting the remote call.  I&#39;ll extrapolate a little in=\r\n  \n&gt; that a uniform interface provides a common behavior that permeates  \n&gt;=\r\n all levels of an architecture, including the implementation.  The  \n&gt; test=\r\ners should be not be surprised to see the 3 response outline  \n&gt; above and =\r\nshould be able to accommodate appropriately.\n&gt;\n&gt;\n&gt; Agreed and I see your po=\r\nint. But (sorry :-) I&#39;d expect an HTTP  \n&gt; client connector to be able to f=\r\nollow these redirects or  \n&gt; authenticate on its own without even propagati=\r\nng it to the next  \n&gt; level. Most client connectors do so (depending on con=\r\nfig of course).  \n&gt; So, I&#39;d limit what we are talking about to steady state=\r\ns and leave  \n&gt; out the transient ones.\n&gt;\n&gt; However, I understand you to sa=\r\ny that an AtomPub client  \n&gt; implementation that uses an HTTP client connec=\r\ntor must of course  \n&gt; implement all of HTTP. And yes, I agree that the 406=\r\n must be handled  \n&gt; correctly. But then? there is no possible recovery fro=\r\nm the broken  \n&gt; expectation to receive an Atom feed.\n&gt;\n&gt;\n&gt;\n&gt; Hopefully thi=\r\ns response helps move the discussion forward :)\n&gt;\n&gt; Thanks for keeping up w=\r\nith this. I am just sorry that I seem to be  \n&gt; so unable to get this accro=\r\nss.\n&gt;\n&gt; Jan\n&gt;\n&gt;\n&gt;\n&gt;\n&gt; -Noah\n&gt;\n&gt; On Mon, Dec 21, 2009 at 4:35 AM, Jan Algerm=\r\nissen &lt;algermissen1971@... \n&gt; &gt; wrote:\n&gt;\n&gt; On Dec 21, 2009, at 1:25 PM,=\r\n Jorn Wildt wrote:\n&gt;\n&gt; &gt; Oh, lets backtrack a bit. You said earlier on:\n&gt; &gt;=\r\n\n&gt; &gt;&gt; In the enterprise people want to develop clients and services in\n&gt; &gt;&gt;=\r\n parallel, shich rules out client design by inspecting the runtime\n&gt; &gt;&gt; beh=\r\navior of a service.\n&gt; &gt;\n&gt; &gt; Then I said: you need not expect at runtime, yo=\r\nu can have a mock. To\n&gt; &gt; this you answered: no, you build clients on specs=\r\n.\n&gt; &gt;\n&gt; &gt; What I was trying to say was: if you build clients on specs and R=\r\nFC\n&gt; &gt; 5023 (application/atomsrv+xml) is a spec, then what is keeping you\n&gt;=\r\n &gt; from building any kind of REST client on similar specs for other\n&gt; &gt; med=\r\nia types? If both server and client agrees on the media type spec\n&gt; &gt; then =\r\nboth can be built individually and simultaneously.\n&gt;\n&gt;\n&gt; No, that is all fi=\r\nne and I agree. I am questioning the RESTfulness of\n&gt; specs that allow the =\r\nclients to make assumptions about the hypermedia\n&gt; it will receive at some =\r\npoint in the interaction. AtomPub for example\n&gt; enables the client *impleme=\r\nntor* to assume that a GET on a collection\n&gt; will return an Atom feed docum=\r\nent. This is equivalent to making an\n&gt; assumption about the application sta=\r\nte to be in after the GET to the\n&gt; collection.\n&gt;\n&gt; And I am trying to say t=\r\nhat M2M clients (besides passibe, server\n&gt; driven crawlers) can only be bui=\r\nlt when such contracts are in place.\n&gt;\n&gt; Jan\n&gt;\n&gt;\n&gt; &gt;\n&gt; &gt; /J=F8rn\n&gt; &gt;\n&gt; &gt;\n&gt; =\r\n&gt;\n&gt; &gt; ------------------------------------\n&gt; &gt;\n&gt; &gt; Yahoo! Groups Links\n&gt; &gt;\n=\r\n&gt; &gt;\n&gt; &gt;\n&gt;\n&gt; --------------------------------------\n&gt; Jan Algermissen\n&gt;\n&gt; Ma=\r\nil: algermissen@...\n&gt; Blog: http://algermissen.blogspot.com/\n&gt; Home: ht=\r\ntp://www.jalgermissen.com\n&gt; --------------------------------------\n&gt;\n&gt;\n&gt;\n&gt;\n=\r\n&gt;\n&gt; ------------------------------------\n&gt;\n&gt; Yahoo! Groups Links\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n=\r\n&gt; --------------------------------------\n&gt; Jan Algermissen\n&gt;\n&gt; Mail: algerm=\r\nissen@...\n&gt; Blog: http://algermissen.blogspot.com/\n&gt; Home: http://www.j=\r\nalgermissen.com\n&gt; --------------------------------------\n&gt;\n&gt;\n&gt;\n&gt;\n\n---------=\r\n-----------------------------\nJan Algermissen\n\nMail: algermissen@...\nBl=\r\nog: http://algermissen.blogspot.com/\nHome: http://www.jalgermissen.com\n----=\r\n----------------------------------\n\n\n\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":124198377,"authorName":"William Martinez Pomares","from":"&quot;William Martinez Pomares&quot; &lt;wmartinez@...&gt;","profile":"willmarpo","replyTo":"SENDER","senderId":"RK8UMagH7DLQ89ocvleGQutdZ9VtCWHQ6zzBRCnPaHkmh2P39tPDG64v7q1_lfbA4BAR8pwJZ48w_mvncIdoY3sYpxAtaFAAJiGYb2d7Ux1jVFd7rrCXhFtQ","spamInfo":{"isSpam":false,"reason":"6"},"subject":"Re: REST isn&#39;t hard to learn, it&#39;s just taught wrong.","postDate":"1261412863","msgId":14300,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGhnbzdsdis0NTh1QGVHcm91cHMuY29tPg==","inReplyToHeader":"PDIwMDkxMjIwMjEyNjMzLjcxNWNhOTQyLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4="},"prevInTopic":14294,"nextInTopic":14316,"prevInTime":14299,"nextInTime":14301,"topicId":14255,"numMessagesInTopic":44,"msgSnippet":"Hello Erick. I actually cheer that idea of yours. I think I mentioned it once in this list, that I usually do not answer to HTTP issues, my comments are more","rawEmail":"Return-Path: &lt;wmartinez@...&gt;\r\nX-Sender: wmartinez@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 2447 invoked from network); 21 Dec 2009 16:59:53 -0000\r\nX-Received: from unknown (98.137.34.44)\n  by m1.grp.sp2.yahoo.com with QMQP; 21 Dec 2009 16:59:53 -0000\r\nX-Received: from unknown (HELO n40b.bullet.mail.sp1.yahoo.com) (66.163.168.154)\n  by mta1.grp.sp2.yahoo.com with SMTP; 21 Dec 2009 16:59:53 -0000\r\nX-Received: from [69.147.65.150] by n40.bullet.mail.sp1.yahoo.com with NNFMP; 21 Dec 2009 16:27:43 -0000\r\nX-Received: from [98.137.34.36] by t7.bullet.mail.sp1.yahoo.com with NNFMP; 21 Dec 2009 16:27:43 -0000\r\nDate: Mon, 21 Dec 2009 16:27:43 -0000\r\nTo: rest-discuss@yahoogroups.com\r\nMessage-ID: &lt;hgo7lv+458u@...&gt;\r\nIn-Reply-To: &lt;20091220212633.715ca942.eric@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;ISO-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-Yahoo-Newman-Property: groups-compose\r\nX-eGroups-Msg-Info: 1:6:0:0:0\r\nFrom: &quot;William Martinez Pomares&quot; &lt;wmartinez@...&gt;\r\nSubject: Re: REST isn&#39;t hard to learn, it&#39;s just taught wrong.\r\nX-Yahoo-Group-Post: member; u=124198377; y=mZ5O3tCW98ET2XTI4p53pZ1i6XiLLGFCEysQnS_gqzLb5acx\r\nX-Yahoo-Profile: willmarpo\r\n\r\nHello Erick.\nI actually cheer that idea of yours. I think I mentioned it on=\r\nce in this list, that I usually do not answer to HTTP issues, my comments a=\r\nre more of the architectural related type, and I usually say that you must =\r\nfirst determine if your application will gain from REST or not before imple=\r\nmenting.\n\nFirst, no architect comes from a non-development background. You =\r\nmust be first a developer. I do teach software system architecture class at=\r\n the University, and the first part of the course is focused to make the st=\r\nudent, a developer, to stop thinking as such and start seeing the solution =\r\nas a bigger, wider thing, beyond code.A difficult thing to do, believe me. =\r\nWhen we see REST (just 2 hours introduction), we study it as a metaphor dri=\r\nven architecture, after we understood all variables about quality propertie=\r\ns and views. At that point, students understand that not all systems are th=\r\ne same, and that you can analyze lots of factors before even thinking on cl=\r\nasses and packages. \n\nTo truly understand REST, you need to understand the =\r\nbasics of architecture, the Whys. Then you can work on defining the need of=\r\n REST for you app, and then on how to organize your architectural elements =\r\nfollowing the REST metaphorical constrains. Converting that into code shoul=\r\nd be the least difficult thing to do. And there is where you see all those =\r\nquestions about APIs and HTTP interactions.\nI do think the important things=\r\n are not there, the important thing is not about using POST or PUT. See wha=\r\nt I mean?\n\nIt is funny you mention about the book. I&#39;m actually in the proc=\r\ness of writing-defining a book called Architecting with REST, but following=\r\n a different approach of the one you exemplify.\n\nI would love to see more q=\r\nuestions in this list referred to architectural or design issues, but of co=\r\nurse no less of the HTTP ones, which are an invaluable source of knowledge =\r\nfor actually creating the app.\n\nBTW, REST is actually kind of hard.\n\nCheers=\r\n!\n\nWilliam Martinez Pomares\n\n--- In rest-discuss@yahoogroups.com, &quot;Eric J. =\r\nBowman&quot; &lt;eric@...&gt; wrote:\n&gt;\n&gt; The problem that&#39;s been preoccupying my thoug=\r\nhts during the time I\n&gt; spend experimenting with REST, is how to teach it. =\r\n I don&#39;t think\n&gt; anyone disputes the fact that REST is hard to learn.  But =\r\nwhy is that?\n&gt; I&#39;ve convinced myself it&#39;s not because the students are moro=\r\nns, but\n&gt; that we, collectively as a community, have failed to teach it\n&gt; p=\r\nroperly.  The best evidence of that, is the recent thread asking for\n&gt; exam=\r\nples of good REST systems: It&#39;s infinitely easier to find REST\n&gt; implementa=\r\ntions that aren&#39;t, than it is to find good examples (I&#39;ve\n&gt; seen REST imple=\r\nmented effectively on Intranets where the client is a\n&gt; known quantity) tha=\r\nt we can point to.\n&gt; \n&gt; We don&#39;t teach it properly, because we didn&#39;t learn=\r\n it properly\n&gt; ourselves.  Besides Roy, who here at any level of REST abili=\r\nty has a\n&gt; background in software architecture?  Personally, I think it too=\r\nk me so\n&gt; many years to become comfortable with REST because it was my firs=\r\nt\n&gt; experience with software development guided by a defined architectural\n=\r\n&gt; style.  I basically had to teach myself software architecture, but not\n&gt; =\r\nuntil well after I started fancying myself a REST developer.\n&gt; \n&gt; What I&#39;m =\r\nsaying, is that REST must be taught in terms of applied\n&gt; architecture, ins=\r\ntead of by example, before there will ever be enough\n&gt; good examples to poi=\r\nnt to.  You can&#39;t learn XSLT by reading O&#39;Reilly&#39;s\n&gt; &quot;XSLT Cookbook&quot; of exa=\r\nmples, yet we try teaching REST by hauling out\n&gt; the good ol&#39; shopping cart=\r\n every time.  This has obviously failed.\n&gt; \n&gt; I don&#39;t think it&#39;s necessary =\r\nfor a REST student to understand anything\n&gt; about software architecture (ex=\r\ncept maybe a few terms), only to follow\n&gt; an approach grounded in software =\r\narchitecture.  The wonderful new\n&gt; textbook, &quot;Software Architecture:  Found=\r\nations, Theory, and Practice&quot; is\n&gt; something that should be read by the com=\r\nmunity, but not for the purpose\n&gt; of using that textbook to teach REST.  Th=\r\ne textbook uses REST to\n&gt; illustrate the principles of software architectur=\r\ne, it doesn&#39;t teach\n&gt; REST.  But it can be used to inform us on how to bett=\r\ner teach REST.\n&gt; \n&gt; The textbook has chapters on Modeling, Visualization, A=\r\nnalysis,\n&gt; Implementation, and Deployment and Mobility.  This is the discip=\r\nlined\n&gt; approach that I keep harping on about, of late.\n&gt; \n&gt; The Modeling c=\r\nhapter discusses modeling both architectures and\n&gt; architectural styles.  I=\r\nt says nothing about modeling specific to\n&gt; REST.  Roy&#39;s thesis uses modeli=\r\nng to illustrate the REST architectural\n&gt; style.  So the first challenge in=\r\n teaching REST is to teach how to\n&gt; model the components, connectors, resou=\r\nrces and interfaces for a\n&gt; proposed system.  REST constrains the interacti=\r\non between connectors,\n&gt; and these constraints must be part of the model.\n&gt;=\r\n \n&gt; The Visualization chapter explains the separation of modeling and\n&gt; vis=\r\nualization, but says nothing about visualization within the context\n&gt; of RE=\r\nST.  The second challenge in teaching REST using a software-\n&gt; architecture=\r\n-centric approach, is to use the model as a basis for\n&gt; visualizing a propo=\r\nsed system in terms of the Process, Connector and\n&gt; Data views for REST as =\r\ndescribed in Roy&#39;s thesis.\n&gt; \n&gt; The Analysis chapter also has nothing REST-=\r\nspecific.  It&#39;s fairly self-\n&gt; explanatory, though.  Modeling, Visualizatio=\r\nn and Analysis are not a\n&gt; serial approach, but an iterative process.  This=\r\n is the stage where, if\n&gt; the Model calls for the Atom media type, despite =\r\nthe lack of URIs at\n&gt; this point, the documents may be written and validate=\r\nd to flesh out the\n&gt; data model for analysis.  How many hardware resources =\r\ndoes the model\n&gt; require?  Does the model need to be adjusted up/down?  The=\r\n third\n&gt; challenge in teaching REST is, does the model fit the system&#39;s goa=\r\nls?\n&gt; \n&gt; Finally, we get to Implementation, another chapter with nary a pee=\r\np\n&gt; about REST.  (I say finally, because the Deployment chapter covers\n&gt; to=\r\npics that, frankly, anyone pursuing REST probably has hands-on\n&gt; experience=\r\n with, so I don&#39;t see it as a teaching challenge.)  Yes, this\n&gt; is where a =\r\nURI allocation scheme is finally devised for the modeled,\n&gt; visualized and =\r\nanalyzed resources, and methods implemented so we can\n&gt; pass data over the =\r\nwire.  It is iterative with the previous methods --\n&gt; selecting off-the-she=\r\nlf parts may require architectural adjustment due\n&gt; to different design ass=\r\numptions being made in a standard library.\n&gt; \n&gt; The textbook defines Implem=\r\nentation as the problem of maintaining a\n&gt; mapping between the developed sy=\r\nstem and its architectural model, and\n&gt; focuses on frameworks as the soluti=\r\non.  It also says, &quot;To imbue\n&gt; [desired properties] in the target system, t=\r\nhe implementation _must_ be\n&gt; derived from its architecture.&quot;  This is the =\r\nfourth, and most important,\n&gt; challenge in teaching REST.  Is the reason so=\r\n many systems claim to be\n&gt; RESTful, but aren&#39;t, because 99% of developers =\r\nsimply don&#39;t *know* how\n&gt; to derive an implementation from an architectural=\r\n style, because they&#39;ve\n&gt; never been taught?  I don&#39;t think they need to be=\r\n taught, only given the\n&gt; tools to understand how a RESTful implementation =\r\nis derived -- that\n&gt; these tools are derived from the tenets of software ar=\r\nchitecture may\n&gt; remain hidden behind a generic interface (so to speak).\n&gt; =\r\n\n&gt; My suggestion is to dredge up and dust off ye olde shopping-cart\n&gt; examp=\r\nle.  Why do we insist on presenting it by defining it as what\n&gt; methods to =\r\napply to what resources of interest to obtain what response\n&gt; code and data=\r\n, beginning by defining a URI allocation scheme, when we\n&gt; know that URI al=\r\nlocation schemes have (almost) nothing to do with REST,\n&gt; and Roy has told =\r\nus that we should be discussing our resources in terms\n&gt; of media types and=\r\n link relations instead?  At some point, it should be\n&gt; presented in terms =\r\nof Modeling, Visualizing, Analyzing, and\n&gt; Implementing in a REST-specific =\r\nfashion.  I think this may address some\n&gt; of the criticism of REST lacking =\r\nsome sort of formal guidelines.\n&gt; \n&gt; In brief:  Define resources in terms o=\r\nf standard media types and link\n&gt; relations, saving URI allocation and meth=\r\nod selection for the\n&gt; implementation phase.\n&gt; \n&gt; -Eric\n&gt;\n\n\n\n"}}
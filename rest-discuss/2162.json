{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":121832671,"authorName":"Terrence Molson","from":"Terrence Molson &lt;inthedarkplace@...&gt;","profile":"inthedarkplace","replyTo":"SENDER","senderId":"FSQXsrNyUWES1SSfIZkq31Rq1u5mF0siLf3hO3NXilE7APyE_uy4wDlPPYB4glr8lgu1O7j6nkTev5oZK-ybfeYQUkzlxX2Ki8flkutQNURG","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] PUT or POST Clarification","postDate":"1029985127","msgId":2162,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMDIwODIyMDI1ODQ3Ljg4NTQwLnFtYWlsQHdlYjEzMDAyLm1haWwueWFob28uY29tPg==","inReplyToHeader":"PDAwNDYwMWMyNDk3ZCRkYTRlYzQ1MCQ2NDAwYThjMEBzZWFpcnRobGFwdG9wPg=="},"prevInTopic":2160,"nextInTopic":2164,"prevInTime":2161,"nextInTime":2163,"topicId":2132,"numMessagesInTopic":25,"msgSnippet":"Seairth, I ve found this to pretty much be a bad idea. Originally, in my app, I was going with a design that called for urls like: /users/{UserID} ---","rawEmail":"Return-Path: &lt;inthedarkplace@...&gt;\r\nX-Sender: inthedarkplace@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_1_0_1); 22 Aug 2002 02:58:48 -0000\r\nReceived: (qmail 16597 invoked from network); 22 Aug 2002 02:58:48 -0000\r\nReceived: from unknown (66.218.66.216)\n  by m13.grp.scd.yahoo.com with QMQP; 22 Aug 2002 02:58:48 -0000\r\nReceived: from unknown (HELO web13002.mail.yahoo.com) (216.136.174.12)\n  by mta1.grp.scd.yahoo.com with SMTP; 22 Aug 2002 02:58:48 -0000\r\nMessage-ID: &lt;20020822025847.88540.qmail@...&gt;\r\nReceived: from [165.247.2.34] by web13002.mail.yahoo.com via HTTP; Wed, 21 Aug 2002 19:58:47 PDT\r\nDate: Wed, 21 Aug 2002 19:58:47 -0700 (PDT)\r\nSubject: Re: [rest-discuss] PUT or POST Clarification\r\nTo: Seairth Jacobs &lt;seairth@...&gt;,\n  rest-discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nIn-Reply-To: &lt;004601c2497d$da4ec450$6400a8c0@seairthlaptop&gt;\r\nMIME-Version: 1.0\r\nContent-Type: multipart/alternative; boundary=&quot;0-648943381-1029985127=:85327&quot;\r\nFrom: Terrence Molson &lt;inthedarkplace@...&gt;\r\nX-Yahoo-Group-Post: member; u=121832671\r\nX-Yahoo-Profile: inthedarkplace\r\n\r\n\r\n--0-648943381-1029985127=:85327\r\nContent-Type: text/plain; charset=us-ascii\r\n\r\n\nSeairth,\nI&#39;ve found this to pretty much be a bad idea. Originally, in my app, I was going with a design that called for urls like:\n/users/{UserID} ---&gt; represents the user\n/users/{UserID}/realname ---&gt; the real name of the user\n/users/{UserID}/email ---&gt; the email addy of the user\n Your application simply needs to be smart enough to figure out what&#39;s going on. This allows users to only expose specific information as well as allowing users to update only specific parts of their profile. eg\nPUT /users/{UserID}/email\n&lt;rwss:user&gt;&lt;rwss:email&gt;dwfefwfwefwe&lt;/rwss:email&gt;&lt;/rwss:user&gt;\nThe problem with this is that I&#39;ve found it essentially destroys HTTP caching controls. A client webservice can do a GET on /users/{userID}/email. Then another webservice can do a PUT /users/{userID} to change all information about the user including the email. Then when the first webservice does another GET on /users/{userID}/email they don&#39;t get the new email. \nThis could just be due to my poor understanding of caching, but I think the issue simply goes to the heart of REST. Only objects which are truly resources, that is informationally significant, should be assigned URIs. Further, all messages should be coarse-grained and represent the complete state of the resource. Adam Bosworth has said a lot on coarse-grained messaging -- http://www.fawcette.com/xmlmag/2002_06/magazine/departments/endtag/\nAnywyas, just my 2c\nSeairth Jacobs wrote:So here is the problem we are talking about:\n\nWe start by PUTting a resource on a server.  The server returns a URL to the\nnewly created resource.  Later, we realize that we need to change a part of\nthe resource, so we want to update only that part.  So why not just POST the\nentire &quot;resource&quot; (the same that was PUT earlier, but now with the change)\nto the given URL for the resource?  The server can then compare them and\ndetermine if the change is allowed or not.\n\nAs an alternative, when the original resource is PUT on the server, the\nserver could return a series of URLs.  The first URL would be for the\nresource itself.  The additional URLs would be for different representations\nof the resource that effectively allow limited interaction with parts of the\nresource.  For instance, you may get a response like this:\n\n&lt;purchaseOrder&gt;\n    &lt;URL&gt;http://sample.com/path/purchaseOrders/12345&lt;/URL&gt;\n    &lt;editable&gt;\n\n&lt;ShippingAddressURL&gt;http://sample.com/path/purchaseOrders/12345/shipTo&lt;/Ship\npingAddressURL&gt;\n\n&lt;ShippingMethodURL&gt;http://sample.com/path/purchaseOrders/12345/shipVia&lt;/Ship\npingMethodURL&gt;\n    &lt;/editable&gt;\n&lt;/purchaseOrder&gt;\n\n\nNow, you could POST to any of the above URLs the parts that you want to\nupdate.  If the requested update is in the shipping address only, then you\ncould use &lt;ShippingAddressURL&gt; and send only that part of the purchaseOrder.\nThis technique would allow each business to determine how much or how little\nof the resource can be edited simply by returning only the URLs that allow\nediting.  Of course, this technique is that it requires both parties to know\na common vocabulary, which may or may not be a good thing.  :)\n\n\nOr has all of this been covered already?  :)\n\n---\nSeairth Jacobs\nseairth@...\n\n\nTo unsubscribe from this group, send an email to:\nrest-discuss-unsubscribe@yahoogroups.com\n\n\n\nYour use of Yahoo! Groups is subject to the Yahoo! Terms of Service. \n\n\n\n---------------------------------\nDo You Yahoo!?\nHotJobs, a Yahoo! service - Search Thousands of New Jobs\r\n--0-648943381-1029985127=:85327\r\nContent-Type: text/html; charset=us-ascii\r\n\r\n&lt;P&gt;Seairth,\n&lt;P&gt;I&#39;ve found this to pretty much be a bad idea. Originally, in my app, I was going&nbsp;with a design that called for&nbsp;urls like:\n&lt;P&gt;/users/{UserID} ---&gt; represents the user\n&lt;P&gt;/users/{UserID}/realname ---&gt; the real name of the user\n&lt;P&gt;/users/{UserID}/email ---&gt; the email addy of the user\n&lt;P&gt;&nbsp;Your application simply needs to be smart enough to figure out what&#39;s going on. This allows users to only expose specific information as well as allowing users to update only specific parts of their profile. eg\n&lt;P&gt;PUT /users/{UserID}/email\n&lt;P&gt;&lt;rwss:user&gt;&lt;rwss:email&gt;dwfefwfwefwe&lt;/rwss:email&gt;&lt;/rwss:user&gt;\n&lt;P&gt;The problem with this is that I&#39;ve found&nbsp;it essentially destroys HTTP caching controls. A client webservice can do a GET on /users/{userID}/email. Then another webservice can do a PUT /users/{userID} to change all information about the user including the email. Then when the first webservice does another GET on /users/{userID}/email they don&#39;t get the new email. \n&lt;P&gt;This could just be due to my poor understanding of caching, but I think the issue simply goes to the heart of REST. Only objects which are truly resources, that is informationally significant, should be assigned URIs. Further, all messages should be coarse-grained and represent the complete state of the resource. Adam Bosworth has said a lot on coarse-grained messaging -- &lt;A href=&quot;http://www.fawcette.com/xmlmag/2002_06/magazine/departments/endtag/&quot;&gt;http://www.fawcette.com/xmlmag/2002_06/magazine/departments/endtag/&lt;/A&gt;\n&lt;P&gt;Anywyas, just my 2c\n&lt;P&gt;&lt;B&gt;&lt;I&gt;Seairth Jacobs &lt;SEAIRTH@...&gt;&lt;/I&gt;&lt;/B&gt;wrote:\n&lt;BLOCKQUOTE style=&quot;PADDING-LEFT: 5px; MARGIN-LEFT: 5px; BORDER-LEFT: #1010ff 2px solid&quot;&gt;&lt;TT&gt;So here is the problem we are talking about:&lt;BR&gt;&lt;BR&gt;We start by PUTting a resource on a server.&nbsp; The server returns a URL to the&lt;BR&gt;newly created resource.&nbsp; Later, we realize that we need to change a part of&lt;BR&gt;the resource, so we want to update only that part.&nbsp; So why not just POST the&lt;BR&gt;entire &quot;resource&quot; (the same that was PUT earlier, but now with the change)&lt;BR&gt;to the given URL for the resource?&nbsp; The server can then compare them and&lt;BR&gt;determine if the change is allowed or not.&lt;BR&gt;&lt;BR&gt;As an alternative, when the original resource is PUT on the server, the&lt;BR&gt;server could return a series of URLs.&nbsp; The first URL would be for the&lt;BR&gt;resource itself.&nbsp; The additional URLs would be for different representations&lt;BR&gt;of the resource that effectively allow limited interaction with parts of the&lt;BR&gt;resource.&nbsp; For instance, you may get a response like this:&lt;BR&gt;&lt;BR&gt;&lt;purchaseOrder&gt;&lt;BR&gt;&nbsp;&nbsp;&nbsp; &lt;URL&gt;&lt;A href=&quot;http://sample.com/path/purchaseOrders/12345&quot;&gt;http://sample.com/path/purchaseOrders/12345&lt;/A&gt;&lt;/URL&gt;&lt;BR&gt;&nbsp;&nbsp;&nbsp; &lt;editable&gt;&lt;BR&gt;&lt;BR&gt;&lt;ShippingAddressURL&gt;&lt;A href=&quot;http://sample.com/path/purchaseOrders/12345/shipTo&quot;&gt;http://sample.com/path/purchaseOrders/12345/shipTo&lt;/A&gt;&lt;/Ship&lt;BR&gt;pingAddressURL&gt;&lt;BR&gt;&lt;BR&gt;&lt;ShippingMethodURL&gt;&lt;A href=&quot;http://sample.com/path/purchaseOrders/12345/shipVia&quot;&gt;http://sample.com/path/purchaseOrders/12345/shipVia&lt;/A&gt;&lt;/Ship&lt;BR&gt;pingMethodURL&gt;&lt;BR&gt;&nbsp;&nbsp;&nbsp; &lt;/editable&gt;&lt;BR&gt;&lt;/purchaseOrder&gt;&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;Now, you could POST to any of the above URLs the parts that you want to&lt;BR&gt;update.&nbsp; If the requested update is in the shipping address only, then you&lt;BR&gt;could use &lt;ShippingAddressURL&gt; and send only that part of the purchaseOrder.&lt;BR&gt;This technique would allow each business to determine how much or how little&lt;BR&gt;of the resource can be edited simply by returning only the URLs that allow&lt;BR&gt;editing.&nbsp; Of course, this technique is that it requires both parties to know&lt;BR&gt;a common vocabulary, which may or may not be a good thing.&nbsp; :)&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;Or has all of this been covered already?&nbsp; :)&lt;BR&gt;&lt;BR&gt;---&lt;BR&gt;Seairth Jacobs&lt;BR&gt;seairth@...&lt;BR&gt;&lt;BR&gt;&lt;/TT&gt;&lt;BR&gt;&lt;TT&gt;To unsubscribe from this group, send an email to:&lt;BR&gt;rest-discuss-unsubscribe@yahoogroups.com&lt;BR&gt;&lt;BR&gt;&lt;/TT&gt;&lt;BR&gt;&lt;BR&gt;&lt;TT&gt;Your use of Yahoo! Groups is subject to the &lt;A href=&quot;http://docs.yahoo.com/info/terms/&quot;&gt;Yahoo! Terms of Service&lt;/A&gt;.&lt;/TT&gt; &lt;BR&gt;&lt;/BLOCKQUOTE&gt;&lt;p&gt;&lt;br&gt;&lt;hr size=1&gt;&lt;b&gt;Do You Yahoo!?&lt;/b&gt;&lt;br&gt;\n&lt;a href=&quot;http://rd.yahoo.com/careers/mailsig/new/*http://www.hotjobs.com&quot;&gt;HotJobs, a Yahoo! service&lt;/a&gt; - Search Thousands of New Jobs\r\n--0-648943381-1029985127=:85327--\r\n\n"}}
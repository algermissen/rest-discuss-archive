{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":331949899,"authorName":"Sebastien Lambla","from":"Sebastien Lambla &lt;seb@...&gt;","profile":"serialseb","replyTo":"SENDER","senderId":"WOzrSWb3iCFQQaeWemVkf6_q_BfvBG4ehRqNWpJDLVyr9w6c2j-KpYOnVdB4738u8zRC622I48IU9iUSLune4oWlUd8c2jhgyBkl","spamInfo":{"isSpam":false,"reason":"12"},"subject":"RE: [rest-discuss] Re: Rails 3.2 and PATCH","postDate":"1323981402","msgId":18020,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDNEREQwQkU2NTU4NjlENEVBNTA2NjUyQjM4MDNBRUY2QzAzQkU0OTRAUFJJU00uY2FmZmVpbmUtaXQubmV0Pg==","inReplyToHeader":"PGpjZGphNitvczYyQGVHcm91cHMuY29tPg==","referencesHeader":"PEI2M0JCMzA3LTk3MDYtNENDRS04RDFDLTc3MjM4QTdBMjUxOUBub3Jkc2MuY29tPiw8amNkamE2K29zNjJAZUdyb3Vwcy5jb20+"},"prevInTopic":18019,"nextInTopic":18021,"prevInTime":18019,"nextInTime":18021,"topicId":18011,"numMessagesInTopic":86,"msgSnippet":"Mostly because the whole web works that way. The fact that the guys that built Rails were implementing rest badly (and calling it restful routes or whatever)","rawEmail":"Return-Path: &lt;seb@...&gt;\r\nX-Sender: seb@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 64489 invoked from network); 15 Dec 2011 20:39:04 -0000\r\nX-Received: from unknown (98.137.35.162)\n  by m16.grp.sp2.yahoo.com with QMQP; 15 Dec 2011 20:39:04 -0000\r\nX-Received: from unknown (HELO prism.caffeine-it.net) (109.169.48.57)\n  by mta6.grp.sp2.yahoo.com with SMTP; 15 Dec 2011 20:39:03 -0000\r\nX-Received: from PRISM.caffeine-it.net ([fe80::35e4:b04c:7dd0:3207]) by\n PRISM.caffeine-it.net ([fe80::35e4:b04c:7dd0:3207%14]) with mapi; Thu, 15 Dec\n 2011 20:39:03 +0000\r\nTo: Jakob Strauch &lt;jakob.strauch@...&gt;, &quot;rest-discuss@yahoogroups.com&quot;\n\t&lt;rest-discuss@yahoogroups.com&gt;\r\nThread-Topic: [rest-discuss] Re: Rails 3.2 and PATCH\r\nThread-Index: AQHMu2NqVdA6t2YLE0uYg1gyym+EapXdW7sv\r\nDate: Thu, 15 Dec 2011 20:36:42 +0000\r\nMessage-ID: &lt;3DDD0BE655869D4EA506652B3803AEF6C03BE494@...-it.net&gt;\r\nReferences: &lt;B63BB307-9706-4CCE-8D1C-77238A7A2519@...&gt;,&lt;jcdja6+os62@...&gt;\r\nIn-Reply-To: &lt;jcdja6+os62@...&gt;\r\nAccept-Language: en-GB, en-US\r\nContent-Language: en-GB\r\nX-MS-Has-Attach:\r\nX-MS-TNEF-Correlator:\r\nContent-Type: text/plain; charset=&quot;us-ascii&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\nMIME-Version: 1.0\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Sebastien Lambla &lt;seb@...&gt;\r\nSubject: RE: [rest-discuss] Re: Rails 3.2 and PATCH\r\nX-Yahoo-Group-Post: member; u=331949899; y=wbkyvpCuMYsc8aSzkIJqQrIufzZRuTySwft4pIuPLjhSQrmD\r\nX-Yahoo-Profile: serialseb\r\n\r\nMostly because the whole web works that way. The fact that the guys that bu=\r\nilt Rails were implementing rest badly (and calling it restful routes or wh=\r\natever) won&#39;t be enough of a leverage to change the whole web. neither was =\r\nit for people that did non-safe operations on Get.\n\nEventually, people lear=\r\nn and use HTTP the way it&#39;s implemented out there and stop breaking things =\r\nand everybody lives happily after that.\n\nAs for &quot;fixing&quot; it, indeed there i=\r\ns nothing to be fixed, there&#39;s already POST and PATCH, the stuff that needs=\r\n fixing is rails.\n\nSeb\n________________________________________\nFrom: rest-=\r\ndiscuss@yahoogroups.com [rest-discuss@yahoogroups.com] on behalf of Jakob S=\r\ntrauch [jakob.strauch@...]\nSent: 15 December 2011 19:54\nTo: rest-discuss=\r\n@yahoogroups.com\nSubject: [rest-discuss] Re: Rails 3.2 and PATCH\n\nThe probl=\r\nem is, that using PUT for partials is a widely used anti pattern. this may =\r\nsound weird, but maybe it is time to redefine (ease) the HTTP specs to matc=\r\nh to the reality...?\n\nIf major frameworks like e.g. rails use this anti pat=\r\ntern, how can any intermediary rely on the intended semantics of PUT nowada=\r\nys?\n\nJakob\n\n\n--- In rest-discuss@yahoogroups.com, Jan Algermissen &lt;jan.alge=\r\nrmissen@...&gt; wrote:\n&gt;\n&gt;\n&gt; On Dec 15, 2011, at 11:54 AM, Mike Kelly wrote:\n&gt;=\r\n\n&gt; &gt; What is it specifically, in practice, that non-compliant\n&gt; &gt; implement=\r\nations like Rails lose by &#39;doing it wrong&#39; and allowing\n&gt; &gt; partial PUTs?\n&gt;=\r\n\n&gt; When a client (or intermediary, for that matter) re-does a PUT N-times (=\r\ne.g. because it did not receive any response the first N-1 times due to net=\r\nwork problems) the result on the server might not be what the client assume=\r\ns it is, given the idempotent nature of PUT.\n&gt;\n&gt; A client that is aware of =\r\nthe server&#39;s tunneling-partial-update-through-PUT semantics might not redo =\r\nthe PUT but any intermediary in between might (because they would not be aw=\r\nare of the out-of-band knowledge / just like Google accelerator in the case=\r\n of GET-to-delete-account).\n&gt;\n&gt; What is the problem of just using POST for =\r\nthe partial update in the first place? This is what POST is for.\n&gt;\n&gt; Jan\n&gt;\n=\r\n&gt;\n&gt;\n&gt; &gt;\n&gt; &gt; On Thu, Dec 15, 2011 at 10:36 AM, Jan Algermissen\n&gt; &gt; &lt;jan.alge=\r\nrmissen@...&gt; wrote:\n&gt; &gt;&gt;\n&gt; &gt;&gt; On Dec 15, 2011, at 11:02 AM, Mike Kelly wrot=\r\ne:\n&gt; &gt;&gt;\n&gt; &gt;&gt;&gt; On Thu, Dec 15, 2011 at 9:14 AM, Jan Algermissen\n&gt; &gt;&gt;&gt; &lt;jan.a=\r\nlgermissen@...&gt; wrote:\n&gt; &gt;&gt;&gt;&gt;\n&gt; &gt;&gt;&gt;&gt; On Dec 15, 2011, at 1:42 AM, Mike Kell=\r\ny wrote:\n&gt; &gt;&gt;&gt;&gt;\n&gt; &gt;&gt;&gt;&gt;&gt; I created a question on Stack Overflow about this a=\r\n while ago:\n&gt; &gt;&gt;&gt;&gt;&gt;\n&gt; &gt;&gt;&gt;&gt;&gt; http://stackoverflow.com/questions/2364110/what=\r\ns-the-justification-behind-disallowing-partial-put\n&gt; &gt;&gt;&gt;&gt;&gt;\n&gt; &gt;&gt;&gt;&gt;&gt; I still =\r\ndon&#39;t really understand the benefit of not allowing PUT to be\n&gt; &gt;&gt;&gt;&gt;&gt; parti=\r\nal,\n&gt; &gt;&gt;&gt;&gt;\n&gt; &gt;&gt;&gt;&gt; So you are asking, why PUT was defined as idempotent in t=\r\nhe first place, yes?\n&gt; &gt;&gt;&gt;&gt;\n&gt; &gt;&gt;&gt;&gt; I think the reason is sort of &quot;because w=\r\ne can define it that way&quot;. There is POST, which has no visibility (=3D=3DPO=\r\nST is meaningless to an intermediary) and everything could just be done wit=\r\nh POST. But then, adding methods that *have* visibility adds some serious c=\r\napabilities to HTTP. E.g. GET&#39;s semantics allow for caching and it is also =\r\nvery helpful that we know that GET is safe - we can call it any number of t=\r\nimes.\n&gt; &gt;&gt;&gt;&gt;\n&gt; &gt;&gt;&gt;\n&gt; &gt;&gt;&gt; .. and PUTs &#39;complete replace&#39; semantics allow for=\r\n.. ?\n&gt; &gt;&gt;&gt;\n&gt; &gt;&gt;&gt;&gt; You could do updates with POST, but then, full updates ha=\r\nve the inherent property of being idempotent so it makes sense to define a =\r\nmethod for that, leveraging the idempotency to the protocol level. Same for=\r\n DELETE. For example, no a cache can mark copies it has of a response as st=\r\nale upon a corresponding response to a PUT. PUT&#39;s idempotency is also a win=\r\n over just using POST.\n&gt; &gt;&gt;&gt;&gt;\n&gt; &gt;&gt;&gt;&gt; If the interactions you design match t=\r\nhe semantics of PUT, use it (for its added visibility), if they do not matc=\r\nh, just use POST.\n&gt; &gt;&gt;&gt;\n&gt; &gt;&gt;&gt; Again.. the point of the question is to try a=\r\nnd fathom what the\n&gt; &gt;&gt;&gt; &#39;guaranteed completeness&#39; of PUT requests actually=\r\n contributes in\n&gt; &gt;&gt;&gt; terms of visibility on the web. i.e. what intermediar=\r\ny mechanisms rely\n&gt; &gt;&gt;&gt; on the completeness of a PUT?\n&gt; &gt;&gt;\n&gt; &gt;&gt; Huh? No, it=\r\n is the other way round: *partial* updates cannot be guaranteed to be idemp=\r\notent. It is the idempotency we want for the sake of greater visibility (co=\r\nmpared to POST). And we can only specify idempotent update semantics if the=\r\n updates are replaces.\n&gt; &gt;&gt;\n&gt; &gt;&gt; (As to why partial updates cannot be guara=\r\nnteed to be idempotent, see my answer in the mentioned SO question).\n&gt; &gt;&gt;\n&gt;=\r\n &gt;&gt;\n&gt; &gt;&gt;\n&gt; &gt;&gt;\n&gt; &gt;&gt;&gt;\n&gt; &gt;&gt;&gt;&gt; Redefining PUT to mean &#39;partial update without i=\r\ndempotency&#39; is no win because  &#39;partial update without idempotency&#39; does no=\r\nt give an intermediary any visibility. You could just use POST in the first=\r\n place.\n&gt; &gt;&gt;&gt;&gt;\n&gt; &gt;&gt;&gt;&gt; Does that help?\n&gt; &gt;&gt;&gt;&gt;\n&gt; &gt;&gt;&gt;\n&gt; &gt;&gt;&gt; No it doesn&#39;t. POS=\r\nT is a non-idempotent action; using it for an\n&gt; &gt;&gt;&gt; _intentionally idempote=\r\nnt partial update_\n&gt; &gt;&gt;\n&gt; &gt;&gt; See - this is a contradiction. How would you p=\r\nrevent people to define media types that lead to non-idempotency in partial=\r\n updates? Remember that the method semantics must be orthogonal to the medi=\r\na type semantics.\n&gt; &gt;&gt;\n&gt; &gt;&gt; Itempotent partial updates depend on the specif=\r\nic media type used and hence you cannot specify a method that alone has the=\r\nse idempotent partial update semantics.\n&gt; &gt;&gt;\n&gt; &gt;&gt; (This is also the reason =\r\nwhy PATH cannot be idempotent, never).\n&gt; &gt;&gt;\n&gt; &gt;&gt; Jan\n&gt; &gt;&gt;\n&gt; &gt;&gt;&gt; complicates=\r\n the interaction\n&gt; &gt;&gt;&gt; from the client&#39;s perspective - what if the request =\r\nfails?\n&gt; &gt;&gt;&gt;\n&gt; &gt;&gt;&gt;\n&gt; &gt;&gt;&gt; Maybe a better way of approaching this might be fo=\r\nr someone to\n&gt; &gt;&gt;&gt; demonstrate what supposed &quot;non-compliant&quot; implementation=\r\ns that allow\n&gt; &gt;&gt;&gt; partial PUT (e.g. Rails) lose as a result of not followi=\r\nng the suposed\n&gt; &gt;&gt;&gt; &quot;worthwhile&quot; no-partials-allowed semantics of PUT?\n&gt; &gt;=\r\n&gt;&gt;\n&gt; &gt;&gt;&gt; Cheers,\n&gt; &gt;&gt;&gt; Mike\n&gt; &gt;&gt;\n&gt;\n\n\n\n\n------------------------------------=\r\n\n\nYahoo! Groups Links\n\n\n\n\n"}}
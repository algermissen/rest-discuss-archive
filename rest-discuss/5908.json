{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":40455398,"authorName":"Julian Reschke","from":"Julian Reschke &lt;julian.reschke@...&gt;","profile":"JulianReschke","replyTo":"SENDER","senderId":"F-dy_imyHT74x5f6qreMsLHD5btPOrBMZniacEL5MPHYgVZDuYbM4KJ_xntyo8-rEdN6AKbchKK1mBv1Vrj1QHm4YW9X0f0DaTtS8QU","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Superfluous WebDAV methods","postDate":"1144850034","msgId":5908,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQ0M0QwNjcyLjgwMTA4MDdAZ214LmRlPg==","inReplyToHeader":"PDQ0M0NGRUVFLjgwNjA1MDFAbWV0YWxhYi51bmMuZWR1Pg==","referencesHeader":"PGM3MGJjODVkMDYwNDExMTAyM3k3OWJiOWM0Y28zMzI1M2IwZWIzNmNlNDZiQG1haWwuZ21haWwuY29tPiA8NDQzQkVENjcuOTAxMDQwOEBmcmVlLmZyPiA8NDQzQkZFOEIuNzAwMDQwMEBjc2UudWNzYy5lZHU+IDw0NDNDQ0JERS40MDcwMDA0QG1ldGFsYWIudW5jLmVkdT4gPDQ0M0NFMzhCLjEwMDA1MDZAZ214LmRlPiA8NDQzQ0YwREMuOTAxMDYwNEBtZXRhbGFiLnVuYy5lZHU+IDw0NDNDRjQxOC43MDIwNDAxQGdteC5kZT4gPDQ0M0NGRUVFLjgwNjA1MDFAbWV0YWxhYi51bmMuZWR1Pg=="},"prevInTopic":5907,"nextInTopic":5909,"prevInTime":5907,"nextInTime":5909,"topicId":5867,"numMessagesInTopic":25,"msgSnippet":"... Elliotte, I m aware of that. Indeed, I have to constantly remind people in the WebDAV working group that WebDAV is not about simulating a filesystem over","rawEmail":"Return-Path: &lt;julian.reschke@...&gt;\r\nX-Sender: julian.reschke@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 25837 invoked from network); 12 Apr 2006 13:56:55 -0000\r\nReceived: from unknown (66.218.67.34)\n  by m34.grp.scd.yahoo.com with QMQP; 12 Apr 2006 13:56:55 -0000\r\nReceived: from unknown (HELO mail.gmx.net) (213.165.64.20)\n  by mta8.grp.scd.yahoo.com with SMTP; 12 Apr 2006 13:56:54 -0000\r\nReceived: (qmail invoked by alias); 12 Apr 2006 13:55:42 -0000\r\nReceived: from mail.greenbytes.de (EHLO [192.168.1.40]) [217.91.35.233]\n  by mail.gmx.net (mp013) with SMTP; 12 Apr 2006 15:55:42 +0200\r\nX-Authenticated: #1915285\r\nMessage-ID: &lt;443D0672.8010807@...&gt;\r\nDate: Wed, 12 Apr 2006 15:53:54 +0200\r\nUser-Agent: Thunderbird 1.5 (Windows/20051201)\r\nMIME-Version: 1.0\r\nTo: Elliotte Harold &lt;elharo@...&gt;\r\nCc: Elias Sinderson &lt;elias@...&gt;,  rest-discuss@yahoogroups.com\r\nReferences: &lt;c70bc85d0604111023y79bb9c4co33253b0eb36ce46b@...&gt; &lt;443BED67.9010408@...&gt; &lt;443BFE8B.7000400@...&gt; &lt;443CCBDE.4070004@...&gt; &lt;443CE38B.1000506@...&gt; &lt;443CF0DC.9010604@...&gt; &lt;443CF418.7020401@...&gt; &lt;443CFEEE.8060501@...&gt;\r\nIn-Reply-To: &lt;443CFEEE.8060501@...&gt;\r\nContent-Type: text/plain; charset=UTF-8; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-Y-GMX-Trusted: 0\r\nX-eGroups-Msg-Info: 1:12:0:0\r\nFrom: Julian Reschke &lt;julian.reschke@...&gt;\r\nSubject: Re: [rest-discuss] Superfluous WebDAV methods\r\nX-Yahoo-Group-Post: member; u=40455398; y=lKo65bGSnV_sB2gurSAE3sX-2Yp1aqw4LRHNOdFd3mW5KxVht6cxmQ\r\nX-Yahoo-Profile: JulianReschke\r\n\r\nElliotte Harold wrote:\n&gt; Julian Reschke wrote:\n&gt; \n&gt;&gt; But, as far as I can tell, there are also lots of disadvantages in a \n&gt;&gt; system that *only* builds on the relations between resources. For \n&gt;&gt; instance:\n&gt;&gt;\n&gt;&gt; - Granularity: will every property be it&#39;s own resource?\n&gt; \n&gt; Define &quot;property&quot; and perhaps I can answer that. Some properties like \n&gt; content-length are implicit in the data and may not have independent \n&gt; representations. Others like author may be embedded inside the data in \n&gt; something like an &lt;author&gt; tag. others may be independent resources. As \n&gt; I see it there&#39;s no single list of properties, for a resource, and no \n&gt; central repository of those properties. Different people may want to use \n&gt; different properties for the same resources. These people are not \n&gt; necessarily the owners of the resources.\n&gt; \n&gt; It sounds like your mental model treats the Web as just a strange sort \n&gt; of interface to a filesystem. Certainly WebDAV thinks of it that way. A \n&gt; file system has a very clear distinction between data and metadata. A \n&gt; file system very well may have a central metadata repository of some \n&gt; kind, a single place where a fixed set of attributes is stored for all \n&gt; files. But the Web is not a file system! It is much more generic and \n&gt; flexible than that.\n\nElliotte,\n\nI&#39;m aware of that. Indeed, I have to constantly remind people in the \nWebDAV working group that WebDAV is not about simulating a filesystem \nover HTTP, but for *authoring* Web resources.\n\n(Base) WebDAV essentially handles three different aspects of authoring:\n\n1) Containment/namespace operations (MKCOL, PROPFIND, COPY, MOVE): \ndefines a containment model, a method for creating a container, and \noperations for copying, moving resources, plus look up of members.\n\n2) Properties (PROPFIND/PROPPATCH): essentially name/value pairs per \nresource, where names are XML-namespaced, and there&#39;s no recurrence. \nAlso, some HTTP headers have WebDAV property equivalents, and some \naspects of the resource can be queried using &quot;live&quot; properties.\n\n3) Serializing access (LOCK/UNLOCK/&quot;If header&quot;): Keeping others from \nmodifying a resource (or a part of the name space) while changes are in \nprogress.\n\nThese areas are almost orthogonal, except for overlap in PROPFIND (which \ndoes lookup and property discovery/retrieval), and the fact that locking \n(which is optional in WebDAV) uses WebDAV properties for discovery of \nlocking support and actual locks. What I feel is important is that each \nof these feature sets essentially can be used separately.\n\nNow the property model used in WebDAV makes a lot of assumptions that \nprobably do not map well to a more generic world view where everybody \ncan make statements about resources by publishing an RDF document \nsomewhere else on the web. It&#39;s not designed to do that, but that \ndoesn&#39;t mean it&#39;s useless.\n\n&gt;&gt; If it is, how do I change a set of properties in a single operation?\n&gt; \n&gt; I don&#39;t think there&#39;s a finite set of properties that you can change in \n&gt; a single operation. You can change the implicit properties such as \n&gt; content length and word count via a PUT. You can change some set of RDF \n&gt; properties by PUTing an RDF document to another URL. You may be able to \n&gt; change other properties through the right POST request. It depends on \n&gt; which properties which servers expose and how they expose them. There&#39;s \n&gt; no single answer to this question, nor does there need to be.\n\nI guess here&#39;s where the disagreement is coming from. If I *author* web \nresources (and that&#39;s what WebDAV is about), I certainly do want to have \na generic way to change these properties.\n\n&gt;&gt; - Discovery: given the URL of a resource, how do I discover other \n&gt;&gt; resources that provide data/metadata about this resource?\n&gt;&gt;\n&gt; \n&gt; There are numerous ways this can be implemented if it&#39;s important. I \n&gt; suspect almost all of them involve getting documents, probably RDF or \n&gt; XML documents, from known or deduced URLs. e.g. \n&gt; http://www.metadatarepository.org/?query=www.example.com/foo.html. I \n&gt; don&#39;t think any Web-wide standard is necessary or useful here.\n&gt; \n&gt;&gt; - Performance: what exactly do I need to do to find out name, content \n&gt;&gt; type, length and author of all members of a collection? In WebDAV, \n&gt;&gt; that&#39;s one single request.\n&gt; \n&gt; Put an XML document at a URL that contains that information. Then GET \n&gt; it. No big deal. Not that you&#39;re likely to need all that at once anyway. \n\nHow do I discover that document? What if I need one additional property, \nwill there be a second document behind a second URI (query parameter?). \nHow do I in general discover that URL for a given set of properties I want?\n\n&gt;  For instance, why would you actually want to know the length of every \n&gt; resource in a collection?  The only reason I can think of is because \n&gt; you&#39;re duplicating the &quot;ls -l&quot; functionality of a filesystem. But \n&gt; actually the length isn&#39;t usually especially relevant. Would you not \n&gt; open a file you want if it&#39;s two megabytes long instead of one? We&#39;ve \n&gt; learned to expect it because file systems provide it, but it&#39;s hardly \n&gt; the most important metadata. In fact, it&#39;s probably one of the least \n&gt; important.\n\nLength may be a bad example, but there are lots of things that people \nwant to see in a list of resources, and it&#39;s not always the same set of \nthings. For instance, consider the set of information an HTML view of a \nCVS or SVN repository is giving you.\n\n&gt; Free yourself from file system thinking, and see where it takes you. I \n&gt; suspect you&#39;ll be astonished at how liberating that is. There&#39;s no \n&gt; reason in 2006 for users to be limited by the logical structures used to \n&gt; store bits on spinning metal discs.\n\nBest regards, Julian\n\n\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":175757792,"authorName":"Roy T. Fielding","from":"&quot;Roy T. Fielding&quot; &lt;fielding@...&gt;","profile":"roy_fielding","replyTo":"SENDER","senderId":"yxG8FQFcntW6NcOGDraTTdW9HlXTHxlVaBWHJeEbdJYM77nByu7l9UZoWQQIVWfYwH_3QBeQdXSf_ko-kj-GI7eEukrZs1aZVPe_yw","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Questions regarding REST","postDate":"1194817658","msgId":9805,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDI0NzEzRTE5LTlDMUEtNEExOC1CMkMxLTgzQTQ1OENDN0ZDNkBnYml2LmNvbT4=","inReplyToHeader":"PGY1ZjVlMDczMDcxMTA5MTUyN3IxMTcyZDExOXg3MmRmNmY3N2IxOWJmYzZhQG1haWwuZ21haWwuY29tPg==","referencesHeader":"PGY1ZjVlMDczMDcxMTA5MTUyN3IxMTcyZDExOXg3MmRmNmY3N2IxOWJmYzZhQG1haWwuZ21haWwuY29tPg=="},"prevInTopic":9804,"nextInTopic":9806,"prevInTime":9804,"nextInTime":9806,"topicId":9804,"numMessagesInTopic":13,"msgSnippet":"... By defining a client-side cart that can be directly manipulated on the client with products identified by the mark-up in catalog sites, each with links to","rawEmail":"Return-Path: &lt;fielding@...&gt;\r\nX-Sender: fielding@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 90237 invoked from network); 11 Nov 2007 21:47:54 -0000\r\nX-Received: from unknown (66.218.67.94)\n  by m50.grp.scd.yahoo.com with QMQP; 11 Nov 2007 21:47:54 -0000\r\nX-Received: from unknown (HELO spaceymail-a4.g.dreamhost.com) (208.97.132.119)\n  by mta15.grp.scd.yahoo.com with SMTP; 11 Nov 2007 21:47:54 -0000\r\nX-Received: from [192.168.0.160] (ip72-211-200-45.oc.oc.cox.net [72.211.200.45])\n\tby spaceymail-a4.g.dreamhost.com (Postfix) with ESMTP id D2C54161826;\n\tSun, 11 Nov 2007 13:47:55 -0800 (PST)\r\nIn-Reply-To: &lt;f5f5e0730711091527r1172d119x72df6f77b19bfc6a@...&gt;\r\nReferences: &lt;f5f5e0730711091527r1172d119x72df6f77b19bfc6a@...&gt;\r\nMime-Version: 1.0 (Apple Message framework v752.2)\r\nContent-Type: text/plain; charset=US-ASCII; delsp=yes; format=flowed\r\nMessage-Id: &lt;24713E19-9C1A-4A18-B2C1-83A458CC7FC6@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nContent-Transfer-Encoding: 7bit\r\nDate: Sun, 11 Nov 2007 13:47:38 -0800\r\nTo: Rajith Attapattu &lt;rajith77@...&gt;\r\nX-Mailer: Apple Mail (2.752.2)\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Roy T. Fielding&quot; &lt;fielding@...&gt;\r\nSubject: Re: [rest-discuss] Questions regarding REST\r\nX-Yahoo-Group-Post: member; u=175757792; y=u-P_jKvnBa2abi9wOaQqU6CdMMQEh039ybyqcGC7fN9CAeXtkQ40\r\nX-Yahoo-Profile: roy_fielding\r\n\r\nOn Nov 9, 2007, at 3:27 PM, Rajith Attapattu wrote:\n&gt; After closely following all the disucssion around REST I have a few  \n&gt; questions on would like to clear my doubts.\n&gt;\n&gt; 1) One of the questions I have seen floating around is &quot;how can I  \n&gt; do a shopping cart application in a RESTFul way&quot;.\n\nBy defining a client-side cart that can be directly manipulated\non the client with products identified by the mark-up in catalog\nsites, each with links to the cashier.  That is the truly RESTful\nway to do a shopping cart.\n\n&gt; Most people realize that you shouldn&#39;t use sessions bcos it  \n&gt; violates the Stateless constraint.\n&gt;\n&gt; Now what some folks suggest is that when you do a PUThttp://abc.com/ \n&gt; customer/1235/basket/\n&gt; (where the body contains a document that describes the items and  \n&gt; quantities to add), you service that request and then you return a  \n&gt; URL with the state encoded.\n\n&quot;some folks&quot; don&#39;t know what they are talking about.  Such a site\nwould use POST and message bodies, not state-specific URLs, and\nplain old HTTP authentication for identifying the customer.\n\n&gt; I have the following questions on that.\n&gt; a) Now is this RESTful?\n\nOnly if the site told the client to do that.\n\n&gt; b) Also there so much information that can be encoded since a URL  \n&gt; has a maximum length\n\nThere is no maximum length on a URL, but nobody would do that anyway.\n\n&gt; c) Anybody intercepting this URL may be able to decode information  \n&gt; (if SSL is not used)\n\nIrrelevant, the same is true of any solution.\n\n&gt; 2) Most people do RPC over HTTP (Ex. some of the examples given in  \n&gt; JSR 311 looks more RPC and not RESTful)\n\nNonsense.  Most people use HTTP to follow links in hypertext.\n\n&gt; What constraints in general does RPC/HTTP violate?\n\nHypertext as the engine of application state.  There are other things\nthat RPC mechansisms are traditionally bad for (streaming, coupling,\netc.) but those are not constraints.\n\n&gt; Most RPC operations are stateful, so u can think they violate the  \n&gt; stateless constraint. What else?\n\nThat is orthogonal (anyone can build a stateless RPC).\n\n&gt; Consider the following examples\n&gt;\n&gt; doAddition(int x, int y) -  POST http://abc.com/doAdittion/  (body  \n&gt; contains x & y)\n&gt; this simply does an addition, but it is stateless. However  \n&gt; intuition tells me it&#39;s not RESTful.\n&gt; Why is that?? What have I misunderstood here?\n\nHow does the client learn what to do?  That is hypertext.\n\n&gt; Here is another example that I don&#39;t understand.\n&gt; increaseLuminosity(x) POST http://abc.com/increaseLuminosity (body  \n&gt; contains x)\n&gt; {\n&gt;     I get the bulbs&#39; state from a data base.\n&gt;     I increase it.\n&gt;     I persist the new state.\n&gt; }\n&gt; Now my service is stateless, however the database contains the state.\n&gt; Again I don&#39;t understand exactly what constraints are violated but  \n&gt; intuition tells me it&#39;s not RESTful\n\nIt may be RESTful, but it is still a stupid design if it doesn&#39;t\nrespond with a representation of the new state.  Feedback is good.\n\n&gt; 3) Reliability with RESTful interactions.\n&gt; Forgetting the security concerns for the time being consider the  \n&gt; following example.\n&gt;\n&gt; I am trying to create a service account for a customer.\n&gt; PUT http://abc.com/customer/{id}/savings\n\nThat assumes you know the service URI for new savings accounts,\nwhich means it isn&#39;t RESTful.  A POST to /customer/ would be more\naccurate, though in reality a new account service is not something\nthat the client would participate in --- try opening a bank account\nat citibank for example.  All the client does is provide information\nfor the account -- only the server needs to know why that information\nis being provided, and they deliberately do not want it automated.\n\n&gt; Now the server process the request, but goes down before it can  \n&gt; send the response. Since PUT is idempotent, the client will retry  \n&gt; again until it gets a response.\n&gt; However when the server comes back up, there is no reconciliation  \n&gt; process like you would get with WS-RM. So the client will always  \n&gt; retry until it is successful.\n\nWell, if you create a stupid design, it will do stupid things ...\n\nThink of it instead as a series of individual POST requests that are\nbuilding up a combined resource that will eventually be a savings\naccount when finished.  Each of those requests can include parameters\nthat perform the same role as an ETag -- basically, identifying the\nclient&#39;s view of the current state of the resource.  Then, when a\nrequest is repeated or a state-change lost, the server would see\nthat in the next request and tell the client to refresh its view\nof the form before continuing to the next step.\n\n&gt; But if you do the following, where u want to add some money to your  \n&gt; account.\n&gt; POST http://abc.com/customer/{id}/savings/ - the body contains the  \n&gt; amount.\n&gt;\n&gt; Now if the server crashes after processing but before sending the  \n&gt; response, or if the client crashes before getting the response, the  \n&gt; client will retry again.\n&gt; Now POST is not idempotent and each retry will keep on adding money.\n\nSo don&#39;t write it that way.  Automated recovery from missing responses\nis a trivial problem -- just include a request number in the form.\n\n&gt; Is this a category of applications that REST is not suitable for?  \n&gt; or else what is the correct form to use when building such  \n&gt; application in a RESTful way.\n&gt;\n&gt; 4) Security with RESTful interactions.\n&gt; a) The above example naturally raise questions about security.\n&gt; b) SSL is only point-to-point, so if you have to go through  \n&gt; multiple intermediaries, how would you ensure privacy, non  \n&gt; repudiation ..etc ?\n\nSSL tunnels through intermediaries.  However, there is nothing stopping\nanyone from defining an encrypted message exchange within RESTful\ncommunication (it is just another media type) aside from the fact\nthat shared secret keys are not effective with the general public.\nLikewise, HTTP authentication is completely extensible (witness the\nmost recently defined AWS auth scheme).  So the answer to your question\nis that it has nothing to do with REST.\n\n....Roy\n\n\n"}}
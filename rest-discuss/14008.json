{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":401876259,"authorName":"Will Hartung","from":"Will Hartung &lt;willh@...&gt;","profile":"gaminginparis","replyTo":"SENDER","senderId":"wAq0F1ZcG_lOwv7qtw5ts-5Wax08U7BGvcBUNE-f_L1SFAVWcDCuDl--Zzk6A6XrflWmugJuQ9OGmHbOkI7FPXrLrub_Xhq9PQ","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Service descriptions and legal contracts","postDate":"1257529679","msgId":14008,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDM5MTVjNjlkMDkxMTA2MDk0N3IzYjg0NGEyamZjYWRmOTFiYTg3MDRiY2RAbWFpbC5nbWFpbC5jb20+","inReplyToHeader":"PDVFRDE2QjQ1LUM1MDktNDhEMC1CRjU5LTBGRTMwQzAyNDhCQkBtYWMuY29tPg==","referencesHeader":"PDVFRDE2QjQ1LUM1MDktNDhEMC1CRjU5LTBGRTMwQzAyNDhCQkBtYWMuY29tPg=="},"prevInTopic":14007,"nextInTopic":14009,"prevInTime":14007,"nextInTime":14009,"topicId":13996,"numMessagesInTopic":25,"msgSnippet":"... I d reframe this and say such descriptions snapshot the state of a services implementation/API (version it, if you will). In theory, the service can","rawEmail":"Return-Path: &lt;willh@...&gt;\r\nX-Sender: willh@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 95496 invoked from network); 6 Nov 2009 17:48:59 -0000\r\nX-Received: from unknown (98.137.34.46)\n  by m5.grp.sp2.yahoo.com with QMQP; 6 Nov 2009 17:48:59 -0000\r\nX-Received: from unknown (HELO mail-px0-f197.google.com) (209.85.216.197)\n  by mta3.grp.sp2.yahoo.com with SMTP; 6 Nov 2009 17:48:59 -0000\r\nX-Received: by pxi35 with SMTP id 35so985516pxi.18\n        for &lt;rest-discuss@yahoogroups.com&gt;; Fri, 06 Nov 2009 09:47:59 -0800 (PST)\r\nMIME-Version: 1.0\r\nX-Received: by 10.114.165.15 with SMTP id n15mr5784780wae.89.1257529679619; Fri, \n\t06 Nov 2009 09:47:59 -0800 (PST)\r\nIn-Reply-To: &lt;5ED16B45-C509-48D0-BF59-0FE30C0248BB@...&gt;\r\nReferences: &lt;5ED16B45-C509-48D0-BF59-0FE30C0248BB@...&gt;\r\nDate: Fri, 6 Nov 2009 09:47:59 -0800\r\nMessage-ID: &lt;3915c69d0911060947r3b844a2jfcadf91ba8704bcd@...&gt;\r\nTo: Jan Algermissen &lt;algermissen1971@...&gt;\r\nCc: REST Discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Will Hartung &lt;willh@...&gt;\r\nSubject: Re: [rest-discuss] Service descriptions and legal contracts\r\nX-Yahoo-Group-Post: member; u=401876259; y=leWeZ8E7-PGWey3Mr8BMGN7F5weIDQn70IDOYSCDjX34_3r8hOu36A\r\nX-Yahoo-Profile: gaminginparis\r\n\r\nOn Thu, Nov 5, 2009 at 5:16 AM, Jan Algermissen &lt;algermissen1971@...&gt; wrote:\n\n&gt; Occasionally demand is heard for service descriptions for services in\n&gt; RESTful systems. Clearly, such descriptions are contrary to REST&#39;s\n&gt; evolvability goals because any prescriptive information about the\n&gt; server limits its desired evolvability.\n\nI&#39;d reframe this and say such descriptions &quot;snapshot&quot; the state of a\nservices implementation/API (version it, if you will). In theory, the\nservice can still evolve from this base, as long as it doesn&#39;t violate\nthe contract as is. So, yes, technically it limits evolvability (you\ncan&#39;t go &quot;backwards&quot;, for example), but I don&#39;t think it necessarily\nkills any change whatsoever.\n\n&gt; One can put some amount of flexibility into a machine client, but it\n&gt; is inevitable that at some point assumptions end up in a place (source\n&gt; code, configuration) that will cause runtime failure when the\n&gt; assumptions about the server turn out to be wrong.\n\nI think all clients are implicitly rigid. A flexible client is one\nthat is compensating for an imprecise specification. It&#39;s hard to\nimagine any client able to inately adopt new functionality on the fly.\nI should say, able to adopt any new functionality that the client\nisn&#39;t aware of on the fly. It&#39;s possible that a client can leverage\nfunctionality newly provided by the service, but that&#39;s driven by the\nservice surfacing functions that the client is already aware of. And I\nwon&#39;t explore client &quot;plugins&quot; or anything of that nature, it&#39;s not\ngermane.\n\n&gt; This is not so much of a problem in contexts, where budget and legal\n&gt; issues are of minor importance (e.g. when I do some fun-coding to\n&gt; interact with Amazon&#39;s APIs) but as soon as you pay serious amounts\n&gt; for the use of an API or when liability issues are involved things are\n&gt; different.\n&gt;\n&gt; What is necessary I think is a way to describe services that meets the\n&gt; following objectives:\n&gt;\n&gt; 1. **Only** describe/define those aspects of the provided\n&gt; service that constitute an inevitable coupling of\n&gt; client and server anyway. For example: if a client\n&gt; is programmed to use a search, the service provider\n&gt; must assure that the search will remain available\n&gt; during the agreed upon service lifetime.\n&gt;\n&gt; 2. Use a means of description that is formal enough to\n&gt; serve as the basis for legal contracts (e.g. SLAs).\n&gt;\n&gt; 3. Make that means of description standard/mainstream\n&gt; enough to avoid that everybody is forced to reinvent\n&gt; the wheel[1]\n\nSeems to me that Steve was really banging on the &quot;machine\nenforcability&quot; of the contract that you&#39;re talking about (thus his\ncontinued references to WS-* and BPEL (I&#39;m not familiar enough with\nBPEL to know how it can be as specific as what he was looking for in\nall of the scenarios he presented).\n\nEverything else, is lawyers and weasel words, regardless of the format\nof the specification, whether it&#39;s RFC format, post it notes, napkin\ndrawings, or what.\n\nHaving recently been doing work with the IHE Technical Specification\n(which are robust, but imperfect and range from crystal clear to dark\nas mud), my favorite attribute is the fact that all of the lines of\nthe specification are numbered (every 5 lines there&#39;s a notation in\nthe margin), which makes pointing out answers to specification\nquestions very easy (see doc XYZ, line 123).\n\n&gt; These are the aspects I think should be addressed in such definitions:\n&gt;\n&gt; 1. General client obligations\n&gt; This section would cover the base set of media types,\n&gt; link relations, etc. to be understood by the client.\n&gt;\n&gt; 2. General server commitments\n&gt; The description can be simplified and reduced if the\n&gt; server makes general commitments such as &#39;resources\n&gt; that are known by the client to be collections of items\n&gt; will always at least be available as application/atom+xml\n&gt;\n&gt; 3. General availability of certain state transitions\n&gt; A search resource for example can be defined to be available\n&gt; to the client independent of the current application state.\n&gt; IOW, the search resource will always be &#39;announced&#39; as\n&gt; part of the initial service documents or, if none are used\n&gt; it would mean that the search would be available to the\n&gt; client from any received response (e.g. via Link header)\n&gt;\n&gt; 4. Availability of certain goals in certain application states\n&gt; If a client does a search in an online shop there is an\n&gt; expectation to being able to place an order afterwards.\n&gt; Such an expectation would be backed up by this section. A\n&gt; way to view this is as a dependency tree of goals (after\n&gt; item search can come purchase).\n\n&quot;General&quot; here is the killer word. There should be nothing general\nabout it. These should all be specific, and documented. There are no\n&quot;assumptions&quot;. That&#39;s likely the complaint.\n\nFor example, look at all the assumptions that surround REST in the\nfirst place. &quot;Oh, it&#39;s just HTTP, I know HTTP...&quot; and you get...POX\nover HTTP or something else.\n\nSomething like &quot;Search&quot; can be a documented entry point in to the\nsystem. Otherwise, it&#39;s a URI provided in payloads that the client can\nfollow. The specification may well be that a client must hit the\nEntryPoint resource for the overall system, and follow the &quot;Search&quot;\nlink relation if they want to search.\n\n&quot;Availability of Certain Goals&quot; would be, IMHO entry points in the\nsystem. That is, URIs that are specifically documented and SLA&#39;d to be\n&quot;always available&quot;. But if someone wants to order after a search, then\nthere is likely a defined link in the payload to create such an order\nfrom the search results. Otherwise, the client can simply POST to the\n/order resource with the proper payload, as documented in the\nspecification as an entry point, a point that can be hit directly, as\ndocumented, rather than followed.\n\nTo clarify what I mean by that, there has always been a discussion as\nto the lifespan of a URI. It&#39;s easy to argue that the link with the\n&quot;next&quot; rel on a search result is likely to be a pretty temporal link.\nThe link itself can easily have a very limited lifespan, especially\nthe expectation that it returns anything meaningful. This because\nthere is little intent that a client would persist this link long\nterm. If  you wanted to go to the next group of a search result, you\nshould follow the next-rel link.\n\nBut an external entry point is one that is likely to be &quot;hard coded&quot;\nin to a client, is likely to be templated, and not necessarily opaque.\nBecause clients have to have some way to get started, and ideally they\ndon&#39;t all have to start at the &quot;home page&quot; and follow rels for every\ntransaction.\n\n&gt;\n&gt; 5. Availability of certain media types, link relations,\n&gt; extensions There must be a means for the server to tell the\n&gt; client which media types are available[2] and also a\n&gt; commitment that these (or at least one) will remain in use\n&gt; for a defined period of time.\n\nThis is all part of the SLA. I don&#39;t know if a server needs to\n&quot;publish&quot; this information. I mean, you can have a /sla resource that\ndefines all of these things, I suppose. Does it need to be machine\ninterpretable?\n\nBut here&#39;s the nut.\n\nThe conflict is that with a REST system, the application should not be\ndriven by out-of-band information. It should not be making\nassumptions, it should be working with the system as the service\nexposes it to the client via request results from the pre-defined\nentry points.\n\nAt an extreme view, that&#39;s what a specification is, out of band\ninformation. Out of band information such as entry points, and link\nrelations. As more and more standardized media types and relations are\ndefined, and used, in theory, the &quot;less&quot; documentation and\nspecification is necessary, other than &quot;Oh, go see spec XYZ, we follow\nthat.&quot;. But, then you get back to those assumptions about implementing\nthe spec properly.\n\nObviously SOME out of band information is necessary. The client needs\nto know what the relationships mean so it can parse the request\nproperly to find links to actions.\n\nConsider, an IRS Income Tax form. An IRS tax form is &quot;reasonably&quot;\ndocumented form, with often descriptive rule summaries on the fields.\nHowever, these field annotations are backed up by the &quot;Form\nInstructions&quot;, which go in to more detail about the form. Finally,\nthose instructions are backed by actual IRS law and procedure, which\nis likely unusable by the layman.\n\nSo, of those three components: the Form (or in our case, the XSD of\nthe datatype), the Instructions, and the Law, which level of\ndocumentation are we talking about here? Is the Law the SLA, the\nInstructions the spec that gets sent to the developers by the BSA, and\nthe Form the structure the application uses to find where to put data\nand links, an XSD for example?\n\nRegards,\n\nWill Hartung\n(willh@...)\n\n"}}
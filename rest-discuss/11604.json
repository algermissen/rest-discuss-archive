{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":364579677,"authorName":"Mike","from":"Mike &lt;mike@...&gt;","profile":"pleb1985","replyTo":"SENDER","senderId":"tw3sOUvN1hbqujOzifAJLmpQvVSrZmd5PnJVx1PxBXC8kIRkKnzrV7Fy3oYaMpWWEPm7CP8smevOv0SXuVO2Kw","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] HTML5 and RESTful HTTP in browsers","postDate":"1227546757","msgId":11604,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQ5MkFFMDg1LjgwMjA4MDVAbXlrYW5qby5jby51az4=","inReplyToHeader":"PDQ5MkFDQjJELjQwNzA5MDNAaGFja2NyYWZ0Lm5ldD4=","referencesHeader":"PDIwMTUxMDEwLjIzNjg3MTIyNjkxOTk1NDUzMi5KYXZhTWFpbC5zZXJ2bGV0QGt1bmRlbnNlcnZlcj4JPDQ5MjJCMzZBLjMwOTA4MDRAbXlrYW5qby5jby51az4JPFAtSVJDLUVYQkUwMjc3YmllTFkwMDAwMTYwMUBFWC5VQ09QLkVEVT4JPDQ5MjVDMjAzLjgwNzA0MDFAbXlrYW5qby5jby51az4JPFAtSVJDLUVYQkUwMmEycjhnUEEwMDAwMTdmN0BFWC5VQ09QLkVEVT4JPDQ5MjYwNjI5LjgwNjA4MDVAbXlrYW5qby5jby51az4JPFAtSVJDLUVYQkUwMnhUanRScGUwMDAwMTk5NUBFWC5VQ09QLkVEVT4JPDQ5MjY4MkU4LjgwNjA2MDRAbXlrYW5qby5jby51az4JPFAtSVJDLUVYQkUwMmFOZ0VwVFgwMDAwMWJjZEBFWC5VQ09QLkVEVT4JPDQ5MjZGMzQ3LjUwNTA4MDBAbXlrYW5qby5jby51az4JPGVjZjM1YTFiMDgxMTIxMTAwMHExZTMxMzM3Y3VhMGQ3YWRhMmIyMDI3NjJhQG1haWwuZ21haWwuY29tPgk8NDkyNzA2MDEuNjA4MDcwNEBteWthbmpvLmNvLnVrPiA8MjAwODExMjIwNzA4MjAuZDkxMWU5NjQuZXJpY0BiaXNvbnN5c3RlbXMubmV0PiA8NDkyQThDMzguOTA3MDFAaGFja2NyYWZ0Lm5ldD4gPDQ5MkE5MURCLjcwMTA0MDdAbXlrYW5qby5jby51az4gPDQ5MkFBMDZGLjgwMjAxMDdAaGFja2NyYWZ0Lm5ldD4gPDQ5MkFCMkFELjEwMTAxMDhAbXlrYW5qby5jby51az4gPDQ5MkFDQjJELjQwNzA5MDNAaGFja2NyYWZ0Lm5ldD4="},"prevInTopic":11603,"nextInTopic":11605,"prevInTime":11603,"nextInTime":11605,"topicId":11508,"numMessagesInTopic":82,"msgSnippet":"... I m using it to indicate content type preferences of a resource for a given context; this is necessary because depending on the link, my browser should be","rawEmail":"Return-Path: &lt;mike@...&gt;\r\nX-Sender: mike@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 21110 invoked from network); 24 Nov 2008 17:12:44 -0000\r\nX-Received: from unknown (66.218.67.94)\n  by m53.grp.scd.yahoo.com with QMQP; 24 Nov 2008 17:12:44 -0000\r\nX-Received: from unknown (HELO moutng.kundenserver.de) (212.227.17.10)\n  by mta15.grp.scd.yahoo.com with SMTP; 24 Nov 2008 17:12:44 -0000\r\nX-Received: from [192.168.10.13] (evojsyfw02.evolve-online.com [213.133.221.98])\n\tby mrelayeu.kundenserver.de (node=mrelayeu8) with ESMTP (Nemesis)\n\tid 0ML31I-1L4ezE0scF-0005ju; Mon, 24 Nov 2008 18:12:37 +0100\r\nMessage-ID: &lt;492AE085.8020805@...&gt;\r\nDate: Mon, 24 Nov 2008 17:12:37 +0000\r\nUser-Agent: Thunderbird 2.0.0.17 (X11/20080925)\r\nMIME-Version: 1.0\r\nTo: Jon Hanna &lt;jon@...&gt;, \n Rest List &lt;rest-discuss@yahoogroups.com&gt;\r\nReferences: &lt;20151010.236871226919954532.JavaMail.servlet@kundenserver&gt;\t&lt;4922B36A.3090804@...&gt;\t&lt;P-IRC-EXBE0277bieLY00001601@...&gt;\t&lt;4925C203.8070401@...&gt;\t&lt;P-IRC-EXBE02a2r8gPA000017f7@...&gt;\t&lt;49260629.8060805@...&gt;\t&lt;P-IRC-EXBE02xTjtRpe00001995@...&gt;\t&lt;492682E8.8060604@...&gt;\t&lt;P-IRC-EXBE02aNgEpTX00001bcd@...&gt;\t&lt;4926F347.5050800@...&gt;\t&lt;ecf35a1b0811211000q1e31337cua0d7ada2b202762a@...&gt;\t&lt;49270601.6080704@...&gt; &lt;20081122070820.d911e964.eric@...&gt; &lt;492A8C38.90701@...&gt; &lt;492A91DB.7010407@...&gt; &lt;492AA06F.8020107@...&gt; &lt;492AB2AD.1010108@...&gt; &lt;492ACB2D.4070903@...&gt;\r\nIn-Reply-To: &lt;492ACB2D.4070903@...&gt;\r\nContent-Type: text/plain; charset=UTF-8; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-Provags-ID: V01U2FsdGVkX19zAclzOHXZE5APDQOi5MsJAi2DBJl2awDN/UF\n y0r61aRuRyj7egcYK/Qx5bAzg1oIny9ucL/16GmEyyGlQY8roO\n oUjy+Zag9LjNKpRmVv0O/myddsWJQ1o\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Mike &lt;mike@...&gt;\r\nSubject: Re: [rest-discuss] HTML5 and RESTful HTTP in browsers\r\nX-Yahoo-Group-Post: member; u=364579677; y=At_Zje23kPJcME0uD0Uji3z2QCKgmxr0OEUvOvhKzooi0xU\r\nX-Yahoo-Profile: pleb1985\r\n\r\nJon Hanna wrote:\n&gt; Mike wrote:\n&gt;   \n&gt;&gt; How is making context-specific changes to a UA&#39;s Accept header, creating \n&gt;&gt; a &#39;new type of identifier&#39; ?\n&gt;&gt;     \n&gt;\n&gt; Because you are using it to identify, hence it is an identifier.\n&gt;\n&gt;   \n\nI&#39;m using it to indicate content type preferences of a resource for a \ngiven context; this is necessary because depending on the link, my \nbrowser should be able to request the pdf, word document, xml \nrepresentation of a resource. If you don&#39;t have this mechanism you&#39;re \nforced to use the URI for something the HTTP protocol can handle itself \nwith the Accept header. The browser is a special case UA because it is \nsupposed to handle all content types; even if it is simply downloading \nand storing the data as a file - this is presumably why the default \nAccept header for major browsers contains */*.\n\nI would describe this use as a negotiator rather than an identifier.\n&gt;&gt; Why on earth does the Accept header exist if it&#39;s not to indicate \n&gt;&gt; appropriate content types?\n&gt;&gt;     \n&gt;\n&gt; That&#39;s exactly what it does. Please let it do so.\n&gt;\n&gt;   \n\nFor most UAs - the best use of the accept header is to specify the \ncontent types that the UA has preference for. Browsers are a special \ncase where they Accept all content types (hence: */*) where the most \nappropriate type is determined by *either* the browser itself (default \naccept header) or the specific context of a link in an application \n(accept attribute).\n\n&gt;&gt; No - the Accept header *remains* part of the request; it&#39;s significance \n&gt;&gt; to the server is increased.\n&gt;&gt;     \n&gt;\n&gt; But it has become an part of the means of identifying.\n&gt;\n&gt;   \n\nA means of negotiating the content type. The resource is identified in \nthe URI. The content type is negotiated.\n\n&gt;&gt; The Accept attribute (and header) can contain whatever the developer \n&gt;&gt; wants, I&#39;m not sure why you believe this would be limited to certain \n&gt;&gt; content types.\n&gt;&gt;     \n&gt;\n&gt; I&#39;m not believing this. I believe you are proposing the de-facto removal \n&gt; of content-negotiation from HTTP and the de-facto change of the \n&gt; identifiers used in HTTP.\n&gt;   \n\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec12.html\n\n&quot;HTTP/1.1 includes the following request-header fields for enabling \nserver-driven negotiation through description of user agent capabilities \n*and user preferences*: Accept (section 14.1 \n&lt;http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1&gt;), \nAccept- Charset (section 14.2 \n&lt;http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.2&gt;), \nAccept-Encoding (section 14.3 \n&lt;http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3&gt;), \nAccept- Language (section 14.4 \n&lt;http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.4&gt;), and \nUser-Agent (section 14.43 \n&lt;http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.43&gt;).&quot;\n&gt; Anyone wanting to do REST after that would have to reply with de-facto \n&gt; replacement of content-negotiation into HTTP and de-factor normalisation \n&gt; of the identifier mechanism.\n&gt;   \n\nThis isn&#39;t true - application developers could continue using URI-based \nconneg and leaving the accept attribute out of links. There is no \nconflict here.\n\n&gt;   \n&gt;&gt; Good; then I guess that&#39;s even more reason to keep all representations \n&gt;&gt; of a resource within one URI, rather than creating unnecessary URIs for \n&gt;&gt; each representation.\n&gt;&gt;     \n&gt;\n&gt; Once you have offered something to the user it is a resource.\n&gt;   \n\n/commands/destroyHumanRace?t-minus=10&user=Reptilian_NWO&password=0b4m4\n\nIs that a resource then?\n\n&gt; If differences in formats are something that should be manually dealt \n&gt; with, or dealt with at an application level, then you are not talking \n&gt; about a single resource, but multiple resources.\n&gt;   \n\nI don&#39;t agree with that, could you explain your reasoning a bit more? \nThis is, most likely, where my confusion comes from.\n\n&gt; If formats are not something for the user to worry about, then why do we \n&gt; want to identify them at markup level?\n&gt;   \n\nHow many users do you know that read HTML markup? Anyway, it&#39;s not like \nusers don&#39;t come into contact with URI-based content negotiation in markup.\n\n&gt;   \n&gt;&gt; How sure are you, that is &#39;pushing it above the protocol level&#39;?\n&gt;&gt;     \n&gt;\n&gt; Because I am neither an HTTP server nor a HTTP client. When something is \n&gt; offered to me, it has moved above the protocol level.\n&gt;   \n\nIt&#39;s offered to you as one link - the negotiation is taking place in the \nAccept header; it&#39;s protocol (HTTP) level content negotiation.\n\n&gt;   \n&gt;&gt;&gt; In a RESTful system there is a uniform way of identifying all \n&gt;&gt;&gt; resources. In HTTP this is URIs.\n&gt;&gt;&gt;   \n&gt;&gt;&gt;       \n&gt;&gt; Neat! :)\n&gt;&gt;     \n&gt;\n&gt; Extremely neat indeed. If anything is core to the overall neatness (in \n&gt; many senses of the word) of REST it is this. I object strongly to your \n&gt; proposing we do away with it.\n&gt;\n&gt;   \n\nTo me, neatness is establishing the distinction between resources and \nrepresentations and sticking to them. Neatness would be keeping the \nnumber of resources in your application down to a minimum.\n\n&gt;&gt;&gt; Any proposal to have a means of identifying resources beyond URIs is a \n&gt;&gt;&gt; proposal to make HTTP no longer RESTful.\n&gt;&gt;&gt;       \n&gt;&gt; True. What about using URIs to identify beyond resources? (i.e. to \n&gt;&gt; specify the representation)\n&gt;&gt;     \n&gt;\n&gt; Then we no longer have a uniform interface and we no longer have uniform \n&gt; identifiers. URIs have become a misnomer. One of the core constraints in \n&gt; REST has been broken, and hence it&#39;s no longer anything remotely related \n&gt; to REST.\n&gt;   \n\n!!\n\nUsing URIs to identify the resource *and* the representation fits \nexactly the definition of &quot;using URIs to identify beyond resources&quot;. So \nI most definitely agree with the analysis you just gave - I&#39;m not sure \nyou do though!\n\n&gt;   \n&gt;&gt; Modifying the Accept header has *nothing to do* with identifying the \n&gt;&gt; resource.\n&gt;&gt;     \n&gt;\n&gt; Exactly why it shouldn&#39;t be used as an identifier.\n&gt;\n&gt;   \n\nIt&#39;s not identifying anything - it&#39;s negotiating.\n\n&gt;   \n&gt;&gt;&gt; You are proposing that we make HTML violate one of the core \n&gt;&gt;&gt; constraints of REST.\n&gt;&gt;&gt;   \n&gt;&gt;&gt;       \n&gt;&gt; No, I&#39;m not.\n&gt;&gt;     \n&gt;\n&gt; Yes, you are. We have a uniform means of identifying resources. When \n&gt; using an HTTP client we have that, and only that, means of identifying \n&gt; it. This is one of the constraints of REST. If any of the constraints \n&gt; could be considered key (though it&#39;s dangerous to rank the constraints) \n&gt; it would be this one.\n&gt;\n&gt;   \n\nI have no idea what you&#39;re getting at here.\n\n&gt;&gt; To me, that&#39;s a horrible solution.\n&gt;&gt;     \n&gt;\n&gt; Why?\n&gt;\n&gt; It works. It has been done successfully. It has no more overhead than \n&gt; what you propose at an implementation level. It remains within REST. It \n&gt; has zero implementation overhead in the majority case (in fairness, so \n&gt; does yours). It works today, and has done for many years. It&#39;s \n&gt; automatically resilient to changes in which representations are \n&gt; available without hypermedia referencing the resources needing to be \n&gt; updated except for that which comes with the 406 response.\n&gt;\n&gt;   \n\nIt doesn&#39;t seem very uniform, it feels like there should be better ways \nof doing this.\n\n&gt;&gt; My point here is that I see no value in doing content type \n&gt;&gt; negotiation in the URI if the representation is negotiable (Accept \n&gt;&gt; header) via the protocol (HTTP).\n&gt;&gt;     \n&gt;\n&gt; Content negotiation in the headers allows a user-agent to say, &quot;I can \n&gt; work with ...&quot; and the server to act accordingly.\n&gt;\n&gt; Content negotiation by representations-as-resources allows the server to \n&gt; say &quot;I can give you ...&quot; and the client to act accordingly.\n&gt;\n&gt; These fulfil different needs and fulfil them appropriately. Both of \n&gt; these remain within REST.\n&gt;   \n\nI appreciate that - I was asking you what was the value in URI-based \ncontent negotiation. There are significant costs in doing so; namely \nthat it creates a lot more URIs and requires intermediaries and caches \nto be application aware.\n&gt;   \n&gt;&gt; Lack of support? That&#39;s why I am \n&gt;&gt; proposing this additional attribute.\n&gt;&gt;     \n&gt;\n&gt; What lack of support? Both forms of content-negotiation are in use \n&gt; today. Most of the time we don&#39;t do content-negotiation on content-type \n&gt; because most of the time it isn&#39;t actually relevant to the applications. \n&gt; Support for the cases where it is relevant is fine.\n&gt;\n&gt; Of the remaining times when it is not enough, we are offering the user \n&gt; two or more resources to choose between. The only thing your proposal \n&gt; changes in this regard is that the constraint that we have uniform \n&gt; identifiers is no longer holding.\n&gt;   \n\nIts change is that we encourage developers to use URIs to indicate \nresources, and the Accept header to negotiate the content. Instead of \nconfusing them.\n\nHow are intermediaries and caches supposed to know whether a PUT to \n/document.xml means that changes have been made to /document.json, or \n/document.pdf ?\n\nThey can&#39;t. If you were using one URI and the Accept header, this \nbehavior would be apparent without these caches and intermediaries \nhaving to be aware of your application. No?\n\n&gt;   \n&gt;&gt; Your tone seems a little hostile; I&#39;ll give the benefit of the doubt and \n&gt;&gt; just assume you&#39;re socially inept!\n&gt;&gt;     \n&gt;\n&gt; Well, far be it from me to argue with that judgements, but no, it&#39;s not \n&gt; that I&#39;m socially inept (not saying that I am not, it is not for me to \n&gt; judge) it&#39;s that I&#39;m becoming hostile following this thread.\n&gt;\n&gt; All my hostility will disappear if you can explain how we are meant to \n&gt; deal with this proposed change to HTML in a RESTful way?\n&gt;   \n\nHostility is completely unnecessary and nonconstructive. I&#39;m not \nsuggesting this is the case, but did it ever occur to you that you might \nbe wrong? Perhaps we can both learn by sharing our perspectives \nconstructively, instead of trying to score points that don&#39;t exist.\n\nRegards,\nMike\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":289191104,"authorName":"Jan Algermissen","from":"Jan Algermissen &lt;algermissen1971@...&gt;","profile":"algermissen1971","replyTo":"SENDER","senderId":"mtuKsvgKbu7EdzwjF-E8lpplS2Ez6nJKxp8b7IKnnNmilyiLjE-7SJUS69j3NOojIIOsq9KjNJxJVjGIaJmDxgXh-2mvmu3Ixk9Z_dDJMH0","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Re: RESTful M2M Systems and Resource Typing","postDate":"1261604356","msgId":14386,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDdCRUYwM0U4LTQwRjMtNEM0MS1CMjI5LTIxODBCQ0M2MDlFM0BtYWMuY29tPg==","inReplyToHeader":"PGRlNzBiMzlkMDkxMjIzMDk1NWwyNTRkMzNmNW1lMzI3NDI1YjBiMDViY2NiQG1haWwuZ21haWwuY29tPg==","referencesHeader":"PGhnbnBmaCtwcGZrQGVHcm91cHMuY29tPiA8ZGU3MGIzOWQwOTEyMjExMTE5czE4OGNhOGQ0czViZTRkYWQwYjcwZTE1MDdAbWFpbC5nbWFpbC5jb20+IDxFRUE4NEUwOS05RTQ3LTQxMjctODlEMy0wRTk1RDQ5QzJBRURAbWFjLmNvbT4gPGRlNzBiMzlkMDkxMjIxMTQ0N3Q2YzM1MDRlN2s4YTZhMDI2OTZhMmJkYTEwQG1haWwuZ21haWwuY29tPiA8NUVFMTREMkItRjE5Mi00QkNFLUFCRDktQzlFMkM0RjIzQUU0QG1hYy5jb20+IDxkZTcwYjM5ZDA5MTIyMTE4MTVxNjc4MWRlYzdyNWE5YTgzNDU1ZDE3YjRjNkBtYWlsLmdtYWlsLmNvbT4gPEMwQjQzQUE3LTdBRjEtNDA3Ri1BMjFFLTkwN0Q2NTUyMUZCRUBtYWMuY29tPiA8NTgxYmY2MTYwOTEyMjIwNDA3cTQ5MWU2YTM4eDMyMTJhZWFjN2Q4NGJkYWVAbWFpbC5nbWFpbC5jb20+IDwzOTE1YzY5ZDA5MTIyMjEyMTNnMzhjNjQ4ZTJ3ZGQwZDg3MmRjYmMwMTMwOEBtYWlsLmdtYWlsLmNvbT4gPDZFRTcwQjUyLTQ0RTctNDQ2OC05OUY0LUUyQTE4ODJENUQwMkBtYWMuY29tPiA8ZGU3MGIzOWQwOTEyMjMwOTU1bDI1NGQzM2Y1bWUzMjc0MjViMGIwNWJjY2JAbWFpbC5nbWFpbC5jb20+"},"prevInTopic":14383,"nextInTopic":14387,"prevInTime":14385,"nextInTime":14387,"topicId":14156,"numMessagesInTopic":134,"msgSnippet":"... Yes, I agree that with REST SLAs should explicitly put the burdon on the client - otherwise we d just introduce the coupling that REST aims to avoid. This","rawEmail":"Return-Path: &lt;algermissen1971@...&gt;\r\nX-Sender: algermissen1971@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 8540 invoked from network); 23 Dec 2009 21:39:27 -0000\r\nX-Received: from unknown (66.196.94.106)\n  by m11.grp.re1.yahoo.com with QMQP; 23 Dec 2009 21:39:27 -0000\r\nX-Received: from unknown (HELO asmtpout013.mac.com) (17.148.16.88)\n  by mta2.grp.re1.yahoo.com with SMTP; 23 Dec 2009 21:39:26 -0000\r\nMIME-version: 1.0\r\nContent-transfer-encoding: 7BIT\r\nContent-type: text/plain; charset=US-ASCII; format=flowed; delsp=yes\r\nX-Received: from [192.168.2.102] ([84.144.114.127])\n by asmtp013.mac.com (Sun Java(tm) System Messaging Server 6.3-8.01 (built Dec\n 16 2008; 32bit)) with ESMTPSA id &lt;0KV400JMRK5G6Y10@...&gt; for\n rest-discuss@yahoogroups.com; Wed, 23 Dec 2009 13:39:21 -0800 (PST)\r\nCc: Will Hartung &lt;willh@...&gt;,\n Guilherme Silveira &lt;guilherme.silveira@...&gt;,\n Jorn Wildt &lt;jw@...&gt;, rest-discuss@yahoogroups.com\r\nMessage-id: &lt;7BEF03E8-40F3-4C41-B229-2180BCC609E3@...&gt;\r\nTo: Noah Campbell &lt;noahcampbell@...&gt;\r\nIn-reply-to: &lt;de70b39d0912230955l254d33f5me327425b0b05bccb@...&gt;\r\nDate: Wed, 23 Dec 2009 22:39:16 +0100\r\nReferences: &lt;hgnpfh+ppfk@...&gt;\n &lt;de70b39d0912211119s188ca8d4s5be4dad0b70e1507@...&gt;\n &lt;EEA84E09-9E47-4127-89D3-0E95D49C2AED@...&gt;\n &lt;de70b39d0912211447t6c3504e7k8a6a02696a2bda10@...&gt;\n &lt;5EE14D2B-F192-4BCE-ABD9-C9E2C4F23AE4@...&gt;\n &lt;de70b39d0912211815q6781dec7r5a9a83455d17b4c6@...&gt;\n &lt;C0B43AA7-7AF1-407F-A21E-907D65521FBE@...&gt;\n &lt;581bf6160912220407q491e6a38x3212aeac7d84bdae@...&gt;\n &lt;3915c69d0912221213g38c648e2wdd0d872dcbc01308@...&gt;\n &lt;6EE70B52-44E7-4468-99F4-E2A1882D5D02@...&gt;\n &lt;de70b39d0912230955l254d33f5me327425b0b05bccb@...&gt;\r\nX-Mailer: Apple Mail (2.936)\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Jan Algermissen &lt;algermissen1971@...&gt;\r\nSubject: Re: [rest-discuss] Re: RESTful M2M Systems and Resource Typing\r\nX-Yahoo-Group-Post: member; u=289191104; y=yXHG3yjSNQWr5bo7sh-7UvVZXE--kQsrQIF7NK7gOUamzLmnxWBM1jGJ\r\nX-Yahoo-Profile: algermissen1971\r\n\r\n\nOn Dec 23, 2009, at 6:55 PM, Noah Campbell wrote:\n\n&gt; From a contract point of view, it would be more complex.\n&gt;\n&gt; I would argue that a service owner would want the flexibility and  \n&gt; language a RESTful SLA contract would require because it moves  \n&gt; provides forward compatibility with requirements on the client (i.e.  \n&gt; they must support all meaningful HTTP responses gracefully...i.e.  \n&gt; 201, 301, 307, 401).\n\nYes, I agree that with REST SLAs should explicitly put the burdon on  \nthe client - otherwise we&#39;d just introduce the coupling that REST aims  \nto avoid.\n\nThis would effectively mean that the client should expect (though  \nrareley if ever) that its assumptions (which might be based on a hint  \nrather than a MUST) might fail and that this is not a contract  \nviolation by the server but the price to pay for getting all the other  \nloose coupling goodness.\n\n\n&gt;\n&gt; From a client perspective it becomes more of a hassle because it  \n&gt; requires more robust error handling.\n\nRight. And also the acceptance of errors. Erros != broken contract.\n\n&gt;\n&gt;\n&gt; Stepping back and looking at the sum of both parts, I think this is  \n&gt; a good thing and enterprise would want this maturity in between  \n&gt; business groups.  It leads to less cost in terms of maintenance and  \n&gt; service interruption, but this is my speculation.  Unfortunately I  \n&gt; don&#39;t have a concrete evidence this would be the case.\n\nAgreed. And this is a position that I think can be articulated in a  \nmeeting with enterprise people because it makes expicit what is traded  \nfor what. (Analogous to the overbooking example).\n\nIt also provides a framework for people to develop more server  \nconstraining contracts (e.g. collection MUST! return feed) and  \nunderstand what the cost of that is.\n\nGlad this lead to something before the Christmas break :-)\n\nJan\n\n\n&gt;\n&gt; -Noah\n&gt;\n&gt; On Tue, Dec 22, 2009 at 10:46 PM, Jan Algermissen &lt;algermissen1971@... \n&gt; &gt; wrote:\n&gt; Will,\n&gt;\n&gt; excellent analysis.\n&gt;\n&gt;\n&gt; On Dec 22, 2009, at 9:13 PM, Will Hartung wrote:\n&gt;\n&gt; This thread just exploded and it&#39;s taken until now to catch up.\n&gt;\n&gt; Jan, I don&#39;t see any conflict with having a SLA backing up a REST  \n&gt; interface.\n&gt;\n&gt; Me neither. But it needs to be clear what the SLA&#39;ed contract really  \n&gt; is. Take the AtomPub example: RFC 5023 *is* saying that a GET on a  \n&gt; collection will return a feed. Is that normative? Or just a hint? If  \n&gt; it is just a hint, why is it in the spec at all and what is the  \n&gt; value of it from the client developer&#39;s POV?\n&gt;\n&gt; If you are the service owner, would you put into the SLA a penalty  \n&gt; payment of some serious money if your service stops providing an  \n&gt; Atom feed for a GET to a collection? If not, the whole information  \n&gt; is meaningless from a contract POV.\n&gt;\n&gt;\n&gt;\n&gt;\n&gt; I think that you can make a brittle REST architecture that hits all of\n&gt; the REST bullet points, but inevitably fails to evolve properly.\n&gt;\n&gt; Take for example here, the &quot;apiv2&quot; rel link.\n&gt;\n&gt; The fact that the service authors CHOSE to add an &quot;apiv2&quot; link. They\n&gt; did not HAVE to. They COULD have simply changed the media type, and\n&gt; 406&#39;d the old clients.\n&gt;\n&gt; My issue: In a RESTful system, the service authors woule *never*  \n&gt; have to make any promise, right?\n&gt;\n&gt;\n&gt;\n&gt; Obviously, &quot;suddenly&quot;, all of the old client fail miserably, and are\n&gt; cut off from the service until they upgrade. No backward compatibility\n&gt; here.\n&gt;\n&gt; Yes, And if that happens, a legal department demands a basis for  \n&gt; sorting out who violoated which obligation. They have a hard time  \n&gt; accepting to build legal contracts on top of &quot;REST style flexibility&quot;.\n&gt;\n&gt; OTH, as I mentioned before, if the potential failure of the clients  \n&gt; would be officially accepted because the occasional SLA violation  \n&gt; costs less than running a tightly coupled system then it might make  \n&gt; sense to CxOs.\n&gt;\n&gt; With this approach, RFC 5023 should normatively state that clients  \n&gt; can expect Atom feeds to be returned for GETs on collections and the  \n&gt; service owners would just accept that there is a price to pay should  \n&gt; the service return a 406 instead.\n&gt;\n&gt;\n&gt;\n&gt; As for &quot;evolutionary&quot; software, it&#39;s pretty clear that it doesn&#39;t\n&gt; evolve. Rather you have backward compatibility that gives an illusion\n&gt; of evolution. The existing clients aren&#39;t changing, the service is\n&gt; simply being friendly by keeping them in mind and not locking them\n&gt; out.\n&gt;\n&gt; I don&#39;t see any way that REST differs from SOAP, or any other system\n&gt; in this regard. As you&#39;ve observed, compliance and compatibility are\n&gt; hard coded in to the clients and server. If the protocol changes, the\n&gt; clients and servers need to be changed to remain compatible.\n&gt;\n&gt; My point is that REST differs from SOAP because this coupling is not  \n&gt; being made explicit. In SOAP it is explicit because there is a WSDL  \n&gt; that defines an interface that couples tightly. It just known that  \n&gt; you cannot remove a method from an OO-style API without breaking  \n&gt; your clients. For REST we usually argue that services can freely  \n&gt; evolve without breaking clients. Which is wrong.\n&gt;\n&gt;\n&gt;\n&gt; Versioning and backward compatibility is the key to a robust, evolving\n&gt; infrastructure. I think REST is better for such a system than\n&gt; something like SOAP simply because I think it is easier for a more\n&gt; advanced client to leverage the latest services and APIs, as well as\n&gt; for a server to better maintain compatibility with older clients.\n&gt;\n&gt; Yes, definitely.\n&gt;\n&gt;\n&gt; Both of these are done through extensible types and con neg. As you\n&gt; get more and more servers and clients on different upgrade cycles,\n&gt; this capability become more important. It&#39;s easy to see how you might\n&gt; get consumers using services that you, as the provider, particularly\n&gt; in an &quot;open&quot; enterprise, didn&#39;t even really &quot;know&quot; were being\n&gt; serviced.\n&gt;\n&gt; Yes.\n&gt;\n&gt;\n&gt;\n&gt; In the end, though things like typed rels, and online documentation,\n&gt; ideally when something goes wrong, payload inspection will direct the\n&gt; people maintaining the consumers towards what they need to change to\n&gt; become compliant again and able to use the new service.\n&gt;\n&gt; Yes.\n&gt;\n&gt; I really only tried to say that the clients an in fact break and  \n&gt; that it should be understood where and how the contract is  \n&gt; established that causes them to fail. IMHO, current specifications  \n&gt; that are not only targeted at pure human driven consumption (e.g.  \n&gt; AtomPub or OpenSearch) are not doing a good job in this regard.\n&gt;\n&gt; (OpenSearch, for example, states nowhere that Atom or RSS are the  \n&gt; formats a client should be able to handle. Yet, this seems to be  \n&gt; some sort of common sense. The OSD FAQ page says something like  \n&gt; &quot;OpenSearch is a collection of simple formats for the sharing of  \n&gt; search results&quot;[1]. Sure yes, that is all I need to know for build  \n&gt; useful stuff. But would you invest a couple of million Dollars into  \n&gt; building clients for a service description such as this one?  \n&gt; Tomorrow the service could stop sending both, Atom and RSS and just  \n&gt; use something new and would not be liable for it in any way.)\n&gt;\n&gt; Jan\n&gt;\n&gt; [1] http://www.opensearch.org/Documentation/Frequently_asked_questions\n&gt;\n&gt;\n&gt;\n&gt; Regards,\n&gt;\n&gt; Will Hartung\n&gt; (willh@...)\n&gt;\n&gt; --------------------------------------\n&gt; Jan Algermissen\n&gt;\n&gt; Mail: algermissen@...\n&gt; Blog: http://algermissen.blogspot.com/\n&gt; Home: http://www.jalgermissen.com\n&gt; --------------------------------------\n&gt;\n&gt;\n&gt;\n&gt;\n\n--------------------------------------\nJan Algermissen\n\nMail: algermissen@...\nBlog: http://algermissen.blogspot.com/\nHome: http://www.jalgermissen.com\n--------------------------------------\n\n\n\n\n"}}
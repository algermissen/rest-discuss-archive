{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":289191104,"authorName":"Jan Algermissen","from":"Jan Algermissen &lt;algermissen1971@...&gt;","profile":"algermissen1971","replyTo":"SENDER","senderId":"fKFzKPctw6iKbKXAdeMgYWvvIa3Pa0zh8aovZJ_DGZQPSWlXGiWMMxi_YKGfx9TsjMCIq-6oeEx3U80WCB_Gk8fS0ny3Kf-Uwzi0eSVaPC4","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] HATEOAS and Cache","postDate":"1266563034","msgId":14811,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDlFNEMwMThCLTVFMTMtNDRERC04QUJELTAxQUIyQTE0RDA1NEBtYWMuY29tPg==","inReplyToHeader":"PDc5Q0ZDOThCLTk5MEMtNDkwNC1CRUE1LUEzN0NCMTNGOUIyQUBnbWFpbC5jb20+","referencesHeader":"PDc5Q0ZDOThCLTk5MEMtNDkwNC1CRUE1LUEzN0NCMTNGOUIyQUBnbWFpbC5jb20+"},"prevInTopic":14810,"nextInTopic":14812,"prevInTime":14810,"nextInTime":14812,"topicId":14806,"numMessagesInTopic":17,"msgSnippet":"... This is not a RESTful client implementation because it is based on expectations about the application s state machine and the client cannot have such","rawEmail":"Return-Path: &lt;algermissen1971@...&gt;\r\nX-Sender: algermissen1971@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 73896 invoked from network); 19 Feb 2010 07:04:01 -0000\r\nX-Received: from unknown (66.196.94.105)\n  by m11.grp.re1.yahoo.com with QMQP; 19 Feb 2010 07:04:01 -0000\r\nX-Received: from unknown (HELO asmtpout026.mac.com) (17.148.16.101)\n  by mta1.grp.re1.yahoo.com with SMTP; 19 Feb 2010 07:04:01 -0000\r\nMIME-version: 1.0\r\nContent-transfer-encoding: 7BIT\r\nContent-type: text/plain; charset=us-ascii\r\nX-Received: from [192.168.2.102] ([84.144.85.136])\n by asmtp026.mac.com (Sun Java(tm) System Messaging Server 6.3-8.01 (built Dec\n 16 2008; 32bit)) with ESMTPSA id &lt;0KY2003R1UAJ2C80@...&gt; for\n rest-discuss@yahoogroups.com; Thu, 18 Feb 2010 23:03:58 -0800 (PST)\r\nX-Proofpoint-Spam-Details: rule=notspam policy=default score=0 spamscore=0\n ipscore=0 phishscore=0 bulkscore=0 adultscore=0 classifier=spam adjust=0\n reason=mlx engine=5.0.0-0908210000 definitions=main-1002180283\r\nIn-reply-to: &lt;79CFC98B-990C-4904-BEA5-A37CB13F9B2A@...&gt;\r\nDate: Fri, 19 Feb 2010 08:03:54 +0100\r\nCc: rest-discuss@yahoogroups.com\r\nMessage-id: &lt;9E4C018B-5E13-44DD-8ABD-01AB2A14D054@...&gt;\r\nReferences: &lt;79CFC98B-990C-4904-BEA5-A37CB13F9B2A@...&gt;\r\nTo: Jan Vincent &lt;jvliwanag@...&gt;\r\nX-Mailer: Apple Mail (2.1077)\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Jan Algermissen &lt;algermissen1971@...&gt;\r\nSubject: Re: [rest-discuss] HATEOAS and Cache\r\nX-Yahoo-Group-Post: member; u=289191104; y=M2wopOGNwJU7jPpck-g7nvDWMEbvx7BYVNDdJC389wVMc_Qcv_GRmJR0\r\nX-Yahoo-Profile: algermissen1971\r\n\r\n\nOn Feb 19, 2010, at 1:56 AM, Jan Vincent wrote:\n\n&gt; Hi guys,\n&gt; \n&gt; I&#39;m trying to understand HATEOAS properly and aim to embrace it fully. However, the lack of client side libraries that embrace this is impeding me for the moment. The way I see it, all clients must be only be made known of one URI, say &quot;/&quot;. The client then derives the URIs from that link. As such, I was hoping to do something roughly like:\n&gt; \n&gt; from(&quot;/&quot;).follow(&quot;#users_link&quot;).fill_form(&quot;search_user&quot;, {&quot;id&quot;: &quot;someid&quot;}).follow(&quot;#user_link&quot;).follow(&quot;#friends_link&quot;)\n&gt; \n&gt; The goal of the previous command was to get the friends of some user having an ID of &#39;someid&#39;. It starts by going to the given URL, then from the page it got, follows a certain link which redirect it to the resource for a list of users. It then searches for the user, probably filling up a form, submits it, and goes to the user&#39;s page. From the user&#39;s page, there is a link to the friends page, and that is followed and eventually processed.\n\nThis is not a RESTful client implementation because it is based on expectations about the application&#39;s state machine and the client cannot have such expectations. The server might change the whole state machine at runtime which is not an error condition but a feature of REST.\n\nThink this instead:\n\nThe client has an overall goal (unless it is a robot) and must for each steady state it is being put in by the server understand how to proceed achieving that goal.\n\nIf the client knows that the server uses media types A, B and C[1] it must handle A, B and C for any steady state it reaches.\n\nJan\n\n\n\n[1] In my opinion, the client must know the types at design time - otherwise, the client could not be coded in the first place\n\n\n&gt; \n&gt; In reality of course, this shouldn&#39;t really necessitate multiple calls to the server if called multiple times since previous results have been cached and processed on the client side. Only when the cache expires, should there be an attempt to request again. I&#39;m not really sure if RESTful clients that respect HATEOAS do it this way, and should they in the first place. If they do, are there tools that exist for this?\n&gt; \n&gt; On a side note, content type negotiation should be preconfigured before doing the call I stated above.\n&gt; \n&gt; Thanks,\n&gt; \n&gt; Jan Vincent Liwanag\n&gt; jvliwanag@...\n&gt; \n&gt; \n&gt; \n&gt; \n&gt; \n&gt; ------------------------------------\n&gt; \n&gt; Yahoo! Groups Links\n&gt; \n&gt; \n&gt; \n\n-----------------------------------\n Jan Algermissen, Consultant\n NORD Software Consulting\n\n Mail: algermissen@...\n Blog: http://www.nordsc.com/blog/\n Work: http://www.nordsc.com/\n-----------------------------------\n\n\n\n\n\n"}}
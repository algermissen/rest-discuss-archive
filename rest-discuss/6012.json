{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":80219925,"authorName":"John Elliot","from":"John Elliot &lt;jj5@...&gt;","profile":"jj5v1","replyTo":"SENDER","senderId":"z-khixRRL6wZYrKJfuyi4y1tJiNwycHUPo5_Yrv5rYshE2qPvgTkPk9bS8b5xMEyRq8UcMwc_cY-Qbo8hpzcxQ","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Re: Meaning of stateless","postDate":"1145493619","msgId":6012,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQ0NDZEODczLjcwNDAxMDhAamo1Lm5ldD4=","inReplyToHeader":"PEUzNkNDOTMwLTgyNkItNEJCQS04QzM4LUNBNzRDRENEMDQyRUBhcnRpbWEuY29tPg==","referencesHeader":"PDQ0M0ZGMzFDLjgwMDAxMDlAdmVpY29uLmNvbT4JIDwzNDNlY2IzZTA2MDQxNDEyMzBnNDFjMTMyMWNuYjJhOTM2Y2NiZjUzZGM3ZEBtYWlsLmdtYWlsLmNvbT4gPDExNDUwOTU4OTMuNjk4OC4yNi5jYW1lbEBsb2NhbGhvc3QubG9jYWxkb21haW4+IDw0NDQ0NkNGMC45MDEwMzA4QGpqNS5uZXQ+IDw0RjhGRTQyNi01NEFFLTQ4REQtQUJEMC1FRjU0MzBFNTdBMEFAYXJ0aW1hLmNvbT4gPDQ0NDU4REIyLjcwNzAwMDNAamo1Lm5ldD4gPEUzNkNDOTMwLTgyNkItNEJCQS04QzM4LUNBNzRDRENEMDQyRUBhcnRpbWEuY29tPg=="},"prevInTopic":6011,"nextInTopic":6018,"prevInTime":6011,"nextInTime":6013,"topicId":5949,"numMessagesInTopic":44,"msgSnippet":"Hi Bill, ... The term for what you are doing is immutable , not stateless . At least, that s what you re *trying* to do, but it s not so simple as you might","rawEmail":"Return-Path: &lt;jj5@...&gt;\r\nX-Sender: jj5@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 12921 invoked from network); 20 Apr 2006 00:43:15 -0000\r\nReceived: from unknown (66.218.67.34)\n  by m25.grp.scd.yahoo.com with QMQP; 20 Apr 2006 00:43:15 -0000\r\nReceived: from unknown (HELO mail5.tpgi.com.au) (203.12.160.101)\n  by mta8.grp.scd.yahoo.com with SMTP; 20 Apr 2006 00:43:15 -0000\r\nX-TPG-Antivirus: Passed\r\nReceived: from johnny5 (220-245-41-182.static.tpgi.com.au [220.245.41.182])\n\tby mail5.tpgi.com.au (envelope-from jj5@...) (8.13.6/8.13.6) with ESMTP id k3K0hB0i024965\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Thu, 20 Apr 2006 10:43:13 +1000\r\nMessage-ID: &lt;4446D873.7040108@...&gt;\r\nDate: Thu, 20 Apr 2006 00:40:19 +0000\r\nUser-Agent: Debian Thunderbird 1.0.2 (X11/20051002)\r\nX-Accept-Language: en-us, en\r\nMIME-Version: 1.0\r\nTo: REST Discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nReferences: &lt;443FF31C.8000109@...&gt;\t &lt;343ecb3e0604141230g41c1321cnb2a936ccbf53dc7d@...&gt; &lt;1145095893.6988.26.camel@...&gt; &lt;44446CF0.9010308@...&gt; &lt;4F8FE426-54AE-48DD-ABD0-EF5430E57A0A@...&gt; &lt;44458DB2.7070003@...&gt; &lt;E36CC930-826B-4BBA-8C38-CA74CDCD042E@...&gt;\r\nIn-Reply-To: &lt;E36CC930-826B-4BBA-8C38-CA74CDCD042E@...&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0:0\r\nFrom: John Elliot &lt;jj5@...&gt;\r\nSubject: Re: [rest-discuss] Re: Meaning of stateless\r\nX-Yahoo-Group-Post: member; u=80219925; y=4Hph2EzJlpvDgIap0dFgqZfLdeqon5vtpnCFAouWxYM\r\nX-Yahoo-Profile: jj5v1\r\n\r\nHi Bill,\n\nBill Venners wrote:\n&gt; I&#39;m not quite sure I follow all of this, but one thing I would change  \n&gt; is the last one. I wouldn&#39;t say shopping basket 12, but shopping  \n&gt; basket *snapshot* 12. The shopping basket is something the user  \n&gt; thinks in terms of. She is adding items to that conceptual basket.  \n&gt; But on the server, there is not one basket. There is one snapshot of  \n&gt; her conceptual basket for each time she changed it. Plus it wouldn&#39;t  \n&gt; be numbered 12, but some opaque ID such as F4Dmc983xRR12. The URI  \n&gt; could be something like:\n&gt; \n&gt; http://shop.artima.com/basket?z= F4Dmc983xRR12\n&gt; \n&gt; That&#39;s a completely different resource from:\n&gt; \n&gt; http://shop.artima.com/basket\n&gt; \n&gt; Which is an empty shopping basket snapshot.\n\nThe term for what you are doing is &#39;immutable&#39;, not &#39;stateless&#39;.\n\nAt least, that&#39;s what you&#39;re *trying* to do, but it&#39;s not so simple as \nyou might think, and I&#39;d bet you haven&#39;t gone &#39;far enough&#39;.\n\nThose URLs you are creating are intended to be &#39;keys to immutable state&#39;.\n\nYour &#39;shopping basket snapshot&#39;, as you describe it, only superficially \navoids state mutations.\n\nSay &#39;F4Dmc983xRR12&#39; is a key to a shopping basket snapshot. What&#39;s in a \nshopping basket? &#39;Products&#39;, &#39;Quantity&#39;, &#39;Price&#39;, etc.\n\nThe thing is that what products that are available, how much stock there \nis, what the price is, etc., may all change while a user is shopping. \nThese variations as you &#39;dereference&#39; them from the &#39;shopping basket \nsnapshot&#39; will undermine its immutability.\n\nThe only analogy that won&#39;t &#39;fray&#39; apart like this is if you used \nsomething like a centralised version control system (like subversion) as \nthe backing store. If you did that, then you truly could have \n&#39;immutable&#39; shopping basket snapshots. The thing is though, that as your \nproducts, stock levels, and prices can vary over time *in the real \nworld*, it would be of limited value to you or your users to allow them \nto proceed shopping for half an hour when you could already have told \nthem &quot;Oh, look, that thing you want to buy... someone else just \npurchased it, and now we&#39;re out of stock&quot;. If you don&#39;t allow two users \nto put a single item in their shopping basket, i.e., if you literally \n&#39;put it in their shopping basket&#39; (well, as close to &#39;literally&#39; as you \ncan get in this &#39;metaphorical&#39; sense.. :P  What I mean is that you take \nthe item &#39;off the shelf&#39; if it&#39;s in someone&#39;s basket), then that is \ntantamount to offering a pessimistic lock on a resource. Locking is bad. \nThat&#39;s not to say that &#39;resource locking&#39; isn&#39;t something that you might \nhave to do in order to support your line of business, but you can see \nthat without a firm &#39;requirements definition&#39; it&#39;s difficult for me to \npursue this &#39;shopping basket snapshot&#39; idea.\n\nYou&#39;ve introduced (considerable) complexity, and I doubt you&#39;ve actually \navoided the problem. The problem is that state mutates on the server \nindependently of a single user session. You&#39;ve whacked a veneer over the \ntop of this problem which makes it harder to see, and &#39;less likely&#39; to \nbe a problem, but you haven&#39;t arrived at a general solution for the problem.\n\n&gt; Not if the object of the request is a shopping basket snapshot. Then  \n&gt; the URI is exactly referencing that. Like I said previously, in this  \n&gt; way of thinking, there is no shopping basket on the server. There are  \n&gt; several snapshots of state that our shopper has created via POSTs as  \n&gt; she has added, say books, to her shopping basket. When she adds an  \n&gt; item to the shopping cart, she gets redirected to a new snapshot, the  \n&gt; latest and greatest. She can back up and click reload, and she&#39;ll go  \n&gt; back to a previous snapshot.\n\nLet&#39;s forget the shopping basket analogy for a minute, because I don&#39;t \nwant to get bogged down in a subjective discussion about whether this is \na &#39;line of business&#39; function (state on the server) or a &#39;user \ncontrolled thing&#39; (immutable state on server referenced by the URL). I \ndon&#39;t think your &#39;shopping basket snapshot&#39; is a good idea, but I&#39;m \nwilling to concede that it can work (to some degree), and I perceive \nlittle value in arguing over it.\n\nI&#39;d like to propose that we consider instead a user&#39;s bank account. This \nis an example of where the correlation of state with the &#39;real world&#39; is \nundeniably important. How does your &#39;immutable snapshot&#39; attempt help in \nthis scenario?\n\n&gt; I used to think in terms of user sessions on the server, as you are  \n&gt; describing, and as all web frameworks I&#39;ve seen encourage. I feel the  \n&gt; main way that reading about REST helped me is in gaining insight into  \n&gt; HTTP. It is a stateless protocol, as you I think explained well in a  \n&gt; previous email:\n\nThanks, but as I pointed out, it&#39;s the *transfer protocol* which is \nstateless. Not your application. You are conflating &#39;immutable \napplication state&#39; with &#39;stateless transfer protocol&#39;.\n\nImmutable resources and stateless transfer protocols each surface \nexcellent scalability features, but that doesn&#39;t make them useful when \nyou can&#39;t use them. Certainly HTTP will always be a &#39;stateless transfer \nprotocol&#39;, and that&#39;s great, but not all resources are &#39;immutable&#39;, and \nnor should they be. Also, the mutations which do occur on resources are \nnot always isolated to a single set of single user&#39;s interactions (aka: \na session). State can vary independently of a user&#39;s session. However, \nstate can vary with respect to a user&#39;s session too. That is, the \n&#39;subject&#39; (a &#39;user&#39;, or more desirably a &#39;user&#39;s session&#39;) can imply a \ncontext the implications of which mutate based on historical interaction \nin the same context. That is, if a user deletes an email, then a \nrepresentation of that user&#39;s inbox will no longer include that email. \nIf a &#39;user session&#39; removes an item from their shopping basket, then \nthat item will no longer appear in a representation of the shopping basket.\n\nYou might be able to run the case for immutable resources in the case of \na &#39;shopping basket&#39; feature (although I beg to differ), but other things \nlike a user&#39;s &#39;bank account&#39; I think you&#39;d be forced to agree that state \ncan not be represented by immutable snapshots in a URL. What would I do? \nPay my bill. Click back. Pay another bill. Click back. Pay another bill. \nClick back. Chuckle. :)\n\n&gt; When you talk about user session, I feel like you are trying to push  \n&gt; statefullness on the stateless protocol in the traditional way that  \n&gt; most web apps have done.\n\nI thought we were on the same page with &#39;application state&#39; and \n&#39;transfer protocol state&#39; being different things, but this comment of \nyours hints that perhaps we&#39;re not. I&#39;ve stressed the difference above, \nso hopefully that gels.\n\n&gt; You suggest that my opaque ID tokens for the  \n&gt; shopping cart session snapshots are &quot;nothing more than session  \n&gt; tokens,&quot; though worse because, &quot;they stand as a key to server-side  \n&gt; state which could have been indicated by a single session key.&quot;\n\nYes, and I stand by that.\n\n&gt; My  \n&gt; point, which I think you may understand but just don&#39;t agree with, is  \n&gt; that you can avoid entirely the concept of a user session on the  \n&gt; server side by considering each piece of state resulting from a  \n&gt; conversation over HTTP with a user as a resource. If you do so, then  \n&gt; you aren&#39;t layering any statefulness on top of HTTP--each request  \n&gt; really is completely independent of the other.\n\nYes, I do understand your point. Yes, I disagree with your point.\n\nUser requests, in the context of a single user session are dependant on \neach other. For example, I can&#39;t remove an item from my shopping basket \nuntil after I&#39;ve added an item to my shopping basket.\n\nMore than that, each request is dependant on *time*. I already \nhighlighted this, and I pointed out that the only way you can &#39;stop \ntime&#39; is to hold a lock. As you can&#39;t hold a lock for more than one \nrequest, every single request *must be* considered to be dependant on time.\n\n&gt; Authentication and  \n&gt; authorization is something that has to happen all over again each  \n&gt; request, because the server doesn&#39;t need to remember any notion of a  \n&gt; user session.\n\nOf course. There is nothing which I&#39;ve said that should have been taken \nas contrary to this.\n\nAlso, you have to reauthorise and reauthenticate on every request \nbecause, as I said above, state varies over time. I.e. user Joe is a \nmember of the Administrators group and he requests /sensitive-resource, \nand he gets it. Then user Jim posts new data to the server which affects \nthe state of /sensitive-resource. Then Jim notices that Joe is in the \nAdministrators group. Then Jim removes Joe from the Administrators \ngroup. Then Joe tries to refresh his representation of \n/sensitive-resource and gets a 401 response.\n\nThis has nothing to do with sessions or lack thereof.\n\nThe problem with HTTP which I&#39;ve being trying to point out is that the \nonly &#39;session&#39; that a user can have with your application (if you only \nuser HTTP Auth) is a &#39;single universal session&#39;. That&#39;s not sufficient \nfor any web application I work on. It is sufficient for me to \ndemonstrate how the &#39;subject&#39; of a request is relevant to the context in \nwhich a server generates resource representations.\n\n&gt; That&#39;s funny. About two weeks ago perhaps I mentioned I was thinking  \n&gt; about doing just that, and someone on this list suggested I do it  \n&gt; with JavaScript. The reason I&#39;m leaning in the JavaScript direction  \n&gt; now is that search keyword highlighting isn&#39;t an aspect of a page  \n&gt; that I care for users to be able to share. The only way to get it is  \n&gt; to actually come in from a search engine. If you grab the URI and  \n&gt; send it to your friend, and they click on it, they won&#39;t get the  \n&gt; syntax highlighting. In that case, I think the syntax highlighting  \n&gt; would be confusing. If I&#39;m able to use JavaScript, then it will only  \n&gt; work if JavaScript is enabled on the client. It is not important  \n&gt; enough to usability that I&#39;m willing to accept that. But I&#39;ll send  \n&gt; the same JavaScript to everyone, so I don&#39;t need any extra  \n&gt; representations to do it, which helps me cache effectively.\n\nI too have a concept of &#39;representation mutations&#39; which are &#39;ancillary&#39; \nto &#39;line of business function&#39; (&#39;line of business function&#39; dictating \nthe &#39;semantics of a resource&#39;). For example, I often use ECMAScript to \nvary representations on the strength of what happens to be in a user&#39;s \ncookie. (The cookie in this case just being a convenient store for \nclient-side state). I think it&#39;s fine to do that, as long as you \nrecognise what it is that you&#39;re doing. That is, some aspect of a \nrepresentation as perceived by the user is entirely independent of the \nsemantics of the resource the representation is for.\n\n&gt;&gt;In case you or others haven&#39;t picked up on it (because I didn&#39;t\n&gt;&gt;explicitly say so as yet), I&#39;m using the term &#39;subject&#39; and  \n&gt;&gt;&#39;object&#39; in\n&gt;&gt;a grammatical sense.\n&gt; \n&gt; I hadn&#39;t gotten that. I was thinking of subject in the authorization  \n&gt; sense, but now that you mention it, perhaps that&#39;s why *they* call it  \n&gt; subject.\n\nThe form is: Subject Verb Object.\n\nThe responsibility of your server is to make statements in this form \ntrue. You figure out what the subject is (i.e. &#39;user&#39;, or &#39;session&#39;), \nyou figure out what the verb is (e.g. GET) and what the object is (i.e. \nthe &#39;resource&#39;) and then you generate a response. Assuming the response \nis a 200 class response then the generated representation won&#39;t simply \nbe based on the verb and the object, but it will also take into \nconsideration the subject of the request.\n\n&gt; The URI isn&#39;t the only thing in the request, and I think everything  \n&gt; in the request should be considered fair game in considering how to  \n&gt; respond.\n\nAnd this is the essence of what I&#39;m worried about. If people start using \n&#39;custom&#39; HTTP headers then we&#39;re going to end up with a very broken web.\n\nAlso, you don&#39;t actually need HTTP headers to service *explicit* GET \nrequests.\n\nI offered you a constraint which you can use to simplify your HTTP \ninteraction model. That is, if you are going to use any aspect of the \nheaders (beyond &#39;session token&#39; in a cookie) in order to modify the \nsemantics of a request then the only response you should generate is a \n300 class response.\n\nThis constraint will ensure that URLs and hypermedia surface the full \nvalue of your web service. If you have a session token and an explicit \nresource description you don&#39;t need HTTP headers.\n\nAs you *do* have HTTP headers, and as HTTP headers have universal \nsemantics, you should take advantage of them by turning &#39;inexplicit \nresource descriptions&#39; into &#39;explicit resource descriptions&#39; automatically.\n\n&gt; The URI is the part that&#39;s sharable, so I want to have a  \n&gt; unique URI for each resource I want people to be able to share among  \n&gt; each other. I don&#39;t care that users can share the prominent link to a  \n&gt; translation, because that only makes sense for the user that actually  \n&gt; indicates in their request headers that they like French content.\n\nYou are making my case for me here. See, you, as the web architect, can \nelect to *either* make &#39;French content&#39; dependent on the &#39;subject&#39; of \nthe request (i.e. the &#39;user&#39;, or &#39;this user session&#39;) *or* on the \n&#39;object&#39; of the request (i.e. the explicit description of the resource \nbeing requested, that is, with the preference in the URL).\n\nFurther, you can do what I do, and have a &#39;cascading&#39; system. That is, \nif the &#39;object&#39; explicitly says &#39;French content&#39; then regardless of \nanything else the user gets it that way. In the absence of a request for \n&#39;French content&#39; in the URL then the &#39;subject&#39; will imply the whether \n&#39;French content&#39; is there or not. In the absence of a setting from \neither the &#39;subject&#39; or the &#39;object&#39; then the &#39;application&#39; has a default.\n\n&gt; I agree with everything except that by using the same URI for all  \n&gt; these things, I&#39;m declaring as the designer that they are all the  \n&gt; same resource. If I use JavaScript, then they are all the same  \n&gt; representation of the resource. If I make a different ETag for each,  \n&gt; and send all this stuff from the server, then each unique one is a  \n&gt; different representation of that one resource. As the designer, I can  \n&gt; chop my state up into URI-addressable resources any way I want, and  \n&gt; each resulting URI by definition maps to a resource.\n\nYep, I think this is fine.\n\n&gt; Well, it&#39;s content negotiation. I don&#39;t want to do a lot of it, but  \n&gt; where it improves usability I think it&#39;s fine to use.\n\nYep, I agree. The thing is that &#39;content negotiation&#39;, or for that \nmatter anything else where the semantics of the request are going to be \nmodified by the content of the HTTP headers then I think you should only \n&#39;redirect&#39;, rather than &#39;respond&#39;. I.e. the URL should be *explicit*. \nThe only thing that shouldn&#39;t be in the URL is the &#39;subject&#39; of the \nrequest. In HTTP the only supported device for &#39;subject&#39; is the HTTP \nAuth header which indicates the &#39;user&#39; as the &#39;subject&#39;, but that&#39;s not \ngood enough if you want to allow discrete users to have multiple &#39;sessions&#39;.\n\n&gt; I hate those ugly URLs too, but 5% means 5% more happy users, 5% more  \n&gt; participation, 5% more purchases. I value that more.\n\nOnce you come to my way of thinking about &#39;subject&#39;, &#39;verb&#39;, &#39;object&#39;, \nthen I don&#39;t really care if you need to hack the &#39;session token&#39; into \nthe URL.\n\nIt&#39;s not a problem for me, I tend to do &#39;B2B&#39; systems and intranets, so \nI don&#39;t need to support diverse visual agents.\n\n&gt; I would say that the subject is not the session, it is the user. Each  \n&gt; request the user must authenticate, and then they become the subject.  \n&gt; HTTP does attempt to support this view with HTTP authentication. I  \n&gt; believe it can also be supported via cookies or URL-rewriting, if you  \n&gt; just use that &quot;session ID&quot; as an authentication token and nothing more.\n\nYep, the &#39;subject&#39; usually is the user. However, often you need it to be \nthe &#39;user session&#39;. A &#39;user session&#39; implies a user, but it means that \nusers aren&#39;t forced to have a single &#39;universal session&#39;.\n\n\n\n\n\n\n\n\n\n\n\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":23186829,"authorName":"Paul Prescod","from":"Paul Prescod &lt;paul@...&gt;","replyTo":"SENDER","senderId":"rVIotKmK1GM6pqwC5ZD4U5CHNWYkZJy7-jfLCYybynG_VL4Lo2C2EPBofEwtyh1D2Qzuu8nMF4mWl0c7te7AktoeGEIkzg","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Why is HTTP hard to design with?","postDate":"1011980419","msgId":276,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDNDNTE5ODgzLkEyMjVCNUI0QHByZXNjb2QubmV0Pg==","referencesHeader":"PFBpbmUuV05ULjQuNDMuMDIwMTI1MDA1MzE1MC4xNDAwLTEwMDAwMEBnYW5kb2xwaC5BU0dBUkQuam1zPg=="},"prevInTopic":274,"nextInTopic":279,"prevInTime":275,"nextInTime":277,"topicId":209,"numMessagesInTopic":77,"msgSnippet":"... If they understood REST I think that they would choose HTTP. Better applications can be built if you model data elements and processes as resources rather","rawEmail":"Return-Path: &lt;paul@...&gt;\r\nX-Sender: paul@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_0_1_3); 25 Jan 2002 17:41:39 -0000\r\nReceived: (qmail 68292 invoked from network); 25 Jan 2002 17:41:38 -0000\r\nReceived: from unknown (216.115.97.172)\n  by m12.grp.snv.yahoo.com with QMQP; 25 Jan 2002 17:41:38 -0000\r\nReceived: from unknown (HELO smtp1.ActiveState.com) (209.17.183.249)\n  by mta2.grp.snv.yahoo.com with SMTP; 25 Jan 2002 17:41:38 -0000\r\nReceived: from smtp3.ActiveState.com (smtp3.ActiveState.com [192.168.3.19])\n\tby smtp1.ActiveState.com (8.11.6/8.11.6) with ESMTP id g0PHfG113101;\n\tFri, 25 Jan 2002 09:41:16 -0800\r\nReceived: from prescod.net (ssh1.ActiveState.com [192.168.3.32])\n\tby smtp3.ActiveState.com (8.11.6/8.11.6) with ESMTP id g0PHfDe17637;\n\tFri, 25 Jan 2002 09:41:14 -0800\r\nMessage-ID: &lt;3C519883.A225B5B4@...&gt;\r\nDate: Fri, 25 Jan 2002 09:40:19 -0800\r\nX-Mailer: Mozilla 4.76 [en] (Windows NT 5.0; U)\r\nX-Accept-Language: en\r\nMIME-Version: 1.0\r\nTo: &quot;S. Alexander Jacobson&quot; &lt;alex@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nSubject: Re: [rest-discuss] Why is HTTP hard to design with?\r\nReferences: &lt;Pine.WNT.4.43.0201250053150.1400-100000@...&gt;\r\nContent-Type: text/plain; charset=us-ascii\r\nContent-Transfer-Encoding: 7bit\r\nX-PerlMx-Spam: Gauge=, Probability=0%, Report=INTERNAL_HOST\r\nX-Filtered-By: PerlMx makes it fast and easy.  See http://www.ActiveState.com/Products/PerlMx/Header\r\nFrom: Paul Prescod &lt;paul@...&gt;\r\nX-Yahoo-Group-Post: member; u=23186829\r\n\r\n&quot;S. Alexander Jacobson&quot; wrote:\n&gt; \n&gt; On Thu, 24 Jan 2002, Paul Prescod wrote:\n&gt; &gt; There is always a gap between one model and another. The problem is\n&gt; &gt; we&#39;ve learned to think about it one way and now we must learn to think\n&gt; &gt; about it another. If you taught someone REST and you taught them sockets\n&gt; &gt; and asked them to invent an email system I think they would find it\n&gt; &gt; easier to do it using HTTP and REST.\n&gt; \n&gt; The more comparable example is if you asked them\n&gt; to set up an asynchronous peer to peer\n&gt; messaging system (aka email). Would they choose\n&gt; HTTP or SMTP?\n\nIf they understood REST I think that they would choose HTTP. Better\napplications can be built if you model data elements and processes as\nresources rather than endpoints. If you&#39;re building a *new* application\nthen you need to write the software on the client and server sides\nanyhow. We all know how little effort it takes to put HTTP on the client\nside. I&#39;ve shipped products with HTTP servers written in four different\nlanguages.\n\n&gt;...\n&gt; &gt; If you want a web interface then you can use a POST form.\n&gt; \n&gt; See my reply to MB.  This is not modeling the\n&gt; application in terms of resources.  It is RPC.\n\nI don&#39;t know why you say it is RPC. The definition in my mind of RPC is\nthat the incoming message has a tag or identifier that instructs the\nserver what to do with it. But this &quot;endpoint&quot; resource would have one\nand only one task. It would expect the input to be appropriate for that\ntask.\n\n&gt; Returning a URL and then asking the client to\n&gt; watch the new URL seems like a lot of overhead and\n&gt; waste.\n\nNo, it is just a separation of concerns. Yes it takes more round-trips\nthan the SMTP system. It is also much more functional. The client can\ncheck for status whenever it wants. Other clients can be attached to the\n*same* computation because it is a first-class resource. Clients can\nshare information about what computations they are watching by sharing\nthe URI. Disconnected clients have the option of polling which they do\nnot with SMTP (unless there is a mailbox intermediary).\n\n&gt;...\n&gt; Good argument, but the polling is ugly.  A\n&gt; callback system is much nicer and much ligher on\n&gt; system resources!\n\nThe point is that the same system could support *both*. This would be\nmuch harder to do with SMTP. \n\n&gt; &gt; Conventions for asyncronous notification are here:\n&gt; &gt;\n&gt; &gt;  * http://www.prescod.net/HTTP_event_conventions.html\n&gt; \n&gt; Ok.  So that is another new protocol.  It is not\n&gt; real life HTTP.  \n\nIf I use XHTML or RSS am I using XML? It is real life HTTP up until the\npoint that where I start doing things against the HTTP model such as\ninventing private namespaces or telling the server what to do through\nmethod names or using POST for logical queries.\n\n&gt; ... It also seems no better than just\n&gt; sending a reply-to in the first place.\n\nIf you just send a reply-to then the client and server have no mutually\nvisible resource that represents the transaction. That means that the\nclient can&#39;t monitor it. The client can&#39;t cancel it. You could invent\nsome kind of UUID system but now you&#39;re inventing a private namespace.\n\n&gt; &gt; Anyhow, that&#39;s how I would model it. Notice how I try to think about the\n&gt; &gt; web interface at each step.\n&gt; \n&gt; I am doing the same thing.  The whole point of\n&gt; MIME-RPC is to model the web interface.  Which\n&gt; uses MIME rather than SOAP or XML-RPC.\n\nWhen I say &quot;web interface&quot; I mean HTML web application.\n\n Paul Prescod\n\n"}}
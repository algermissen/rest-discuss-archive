{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"WOebJ10YLz1DmlFXFuiGnQyUXMBAvH2VwbZ5e0jDDN4ZHSy-6cZgCcOH8M-1AWbi-fPkpd39yaEdeyrH5O4ZNugT-orjv7e7PT2zL1b16A","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Re: Thoughts about URLs for a REST driven website","postDate":"1268232081","msgId":15027,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMTAwMzEwMDc0MTIxLmUyMTYxMmI2LmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","inReplyToHeader":"PDREMzY5ODlENEEzNTQzMENCOTRCNzY1OTRDREE2OTg5QEpyblBDPg==","referencesHeader":"PDIwMTAwMzA4MDAxODU3LjE5OTVlNmYyLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPGhuMmIxNStycXJoQGVHcm91cHMuY29tPgk8MjAxMDAzMDgwNzEwMTYuZjljY2EwZjYuZXJpY0BiaXNvbnN5c3RlbXMubmV0Pgk8NEQzNjk4OUQ0QTM1NDMwQ0I5NEI3NjU5NENEQTY5ODlASnJuUEM+"},"prevInTopic":15019,"nextInTopic":15048,"prevInTime":15026,"nextInTime":15028,"topicId":14978,"numMessagesInTopic":41,"msgSnippet":"... Maybe we could call say Street REST vs. Roy s REST , one you pick up on the street, the other by studying a doctoral dissertation...  As with any","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 13563 invoked from network); 10 Mar 2010 14:41:41 -0000\r\nX-Received: from unknown (98.137.34.46)\n  by m11.grp.re1.yahoo.com with QMQP; 10 Mar 2010 14:41:41 -0000\r\nX-Received: from unknown (HELO mxout-08.mxes.net) (216.86.168.183)\n  by mta3.grp.sp2.yahoo.com with SMTP; 10 Mar 2010 14:41:41 -0000\r\nX-Received: from bigbison (unknown [65.117.211.162])\n\t(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))\n\t(No client certificate requested)\n\tby smtp.mxes.net (Postfix) with ESMTPSA id A2074509DA;\n\tWed, 10 Mar 2010 09:41:30 -0500 (EST)\r\nDate: Wed, 10 Mar 2010 07:41:21 -0700\r\nTo: =?ISO-8859-1?Q?J=F8rn?= Wildt &lt;jw@...&gt;\r\nCc: &lt;rest-discuss@yahoogroups.com&gt;\r\nMessage-Id: &lt;20100310074121.e21612b6.eric@...&gt;\r\nIn-Reply-To: &lt;4D36989D4A35430CB94B76594CDA6989@JrnPC&gt;\r\nReferences: &lt;20100308001857.1995e6f2.eric@...&gt;\n\t&lt;hn2b15+rqrh@...&gt;\n\t&lt;20100308071016.f9cca0f6.eric@...&gt;\n\t&lt;4D36989D4A35430CB94B76594CDA6989@JrnPC&gt;\r\nOrganization: Bison Systems Corporation\r\nX-Mailer: Sylpheed 3.0.0 (GTK+ 2.10.14; i686-pc-mingw32)\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nSubject: Re: [rest-discuss] Re: Thoughts about URLs for a REST driven\n website\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\nJ=F8rn Wildt wrote:\n&gt;\n&gt; &gt; Whenever I come across the notion of &quot;Roy&#39;s REST&quot;=\r\n I can&#39;t help but\n&gt; &gt; wonder, what other REST is there?\n&gt; \n&gt; :^)\n&gt; \n\nMaybe =\r\nwe could call say &quot;Street REST&quot; vs. &quot;Roy&#39;s REST&quot;, one you pick up\non the st=\r\nreet, the other by studying a doctoral dissertation...  As with\nany languag=\r\ne, street-speak is easier, but also less precise.\n\n&gt; \n&gt; Yes, you won&#39;t have=\r\n to reconfigure the browser client. But this may\n&gt; be one of the places whe=\r\nre we disagree on what the &quot;client&quot; is. \n&gt;\n\nOh, I&#39;m sure we both know what =\r\na client is, in the general sense.  The\nproblem is that REST requires more =\r\nprecision.  &quot;Client&quot; in REST, can\nmean a client component or a client conne=\r\nctor.  We say user-agent when\nwe mean client component.  We _forget_ to say=\r\n &quot;origin server&quot; to\ndistinguish between server components and server connec=\r\ntors.  We _ought_\nto always qualify the terms &quot;client&quot; and &quot;server&quot; when di=\r\nscussing REST.\n\nYou&#39;re treating all clients as being of the same &quot;class&quot;.  =\r\nREST allows\nthat user-agents and gateways may both have client connectors, =\r\nbut only\nthe user-agent is a client component.  In my system, charger&#39;s /da=\r\nte\nservice implementation is a gateway (intermediary) component.  (Have I\nb=\r\neen calling it a proxy?  Sorry folks, my bad.)\n\nDifferent rules apply to th=\r\ne coding of user-agents and gateways.  From\nthe perspective of a protocol a=\r\nnalyzer, however, requests to wiski.org\ncoming from the client connector on=\r\n charger&#39;s gateway, or the client\nconnector of a user-agent manipulating a =\r\nform, are indistinguishable.\n\nA user-agent consuming the /date service, fro=\r\nm either wiski.org or\ncharger, must be hypertext-driven.  The same constrai=\r\nnt does not apply\nto the gateway, where the rule is that implementation spe=\r\ncifics are\nhidden behind the generic interface (as implemented by the gatew=\r\nay&#39;s\nclient connector).\n\nSo the /date service on charger is an intermediary=\r\n component known as a\ngateway.  As currently configured, it has a client co=\r\nnnector and a\nserver connector.  It can be expanded, through layering, such=\r\n that\neither the client connector or the server connector (or both), is beh=\r\nind\na cache connector.\n\nMy architectural philosophy will lead to a cache co=\r\nnnector on the\nserver connector only, for both charger and wiski.org output=\r\n.  This is\nGreek to most folks.  When you fully understand REST, you&#39;ll be =\r\nable to\ntick off the pros and cons, by hear, of using a cache connector on =\r\nthe\nserver component vs. a reverse-proxy.\n\nThe only way to understand these=\r\n things, is to become fluent in the\ncomponent-connector lingo of networked-=\r\nsoftware architecture -- this\nprecision is required in order to advance bey=\r\nond StreetREST into\nRoyREST.\n\n&gt;\n&gt; In my\n&gt; head I have a picture of a comple=\r\ntely open back-end API. Open to the\n&gt; whole world that is. Anyone that can =\r\naccess the website can also\n&gt; access the REST API directly instead. I want =\r\neverybody to be able to\n&gt; write different and/or better front-ends than I d=\r\no. This means I\n&gt; don&#39;t have control over who consumes my back-end. In my s=\r\ncenario I\n&gt; have one REST API and a multitude of clients that uses it. One =\r\nof\n&gt; these happens to be my own website.\n&gt; \n\nExactly!  I couldn&#39;t have put =\r\nit better myself.  I want the wiski.org \n/date translation service to be ut=\r\nilized far and wide.  While I haven&#39;t\nprovided a leap-year function, it&#39;s p=\r\nossible for anyone to code such a\nfunction for their own app against the /d=\r\nate API.  If the cross-domain\nlanguage handling is a problem, like it is fo=\r\nr my app, I&#39;ve shown how\nmy front-end deals with the problem -- but that&#39;s =\r\njust one possible\nconsumer of the service, and the pending Xforms service d=\r\nocument is\njust one other possible consumer of the service (when dereferenc=\r\ned by a\ncompatible user agent).\n\nWithout relying on 4xx response codes, a l=\r\neap-year function can\ndereference Feb 28th for a given year, and compare it=\r\ns rel=3D&#39;next&#39; value\nto the integer &#39;29&#39;.  Other services I haven&#39;t conside=\r\nred in my service\ninterface, or on my frontend, are possible -- because cod=\r\ners can infer\nthem from hypertext, not because their code is consuming a UR=\r\nI template\nor a form.\n\nA leap-year function is an ad-hoc REST client of the=\r\n /date REST service.\nThis serendipitous re-use is made possible because a R=\r\nEST API is self-\ndocumenting (otherwise coders couldn&#39;t infer anything from=\r\n hypertext).\nIt would be a shame if serendipitous re-use were frowned on by=\r\n REST,\nfor failing to be hypertext driven -- this would limit the usefulnes=\r\ns\nof any service to only the functionality its creator envisioned.\n\n&gt; \n&gt; &gt; =\r\nThe answer, even where REST constraints are involved, must make\n&gt; &gt; pragmat=\r\nic sense to me -- the answer never comes down to REST dogma,\n&gt; &gt; only quant=\r\nifiable benefits to the system.  I see none, in fact I see\n&gt; &gt; greater main=\r\ntenance costs, so I&#39;ll let the hard-coding stand.\n&gt; \n&gt; Unfortunately, as a =\r\nREST novice, I do not have experience enough with\n&gt; REST to really tell whe=\r\nn it makes sense to use it or not. Well, maybe\n&gt; I do, but as newbies we of=\r\nten have to stick to the dogma since that\n&gt; is all we have. We don&#39;t have t=\r\nhe experience and understanding that\n&gt; tells us that a specific part of RES=\r\nT can be left out or must be\n&gt; respected.\n&gt; \n&gt; So it often comes down to do=\r\ngma due to uncertainty of what will\n&gt; happen if we don&#39;t do everything stri=\r\ncly by the book.\n&gt; \n\nStick to the thesis.  Chapter 5 is explicit about what=\r\n the tradeoffs\nare for each REST constraint; earlier chapters explain in mo=\r\nre detail\nwhat benefits result from which architectural styles.  Scale isn&#39;=\r\nt\nsomething everyone needs from the get-go.  You can make a decision about\n=\r\nwhether to use cookies for auth, based on your projected need for scale\nove=\r\nr time -- if you expect your system to grow huge, then you probably\nwon&#39;t w=\r\nant to rip out cookies later to facilitate growth.\n\nWhereas if scale is nev=\r\ner going to be a problem, then breaking a\nconstraint which facilitates scal=\r\ning isn&#39;t a big deal.  You can read\nthrough Roy&#39;s thesis and cherry-pick th=\r\nose benefits you need, and what\ntradeoffs you&#39;re willing to make.  The appr=\r\nopriate constraints are then\nadded to the &quot;null style,&quot; following the metho=\r\nd laid out in the thesis.\n\nThe resulting architecture, having been devised =\r\nthrough informed\ndecisions about benefits and drawbacks, would be firmly gr=\r\nounded in\nnetworked-software theory.  As I&#39;ve said before, REST is a tool, =\r\nbut to\nmake use of it requires the disciplined approach of modeling the\nobj=\r\nectives of a system first, to have a blueprint for evaluating the\nevolving =\r\nimplementation.\n\nThis process, informed by REST, may not always result in R=\r\nEST.  However,\nif the result is an appropriate architecture for the system,=\r\n any\ncriticism of it as unRESTful is purely dogmatic.  If, over time, the\ns=\r\nystem&#39;s evolution comes to require REST, the developers will already\nbe fam=\r\niliar with the discipline of REST development, and the notion of\nadding con=\r\nstraints to achieve known benefits vs. known drawbacks.\n\n-Eric\n\nA response =\r\nto the rest of your post is coming.\n\n"}}
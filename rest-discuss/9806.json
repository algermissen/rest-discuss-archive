{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":145532415,"authorName":"Stefan Tilkov","from":"Stefan Tilkov &lt;stefan.tilkov@...&gt;","profile":"stilkov","replyTo":"SENDER","senderId":"Go3L_8nVRD6D73Dh4istVYVx4BuaDxF7AFH-t2ALMKKp7UOf24TmIyikmLCt0hdqNwFVIlonnQcnWjjSoJlwlSBgrq9__WOMtfAtGOTc","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Questions regarding REST","postDate":"1194852404","msgId":9806,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PERCQUQzM0E1LTUwNUMtNEM1NS05M0YyLTY3NEVBQTI4Qjk2Q0Bpbm5vcS5jb20+","inReplyToHeader":"PGY1ZjVlMDczMDcxMTA5MTUyN3IxMTcyZDExOXg3MmRmNmY3N2IxOWJmYzZhQG1haWwuZ21haWwuY29tPg==","referencesHeader":"PGY1ZjVlMDczMDcxMTA5MTUyN3IxMTcyZDExOXg3MmRmNmY3N2IxOWJmYzZhQG1haWwuZ21haWwuY29tPg=="},"prevInTopic":9805,"nextInTopic":9807,"prevInTime":9805,"nextInTime":9807,"topicId":9804,"numMessagesInTopic":13,"msgSnippet":"... That is an exceptionally weird design that I ve never seen suggested yet. ... I would claim it s not. ... In theory, there is no limit, in practice, there","rawEmail":"Return-Path: &lt;stefan.tilkov@...&gt;\r\nX-Sender: stefan.tilkov@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 32722 invoked from network); 12 Nov 2007 07:26:54 -0000\r\nX-Received: from unknown (66.218.67.94)\n  by m47.grp.scd.yahoo.com with QMQP; 12 Nov 2007 07:26:54 -0000\r\nX-Received: from unknown (HELO notes.innoq.org) (217.160.213.102)\n  by mta15.grp.scd.yahoo.com with SMTP; 12 Nov 2007 07:26:54 -0000\r\nX-Received: from [10.0.1.4] ([89.245.17.120])\n          by notes.innoq.org (Lotus Domino Release 7.0)\n          with ESMTP id 2007111208264421-2036 ;\n          Mon, 12 Nov 2007 08:26:44 +0100 \r\nMessage-Id: &lt;DBAD33A5-505C-4C55-93F2-674EAA28B96C@...&gt;\r\nTo: REST Discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nIn-Reply-To: &lt;f5f5e0730711091527r1172d119x72df6f77b19bfc6a@...&gt;\r\nMime-Version: 1.0 (Apple Message framework v912)\r\nDate: Mon, 12 Nov 2007 08:26:44 +0100\r\nReferences: &lt;f5f5e0730711091527r1172d119x72df6f77b19bfc6a@...&gt;\r\nX-Mailer: Apple Mail (2.912)\r\nX-MIMETrack: Itemize by SMTP Server on notes/innoQ(Release 7.0|August 18, 2005) at 11/12/2007\n 08:26:44,\n\tSerialize by Router on notes/innoQ(Release 7.0|August 18, 2005) at 11/12/2007\n 08:26:53,\n\tSerialize complete at 11/12/2007 08:26:53\r\nContent-Transfer-Encoding: 7bit\r\nContent-Type: text/plain; charset=US-ASCII; format=flowed; delsp=yes\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Stefan Tilkov &lt;stefan.tilkov@...&gt;\r\nSubject: Re: [rest-discuss] Questions regarding REST\r\nX-Yahoo-Group-Post: member; u=145532415; y=YGMVOYUcBcz-TpiQzRPiasVjDHuw12oC7e09un-zTRS1aA\r\nX-Yahoo-Profile: stilkov\r\n\r\nOn Nov 10, 2007, at 12:27 AM, Rajith Attapattu wrote:\n\n&gt;\n&gt; Hi All,\n&gt;\n&gt; After closely following all the disucssion around REST I have a few  \n&gt; questions on would like to clear my doubts.\n&gt;\n&gt; 1) One of the questions I have seen floating around is &quot;how can I do  \n&gt; a shopping cart application in a RESTFul way&quot;.\n&gt; Most people realize that you shouldn&#39;t use sessions bcos it violates  \n&gt; the Stateless constraint.\n&gt;\n&gt; Now what some folks suggest is that when you do a PUT http://abc.com/customer/1235/basket/\n&gt; (where the body contains a document that describes the items and  \n&gt; quantities to add), you service that request and then you return a  \n&gt; URL with the state encoded.\n\n\nThat is an exceptionally weird design that I&#39;ve never seen suggested  \nyet.\n\n\n&gt;\n&gt; I have the following questions on that.\n&gt; a) Now is this RESTful?\n\n\nI would claim it&#39;s not.\n\n\n&gt;\n&gt; b) Also there so much information that can be encoded since a URL  \n&gt; has a maximum length\n\n\nIn theory, there is no limit, in practice, there may be one. But I  \nthink you rarely end up with URLs that are too long if you do a  \nRESTful design.\n\n\n&gt;\n&gt; c) Anybody intercepting this URL may be able to decode information  \n&gt; (if SSL is not used)\n&gt;\n&gt; 2) Most people do RPC over HTTP\n\nHm, I think I disagree, but even if it were true - so what?\n\n&gt; (Ex. some of the examples given in JSR 311 looks more RPC and not  \n&gt; RESTful)\n\n\nCould you be more specific? Which examples?\n\n\n&gt;\n&gt; What constraints in general does RPC/HTTP violate?\n\nNearly all of them, but it of course depends on the particular RPC- \nstyle HTTP usage we&#39;re talking about. Often URLs are not used to  \nidentify resources, communication is stateful, the interface is not  \nuniform, hypermedia is not used, and the meaning of the verbs is  \nviolated.\n\n\n&gt;\n&gt; Most RPC operations are stateful, so u can think they violate the  \n&gt; stateless constraint.\n\n\nI think you&#39;re mixing communication state and resource (backend)  \nstate ...\n\n&gt; What else?\n&gt; Consider the following examples\n&gt;\n&gt; doAddition(int x, int y) -  POST http://abc.com/doAdittion/  (body  \n&gt; contains x & y)\n&gt; this simply does an addition, but it is stateless. However intuition  \n&gt; tells me it&#39;s not RESTful.\n&gt; Why is that?? What have I misunderstood here?\n\nIt seems perfectly RESTful to me - there doesn&#39;t seem to be any  \nreasonable resource state. The URL smells of RPC, but it&#39;s just a  \nstring from a REST perspective. I&#39;d feel a little better if it were / \naddition instead of /doAddition. In fact, I&#39;d even consider using GET  \nas the operation is both safe and idempotent.\n\n&gt;\n&gt;\n&gt; Here is another example that I don&#39;t understand.\n&gt; increaseLuminosity(x) POST http://abc.com/increaseLuminosity (body  \n&gt; contains x)\n&gt; {\n&gt;     I get the bulbs&#39; state from a data base.\n&gt;     I increase it.\n&gt;     I persist the new state.\n&gt; }\n&gt; Now my service is stateless, however the database contains the state.\n\nWhich is OK - the constraint says to avoid communication state, not  \nresource state.\n\n\n&gt;\n&gt; Again I don&#39;t understand exactly what constraints are violated but  \n&gt; intuition tells me it&#39;s not RESTful\n&gt;\n&gt; 3) Reliability with RESTful interactions.\n&gt; Forgetting the security concerns for the time being consider the  \n&gt; following example.\n&gt;\n&gt; I am trying to create a service account for a customer.\n&gt; PUT http://abc.com/customer/{id}/savings\n&gt;\n&gt; Now the server process the request, but goes down before it can send  \n&gt; the response. Since PUT is idempotent, the client will retry again  \n&gt; until it gets a response.\n&gt; However when the server comes back up, there is no reconciliation  \n&gt; process like you would get with WS-RM. So the client will always  \n&gt; retry until it is successful.\n&gt;\n&gt; But if you do the following, where u want to add some money to your  \n&gt; account.\n&gt; POST http://abc.com/customer/{id}/savings/ - the body contains the  \n&gt; amount.\n&gt;\n&gt; Now if the server crashes after processing but before sending the  \n&gt; response, or if the client crashes before getting the response, the  \n&gt; client will retry again.\n&gt; Now POST is not idempotent and each retry will keep on adding money.\n&gt;\n&gt; Is this a category of applications that REST is not suitable for? or  \n&gt; else what is the correct form to use when building such application  \n&gt; in a RESTful way.\n\n\nYou either switch to PUT or make POST idempotent. See Joe Gregorio&#39;s  \nRESTifying DayTrader example:\nhttp://bitworking.org/news/201/RESTify-DayTrader\n\n\n&gt;\n&gt;\n&gt; 4) Security with RESTful interactions.\n&gt; a) The above example naturally raise questions about security.\n\n\nDoes it?\n\n\n&gt;\n&gt; b) SSL is only point-to-point, so if you have to go through multiple  \n&gt; intermediaries, how would you ensure privacy, non repudiation ..etc ?\n\n\nYou can of course use XML Encryption and Digital Signature with  \nRESTful HTTP, but that applies only if you&#39;re using XML. If SSL  \ndoesn&#39;t suit your needs, you may have a problem.\n\nStefan\n--\nStefan Tilkov, http://www.innoq.com/blog/st/\n\n"}}
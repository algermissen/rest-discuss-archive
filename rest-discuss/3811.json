{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":4849001,"authorName":"S. Alexander Jacobson","from":"&quot;S. Alexander Jacobson&quot; &lt;alex@...&gt;","profile":"shop2it","replyTo":"SENDER","senderId":"OljLeLU1NQcRz8roQeJSYWbF-VP27KFkkkzj2ScA5ERTBmEDxyrL2j1VV1e_Dux24W9GEnKb8y6UDG2gG7gwcd-SAAdIzSQaX4F2Xw","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] MoST - Model State Transfer","postDate":"1059597554","msgId":3811,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PFBpbmUuV05ULjQuNTMuMDMwNzMwMTYwMjMwMC4zODAwQHBoaWxvPg==","inReplyToHeader":"PHVlbDA3aXlheS5mc2ZAeHNvbC5jb20+","referencesHeader":"PDBFQUE1MDY3ODdEMTJCNEI5OUQzQ0EwODYyMzBBMkI0REE5RkEyQG1haWwtMDEuc3Bva2Vzb2Z0d2FyZS5jbyBtPiA8MTczNTkxODMzOC4xMDU5NTA2MDA1QGxvY2FsaG9zdD4gPHV2ZnRrajAwcS5mc2ZAeHNvbC5jb20+IDwxNzkyNTY1NTIyLjEwNTk1NjI2NTJAbG9jYWxob3N0PiA8dWVsMDdpeWF5LmZzZkB4c29sLmNvbT4="},"prevInTopic":3810,"nextInTopic":3813,"prevInTime":3810,"nextInTime":3812,"topicId":3793,"numMessagesInTopic":23,"msgSnippet":"... We had a discussion earlier about standardizing these things. My conclusion is that the best way to standardize these things is to associate each URI with","rawEmail":"Return-Path: &lt;alex@...&gt;\r\nX-Sender: alex@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 5079 invoked from network); 30 Jul 2003 20:38:55 -0000\r\nReceived: from unknown (66.218.66.217)\n  by m9.grp.scd.yahoo.com with QMQP; 30 Jul 2003 20:38:55 -0000\r\nReceived: from unknown (HELO mailgate.vo.com) (208.45.6.97)\n  by mta2.grp.scd.yahoo.com with SMTP; 30 Jul 2003 20:38:57 -0000\r\nReceived: from philo.cust.hotspot.t-mobile.com (m6a8d36d0.tmodns.net [208.54.141.106])\n\t(using TLSv1 with cipher RC4-MD5 (128/128 bits))\n\t(No client certificate requested)\n\tby mailgate.vo.com (Postfix) with ESMTP\n\tid 139ED88C21; Wed, 30 Jul 2003 16:38:56 -0400 (EDT)\r\nDate: Wed, 30 Jul 2003 16:39:14 -0400 (Eastern Standard Time)\r\nTo: Berend de Boer &lt;berend@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nSubject: Re: [rest-discuss] MoST - Model State Transfer\r\nIn-Reply-To: &lt;uel07iyay.fsf@...&gt;\r\nMessage-ID: &lt;Pine.WNT.4.53.0307301602300.3800@philo&gt;\r\nReferences: &lt;0EAA506787D12B4B99D3CA086230A2B4DA9FA2@...\n m&gt; &lt;1735918338.1059506005@localhost&gt; &lt;uvftkj00q.fsf@...&gt;\n &lt;1792565522.1059562652@localhost&gt; &lt;uel07iyay.fsf@...&gt;\r\nX-X-Sender: alex@...\r\nMIME-Version: 1.0\r\nContent-Type: TEXT/PLAIN; charset=US-ASCII\r\nX-eGroups-From: &quot;S. Alexander Jacobson&quot; &lt;alex@...&gt;\r\nFrom: &quot;S. Alexander Jacobson&quot; &lt;alex@...&gt;\r\nX-Yahoo-Group-Post: member; u=4849001\r\nX-Yahoo-Profile: shop2it\r\n\r\nOn Thu, 31 Jul 2003, Berend de Boer wrote:\n&gt;     Alex&gt; Content-Negotiation Content-negotiation exacerbates the\n&gt;     Alex&gt; problem above.  It is particularly incompatible with\n&gt;     Alex&gt; PUT/POST because the server has no way to tell the client\n&gt;     Alex&gt; what types may be PUT/POST and REST provides no way to\n&gt;     Alex&gt; understand what was meant when a client does so.\n&gt;\n&gt;     &gt;&gt;  A GET with Content-Type rest/content-types can solve this\n&gt;     &gt;&gt; perhaps?\n&gt;\n&gt;     Alex&gt; I&#39;m not sure what you mean\n&gt;\n&gt; Retrieving the list of &quot;what types may be PUT/POST&quot;.\n\nWe had a discussion earlier about standardizing these things.\nMy conclusion is that the best way to standardize these things\nis to associate each URI with a single shared data model.\n\nBut the types don&#39;t matter.  If you look at the\nexample of GETting foo.gif and PUTting bar.gif and\neven if we know that the server accepts image/gif,\nReST still can&#39;t tell you what the result of the\nPUT will be!  That strikes me as ridiculous.\n\n&gt;     Alex&gt; In contrast, if a MoST client GETs a foo.gif, it knows that\n&gt;     Alex&gt; foo.gif is the shared data model for whatever it\n&gt;     Alex&gt; represents. If it PUTs bar.gif, the effect actually will be\n&gt;     Alex&gt; simply to replace foo.gif with a new model.\n&gt;\n&gt; Yep, but what about versioning? Some systems allow you to retrieve\n&gt; the system state at a particular point in time. Sometimes you want\n&gt; bar.gif only to take effect at a future point in time, etc. etc.\n&gt;\n&gt; Having all that into a meta model makes things quite\n&gt; complex. Inevitable you will make a meta-model that does not cover\n&gt; everything.\n\nIf the data-model represents versions, then you\nhave versions.  If it doesn&#39;t, you don&#39;t. The only\nway to accomplish this versioning is to have a\nshared versioned data model.\n\nMore generally, the server always has SOME model.\nAll I want to do is expose it.  If you want to\nbuild an app ABOUT the server, fine but that is\njust some other model.  When you build that app,\nyou should expose *that* model.\n\nAbsent a shared model, you have NO way to\nanticipate the result of ANY state change.\n\n&gt;     &gt;&gt; I&#39;m afraid that meta modeling doesn&#39;t solve any problem. The\n&gt;     &gt;&gt; next problem is usually the meta meta model of that. And the\n&gt;     &gt;&gt; meta meta meta model of that.\n&gt;\n&gt; And that&#39;s where this comes into play. The next person makes a\n&gt; slightly different metamodel that allows for updating put.gif\n&gt; retrospectively in time for example (if you view the system state at\n&gt; now - 10 days, you get bar.gif instead of foo.gif what you got when\n&gt; you actually had looked 10 days ago)\n\nAgain.  You have whatever model you have.  Absent\nthat model, you have no way to understand what\nhappens when you do a POST or PUT.  If you change\nthe model the server uses, that is fine.  You then\nneed to expose that.  If the model is a changelog\nrepresented in XML e.g.\n&lt;changelog&gt;\n&lt;change date=&quot;200307060000&quot; href=&quot;/foo.gif&quot;&gt;\n&lt;change date=&quot;200307100000&quot; href=&quot;/bar.gif&quot;&gt;\n&lt;/changelog&gt;\n\nYou can allow or disallow PUTs to /foo.gif\n/bar.gif or to the changelog itself.  All I&#39;m\nsaying is that you have to expose SOME model and\nthe same goes for a changelog of this changelog.\n\n&gt; And so forth. Now we have several competing meta models (just look at\n&gt; the web services coordination/work flow/transaction/whatever specs\n&gt; that are coming out at a rate of one a week).\n\nAt the end of the day, we are all just\nsynchronizing models of various referents.  I am\nsaying your life will be easier if you have\ngeneric semantics for doing this rather than\ncustom developing a mapping between a PUT\nrepresentation and an underlying data model for\neach URI!\n\n&gt;     Alex&gt; I&#39;m not sure what you are referencing here.  My point is\n&gt;     Alex&gt; simple that clients and servers should share data models and\n&gt;     Alex&gt; not simply transfer representations/views.\n&gt;\n&gt; But that data model, inevitably, will not be complete. Some clients\n&gt; want to know more. And we have the same issue you have know.\n\nWhen clients want to know more, you build more\nmodels.  Until then, you have the models you have.\n\n-Alex-\n\n\n___________________________________________________________________\nS. Alexander Jacobson                   i2x Media\n1-212-787-1914 voice                    1-603-288-1280 fax\n\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":415184399,"authorName":"Kev Burns","from":"Kev Burns &lt;kevburnsjr@...&gt;","profile":"kevburnsjr","replyTo":"SENDER","senderId":"azj1jnEe-92dWCstT91lmlwOLBhpZf26leCRPWJXyHaOHiGgxnCZNOsXhWioOJiAmKmkr1FXhF3HNydtxVi8FYcgri4qup0","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] REST and HATEOAS in the context of native applications?","postDate":"1311956491","msgId":17650,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PENBRzNBaXU2YzFQNEdPVnJ1PW9MaC1wcUwrN205LUdoT2lBcFgxZzV2MTdyTlpVYkItUUBtYWlsLmdtYWlsLmNvbT4=","inReplyToHeader":"PGowcGI3ZCtpYWRpQGVHcm91cHMuY29tPg==","referencesHeader":"PGowcGI3ZCtpYWRpQGVHcm91cHMuY29tPg=="},"prevInTopic":17649,"nextInTopic":17651,"prevInTime":17649,"nextInTime":17651,"topicId":17617,"numMessagesInTopic":40,"msgSnippet":"Daniel, Skipping back to the top of this thread, let me see if I can provide a few examples which might help shed some light. Here are 3 ways you might use","rawEmail":"Return-Path: &lt;kevburnsjr@...&gt;\r\nX-Sender: kevburnsjr@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 86608 invoked from network); 29 Jul 2011 16:21:51 -0000\r\nX-Received: from unknown (66.196.94.106)\n  by m16.grp.re1.yahoo.com with QMQP; 29 Jul 2011 16:21:51 -0000\r\nX-Received: from unknown (HELO mail-gw0-f50.google.com) (74.125.83.50)\n  by mta2.grp.re1.yahoo.com with SMTP; 29 Jul 2011 16:21:51 -0000\r\nX-Received: by gwj16 with SMTP id 16so2855410gwj.9\n        for &lt;rest-discuss@yahoogroups.com&gt;; Fri, 29 Jul 2011 09:21:51 -0700 (PDT)\r\nX-Received: by 10.146.75.33 with SMTP id x33mr1261949yaa.31.1311956511178; Fri,\n 29 Jul 2011 09:21:51 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.147.176.2 with HTTP; Fri, 29 Jul 2011 09:21:31 -0700 (PDT)\r\nIn-Reply-To: &lt;j0pb7d+iadi@...&gt;\r\nReferences: &lt;j0pb7d+iadi@...&gt;\r\nDate: Fri, 29 Jul 2011 09:21:31 -0700\r\nMessage-ID: &lt;CAG3Aiu6c1P4GOVru=oLh-pqL+7m9-GhOiApX1g5v17rNZUbB-Q@...&gt;\r\nTo: Daniel Roussel &lt;daniel@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nContent-Type: multipart/alternative; boundary=000e0cd39878cf3eac04a937ad8a\r\nFrom: Kev Burns &lt;kevburnsjr@...&gt;\r\nSubject: Re: [rest-discuss] REST and HATEOAS in the context of native applications?\r\nX-Yahoo-Group-Post: member; u=415184399; y=4Jtduq4Ufs06omEtXvP-jsdaXw0VBWDoPrjYjb259RCyCXL0YQ\r\nX-Yahoo-Profile: kevburnsjr\r\n\r\n\r\n--000e0cd39878cf3eac04a937ad8a\r\nContent-Type: text/plain; charset=windows-1252\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nDaniel,\n\nSkipping back to the top of this thread, let me see if I can provi=\r\nde a few\nexamples which might help shed some light.\n\nHere are 3 ways you mi=\r\nght use self-descriptive messages in your API\n\n1) Create many domain specif=\r\nic media types (one for each view)\n\nContent-Type: application/rent-a-room+x=\r\nml\n\n2) Create one domain specific media type\n\nContent-Type: application/vnd=\r\n.hotels.com+xml\n\n3) Create zero domain specific media types\n\nContent-Type: =\r\napplication/json\nLink: &lt;/schema/rent-a-room&gt;; rel=3D&quot;describedBy&quot;\n\nAll thre=\r\ne of these approaches could be seen as satisfying the\nself-descriptive mess=\r\nages constraint.\n\nIf you create many DSMs, your application might bind the =\r\nmedia type to the\nview class via some sort of client-side configuration.\n\n&quot;=\r\napplication/rent-a-room+xml&quot;   =3D&gt;   RentARoomView\n\nIf you create one DSM,=\r\n your media type might specify the semantics by which\na representation spec=\r\nifies details about itself which could be used in\nrendering the representat=\r\nion in a GUI.\n\n{&quot;_type&quot;: &quot;rent-a-room&quot;, ... }\n\n... which you might then bin=\r\nd to a view ...\n\n&quot;rent-a-room&quot;   =3D&gt;   RentARoomView\n\nIf you create zero D=\r\nSMs, your application might bind the value of the\ndescribedBy link header t=\r\no a view in the gui.\n\n&quot;/schema/rent-a-room&quot;   =3D&gt;   RentARoomView\n\n--\n\nAn =\r\nalternative approach would be to create one DSM with a richer semantics\nwhi=\r\nch would effectively allow you to compose the interface from the server\nsid=\r\ne using code-on-demand and/or more granular views\n\n&lt;link rel=3D&quot;stylesheet&quot;=\r\n src=3D&quot;/css/screen.css&quot; /&gt;\n{&quot;_links&quot;:[\n    {&quot;rel&quot;:&quot;view&quot;,&quot;type&quot;:&quot;text/java=\r\nscript&quot;,&quot;href&quot;:&quot;/views/RentARoomView.js&quot;}\n\n{&quot;rel&quot;:&quot;commentable&quot;,&quot;type&quot;:&quot;tex=\r\nt/javascript&quot;,&quot;href&quot;:&quot;/attributes/commentable.js&quot;}\n]}\n\nThis Code-on-demand =\r\napproach would take greatest advantage of the\nconstraints of REST to create=\r\n a highly evolvable service by never bind\nanything directly to a view class=\r\n within the application. Instead, your\napplication would become a user agen=\r\nt, parsing representations and fetching\nadditional computational resources =\r\nas necessary to render the view.\n\nCode-on-demand may be significantly less =\r\nfeasible if your client is written\nin object C, but perhaps it&#39;s something =\r\nto think about. The embedded links\nmight not be javascript or CSS, but perh=\r\naps some other language used for GUI\ncomposition, such as XUL or a simple D=\r\nSL.\n\nFinally I&#39;m sure it goes without saying that whatever way you wind up\n=\r\nrendering a representation for a view, the UI would contain links which you=\r\n\nwould click to navigate to new screens which are built using the data and\n=\r\nmetadata from the representation of the resource identified by the link.\n\nA=\r\nnd there you have a few takes on creating an engine of application state\nwi=\r\nth self-descriptive messages and code-on-demand.\n\n- Kev\nc: +001 (650) 521-7=\r\n791\n\n\nOn Wed, Jul 27, 2011 at 8:35 AM, Daniel Roussel &lt;daniel@...&gt;=\r\n wrote:\n\n&gt; **\n&gt;\n&gt;\n&gt; Hi,\n&gt;\n&gt; I&#39;ve been reading a lot about how to do &quot;proper=\r\n&quot; REST this week and the\n&gt; more I read, the more I&#39;m lost, especially the H=\r\nATEOAS part I fear.\n&gt;\n&gt; First, to give some context, the company I work for=\r\n develops mobile\n&gt; applications for clients. Most of the time, they want to=\r\n get an iPhone\n&gt; native application, an Android application and a tradition=\r\nal Web based\n&gt; Application to cover the other mobile phones out there.\n&gt;\n&gt; =\r\nThe way we are currently doing things is the good old (bad?) RPC over HTTP\n=\r\n&gt; way. We define a bunch of URI which are coded inside the different apps, =\r\nwe\n&gt; exchange data as JSON, etc. This week, trying to do things in a better=\r\n way,\n&gt; I&#39;ve begin a more serious study of REST and how to do it properly.\n=\r\n&gt;\n&gt; What I really can&#39;t wrap my head around is how, technically, have HATEO=\r\nAS\n&gt; in a native application? I mean, when building a native application, I=\r\n have\n&gt; tables to display lists, buttons to do some things, etc. My underst=\r\nanding is\n&gt; that all those should be displayed based on the data (hypermedi=\r\na) received\n&gt; from the server. Is that right?\n&gt;\n&gt; A concrete example would =\r\nbe a hotel room rental service. The person would\n&gt; open the application and=\r\n have fields to enter the from/to dates. It would\n&gt; then tap a &quot;Get Availab=\r\nle Rooms&quot;. The app would call the server and get back\n&gt; a list of rooms alo=\r\nng with prices and other details. From there the person\n&gt; could select one =\r\nroom and rent it.\n&gt;\n&gt; The RPC way of coding this is obvious to me but I hav=\r\ne no idea how I&#39;d do\n&gt; that in a proper REST way! What bugs me is that ever=\r\ny way I look at it, the\n&gt; client application would still be tightly coupled=\r\n to the service. I\n&gt; understand how I would only need to GET the http://ren=\r\nt-a-room.com URI\n&gt; hardcoded and then in the response I would have the\n&gt; ht=\r\ntp://rent-a-room.com/available-rooms URI given. But... My application\n&gt; wou=\r\nld expect each &quot;call&quot; to return some pre-defined data and &quot;rel&quot;, those\n&gt; ca=\r\nn&#39;t appear out of the blue?!\n&gt;\n&gt; I guess what I&#39;m trying to say is that bot=\r\nh the business process and the\n&gt; data exchanged must be known to my client =\r\napplication at the moment of\n&gt; coding it, and those can&#39;t change without br=\r\neaking existing clients. But\n&gt; reading about REST, every is talking about l=\r\noose coupling and not breaking\n&gt; clients... I just don&#39;t see it.\n&gt;\n&gt; What a=\r\nm I missing?\n&gt;\n&gt; Thanks a lot and sorry if it is a stupid question!\n&gt;\n&gt;  \n&gt;=\r\n\n\r\n--000e0cd39878cf3eac04a937ad8a\r\nContent-Type: text/html; charset=windows-1252\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nDaniel,&lt;br&gt;&lt;br&gt;Skipping back to the top of this thread, let me see if I can=\r\n provide a few examples which might help shed some light.&lt;br&gt;&lt;br&gt;Here are 3=\r\n ways you might use self-descriptive messages in your API&lt;br&gt;&lt;br&gt;1) Create =\r\nmany domain specific media types (one for each view)&lt;br&gt;\n\n&lt;br&gt;&lt;div style=3D=\r\n&quot;margin-left: 40px;&quot;&gt;Content-Type: application/rent-a-room+xml&lt;/div&gt;&lt;br&gt;2) =\r\nCreate one domain specific media type&lt;br&gt;&lt;br&gt;\n&lt;div style=3D&quot;margin-left: 40=\r\npx;&quot;&gt;Content-Type: application/&lt;a href=3D&quot;http://vnd.hotels.com&quot;&gt;vnd.hotels=\r\n.com&lt;/a&gt;+xml&lt;br&gt;&lt;/div&gt;\n&lt;br&gt;3) Create zero domain specific media types&lt;br&gt;&lt;b=\r\nr&gt;&lt;div style=3D&quot;margin-left: 40px;&quot;&gt;Content-Type: application/json&lt;br&gt;Link:=\r\n &lt;/schema/rent-a-room&gt;; rel=3D&quot;describedBy&quot;&lt;br&gt;&lt;/div&gt;&lt;br&gt;Al=\r\nl three of these approaches could be seen as satisfying the self-descriptiv=\r\ne messages constraint.&lt;br&gt;\n\n&lt;br&gt;If you create many DSMs, your application m=\r\night bind the media type to the view class via some sort of client-side con=\r\nfiguration.&lt;br&gt;&lt;br&gt;&lt;div style=3D&quot;margin-left: 40px;&quot;&gt;&quot;application/rent=\r\n-a-room+xml&quot; =A0 =3D&gt;=A0=A0 RentARoomView&lt;br&gt;\n\n&lt;/div&gt;&lt;br&gt;If you cre=\r\nate one DSM, your media type might specify the semantics by which a represe=\r\nntation specifies details about itself which could be used in rendering the=\r\n representation in a GUI.&lt;br&gt;&lt;div style=3D&quot;margin-left: 40px;&quot;&gt;\n\n&lt;br&gt;{&quot=\r\n;_type&quot;: &quot;rent-a-room&quot;, ... }&lt;br&gt;&lt;/div&gt;&lt;br&gt;... which you mig=\r\nht then bind to a view ...&lt;br&gt;&lt;br&gt;&lt;div style=3D&quot;margin-left: 40px;&quot;&gt;&quot;r=\r\nent-a-room&quot; =A0 =3D&gt;=A0=A0 RentARoomView&lt;br&gt;&lt;/div&gt;&lt;br&gt;If you create=\r\n zero DSMs, your application might bind the value of the describedBy link h=\r\neader to a view in the gui.&lt;br&gt;\n\n&lt;br&gt;&lt;div style=3D&quot;margin-left: 40px;&quot;&gt;&quo=\r\nt;/schema/rent-a-room&quot;=A0=A0 =3D&gt;=A0=A0 RentARoomView&lt;br&gt;&lt;/div&gt;&lt;br&gt;=\r\n--&lt;br&gt;&lt;br&gt;An alternative approach would be to create one DSM with a richer =\r\nsemantics which would effectively allow you to compose the interface from t=\r\nhe server side using code-on-demand and/or more granular views&lt;br&gt;\n\n&lt;br&gt;&lt;di=\r\nv style=3D&quot;margin-left: 40px;&quot;&gt;&lt;link rel=3D&quot;stylesheet&quot; src=3D=\r\n&quot;/css/screen.css&quot; /&gt;&lt;br&gt;{&quot;_links&quot;:[&lt;br&gt;=A0=A0=A0 {&q=\r\nuot;rel&quot;:&quot;view&quot;,&quot;type&quot;:&quot;text/javascript&quot;=\r\n,&quot;href&quot;:&quot;/views/RentARoomView.js&quot;}&lt;br&gt;\n\n\n=A0=A0=A0 {&qu=\r\not;rel&quot;:&quot;commentable&quot;,&quot;type&quot;:&quot;text/javascript=\r\n&quot;,&quot;href&quot;:&quot;/attributes/commentable.js&quot;}&lt;br&gt;]}&lt;br&gt;&lt;/=\r\ndiv&gt;&lt;br&gt;This Code-on-demand approach would take greatest advantage of the c=\r\nonstraints of REST to create a highly evolvable service by never bind anyth=\r\ning directly to a view class within the application. Instead, your applicat=\r\nion would become a user agent, parsing representations and fetching additio=\r\nnal computational resources as necessary to render the view.&lt;br&gt;\n\n&lt;br&gt;Code-=\r\non-demand may be significantly less feasible if your client is written in o=\r\nbject C, but perhaps it&#39;s something to think about. The embedded links =\r\nmight not be javascript or CSS, but perhaps some other language used for GU=\r\nI composition, such as XUL or a simple DSL. &lt;br&gt;\n\n&lt;br&gt;Finally I&#39;m sure =\r\nit goes without saying that whatever way you wind up rendering a representa=\r\ntion for a view, the UI would contain links which you would click to naviga=\r\nte to new screens which are built using the data and metadata from the repr=\r\nesentation of the resource identified by the link.&lt;br&gt;\n\n&lt;br&gt;And there you h=\r\nave a few takes on creating an engine of application state with self-descri=\r\nptive messages and code-on-demand.&lt;br&gt;&lt;br clear=3D&quot;all&quot;&gt;- Kev&lt;br&gt;c: +001 (6=\r\n50) 521-7791&lt;br&gt;\n&lt;br&gt;&lt;br&gt;&lt;div class=3D&quot;gmail_quote&quot;&gt;On Wed, Jul 27, 2011 at=\r\n 8:35 AM, Daniel Roussel &lt;span dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:daniel@dro=\r\nussel.org&quot;&gt;daniel@...&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote class=\r\n=3D&quot;gmail_quote&quot; style=3D&quot;margin:0 0 0 .8ex;border-left:1px #ccc solid;padd=\r\ning-left:1ex;&quot;&gt;\n\n\n\n\n&lt;u&gt;&lt;/u&gt;\n\n\n\n\n\n\n\n\n\n\n&lt;div style=3D&quot;background-color:#fff&quot;&gt;=\r\n\n&lt;span&gt;=A0&lt;/span&gt;\n\n\n&lt;div&gt;\n  &lt;div&gt;\n\n\n    &lt;div&gt;\n      \n      \n      &lt;p&gt;Hi,&lt;br=\r\n&gt;\n&lt;br&gt;\nI&#39;ve been reading a lot about how to do &quot;proper&quot; REST =\r\nthis week and the more I read, the more I&#39;m lost, especially the HATEOA=\r\nS part I fear.&lt;br&gt;\n&lt;br&gt;\nFirst, to give some context, the company I work for=\r\n develops mobile applications for clients.  Most of the time, they want to =\r\nget an iPhone native application, an Android application and a traditional =\r\nWeb based Application to cover the other mobile phones out there.&lt;br&gt;\n\n\n&lt;br=\r\n&gt;\nThe way we are currently doing things is the good old (bad?) RPC over HTT=\r\nP way.  We define a bunch of URI which are coded inside the different apps,=\r\n we exchange data as JSON, etc.  This week, trying to do things in a better=\r\n way, I&#39;ve begin a more serious study of REST and how to do it properly=\r\n.&lt;br&gt;\n\n\n&lt;br&gt;\nWhat I really can&#39;t wrap my head around is how, technicall=\r\ny, have HATEOAS in a native application?  I mean, when building a native ap=\r\nplication, I have tables to display lists, buttons to do some things, etc. =\r\n My understanding is that all those should be displayed based on the data (=\r\nhypermedia) received from the server.  Is that right?&lt;br&gt;\n\n\n&lt;br&gt;\nA concrete=\r\n example would be a hotel room rental service.  The person would open the a=\r\npplication and have fields to enter the from/to dates.  It would then tap a=\r\n &quot;Get Available Rooms&quot;.  The app would call the server and get ba=\r\nck a list of rooms along with prices and other details.  From there the per=\r\nson could select one room and rent it.  &lt;br&gt;\n\n\n&lt;br&gt;\nThe RPC way of coding t=\r\nhis is obvious to me but I have no idea how I&#39;d do that in a proper RES=\r\nT way!  What bugs me is that every way I look at it, the client application=\r\n would still be tightly coupled to the service.  I understand how I would o=\r\nnly need to GET the &lt;a href=3D&quot;http://rent-a-room.com&quot; target=3D&quot;_blank&quot;&gt;ht=\r\ntp://rent-a-room.com&lt;/a&gt; URI hardcoded and then in the response I would hav=\r\ne the &lt;a href=3D&quot;http://rent-a-room.com/available-rooms&quot; target=3D&quot;_blank&quot;&gt;=\r\nhttp://rent-a-room.com/available-rooms&lt;/a&gt; URI given. But...  My applicatio=\r\nn would expect each &quot;call&quot; to return some pre-defined data and &q=\r\nuot;rel&quot;, those can&#39;t appear out of the blue?!  &lt;br&gt;\n\n\n&lt;br&gt;\nI gues=\r\ns what I&#39;m trying to say is that both the business process and the data=\r\n exchanged must be known to my client application at the moment of coding i=\r\nt, and those can&#39;t change without breaking existing clients.  But readi=\r\nng about REST, every is talking about loose coupling and not breaking clien=\r\nts... I just don&#39;t see it.&lt;br&gt;\n\n\n&lt;br&gt;\nWhat am I missing?&lt;br&gt;\n&lt;br&gt;\nThank=\r\ns a lot and sorry if it is a stupid question!&lt;br&gt;\n&lt;br&gt;\n&lt;/p&gt;\n\n    &lt;/div&gt;\n   =\r\n  \n\n    \n    &lt;div style=3D&quot;color:#fff;min-height:0&quot;&gt;&lt;/div&gt;\n\n\n&lt;/div&gt;\n\n\n\n  \n\n=\r\n\n\n\n\n\n&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;\n\r\n--000e0cd39878cf3eac04a937ad8a--\r\n\n"}}
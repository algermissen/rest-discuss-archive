{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":465410965,"authorName":"Nathan","from":"Nathan &lt;nathan@...&gt;","profile":"nathanrixham","replyTo":"SENDER","senderId":"TcgudcwzmJgJjQwmkL9yQkhGDh0lk7FLIqMbCU3uBfytRz6NFszroicCL-6y8klasbuOx0GsBrKV9whJDG6Bfw","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Loose coupling - a RESTful myth?","postDate":"1296928188","msgId":17323,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDRENEQ4REJDLjcwMTAwMDBAd2VicjMub3JnPg==","inReplyToHeader":"PGlpanRtcytwMzRhQGVHcm91cHMuY29tPg==","referencesHeader":"PGlpanRtcytwMzRhQGVHcm91cHMuY29tPg=="},"prevInTopic":17322,"nextInTopic":17324,"prevInTime":17322,"nextInTime":17324,"topicId":17322,"numMessagesInTopic":13,"msgSnippet":"... Yes create new relation types ... OAuth is not stateless and not RESTful, you separate the concerns by layering on auth and security, for example by using","rawEmail":"Return-Path: &lt;nathan@...&gt;\r\nX-Sender: nathan@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 74070 invoked from network); 5 Feb 2011 17:50:34 -0000\r\nX-Received: from unknown (66.196.94.106)\n  by m12.grp.re1.yahoo.com with QMQP; 5 Feb 2011 17:50:34 -0000\r\nX-Received: from unknown (HELO smtpauth23.prod.mesa1.secureserver.net) (64.202.165.47)\n  by mta2.grp.re1.yahoo.com with SMTP; 5 Feb 2011 17:50:34 -0000\r\nX-Received: (qmail 13159 invoked from network); 5 Feb 2011 17:50:34 -0000\r\nX-Received: from unknown (86.133.148.188)\n  by smtpauth23.prod.mesa1.secureserver.net (64.202.165.47) with ESMTP; 05 Feb 2011 17:50:33 -0000\r\nMessage-ID: &lt;4D4D8DBC.7010000@...&gt;\r\nDate: Sat, 05 Feb 2011 17:49:48 +0000\r\nOrganization: webr3\r\nUser-Agent: Thunderbird 2.0.0.24 (Windows/20100228)\r\nMIME-Version: 1.0\r\nTo: Jakob Strauch &lt;jakob.strauch@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nReferences: &lt;iijtms+p34a@...&gt;\r\nIn-Reply-To: &lt;iijtms+p34a@...&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 8bit\r\nFrom: Nathan &lt;nathan@...&gt;\r\nReply-To: nathan@...\r\nSubject: Re: [rest-discuss] Loose coupling - a RESTful myth?\r\nX-Yahoo-Group-Post: member; u=465410965; y=T9fOa75KhfS60wgAUu7dGIKk7XiuFOlmUm0p3gQgBDcY3ccKpBDy\r\nX-Yahoo-Profile: nathanrixham\r\n\r\nJakob Strauch wrote:\n&gt; It is often stated, that RESTful services decouples client and server, as e.g. stated here [1]:\n&gt; \n&gt; &quot;Coupling between client and server is removed, server owners need not know about client particularities to evolve the servers without breaking clients.&quot;\n&gt; \n&gt; But i think, the most server changes will break even the RESTfuls� clients. At least in business scenarios:\n&gt; \n&gt; 1. Think about changing your application protocol due to business changes. Can a client be generic enough to compensate this? The link rel semantics of &quot;next&quot; are very clear. But what if i need a relation type, which is not yet described? Which is too domain specific.\n\nYes\ncreate new relation types\n\n&gt; 2. What about the cross-cutting concerns like security? If i switch from HTTP Basic auth to OAuth, can a generic client adapt to this situation automatically? \n\nOAuth is not stateless and not RESTful, you separate the concerns by \nlayering on auth and security, for example by using HTTP+TLS and doing \nauth at the TLS layer / before hitting the transfer protocol. Or, you \nsend the auth credentials with every request (such as with HTTP *** Auth)\n\n&gt; 3. What if i have to evolve a media type, which i�m using, and i need a new one? (for example by adding new link relations or data fields)\n\nMake it generic enough to be evolved, you can do this by using relations \nheavily, or by using a well defined media type like HTML.\n\n&gt; In my opinion, i don�t see a business value in supporting 100% REST style. It might work with &quot;simple&quot; application protocols like ATOM (which is very nice, but also very generic).\n&gt; \n&gt; Maybe someone can enlighten me...\n\nI think the key problem here is..\n\n&#39;&#39;\nLike most architectural choices, the stateless constraint reflects a \ndesign trade-off. The disadvantage is that it may decrease network \nperformance by increasing the repetitive data (per-interaction overhead) \nsent in a series of requests, since that data cannot be left on the \nserver in a shared context. In addition, placing the application state \non the client-side reduces the server&#39;s control over consistent \napplication behavior, since the application becomes dependent on the \ncorrect implementation of semantics across multiple client versions.\n&#39;&#39;\n\n&#39;&#39;\nAll REST interactions are stateless. That is, each request contains all \nof the information necessary for a connector to understand the request, \nindependent of any requests that may have preceded it. This restriction \naccomplishes four functions: 1) it removes any need for the connectors \nto retain application state between requests, thus reducing consumption \nof physical resources and improving scalability; 2) it allows \ninteractions to be processed in parallel without requiring that the \nprocessing mechanism understand the interaction semantics; 3) it allows \nan intermediary to view and understand a request in isolation, which may \nbe necessary when services are dynamically rearranged; and, 4) it forces \nall of the information that might factor into the reusability of a \ncached response to be present in each request.\n&#39;&#39;\n\n&#39;&#39;\nThe application state is controlled and stored by the user agent and can \nbe composed of representations from multiple servers.\n&#39;&#39;\n\nYou&#39;ve got your application state on the server, not the client. Thus, \nnot RESTful, and concerns are not separated, you&#39;re essentially trying \nto drive server side applications by using hypermedia as the engine of \napplication state, without noting that the application state should be \non the client side. It&#39;s the difference between adding products to a \nclentside basket, and adding them to a server side basket, one is \nRESTful, the other is not.\n\nBest,\n\nNathan\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"CcuICMTKLlATkDpgAz8IYNf0CFKQi7FlbE-s6akkr3wKRWfBMWiSBh5TcfFDQUbTDTGv7hurKQ7BXro6Rqp1zIoEOfvyCHy9Upf-upQraA","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Determining which Media type for post/put","postDate":"1275436601","msgId":15509,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMTAwNjAxMTc1NjQxLmY2YWNhYTI4LmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","inReplyToHeader":"PEFBTkxrVGlsSFN0QzVjaVNDeTB4OWRRZkVCbHR5blZXeWRHS25WZW42WmJtSkBtYWlsLmdtYWlsLmNvbT4=","referencesHeader":"PEFBTkxrVGlsazJZWnJnY2U5M3dYcDlFSjRHZnBpckxlUVZ2bUowSnhjeFBZSEBtYWlsLmdtYWlsLmNvbT4JPEFBTkxrVGltTzROM0ZTeDg5bjR2Sm43RkpsMzJYaC1ERnNZUl93dG5Pd3VYdUBtYWlsLmdtYWlsLmNvbT4JPDNEREQwQkU2NTU4NjlENEVBNTA2NjUyQjM4MDNBRUY2MTU2RDlFNkNAUFJJU00uY2FmZmVpbmUtaXQubmV0Pgk8QUFOTGtUaW5Hc3JWaUdXSUJTWElmd3YxeTY1dDRNbTEyRW1PcXNnNTlONmUyQG1haWwuZ21haWwuY29tPgk8MjAxMDA2MDExMDUxNTEuZTYzZjgyMmEuZXJpY0BiaXNvbnN5c3RlbXMubmV0Pgk8QUFOTGtUaWxIU3RDNWNpU0N5MHg5ZFFmRUJsdHluVld5ZEdLblZlbjZaYm1KQG1haWwuZ21haWwuY29tPg=="},"prevInTopic":15508,"nextInTopic":15510,"prevInTime":15508,"nextInTime":15510,"topicId":15466,"numMessagesInTopic":82,"msgSnippet":"... I assure you, I am not agreeing with you. ... Yes, I ve been designing hypermedia-driven HTML applications for browsers since 1993, using conneg since","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 83833 invoked from network); 1 Jun 2010 23:57:07 -0000\r\nX-Received: from unknown (66.196.94.105)\n  by m10.grp.re1.yahoo.com with QMQP; 1 Jun 2010 23:57:07 -0000\r\nX-Received: from unknown (HELO mxout-08.mxes.net) (216.86.168.183)\n  by mta1.grp.re1.yahoo.com with SMTP; 1 Jun 2010 23:57:06 -0000\r\nX-Received: from bigbison (unknown [65.117.211.162])\n\t(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))\n\t(No client certificate requested)\n\tby smtp.mxes.net (Postfix) with ESMTPSA id 09D2A509DD;\n\tTue,  1 Jun 2010 19:56:55 -0400 (EDT)\r\nDate: Tue, 1 Jun 2010 17:56:41 -0600\r\nTo: Mike Kelly &lt;mike@...&gt;\r\nCc: Sebastien Lambla &lt;seb@...&gt;, mike amundsen &lt;mamund@...&gt;,\n Glenn Block &lt;glenn.block@...&gt;, &quot;rest-discuss@yahoogroups.com&quot;\n &lt;rest-discuss@yahoogroups.com&gt;\r\nMessage-Id: &lt;20100601175641.f6acaa28.eric@...&gt;\r\nIn-Reply-To: &lt;AANLkTilHStC5ciSCy0x9dQfEBltynVWydGKnVen6ZbmJ@...&gt;\r\nReferences: &lt;AANLkTilk2YZrgce93wXp9EJ4GfpirLeQVvmJ0JxcxPYH@...&gt;\n\t&lt;AANLkTimO4N3FSx89n4vJn7FJl32Xh-DFsYR_wtnOwuXu@...&gt;\n\t&lt;3DDD0BE655869D4EA506652B3803AEF6156D9E6C@...-it.net&gt;\n\t&lt;AANLkTinGsrViGWIBSXIfwv1y65t4Mm12EmOqsg59N6e2@...&gt;\n\t&lt;20100601105151.e63f822a.eric@...&gt;\n\t&lt;AANLkTilHStC5ciSCy0x9dQfEBltynVWydGKnVen6ZbmJ@...&gt;\r\nOrganization: Bison Systems Corporation\r\nX-Mailer: Sylpheed 3.0.0 (GTK+ 2.10.14; i686-pc-mingw32)\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=US-ASCII\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nSubject: Re: [rest-discuss] Determining which Media type for post/put\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\nMike Kelly wrote:\n&gt; \n&gt; Eric J. Bowman wrote:\n&gt; \n&gt; &gt; Mike Kelly wrote:\n&gt; &gt; &gt;\n&gt; &gt; &gt; Actually, the identifying function of HTTP is URI + any control\n&gt; &gt; &gt; data.\n&gt; &gt; &gt;\n&gt; &gt;\n&gt; &gt; Absolutely NOT.  URIs identify _resources_ the control data is used\n&gt; &gt; to select _representations_ and the two are _not_ the same thing.\n&gt; &gt;\n&gt; \n&gt; \n&gt; You sound like you&#39;re agreeing with me, the way Seb uses the term\n&gt; &#39;identifying function&#39; implied we were talking abouts representations\n&gt; not resource, which is what I was addressing:\n&gt; \n\nI assure you, I am not agreeing with you.\n\n&gt;\n&gt; I don&#39;t know if you&#39;ve ever had to develop a non-trivial\n&gt; hypermedia-driven application that needs to service (amongst other\n&gt; clients) browsers via HTML\n&gt;\n\nYes, I&#39;ve been designing hypermedia-driven HTML applications for\nbrowsers since 1993, using conneg since 1998.  You?\n\n&gt; \n&gt; &gt;\n&gt; &gt; If you need to directly reference a specific variant, assign it a\n&gt; &gt; URI and sent *that* to the client.  THAT is the solution.  It\n&gt; &gt; works.  There is no &quot;problem&quot; left to be solved by borking @type.\n&gt; &gt;\n&gt; &gt;\n&gt; .. I take it you haven&#39;t tried designing a RESTful system that handles\n&gt; browser clients then.\n&gt; \n\nI recently posted an online demo of my under-development REST system,\nand published the URIs on this very list, so perhaps you need to recall\nthat old adage about making assumptions.  It uses content negotiation\nto handle not only different browsers, but clients that aren&#39;t browsers,\nas well.  The conneg is disabled on the static demo, but I assure you\nit works just fine on the live system -- without borking @type.\n\n&gt;\n&gt; - but this conflation of resource and representation is *exactly* the\n&gt; problem that I am taking issue with.. you can&#39;t make a browser\n&gt; negotiate any other type of representation over HTML, which means you\n&gt; end up having to pretend representations are resources and ignoring\n&gt; negotiation altogether in order to make the representations\n&gt; accessible to browsers.\n&gt; \n\nBut it&#39;s a *non* problem.  Any negotiated resource on my system may\nrespond with Atom or HTML as appropriate to the client.  Browsers get\nXHTML + XSLT, the browser-resident XSLT transcludes the Atom source\nfiles.  Obviously, I don&#39;t want the browser to reference the negotiated\nresource, because then it will retrieve the HTML instead of the Atom.\n\nSo, I assign the Atom variant a URI, making it a resource in its own\nright.  The XSLT document() calls may now retrieve Atom regardless of\nthe Accept header sent by the user agent.  This is not &quot;pretending&quot;\nthat the Atom representation is a resource.\n\nSince there are situations where I want to access Atom and only Atom,\nwhy on Earth would I want to dereference a negotiated resource?  That\nAtom and only Atom resource is a *different resource* whose entity\nhappens to overlap with that of some other resource -- which happens all\nthe time in REST.\n\n&gt; \n&gt; &gt; It is a\n&gt; &gt; violation of both the layered-system and identification of resources\n&gt; &gt; constraints to use @type in any other way.\n&gt; \n&gt; Afaik this is nothing to do with either of those constraints\n&gt;\n\nSince the Atom-and-only-Atom resource is not the same resource (by the\ndefinition of resource from Roy&#39;s thesis) as the negotiated resource,\ntrying to access that resource without assigning it a URI of its own\nviolates the identification of resources constraint.\n\nIn order for conneg to work, a user agent must send the Accept header\ndeemed appropriate by its developer(s).  The server must respond to\nthat header to negotiate by media type.  If the server sends some\nrepresentation to the client which changes the developers&#39; intended\nAccept header, it&#39;s a blatant violation of the separation of concerns\nthat the layered system constraint is all about.\n\nIn Web architecture, conneg is reactive, not proactive.  The\narchitecture simply does not support having the server tell the client\nwhat media types it accepts.  This is a feature, not a bug, since (as\nyou&#39;ve been told dozens of times) the problem you are having is soooo\neasily solved by assigning the desired variant its own URI, making it a\nresource in its own right, and sending that conneg-free URI to the user\nagent.  That is how to override conneg, not @type.\n\n&gt; \n&gt; &gt;\n&gt; &gt; &gt;\n&gt; &gt; &gt; If the type attribute in links wasn&#39;t designed that way.. What\n&gt; &gt; &gt; exactly is the point of it, if it is not intended to affect client\n&gt; &gt; &gt; behavior? There is an argument that if the type attribute wasn&#39;t\n&gt; &gt; &gt; designed to support that case then a mistake was made and it was\n&gt; &gt; &gt; poorly defined.\n&gt; &gt; &gt;\n&gt; &gt;\n&gt; &gt; The point of it is to allow us to self-document our APIs.\n&gt; \n&gt; What does that even mean? What is the objective of doing that? What\n&gt; are you documenting if, as you&#39;re suggesting, it doesn&#39;t make any\n&gt; mechanical difference?\n&gt; \n\nHow can I tell that the stylesheet an HTML page links to is text/css\nutf-8, without @type and @charset?  By making a HEAD request to the CSS\ntarget, of course, and that is the only authoritative source of the\nmedia type and charset of the resource.  Those attributes are simply\nnot necessary to make the Web work.\n\nBut the purpose of a hypertext API is to have a self-documenting API,\none which tells me that I can _expect_ a HEAD request to tell me the\nresource is utf-8 text/css.  Without @type and @charset, all I can\ndocument in the hypertext is the URL, which isn&#39;t very informative, let\nalone self-documenting.\n\nSo @type and @charset, far from being useless, allow us to annotate our\nhyperlinks with metadata (which, in a properly designed system, will\nhappen to be exactly accurate).  If you assign these attributes some\nother role, then some other attributes will need to be created to fill\nthe annotation role @type and @charset were intended to fill.\n\nSo instead of saying that everyone else is wrong and these attributes\nare somehow broken, shouldn&#39;t you be proposing the addition of some new\nattributes with your desired semantics?  I&#39;d hate to see old work start\nto break because browsers suddenly decide to take @type and @charset\nliterally, which is what would happen.\n\n&gt; \n&gt; &gt; The server is not to dictate\n&gt; &gt; to the client what media types are acceptable to the client.\n&gt; &gt;\n&gt; \n&gt; Sure sure, unfortunately the reality is that users of browsers care\n&gt; about certain representations of resources depending on the context\n&gt;\n\nThat&#39;s sorta right.  The user could frankly care less what\nrepresentation the server sends, provided that the resulting steady-\nstate works.  In the context of browser-resident XSLT transformation, I\nobviously want the browser to retrieve Atom-and-only-Atom, so I link to\nthe Atom-and-only-Atom resource in the XSLT instead of the negotiated\nresource which also happens to, given the proper Accept header, return\nthe same exact Atom variant.\n\nBut that isn&#39;t a problem.  See REST&#39;s discussion of &quot;author&#39;s preferred\nversion&quot;, there&#39;s no constraint which says multiple resources can&#39;t\nreturn the same representation when dereferenced.  If you have a\ndifferent context (like needing the Atom variants for XSLT), then you\narguably have a different resource, so give it its own URI instead of\nwasting everyone&#39;s time trying to find fault with that perfectly-\nfunctional, time-tested, Web-proven, RESTful solution.\n\n&gt;\n&gt; and the solution used in the browser+html world right now is to link\n&gt; *directly* to a media-type specific URI, so in practice it is\n&gt; actually *no different at all*, and is in fact a much worse solution\n&gt; since the link itself is less descriptive to the client (the client\n&gt; has no idea the link is intended to be media type specific, URIs are\n&gt; opaque), and the interaction is less visible to intermediaries (since\n&gt; no negotiation is taking place).\n&gt; \n\nUhhh, how is an interaction without conneg *less* visible than one with\nconneg?  That&#39;s just wrong.  The solution of assigning some variant its\nown URI so it may be referred to outside of the conneg context, is\ncalled the &quot;identification of resources&quot; constraint.  It is not a\n&quot;worse solution&quot; and I don&#39;t begin to see how it could be.  The client\nmay be informed unambiguously using @type and @charset what to expect,\nand could frankly care less that the representation also happens to be\npart of the set of representations of some other resource.\n\nHitting a conneg URI on my system with a browser will return an HTML\nresponse.  If that representation isn&#39;t appropriate, the user agent may\npresent the user with alternatives, taken from either an Alternates\nheader or a bunch of &lt;link/&gt; tags in the &lt;head&gt; listing each variant,\nits URI, and its @type/@charset -- nothing could be clearer when they\nall have rel=&#39;alternate&#39;.\n\nAs always, my advice when using conneg is to assign each variant its\nown URI, and return that URI in Content-Location such that caching will\nwork, with the exception of negotiating for compression.  This is not a\nproblem, it is BEST PRACTICE.\n\n-Eric\n\n"}}
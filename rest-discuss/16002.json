{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":124198377,"authorName":"William Martinez Pomares","from":"&quot;William Martinez Pomares&quot; &lt;wmartinez@...&gt;","profile":"willmarpo","replyTo":"SENDER","senderId":"OizttZSfgt92VS25v4IZHYNL_6kJuH31FHixhHhX_vDC1XW1_5hk9sPIPHoY-ae2EagOdklcV8b2D3blnevS5UO5E4woCkzjsG129IUOp6AMbLYG0FbjfH9a","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: PUT for create","postDate":"1280233163","msgId":16002,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGkybWlzYitsbHJpQGVHcm91cHMuY29tPg==","inReplyToHeader":"PEFBTkxrVGk9eEtyVjBqcTdTRk5YRVQ0N3JjaDNLXzE4S2gzOG1hQktuYktDNkBtYWlsLmdtYWlsLmNvbT4="},"prevInTopic":15991,"nextInTopic":16005,"prevInTime":16001,"nextInTime":16003,"topicId":15924,"numMessagesInTopic":14,"msgSnippet":"Dong. Agree. Aliases has their cost. Still, we are talking about a client that uses a URI he made up. That is, it would actually be for its eyes only. Any","rawEmail":"Return-Path: &lt;wmartinez@...&gt;\r\nX-Sender: wmartinez@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 86803 invoked from network); 27 Jul 2010 12:22:01 -0000\r\nX-Received: from unknown (98.137.34.46)\n  by m8.grp.sp2.yahoo.com with QMQP; 27 Jul 2010 12:22:01 -0000\r\nX-Received: from unknown (HELO n45b.bullet.mail.sp1.yahoo.com) (66.163.168.159)\n  by mta3.grp.sp2.yahoo.com with SMTP; 27 Jul 2010 12:22:01 -0000\r\nX-Received: from [69.147.65.150] by n45.bullet.mail.sp1.yahoo.com with NNFMP; 27 Jul 2010 12:19:23 -0000\r\nX-Received: from [98.137.34.36] by t7.bullet.mail.sp1.yahoo.com with NNFMP; 27 Jul 2010 12:19:23 -0000\r\nDate: Tue, 27 Jul 2010 12:19:23 -0000\r\nTo: rest-discuss@yahoogroups.com\r\nMessage-ID: &lt;i2misb+llri@...&gt;\r\nIn-Reply-To: &lt;AANLkTi=xKrV0jq7SFNXET47rch3K_18Kh38maBKnbKC6@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: multipart/alternative; boundary=&quot;0-1040774383-9898667099=:0&quot;\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-Yahoo-Newman-Property: groups-compose\r\nFrom: &quot;William Martinez Pomares&quot; &lt;wmartinez@...&gt;\r\nSubject: Re: PUT for create\r\nX-Yahoo-Group-Post: member; u=124198377; y=YtRDoz0ijvp5CwZ8o4hscUCMxOFComEZ6HQbWFO4w9JJLvAp\r\nX-Yahoo-Profile: willmarpo\r\n\r\n\r\n--0-1040774383-9898667099=:0\r\nContent-Type: text/plain; charset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nDong.\nAgree. Aliases has their cost. Still, we are talking about a client t=\r\nhat\nuses a URI he made up. That is, it would actually be for its eyes only.=\r\n\nAny other request that access that resource will get the official one.\nAnd=\r\n, any request from that client will get a redirect as a best\npractice. See =\r\nPUT:\n\n&quot;A single resource MAY be identified by many different URIs. For\nexam=\r\nple, an article might have a URI for identifying &quot;the current\nversion&quot; whic=\r\nh is separate from the URI identifying each particular\nversion. In this cas=\r\ne, a PUT request on a general URI might result in\nseveral other URIs being =\r\ndefined by the origin server&quot;\nalso\n&quot;...the URI in a PUT request identifies =\r\nthe entity enclosed    with the\nrequest -- the user agent knows what URI is=\r\n intended and the    server\nMUST NOT attempt to apply the request to some o=\r\nther resource.    If the\nserver desires that the request be applied to a di=\r\nfferent URI, it MUST\nsend a 301 (Moved Permanently) response; the user agen=\r\nt MAY    then make\nits own decision regarding whether or not to redirect th=\r\ne    request. &quot;\n\nNow, the semantics you add to PUT should make PUT idempote=\r\nnt.\n\n&quot;Checking if a resource already exists by the representation from clie=\r\nnt\nis costly and not reliable.&quot;\n\nNot so sure about that. See, if we see the=\r\n analogy of a database, if the\nonly way to check if the resource already ex=\r\nists is using the URI, that\nURI becomes a primary key of some sort. Again,U=\r\nRI is just a name, not\nthe resource.  The content is not the last word, to =\r\nbe replaced blindly.\nDepending of the data, the server should make several =\r\nverifications to\navoid conflicts, like dependencies, duplication, data inco=\r\nnsistency,\netc. Remember clients knows the latest version of that resource,=\r\n server\nmay control cross resource verifications and any other change to\nre=\r\nsources that can make a request invalid.\n\n&quot;What happens if the URL the clie=\r\nnt wants already exists on the server?\nShould it be interpreted as an updat=\r\ne?&quot;\nWell, it SHOULD. See PUT:\n\n&quot; If the Request-URI refers to an already   =\r\n existing resource, the\nenclosed entity SHOULD be considered as a    modifi=\r\ned version of the one\nresiding on the origin server.&quot;\n\nI think your case is=\r\n the one where two clients choose, by coincidence,\nthe same made up URI. Th=\r\ney are both posting a new resource. Server may\nnot have a way to detect the=\r\n request comes from different clients. So\nthe second guy is unaware he is n=\r\not creating a new resource, but\nupdating it (until he gets a 200 or 204 ins=\r\ntead of a 201). As the update\nis marked with a SHOULD, you can actually lim=\r\nit the PUT to creation,\nthus the second request will fail.  If you do not, =\r\nthen clients should\nhandle the possibility of such case by checking the res=\r\nponse codes and\nact accordingly.\n\nCheers.\n\nWilliam Martinez Pomares.\n\n\n\n---=\r\n In rest-discuss@yahoogroups.com, Dong Liu &lt;edongliu@...&gt; wrote:\n&gt;\n&gt; On Sun=\r\n, Jul 25, 2010 at 9:12 PM, William Martinez Pomares\n&gt; wmartinez@... wrote:\n=\r\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt; Hello Bryan.\n&gt; &gt; That is actually an interesting question t=\r\nhat is usually answered\nlike many great guys here did. Still, let&#39;s review =\r\nwhat&#39;s in a URI.\n&gt; &gt;\n&gt; &gt; 1. A resource is not a URI. The URI is the identif=\r\nier-name that\nactually identifies a resource. A resource can be anything, a=\r\nnd can have\nmany names.\n&gt; &gt; 2. A client may not know all the names of a res=\r\nource. Actually, a\nresource may already exist with a different name the cli=\r\nent ignores.\n&gt; &gt; 3. The client may have control over the URIs it uses, but =\r\nit should\nnever had control over the Server URIs.\n&gt; &gt; 4. I don&#39;t see why a =\r\nresource cannot have a name not given by the\nserver, but I do see that a se=\r\nrver should not be forced to name a\nresource.\n&gt; &gt; 5. The client should not =\r\ninfer nothing from a URI. No folders, no\ntypes, nothing. That is why I prev=\r\nent from using templates. Too\ntempting.\n&gt; &gt;\n&gt; &gt; So, what all that means? It=\r\n means you can use PUT with any name you\nwant. That is your name, the URI f=\r\nrom the client. But the server owns\nits namespace, thus the resource may be=\r\n created with the name the server\nlikes. Still, the server can note that yo=\r\nu, as a client, gave a special,\nparticular name to that new resource. So, w=\r\nhenever your client requests\nthat URI, the server knows which resource it r=\r\nefers to. If someone else,\neven your client, requests that resource using a=\r\n search or something,\nthe URI that will be returned is that one of the serv=\r\ner.\n&gt; &gt;\n&gt;\n&gt; I dont quite agree. There is cost for doing this.  See\n&gt; http:/=\r\n/www.w3.org/TR/webarch/#uri-aliases\n&gt;\n&gt;\n&gt;\n&gt; &gt;\n&gt; &gt; See? The resource in this=\r\n case has two URIs. PUT has not forced the\nname into the server. The server=\r\n keeps its autonomy. The URI can be a\ncool URI client side, and use templat=\r\nes client side, and have a\nstructure client side. But server doesn&#39;t care. =\r\nIt just polite enough to\nremember your name for that resource.\n&gt; &gt;\n&gt;\n&gt; &quot;Coo=\r\nl URIs don&#39;t change&quot; from server side to client side.\n&gt;\n&gt; &gt;\n&gt; &gt; Furthermore=\r\n. As I said, the URI is not the resource. You can PUT a\nresource with a nam=\r\ne, but if the resource already exists (the resource,\nNOT the name), it will=\r\n fail. See? The server can check the body of the\nPUT and if creating a reso=\r\nurce from that duplicates an already existing\nresource, and that is not per=\r\nmitted, it will fail even if the resource\nyou PUT has a completely new name=\r\n. This is very important. We are\nputting too much importance into URIs, whe=\r\nn they are simply names to\nrefer to the really important guy, the resource.=\r\n\n&gt; &gt;\n&gt;\n&gt; Checking if a resource already exists by the representation from\n&gt;=\r\n client is costly and not reliable.\n&gt;\n&gt; What happens if the URL the client =\r\nwants already exists on the server?\n&gt; Should it be interpreted as an update=\r\n?\n&gt;\n&gt; &gt; Cheers.\n&gt; &gt;\n&gt; &gt; William Martinez Pomares\n&gt; &gt;\n&gt; &gt; --- In rest-discus=\r\ns@yahoogroups.com, Bryan Taylor bryan_w_taylor@\nwrote:\n&gt; &gt; &gt;\n&gt; &gt; &gt; I&#39;ve bee=\r\nn discussing PUT for create with some coworkers. This is\ncertainly valid\n&gt; =\r\n&gt; &gt; HTTP, but I&#39;m wondering if people consider it RESTful. It seems to\nme t=\r\nhat\n&gt; &gt; &gt; giving the client control over part of the URI requires them to\nu=\r\nnderstand how\n&gt; &gt; &gt; resources are organized and forces them to construct UR=\r\nIs as\nnon-opaque strings.\n&gt; &gt; &gt; So I wonder if this conflicts with HATEOAS.=\r\n It potentially also\nputs a burden on\n&gt; &gt; &gt; the client to avoid namespace c=\r\nollisions, so that it must adopt\nsome uniqueness\n&gt; &gt; &gt; logic which again re=\r\nquires application state that seems\nproblematic.\n&gt; &gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt;\n\n\r\n--0-1040774383-9898667099=:0\r\nContent-Type: text/html; charset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n\nDong.&lt;br&gt;Agree. Aliases has their cost. Still, we are talking about a clie=\r\nnt that uses a URI he made up. That is, it would actually be for its eyes o=\r\nnly. Any other request that access that resource will get the official one.=\r\n And, any request from that client will get a redirect as a best practice. =\r\nSee PUT:&lt;br&gt;&lt;br&gt;&lt;blockquote&gt;&quot;A single resource MAY be identified by many di=\r\nfferent URIs. For example, an article might have a URI for identifying &quot;the=\r\n current version&quot; which is separate from the URI identifying each particula=\r\nr version. In this case, a PUT request on a general URI might result in sev=\r\neral other URIs being defined by the origin server&quot;&lt;br&gt;also&lt;br&gt;&quot;...the URI =\r\nin a PUT request identifies the entity enclosed\n   with the request -- the =\r\nuser agent knows what URI is intended and the\n   server MUST NOT attempt to=\r\n apply the request to some other resource.\n   If the server desires that th=\r\ne request be applied to a different URI, it MUST send a 301 (Moved Permanen=\r\ntly) response; the user agent MAY\n   then make its own decision regarding w=\r\nhether or not to redirect the\n   request.\n&quot;&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;Now, the se=\r\nmantics you add to PUT should make PUT idempotent. &lt;br&gt;&lt;br&gt;&lt;i&gt;&quot;Checking if =\r\na resource already exists by the representation from client is costly and n=\r\not reliable.&quot;&lt;/i&gt;&lt;br&gt;&lt;br&gt;Not so sure about that. See, if we see the analogy=\r\n of a database, if the only way to check if the resource already exists is =\r\nusing the URI, that URI becomes a primary key of some sort. Again,URI is ju=\r\nst a name, not the resource.&nbsp; The content is not the last word, to be =\r\nreplaced blindly. Depending of the data, the server should make several ver=\r\nifications to avoid conflicts, like dependencies, duplication, data inconsi=\r\nstency, etc. Remember clients knows the latest version of that resource, se=\r\nrver may control cross resource verifications and any other change to resou=\r\nrces that can make a request invalid.&lt;br&gt;&lt;br&gt;&lt;i&gt;&quot;What happens if the URL th=\r\ne client wants already exists on the server? Should it be interpreted as an=\r\n update?&quot;&lt;/i&gt;&lt;br&gt;Well, it SHOULD. See PUT:&lt;br&gt;&lt;br&gt;&quot; If the Request-URI refe=\r\nrs to an already\n   existing resource, the enclosed entity SHOULD be consid=\r\nered as a\n   modified version of the one residing on the origin server.&quot;&lt;br=\r\n&gt;&lt;br&gt;I think your case is the one where two clients choose, by coincidence,=\r\n the same made up URI. They are both posting a new resource. Server may not=\r\n have a way to detect the request comes from different clients. So the seco=\r\nnd guy is unaware he is not creating a new resource, but updating it (until=\r\n he gets a 200 or 204 instead of a 201). As the update is marked with a SHO=\r\nULD, you can actually limit the PUT to creation, thus the second request wi=\r\nll fail.&nbsp; If you do not, then clients should handle the possibility of=\r\n such case by checking the response codes and act accordingly.&lt;br&gt;&lt;br&gt;Cheer=\r\ns.&lt;br&gt;&lt;br&gt;William Martinez Pomares.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;--- In rest-discuss@yaho=\r\nogroups.com, Dong Liu &lt;edongliu@...&gt; wrote:&lt;br&gt;&gt;&lt;br&gt;&gt; On Sun, J=\r\nul 25, 2010 at 9:12 PM, William Martinez Pomares&lt;br&gt;&gt; wmartinez@... wrot=\r\ne:&lt;br&gt;&gt; &gt;&lt;br&gt;&gt; &gt;&lt;br&gt;&gt; &gt;&lt;br&gt;&gt; &gt; Hello Bryan.&lt;br&gt;&gt;=\r\n &gt; That is actually an interesting question that is usually answered lik=\r\ne many great guys here did. Still, let&#39;s review what&#39;s in a URI.&lt;br&gt;&gt; &g=\r\nt;&lt;br&gt;&gt; &gt; 1. A resource is not a URI. The URI is the identifier-name =\r\nthat actually identifies a resource. A resource can be anything, and can ha=\r\nve many names.&lt;br&gt;&gt; &gt; 2. A client may not know all the names of a res=\r\nource. Actually, a resource may already exist with a different name the cli=\r\nent ignores.&lt;br&gt;&gt; &gt; 3. The client may have control over the URIs it u=\r\nses, but it should never had control over the Server URIs.&lt;br&gt;&gt; &gt; 4. =\r\nI don&#39;t see why a resource cannot have a name not given by the server, but =\r\nI do see that a server should not be forced to name a resource.&lt;br&gt;&gt; &gt=\r\n; 5. The client should not infer nothing from a URI. No folders, no types, =\r\nnothing. That is why I prevent from using templates. Too tempting.&lt;br&gt;&gt; =\r\n&gt;&lt;br&gt;&gt; &gt; So, what all that means? It means you can use PUT with an=\r\ny name you want. That is your name, the URI from the client. But the server=\r\n owns its namespace, thus the resource may be created with the name the ser=\r\nver likes. Still, the server can note that you, as a client, gave a special=\r\n, particular name to that new resource. So, whenever your client requests t=\r\nhat URI, the server knows which resource it refers to. If someone else, eve=\r\nn your client, requests that resource using a search or something, the URI =\r\nthat will be returned is that one of the server.&lt;br&gt;&gt; &gt;&lt;br&gt;&gt; &lt;br&gt;&=\r\ngt; I dont quite agree.&nbsp;There is cost for doing this.&nbsp;&nbsp;See&lt;b=\r\nr&gt;&gt; http://www.w3.org/TR/webarch/#uri-aliases&lt;br&gt;&gt; &lt;br&gt;&gt; &lt;br&gt;&gt; =\r\n&lt;br&gt;&gt; &gt;&lt;br&gt;&gt; &gt; See? The resource in this case has two URIs. PUT=\r\n has not forced the name into the server. The server keeps its autonomy. Th=\r\ne URI can be a cool URI client side, and use templates client side, and hav=\r\ne a structure client side. But server doesn&#39;t care. It just polite enough t=\r\no remember your name for that resource.&lt;br&gt;&gt; &gt;&lt;br&gt;&gt; &lt;br&gt;&gt; &quot;Cool=\r\n URIs don&#39;t change&quot; from server side to client side.&lt;br&gt;&gt; &lt;br&gt;&gt; &gt;&lt;=\r\nbr&gt;&gt; &gt; Furthermore. As I said, the URI is not the resource. You can P=\r\nUT a resource with a name, but if the resource already exists (the resource=\r\n, NOT the name), it will fail. See? The server can check the body of the PU=\r\nT and if creating a resource from that duplicates an already existing resou=\r\nrce, and that is not permitted, it will fail even if the resource you PUT h=\r\nas a completely new name. This is very important. We are putting too much i=\r\nmportance into URIs, when they are simply names to refer to the really impo=\r\nrtant guy, the resource.&lt;br&gt;&gt; &gt;&lt;br&gt;&gt; &lt;br&gt;&gt; Checking if a resour=\r\nce already exists by the representation from&lt;br&gt;&gt; client is costly and n=\r\not reliable.&lt;br&gt;&gt; &lt;br&gt;&gt; What happens if the URL the client wants alre=\r\nady exists on the server?&lt;br&gt;&gt; Should it be interpreted as an update?&lt;br=\r\n&gt;&gt; &lt;br&gt;&gt; &gt; Cheers.&lt;br&gt;&gt; &gt;&lt;br&gt;&gt; &gt; William Martinez Poma=\r\nres&lt;br&gt;&gt; &gt;&lt;br&gt;&gt; &gt; --- In rest-discuss@yahoogroups.com, Bryan Ta=\r\nylor bryan_w_taylor@ wrote:&lt;br&gt;&gt; &gt; &gt;&lt;br&gt;&gt; &gt; &gt; I&#39;ve been d=\r\niscussing PUT for create with some coworkers. This is certainly valid&lt;br&gt;&g=\r\nt; &gt; &gt; HTTP, but I&#39;m wondering if people consider it RESTful. It seem=\r\ns to me that&lt;br&gt;&gt; &gt; &gt; giving the client control over part of the U=\r\nRI requires them to understand how&lt;br&gt;&gt; &gt; &gt; resources are organize=\r\nd and forces them to construct URIs as non-opaque strings.&lt;br&gt;&gt; &gt; &gt=\r\n; So I wonder if this conflicts with HATEOAS. It potentially also puts a bu=\r\nrden on&lt;br&gt;&gt; &gt; &gt; the client to avoid namespace collisions, so that=\r\n it must adopt some uniqueness&lt;br&gt;&gt; &gt; &gt; logic which again requires=\r\n application state that seems problematic.&lt;br&gt;&gt; &gt; &gt;&lt;br&gt;&gt; &gt;&lt;b=\r\nr&gt;&gt; &gt;&lt;br&gt;&gt;&lt;br&gt;\n\n\r\n--0-1040774383-9898667099=:0--\r\n\n"}}
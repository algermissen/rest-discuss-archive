{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":228155998,"authorName":"Mike Schinkel","from":"&quot;Mike Schinkel&quot; &lt;mikeschinkel@...&gt;","profile":"mikeschinkel","replyTo":"SENDER","senderId":"9s1ySikmdzn1bMHXRvUzQbGry8cuyROEz_5b24sVHrRJdSbnQMboJF_25dbfxVIMTpYv7ZX_nfJG-Hw9svZmtB1NGkkGZwb1U_qbl24bdA","spamInfo":{"isSpam":false,"reason":"12"},"subject":"RE: [rest-discuss] bootstrapping","postDate":"1200779325","msgId":10286,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDE1MmMwMWM4NWFlNSQxMWU0ZmY1MCQwNzAyYThjMEBHdWlkZXMubG9jYWw+","inReplyToHeader":"PDUwMzdiNmU0MDgwMTE5MDI1NGozNGMzMThmcjI1MjA5ZDA3ZThjZDRmY2ZAbWFpbC5nbWFpbC5jb20+","referencesHeader":"PGZta3M3OCtrMTVrQGVHcm91cHMuY29tPiA8MTA1NDAxYzg1OGU3JDQ4ZmNiNWYwJDA3MDJhOGMwQEd1aWRlcy5sb2NhbD4gPDUwMzdiNmU0MDgwMTE3MTkxN2gyZDM2ZTQ4MG43NjAzNzY1OTg1ZDBjNzU2QG1haWwuZ21haWwuY29tPiA8YzgyMDQ1NDMwODAxMTgxMzU5ajJjMWQyNDBkbGRhMDc4NzMwMGVhYjhiZGFAbWFpbC5nbWFpbC5jb20+IDw1MDM3YjZlNDA4MDExODE3MTdnNzZhZTk4NmFzYWM5OTA1ODk2MGRhNmYwZUBtYWlsLmdtYWlsLmNvbT4gPDE0MzIwMWM4NWEzZSQ4ODM1ODQ2MCQwNzAyYThjMEBHdWlkZXMubG9jYWw+IDw1MDM3YjZlNDA4MDExODE5MDlwNmZhOTYzNjJqYzc4OGFlMDI2ZWEzMWZjMkBtYWlsLmdtYWlsLmNvbT4gPDE0NWMwMWM4NWE1YSQ3NDJlN2ZhMCQwNzAyYThjMEBHdWlkZXMubG9jYWw+IDw1MDM3YjZlNDA4MDExODIyMDZxNTZhOWJlNzNtZTBmYzRhMWJlNjI2ZjE2MkBtYWlsLmdtYWlsLmNvbT4gPDE0ODcwMWM4NWE3ZSQ4NTVlMDY1MCQwNzAyYThjMEBHdWlkZXMubG9jYWw+IDw1MDM3YjZlNDA4MDExOTAyNTRqMzRjMzE4ZnIyNTIwOWQwN2U4Y2Q0ZmNmQG1haWwuZ21haWwuY29tPg=="},"prevInTopic":10285,"nextInTopic":10287,"prevInTime":10285,"nextInTime":10287,"topicId":10201,"numMessagesInTopic":65,"msgSnippet":"... So I ve decided to map out a deliberately primative starting point in a psuedo-yaml syntax (psuedo because 1.) I m not an expert in yaml, and 2.) I don t","rawEmail":"Return-Path: &lt;mikeschinkel@...&gt;\r\nX-Sender: mikeschinkel@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 36483 invoked from network); 19 Jan 2008 21:48:51 -0000\r\nX-Received: from unknown (66.218.67.94)\n  by m46.grp.scd.yahoo.com with QMQP; 19 Jan 2008 21:48:51 -0000\r\nX-Received: from unknown (HELO an-out-0708.google.com) (209.85.132.249)\n  by mta15.grp.scd.yahoo.com with SMTP; 19 Jan 2008 21:48:51 -0000\r\nX-Received: by an-out-0708.google.com with SMTP id c8so363503ana.45\n        for &lt;rest-discuss@yahoogroups.com&gt;; Sat, 19 Jan 2008 13:48:50 -0800 (PST)\r\nX-Received: by 10.100.239.11 with SMTP id m11mr10590060anh.70.1200779330356;\n        Sat, 19 Jan 2008 13:48:50 -0800 (PST)\r\nReturn-Path: &lt;mikeschinkel@...&gt;\r\nX-Received: from desktop ( [69.94.221.21])\n        by mx.google.com with ESMTPS id 3sm5979622wrs.2.2008.01.19.13.48.45\n        (version=SSLv3 cipher=RC4-MD5);\n        Sat, 19 Jan 2008 13:48:47 -0800 (PST)\r\nTo: &quot;&#39;Assaf Arkin&#39;&quot; &lt;assaf@...&gt;\r\nCc: &lt;rest-discuss@yahoogroups.com&gt;\r\nReferences: &lt;fmks78+k15k@...&gt; &lt;105401c858e7$48fcb5f0$0702a8c0@...&gt; &lt;5037b6e40801171917h2d36e480n7603765985d0c756@...&gt; &lt;c82045430801181359j2c1d240dlda0787300eab8bda@...&gt; &lt;5037b6e40801181717g76ae986asac99058960da6f0e@...&gt; &lt;143201c85a3e$88358460$0702a8c0@...&gt; &lt;5037b6e40801181909p6fa96362jc788ae026ea31fc2@...&gt; &lt;145c01c85a5a$742e7fa0$0702a8c0@...&gt; &lt;5037b6e40801182206q56a9be73me0fc4a1be626f162@...&gt; &lt;148701c85a7e$855e0650$0702a8c0@...&gt; &lt;5037b6e40801190254j34c318fr25209d07e8cd4fcf@...&gt;\r\nDate: Sat, 19 Jan 2008 16:48:45 -0500\r\nKeywords: Archived\r\nMessage-ID: &lt;152c01c85ae5$11e4ff50$0702a8c0@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain;\n\tcharset=&quot;us-ascii&quot;\r\nContent-Transfer-Encoding: 7bit\r\nX-Mailer: Microsoft Office Outlook 11\r\nX-MimeOLE: Produced By Microsoft MimeOLE V6.00.2900.3198\r\nthread-index: AchaiZzvLK6DF1bvRPy7F3oNvrs1mAAURTNQ\r\nIn-Reply-To: &lt;5037b6e40801190254j34c318fr25209d07e8cd4fcf@...&gt;\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Mike Schinkel&quot; &lt;mikeschinkel@...&gt;\r\nSubject: RE: [rest-discuss] bootstrapping\r\nX-Yahoo-Group-Post: member; u=228155998; y=7nnEGSemMsnpKzDbBjVcMSQ3d9QasmWkiCmdYiR9378wrgQ0VB-Y\r\nX-Yahoo-Profile: mikeschinkel\r\n\r\nAssaf Arkin wrote:\n&gt; &gt; So how you would represent those, in an object model, and can you \n&gt; &gt; provide an example so we are not dealing in abstracts?\n&gt; \n&gt; I don&#39;t have a representation yet, although that would be a \n&gt; good project to start on.\n\nSo I&#39;ve decided to map out a deliberately primative starting point in a\npsuedo-yaml syntax (psuedo because 1.) I&#39;m not an expert in yaml, and 2.) I\ndon&#39;t want syntax debates to bog down the discussion).  What follow is a\npseudo description language for a set of services which is deliberately not\nfully fleshed out as that&#39;s the purpose of discussing it on the list:\n\n  default:  \n    - content-type: {content-type}\n    - authentication: {authentication}\n    - base-url: {url}\n          \n  parameters:\n    - {parameter}: \n      - description: {description}\n      - data-source: {url|uri-template}\n        - content-types: [{content-type1}, ..., {content-typeN}]\n      - validation: {uri-template}\n        - content-types: [{content-type1}, ..., {content-typeN}]\n\n  services:\n    - {service-id}: \n      - description: {description}\n      - location: {[relative-]url|[relative-]uri-template}\n      - request: \t\n        - content-types: [{content-type1}, ..., {content-typeN}]\n        - headers: \n          - {header1}:\n            - values: [{value1}, ..., {valueN}]\n            - description: {description}\n          - ...\n          - {headerN}:\n            - values: [{value1}, ..., {valueN}]\n            - description: {description}\n      - response: \t\n        - content-types: [{content-type1}, ..., {content-typeN}]\n        - headers: \n          - {header1}:\n            - values: [{value1}, ..., {valueN}]\n            - description: {description}\n          - ...\n          - {headerN}:\n            - values: [{value1}, ..., {valueN}]\n            - description: {description}\n        - status-codes: \n          - {code1}:{description1}\n          - ...\n          - {codeN}:{descriptionN}\n\nThe ultimate purpose of this is to allow service publishers to specify their\nservices in this manner to 1.) document them and 2.) support both client and\nserver frameworks.  In both the client and server framework cases I envision\nan event-driven model where the framework handles all the boring plumbing\nand fires events when use-case specific work needs to be done.  Default\nvalues are defined for all services so they need not be defined individually\nfor each service, and parameters are define outside of the URI Templates so\nthat lists of valid data sources can be retrieved and/or validated which of\ncourse will require content types for such use to be identified. \n\nI envison the result of this exercise could result and &quot;a&quot; way to do RESTful\nweb services that would make it easier for someone to do it and do it right\nw/o having to learn 100% of how to do it correctly on their own.  What I\n*don&#39;t* envision is that we create the &quot;only&quot; way to do RESTful web\nservices, and my guess is that we&#39;ll specify some limiting constraints that\nwill result in the approach not being usable in some edge contexts or by\nthose not willing to accept the limiting contraints.\n\n\n&gt; Let me add one more requirement to my list:\n&gt; \n&gt; 8.  Partial definition.\n&gt; \n&gt; That means I can define some aspects of the service but not all of it,\n&gt; e.g. the shopping cart interaction alone.   I can say that a resource\n&gt; has a well define add-item link, but not talk about anything \n&gt; else appearing in the representation, and have two different \n&gt; services with widely different semantics except for that common part.\n&gt; \n&gt; Although, I came to expect that everyone would pretty much go \n&gt; and define their own stuff, and no two shopping sites will be \n&gt; intentionally compatible.  It&#39;s still a cool way to offer \n&gt; some common services, e.g. the same ordering stages for both \n&gt; books and MP3, even though the catalogs work differently.\n\nI concur though I would probably think about it as &quot;components&quot; vs.\n&quot;partial&quot; but that&#39;s just a bias.  What would be very beneficial IMO would\nbe to start creating reusable components for RESTful web services, and I&#39;m\nusing the word &quot;components&quot; at a very high level here.\n\n&gt; I also see the accessible part as desirable, but my \n&gt; preference right now is to serve HTML to people and something \n&gt; more concise (XML, JSON) to programmed clients, on the same \n&gt; resources.  So if you were to walk from a task to one of its \n&gt; attachment and delete it, you could be following the same \n&gt; path from a browser and a program, except the browser view \n&gt; would be much more friendly to you and the JSON view much \n&gt; easier to code for.\n\nI assume you are talking about using content negotiation?  Yes, I agree that\nit&#39;s great to have the same interfaces serving HTML to people and JSON, XML,\netc. to machines. That&#39;s much like how BlinkSale API works [1] except not\nwith conneg. Interestingly they don&#39;t use link traversal, or at least don&#39;t\nrequire it:\n\n\tResources & URIs\n\tIf you&#39;ve used Blinksale, the URIs in the Blinksale API will look\nfamiliar. \n\tThat&#39;s because both views of the application use the same URIs. In\nREST \n\tparlance, URIs are considered identifiers for resources, and each\nresource \n\tcan have several representations-such as the standard HTML view, an \n\tXML version, an Atom version, etc. Generally, each type of data has\none \n\tcollection resource (e.g., http://example.blinksale.com/clients) and\neach \n\tcollection has several member resources (e.g., \n\thttp://example.blinksale.com/clients/client_id). \n\nPersonally I really dislike conneg because, like a box of chocolates,  given\na URL you never know what someone else you give the link to is gonna get.\nWhat I&#39;m working on currently (called RESTian), which you can actually see\nbeing used (though I probably shouldn&#39;t be publishing the domain, oh well)\nserves either HTML or JSON depending on the file extension but with plans to\nsupport RSS, RDF, XHTML, Atom, YAML, etc. etc. (Note that my framework maps\nextensions to content types so &quot;.json&quot; maps to &quot;application/json&quot; and so\non): \n\n\thttp://atvillus.com/services/articles.json\n\thttp://atvillus.com/services/articles.html\n\thttp://atvillus.com/services/articles/37.json\n\thttp://atvillus.com/services/articles/37.html\n\nI&#39;m only working on it as my project needs me to work on it and it is only\nabout 5% of the project so forward progress on it is slow. For example, I\nhaven&#39;t gotten to putting hyperlinks in place that serve representations\nwith links to other URLs representing the same content type, i.e. if I GET a\nJSON representation then all it&#39;s links will be to JSON and if I GET an HTML\nrepresentation then all it&#39;s links will be to HTML, and so on. \n\nBTW, it is written in PHP accessing a MySQL database. :-)\n\n&gt; &gt; By &quot;content type description&quot; do you mean &quot;mime type&quot; or \n&gt; something else?\n&gt; \n&gt; Telling you it&#39;s XML doesn&#39;t really help you do anything \n&gt; interesting with the result, telling it it&#39;s a &lt;task&gt; with \n&gt; specific structure and semantic does.  So right now the \n&gt; description covers the abstract model, and separately the XML \n&gt; and JSON representation.  It&#39;s human readable, so it&#39;s easier \n&gt; to start with the abstract model, which is basically just a \n&gt; list of fields.\n\nWell if you are saying that your &lt;task&gt; information is wrapped up in an\n&quot;application/xml&quot; content type and that the caller &quot;just has to know&quot; that\nits contains a list of tasks with specific structure and semantics than I&#39;ll\nagree with Joe Gregorio [2] that you really need to find an existing\nmime-type that already supports tasks and use it, or define and register a\nnew mime-type for your task list that fits your needs with a preference\ntowards reusing a specific task-specific mime-type.  A description just does\nnot cover it.\n\n&gt; &gt; &gt; 2.  Separately it specifies a collection of resources \n&gt; dealing with \n&gt; &gt; &gt; attachments, which doesn&#39;t have a URL template, but has a content \n&gt; &gt; &gt; type description, again briefly:\n&gt; &gt; &gt;\n&gt; &gt; &gt; &lt;attachments&gt;\n&gt; &gt; &gt;   &lt;attachment&gt;\n&gt; &gt; &gt;      ...\n&gt; &gt; &gt;      &lt;url&gt; ... &lt;/url&gt;\n&gt; &gt; &gt;   &lt;/attchment&gt;\n&gt; &gt; &gt; &lt;/attachments&gt;\n&gt; &gt; &gt;\n&gt; &gt; &gt; And specifies that the attachment element up above (in \n&gt; #1) is a URL \n&gt; &gt; &gt; to a resource from that collection, so you know that navigating \n&gt; &gt; &gt; there will get you the list of attachments for a given task.\n&gt; &gt;\n&gt; &gt; When you say &quot;Separately it specifies...&quot; what is &quot;it?&quot;\n&gt; \n&gt; The specification.  It has several parts broken by \n&gt; functionality, and those map nicely to different collections \n&gt; of resources.  Attachments, for examples, are not just for \n&gt; tasks, but tasks reference them.\n\nYour &quot;specification&quot; is an RFC for a mime-type then, right?  ;-)\n\n&gt; &gt; Fine.  So why not just use \n&gt; &quot;{base}/person/{name}/pending/{task}/attachments&quot;\n&gt; &gt; to return a list of URLs attached?\n&gt; \n&gt; The scenario I have here is one of getting all the tasks and \n&gt; their attachments, so you already have the URL to these \n&gt; attachments, from the same source that provides the task ID, \n&gt; so why go to the pain of composing that URL?\n\nMaybe my client code got the task list days ago (I&#39;m assuming unique and\nnon-changing {task} ids which you&#39;d scare me if you say they are not.)  Or I\nmight get that URL from another system that traversed the task list for me.\nThere are many use-cases for going directly to a task and/or its attachments\nso requiring I first get the full list of tasks before I can access a task\nseems to me to be an undue burden; it uses bandwidth unneccessarily, it\ninhibits performance, and it adds complexity to development.\n\n&gt; Separately, I haven&#39;t decided on /attachments being an entry \n&gt; point, so there&#39;s no URL template for it.  I mentioned before \n&gt; we need to come up with practices before the language, that&#39;s \n&gt; why.  There are places where you want to use templates, \n&gt; places you don&#39;t, and places like this ... how would you decide?\n\nMy preference, which I think violates HATEOAS in the extreme, is to publish\nURI templates for all possible URLs, at least for the path-and-parameters\ncomponent of URLs.  But again, that&#39;s just my preference.\n\n&gt; Least coupling is a goal, and least coupling is about \n&gt; specifying the minimum stuff, with preference for that which \n&gt; is least likely to change.\n&gt;\n&gt; I&#39;m thinking of it in terms of lines items in my spec.  A URL \n&gt; template is one line item.  An attachment element is another \n&gt; line item.  I can have both, I prefer to have none, but I&#39;ll \n&gt; settle for one.  So as a rule of thumb which one should I pick.\n\nI assert that least coupling is &quot;a&quot; goal, not the &quot;only&quot; goal, and not\nalways a &quot;good&quot; goal.  \n\nCoupling can be a good thing when it sets forth well-considered constraints.\nREST over HTTP is currently &quot;coupled&quot; to &quot;GET&quot;, &quot;PUT&quot;, &quot;POST&quot;, and &quot;DELETE&quot;\nand I think we all agree here that that is a good thing. There is more and\nmore code becoming coupled to the Atom specification and I doubt anyone here\nwould see that as bad either. So coupling when fundamental and\nwell-considered can actually be a very good thing.\n\n&gt; These are thoughts, not conclusions:\n&gt; - I don&#39;t have (yet) a use case for accessing attachments \n&gt; directly, but certainly for accessing them from the task, so \n&gt; maybe link from the task?\n\nI want a list of all attachments, regardless of task, in order to be able to\narchive attachments for space management; there&#39;s a use-case.  \n\n&gt; - If you get a URL it points to the resource, if you get an \n&gt; ID it&#39;s useless without the template, so one piece of data vs two?\n\nI don&#39;t follow.\n\n&gt; - I can move the attachments to a different service, some \n&gt; place else, and that composition would require no change to \n&gt; the client if they always request the URL?\n&gt; - But not necessarily if they cache them, or if the new \n&gt; service has incompatible semantics.\n\n301 or proxy\n\n&gt; - It&#39;s actually slightly easier to write functional code for \n&gt; traversing links than composing URLs, which may be a sign \n&gt; that it&#39;s the better model?\n\nYes, but it is easier for humans to compose URLs than traverse links when\nthe links don&#39;t return HTML as a content type.  And discovery is based on\nthe senses, not on pre-evaluation of abstract concepts. And as already\ndiscussed, some use-cases (i.e. that &lt;img&gt; tag @src attribute) don&#39;t allow\nfor traversing links.  So there are benefits to both  URL traversing and URL\nconstruction.\n\n-- \n-Mike Schinkel\nhttp://www.mikeschinkel.com/blogs/\nhttp://www.welldesignedurls.org\nhttp://atlanta-web.org \n\n[1] http://www.blinksale.com/api\n[2] http://bitworking.org/news/193/Do-we-need-WADL\n\n\n"}}
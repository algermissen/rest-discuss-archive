{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":31182288,"authorName":"Andrew Kuchling","from":"Andrew Kuchling &lt;akuchlin@...&gt;","profile":"akuchling","replyTo":"SENDER","senderId":"fgkxqKsa9V-Z8Lvgtf2DY9r5gflr_xJoIrx_pngBspvHXMYaTAg3k2SloBYkAnTBujjmy7B631k8yzu7X6fT8R2P9OAPoOd-aFWV0RJXcYav6eo","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [XML-SIG] REST made more concrete still","postDate":"1014238237","msgId":761,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMDIwMjIwMjA1MDM3LkdEMTA5M0BjcnlzdGFsLm1lbXMtZXhjaGFuZ2Uub3JnPg==","inReplyToHeader":"PDNDNzM5REQ1LjJFRjNFRDZCQHByZXNjb2QubmV0Pg==","referencesHeader":"PDNDNzJGNDVDLjNDRDUyNzRBQHByZXNjb2QubmV0PiA8MjAwMjAyMTkyMjM4MzkuQTIwMjA5QG1vemFydC5tZW1zLWV4Y2hhbmdlLm9yZz4gPDIwMDIwMjIwMDAwMDE3LkEyMTA2NUBtb3phcnQubWVtcy1leGNoYW5nZS5vcmc+IDwzQzczOURENS4yRUYzRUQ2QkBwcmVzY29kLm5ldD4="},"prevInTopic":760,"nextInTopic":765,"prevInTime":760,"nextInTime":762,"topicId":757,"numMessagesInTopic":8,"msgSnippet":"Paul, note that I only mailed my note to the XML-SIG.  To explain all this to rest-discuss readers: I took a set of XML-RPC interfaces and tried writing out a","rawEmail":"Return-Path: &lt;akuchlin@...&gt;\r\nX-Sender: akuchlin@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_0_2); 20 Feb 2002 20:50:39 -0000\r\nReceived: (qmail 8624 invoked from network); 20 Feb 2002 20:50:39 -0000\r\nReceived: from unknown (216.115.97.172)\n  by m11.grp.snv.yahoo.com with QMQP; 20 Feb 2002 20:50:39 -0000\r\nReceived: from unknown (HELO crystal.mems-exchange.org) (132.151.8.138)\n  by mta2.grp.snv.yahoo.com with SMTP; 20 Feb 2002 20:50:39 -0000\r\nReceived: from akuchlin by crystal.mems-exchange.org with local (Exim 3.32 #1)\n\tid 16ddhF-0000Mn-00\n\tfor rest-discuss@yahoogroups.com; Wed, 20 Feb 2002 15:50:37 -0500\r\nDate: Wed, 20 Feb 2002 15:50:37 -0500\r\nTo: &quot;rest-discuss@yahoogroups.com&quot; &lt;rest-discuss@yahoogroups.com&gt;\r\nSubject: Re: [XML-SIG] REST made more concrete still\r\nMessage-ID: &lt;20020220205037.GD1093@...-exchange.org&gt;\r\nMail-Followup-To: akuchlin,\n\t&quot;rest-discuss@yahoogroups.com&quot; &lt;rest-discuss@yahoogroups.com&gt;\r\nReferences: &lt;3C72F45C.3CD5274A@...&gt; &lt;20020219223839.A20209@...-exchange.org&gt; &lt;20020220000017.A21065@...-exchange.org&gt; &lt;3C739DD5.2EF3ED6B@...&gt;\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=us-ascii\r\nContent-Disposition: inline\r\nIn-Reply-To: &lt;3C739DD5.2EF3ED6B@...&gt;\r\nUser-Agent: Mutt/1.3.24i\r\nFrom: Andrew Kuchling &lt;akuchlin@...&gt;\r\nReply-To: akuchlin@...\r\nX-Yahoo-Group-Post: member; u=31182288\r\nX-Yahoo-Profile: akuchling\r\n\r\nPaul, note that I only mailed my note to the XML-SIG.  To explain all\nthis to rest-discuss readers: I took a set of XML-RPC interfaces and\ntried writing out a REST equivalent.  My RESTification is described at\nhttp://www.amk.ca/conceit/rest-version.html, and I posted a version of\nit to the Python XML-SIG, which is what Paul is replying to.\n\nThrashing onward...\n\nOn Wed, Feb 20, 2002 at 05:00:05AM -0800, Paul Prescod wrote:\n&gt;Practically speaking you could use &quot;?&quot; if you want to allow an HTML\n&gt;forms client to work with this stuff. That&#39;s a way of thinking through\n&gt;whether you mean for it to be opaque.\n\nOK, so let&#39;s make a few decisions and remove some of those XXX&#39;s.\nI&#39;ll use the query string for this purpose, and will use XML-RPC&#39;s\nserialization format for bodies that return an arbitrary little data\nstructure.\n\n&gt;But then again, maybe this resource should just be *hyperlnks* to the\n&gt;services. You could have an optimized &quot;report&quot; sub-resource for fetching\n\nSo what would these hyperlinks be written in?  HTML, generic XLink,\nsomething custom?  Aha!  You just have to give them names, so it would\nbe OK to just say &lt;link name=&#39;ticket&#39; href=&#39;.../ticket&#39;/&gt;.  Your\nprogramming language binding would then let you do something like:\n\nserv = Service(&lt;uri&gt;)\nticket = serv.ticket.GET(username, password)\n\nHm... I&#39;m starting to get that itchy implementing feeling.\n\n&gt;&gt;    REST version: GET master/service;service ID. Returns an HTTP body,\n&gt;&gt;    encoded using the same schema/form as list_services().\n&gt;\n&gt;I&#39;d use &quot;/&quot; instead of &quot;;&quot; to indicate hierarchy but it doesn&#39;t matter\n&gt;much.\n\nOf course, when you use &#39;/&#39;, the resulting URL\n&lt;master&gt;/service/serviceId looks just like the URI for that service!\nThat actually makes things simpler; got a service URI?  Just hit it to\nfind where that service lives.  And &lt;service URI&gt;/ticket can then be\nhow you get a ticket for that service, and &lt;service\nURI&gt;/check_auth?user_id is how you check whether a user can access\nthat service.\n\n&gt;Should the ticket be a resource? Here&#39;s are arguments in favor: the\n&gt;client can DELETE when it is done with it. When we add notifications to\n&gt;HTTP, the client could WATCH it to see if the server DELETEs it because\n&gt;the client is kicked off or something. A client that is kicked off could\n&gt;do a GET to see if the authorization ticket disappeared or was just\n&gt;replaced.\n\nInteresting possibilities, but they&#39;d make this REST version way more\ncomplicated than the XML-RPC version.  More powerful, too, of course\n-- the WATCH idea is particularly neat -- but I want to stay close to\nthe original version&#39;s capabilities.\n\n&gt;&gt;    REST version: POST master/check_auth\n&gt;&gt;    XXX how should the two parameters be passed? (XML-RPC again?)\n&gt;\n&gt;Why not query params?\n\nHow about just this: POST &lt;service URI&gt;/check_auth?user_id, returning\nan XML-RPC encoded Boolean.  And the interface gets a little bit\nsimpler, again.\n\n&gt;I notice you have multiple top-level URIs. I think you should have a\n&gt;Matisse.xml which is a tiny vocabulary that points to them for the URI\n&gt;opacity reason I&#39;ve given before. One day you may move some methods off\n&gt;for load reasons or something and you can do that by just redirecting a\n&gt;URI. Plus this is a simple form of interface introspection.\n\nSo this could potentially be as simple as just name/URI pairs since\nthese are just hyperlinks, right?.  Return types and all that could be\nadded later, but aren&#39;t mandatory.\n\n&gt;&gt;    XXX what if you crash after getting the new URI? You now have an empty\n&gt;&gt;    resource. Can this all be done in one HTTP operation?\n&gt;\n&gt;Sure. Shove as much data as you want down the POST. Maybe it&#39;s mildly\n&gt;non-HTTP-ish to create two resources with a single POST but it is very\n&gt;mild. If you want to be a purist, use HTTP POST and then a PUT for the\n&gt;metadata. Have the data URI point to its metadata.\n\nI think I like the POST+PUT approach.  Putting two resources, data +\nmetadata, in a single POST isn&#39;t practical because the data might be\nvery large, say a couple of gigabytes.\n\n&gt;Method names that start with &quot;get_&quot; bother me because they seem RPC-ish.\n&gt;Ones that start with get_ and do a POST kind of freak me out. ;) Maybe\n&gt;generate_data_time or something. Why is this a POST at all instead of a\n&gt;GET (perhaps dynamic)?\n\nRevised REST version: POST &lt;master&gt;/new_cache_location?&lt;ticket&gt;.  The\nbody is the data to be stored.  You will be returned a Location:\nheader with the new URI for the data object.  GET from the new URI to\nget a URI for the metadata (probably URI/metadata); HTTP PUT the\nmetadata to store it.\n\n&gt;&gt; Interface: MetadataSearch\n&gt;&gt;    REST version: No equivalent is attempted. You could let Google crawl\n&gt;&gt;    the URIs for your data, build RDF or topic maps or whatever you like.\n&gt;&gt;    This interface goes away and is replaced by the panoply of search\n&gt;&gt;    technologies available for the Web.\n&gt;Of course you can always provide a search facility if you want using\n&gt;query params. There&#39;s nothing wrong with it if you can implement it more\n&gt;efficiently server side.\n\nThen again, if I have private data that I don&#39;t want Google to index\nfor all the world to see, using HTTP+URIs doesn&#39;t buy me much.  And\neven if they&#39;re public, Google doesn&#39;t index arbitrary XML documents.\n(Stray thought: I wonder if you could crawl the world&#39;s XML documents\nand efficiently support an XPath query over them all?)\n\n&gt;&gt; Interface: Preferences\n&gt;&gt;    REST version: easy! To get preferences, POST\n&gt;&gt;    user-URI/prefs/applicationID, passing an authorization ticket as the\n&gt;&gt;    body. To set preferences, PUT to the same URI, passing the preference\n&gt;&gt;    data in the body.\n\nI&#39;m not sure whether preferences are a property of the user, indexed\nby application, or a property of the application indexed by user.  If\nthe latter, then GETting/PUTting to &lt;service-URI&gt;/prefs?&lt;URI-encoded\nticket&gt; works nicely.\n\nHmmm... there are no more XXX&#39;s in my text, the rewritten REST version\nnow uses GET instead of POST in many places, and in fact the\nnew_cache_location method is the only one left that uses POST.  The\nREST version is beginning to seem fairly clean, and roughly comparable\nin complexity to the XML-RPC version, given the right set of\nclient-side abstractions.  Interesting...\n\n--amk                                                  (www.amk.ca)\nBut are not the dreams of poets and the tales of travellers\nnotoriously false?\n    -- H.P. Lovecraft, &quot;The Street&quot;\n\n"}}
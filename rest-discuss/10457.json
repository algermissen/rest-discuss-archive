{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":302633978,"authorName":"Daniel Yokomizo","from":"&quot;Daniel Yokomizo&quot; &lt;daniel.yokomizo@...&gt;","profile":"daniel_yokomiso","replyTo":"SENDER","senderId":"_StAckFWvYWh_korVjNb1_F2EG1WxNoKWElDnZQaLBcL8yqECBF-Ki_yJVEzliVGV9I6ICOYWjtrwOGrEiDIgcJ9K1P996OHvMNQVu8DDoSK2FQk","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Objects at REST...","postDate":"1205328189","msgId":10457,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGU1YzZlY2FiMDgwMzEyMDYyM2s2YWI3N2UxM3FkN2UzNWQzNTZmOTEzMzljQG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PDQ3RDc4NjBELjMyNzUuMjJFRjgwNjBAYW5kcnplai5jaGFlcm9uLmNvbT4=","referencesHeader":"PDQ3RDc4NjBELjMyNzUuMjJFRjgwNjBAYW5kcnplai5jaGFlcm9uLmNvbT4="},"prevInTopic":10456,"nextInTopic":10458,"prevInTime":10456,"nextInTime":10458,"topicId":10454,"numMessagesInTopic":17,"msgSnippet":"On Wed, Mar 12, 2008 at 12:28 PM, Andrzej Jan Taramina ... I m currently writing a Java framework to do something similar to this. Exposing objects directly to","rawEmail":"Return-Path: &lt;daniel.yokomizo@...&gt;\r\nX-Sender: daniel.yokomizo@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 22483 invoked from network); 12 Mar 2008 13:23:10 -0000\r\nX-Received: from unknown (66.218.67.94)\n  by m55.grp.scd.yahoo.com with QMQP; 12 Mar 2008 13:23:10 -0000\r\nX-Received: from unknown (HELO fk-out-0910.google.com) (209.85.128.191)\n  by mta15.grp.scd.yahoo.com with SMTP; 12 Mar 2008 13:23:10 -0000\r\nX-Received: by fk-out-0910.google.com with SMTP id 22so2712252fkq.6\n        for &lt;rest-discuss@yahoogroups.com&gt;; Wed, 12 Mar 2008 06:23:09 -0700 (PDT)\r\nX-Received: by 10.82.112.3 with SMTP id k3mr7445524buc.32.1205328189072;\n        Wed, 12 Mar 2008 06:23:09 -0700 (PDT)\r\nX-Received: by 10.86.99.14 with HTTP; Wed, 12 Mar 2008 06:23:09 -0700 (PDT)\r\nMessage-ID: &lt;e5c6ecab0803120623k6ab77e13qd7e35d356f91339c@...&gt;\r\nDate: Wed, 12 Mar 2008 13:23:09 +0000\r\nTo: andrzej@...\r\nCc: rest-discuss@yahoogroups.com, xml-dev@...\r\nIn-Reply-To: &lt;47D7860D.3275.22EF8060@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: 7bit\r\nContent-Disposition: inline\r\nReferences: &lt;47D7860D.3275.22EF8060@...&gt;\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Daniel Yokomizo&quot; &lt;daniel.yokomizo@...&gt;\r\nSubject: Re: [rest-discuss] Objects at REST...\r\nX-Yahoo-Group-Post: member; u=302633978; y=YMgaJj-N5WADfP31ZuaVc6LpiKaOHgZyoV_7yJgxerE9r8_jDyHrv-1a\r\nX-Yahoo-Profile: daniel_yokomiso\r\n\r\nOn Wed, Mar 12, 2008 at 12:28 PM, Andrzej Jan Taramina\n&lt;andrzej@...&gt; wrote:\n&gt; Rick Jeliffe just posted a blog entry entitled &quot;Objects at REST&quot; on xml.com,\n&gt;  found here:\n&gt;\n&gt;    http://tinyurl.com/2oqrzm\n&gt;\n&gt;  where he proposes exposing objects using REST.\n&gt;\n&gt;  I&#39;ve always had a problem with this approach.  Though it seems like a good\n&gt;  and easy thing to do (urlrewritefilter, which Rick mentions, does rock and\n&gt;  can help clean up REST URIs nicely), but there is typically an impedence\n&gt;  mismatch between objects and resources that is very difficult to bridge while\n&gt;  staying true to REST principles:\n&gt;\n&gt;  1) Objects tend to be much more fine-grained than is appropriate for\n&gt;  distributed systems access.  I would have thought that we would have learned\n&gt;  this from the ill-fated EJB Entity beans fiasco of a number of years ago.\n&gt;\n&gt;  2) WIth objects, the tendancy will always be towards using a RPC appoach,\n&gt;  which is not in keeping with REST principles.  Objects tend to have little\n&gt;  &quot;data&quot; and many methods, while resources (in the REST sense) are the reverse,\n&gt;  with much data and few methods. Mapping between the two concepts will be\n&gt;  problematic.\n&gt;\n&gt;  3) It may be rare to find a clean mapping between lower level objects and\n&gt;  resources, without using an intermediary facade layer to bridge the two\n&gt;  levels of abstraction, especially since most OO-based systems were not\n&gt;  designed to be exposed as resources using REST.\n&gt;\n&gt;  I&#39;m curious what others think of this notion of exposing objects using REST?\n\nI&#39;m currently writing a Java framework to do something similar to\nthis. Exposing objects directly to the end user is an approach similar\nto http://en.wikipedia.org/wiki/Naked_objects, which has a certain\nappeal. My work is a mix of naked objects ideas with domain driven\ndesign and REST, the gist of it is expose aggregate roots (i.e. DDD\nobjects that are persistent and &quot;top level&quot;) as primary URLs, mapping\nthe HTTP verbs to persistence related methods (the usual mapping of\n/&lt;resource&gt;/ to find all, /&lt;resource&gt;/&lt;id&gt; to find by id, etc.) and\ntreating methods as second class citizens (i.e. much less emphasizes\non object methods than on HTTP verbs). There&#39;s an mapping of methods\nto URLs if you really want to use them, the idea is that if you can\nmap the objects methods to a well defined HTTP verb (or webdav or\nwhatever) you do it, otherwise we treat methods as subordinate URLs of\nthe parent objects (e.g. /articles/1/publish()), but it only accepts\nGET (we return a representation to fill the parameters and submit it,\nusually is a xhtml form but it can be something else for other\nmedia-types) and POST for invocation responding with redirect. It will\nemphasize not using RPC style methods but if you must it should use\nsafe semantics.\n\nObviously I&#39;m biased for it but I think it&#39;s a good way to develop an\napplication, because the user&#39;s interface will map the domain model.\nAs we can use URIs to identify objects we can save those in other\nsystems, so we are planning to use URIs for every inter application\nreferences, which lends itself to very easy integration. Also if the\nonly interface to your app is via REST, everything can be an WS\nwithout additional effort. It&#39;s also great because you think much more\nabout your domain and don&#39;t worry with user interfaces, because this\nproblem is solved, so essentially you know that in the interface you\ncan just navigate via URIs and find what do you want (e.g.\n/authors/Joe_Blogger/posts?published=false) which makes much easier to\nwrite ajax widgets in the app without up front design.\n\nFWIW we are going to release it as free software in a couple of\nmonths, I&#39;ll probably plug a link here (in rest-discuss) when it&#39;s\nalpha and you&#39;ll be able to see if it&#39;s worth or not.\n\n&gt;  I&#39;m especially keen to see what the patriarch of REST, Roy, has to say on\n&gt;  this?\n&gt;\n&gt;\n&gt;  Andrzej Jan Taramina\n&gt;  Chaeron Corporation: Enterprise System Solutions\n&gt;  http://www.chaeron.com\n\nBest regards,\nDaniel Yokomizo\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":213358307,"authorName":"Dark Seid","from":"Dark Seid &lt;lorddaemon@...&gt;","profile":"tyber_sid","replyTo":"SENDER","senderId":"lMG7WR-uAIoBDBJlGREYP-YnfGHmmLAo9-vnrHaB_SJLFiZNTiJLEiRyCeI78ZrWKgzEvBxKW-5ZQDgdEu8bFzcQaB_k6ic","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] 4 Verbs and CRUD","postDate":"1288277927","msgId":16779,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEFBTkxrVGltZHZTaC1NUkE9dzJfYUdDSjVNN28tc1lzM2lzNV9vaENVM3BLa0BtYWlsLmdtYWlsLmNvbT4=","inReplyToHeader":"PDRDQzk2ODM3LjQwMTAxMDRAd2VicjMub3JnPg==","referencesHeader":"PGlhYXZpNStyc2JoQGVHcm91cHMuY29tPiA8NENDOTY4MzcuNDAxMDEwNEB3ZWJyMy5vcmc+"},"prevInTopic":16778,"nextInTopic":16780,"prevInTime":16778,"nextInTime":16780,"topicId":16776,"numMessagesInTopic":5,"msgSnippet":"My experience in trying to build REST apps using Rails indicates that much of what Rails provides out of the box simply has to be discarded as it actually gets","rawEmail":"Return-Path: &lt;lorddaemon@...&gt;\r\nX-Sender: lorddaemon@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 1568 invoked from network); 28 Oct 2010 14:59:09 -0000\r\nX-Received: from unknown (66.196.94.105)\n  by m14.grp.re1.yahoo.com with QMQP; 28 Oct 2010 14:59:09 -0000\r\nX-Received: from unknown (HELO mail-ew0-f50.google.com) (209.85.215.50)\n  by mta1.grp.re1.yahoo.com with SMTP; 28 Oct 2010 14:59:09 -0000\r\nX-Received: by ewy5 with SMTP id 5so1233849ewy.23\n        for &lt;rest-discuss@yahoogroups.com&gt;; Thu, 28 Oct 2010 07:59:08 -0700 (PDT)\r\nX-Received: by 10.14.45.65 with SMTP id o41mr8851550eeb.23.1288277948094; Thu,\n 28 Oct 2010 07:59:08 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.223.114.210 with HTTP; Thu, 28 Oct 2010 07:58:47 -0700 (PDT)\r\nIn-Reply-To: &lt;4CC96837.4010104@...&gt;\r\nReferences: &lt;iaavi5+rsbh@...&gt; &lt;4CC96837.4010104@...&gt;\r\nDate: Thu, 28 Oct 2010 20:28:47 +0530\r\nMessage-ID: &lt;AANLkTimdvSh-MRA=w2_aGCJ5M7o-sYs3is5_ohCU3pKk@...&gt;\r\nTo: nathan@...\r\nCc: Tom &lt;thomasamarrs@...&gt;, rest-discuss@yahoogroups.com\r\nContent-Type: multipart/alternative; boundary=90e6ba5bbb0378109d0493ae954e\r\nFrom: Dark Seid &lt;lorddaemon@...&gt;\r\nSubject: Re: [rest-discuss] 4 Verbs and CRUD\r\nX-Yahoo-Group-Post: member; u=213358307; y=JzDDRZh79jXryclfEWGvxagI0Os__iS1dOYEzIV537IbBur3\r\nX-Yahoo-Profile: tyber_sid\r\n\r\n\r\n--90e6ba5bbb0378109d0493ae954e\r\nContent-Type: text/plain; charset=windows-1252\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nMy experience in trying to build REST apps using Rails indicates that much\n=\r\nof what Rails provides out of the box simply has to be discarded as it\nactu=\r\nally gets in the way of a cleaner implementation. A case in point is the\nen=\r\ntire ActiveResource library. I dare say my own vagueness about what\nconstit=\r\nutes REST hasn&#39;t helped matters, but I do know Rails isn&#39;t there yet.\n\nI mu=\r\nst also say that I still haven&#39;t successfully done a good REST Rails app\nye=\r\nt. My earliest attempt was a project that where much of what we were\nbuildi=\r\nng was intended to run inside a walled garden, so the cost of building\na bu=\r\nnch of stuff to replace what Rails offered was too high; we wound up\naccept=\r\ning all the URI collusion, the lack of access to response headers etc.\nthat=\r\n come with Rails.\n\nIn terms of solutions, for more recent projects I&#39;ve aba=\r\nndoned\nActiveResource in favour of fluent HTTP libraries on the client side=\r\n with\nsome measure of success. On the server side, we&#39;re working with resou=\r\nrces\nthat are exposed as Atom rather than the vanilla XML serialisation tha=\r\nt\nRails offers, but are some considerable way from HATEOAS. Rails\nserialisa=\r\ntion isn&#39;t as convenient as we&#39;d like it to be, and XML\nserialisation using=\r\n the Builder lib is implemented in pure Ruby and can\nbecome a bottle neck w=\r\nhen traffic grows.\n\nI&#39;d be really interested in any experiences in making i=\r\nt easy to create more\n&#39;correct&#39; REST apps using Rails. I know of Restfulie =\r\nfrom the guys at\nCaelum. Is there anything else? I&#39;m also interested in exp=\r\neriences around\ncacheing (anyone got squid cache channels working?) and als=\r\no around SSO (I&#39;m\ncurrently looking at OAuth2, but have no real world exper=\r\nience with it yet,\nand it isn&#39;t the nicest thing for desktop clients).\n\nTha=\r\nnks,\nSidu.\nhttp://c42.in\n\nOn Thu, Oct 28, 2010 at 5:40 PM, Nathan &lt;nathan@w=\r\nebr3.org&gt; wrote:\n\n&gt;\n&gt;\n&gt; Tom wrote:\n&gt; &gt; I&#39;ve been successfully using REST fo=\r\nr a while now with both JAX-RS and\n&gt; Ruby on Rails, so I believe in the ove=\r\nrall concept and use it in my\n&gt; architecture.\n&gt; &gt;\n&gt; &gt; It seems like everyth=\r\ning now is just CRUD (i.e.,\n&gt; Create/Read/Update/Delete) using the 4 HTTP r=\r\nequest types. This is good,\n&gt; simple, and gets you a long way.\n&gt; &gt;\n&gt; &gt; But =\r\nis everything just CRUD? Isn&#39;t that too limiting? What about\n&gt; situations w=\r\nhere CRUD isn&#39;t sophisticated enough or just doesn&#39;t fit with\n&gt; what you&#39;re=\r\n trying to do? I&#39;ve heard that everything that can be expressed\n&gt; in a REST=\r\nful URL, but I&#39;m not buying that.\n&gt; &gt;\n&gt; &gt; Like I said, I do believe in and =\r\nlove REST, and that it covers a LOT of\n&gt; situations. But I don&#39;t think that=\r\n REST applies to everything.\n&gt; &gt;\n&gt; &gt; What do other people think?\n&gt;\n&gt; Person=\r\nally I think that there isn&#39;t really a &quot;REST&quot;, and see it more as\n&gt; a set o=\r\nf constraints and a style which you apply to a situation in order\n&gt; to asse=\r\nss how RESTful it is, and then use the constraints to make it\n&gt; more RESTfu=\r\nl.\n&gt;\n&gt; Usually this involves making things that bit simpler and more crud-l=\r\nike,\n&gt; and personally I&#39;ve always seen many benefits in doing this.\n&gt;\n&gt; Cer=\r\ntainly, I&#39;ve not found a need for anything beyond the core set of\n&gt; HTTP Ve=\r\nrbs and a couple from older specs + webdav.\n&gt;\n&gt; Best,\n&gt;\n&gt; Nathan\n&gt;  \n&gt;\n\r\n--90e6ba5bbb0378109d0493ae954e\r\nContent-Type: text/html; charset=windows-1252\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nMy experience in trying to build REST apps using Rails indicates that much =\r\nof what Rails provides out of the box simply has to be discarded as it actu=\r\nally gets in the way of a cleaner implementation. A case in point is the en=\r\ntire ActiveResource library. I dare say my own vagueness about what constit=\r\nutes REST hasn&#39;t helped matters, but I do know Rails isn&#39;t there ye=\r\nt.&lt;br&gt;\n\n&lt;br&gt;I must also say that I still haven&#39;t successfully done a go=\r\nod REST Rails app yet. My earliest attempt was a project that where much of=\r\n what we were building was intended to run inside a walled garden, so the c=\r\nost of building a bunch of stuff to replace what Rails offered was too high=\r\n; we wound up accepting all the URI collusion, the lack of access to respon=\r\nse headers etc. that come with Rails.&lt;br&gt;\n\n&lt;br&gt;In terms of solutions, for m=\r\nore recent projects I&#39;ve abandoned ActiveResource in favour of fluent H=\r\nTTP libraries on the client side with some measure of success. On the serve=\r\nr side, we&#39;re working with resources that are exposed as Atom rather th=\r\nan the vanilla XML serialisation that Rails offers, but are some considerab=\r\nle way from HATEOAS. Rails serialisation isn&#39;t as convenient as we&#39;=\r\nd like it to be, and XML serialisation using the Builder lib is implemented=\r\n in pure Ruby and can become a bottle neck when traffic grows.&lt;br&gt;\n\n&lt;br&gt;I&#=\r\n39;d be really interested in any experiences in making it easy to create mo=\r\nre &#39;correct&#39; REST apps using Rails. I know of Restfulie from the gu=\r\nys at Caelum. Is there anything else? I&#39;m also interested in experience=\r\ns around cacheing (anyone got squid cache channels working?) and also aroun=\r\nd SSO (I&#39;m currently looking at OAuth2, but have no real world experien=\r\nce with it yet, and it isn&#39;t the nicest thing for desktop clients).&lt;br&gt;=\r\n\n\n&lt;br&gt;Thanks,&lt;br&gt;Sidu.&lt;br&gt;&lt;a href=3D&quot;http://c42.in&quot;&gt;http://c42.in&lt;/a&gt;&lt;br&gt;&lt;b=\r\nr&gt;&lt;div class=3D&quot;gmail_quote&quot;&gt;On Thu, Oct 28, 2010 at 5:40 PM, Nathan &lt;span =\r\ndir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:nathan@...&quot;&gt;nathan@...&lt;/a&gt;&gt=\r\n;&lt;/span&gt; wrote:&lt;br&gt;\n\n&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;margin: 0pt=\r\n 0pt 0pt 0.8ex; border-left: 1px solid rgb(204, 204, 204); padding-left: 1e=\r\nx;&quot;&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;div style=3D&quot;background-color: rgb(255, 255, 255);&quot;&gt;\n&lt;sp=\r\nan&gt;=A0&lt;/span&gt;\n\n\n&lt;div&gt;\n  &lt;div&gt;\n\n\n    &lt;div&gt;\n      \n      \n      &lt;p&gt;&lt;/p&gt;&lt;div c=\r\nlass=3D&quot;im&quot;&gt;Tom wrote:&lt;br&gt;\n&gt; I&#39;ve been successfully using REST for a=\r\n while now with both JAX-RS and Ruby on Rails, so I believe in the overall =\r\nconcept and use it in my architecture.&lt;br&gt;\n&gt; &lt;br&gt;\n&gt; It seems like eve=\r\nrything now is just CRUD (i.e., Create/Read/Update/Delete) using the 4 HTTP=\r\n request types. This is good, simple, and gets you a long way.&lt;br&gt;\n&gt; &lt;br=\r\n&gt;\n&gt; But is everything just CRUD? Isn&#39;t that too limiting? What about=\r\n situations where CRUD isn&#39;t sophisticated enough or just doesn&#39;t f=\r\nit with what you&#39;re trying to do? I&#39;ve heard that everything that c=\r\nan be expressed in a RESTful URL, but I&#39;m not buying that.&lt;br&gt;\n\n\n&gt; &lt;=\r\nbr&gt;\n&gt; Like I said, I do believe in and love REST, and that it covers a L=\r\nOT of situations. But I don&#39;t think that REST applies to everything.&lt;br=\r\n&gt;\n&gt; &lt;br&gt;\n&gt; What do other people think?&lt;br&gt;\n&lt;br&gt;&lt;/div&gt;\nPersonally I th=\r\nink that there isn&#39;t really a &quot;REST&quot;, and see it more as &lt;br&gt;=\r\n\na set of constraints and a style which you apply to a situation in order &lt;=\r\nbr&gt;\nto assess how RESTful it is, and then use the constraints to make it &lt;b=\r\nr&gt;\nmore RESTful.&lt;br&gt;\n&lt;br&gt;\nUsually this involves making things that bit simp=\r\nler and more crud-like, &lt;br&gt;\nand personally I&#39;ve always seen many benef=\r\nits in doing this.&lt;br&gt;\n&lt;br&gt;\nCertainly, I&#39;ve not found a need for anythi=\r\nng beyond the core set of &lt;br&gt;\nHTTP Verbs and a couple from older specs + w=\r\nebdav.&lt;br&gt;\n&lt;br&gt;\nBest,&lt;br&gt;\n&lt;br&gt;\nNathan&lt;br&gt;\n\n\n    &lt;/div&gt;\n     \n\n    \n    &lt;div=\r\n style=3D&quot;color: rgb(255, 255, 255); min-height: 0pt;&quot;&gt;&lt;/div&gt;\n\n\n&lt;/div&gt;\n\n\n\n =\r\n \n\n\n\n\n\n\n&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;\n\r\n--90e6ba5bbb0378109d0493ae954e--\r\n\n"}}
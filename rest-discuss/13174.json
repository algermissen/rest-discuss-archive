{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":164939419,"authorName":"Jon Hanna","from":"Jon Hanna &lt;jon@...&gt;","profile":"hack_poet","replyTo":"SENDER","senderId":"_ICBx4Kfu4dS48W42zW8QAIvz6GmXra2mhibB3ObK9R7ZhonQptYp_lSOWzZNyP1lBl1Ki6AFcDmbQeJulo4n9RSt0o","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] XSLT and COD","postDate":"1249656577","msgId":13174,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDRBN0MzRjAxLjcwNzA3MDVAaGFja2NyYWZ0Lm5ldD4=","inReplyToHeader":"PDQ5OTg4ODQ0MDkwODA3MDQyOGw2NTFjYTUwMnYyNTk3MzE4ZTAwMzQyNDI4QG1haWwuZ21haWwuY29tPg==","referencesHeader":"PDQ5OTg4ODQ0MDkwODA3MDQyOGw2NTFjYTUwMnYyNTk3MzE4ZTAwMzQyNDI4QG1haWwuZ21haWwuY29tPg=="},"prevInTopic":13173,"nextInTopic":0,"prevInTime":13173,"nextInTime":13175,"topicId":13173,"numMessagesInTopic":2,"msgSnippet":"... I would say so. Conceptually it depends on whether or not you think of it as code , and sometimes it makes more sense not to, but even then the fact","rawEmail":"Return-Path: &lt;jon@...&gt;\r\nX-Sender: jon@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 42871 invoked from network); 7 Aug 2009 14:50:32 -0000\r\nX-Received: from unknown (69.147.108.202)\n  by m1.grp.sp2.yahoo.com with QMQP; 7 Aug 2009 14:50:32 -0000\r\nX-Received: from unknown (HELO mail.arena1.com) (208.68.176.131)\n  by mta3.grp.re1.yahoo.com with SMTP; 7 Aug 2009 14:50:32 -0000\r\nX-Received: from UnknownHost [86.47.160.33] by mail.arena1.com with SMTP;\n   Fri, 7 Aug 2009 10:49:50 -0400\r\nMessage-ID: &lt;4A7C3F01.7070705@...&gt;\r\nDate: Fri, 07 Aug 2009 15:49:37 +0100\r\nUser-Agent: Thunderbird 2.0.0.22 (Windows/20090605)\r\nMIME-Version: 1.0\r\nTo: Tim Williams &lt;williamstw@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nReferences: &lt;499888440908070428l651ca502v2597318e00342428@...&gt;\r\nIn-Reply-To: &lt;499888440908070428l651ca502v2597318e00342428@...&gt;\r\nContent-Type: text/plain; charset=UTF-8; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-Declude-Sender: jon@... [86.47.160.33]\r\nX-Declude-Spoolname: 2147384085610.eml\r\nX-Declude-RefID: \r\nX-Declude-Note: Scanned by Declude 4.3.46 for spam. &quot;http://www.declude.com/x-note.htm&quot;\r\nX-Declude-Scan: Score [9] at 10:49:58 on 07 Aug 2009\r\nX-Declude-Fail: Whitelisted\r\nX-Country-Chain: \r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Jon Hanna &lt;jon@...&gt;\r\nSubject: Re: [rest-discuss] XSLT and COD\r\nX-Yahoo-Group-Post: member; u=164939419; y=0c8wyPHBHfZwzRr4V7GZPCnysxZshh-t4R_-AIsqNRR966cf\r\nX-Yahoo-Profile: hack_poet\r\n\r\nTim Williams wrote:\n&gt; Would XSLT typically be considered a a part of the Code-On-Demand[1]\n&gt; constraint?  I&#39;m particularly interested in its usage as compared to a\n&gt; typical ESB&#39;s &quot;transformation&quot; capability.  Something like this:\n\nI would say so.\n\nConceptually it depends on whether or not you think of it as &quot;code&quot;, and \nsometimes it makes more sense not to, but even then the fact remains \nthat its executable code and hence it is a form of COD.\n\n&gt; Client Request:\n&gt; GET /transformations/application/atom+xml\n&gt; \n&gt; Server Response:\n&gt; &lt;ul&gt;\n&gt;   &lt;li href=&quot;toHtml.xsl&quot; type=&quot;text/xslt+xml&quot; rel=&quot;html&quot;/&gt;\n&gt;   &lt;li href=&quot;toText.xsl&quot; type=&quot;text/xslt+xml&quot; rel=&quot;text&quot;/&gt;\n&gt;   &lt;li href=&quot;someweirdtransform.json&quot; type=&quot;text/javascript&quot;  rel=&quot;custom&quot;/&gt;\n&gt; &lt;/ul&gt;\n\nWhat I&#39;ve done in some cases here is just used an xml-stylesheet PI in \nthe XML. As a rule, if something was expecting atom+xml (or rdf+xml, \nwhich is the case I&#39;ve used it with) and it&#39;s been given rdf+xml then it \nisn&#39;t going to perform the transformation, but a browser would if it was \nserved as text/xml. I served as text/xml or application/rdf+xml \naccording to requested type but sent the same octet stream either way.\n\nI never concluded in my own mind whether this was a good or bad idea, \nbut the interesting thing as far as REST goes is that it was an example \nof COD being something that may or may not be part of REST (since some \nclients executed the code and some didn&#39;t).\n\n&gt; So, code-on-demand or just another resource?\n\nCOD, though COD does happen from the entities for a resource.\n\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"Vt4QhscAAmZb1WUlxe06Lyhuu-x3xhtZaIH7YYB_jgnedP-oaw-XJGZKrrvpm1dgW_wQ46d4Du__aDTmUbeyK7WDc0MH-IgEuTnGkPghRA","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Questions on REST API design","postDate":"1267009807","msgId":14889,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMTAwMjI0MDQxMDA3LjUyNTRiOTViLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","inReplyToHeader":"PDYxMjBmNjY5MTAwMjIzMDgwOWoyNmFkOGU4ZXNhOGRhNTBhZmUwZDFhOGFjQG1haWwuZ21haWwuY29tPg==","referencesHeader":"PDYxMjBmNjY5MTAwMjIyMDkxM3QzOGQ5YzlhZmc0OTI2Y2YzZmNmOWFkOTQwQG1haWwuZ21haWwuY29tPgk8MjAxMDAyMjMwMzM3MzQuNDk2YWI1MDguZXJpY0BiaXNvbnN5c3RlbXMubmV0Pgk8NjEyMGY2NjkxMDAyMjMwODA5ajI2YWQ4ZThlc2E4ZGE1MGFmZTBkMWE4YWNAbWFpbC5nbWFpbC5jb20+"},"prevInTopic":14874,"nextInTopic":0,"prevInTime":14888,"nextInTime":14890,"topicId":14857,"numMessagesInTopic":15,"msgSnippet":"... Interesting.  A REST API may or may not work the same way for each of those resource types.  I was contacted by another project recently, for similar","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 65800 invoked from network); 24 Feb 2010 11:10:30 -0000\r\nX-Received: from unknown (66.196.94.105)\n  by m5.grp.sp2.yahoo.com with QMQP; 24 Feb 2010 11:10:30 -0000\r\nX-Received: from unknown (HELO mxout-08.mxes.net) (216.86.168.183)\n  by mta1.grp.re1.yahoo.com with SMTP; 24 Feb 2010 11:10:29 -0000\r\nX-Received: from bigbison (unknown [65.117.211.162])\n\t(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))\n\t(No client certificate requested)\n\tby smtp.mxes.net (Postfix) with ESMTPSA id 84FDC509B4;\n\tWed, 24 Feb 2010 06:10:16 -0500 (EST)\r\nDate: Wed, 24 Feb 2010 04:10:07 -0700\r\nTo: =?ISO-8859-1?Q?D=E1rio?= Abdulrehman &lt;dario.rehman@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nMessage-Id: &lt;20100224041007.5254b95b.eric@...&gt;\r\nIn-Reply-To: &lt;6120f6691002230809j26ad8e8esa8da50afe0d1a8ac@...&gt;\r\nReferences: &lt;6120f6691002220913t38d9c9afg4926cf3fcf9ad940@...&gt;\n\t&lt;20100223033734.496ab508.eric@...&gt;\n\t&lt;6120f6691002230809j26ad8e8esa8da50afe0d1a8ac@...&gt;\r\nOrganization: Bison Systems Corporation\r\nX-Mailer: Sylpheed 2.6.0 (GTK+ 2.10.14; i686-pc-mingw32)\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nSubject: Re: [rest-discuss] Questions on REST API design\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\nD=E1rio Abdulrehman wrote:\n&gt; \n&gt; I will provide details about the domain I&#39;m=\r\n working on:\n&gt; I have a database with biological data: proteins, genes, reg=\r\nulations,\n&gt; etc., and the REST API I would like to design gives access to t=\r\nhose\n&gt; resources for querying.\n&gt;\n\nInteresting.  A REST API may or may not w=\r\nork the same way for each of\nthose resource types.  I was contacted by anot=\r\nher project recently, for\nsimilar purpose, so I&#39;m actually somewhat familia=\r\nr with part of what\nyou&#39;re trying to do.\n\n&gt;\n&gt; Since the types of queries I =\r\nwant to provide are very restricted I\n&gt; don&#39;t think it fits the OpenSearch =\r\nmodel suggested by Craig.\n&gt; \n\nYou may be surprised.  The solution I propose=\r\nd to the other project was\nto use Atom as a wrapper for XHTML marked up wit=\r\nh RDFa, and OpenSearch\n(for the same reasons Craig mentioned), with eXist X=\r\nMLDB (as they\nalready used Java, it was an easy choice) as an &#39;Atom Store&#39; =\r\nlayer in\nfront of the back-end DBs, with the system actually coded using Xq=\r\nuery.\n\nDoing this exposes subresources at their own URIs by Xpath (without\n=\r\ncreating separate DB cells), for example you may have a resource:\n/protein/=\r\n{id} which has subresource:  /protein/{id}//sequence.  Or, you\nmay have a r=\r\nesource:  /protein/{id}#sequence, we aren&#39;t far enough\nalong to tell whethe=\r\nr we&#39;re after &lt;sequence&gt; or &lt;div class=3D&#39;sequence&#39;&gt;.\n\n&gt;\n&gt; A protein/gene i=\r\ns identified by its name but it has other interesting\n&gt; data associated (de=\r\nscription, aminoacid sequence, etc.), so I would\n&gt; like to model it as a re=\r\nsource that responds to GET, returning a\n&gt; media type with that information=\r\n.\n&gt; \n\nRight.  But, I would bet dollars to donuts that your {id} syntax is\ns=\r\npecific to your project, rather than being based on some standard for\nnamin=\r\ng proteins or genes (those don&#39;t translate well into any URI\nallocation sch=\r\neme).  This sort of thing maps directly to atom:id, while\nthe names of the =\r\nfolks who, say, sequenced a gene maps nicely to atom:\nauthor constructs.  P=\r\nublication date is atom:published, atom:updated\nmaps to the date of the mos=\r\nt recent research referred to.\n\nI would also be willing to bet that you hav=\r\ne some data hierarchies in\nthere, too.  So, continuing with the &quot;identifica=\r\ntion of resources&quot;\nconstraint, you need to figure out those hierarchies bef=\r\nore you can\ndesign your URIs -- you won&#39;t have /protein or /gene, but rathe=\r\nr,\n/typeof/protein or /typeof/gene, and other type/subtype relationships.\n\n=\r\nDo you really want to have a resource, /gene, which can return a list of\nev=\r\nery named gene ever discovered in both the Plant and Animal Kingdoms?\nCraig=\r\n referred to this as &quot;filters&quot; in his response.  Human genetics\nwould be /a=\r\nnimal/human/typeof/gene or somesuch.\n\n&gt;\n&gt; GET /protein/{id}    =3D&gt;    Retu=\r\nrns media type (JSON for example) with\n&gt; description, aminoacid sequence, e=\r\ntc.\n&gt; \n&gt; Mutatis mutandis for gene.\n&gt; \n\nActually, JSON is about the worst c=\r\nhoice you can make for this sort of\nproject.  It&#39;s too general a media type=\r\n, doesn&#39;t define links, is not\nextensible, has no semantics, can&#39;t be valid=\r\nated against a schema, and\nanything you return as JSON is completely inacce=\r\nssible to boot.  Your\nsystem is really a searchable collection of documents=\r\n.  JSON isn&#39;t a\ndocument markup language, so it&#39;s out-of-place for your pur=\r\nposes.\n\nWhat&#39;s called for is a structured markup language.  The data your\ns=\r\nervice returns will be organized into lists and tables.  JSON has no\nsemant=\r\nics for expressing tabular or listed data.  XHTML does, with the\nbenefit th=\r\nat XHTML tables and lists may be marked up for accessibility.\n\nThe fact is =\r\nthat an XHTML data table is human- and machine- readable,\naccessibly -- and=\r\n that no such capability exists in JSON.  So instead\nof reinventing common =\r\nhypertext data structures like lists and tables\nin JSON, focus your efforts=\r\n on defining a domain-specific vocabulary\nfor these data structures, expres=\r\nsed inside a standard (X)HTML media\ntype.\n\nThis promotes serendipitous re-u=\r\nse.  You could also come up with your\nown XML language, but as with JSON yo=\r\nu&#39;d have to reinvent several\nwheels to make that work.  Whereas XHTML table=\r\ns make the generic\n&quot;tabular data&quot; structure self-evident.  Embedding metada=\r\nta in (X)HTML\nusing RDFa is standard, so no special parser is required to r=\r\nead it,\nand it would be simple to re-use across projects.\n\nThe easier you m=\r\nake it, the more likely it will be adopted by others.\nUsing RDFa to add sem=\r\nantics to XHTML tables is simple, and easily\nunderstood. Not so for metadat=\r\na in JSON, where I have to refer to some\nsort of external documentation jus=\r\nt to decipher your data structures,\nbefore I can begin to figure out what y=\r\nour vocabulary is.\n\nInstead, you should be relying on my common knowledge o=\r\nf hypertext data\nstructures, to impart &quot;tabular data&quot; to me through your AP=\r\nI.  Since I\nalready understand hypertext tables, your specific vocabulary s=\r\nticks\nout, and is thus easy for me to understand, since you&#39;re establishing=\r\n\nyour definitions as an extension of my working knowledge of their\nunderlyi=\r\nng data structure.\n\nAs opposed to making me start from scratch, requiring m=\r\ne to learn your\ninterpretation of tabular data expressed as JSON before I c=\r\nan recognize\nyour domain-specific vocabulary embedded within.  I use tables=\r\n as an\nexample, but I mean any data structure that can be implemented withi=\r\nn\nthe basic semantics of HTML.\n\nIf the other project took my advice, which =\r\nI don&#39;t think they did, then\nthere may already exist an RDFa ontology that =\r\npartly covers what you&#39;re\ndoing, and you&#39;d just be extending that.  There i=\r\ns nothing inherent to\nyour resources that would require nonstandard media t=\r\nypes to express.\n\nPublishing scientific data on the Web is exactly the prob=\r\nlem HTML was\noriginally conceived to solve.  It did spectacularly well.  Us=\r\ne it.\n\nConstrain it to your ontology using RELAX NG and Schematron.  Nowada=\r\nys,\nwrap it in Atom.  If you need a new element, like say &lt;sequence&gt;, both\n=\r\nXHTML and Atom are extensible to allow for it.  PCR imaging is saved as\nwha=\r\nt, PNG files?  Make Atom Media Entries for them, properly linked all\naround=\r\n.\n\nIf you&#39;re generating images from DB queries, save the image as a file\nwi=\r\nth a name and link to that, instead of generating the same image from\nthe D=\r\nB with every request by calling some image-generation endpoint.\nDon&#39;t expos=\r\ne the image-generating endpoint to the public, it&#39;s a DDoS\nmagnet.  Every o=\r\nnline genetic DB I&#39;ve looked at, clearly uses image\ngeneration, which is ob=\r\nvious by looking at the URLs.  It shouldn&#39;t be.\n\n&gt; \n&gt; Given the above descr=\r\niption of the resources does it still make sense\n&gt; to provide the batch ver=\r\nsion of the resource?\n&gt; I see the users wanting to GET information about a =\r\nlist of\n&gt; proteins/genes and it would certainly be useful to do it batch st=\r\nyle.\n&gt; \n\nIf you follow my advice, you&#39;d have an eXist XMLDB and a whole bun=\r\nch of\nstored procedures (resources).  Then you could simply turn on Atom\nPr=\r\notocol.  A researcher could log in, create a workspace, populate it\nwith so=\r\nme search results, write some custom Xquery code to create their\nown search=\r\n results, then query against their own contrived collection\nof, essentially=\r\n, stored procedures.\n\nThis, to me, is the most important aspect of my solut=\r\nion.  There&#39;s no\nway of telling how someone may want to access your data --=\r\n ways that\nhaven&#39;t occurred to you.  By virtue of publishing your data in a=\r\nn XMLDB\nthat allows direct Xquery access, you avoid this problem (by basica=\r\nlly\nmaking the number of &quot;resources&quot; in your system infinite).\n\nIf someone =\r\ndoesn&#39;t like your REST API, they could just write their own.\nThose without =\r\nlogin privileges to the XMLDB are stuck using the REST\nAPI you provide for =\r\nthem, restricted to using your system only in ways\nyou have specifically an=\r\nticipated they&#39;ll need.\n\nI don&#39;t see an overwhelming need, in light of this=\r\n, to provide some way\nto submit multiple searches in one request.  Even if =\r\nyou could make it\nwork in browsers.  I suppose it could be done even if _I_=\r\n don&#39;t see why,\nand it could probably be made RESTful, but there would be a=\r\n cost in\nreduced visibility.\n\nWhile that isn&#39;t a REST constraint, it&#39;s my p=\r\nrocess to weigh the pros\nand cons.  The con of reduced visibility is a stop=\r\nper for me, unless\nI&#39;m gaining the benefit of some pro in return.  I don&#39;t =\r\nsee the pro\nhere, so I don&#39;t see any benefit to reducing visibility to supp=\r\nort a\nbatch-GET feature.\n\n&gt;\n&gt; &gt; &gt;\n&gt; &gt; &gt; 2.\n&gt; &gt; &gt; I have another resource wh=\r\nich is an algorithm that takes as input:\n&gt; &gt; &gt; - a list of parameters [x1, =\r\nx2, ...]\n&gt; &gt; &gt; - another list of parameters [y1, y2, ...]\n&gt; &gt; &gt; - some othe=\r\nr optional arguments\n&gt; &gt; &gt;\n&gt; &gt;\n&gt; &gt; Let&#39;s try to model that resource, first =\r\nof all, by calling it a\n&gt; &gt; service endpoint.  Then we can get down to the =\r\nbrass tacks of\n&gt; &gt; implementation.\n&gt; &gt;\n&gt; \n&gt; This resource is an algorithm t=\r\nhat takes as input lists of proteins,\n&gt; genes and some other parameters and=\r\n outputs the results.\n&gt; \n\nOK, *that* sounds like an RPC endpoint.  You don&#39;=\r\nt want an endpoint\nthat takes some query syntax, you just want some query s=\r\nyntax.  I&#39;ll\nelaborate on this later, I have some example URIs I can adapt =\r\nfrom that\nother project (I&#39;ve already solved this problem for someone else,=\r\n so I\ncan skip a few steps here and start throwing hypothetical URIs around=\r\n).\n\n&gt; \n&gt; Given the nature of the resources I hope it should now be easier t=\r\no\n&gt; design a URI scheme.\n&gt; \n\nNope, not yet.  The URI allocation scheme will=\r\n consist of hierarchical\nresources and a query syntax.  We haven&#39;t identifi=\r\ned the hierarchy, or\nworked out the query syntax, yet.  That&#39;s assuming you=\r\n even agree to\nusing Atom, which I usually recommend for the purpose of pro=\r\ntotyping,\neven when I don&#39;t know it&#39;s a good fit.\n\nIn this case, I&#39;m pretty=\r\n sure it&#39;s a good fit, and I have an idea of\nwhere to separate client logic=\r\n from server logic.  The only thing I can\nsay about URI design, is that the=\r\n query syntax might go in a query, or\nit might go in a fragment, or it migh=\r\nt wind up in both.  IOW, nothing&#39;s\nsettled.\n\n-Eric\n\n"}}
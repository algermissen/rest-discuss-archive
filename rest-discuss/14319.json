{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":267214845,"authorName":"Noah Campbell","from":"Noah Campbell &lt;noahcampbell@...&gt;","profile":"noahsingleton","replyTo":"SENDER","senderId":"XOCWqQ37DnwEj032ST88fn--19ybv4E6juTzqJGpDxNoTrlXlw05H3R-tZRXevMU9LYVug1bGxS9ysIt_3DKGsYXXYzOyT04iFD_z_0","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Re: RESTful M2M Systems and Resource Typing","postDate":"1261448125","msgId":14319,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGRlNzBiMzlkMDkxMjIxMTgxNXE2NzgxZGVjN3I1YTlhODM0NTVkMTdiNGM2QG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PDVFRTE0RDJCLUYxOTItNEJDRS1BQkQ5LUM5RTJDNEYyM0FFNEBtYWMuY29tPg==","referencesHeader":"PGhnbnBmaCtwcGZrQGVHcm91cHMuY29tPgkgPDI2REVFQUE1LTUyQjItNEM0MS05RDQwLTBENzE2RDAxRjA3NEBtYWMuY29tPgkgPGRlNzBiMzlkMDkxMjIxMTExOXMxODhjYThkNHM1YmU0ZGFkMGI3MGUxNTA3QG1haWwuZ21haWwuY29tPgkgPEVFQTg0RTA5LTlFNDctNDEyNy04OUQzLTBFOTVENDlDMkFFREBtYWMuY29tPgkgPGRlNzBiMzlkMDkxMjIxMTQ0N3Q2YzM1MDRlN2s4YTZhMDI2OTZhMmJkYTEwQG1haWwuZ21haWwuY29tPgkgPDVFRTE0RDJCLUYxOTItNEJDRS1BQkQ5LUM5RTJDNEYyM0FFNEBtYWMuY29tPg=="},"prevInTopic":14315,"nextInTopic":14324,"prevInTime":14318,"nextInTime":14320,"topicId":14156,"numMessagesInTopic":134,"msgSnippet":"See below... ... WSDL being the API artifact here? ... The evolution is done away with to the point that it s very difficult to change anything in practice.","rawEmail":"Return-Path: &lt;noahcampbell@...&gt;\r\nX-Sender: noahcampbell@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 65871 invoked from network); 22 Dec 2009 02:15:26 -0000\r\nX-Received: from unknown (66.196.94.105)\n  by m12.grp.re1.yahoo.com with QMQP; 22 Dec 2009 02:15:26 -0000\r\nX-Received: from unknown (HELO mail-px0-f188.google.com) (209.85.216.188)\n  by mta1.grp.re1.yahoo.com with SMTP; 22 Dec 2009 02:15:26 -0000\r\nX-Received: by mail-px0-f188.google.com with SMTP id 26so4086474pxi.17\n        for &lt;rest-discuss@yahoogroups.com&gt;; Mon, 21 Dec 2009 18:15:25 -0800 (PST)\r\nMIME-Version: 1.0\r\nX-Received: by 10.142.118.3 with SMTP id q3mr5476474wfc.9.1261448125587; Mon, 21 \n\tDec 2009 18:15:25 -0800 (PST)\r\nIn-Reply-To: &lt;5EE14D2B-F192-4BCE-ABD9-C9E2C4F23AE4@...&gt;\r\nReferences: &lt;hgnpfh+ppfk@...&gt;\n\t &lt;26DEEAA5-52B2-4C41-9D40-0D716D01F074@...&gt;\n\t &lt;de70b39d0912211119s188ca8d4s5be4dad0b70e1507@...&gt;\n\t &lt;EEA84E09-9E47-4127-89D3-0E95D49C2AED@...&gt;\n\t &lt;de70b39d0912211447t6c3504e7k8a6a02696a2bda10@...&gt;\n\t &lt;5EE14D2B-F192-4BCE-ABD9-C9E2C4F23AE4@...&gt;\r\nDate: Mon, 21 Dec 2009 18:15:25 -0800\r\nMessage-ID: &lt;de70b39d0912211815q6781dec7r5a9a83455d17b4c6@...&gt;\r\nTo: Jan Algermissen &lt;algermissen1971@...&gt;\r\nCc: Jorn Wildt &lt;jw@...&gt;, rest-discuss@yahoogroups.com\r\nContent-Type: multipart/alternative; boundary=001636e0b9626da2fb047b47c75e\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Noah Campbell &lt;noahcampbell@...&gt;\r\nSubject: Re: [rest-discuss] Re: RESTful M2M Systems and Resource Typing\r\nX-Yahoo-Group-Post: member; u=267214845; y=TM_B2ewho0nHxvVLNSSZoQ3ix9_4kynKdpkSbTIH3yhED6PJRKkpPg\r\nX-Yahoo-Profile: noahsingleton\r\n\r\n\r\n--001636e0b9626da2fb047b47c75e\r\nContent-Type: text/plain; charset=UTF-8\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nSee below...\n\nOn Mon, Dec 21, 2009 at 3:16 PM, Jan Algermissen &lt;algermissen=\r\n1971@...&gt;wrote:\n\n&gt;\n&gt; On Dec 21, 2009, at 11:47 PM, Noah Campbell wrote:=\r\n\n&gt;\n&gt;\n&gt;&gt;\n&gt;&gt; &quot;This would lead to &quot;If you are going to adopt REST with all the=\r\n benefits\n&gt;&gt; do it all the way through and believe that the business level =\r\nharm\n&gt;&gt; occasionally done by evolution costs far less than running a SOAP\n&gt;=\r\n&gt; architecture in the long run.&quot;\n&gt;&gt;\n&gt;&gt; Basically, no.  If your notion that =\r\nSOAP somehow solved the problems that\n&gt;&gt; you&#39;ve identified being an issue i=\r\nn REST then I&#39;m curious how you over came\n&gt;&gt; SOAP&#39;s shortcoming&#39;s.  If anyt=\r\nhing, SOAP is more rigid and this leads to\n&gt;&gt; increase cost in the face of =\r\nchange.  This has nothing to do with SOAP the\n&gt;&gt; architecture, but more SOA=\r\nP the implementation.  WSDL has done more harm\n&gt;&gt; than good, IMO.  I&#39;ve see=\r\nn POX work really well, but again it&#39;s a different\n&gt;&gt; architecture than RES=\r\nT.\n&gt;&gt;\n&gt;&gt; I&#39;m curious how SLA enforcement is achieved with a SOAP architectu=\r\nre?\n&gt;&gt;\n&gt;\n&gt;\n&gt; That is simple with SOAP because the artifact to enforce is th=\r\ne API.\n\n\nWSDL being the API artifact here?\n\n\n&gt; The SLA would be around the =\r\nAPI lifecycle (e.g. once an API is out, it has\n&gt; to persist for three years=\r\n). Not saying that the API is a sufficient means\n&gt; to guarantee stability b=\r\nut it expresses a fixed contract. WS-* simply\n&gt; excludes evolution without =\r\nexplicit versioning (doo, hope that is really\n&gt; correct; not an expert ther=\r\ne). The SLA would only be violated if an existing\n&gt; API would go away. The =\r\nevolution issue is done away with by tightly coupling\n&gt; the components.\n&gt;\n\n=\r\nThe evolution is done away with to the point that it&#39;s very difficult to\nch=\r\nange anything in practice.  It&#39;s my opinion that tight coupling is\nactually=\r\n a risk/liability, but I digress.\n\nVersioning is one means of controlling e=\r\nvolution and RESTful architecture\nsupports it.  There are numerous ways to =\r\nachieve a transition from one\nversion to the next.  SOAP has options as wel=\r\nl, but it can&#39;t take advantage\nof intermediaries to aide in the transition.=\r\n\n\nFor example, a RESTful architecture based on HTTP can use an HTTP load\nba=\r\nlancer to direct traffic to another version (via 301/307 or through pass\nth=\r\nrough proxy) because it can take advantage of the URLs for uniquely\nidentif=\r\nying a resource.  SOAP isn&#39;t so lucky since it tunnels through one\nURL, i.e=\r\n. /context/service, and the proxy would have to inspect the payload\nto know=\r\n where to route it (que the ESB vendor sales pitch here).  SOAP may\npresent=\r\n the appearance of an artifact to establish a SLA, but it may be a\nfalse se=\r\nnse of stability.\n\n\nI&#39;ve also seen RESTful system that include configuratio=\r\nn as the first\ntransition in the client state.  The first response to a url=\r\n is a document\n(xhtml, atom, xml) that has relationships a client becomes t=\r\nightly coupled\nto.  A rel tag with &quot;apiv2&quot; and a link to the v2 version of =\r\nthe service.\n The server cannot retire until all clients evolve to a new ve=\r\nrsion.  The\nclient can start to evolve when a new version is made available=\r\n (they can be\ndone in parallel, but this is an optimization) and the client=\r\n code is rolled\nout.  v2 and v3 of the site can be running side by side if =\r\nnecessary.\n\n\n&gt; (AFAIK anyway)\n&gt;\n&gt; Jan\n&gt;\n&gt;\n&gt;\n&gt;&gt; -Noah\n&gt;&gt;\n&gt;&gt; On Mon, Dec 21, =\r\n2009 at 1:18 PM, Jan Algermissen &lt;algermissen1971@...&gt;\n&gt;&gt; wrote:\n&gt;&gt; Noa=\r\nh,\n&gt;&gt;\n&gt;&gt; (see below),\n&gt;&gt;\n&gt;&gt;\n&gt;&gt; On Dec 21, 2009, at 8:19 PM, Noah Campbell w=\r\nrote:\n&gt;&gt;\n&gt;&gt; &quot;AtomPub for example enables the client *implementor* to assume=\r\n that a GET\n&gt;&gt; on a collection will return an Atom feed document.&quot;\n&gt;&gt;\n&gt;&gt; To=\r\n your prior point, something is broken, but what?  Is it the\n&gt;&gt; architectur=\r\nal style (by asking it on this mailing list it may be that you\n&gt;&gt; think it =\r\nis)?  Is it the transport HTTP?  Is it the specification?  Is it\n&gt;&gt; the imp=\r\nlementor of the server or the client?  Is it something else?\n&gt;&gt;\n&gt;&gt; You focu=\r\ns on the assumption being negative and rightly so, but lets be\n&gt;&gt; formal ab=\r\nout what an assumption is.  You&#39;ve alluded to an assumption not met\n&gt;&gt; as n=\r\negative.\n&gt;&gt;\n&gt;&gt; I is usually not that negative on the open Web because the o=\r\nverall\n&gt;&gt; expectations are not that strict; people allways plan for any kin=\r\nds of\n&gt;&gt; changes to happen and REST advantage here is that the uniform inte=\r\nrface\n&gt;&gt; enables the communication (the talking to each other) to succeed e=\r\nven if\n&gt;&gt; there is an error. Instead of everything falling apart the client=\r\n user or\n&gt;&gt; developer can pick up the clue (e.g. the 406 body) and follow h=\r\ner nose to\n&gt;&gt; fix things.\n&gt;&gt;\n&gt;&gt; But this is a model that is very hard to se=\r\nll inside the enterprise\n&gt;&gt; because the business level contracts require a =\r\ncertain degree of certainty\n&gt;&gt; (e.g. SLAs). Saying &quot;hey, if business transa=\r\nctions suddenly stop working,\n&gt;&gt; look at the lock file and see what the ser=\r\nvice owner suggested as a fix.\n&gt;&gt; Nah, this will not happen evry often, jus=\r\nt be prepared for it in any case&quot;.\n&gt;&gt;\n&gt;&gt; OTH, it might be the price to pay =\r\nfor the evolvability extreme of not\n&gt;&gt; needing any kind of out of band comm=\r\nunication between client and server\n&gt;&gt; developer at all. Possibly, if you c=\r\nompare investment in time and travel\n&gt;&gt; resources etc. involved in discussi=\r\nng interfaces of the SOAP style with the\n&gt;&gt; cost of some missing transactio=\r\nns it might even make a compelling case.\n&gt;&gt; (Like airline rather pay custom=\r\ners some money for overbooked flights than to\n&gt;&gt; make sure that every passe=\r\nnger definitely gets a seat. The latter just costs\n&gt;&gt; less).\n&gt;&gt;\n&gt;&gt; This wou=\r\nld lead to &quot;If you are going to adopt REST with all the benefits\n&gt;&gt; do it a=\r\nll the way through and believe that the business level harm\n&gt;&gt; occasionally=\r\n done by evolution costs far less than running a SOAP\n&gt;&gt; architecture in th=\r\ne long run.\n&gt;&gt;\n&gt;&gt;\n&gt;&gt; If I had to translate this into code it would look lik=\r\ne this:\n&gt;&gt;\n&gt;&gt; fread (buffer, 1, lSize, pFile)\n&gt;&gt;\n&gt;&gt; There is an assumption =\r\nhere given all the variables are initialized\n&gt;&gt; correctly.  Do you see it?\n=\r\n&gt;&gt;\n&gt;&gt; The return value is not checked.  The read may not have read all the =\r\ndata\n&gt;&gt; in the file in this particular call.  Who is the guilty party?  Is =\r\nit the\n&gt;&gt; architecture, POSIX?  Is it the specification,\n&gt;&gt; http://www.cplu=\r\nsplus.com/reference/clibrary/cstdio/fread/? Is it the\n&gt;&gt; implementation, GN=\r\nU? Is it the implementor?  I&#39;d argue it&#39;s the implementor.\n&gt;&gt;  C has a long=\r\n established history of using return values to indicate success\n&gt;&gt; (as well=\r\n as return values...but errno provides a (kludgy?) workaround).\n&gt;&gt;\n&gt;&gt; I wou=\r\nld urge an implementer to understand the architecture style, the\n&gt;&gt; specifi=\r\ncation, the implementation and focus very hard on making sure\n&gt;&gt; assumption=\r\ns like the above are not scattered through out the code.  Since\n&gt;&gt; REST is =\r\nabout two remote systems communicating, I&#39;d argue that any client\n&gt;&gt; must v=\r\nalidate any assumption before proceeding, including checking the error\n&gt;&gt; c=\r\node.  If not, the client will be be brittle, prone to error, and cost more\n=\r\n&gt;&gt; in ongoing maintenance.  Good, robust applications assume nothing.\n&gt;&gt;\n&gt;&gt;=\r\n Let&#39;s assume for a moment the AtomPub spec represents the typical spec for=\r\n\n&gt;&gt; a service.  It assumes RESTful architectural style using the HTTP trans=\r\nport.\n&gt;&gt;  To your point, the service must behave has specified for any goal=\r\n to be\n&gt;&gt; obtained.   Aspects of the http transport &quot;leak&quot; into the interac=\r\ntion even\n&gt;&gt; those it has not been specified.  The spec doesn&#39;t call out al=\r\nl the\n&gt;&gt; different response codes and how to handle them, it relies on thos=\r\ne familiar\n&gt;&gt; with the HTTP transport to deal with those gracefully.  Case =\r\nin point, if\n&gt;&gt; you do:\n&gt;&gt;\n&gt;&gt; GET /\n&gt;&gt; Accept: application/atomsvc+xml\n&gt;&gt;\n&gt;=\r\n&gt; and get a\n&gt;&gt;\n&gt;&gt; 307: Moved Temporarily\n&gt;&gt; Location: /svc.atom\n&gt;&gt;\n&gt;&gt; or\n&gt;&gt;=\r\n\n&gt;&gt; 305: Use Proxy\n&gt;&gt; Location: /proxy/svc.atom\n&gt;&gt;\n&gt;&gt; or\n&gt;&gt;\n&gt;&gt; 401: Unautho=\r\nrized\n&gt;&gt; www-authenticate: basic\n&gt;&gt;\n&gt;&gt; Is this an error?\n&gt;&gt;\n&gt;&gt; Roy thesis d=\r\noesn&#39;t explicitly say yes or no.  However, the argument for a\n&gt;&gt; uniform in=\r\nterface is that the intermediary can participate without affecting\n&gt;&gt; the r=\r\nemote call.  I&#39;ll extrapolate a little in that a uniform interface\n&gt;&gt; provi=\r\ndes a common behavior that permeates all levels of an architecture,\n&gt;&gt; incl=\r\nuding the implementation.  The testers should be not be surprised to see\n&gt;&gt;=\r\n the 3 response outline above and should be able to accommodate\n&gt;&gt; appropri=\r\nately.\n&gt;&gt;\n&gt;&gt;\n&gt;&gt; Agreed and I see your point. But (sorry :-) I&#39;d expect an H=\r\nTTP client\n&gt;&gt; connector to be able to follow these redirects or authenticat=\r\ne on its own\n&gt;&gt; without even propagating it to the next level. Most client =\r\nconnectors do so\n&gt;&gt; (depending on config of course). So, I&#39;d limit what we =\r\nare talking about to\n&gt;&gt; steady states and leave out the transient ones.\n&gt;&gt;\n=\r\n&gt;&gt; However, I understand you to say that an AtomPub client implementation\n&gt;=\r\n&gt; that uses an HTTP client connector must of course implement all of HTTP. =\r\nAnd\n&gt;&gt; yes, I agree that the 406 must be handled correctly. But then? there=\r\n is no\n&gt;&gt; possible recovery from the broken expectation to receive an Atom =\r\nfeed.\n&gt;&gt;\n&gt;&gt;\n&gt;&gt;\n&gt;&gt; Hopefully this response helps move the discussion forward=\r\n :)\n&gt;&gt;\n&gt;&gt; Thanks for keeping up with this. I am just sorry that I seem to b=\r\ne so\n&gt;&gt; unable to get this accross.\n&gt;&gt;\n&gt;&gt; Jan\n&gt;&gt;\n&gt;&gt;\n&gt;&gt;\n&gt;&gt;\n&gt;&gt; -Noah\n&gt;&gt;\n&gt;&gt; On=\r\n Mon, Dec 21, 2009 at 4:35 AM, Jan Algermissen &lt;algermissen1971@...&gt;\n&gt;&gt;=\r\n wrote:\n&gt;&gt;\n&gt;&gt; On Dec 21, 2009, at 1:25 PM, Jorn Wildt wrote:\n&gt;&gt;\n&gt;&gt; &gt; Oh, le=\r\nts backtrack a bit. You said earlier on:\n&gt;&gt; &gt;\n&gt;&gt; &gt;&gt; In the enterprise peopl=\r\ne want to develop clients and services in\n&gt;&gt; &gt;&gt; parallel, shich rules out c=\r\nlient design by inspecting the runtime\n&gt;&gt; &gt;&gt; behavior of a service.\n&gt;&gt; &gt;\n&gt;&gt;=\r\n &gt; Then I said: you need not expect at runtime, you can have a mock. To\n&gt;&gt; =\r\n&gt; this you answered: no, you build clients on specs.\n&gt;&gt; &gt;\n&gt;&gt; &gt; What I was t=\r\nrying to say was: if you build clients on specs and RFC\n&gt;&gt; &gt; 5023 (applicat=\r\nion/atomsrv+xml) is a spec, then what is keeping you\n&gt;&gt; &gt; from building any=\r\n kind of REST client on similar specs for other\n&gt;&gt; &gt; media types? If both s=\r\nerver and client agrees on the media type spec\n&gt;&gt; &gt; then both can be built =\r\nindividually and simultaneously.\n&gt;&gt;\n&gt;&gt;\n&gt;&gt; No, that is all fine and I agree.=\r\n I am questioning the RESTfulness of\n&gt;&gt; specs that allow the clients to mak=\r\ne assumptions about the hypermedia\n&gt;&gt; it will receive at some point in the =\r\ninteraction. AtomPub for example\n&gt;&gt; enables the client *implementor* to ass=\r\nume that a GET on a collection\n&gt;&gt; will return an Atom feed document. This i=\r\ns equivalent to making an\n&gt;&gt; assumption about the application state to be i=\r\nn after the GET to the\n&gt;&gt; collection.\n&gt;&gt;\n&gt;&gt; And I am trying to say that M2M=\r\n clients (besides passibe, server\n&gt;&gt; driven crawlers) can only be built whe=\r\nn such contracts are in place.\n&gt;&gt;\n&gt;&gt; Jan\n&gt;&gt;\n&gt;&gt;\n&gt;&gt; &gt;\n&gt;&gt; &gt; /J=C3=B8rn\n&gt;&gt; &gt;\n&gt;&gt;=\r\n &gt;\n&gt;&gt; &gt;\n&gt;&gt; &gt; ------------------------------------\n&gt;&gt; &gt;\n&gt;&gt; &gt; Yahoo! Groups L=\r\ninks\n&gt;&gt; &gt;\n&gt;&gt; &gt;\n&gt;&gt; &gt;\n&gt;&gt;\n&gt;&gt; --------------------------------------\n&gt;&gt; Jan Alg=\r\nermissen\n&gt;&gt;\n&gt;&gt; Mail: algermissen@...\n&gt;&gt; Blog: http://algermissen.blogsp=\r\not.com/\n&gt;&gt; Home: http://www.jalgermissen.com\n&gt;&gt; ---------------------------=\r\n-----------\n&gt;&gt;\n&gt;&gt;\n&gt;&gt;\n&gt;&gt;\n&gt;&gt;\n&gt;&gt; ------------------------------------\n&gt;&gt;\n&gt;&gt; Ya=\r\nhoo! Groups Links\n&gt;&gt;\n&gt;&gt;\n&gt;&gt;\n&gt;&gt;\n&gt;&gt;\n&gt;&gt; --------------------------------------\n=\r\n&gt;&gt; Jan Algermissen\n&gt;&gt;\n&gt;&gt; Mail: algermissen@...\n&gt;&gt; Blog: http://algermis=\r\nsen.blogspot.com/\n&gt;&gt; Home: http://www.jalgermissen.com\n&gt;&gt; -----------------=\r\n---------------------\n&gt;&gt;\n&gt;&gt;\n&gt;&gt;\n&gt;&gt;\n&gt;&gt;\n&gt;&gt;\n&gt;&gt; \n&gt;&gt;\n&gt;\n&gt; ------------------------=\r\n--------------\n&gt; Jan Algermissen\n&gt;\n&gt; Mail: algermissen@...\n&gt; Blog: http=\r\n://algermissen.blogspot.com/\n&gt; Home: http://www.jalgermissen.com\n&gt; --------=\r\n------------------------------\n&gt;\n&gt;\n&gt;\n&gt;\n\r\n--001636e0b9626da2fb047b47c75e\r\nContent-Type: text/html; charset=UTF-8\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nSee below...&lt;br&gt;&lt;br&gt;&lt;div class=3D&quot;gmail_quote&quot;&gt;On Mon, Dec 21, 2009 at 3:16=\r\n PM, Jan Algermissen &lt;span dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:algermissen197=\r\n1@...&quot;&gt;algermissen1971@...&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote cla=\r\nss=3D&quot;gmail_quote&quot; style=3D&quot;margin:0 0 0 .8ex;border-left:1px #ccc solid;pa=\r\ndding-left:1ex;&quot;&gt;\n&lt;div class=3D&quot;im&quot;&gt;&lt;br&gt;\nOn Dec 21, 2009, at 11:47 PM, Noah=\r\n Campbell wrote:&lt;br&gt;\n&lt;br&gt;\n&lt;/div&gt;&lt;div class=3D&quot;im&quot;&gt;&lt;blockquote class=3D&quot;gmai=\r\nl_quote&quot; style=3D&quot;margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left=\r\n:1ex&quot;&gt;\n&lt;br&gt;\n&lt;br&gt;\n&quot;This would lead to &quot;If you are going to adopt R=\r\nEST with all the benefits do it all the way through and believe that the bu=\r\nsiness level harm occasionally done by evolution costs far less than runnin=\r\ng a SOAP architecture in the long run.&quot;&lt;br&gt;\n\n&lt;br&gt;\nBasically, no. =C2=\r\n=A0If your notion that SOAP somehow solved the problems that you&#39;ve ide=\r\nntified being an issue in REST then I&#39;m curious how you over came SOAP&=\r\n#39;s shortcoming&#39;s. =C2=A0If anything, SOAP is more rigid and this lea=\r\nds to increase cost in the face of change. =C2=A0This has nothing to do wit=\r\nh SOAP the architecture, but more SOAP the implementation. =C2=A0WSDL has d=\r\none more harm than good, IMO. =C2=A0I&#39;ve seen POX work really well, but=\r\n again it&#39;s a different architecture than REST.&lt;br&gt;\n\n&lt;br&gt;\nI&#39;m curio=\r\nus how SLA enforcement is achieved with a SOAP architecture?&lt;br&gt;\n&lt;/blockquo=\r\nte&gt;\n&lt;br&gt;\n&lt;br&gt;&lt;/div&gt;\nThat is simple with SOAP because the artifact to enforc=\r\ne is the API. &lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;WSDL being the API artifact =\r\nhere?&lt;/div&gt;&lt;div&gt;=C2=A0&lt;/div&gt;&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;marg=\r\nin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex;&quot;&gt;\nThe SLA would =\r\nbe around the API lifecycle (e.g. once an API is out, it has to persist for=\r\n three years). Not saying that the API is a sufficient means to guarantee s=\r\ntability but it expresses a fixed contract. WS-* simply excludes evolution =\r\nwithout explicit versioning (doo, hope that is really correct; not an exper=\r\nt there). The SLA would only be violated if an existing API would go away. =\r\nThe evolution issue is done away with by tightly coupling the components.&lt;b=\r\nr&gt;\n&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The evolution is done away with to the =\r\npoint that it&#39;s very difficult to change anything in practice. =C2=A0It=\r\n&#39;s my opinion that tight coupling is actually a risk/liability, but I d=\r\nigress.&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Versioning is one means of controlling ev=\r\nolution and RESTful architecture supports it. =C2=A0There are numerous ways=\r\n to achieve a transition from one version to the next. =C2=A0SOAP has optio=\r\nns as well, but it can&#39;t take advantage of intermediaries to aide in th=\r\ne transition. =C2=A0&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;For example, a RESTful archi=\r\ntecture based on HTTP can use an HTTP load balancer to direct traffic to an=\r\nother version (via 301/307 or through pass through proxy) because it can ta=\r\nke advantage of the URLs for uniquely identifying a resource. =C2=A0SOAP is=\r\nn&#39;t so lucky since it tunnels through one URL, i.e. /context/service, a=\r\nnd the proxy would have to inspect the payload to know where to route it (q=\r\nue the ESB vendor sales pitch here). =C2=A0SOAP may present the appearance =\r\nof an artifact to establish a SLA, but it may be a false sense of stability=\r\n. =C2=A0&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I&#39;ve also seen RESTfu=\r\nl system that include configuration as the first transition in the client s=\r\ntate. =C2=A0The first response to a url is a document (xhtml, atom, xml) th=\r\nat has relationships a client becomes tightly coupled to. =C2=A0A rel tag w=\r\nith &quot;apiv2&quot; and a link to the v2 version of the service. =C2=A0Th=\r\ne server cannot retire until all clients evolve to a new version. =C2=A0The=\r\n client can start to evolve when a new version is made available (they can =\r\nbe done in parallel, but this is an optimization) and the client code is ro=\r\nlled out. =C2=A0v2 and v3 of the site can be running side by side if necess=\r\nary.&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;margin=\r\n:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex;&quot;&gt;&lt;br&gt;\n(AFAIK anywa=\r\ny)&lt;br&gt;\n&lt;br&gt;\nJan&lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;\n&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;ma=\r\nrgin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;/di=\r\nv&gt;&lt;div class=3D&quot;h5&quot;&gt;\n&lt;br&gt;\n-Noah&lt;br&gt;\n&lt;br&gt;\nOn Mon, Dec 21, 2009 at 1:18 PM, J=\r\nan Algermissen &lt;&lt;a href=3D&quot;mailto:algermissen1971@...&quot; target=3D&quot;_bl=\r\nank&quot;&gt;algermissen1971@...&lt;/a&gt;&gt; wrote:&lt;br&gt;\nNoah,&lt;br&gt;\n&lt;br&gt;\n(see below),=\r\n&lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;\nOn Dec 21, 2009, at 8:19 PM, Noah Campbell wrote:&lt;br&gt;\n&lt;br&gt;\n&=\r\nquot;AtomPub for example enables the client *implementor* to assume that a =\r\nGET on a collection will return an Atom feed document.&quot;&lt;br&gt;\n&lt;br&gt;\nTo yo=\r\nur prior point, something is broken, but what? =C2=A0Is it the architectura=\r\nl style (by asking it on this mailing list it may be that you think it is)?=\r\n =C2=A0Is it the transport HTTP? =C2=A0Is it the specification? =C2=A0Is it=\r\n the implementor of the server or the client? =C2=A0Is it something else?&lt;b=\r\nr&gt;\n\n&lt;br&gt;\nYou focus on the assumption being negative and rightly so, but let=\r\ns be formal about what an assumption is. =C2=A0You&#39;ve alluded to an ass=\r\numption not met as negative.&lt;br&gt;\n&lt;br&gt;\nI is usually not that negative on the=\r\n open Web because the overall expectations are not that strict; people allw=\r\nays plan for any kinds of changes to happen and REST advantage here is that=\r\n the uniform interface enables the communication (the talking to each other=\r\n) to succeed even if there is an error. Instead of everything falling apart=\r\n the client user or developer can pick up the clue (e.g. the 406 body) and =\r\nfollow her nose to fix things.&lt;br&gt;\n\n&lt;br&gt;\nBut this is a model that is very h=\r\nard to sell inside the enterprise because the business level contracts requ=\r\nire a certain degree of certainty (e.g. SLAs). Saying &quot;hey, if busines=\r\ns transactions suddenly stop working, look at the lock file and see what th=\r\ne service owner suggested as a fix. Nah, this will not happen evry often, j=\r\nust be prepared for it in any case&quot;.&lt;br&gt;\n\n&lt;br&gt;\nOTH, it might be the pr=\r\nice to pay for the evolvability extreme of not needing any kind of out of b=\r\nand communication between client and server developer at all. Possibly, if =\r\nyou compare investment in time and travel resources etc. involved in discus=\r\nsing interfaces of the SOAP style with the cost of some missing transaction=\r\ns it might even make a compelling case. (Like airline rather pay customers =\r\nsome money for overbooked flights than to make sure that every passenger de=\r\nfinitely gets a seat. The latter just costs less).&lt;br&gt;\n\n&lt;br&gt;\nThis would lea=\r\nd to &quot;If you are going to adopt REST with all the benefits do it all t=\r\nhe way through and believe that the business level harm occasionally done b=\r\ny evolution costs far less than running a SOAP architecture in the long run=\r\n.&lt;br&gt;\n\n&lt;br&gt;\n&lt;br&gt;\nIf I had to translate this into code it would look like th=\r\nis:&lt;br&gt;\n&lt;br&gt;\nfread (buffer, 1, lSize, pFile)&lt;br&gt;\n&lt;br&gt;\nThere is an assumptio=\r\nn here given all the variables are initialized correctly. =C2=A0Do you see =\r\nit?&lt;br&gt;\n&lt;br&gt;\nThe return value is not checked. =C2=A0The read may not have r=\r\nead all the data in the file in this particular call. =C2=A0Who is the guil=\r\nty party? =C2=A0Is it the architecture, POSIX? =C2=A0Is it the specificatio=\r\nn,&lt;a href=3D&quot;http://www.cplusplus.com/reference/clibrary/cstdio/fread/&quot; tar=\r\nget=3D&quot;_blank&quot;&gt;http://www.cplusplus.com/reference/clibrary/cstdio/fread/&lt;/a=\r\n&gt;?=C2=A0Is it the implementation, GNU? Is it the implementor? =C2=A0I&#39;d=\r\n argue it&#39;s the implementor. =C2=A0C has a long established history of =\r\nusing return values to indicate success (as well as return values...but err=\r\nno provides a (kludgy?) workaround).&lt;br&gt;\n\n&lt;br&gt;\nI would urge an implementer =\r\nto understand the architecture style, the specification, the implementation=\r\n and focus very hard on making sure assumptions like the above are not scat=\r\ntered through out the code. =C2=A0Since REST is about two remote systems co=\r\nmmunicating, I&#39;d argue that any client must validate any assumption bef=\r\nore proceeding, including checking the error code. =C2=A0If not, the client=\r\n will be be brittle, prone to error, and cost more in ongoing maintenance. =\r\n=C2=A0Good, robust applications assume nothing.&lt;br&gt;\n\n&lt;br&gt;\nLet&#39;s assume =\r\nfor a moment the AtomPub spec represents the typical spec for a service. =\r\n=C2=A0It assumes RESTful architectural style using the HTTP transport. =C2=\r\n=A0To your point, the service must behave has specified for any goal to be =\r\nobtained. =C2=A0 Aspects of the http transport &quot;leak&quot; into the in=\r\nteraction even those it has not been specified. =C2=A0The spec doesn&#39;t =\r\ncall out all the different response codes and how to handle them, it relies=\r\n on those familiar with the HTTP transport to deal with those gracefully. =\r\n=C2=A0Case in point, if you do:&lt;br&gt;\n\n&lt;br&gt;\nGET /&lt;br&gt;\nAccept: application/ato=\r\nmsvc+xml&lt;br&gt;\n&lt;br&gt;\nand get a&lt;br&gt;\n&lt;br&gt;\n307: Moved Temporarily&lt;br&gt;\nLocation: /=\r\nsvc.atom&lt;br&gt;\n&lt;br&gt;\nor&lt;br&gt;\n&lt;br&gt;\n305: Use Proxy&lt;br&gt;\nLocation: /proxy/svc.atom&lt;=\r\nbr&gt;\n&lt;br&gt;\nor&lt;br&gt;\n&lt;br&gt;\n401: Unauthorized&lt;br&gt;\nwww-authenticate: basic&lt;br&gt;\n&lt;br&gt;=\r\n\nIs this an error?&lt;br&gt;\n&lt;br&gt;\nRoy thesis doesn&#39;t explicitly say yes or no=\r\n. =C2=A0However, the argument for a uniform interface is that the intermedi=\r\nary can participate without affecting the remote call. =C2=A0I&#39;ll extra=\r\npolate a little in that a uniform interface provides a common behavior that=\r\n permeates all levels of an architecture, including the implementation. =C2=\r\n=A0The testers should be not be surprised to see the 3 response outline abo=\r\nve and should be able to accommodate appropriately.&lt;br&gt;\n\n&lt;br&gt;\n&lt;br&gt;\nAgreed a=\r\nnd I see your point. But (sorry :-) I&#39;d expect an HTTP client connector=\r\n to be able to follow these redirects or authenticate on its own without ev=\r\nen propagating it to the next level. Most client connectors do so (dependin=\r\ng on config of course). So, I&#39;d limit what we are talking about to stea=\r\ndy states and leave out the transient ones.&lt;br&gt;\n\n&lt;br&gt;\nHowever, I understand=\r\n you to say that an AtomPub client implementation that uses an HTTP client =\r\nconnector must of course implement all of HTTP. And yes, I agree that the 4=\r\n06 must be handled correctly. But then? there is no possible recovery from =\r\nthe broken expectation to receive an Atom feed.&lt;br&gt;\n\n&lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;\nHopeful=\r\nly this response helps move the discussion forward :)&lt;br&gt;\n&lt;br&gt;\nThanks for k=\r\neeping up with this. I am just sorry that I seem to be so unable to get thi=\r\ns accross.&lt;br&gt;\n&lt;br&gt;\nJan&lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;\n-Noah&lt;br&gt;\n&lt;br&gt;\nOn Mon, Dec =\r\n21, 2009 at 4:35 AM, Jan Algermissen &lt;&lt;a href=3D&quot;mailto:algermissen1971@=\r\nmac.com&quot; target=3D&quot;_blank&quot;&gt;algermissen1971@...&lt;/a&gt;&gt; wrote:&lt;br&gt;\n&lt;br&gt;\n=\r\nOn Dec 21, 2009, at 1:25 PM, Jorn Wildt wrote:&lt;br&gt;\n&lt;br&gt;\n&gt; Oh, lets backt=\r\nrack a bit. You said earlier on:&lt;br&gt;\n&gt;&lt;br&gt;\n&gt;&gt; In the enterprise pe=\r\nople want to develop clients and services in&lt;br&gt;\n&gt;&gt; parallel, shich r=\r\nules out client design by inspecting the runtime&lt;br&gt;\n&gt;&gt; behavior of a=\r\n service.&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; Then I said: you need not expect at runtime, yo=\r\nu can have a mock. To&lt;br&gt;\n&gt; this you answered: no, you build clients on =\r\nspecs.&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; What I was trying to say was: if you build clients=\r\n on specs and RFC&lt;br&gt;\n&gt; 5023 (application/atomsrv+xml) is a spec, then w=\r\nhat is keeping you&lt;br&gt;\n&gt; from building any kind of REST client on simila=\r\nr specs for other&lt;br&gt;\n&gt; media types? If both server and client agrees on=\r\n the media type spec&lt;br&gt;\n&gt; then both can be built individually and simul=\r\ntaneously.&lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;\nNo, that is all fine and I agree. I am questioning=\r\n the RESTfulness of&lt;br&gt;\nspecs that allow the clients to make assumptions ab=\r\nout the hypermedia&lt;br&gt;\nit will receive at some point in the interaction. At=\r\nomPub for example&lt;br&gt;\nenables the client *implementor* to assume that a GET=\r\n on a collection&lt;br&gt;\nwill return an Atom feed document. This is equivalent =\r\nto making an&lt;br&gt;\nassumption about the application state to be in after the =\r\nGET to the&lt;br&gt;\ncollection.&lt;br&gt;\n&lt;br&gt;\nAnd I am trying to say that M2M clients=\r\n (besides passibe, server&lt;br&gt;\ndriven crawlers) can only be built when such =\r\ncontracts are in place.&lt;br&gt;\n&lt;br&gt;\nJan&lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; /J=C3=B8rn=\r\n&lt;br&gt;\n&gt;&lt;br&gt;\n&gt;&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; ------------------------------------&lt;b=\r\nr&gt;\n&gt;&lt;br&gt;\n&gt; Yahoo! Groups Links&lt;br&gt;\n&gt;&lt;br&gt;\n&gt;&lt;br&gt;\n&gt;&lt;br&gt;\n&lt;br&gt;\n--=\r\n------------------------------------&lt;br&gt;\nJan Algermissen&lt;br&gt;\n&lt;br&gt;\nMail: &lt;a =\r\nhref=3D&quot;mailto:algermissen@...&quot; target=3D&quot;_blank&quot;&gt;algermissen@...&lt;/=\r\na&gt;&lt;br&gt;\nBlog: &lt;a href=3D&quot;http://algermissen.blogspot.com/&quot; target=3D&quot;_blank&quot;=\r\n&gt;http://algermissen.blogspot.com/&lt;/a&gt;&lt;br&gt;\nHome: &lt;a href=3D&quot;http://www.jalge=\r\nrmissen.com&quot; target=3D&quot;_blank&quot;&gt;http://www.jalgermissen.com&lt;/a&gt;&lt;br&gt;\n--------=\r\n------------------------------&lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;\n---------------=\r\n---------------------&lt;br&gt;\n&lt;br&gt;\nYahoo! Groups Links&lt;br&gt;\n&lt;br&gt;\n&lt;*&gt; To vi=\r\nsit your group on the web, go to:&lt;br&gt;\n =C2=A0&lt;a href=3D&quot;http://groups.yahoo=\r\n.com/group/rest-discuss/&quot; target=3D&quot;_blank&quot;&gt;http://groups.yahoo.com/group/r=\r\nest-discuss/&lt;/a&gt;&lt;br&gt;\n&lt;br&gt;\n&lt;*&gt; Your email settings:&lt;br&gt;\n =C2=A0Individ=\r\nual Email | Traditional&lt;br&gt;\n&lt;br&gt;\n&lt;*&gt; To change settings online go to:=\r\n&lt;br&gt;\n =C2=A0&lt;a href=3D&quot;http://groups.yahoo.com/group/rest-discuss/join&quot; tar=\r\nget=3D&quot;_blank&quot;&gt;http://groups.yahoo.com/group/rest-discuss/join&lt;/a&gt;&lt;br&gt;\n =C2=\r\n=A0(Yahoo! ID required)&lt;br&gt;\n&lt;br&gt;\n&lt;*&gt; To change settings via email:&lt;br=\r\n&gt;\n =C2=A0&lt;a href=3D&quot;mailto:rest-discuss-digest@yahoogroups.com&quot; target=3D&quot;_=\r\nblank&quot;&gt;rest-discuss-digest@yahoogroups.com&lt;/a&gt;&lt;br&gt;\n =C2=A0&lt;a href=3D&quot;mailto=\r\n:rest-discuss-fullfeatured@yahoogroups.com&quot; target=3D&quot;_blank&quot;&gt;rest-discuss-=\r\nfullfeatured@yahoogroups.com&lt;/a&gt;&lt;br&gt;\n&lt;br&gt;\n&lt;*&gt; To unsubscribe from thi=\r\ns group, send an email to:&lt;br&gt;\n =C2=A0&lt;a href=3D&quot;mailto:rest-discuss-unsubs=\r\ncribe@yahoogroups.com&quot; target=3D&quot;_blank&quot;&gt;rest-discuss-unsubscribe@yahoogrou=\r\nps.com&lt;/a&gt;&lt;br&gt;\n&lt;br&gt;\n&lt;*&gt; Your use of Yahoo! Groups is subject to:&lt;br&gt;\n=\r\n =C2=A0&lt;a href=3D&quot;http://docs.yahoo.com/info/terms/&quot; target=3D&quot;_blank&quot;&gt;http=\r\n://docs.yahoo.com/info/terms/&lt;/a&gt;&lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;\n----------------------=\r\n----------------&lt;br&gt;\nJan Algermissen&lt;br&gt;\n&lt;br&gt;\nMail: &lt;a href=3D&quot;mailto:alger=\r\nmissen@...&quot; target=3D&quot;_blank&quot;&gt;algermissen@...&lt;/a&gt;&lt;br&gt;\nBlog: &lt;a href=\r\n=3D&quot;http://algermissen.blogspot.com/&quot; target=3D&quot;_blank&quot;&gt;http://algermissen.=\r\nblogspot.com/&lt;/a&gt;&lt;br&gt;\nHome: &lt;a href=3D&quot;http://www.jalgermissen.com&quot; target=\r\n=3D&quot;_blank&quot;&gt;http://www.jalgermissen.com&lt;/a&gt;&lt;br&gt;\n---------------------------=\r\n-----------&lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;br&gt;\n&lt;/blockquote=\r\n&gt;&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;div class=3D&quot;h5&quot;&gt;\n&lt;br&gt;\n----------------------------------=\r\n----&lt;br&gt;\nJan Algermissen&lt;br&gt;\n&lt;br&gt;\nMail: &lt;a href=3D&quot;mailto:algermissen@acm.o=\r\nrg&quot; target=3D&quot;_blank&quot;&gt;algermissen@...&lt;/a&gt;&lt;br&gt;\nBlog: &lt;a href=3D&quot;http://a=\r\nlgermissen.blogspot.com/&quot; target=3D&quot;_blank&quot;&gt;http://algermissen.blogspot.com=\r\n/&lt;/a&gt;&lt;br&gt;\nHome: &lt;a href=3D&quot;http://www.jalgermissen.com&quot; target=3D&quot;_blank&quot;&gt;h=\r\nttp://www.jalgermissen.com&lt;/a&gt;&lt;br&gt;\n--------------------------------------&lt;b=\r\nr&gt;\n&lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;\n&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;\n\r\n--001636e0b9626da2fb047b47c75e--\r\n\n"}}
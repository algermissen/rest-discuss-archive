{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":0,"authorName":"Joe Hsy","from":"Joe Hsy &lt;joe.hsy@...&gt;","replyTo":"SENDER","senderId":"tP2QzUsLXNd_hUoxsmCd4X7hSUPBDLVUDwUV8_Fae6DBiWg6ZVcd15Mlbb4bkDeGfhccRQBhpdwuwVAKPCi4yWjPT2k","spamInfo":{"isSpam":false,"reason":"0"},"subject":"RE: [rest-discuss] Dynamic exposing/hiding of Web resources! [was\t: With SOAP the URI does  not directly reference the resource, right?]","postDate":"1023693823","msgId":1445,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDEwMjIzNjcxODJCOEQ1MTFBNzcxMDA1MDhCREYzNDg2MDQ5QTUyOTBAZXhjaGFuZ2UtMS5rZXlub3RlLmNvbT4="},"prevInTopic":0,"nextInTopic":0,"prevInTime":1444,"nextInTime":1446,"topicId":1445,"numMessagesInTopic":1,"msgSnippet":"... From: Roger L. Costello [mailto:costello@mitre.org] Wow!  This is a really interesting idea.  Let me see if I understand your idea.  I work best with a","rawEmail":"Return-Path: &lt;joe.hsy@...&gt;\r\nX-Sender: joe.hsy@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_0_3_2); 10 Jun 2002 07:23:52 -0000\r\nReceived: (qmail 84213 invoked from network); 10 Jun 2002 07:23:52 -0000\r\nReceived: from unknown (66.218.66.216)\n  by m1.grp.scd.yahoo.com with QMQP; 10 Jun 2002 07:23:52 -0000\r\nReceived: from unknown (HELO mailnew.keynote.com) (65.198.48.132)\n  by mta1.grp.scd.yahoo.com with SMTP; 10 Jun 2002 07:23:52 -0000\r\nReceived: from exchange-1.keynote.com (exchange-1.keynote.com [65.198.49.11])\n\tby mailnew.keynote.com (8.12.3/8.12.3) with ESMTP id g5A7Njgc018311;\n\tMon, 10 Jun 2002 00:23:46 -0700 (PDT)\r\nX-Handled-By: mailnew.keynote.com\r\nReceived: by exchange-1.keynote.com with Internet Mail Service (5.5.2653.19)\n\tid &lt;JQLQXGK1&gt;; Mon, 10 Jun 2002 00:23:45 -0700\r\nMessage-ID: &lt;1022367182B8D511A77100508BDF3486049A5290@...&gt;\r\nTo: &quot;&#39;Roger L. Costello&#39;&quot; &lt;costello@...&gt;, rest-discuss@yahoogroups.com\r\nSubject: RE: [rest-discuss] Dynamic exposing/hiding of Web resources! [was\n\t: With SOAP the URI does  not directly reference the resource, right?]\r\nDate: Mon, 10 Jun 2002 00:23:43 -0700\r\nMIME-Version: 1.0\r\nX-Mailer: Internet Mail Service (5.5.2653.19)\r\nContent-Type: multipart/alternative;\n\tboundary=&quot;----_=_NextPart_001_01C2104F.C0085EB0&quot;\r\nFrom: Joe Hsy &lt;joe.hsy@...&gt;\r\nX-Yahoo-Group-Post: public\r\n\r\n\r\n------_=_NextPart_001_01C2104F.C0085EB0\r\nContent-Type: text/plain;\n\tcharset=&quot;iso-8859-1&quot;\r\n\r\n-----Original Message-----\nFrom: Roger L. Costello [mailto:costello@...]\n\n\n\nWow!  This is a really interesting idea.  Let me see if I understand\nyour idea.  I work best with a concrete example, so let&#39;s consider the\nfictitious company, Parts Depot, Inc. One of the services it has\ndeployed is a service to enable clients to get detailed info about a\nspecific part.  For example, if the client is interested in part 00345\nthis is the URI that it would use:\n\n     http://www.parts-depot.com/parts/00345\n&lt;http://www.parts-depot.com/parts/00345&gt; \n\n&lt; ...&gt; \n\nIs this the kind of scenario that you are envisioning?  If so, I have\nsome questions:\n\n1. In actuality, wouldn&#39;t Parts Depot need to deploy the\nshipping-schedule resource at design time?  Isn&#39;t the only run-time\naspect of this scenario the decision of whether or not the URL to the\nshipping-schedule resource is to be provided within the Part document?\n \n\nYes, this is one example of what I was thinking.  My basic thought is that\nif we can design applications where every resource/object is intrinsically\nURL-addressable, it makes it much easier to make changes later which\ninvolves deciding what to hide and what to expose.\n \nIn order to make this feasible, we need a development environment where\nURL-addressability for any object or resource is a built-in feature of the\nsystem and not something that needs to be consciously decided by the\nprogrammer.  This is what I was thinking when I suggested that we create a\nfull-blown distributed OOP development environment that supports REST\nintrinsically.\n \nIt also allows a business/operations to make decisions on what resources to\nexpose and what resources need additional security to be accessed without\nneeding to go back to the developer.\n\n\n2. If the answer to (1) is &quot;yes&quot;, then couldn&#39;t this also be done using\nSOAP?\n \n\nI actually think SOAP is in many ways tangential to this idea.  SOAP is\nconcerned with defining methods of objects/resources and does not deal with\nthe addressaebility of objects/resource.  In fact, URIs are what most\ncurrent SOAP implementations use for addressing.  The fact that people talk\nabout SOAP over SMTP and leveraging email addresses shows that SOAP is not\nconcerned with this issue at all.\n \nWhere SOAP falls down is that it encourages what I call &quot;passing by value&quot;.\nWhen SOAP returns something, it typically returns the actual values as\ndefined by the method description.  However, there is no reason that it\ncan&#39;t return the URIs of the desired resources (pass by reference) instead\nof the value or in additional to the value.  It is simply not enforced nor\nencouraged.\n \nThis is where REST-oriented thinking helps.  It encourages the developer to\nthink in terms of URIs and exposing them as the situation warrants.  It also\nimplements the universal addressability method calls (GET, PUT, POST,\nDELETE) for these URI-addressable objects.\n \nI think what would make REST really concrete to most people as a development\nmethodology is to have an environment and tool set that is extended from a\nwell-understood development environment.  I would like to suggest that java\nand C++ can be extended to make URI-addressability an intrinsic part of\nbeing an object and that this one simple capability would allow people to\nprogram in a more RESTful way much more quickly.\n \nOn the other hand, I think SOAP is a more explicit way to define methods\ncalls of objects than the currently available set of REST tools.  And if we\nadd &quot;passing by reference&quot; as a first level concept into SOAP, I believe it\ncan still play a useful role in such a REST-OOP system.  What I mean by this\nis that we can make it the default to return URIs for a method call unless\nexplicitly specified to be &quot;pass by value&quot;.  We can then return the object\nvalue when we explicitly perform the &quot;GET&quot; call.  By making URIs the core\nresult-passing (or when applicable, parameter passing) mechanism in the SOAP\nprotocol, I think it can become much more RESTful.\n \n//Joe\n \n\nThis email message, and any attachments to it, are for the sole use of the\nintended recipients, and may contain confidential and privileged\ninformation.  Any unauthorized review, use, disclosure or distribution of\nthis email message or its attachments is prohibited.  If you are not the\nintended recipient, please contact the sender by reply email and destroy all\ncopies of the original message. \n\r\n------_=_NextPart_001_01C2104F.C0085EB0\r\nContent-Type: text/html;\n\tcharset=&quot;iso-8859-1&quot;\r\n\r\n&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot;&gt;\n&lt;HTML&gt;&lt;HEAD&gt;\n&lt;META HTTP-EQUIV=&quot;Content-Type&quot; CONTENT=&quot;text/html; charset=iso-8859-1&quot;&gt;\n\n\n&lt;META content=&quot;MSHTML 5.50.4807.2300&quot; name=GENERATOR&gt;&lt;/HEAD&gt;\n&lt;BODY&gt;\n&lt;BLOCKQUOTE \nstyle=&quot;PADDING-LEFT: 5px; MARGIN-LEFT: 5px; BORDER-LEFT: #0000ff 2px solid&quot;&gt;\n  &lt;DIV class=OutlookMessageHeader dir=ltr align=left&gt;&lt;FONT face=Tahoma \n  size=2&gt;-----Original Message-----&lt;BR&gt;&lt;B&gt;From:&lt;/B&gt; Roger L. Costello \n  [mailto:costello@...]&lt;BR&gt;&lt;/FONT&gt;&lt;/DIV&gt;&lt;TT&gt;\n  &lt;DIV&gt;&lt;BR&gt;Wow!&nbsp; This is a really interesting idea.&nbsp; Let me see if I \n  understand&lt;BR&gt;your idea.&nbsp; I work best with a concrete example, so let&#39;s \n  consider the&lt;BR&gt;fictitious company, Parts Depot, Inc. One of the services it \n  has&lt;BR&gt;deployed is a service to enable clients to get detailed info about \n  a&lt;BR&gt;specific part.&nbsp; For example, if the client is interested in part \n  00345&lt;BR&gt;this is the URI that it would use:&lt;BR&gt;&lt;BR&gt;&nbsp;&nbsp;&nbsp;&nbsp; &lt;A \n  href=&quot;http://www.parts-depot.com/parts/00345&quot;&gt;http://www.parts-depot.com/parts/00345&lt;/A&gt;&lt;BR&gt;&lt;BR&gt;&lt;SPAN \n  class=410350205-10062002&gt;&lt;FONT face=Arial color=#0000ff size=2&gt;&lt;FONT \n  face=&quot;Courier New&quot; color=#000000 \n  size=3&gt;&lt;&lt;/FONT&gt;&nbsp;...&gt;&nbsp;&lt;/FONT&gt;&lt;/SPAN&gt;&lt;/DIV&gt;\n  &lt;DIV&gt;&lt;SPAN class=410350205-10062002&gt;&lt;/SPAN&gt;&lt;BR&gt;Is this the kind of scenario \n  that you are envisioning?&nbsp; If so, I have&lt;BR&gt;some questions:&lt;BR&gt;&lt;BR&gt;1. In \n  actuality, wouldn&#39;t Parts Depot need to deploy the&lt;BR&gt;shipping-schedule \n  resource at design time?&nbsp; Isn&#39;t the only run-time&lt;BR&gt;aspect of this \n  scenario the decision of whether or not the URL to the&lt;BR&gt;shipping-schedule \n  resource is to be provided within the Part document?&lt;BR&gt;&lt;SPAN \n  class=410350205-10062002&gt;&lt;FONT face=Arial color=#0000ff \n  size=2&gt;&nbsp;&lt;/FONT&gt;&lt;/SPAN&gt;&lt;/DIV&gt;&lt;/BLOCKQUOTE&gt;\n&lt;DIV&gt;&lt;SPAN class=410350205-10062002&gt;&lt;FONT face=Arial color=#0000ff size=2&gt;Yes, \nthis is one example of what&nbsp;I was thinking.&nbsp; My basic thought is that \nif we can design applications where every \nresource/object&nbsp;is&nbsp;intrinsically URL-addressable, it makes it much \neasier to make changes later which involves deciding what to hide and what to \nexpose.&lt;/FONT&gt;&lt;/SPAN&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;SPAN class=410350205-10062002&gt;&lt;FONT face=Arial color=#0000ff \nsize=2&gt;&lt;/FONT&gt;&lt;/SPAN&gt;&lt;SPAN class=410350205-10062002&gt;&lt;FONT face=Arial \ncolor=#0000ff size=2&gt;&lt;/FONT&gt;&lt;/SPAN&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;SPAN class=410350205-10062002&gt;&lt;FONT face=Arial color=#0000ff size=2&gt;In \norder to make this feasible, we need a development environment where \nURL-addressability for any object or resource&nbsp;is a built-in feature of the \nsystem and not something that needs to be consciously decided by the \nprogrammer.&nbsp; This is what I was thinking when I suggested that we create a \nfull-blown distributed OOP development environment that supports REST \nintrinsically.&lt;/FONT&gt;&lt;/SPAN&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;SPAN class=410350205-10062002&gt;&lt;FONT face=Arial color=#0000ff \nsize=2&gt;&lt;/FONT&gt;&lt;/SPAN&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;SPAN class=410350205-10062002&gt;&lt;FONT face=Arial color=#0000ff size=2&gt;It \nalso allows a business/operations to make decisions on what resources to expose \nand what resources need additional security to be accessed without needing to go \nback to the developer.&lt;/FONT&gt;&lt;/SPAN&gt;&lt;/DIV&gt;\n&lt;BLOCKQUOTE \nstyle=&quot;PADDING-LEFT: 5px; MARGIN-LEFT: 5px; BORDER-LEFT: #0000ff 2px solid&quot;&gt;\n  &lt;DIV&gt;&lt;SPAN class=410350205-10062002&gt;&lt;/SPAN&gt;&lt;BR&gt;2. If the answer to (1) is \n  &quot;yes&quot;, then couldn&#39;t this also be done using&lt;BR&gt;SOAP?&lt;BR&gt;&lt;SPAN \n  class=410350205-10062002&gt;&lt;FONT face=Arial color=#0000ff \n  size=2&gt;&nbsp;&lt;/FONT&gt;&lt;/SPAN&gt;&lt;/DIV&gt;&lt;/BLOCKQUOTE&gt;\n&lt;DIV&gt;&lt;SPAN class=410350205-10062002&gt;&lt;FONT face=Arial color=#0000ff size=2&gt;I \nactually think&nbsp;SOAP is&nbsp;in many ways tangential to this idea.&nbsp; \nSOAP&nbsp;is concerned with defining&nbsp;methods of objects/resources and does \nnot deal with the addressaebility of objects/resource.&nbsp; In fact, URIs are \nwhat most current SOAP&nbsp;implementations&nbsp;use for addressing.&nbsp; The \nfact that people talk about SOAP over SMTP and&nbsp;leveraging email addresses \nshows that SOAP is not concerned with this issue at all.&lt;/FONT&gt;&lt;/SPAN&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;SPAN class=410350205-10062002&gt;&lt;FONT face=Arial color=#0000ff \nsize=2&gt;&lt;/FONT&gt;&lt;/SPAN&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;SPAN class=410350205-10062002&gt;&lt;FONT face=Arial color=#0000ff size=2&gt;Where \nSOAP falls down is that it encourages what I call &quot;passing by value&quot;.&nbsp; When \nSOAP returns something, it typically returns the actual values as defined by the \nmethod description.&nbsp;&nbsp;However, there is no reason that it can&#39;t return \nthe URIs of the desired resources (pass by reference) instead of the value or in \nadditional to the value.&nbsp; It is simply not enforced nor \nencouraged.&lt;/FONT&gt;&lt;/SPAN&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;SPAN class=410350205-10062002&gt;&lt;FONT face=Arial color=#0000ff \nsize=2&gt;&lt;/FONT&gt;&lt;/SPAN&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;SPAN class=410350205-10062002&gt;&lt;FONT face=Arial color=#0000ff size=2&gt;This \nis where REST-oriented thinking helps.&nbsp; It encourages the developer to \nthink in terms of URIs and exposing them as the situation warrants.&nbsp; It \nalso implements the universal addressability&nbsp;method calls (GET, PUT, POST, \nDELETE) for these URI-addressable objects.&lt;/FONT&gt;&lt;/SPAN&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;SPAN class=410350205-10062002&gt;&lt;FONT face=Arial color=#0000ff \nsize=2&gt;&lt;/FONT&gt;&lt;/SPAN&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;SPAN class=410350205-10062002&gt;&lt;FONT face=Arial color=#0000ff size=2&gt;I \nthink what would make REST really concrete to&nbsp;most people as a development \nmethodology is to have an environment and tool set that is extended from a \nwell-understood development environment.&nbsp; I would like to suggest that java \nand C++ can&nbsp;be extended to make URI-addressability&nbsp;an intrinsic part \nof being an object and that this one simple capability would allow people to \nprogram in a more RESTful way much more quickly.&lt;/FONT&gt;&lt;/SPAN&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;SPAN class=410350205-10062002&gt;&lt;FONT face=Arial color=#0000ff \nsize=2&gt;&lt;/FONT&gt;&lt;/SPAN&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;SPAN class=410350205-10062002&gt;&lt;FONT face=Arial color=#0000ff size=2&gt;On the \nother hand, I think SOAP is a more explicit way to&nbsp;define methods calls of \nobjects than the currently available set of REST tools.&nbsp;&nbsp;And if we add \n&quot;passing by reference&quot; as a first level concept into SOAP, I believe it can \nstill play a useful role in such a REST-OOP system.&nbsp; What I mean by this is \nthat we can make it the default to return URIs for a method call unless \nexplicitly specified to be &quot;pass by value&quot;.&nbsp; We can then return the object \nvalue when we explicitly perform the &quot;GET&quot; call.&nbsp; By making URIs the core \nresult-passing (or when applicable, parameter passing) mechanism in the SOAP \nprotocol, I think it can become much more RESTful.&lt;/FONT&gt;&lt;/SPAN&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;SPAN class=410350205-10062002&gt;&lt;FONT face=Arial color=#0000ff \nsize=2&gt;&lt;/FONT&gt;&lt;/SPAN&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;SPAN class=410350205-10062002&gt;&lt;FONT face=Arial color=#0000ff \nsize=2&gt;//Joe&lt;/FONT&gt;&lt;/SPAN&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;SPAN class=410350205-10062002&gt;&lt;/SPAN&gt;&lt;/TT&gt;&lt;SPAN \nclass=410350205-10062002&gt;&lt;FONT face=Arial color=#0000ff \nsize=2&gt;&lt;/FONT&gt;&lt;/SPAN&gt;&nbsp;&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;\n&lt;BR&gt;\n\n&lt;P&gt;&lt;B&gt;&lt;I&gt;&lt;FONT SIZE=2 FACE=&quot;Arial&quot;&gt;This email message, and any attachments to it, are for the sole use of the intended recipients, and may contain confidential and privileged information.  Any unauthorized review, use, disclosure or distribution of this email message or its attachments is prohibited.  If you are not the intended recipient, please contact the sender by reply email and destroy all copies of the original message.&lt;/FONT&gt;&lt;/I&gt;&lt;/B&gt; &lt;/P&gt;\n\r\n------_=_NextPart_001_01C2104F.C0085EB0--\r\n\n"}}
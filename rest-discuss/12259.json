{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":319607554,"authorName":"Assaf Arkin","from":"Assaf Arkin &lt;assaf@...&gt;","profile":"assafarkin","replyTo":"SENDER","senderId":"nx-QcmG42Kv6kHxvM28GNKq3aKDdOc3Tnl-snNOMJRsojZp1p2sqChnP0bCCT9yF4EGgmCgNRlFFUoTKwLFOyezZloRwYbg","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] An approach to deleting multiple resources use one \tDELETE","postDate":"1237448490","msgId":12259,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDUwMzdiNmU0MDkwMzE5MDA0MXI1MzYwZTA4ZGlmNzE4ZTI3MDQ5MDQwYTljQG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PDIwMDkwMzE4MjEwNTI3LmZlNDJkYWZlLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","referencesHeader":"PGU3OGJkYmMwMDkwMjI0MDczOHY0ODRkNmU5NGg0NDQ5ZWIwYjY3YTI4ZDJlQG1haWwuZ21haWwuY29tPgkgPDUwMzdiNmU0MDkwMzE4MDk1N2c3MGMyNmQ1OHE2ZmNkODllY2JkMjMwYzk3QG1haWwuZ21haWwuY29tPgkgPDIwMDkwMzE4MTUxOTM2LjQ5MzM5ZmU0LmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JIDw1MDM3YjZlNDA5MDMxODE0MjVwNjZjYTU3OGV1ZjY1YjM0MDI3Y2RjYjhhZUBtYWlsLmdtYWlsLmNvbT4JIDwyMDA5MDMxODE2MzYwMS40MDQ3ZDA2Yi5lcmljQGJpc29uc3lzdGVtcy5uZXQ+CSA8NTAzN2I2ZTQwOTAzMTgxNjM4bjU1YWFjN2UwbjM3ZDIyZGMzYmMxNGIxNzBAbWFpbC5nbWFpbC5jb20+CSA8MjAwOTAzMTgyMTA1MjcuZmU0MmRhZmUuZXJpY0BiaXNvbnN5c3RlbXMubmV0Pg=="},"prevInTopic":12258,"nextInTopic":12260,"prevInTime":12258,"nextInTime":12260,"topicId":12154,"numMessagesInTopic":112,"msgSnippet":"... Updating one resource by means of another is a very common use case. And resources are allowed to share state, that has never been an issue. Assaf","rawEmail":"Return-Path: &lt;assaf@...&gt;\r\nX-Sender: assaf@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 38319 invoked from network); 19 Mar 2009 07:41:31 -0000\r\nX-Received: from unknown (69.147.108.201)\n  by 98.137.34.37 with QMQP; 19 Mar 2009 07:41:31 -0000\r\nX-Received: from unknown (HELO rv-out-0708.google.com) (209.85.198.245)\n  by mta2.grp.re1.yahoo.com with SMTP; 19 Mar 2009 07:41:30 -0000\r\nX-Received: by rv-out-0708.google.com with SMTP id f25so387024rvb.26\n        for &lt;rest-discuss@yahoogroups.com&gt;; Thu, 19 Mar 2009 00:41:30 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.140.139.3 with SMTP id m3mr652146rvd.77.1237448490189; Thu, 19 \n\tMar 2009 00:41:30 -0700 (PDT)\r\nIn-Reply-To: &lt;20090318210527.fe42dafe.eric@...&gt;\r\nReferences: &lt;e78bdbc00902240738v484d6e94h4449eb0b67a28d2e@...&gt;\n\t &lt;5037b6e40903180957g70c26d58q6fcd89ecbd230c97@...&gt;\n\t &lt;20090318151936.49339fe4.eric@...&gt;\n\t &lt;5037b6e40903181425p66ca578euf65b34027cdcb8ae@...&gt;\n\t &lt;20090318163601.4047d06b.eric@...&gt;\n\t &lt;5037b6e40903181638n55aac7e0n37d22dc3bc14b170@...&gt;\n\t &lt;20090318210527.fe42dafe.eric@...&gt;\r\nDate: Thu, 19 Mar 2009 00:41:30 -0700\r\nMessage-ID: &lt;5037b6e40903190041r5360e08dif718e27049040a9c@...&gt;\r\nTo: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nCc: Dong Liu &lt;edongliu@...&gt;, Rest List &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Type: multipart/alternative; boundary=000e0cd22b24af8518046573ed05\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Assaf Arkin &lt;assaf@...&gt;\r\nSubject: Re: [rest-discuss] An approach to deleting multiple resources use one \n\tDELETE\r\nX-Yahoo-Group-Post: member; u=319607554; y=SHQoaoQdt3y-531uHhz-qu4RtIOJhVD5n9BffYjwlEZqH5O4-Q\r\nX-Yahoo-Profile: assafarkin\r\n\r\n\r\n--000e0cd22b24af8518046573ed05\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: 7bit\r\n\r\nOn Wed, Mar 18, 2009 at 8:05 PM, Eric J. Bowman &lt;eric@...&gt;wrote:\n\n&gt; Assaf Arkin wrote:\n&gt;\n&gt; &gt;\n&gt; &gt; &gt; If an API doesn&#39;t implement DELETE, and also doesn&#39;t use POST for\n&gt; &gt; &gt; anything but deletion (single or batch), and the options are\n&gt; &gt; &gt; presented in an HTML form then yes, it&#39;s a uniform interface.\n&gt; &gt; &gt; However, once DELETE is also implemented, or if POST is used for\n&gt; &gt; &gt; anything else like accepting content uploads, the interface is no\n&gt; &gt; &gt; longer uniform, unless and until the previous usage of POST to\n&gt; &gt; &gt; delete is deprecated.\n&gt; &gt;\n&gt; &gt;\n&gt; &gt; What would be the litmus test?\n&gt; &gt;\n&gt;\n&gt; Each request method should map to one and only one action, each action\n&gt; should map to one and only one method, each method should mean the same\n&gt; thing for all resources controlled by the application.  This results in\n&gt; a &quot;consistent set of semantics for all resources&quot; and avoids the\n&gt; problems of the early Web which precluded caching, as per Fielding\n&gt; 5.1.4.\n&gt;\n&gt; &gt;\n&gt; &gt; &gt; The fact remains, that only the use of the DELETE method on a\n&gt; &gt; &gt; URI-by- URI basis is visible to intermediaries.  This is the only\n&gt; &gt; &gt; way to prevent the user who requested the deletion from reloading\n&gt; &gt; &gt; the deleted content from cache.  Except, of course, to not cache\n&gt; &gt; &gt; anything -- thereby defeating the entire premise of using REST to\n&gt; &gt; &gt; begin with...\n&gt; &gt;\n&gt; &gt;\n&gt; &gt; The example this thread started from creates a unique resource using\n&gt; &gt; PUT only to immediately discard it using DELETE, without ever\n&gt; &gt; retrieving that resource.\n&gt; &gt;\n&gt;\n&gt; Presumably, the user has retrieved the unique entries to be deleted, in\n&gt; order to know they need deletion.  If I send the server a list of URLs\n&gt; to be deleted, or create a &quot;delete factory&quot; resource, then I&#39;m not\n&gt; transferring a representation of any application state -- no matter if\n&gt; it&#39;s retrieved or not.\n&gt;\n&gt; &gt;\n&gt; &gt; I provided some justification for why it would be better to replace\n&gt; &gt; the PUT/DELETE pair with a POST, likely against a resource that will\n&gt; &gt; never be retrieved. I think that falls under the uniform interface.\n&gt; &gt;\n&gt;\n&gt; No, in a uniform interface, an action is taken against a target URI.\n&gt; If the resource to be deleted has a URI, then a DELETE request is made\n&gt; against that URI -- not some other URI and/or some other method.  Your\n&gt; POST solution consists of multiple instructions to the server, not a\n&gt; representation of an application state.  That&#39;s RPC, not REST.\n&gt;\n&gt; &gt;\n&gt; &gt; I&#39;m not interested in forcing caching down the throat of this use\n&gt; &gt; case: the only interesting resources we operate on are never\n&gt; &gt; retrieved. So strawman aside, why is this use of POST not uniform\n&gt; &gt; interface?\n&gt; &gt;\n&gt;\n&gt; This is no strawman argument.  If, in order for an API to function as\n&gt; its developer intends, caching must be disabled:  then the developer\n&gt; must ask himself if his API is RESTful.  &quot;Do you Etag?&quot;  If you can&#39;t\n&gt; cache representations of the individual resources you intend to subject\n&gt; to batch delete, in order to make batch delete work, then you&#39;ve\n&gt; obviously broken the uniform interface constraint.  If you hadn&#39;t,\n&gt; you&#39;d be able to cache without it breaking your API.\n&gt;\n&gt; You&#39;re saying that the &quot;only interesting resources we operate on&quot;\n&gt; doesn&#39;t include the individual resources making up the delete batch.\n&gt; I&#39;m saying that yes, those individual resources *are* the interesting\n&gt; resources, and it&#39;s *those* URIs we want to DELETE, not some other URI\n&gt; acting as a temporary stand-in.\n&gt;\n&gt; &gt;\n&gt; &gt; Separately, cache control has provisions for preventing clients from\n&gt; &gt; reloading deleted content, and often enough, the deleted content we\n&gt; &gt; want them to forget is not deleted by them. So you can cache\n&gt; &gt; resources and be able to magically remove not by DELETE and be very\n&gt; &gt; uniform interface about it.\n&gt; &gt;\n&gt;\n&gt; The only intermediaries of interest here, are those between the user\n&gt; who requests the DELETE and the server.  No other user requested the\n&gt; deletion, though -- the only person who might wish to confirm that an\n&gt; offensive comment has been removed is the moderator who decided to\n&gt; remove it.  When that moderator reloads the offensive comment, or the\n&gt; thread that used to contain it, the deleted comment should never, ever\n&gt; appear.  This is very, very simple to accomplish -- explicitly DELETE\n&gt; the URI assigned to the offensive content.\n&gt;\n&gt; This does nothing about keeping other users from continuing to see the\n&gt; comment until its cache-control values expire.  But those users didn&#39;t\n&gt; request the DELETE, either.  In a batch-delete situation which bypasses\n&gt; the DELETE method, nothing is visible to intermediaries, and any cached\n&gt; resource won&#39;t be expired, leading the hypothetical moderator who wants\n&gt; to confirm the deletion to see the resource is still there, try\n&gt; deleting it again, get a failure message, and become very confused.\n\n\n&gt; If you are removing one resource by manipulating some other resource,\n&gt; then you haven&#39;t designed a uniform interface.  REST is about\n&gt; performing each discrete action against a resource by manipulating that\n&gt; resource directly at its URI.  Not some other URI.  This is fundamental.\n&gt;\n\nUpdating one resource by means of another is a very common use case. And\nresources are allowed to share state, that has never been an issue.\n\nAssaf\n\n\n&gt;\n&gt; -Eric\n&gt;\n\r\n--000e0cd22b24af8518046573ed05\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;div class=3D&quot;gmail_quote&quot;&gt;On Wed, Mar 18, 2009 at 8:05 PM, Eric J. Bowman =\r\n&lt;span dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:eric@...&quot;&gt;eric@bisonsy=\r\nstems.net&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote class=3D&quot;gmail_quote&quot; style=\r\n=3D&quot;margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex;&quot;&gt;\n&lt;div c=\r\nlass=3D&quot;im&quot;&gt;Assaf Arkin wrote:&lt;br&gt;\n&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; &gt; If an API doesn&=\r\n#39;t implement DELETE, and also doesn&#39;t use POST for&lt;br&gt;\n&gt; &gt; any=\r\nthing but deletion (single or batch), and the options are&lt;br&gt;\n&gt; &gt; pre=\r\nsented in an HTML form then yes, it&#39;s a uniform interface.&lt;br&gt;\n&gt; &gt=\r\n; However, once DELETE is also implemented, or if POST is used for&lt;br&gt;\n&gt;=\r\n &gt; anything else like accepting content uploads, the interface is no&lt;br&gt;=\r\n\n&gt; &gt; longer uniform, unless and until the previous usage of POST to&lt;b=\r\nr&gt;\n&gt; &gt; delete is deprecated.&lt;br&gt;\n&gt;&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; What would be=\r\n the litmus test?&lt;br&gt;\n&gt;&lt;br&gt;\n&lt;br&gt;\n&lt;/div&gt;Each request method should map to=\r\n one and only one action, each action&lt;br&gt;\nshould map to one and only one me=\r\nthod, each method should mean the same&lt;br&gt;\nthing for all resources controll=\r\ned by the application. =A0This results in&lt;br&gt;\na &quot;consistent set of sem=\r\nantics for all resources&quot; and avoids the&lt;br&gt;\nproblems of the early Web=\r\n which precluded caching, as per Fielding&lt;br&gt;\n5.1.4.&lt;br&gt;\n&lt;div class=3D&quot;im&quot;&gt;=\r\n&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; &gt; The fact remains, that only the use of the DELETE m=\r\nethod on a&lt;br&gt;\n&gt; &gt; URI-by- URI basis is visible to intermediaries. =\r\n=A0This is the only&lt;br&gt;\n&gt; &gt; way to prevent the user who requested the=\r\n deletion from reloading&lt;br&gt;\n&gt; &gt; the deleted content from cache. =A0E=\r\nxcept, of course, to not cache&lt;br&gt;\n&gt; &gt; anything -- thereby defeating =\r\nthe entire premise of using REST to&lt;br&gt;\n&gt; &gt; begin with...&lt;br&gt;\n&gt;&lt;br=\r\n&gt;\n&gt;&lt;br&gt;\n&gt; The example this thread started from creates a unique resou=\r\nrce using&lt;br&gt;\n&gt; PUT only to immediately discard it using DELETE, without=\r\n ever&lt;br&gt;\n&gt; retrieving that resource.&lt;br&gt;\n&gt;&lt;br&gt;\n&lt;br&gt;\n&lt;/div&gt;Presumably=\r\n, the user has retrieved the unique entries to be deleted, in&lt;br&gt;\norder to =\r\nknow they need deletion. =A0If I send the server a list of URLs&lt;br&gt;\nto be d=\r\neleted, or create a &quot;delete factory&quot; resource, then I&#39;m not&lt;b=\r\nr&gt;\ntransferring a representation of any application state -- no matter if&lt;b=\r\nr&gt;\nit&#39;s retrieved or not.&lt;br&gt;\n&lt;div class=3D&quot;im&quot;&gt;&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; I pr=\r\novided some justification for why it would be better to replace&lt;br&gt;\n&gt; th=\r\ne PUT/DELETE pair with a POST, likely against a resource that will&lt;br&gt;\n&gt;=\r\n never be retrieved. I think that falls under the uniform interface.&lt;br&gt;\n&g=\r\nt;&lt;br&gt;\n&lt;br&gt;\n&lt;/div&gt;No, in a uniform interface, an action is taken against a =\r\ntarget URI.&lt;br&gt;\nIf the resource to be deleted has a URI, then a DELETE requ=\r\nest is made&lt;br&gt;\nagainst that URI -- not some other URI and/or some other me=\r\nthod. =A0Your&lt;br&gt;\nPOST solution consists of multiple instructions to the se=\r\nrver, not a&lt;br&gt;\nrepresentation of an application state. =A0That&#39;s RPC, =\r\nnot REST.&lt;br&gt;\n&lt;div class=3D&quot;im&quot;&gt;&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; I&#39;m not interested i=\r\nn forcing caching down the throat of this use&lt;br&gt;\n&gt; case: the only inter=\r\nesting resources we operate on are never&lt;br&gt;\n&gt; retrieved. So strawman as=\r\nide, why is this use of POST not uniform&lt;br&gt;\n&gt; interface?&lt;br&gt;\n&gt;&lt;br&gt;\n&lt;=\r\nbr&gt;\n&lt;/div&gt;This is no strawman argument. =A0If, in order for an API to funct=\r\nion as&lt;br&gt;\nits developer intends, caching must be disabled: =A0then the dev=\r\neloper&lt;br&gt;\nmust ask himself if his API is RESTful. =A0&quot;Do you Etag?&qu=\r\not; =A0If you can&#39;t&lt;br&gt;\ncache representations of the individual resourc=\r\nes you intend to subject&lt;br&gt;\nto batch delete, in order to make batch delete=\r\n work, then you&#39;ve&lt;br&gt;\nobviously broken the uniform interface constrain=\r\nt. =A0If you hadn&#39;t,&lt;br&gt;\nyou&#39;d be able to cache without it breaking=\r\n your API.&lt;br&gt;\n&lt;br&gt;\nYou&#39;re saying that the &quot;only interesting resou=\r\nrces we operate on&quot;&lt;br&gt;\ndoesn&#39;t include the individual resources m=\r\naking up the delete batch.&lt;br&gt;\nI&#39;m saying that yes, those individual re=\r\nsources *are* the interesting&lt;br&gt;\nresources, and it&#39;s *those* URIs we w=\r\nant to DELETE, not some other URI&lt;br&gt;\nacting as a temporary stand-in.&lt;br&gt;\n&lt;=\r\ndiv class=3D&quot;im&quot;&gt;&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; Separately, cache control has provision=\r\ns for preventing clients from&lt;br&gt;\n&gt; reloading deleted content, and often=\r\n enough, the deleted content we&lt;br&gt;\n&gt; want them to forget is not deleted=\r\n by them. So you can cache&lt;br&gt;\n&gt; resources and be able to magically remo=\r\nve not by DELETE and be very&lt;br&gt;\n&gt; uniform interface about it.&lt;br&gt;\n&gt;&lt;=\r\nbr&gt;\n&lt;br&gt;\n&lt;/div&gt;The only intermediaries of interest here, are those between =\r\nthe user&lt;br&gt;\nwho requests the DELETE and the server. =A0No other user reque=\r\nsted the&lt;br&gt;\ndeletion, though -- the only person who might wish to confirm =\r\nthat an&lt;br&gt;\noffensive comment has been removed is the moderator who decided=\r\n to&lt;br&gt;\nremove it. =A0When that moderator reloads the offensive comment, or=\r\n the&lt;br&gt;\nthread that used to contain it, the deleted comment should never, =\r\never&lt;br&gt;\nappear. =A0This is very, very simple to accomplish -- explicitly D=\r\nELETE&lt;br&gt;\nthe URI assigned to the offensive content.&lt;br&gt;\n&lt;br&gt;\nThis does not=\r\nhing about keeping other users from continuing to see the&lt;br&gt;\ncomment until=\r\n its cache-control values expire. =A0But those users didn&#39;t&lt;br&gt;\nrequest=\r\n the DELETE, either. =A0In a batch-delete situation which bypasses&lt;br&gt;\nthe =\r\nDELETE method, nothing is visible to intermediaries, and any cached&lt;br&gt;\nres=\r\nource won&#39;t be expired, leading the hypothetical moderator who wants&lt;br=\r\n&gt;\nto confirm the deletion to see the resource is still there, try&lt;br&gt;\ndelet=\r\ning it again, get a failure message, and become very confused.&lt;/blockquote&gt;=\r\n&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;margin:0 0 0 .8ex;border-left:1p=\r\nx #ccc solid;padding-left:1ex;&quot;&gt;\n&lt;br&gt;\nIf you are removing one resource by m=\r\nanipulating some other resource,&lt;br&gt;\nthen you haven&#39;t designed a unifor=\r\nm interface. =A0REST is about&lt;br&gt;\nperforming each discrete action against a=\r\n resource by manipulating that&lt;br&gt;\nresource directly at its URI. =A0Not som=\r\ne other URI. =A0This is fundamental.&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;d=\r\niv&gt;Updating one resource by means of another is a very common use case. And=\r\n resources are allowed to share state, that has never been an issue.&lt;/div&gt;\n=\r\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Assaf&lt;/div&gt;&lt;div&gt;=A0&lt;/div&gt;&lt;/div&gt;&lt;blockquote class=3D&quot;gma=\r\nil_quote&quot; style=3D&quot;margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-lef=\r\nt:1ex;&quot;&gt;\n&lt;font color=3D&quot;#888888&quot;&gt;&lt;br&gt;\n-Eric&lt;br&gt;\n&lt;/font&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;=\r\nbr&gt;\n\r\n--000e0cd22b24af8518046573ed05--\r\n\n"}}
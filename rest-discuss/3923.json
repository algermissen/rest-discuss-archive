{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":4849001,"authorName":"Alex Jacobson","from":"Alex Jacobson &lt;alex@...&gt;","profile":"shop2it","replyTo":"SENDER","senderId":"xI8evg4vOfD7WfYzlqTuffk9WzrxwW3DZ3afvhJAeR6SvkL_HYuFdNxtAHFVjoYJu2Rw-h9HEIuheYPXrxIq42Li","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] The truth about POST?","postDate":"1061503793","msgId":3923,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDE3NzgxMzExMS4xMDYxNDg5MzkzQGxvY2FsaG9zdD4=","inReplyToHeader":"PDAwN2IwMWMzNjc1MiQwYmUxYzMzMCRhMDAwYThjMEBTZWFpcnRoQTMxPg==","referencesHeader":"PDAwMGUwMWMzNjMzMSRjZWFkNTg0MCRhMDAwYThjMEBTZWFpcnRoQTMxPiA8NDQ0MjU3MzM4LjEwNjEyOTU5MDdAbG9jYWxob3N0PiA8MDAyNTAxYzM2NmIzJGRiNzJmODcwJDA5MDJhOGMwQFdhbGRlbj4gPDc2MjgyMzA4LjEwNjEzODc4NjJAbG9jYWxob3N0PiA8MDA3YjAxYzM2NzUyJDBiZTFjMzMwJGEwMDBhOGMwQFNlYWlydGhBMzE+"},"prevInTopic":3922,"nextInTopic":3924,"prevInTime":3922,"nextInTime":3924,"topicId":3913,"numMessagesInTopic":12,"msgSnippet":"... Because unless the server knows what the client intends in making a request, it cannot return 200 OK.  If the client has no idea what the result of a POST","rawEmail":"Return-Path: &lt;alex@...&gt;\r\nX-Sender: alex@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 23240 invoked from network); 22 Aug 2003 00:19:36 -0000\r\nReceived: from unknown (66.218.66.218)\n  by m14.grp.scd.yahoo.com with QMQP; 22 Aug 2003 00:19:36 -0000\r\nReceived: from unknown (HELO mailgate.vo.com) (208.45.6.97)\n  by mta3.grp.scd.yahoo.com with SMTP; 22 Aug 2003 00:19:36 -0000\r\nReceived: from [192.168.1.72] (firewall.websterscafe.com [209.53.149.59])\n\t(using TLSv1 with cipher EDH-RSA-DES-CBC3-SHA (168/168 bits))\n\t(No client certificate requested)\n\tby mailgate.vo.com (Postfix) with ESMTP\n\tid CD68287E96; Thu, 21 Aug 2003 20:19:00 -0400 (EDT)\r\nDate: Thu, 21 Aug 2003 18:09:53 -0400\r\nTo: Seairth Jacobs &lt;seairth@...&gt;,\n\trest-discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nSubject: Re: [rest-discuss] The truth about POST?\r\nMessage-ID: &lt;177813111.1061489393@localhost&gt;\r\nIn-Reply-To: &lt;007b01c36752$0be1c330$a000a8c0@SeairthA31&gt;\r\nReferences: &lt;000e01c36331$cead5840$a000a8c0@SeairthA31&gt;\n &lt;444257338.1061295907@localhost&gt; &lt;002501c366b3$db72f870$0902a8c0@Walden&gt;\n &lt;76282308.1061387862@localhost&gt; &lt;007b01c36752$0be1c330$a000a8c0@SeairthA31&gt;\r\nX-Mailer: Mulberry/3.0.3 (Win32)\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=us-ascii; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nContent-Disposition: inline\r\nX-eGroups-From: Alex Jacobson &lt;alex@...&gt;\r\nFrom: Alex Jacobson &lt;alex@...&gt;\r\nX-Yahoo-Group-Post: member; u=4849001\r\nX-Yahoo-Profile: shop2it\r\n\r\n&gt; Why does the client need to know anything more than what it POSTs and what\n&gt; is returned?\n\nBecause unless the server knows what the client intends in making a \nrequest, it cannot return 200 OK.  If the client has no idea what the \nresult of a POST actually will be then the server can have no idea what the \nclient&#39;s intention was in making the POST.  If the server has no idea what \nthe client&#39;s intention was in making the POST it cannot make the claim that \n&quot;The request has succeeded.&quot;(RFC2616 10.2.1)\n\n&gt; In the case of RNA [...] The client knows\n&gt; what a request entity with a content-type of\n&gt; application/rna.notification+xml is.  It knows that, upon receiving a 2xx\n&gt; response, the resource accepted the request entity.\n\nAnd did what with it?  What did the client intend in POSTing the \nnotification?\n\n&gt;&gt; If you do insist on using POST then implicitly you are saying that the\n&gt;&gt; client can acquire this model from within HTTP itself (without reference\n&gt;&gt; to custom resource APIs).  I think the only way HTTP provides for\n&gt;&gt; acquiring this model is by the client knowing the content-type of the\n&gt;&gt; target resource.\n&gt;\n&gt; I do not see why content-type would be enough.  For example, what would it\n&gt; mean to a client that a resource (as perceived through its representation)\n&gt; is an image/jpeg or application/xml?\n\nAssuming that the server returned the content-type in response to a raw-GET \nor raw-HEAD, the client knows that:\n1. The server will act as if the resource is an instance of that \ncontent-type (even if its internal-representation/storage-model is \ndifferent).  Therefore a change of content-type in response to another \nraw-GET or raw-HEAD implies a change of state not simply a change in the \nrepresentation of that state.\n\n2. The server will not return 413 Media Type Not Supported in response to a \nPUT of that content-type\n\n3. If it is meaningful for another content-type to be a subordinate of the \nresource&#39;s content-type, the server will not return 413 in response to a \nPOST of that content-type to that URI AND if the server returns 200, it \nwill in fact make the POSTed entity of the resource in the manner implied \nby the content-type.  Since image/jpeg and application/xml do not provide a \nmeaning for another entity to be subordinate, the server may return either \n413 or 405 in response to a POST to that resource.\n\n&gt; How does that tell a client whether\n&gt; you can GET, POST, PUT, or DELETE?\n\nstatus codes and content-type.\n\nBut the real question is again how the server knows whether to return 200 \nOK in response to such a request?  It can only return 200 OK if it knows \nwhat the client requested.  Since the intentions of a GET, PUT, and DELETE \nare obvious (though Yannick&#39;s original notification spec violated even \nDELETE), the only question left is how the server should interpret a POST \nrequest.  Unless there is a private out of band communication with the \nclient, the only way it can constrain the meaning of POST enough to return \n200 is via the relation between the resource content-type and the POSTed \ncontent-type.  If the resource has no content-type, the server has no idea \nwhat the client means when it requests that the POSTed entity be made \nsubordinate to that resource.\n\n&gt;&gt; Alternative question for Seairth: If you do insist on using POST, how\n&gt;&gt; does the client know what it means?\n&gt;\n&gt; What is &quot;it&quot;? The POST request?  The server?\n\nI will rephrase the question: If the client makes a POST request, how does \nthe server know what the client intended well enough to fulfill the request \nand claim that it succeeded by returning 200 OK?\n\n&gt;&gt; Yet another version of this same question: Can you give an example of how\n&gt;&gt; a server could in theory return 200 and still violate the semantics of\n&gt; POST?\n&gt;\n&gt; Is that question correct?  You seem to be asking me to give an example to\n&gt; disprove myself... I think...\n\nIf you can&#39;t give such an example, you need to explain why RFC2616 did not \ndefine POST simply as a catchall request that the server do some arbitrary \nserver determined action with the request entity.  You need to explain all \nthe verbiage about subordinate resources etc etc.\n\nAnd, if you do believe POST is just such a catchall method, you actually \nneed to explain why they bothered to define POST at all because then under \nyour interpretation POST has no particular identifiable semantics and \ntherefore &quot;cannot be assumed to share the same semantics for separately \nextended clients and servers.&quot;(RFC2616 sect. 9)\n\nIn other words, if POST has no particular identifiable semantics, the only \nway for the server to claim accurately that a POST request succeed (200 \nOK), is for it to have negotiated a private meaning of POST for that \nresource.  If you are defining a private API anyway, then there is no \nparticular reason to use a\npublic method name and actually a good reason to use private method names \nso you can take advantage of 405 and 503 status codes and give more \nvisibility to intermediaries about what is actually being done.\n\nCan you give any good reason to use POST as the name of your RNA \nnotification method?  Why not use RNA-NOTIFY?\n\n-Alex-\n\n___________________________________________________________________\nS. Alexander Jacobson                   i2x Media\n1-212-787-1914 voice                    1-603-288-1280 fax\n\n\n\n\n--On Wednesday, August 20, 2003 3:34 PM -0400 Seairth Jacobs \n&lt;seairth@...&gt; wrote:\n\n&gt; From: &quot;Alex Jacobson&quot; &lt;alex@...&gt;\n&gt;&gt;\n&gt;&gt; I am not requiring all that much of the term subordinate.  It just has to\n&gt;&gt; have a clear meaning with respect to a POSTed request entity and a target\n&gt;&gt; resource.  Unless the client knows what it means for a request entity to\n&gt;&gt; be a subordinate of a target resource it can&#39;t make a request for the\n&gt; server\n&gt;&gt; to do make it so.  Either it is making a request for something else, or\n&gt;&gt; it is making a request for something random.  The only way for the\n&gt;&gt; client to know what it means for a request entity to be subordinate to a\n&gt;&gt; particular resource is for it to have a model of what the resource\n&gt;&gt; actually is and how another entity can be subordinate to that resource.\n&gt;\n&gt; Why does the client need to know anything more than what it POSTs and what\n&gt; is returned?  If the request entity of a POST is acceptable by the server,\n&gt; then the client knows that the request entity is subordinate in some\n&gt; fashion to that resource.  If the server returns a representation of the\n&gt; resource that client understands, then the client know what the server\n&gt; has told it about that resource.  Beyond that, what does the client need\n&gt; to know?\n&gt;\n&gt;\n&gt;  (NOTE: The &quot;separate URI&quot; mentioned above is not specifically defined by\n&gt; RNA, only hinted at.  The implementation of that URI is up to the needs of\n&gt; the specification using RNA as the &quot;front end&quot;.  Maybe this has been the\n&gt; problem.  Maybe the spec was not clear enough, specifically that it could\n&gt; not be used as a stand-alone specification.  It needs an additional spec\n&gt; to provide the &quot;other half&quot; of the application.  However, there isn&#39;t\n&gt; necessarily a single &quot;other&quot; spec, which is why it was not included in\n&gt; RNA.)\n&gt;\n&gt;&gt; If you do insist on using POST then implicitly you are saying that the\n&gt;&gt; client can acquire this model from within HTTP itself (without reference\n&gt;&gt; to custom resource APIs).  I think the only way HTTP provides for\n&gt;&gt; acquiring this model is by the client knowing the content-type of the\n&gt;&gt; target resource.\n&gt;\n&gt; I do not see why content-type would be enough.  For example, what would it\n&gt; mean to a client that a resource (as perceived through its representation)\n&gt; is an image/jpeg or application/xml?  How does that tell a client whether\n&gt; you can GET, POST, PUT, or DELETE?  I suppose one could certainly define a\n&gt; content-type with specific HTTP bindings, but that puts unreasonable\n&gt; constraints on how the content-type may be used.  Maybe you are using\n&gt; &quot;content-type&quot; in a way different than myself?  My meaning is limited to\n&gt; the HTTP content-type header field.\n&gt;\n&gt;&gt; Alternative question for Seairth: If you do insist on using POST, how\n&gt;&gt; does the client know what it means?\n&gt;\n&gt; What is &quot;it&quot;? The POST request?  The server?\n&gt;\n&gt;&gt; Yet another version of this same question: Can you give an example of how\n&gt;&gt; a server could in theory return 200 and still violate the semantics of\n&gt; POST?\n&gt;\n&gt; Is that question correct?  You seem to be asking me to give an example to\n&gt; disprove myself... I think...\n&gt;\n&gt; ---\n&gt; Seairth Jacobs\n&gt; seairth@...\n&gt;\n&gt;\n&gt;\n&gt; To unsubscribe from this group, send an email to:\n&gt; rest-discuss-unsubscribe@yahoogroups.com\n&gt;\n&gt;\n&gt;\n&gt; Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/\n&gt;\n&gt;\n\n\n\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":341233558,"authorName":"Tim Williams","from":"Tim Williams &lt;williamstw@...&gt;","profile":"quwiltw","replyTo":"SENDER","senderId":"zF8t2SATi1JxanhopHZhFMonrCHqEU1P905ZWjBRgNhvhzuUq2Rp1JzdV8bcELvXmNkMtKBjZJTOGQ8bIa8Zi6BCl5QVGqp4v7U","spamInfo":{"isSpam":false,"reason":"4"},"subject":"Re: [rest-discuss] Re: Media Type Version Negotiation","postDate":"1253099777","msgId":13251,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQ5OTg4ODQ0MDkwOTE2MDQxNnhlNzU0ZmE0bGVmMDdiNjQ3NmNjNjU4ZDBAbWFpbC5nbWFpbC5jb20+","inReplyToHeader":"PGRlNzBiMzlkMDkwOTE1MjIzMngzZjMyNDZmOWljNDZhZDg3NWY4ZDg0MkBtYWlsLmdtYWlsLmNvbT4=","referencesHeader":"PGg4ZWVucStuYTV1QGVHcm91cHMuY29tPgkgPEQzRERFRkFELTMxMTItNEFGRC05QjIwLTUzNjJCNUJDMUJBNUBtYWMuY29tPgkgPDRBQUUzNEM4LjMwOTAzMDZAbXlrYW5qby5jby51az4JIDxkZTcwYjM5ZDA5MDkxNDA5MjZwMzQ5ODY4MWJxMWJjMzBjMDQ4NmJjMjc3MUBtYWlsLmdtYWlsLmNvbT4JIDwyOGUyNTcxMTA5MDkxNDExNDBuMTRkZGRmMDh1ZjA4MjlhNDg2OGU1OThmMkBtYWlsLmdtYWlsLmNvbT4JIDxkZTcwYjM5ZDA5MDkxNTIyMzJ4M2YzMjQ2ZjlpYzQ2YWQ4NzVmOGQ4NDJAbWFpbC5nbWFpbC5jb20+"},"prevInTopic":13250,"nextInTopic":13402,"prevInTime":13250,"nextInTime":13252,"topicId":13218,"numMessagesInTopic":43,"msgSnippet":"... It seems to me that detecting a version is fairly easy, the real issue is allowing the client to negotiate for a specific version when the origin server","rawEmail":"Return-Path: &lt;williamstw@...&gt;\r\nX-Sender: williamstw@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 74958 invoked from network); 16 Sep 2009 11:17:21 -0000\r\nX-Received: from unknown (69.147.108.201)\n  by m7.grp.re1.yahoo.com with QMQP; 16 Sep 2009 11:17:21 -0000\r\nX-Received: from unknown (HELO mail-yx0-f201.google.com) (209.85.210.201)\n  by mta2.grp.re1.yahoo.com with SMTP; 16 Sep 2009 11:17:21 -0000\r\nX-Received: by yxe39 with SMTP id 39so6124911yxe.18\n        for &lt;rest-discuss@yahoogroups.com&gt;; Wed, 16 Sep 2009 04:16:21 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.150.70.1 with SMTP id s1mr14531440yba.113.1253099779793; Wed, \n\t16 Sep 2009 04:16:19 -0700 (PDT)\r\nIn-Reply-To: &lt;de70b39d0909152232x3f3246f9ic46ad875f8d842@...&gt;\r\nReferences: &lt;h8eenq+na5u@...&gt;\n\t &lt;D3DDEFAD-3112-4AFD-9B20-5362B5BC1BA5@...&gt;\n\t &lt;4AAE34C8.3090306@...&gt;\n\t &lt;de70b39d0909140926p3498681bq1bc30c0486bc2771@...&gt;\n\t &lt;28e257110909141140n14dddf08uf0829a4868e598f2@...&gt;\n\t &lt;de70b39d0909152232x3f3246f9ic46ad875f8d842@...&gt;\r\nDate: Wed, 16 Sep 2009 07:16:17 -0400\r\nMessage-ID: &lt;499888440909160416xe754fa4lef07b6476cc658d0@...&gt;\r\nTo: Noah Campbell &lt;noahcampbell@...&gt;, rest-discuss@yahoogroups.com\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\nX-eGroups-Msg-Info: 2:4:8:0:2\r\nFrom: Tim Williams &lt;williamstw@...&gt;\r\nSubject: Re: [rest-discuss] Re: Media Type Version Negotiation\r\nX-Yahoo-Group-Post: member; u=341233558; y=E5LM_3YA7g6Uc1sqqkZ12zgkDsf0phFcUO33TSDdGq_KTw\r\nX-Yahoo-Profile: quwiltw\r\n\r\nOn Wed, Sep 16, 2009 at 1:32 AM, Noah Campbell &lt;noahcampbell@...&gt; wro=\r\nte:\n&gt; Consider what browser agents do today?  They will get their html and\n=\r\n&gt; then query the document to see what &quot;mode&quot; they need to process.  This\n&gt; =\r\nis typically based on the doctype in html; see\n&gt; https://developer.mozilla.=\r\norg/en/Mozilla&#39;s_DOCTYPE_sniffing for an\n&gt; example of one browser.\n&gt;\n&gt; HTML=\r\n is built on the principle of, if I don&#39;t understand it, I&#39;ll\n&gt; ignore it. =\r\n Browser also try their best to render the intent.  Anyone\n&gt; involved in th=\r\nose projects understand how much effort is required to\n&gt; overcome junk inpu=\r\nt.  Making REST services more accepting requires a\n&gt; change in development =\r\nstyle.   Application/xml is descriptive enough\n&gt; for opaque xml blobs, but =\r\nI would expect HTTP 415 more often than not.\n&gt;  For this, creating media-ty=\r\npes makes sense (eschewing version) and I\n&gt; would create a media-type, such=\r\n as application/vnd.example.profile or\n&gt; application/profile+xml, and rely =\r\non the content to indicate the\n&gt; version.   A DOCTYPE or a namespace could =\r\nserve the role for detecting\n&gt; a version, requiring an inspection of the do=\r\ncument before processing\n&gt; it.\n\nIt seems to me that detecting a version is =\r\nfairly easy, the real issue\nis allowing the client to &quot;negotiate&quot; for a spe=\r\ncific version when the\norigin server is able to provide more than one.\n\n&gt; W=\r\nhat does this look like in practice?  Lets start by examining the\n&gt; typical=\r\n approach using XSD.  Assume that you have an xml document; for\n&gt; example, =\r\na list of customers.  In XML-Schema, you would likely have a\n&gt; ns0:Customer=\r\nsType that contains 0..many ns0:CustomerType elements.\n&gt; Traditionally, thi=\r\ns is mapped to a collection of type customer\n&gt; (List&lt;Customer&gt; for those fa=\r\nmiliar with Java) and marshaled up to a\n&gt; handler.  Abstraction is good(tm)=\r\n the developer says, I won&#39;t ever be\n&gt; bothered by invalid input...sweet!  =\r\nBut not sweet once the app is\n&gt; deployed.  Someone revs the schema, perhaps=\r\n simply changing the\n&gt; namespace, so ns1:CustomerType and ns0:CustomerType =\r\nare no longer\n&gt; equivalent even though there shape is exactly the same!  Th=\r\nis means an\n&gt; entire rev of the application is required to accommodate some=\r\nthing as\n&gt; trivial as a change in namespace.\n\n&quot;simply changing the namespac=\r\ne&quot; seems to me a bigger deal than you are\nsuggesting.  A namespace tells th=\r\ne client the specific meaning behind\nCustomerType, if the server changes to=\r\n a different meaning of\nCustomerType it seems reasonable to me that it woul=\r\nd break things.\n\n&gt; Lets say the developer threw out the marshaling framewor=\r\nk and worked\n&gt; directly at the request/response level where they are able t=\r\no inspect\n&gt; the byte stream.  Now they could take the request and stuff it =\r\ninto an\n&gt; XSD validating parser but this won&#39;t buy them anything beyond the=\r\n\n&gt; recently discarded framework.  Instead, using xpath, a developer finds\n&gt;=\r\n all the CustomerTypes (e.g. //Customer) and processes each element,\n&gt; rega=\r\nrdless of the location in the document.  The code is not as short\n&gt; when th=\r\ne documents are marshaled into an object, but it&#39;s much more\n&gt; accommodatin=\r\ng.  It also avoids the marshaling overhead when only a\n&gt; handful of values =\r\nare needed.\n\nBut it&#39;s XML, so &quot;location in the document&quot; is important.  The=\r\n same\nelement in a different location could/would have different purpose so=\r\n\nyou can&#39;t necessarily process them the same.\n\n&gt; But wait, doesn&#39;t this boi=\r\nl into a big ball of mud?  Perhaps, but only\n&gt; if you let it.  It could lea=\r\nd to a huge if/then/else mess, but there\n&gt; are plenty of ways to avoid such=\r\n branching.  Better yet, the service\n&gt; can send a redirect (3xx?) to anothe=\r\nr service who can handle an\n&gt; unknown or older type.\n\nThe key question beco=\r\nmes how does the client negotiate for that older version?\n\n&gt; In short, I wo=\r\nuld recommend that the handler make its best effort to\n&gt; accommodate the in=\r\nput, trying to not make any assumptions about the\n&gt; structure of the input.=\r\n  This means ditching marshaling stacks and\n&gt; handle the bytes directly, qu=\r\nerying the document to find matches based\n&gt; on intent, dump namespaces, ign=\r\nore case, plan for parent/child\n&gt; relationships being more then one generat=\r\nion apart, and when in doubt,\n&gt; find a meaningful response code in HTTP to =\r\nsignal the user what went\n&gt; wrong.\n\nYour recommendation seems to me to brea=\r\nk a lot without the apparent\nimprovements to the situation.  With your sugg=\r\nestions you&#39;re kinda\ndefining loose rules for a whole new format that&#39;s inc=\r\nonsistent with\nXML.  Sebastian&#39;s suggestion - as uncomfortable as it initia=\r\nlly makes\nme - is a tradeoff that really does seem to solve a lot.\n\nThanks,=\r\n\n--tim\n\n\n&gt; On Mon, Sep 14, 2009 at 11:40 AM, Peter Williams &lt;pezra@barelyen=\r\nough.org&gt; wrote:\n&gt;&gt;\n&gt;&gt; On Mon, Sep 14, 2009 at 10:26 AM, Noah Campbell &lt;noa=\r\nhcampbell@...&gt; wrote:\n&gt;&gt;\n&gt;&gt; &gt; The same goes for application/xml, it j=\r\nust folks want to have it\n&gt;&gt; &gt; bind to a schema so the tools know who to co=\r\nnsume the document in its\n&gt;&gt; &gt; entirety. This is brittle since the serializ=\r\nation techniques rely\n&gt;&gt; &gt; on a very concise definition of the payload. Any=\r\nthing out of the\n&gt;&gt; &gt; ordinary causes an exception or error.\n&gt;&gt;\n&gt;&gt; In my vi=\r\new the problem is not that `application/xml` deserialization\n&gt;&gt; is often ra=\r\nther unforgiving. =A0(That is an issue, but it&#39;s just an\n&gt;&gt; implementation =\r\ndetail.) =A0The real problem is that media types like\n&gt;&gt; `application/xml` =\r\ndo describe the semantics at all. =A0When a request\n&gt;&gt; claims to accept `ap=\r\nplication/xml` what does that really mean? RSS?\n&gt;&gt; Maybe Atom? =A0Maybe BPM=\r\nL? =A0Or perhaps some proprietary inventory xml\n&gt;&gt; format?\n&gt;&gt;\n&gt;&gt; I think Ja=\r\nn Algermissen was pointing out is that the client should\n&gt;&gt; provide a suffi=\r\nciently precise media type in it&#39;s content type and\n&gt;&gt; accept header fields=\r\n that the server, and all the intermediates that\n&gt;&gt; care, know what it real=\r\nly needs to function correctly.\n&gt;&gt;\n&gt;&gt; XHTML meets this standard not because=\r\n it has a well defined syntax but\n&gt;&gt; because a great deal of work has gone =\r\ninto describing the semantics of\n&gt;&gt; what its grammar means. =A0However, usi=\r\nng XHTML as a container for\n&gt;&gt; application specific data while not utilizin=\r\ng its core semantics seems\n&gt;&gt; to miss the mark. =A0If the server could reas=\r\nonably produce a response\n&gt;&gt; for the content type and acceptable media type=\r\ns of a request that\n&gt;&gt; would cause the client to not function then the medi=\r\na type is not\n&gt;&gt; specific enough. =A0Using XHTML as a container format puts=\r\n you in\n&gt;&gt; exactly that position.\n&gt;&gt;\n&gt;&gt; --\n&gt;&gt; Peter Williamsthat\n&gt;&gt; http://=\r\nbarelyenough.org\n&gt;\n&gt;\n&gt;\n&gt; \n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":63473576,"authorName":"Lucas Gonze","from":"Lucas Gonze &lt;lucas@...&gt;","profile":"lucas_gonze","replyTo":"SENDER","senderId":"AnkCVqfcUGnclT7vlwkb0bMy6Z-jEHXrvedp4R1wc1IMTiVxDvJrfloOCupkqWMB3q4BOaDwigU67E0NfzmEo4EfORA","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] socket-level mods","postDate":"1026430889","msgId":1813,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PFBpbmUuTE5YLjQuNDQuMDIwNzExMTkyMjQzMC40NjYtMTAwMDAwQGxvY2FsaG9zdC5sb2NhbGRvbWFpbj4=","inReplyToHeader":"PDNEMkRGQTVGLkY1RjhEN0I5QHByZXNjb2QubmV0Pg=="},"prevInTopic":1812,"nextInTopic":1814,"prevInTime":1812,"nextInTime":1814,"topicId":1733,"numMessagesInTopic":74,"msgSnippet":"... It s totally brain dead but still hard to do with HTTP.  What you need to know is that a connection is a continuous stream of message events.  An outgoing","rawEmail":"Return-Path: &lt;lgonze@...&gt;\r\nX-Sender: lgonze@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_0_7_4); 11 Jul 2002 23:45:51 -0000\r\nReceived: (qmail 74241 invoked from network); 11 Jul 2002 23:45:51 -0000\r\nReceived: from unknown (66.218.66.216)\n  by m5.grp.scd.yahoo.com with QMQP; 11 Jul 2002 23:45:51 -0000\r\nReceived: from unknown (HELO mail3.panix.com) (166.84.1.74)\n  by mta1.grp.scd.yahoo.com with SMTP; 11 Jul 2002 23:45:51 -0000\r\nReceived: from 159-98.nyc.dsl.access.net (159-98.nyc.dsl.access.net [166.84.159.98])\n\tby mail3.panix.com (Postfix) with ESMTP id 06344982F7\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Thu, 11 Jul 2002 19:45:49 -0400 (EDT)\r\nDate: Thu, 11 Jul 2002 19:41:29 -0400 (EDT)\r\nX-X-Sender: lgonze@...\r\nCc: rest-discuss@yahoogroups.com\r\nSubject: Re: [rest-discuss] socket-level mods\r\nIn-Reply-To: &lt;3D2DFA5F.F5F8D7B9@...&gt;\r\nMessage-ID: &lt;Pine.LNX.4.44.0207111922430.466-100000@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: TEXT/PLAIN; charset=US-ASCII\r\nX-eGroups-From: Lucas Gonze &lt;lgonze@...&gt;\r\nFrom: Lucas Gonze &lt;lucas@...&gt;\r\nX-Yahoo-Group-Post: member; u=63473576\r\nX-Yahoo-Profile: lucas_gonze\r\n\r\nPaul Prescod said:\n&gt; I&#39;m not familiar with the Gnutella protocol. Maybe you could outline the\n&gt; major message types, resource types and addressing facilities or point\n&gt; to a good summarizing URI.\n\nIt&#39;s totally brain dead but still hard to do with HTTP.  What you need to \nknow is that a connection is a continuous stream of message events.  An \noutgoing message may have 0, 1, or more responses.  The mechanics of \nstore-and-forward are mashed into the message along with application \nfunctionality.  \n\nDocumentation for the 0.4 version of the protocol:\nhttp://www.rixsoft.com/Knowbuddy/gnutellafaq.html\n\nThere are many things about it that I don&#39;t want to emulate.  What I do \nwant is how trivial it makes asynchronous messaging in a p2p context.\n\n&gt; To me the most fundamental problem is the same problem with all p2p\n&gt; apps: clients can be behind NAT and have no global addresses. So yes,\n&gt; you do need a TURN/ETRN and it won&#39;t be backwards compatible. My\n&gt; instinct is to have the client open a socket and ask for a backchannel\n&gt; with a POST. The server creates a &quot;listener&quot; and returns the port number\n&gt; and maybe some authentication data. The client connects *not* using HTTP\n&gt; but using a &quot;reversible socket protocol&quot;. The client and server\n&gt; understand that on the reversed socket they have swapped roles.\n\nNo doubt.  but what is the reversible socket protocol?  The most\nparsimonious solution to my mind is that it&#39;s 100% HTTP 1.1, except that\nthe transport layer underneath is different.  Is there any architectural\nreason why this wouldn&#39;t work?\n\nA total digression: the fundamental problem with p2p is that the network\nis self-organizing in a way that affects your moment to moment\ninteractions.  With browser-oriented applications the self-organizing\nmacro structure is too big to be visible usually.\n\n&gt; I doubt this idea is compatible with all existing infrastructure, but\n&gt; there is no solution that will be 100% compatible with existing\n&gt; infrastructure *except* tunnelling. By definition turning the existing\n&gt; one-way architecture into a two-way one requires either extension or\n&gt; tunnelling. If you care about the marketability of your protocol, it\n&gt; should probably provide both options.\n\nIt&#39;s incompatible in a wierd way.  99.99% of the thought that went into\nHTTP can be reused.  All HTTP implementations need a little bit of hacking\nto be compatible.  All HTTP-based applications need a total rewrite.  The\nloss is that it&#39;s a new protocol, the win is that the new protocol is also\nHTTP.  ...that&#39;s the idea anyway.\n\n\n\n\n"}}
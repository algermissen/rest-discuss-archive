{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":174970602,"authorName":"Donald Strong","from":"&quot;Donald Strong&quot; &lt;dstrong@...&gt;","profile":"illyrian_au","replyTo":"SENDER","senderId":"FLQIbYitSzpd2MB_2kTAJIKmF9R792T-iS9eRFkSWSC-UMqZgqDG8-hvjncrM7HVGq9EkgRts_weQqiG9rE6qPmtbObdlKMcaNWwHh_WsXgAh8N4","spamInfo":{"isSpam":false,"reason":"0"},"subject":"RE: [rest-discuss] GET Request length limitation.","postDate":"1097652985","msgId":4567,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEVNRUFJQ0FHT1BPSUlGSk5QQkhKS0VGUERBQUEuZHN0cm9uZ0BhZ2VudGlzc29mdHdhcmUuY29tPg==","inReplyToHeader":"PDIwMDQxMDEwMDAxNjE2LkdOMzIwNEBtYXJrYmFrZXIuY2E+"},"prevInTopic":4566,"nextInTopic":4568,"prevInTime":4566,"nextInTime":4568,"topicId":4554,"numMessagesInTopic":73,"msgSnippet":"From message 4566 ... ... and an entity body, otherwise it would be 204 (No content). From message 4564 ... I am not sure I see where this assertion comes","rawEmail":"Return-Path: &lt;dstrong@...&gt;\r\nX-Sender: dstrong@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 89808 invoked from network); 13 Oct 2004 07:37:13 -0000\r\nReceived: from unknown (66.218.66.166)\n  by m24.grp.scd.yahoo.com with QMQP; 13 Oct 2004 07:37:13 -0000\r\nReceived: from unknown (HELO agentis.com.au) (192.35.59.253)\n  by mta5.grp.scd.yahoo.com with SMTP; 13 Oct 2004 07:37:13 -0000\r\nReceived: from voldemort.agentis.net (typhoeus-dmz.agentis.net [192.35.59.129])\n\tby agentis.com.au (8.11.6/8.11.6) with ESMTP id i9D7aO218988;\n\tWed, 13 Oct 2004 17:36:24 +1000\r\nReceived: from roc (roc.agentis.net [192.168.129.235])\n\tby voldemort.agentis.net (8.11.6/8.11.6) with SMTP id i9D7aMd03007;\n\tWed, 13 Oct 2004 07:36:23 GMT\r\nTo: &quot;Mark Baker&quot; &lt;distobj@...&gt;, &lt;algermissen@...&gt;\r\nCc: &lt;rest-discuss@yahoogroups.com&gt;\r\nDate: Wed, 13 Oct 2004 17:36:25 +1000\r\nMessage-ID: &lt;EMEAICAGOPOIIFJNPBHJKEFPDAAA.dstrong@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain;\n\tcharset=&quot;us-ascii&quot;\r\nContent-Transfer-Encoding: 7bit\r\nX-Priority: 3 (Normal)\r\nX-MSMail-Priority: Normal\r\nX-Mailer: Microsoft Outlook IMO, Build 9.0.2416 (9.0.2911.0)\r\nImportance: Normal\r\nX-MIMEOLE: Produced By Microsoft MimeOLE V6.00.2800.1441\r\nIn-Reply-To: &lt;20041010001616.GN3204@...&gt;\r\nX-eGroups-Remote-IP: 192.35.59.253\r\nFrom: &quot;Donald Strong&quot; &lt;dstrong@...&gt;\r\nSubject: RE: [rest-discuss] GET Request length limitation.\r\nX-Yahoo-Group-Post: member; u=174970602\r\nX-Yahoo-Profile: illyrian_au\r\n\r\nFrom message 4566\n&gt; &gt; I&#39;m confused now.  What can I expect after I&#39;ve POSTed something to a \n&gt; &gt; resource?\n&gt; \n&gt; If you get a 200 response, you can expect that the document was\n&gt; processed.\n\n... and an entity body, otherwise it would be 204 (No content).\n\nFrom message 4564\n&gt;&gt; If so, there is no such thing as a general purpose &#39;process this&#39; method\n&gt;&gt; and one can imagine a substantial numbers of general methods that make\n&gt;&gt; sense to be widely supported, yes?\n&gt;\n&gt; All HTTP methods are &quot;general purpose&quot; in a sense, but if you mean\n&gt; that one can&#39;t do everything, then yes, that&#39;s true.\n&gt; \n&gt; &gt; Not that this is a bad thing, I am just asking to understand \n&gt; you correctly.\n\n\nI am not sure I see where this assertion comes from:\n&quot;There is no such thing as a general purpose &#39;process this&#39; method&quot;.\n\nI have included extracts from the HTTP spec below for reference.\nI have annotated the relevant sections with letters in the left\nmargin, eg (a).\n\n(a) (See below)\n    States that a block of data can be submitted using the POST method.\n    This data may come from a form, but that is not a requirement.\n    It may be any block of data generated by a User Agent.\n\n(b) States that one of the options that may be returned as a response\n    is a 200 status code AND an entity that describes the result.\n\nSo far this supports your assertion, however ...\n\n(c) States that the response to a POST may be an entity containing\n    the result of the action. It is not restricted to an entity\n    that describes the result of the action as suggested by (b).\n\nThis last bit is significant because it suggests that it is OK to send\na block of data to a resource that will process it and get back\nthe result of the resource performing an action on that data. \nTo me that is a general purpose &#39;process this&#39; method.\n\nNow, I know it is possible to POST to a resource and get back a\nresponse containing the result of an action because I have done it. \nAs far as I can tell it is not forbidden by the HTTP spec. If\nthere is a philosophical objection I am interested to hear it.\n\nI am aware that requests without side effects SHOULD use the GET\nmethod. My question is that assuming all of the other REST guidelines\nfor the correct use of HTTP are followed, what is wrong with\nsubmitting a block of data to a resource for processing?\n\nAlternatively, what constraints should be applied to such a process \nto maintain a RESTful attitude?\n\nRegards\nDonald.\n\n\n-- Extracts from RFC 2616 ----\n\n9.5 POST\n\n   The POST method is used to request that the origin server accept the\n   entity enclosed in the request as a new subordinate of the resource\n   identified by the Request-URI in the Request-Line. POST is designed\n   to allow a uniform method to cover the following functions:\n\n      - Annotation of existing resources;\n\n      - Posting a message to a bulletin board, newsgroup, mailing list,\n        or similar group of articles;\n\n(a)   - Providing a block of data, such as the result of submitting a\n        form, to a data-handling process;\n\n      - Extending a database through an append operation.\n\n   The actual function performed by the POST method is determined by the\n   server and is usually dependent on the Request-URI. The posted entity\n   is subordinate to that URI in the same way that a file is subordinate\n   to a directory containing it, a news article is subordinate to a\n   newsgroup to which it is posted, or a record is subordinate to a\n   database.\n\n(b) The action performed by the POST method might not result in a\n   resource that can be identified by a URI. In this case, either 200\n   (OK) or 204 (No Content) is the appropriate response status,\n   depending on whether or not the response includes an entity that\n   describes the result.\n\n   If a resource has been created on the origin server, the response\n   SHOULD be 201 (Created) and contain an entity which describes the\n   status of the request and refers to the new resource, and a Location\n   header (see section 14.30).\n\n   Responses to this method are not cacheable, unless the response\n   includes appropriate Cache-Control or Expires header fields. However,\n   the 303 (See Other) response can be used to direct the user agent to\n   retrieve a cacheable resource.\n\n   POST requests MUST obey the message transmission requirements set out\n   in section 8.2.\n\n   See section 15.1.3 for security considerations.\n\n\n10.2.1 200 OK\n\n   The request has succeeded. The information returned with the response\n   is dependent on the method used in the request, for example:\n\n   GET    an entity corresponding to the requested resource is sent in\n          the response;\n\n   HEAD   the entity-header fields corresponding to the requested\n          resource are sent in the response without any message-body;\n\n(c) POST  an entity describing or containing the result of the action;\n\n   TRACE  an entity containing the request message as received by the\n          end server.\n\n"}}
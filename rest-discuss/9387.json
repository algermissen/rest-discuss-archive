{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":40455398,"authorName":"Julian Reschke","from":"Julian Reschke &lt;julian.reschke@...&gt;","profile":"JulianReschke","replyTo":"SENDER","senderId":"lLiSKTfSMxFdlvLqhr8EmAjhIIHEBdGj-J0T0d2sLJ7JKzAt8nMdAS39-R94t7R8M1Y67EyFuqHbw0khwvXsG0oPkSJTrR9BFsyB7qo","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Re: Fun with DELETE","postDate":"1183881359","msgId":9387,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQ2OTA5ODhGLjQwMDA4MDBAZ214LmRlPg==","inReplyToHeader":"PFc0Njc4MjIzODMwMjcwNjcxMTgzODQ4ODAwQG1haWwubWFpbHNuYXJlLm5ldD4=","referencesHeader":"PFc0Njc4MjIzODMwMjcwNjcxMTgzODQ4ODAwQG1haWwubWFpbHNuYXJlLm5ldD4="},"prevInTopic":9386,"nextInTopic":9388,"prevInTime":9386,"nextInTime":9388,"topicId":8604,"numMessagesInTopic":107,"msgSnippet":"... We re obviously using the same terms, but with different semantics. In HTTP, you use GET to obtain a representation, and a 404 tells you that the server","rawEmail":"Return-Path: &lt;julian.reschke@...&gt;\r\nX-Sender: julian.reschke@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 12908 invoked from network); 8 Jul 2007 07:57:11 -0000\r\nReceived: from unknown (66.218.66.70)\n  by m36.grp.scd.yahoo.com with QMQP; 8 Jul 2007 07:57:11 -0000\r\nReceived: from unknown (HELO mail.gmx.net) (213.165.64.20)\n  by mta12.grp.scd.yahoo.com with SMTP; 8 Jul 2007 07:57:10 -0000\r\nReceived: (qmail invoked by alias); 08 Jul 2007 07:56:03 -0000\r\nReceived: from p508FAB63.dip0.t-ipconnect.de (EHLO [192.168.178.22]) [80.143.171.99]\n  by mail.gmx.net (mp051) with SMTP; 08 Jul 2007 09:56:03 +0200\r\nX-Authenticated: #1915285\r\nX-Provags-ID: V01U2FsdGVkX18S5/9rzvsSu1BqpNJen7OCADZJ/NqkZMIR5K0hJc\n\tGswHh2BHER7aKR\r\nMessage-ID: &lt;4690988F.4000800@...&gt;\r\nDate: Sun, 08 Jul 2007 09:55:59 +0200\r\nUser-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; de; rv:1.8.0.4) Gecko/20060516 Thunderbird/1.5.0.4 Mnenhy/0.7.4.666\r\nMIME-Version: 1.0\r\nTo: eric@...\r\nCc: rest-discuss@yahoogroups.com\r\nReferences: &lt;W4678223830270671183848800@...&gt;\r\nIn-Reply-To: &lt;W4678223830270671183848800@...&gt;\r\nContent-Type: text/plain; charset=UTF-8; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-Y-GMX-Trusted: 0\r\nX-eGroups-Msg-Info: 1:0:0:0\r\nFrom: Julian Reschke &lt;julian.reschke@...&gt;\r\nSubject: Re: [rest-discuss] Re: Fun with DELETE\r\nX-Yahoo-Group-Post: member; u=40455398; y=hNLz5VHNvWuKytL_j67DsYIoYRgrNDIV9kDF-rOyBfCZjerVSG2GVg\r\nX-Yahoo-Profile: JulianReschke\r\n\r\nEric J. Bowman wrote:\n&gt;  &gt; &gt;&gt; &gt;Nope. 404 means no representation is available.\n&gt;  &gt; &gt;\n&gt;  &gt; &gt;&gt; Nope, a 404 response is a representation of the resource&#39;s\n&gt;  &gt; unavailability.\n&gt;  &gt; &gt;\n&gt;  &gt; &gt;I don&#39;t think RFC2616 supports that point of view.\n&gt;  &gt; &gt;\n&gt;  &gt;\n&gt;  &gt;&gt; Who&#39;s talking about RFC 2616? REST defines the response to a request as\n&gt;  &gt;&gt; a representation of a resource, even if that representation is an error\n&gt;  &gt;&gt; message, or no conceptual mapping to that resource has been defined.\n&gt;  &gt;\n&gt;  &gt;I am talking about RFC2616. You are using RFC2616. The status code in an\n&gt;  &gt;HTTP/1.1 response is not part of the representation, but a status code.\n&gt;  &gt;\n&gt; \n&gt; But we are talking about the response, not the response code, a hint is\n&gt; where I use the phrase, &quot;a 404 response is a representation&quot; because I\n&gt; don&#39;t know how the server can send only a response code without sending\n&gt; headers, or on a GET response, an entity body. To me, the HTML I get\n&gt; back from the server with headers and a 404 response code saying &quot;Not\n&gt; Found&quot; is a representation. Are you here to discuss REST or nitpick\n&gt; semantics?\n\nWe&#39;re obviously using the same terms, but with different semantics. In \nHTTP, you use GET to obtain a representation, and a 404 tells you that \nthe server hasn&#39;t got one for you. Thus, in terms of RFC2616, the entity \nbody carries an error message, which is *not* a representation of the \nresource.\n\nConsider a login form sent back with 401: is that a representation of \nthe resource I tried to GET?\n\n&gt;  &gt;\n&gt;  &gt;- the condition is expected to be permanent, and\n&gt;  &gt;\n&gt;  &gt;- it&#39;s not necessary to *keep* it marked &quot;gone&quot;; but that doesn&#39;t mean\n&gt;  &gt;the intent is that it can go back to a 2xx.\n&gt;  &gt;\n&gt; \n&gt; Didn&#39;t you start off in this thread by telling me that I was violating\n&gt; RFC 2616 by setting a 410 to be a 404? Am I still wrong about that,\n&gt; and if not, would it hurt you to just once concede a point to me, in\n&gt; any thread on any list, instead of scouring my posts for obscure\n&gt; semantic inconsistencies (response vs. response code) to nitpick?\n\nFunny enough, the point here is to learn and exchange arguments; not to \nbe right all the time. Yes, I may have thought that a 410 is more \npermanent that it may be in some servers. As far as I can tell, the \nwording is the way it is to make 410 be usable at all; basically it \nallows the server to have a limited memory of \nthings-that-were-there-and-now-are-gone, which is still better than not \nproviding this information to the client.\n\n(BTW, I noticed your attack and will ignore it...)\n\n&gt; To me, &quot;the discretion of the server owner&quot; means that it&#39;s my URL and I\n&gt; can respond to requests for it however I deem appropriate. There is no\n&gt; mention in the 410 description about the client repeating the request,\n&gt; and even the 403 response calls that a SHOULD NOT not a MUST NOT. So,\n&gt; are you sure that I MUST NOT change a 410 into a 200 at my discretion\n&gt; as the naming authority?\n\nOf course a server can do whatever it wants. However, that&#39;s not a \nlicense to actually do that in general. One point of a protocol with \nwell-defined (and not-so-well-defined...) protocol elements like status \ncodes, headers, etc is that independently developed clients can actually \nuse it. If you bend the rules too much, generic clients will fail to \nwork with your server, that&#39;s it.\n\nWhen you send a 410 to a generic client, you&#39;re telling it: there&#39;s \nnothing here anymore, and this isn&#39;t going to change soon. So in \ngeneral, you wouldn&#39;t send that status to a client in case you want the \nclient to access it again.\n\nNow, if you have your own *specific* client, that knows otherwise, fine. \nThat&#39;s then a closely coupled relationship between client and server. \nBut in this case, it really doesn&#39;t matter what you use, because it&#39;s \nnot what the spec says. It will work, but just with that specially \nwritten client.\n\n&gt; Are you still insisting that a client, once it knows that a resource has\n&gt; responded 410, can safely expect that no resource will ever again be\n&gt; identified by that URL? And that I can&#39;t expect a client or intermediary\n&gt; to send a DELETE request to the origin server if it knows a resource has\n&gt; been marked 410 Gone? Or are you perhaps reading something into the\n\nI&#39;m just pointing out that if you send out a 410 to a client, it should \ntake that literally, and assume that the resource is gone, and there&#39;s \nno point for it in repeating the request.\n\nAnd no, you can&#39;t *expect* a client to send subsequent requests to that \nURL, unless there&#39;s out-of-band knowledge about that behavior.\n\n&gt; spec on the 410 response which means that, although a 410 doesn&#39;t have\n&gt; to be permanent, it must remain some sort of 4xx response? Because I\n&gt; just don&#39;t see where the spec supports _any_ of your arguments.\n\nI think this is exactly what it says: &quot;The requested resource is no \nlonger available at the server and no forwarding address is known. This \ncondition is expected to be considered permanent.&quot;.\n\nSo, was the original question: &quot;How do I do a two-stage delete with HTTP \nthat generic clients will grok?&quot;\n\nMy answer to *that* is that I don&#39;t think there&#39;s an interoperable \nsolution to that. An HTTP compliant way seems to implement the DELETE as \na MOVE request, and to provide the client with the new URL (in a \ntrashcan), as proposed earlier on this thread.\n\nBest regards, Julian\n\n"}}
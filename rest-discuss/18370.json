{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":211647110,"authorName":"Alexander Johannesen","from":"Alexander Johannesen &lt;alexander.johannesen@...&gt;","profile":"shelterit","replyTo":"SENDER","senderId":"UGQ_OZh8ijruSBxsdJlBGDkoGhDKOiDeaxu3G2J-EffAu1DHynkEq8ywxhzOeEM5NHUpaQUS234CqBzxhdwP22AviVpfcxIxDS9BuJjHRKvmir4ujZiEJufGZlo","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Re: The &quot;new media types are evil&quot; meme","postDate":"1325854744","msgId":18370,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PENBRjg5YkNDZ3ZlUHdyLThGWTA2dUs0Q2Z3Um50RkxIcEM9VFZVWEpvNmlxYm1pQTFqZ0BtYWlsLmdtYWlsLmNvbT4=","inReplyToHeader":"PENBTnFpWkpaLUQ1VkZGb2pyRzhEUHJyYmNGdmU5bTFWc0VmMEZ5SytDZkV2YUg2cWg0UUBtYWlsLmdtYWlsLmNvbT4=","referencesHeader":"PENBRjg5YkNEQmFkUEdHRHNoMU9uVTBOPUxRMldSV2hoNTZDSEZ5TFY0WFBacjhIVlE4d0BtYWlsLmdtYWlsLmNvbT4JPENBTnFpWkpaLUQ1VkZGb2pyRzhEUHJyYmNGdmU5bTFWc0VmMEZ5SytDZkV2YUg2cWg0UUBtYWlsLmdtYWlsLmNvbT4="},"prevInTopic":18369,"nextInTopic":18371,"prevInTime":18369,"nextInTime":18371,"topicId":18183,"numMessagesInTopic":245,"msgSnippet":"Hiya, ... As ... entities or ... do ... Oh, I m happy to drive droves of drivel down deprived drones for days on end ... :) ... Hmm, we re getting a tad","rawEmail":"Return-Path: &lt;alexander.johannesen@...&gt;\r\nX-Sender: alexander.johannesen@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 22326 invoked from network); 6 Jan 2012 12:59:07 -0000\r\nX-Received: from unknown (98.137.34.44)\n  by m9.grp.sp2.yahoo.com with QMQP; 6 Jan 2012 12:59:07 -0000\r\nX-Received: from unknown (HELO mail-ee0-f53.google.com) (74.125.83.53)\n  by mta1.grp.sp2.yahoo.com with SMTP; 6 Jan 2012 12:59:06 -0000\r\nX-Received: by eekd41 with SMTP id d41so1252388eek.26\n        for &lt;rest-discuss@yahoogroups.com&gt;; Fri, 06 Jan 2012 04:59:05 -0800 (PST)\r\nMIME-Version: 1.0\r\nX-Received: by 10.14.47.79 with SMTP id s55mr2294674eeb.69.1325854744897; Fri,\n 06 Jan 2012 04:59:04 -0800 (PST)\r\nX-Received: by 10.14.99.78 with HTTP; Fri, 6 Jan 2012 04:59:04 -0800 (PST)\r\nX-Received: by 10.14.99.78 with HTTP; Fri, 6 Jan 2012 04:59:04 -0800 (PST)\r\nIn-Reply-To: &lt;CANqiZJZ-D5VFFojrG8DPrrbcFve9m1VsEf0FyK+CfEvaH6qh4Q@...&gt;\r\nReferences: &lt;CAF89bCDBadPGGDsh1OnU0N=LQ2WRWhh56CHFyLV4XPZr8HVQ8w@...&gt;\n\t&lt;CANqiZJZ-D5VFFojrG8DPrrbcFve9m1VsEf0FyK+CfEvaH6qh4Q@...&gt;\r\nDate: Fri, 6 Jan 2012 23:59:04 +1100\r\nMessage-ID: &lt;CAF89bCCgvePwr-8FY06uK4CfwRntFLHpC=TVUXJo6iqbmiA1jg@...&gt;\r\nTo: Mike Kelly &lt;mikekelly321@...&gt;\r\nCc: Nina Jeliazkova &lt;jeliazkova.nina@...&gt;, REST Discuss &lt;rest-discuss@yahoogroups.com&gt;, \n\tJan Algermissen &lt;jan.algermissen@...&gt;\r\nContent-Type: multipart/alternative; boundary=90e6ba61552217e8b304b5db9d75\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Alexander Johannesen &lt;alexander.johannesen@...&gt;\r\nSubject: Re: [rest-discuss] Re: The &quot;new media types are evil&quot; meme\r\nX-Yahoo-Group-Post: member; u=211647110; y=eRJuPYn-_THusJCunxtOJJqWn05-gxM6ory_5Rh6fc942Kd6\r\nX-Yahoo-Profile: shelterit\r\n\r\n\r\n--90e6ba61552217e8b304b5db9d75\r\nContent-Type: text/plain; charset=ISO-8859-1\r\n\r\nHiya,\n\nOn Jan 6, 2012 9:12 PM, &quot;Mike Kelly&quot; &lt;mikekelly321@...&gt; wrote:\n&gt; &gt; No, theye&#39;re not, an ontology is designed so that C2C works seamlessly.\nAs\n&gt; &gt; long as humans who create programs know how to deal with certain\nentities or\n&gt; &gt; given relationships, the rest of the nitty-gritty of business processes\ndo\n&gt; &gt; not need any human intervention\n&gt;\n&gt; I don&#39;t think we can step over &quot;certain entities or given\n&gt; relationships&quot; just like that..\n\nOh, I&#39;m happy to drive droves of drivel down deprived drones for days on\nend ... :)\n\n&gt; What are the nitty-gritty of business processes in a hypertext\n&gt; application if they&#39;re _not_ the entities and relationships? Surely,\n&gt; the semantics of entities and their relationships _are_ the\n&gt; application?\n\nHmm, we&#39;re getting a tad off-topic, but I always welcome a dive into data\nmodeling (and not the RDBMS kind). As with most data modeling, it&#39;s about\ndefining entities and relationships. Entities in an ontology are mostly\n&quot;type&quot;, ie. abstract notions that you declare your data to be a type of, so\nfor example the ontology will have &quot;person&quot;, and a data specific definition\nwould be &quot;Alex&quot; is_a &quot;person&quot;, and so on. And when they&#39;re not a type,\nthey&#39;re a relationship, like &quot;is_a&quot;. More complex ontologies have a lot of\nconstraints right in it, so for example objects of type &quot;person&quot; must have\na relationship X attached to it, or never in a relationship with an object\nof type Y, and on and on. From all of this you create a model of your\ndomain, and link your data to that model.\n\nBut these are still conceptual things (objects and ontologies) that I don&#39;t\nnecessarily map directly to HTTP resources and link relationships, but more\non that later. But now more directly to your question, then of course in an\nideal world we all do semantic mapping in our applications, re-use a good\nfew ontologies, and things woud be much smoother, and yes, a hyper-text\nbusiness process definitly has entities and relationships that we could map\nto resources ... but it isn&#39;t always what you want to do, especially not\nthe fine-grained details of a full business model. Not saying you can&#39;t,\nand I have done it before, but mostly I do a more abstract mapping between\nresources that represent a cluster of entities and relationships, and then\ntunnel the business models through that. (This was harder to explain than\nit should be, and I may not be making much sense, either)\n\n&gt; Are there any practical examples of applications that actually work\n&gt; this way? Can any of them be easily comprehended and coded against by\n&gt; average devs (i.e. devs that aren&#39;t semweb Zen-masters)?\n\nI don&#39;t know much about industries doing this (I&#39;ve seen papers at\nconferences, and I&#39;ve talked to people who are doing or wanted to do this,\nbut no real details on that), only what I myself have been doing for\nclients and for back-end systems I can&#39;t reveal much about (and I wish I\ncould; it&#39;s not a cop out :) ). As to the need for Zen-masters, no, but I\ndo find that there&#39;s a good percentage of people who can&#39;t think in any\nterm that doesn&#39;t include a table and rows. Models, be it complex or\notherwise, seems to be easier understood by certain people, and that surely\nimpacts who does it well. Having said that, though, the tons of truly\ncrappy relational modeling I&#39;ve seen through the years tell me that\nmodeling in *general* is misunderstood, and not just the semantic modeling\nthat&#39;s a little bit more fashionable these days.\n\n&gt; &gt; More specifically, there&#39;s ontologies for working with semantics within\n&gt; &gt; maps, and some apps can enrich your data without any devs. It enables\nthe\n&gt; &gt; creation of evolving ontologies for your applications domain and scope.\n&gt; &gt;\n&gt;\n&gt; I agree that the potential for re-using/re-mixing code written against\n&gt; applications is improved by defining the application in terms of link\n&gt; relations (vs. domain specific media types). That is one of the key\n&gt; reasons I prefer generic media types, so we definitely agree on that.\n&gt; However, I don&#39;t follow your logic about this re-use somehow\n&gt; overcoming a need for human interaction; since the applications and\n&gt; code being re-used had to be created by /people/ expressing (author\n&gt; dev) and comprehending (consumer dev) the semantics in the first\n&gt; place.\n\nWell, it&#39;s not so much that I think it will remove devs from app design\ncompletely, but I sure think it could offer an applicable revolution in the\nway apps interact. Like I said, instead of writing your app to understand\ngiven APIs that are bound to change, write them towards models that are\nless likely to change. An example is again &quot;Alex&quot; is_a &quot;person&quot;. If &quot;Alex&quot;\nis an object with a host of properties attached, any piece of code who can\nunderstand and process objects of type &quot;person&quot; can have a go at it. The\nkey is also that &quot;Pedro&quot; is_a &quot;customer&quot; can run the same code; &quot;customer&quot;\nis_a &quot;person&quot; is defined in perhaps some middle ontology, making objects\nconstrained and / or compatible against other through merging of ontologies.\n\nIn other words, I can create a service in my SOA that understands how to\ndeal with &quot;person&quot; objects. Maybe it searches the web, and attaches certain\ndata to objects that correlates, and adds properties or relationships to\n*other* objects. Little by little you can enrich your original &quot;person&quot;\nobject by, say, changing its type from &quot;person&quot; to &quot;human being&quot; or\n&quot;company&quot; (in liue of the crazy US definition that companies have personal\nrights :) ). You pass around the same object, but different processes apply\nto their typification.\n\nPeople objects are one thing, but say you start out with something more\nabstract, like &quot;transaction&quot;; you pass the object around, and it gets\nenriched as it passes through your system. Same object, different\nprocesses, driven by the objects type relationship and how it fits into\nyour model. (Different rules if your object has X relationship rather than\na Y)\n\nAnd now we come to the reusability aspect more directly. I can send a\n&quot;person&quot; object through your system if you understand &quot;person&quot; objects, and\nyou can enrich it with stuff I don&#39;t support under the surface. For\nexample, let&#39;s say that the upper ontology defines &quot;person&quot;, and maybe\nbasic date of birth and death. Your service finds out that I love\nMonteverdi, and adds this relationship and others in your special music\nontology (which I don&#39;t support), like the subjects &quot;opera&quot; and &quot;vespers&quot;.\nI can&#39;t deal much with these relationships because I don&#39;t understand them\n(I only understand the upper ontology we share). However, I can infer from\ntype &quot;composer&quot; that it is a person, and I can infer generic subjects from\nspecial subject &quot;vespers&quot;. So I can give an unprocessed view of objects,\nand even do business logic across them, inferred from the layers of\ntypification.\n\nIn a business context this is fantastic for transaction handling shared\nbetween clients back and forth. But none of this has much to do with REST,\nof course.\n\n&gt; I think you are over-stating the importance of machines wrt the actual\n&gt; applications - perhaps this is a general semweb thing?\n\nIt&#39;s definitly the way the semweb is going, and one usually separate\nbetween upper, core and data ontologies. Upper deals with the semantics of\nlanguage, core with a mapping between concepts and real life, and the data\nontologies map between data and the concepts. Sharing of ontologies are\ngetting traction, too, but mostly of data ontologies, sharing models and\ntrying to map them to either intermediate platforms. The library world is\nmodeling up FRBR and RDA, for example, which will finally free them to\nshare different models of their bibliographical data through a more fluid\nontology layer rather than the hard-coded MARC[21] / AACR2 nightmare\nthey&#39;re currently in.\n\n&gt; I find it easiest to think about hypertext applications in terms of\n&gt; &#39;agent intent&#39;.\n\nWell, yes, but who is the agent? It&#39;s not always a person on the other end.\n\n&gt; &gt; Call it vocabulary, and relationships. If client developers don&#39;t get\nthis,\n&gt; &gt; I suggest you need better clients. :)\n&gt;\n&gt; Is it ok if I use &quot;representations&quot; and &quot;link relations&quot; instead?\n\nWell, you can of course do what you want, and you don&#39;t need my permission\n... :) Representation is one of those ugly words, though, that we can&#39;t\nseem to all agree on, and I hardly think it smart to represent everything\nin a model as a resource ... and then you get into problems of clustering\n(named graphs) and so on. Ugh. Link relations are a bit easier, though.\n\nTalking with devs I simply call them objects. SemWeb people call them\nnodes. Topic Mappers call them topics. And I guess RESTafarians could call\nthem resources, but that distinction between a resource and the\nrepresentation is a bit close to the fundamental problem of RDF of\n&quot;aboutness&quot; when you use an URI for it; are you talking about the website,\nthe resource or whatever that resource is meant to represent? It&#39;s still an\nunresolved problem (the 304 solution is an ugly hack)\n\nIMHO, of course.\n\nRegards,\n\nAlex\n\r\n--90e6ba61552217e8b304b5db9d75\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;p&gt;Hiya,&lt;/p&gt;\n&lt;p&gt;On Jan 6, 2012 9:12 PM, &quot;Mike Kelly&quot; &lt;&lt;a href=\r\n=3D&quot;mailto:mikekelly321@...&quot;&gt;mikekelly321@...&lt;/a&gt;&gt; wrote:&lt;br=\r\n&gt;\n&gt; &gt; No, theye&#39;re not, an ontology is designed so that C2C works=\r\n seamlessly. As&lt;br&gt;\n&gt; &gt; long as humans who create programs know how t=\r\no deal with certain entities or&lt;br&gt;\n&gt; &gt; given relationships, the rest=\r\n of the nitty-gritty of business processes do&lt;br&gt;\n&gt; &gt; not need any hu=\r\nman intervention&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; I don&#39;t think we can step over &quot=\r\n;certain entities or given&lt;br&gt;\n&gt; relationships&quot; just like that..&lt;/p=\r\n&gt;\n&lt;p&gt;Oh, I&#39;m happy to drive droves of drivel down deprived drones for d=\r\nays on end ... :)&lt;/p&gt;\n&lt;p&gt;&gt; What are the nitty-gritty of business process=\r\nes in a hypertext&lt;br&gt;\n&gt; application if they&#39;re _not_ the entities an=\r\nd relationships? Surely,&lt;br&gt;\n&gt; the semantics of entities and their relat=\r\nionships _are_ the&lt;br&gt;\n&gt; application?&lt;/p&gt;\n&lt;p&gt;Hmm, we&#39;re getting a ta=\r\nd off-topic, but I always welcome a dive into data modeling (and not the RD=\r\nBMS kind). As with most data modeling, it&#39;s about defining entities and=\r\n relationships. Entities in an ontology are mostly &quot;type&quot;, ie. ab=\r\nstract notions that you declare your data to be a type of, so for example t=\r\nhe ontology will have &quot;person&quot;, and a data specific definition wo=\r\nuld be &quot;Alex&quot; is_a &quot;person&quot;, and so on. And when they&#=\r\n39;re not a type, they&#39;re a relationship, like &quot;is_a&quot;. More c=\r\nomplex ontologies have a lot of constraints right in it, so for example obj=\r\nects of type &quot;person&quot; must have a relationship X attached to it, =\r\nor never in a relationship with an object of type Y, and on and on. From al=\r\nl of this you create a model of your domain, and link your data to that mod=\r\nel.&lt;/p&gt;\n\n&lt;p&gt;But these are still conceptual things (objects and ontologies) =\r\nthat I don&#39;t necessarily map directly to HTTP resources and link relati=\r\nonships, but more on that later. But now more directly to your question, th=\r\nen of course in an ideal world we all do semantic mapping in our applicatio=\r\nns, re-use a good few ontologies, and things woud be much smoother, and yes=\r\n, a hyper-text business process definitly has entities and relationships th=\r\nat we could map to resources ... but it isn&#39;t always what you want to d=\r\no, especially not the fine-grained details of a full business model. Not sa=\r\nying you can&#39;t, and I have done it before, but mostly I do a more abstr=\r\nact mapping between resources that represent a cluster of entities and rela=\r\ntionships, and then tunnel the business models through that. (This was hard=\r\ner to explain than it should be, and I may not be making much sense, either=\r\n)&lt;/p&gt;\n\n&lt;p&gt;&gt; Are there any practical examples of applications that actual=\r\nly work&lt;br&gt;\n&gt; this way? Can any of them be easily comprehended and coded=\r\n against by&lt;br&gt;\n&gt; average devs (i.e. devs that aren&#39;t semweb Zen-mas=\r\nters)?&lt;/p&gt;\n&lt;p&gt;I don&#39;t know much about industries doing this (I&#39;ve s=\r\neen papers at conferences, and I&#39;ve talked to people who are doing or w=\r\nanted to do this, but no real details on that), only what I myself have bee=\r\nn doing for clients and for back-end systems I can&#39;t reveal much about =\r\n(and I wish I could; it&#39;s not a cop out :) ). As to the need for Zen-ma=\r\nsters, no, but I do find that there&#39;s a good percentage of people who c=\r\nan&#39;t think in any term that doesn&#39;t include a table and rows. Model=\r\ns, be it complex or otherwise, seems to be easier understood by certain peo=\r\nple, and that surely impacts who does it well. Having said that, though, th=\r\ne tons of truly crappy relational modeling I&#39;ve seen through the years =\r\ntell me that modeling in *general* is misunderstood, and not just the seman=\r\ntic modeling that&#39;s a little bit more fashionable these days.&lt;/p&gt;\n\n&lt;p&gt;&=\r\ngt; &gt; More specifically, there&#39;s ontologies for working with semanti=\r\ncs within&lt;br&gt;\n&gt; &gt; maps, and some apps can enrich your data without an=\r\ny devs. It enables the&lt;br&gt;\n&gt; &gt; creation of evolving ontologies for yo=\r\nur applications domain and scope.&lt;br&gt;\n&gt; &gt;&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; I agree t=\r\nhat the potential for re-using/re-mixing code written against&lt;br&gt;\n&gt; appl=\r\nications is improved by defining the application in terms of link&lt;br&gt;\n&gt; =\r\nrelations (vs. domain specific media types). That is one of the key&lt;br&gt;\n&gt=\r\n; reasons I prefer generic media types, so we definitely agree on that.&lt;br&gt;=\r\n\n&gt; However, I don&#39;t follow your logic about this re-use somehow&lt;br&gt;\n=\r\n&gt; overcoming a need for human interaction; since the applications and&lt;br=\r\n&gt;\n&gt; code being re-used had to be created by /people/ expressing (author&lt;=\r\nbr&gt;\n&gt; dev) and comprehending (consumer dev) the semantics in the first&lt;b=\r\nr&gt;\n&gt; place.&lt;/p&gt;\n&lt;p&gt;Well, it&#39;s not so much that I think it will remov=\r\ne devs from app design completely, but I sure think it could offer an appli=\r\ncable revolution in the way apps interact. Like I said, instead of writing =\r\nyour app to understand given APIs that are bound to change, write them towa=\r\nrds models that are less likely to change. An example is again &quot;Alex&q=\r\nuot; is_a &quot;person&quot;. If &quot;Alex&quot; is an object with a host =\r\nof properties attached, any piece of code who can understand and process ob=\r\njects of type &quot;person&quot; can have a go at it. The key is also that =\r\n&quot;Pedro&quot; is_a &quot;customer&quot; can run the same code; &quot;cu=\r\nstomer&quot; is_a &quot;person&quot; is defined in perhaps some middle onto=\r\nlogy, making objects constrained and / or compatible against other through =\r\nmerging of ontologies.&lt;/p&gt;\n\n&lt;p&gt;In other words, I can create a service in my=\r\n SOA that understands how to deal with &quot;person&quot; objects. Maybe it=\r\n searches the web, and attaches certain data to objects that correlates, an=\r\nd adds properties or relationships to *other* objects. Little by little you=\r\n can enrich your original &quot;person&quot; object by, say, changing its t=\r\nype from &quot;person&quot; to &quot;human being&quot; or &quot;company&quo=\r\nt; (in liue of the crazy US definition that companies have personal rights =\r\n:) ). You pass around the same object, but different processes apply to the=\r\nir typification.&lt;/p&gt;\n\n&lt;p&gt;People objects are one thing, but say you start ou=\r\nt with something more abstract, like &quot;transaction&quot;; you pass the =\r\nobject around, and it gets enriched as it passes through your system. Same =\r\nobject, different processes, driven by the objects type relationship and ho=\r\nw it fits into your model. (Different rules if your object has X relationsh=\r\nip rather than a Y)&lt;/p&gt;\n\n&lt;p&gt;And now we come to the reusability aspect more =\r\ndirectly. I can send a &quot;person&quot; object through your system if you=\r\n understand &quot;person&quot; objects, and you can enrich it with stuff I =\r\ndon&#39;t support under the surface. For example, let&#39;s say that the up=\r\nper ontology defines &quot;person&quot;, and maybe basic date of birth and =\r\ndeath. Your service finds out that I love Monteverdi, and adds this relatio=\r\nnship and others in your special music ontology (which I don&#39;t support)=\r\n, like the subjects &quot;opera&quot; and &quot;vespers&quot;. I can&#39;t =\r\ndeal much with these relationships because I don&#39;t understand them (I o=\r\nnly understand the upper ontology we share). However, I can infer from type=\r\n &quot;composer&quot; that it is a person, and I can infer generic subjects=\r\n from special subject &quot;vespers&quot;. So I can give an unprocessed vie=\r\nw of objects, and even do business logic across them, inferred from the lay=\r\ners of typification.&lt;/p&gt;\n\n&lt;p&gt;In a business context this is fantastic for tr=\r\nansaction handling shared between clients back and forth. But none of this =\r\nhas much to do with REST, of course.&lt;/p&gt;\n&lt;p&gt;&gt; I think you are over-stati=\r\nng the importance of machines wrt the actual&lt;br&gt;\n&gt; applications - perhap=\r\ns this is a general semweb thing?&lt;/p&gt;\n&lt;p&gt;It&#39;s definitly the way the sem=\r\nweb is going, and one usually separate between upper, core and data ontolog=\r\nies. Upper deals with the semantics of language, core with a mapping betwee=\r\nn concepts and real life, and the data ontologies map between data and the =\r\nconcepts. Sharing of ontologies are getting traction, too, but mostly of da=\r\nta ontologies, sharing models and trying to map them to either intermediate=\r\n platforms. The library world is modeling up FRBR and RDA, for example, whi=\r\nch will finally free them to share different models of their bibliographica=\r\nl data through a more fluid ontology layer rather than the hard-coded MARC[=\r\n21] / AACR2 nightmare they&#39;re currently in.&lt;/p&gt;\n\n&lt;p&gt;&gt; I find it easi=\r\nest to think about hypertext applications in terms of&lt;br&gt;\n&gt; &#39;agent i=\r\nntent&#39;.&lt;/p&gt;\n&lt;p&gt;Well, yes, but who is the agent? It&#39;s not always a p=\r\nerson on the other end.&lt;/p&gt;\n&lt;p&gt;&gt; &gt; Call it vocabulary, and relationsh=\r\nips. If client developers don&#39;t get this,&lt;br&gt;\n&gt; &gt; I suggest you n=\r\need better clients. :)&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; Is it ok if I use &quot;representa=\r\ntions&quot; and &quot;link relations&quot; instead?&lt;/p&gt;\n&lt;p&gt;Well, you can of=\r\n course do what you want, and you don&#39;t need my permission ... :) Repre=\r\nsentation is one of those ugly words, though, that we can&#39;t seem to all=\r\n agree on, and I hardly think it smart to represent everything in a model a=\r\ns a resource ... and then you get into problems of clustering (named graphs=\r\n) and so on. Ugh. Link relations are a bit easier, though.&lt;/p&gt;\n\n&lt;p&gt;Talking =\r\nwith devs I simply call them objects. SemWeb people call them nodes. Topic =\r\nMappers call them topics. And I guess RESTafarians could call them resource=\r\ns, but that distinction between a resource and the representation is a bit =\r\nclose to the fundamental problem of RDF of &quot;aboutness&quot; when you u=\r\nse an URI for it; are you talking about the website, the resource or whatev=\r\ner that resource is meant to represent? It&#39;s still an unresolved proble=\r\nm (the 304 solution is an ugly hack)&lt;/p&gt;\n\n&lt;p&gt;IMHO, of course. &lt;br&gt;&lt;/p&gt;\n&lt;p&gt;R=\r\negards,&lt;/p&gt;\n&lt;p&gt;Alex&lt;/p&gt;\n\r\n--90e6ba61552217e8b304b5db9d75--\r\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":23186829,"authorName":"Paul Prescod","from":"Paul Prescod &lt;paul@...&gt;","replyTo":"SENDER","senderId":"XcoDtQrhkzxa_udZ1bBf-HyjHkvBSghn0mYdbqw5OM7Qa3MwqORJXj-NLnrcfjqXFwSQsDJKbv0Rq0CXkAUEwjkBWJNXaA","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] drafting an asynch http","postDate":"1011635000","msgId":80,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDNDNEM1MzM4LkE1NTEzODFEQHByZXNjb2QubmV0Pg==","referencesHeader":"PE5FQkJKSUhNTUxLSEVPUE5PR0hETUVHQkZJQUEubHVjYXNAZ29uemUuY29tPiA8M0M0QjNCRUUuNjIwQTBBNUFAcHJlc2NvZC5uZXQ+IDxPRTc1RGZWaVlpU1A2RXFxaW5hMDAwMTYzMjBAaG90bWFpbC5jb20+"},"prevInTopic":79,"nextInTopic":81,"prevInTime":79,"nextInTime":81,"topicId":72,"numMessagesInTopic":54,"msgSnippet":"... You are probably right. ... One design is that the thing is totally bidirectional. The client becomes the server in an HTTP sense. Definitions: HTTP","rawEmail":"Return-Path: &lt;paul@...&gt;\r\nX-Sender: paul@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_0_1_3); 21 Jan 2002 17:44:13 -0000\r\nReceived: (qmail 79283 invoked from network); 21 Jan 2002 17:44:13 -0000\r\nReceived: from unknown (216.115.97.167)\n  by m3.grp.snv.yahoo.com with QMQP; 21 Jan 2002 17:44:13 -0000\r\nReceived: from unknown (HELO smtp1.ActiveState.com) (209.17.183.249)\n  by mta1.grp.snv.yahoo.com with SMTP; 21 Jan 2002 17:44:13 -0000\r\nReceived: from smtp3.ActiveState.com (smtp3.ActiveState.com [192.168.3.19])\n\tby smtp1.ActiveState.com (8.11.6/8.11.6) with ESMTP id g0LHiA116764\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Mon, 21 Jan 2002 09:44:10 -0800\r\nReceived: from prescod.net (ssh1.ActiveState.com [192.168.3.32])\n\tby smtp3.ActiveState.com (8.11.6/8.11.6) with ESMTP id g0LHiAe08077\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Mon, 21 Jan 2002 09:44:10 -0800\r\nMessage-ID: &lt;3C4C5338.A551381D@...&gt;\r\nDate: Mon, 21 Jan 2002 09:43:20 -0800\r\nX-Mailer: Mozilla 4.76 [en] (Windows NT 5.0; U)\r\nX-Accept-Language: en\r\nMIME-Version: 1.0\r\nTo: Rest-Discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nSubject: Re: [rest-discuss] drafting an asynch http\r\nReferences: &lt;NEBBJIHMMLKHEOPNOGHDMEGBFIAA.lucas@...&gt; &lt;3C4B3BEE.620A0A5A@...&gt; &lt;OE75DfViYiSP6Eqqina00016320@...&gt;\r\nContent-Type: text/plain; charset=us-ascii\r\nContent-Transfer-Encoding: 7bit\r\nX-PerlMx-Spam: Gauge=, Probability=0%, Report=INTERNAL_HOST\r\nX-Filtered-By: PerlMx makes it fast and easy.  See http://www.ActiveState.com/Products/PerlMx/Header\r\nFrom: Paul Prescod &lt;paul@...&gt;\r\nX-Yahoo-Group-Post: member; u=23186829\r\n\r\nAsynch Messaging wrote:\n&gt; \n&gt;...\n&gt; No. Use Status 202 &quot;Accepted&quot;.\n\nYou are probably right.\n\n&gt; You are right that the initial request should use a Reply-To: header.\n&gt; The final &#39;response&#39; that closes the request/response message exchange comes\n&gt; as a new request into the Reply-To address.\n\nOne design is that the thing is totally bidirectional. The &quot;client&quot;\nbecomes the &quot;server&quot; in an HTTP sense. Definitions:\n\nHTTP client: software that generates HTTP requests and consumes to HTTP\nresponses.\n\nHTTP server: software that expects HTTP requests, interprets them as\nactions to be taken on resources and generates HTTP responses.\n\nAnother design is to keep the protocol directed. The server contacts the\nclient with a message that does NOT look like an HTTP request but rather\nlike an HTTP response.\n\nThe virtue of the former design is that it is easier to layer on the\nexisting HTTP protocol because every message going across the wire is\nHTTP-as-we-know-it.\n\nThe virtue of the latter design is that it is simpler. You don&#39;t have a\nrequest that is really a response. You have just a response. The only\nthing novel about it is that it is a new socket created by the server.\n\n&gt; That is probably a PUT to the uri in Reply-To as determined by the initiator\n&gt; of the exchange. \n\nIf I were a firewall administrator, I&#39;d rather deal with a system that\nallows an delayed response on a new socket than one that allows PUTs to\ndesktop machines in the organization.\n\nThere are costs in turning the client into a &quot;full server&quot;. We should\nconsider those carefully. It is more difficult to detect a response that\nis embedded in a request than to understand a simple request.\n\n&gt; ... That uri would identify a place to update the status of the\n&gt; initial outgoing message. The\n&gt; content would be type message/http-response - not sure if something like\n&gt; this is registered.\n\nSo we&#39;re talking about an HTTP message embedded in an HTTP message,\nright?\n\n&gt; &gt; This would be good where the basic pattern is request-response but the\n&gt; &gt; computation may take very long (especially in a workflow-type situation)\n&gt; Oooh. Workflow. Another holy grail.\n\nAll I mean is that humans may be involved in processing an HTTP request.\ni.e. if Babelfish used real human translators. You submit your data\ntoday and get back a decent translation tomorrow.\n\n&gt; &gt; and the client doesn&#39;t want to keep a socket open for days or weeks on\n&gt; &gt; end.\n&gt; &gt;\n&gt; &gt; On the other hand, notifications is about reporting when a resource\n&gt; &gt; changes. The primary virtue of notifications is that they break the\n&gt; &gt; request-response pattern of HTTP.\n&gt; Not necessarily.\n&gt; A notification about a &#39;pending request&#39; is about a resource if you model it\n&gt; as such.\n\nIf you make the HTTP client into an HTTP server then yes, it is easy to\nmake multiple &quot;responses&quot;. \n\n Paul Prescod\n\n"}}
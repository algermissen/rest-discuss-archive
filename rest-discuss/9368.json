{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"7VwwK3JehHfV70GCUhDRFXmhbEl7HQpAfx43yMYApG3BgfNmWn0QRzcK9opslU7njECZIkQe53bE9-8kjF6Cg1vyXs5bukFbiwtBL5ZT_A","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: Fun with DELETE","postDate":"1183764243","msgId":9368,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PFc2Mjc4MDM2Mjg2MjAzMTE4Mzc2NDI0M0BtYWlsLm1haWxzbmFyZS5uZXQ+"},"prevInTopic":9367,"nextInTopic":9370,"prevInTime":9367,"nextInTime":9369,"topicId":8604,"numMessagesInTopic":107,"msgSnippet":"... I think the question is, what is HTTP s reasoning for having both the 404 and the 410 response codes?  I am merely following a SHOULD directive in the","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 63864 invoked from network); 6 Jul 2007 23:24:15 -0000\r\nReceived: from unknown (66.218.66.70)\n  by m54.grp.scd.yahoo.com with QMQP; 6 Jul 2007 23:24:15 -0000\r\nReceived: from unknown (HELO mail.mailsnare.net) (209.236.228.78)\n  by mta12.grp.scd.yahoo.com with SMTP; 6 Jul 2007 23:24:15 -0000\r\nX-Virus-Scanned: by ClamAV at mailsnare.net\r\nX-Message-ID: 749f92e98ac7daa1b40c7093adeba4681e7bd0d5869d272e49d9ebde58f8da29\r\nReceived: from mail.mailsnare.net (unknown [209.236.228.74])\n\tby mail.mailsnare.net (Postfix) with ESMTP id 24B677917C\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Fri,  6 Jul 2007 23:24:04 +0000 (UTC)\r\nTo: rest-discuss@yahoogroups.com\r\nImportance: Normal\r\nSensitivity: Normal\r\nMessage-ID: &lt;W62780362862031183764243@...&gt;\r\nX-Mailer: Mintersoft EdgeDesk, Build 4.03.0105\r\nDate: Fri, 06 Jul 2007 23:24:03 +0000\r\nOrganization: Bison Systems Corporation\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;utf-8&quot;\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:0:0:0\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nReply-To: eric@...\r\nSubject: Re: Fun with DELETE\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\n&gt;\n&gt;But actually, I meant explain what the distinction was in your app.\n&gt;That is, your reasoning for needing both 404 and 410 - what it does\n&gt;for the client.\n&gt;\n\nI think the question is, what is HTTP&#39;s reasoning for having both \nthe 404 and the 410 response codes?  I am merely following a \nSHOULD directive in the standard -- it isn&#39;t just my implementation \nthat&#39;s unorthodox, the whole notion of using 410 responses and \nthe DELETE method is pretty unorthodox at this point in time as \nnobody really uses either, or the DELETE implementation is entirely \npedestrian in nature when it is used.  I am aiming for a richer \napplication which makes the fullest use of HTTP possible.\n\nSo my reasoning is the same as why I don&#39;t settle for CMS apps which \nindicate a 404 error with a custom page and a 200 OK response -- HTTP \nis a richer protocol than that and there just isn&#39;t any reason not \nto use any response code which is appropriate for the interaction.  \nPersonally, I would like to see 410 responses instead of 404 responses \nfor URLs that no longer exist (or preferably, redirects) even though \nI know the resources they used to identify still do exist, and the \nonly change has been the site&#39;s CMS and therefore its URI allocation.  \nEither set up forwarding, or mark all the old URLs 410 Gone, please.\n\nWhy?  Because it&#39;s more appropriate.  As the server administrator, I am \nnot satisfied making the reaction to DELETE always equal 410 Gone, \nbecause sometimes a DELETE is made because of a misspelt URL on a PUT \nrequest.  In which case I, as the system administrator, would like a \nsimple HTTP-based solution to change that 410 back into the 404 it was \nnever intended *not* to be -- instead of needing to ssh into the server \nand interact with the filesystem or directly with the database -- that&#39;s \na whole lotta hassle to fix a typo, so why not just DELETE the 410 Gone \nresponse?  I thought.\n\n&gt;\n&gt;I&#39;m not sure I agree. Otherwise, you have to deal with the whole\n&gt;expiry issue I mentioned, and all of the similar cases where PUT (or\n&gt;even POST) can directly result in a 4xx response. Perhaps you changed\n&gt;the access level, and now unauthorized people get a 404 because the\n&gt;server doesn&#39;t want to admit the existence of a top-secret file - that\n&gt;still doesn&#39;t mean REST is broken if you don&#39;t use a DELETE to get it\n&gt;there. Indeed, you could look at the deletion flag as an authorization\n&gt;issue: if the resource is merely flagged for deletion, it might well\n&gt;return 410 or 404 for unauthorized people, but administrators could\n&gt;still see, and thus choose to undelete, the resource.\n&gt;\n\nOK, but the original suggestion was to PUT a zero-byte file, which is \na direct &quot;remove&quot; operation on my implementation, so in relation to \nmy implementation that would not be a RESTful solution.\n\n&gt;\n&gt;I&#39;m not saying the way you&#39;re wanting to do it isn&#39;t workable, and I\n&gt;don&#39;t think I&#39;m qualified to judge if it&#39;s RESTful or not. I&#39;m just\n&gt;saying it isn&#39;t the only way to do it (Perl programmers are like\n&gt;that).\n&gt;\n\nRight, and I didn&#39;t mean to slam the notion of an expiration date, or \nthe other valid cases you mention -- only to explain why it would not \nbe RESTful for a zero-byte PUT to function as a DELETE.  Of course, \nthat is qualified as &quot;in my implementation&quot; as well, although I am \npretty sure that it would go for any conceivable setup, but I won&#39;t \nmake that leap, because I allow for others to think outside my box.\n\nI only deem anything &quot;un-RESTful&quot; if I can specifically explain what \nREST constraint in particular has been broken, and how, and why it \nshould not be.  For example, any application that uses PUT to impose \n&quot;merge&quot; semantics is, by my thinking, inherently un-RESTful because \nthe uniform interface constraint requires PUT to mean replace, and \nI&#39;ve fully detailed my position.  Nobody has to be a 100% expert on \nREST before being able to point out a broken constraint, the only \nrequirement is an understanding of the constraint in question, and a \nwillingness to accept that you&#39;re wrong and learn from it.\n\n-Eric\n\n\n\n\n"}}
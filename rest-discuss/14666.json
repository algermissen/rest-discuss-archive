{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":223135631,"authorName":"Felipe Ga√∫cho","from":"=?ISO-8859-1?Q?Felipe_Ga=FAcho?= &lt;fgaucho@...&gt;","profile":"felipegaucho2003","replyTo":"SENDER","senderId":"TY-s1qhD-Kqi7pZamVJZIs0-wnEvhG7_0zWEv_NwiLEkQruCOnVLsZA01wUqFo0TmNHhssb8PtXFhQh6ErkappHkqa72-x-kZoos6n9PJmVoaR8oXIQpva9WPw","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] HATEOAS question","postDate":"1264432006","msgId":14666,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGQxMTYwMzg2MTAwMTI1MDcwNncyN2QwMTBiOGs5NDk0MzhkOTczZmNmZTM2QG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PDU4MWJmNjE2MTAwMTI1MDMxMXcxOTEyNzEyNXAxNTNiYTc4MzUzMjdjMjk4QG1haWwuZ21haWwuY29tPg==","referencesHeader":"PGQxMTYwMzg2MTAwMTI0MDcyMnA2NjdlMWE0NXI3OGQ1YjRiZmQyMTZhODcxQG1haWwuZ21haWwuY29tPgkgPDg0MTcxOTFDLTBBRkQtNDg1Qy05RkM1LTVCNUIwQjY0MzJCNUBtYWMuY29tPgkgPDU4MWJmNjE2MTAwMTI0MTQyNXQzMjFlOTA2Y3U5YmUyNTZkYmIwN2JmZjQwQG1haWwuZ21haWwuY29tPgkgPGQxMTYwMzg2MTAwMTI0MjIxOGg1MWU4ODQ0ZXEyYzUwY2UyY2JkMmViZGRAbWFpbC5nbWFpbC5jb20+CSA8NTgxYmY2MTYxMDAxMjUwMzExdzE5MTI3MTI1cDE1M2JhNzgzNTMyN2MyOThAbWFpbC5nbWFpbC5jb20+"},"prevInTopic":14664,"nextInTopic":14667,"prevInTime":14665,"nextInTime":14667,"topicId":14654,"numMessagesInTopic":13,"msgSnippet":"just for curiosity... (if you posted a real code).... - the code is digesting the exceptions ?? - how your code knows the return type (json, xml, xhtml, etc)? ","rawEmail":"Return-Path: &lt;fgaucho@...&gt;\r\nX-Sender: fgaucho@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 52020 invoked from network); 25 Jan 2010 15:06:47 -0000\r\nX-Received: from unknown (98.137.34.44)\n  by m12.grp.re1.yahoo.com with QMQP; 25 Jan 2010 15:06:47 -0000\r\nX-Received: from unknown (HELO mail-pw0-f51.google.com) (209.85.160.51)\n  by mta1.grp.sp2.yahoo.com with SMTP; 25 Jan 2010 15:06:47 -0000\r\nX-Received: by pwj15 with SMTP id 15so2271335pwj.30\n        for &lt;rest-discuss@yahoogroups.com&gt;; Mon, 25 Jan 2010 07:06:47 -0800 (PST)\r\nMIME-Version: 1.0\r\nX-Received: by 10.141.15.7 with SMTP id s7mr4745044rvi.160.1264432006802; Mon, \n\t25 Jan 2010 07:06:46 -0800 (PST)\r\nIn-Reply-To: &lt;581bf6161001250311w19127125p153ba7835327c298@...&gt;\r\nReferences: &lt;d11603861001240722p667e1a45r78d5b4bfd216a871@...&gt;\n\t &lt;8417191C-0AFD-485C-9FC5-5B5B0B6432B5@...&gt;\n\t &lt;581bf6161001241425t321e906cu9be256dbb07bff40@...&gt;\n\t &lt;d11603861001242218h51e8844eq2c50ce2cbd2ebdd@...&gt;\n\t &lt;581bf6161001250311w19127125p153ba7835327c298@...&gt;\r\nDate: Mon, 25 Jan 2010 16:06:46 +0100\r\nMessage-ID: &lt;d11603861001250706w27d010b8k949438d973fcfe36@...&gt;\r\nTo: &quot;rest-discuss@yahoogroups.com List&quot; &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Type: multipart/alternative; boundary=000e0cd119189badf4047dfe84a8\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: =?ISO-8859-1?Q?Felipe_Ga=FAcho?= &lt;fgaucho@...&gt;\r\nSubject: Re: [rest-discuss] HATEOAS question\r\nX-Yahoo-Group-Post: member; u=223135631; y=_QKKw4-0orTSEvDCXUjOuF0NWqZTD7k9kNoUhGlz3a5a8Mn7ZgOHMwTQXQ\r\nX-Yahoo-Profile: felipegaucho2003\r\n\r\n\r\n--000e0cd119189badf4047dfe84a8\r\nContent-Type: text/plain; charset=windows-1252\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\njust for curiosity... (if you posted a real code)....\n\n- the code is digest=\r\ning the exceptions ??\n- how your code knows the return type (json, xml, xht=\r\nml, etc)?\n\nas fair I see this are the only difference between the two codes=\r\n..\n\n* yes, I can use that trick to inspect the generic type, but I preferre=\r\nd to\npass as reference due to other purposes ...\n\n\n2010/1/25 Guilherme Silv=\r\neira &lt;guilherme.silveira@...&gt;\n\n&gt; &gt; please point to an example...\n=\r\n&gt; Convention over Configuration: Erlang&#39;s OTP imply on default function nam=\r\nes\n&gt; in order to work, otherwise you have to work it on your own. Rails is =\r\nthe\n&gt; best example, being used around with a lot of conventions.\n&gt;\n&gt; For th=\r\ne Java platform, Restfulie follows this path in the controller: the\n&gt; same =\r\nJAX-RS code you have mentioned in restfulie java could be to:\n&gt;\n&gt; public T =\r\nread(Object key) {\n&gt;   return manager.find(key);\n&gt; }\n&gt;\n&gt; public T retrieve(=\r\nT object) {\n&gt;   return dao.read(object.getPrimaryKey());\n&gt; }\n&gt;\n&gt;\n&gt; Of couse=\r\n, it depends on a lot of conventions - but they made your code much\n&gt; simpl=\r\ner:\n&gt; a) the dao object knows how to generic handle types\n&gt; b) the controll=\r\ner methods that know how to handle resources have some\n&gt; default names (ret=\r\nrieve, update, create, delete, head, ...)\n&gt;\n&gt; All of this can be implemente=\r\nd - including removing both methods and\n&gt; requiring zero code for this spec=\r\nific behavior, if thats the conventional\n&gt; one.\n&gt;\n&gt; cheers\n&gt;\n&gt; Guilherme Si=\r\nlveira\n&gt; Caelum | Ensino e Inova=E7=E3o\n&gt; http://www.caelum.com.br/\n&gt;\n&gt;\n&gt; m=\r\ny current code for reading a resource:\n&gt;&gt;\n&gt;&gt; @Override\n&gt;&gt; @TransactionAttri=\r\nbute(TransactionAttributeType.NOT_SUPPORTED)\n&gt;&gt; public T read(Class&lt;T&gt; type=\r\n, final Object primaryKey)\n&gt;&gt; throws IllegalStateException, IllegalArgument=\r\nException {\n&gt;&gt; return manager.find(type, primaryKey);\n&gt;&gt; }\n&gt;&gt;\n&gt;&gt; and the co=\r\nde to expose it on the web:\n&gt;&gt;\n&gt;&gt; @GET\n&gt;&gt; @Produces( { MediaType.APPLICATIO=\r\nN_XML, MediaType.APPLICATION_JSON })\n&gt;&gt; @Path(&quot;{name}&quot;)\n&gt;&gt; public PujCompet=\r\nitionDetailsEntity read(@PathParam(&quot;name&quot;) String name) {\n&gt;&gt; return details=\r\nFacade.read(PujCompetitionDetailsEntity.class, name);\n&gt;&gt; }\n&gt;&gt;\n&gt;&gt;  \n&gt;&gt;\n&gt;\n&gt;\n\n=\r\n\n-- \n------------------------------------------\n  Felipe Ga=FAcho\n  10+ Jav=\r\na Programmer\n  CEJUG Senior Advisor\n\r\n--000e0cd119189badf4047dfe84a8\r\nContent-Type: text/html; charset=windows-1252\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\njust for curiosity... (if you posted a real code)....&lt;br&gt;&lt;br&gt;- the code is =\r\ndigesting the exceptions ??&lt;br&gt;- how your code knows the return type (json,=\r\n xml, xhtml, etc)?&lt;br&gt;&lt;br&gt;as fair I see this are the only difference betwee=\r\nn the two codes.. &lt;br&gt;\n&lt;br&gt;* yes, I can use that trick to inspect the gener=\r\nic type, but I preferred to pass as reference due to other purposes ... &lt;br=\r\n&gt;&lt;br&gt;&lt;br&gt;&lt;div class=3D&quot;gmail_quote&quot;&gt;2010/1/25 Guilherme Silveira &lt;span dir=\r\n=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:guilherme.silveira@...&quot;&gt;guilherme.=\r\nsilveira@...&lt;/a&gt;&gt;&lt;/span&gt;&lt;br&gt;\n&lt;blockquote class=3D&quot;gmail_quote&quot;=\r\n style=3D&quot;border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.=\r\n8ex; padding-left: 1ex;&quot;&gt;&lt;div class=3D&quot;im&quot;&gt;&gt;=A0please point to an exampl=\r\ne...&lt;/div&gt;&lt;div&gt;Convention over Configuration: Erlang&#39;s OTP imply on def=\r\nault function names in order to work, otherwise you have to work it on your=\r\n own. Rails is the best example, being used around with a lot of convention=\r\ns.&lt;/div&gt;\n\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;For the Java platform, Restfulie follows thi=\r\ns path in the controller: the same JAX-RS code you have mentioned in restfu=\r\nlie java could be to:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;public T read(Object key)=A0=\r\n{&lt;br&gt;=A0=A0return manager.find(key);&lt;br&gt;\n\n\n}&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;=\r\ndiv&gt;public T retrieve(T object) {&lt;br&gt;=A0=A0return dao.read(object.getPrimar=\r\nyKey());&lt;br&gt;}&lt;br&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Of couse, it depends on a=\r\n lot of conventions - but they made your code much simpler:&lt;/div&gt;\n\n\n&lt;div&gt;a)=\r\n the dao object knows how to generic handle types&lt;/div&gt;&lt;div&gt;b) the controll=\r\ner methods that know how to handle resources have some default names (retri=\r\neve, update, create, delete, head, ...)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;\n\n\nAll of =\r\nthis can be implemented - including removing both methods and requiring zer=\r\no code for this specific behavior, if thats the conventional one.&lt;/div&gt;&lt;div=\r\n&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;cheers&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;div&gt;Guilherme Silveira&lt;br&gt;\n\n\nCa=\r\nelum | Ensino e Inova=E7=E3o&lt;br&gt;&lt;a href=3D&quot;http://www.caelum.com.br/&quot; targe=\r\nt=3D&quot;_blank&quot;&gt;http://www.caelum.com.br/&lt;/a&gt;&lt;br&gt;\n&lt;br&gt;&lt;br&gt;&lt;div class=3D&quot;gmail_=\r\nquote&quot;&gt;&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;border-left: 1px solid rg=\r\nb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;&quot;&gt;&lt;div style=\r\n=3D&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;div&gt;&lt;div&gt;\n&lt;div class=3D&quot;im&quot;&gt;&lt;di=\r\nv&gt;\nmy current code for reading a resource:&lt;br&gt;\n&lt;br&gt;\n@Override&lt;br&gt;\n@Transact=\r\nionAttribute(TransactionAttributeType.NOT_SUPPORTED)&lt;br&gt;\npublic T read(Clas=\r\ns&lt;T&gt; type, final Object primaryKey)&lt;br&gt;\n\t\tthrows IllegalStateExceptio=\r\nn, IllegalArgumentException {&lt;br&gt;\n\treturn manager.find(type, primaryKey);&lt;b=\r\nr&gt;\n}&lt;br&gt;\n&lt;br&gt;\nand the code to expose it on the web:&lt;br&gt;\n&lt;br&gt;\n@GET&lt;br&gt;\n@Prod=\r\nuces( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })&lt;br&gt;\n@Path(=\r\n&quot;{name}&quot;)&lt;br&gt;\npublic PujCompetitionDetailsEntity read(@PathParam(=\r\n&quot;name&quot;) String name) {&lt;br&gt;\n\treturn detailsFacade.read(PujCompetit=\r\nionDetailsEntity.class, name);&lt;br&gt;\n}&lt;br&gt;\n&lt;p&gt;&lt;/p&gt;\n\n    &lt;/div&gt;\n     \n\n    \n  =\r\n  &lt;/div&gt;&lt;div style=3D&quot;color: rgb(255, 255, 255); min-height: 0pt;&quot;&gt;&lt;/div&gt;\n\n=\r\n\n&lt;/div&gt;\n\n\n\n  \n\n\n\n\n\n\n&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/blockquote&gt;&lt;/div&gt;=\r\n&lt;br&gt;&lt;br clear=3D&quot;all&quot;&gt;&lt;br&gt;-- &lt;br&gt;------------------------------------------=\r\n&lt;br&gt; =A0 Felipe Ga=FAcho&lt;br&gt; =A0 10+ Java Programmer&lt;br&gt; =A0 CEJUG Senior A=\r\ndvisor&lt;br&gt;&lt;br&gt;\n\r\n--000e0cd119189badf4047dfe84a8--\r\n\n"}}
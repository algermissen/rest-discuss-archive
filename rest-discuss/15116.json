{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"u7MBvx-SUSWDubRJ1TkE5pqY2xGKkCjJGqvjgvdt31V-lUy8kHOWt_pLElhpRRKYQk7yecsb2cx-K95bsYeCTRgMHwSHb4RZJx50iH-z7Q","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] client keeps its state","postDate":"1270448692","msgId":15116,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMTAwNDA1MDAyNDUyLmQ3NzNiNDM4LmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","inReplyToHeader":"PGkydTU4MWJmNjE2MTAwNDAzMTgzM2s3YWRmZDk0Y3Q3ZjY4OWY2NGE1Zjc3ZTI0QG1haWwuZ21haWwuY29tPg==","referencesHeader":"PGkydTU4MWJmNjE2MTAwNDAzMTgzM2s3YWRmZDk0Y3Q3ZjY4OWY2NGE1Zjc3ZTI0QG1haWwuZ21haWwuY29tPg=="},"prevInTopic":15115,"nextInTopic":15119,"prevInTime":15115,"nextInTime":15117,"topicId":15101,"numMessagesInTopic":33,"msgSnippet":"... This thread needs a terminology scrub.  In REST, the application is defined as what the user is trying to accomplish , and the user s agent is the","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 79858 invoked from network); 5 Apr 2010 06:25:21 -0000\r\nX-Received: from unknown (98.137.34.44)\n  by m14.grp.re1.yahoo.com with QMQP; 5 Apr 2010 06:25:21 -0000\r\nX-Received: from unknown (HELO mxout-08.mxes.net) (216.86.168.183)\n  by mta1.grp.sp2.yahoo.com with SMTP; 5 Apr 2010 06:25:21 -0000\r\nX-Received: from bigbison (unknown [65.117.211.162])\n\t(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))\n\t(No client certificate requested)\n\tby smtp.mxes.net (Postfix) with ESMTPSA id 4B7B6509DB;\n\tMon,  5 Apr 2010 02:25:19 -0400 (EDT)\r\nDate: Mon, 5 Apr 2010 00:24:52 -0600\r\nTo: Guilherme Silveira &lt;guilherme.silveira@...&gt;\r\nCc: rest-discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nMessage-Id: &lt;20100405002452.d773b438.eric@...&gt;\r\nIn-Reply-To: &lt;i2u581bf6161004031833k7adfd94ct7f689f64a5f77e24@...&gt;\r\nReferences: &lt;i2u581bf6161004031833k7adfd94ct7f689f64a5f77e24@...&gt;\r\nOrganization: Bison Systems Corporation\r\nX-Mailer: Sylpheed 3.0.0 (GTK+ 2.10.14; i686-pc-mingw32)\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=US-ASCII\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nSubject: Re: [rest-discuss] client keeps its state\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\nGuilherme Silveira wrote:\n&gt;\n&gt; How should a client decide its next step?\n&gt;\n\nThis thread needs a terminology scrub.  In REST, the application is\ndefined as &quot;what the user is trying to accomplish&quot;, and the user&#39;s\nagent is the &quot;client&quot;.  The client never decides what to do next, only\nthe user does.  The client is there to carry out the user&#39;s orders.\n\nThe &quot;user&quot; of course, is not required to be human.  But, this thread is\nas clear as mud, because &quot;user&quot; and &quot;user-agent&quot; are being combined\ninto &quot;client&quot;.  When I as a human am driving a REST application, I am\nnot the &quot;client&quot; nor am I part of the &quot;client component&quot;.\n\nAs best I can tell, I&#39;m the &quot;user component&quot; the client sees through a\n&quot;middleware connector&quot; just like BIND components interact with client,\nserver and intermediary components through resolver (also middleware)\nconnectors. I see a machine user the same way -- as a &quot;user component&quot;.\n\nI think it would help the discussion of m2m interaction to enforce the\ndistinction between &quot;client&quot; and &quot;user&quot;.  A machine user is trying to\naccomplish a set task, just like a human user.  How the machine user\nutilizes the client component to accomplish its task is a discrete\nproblem, separate from the problem of the client&#39;s application state.\n\nWith a shopping-cart system, the human user is presented with a series\nof application steady-states.  These steady-states contain many links\nthat are of no interest to me if I&#39;m trying to check out my cart.  If\nmy goal is to check out my cart, I only have interest in the specific\nstate transitions presented which advance me towards that goal.\n\nThe problem is, how does a machine user deduce which of the presented\nstate-transition options will advance it towards its goal?  This is a\nproblem orthogonal to REST, which is not to say off-topic to rest-\ndiscuss.  Once the client component arrives at the proper steady-state\nREST doesn&#39;t enter the equation again, until the user requests some\ntransition to the next steady-state in their specific application.\n\nThis is a &quot;vocabulary problem&quot;.  As we discussed here late last year,\nit would be nice if there existed some standardized RDFa and link\nrelations to describe state transitions specific to checking out a\nshopping cart, and provide common markup for Name, CC#, sec code,\nbilling/delivery address(es) and other standard form fields.  Such\nefforts are, in fact, underway.\n\nIt would then be trivial to write a machine agent capable of finding\nthe best price on toilet tissue (etc.) every few months, and placing a\nresupply order on my behalf.  This machine agent knows exactly how to\nfill out the forms and drive the shopping-cart application because it\nhas knowledge of standard link relations, media types, and HTTP methods\n-- in addition to supplemental knowledge of the various domain-specific\nvocabularies it will encounter until some standard is arrived at, and\nof course specific knowledge about my brand, color, scent and pricing\npreferences, plus of course my billing and shipping information (which\nthe merchant may also have stored as application state in the\nrepresentation my agent retrieved).\n\nThe GETting and POSTing of information using self-documenting HTML form\ninterfaces is the purview of REST.  How these application steady-states\ninform the user as to how to proceed towards various goals (each choice\nrepresenting a different possible &quot;application&quot; in its own right), is\nopaque behind the Uniform Interface, just like system logic on the\nserver.\n\nInforming human users is simple -- provided the system speaks their\nhuman vocabulary (English, Spanish etc.).  Informing machine users how\nto drive the exact same application logic (series of forms in the\ncheckout process, for example) a human uses, is a problem that needs to\nbe addressed in markup, not over the wire -- IOW, the shopping-cart\nproblem is best solved for m2m without creating any new media types.\n\nThe middleware connector between the user-agent and user components\ncould be called a &quot;user connector&quot; or an &quot;agent connector&quot;, but I would\nnot use both, as it would imply that there&#39;s some difference to REST\nwhether data input is programmatic, or keyboard and/or mouse (etc.).\nThe important notion is that &quot;user&quot; and &quot;user-agent&quot; are different\ncomponents in a REST application.\n\nKeith already addressed the other common terminology problem -- there\nare both resource state and application state, and the two are not the\nsame (even when they appear to be).\n\nTo answer the OP, &quot;So the client should always infer its next step only\nbased on its current representation, media type and relations?&quot;\n\nThe server instructs the client, using common media types and link\nrelations, how to derive and render a steady-state.  This application\nsteady-state may or may not be the same as the state of the resource\nindicated by the initially-dereferenced representation.  This process\nis bound by REST constraints.\n\n(You won&#39;t see a full set of links on my demo unless your client\nprocesses the initially-dereferenced resource&#39;s representation through\na linked XSLT stylesheet -- the rendered, CSS-styled result is the\napplication steady-state, which is mashed up from multiple source\ndocuments dereferenced during XSLT processing -- if dereferenced\ndirectly, most of these source documents aren&#39;t containers, so the\nresulting application state would be identical to that resource&#39;s\nstate -- communicated via the dereferenced representation -- for some\nunknown instance of time before or after the immediate present.)\n\nIt&#39;s this derived application state that presents the client with one\nor more possible state transitions.  The client presents the user with\nthese options.  The human user can track and evaluate whatever the heck\nit wants to, when deciding which state transition to pursue.  Your AI\nuser is equally at liberty in what it can evaluate when determining how\nto proceed -- the price of TP from different suppliers, for example.\nThis process is unbound by any REST constraints.\n\n-Eric\n\n"}}
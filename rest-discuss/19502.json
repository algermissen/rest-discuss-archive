{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":45758910,"authorName":"Erik Mogensen","from":"Erik Mogensen &lt;erik@...&gt;","profile":"mogsie_oslo","replyTo":"SENDER","senderId":"e52ekRrnQq-qYD00XEzLOfNKPB79XAqLhBwzbyG5QBm87TVzAeIdJ2SVkzj9gk5PFrsGqUQCDnl-HqeiRbQz14luyaFRVG9OmQ","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Atom and prev links","postDate":"1372435793","msgId":19502,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PENBRGJHWmpZd0hKR0tocDZGMWpiWmloVXRadTlhdFVTdWRraGNTMVQ3d3Qzc0FzdlpmQUBtYWlsLmdtYWlsLmNvbT4=","inReplyToHeader":"PENBQzlSUXRqK1IzVHZ1TjdSVGpFT0dNWFR1NmlZMU1NdEZtdmp2YnJTK3NpRHZmVEtvUUBtYWlsLmdtYWlsLmNvbT4=","referencesHeader":"PENBQzlSUXRqK1IzVHZ1TjdSVGpFT0dNWFR1NmlZMU1NdEZtdmp2YnJTK3NpRHZmVEtvUUBtYWlsLmdtYWlsLmNvbT4="},"prevInTopic":19501,"nextInTopic":19503,"prevInTime":19501,"nextInTime":19503,"topicId":19487,"numMessagesInTopic":23,"msgSnippet":"... also use the prev link of the first page of a feed to link to the page containing the items that will be .  We find that it s an extremely resilient way","rawEmail":"Return-Path: &lt;3rik.mogensen@...&gt;\r\nX-Sender: 3rik.mogensen@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 69941 invoked from network); 28 Jun 2013 16:10:24 -0000\r\nX-Received: from unknown (98.137.63.211)\n  by m6.grp.sp2.yahoo.com with QMQP; 28 Jun 2013 16:10:24 -0000\r\nX-Received: from unknown (HELO mail-pb0-f50.google.com) (209.85.160.50)\n  by mtaq1.grp.sp2.yahoo.com with SMTP; 28 Jun 2013 16:10:24 -0000\r\nX-Received: by mail-pb0-f50.google.com with SMTP id wz7so2454128pbc.9\n        for &lt;rest-discuss@yahoogroups.com&gt;; Fri, 28 Jun 2013 09:10:24 -0700 (PDT)\r\nX-Received: by 10.66.41.48 with SMTP id c16mr7390227pal.34.1372435823898; Fri,\n 28 Jun 2013 09:10:23 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.70.1.229 with HTTP; Fri, 28 Jun 2013 09:09:53 -0700 (PDT)\r\nIn-Reply-To: &lt;CAC9RQtj+R3TvuN7RTjEOGMXTu6iY1MMtFmvjvbrS+siDvfTKoQ@...&gt;\r\nReferences: &lt;CAC9RQtj+R3TvuN7RTjEOGMXTu6iY1MMtFmvjvbrS+siDvfTKoQ@...&gt;\r\nDate: Fri, 28 Jun 2013 18:09:53 +0200\r\nX-Google-Sender-Auth: nerHVhMoVl6v_XUvSAs45ORYeos\r\nMessage-ID: &lt;CADbGZjYwHJGKhp6F1jbZihUtZu9atUSudkhcS1T7wt3sAsvZfA@...&gt;\r\nTo: Greg Young &lt;gregoryyoung1@...&gt;\r\nCc: Rest List &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Type: multipart/alternative; boundary=bcaec53f3a61c2b89004e0391d93\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Erik Mogensen &lt;erik@...&gt;\r\nSubject: Re: [rest-discuss] Atom and prev links\r\nX-Yahoo-Group-Post: member; u=45758910; y=qXW2oePD1F8-ZqsyPpBdbcM1HJGrbMbkeHf-EidaTRVzuSvFANM\r\nX-Yahoo-Profile: mogsie_oslo\r\n\r\n\r\n--bcaec53f3a61c2b89004e0391d93\r\nContent-Type: text/plain; charset=ISO-8859-1\r\n\r\nOn Fri, Jun 28, 2013 at 12:16 PM, Greg Young &lt;gregoryyoung1@...&gt;wrote:\n\n&gt; **\n&gt;\n&gt;\n&gt; We have a mature atom implementation for distribution of event streams\n&gt; and as always the devil is in the details...\n&gt;\n&gt; The issue revolves around prev links. At some point on an atom feed\n&gt; you will hit the current item, prev will point to the next item that\n&gt; does not yet exist. Most implementations I can find 404 this uri and\n&gt; the client has the logic to keep polling the 404. This seems off to\n&gt; me, I would expect this to be a 204. Then if I change my uri structure\n&gt; it becomes a 404, otherwise it would seem that if I change my uri\n&gt; structure all prev uris would need to redirect to the new ones (which\n&gt; would be a rather large undertaking).\n&gt;\n&gt; I couldn&#39;t find any details on this in relevant specs, has anyone seen\n&gt; this?\n&gt;\n&gt; Greg, I&#39;d just like to explain how we do more or less the same thing.  We\nalso use the prev link of the &quot;first page&quot; of a feed to link to the page\ncontaining the items that &quot;will be&quot;.  We find that it&#39;s an extremely\nresilient way of dissipating information about things that fit in atom\nfeeds, and a relatively efficient system too.\n\nInfinitely cacheable resources are nice, but instead of 404, or 204 and so\non, we expose an empty feed document, with a next link but no prev link.\n When things happen, the page (when refreshed) contains one or more\nentries, and becomes cacheable.\n\nOur &quot;head&quot; document is very small; contains no real data so it&#39;s easy to\ngenerate; supports cache validation, and if it&#39;s incorrectly cached as\nfresh by an intermediary or a caching client, it only impedes the ability\nof clients to advance to the &quot;newer&quot; entries.  Eventually, they will\nadvance to the next state.\n\nIf I were to do this again, I might consider using 302 some other temporary\nredirect, instead of the 404 or the empty feed; redirect back to the\ncurrent (infinitely cacheable) first page.  When a new item appears, the\n302 would turn into the &quot;new&quot; first page&quot; a 200 with new next/prev links,\n\nI wonder if &quot;Cache-Control&quot; or &quot;Retry-After&quot; would be useful for 302\nresponses, to ask clients to back off under heavy load.\n-- \n-mogsie-\n\r\n--bcaec53f3a61c2b89004e0391d93\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;div dir=3D&quot;ltr&quot;&gt;&lt;br&gt;&lt;div class=3D&quot;gmail_extra&quot;&gt;&lt;div class=3D&quot;gmail_quote&quot;&gt;=\r\nOn Fri, Jun 28, 2013 at 12:16 PM, Greg Young &lt;span dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=\r\n=3D&quot;mailto:gregoryyoung1@...&quot; target=3D&quot;_blank&quot;&gt;gregoryyoung1@gmail.c=\r\nom&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;\n\n&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;ma=\r\nrgin:0px 0px 0px 0.8ex;border-left-width:1px;border-left-color:rgb(204,204,=\r\n204);border-left-style:solid;padding-left:1ex&quot;&gt;\n\n\n&lt;u&gt;&lt;/u&gt;\n\n\n\n\n\n\n\n\n\n\n&lt;div st=\r\nyle&gt;\n&lt;span&gt;=A0&lt;/span&gt;\n\n\n&lt;div&gt;\n  &lt;div&gt;\n\n\n    &lt;div&gt;\n      \n      \n      &lt;p&gt;We=\r\n have a mature atom implementation for distribution of event streams&lt;br&gt;\nan=\r\nd as always the devil is in the details...&lt;br&gt;\n&lt;br&gt;\nThe issue revolves arou=\r\nnd prev links. At some point on an atom feed&lt;br&gt;\nyou will hit the current i=\r\ntem, prev will point to the next item that&lt;br&gt;\ndoes not yet exist. Most imp=\r\nlementations I can find 404 this uri and&lt;br&gt;\nthe client has the logic to ke=\r\nep polling the 404. This seems off to&lt;br&gt;\nme, I would expect this to be a 2=\r\n04. Then if I change my uri structure&lt;br&gt;\nit becomes a 404, otherwise it wo=\r\nuld seem that if I change my uri&lt;br&gt;\nstructure all prev uris would need to =\r\nredirect to the new ones (which&lt;br&gt;\nwould be a rather large undertaking).&lt;b=\r\nr&gt;\n&lt;br&gt;\nI couldn&#39;t find any details on this in relevant specs, has anyo=\r\nne seen this?&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;Greg, I&#39;d=\r\n just like to explain how we do more or less the same thing. =A0We also use=\r\n the prev link of the &quot;first page&quot; of a feed to link to the page =\r\ncontaining the items that &quot;will be&quot;. =A0We find that it&#39;s an =\r\nextremely resilient way of dissipating information about things that fit in=\r\n atom feeds, and a relatively efficient system too.&lt;div&gt;\n\n&lt;br&gt;&lt;/div&gt;&lt;div&gt;In=\r\nfinitely cacheable resources are nice, but instead of 404, or 204 and so on=\r\n, we expose an empty feed document, with a next link but no prev link. =A0W=\r\nhen things happen, the page (when refreshed) contains one or more entries, =\r\nand becomes cacheable.&lt;/div&gt;\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Our &quot;head&quot; docu=\r\nment is very small; contains no real data so it&#39;s easy to generate; sup=\r\nports cache validation, and if it&#39;s incorrectly cached as fresh by an i=\r\nntermediary or a caching client, it only impedes the ability of clients to =\r\nadvance to the &quot;newer&quot; entries. =A0Eventually, they will advance =\r\nto the next state.=A0&lt;/div&gt;\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div style&gt;If I were to do this=\r\n again, I might consider using 302 some other temporary redirect, instead o=\r\nf the 404 or the empty feed; redirect back to the current (infinitely cache=\r\nable) first page. =A0When a new item appears, the 302 would turn into the &=\r\nquot;new&quot; first page&quot; a 200 with new next/prev links,=A0&lt;/div&gt;\n\n&lt;=\r\ndiv style&gt;&lt;br&gt;&lt;/div&gt;&lt;div style&gt;I wonder if &quot;Cache-Control&quot; or &qu=\r\not;Retry-After&quot; would be useful for 302 responses, to ask clients to b=\r\nack off under heavy load.&lt;/div&gt;&lt;/div&gt;-- &lt;br&gt;-mogsie-\n&lt;/div&gt;&lt;/div&gt;\n\r\n--bcaec53f3a61c2b89004e0391d93--\r\n\n"}}
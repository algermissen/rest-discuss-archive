{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":10266038,"authorName":"Jeff Bone","from":"Jeff Bone &lt;jbone@...&gt;","replyTo":"SENDER","senderId":"8Iclv6IOfyD_9U2B9uqSf2KC8n2HC3b7Xk-AftSfBKICH_zoy7cpJX6h4Zsxh00VolXKfP5xMmKsgh1ro3bG1OM","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Semi-Proxies, Transparent Tunnels, and The Switchboard Pattern","postDate":"1012168209","msgId":376,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDNDNTQ3NjExLkJCOEU4RkQ1QGp1bXAubmV0Pg=="},"prevInTopic":0,"nextInTopic":0,"prevInTime":375,"nextInTime":377,"topicId":376,"numMessagesInTopic":1,"msgSnippet":"First draft for comment, hope the HTML doesn t screw anyone up. If it does, let me know, I ll resend text-only. ABSTRACT The Web is a global information","rawEmail":"Return-Path: &lt;jbone@...&gt;\r\nX-Sender: jbone@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_0_1_3); 27 Jan 2002 21:52:53 -0000\r\nReceived: (qmail 18059 invoked from network); 27 Jan 2002 21:52:53 -0000\r\nReceived: from unknown (216.115.97.172)\n  by m12.grp.snv.yahoo.com with QMQP; 27 Jan 2002 21:52:53 -0000\r\nReceived: from unknown (HELO blanco.clickfeed.com) (207.8.92.96)\n  by mta2.grp.snv.yahoo.com with SMTP; 27 Jan 2002 21:52:51 -0000\r\nReceived: from jump.net (cust-92-97.customer.jump.net [207.8.92.97])\n\tby blanco.clickfeed.com (8.10.0/8.10.0) with ESMTP id g0RLqnK25624\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Sun, 27 Jan 2002 15:52:49 -0600\r\nMessage-ID: &lt;3C547611.BB8E8FD5@...&gt;\r\nDate: Sun, 27 Jan 2002 15:50:09 -0600\r\nX-Mailer: Mozilla 4.7 [en]C-CCK-MCD {Sony}  (Win98; I)\r\nX-Accept-Language: en\r\nMIME-Version: 1.0\r\nTo: Rest-Discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nSubject: Semi-Proxies, Transparent Tunnels, and The Switchboard Pattern\r\nContent-Type: multipart/alternative;\n boundary=&quot;------------5C00BFD18711DAC25EA7546B&quot;\r\nFrom: Jeff Bone &lt;jbone@...&gt;\r\nX-Yahoo-Group-Post: member; u=10266038\r\n\r\n\r\n--------------5C00BFD18711DAC25EA7546B\r\nContent-Type: text/plain; charset=us-ascii\r\nContent-Transfer-Encoding: 7bit\r\n\r\n\nFirst draft for comment, hope the HTML doesn&#39;t screw anyone up.\nIf it does, let me know, I&#39;ll resend text-only.\n\nABSTRACT\n\nThe Web is a global information namespace and generic resource\ninterface superimposed on a degree-one network of nodes which can\nconnect to each other.  Directionality of requests and responses\nis today unfortunately intimately entangled with directionality\nof connectivity, and due to firewalls connectivity is\nasymmetric.  This is unfortunate because interesting addressible\nresources potentially exist on *all* nodes.  The value of the Web\nas a whole is therefore seriously and unnecessarily constrained\nby the asymmetry of connectivity.\n\nThis document (&quot;speclet&quot;) is a high-level description of two\narchitectural additions to the Web which, taken together, provide\na principled solution to the problem of asymmetric connectivity\nand therefore allow all nodes in the network to present resources\nto all other nodes.  The two components are a new intermediary\ntype called a &quot;semi-proxy&quot;  and a new connector type called a\n&quot;transparent tunnel.&quot;  These two components may be used together\nin a &quot;switchboard pattern&quot; to provide securable, apparent\nuniversal symmetry of connectivity within the context of the\nprincipled Web architecture.\n\nTERMINOLOGY\n\nRather than referring to client and server roles, let&#39;s describe\nthe Web as consisting of open and closed nodes.  Open nodes are\nthose that can receive inbound connections from some other nodes\nof interest;  i.e., they are typically &quot;outside&quot; a firewalled\nenvironment.  Closed nodes are those nodes that cannot receive\ninbound connections from some other nodes of interest, but can\ninitiate connections to other nodes of interest;  they are\ntyplically &quot;behind&quot; a firewall.  A node&#39;s open or closed state is\nreferred to as its connectivity.  It is desirable to consider\nconnectivity as orthogonal to the role a node may play in\ngenerating or servicing HTTP requests.  Any node may therefore\nserve as a requestor or respondor.  A requestor is a node which\ninitiates an HTTP 1.1 request.  A respondor accepts HTTP requests\nand generates HTTP responses.\n\nA note about synchrony:  HTTP is a synchronous protocol;  each\nHTTP request results in a synchronous / immediate response.  Many\napplication communication patterns benefit from asynchrony;  this\nis usually referred to as &quot;event notification.&quot;  Overcoming\nasymmetry of connectivity is an orthogonal problem to finding\nuseful ways to do asynchronous communication over the Web.  This\ndocument does not address asynchrony beyond simply noting that\nthe switchboard pattern described here provides a mechanism for\ndelivery of asynchronous notifications of any kind to any and all\nnodes, regardless of their connectivity.  It should also be noted\nthat the switchboard pattern described here does not assume or\nanticipate any sort of request queuing mechanism, though neither\ndoes it prevent one from being implemented.  The implications of\nasynchrony, queuing, and request fan-out are out of scope.\n\nTHE SEMI-PROXY\n\nThe semi-proxy component is an HTTP 1.1 responder and\nintermediary which hosts a hierarchical resource namespace.  It\npresents a resource model which allows other nodes to &quot;adopt&quot; a\nsubtree in its resource namespace.  This process is called\nregistration.  Once a node has registered a particular subtree,\nrequests received by the switchboard for resources in that\nsubtree are &quot;forwarded&quot; to the registered node.  The precise\nmechanism by which this happens is undefined, however, in the\nsimplest case a new request is constructed by reformulating the\nrequest URI relative to the registered node and generating a new\nHTTP request to the registered node.  The reverse path is taken\nby the response, from registered node through the semi-proxy to\nthe original requestor.  The only function the semi-proxy\nprovides that differentiates it from a standard proxy is a\nstandard transformation between the registered node&#39;s address\nspace and the semi-proxy&#39;s address space.\n\nWith the exception of transformations on these URI, this\nresembles the action of a standard HTTP proxy.  The semi-proxy\nMAY perform all the same operations as any proxy with respect to\ncaching, handling idempotent operations, etc.  The net effect of\nthe semi-proxy is to allow some other node to present resources\nas if they were in fact resources within the switchboard&#39;s own\nportion of the global resource namespace.\n\nNote that the relationship between registered nodes and\nregistered subtrees of the semi-proxy&#39;s address space is assumed\nfor simplicity&#39;s sake to be 1-1.  Fan-out to multiple registered\nnodes is an interesting concept with interesting implications for\nvarious applications, but is beyond the scope of this document.\nAddressing such a fan-out begins to verge on event notification,\nand is an interesting topic that needs further discussion and\nconsideration.\n\nA semi-proxy SHOULD have a standard semantics for longevity of a\ngiven registration.  The ability of the semi-proxy to route\nrequests and responses to and from the registered node depends on\nits ability to communicate with the registered node.  Without\naddressing asynchronous communication, this implies that each\nregistration should be bounded in some fashion, either by the\nmaintenance of a transparent tunnel connection as discussed below\nor by some other heuristic.\n\nTRANSPARENT TUNNELS\n\nA transparent tunnel is new architectural connector type\nconsisting of a persistent HTTP connection established from a\nclosed node to some open node.  It takes the form of a long-lived\nGET request performed on some resource on the open node.  This\nconnection is used to bidirectionally pass HTTP requests and\ntheir responses between closed and open node, irregardless of\ndirectionality of connectivity.  Appropriate conventions for\nframing and mux / demux of HTTP requests and their responses is\nassumed.  The closed node end of the tunnel is referred to as the\ntail end;  the open node end is referred to as the head end.\nRequests arriving at the head end of the tunnel are transported\nto the tail end of the tunnel, where they may be unpacked and\nserviced by any appropriate mechanism.  This mechanism could be\nembedded in an HTTP responder directly, or could be an adaptor\nwhich turns these requests into standard HTTP requests /\nconnections to a local or remote HTTP responder.\n\nThe tunnel is &quot;transparent&quot; in that what it transports are simply\nHTTP requests and responses.  A transparent tunnel is thus\nsecurable via any standard security intermediary which is made\naware of the framing and mux / demux conventions used by the\ntunnel.  With transparent tunneling of HTTP through HTTP, we have\nthe best of both worlds:  intermediaries which are aware of the\ntunneling conventions and standard HTTP semantics may filter and\nsecure these requests as would any secure proxy.\n\nTHE SWITCHBOARD PATTERN\n\nBy coupling semi-proxies and transparent tunneling we are able to\ninstantiate a &quot;switchboard pattern&quot; for principled symmetric HTTP\nconnectivity.  Every node - whether closed or open - becomes an\nequal participant in the resource namespace.  The switchboard\nprovides the semi-proxy resource model for registering a subtree\nof its address space, and a second resource model for\nestablishing the head-end of the transparent tunnel.  It then\nroutes HTTP requests it receives across the appropriate tunnel\nconnection, and reverses the route for HTTP responses to those\nrequests.\n\nThe benefits of the switchboard pattern are many.  Aside from\nsimply addressing asymmetry of connectivity, switchboards also\nprovide a mechanism for dealing with ephemeral naming of edge\nmachines.  A switchboard can provide a persistent (modulo\nconnectivity) namespace for an edge node&#39;s resources, despite the\nfact that the edge machine may only temporarily have a particular\nDNS name or IP address.\n\nCONCLUSION\n\nThe introduction of two new connector types - semi-proxies and\ntransparent tunnels - to the principled architecture of the Web\nenables a much richer resource space and increases the overall\nvalue of the Web.  These two connector types may be paired in a\n&quot;switchboard pattern&quot; that mitigates the impact of asymmetrical\nconnectivity on the overall architecture of the Web, and provides\na means of dealing with the ephemeral nature of host naming at\nthe edges of the network.\n\n\n\r\n--------------5C00BFD18711DAC25EA7546B\r\nContent-Type: text/html; charset=us-ascii\r\nContent-Transfer-Encoding: 7bit\r\n\r\n&lt;!doctype html public &quot;-//w3c//dtd html 4.0 transitional//en&quot;&gt;\n&lt;html&gt;\n&nbsp;\n&lt;br&gt;First draft for comment, hope the HTML doesn&#39;t screw anyone up.&nbsp;\nIf it does, let me know, I&#39;ll resend text-only.\n&lt;p&gt;&lt;b&gt;&lt;u&gt;ABSTRACT&lt;/u&gt;&lt;/b&gt;\n&lt;p&gt;The Web is a global information namespace and generic resource interface\nsuperimposed on a degree-one network of nodes which can connect to each\nother.&nbsp; Directionality of requests and responses is today unfortunately\nintimately entangled with directionality of connectivity, and due to firewalls\nconnectivity is asymmetric.&nbsp; This is unfortunate because interesting\naddressible resources potentially exist on *all* nodes.&nbsp; The value\nof the Web as a whole is therefore seriously and unnecessarily constrained\nby the asymmetry of connectivity.\n&lt;p&gt;This document (&quot;speclet&quot;) is a high-level description of two architectural\nadditions to the Web which, taken together, provide a principled solution\nto the problem of asymmetric connectivity and therefore allow all nodes\nin the network to present resources to all other nodes.&nbsp; The two components\nare a new intermediary type called a &quot;semi-proxy&quot;&nbsp; and a new connector\ntype called a &quot;transparent tunnel.&quot;&nbsp; These two components may be used\ntogether in a &quot;switchboard pattern&quot; to provide securable, apparent universal\nsymmetry of connectivity within the context of the principled Web architecture.\n&lt;p&gt;&lt;b&gt;&lt;u&gt;TERMINOLOGY&lt;/u&gt;&lt;/b&gt;\n&lt;p&gt;Rather than referring to client and server roles, let&#39;s describe the\nWeb as consisting of open and closed nodes.&nbsp; &lt;u&gt;Open nodes&lt;/u&gt; are\nthose that can receive inbound connections from some other nodes of interest;&nbsp;\ni.e., they are typically &quot;outside&quot; a firewalled environment.&nbsp; &lt;u&gt;Closed\nnodes&lt;/u&gt; are those nodes that cannot receive inbound connections from\nsome other nodes of interest, but can initiate connections to other nodes\nof interest;&nbsp; they are typlically &quot;behind&quot; a firewall.&nbsp; A node&#39;s\nopen or closed state is referred to as its &lt;u&gt;connectivity&lt;/u&gt;.&nbsp; It\nis desirable to consider connectivity as orthogonal to the role a node\nmay play in generating or servicing HTTP requests.&nbsp; Any node may therefore\nserve as a requestor or respondor.&nbsp; A &lt;u&gt;requestor&lt;/u&gt; is a node which\ninitiates an HTTP 1.1 request.&nbsp; A &lt;u&gt;respondor&lt;/u&gt; accepts HTTP requests\nand generates HTTP responses.\n&lt;p&gt;A note about synchrony:&nbsp; HTTP is a synchronous protocol;&nbsp;\neach HTTP request results in a synchronous / immediate response.&nbsp;\nMany application communication patterns benefit from asynchrony;&nbsp;\nthis is usually referred to as &quot;event notification.&quot;&nbsp; Overcoming asymmetry\nof connectivity is an orthogonal problem to finding useful ways to do asynchronous\ncommunication over the Web.&nbsp; This document does not address asynchrony\nbeyond simply noting that the switchboard pattern described here provides\na mechanism for delivery of asynchronous notifications of any kind to any\nand all nodes, regardless of their connectivity.&nbsp; It should also be\nnoted that the switchboard pattern described here does not assume or anticipate\nany sort of request queuing mechanism, though neither does it prevent one\nfrom being implemented.&nbsp; The implications of asynchrony, queuing,\nand request fan-out are out of scope.\n&lt;p&gt;&lt;b&gt;&lt;u&gt;THE SEMI-PROXY&lt;/u&gt;&lt;/b&gt;\n&lt;p&gt;The semi-proxy component is an HTTP 1.1 responder and intermediary which\nhosts a hierarchical resource namespace.&nbsp; It presents a resource model\nwhich allows other nodes to &quot;adopt&quot; a subtree in its resource namespace.&nbsp;\nThis process is called &lt;u&gt;registration&lt;/u&gt;.&nbsp; Once a node has registered\na particular subtree, requests received by the switchboard for resources\nin that subtree are &quot;forwarded&quot; to the &lt;u&gt;registered node&lt;/u&gt;.&nbsp; The\nprecise mechanism by which this happens is undefined, however, in the simplest\ncase a new request is constructed by reformulating the request URI relative\nto the registered node and generating a new HTTP request to the registered\nnode.&nbsp; The reverse path is taken by the response, from registered\nnode through the semi-proxy to the original requestor.&nbsp; The only function\nthe semi-proxy provides that differentiates it from a standard proxy is\na standard transformation between the registered node&#39;s address space and\nthe semi-proxy&#39;s address space.\n&lt;p&gt;With the exception of transformations on these URI, this resembles the\naction of a standard HTTP proxy.&nbsp; The semi-proxy MAY perform all the\nsame operations as any proxy with respect to caching, handling idempotent\noperations, etc.&nbsp; The net effect of the semi-proxy is to allow some\nother node to present resources as if they were in fact resources within\nthe switchboard&#39;s own portion of the global resource namespace.\n&lt;p&gt;Note that the relationship between registered nodes and registered subtrees\nof the semi-proxy&#39;s address space is assumed for simplicity&#39;s sake to be\n1-1.&nbsp; Fan-out to multiple registered nodes is an interesting concept\nwith interesting implications for various applications, but is beyond the\nscope of this document.&nbsp; Addressing such a fan-out begins to verge\non event notification, and is an interesting topic that needs further discussion\nand consideration.\n&lt;p&gt;A semi-proxy SHOULD have a standard semantics for longevity of a given\nregistration.&nbsp; The ability of the semi-proxy to route requests and\nresponses to and from the registered node depends on its ability to communicate\nwith the registered node.&nbsp; Without addressing asynchronous communication,\nthis implies that each registration should be bounded in some fashion,\neither by the maintenance of a transparent tunnel connection as discussed\nbelow or by some other heuristic.\n&lt;p&gt;&lt;b&gt;&lt;u&gt;TRANSPARENT TUNNELS&lt;/u&gt;&lt;/b&gt;&lt;b&gt;&lt;u&gt;&lt;/u&gt;&lt;/b&gt;\n&lt;p&gt;A transparent tunnel is new architectural connector type consisting\nof a persistent HTTP connection established from a closed node to some\nopen node.&nbsp; It takes the form of a long-lived GET request performed\non some resource on the open node.&nbsp; This connection is used to bidirectionally\npass HTTP requests and their responses between closed and open node, irregardless\nof directionality of connectivity.&nbsp; Appropriate conventions for framing\nand mux / demux of HTTP requests and their responses is assumed.&nbsp;\nThe closed node end of the tunnel is referred to as the &lt;u&gt;tail end&lt;/u&gt;;&nbsp;\nthe open node end is referred to as the &lt;u&gt;head end&lt;/u&gt;.&nbsp; Requests\narriving at the head end of the tunnel are transported to the tail end\nof the tunnel, where they may be unpacked and serviced by any appropriate\nmechanism.&nbsp; This mechanism could be embedded in an HTTP responder\ndirectly, or could be an adaptor which turns these requests into standard\nHTTP requests / connections to a local or remote HTTP responder.\n&lt;p&gt;The tunnel is &quot;transparent&quot; in that what it transports are simply HTTP\nrequests and responses.&nbsp; A transparent tunnel is thus securable via\nany standard security intermediary which is made aware of the framing and\nmux / demux conventions used by the tunnel.&nbsp; With transparent tunneling\nof HTTP through HTTP, we have the best of both worlds:&nbsp; intermediaries\nwhich are aware of the tunneling conventions and standard HTTP semantics\nmay filter and secure these requests as would any secure proxy.\n&lt;p&gt;&lt;b&gt;&lt;u&gt;THE SWITCHBOARD PATTERN&lt;/u&gt;&lt;/b&gt;\n&lt;p&gt;By coupling semi-proxies and transparent tunneling we are able to instantiate\na &quot;switchboard pattern&quot; for principled symmetric HTTP connectivity.&nbsp;\nEvery node - whether closed or open - becomes an equal participant in the\nresource namespace.&nbsp; The switchboard provides the semi-proxy resource\nmodel for registering a subtree of its address space, and a second resource\nmodel for establishing the head-end of the transparent tunnel.&nbsp; It\nthen routes HTTP requests it receives across the appropriate tunnel connection,\nand reverses the route for HTTP responses to those requests.\n&lt;p&gt;The benefits of the switchboard pattern are many.&nbsp; Aside from simply\naddressing asymmetry of connectivity, switchboards also provide a mechanism\nfor dealing with ephemeral naming of edge machines.&nbsp; A switchboard\ncan provide a persistent (modulo connectivity) namespace for an edge node&#39;s\nresources, despite the fact that the edge machine may only temporarily\nhave a particular DNS name or IP address.\n&lt;p&gt;&lt;b&gt;&lt;u&gt;CONCLUSION&lt;/u&gt;&lt;/b&gt;\n&lt;p&gt;The introduction of two new connector types - semi-proxies and transparent\ntunnels - to the principled architecture of the Web enables a much richer\nresource space and increases the overall value of the Web.&nbsp; These\ntwo connector types may be paired in a &quot;switchboard pattern&quot; that mitigates\nthe impact of asymmetrical connectivity on the overall architecture of\nthe Web, and provides a means of dealing with the ephemeral nature of host\nnaming at the edges of the network.\n&lt;br&gt;&nbsp;\n&lt;br&gt;&nbsp;&lt;/html&gt;\n\r\n--------------5C00BFD18711DAC25EA7546B--\r\n\n"}}
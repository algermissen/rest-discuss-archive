{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"Pol-pqIyAF0a9ktgQJ5YZBNJ4Pcm1VZWfvAZyCVuf6aKdGogNA2laWaq1zh-OLc7Hd6nZ6xls3EWZvi8Tp5PJV0JjZTUhAv2RSo_DsWk5g","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] How comes to life an &quot;Application&quot; in the sense of Roy&#39;s dissertation?","postDate":"1270676143","msgId":15181,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMTAwNDA3MTUzNTQzLjQ4NWJmNGRhLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","inReplyToHeader":"PEVDRkI3QTU2LTA2NTYtNDAwQS04NjQ2LTlFNjdGMUI0MjQ5Q0BtYWMuY29tPg==","referencesHeader":"PEVDRkI3QTU2LTA2NTYtNDAwQS04NjQ2LTlFNjdGMUI0MjQ5Q0BtYWMuY29tPg=="},"prevInTopic":15178,"nextInTopic":15185,"prevInTime":15180,"nextInTime":15182,"topicId":15152,"numMessagesInTopic":30,"msgSnippet":"Serendipitous re-use, folks!  I can t stress that enough. ... A REST application may be defined as, What the user is trying to do. The user can only do","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 92050 invoked from network); 7 Apr 2010 21:36:15 -0000\r\nX-Received: from unknown (98.137.34.46)\n  by m11.grp.re1.yahoo.com with QMQP; 7 Apr 2010 21:36:15 -0000\r\nX-Received: from unknown (HELO mxout-08.mxes.net) (216.86.168.183)\n  by mta3.grp.sp2.yahoo.com with SMTP; 7 Apr 2010 21:36:15 -0000\r\nX-Received: from bigbison (unknown [65.117.211.162])\n\t(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))\n\t(No client certificate requested)\n\tby smtp.mxes.net (Postfix) with ESMTPSA id A9FF3509DD;\n\tWed,  7 Apr 2010 17:36:14 -0400 (EDT)\r\nDate: Wed, 7 Apr 2010 15:35:43 -0600\r\nTo: Jan Algermissen &lt;algermissen1971@...&gt;\r\nCc: REST Discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nMessage-Id: &lt;20100407153543.485bf4da.eric@...&gt;\r\nIn-Reply-To: &lt;ECFB7A56-0656-400A-8646-9E67F1B4249C@...&gt;\r\nReferences: &lt;ECFB7A56-0656-400A-8646-9E67F1B4249C@...&gt;\r\nOrganization: Bison Systems Corporation\r\nX-Mailer: Sylpheed 3.0.0 (GTK+ 2.10.14; i686-pc-mingw32)\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=US-ASCII\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nSubject: Re: [rest-discuss] How comes to life an &quot;Application&quot; in the sense\n of Roy&#39;s dissertation?\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\nSerendipitous re-use, folks!  I can&#39;t stress that enough.\n\n&gt; \n&gt; In the context of machine clients this would mean that applications\n&gt; are defined by the client side developer&#39;s interpretations of and\n&gt; assumptions about the envisioned media types (and link relations) and\n&gt; rules for choosing transitions.\n&gt; \n\nA REST application may be defined as, &quot;What the user is trying to do.&quot;\nThe user can only &quot;do&quot; what the origin server says (or implies) it may\ndo.  A third-party developer&#39;s assumptions don&#39;t mean squat to me --\nthey&#39;ll do things as the responses from my system constrain them to do\nthings -- only my own assumptions (or abuses) define my API.\n\nThe representations making up a self-documenting REST API, are *not*\nthe API.  They only describe it.  (I say self-documenting to avoid any\nconfusion with self-describing.)  The purpose of providing a hypertext\napplication is not to constrain anyone to follow it, its purpose is to\nexpose the API (instead of relying on out-of-band documentation to\ndescribe the API) as standard methods, media types and link relations.\n\nWhat Googlebot is trying to do, is follow and index all links on my\nsite, within whatever bounds Google sets for it (Googlebot won&#39;t follow\nall possible GET requests generated by some form, for example).  I\ndon&#39;t need to code a &quot;index all links&quot; API (although I may use Google\nsitemaps to provide this very API), Googlebot will do fine without my\nhelp.  This application, &quot;index all links&quot;, is constrained by the\nresponses from my system -- with or without a robots.txt file.\n\nThese two resources share the same definition (a weblog entry), yet\ntheir representations have different link-relation metadata:\n\nhttp://charger.bisonsystems.net/xmltest/2006/aug/09/11.xht\nhttp://charger.bisonsystems.net/xmltest/tags/pci-x/2006-aug-09.11.xht\n(you&#39;ll have to use your imagination there until the demo fleshes out)\n\nYou&#39;ll have to imagine a &quot;post new comment&quot; form on each, with method=\nPOST action=/xmltest/2006/aug/09/11/index.atom, which self-documents an\nAtom Protocol-based API.\n\nBut, I could really care less about whether a user agent is POSTing to\nthat Atom Feed using *any* of my HTML forms.  Or following any sort of\nservice document, for that matter.  All I do care about, is that the\nclient is POSTing a valid application/atom+xml document containing\nvalid, allowable XHTML -- this is reflected in the response codes a\nthird-party developer sees, whereas someone POSTing through my HTML\nrepresentations won&#39;t see these failure codes, since my code won&#39;t\nallow invalid, or unallowable, code to be submitted and will always use\nthe proper media type.\n\nIOW, I&#39;ve self-documented my API in my representations, so ignore those\nrestrictions at your own peril, third-party developers.  A REST system\nexposes these API capabilities and restrictions using hypertext, to\nallow for serendipitous re-use by Googlebot or what-have-you.\n\nIf &quot;What the user is trying to do&quot; is to post a comment on my weblog, \nthen &quot;post a comment&quot; is the application.  Regardless of whether the\nusers are using the native hypertext client, or their user agent is\nsome sort of Atom Protocol client, the system&#39;s responses indicate\nsuccess or failure of the operation the same way -- the nature of the\nuser agent is opaque to the API.\n\n&quot;Each application defines goals for the underlying system, against\nwhich the system&#39;s performance can be measured.&quot;\n\nThe goal of the underlying system, as defined by the &quot;post a comment&quot;\napplication, is &quot;accept a comment&quot; and the system&#39;s performance in\nthis regard may be easily measured.  Regardless of user-agent, or path\nfollowed through the application to get to this point, what the API\ndeveloper is interested in is the latency measured from the point in\ntime the POST was fully received, to the point in time when the system\nstarts responding 201 (if we&#39;re only measuring success performance).\n\nThe average latency time of the aggregated 201 responses to POST\nrequests across all comment threads, allows the REST developer to\nbenchmark that aspect of the API.  So performance of the &quot;accept a\ncomment&quot; process is measured each time the &quot;post a comment&quot; application\nis executed, regardless of how it&#39;s executed, or which state transition\noption it came from (the form on the first URL vs. the form on the\nsecond URL for the same weblog entry vs. one from some third-party\nclient directly manipulating my Atom representations and bypassing my\nHTML representations entirely).\n\nSerendipitous re-use.  REST developers don&#39;t care who (assuming no\nsecurity restrictions) is executing the &quot;post a comment&quot; application or\nhow, only that the REST system is properly executing its &quot;accept a\ncomment&quot; process whenever it&#39;s called.\n\n-Eric\n\n"}}
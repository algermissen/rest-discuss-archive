{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":4849001,"authorName":"Alex Jacobson","from":"Alex Jacobson &lt;alex@...&gt;","profile":"shop2it","replyTo":"SENDER","senderId":"NuRBCQViZyInVb1iUSSmUBRZIR8SiPqOsQ_dyAIvB5coO6_9SaI_pRTC7mlAAVsmj67jTfuBgBvHWlp5OglflmRk","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] REST & User Interfaces","postDate":"1058894429","msgId":3774,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDExMDk5MTMzODEuMTA1ODg4MDAyOUBsb2NhbGhvc3Q+","inReplyToHeader":"PDBFQUE1MDY3ODdEMTJCNEI5OUQzQ0EwODYyMzBBMkI0REE5RjkwQG1haWwtMDEuc3Bva2Vzb2Z0d2FyZS5jb20+","referencesHeader":"IDwwRUFBNTA2Nzg3RDEyQjRCOTlEM0NBMDg2MjMwQTJCNERBOUY5MEBtYWlsLTAxLnNwb2tlc29mdHdhcmUuY28gbT4="},"prevInTopic":3773,"nextInTopic":3775,"prevInTime":3773,"nextInTime":3775,"topicId":3773,"numMessagesInTopic":4,"msgSnippet":"I agree with your assessments.  Here are some short comments. 1. Cookies are an obviously better UI than HTTP-auth.  You just need to make sure you send a","rawEmail":"Return-Path: &lt;alex@...&gt;\r\nX-Sender: alex@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 10548 invoked from network); 22 Jul 2003 17:26:42 -0000\r\nReceived: from unknown (66.218.66.218)\n  by m1.grp.scd.yahoo.com with QMQP; 22 Jul 2003 17:26:42 -0000\r\nReceived: from unknown (HELO mailgate.vo.com) (208.45.6.97)\n  by mta3.grp.scd.yahoo.com with SMTP; 22 Jul 2003 17:26:41 -0000\r\nReceived: from [192.168.123.103] (m6a8d36d0.tmodns.net [208.54.141.106])\n\t(using TLSv1 with cipher EDH-RSA-DES-CBC3-SHA (168/168 bits))\n\t(No client certificate requested)\n\tby mailgate.vo.com (Postfix) with ESMTP\n\tid 97D4F87D79; Tue, 22 Jul 2003 13:26:36 -0400 (EDT)\r\nDate: Tue, 22 Jul 2003 13:20:29 -0400\r\nTo: Justin Sampson &lt;justin.sampson@...&gt;,\n\trest-discuss@yahoogroups.com\r\nSubject: Re: [rest-discuss] REST & User Interfaces\r\nMessage-ID: &lt;1109913381.1058880029@localhost&gt;\r\nIn-Reply-To: &lt;0EAA506787D12B4B99D3CA086230A2B4DA9F90@...&gt;\r\nReferences:  &lt;0EAA506787D12B4B99D3CA086230A2B4DA9F90@...\n m&gt;\r\nX-Mailer: Mulberry/3.0.3 (Win32)\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=us-ascii; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nContent-Disposition: inline\r\nX-eGroups-From: Alex Jacobson &lt;alex@...&gt;\r\nFrom: Alex Jacobson &lt;alex@...&gt;\r\nX-Yahoo-Group-Post: member; u=4849001\r\nX-Yahoo-Profile: shop2it\r\n\r\nI agree with your assessments.  Here are some short comments.\n1. Cookies are an obviously better UI than HTTP-auth.  You just need to \nmake sure you send a no-cache header if the request comes through a proxy. \nOtherwise users will get access to each other&#39;s cached pages.\n\n2. Current user.  You should look at recent discussion we had on this topic \n(identification of resources).  You may want to make the URLs of the user \npages unguessable.  Then users could opt to allow others to read them if \nthey so chose (by sending a URL).  You then need to decide what these \nreferred users are authorized to do.\n\n3. Menus, etc.  You can use PUT.  Remember GET retrieves a representation \nof the resource.  If the PUT is text/plain and the GET has an accept: \ntext/plain header, you could assume that the user wants the editable \nversion of the page and not the rendered version.\n\n-Alex-\n\nPS I am starting a new company and am looking for REST/Python/XP-Agile \ndevelopers in NYC area.  If you&#39;re interested, please email me.\n\n___________________________________________________________________\nS. Alexander Jacobson                   i2x Media\n1-212-787-1914 voice                    1-603-288-1280 fax\n\n\n--On Monday, July 21, 2003 7:38 PM -0700 Justin Sampson \n&lt;justin.sampson@...&gt; wrote:\n\n&gt; Hi all,\n&gt;\n&gt; I&#39;d like to learn about how REST principles have been and can be applied\n&gt; to certain kinds of user interface cruft. I&#39;ve just joined a company\n&gt; that consciously applies REST to a back-end server interface, but the\n&gt; front-end user interface is not very RESTy at all. I&#39;m struggling to\n&gt; imagine how certain features of that user interface, in common with user\n&gt; interfaces I&#39;ve seen in several Web applications, could be redesigned\n&gt; consistent with REST principles.\n&gt;\n&gt; These are some of the features I&#39;m wondering about:\n&gt;\n&gt; 1. Login Page\n&gt;\n&gt; The support for HTTP Basic authentication in common Web browsers is not\n&gt; particularly user friendly. Therefore, Web applications that require\n&gt; user authentication universally present an HTML login page with a form\n&gt; that, when submitted, results in a cookie being set in the browser. This\n&gt; cookie is often a session key, which is obviously not RESTful; on the\n&gt; other hand, if the cookie were used purely as an authentication token\n&gt; not requiring server state, would such use be consistent with REST?\n&gt;\n&gt; 2. Current User\n&gt;\n&gt; Once the user is logged in, it is common to have at the very least the\n&gt; user&#39;s name displayed in the corner of every page of the application. At\n&gt; a further extreme, any given page may be completely different per user,\n&gt; such as a user-customizable &quot;dashboard&quot;. As I understand REST, the\n&gt; representation returned from a GET should not depend on the\n&gt; authorization state, but only on the URI.\n&gt;\n&gt; What if instead of &lt;/dashboard&gt; the URI was &lt;/joe/dashboard&gt;? Any user\n&gt; other than joe who tried to GET that resource could simply be forbidden.\n&gt; But does that make sense for putting the user&#39;s name at the top of every\n&gt; page of the application? Should every page view that a user can see be\n&gt; considered a resource specific to that user?\n&gt;\n&gt; 3. Menus, Etc.\n&gt;\n&gt; I wrote some comments and questions on this topic at the bottom of\n&gt; &lt;http://conveyor.com/RESTwiki/moin.cgi/HowWikiComparesToRest&gt;. In that\n&gt; discussion, it had been posited that a RESTful Wiki would use PUT for\n&gt; editing pages. However, every page of a typical Wiki has a menu bar at\n&gt; the top & other bits of information like the last modified date at the\n&gt; bottom, none of which can be edited by users.\n&gt;\n&gt; More generally, Web applications tend to have lots of menus on the top\n&gt; and left of every page that aren&#39;t directly relevant to the content of\n&gt; the page, but are really window dressing for the entire site. How can\n&gt; all that UI cruft be understood in a RESTful way?\n&gt;\n&gt; Justin Sampson\n&gt;\n&gt;\n&gt;\n&gt; To unsubscribe from this group, send an email to:\n&gt; rest-discuss-unsubscribe@yahoogroups.com\n&gt;\n&gt;\n&gt;\n&gt; Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/\n&gt;\n&gt;\n\n\n\n\n"}}
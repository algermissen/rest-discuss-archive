{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":4981751,"authorName":"Mark Nottingham","from":"Mark Nottingham &lt;mnot@...&gt;","profile":"mnotting","replyTo":"SENDER","senderId":"eIe2QzKXdzr_gjH6s0ciUVaD2TSbgUkybLZE_t_IcLIzp1Y1ewtglKuNVT_nQgi5WOWw1vgp7fyulFEL0--8MwMWs_hnfg","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Mirroring / Distributing REST based services","postDate":"1120003915","msgId":5124,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEMxNUQyQUUwLTQzQ0YtNDI1OC1BMDNDLTY3OUZGQjA0MTBBRkBtbm90Lm5ldD4=","inReplyToHeader":"PEY1QkZFREJBLUNDNkQtNEQzRi04NEE2LUIxOTg3RjdGOTIwNEBnbWFpbC5jb20+","referencesHeader":"PEY1QkZFREJBLUNDNkQtNEQzRi04NEE2LUIxOTg3RjdGOTIwNEBnbWFpbC5jb20+"},"prevInTopic":5122,"nextInTopic":5172,"prevInTime":5123,"nextInTime":5125,"topicId":5122,"numMessagesInTopic":3,"msgSnippet":"Hi Ryan, Probably the most scalable, RESTful way of doing this is how Akamai and other CDNs ( Content Delivery Networks ; I was never a big fan of this phrase)","rawEmail":"Return-Path: &lt;mnot@...&gt;\r\nX-Sender: mnot@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 10304 invoked from network); 29 Jun 2005 00:12:04 -0000\r\nReceived: from unknown (66.218.66.218)\n  by m25.grp.scd.yahoo.com with QMQP; 29 Jun 2005 00:12:03 -0000\r\nReceived: from unknown (HELO mxout-04.mxes.net) (205.237.194.35)\n  by mta3.grp.scd.yahoo.com with SMTP; 29 Jun 2005 00:12:03 -0000\r\nReceived: from [172.16.1.3] (sj-ez-63-96-162-1.bea.com [63.96.162.1])\n\t(using TLSv1 with cipher RC4-SHA (128/128 bits))\n\t(No client certificate requested)\n\tby smtp.mxes.net (Postfix) with ESMTP id 906A8A3211;\n\tTue, 28 Jun 2005 20:11:58 -0400 (EDT)\r\nIn-Reply-To: &lt;F5BFEDBA-CC6D-4D3F-84A6-B1987F7F9204@...&gt;\r\nReferences: &lt;F5BFEDBA-CC6D-4D3F-84A6-B1987F7F9204@...&gt;\r\nMime-Version: 1.0 (Apple Message framework v730)\r\nContent-Type: text/plain; charset=US-ASCII; delsp=yes; format=flowed\r\nMessage-Id: &lt;C15D2AE0-43CF-4258-A03C-679FFB0410AF@...&gt;\r\nCc: Rest List &lt;rest-discuss@yahoogroups.com&gt;,\n\tJoe Gregorio &lt;joe.gregorio@...&gt;\r\nContent-Transfer-Encoding: 7bit\r\nX-Image-Url: http://www.mnot.net/personal/MarkNottingham.jpg\r\nDate: Tue, 28 Jun 2005 17:11:55 -0700\r\nTo: Ryan Tomayko &lt;rtomayko@...&gt;\r\nX-Mailer: Apple Mail (2.730)\r\nX-eGroups-Msg-Info: 1:12:0\r\nFrom: Mark Nottingham &lt;mnot@...&gt;\r\nSubject: Re: [rest-discuss] Mirroring / Distributing REST based services\r\nX-Yahoo-Group-Post: member; u=4981751; y=vYuyVKWfic7NAm_YK5LJEdFSHG_eipU2YnTxkGyc7sOL-N0\r\nX-Yahoo-Profile: mnotting\r\n\r\nHi Ryan,\n\nProbably the most scalable, RESTful way of doing this is how Akamai  \nand other CDNs (&quot;Content Delivery Networks&quot;; I was never a big fan of  \nthis phrase) do it.\n\nGenerally, you have a number of gateways (using Roy&#39;s terminology; we  \ncalled them &#39;surrogates,&#39; to distinguish the fact that they&#39;re HTTP  \non both the front and back ends) distributed around the network. When  \na DNS request comes in for the site, you give the client a very short- \nlived answer (e.g., 20 seconds TTL) with the closest IP address, by  \nsome metric. The request then goes to that server, which has a cache  \nincorporated.\n\nUnfortunately, there isn&#39;t much information about this kind of  \narchitecture on the Web, AFAIK; there are a number of standalone  \nproducts that do similar things, such as Cisco&#39;s Distributed Director;\n   http://www.cisco.com/warp/public/cc/pd/cxsr/dd/index.shtml\n\nYou might also be interested in CoralCDN;\n   http://www.coralcdn.org/\nwhich requires you to modify URIs (they could avoid that if they  \nwrote some more software, but isn&#39;t that always the case?)\n\nAlso, see the Backhand project for an Open Source redirector;\n   http://www.backhand.org/mod_backhand/\nalong the lines of the redirection solution you were talking about.\n\nI seem to remember some distributed director-style open source  \nsoftware out there somewhere, but can&#39;t find it at the moment.\n\nHope this helps,\n\n\n\nOn 25/06/2005, at 1:29 PM, Ryan Tomayko wrote:\n\n&gt; I&#39;ve been thinking about setting up a mirror of Joe&#39;s excellent\n&gt; sparkline service [1] to help share the load. That got me thinking\n&gt; about general mechanisms for setting up wide clusters of HTTP based\n&gt; services. We have a &quot;central resource&quot; that, when resolved, would\n&gt; result in the request being made to one of many homogenous &quot;mirror\n&gt; resources&quot;.\n&gt;\n&gt; Central URL:\n&gt;    http://sparklines.org/spark.cgi\n&gt;\n&gt; Mirrors:\n&gt;    http://bitworking.org/projects/sparklines/spark.cgi\n&gt;    http://lesscode.org/sparklines/spark.cgi (not currently available)\n&gt;    ...\n&gt;\n&gt; My primary interest is increased reliability. I&#39;m extremely\n&gt; interested in this idea of having many resources that may be somewhat\n&gt; unreliable on there own (can go down occasionally, hosted on cheap\n&gt; servers or cable connections, have bandwidth constraints, etc.) but\n&gt; pooled together can provide an extremely high level of reliability.\n&gt;\n&gt; Note that none of this is really specific to the sparkline service or\n&gt; even dynamic resources. People have been mirroring simple directories\n&gt; of resources forever and the same concepts apply here. The practices\n&gt; employed by big mirror type services (e.g. sourceforge) seem crufty.\n&gt; I&#39;d like to weigh the various approaches from a REST/HTTP\n&gt; architectural angle.\n&gt;\n&gt;\n&gt; 1. DNS Round-robin technique.\n&gt;\n&gt; &lt;http://www.onjava.com/pub/a/onjava/2001/09/26/load.html&gt;\n&gt;\n&gt; The DNS server handles dishing out IPs in a round robin fashion.\n&gt;\n&gt; Pros:\n&gt;\n&gt;   - Single round trip.\n&gt;   - Easy to configure.\n&gt;   - Extremely light load on DNS server.\n&gt;\n&gt; Cons:\n&gt;\n&gt;   - URL path parts would have to be the same on each host.\n&gt;\n&gt;\n&gt; 2. Redirect (302 Found)\n&gt;\n&gt; &lt;http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.3&gt;\n&gt;\n&gt; The request is processed by a simple redirecting script.\n&gt;\n&gt; Pros:\n&gt;\n&gt;    - Even easier to get set up than DNS RR.\n&gt;    - Could include logic that redirected to &quot;the best host&quot; (by\n&gt; location, availability, etc.)\n&gt;    - Low bandwidth on central host.\n&gt;\n&gt; Cons:\n&gt;\n&gt;    - At least two round trips.\n&gt;    - Potential high number of requests to central host / redirecting\n&gt; script.\n&gt;\n&gt;\n&gt; 3. Reverse Proxy\n&gt;\n&gt; The request is proxied from the central host to one of the mirrors on\n&gt; the server.\n&gt;\n&gt; Pros:\n&gt;\n&gt;    - Potential for caching at central host.\n&gt;    - Can usually be implemented purely with configuration (apache\n&gt; mod_rewrite/mod_proxy/mod_cache, squid, etc)\n&gt;\n&gt; Cons:\n&gt;\n&gt;    - Highest load on central server.\n&gt;    - Central host bandwidth concerns (up and down).\n&gt;\n&gt;\n&gt; Any opinions on these approaches or others?\n&gt;\n&gt; Are there any documented examples of setting up wide mirrors/clusters\n&gt; like this?\n&gt;\n&gt; Right now I&#39;m leaning toward #2 for most situations although #3 has\n&gt; some distinct benefits (caching) in the sparklines scenario.\n&gt;\n&gt; [1]: http://bitworking.org/projects/sparklines/\n&gt;\n&gt; Ryan Tomayko\n&gt;                                   rtomayko@...\n&gt;                                   http://naeblis.cx/rtomayko/\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt; Yahoo! Groups Links\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n\n\n--\nMark Nottingham     http://www.mnot.net/\n\n\n"}}
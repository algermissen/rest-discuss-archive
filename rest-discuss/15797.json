{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":175757792,"authorName":"Roy T. Fielding","from":"&quot;Roy T. Fielding&quot; &lt;fielding@...&gt;","profile":"roy_fielding","replyTo":"SENDER","senderId":"seVa-i3y4ebQ3fj9fDxg0_gdl_yD2ax28NHnnOcUfkaeb2m2HZTFfjGLyVnW_H5GKedgcByECe1yW8KnY2j9cR61EN789fm3LDVHEw","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Restful Approaches to some Enterprise Integration Problems","postDate":"1278378182","msgId":15797,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDM2OTkzODg3LTYxRjQtNDc1OC05NUFCLUZFQThCRTM3QjNBNkBnYml2LmNvbT4=","inReplyToHeader":"PDE0NzgzNC4zNzA1LnFtQHdlYjExMDcxNC5tYWlsLmdxMS55YWhvby5jb20+","referencesHeader":"PDE0NzgzNC4zNzA1LnFtQHdlYjExMDcxNC5tYWlsLmdxMS55YWhvby5jb20+"},"prevInTopic":15796,"nextInTopic":15798,"prevInTime":15796,"nextInTime":15798,"topicId":15761,"numMessagesInTopic":45,"msgSnippet":"... Umm, the integration problems you describe are mostly architectural properties of very specific architectures.  Generally speaking, you don t want to","rawEmail":"Return-Path: &lt;fielding@...&gt;\r\nX-Sender: fielding@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 43683 invoked from network); 6 Jul 2010 01:03:11 -0000\r\nX-Received: from unknown (98.137.34.44)\n  by m11.grp.re1.yahoo.com with QMQP; 6 Jul 2010 01:03:11 -0000\r\nX-Received: from unknown (HELO spaceymail-a2.g.dreamhost.com) (208.113.200.5)\n  by mta1.grp.sp2.yahoo.com with SMTP; 6 Jul 2010 01:03:11 -0000\r\nX-Received: from [192.168.1.66] (99-21-208-82.lightspeed.irvnca.sbcglobal.net [99.21.208.82])\n\tby spaceymail-a2.g.dreamhost.com (Postfix) with ESMTP id 074A9EE3AB;\n\tMon,  5 Jul 2010 18:03:02 -0700 (PDT)\r\nMime-Version: 1.0 (Apple Message framework v1081)\r\nContent-Type: text/plain; charset=us-ascii\r\nIn-Reply-To: &lt;147834.3705.qm@...&gt;\r\nDate: Mon, 5 Jul 2010 18:03:02 -0700\r\nCc: rest-discuss@yahoogroups.com\r\nContent-Transfer-Encoding: quoted-printable\r\nMessage-Id: &lt;36993887-61F4-4758-95AB-FEA8BE37B3A6@...&gt;\r\nReferences: &lt;147834.3705.qm@...&gt;\r\nTo: Bryan Taylor &lt;bryan_w_taylor@...&gt;\r\nX-Mailer: Apple Mail (2.1081)\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Roy T. Fielding&quot; &lt;fielding@...&gt;\r\nSubject: Re: [rest-discuss] Restful Approaches to some Enterprise Integration Problems\r\nX-Yahoo-Group-Post: member; u=175757792; y=PueMBd5Yw3WJeAI478sXxDRGzBZ02j_DW-h_jZ5UUFvNeQkvk8Ap\r\nX-Yahoo-Profile: roy_fielding\r\n\r\nOn Jun 30, 2010, at 9:41 AM, Bryan Taylor wrote:\n\n&gt; My company is examining=\r\n adopting a RESTful model to its enterprise architecture. Part of the discu=\r\nssion comes down to finding RESTful idioms, standards, and/or tools to appl=\r\ny to certain recurring enterprise integration problems.\n\nUmm, the integrati=\r\non problems you describe are mostly architectural\nproperties of very specif=\r\nic architectures.  Generally speaking,\nyou don&#39;t want to replicate the same=\r\n architecture when redesigning\na system to be more RESTful -- that would be=\r\n counterproductive.\nYou should instead be looking for ways to design the sy=\r\nstem such\nthat these are no longer problems that need to be solved.\n\nThink =\r\nof it like locking/concurrency issues.  One can design a\nsystem such that e=\r\nvery concurrent access is protected by some\ndeadlock-proof locking scheme, =\r\nor one can design a system that\nisolates all concurrent processing in a sha=\r\nred-nothing architecture\nthat doesn&#39;t need any locking whatsoever.\n\nYou are=\r\n essentially asking how to avoid deadlocks in a\nshared nothing architecture=\r\n.   The appropriate answer,\ntherefore, is ... huh?\n\n&gt; Specifically, we are =\r\ntrying to find RESTful solutions to:\n&gt; \n&gt; 1) Guaranteed Delivery - we need =\r\na paradigm to follow so that one service can transfer a sequence of resourc=\r\ne representations to another reliably even though both services and the net=\r\nwork suffer temporary unreliability\n\nThat doesn&#39;t sound like a problem enco=\r\nuntered by RESTful\narchitectures.  Reliable upload of multiple files can be=\r\n\nperformed using a single zip file, but the assumption being made\nhere is t=\r\nhat the client has a shared understanding of what the\nserver is intending t=\r\no do with those files.  That&#39;s coupling.\n\nApplications like that are usuall=\r\ny accomplished via code-on-demand.\nThe problem you will run into here is im=\r\nplementation issues\nregarding current browsers, not architectural issues an=\r\nd\ncertainly not a style issue.  Most such tools are developed\nas browser ex=\r\ntensions or app-specific clients, mostly because\nthey need unfettered acces=\r\ns to the filesystem and because\nbrowsers (for some unknown reason) don&#39;t in=\r\nclude integrity checks\nin normal file uploads.\n\n&gt; 2) Distributed Transactio=\r\nns - we need a paradigm to allow state changes on multiple services to happ=\r\nen so that the changes succeed or fail as a unit\n\nAgain, not a characterist=\r\nic of RESTful architectures.  If the\nclient knows the transaction is distri=\r\nbuted, you have failed.\nThere are lots of ways to solve this kind of proble=\r\nm on the\nback-end of services interfaces, behind the resource abstraction,\n=\r\nbut none of those are relevant to the REST architectural style\nthat might a=\r\npply on the front-end of the service interface.\n\n&gt; 3) Long running operatio=\r\nns - we need asynchronous invocations between services and a mechanism for =\r\nthe invoking service to find out when the invoked service is done given tha=\r\nt this work may take indefinitely long\n\nAny resource can behave as a long-r=\r\nunning service.  Just program it that way.\n\n&gt; 4) Workflow Orchestration - w=\r\ne would like to have orchestration services that define business processes =\r\nvia standardized representations (eg BPMN), then execute instances of those=\r\n processes and build up an process instance execution data resource by inte=\r\nracting with other RESTful resources using message exchange patterns that c=\r\nould specify the above behaviors.\n\nThat is a system, not an integration pro=\r\nblem.  If you want to\nsolve it, buy a full-featured WCM system like Day&#39;s C=\r\nQ5.\n\nhttp://www.day.com/day/en/products/web_content_management.html\n\n(sorry=\r\n, I don&#39;t have a way to answer that one without sounding\nlike a sales plug =\r\n-- it is, after all, why I work for a WCM vendor).\n\n....Roy\n"}}
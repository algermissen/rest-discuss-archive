{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":352334505,"authorName":"Craig McClanahan","from":"Craig McClanahan &lt;craigmcc@...&gt;","profile":"craig_mcclanahan","replyTo":"SENDER","senderId":"_gS13HlKY0I0BNBNF6FtNhuzlW3P07HXYhjaaBj157iOponnPFJ0WG6bUjW-GqnoLspbqoBfo1xgVeXPeOu1_nA8c-kFRBUdDyleUw","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Why HATEOAS?","postDate":"1238547543","msgId":12358,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGY4YjM5YWNlMDkwMzMxMTc1OWwzY2JjZGFmNWoyZDkwZWU5NzJhMjJmNGFiQG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PDU1YzYwZTM3MDkwMzMxMTcwMXg0YWRhYzAyZG8zNjliNWQ4NjE3MDBmNmU2QG1haWwuZ21haWwuY29tPg==","referencesHeader":"PDU1YzYwZTM3MDkwMzMxMTcwMXg0YWRhYzAyZG8zNjliNWQ4NjE3MDBmNmU2QG1haWwuZ21haWwuY29tPg=="},"prevInTopic":12357,"nextInTopic":12360,"prevInTime":12357,"nextInTime":12359,"topicId":12357,"numMessagesInTopic":27,"msgSnippet":"... I know exactly where you are coming from with these questions ... I felt the same way until recently.  I ve designed several REST APIs over the last couple","rawEmail":"Return-Path: &lt;craigmcc@...&gt;\r\nX-Sender: craigmcc@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 21161 invoked from network); 1 Apr 2009 01:00:03 -0000\r\nX-Received: from unknown (69.147.108.201)\n  by m5.grp.sp2.yahoo.com with QMQP; 1 Apr 2009 01:00:03 -0000\r\nX-Received: from unknown (HELO mail-qy0-f136.google.com) (209.85.221.136)\n  by mta2.grp.re1.yahoo.com with SMTP; 1 Apr 2009 01:00:03 -0000\r\nX-Received: by qyk42 with SMTP id 42so4931869qyk.7\n        for &lt;rest-discuss@yahoogroups.com&gt;; Tue, 31 Mar 2009 17:59:03 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.220.72.74 with SMTP id l10mr2897939vcj.71.1238547543116; Tue, \n\t31 Mar 2009 17:59:03 -0700 (PDT)\r\nIn-Reply-To: &lt;55c60e370903311701x4adac02do369b5d861700f6e6@...&gt;\r\nReferences: &lt;55c60e370903311701x4adac02do369b5d861700f6e6@...&gt;\r\nDate: Tue, 31 Mar 2009 17:59:03 -0700\r\nMessage-ID: &lt;f8b39ace0903311759l3cbcdaf5j2d90ee972a22f4ab@...&gt;\r\nTo: Solomon Duskis &lt;sduskis@...&gt;\r\nCc: Rest List &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Craig McClanahan &lt;craigmcc@...&gt;\r\nReply-To: craigmcc@...\r\nSubject: Re: [rest-discuss] Why HATEOAS?\r\nX-Yahoo-Group-Post: member; u=352334505; y=kPGHrla16o1GajDIRVzWxFoi7sQv9WRAmw58Er1dfKQoy_0VYZvyi1-uzw\r\nX-Yahoo-Profile: craig_mcclanahan\r\n\r\nOn Tue, Mar 31, 2009 at 5:01 PM, Solomon Duskis &lt;sduskis@...&gt; wrote:\n\n&gt; [snip]\n&gt; Assuming that the practical barriers of entry are removed, what practical\n&gt; benefits will we see?\n&gt;\n\nI know exactly where you are coming from with these questions ... I\nfelt the same way until recently.  I&#39;ve designed several REST APIs\nover the last couple of years, but up until the most recent one, I\ndesigned and documented them in the &quot;typical&quot; way, describing the URI\nstructure of the application and letting the client figure out what to\nsend when.  My most recent effort is contributing to the design of the\nREST architecture for the Sun Cloud API[1]  to control virtual\nmachines and so on.  In addition, I&#39;m very focused on writing client\nlanguage bindings for this API in multiple languages (Ruby, Python,\nJava) ... so I get a first hand feel for programming to this API at a\nvery low level.\n\nWe started from the presumption that the service would publish only\n*one* well-known URI (returning a &quot;cloud&quot; representation containing\nrepresentations for, and/or URI links to representations for, all the\ncloud resources that are accessible to the calling user).  Every other\nURI in the entire system (including all those that do state changes)\nare discovered by examining these representations.  Even in the early\ndays, I can see some significant, practical, short term benefits we\nhave gained from taking this approach:\n\n* REDUCED CLIENT CODING ERRORS.  Looking back at all the REST client\nside interfaces\n  that I, or people I work with, have built, about 90% of the bugs\nhave been in the construction\n  of the right URIs for the server.  Typical mistakes are leaving out\npath segments, getting them\n  in the wrong order, or forgetting to URL encode things.  All this\ngoes away when the server\n  hands you exactly the right URI to use for every circumstance.\n\n* REDUCED INVALID STATE TRANSITION CALLS.  When the client decides\nwhich URI to call and\n  when, they run the risk of attempting to request state transitions\nthat are not valid for the current\n  state of the server side resource.  An example from my problem\ndomain ... it&#39;s not allowed to\n  &quot;start&quot; a virtual machine (VM) until you have &quot;deployed&quot; it.  The\nserver knows about URIs to\n  initiate each of the state changes (via a POST), but the\nrepresentation of the VM lists only the\n  URIs for state transitions that are valid from the current state.\nThis makes it extremely easy\n  for the client to understand that trying to start a VM that hasn&#39;t\nbeen deployed yet is not legal,\n  because there will be no corresponding URI in the VM representation.\n\n* FINE GRAINED EVOLUTION WITHOUT (NECESSARILY) BREAKING OLD CLIENTS.\n  At any given time, the client of any REST API is going to be\nprogrammed with *some* assumptions\n  about what the system can do.  But, if you document a restriction to\n&quot;pay attention to only those\n  aspects of the representation that you know about&quot;, plus a server\nside discipline to add things later\n  that don&#39;t disrupt previous behavior, you can evolve APIs fairly\nquickly without breaking all clients,\n  or having to support multiple versions of the API simultaneously on\nyour server.  You don&#39;t have to\n  wait years for serendipity benefits :-).  Especially compared to\nsomething like SOAP where the\n  syntax of your representations is versioned (in the WSDL), so you\nhave to mess with the clients\n  on every single change.\n\nHaving drunk the HATEOAS koolaid now, I would have a really hard time\ngoing back :-).\n\nCraig McClanahan\n\n[1] http://kenai.com/projects/suncloudapis/pages/Home\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":289191104,"authorName":"Jan Algermissen","from":"Jan Algermissen &lt;algermissen1971@...&gt;","profile":"algermissen1971","replyTo":"SENDER","senderId":"oxusaBQOQ0JaTzW0Kk67_BfTS12LqnR2b_cht1_9tICGelEUZViexLB6TmDyKTjOOtYP8Qs1BP8tSvvq_gDp2tPzZI3rJ-IgpNBoHvAjxZo","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Loose coupling - a RESTful myth?","postDate":"1297064634","msgId":17326,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDlGQzA4NUEwLUIyNTItNDZBMi05RURDLTdFOEU4RTM4RUVFRUBtYWMuY29tPg==","inReplyToHeader":"PGlpanRtcytwMzRhQGVHcm91cHMuY29tPg==","referencesHeader":"PGlpanRtcytwMzRhQGVHcm91cHMuY29tPg=="},"prevInTopic":17324,"nextInTopic":17327,"prevInTime":17325,"nextInTime":17327,"topicId":17322,"numMessagesInTopic":13,"msgSnippet":"Hi Jakob, ... By design, in a RESTful system, changes to the server can never break clients[1]. The interesting thing is that REST achieves that by being","rawEmail":"Return-Path: &lt;algermissen1971@...&gt;\r\nX-Sender: algermissen1971@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 92520 invoked from network); 7 Feb 2011 07:44:47 -0000\r\nX-Received: from unknown (98.137.34.46)\n  by m7.grp.sp2.yahoo.com with QMQP; 7 Feb 2011 07:44:47 -0000\r\nX-Received: from unknown (HELO asmtpout030.mac.com) (17.148.16.105)\n  by mta3.grp.sp2.yahoo.com with SMTP; 7 Feb 2011 07:44:45 -0000\r\nMIME-version: 1.0\r\nContent-type: text/plain; charset=iso-8859-1\r\nX-Received: from [10.216.213.179] ([80.187.109.147])\n by asmtp030.mac.com (Oracle Communications Messaging Exchange Server 7u4-20.01\n 64bit (built Nov 21 2010)) with ESMTPSA id &lt;0LG800A49LHA3350@...&gt;\n for rest-discuss@yahoogroups.com; Sun, 06 Feb 2011 23:44:07 -0800 (PST)\r\nX-Proofpoint-Virus-Version: vendor=fsecure\n engine=2.50.10432:5.2.15,1.0.148,0.0.0000\n definitions=2011-02-07_03:2011-02-06,2011-02-07,1970-01-01 signatures=0\r\nX-Proofpoint-Spam-Details: rule=notspam policy=default score=0 spamscore=0\n ipscore=0 suspectscore=2 phishscore=0 bulkscore=0 adultscore=0 classifier=spam\n adjust=0 reason=mlx engine=6.0.2-1012030000 definitions=main-1102060236\r\nIn-reply-to: &lt;iijtms+p34a@...&gt;\r\nDate: Mon, 07 Feb 2011 08:43:54 +0100\r\nCc: REST Discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-transfer-encoding: quoted-printable\r\nMessage-id: &lt;9FC085A0-B252-46A2-9EDC-7E8E8E38EEEE@...&gt;\r\nReferences: &lt;iijtms+p34a@...&gt;\r\nTo: Jakob Strauch &lt;jakob.strauch@...&gt;\r\nX-Mailer: Apple Mail (2.1082)\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Jan Algermissen &lt;algermissen1971@...&gt;\r\nSubject: Re: [rest-discuss] Loose coupling - a RESTful myth?\r\nX-Yahoo-Group-Post: member; u=289191104; y=Hy9elmrbCF3OdGZ0JBLvKLuoUScr5qduRFZ13E8IBLcyoFOCwz7q76yl\r\nX-Yahoo-Profile: algermissen1971\r\n\r\nHi Jakob,\n\nOn Feb 5, 2011, at 5:26 PM, Jakob Strauch wrote:\n\n&gt; It is often =\r\nstated, that RESTful services decouples client and server, as e.g. stated h=\r\nere [1]:\n&gt; \n&gt; &quot;Coupling between client and server is removed, server owners=\r\n need not know about client particularities to evolve the servers without b=\r\nreaking clients.&quot;\n&gt; \n&gt; But i think, the most server changes will break even=\r\n the RESTfuls=B4 clients. At least in business scenarios:\n&gt; \n\nBy design, in=\r\n a RESTful system, changes to the server can never break clients[1]. The in=\r\nteresting thing is that REST achieves that by being rather strict on what c=\r\nan actually change. IOW, the RESTful server developer has more constraints/=\r\nguidance *what* to change than the RPC-server developer. MOst of the time, =\r\nit will come down to\n\na) compatibile changes to a media type: add new thing=\r\ns older clients ignore by design (e.g. HTML, ATOM)\nb) incompatible changes =\r\nto a media type: mint a new type and use content negotiation to answer clie=\r\nnts based on their advertised (Accept header) capabilities.\n\nBottom line: i=\r\nn a RESTful system you *can* evolve the server and be *sure* that you can w=\r\nithout calling the client owners (something that e.g. Amazon could never ev=\r\ner possibly do due to the number of connected user agents).\n\nDoes that help=\r\n?\n\nJan\n\n\n[1] Note that this does not cover the user intent because it is be=\r\nyond the technical realm (with all connectors). For example, if you aim to =\r\nbuy a book on Amazon and Amazon stops selling goods but changes to be a sit=\r\ne for looking up flight schedules then your expectations break. This is tru=\r\ne for browser based purchase as well as automated agent based searches. And=\r\n it would also be true if the user-side component (e.g. browser) talked to =\r\nthe server using RPC. It is a social aspect of networked, decentralized sys=\r\ntems: No technology gives you the power to control the other side. It is on=\r\nly that RPC connectors give you the illusion you could while REST makes it =\r\nexplicit that you can&#39;t.\n\n\n\n&gt; 1. Think about changing your application prot=\r\nocol due to business changes. Can a client be generic enough to compensate =\r\nthis? The link rel semantics of &quot;next&quot; are very clear. But what if i need a=\r\n relation type, which is not yet described? Which is too domain specific.\n&gt;=\r\n \n&gt; 2. What about the cross-cutting concerns like security? If i switch fro=\r\nm HTTP Basic auth to OAuth, can a generic client adapt to this situation au=\r\ntomatically? \n&gt; \n&gt; 3. What if i have to evolve a media type, which i=B4m us=\r\ning, and i need a new one? (for example by adding new link relations or dat=\r\na fields)\n&gt; \n&gt; In my opinion, i don=B4t see a business value in supporting =\r\n100% REST style. It might work with &quot;simple&quot; application protocols like ATO=\r\nM (which is very nice, but also very generic).\n&gt; \n&gt; Maybe someone can enlig=\r\nhten me...\n&gt; \n&gt; [1] http://nordsc.com/ext/classification_of_http_based_apis=\r\n.html\n&gt; \n&gt; \n&gt; \n&gt; ------------------------------------\n&gt; \n&gt; Yahoo! Groups Li=\r\nnks\n&gt; \n&gt; \n&gt; \n\n\n"}}
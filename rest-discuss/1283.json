{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":23186829,"authorName":"Paul Prescod","from":"Paul Prescod &lt;paul@...&gt;","replyTo":"SENDER","senderId":"l92-KvMqGeOr6PZpMPfnsHhYJHcsZGuPUMw0lfJYHVahvkihuBqBo_2zfLk41-EJJcyJTMIHaHaUiZEMgNPerjD2e9az6Q","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] REST Tutorial","postDate":"1021836639","msgId":1283,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDNDRTdGRDVGLkQyMjkyQzQ3QHByZXNjb2QubmV0Pg==","referencesHeader":"PE9GNUZDODk0MDkuNEREN0I2NEQtT044NTI1NkJCRS4wMDVGRUJEMi04NTI1NkJCRS4wMDYzRkVCRkByYWxlaWdoLmlibS5jb20+"},"prevInTopic":1282,"nextInTopic":1286,"prevInTime":1282,"nextInTime":1284,"topicId":1272,"numMessagesInTopic":21,"msgSnippet":"... Interesting point. ... True. But HTTP defines a way to transform a URI into bit stream (GET $URI). SOAP does not. ... That is certainly true for URLs known","rawEmail":"Return-Path: &lt;paul@...&gt;\r\nX-Sender: paul@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_0_3_2); 19 May 2002 19:29:53 -0000\r\nReceived: (qmail 67591 invoked from network); 19 May 2002 19:29:53 -0000\r\nReceived: from unknown (66.218.66.218)\n  by m2.grp.scd.yahoo.com with QMQP; 19 May 2002 19:29:53 -0000\r\nReceived: from unknown (HELO smtp1.ActiveState.com) (209.17.183.249)\n  by mta3.grp.scd.yahoo.com with SMTP; 19 May 2002 19:29:53 -0000\r\nReceived: from smtp3.ActiveState.com (smtp3.ActiveState.com [192.168.3.19])\n\tby smtp1.ActiveState.com (8.11.6/8.11.6) with ESMTP id g4JJTlb19051;\n\tSun, 19 May 2002 12:29:47 -0700\r\nReceived: from prescod.net (ssh1.ActiveState.com [192.168.3.32])\n\tby smtp3.ActiveState.com (8.11.6/8.11.6) with ESMTP id g4JJTje04782;\n\tSun, 19 May 2002 12:29:46 -0700\r\nMessage-ID: &lt;3CE7FD5F.D2292C47@...&gt;\r\nDate: Sun, 19 May 2002 12:30:39 -0700\r\nX-Mailer: Mozilla 4.76 [en] (Windows NT 5.0; U)\r\nX-Accept-Language: en\r\nMIME-Version: 1.0\r\nTo: Sam Ruby &lt;rubys@...&gt;\r\nCc: &quot;Roger L. Costello&quot; &lt;costello@...&gt;, rest-discuss@yahoogroups.com\r\nSubject: Re: [rest-discuss] REST Tutorial\r\nReferences: &lt;OF5FC89409.4DD7B64D-ON85256BBE.005FEBD2-85256BBE.0063FEBF@...&gt;\r\nContent-Type: text/plain; charset=us-ascii\r\nContent-Transfer-Encoding: 7bit\r\nX-Perlmx-Spam: Gauge=, Probability=0%, Report=&quot;INTERNAL_HOST&quot;\r\nX-Filtered-By: PerlMx makes it fast and easy.  See http://www.ActiveState.com/Products/PerlMx/Header\r\nFrom: Paul Prescod &lt;paul@...&gt;\r\nX-Yahoo-Group-Post: member; u=23186829\r\n\r\nSam Ruby wrote:\n&gt; \n&gt;...\n&gt; \n&gt; It is a bit ironic that a set of architectural practices under the title of\n&gt; &quot;Representation State Transfer&quot; defines virtually nothing about the way in\n&gt; which state is to be represented, and instead focuses on how Objects (or\n&gt; more precisely, resources) are to be accessed.\n&gt; \n&gt; Similarly, I find it a bit ironic that a protocol originally created as an\n&gt; acronym for Simple Object Access Protocol specifies nothing about how an\n&gt; object is to be accessed, but instead focuses pretty much exclusively on\n&gt; how messages are to be represented.  For more details on this subject, see\n&gt; http://radio.weblogs.com/0101679/stories/2002/01/25/whatObjectDoesSoapAccess.html\n\n\nInteresting point.\n\n&gt; It is very easy to come up with an example where one schema includes links\n&gt; and other does not, associate the first with a URL and place the second in\n&gt; an envelope and then portray this as a fundamental difference between SOAP\n&gt; and REST.  The truth is that HTTP nor SOAP require nor preclude &quot;proper&quot;\n&gt; links.\n\nTrue. But HTTP defines a way to transform a URI into bit stream (GET\n$URI). SOAP does not. \n\n&gt; Similarly, one can come up with an example where a resource is identified\n&gt; based on query parameters in a URL and another in which a resource is\n&gt; identified inside the body and portray this too as a fundamental\n&gt; difference.  This too is false as there are a number of SOAP toolkits which\n&gt; will happily dispatch requests based on the URL.  \n\nThat is certainly true for URLs known at &quot;deploy time&quot;. But I do not\nbelieve that it is true for URLs invented at runtime. For instance if I\ndo a createStockTicker(&quot;RUBY&quot;) message, can any existing SOAP toolkit\nreturn:\n\n&lt;NewTickerURI&gt;http://www...../RUBY&lt;/NewTickerURI&gt;\n\nAnd then have the client do method calls against the newly created\nendpoint. WSDL certainly does not support strongly and statically type\ndeclaring this interaction. That&#39;s its biggest flaw when it comes to\nREST.\n\n&gt; .... Furthermore, REST is an\n&gt; architectural style - it does not dictate syntax.  \n\nThat&#39;s absolutely true. I&#39;ve thought about the idea of a REST-on-SOAP\nand found a few problems:\n\n 1. in order for us to achieve economies of scale, we must agree on\nsyntax. If half of the world uses REST-HTTP and half uses REST-SOAP then\nwe will have problems talking to each other.\n\n 2. Who is going to go to the effort of creating REST-SOAP? If it isn&#39;t\npeople who were involved with HTTP, are they likely to get it right?\n\n 3. REST-on-SOAP would not combine the best virtues of HTTP and SOAP.\nOne of HTTP&#39;s virtues as an envelope is that it is data type agnostic.\nIt is as happy to carry binary as text. XML wasn&#39;t engineered for that.\nTherefore I don&#39;t see XML is a good choice for an envelope format.\n\n    * http://www.prescod.net/xml/envelopes/\n\n 4. I don&#39;t personally like the SOAP encoding much (IMO, confusing and\ncomplicated) and there are a variety of choices for XML-based object\nencoding out there. So I don&#39;t see SOAPENC as much of a &quot;win&quot;.\n\n 5. If the default transport for SOAP will be HTTP then we&#39;ll have SOAP\nrunning on HTTP and something HTTP-like running on SOAP. We&#39;ll be up to\n&quot;layer 9&quot; in the protocol stack and layer 7 will be totally useless --\njust a firewall-evasion technique.\n\n&gt; I will go a step further and indicate that it is possible to architect a\n&gt; system in accordance to the principles of REST and then implement it using\n&gt; SOAP.  In other words, these two are compatible.  I would argue that the\n&gt; deeper issue is that SOAP does little to require such an architectural\n&gt; style, in fact, most of the examples to date seem to espouse a different\n&gt; architectural style.   I discuss this further in\n&gt; http://www.oreillynet.com/cs/weblog/view/wlg/1351#Analogy\n\nI think that my point 1 is crucial. If Sam Ruby architects a system\naccording to REST principles using a SOAP syntax that Sam Ruby invents,\nand Paul Prescod architects a system according to REST principles\naccording to a SOAP syntax that Paul Prescod invents, etc., then we have\nno economies of scale and all of the virtues of REST are lost. We only\nwin if we agree. One way to agree is to say: &quot;Use HTTP&quot;. Another way to\nagree is to invent HTTP-on-SOAP-on-HTTP and then say &quot;use that&quot;. If\nthree years from now we decide that we really can&#39;t convince people to\nuse HTTP then probably we will have to reinvent it two levels up (&quot;Web\nServices Resource Manipulation Language&quot;) and then we could launch a\nbuzzword offensive around it, rewrite all of the existing software two\nlevels up and become IPO millionaires. Wait a second, why didn&#39;t I like\nthat idea again?\n\nNevertheless, you are right that syntax is just syntax. HTTP could be\nreinvented in SOAP syntax and if we all adopted it we would get all of\nthe advantages of REST. You would lose some aspects of the HTTP syntax\n(e.g. straightforward binary handling) but that wouldn&#39;t be major.\n\n&gt;  = = = =\n&gt; \n&gt;  The reason I joined this mailing list, and have persisted, is that it is\n&gt; my hope that some day a paper can be jointly authored which shows both SOAP\n&gt; and REST in a positive light, shows the strengths of both, and how they can\n&gt; be used in concert.\n\nActually, I am interested in this also, but I have a feeling that we\nwould disagree on the virtues of SOAP. Nevertheless, it would be\nilluminating for me to hear your list of what SOAP has to offer REST.\n\n Paul Prescod\n\n"}}
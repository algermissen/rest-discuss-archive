{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":383005568,"authorName":"scameron02","from":"&quot;scameron02&quot; &lt;scott.cameron@...&gt;","profile":"scameron02","replyTo":"SENDER","senderId":"uvaSP26DjmrEjhnZA6mZ8L5BjpMxzKN46FpPhmFDJzNE4qV6oZsYmHdKEV5Z0ALZx0D2zzP6m5tE3fCYYWjv1HmRRITOHlXYo9V7","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: RESTful URLs?","postDate":"1233682915","msgId":12081,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGdtOXZsMythNTcwQGVHcm91cHMuY29tPg==","inReplyToHeader":"PDQ5ODg3OTQ1LjEwOTA0MDdAaGFja2NyYWZ0Lm5ldD4="},"prevInTopic":12080,"nextInTopic":12082,"prevInTime":12080,"nextInTime":12082,"topicId":12048,"numMessagesInTopic":54,"msgSnippet":"... or ... Yes, I agree that abuse can lead to brittleness.  But I would apply that same statement against the semantics exposed by pretty much any API.  In ","rawEmail":"Return-Path: &lt;scott.cameron@...&gt;\r\nX-Sender: scott.cameron@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 17377 invoked from network); 3 Feb 2009 17:41:58 -0000\r\nX-Received: from unknown (66.218.67.97)\n  by m55.grp.scd.yahoo.com with QMQP; 3 Feb 2009 17:41:58 -0000\r\nX-Received: from unknown (HELO n18c.bullet.sp1.yahoo.com) (69.147.64.129)\n  by mta18.grp.scd.yahoo.com with SMTP; 3 Feb 2009 17:41:58 -0000\r\nX-Received: from [69.147.65.151] by n18.bullet.sp1.yahoo.com with NNFMP; 03 Feb 2009 17:41:58 -0000\r\nX-Received: from [66.218.66.79] by t5.bullet.mail.sp1.yahoo.com with NNFMP; 03 Feb 2009 17:41:58 -0000\r\nDate: Tue, 03 Feb 2009 17:41:55 -0000\r\nTo: rest-discuss@yahoogroups.com\r\nMessage-ID: &lt;gm9vl3+a570@...&gt;\r\nIn-Reply-To: &lt;49887945.1090407@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: multipart/alternative; boundary=&quot;1-2059467283-4372231799=:7&quot;\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-Yahoo-Newman-Property: groups-compose\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;scameron02&quot; &lt;scott.cameron@...&gt;\r\nSubject: Re: RESTful URLs?\r\nX-Yahoo-Group-Post: member; u=383005568; y=54e5wD4aPAJIKOWxP3ARL-shf5b_bvPjqE6sZlzh8v1ZNxKSUg\r\nX-Yahoo-Profile: scameron02\r\n\r\n\r\n--1-2059467283-4372231799=:7\r\nContent-Type: text/plain; charset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n\n--- In rest-discuss@yahoogroups.com, Jon Hanna &lt;jon@...&gt; wrote:\n&gt;\n&gt; &gt; but =\r\nyour first example most\n&gt; &gt; certainly has the potential to be what I would =\r\nconsider transparent\nor\n&gt; &gt; &quot;hackable&quot;\n&gt;\n&gt; Often a plus, but a plus irrelev=\r\nant to REST.\n&gt;\n&gt; A minus if you abuse the advantages in ways that lead to b=\r\nrittleness.\n\nYes, I agree that abuse can lead to brittleness.  But I would =\r\napply that\nsame statement against the semantics exposed by pretty much any =\r\nAPI.  In\nfact, I don&#39;t think there is such a thing as a non-static, non-bri=\r\nttle\nAPI.  It either never changes, or it has the potential to break client=\r\ns.\n\nUsing hypermedia pushes many of the semantics of the API into\nstandardi=\r\nzed formats that are very static, which makes the use of\nhypermedia less br=\r\nittle than a custom API.  But there is still\nbrittleness there (albeit less=\r\n of it), as there is in any non-standard\nAPI.\n\nIf I tell you as a client th=\r\nat there will be a &lt;link&gt; element with a\n&quot;rel&quot; attribute marked &quot;parents&quot; i=\r\nn the representation of a resource and\nthat this hyperlink will retrieve a =\r\nlist of parent resources then there\nmust be some understanding that the ser=\r\nver will not someday randomly\ndecide to start sticking a hyperlink into &quot;pa=\r\nrents&quot; that returns, for\nexample, child resources instead.\n\nAny agreement b=\r\netween client and server has the potential to be abused. \nI do agree with y=\r\nou that hypermedia reduces this potential.\n\n&gt;\n&gt; Whether ohiuwftojiics09fsda=\r\no is a globally unique ID or not,\n&gt; http://example.net/ohiuwftojiics09fsdao=\r\n is a globally unique ID, as is\n&gt; http://example.net/main_api/users/user23,=\r\n so why bother?\n&gt;\n\nSorry, I wasn&#39;t clear.  I didn&#39;t mean globally unique ID=\r\n in terms of the\nURI identifying a resource.  I meant something like a GUID=\r\n or some\napplication-internal identifier.  You could pull a GUID out of one=\r\n\nresource and use it to construct a URI based on the GUID-based URI from\nan=\r\nother resource.\n\nThis brings up an interesting question.  Do you believe th=\r\nat URI\ntemplates have the potential to fall into the category of hypermedia=\r\n? \nSay I do have a URI scheme that looks like this:\n\n      http://example.n=\r\net/{guid}\n\nAnd in a particular resource representation I return something t=\r\nhat has\nthis URI template in a contextualized &lt;link-template&gt; element along=\r\n with\ninformation about a bunch of resources each including a GUID in a\nwel=\r\nl-known location.  If I can programmatically inspect the URI template\nand c=\r\nonstruct valid URIs from it using GUID information from other parts\nof the =\r\nrepresentation, is this considered hypermedia?\n\n&gt;\n&gt; The robustness over tim=\r\ne is determined by the fact that if one uses\n&gt; HATEOS then it doesn&#39;t matte=\r\nr which URIs are used. Structured URIs can\n&gt; aid this by allowing for relat=\r\nive links and by making spot-hacks by\n&gt; humans easier, but these are conven=\r\niences.\n&gt;\n\nEverybody seems to agree that the use of hypermedia as the prima=\r\nry (or\nin your case, sole) driver of state transition is the most desirable=\r\n\napproach.  But do you agree that there are applications where returning\nan=\r\n exhaustive list of potential next state transitions in a\nrepresentation is=\r\n just not feasible?  As per my original post, how do\nyou handle application=\r\ns of this kind?\n\nIt seems to me that in cases like this this there will hav=\r\ne to be a\ndeterministic, programmatic method of producing URIs based on som=\r\ne kind\nof template or documentation or something else.  Or do you believe t=\r\nhat\nsuch applications just cannot be purely RESTful?\n\nscott\n\n\r\n--1-2059467283-4372231799=:7\r\nContent-Type: text/html; charset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;font face=3D&quot;georgia&quot;&gt;&lt;br&gt;--- In rest-discuss@yahoogroups.com, Jon Hanna &=\r\nlt;jon@...&gt; wrote:&lt;br&gt;&gt; &lt;br&gt;&gt; &gt; but your first example most &lt;br=\r\n&gt;&gt; &gt; certainly has the potential to be what I would consider transpar=\r\nent or &lt;br&gt;&gt; &gt; &quot;hackable&quot;&lt;br&gt;&gt; &lt;br&gt;&gt; Often a plus, but a plus i=\r\nrrelevant to REST.&lt;br&gt;&gt; &lt;br&gt;&gt; A minus if you abuse the advantages in =\r\nways that lead to brittleness.&lt;br&gt;&lt;br&gt;Yes, I agree that abuse can lead to b=\r\nrittleness.&nbsp; But I would apply that same statement against the semanti=\r\ncs exposed by pretty much any API.&nbsp; In fact, I don&#39;t think there is su=\r\nch a thing as a non-static, non-brittle API.&nbsp; It either never changes,=\r\n or it has the potential to break clients. &lt;br&gt;&lt;br&gt;Using hypermedia pushes =\r\nmany of the semantics of the API into standardized formats that are very st=\r\natic, which makes the use of hypermedia less brittle than a custom API.&nbs=\r\np; But there is still brittleness there (albeit less of it), as there is in=\r\n any non-standard API.&lt;br&gt;&lt;br&gt;If I tell you as a client that there will be =\r\na &lt;link&gt; element with a &quot;rel&quot; attribute marked &quot;parents&quot; in the repre=\r\nsentation of a resource and that this hyperlink will retrieve a list of par=\r\nent resources then there must be some understanding that the server will no=\r\nt someday randomly decide to start sticking a hyperlink into &quot;parents&quot; that=\r\n returns, for example, child resources instead. &lt;br&gt;&lt;br&gt;Any agreement betwe=\r\nen client and server has the potential to be abused.&nbsp; I do agree with =\r\nyou that hypermedia reduces this potential.&lt;br&gt;&lt;br&gt;&gt; &lt;br&gt;&gt; Whether oh=\r\niuwftojiics09fsdao is a globally unique ID or not, &lt;br&gt;&gt; http://example.=\r\nnet/ohiuwftojiics09fsdao is a globally unique ID, as is &lt;br&gt;&gt; http://exa=\r\nmple.net/main_api/users/user23, so why bother?&lt;br&gt;&gt; &lt;br&gt;&lt;br&gt;Sorry, I was=\r\nn&#39;t clear.&nbsp; I didn&#39;t mean globally unique ID in terms of the URI ident=\r\nifying a resource.&nbsp; I meant something like a GUID or some application-=\r\ninternal identifier.&nbsp; You could pull a GUID out of one resource and us=\r\ne it to construct a URI based on the GUID-based URI from another resource.&lt;=\r\nbr&gt;&lt;br&gt;This brings up an interesting question.&nbsp; Do you believe that UR=\r\nI templates have the potential to fall into the category of hypermedia?&nbs=\r\np; Say I do have a URI scheme that looks like this:&lt;br&gt;&lt;br&gt;&nbsp;&nbsp;&nbs=\r\np;&nbsp; http://example.net/{guid}&lt;br&gt;&lt;br&gt;And in a particular resource repr=\r\nesentation I return something that has this URI template in a contextualize=\r\nd &lt;link-template&gt; element along with information about a bunch of res=\r\nources each including a GUID in a well-known location.&nbsp; If I can progr=\r\nammatically inspect the URI template and construct valid URIs from it using=\r\n GUID information from other parts of the representation, is this considere=\r\nd hypermedia?&lt;br&gt;&lt;br&gt;&gt;&lt;br&gt;&gt; The robustness over time is determined by=\r\n the fact that if one uses &lt;br&gt;&gt; HATEOS then it doesn&#39;t matter which URI=\r\ns are used. Structured URIs can &lt;br&gt;&gt; aid this by allowing for relative =\r\nlinks and by making spot-hacks by &lt;br&gt;&gt; humans easier, but these are con=\r\nveniences.&lt;br&gt;&gt; &lt;br&gt;&lt;br&gt;Everybody seems to agree that the use of hyperme=\r\ndia as the primary (or in your case, sole) driver of state transition is th=\r\ne most desirable approach.&nbsp; But do you agree that there are applicatio=\r\nns where returning an exhaustive list of potential next state transitions i=\r\nn a representation is just not feasible?&nbsp; As per my original post, how=\r\n do you handle applications of this kind?&lt;br&gt;&lt;br&gt;It seems to me that in cas=\r\nes like this this there will have to be a deterministic, programmatic metho=\r\nd of producing URIs based on some kind of template or documentation or some=\r\nthing else.&nbsp; Or do you believe that such applications just cannot be p=\r\nurely RESTful?&lt;br&gt;&lt;br&gt;scott&nbsp; &lt;br&gt;&lt;/font&gt;\n\r\n--1-2059467283-4372231799=:7--\r\n\n"}}
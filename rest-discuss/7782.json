{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":289191104,"authorName":"Jan Algermissen","from":"Jan Algermissen &lt;algermissen1971@...&gt;","profile":"algermissen1971","replyTo":"SENDER","senderId":"ZObfYPOtmuVmK8nGypsb18dSHb5V2MDVF25ugl1xqf9RKXdIIQ1NibzpgGv2NeD5FmggKUutB9J55dcLFYATVfreVyUnJJU_0AYX3R1VwRY","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] modelling transactions","postDate":"1170406771","msgId":7782,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEJGM0IyNUQyLTExQzYtNDlDRi1BNDZCLTIwRTNBRTdGRDIxMUBtYWMuY29tPg==","inReplyToHeader":"PDIwMDcwMjAyMDUxNjA0LkdBMTA0OTVAc2xpbmtwLmNvbT4=","referencesHeader":"PDIwMDcwMjAyMDUxNjA0LkdBMTA0OTVAc2xpbmtwLmNvbT4="},"prevInTopic":7781,"nextInTopic":7790,"prevInTime":7781,"nextInTime":7783,"topicId":7780,"numMessagesInTopic":17,"msgSnippet":"Hi Paul, ... You might also want to check out JSR 170[1] ... Yes, APP is indeed very interesting towards that end. I tend to see APP/Atom to provide for the","rawEmail":"Return-Path: &lt;algermissen1971@...&gt;\r\nX-Sender: algermissen1971@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 87673 invoked from network); 2 Feb 2007 09:01:23 -0000\r\nReceived: from unknown (66.218.67.33)\n  by m36.grp.scd.yahoo.com with QMQP; 2 Feb 2007 09:01:23 -0000\r\nReceived: from unknown (HELO smtpout.mac.com) (17.250.248.184)\n  by mta7.grp.scd.yahoo.com with SMTP; 2 Feb 2007 09:01:23 -0000\r\nReceived: from mac.com (smtpin04-en2 [10.13.10.149])\n\tby smtpout.mac.com (Xserve/8.12.11/smtpout14/MantshX 4.0) with ESMTP id l1291HpO016342;\n\tFri, 2 Feb 2007 01:01:19 -0800 (PST)\r\nReceived: from [80.171.193.151] (d193151.adsl.hansenet.de [80.171.193.151])\n\t(authenticated bits=0)\n\tby mac.com (Xserve/smtpin04/MantshX 4.0) with ESMTP id l1290wso002418;\n\tFri, 2 Feb 2007 01:01:12 -0800 (PST)\r\nIn-Reply-To: &lt;20070202051604.GA10495@...&gt;\r\nReferences: &lt;20070202051604.GA10495@...&gt;\r\nMime-Version: 1.0 (Apple Message framework v752.3)\r\nContent-Type: text/plain; charset=US-ASCII; delsp=yes; format=flowed\r\nMessage-Id: &lt;BF3B25D2-11C6-49CF-A46B-20E3AE7FD211@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nContent-Transfer-Encoding: 7bit\r\nDate: Fri, 2 Feb 2007 09:59:31 +0100\r\nTo: Paul Winkler &lt;pw_lists@...&gt;\r\nX-Mailer: Apple Mail (2.752.3)\r\nX-Brightmail-Tracker: AAAAAA==\r\nX-Brightmail-scanned: yes\r\nX-eGroups-Msg-Info: 1:0:0:0\r\nFrom: Jan Algermissen &lt;algermissen1971@...&gt;\r\nSubject: Re: [rest-discuss] modelling transactions\r\nX-Yahoo-Group-Post: member; u=289191104; y=oKBBZDxEWjRtQKq2OfL7b4qc8b8Ghh9KBlWbdEwKxHv5Ijv2LjUH4DNR\r\nX-Yahoo-Profile: algermissen1971\r\n\r\nHi Paul,\n\nOn 02.02.2007, at 06:16, Paul Winkler wrote:\n\n&gt; Hi,\n&gt;\n&gt; I&#39;ve never built a REST app but am thinking of going that direction\n&gt; with the next major version of a content repository API used by my\n&gt; employer.\n\nYou might also want to check out JSR 170[1]\n\n&gt;\n&gt; APP is looking interesting, since most of what we need maps pretty\n&gt; well to member entries, feeds, and media resources. The introspection\n&gt; feature might be useful too.\n\nYes, APP is indeed very interesting towards that end. I tend to see  \nAPP/Atom to\nprovide for the machine-to-machine Web what HTML is for the machine-2- \nhuman\nweb - it provides a set of semantics to get stuff done.\n\n\n&gt;\n&gt; But what about this use case? A third party comes along and licenses\n&gt; 10,000 documents to us.  There are lots of cross-links among those\n&gt; documents, so a requirement in the contract is that we must load the\n&gt; entire set successfully, or none at all.\n&gt;\n&gt; Leaving this up to the client is not an option. This is part of a SOA,\n&gt; and there&#39;s currently four clients.\n&gt;\n&gt; APP doesn&#39;t seem to say anything about transactions, so I&#39;m assuming\n&gt; that it&#39;s up to me to find a more generally REST-y solution.\n\nYes. The perfect thing to do this would be an APP extension.\n\n&gt;\n&gt; The one obvious idea that occurs to me is to define two new resources,\n&gt; a transaction manager and a transaction resource.  A transaction is\n&gt; really just a collection.  To create a new transaction, POST to the\n&gt; transaction manager with a list of the resource URIs you want to\n&gt; modify. It initializes the transaction by copying those members, and\n&gt; returns the URI of your new transaction.\n&gt;\n&gt; GET the transaction resource to see a list of member URIs, as usual.\n&gt; PUT or DELETE any of those members as usual.  POST to the transaction\n&gt; to add new members as usual. To abort, just DELETE the transaction.\n\nHmm, IMHO that is close but not quite on the point. What you really  \nwant is\nto group together a bunch of requests; you want to tell the server  \nthat the\n10000 POSTs you are doing form a logical unit.\nThe way to generally do this with HTTP (scan the list archives for  \nthis) is\nto include a transaction idenifier (URI) in each request with a  \nrequest HTTP\nheader.\n\n&gt;\n&gt; But what does a &quot;commit&quot; look like? I don&#39;t see an appropriate verb\n&gt; other than PUT, so I see two options:\n&gt;\n\nThat is a missing piece, yes. You need a way to to tell the  \ntransaction to\ncommit or rollback.\n\nHere is my sketch how all this could be done with Atom:\n\n- A server that provides transactionaliy declares in its service  \ndocument that\n   a) there is a transaction collection and b) what other collections  \nsupport transactions.\n  (You do this via James Snell&#39;s atompub-feature extension[2])\n\n- POST to the transaction collection to create a new transaction; the  \nURI of the transaction\n   is the Location returned by the server in the 201 Created response.\n\n- include that URI in all subsequent requests to the other collections\n\n   POST /documents\n   Transaction-URI: http://foo.org/transactions/3\n\n   [document1 of 10000]\n\nAfterwards, PUT to the ransaction a representation that sets it to the\n&#39;commited&#39; state. This could for example be done with an APP control  \nextension,\nas in:\n\nPUT /transactions/3\n\n&lt;entry&gt;\n   &lt;!-- .... --&gt;\n   &lt;app:control&gt;\n     &lt;tx:commit&gt;\n   &lt;/app:control&gt;\n&lt;/entry&gt;\n\nNote that all this applies only to local transactions, managing  \ndistributed transactions\nwould need to involve a transaction manager and all the 2PC  \nrequirements. OTH, in\nan environment that makes REST a good choice doing 2PC is usually the  \nthing *not* to\ndo - you&#39;d need other forms of coordination (this is next on my list  \nof stuff to look at, so I\nreally cannot provide any guidance here now).\n\nHTH,\n\nJan\n\n[1]http://www.jcp.org/en/jsr/detail?id=170\n[2]http://tools.ietf.org/id/draft-snell-atompub-feature-01.txt\n\n&gt; 1) PUT the URI of the original collection to the transaction.  This is\n&gt; a nice and simple message, but means the transaction has to be a\n&gt; little smarter than a normal collection.\n&gt;\n&gt; 2) PUT the URIs of the transaction and the original collection to the\n&gt; transaction manager. This would be interpreted like &quot;merge the\n&gt; contents of URI 1 into URI 2&quot;.\n&gt;\n&gt; (I first thought of POSTing a special message to the T.M. to commit,\n&gt; but realized that would look too much like creating a transaction. It\n&gt; smells RPC. I figure any time I can&#39;t tell what&#39;s going on by looking\n&gt; at a simple access log, it&#39;s not really REST!)\n&gt;\n&gt; Either way, we should check mod times and if a conflict is detected,\n&gt; return an error. 409?\n&gt;\n&gt; How&#39;s that sound? Better ideas?\n&gt;\n&gt;\n&gt; P.S. this is my first post to the list. Hello!\n&gt;\n&gt; -- \n&gt;\n&gt; Paul Winkler\n&gt; http://www.slinkp.com\n&gt;\n&gt;\n&gt;\n&gt; Yahoo! Groups Links\n&gt;\n&gt;\n&gt;\n\n\n"}}
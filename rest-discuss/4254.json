{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":119562537,"authorName":"Josh Sled","from":"Josh Sled &lt;jsled-yahoogroup@...&gt;","profile":"joshsled","replyTo":"SENDER","senderId":"xjXbwUwN06eHkg-c0NjM9wmQcsfO2y0ILdO9GPYolBFgKFYs8aRQqTq1mZ_yIbPZWR_f-s2zjRr_W0ttB_0w0-EACoZ66mnTWXTqPKJTkz2gMCHm","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] REST toolkits","postDate":"1077890035","msgId":4254,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMDQwMjI3MTM1MzU1LkdBMjYzNTNAcGhvZW5peC5zb3Zlci5uZXQ+","inReplyToHeader":"PDEwNzYzMjQ5NDkuMTYxNTkuMzQuY2FtZWxAbG9jYWxob3N0Pg==","referencesHeader":"PGJ2dGludCs2bzIwQGVHcm91cHMuY29tPiA8MjAwNDAyMDYxNTE1NDYuR0EyMjg5OUBwaG9lbml4LnNvdmVyLm5ldD4gPDEwNzYzMjQ5NDkuMTYxNTkuMzQuY2FtZWxAbG9jYWxob3N0Pg=="},"prevInTopic":4127,"nextInTopic":4256,"prevInTime":4253,"nextInTime":4255,"topicId":1078,"numMessagesInTopic":37,"msgSnippet":"... Likely... maybe ... too early to say, though. ... Hmm.  My biggest issue with this is that the developer is likely already going to have a set of idioms","rawEmail":"Return-Path: &lt;jsled@...&gt;\r\nX-Sender: jsled@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 88947 invoked from network); 27 Feb 2004 13:54:54 -0000\r\nReceived: from unknown (66.218.66.166)\n  by m20.grp.scd.yahoo.com with QMQP; 27 Feb 2004 13:54:54 -0000\r\nReceived: from unknown (HELO phoenix.asynchronous.org) (216.114.142.253)\n  by mta5.grp.scd.yahoo.com with SMTP; 27 Feb 2004 13:54:53 -0000\r\nReceived: (qmail 26381 invoked by uid 1000); 27 Feb 2004 08:53:55 -0500\r\nDate: Fri, 27 Feb 2004 08:53:55 -0500\r\nTo: Tony Butterfield &lt;tab@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nMessage-ID: &lt;20040227135355.GA26353@...&gt;\r\nReferences: &lt;bvtint+6o20@...&gt; &lt;20040206151546.GA22899@...&gt; &lt;1076324949.16159.34.camel@localhost&gt;\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=us-ascii\r\nContent-Disposition: inline\r\nIn-Reply-To: &lt;1076324949.16159.34.camel@localhost&gt;\r\nUser-Agent: Mutt/1.4.2.1i\r\nX-Unexpected-Header: Nobody expects the Unexpected Header!\r\nOrganization: asynchronous.org\r\nX-eGroups-Remote-IP: 216.114.142.253\r\nFrom: Josh Sled &lt;jsled-yahoogroup@...&gt;\r\nSubject: Re: [rest-discuss] REST toolkits\r\nX-Yahoo-Group-Post: member; u=119562537\r\nX-Yahoo-Profile: joshsled\r\n\r\nOn Mon, Feb 09, 2004 at 11:09:09AM +0000, Tony Butterfield wrote:\n\n| Are you thinking of RDF for defining, declaring and documenting the\n| interfaces?\n\nLikely... maybe ... too early to say, though.\n\n\n| Looking at the service, there are at least three aspects:\n| 1) implementing the service\n| 2) providing a public interface to the service\n| 3) providing meta-data about the service\n| \n| As far as implementing the service goes, I think it would great if the\n| toolkit would provide all abstractions to implement the service\n| independent of the public interface, provide implementations of the\n| common web datatypes and provide tools for the management of the\n| service.\n\nHmm.  My biggest issue with this is that the developer is likely already\ngoing to have a set of idioms and tools [data-structures, libraries, &c.]\nwith which to deal with common web datatypes [be they images or XML].  Hmmm.\n\n&quot;Management of the service&quot; I&#39;m going to read as &quot;basic lifecycle and\nnetwork-connection accepting&quot; ... in that case, I also think that most people\nalready have some tool for dealing with this, as well.  At the same time, a\nlightweight HTTP client/server might be a good optional provision of the\ntoolkit.\n\nI don&#39;t know what meta data there necessarily is.  In fact, I think that\nRESTful services should try to minimize the volume of meta-data necessary to\nfunction; anything apart from the interface itself is another point of\n&quot;failure&quot;.\n\n\n| As far as providing the public interface I would good to be able to\n| declaratively map the service onto some public interface. I.e. lets say\n| put the ImageTransformService at http://imagetools.org/transform \n\nHmm.  Let&#39;s come to agreement on a sketch of what the RESTful API for this\nservice would look like...\n\nC: POST /transform\nC: &lt;transform&gt;\n     &lt;image resource=&quot;http://host/path/image.png&quot; /&gt;\n     &lt;format&gt;image/png&lt;/format&gt;\n     &lt;transforms&gt;\n       &lt;scale x=&quot;0.5&quot; y=&quot;0.5&quot; /&gt;\n       &lt;crop x0=&quot;0&quot; y0=&quot;0&quot; x1=&quot;-20&quot; y1=&quot;-50&quot; /&gt;\n       &lt;sharpen q=&quot;0.217&quot; /&gt;\n     &lt;/transforms&gt;\n   &lt;/transform&gt;\nS: 201; Location: /transform/1\n\nC: GET /transform/1\nS: 200\nS: &lt;transform&gt;\n     &lt;source resource=&quot;http://host/path/image.png&quot; /&gt;\n     &lt;image resource=&quot;/transform/1/image&quot; /&gt;\n     &lt;transforms&gt;\n       &lt;scale x=&quot;0.5&quot; y=&quot;0.5&quot; /&gt;\n       &lt;crop x0=&quot;0&quot; y0=&quot;0&quot; x1=&quot;-20&quot; y1=&quot;-50&quot; /&gt;\n       &lt;sharpen q=&quot;0.217&quot; /&gt;\n     &lt;/transforms&gt;\n   &lt;/transform&gt;\n\nC: GET /transform/1/image\nS: 200; Content-Type: image/png\nS: [binary image data]\n\nSeem reasonable?\n\n\n| Providing meta-data. I&#39;d like to explore this issue more. To use RDF or\n| WSDL to describe an interface is nice but useful only for automatically\n| building static client stubs or providing documentation. \n\nThose are pretty useful things, and I think exactly what most people want out\nof such a toolkit. :)\n\n\nThere is an elephant in the room, though, of actually modeling a\nresource-space such that it matches the nouns of the application domain, but\nwith the necessary ... formalism ... to support an REST implementation.\nPerhaps a &quot;resource-space-builder&quot; [a-la a GUI builder] isn&#39;t out of the\nquestion.  This may be REST&#39;s hardest sell ... one needs to do some work not\ndirectly related to writing code to get the thing off the ground.\n\n\n| parameters to a request using standard web datatypes- in this example\n| say and XML specification plus a PNG image stream. Then pass them to the\n| service. \n\nDamn; I&#39;m torn between getting out of the developer&#39;s way and letting her use\nwhatever tools for both XML/data-handling and http-{client,server}age she\nwants, and the necessities of actually having a toolkit that provides value.\nI think the right thing is to do the latter, and try to abstract it out\ntoward the former.\n\n\n\nI think it&#39;s important to focus on a toolkit, rather than a framework.  That\nis: focus less on subsuming the developer&#39;s world, instead focus on providing\na set of small tools to be used and integrated into their world.\n\nFrom recent experience building a RESTful [internal] client/server system,\nthese [were] the more useful parts we had spawned:\n\n1/ &#39;http[-test]-client&#39; -- a simple [~300line] command-line wrapper around\n   the Jakarta HttpClient library, allowing manual execution of all 4 verbs:\n\n   e.g.:\n   # htc [-h localhost] [-p 8180] GET &#39;/transform?created=today&#39;\n     &lt;xml&gt;\n   # htc -f new-transform.xml POST /transform\n     Location: /transform/42\n   # htc GET /transform/42\n     &lt;xml&gt;\n   # htc DELETE /transform/42\n     200\n\n   Basically: wget += [ put, post, delete ];\n\n\n2/ a resource/service-method mapping dispatcher -- a relatively simple\n   Servlet dispatcher which was configured by a simple text file of lines of\n   the form:\n\n   -----\n   ###  public void getTransforms( Map m )\n   GET  /transform?[query-spec] in:null out:TransformList TransformService.getTransforms\n   ###  public TransformUri postTransform( Transform t )\n   POST /transform in:Transform out:TransformURI TransformService.postTransform\n   ###  public Transform getTransform( TransformURI turi )\n   GET  /transform/1 in:TransformURI out:Transform TransformService.getTransform\n   -----\n\n   The Dispatcher had support for:\n   * URI-pattern matching.\n   * required query paramaters which modified dispatching.\n   * input/output data validation/[un]marshaling.\n\n   I think the data behind this particular file is better placed in a simple\n   data structure directly in the code, in the simple case.  One problem we\n   had was the seperation of the sections of this file from the 20-or-so\n   services which backed it ... they could then more easily change\n   independently, which sucks.\n\n   In out system, we autogenerated all those in: and out: types ... but it\n   was more important that they implemented a simple interface which allowed\n   the retreival of their &quot;xml-delegate&quot;, which was then used to do\n   [un]marshaling.\n\n   This is the trickiest part, for me...\n\n   i/    I don&#39;t want a tool that autogenerates data-carrier objects: there&#39;s\n         already too many of them, and they all suck.\n\n   ii/   I personally don&#39;t want to deal with XML-enabled objects anymore.\n   \n\n3/ A set of defined error-codes, exceptions and consistent handling.  We only\n   ended up using the &quot;common subset&quot; of HTTP response codes... specifically:\n   200 [ok], 201 [created], 202 [accepted], 204 [no content]\n   400 [bad req], 401 [unauthorized], 404, 409 [object conflict]\n   500 [server error]\n\n   We handled these with exceptions in java; there was one in particular that\n   we all felt sad about throwing the exception, since it wasn&#39;t an\n   exceptional case. :/  At the same time, you don&#39;t want every function\n   return value to be &quot;HttpResponse&quot;...\n\n4/ request/response logger -- we did this on the client side, but should have\n   done it on the server side, too.  It was basically a fixed-size FILO queue\n   of request objects, which was trivially HTMLized.  It made debugging and\n   undestanding the system a breeze.\n   * We also should have extended it to save a replayable log for testing\n     purposes, which would have been real nice.\n\n5/ ScriptableHttpXml -- a simple tool which accepted a script file with\n   directives like:\n   ----\n   GET /transform/0 expect:404\n   GET /transform/-1 expect:404\n   POST /transform file:transform-test0.xml expect:201 location:test0uri\n   GET  ${test0uri} expect:200 saveIn:test0data compareTo:transform-test0-get.xml\n   XPATHREPLACE ${test0data} /transform/@about=&quot;/transform/42&quot;\n   PUT  ${test0uri} ${test0data} expect:409\n   # ...\n   ---\n\n   * It started with the 4 verbs plus a couple of other data-handling\n     directives, and grew as we got more sophisticated.  I&#39;ll see what I can\n     do about getting the tool from it&#39;s owner. :)\n\n\nAs well, in would have been really nice to have the following:\n\na/ some auto-population of the resource-space.  I always wanted [GET /]\n   to return a list of the top-level resources.  The ResourceDispatcher\n   should have been able to do that.\n\nb/ a standard way to return &quot;4xx, but here&#39;s how you use it...&quot;, in a\n   developer-understandable form.\n\nc/ a useful URI class -- we ended up doing the URI-pattern matching in\n   multiple places.  It&#39;d sure have been nice to have a consistent mechanism\n   for it.\n\nd/ etags/timestamps + conditional-GET support -- we solved multiple\n   performance problems with poor-man&#39;s caching, but it would have been nice\n   to have had an easy way to plumb etags/timestamps through the server to\n   the API.\n\n\nSo what toolkit pieces do I see out of this, at this point?\n\n* &quot;httpc&quot;\n* ScriptableHttpXml\n* ResourceDispatcher\n* PatternURI\n\n\n| -- \n| Tony Butterfield &lt;tab@...&gt;\n| 1060 Research\n\n...jsled\n-- \nhttp://www.asynchronous.org - `a=jsled; b=asynchronous.org; echo ${a}@${b}`\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":289191104,"authorName":"Jan Algermissen","from":"Jan Algermissen &lt;algermissen1971@...&gt;","profile":"algermissen1971","replyTo":"SENDER","senderId":"aBa3dIfMltGDffR_ux0dI-sgmhOMtxAGdBPooIcB05lUCLKIA5rCiekfCylulfbOyn-Kl7ooy_zJbS2xPM5724MPefVIHn0KzQ7RsgDTBA8","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Re: RESTful M2M Systems and Resource Typing","postDate":"1261550806","msgId":14353,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDZFRTcwQjUyLTQ0RTctNDQ2OC05OUY0LUUyQTE4ODJENUQwMkBtYWMuY29tPg==","inReplyToHeader":"PDM5MTVjNjlkMDkxMjIyMTIxM2czOGM2NDhlMndkZDBkODcyZGNiYzAxMzA4QG1haWwuZ21haWwuY29tPg==","referencesHeader":"PGhnbnBmaCtwcGZrQGVHcm91cHMuY29tPiA8MjZERUVBQTUtNTJCMi00QzQxLTlENDAtMEQ3MTZEMDFGMDc0QG1hYy5jb20+IDxkZTcwYjM5ZDA5MTIyMTExMTlzMTg4Y2E4ZDRzNWJlNGRhZDBiNzBlMTUwN0BtYWlsLmdtYWlsLmNvbT4gPEVFQTg0RTA5LTlFNDctNDEyNy04OUQzLTBFOTVENDlDMkFFREBtYWMuY29tPiA8ZGU3MGIzOWQwOTEyMjExNDQ3dDZjMzUwNGU3azhhNmEwMjY5NmEyYmRhMTBAbWFpbC5nbWFpbC5jb20+IDw1RUUxNEQyQi1GMTkyLTRCQ0UtQUJEOS1DOUUyQzRGMjNBRTRAbWFjLmNvbT4gPGRlNzBiMzlkMDkxMjIxMTgxNXE2NzgxZGVjN3I1YTlhODM0NTVkMTdiNGM2QG1haWwuZ21haWwuY29tPiA8QzBCNDNBQTctN0FGMS00MDdGLUEyMUUtOTA3RDY1NTIxRkJFQG1hYy5jb20+IDw1ODFiZjYxNjA5MTIyMjA0MDdxNDkxZTZhMzh4MzIxMmFlYWM3ZDg0YmRhZUBtYWlsLmdtYWlsLmNvbT4gPDM5MTVjNjlkMDkxMjIyMTIxM2czOGM2NDhlMndkZDBkODcyZGNiYzAxMzA4QG1haWwuZ21haWwuY29tPg=="},"prevInTopic":14340,"nextInTopic":14364,"prevInTime":14352,"nextInTime":14354,"topicId":14156,"numMessagesInTopic":134,"msgSnippet":"Will, excellent analysis. ... Me neither. But it needs to be clear what the SLA ed contract really is. Take the AtomPub example: RFC 5023 *is* saying that a","rawEmail":"Return-Path: &lt;algermissen1971@...&gt;\r\nX-Sender: algermissen1971@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 60743 invoked from network); 23 Dec 2009 06:46:52 -0000\r\nX-Received: from unknown (66.196.94.105)\n  by m5.grp.sp2.yahoo.com with QMQP; 23 Dec 2009 06:46:52 -0000\r\nX-Received: from unknown (HELO asmtpout016.mac.com) (17.148.16.91)\n  by mta1.grp.re1.yahoo.com with SMTP; 23 Dec 2009 06:46:52 -0000\r\nMIME-version: 1.0\r\nContent-transfer-encoding: 7BIT\r\nContent-type: text/plain; charset=US-ASCII; format=flowed; delsp=yes\r\nX-Received: from [192.168.2.102] ([84.144.114.127])\n by asmtp016.mac.com (Sun Java(tm) System Messaging Server 6.3-8.01 (built Dec\n 16 2008; 32bit)) with ESMTPSA id &lt;0KV3001IVETZLK30@...&gt; for\n rest-discuss@yahoogroups.com; Tue, 22 Dec 2009 22:46:51 -0800 (PST)\r\nCc: Guilherme Silveira &lt;guilherme.silveira@...&gt;,\n Noah Campbell &lt;noahcampbell@...&gt;, Jorn Wildt &lt;jw@...&gt;,\n rest-discuss@yahoogroups.com\r\nMessage-id: &lt;6EE70B52-44E7-4468-99F4-E2A1882D5D02@...&gt;\r\nTo: Will Hartung &lt;willh@...&gt;\r\nIn-reply-to: &lt;3915c69d0912221213g38c648e2wdd0d872dcbc01308@...&gt;\r\nDate: Wed, 23 Dec 2009 07:46:46 +0100\r\nReferences: &lt;hgnpfh+ppfk@...&gt;\n &lt;26DEEAA5-52B2-4C41-9D40-0D716D01F074@...&gt;\n &lt;de70b39d0912211119s188ca8d4s5be4dad0b70e1507@...&gt;\n &lt;EEA84E09-9E47-4127-89D3-0E95D49C2AED@...&gt;\n &lt;de70b39d0912211447t6c3504e7k8a6a02696a2bda10@...&gt;\n &lt;5EE14D2B-F192-4BCE-ABD9-C9E2C4F23AE4@...&gt;\n &lt;de70b39d0912211815q6781dec7r5a9a83455d17b4c6@...&gt;\n &lt;C0B43AA7-7AF1-407F-A21E-907D65521FBE@...&gt;\n &lt;581bf6160912220407q491e6a38x3212aeac7d84bdae@...&gt;\n &lt;3915c69d0912221213g38c648e2wdd0d872dcbc01308@...&gt;\r\nX-Mailer: Apple Mail (2.936)\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Jan Algermissen &lt;algermissen1971@...&gt;\r\nSubject: Re: [rest-discuss] Re: RESTful M2M Systems and Resource Typing\r\nX-Yahoo-Group-Post: member; u=289191104; y=E411DtdnWSNSRtoENji6fBo1m6BU8xf9-4rVya_1sgjYs_Js7lSHhUWC\r\nX-Yahoo-Profile: algermissen1971\r\n\r\nWill,\n\nexcellent analysis.\n\nOn Dec 22, 2009, at 9:13 PM, Will Hartung wrote:\n\n&gt; This thread just exploded and it&#39;s taken until now to catch up.\n&gt;\n&gt; Jan, I don&#39;t see any conflict with having a SLA backing up a REST  \n&gt; interface.\n\nMe neither. But it needs to be clear what the SLA&#39;ed contract really  \nis. Take the AtomPub example: RFC 5023 *is* saying that a GET on a  \ncollection will return a feed. Is that normative? Or just a hint? If  \nit is just a hint, why is it in the spec at all and what is the value  \nof it from the client developer&#39;s POV?\n\nIf you are the service owner, would you put into the SLA a penalty  \npayment of some serious money if your service stops providing an Atom  \nfeed for a GET to a collection? If not, the whole information is  \nmeaningless from a contract POV.\n\n\n&gt;\n&gt; I think that you can make a brittle REST architecture that hits all of\n&gt; the REST bullet points, but inevitably fails to evolve properly.\n&gt;\n&gt; Take for example here, the &quot;apiv2&quot; rel link.\n&gt;\n&gt; The fact that the service authors CHOSE to add an &quot;apiv2&quot; link. They\n&gt; did not HAVE to. They COULD have simply changed the media type, and\n&gt; 406&#39;d the old clients.\n\nMy issue: In a RESTful system, the service authors woule *never* have  \nto make any promise, right?\n\n&gt;\n&gt; Obviously, &quot;suddenly&quot;, all of the old client fail miserably, and are\n&gt; cut off from the service until they upgrade. No backward compatibility\n&gt; here.\n\nYes, And if that happens, a legal department demands a basis for  \nsorting out who violoated which obligation. They have a hard time  \naccepting to build legal contracts on top of &quot;REST style flexibility&quot;.\n\nOTH, as I mentioned before, if the potential failure of the clients  \nwould be officially accepted because the occasional SLA violation  \ncosts less than running a tightly coupled system then it might make  \nsense to CxOs.\n\nWith this approach, RFC 5023 should normatively state that clients can  \nexpect Atom feeds to be returned for GETs on collections and the  \nservice owners would just accept that there is a price to pay should  \nthe service return a 406 instead.\n\n&gt;\n&gt; As for &quot;evolutionary&quot; software, it&#39;s pretty clear that it doesn&#39;t\n&gt; evolve. Rather you have backward compatibility that gives an illusion\n&gt; of evolution. The existing clients aren&#39;t changing, the service is\n&gt; simply being friendly by keeping them in mind and not locking them\n&gt; out.\n&gt;\n&gt; I don&#39;t see any way that REST differs from SOAP, or any other system\n&gt; in this regard. As you&#39;ve observed, compliance and compatibility are\n&gt; hard coded in to the clients and server. If the protocol changes, the\n&gt; clients and servers need to be changed to remain compatible.\n\nMy point is that REST differs from SOAP because this coupling is not  \nbeing made explicit. In SOAP it is explicit because there is a WSDL  \nthat defines an interface that couples tightly. It just known that you  \ncannot remove a method from an OO-style API without breaking your  \nclients. For REST we usually argue that services can freely evolve  \nwithout breaking clients. Which is wrong.\n\n&gt;\n&gt; Versioning and backward compatibility is the key to a robust, evolving\n&gt; infrastructure. I think REST is better for such a system than\n&gt; something like SOAP simply because I think it is easier for a more\n&gt; advanced client to leverage the latest services and APIs, as well as\n&gt; for a server to better maintain compatibility with older clients.\n\nYes, definitely.\n&gt;\n&gt; Both of these are done through extensible types and con neg. As you\n&gt; get more and more servers and clients on different upgrade cycles,\n&gt; this capability become more important. It&#39;s easy to see how you might\n&gt; get consumers using services that you, as the provider, particularly\n&gt; in an &quot;open&quot; enterprise, didn&#39;t even really &quot;know&quot; were being\n&gt; serviced.\n\nYes.\n\n&gt;\n&gt; In the end, though things like typed rels, and online documentation,\n&gt; ideally when something goes wrong, payload inspection will direct the\n&gt; people maintaining the consumers towards what they need to change to\n&gt; become compliant again and able to use the new service.\n\nYes.\n\nI really only tried to say that the clients an in fact break and that  \nit should be understood where and how the contract is established that  \ncauses them to fail. IMHO, current specifications that are not only  \ntargeted at pure human driven consumption (e.g. AtomPub or OpenSearch)  \nare not doing a good job in this regard.\n\n(OpenSearch, for example, states nowhere that Atom or RSS are the  \nformats a client should be able to handle. Yet, this seems to be some  \nsort of common sense. The OSD FAQ page says something like &quot;OpenSearch  \nis a collection of simple formats for the sharing of search  \nresults&quot;[1]. Sure yes, that is all I need to know for build useful  \nstuff. But would you invest a couple of million Dollars into building  \nclients for a service description such as this one? Tomorrow the  \nservice could stop sending both, Atom and RSS and just use something  \nnew and would not be liable for it in any way.)\n\nJan\n\n[1] http://www.opensearch.org/Documentation/Frequently_asked_questions\n\n&gt;\n&gt; Regards,\n&gt;\n&gt; Will Hartung\n&gt; (willh@...)\n\n--------------------------------------\nJan Algermissen\n\nMail: algermissen@...\nBlog: http://algermissen.blogspot.com/\nHome: http://www.jalgermissen.com\n--------------------------------------\n\n\n\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":184610129,"authorName":"Walden Mathews","from":"&quot;Walden Mathews&quot; &lt;walden@...&gt;","profile":"waldenmathews","replyTo":"SENDER","senderId":"XlBr42NT2Aa1846IuBJTXDdmIXMWSZF684P4NKDCBgqWbkKVoYdBOqCuYh4Dw4tXxvu6pOPHNYYR0Z0zLfBBo3w66G6ACCbfos7DEuY","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Design questions for applying REST","postDate":"1087132542","msgId":4459,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDAwZGIwMWM0NTE0OCQ4ODMxNjQ1MCQwOTAyYThjMEBXQUxERU5ERVNLVE9QPg==","referencesHeader":"PEJBWTE2LURBVjYwc0w2N1FsTkQwMDAzNjZmNkBob3RtYWlsLmNvbT4gPDQwQzlCMjI5LjYwMDAxQG5lZ2dpZS5uZXQ+IDxCQVkxNi1EQVYzME9SRlFHd1o0MDAwMzc4M2JAaG90bWFpbC5jb20+IDw0MENBRjkyMC42MDUwMDAyQG5lZ2dpZS5uZXQ+IDxCQVkxNi1EQVY0OGhmQUVuUjlyMDAwMzg3ZWVAaG90bWFpbC5jb20+"},"prevInTopic":4458,"nextInTopic":4460,"prevInTime":4458,"nextInTime":4460,"topicId":4447,"numMessagesInTopic":13,"msgSnippet":"Mike, How about this: 1) POST input documents to a generic resource on the server that is responsible for associating these documents with their final merged","rawEmail":"Return-Path: &lt;walden@...&gt;\r\nX-Sender: walden@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 9409 invoked from network); 13 Jun 2004 13:15:44 -0000\r\nReceived: from unknown (66.218.66.216)\n  by m23.grp.scd.yahoo.com with QMQP; 13 Jun 2004 13:15:44 -0000\r\nReceived: from unknown (HELO c001.snv.cp.net) (209.228.32.139)\n  by mta1.grp.scd.yahoo.com with SMTP; 13 Jun 2004 13:15:44 -0000\r\nReceived: (cpmta 16121 invoked from network); 13 Jun 2004 06:15:39 -0700\r\nReceived: from 69.0.55.142 (HELO WALDENDESKTOP)\n  by smtp.register-admin.com (209.228.32.139) with SMTP; 13 Jun 2004 06:15:39 -0700\r\nX-Sent: 13 Jun 2004 13:15:39 GMT\r\nMessage-ID: &lt;00db01c45148$88316450$0902a8c0@WALDENDESKTOP&gt;\r\nTo: &quot;S. Mike Dierken&quot; &lt;mdierken@...&gt;\r\nCc: &lt;rest-discuss@yahoogroups.com&gt;\r\nReferences: &lt;BAY16-DAV60sL67QlND000366f6@...&gt; &lt;40C9B229.60001@...&gt; &lt;BAY16-DAV30ORFQGwZ40003783b@...&gt; &lt;40CAF920.6050002@...&gt; &lt;BAY16-DAV48hfAEnR9r000387ee@...&gt;\r\nDate: Sun, 13 Jun 2004 09:15:42 -0400\r\nMIME-Version: 1.0\r\nContent-Type: text/plain;\n\tcharset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: 7bit\r\nX-Priority: 3\r\nX-MSMail-Priority: Normal\r\nX-Mailer: Microsoft Outlook Express 6.00.2800.1409\r\nX-MimeOLE: Produced By Microsoft MimeOLE V6.00.2800.1409\r\nX-eGroups-Remote-IP: 209.228.32.139\r\nFrom: &quot;Walden Mathews&quot; &lt;walden@...&gt;\r\nSubject: Re: [rest-discuss] Design questions for applying REST\r\nX-Yahoo-Group-Post: member; u=184610129\r\nX-Yahoo-Profile: waldenmathews\r\n\r\nMike,\n\nHow about this:\n\n1) POST input documents to a generic resource on the server\nthat is responsible for associating these documents with their final\nmerged counterpart, creating the latter when appropriate.  You\ncan let this return the Location of the newly created input document\non the server, or not.  In response to this POST, always return\nthe URI of the merged document, minimally.\n\n2) design the merged document such that it contains, directly\nor indirectly, an index to the input documents from which it has\nbeen composed.  In other words, there may be yet another resource\nsubordinate to each merged document whose only function is to\nbe an index of inputs.  This is a list of URI at which the original\ninput documents are available verbatim for GET, PUT and DELETE.\n\n3) Subsequent PUT or DELETE on the input doc URIs for a\ngiven merge document have the expected verbatim effects on\nthose resources, plus some interesting side effects on the merge\ndocument, but with the constraint that even those effects are\nidempotent.  That is, if the client decides to change the content of\n/input1 via a PUT, the server incorporates that change into the\nmerged document in a consistent and idempotent manner.\n\nAnything?\n\nIn the original, you said:\n\n&quot;The submitted documents have their own identifiers (owned by the client)&quot;\n\nDoes this mean that they are already hosted elsewhere?  If so are\nyou considering approaches in which they are not dually hosted\non your server?\n\nWalden\n\n\n----- Original Message ----- \nFrom: &quot;S. Mike Dierken&quot; &lt;mdierken@...&gt;\nTo: &quot;John Belmonte&quot; &lt;john@...&gt;\nCc: &lt;rest-discuss@yahoogroups.com&gt;\nSent: Sunday, June 13, 2004 1:24 AM\nSubject: Re: [rest-discuss] Design questions for applying REST\n\n\n:\n: &gt; &gt; I also think that HTTP indicates that part of a server&#39;s job for\n: handling\n: &gt; &gt; PUT is for the client to be able to specify the URI.\n: &gt;\n: &gt; I&#39;m not sure what your meaning is in that second sentence.\n: I was just mentioning that it&#39;s a common pattern for a client to &#39;own&#39; the\n: resource identifier and that HTTP supports this approach. It seems to fit\n: well with my design problem.\n:\n:\n: &gt;\n: &gt; &gt;&gt;In any case, you can make this plan more robust as follows: when the\n: &gt; &gt;&gt;server creates a record for a new document, also store the digest of\nthe\n: &gt; &gt;&gt;request that caused it.  Then, if it receives a duplicate request from\n: &gt; &gt;&gt;the client, ignore it and return the exiting resource location.\n: &gt; &gt;\n: &gt; &gt; I&#39;m not really worried about duplicate requests - the behavior would\nbe\n: to\n: &gt; &gt; determine if the submitted content already had been submitted before.\n: Either\n: &gt; &gt; via the URI having the client-managed identifier or having the content\n: &gt; &gt; contain the client-managed identifier.\n: &gt;\n: &gt; That&#39;s surprising to me.  From your original post, case c:\n: &gt;\n: &gt;     - requests can be safely re-tried. Bonus.\n: &gt;\n: &gt;  From what I gathered, you hadn&#39;t considered that this could be covered\nin\n: case b also.\n: Sorry - I meant that I wasn&#39;t worried how it would be implemented. I know\n: that POST /might/ be implemented in an idempotent manner, but the bonus is\n: that PUT /requires/ it - a client does not need extra &#39;coordination&#39;\n: (pre-arranged commitment from the service author) to re-try a request.\n:\n:\n: &gt;\n: &gt; &gt;&gt;Also, assuming that input documents are not shared, the server could\n: &gt; &gt;&gt;provide a query function that returns the output resource given an\ninput\n: &gt; &gt;&gt;resource URL.\n: &gt; &gt;\n: &gt; &gt; What would that look like? It&#39;d be a compound URI, right? Whatever it\n: would\n: &gt; &gt; look like, I hadn&#39;t considered two resources - one for the stored\ninput\n: &gt; &gt; document and one with references to the synthesized output document,\nbut\n: in\n: &gt; &gt; order to know about this second resource either the client generates\n: that\n: &gt; &gt; resource identifier or that identifer is contained in a representation\n: of\n: &gt; &gt; the stored input document - and I might as well point to the\nsynthesized\n: &gt; &gt; output document directly.\n: &gt;\n: &gt; I&#39;m not sure where your concern comes from, as this is exactly what\n: &gt; queries are for.  For example:\n: &gt;\n: &gt;    GET /myapp/outputs?input=/myapp/inputs/a98a6799 HTTP/1.1\n: &gt;    Host: example.net\n: &gt;\n: &gt;    HTTP/1.1 302 Found\n: &gt;    Location: http://example.net/myapp/outputs/14f322410\n: &gt;\n: &gt; This is exactly the same as going to &lt;http://example.net/myapp/outputs&gt;,\n: &gt; entering &quot;/myapp/inputs/a98a6799&quot; in the &quot;input&quot; field of a form, and\n: &gt; being automatically redirected to\n: &gt; &lt;http://example.net/myapp/outputs/14f322410&gt;.\n: &gt;\n: &gt; -John\n: I think there is something good in this, but I still need to see how it\n: would work in my system - I have a feeling that there is a disconnect\n: somewhere in our discussion (probably me). (Also, using a URI in a query\n: term probably has text encoding issues, like if the first URI already has\n: query terms in it).\n:\n: ==========\n: Using option b (POST-based)\n: In this use case, uri_0 is a service meta-description, uri_1 is the\n: &#39;container&#39; resource that accepts input documents, uri_2 is the newly\n: created input document, uri_3 is the resource that holds a mapping between\n: the input document and the &#39;merged&#39; document and uri_4 is the final\n&#39;merged&#39;\n: document.\n:\n: --- request 1: create new input document, another &#39;merged&#39; document is\n: updated from this input document as well ---\n:   POST uri_1 HTTP/1.1\n:   Content-type: text/xml\n:   ...stuff...\n:\n:  HTTP/1.1 201 Created\n:  Location: uri_2\n:\n: --- request 2: get service meta-description (this is of course done\nearlier\n: & cached) ---\n:   GET uri_0 HTTP/1.1\n:   Accept: text/xml\n:\n:   HTTP/1.1 200 OK\n:   Content-type: text/xml\n:   ...description of how to generate resource identifiers...\n:\n: (process service description to generate resource identifier - basically\n: uri_3 would have uri_2 (or something equivalent) in it.\n: I realize now what my mistake was - I assumed the client had enough\n: information to map to the final merged document - which isn&#39;t possible.)\n:\n: --- request 3: use generated resource identifier of resource that provides\n: the mapping to final &#39;merged&#39; document ---\n:   GET uri_3 HTTP/1.1\n:   Accept: text/xml\n:\n:   HTTP/1.1 303 See Other\n:   Location: uri_4\n:\n:\n: (You might be able to avoid the mapping step by using PUT and having the\n: first request return the location of the &#39;merged&#39; document in the Location\n: header. Not sure if that is acceptable or not.)\n:\n:\n:\n:\n: Yahoo! Groups Links\n:\n:\n:\n:\n:\n:\n:\n: __________ NOD32 1.787 (20040612) Information __________\n:\n: This message was checked by NOD32 antivirus system.\n: http://www.nod32.com\n:\n:\n\n\n"}}
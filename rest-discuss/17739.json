{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":352334505,"authorName":"Craig McClanahan","from":"Craig McClanahan &lt;craigmcc@...&gt;","profile":"craig_mcclanahan","replyTo":"SENDER","senderId":"gJIDLxb1ZY-51xP8xtThU874X7sH9k2DBlMDkx6ABZo6BeghsCawe_6pgEZqMxHar5VZOFgGeS5Opb3i8CoQ6-3IdGjXC7n1Ool2Ag","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] User dependent Resources","postDate":"1315327210","msgId":17739,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PENBTmdrbUxCWmNPWk1jNlNneVVzb2ZBaEdBdllIcHhZOGljbXYwK0dyVmM5RXB3TjFIUUBtYWlsLmdtYWlsLmNvbT4=","inReplyToHeader":"PENBQjIzK2l3c0NhOV9qeHc2UE9PT0xNUXFwWXlVVGhLUjExVjdZMkxGdnJqWHlVcEZiQUBtYWlsLmdtYWlsLmNvbT4=","referencesHeader":"PGo0MGs4bitodDNvQGVHcm91cHMuY29tPgk8Q0FCMjMraXdzQ2E5X2p4dzZQT09PTE1RcXBZeVVUaEtSMTFWN1kyTEZ2cmpYeVVwRmJBQG1haWwuZ21haWwuY29tPg=="},"prevInTopic":17737,"nextInTopic":0,"prevInTime":17738,"nextInTime":17740,"topicId":17713,"numMessagesInTopic":3,"msgSnippet":"... Authorization and resource discovery are two separate concerns. Because REST interactions are supposed to be stateless, you ll need a mechanism that","rawEmail":"Return-Path: &lt;craigmcc@...&gt;\r\nX-Sender: craigmcc@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 82524 invoked from network); 6 Sep 2011 16:40:36 -0000\r\nX-Received: from unknown (98.137.34.46)\n  by m1.grp.sp2.yahoo.com with QMQP; 6 Sep 2011 16:40:36 -0000\r\nX-Received: from unknown (HELO mail-wy0-f169.google.com) (74.125.82.169)\n  by mta3.grp.sp2.yahoo.com with SMTP; 6 Sep 2011 16:40:36 -0000\r\nX-Received: by wyi11 with SMTP id 11so6070455wyi.14\n        for &lt;rest-discuss@yahoogroups.com&gt;; Tue, 06 Sep 2011 09:40:35 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.216.181.3 with SMTP id k3mr2383398wem.87.1315327210598; Tue,\n 06 Sep 2011 09:40:10 -0700 (PDT)\r\nX-Received: by 10.216.5.11 with HTTP; Tue, 6 Sep 2011 09:40:10 -0700 (PDT)\r\nIn-Reply-To: &lt;CAB23+iwsCa9_jxw6POOOLMQqpYyUThKR11V7Y2LFvrjXyUpFbA@...&gt;\r\nReferences: &lt;j40k8n+ht3o@...&gt;\n\t&lt;CAB23+iwsCa9_jxw6POOOLMQqpYyUThKR11V7Y2LFvrjXyUpFbA@...&gt;\r\nDate: Tue, 6 Sep 2011 09:40:10 -0700\r\nMessage-ID: &lt;CANgkmLBZcOZMc6SgyUsofAhGAvYHpxY8icmv0+GrVc9EpwN1HQ@...&gt;\r\nTo: Jim Purbrick &lt;jimpurbrick@...&gt;\r\nCc: bryan_w_taylor &lt;bryan_w_taylor@...&gt;, rest-discuss@yahoogroups.com\r\nContent-Type: multipart/alternative; boundary=0016364ee95a26b1fe04ac487b1c\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Craig McClanahan &lt;craigmcc@...&gt;\r\nReply-To: craigmcc@...\r\nSubject: Re: [rest-discuss] User dependent Resources\r\nX-Yahoo-Group-Post: member; u=352334505; y=G946OmOZgDEZETvHE_HQuxlN6IzOp_kOGossgMwcOHNknYZZUqHMDlr-gA\r\nX-Yahoo-Profile: craig_mcclanahan\r\n\r\n\r\n--0016364ee95a26b1fe04ac487b1c\r\nContent-Type: text/plain; charset=windows-1252\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nOn Tue, Sep 6, 2011 at 6:35 AM, Jim Purbrick &lt;jimpurbrick@...&gt; wrote:=\r\n\n\n&gt; **\n&gt;\n&gt;\n&gt; We&#39;re hoping to solve this bootstrapping problem by returning =\r\ninitial URIs\n&gt; for &quot;my stuff&quot; during authentication.\n&gt;\n&gt; So, you get &quot;authe=\r\nnticated-as&quot;: &quot;http://someservice.com/users/42/&quot; back\n&gt; when authenticating=\r\n and then the &quot;/users/42/&quot; resource is just a normal\n&gt; RESTful resource con=\r\nnected to everything else it&#39;s related to via\n&gt; hyperlinks.\n&gt;\n&gt; Hopefully t=\r\nhis will be the only place in the API where responses vary based\n&gt; on who&#39;s=\r\n asking and everything else will be a web of RESTful resources that\n&gt; are t=\r\nhe same regardless of who&#39;s asking and so highly cachable.\n&gt;\n&gt; Cheers,\n&gt;\n&gt; =\r\nJim\n&gt;\n&gt;\nAuthorization and resource discovery are two separate concerns.\n\nBe=\r\ncause REST interactions are supposed to be stateless, you&#39;ll need a\nmechani=\r\nsm that validates *every* request, not just the &quot;first&quot; one.  Lots of\nservi=\r\nces I&#39;ve seen use HTTP Basic for that (and run across SSL to avoid the\npass=\r\nword being visible to snoopers).  Other options include an API key that\nhas=\r\n to be included in every request (although this is often used just to\ngrant=\r\n permission to use the service, not identify a particular user), or\nmore in=\r\nvolved authentication strategies like OpenID or OAuth.  You use\nOAuth, for =\r\nexample, to interact with APIs to Facebook, SalesForce.Com, and\nLinkedIn.\n\n=\r\nYour &quot;return the http://someservice.com/users/42 resource&quot; would be the\nrig=\r\nht answer if the caller requested that URI, but not if they requested,\nsay =\r\n&quot;http://somservice.com/customers/123&quot;.  In the latter case, they should\nget=\r\n what they asked for (if authorized and allowed to see it), a 403 (if\nautho=\r\nrized and not allowed to see it), or a 401 (if not authorized).\n\nA strategy=\r\n I like for resource discovery is to have the very top resource in\nthe URI =\r\nspace (http://someservice.com/&quot;) serve that purpose.  I have found\nthis to =\r\nbe the simplest to explain to potential client developers, and it\nmakes int=\r\nuitive sense that this is the &quot;front door&quot; (so to speak) to the\nentire serv=\r\nice.  SalesForce in particular employs a variant of this strategy\nthat is a=\r\nlso helpful for long term use -- part of their discovery resource\nis the su=\r\npported versions of the API itself (with possibly different URIs\nfor each),=\r\n so a client can program against a particular version of the API\nwithout kn=\r\nowing ahead of time what the version&#39;s base URI will be, but\nknowing that t=\r\nhey can find this out from the discovery resource (and cache\nit for some re=\r\nasonable amount of time).\n\nCraig McClanahan\n\n&gt; \n&gt;\n\r\n--0016364ee95a26b1fe04ac487b1c\r\nContent-Type: text/html; charset=windows-1252\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;div class=3D&quot;gmail_quote&quot;&gt;On Tue, Sep 6, 2011 at 6:35 AM, Jim Purbrick &lt;sp=\r\nan dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:jimpurbrick@...&quot;&gt;jimpurbrick@gma=\r\nil.com&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;=\r\nmargin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex;&quot;&gt;\n\n\n\n&lt;u&gt;&lt;/u&gt;=\r\n\n\n\n\n\n\n\n\n\n\n\n&lt;div style=3D&quot;background-color:#fff&quot;&gt;\n&lt;span&gt;=A0&lt;/span&gt;\n\n\n&lt;div&gt;\n =\r\n &lt;div&gt;\n\n\n    &lt;div&gt;\n      \n      \n      &lt;p&gt;We&#39;re hoping to solve this bo=\r\notstrapping problem by returning initial URIs for &quot;my stuff&quot; duri=\r\nng authentication.&lt;/p&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;So, you get &quot;authenticated-a=\r\ns&quot;: &quot;&lt;a href=3D&quot;http://someservice.com/users/42/&quot; target=3D&quot;_blan=\r\nk&quot;&gt;http://someservice.com/users/42/&lt;/a&gt;&quot; back when authenticating and =\r\nthen the &quot;/users/42/&quot; resource is just a normal RESTful resource =\r\nconnected to everything else it&#39;s related to via hyperlinks.&lt;/div&gt;\n\n&lt;di=\r\nv&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Hopefully this will be the only place in the API where res=\r\nponses vary based on who&#39;s asking and everything else will be a web of =\r\nRESTful resources that are the same regardless of who&#39;s asking and so h=\r\nighly cachable.&lt;/div&gt;\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Cheers,&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div=\r\n&gt;Jim&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n    &lt;/div&gt;\n     \n\n    \n    &lt;div style=3D&quot;color:#fff;min=\r\n-height:0&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Authori=\r\nzation and resource discovery are two separate concerns.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/di=\r\nv&gt;&lt;div&gt;Because REST interactions are supposed to be stateless, you&#39;ll n=\r\need a mechanism that validates &lt;b&gt;every&lt;/b&gt;=A0request, not just the &quot;f=\r\nirst&quot; one. =A0Lots of services I&#39;ve seen use HTTP Basic for that (=\r\nand run across SSL to avoid the password being visible to snoopers). =A0Oth=\r\ner options include an API key that has to be included in every request (alt=\r\nhough this is often used just to grant permission to use the service, not i=\r\ndentify a particular user), or more involved authentication strategies like=\r\n OpenID or OAuth. =A0You use OAuth, for example, to interact with APIs to F=\r\nacebook, SalesForce.Com, and LinkedIn.&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Your &quot=\r\n;return the &lt;a href=3D&quot;http://someservice.com/users/42&quot;&gt;http://someservice.=\r\ncom/users/42&lt;/a&gt; resource&quot; would be the right answer if the caller req=\r\nuested that URI, but not if they requested, say &quot;&lt;a href=3D&quot;http://som=\r\nservice.com/customers/123&quot;&gt;http://somservice.com/customers/123&lt;/a&gt;&quot;. =\r\n=A0In the latter case, they should get what they asked for (if authorized a=\r\nnd allowed to see it), a 403 (if authorized and not allowed to see it), or =\r\na 401 (if not authorized).&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;A strategy I like for =\r\nresource discovery is to have the very top resource in the URI space (&lt;a hr=\r\nef=3D&quot;http://someservice.com/&quot;&gt;http://someservice.com/&lt;/a&gt;&quot;) serve tha=\r\nt purpose. =A0I have found this to be the simplest to explain to potential =\r\nclient developers, and it makes intuitive sense that this is the &quot;fron=\r\nt door&quot; (so to speak) to the entire service. =A0SalesForce in particul=\r\nar employs a variant of this strategy that is also helpful for long term us=\r\ne -- part of their discovery resource is the supported versions of the API =\r\nitself (with possibly different URIs for each), so a client can program aga=\r\ninst a particular version of the API without knowing ahead of time what the=\r\n version&#39;s base URI will be, but knowing that they can find this out fr=\r\nom the discovery resource (and cache it for some reasonable amount of time)=\r\n.&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Craig McClanahan&lt;/div&gt;&lt;blockquote class=3D&quot;gmai=\r\nl_quote&quot; style=3D&quot;margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left=\r\n:1ex;&quot;&gt;&lt;div style=3D&quot;background-color:#fff&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;div style=3D&quot;color:#=\r\nfff;min-height:0&quot;&gt;\n&lt;/div&gt;\n\n\n&lt;/div&gt;\n\n\n\n  \n\n\n\n\n\n\n&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;\n\r\n--0016364ee95a26b1fe04ac487b1c--\r\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":344081753,"authorName":"Erling Wegger Linde","from":"&quot;Erling Wegger Linde&quot; &lt;erlingwl@...&gt;","profile":"erlingwl","replyTo":"SENDER","senderId":"pGcZ6-gFH-NX_FQhFGrVjQdDE5gkEMerpnkSurse4j0_zm1hu1FFl1jqFLqobyLOp-PpxV9uuHPR9ZvnWey2qQsJ8SmSl7wA6_u2nkcYWc0m","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Re: Stack operations using Rest","postDate":"1212058071","msgId":10844,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDlmMDU3ODI5MDgwNTI5MDM0N3Q3NzM3ZDYzZXIxZWJlODM0MzYxMWI3MjQ3QG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PDIwMDgwNTI3MTEzNDIwLkdBMTUxMTlAa2xhbmdyYXVtLnBsYXNtYXN0dXJtLm9yZz4=","referencesHeader":"PGcwcThxbSttNzZrQGVHcm91cHMuY29tPgkgPDIwMDgwNTI3MTEzNDIwLkdBMTUxMTlAa2xhbmdyYXVtLnBsYXNtYXN0dXJtLm9yZz4="},"prevInTopic":10832,"nextInTopic":10858,"prevInTime":10843,"nextInTime":10845,"topicId":10795,"numMessagesInTopic":17,"msgSnippet":"This might be a bit off topic, but here s how GDATA has implemented optimistic concurrency: ","rawEmail":"Return-Path: &lt;erlingwl@...&gt;\r\nX-Sender: erlingwl@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 34642 invoked from network); 29 May 2008 10:47:52 -0000\r\nX-Received: from unknown (66.218.67.95)\n  by m36.grp.scd.yahoo.com with QMQP; 29 May 2008 10:47:52 -0000\r\nX-Received: from unknown (HELO yw-out-1718.google.com) (74.125.46.156)\n  by mta16.grp.scd.yahoo.com with SMTP; 29 May 2008 10:47:52 -0000\r\nX-Received: by yw-out-1718.google.com with SMTP id 5so1780255ywr.40\n        for &lt;rest-discuss@yahoogroups.com&gt;; Thu, 29 May 2008 03:47:51 -0700 (PDT)\r\nX-Received: by 10.150.217.18 with SMTP id p18mr7267864ybg.67.1212058071555;\n        Thu, 29 May 2008 03:47:51 -0700 (PDT)\r\nX-Received: by 10.151.6.16 with HTTP; Thu, 29 May 2008 03:47:51 -0700 (PDT)\r\nMessage-ID: &lt;9f0578290805290347t7737d63er1ebe8343611b7247@...&gt;\r\nDate: Thu, 29 May 2008 12:47:51 +0200\r\nTo: rest-discuss@yahoogroups.com\r\nIn-Reply-To: &lt;20080527113420.GA15119@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=WINDOWS-1252\r\nContent-Transfer-Encoding: quoted-printable\r\nContent-Disposition: inline\r\nReferences: &lt;g0q8qm+m76k@...&gt;\n\t &lt;20080527113420.GA15119@...&gt;\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Erling Wegger Linde&quot; &lt;erlingwl@...&gt;\r\nSubject: Re: [rest-discuss] Re: Stack operations using Rest\r\nX-Yahoo-Group-Post: member; u=344081753; y=XjxjzZI1fvRUMCXEsy2cFbTkS6Fw4JxhZIMMp5Yv6PK7pWE\r\nX-Yahoo-Profile: erlingwl\r\n\r\nThis might be a bit off topic, but here&#39;s how GDATA has implemented\noptimis=\r\ntic concurrency:\nhttp://code.google.com/apis/gdata/reference.html#Optimisti=\r\nc-concurrency\n\nI think that fits well with Aristotle&#39;s suggestion (which is=\r\n even more generic):\n\nGET /queue/top` --&gt; `303 See Other /queue/15`\n\nDELETE=\r\n /queue/15` --&gt; `204 No Content`\n\n- Erling\n\nOn Tue, May 27, 2008 at 1:34 PM=\r\n, Aristotle Pagaltzis &lt;pagaltzis@...&gt; wrote:\n&gt; * akleak &lt;andy@...&gt; =\r\n[2008-05-20 06:55]:\n&gt;\n&gt;&gt; I would like to provide a REST interface to some S=\r\ntack (Lifo)\n&gt;&gt; collections on my system.\n&gt;&gt;\n&gt;&gt; Here is my idea for a restfu=\r\nl STACK interface:\n&gt;&gt;\n&gt;&gt; &gt;Push (add an item to the top of the stack)\n&gt;&gt; POS=\r\nT /queue (action:create, controller: stack)\n&gt;&gt;\n&gt;&gt; &gt; Pop (read the top item,=\r\n then destroy it)\n&gt;&gt; GET /queue/top (action:read, controller: stack)\n&gt;&gt; DEL=\r\n /queue/top (action:delete, controller: stack)\n&gt;&gt;\n&gt;&gt; What is the best way t=\r\no implement this?? Any feedback welcome.\n&gt;\n&gt; There&#39;s be a container resourc=\r\ne, a pointer to the top of the\n&gt; stack, and individual elements, as outline=\r\nd. For the purposes of\n&gt; illustration let&#39;s assume we put the container at =\r\n`/stack`, the\n&gt; pointer to top of stack at `/stack/top`, and elements at\n&gt; =\r\n`/stack/{num}`, where `num` increases monotonically in the\n&gt; interest of id=\r\nempotency (ie. no two elements are ever assigned\n&gt; the same number).\n&gt;\n&gt; `G=\r\nET /stack` --&gt; `200 OK`, Content:\n&gt;\n&gt; &lt;stack top=3D&quot;/stack/top&quot; self=3D&quot;/st=\r\nack&quot;&gt;\n&gt; &lt;elt pos=3D&quot;0&quot; href=3D&quot;/stack/10&quot;/&gt; &lt;!-- top of stack --&gt;\n&gt; &lt;elt po=\r\ns=3D&quot;1&quot; href=3D&quot;/stack/8&quot;/&gt;\n&gt; &lt;elt pos=3D&quot;2&quot; href=3D&quot;/stack/7&quot;/&gt;\n&gt; &lt;/stack&gt;=\r\n\n&gt;\n&gt; Interesting, so let&#39;s see.\n&gt;\n&gt; `GET /queue/top` --&gt; `303 See Other /qu=\r\neue/10`\n&gt;\n&gt; Aha; well, we knew what the top of stack is.\n&gt;\n&gt; `POST /queue` =\r\n--&gt; `201 Created /queue/15`\n&gt;\n&gt; OK, fine.\n&gt;\n&gt; `GET /queue/top` --&gt; `303 See=\r\n Other /queue/15`\n&gt;\n&gt; Yeap, as expected.\n&gt;\n&gt; `DELETE /queue/15` --&gt; `204 No=\r\n Content`\n&gt;\n&gt; Hm, so I can delete any element I want? Isn&#39;t this a stack?\n&gt;=\r\n\n&gt; `DELETE /queue/7` --&gt; `409 Conflict`\n&gt;\n&gt; Oh; no I can&#39;t. It&#39;s a stack, a=\r\nnd deleting elements from\n&gt; elsewhere than the top would conflict with the =\r\nstate of the\n&gt; system.\n&gt;\n&gt; `DELETE /queue/top` --&gt; `403 Forbidden`\n&gt;\n&gt; So I=\r\n can&#39;t delete the top-of-stack pointer. Handling this request\n&gt; in this fas=\r\nhion is actually important. Making it respond 2xx, but\n&gt; actually deleting =\r\na resource *other* than `/stack/top` *but not*\n&gt; `/stack/top` itself is bro=\r\nken. (It would be fine to delete\n&gt; another resource *and* `/stack/top`, how=\r\never.) It violates the\n&gt; semantics of `DELETE`. This means that intermediar=\r\nies, f.ex.,\n&gt; which do not know the particulars of the stack protocol after=\r\n\n&gt; all, will get the wrong impression about what actually happened.\n&gt; Don&#39;t=\r\n do that.\n&gt;\n&gt; In any case the most important part here is actually the desi=\r\ngn\n&gt; of the resource you `GET` from `/stack`: that is where the\n&gt; hypermedi=\r\na happens. Hypermedia is the cornerstone of REST: the\n&gt; format design needs=\r\n to make all parts of the service explicit via\n&gt; links. The URI design part=\r\niculars are actually irrelevant; what\n&gt; matters is where in the document th=\r\ne link is found. This is the\n&gt; basis for how to communicate to the client h=\r\now it can interact\n&gt; with resources linked by `elt` elements as opposed to =\r\nthe one\n&gt; linked by the `top` attribute as opposed to the one linked by the=\r\n\n&gt; `self` attribute. Given a spec of these semantics, every link\n&gt; could po=\r\nint to a completely different host, each with a\n&gt; completely different URI =\r\nstructure =96 and as long as that\n&gt; conglomerate adhered to the semantics p=\r\nromised to clients by the\n&gt; specification of the stack document format, to =\r\nthe client it\n&gt; would all look just the same.\n&gt;\n&gt; This means, f.ex., that t=\r\nhe client actually knew ahead of time\n&gt; that it couldn&#39;t successfully `DELE=\r\nTE /stack/7`, because there is\n&gt; no other conclusion to draw from the given=\r\n document based on the\n&gt; semantics of the format.\n&gt;\n&gt; REST is hypermedia. U=\r\nRI design is orthogonal to hypermedia.\n&gt; Therefore, URI design is not part =\r\nof REST (although it&#39;s\n&gt; undeniably a good thing; it&#39;s just good because of=\r\n reasons\n&gt; other than REST).\n&gt;\n&gt; Regards,\n&gt; --\n&gt; Aristotle Pagaltzis // &lt;ht=\r\ntp://plasmasturm.org/&gt;\n&gt; \n\n\n\n-- \nMed vennlig hilsen\nErling Wegger Linde\n\n"}}
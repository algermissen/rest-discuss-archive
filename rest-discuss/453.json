{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":63473576,"authorName":"Lucas Gonze","from":"&quot;Lucas Gonze&quot; &lt;lucas@...&gt;","profile":"lucas_gonze","replyTo":"SENDER","senderId":"ZX_rzJnwct8tI6tGfeLA3b9hBttIrft8wgGuTUvWQUteR3JOpFtRLL_omubFOUbU0zCfRahGATBVk1WyEuwu6BdfrMcPqA","spamInfo":{"isSpam":false,"reason":"0"},"subject":"idempotent notifications","postDate":"1012360069","msgId":453,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PE5FQkJKSUhNTUxLSEVPUE5PR0hETUVBR0ZLQUEubHVjYXNAZ29uemUuY29tPg=="},"prevInTopic":0,"nextInTopic":459,"prevInTime":452,"nextInTime":454,"topicId":453,"numMessagesInTopic":36,"msgSnippet":"In my recent post on a quasi-protocol named Paranoid Sink Protocol, I articulated a design for secure callbacks based on the HTTP 0.9 protocol.  A part of that","rawEmail":"Return-Path: &lt;lucas@...&gt;\r\nX-Sender: lucas@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_0_1_3); 30 Jan 2002 03:08:52 -0000\r\nReceived: (qmail 90383 invoked from network); 30 Jan 2002 03:08:51 -0000\r\nReceived: from unknown (216.115.97.167)\n  by m4.grp.snv.yahoo.com with QMQP; 30 Jan 2002 03:08:51 -0000\r\nReceived: from unknown (HELO mail3.panix.com) (166.84.0.167)\n  by mta1.grp.snv.yahoo.com with SMTP; 30 Jan 2002 03:08:51 -0000\r\nReceived: from mailspool1.panix.com (mailspool1.panix.com [166.84.0.210])\n\tby mail3.panix.com (Postfix) with ESMTP id 77C4298356\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Tue, 29 Jan 2002 22:08:50 -0500 (EST)\r\nReceived: from lucas (159-98.nyc.dsl.access.net [166.84.159.98])\n\tby mailspool1.panix.com (Postfix) with SMTP id 0F01C12E41\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Tue, 29 Jan 2002 22:08:45 -0500 (EST)\r\nTo: &quot;Rest-Discuss&quot; &lt;rest-discuss@yahoogroups.com&gt;\r\nSubject: idempotent notifications\r\nDate: Tue, 29 Jan 2002 22:07:49 -0500\r\nMessage-ID: &lt;NEBBJIHMMLKHEOPNOGHDMEAGFKAA.lucas@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain;\n\tcharset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: 7bit\r\nX-Priority: 3 (Normal)\r\nX-MSMail-Priority: Normal\r\nX-Mailer: Microsoft Outlook IMO, Build 9.0.2416 (9.0.2910.0)\r\nX-MIMEOLE: Produced By Microsoft MimeOLE V5.00.2919.6600\r\nImportance: Normal\r\nFrom: &quot;Lucas Gonze&quot; &lt;lucas@...&gt;\r\nX-Yahoo-Group-Post: member; u=63473576\r\nX-Yahoo-Profile: lucas_gonze\r\n\r\n\nIn my recent post on a quasi-protocol named Paranoid Sink Protocol, I\narticulated a design for secure callbacks based on the HTTP 0.9 protocol.  A\npart of that design that has stuck in my mind is the idea that callbacks would\nbe idempotent.  This message articulates related thoughts.\n\nOther recent related conversations in rest-discuss, e.g. my own aREST document\nand Paul Prescod&#39;s HTTP Notifications document, built event notifications using\nthe POST method.  POST was necessary because the event notifications contained\nthe content of the event.  The sink was expected to store the new content, and\nif the sink stores incoming data then the sink state has changed.\n\nIn my PSP post I articulated a different type of event notification.  This event\nnotification is nothing but a notification that state had changed; the\nnotification does not contain any information about the new state.  If the sink\nwants a detailed update it has to perform a follow-up request.\n\nThis approach has the useful feature that notifications from source to sink are\nidempotent, because any N notifications where N &gt; 1 have the same effect on\nstate at the sink.  Because it is idempotent it may use the GET method.\n\nConstrast a GET notification to a POST notification.  The POST notification\nneeds to say what about the state changed.  This opens the pandora&#39;s box of\nversion control.   Groove takes this approach -- a steady stream of state change\nmessages that include information to reconstruct the new state.  And Paul&#39;s\nproposal also used it, in that it included modifiers to describe a number of\ntypes of state changes, each of which needed to be combined with the\nnotification payload and the existing copy of the state to create an up to date\ncopy.  A POST message is not only a notification, it is also an update.\n\nIdempotent notifications leave all such issues to ride over the top, as\napplication issues.  This has the primary advantage of better separation between\ninfrastructure and application and the secondary advantages of simpler\nimplementation and greater security.  If there is no need to handle conflict\nresolution at the notification level, notification can be one specialist part of\nthe web infrastructure and version control another.  If a badly administered\nlocal web server doesn&#39;t have to expose non-idempotent APIs, it has better\nsecurity.\n\nEverything has it&#39;s place, and clearly there are advantages to non-idempotent\nnotifications.  Idempotent notifications do not allow a sink to know about\nstates that happen between the time the event is emitted and the time the\nfollow-up request from the sink is received.  Only non-idempotent notifications\nallow a sink the keep track of all changes.  Applications for which every tick\ncounts, like scientific applications that need extremely fine grained data\npoints, have to have non-idempotent notifications.  Real time stock data is\ninvariably transmitted as a stream of states, not a stream of notifications.\n(Are there other applications that have to have non-idempotent notifications?\nDon&#39;t know.)  But I wouldn&#39;t call these notifications, I would call them push\nupdates.  So POST implies updates, while GET implies notifications.\n\n- Lucas\n\n\n"}}
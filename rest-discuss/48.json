{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":0,"authorName":"Mark Baker","from":"Mark Baker &lt;distobj@...&gt;","replyTo":"SENDER","senderId":"aeaV3cx3B1bQH3m27jflIsjygQKNbmPqDo6UgzPKMyq1hBRtTolc710yOSX1jMo0mOJPw_Xjjm3R9n2lgB9VzKCCYg","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] asynch","postDate":"1011303272","msgId":48,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMDIwMTE3MjEzNC5RQUExODQzNkBtYXJrYmFrZXIuY2E+","inReplyToHeader":"PE5FQkJKSUhNTUxLSEVPUE5PR0hETUVOQkZIQUEubHVjYXNAZ29uemUuY29tPiBmcm9tICJMdWNhcyBHb256ZSIgYXQgSmFuIDE3LCAyMDAyIDEwOjE5OjAxIEFN"},"prevInTopic":47,"nextInTopic":56,"prevInTime":47,"nextInTime":49,"topicId":13,"numMessagesInTopic":36,"msgSnippet":"... True, but I don t say *who* has to receive it! ... Then let the recipient have a proxy that queues up these requests. ... Ok. ... Right.  See above. ... ","rawEmail":"Return-Path: &lt;mark.baker@...&gt;\r\nX-Sender: mark.baker@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_0_1_3); 17 Jan 2002 21:33:19 -0000\r\nReceived: (qmail 28579 invoked from network); 17 Jan 2002 21:33:18 -0000\r\nReceived: from unknown (216.115.97.172)\n  by m2.grp.snv.yahoo.com with QMQP; 17 Jan 2002 21:33:18 -0000\r\nReceived: from unknown (HELO markbaker.ca) (207.236.3.141)\n  by mta2.grp.snv.yahoo.com with SMTP; 17 Jan 2002 21:33:18 -0000\r\nReceived: (from mbaker@localhost)\n\tby markbaker.ca (8.9.3/8.8.7) id QAA18436;\n\tThu, 17 Jan 2002 16:34:33 -0500\r\nMessage-Id: &lt;200201172134.QAA18436@...&gt;\r\nSubject: Re: [rest-discuss] asynch\r\nTo: lucas@... (Lucas Gonze)\r\nDate: Thu, 17 Jan 2002 16:34:32 -0500 (EST)\r\nCc: rest-discuss@yahoogroups.com\r\nIn-Reply-To: &lt;NEBBJIHMMLKHEOPNOGHDMENBFHAA.lucas@...&gt; from &quot;Lucas Gonze&quot; at Jan 17, 2002 10:19:01 AM\r\nX-Mailer: ELM [version 2.5 PL3]\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=us-ascii\r\nContent-Transfer-Encoding: 7bit\r\nFrom: Mark Baker &lt;distobj@...&gt;\r\nX-Yahoo-Group-Post: public\r\n\r\n&gt; Mark,\n&gt; \n&gt; Something like WATCH is definately part of the solution!  But it is only part of\n&gt; the solution -- there is much new code to be written to make it work.  For\n&gt; example,\n&gt; \n&gt; &gt; WATCH http://www.yahoo.com HTTP/1.1\n&gt; &gt; Reply-To: http://mysite.org/yahoo-watch\n&gt; \n&gt; You are assuming that this call can be emitted synchronously.  Before the new\n&gt; WATCH method can solve anything, it has to be received.\n\nTrue, but I don&#39;t say *who* has to receive it!\n\n&gt;  What if the caller, the\n&gt; caller&#39;s proxy, or the recipient is temporarily offline?\n\nThen let the recipient have a proxy that queues up these requests.\n\n&gt;  In the context of\n&gt; request/response, you only emit calls that make sense if they complete in the\n&gt; present.  In the context of publish/subscribe you may emit calls that don&#39;t have\n&gt; any results until a fuzzy point in the future, so it may not matter if the call\n&gt; is emitted immediately.\n\nOk.\n\n&gt; In the above example, the client should be able to cache the call until it goes\n&gt; online.  Such a local cache would be just like a local outbox.  That is:\n&gt; ===========\n&gt; User software has an application-defined need to send a subscription message.\n&gt; This might be an application subscribing to a stock ticker.  The user software\n&gt; finds that the user is offline, hence the message can&#39;t be sent.  It caches the\n&gt; message and initiates a polling loop against the remote resource provider.\n&gt; ===========\n\nRight.  See above.\n\n&gt; Notice the similarity with a mail user agent attempting to publish a text\n&gt; message via email.  The sending application should not do the polling, because\n&gt; there may be many such sending applications.  Instead the sending application\n&gt; should submit the send to a system-wide outbound queue and leave the polling to\n&gt; a single daemon.\n&gt; \n&gt; ===========\n&gt; An application publishes a subscription message to a stock ticker.  Because the\n&gt; endpoint is offline, the message is submitted to an outbound queue.  A daemon\n&gt; minding the queue and polling to discover online mode eventually finds that the\n&gt; endpoint is online.  However the ticker publisher is not online at that moment.\n&gt; The daemon submits the subscription event to a third party dropbox maintaned by\n&gt; the ticker publisher.\n&gt; ===========\n&gt; \n&gt; Again, these semantics are covered by mail infrastructure already but not by web\n&gt; infrastructure.\n\nYou sure about that?\n\n&gt; Let&#39;s not get bogged down in this slightly wierd point that email is more RESTy\n&gt; than the web.  The first point is that _sender_ asynchronicity means assuming\n&gt; that every single hop may be an emission that requires store-and-forward.\n&gt; KnowNow&#39;s architecture requires a special new server, the event router.  What is\n&gt; an event router but a store-and-forward node?  (uh, well, it&#39;s also a topic\n&gt; coordinator.  That&#39;s too big a can of worms for this message.)\n\nHeh.  It&#39;s just a web app, nothing more.\n\nPipeline + statelessness = great (email)\nPipeline + statelessness + generic semantics = awesome (Web)\n\nMB\n-- \nMark Baker, Chief Science Officer, Planetfred, Inc.\nOttawa, Ontario, CANADA.      mbaker@...\nhttp://www.markbaker.ca   http://www.planetfred.com\n\n"}}
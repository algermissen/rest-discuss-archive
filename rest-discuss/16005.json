{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":198897688,"authorName":"Dong Liu","from":"Dong Liu &lt;edongliu@...&gt;","profile":"edonliu","replyTo":"SENDER","senderId":"HVyjB4LoAD9wYSzg8RzSUSqsqYcJQb8kJQoAZcyUdT5aiho3FlJyZMlwEfJIQoG9V1T6Gn6xKKRQaIAjUisxGZhz1NE","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Re: PUT for create","postDate":"1280244732","msgId":16005,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEFBTkxrVGltMVlGT19fanhtZ1dqd1g0V1dEbWhYRWlFMDNVQ3VaaXM4UE16eUBtYWlsLmdtYWlsLmNvbT4=","inReplyToHeader":"PGkybWlzYitsbHJpQGVHcm91cHMuY29tPg==","referencesHeader":"PEFBTkxrVGk9eEtyVjBqcTdTRk5YRVQ0N3JjaDNLXzE4S2gzOG1hQktuYktDNkBtYWlsLmdtYWlsLmNvbT4JPGkybWlzYitsbHJpQGVHcm91cHMuY29tPg=="},"prevInTopic":16002,"nextInTopic":0,"prevInTime":16004,"nextInTime":16006,"topicId":15924,"numMessagesInTopic":14,"msgSnippet":"Hi William, I agree the approach that the client PUT to a client named URL in order to create a resource would somehow work. However, I still think a better","rawEmail":"Return-Path: &lt;edongliu@...&gt;\r\nX-Sender: edongliu@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 65809 invoked from network); 27 Jul 2010 15:32:13 -0000\r\nX-Received: from unknown (98.137.34.45)\n  by m11.grp.re1.yahoo.com with QMQP; 27 Jul 2010 15:32:13 -0000\r\nX-Received: from unknown (HELO mail-iw0-f175.google.com) (209.85.214.175)\n  by mta2.grp.sp2.yahoo.com with SMTP; 27 Jul 2010 15:32:13 -0000\r\nX-Received: by iwn34 with SMTP id 34so3914821iwn.6\n        for &lt;rest-discuss@yahoogroups.com&gt;; Tue, 27 Jul 2010 08:32:13 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.231.172.83 with SMTP id k19mr10646030ibz.114.1280244733029; \n\tTue, 27 Jul 2010 08:32:13 -0700 (PDT)\r\nX-Received: by 10.231.79.81 with HTTP; Tue, 27 Jul 2010 08:32:12 -0700 (PDT)\r\nIn-Reply-To: &lt;i2misb+llri@...&gt;\r\nReferences: &lt;AANLkTi=xKrV0jq7SFNXET47rch3K_18Kh38maBKnbKC6@...&gt;\n\t&lt;i2misb+llri@...&gt;\r\nDate: Tue, 27 Jul 2010 09:32:12 -0600\r\nMessage-ID: &lt;AANLkTim1YFO__jxmgWjwX4WWDmhXEiE03UCuZis8PMzy@...&gt;\r\nTo: William Martinez Pomares &lt;wmartinez@...&gt;, Rest List &lt;rest-discuss@yahoogroups.com&gt;, \n\t&quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nContent-Type: multipart/alternative; boundary=0050450159cf89adfd048c603426\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Dong Liu &lt;edongliu@...&gt;\r\nSubject: Re: [rest-discuss] Re: PUT for create\r\nX-Yahoo-Group-Post: member; u=198897688; y=jPr5feclWcUJsJWjpntSsEB6CCNMq3dXBvJFpkKX5qqH_Q\r\nX-Yahoo-Profile: edonliu\r\n\r\n\r\n--0050450159cf89adfd048c603426\r\nContent-Type: text/plain; charset=windows-1252\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nHi William,\n\nI agree the approach that the client PUT to a client named URL=\r\n in order to\ncreate a resource would somehow work. However, I still think a=\r\n better way to\ndo that is the server gives guide to the client by hypermedi=\r\na. The biggest\nconcern for client named URL&#39;s is that both client and serve=\r\nr need to know\nhow to deal them. When the server generates a representation=\r\n of resource to\nrespond a GET, how to deal with the URL&#39;s named by clients =\r\nis the problem.\n\nIn HTTP, URL + hash is the way to check if a representatio=\r\nn of the resource\nis already there on the server. What a client can get is =\r\nalways a\nrepresentation of the resource, and that is not the resource. Ther=\r\ne is a\nchance that different resources have exactly the same representation=\r\n. This\nis why I think it is difficult to identify a resource by its\nreprese=\r\nntation. In fact, URI is to *identify* a resource.\n\nGo back to the case tha=\r\nt a client C PUT some representation R to a URL U to\ncreate a new resource =\r\nN. U is already on the server to identify a resource\nO. If the server inter=\r\nprets this as an update, and it updates O, this is not\nwhat we want. If it =\r\nspits 409 with the difference of R and the\nrepresentation of O, then C is c=\r\nonfused. If the server limits PUT for only\ncreation, then we would need ano=\r\nther method or overriding method for update\nif the resources need that.\n\nCh=\r\neers,\n\nDong\n\nOn Tue, Jul 27, 2010 at 6:19 AM, William Martinez Pomares &lt;\nwm=\r\nartinez@...&gt; wrote:\n\n&gt;\n&gt;\n&gt; Dong.\n&gt; Agree. Aliases has their cost. =\r\nStill, we are talking about a client that\n&gt; uses a URI he made up. That is,=\r\n it would actually be for its eyes only. Any\n&gt; other request that access th=\r\nat resource will get the official one. And, any\n&gt; request from that client =\r\nwill get a redirect as a best practice. See PUT:\n&gt;\n&gt; &quot;A single resource MAY=\r\n be identified by many different URIs. For example,\n&gt; an article might have=\r\n a URI for identifying &quot;the current version&quot; which is\n&gt; separate from the U=\r\nRI identifying each particular version. In this case, a\n&gt; PUT request on a =\r\ngeneral URI might result in several other URIs being\n&gt; defined by the origi=\r\nn server&quot;\n&gt; also\n&gt; &quot;...the URI in a PUT request identifies the entity enclo=\r\nsed with the\n&gt; request -- the user agent knows what URI is intended and the=\r\n server MUST NOT\n&gt; attempt to apply the request to some other resource. If =\r\nthe server desires\n&gt; that the request be applied to a different URI, it MUS=\r\nT send a 301 (Moved\n&gt; Permanently) response; the user agent MAY then make i=\r\nts own decision\n&gt; regarding whether or not to redirect the request. &quot;\n&gt;\n&gt;\n&gt;=\r\n Now, the semantics you add to PUT should make PUT idempotent.\n&gt;\n&gt; *&quot;Checki=\r\nng if a resource already exists by the representation from client\n&gt; is cost=\r\nly and not reliable.&quot;*\n&gt;\n&gt; Not so sure about that. See, if we see the analo=\r\ngy of a database, if the\n&gt; only way to check if the resource already exists=\r\n is using the URI, that URI\n&gt; becomes a primary key of some sort. Again,URI=\r\n is just a name, not the\n&gt; resource.  The content is not the last word, to =\r\nbe replaced blindly.\n&gt; Depending of the data, the server should make severa=\r\nl verifications to avoid\n&gt; conflicts, like dependencies, duplication, data =\r\ninconsistency, etc. Remember\n&gt; clients knows the latest version of that res=\r\nource, server may control cross\n&gt; resource verifications and any other chan=\r\nge to resources that can make a\n&gt; request invalid.\n&gt;\n&gt;\n&gt; *&quot;What happens if =\r\nthe URL the client wants already exists on the server?\n&gt; Should it be inter=\r\npreted as an update?&quot;*\n&gt; Well, it SHOULD. See PUT:\n&gt;\n&gt; &quot; If the Request-URI=\r\n refers to an already existing resource, the enclosed\n&gt; entity SHOULD be co=\r\nnsidered as a modified version of the one residing on the\n&gt; origin server.&quot;=\r\n\n&gt;\n&gt; I think your case is the one where two clients choose, by coincidence,=\r\n the\n&gt; same made up URI. They are both posting a new resource. Server may n=\r\not have\n&gt; a way to detect the request comes from different clients. So the =\r\nsecond guy\n&gt; is unaware he is not creating a new resource, but updating it =\r\n(until he gets\n&gt; a 200 or 204 instead of a 201). As the update is marked wi=\r\nth a SHOULD, you\n&gt; can actually limit the PUT to creation, thus the second =\r\nrequest will fail.\n&gt; If you do not, then clients should handle the possibil=\r\nity of such case by\n&gt; checking the response codes and act accordingly.\n&gt;\n&gt; =\r\nCheers.\n&gt;\n&gt; William Martinez Pomares.\n&gt;\n&gt;\n&gt;\n&gt;\n&gt; --- In rest-discuss@yahoogr=\r\noups.com, Dong Liu &lt;edongliu@...&gt; wrote:\n&gt; &gt;\n&gt; &gt; On Sun, Jul 25, 2010 at 9:=\r\n12 PM, William Martinez Pomares\n&gt; &gt; wmartinez@... wrote:\n&gt; &gt; &gt;\n&gt; &gt; &gt;\n&gt; &gt; &gt;\n=\r\n&gt; &gt; &gt; Hello Bryan.\n&gt; &gt; &gt; That is actually an interesting question that is u=\r\nsually answered like\n&gt; many great guys here did. Still, let&#39;s review what&#39;s=\r\n in a URI.\n&gt; &gt; &gt;\n&gt; &gt; &gt; 1. A resource is not a URI. The URI is the identifie=\r\nr-name that\n&gt; actually identifies a resource. A resource can be anything, a=\r\nnd can have\n&gt; many names.\n&gt; &gt; &gt; 2. A client may not know all the names of a=\r\n resource. Actually, a\n&gt; resource may already exist with a different name t=\r\nhe client ignores.\n&gt; &gt; &gt; 3. The client may have control over the URIs it us=\r\nes, but it should\n&gt; never had control over the Server URIs.\n&gt; &gt; &gt; 4. I don&#39;=\r\nt see why a resource cannot have a name not given by the\n&gt; server, but I do=\r\n see that a server should not be forced to name a resource.\n&gt; &gt; &gt; 5. The cl=\r\nient should not infer nothing from a URI. No folders, no\n&gt; types, nothing. =\r\nThat is why I prevent from using templates. Too tempting.\n&gt; &gt; &gt;\n&gt; &gt; &gt; So, w=\r\nhat all that means? It means you can use PUT with any name you\n&gt; want. That=\r\n is your name, the URI from the client. But the server owns its\n&gt; namespace=\r\n, thus the resource may be created with the name the server likes.\n&gt; Still,=\r\n the server can note that you, as a client, gave a special, particular\n&gt; na=\r\nme to that new resource. So, whenever your client requests that URI, the\n&gt; =\r\nserver knows which resource it refers to. If someone else, even your client=\r\n,\n&gt; requests that resource using a search or something, the URI that will b=\r\ne\n&gt; returned is that one of the server.\n&gt; &gt; &gt;\n&gt; &gt;\n&gt; &gt; I dont quite agree. T=\r\nhere is cost for doing this.  See\n&gt; &gt; http://www.w3.org/TR/webarch/#uri-ali=\r\nases\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt; &gt;\n&gt; &gt; &gt; See? The resource in this case has two URIs. P=\r\nUT has not forced the\n&gt; name into the server. The server keeps its autonomy=\r\n. The URI can be a cool\n&gt; URI client side, and use templates client side, a=\r\nnd have a structure client\n&gt; side. But server doesn&#39;t care. It just polite =\r\nenough to remember your name\n&gt; for that resource.\n&gt; &gt; &gt;\n&gt; &gt;\n&gt; &gt; &quot;Cool URIs =\r\ndon&#39;t change&quot; from server side to client side.\n&gt; &gt;\n&gt; &gt; &gt;\n&gt; &gt; &gt; Furthermore.=\r\n As I said, the URI is not the resource. You can PUT a\n&gt; resource with a na=\r\nme, but if the resource already exists (the resource, NOT\n&gt; the name), it w=\r\nill fail. See? The server can check the body of the PUT and\n&gt; if creating a=\r\n resource from that duplicates an already existing resource,\n&gt; and that is =\r\nnot permitted, it will fail even if the resource you PUT has a\n&gt; completely=\r\n new name. This is very important. We are putting too much\n&gt; importance int=\r\no URIs, when they are simply names to refer to the really\n&gt; important guy, =\r\nthe resource.\n&gt; &gt; &gt;\n&gt; &gt;\n&gt; &gt; Checking if a resource already exists by the re=\r\npresentation from\n&gt; &gt; client is costly and not reliable.\n&gt; &gt;\n&gt; &gt; What happe=\r\nns if the URL the client wants already exists on the server?\n&gt; &gt; Should it =\r\nbe interpreted as an update?\n&gt; &gt;\n&gt; &gt; &gt; Cheers.\n&gt; &gt; &gt;\n&gt; &gt; &gt; William Martinez=\r\n Pomares\n&gt; &gt; &gt;\n&gt; &gt; &gt; --- In rest-discuss@yahoogroups.com, Bryan Taylor brya=\r\nn_w_taylor@wrote:\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; I&#39;ve been discussing PUT for create with =\r\nsome coworkers. This is\n&gt; certainly valid\n&gt; &gt; &gt; &gt; HTTP, but I&#39;m wondering i=\r\nf people consider it RESTful. It seems to me\n&gt; that\n&gt; &gt; &gt; &gt; giving the clie=\r\nnt control over part of the URI requires them to\n&gt; understand how\n&gt; &gt; &gt; &gt; r=\r\nesources are organized and forces them to construct URIs as\n&gt; non-opaque st=\r\nrings.\n&gt; &gt; &gt; &gt; So I wonder if this conflicts with HATEOAS. It potentially a=\r\nlso puts\n&gt; a burden on\n&gt; &gt; &gt; &gt; the client to avoid namespace collisions, so=\r\n that it must adopt some\n&gt; uniqueness\n&gt; &gt; &gt; &gt; logic which again requires ap=\r\nplication state that seems problematic.\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt;\n&gt; &gt; &gt;\n&gt; &gt;\n&gt;\n&gt;  \n&gt;\n\r\n--0050450159cf89adfd048c603426\r\nContent-Type: text/html; charset=windows-1252\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;div&gt;Hi William,=A0&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;I agree the approach that the clien=\r\nt PUT to a client named URL in order to create a resource would somehow wor=\r\nk. However, I still think a better way to do that is the server gives guide=\r\n to the client by hypermedia. The biggest concern for client named URL&#39;=\r\ns is that both client and server need to know how to deal them. When the se=\r\nrver generates a representation of resource to respond a GET, how to deal w=\r\nith the URL&#39;s named by clients is the problem.=A0&lt;div&gt;\n&lt;br&gt;&lt;/div&gt;&lt;div&gt;I=\r\nn HTTP, URL + hash is the way to check if a representation of the resource =\r\nis already there on the server. What a client can get is always a represent=\r\nation of the resource, and that is not the resource. There is a chance that=\r\n different resources have exactly the same representation.=A0This is why I =\r\nthink it is difficult to identify a resource by its representation.=A0In fa=\r\nct,=A0URI is to *identify* a resource.=A0&lt;/div&gt;\n&lt;meta http-equiv=3D&quot;content=\r\n-type&quot; content=3D&quot;text/html; charset=3Dutf-8&quot;&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Go back t=\r\no the case that a client C PUT some representation R to a URL U to create a=\r\n new resource N. U is already on the server to identify a resource O. If th=\r\ne server interprets this as an update, and it updates O, this is not what w=\r\ne want. If it spits 409 with the difference of R and the representation of =\r\nO, then C is confused. If the server limits PUT for only creation, then we =\r\nwould need another method or overriding method for update if the resources =\r\nneed that.=A0&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Cheers,&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Do=\r\nng=A0&lt;br&gt;&lt;br&gt;&lt;div class=3D&quot;gmail_quote&quot;&gt;On Tue, Jul 27, 2010 at 6:19 AM, Wi=\r\nlliam Martinez Pomares &lt;span dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:wmartinez@ac=\r\noscomp.com&quot;&gt;wmartinez@...&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;\n&lt;blockquote cl=\r\nass=3D&quot;gmail_quote&quot; style=3D&quot;margin:0 0 0 .8ex;border-left:1px #ccc solid;p=\r\nadding-left:1ex;&quot;&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;div style=3D&quot;background-color:#fff&quot;&gt;\n&lt;span=\r\n&gt;=A0&lt;/span&gt;\n\n\n&lt;div&gt;\n  &lt;div&gt;\n\n\n    &lt;div&gt;\n      \n      \n      &lt;p&gt;\nDong.&lt;br&gt;Ag=\r\nree. Aliases has their cost. Still, we are talking about a client that uses=\r\n a URI he made up. That is, it would actually be for its eyes only. Any oth=\r\ner request that access that resource will get the official one. And, any re=\r\nquest from that client will get a redirect as a best practice. See PUT:&lt;br&gt;=\r\n\n&lt;br&gt;&lt;/p&gt;&lt;blockquote&gt;&quot;A single resource MAY be identified by many diff=\r\nerent URIs. For example, an article might have a URI for identifying &quot;=\r\nthe current version&quot; which is separate from the URI identifying each p=\r\narticular version. In this case, a PUT request on a general URI might resul=\r\nt in several other URIs being defined by the origin server&quot;&lt;br&gt;\nalso&lt;b=\r\nr&gt;&quot;...the URI in a PUT request identifies the entity enclosed\n   with =\r\nthe request -- the user agent knows what URI is intended and the\n   server =\r\nMUST NOT attempt to apply the request to some other resource.\n   If the ser=\r\nver desires that the request be applied to a different URI, it MUST send a =\r\n301 (Moved Permanently) response; the user agent MAY\n   then make its own d=\r\necision regarding whether or not to redirect the\n   request.\n&quot;&lt;br&gt;&lt;/bl=\r\nockquote&gt;&lt;br&gt;Now, the semantics you add to PUT should make PUT idempotent. =\r\n&lt;br&gt;&lt;div class=3D&quot;im&quot;&gt;&lt;br&gt;&lt;i&gt;&quot;Checking if a resource already exists by=\r\n the representation from client is costly and not reliable.&quot;&lt;/i&gt;&lt;br&gt;\n&lt;=\r\nbr&gt;&lt;/div&gt;Not so sure about that. See, if we see the analogy of a database, =\r\nif the only way to check if the resource already exists is using the URI, t=\r\nhat URI becomes a primary key of some sort. Again,URI is just a name, not t=\r\nhe resource.=A0 The content is not the last word, to be replaced blindly. D=\r\nepending of the data, the server should make several verifications to avoid=\r\n conflicts, like dependencies, duplication, data inconsistency, etc. Rememb=\r\ner clients knows the latest version of that resource, server may control cr=\r\noss resource verifications and any other change to resources that can make =\r\na request invalid.&lt;div class=3D&quot;im&quot;&gt;\n&lt;br&gt;&lt;br&gt;&lt;i&gt;&quot;What happens if the U=\r\nRL the client wants already exists on the server? Should it be interpreted =\r\nas an update?&quot;&lt;/i&gt;&lt;br&gt;&lt;/div&gt;Well, it SHOULD. See PUT:&lt;br&gt;&lt;br&gt;&quot; If=\r\n the Request-URI refers to an already\n   existing resource, the enclosed en=\r\ntity SHOULD be considered as a\n   modified version of the one residing on t=\r\nhe origin server.&quot;&lt;br&gt;&lt;br&gt;I think your case is the one where two clien=\r\nts choose, by coincidence, the same made up URI. They are both posting a ne=\r\nw resource. Server may not have a way to detect the request comes from diff=\r\nerent clients. So the second guy is unaware he is not creating a new resour=\r\nce, but updating it (until he gets a 200 or 204 instead of a 201). As the u=\r\npdate is marked with a SHOULD, you can actually limit the PUT to creation, =\r\nthus the second request will fail.=A0 If you do not, then clients should ha=\r\nndle the possibility of such case by checking the response codes and act ac=\r\ncordingly.&lt;br&gt;\n&lt;br&gt;Cheers.&lt;br&gt;&lt;br&gt;William Martinez Pomares.&lt;div class=3D&quot;im=\r\n&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;--- In &lt;a href=3D&quot;mailto:rest-discuss@yahoogroups.com&quot; ta=\r\nrget=3D&quot;_blank&quot;&gt;rest-discuss@yahoogroups.com&lt;/a&gt;, Dong Liu &lt;edongliu@...=\r\n&gt; wrote:&lt;br&gt;&gt;&lt;br&gt;\n&gt; On Sun, Jul 25, 2010 at 9:12 PM, William Marti=\r\nnez Pomares&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;div class=3D&quot;h5&quot;&gt;&gt; wmartinez@... w=\r\nrote:&lt;br&gt;&gt; &gt;&lt;br&gt;&gt; &gt;&lt;br&gt;&gt; &gt;&lt;br&gt;&gt; &gt; Hello Bryan.&lt;br&gt;&=\r\ngt; &gt; That is actually an interesting question that is usually answered =\r\nlike many great guys here did. Still, let&#39;s review what&#39;s in a URI.=\r\n&lt;br&gt;\n&gt; &gt;&lt;br&gt;&gt; &gt; 1. A resource is not a URI. The URI is the iden=\r\ntifier-name that actually identifies a resource. A resource can be anything=\r\n, and can have many names.&lt;br&gt;&gt; &gt; 2. A client may not know all the na=\r\nmes of a resource. Actually, a resource may already exist with a different =\r\nname the client ignores.&lt;br&gt;\n&gt; &gt; 3. The client may have control over =\r\nthe URIs it uses, but it should never had control over the Server URIs.&lt;br&gt;=\r\n&gt; &gt; 4. I don&#39;t see why a resource cannot have a name not given by=\r\n the server, but I do see that a server should not be forced to name a reso=\r\nurce.&lt;br&gt;\n&gt; &gt; 5. The client should not infer nothing from a URI. No f=\r\nolders, no types, nothing. That is why I prevent from using templates. Too =\r\ntempting.&lt;br&gt;&gt; &gt;&lt;br&gt;&gt; &gt; So, what all that means? It means you c=\r\nan use PUT with any name you want. That is your name, the URI from the clie=\r\nnt. But the server owns its namespace, thus the resource may be created wit=\r\nh the name the server likes. Still, the server can note that you, as a clie=\r\nnt, gave a special, particular name to that new resource. So, whenever your=\r\n client requests that URI, the server knows which resource it refers to. If=\r\n someone else, even your client, requests that resource using a search or s=\r\nomething, the URI that will be returned is that one of the server.&lt;br&gt;\n&gt;=\r\n &gt;&lt;br&gt;&gt; &lt;br&gt;&gt; I dont quite agree.=A0There is cost for doing this.=\r\n=A0=A0See&lt;br&gt;&gt; &lt;a href=3D&quot;http://www.w3.org/TR/webarch/#uri-aliases&quot; tar=\r\nget=3D&quot;_blank&quot;&gt;http://www.w3.org/TR/webarch/#uri-aliases&lt;/a&gt;&lt;br&gt;&gt; &lt;br&gt;&g=\r\nt; &lt;br&gt;\n&gt; &lt;br&gt;&gt; &gt;&lt;br&gt;&gt; &gt; See? The resource in this case has =\r\ntwo URIs. PUT has not forced the name into the server. The server keeps its=\r\n autonomy. The URI can be a cool URI client side, and use templates client =\r\nside, and have a structure client side. But server doesn&#39;t care. It jus=\r\nt polite enough to remember your name for that resource.&lt;br&gt;\n&gt; &gt;&lt;br&gt;&=\r\ngt; &lt;br&gt;&gt; &quot;Cool URIs don&#39;t change&quot; from server side to cli=\r\nent side.&lt;br&gt;&gt; &lt;br&gt;&gt; &gt;&lt;br&gt;&gt; &gt; Furthermore. As I said, the UR=\r\nI is not the resource. You can PUT a resource with a name, but if the resou=\r\nrce already exists (the resource, NOT the name), it will fail. See? The ser=\r\nver can check the body of the PUT and if creating a resource from that dupl=\r\nicates an already existing resource, and that is not permitted, it will fai=\r\nl even if the resource you PUT has a completely new name. This is very impo=\r\nrtant. We are putting too much importance into URIs, when they are simply n=\r\names to refer to the really important guy, the resource.&lt;br&gt;\n&gt; &gt;&lt;br&gt;&=\r\ngt; &lt;br&gt;&gt; Checking if a resource already exists by the representation fr=\r\nom&lt;br&gt;&gt; client is costly and not reliable.&lt;br&gt;&gt; &lt;br&gt;&gt; What happens=\r\n if the URL the client wants already exists on the server?&lt;br&gt;\n&gt; Should =\r\nit be interpreted as an update?&lt;br&gt;&gt; &lt;br&gt;&gt; &gt; Cheers.&lt;br&gt;&gt; &gt;&lt;=\r\nbr&gt;&gt; &gt; William Martinez Pomares&lt;br&gt;&gt; &gt;&lt;br&gt;&gt; &gt; --- In &lt;a h=\r\nref=3D&quot;mailto:rest-discuss@yahoogroups.com&quot; target=3D&quot;_blank&quot;&gt;rest-discuss@=\r\nyahoogroups.com&lt;/a&gt;, Bryan Taylor bryan_w_taylor@ wrote:&lt;br&gt;\n&gt; &gt; &gt;=\r\n&lt;br&gt;&gt; &gt; &gt; I&#39;ve been discussing PUT for create with some cowork=\r\ners. This is certainly valid&lt;br&gt;&gt; &gt; &gt; HTTP, but I&#39;m wondering =\r\nif people consider it RESTful. It seems to me that&lt;br&gt;&gt; &gt; &gt; giving=\r\n the client control over part of the URI requires them to understand how&lt;br=\r\n&gt;\n&gt; &gt; &gt; resources are organized and forces them to construct URIs =\r\nas non-opaque strings.&lt;br&gt;&gt; &gt; &gt; So I wonder if this conflicts with=\r\n HATEOAS. It potentially also puts a burden on&lt;br&gt;&gt; &gt; &gt; the client=\r\n to avoid namespace collisions, so that it must adopt some uniqueness&lt;br&gt;\n&=\r\ngt; &gt; &gt; logic which again requires application state that seems probl=\r\nematic.&lt;br&gt;&gt; &gt; &gt;&lt;br&gt;&gt; &gt;&lt;br&gt;&gt; &gt;&lt;br&gt;&gt;&lt;br&gt;\n\n&lt;/div&gt;&lt;/di=\r\nv&gt;&lt;p&gt;&lt;/p&gt;\n\n    &lt;/div&gt;\n     \n\n    \n    &lt;div style=3D&quot;color:#fff;min-height:0=\r\n&quot;&gt;&lt;/div&gt;\n\n\n&lt;/div&gt;\n\n\n\n  \n\n\n\n\n\n\n&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;\n\r\n--0050450159cf89adfd048c603426--\r\n\n"}}
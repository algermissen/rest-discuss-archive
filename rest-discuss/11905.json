{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":279478415,"authorName":"amsmota@gmail.com","from":"amsmota@...","profile":"amsmota","replyTo":"SENDER","senderId":"9zqw-jTSm-ZBUFKJSD9pzJhL8g4EFUHq9W0WFAJgylKH6PBVcLW4VQ49MDxtKhOUk1bV2R8XfPg","spamInfo":{"isSpam":false,"reason":"6"},"subject":"Re: Re: [rest-discuss] Using &quot;hipertext as the engine of application \tstate&quot; in &quot;data-centric&quot; services","postDate":"1231154512","msgId":11905,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDAwMTUxNzRiZWRjZTVjMTA4ODA0NWZiYTdmN2VAZ29vZ2xlLmNvbT4="},"prevInTopic":11903,"nextInTopic":11908,"prevInTime":11904,"nextInTime":11906,"topicId":11887,"numMessagesInTopic":24,"msgSnippet":"Hello again: First let me thank you guys for all the answers. I think the first part of my post is well answered, regarding the use of hiperlinks as attributes","rawEmail":"Return-Path: &lt;amsmota@...&gt;\r\nX-Sender: amsmota@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 66731 invoked from network); 5 Jan 2009 13:12:37 -0000\r\nX-Received: from unknown (66.218.67.95)\n  by m52.grp.scd.yahoo.com with QMQP; 5 Jan 2009 13:12:37 -0000\r\nX-Received: from unknown (HELO nf-out-1516.google.com) (64.233.182.161)\n  by mta16.grp.scd.yahoo.com with SMTP; 5 Jan 2009 13:12:36 -0000\r\nX-Received: by nf-out-1516.google.com with SMTP id d20so49072nfh.18\n        for &lt;rest-discuss@yahoogroups.com&gt;; Mon, 05 Jan 2009 05:12:35 -0800 (PST)\r\nMIME-Version: 1.0\r\nX-Received: by 10.210.51.10 with SMTP id y10mr252161eby.16.1231154512135; Mon, \n\t05 Jan 2009 03:21:52 -0800 (PST)\r\nMessage-ID: &lt;0015174bedce5c1088045fba7f7e@...&gt;\r\nDate: Mon, 05 Jan 2009 11:21:52 +0000\r\nTo: rest-discuss@yahoogroups.com\r\nContent-Type: multipart/alternative; boundary=0015174bedce5c1072045fba7f3f\r\nX-eGroups-Msg-Info: 1:6:0:0:0\r\nFrom: amsmota@...\r\nSubject: Re: Re: [rest-discuss] Using &quot;hipertext as the engine of application \n\tstate&quot; in &quot;data-centric&quot; services\r\nX-Yahoo-Group-Post: member; u=279478415; y=Wqu-c0yMWArKiyunwr9R6B9DxashIisgjdtTPcMcgGT1MQ\r\nX-Yahoo-Profile: amsmota\r\n\r\n\r\n--0015174bedce5c1072045fba7f3f\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed; delsp=yes\r\nContent-Transfer-Encoding: 7bit\r\n\r\nHello again:\n\nFirst let me thank you guys for all the answers. I think the first part of  \nmy post is well answered, regarding the use of hiperlinks as attributes on  \nmy custom XML entities. Even if the use of such hiperlinks is not confined  \nto use in HTTP, as at that moment I have implemented all my services using  \nHTTP, IMAP and JMS, and probably others will follow. And this is a very  \nimportant constraint for us, to have the same services accessible from  \ndifferent connectors.\n\nNow for my second question relating to the use of &quot;extended&quot; media-types  \n(like application/vnd.bank.org.account+xml) it seems it&#39;s a question prone  \nto intense debate. So I think I&#39;ll expand a little more on this.\n\nMy initial positions about this, for me that I&#39;m not a expert in anything  \nand thus it&#39;s a position derived from &quot;intuition&quot; rather that rational  \nthinking, is that &quot;extended&quot; media-types used to describe &quot;structure&quot; are  \nbad, because\n\na) they are not standard, and I don&#39;t see the point of using media-types  \nnot universally recognised\nb) they are not self sufficient because they are not self-describing, in  \nthe sense that, as in Subbu examples, they are bound to a schema\nc) mime-types should be used to specify different &quot;representations&quot; of the  \nsame resource, as in the same report being represented by a text/html  \nresponse or a application/pdf response, and not different &quot;entities&quot; like  \napplication/vnd.bank.org.account+xml or  \napplication/vnd.bank.org.customer+xml. Because the &quot;entity&quot; should be bound  \nto a resource, not to it&#39;s media-type.\n\nHowever, in the other hand, I think they will probably be\n\na) a very powerful way of meta description/definition\nb) it probable solve my use-case problem (that I&#39;ll describe in a moment)\n\nNow let me say that I often find Mr.Fielding writings somewhat &quot;dense&quot; to  \nsay the least (my fault, for sure, even more considering that I learned  \nEnglish at about the same time I&#39;ve learned Cobol) but by reading his entry:\n\n&quot;A REST API should spend almost all of its descriptive effort in defining  \nthe media type(s) used for representing resources and driving application  \nstate, or in defining extended relation names and/or hypertext-enabled  \nmark-up for existing standard media types.&quot;\n\nI simply can&#39;t understand what he is trying to say about media-types. For  \ninstance, &quot;defining the media type&quot; refers to existing, universally known  \nmedia-types or the definition on (extended) new ones? Since he later refers  \nto &quot;existing standard media types&quot; I guess the first part refers to &quot;new&quot;  \nmedia-types, that will point to a solution like the one Subbu used in his  \narticle. And what exactly are &quot;extended relation names&quot;? Or for that  \nmatter, what are &quot;relation names&quot;?\n\nSo what about my concrete motivation for my changes and this post?\n\n1) to effectively implement HATEAOS\n2) to get rid of the use of any kind of contract, namely WADL\n\n\nThis can be seen in the following example:\n\nGET /rest/reports\n\n&lt;reports&gt;\n&lt;report&gt;Report A&lt;&#92;report&gt;\n&lt;report&gt;Report B&lt;&#92;report&gt;\n&lt;report&gt;Report C&lt;&#92;report&gt;\n&lt;/reports&gt;\n\nThe point 1) is solved by using\n\n&lt;reports&gt;\n&lt;report href=&quot;/rest/reports/reporta&quot;&gt;Report A&lt;&#92;report&gt;\n&lt;report href=&quot;/rest/reports/reportb&quot;&gt;Report B&lt;&#92;report&gt;\n&lt;report href=&quot;/rest/reports/reportc&quot;&gt;Report C&lt;&#92;report&gt;\n&lt;/reports&gt;\n\n\nNow to navigate to Report A, for instance, I have to peek at a WADL file to  \nknow what are params that Report A have to be giving, for instance Report A  \n-&gt; employee number, Report B -&gt; start date, end date\n\nSo for a WADL-free solution what can I have?\n\n&lt;reports&gt;\n&lt;report href=&quot;/rest/reports/reporta&quot; param=&quot;employeeNumber&quot;&gt;Report  \nA&lt;&#92;report&gt;\n&lt;report href=&quot;/rest/reports/reportb&quot; param=&quot;startDate&quot;  \nparam=&quot;endDate&quot;&gt;Report B&lt;&#92;report&gt;\n&lt;report href=&quot;/rest/reports/reportc&quot;&gt;Report C&lt;&#92;report&gt;\n&lt;/reports&gt;\n\nbut that is clearly insufficient, so I have to change the &quot;structure&quot;\n\n&lt;reports&gt;\n&lt;report href=&quot;/rest/reports/reporta&quot;&gt;\n&lt;name&gt;Report A&lt;/name&gt;\n&lt;param type=&quot;xs:integer&quot;&gt;employeeNumber&lt;/param&gt;\n&lt;&#92;report&gt;\n(...)\n&lt;/reports&gt;\n\nOR ELSE\n\n&lt;reports&gt;\n&lt;report href=&quot;/rest/reports/reporta&quot; type=&quot;application/reports+xml&quot;&gt;Report  \nA&lt;&#92;report&gt;\n(...)\n&lt;/reports&gt;\n\nwhich seems more simple and somehow more flexible and &quot;adaptable&quot; and  \nless &quot;breaking&quot; to what I have now.\n\nSo, given this real-life example, what seems to be the cons-pros? Giving ff  \ncourse that there are no &quot;only-one&quot;, optimal solution...\n\nOnce again, thanks for all the insightful help.\n\n\n\nOn Jan 5, 2009 8:57am, Stefan Tilkov &lt;stefan.tilkov@...&gt; wrote:\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt; On 04.01.2009, at 23:59, Steve Bjorg wrote:\n&gt;\n&gt;\n&gt;\n&gt; &gt; So, in conclusion, I agree with you that the answer varies, but I\n&gt;\n&gt; &gt; believe the outcome is not driven by the application, but its reach\n&gt;\n&gt; &gt; (which you may have alluded to already by stating interoperability\n&gt;\n&gt; &gt; and compatibility). The more user agents there are interacting with\n&gt;\n&gt; &gt; your API, the more driven you should be to fit it into an\n&gt;\n&gt; &gt; established MIME type.\n&gt;\n&gt;\n&gt;\n&gt; This is the same discussion as DSLs vs. general purpose programming\n&gt;\n&gt; languages, or internal DSLs vs. external DSLs, or UML vs. MOF, or a\n&gt;\n&gt; specific XML format vs. using an existing one, or a generic WADL-type\n&gt;\n&gt; thing vs. an application-specific description, or using POST vs.\n&gt;\n&gt; introducing a new verb.\n&gt;\n&gt;\n&gt;\n&gt; Using an existing solution and &quot;tunneling&quot; your specifics through it\n&gt;\n&gt; is good because you can rely on existing tools to support it, at least\n&gt;\n&gt; to some degree. It&#39;s bad because you&#39;re not explicit about what you\n&gt;\n&gt; do, and you inherit lots of stuff that you potentially don&#39;t need.\n&gt;\n&gt; Using a specific solution means you can do exactly what you need, but\n&gt;\n&gt; you can&#39;t rely on available tools and might end up re-inventing the\n&gt;\n&gt; wheel.\n&gt;\n&gt;\n&gt;\n&gt; I don&#39;t think there&#39;s a &quot;right&quot; or &quot;wrong&quot; here: both options are\n&gt;\n&gt; valid, it&#39;s really a design choice in every specific situation.\n&gt;\n&gt;\n&gt;\n&gt; Stefan\n&gt;\n&gt; --\n&gt;\n&gt; Stefan Tilkov, http://www.innoq.com/blog/st/\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt; \n&gt;\n&gt;\n&gt;\n\r\n--0015174bedce5c1072045fba7f3f\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nHello again:&lt;br /&gt;&lt;br /&gt;First let me thank you guys for all the answers. I =\r\nthink the first part of my post is well answered, regarding the use of hipe=\r\nrlinks as attributes on my custom XML entities. Even if the use of such hip=\r\nerlinks is not confined to use in HTTP, as at that moment I have implemente=\r\nd all my services using HTTP, IMAP and JMS, and probably others will follow=\r\n. And this is a very important constraint for us, to have the same services=\r\n accessible from different connectors.&lt;br /&gt;&lt;br /&gt;Now for my second questio=\r\nn relating to the use of &quot;extended&quot; media-types (like application=\r\n/vnd.bank.org.account+xml) it seems it&#39;s a question prone to intense de=\r\nbate. So I think I&#39;ll expand a little more on this.&lt;br /&gt;&lt;br /&gt;My initi=\r\nal positions about this, for me that I&#39;m not a expert in anything and t=\r\nhus it&#39;s a position derived from &quot;intuition&quot; rather that rati=\r\nonal thinking, is that &quot;extended&quot; media-types used to describe &q=\r\nuot;structure&quot; are bad, because &lt;br /&gt;&lt;br /&gt;a) they are not standard, =\r\nand I don&#39;t see the point of using media-types not universally recognis=\r\ned&lt;br /&gt;b) they are not self sufficient because they are not self-describin=\r\ng, in the sense that, as in Subbu examples, they are bound to a schema&lt;br /=\r\n&gt;c) mime-types should be used to specify different &quot;representations&qu=\r\not; of the same resource, as in the same report being represented by a text=\r\n/html response or a application/pdf response, and not different &quot;entit=\r\nies&quot; like application/vnd.bank.org.account+xml or application/vnd.bank=\r\n.org.customer+xml. Because the &quot;entity&quot; should be bound to a reso=\r\nurce, not to it&#39;s media-type.&lt;br /&gt;&lt;br /&gt;However, in the other hand, I =\r\nthink they will probably be&lt;br /&gt;&lt;br /&gt;a) a very powerful way of meta descr=\r\niption/definition&lt;br /&gt;b) it probable solve my use-case problem (that I&#39=\r\n;ll describe in a moment)&lt;br /&gt;&lt;br /&gt;Now let me say that I often find Mr.Fi=\r\nelding writings somewhat &quot;dense&quot; to say the least (my fault, for =\r\nsure, even more considering that I learned English at about the same time I=\r\n&#39;ve learned Cobol) but by reading his entry:&lt;br /&gt;&lt;br /&gt;&quot;A REST AP=\r\nI should spend almost all of its descriptive effort in defining the media t=\r\nype(s) used for representing resources and driving application state, or in=\r\n defining extended relation names and/or hypertext-enabled mark-up for exis=\r\nting standard media types.&quot;&lt;br /&gt;&lt;br /&gt;I simply can&#39;t understand w=\r\nhat he is trying to say about media-types. For instance, &quot;defining the=\r\n media type&quot; refers to existing, universally known media-types or the =\r\ndefinition on (extended) new ones? Since he later refers to &quot;existing =\r\nstandard media types&quot; I guess the first part refers to &quot;new&quot;=\r\n media-types, that will point to a solution like the one Subbu used in his =\r\narticle. And what exactly are &quot;extended relation names&quot;? Or for t=\r\nhat matter, what are &quot;relation names&quot;?&lt;br /&gt;&lt;br /&gt;So what about m=\r\ny concrete motivation for my changes and this post?&lt;br /&gt;&lt;br /&gt;1) to effect=\r\nively implement HATEAOS&lt;br /&gt;2) to get rid of the use of any kind of contra=\r\nct, namely WADL&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;This can be seen in the following example:=\r\n&lt;br /&gt;&lt;br /&gt;GET /rest/reports&lt;br /&gt;&lt;br /&gt;&lt;reports&gt;&lt;br /&gt;    &lt;repor=\r\nt&gt;Report A&lt;&#92;report&gt;&lt;br /&gt;   &lt;report&gt;Report B&lt;&#92;report&gt;&lt;=\r\nbr /&gt;   &lt;report&gt;Report C&lt;&#92;report&gt;&lt;br /&gt;&lt;/reports&gt;&lt;br /&gt;&lt;b=\r\nr /&gt;The point 1) is solved by using &lt;br /&gt;&lt;br /&gt;&lt;reports&gt;&lt;br /&gt;    &l=\r\nt;report href=3D&quot;/rest/reports/reporta&quot;&gt;Report A&lt;&#92;report&gt=\r\n;&lt;br /&gt;   &lt;report href=3D&quot;/rest/reports/reportb&quot;&gt;Report B&l=\r\nt;&#92;report&gt;&lt;br /&gt;   &lt;report href=3D&quot;/rest/reports/reportc&quot;&g=\r\nt;Report C&lt;&#92;report&gt;&lt;br /&gt;&lt;/reports&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Now to nav=\r\nigate to Report A, for instance, I have to peek at a WADL file to know what=\r\n are params that Report A have to be giving, for instance Report A -&gt; em=\r\nployee number, Report B -&gt; start date, end date&lt;br /&gt;&lt;br /&gt;So for a WADL=\r\n-free solution what can I have?&lt;br /&gt;&lt;br /&gt;&lt;reports&gt;&lt;br /&gt;    &lt;rep=\r\nort href=3D&quot;/rest/reports/reporta&quot; param=3D&quot;employeeNumber&q=\r\nuot;&gt;Report A&lt;&#92;report&gt;&lt;br /&gt;   &lt;report href=3D&quot;/rest/repor=\r\nts/reportb&quot;  param=3D&quot;startDate&quot;  param=3D&quot;endDate&quot=\r\n;&gt;Report B&lt;&#92;report&gt;&lt;br /&gt;   &lt;report href=3D&quot;/rest/reports/=\r\nreportc&quot;&gt;Report C&lt;&#92;report&gt;&lt;br /&gt;&lt;/reports&gt;&lt;br /&gt;&lt;br /&gt;b=\r\nut that is clearly insufficient, so I have to change the &quot;structure&qu=\r\not;&lt;br /&gt;&lt;br /&gt;&lt;reports&gt;&lt;br /&gt;    &lt;report href=3D&quot;/rest/repor=\r\nts/reporta&quot;&gt;&lt;br /&gt;      &lt;name&gt;Report A&lt;/name&gt;&lt;br /&gt;    =\r\n   &lt;param type=3D&quot;xs:integer&quot;&gt;employeeNumber&lt;/param&gt;&lt;=\r\nbr /&gt;   &lt;&#92;report&gt;&lt;br /&gt;       (...)&lt;br /&gt;&lt;/reports&gt;&lt;br /&gt;&lt;br /&gt;=\r\nOR ELSE&lt;br /&gt;&lt;br /&gt;&lt;reports&gt;&lt;br /&gt;    &lt;report href=3D&quot;/rest/r=\r\neports/reporta&quot; type=3D&quot;application/reports+xml&quot;&gt;Report A=\r\n&lt;&#92;report&gt;&lt;br /&gt;   (...)&lt;br /&gt;&lt;/reports&gt;&lt;br /&gt;&lt;br /&gt;which seems =\r\nmore simple and somehow more flexible and &quot;adaptable&quot; and less &q=\r\nuot;breaking&quot; to what I have now.&lt;br /&gt;&lt;br /&gt;So, given this real-life =\r\nexample, what seems to be the cons-pros? Giving ff course that there are no=\r\n &quot;only-one&quot;, optimal solution...&lt;br /&gt;&lt;br /&gt;Once again, thanks fo=\r\nr all the insightful help.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;On Jan 5, 2009 8:57am, St=\r\nefan Tilkov &lt;stefan.tilkov@...&gt; wrote:&lt;br /&gt;&gt; &lt;br /&gt;&gt; &lt;br=\r\n /&gt;&gt; &lt;br /&gt;&gt; &lt;br /&gt;&gt; &lt;br /&gt;&gt; &lt;br /&gt;&gt; &lt;br /&gt;&gt;     &lt;br /&gt;&g=\r\nt;             &lt;br /&gt;&gt; On 04.01.2009, at 23:59, Steve Bjorg wrote:&lt;br /&gt;=\r\n&gt; &lt;br /&gt;&gt; &lt;br /&gt;&gt; &lt;br /&gt;&gt; &gt; So, in conclusion, I agree with =\r\nyou that the answer varies, but I  &lt;br /&gt;&gt; &lt;br /&gt;&gt; &gt; believe the o=\r\nutcome is not driven by the application, but its reach  &lt;br /&gt;&gt; &lt;br /&gt;&g=\r\nt; &gt; (which you may have alluded to already by stating interoperability =\r\n &lt;br /&gt;&gt; &lt;br /&gt;&gt; &gt; and compatibility).  The more user agents there=\r\n are interacting with  &lt;br /&gt;&gt; &lt;br /&gt;&gt; &gt; your API, the more driven=\r\n you should be to fit it into an  &lt;br /&gt;&gt; &lt;br /&gt;&gt; &gt; established MI=\r\nME type.&lt;br /&gt;&gt; &lt;br /&gt;&gt; &lt;br /&gt;&gt; &lt;br /&gt;&gt; This is the same discus=\r\nsion as DSLs vs. general purpose programming  &lt;br /&gt;&gt; &lt;br /&gt;&gt; languag=\r\nes, or internal DSLs vs. external DSLs, or UML vs. MOF, or a  &lt;br /&gt;&gt; &lt;b=\r\nr /&gt;&gt; specific XML format vs. using an existing one, or a generic WADL-t=\r\nype  &lt;br /&gt;&gt; &lt;br /&gt;&gt; thing vs. an application-specific description, o=\r\nr using POST vs.  &lt;br /&gt;&gt; &lt;br /&gt;&gt; introducing a new verb.&lt;br /&gt;&gt; &lt;=\r\nbr /&gt;&gt; &lt;br /&gt;&gt; &lt;br /&gt;&gt; Using an existing solution and &quot;tunnel=\r\ning&quot; your specifics through it  &lt;br /&gt;&gt; &lt;br /&gt;&gt; is good because =\r\nyou can rely on existing tools to support it, at least  &lt;br /&gt;&gt; &lt;br /&gt;&g=\r\nt; to some degree. It&#39;s bad because you&#39;re not explicit about what =\r\nyou  &lt;br /&gt;&gt; &lt;br /&gt;&gt; do, and you inherit lots of stuff that you poten=\r\ntially don&#39;t need.  &lt;br /&gt;&gt; &lt;br /&gt;&gt; Using a specific solution mea=\r\nns you can do exactly what you need, but  &lt;br /&gt;&gt; &lt;br /&gt;&gt; you can&#39=\r\n;t rely on available tools and might end up re-inventing the  &lt;br /&gt;&gt; &lt;b=\r\nr /&gt;&gt; wheel.&lt;br /&gt;&gt; &lt;br /&gt;&gt; &lt;br /&gt;&gt; &lt;br /&gt;&gt; I don&#39;t thin=\r\nk there&#39;s a &quot;right&quot; or &quot;wrong&quot; here: both options a=\r\nre  &lt;br /&gt;&gt; &lt;br /&gt;&gt; valid, it&#39;s really a design choice in every s=\r\npecific situation.&lt;br /&gt;&gt; &lt;br /&gt;&gt; &lt;br /&gt;&gt; &lt;br /&gt;&gt; Stefan&lt;br /&gt;&=\r\ngt; &lt;br /&gt;&gt; --&lt;br /&gt;&gt; &lt;br /&gt;&gt; Stefan Tilkov, http://www.innoq.com/=\r\nblog/st/&lt;br /&gt;&gt; &lt;br /&gt;&gt; &lt;br /&gt;&gt;     &lt;br /&gt;&gt;   &lt;br /&gt;&gt; &lt;br /&gt;=\r\n&gt;     &lt;br /&gt;&gt;     &lt;br /&gt;&gt; \t&lt;br /&gt;&gt; \t&lt;br /&gt;&gt;\r\n--0015174bedce5c1072045fba7f3f--\r\n\n"}}
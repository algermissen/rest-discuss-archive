{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":289191104,"authorName":"Jan Algermissen","from":"Jan Algermissen &lt;algermissen1971@...&gt;","profile":"algermissen1971","replyTo":"SENDER","senderId":"gtkDJIjeJVkbDLXYrLrVAK3aNpMv3MIjF1ADso0ZMWipeJjjX2UkPPD4hGPgtaTjAj-kBrxfZoyjYCAn5kEieVv1oDhjlIERqpoV6DZ7jLE","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Has anybody implemented a RESTful C2C order process?","postDate":"1165094238","msgId":7168,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDM4RjE2ODMwLTI5NEQtNDlBOS1CNDU2LTM0MzI4M0UzMzFEOEBtYWMuY29tPg==","inReplyToHeader":"PDM0M2VjYjNlMDYxMjAyMTE0N3MxOThkODg2OHRlZThlYjc5NmZmMDNkYzI5QG1haWwuZ21haWwuY29tPg==","referencesHeader":"PDM0M2VjYjNlMDYxMjAyMTE0N3MxOThkODg2OHRlZThlYjc5NmZmMDNkYzI5QG1haWwuZ21haWwuY29tPg=="},"prevInTopic":7167,"nextInTopic":7172,"prevInTime":7167,"nextInTime":7169,"topicId":7167,"numMessagesInTopic":10,"msgSnippet":"Bob, ... Sorry, no - I have not implemented such a thing. But here is a comment anyhow: The way to do it (as Paul and other described) is to have a hypermedia","rawEmail":"Return-Path: &lt;algermissen1971@...&gt;\r\nX-Sender: algermissen1971@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 55720 invoked from network); 2 Dec 2006 21:19:00 -0000\r\nReceived: from unknown (66.218.66.166)\n  by m37.grp.scd.yahoo.com with QMQP; 2 Dec 2006 21:19:00 -0000\r\nReceived: from unknown (HELO smtpout.mac.com) (17.250.248.174)\n  by mta5.grp.scd.yahoo.com with SMTP; 2 Dec 2006 21:19:00 -0000\r\nReceived: from mac.com (smtpin08-en2 [10.13.10.153])\n\tby smtpout.mac.com (Xserve/8.12.11/smtpout04/MantshX 4.0) with ESMTP id kB2LH2ik013549;\n\tSat, 2 Dec 2006 13:17:02 -0800 (PST)\r\nReceived: from [80.171.55.149] (d055149.adsl.hansenet.de [80.171.55.149])\n\t(authenticated bits=0)\n\tby mac.com (Xserve/smtpin08/MantshX 4.0) with ESMTP id kB2LGuvA001152;\n\tSat, 2 Dec 2006 13:16:57 -0800 (PST)\r\nIn-Reply-To: &lt;343ecb3e0612021147s198d8868tee8eb796ff03dc29@...&gt;\r\nReferences: &lt;343ecb3e0612021147s198d8868tee8eb796ff03dc29@...&gt;\r\nMime-Version: 1.0 (Apple Message framework v752.3)\r\nContent-Type: text/plain; charset=US-ASCII; delsp=yes; format=flowed\r\nMessage-Id: &lt;38F16830-294D-49A9-B456-343283E331D8@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nContent-Transfer-Encoding: 7bit\r\nDate: Sat, 2 Dec 2006 22:17:18 +0100\r\nTo: Bob Haugen &lt;bob.haugen@...&gt;\r\nX-Mailer: Apple Mail (2.752.3)\r\nX-Brightmail-Tracker: AAAAAA==\r\nX-Brightmail-scanned: yes\r\nX-eGroups-Msg-Info: 1:0:0:0\r\nFrom: Jan Algermissen &lt;algermissen1971@...&gt;\r\nSubject: Re: [rest-discuss] Has anybody implemented a RESTful C2C order process?\r\nX-Yahoo-Group-Post: member; u=289191104; y=qD5Ibx-nPMoU5H8ndRto2HAindGOZDK7V8pYFkiiArzsSeEo_0oagex8\r\nX-Yahoo-Profile: algermissen1971\r\n\r\nBob,\n\n\nOn Dec 2, 2006, at 8:47 PM, Bob Haugen wrote:\n\n&gt; By C2C I mean computer-to-computer, no humans in the loop.\n&gt;\n&gt; We&#39;ve discussed it here, but I haven&#39;t heard anybody claim an\n&gt; implementation of much more than receiving a purchase order.\n&gt;\n&gt; A goods order processing procedure might go something like:\n&gt; 1. Buyer: propose offer to buy (e.g. a purchase order)\n&gt; 2. Seller: checks availability\n&gt; 3. Seller: reserves credit\n&gt; 4. Seller: accepts offer (e.g. Amazon&#39;s order confirmation)\n&gt; 5. Seller: ships goods\n&gt; 6. Seller: draws down payment\n&gt; 7. Buyer: receives goods\n&gt; 8: Buyer: confirms receipt\n\nSorry, no - I have not implemented such a thing. But here is a  \ncomment anyhow:\n\nThe way to do it (as Paul and other described) is to have a  \nhypermedia application guide the participants (actors) through the  \nprocess by offering certain state transitions (links) depending on  \nthe current state of the process. An online purchase at Amazon or a  \ntrouble ticket are examples of this.\n\nIn the above example, it should be differentiated between the case  \nwhere the seller owns the application and just guides the buyer  \n(Amazon purchase) and the acse where the application guides both,  \nseller and buyer (Amazon&#39;s &#39;non-Amazon&#39; seller functionality or an  \nonline auction).\n\nI really like the letter case as it shows so nicely how hypermedia  \ncan be used to coordinate process participants without coupling them  \nto the actual process flow (when or in what order things happen). The  \nstate machine remains hidden[1].\n\nJan\n\n[1] This is where I understand pi-calculus to be entering the scene.  \nUnfortunately, I can so far only see this being covered by the pi- \ncalculus&#39; predecessor CCS (Calculus of Communicating Systems, also by  \nMilner) and have no idea what the pi-calc actually adds to that. If  \nanyone can shed some light on this, I&#39;d be really thankful.\n\n\n&gt;\n&gt; I know, that will seem like a stateful conversation which goes against\n&gt; all REST principles, but Paul Prescod and others have sketched out how\n&gt; to do it without violating those principles.\n&gt;\n&gt; Been done to some extent using EDI and ebXML, but those\n&gt; implementations usually cover propose-accept or ship-receive\n&gt; separately, not wholistically (e.g. all 8 steps above). both of those\n&gt; use messages to endpoints which are not resources in any RESTian\n&gt; sense.\n&gt;\n&gt; WS-BPEL uses half of processes like that as examples, and\n&gt; WS-Choreography uses the whole of processes like that as examples, but\n&gt; I don&#39;t know anybody who has implemented any of those example\n&gt; processes in real life.\n&gt;\n&gt; \n\n\n"}}
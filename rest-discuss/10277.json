{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":319607554,"authorName":"Assaf Arkin","from":"&quot;Assaf Arkin&quot; &lt;assaf@...&gt;","profile":"assafarkin","replyTo":"SENDER","senderId":"myzd800DaQ1w8AGIq65KOhiRYZHn5ChO9rj5cxkgPno4fWYQG3vv72bRNIXH43-I6EBAgBAhD8HceCS2z5mPzjXZPAgD-MIkOA","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] bootstrapping","postDate":"1200714805","msgId":10277,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDUwMzdiNmU0MDgwMTE4MTk1M3ExNjYxNmYxNXVlMmU4ZTViOWM1NTJjMDVlQG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PDE0MzYwMWM4NWEzZSQ4YTkzMjM3MCQwNzAyYThjMEBHdWlkZXMubG9jYWw+","referencesHeader":"PGZta3M3OCtrMTVrQGVHcm91cHMuY29tPgkgPDEwNTQwMWM4NThlNyQ0OGZjYjVmMCQwNzAyYThjMEBHdWlkZXMubG9jYWw+CSA8NTAzN2I2ZTQwODAxMTcxOTE3aDJkMzZlNDgwbjc2MDM3NjU5ODVkMGM3NTZAbWFpbC5nbWFpbC5jb20+CSA8MTI1MTAxYzg1OWE2JDQwYWE4N2EwJDA3MDJhOGMwQEd1aWRlcy5sb2NhbD4JIDw1MDM3YjZlNDA4MDExODAxNDRqMjBlZDBmM2ZpYmY2ZmUyMDViNTkxZDJjYkBtYWlsLmdtYWlsLmNvbT4JIDwxMmM4MDFjODU5Y2YkZDg0Mzk4MzAkMDcwMmE4YzBAR3VpZGVzLmxvY2FsPgkgPDUwMzdiNmU0MDgwMTE4MTEwNXkyMGQ3OGQ5MHNkNjJmOTFiNGNiNjYwZjUxQG1haWwuZ21haWwuY29tPgkgPDEzZjQwMWM4NWEyMyQ0YjUyZWM2MCQwNzAyYThjMEBHdWlkZXMubG9jYWw+CSA8NTAzN2I2ZTQwODAxMTgxNjUzbTRlN2JiOWFjZ2RkYTI2YjE5ZjVkYjNmYjZAbWFpbC5nbWFpbC5jb20+CSA8MTQzNjAxYzg1YTNlJDhhOTMyMzcwJDA3MDJhOGMwQEd1aWRlcy5sb2NhbD4="},"prevInTopic":10276,"nextInTopic":10278,"prevInTime":10276,"nextInTime":10278,"topicId":10201,"numMessagesInTopic":65,"msgSnippet":"... Isn t that the responsibility of HTML? ... That s how we end up with super expensive enterprise software :-) Things that work _also_ for the enterprise,","rawEmail":"Return-Path: &lt;assaf@...&gt;\r\nX-Sender: assaf@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 95530 invoked from network); 19 Jan 2008 03:53:27 -0000\r\nX-Received: from unknown (66.218.67.96)\n  by m53.grp.scd.yahoo.com with QMQP; 19 Jan 2008 03:53:27 -0000\r\nX-Received: from unknown (HELO fg-out-1718.google.com) (72.14.220.159)\n  by mta17.grp.scd.yahoo.com with SMTP; 19 Jan 2008 03:53:27 -0000\r\nX-Received: by fg-out-1718.google.com with SMTP id 16so1162362fgg.40\n        for &lt;rest-discuss@yahoogroups.com&gt;; Fri, 18 Jan 2008 19:53:26 -0800 (PST)\r\nX-Received: by 10.86.95.20 with SMTP id s20mr3798264fgb.40.1200714805937;\n        Fri, 18 Jan 2008 19:53:25 -0800 (PST)\r\nX-Received: by 10.86.71.6 with HTTP; Fri, 18 Jan 2008 19:53:25 -0800 (PST)\r\nMessage-ID: &lt;5037b6e40801181953q16616f15ue2e8e5b9c552c05e@...&gt;\r\nDate: Fri, 18 Jan 2008 19:53:25 -0800\r\nTo: &quot;Mike Schinkel&quot; &lt;mikeschinkel@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nIn-Reply-To: &lt;143601c85a3e$8a932370$0702a8c0@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: 7bit\r\nContent-Disposition: inline\r\nReferences: &lt;fmks78+k15k@...&gt;\n\t &lt;105401c858e7$48fcb5f0$0702a8c0@...&gt;\n\t &lt;5037b6e40801171917h2d36e480n7603765985d0c756@...&gt;\n\t &lt;125101c859a6$40aa87a0$0702a8c0@...&gt;\n\t &lt;5037b6e40801180144j20ed0f3fibf6fe205b591d2cb@...&gt;\n\t &lt;12c801c859cf$d8439830$0702a8c0@...&gt;\n\t &lt;5037b6e40801181105y20d78d90sd62f91b4cb660f51@...&gt;\n\t &lt;13f401c85a23$4b52ec60$0702a8c0@...&gt;\n\t &lt;5037b6e40801181653m4e7bb9acgdda26b19f5db3fb6@...&gt;\n\t &lt;143601c85a3e$8a932370$0702a8c0@...&gt;\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Assaf Arkin&quot; &lt;assaf@...&gt;\r\nSubject: Re: [rest-discuss] bootstrapping\r\nX-Yahoo-Group-Post: member; u=319607554; y=ZHrplBZsaI8gBgrFSPCVnfTk6biPYYjsVev4RMmVsfuF6Jlkkw\r\nX-Yahoo-Profile: assafarkin\r\n\r\nOn Jan 18, 2008 5:56 PM, Mike Schinkel &lt;mikeschinkel@...&gt; wrote:\n&gt; &gt; Because it&#39;s easier to develop a bunch of domain-specific\n&gt; &gt; solutions on the Web, see which ones stick, target different\n&gt; &gt; audiences than it is developing it into the browser.\n&gt;\n&gt; Oh, I agree.  But I&#39;m instead talking about &quot;standardizing&quot; a meta approach;\n&gt; IOW a method for traversing web services that 5 years from now could be\n&gt; built into browsers because it gained widespread usage.  I&#39;d like to see a\n&gt; well-known way to publish that they are &quot;n&quot; number of services available,\n&gt; here are their local identifiers, their URLs/URI Templates, and here are the\n&gt; content types they return.  Local identifiers might be things like\n&gt; &quot;shopping-cart&quot;, &quot;add-item&quot;, &quot;empty-cart&quot;, and so on.\n\nIsn&#39;t that the responsibility of HTML?\n\n\n&gt; Interestingly I just re-read Joe Gregorio&#39;s rant against WADL [1] and find\n&gt; that I strongly agree with his mime-type centric view. So what I&#39;m\n&gt; discussing wouldn&#39;t be at the level of a WADL which as he presented defines\n&gt; a service but instead something that lists available services for a human to\n&gt; review and that can also later be called by a program that traverses the\n&gt; list to support HATEOAS with eventual move toward a new mime-type with a\n&gt; defined spec for the use-case if it is generally applicable.\n&gt;\n&gt; Also, Joe made my point about internal vs. external using very different\n&gt; words but basically his point is that for internal you don&#39;t necessarily\n&gt; have to worry about publishing standard mime-types, but for external you\n&gt; definitely do.  Given the lack of need to follow standards with internal\n&gt; services makes them more more likely to need to be changed.\n\nThat&#39;s how we end up with super expensive enterprise software :-)\nThings that work _also_ for the enterprise, like PHP or MySQL, tend to\nbe very cheap.  Things that work _only_ for the enterprise, like J2EE\nand Oracle, tend to be more expensive.  So wearing my enterprise hat,\nI say give me more of that stuff that works everywhere!  I don&#39;t have\na hat like that, but I&#39;m looking at the trends around open source,\ndynamic languages, and what the cool CIOs are calling Enterprise 2.0,\nand it looks like this just might be the shape of things to come.\n\n&gt; &gt; I just did, using URL templates to do lossless compression.\n&gt; &gt; It&#39;s the equivalent of saying A..Z instead of repeating the\n&gt; &gt; alphabet, or &#39;every saturday&#39; without listing infinite number\n&gt; &gt; of dates.  Is there a problem describing things in concise form?\n&gt;\n&gt; We definitely were arguing past each other there because I think the use of\n&gt; URI Templates is a grand idea [2], even though I&#39;m not enamored with the\n&gt; newly cryptic syntax.\n\nYep.\n\n&gt; &gt; My statement, which I duely corrected, was that if you make\n&gt; &gt; the URI template available dynamically as the first resource\n&gt; &gt; clients have to retrieve, you risk developers caching it in\n&gt; &gt; their code.  You might as well commit to giving developers\n&gt; &gt; the URI template up front.  That was what I intended to say,\n&gt; &gt; and still saying.\n&gt;\n&gt; Sorry for any misinterpretations.  That said, my argument is still valid and\n&gt; it is that for many use-cases the medication (HATEOAS) is worse than the\n&gt; disease (hard-coding URLs) and that rather than always prescribing HATEOAS\n&gt; as the obvious solution for which one should never consider any other\n&gt; alternative that we collectively identify and educate people on the\n&gt; collective pros and cons of either approach.\n\nAnd I fully agree with that.\n\nIn fact, that&#39;s one of the things that turned me away from REST\ninitially.  I&#39;m not even sure it&#39;s essential for REST, just that a lot\nof people were arguing for it and no other way.  So first I said no,\nand they I relented and decide to HATEOAS all the way, and after the\nlearning period was over, on a clean slate project I found to my\ndismay that:\na)  It took me way too much time to do that, but the 80/20 rule does\napply, the first 80% was a breeze, I should have stopped there.\nb)  And it took more time than it would take to fix hard-coded URLs,\nshould they ever break.\nc)  A task which could easily be automated given machine processable\nspecification.\n\n\n&gt; &gt; A lot of client libraries do just that.  You point to a base\n&gt; &gt; URL, which is easy to change, if for no other reason that you\n&gt; &gt; dev, test and production servers will all use different base\n&gt; &gt; URLs.  What happens after that is often ingrained in the\n&gt; &gt; logic, changing it is as hard as adding another mandatory\n&gt; &gt; request parameter, but then again just as likely to happen\n&gt; &gt; and costly to change.\n&gt;\n&gt; So it sounds like ultimately you actually agree with me? :-)\n\nYep.\n\n&gt; &gt; But there are benefits to following URLs, they give you more\n&gt; &gt; flexibility to change the implementation, especially around\n&gt; &gt; long-lasting state when you may want to offer to\n&gt; &gt; implementations side by side, or more across services (composition).\n&gt;\n&gt; But what are those benefits, in concrete terms?  I don&#39;t claim that they are\n&gt; not any only that I have yet to discover any.  I still don&#39;t see any reason\n&gt; why hardcoding a path is a real problem for externally published services;\n&gt; worst case URL rewriting can solve any breakage problems.  The only problem\n&gt; I see is with changing schemes/protocols and changing domains.\n\nLet me give you an example.  I&#39;m writing a task manager (aka work\nlist) service, and one thing you can do is troll your list of pending\ntasks, maybe you want to write a script that collects them and e-mails\nto someone else.\n\nSo one option is to have a URL form which you can get a list of\npeople, so you can find one specific person, from which you can get\nall that person&#39;s URLs (pending, completed, cancelled, etc) from which\nyou can get the specific task list.  That places a burden on the\nclient, not to mention the service (e.g. current implementation\ndoesn&#39;t even have a list of people you can query, people are listed in\nLDAP).\n\nAnother option is to give you a URL template, you plug your name into\nit, and with one line of curl get the result.  And writing a one-line\ncurl script that pipes to sendmail is so trivial, a big point in favor\nof URL templates.\n\nThe list of pending task for a person is designated as an &quot;entry\npoint&quot;, so the template exists and properly specified.  And as you\npointed out, the semantics will change several times over before the\nURLs do, so worrying about URLs breaking for this case is like\nworrying about swiss cheese having holes.\n\nThen there are attachments.  You can go from a task to the list of\nattachments and retrieve those as well.  You can assume there&#39;s some\nURL template for attachment, and you&#39;ll be right.  It does exist, it&#39;s\njust unspecified.\n\nSomeone may want to store those attachments in a content repository,\nor file server, or some other product and we allow for that.  Except,\nthose URLs do not conform to the same template we use, and you can&#39;t\neven easily redirect from one to the other because there&#39;s no logical\nmapping from our organization scheme to theirs.\n\nSo what we have is a specification that defines certain URL templates\nfor designated entry points, but leaves some resources unspecified and\nthe only way to discover them is through navigation.  If you write a\nclient based on this specification, and you make sure the base URL is\neasy to change, then you can use that client against any deployment of\nthe task manager.\n\nWhat we did is say, the semantics of your task list is that tasks have\ncertain required and optional values, and certain state transitions,\nand preconditions and such, and certain related resources, and also\nthey&#39;re directly accessible from your user id.  The semantics of\nattachments is that they have certain required and optional values,\nand certain state transitions, and so forth, but can exist anywhere in\nthe cloud and can only be reached from a task.\n\nAssaf\n\n&gt;\n&gt; So unless you can give me examples where following URLs is really beneficial\n&gt; and hence can change my opinion then I&#39;ll summarize my point: rather than\n&gt; universally prescribe HATEOAS I think it makes more sense to describe the\n&gt; pros and the cons of each (simplier adoption vs. change management) and also\n&gt; identify where the biggest problems with not using HATEPOAS lie i.e. in\n&gt; scheme/protocol & domain and let the implementor make their own decisions.\n&gt;\n&gt; -Mike Schinkel\n&gt; http://www.mikeschinkel.com/blogs/\n&gt; http://www.welldesignedurls.org\n&gt; http://atlanta-web.org\n&gt;\n&gt; [1] http://bitworking.org/news/193/Do-we-need-WADL\n&gt; [2]\n&gt;\n&gt; http://blog.welldesignedurls.org/2007/01/11/proposing-uri-templates-for-webf\n&gt; orms-2/\n&gt;\n&gt;\n\n\n\n-- \n-- Assaf\n\nhttp://labnotes.org\n\n"}}
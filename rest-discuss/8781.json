{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":189321215,"authorName":"Alan Dean","from":"&quot;Alan Dean&quot; &lt;alan.dean@...&gt;","profile":"alan_james_dean","replyTo":"SENDER","senderId":"dinZANlpH-XQ-s7xvuCbWgULEfsAEoVVWgJJHgiAPI_IpDnDloy-HO5fCaCmkUR9-GAunvJuFkpKipsNqYJ9-03m4kRLosCa","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] REST on the Desktop Anyone?","postDate":"1180900148","msgId":8781,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDZmYjE3M2Y1MDcwNjAzMTI0OXg0OGVhYTZkdmU3ZmM3NTg4NzRkNTE5ZGVAbWFpbC5nbWFpbC5jb20+","inReplyToHeader":"PDlkYzc4ZDdiMDcwNjAzMTAwOHM3ODkyMmUwMW1iODAyYTI4MjQzYjRiZDEwQG1haWwuZ21haWwuY29tPg==","referencesHeader":"PDE0M0NCNTVELUFEMTktNEZBMy1BRURGLURBMUJDOTgxRUEwMEBpbm5vcS5jb20+CSA8ODkyNjEzLjM3MDQ1LnFtQHdlYjUyMTAzLm1haWwucmUyLnlhaG9vLmNvbT4JIDwwMDE2MDFjN2EzZDkkYTBjNjAwNzAkMjEwMmZlYTlAR3VpZGVzLmxvY2FsPgkgPDQ2NUY2MUM1LjUwNTA4MDhAaGFja2NyYWZ0Lm5ldD4JIDwwMDQ0MDFjN2EzZTQkZWQ5MTkzMDAkMjEwMmZlYTlAR3VpZGVzLmxvY2FsPgkgPDM4RkVGNjM3LTNDMUItNDMyOS1BQUEwLTk5RjFCNzhGMjA0MkBibHVlem9vLm9yZz4JIDw5ZGM3OGQ3YjA3MDYwMzEwMDhzNzg5MjJlMDFtYjgwMmEyODI0M2I0YmQxMEBtYWlsLmdtYWlsLmNvbT4="},"prevInTopic":8780,"nextInTopic":8784,"prevInTime":8780,"nextInTime":8782,"topicId":8703,"numMessagesInTopic":59,"msgSnippet":"... Loose coupling of COM+ (etc.) libraries is a well known pattern in the enterprise. This is not the same as RESTful COM+ (etc.) It is true that Roy makes a","rawEmail":"Return-Path: &lt;alan.dean@...&gt;\r\nX-Sender: alan.dean@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 34564 invoked from network); 3 Jun 2007 19:49:11 -0000\r\nReceived: from unknown (66.218.67.33)\n  by m36.grp.scd.yahoo.com with QMQP; 3 Jun 2007 19:49:11 -0000\r\nReceived: from unknown (HELO an-out-0708.google.com) (209.85.132.249)\n  by mta7.grp.scd.yahoo.com with SMTP; 3 Jun 2007 19:49:10 -0000\r\nReceived: by an-out-0708.google.com with SMTP id c31so280045ana\n        for &lt;rest-discuss@yahoogroups.com&gt;; Sun, 03 Jun 2007 12:49:08 -0700 (PDT)\r\nDKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;\n        d=gmail.com; s=beta;\n        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;\n        b=RxhX7rUCRgyrTnZinIP2TTUK5M72hnEDl7beGNyifkY+1Vsko60xrxFOxH8IibpDons2gwcKK2+G3nCBa3L5KRhP+2VBCfAU0ITxfs2o4CzgEybZ24wB4sfavrFKYvWHQ5HhDVht4Sji4ZKQsup94YtSKRldF6G0klEMTu7wdTQ=\r\nReceived: by 10.100.142.12 with SMTP id p12mr2175541and.1180900148787;\n        Sun, 03 Jun 2007 12:49:08 -0700 (PDT)\r\nReceived: by 10.100.141.4 with HTTP; Sun, 3 Jun 2007 12:49:08 -0700 (PDT)\r\nMessage-ID: &lt;6fb173f50706031249x48eaa6dve7fc758874d519de@...&gt;\r\nDate: Sun, 3 Jun 2007 20:49:08 +0100\r\nTo: &quot;Steve Loughran&quot; &lt;steve.loughran.soapbuilders@...&gt;\r\nCc: &quot;Rest List&quot; &lt;rest-discuss@yahoogroups.com&gt;\r\nIn-Reply-To: &lt;9dc78d7b0706031008s78922e01mb802a28243b4bd10@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=UTF-8; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nContent-Disposition: inline\r\nReferences: &lt;143CB55D-AD19-4FA3-AEDF-DA1BC981EA00@...&gt;\n\t &lt;892613.37045.qm@...&gt;\n\t &lt;001601c7a3d9$a0c60070$2102fea9@...&gt;\n\t &lt;465F61C5.5050808@...&gt;\n\t &lt;004401c7a3e4$ed919300$2102fea9@...&gt;\n\t &lt;38FEF637-3C1B-4329-AAA0-99F1B78F2042@...&gt;\n\t &lt;9dc78d7b0706031008s78922e01mb802a28243b4bd10@...&gt;\r\nX-eGroups-Msg-Info: 1:0:0:0\r\nFrom: &quot;Alan Dean&quot; &lt;alan.dean@...&gt;\r\nSubject: Re: [rest-discuss] REST on the Desktop Anyone?\r\nX-Yahoo-Group-Post: member; u=189321215; y=ZJU3ZKPAEiBOSrDIo0RuSqnsG52PwgALps_e3sXes1iDaN-PPWtViqEd\r\nX-Yahoo-Profile: alan_james_dean\r\n\r\nOn 6/3/07, Steve Loughran &lt;steve.loughran.soapbuilders@...&gt; wrote:\n&gt;\n&gt; On 6/1/07, Chris Burdess &lt;dog@...&gt; wrote:\n&gt; &gt;\n&gt; &gt; A primary issue here is one of loose vs. strong coupling. In a\n&gt; &gt; desktop scenario it is feasible and acceptable to have strong\n&gt; &gt; coupling, because you have a much narrower domain of artifacts and\n&gt; &gt; more control over how those artifacts can behave. In a network\n&gt; &gt; environment you have heterogeneous systems with different\n&gt; &gt; architectures and approaches, so loose coupling is much more likely\n&gt; &gt; to succeed.\n&gt;\n&gt; That&#39;s the first assumption to question. Yes, you still only have one\n&gt; sysadmin, but you do have very weak ability to do synchronous update\n&gt; of all app versions on a single box. Hence DLL hell, RPM hell, JAR\n&gt; hell, and whatever the equivalent for OSGi we are yet to see.\n&gt;\n&gt; NetKernel and Cocoon both use loosely coupled XML pipelines inside a\n&gt; single process, because shovelling XML between bits of code is both\n&gt; simple to do and gives better isolation between parts. Similarly,\n&gt; Ant&#39;s XML language is much less brittle than the Java APIs.\n&gt;\n&gt; and then there is the best example of all, the Unix pipe, where space,\n&gt; comma or tab separate lines provide a wire format that is app neutral.\n&gt;\n&gt; Premise 1: Loose coupling between libraries on a single process or\n&gt; machine can provide benefits.\n&gt;\n&gt; &gt;\n&gt; &gt; People have used distributed technologies to build desktop\n&gt; &gt; applications in the past. For example, there&#39;s the CORBA\n&gt; &gt; infrastructure in GNOME, the now defunct Berlin project, and the\n&gt; &gt; various bus- and queue-based inter-application messaging frameworks\n&gt; &gt; in BSD, Solaris, etc. Those technologies, however, are still used in\n&gt; &gt; a very fine-grained, strongly coupled manner.\n&gt;\n&gt; Corba actually came out of Distributed NewWave and Sun&#39;s equivalent:\n&gt; it was desktops that drove them, or at least the impressive demos.\n&gt;\n&gt; &gt;\n&gt; &gt; I do agree with you that there are lessons to be learned from the\n&gt; &gt; interoperability measures and standardisation that has developed in\n&gt; &gt; the web space. If all filesystems were able to store MIME content-\n&gt; &gt; type and other metadata, it would simplify building cross-platform\n&gt; &gt; applications. I&#39;m less sure about your concept of bookmarks for\n&gt; &gt; entire application state identified by &quot;LRLs&quot; or the general\n&gt; &gt; applicability of REST principles to desktop applications.\n&gt; &gt;\n&gt;\n&gt; One interesting thought is what role Atom could have on the desktop.\n&gt; There are always various pub/sub mechanisms (windows has COM+ and\n&gt; SENS, linux is adopting DBus). What if lots of things were feed\n&gt; sources, other things transforms and finally ways of presenting stuff\n&gt; to the user. . you could have some fun there, which is good, because\n&gt; operating systems have got, well, dull.\n&gt;\n&gt; -steve\n\nLoose coupling of COM+ (etc.) libraries is a well known pattern in the\nenterprise.\n\nThis is not the same as RESTful COM+ (etc.)\n\nIt is true that Roy makes a specific point that REST does not require\nHTTP. You could, indeed, write RESTful COM+ code. I guess it would\nlook rather like this:\n\npublic interface Message\n{\n  Dictionary&lt;String, String&gt; Headers { get; set; }\n  String Body { get; set; }\n}\n\npublic interface IRequest : IMessage\n{\n  Uri Identifier { get; set; }\n}\n\npublic interface IResponse : IMessage\n{\n  int Status { get; set; }\n}\n\npublic interface IEndpoint\n{\n   IResponse Request(IRequest message);\n}\n\npublic interface IConnect\n{\n  IEndpoint Resolve(Uri identifier)\n}\n\nSome sample client code would look like:\n\nUri identifier = new Uri(&quot;urn:foo&quot;);\nIRequest request = new GetRequest(identifier);\n// get a COM+ object instance\nIEndpoint endpoint = new Connection().Resolve(identifier);\n// call COM+ object instance (which might be local or remote)\nIResponse response = endpoint.Request(request);\nif (response.Status == 200) ...\n\nIn other words, anything RESTful will end up looking very like HTTP\neven if it *isn&#39;t* HTTP. Not many COM+ abstractions look like this in\nthe wild.\n\nRegards,\nAlan Dean\nhttp://thoughtpad.net/alan-dean\n\n"}}
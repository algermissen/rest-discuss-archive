{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":4981751,"authorName":"Mark Nottingham","from":"Mark Nottingham &lt;mnot@...&gt;","profile":"mnotting","replyTo":"SENDER","senderId":"AeXP1LMtxiOT0nZGb3q8aQW7lsobx4kMl0ivNHCx7h4mZNyU2kQoXqgYjwL2oCiJZjA6r8Z4gAqAZPvY__ypORlG4x1rwQ","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] FYI: XForms and PUT","postDate":"1011215413","msgId":31,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMDIwMTE2MTMxMDEyLkIyNTA0NUBtbm90Lm5ldD4=","inReplyToHeader":"PDIwMDIwMTE2MTkyMi5PQUEwNjM0N0BtYXJrYmFrZXIuY2E+","referencesHeader":"PDNDNDVDRjI3LjkxNkQ2Q0JAcHJlc2NvZC5uZXQ+IDwyMDAyMDExNjE5MjIuT0FBMDYzNDdAbWFya2Jha2VyLmNhPg=="},"prevInTopic":30,"nextInTopic":32,"prevInTime":30,"nextInTime":32,"topicId":13,"numMessagesInTopic":36,"msgSnippet":"... From 2616 (section 9.6, PUT) The PUT method requests that the enclosed entity be stored under the supplied Request-URI. If the Request-URI refers to an","rawEmail":"Return-Path: &lt;mnot@...&gt;\r\nX-Sender: mnot@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_0_1_3); 16 Jan 2002 21:10:14 -0000\r\nReceived: (qmail 68582 invoked from network); 16 Jan 2002 21:10:14 -0000\r\nReceived: from unknown (216.115.97.171)\n  by m12.grp.snv.yahoo.com with QMQP; 16 Jan 2002 21:10:14 -0000\r\nReceived: from unknown (HELO mail.mnot.net) (64.170.196.242)\n  by mta3.grp.snv.yahoo.com with SMTP; 16 Jan 2002 21:10:13 -0000\r\nReceived: by mail.mnot.net (Postfix, from userid 500)\n\tid 42D41976E; Wed, 16 Jan 2002 13:10:13 -0800 (PST)\r\nDate: Wed, 16 Jan 2002 13:10:13 -0800\r\nTo: Mark Baker &lt;distobj@...&gt;\r\nCc: Paul Prescod &lt;paul@...&gt;, rest-discuss@yahoogroups.com\r\nSubject: Re: [rest-discuss] FYI: XForms and PUT\r\nMessage-ID: &lt;20020116131012.B25045@...&gt;\r\nReferences: &lt;3C45CF27.916D6CB@...&gt; &lt;200201161922.OAA06347@...&gt;\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=us-ascii\r\nContent-Disposition: inline\r\nIn-Reply-To: &lt;200201161922.OAA06347@...&gt;\r\nUser-Agent: Mutt/1.3.23i\r\nFrom: Mark Nottingham &lt;mnot@...&gt;\r\nX-Yahoo-Group-Post: member; u=4981751\r\nX-Yahoo-Profile: mnotting\r\n\r\n\nOn Wed, Jan 16, 2002 at 02:22:33PM -0500, Mark Baker wrote:\n&gt; &gt; Mark N. believes (and without looking it up, I would guess he&#39;s right)\n&gt; &gt; that the semantics of PUT are that an immediately following GET should\n&gt; &gt; return the same representation that was just PUT.\n&gt; \n&gt; Actually, that&#39;s not quite right.  There&#39;s content negotiation to be\n&gt; considered.\n\nFrom 2616 (section 9.6, PUT)\n\n  The PUT method requests that the enclosed entity be stored under\n  the supplied Request-URI. If the Request-URI refers to an already\n  existing resource, the enclosed entity SHOULD be considered as a\n  modified version of the one residing on the origin server. If the\n  Request-URI does not point to an existing resource, and that URI is\n  capable of being defined as a new resource by the requesting user\n  agent, the origin server can create the resource with that URI. \n  [...]\n\nThis seems to imply that in the case of PUT, the Web *is* a\nfilesystem (&quot;be stored under&quot;).\n\n\n  If the request passes through a cache and the Request-URI identifies\n  one or more currently cached entities, those entries SHOULD be\n  treated as stale. Responses to this method are not cacheable.\n\nSo this blows away the caching arguments; in that sense, it&#39;s\nequivalent to POST.\n\n\n  The fundamental difference between the POST and PUT requests is\n  reflected in the different meaning of the Request-URI. The URI in a\n  POST request identifies the resource that will handle the enclosed\n  entity. That resource might be a data-accepting process, a gateway\n  to some other protocol, or a separate entity that accepts\n  annotations.  In contrast, the URI in a PUT request identifies the\n  entity enclosed with the request -- the user agent knows what URI\n  is intended and the server MUST NOT attempt to apply the request to\n  some other resource.  If the server desires that the request be\n  applied to a different URI, it MUST send a 301 (Moved Permanently)\n  response; the user agent MAY then make its own decision regarding\n  whether or not to redirect the request.\n\nThis *seems* to limit the effects of a PUT to the identified\nresource, as well as support the &#39;filesystem&#39; view. This also\ntheoretically makes the &#39;accept=...&#39; hacks even hackier, because a\nPUT would indeed affect the state of other resources (i.e., the\nresource identified with the accept=... hack, vs. the one identified\nw/o it). Which means tha tthe accept=... hack shouldn&#39;t be available\non PUTed requests; only POSTs (which can use a method=... hack).\n\n\n  HTTP/1.1 does not define how a PUT method affects the state of an\n  origin server.\n\nI&#39;d like to know what the intent of this is; it doesn&#39;t say state of\nthe *resource*, but state of the *origin server*.\n\n\n  Unless otherwise specified for a particular entity-header, the\n  entity-headers in the PUT request SHOULD be applied to the resource\n  created or modified by the PUT.\n\nAnd this seems to cover conneg. I read this as saying &quot;if it has a\n&#39;Content-Foo: bar&#39; request header, negotiate subsequent GETs as if\nit&#39;s Foo is bar.&quot; This view seems to be supported by:\n\n  The recipient of the entity MUST NOT ignore any Content-*\n  (e.g. Content-Range) headers that it does not understand or implement\n  and MUST return a 501 (Not Implemented) response in such cases.\n\n\n-- \nMark Nottingham\nhttp://www.mnot.net/\n \n\n"}}
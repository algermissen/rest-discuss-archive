{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":267214845,"authorName":"Noah Campbell","from":"Noah Campbell &lt;noahcampbell@...&gt;","profile":"noahsingleton","replyTo":"SENDER","senderId":"MPnDHTJaxqLLM53ebhxBqszw90nOLaeNgI0Nhcz8ijjw4Hqn6yx0ItBziaedpISNkbHfZ07pfnYYjs-08emLkDYp_V36ljudiR9VfkA","spamInfo":{"isSpam":false,"reason":"4"},"subject":"Re: [rest-discuss] Re: Media Type Version Negotiation","postDate":"1253079122","msgId":13250,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGRlNzBiMzlkMDkwOTE1MjIzMngzZjMyNDZmOWljNDZhZDg3NWY4ZDg0MkBtYWlsLmdtYWlsLmNvbT4=","inReplyToHeader":"PDI4ZTI1NzExMDkwOTE0MTE0MG4xNGRkZGYwOHVmMDgyOWE0ODY4ZTU5OGYyQG1haWwuZ21haWwuY29tPg==","referencesHeader":"PGg4ZWVucStuYTV1QGVHcm91cHMuY29tPgkgPEQzRERFRkFELTMxMTItNEFGRC05QjIwLTUzNjJCNUJDMUJBNUBtYWMuY29tPgkgPDRBQUUzNEM4LjMwOTAzMDZAbXlrYW5qby5jby51az4JIDxkZTcwYjM5ZDA5MDkxNDA5MjZwMzQ5ODY4MWJxMWJjMzBjMDQ4NmJjMjc3MUBtYWlsLmdtYWlsLmNvbT4JIDwyOGUyNTcxMTA5MDkxNDExNDBuMTRkZGRmMDh1ZjA4MjlhNDg2OGU1OThmMkBtYWlsLmdtYWlsLmNvbT4="},"prevInTopic":13249,"nextInTopic":13251,"prevInTime":13249,"nextInTime":13251,"topicId":13218,"numMessagesInTopic":43,"msgSnippet":"Consider what browser agents do today?  They will get their html and then query the document to see what mode they need to process.  This is typically based","rawEmail":"Return-Path: &lt;noahcampbell@...&gt;\r\nX-Sender: noahcampbell@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 46564 invoked from network); 16 Sep 2009 05:32:03 -0000\r\nX-Received: from unknown (69.147.108.200)\n  by m6.grp.re1.yahoo.com with QMQP; 16 Sep 2009 05:32:03 -0000\r\nX-Received: from unknown (HELO mail-px0-f187.google.com) (209.85.216.187)\n  by mta1.grp.re1.yahoo.com with SMTP; 16 Sep 2009 05:32:03 -0000\r\nX-Received: by mail-px0-f187.google.com with SMTP id 17so3985275pxi.12\n        for &lt;rest-discuss@yahoogroups.com&gt;; Tue, 15 Sep 2009 22:32:03 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.142.201.19 with SMTP id y19mr674009wff.158.1253079122657; Tue, \n\t15 Sep 2009 22:32:02 -0700 (PDT)\r\nIn-Reply-To: &lt;28e257110909141140n14dddf08uf0829a4868e598f2@...&gt;\r\nReferences: &lt;h8eenq+na5u@...&gt;\n\t &lt;D3DDEFAD-3112-4AFD-9B20-5362B5BC1BA5@...&gt;\n\t &lt;4AAE34C8.3090306@...&gt;\n\t &lt;de70b39d0909140926p3498681bq1bc30c0486bc2771@...&gt;\n\t &lt;28e257110909141140n14dddf08uf0829a4868e598f2@...&gt;\r\nDate: Tue, 15 Sep 2009 22:32:02 -0700\r\nMessage-ID: &lt;de70b39d0909152232x3f3246f9ic46ad875f8d842@...&gt;\r\nTo: Peter Williams &lt;pezra@...&gt;\r\nCc: Mike Kelly &lt;mike@...&gt;, Jan Algermissen &lt;algermissen1971@...&gt;, \n\trest-discuss@yahoogroups.com\r\nContent-Type: multipart/alternative; boundary=000e0cd32874fb40d90473ab37f9\r\nX-eGroups-Msg-Info: 2:4:8:0:2\r\nFrom: Noah Campbell &lt;noahcampbell@...&gt;\r\nSubject: Re: [rest-discuss] Re: Media Type Version Negotiation\r\nX-Yahoo-Group-Post: member; u=267214845; y=vUiMt4ZHSPuPJMGpNc2uxwwQWpy6qm1chc8SvkZaxhFhcwRV9QbO7Q\r\nX-Yahoo-Profile: noahsingleton\r\n\r\n\r\n--000e0cd32874fb40d90473ab37f9\r\nContent-Type: text/plain; charset=UTF-8\r\n\r\nConsider what browser agents do today?  They will get their html and then\nquery the document to see what &quot;mode&quot; they need to process.  This is\ntypically based on the doctype in html; see\nhttps://developer.mozilla.org/en/Mozilla&#39;s_DOCTYPE_sniffing for an example\nof one browser.\n\nHTML is built on the principle of, if I don&#39;t understand it, I&#39;ll ignore it.\n Browser also try their best to render the intent.  Anyone involved in those\nprojects understand how much effort is required to overcome junk input.\n Making REST services more accepting requires a change in development\nstyle.   Application/xml is descriptive enough for opaque xml blobs, but I\nwould expect HTTP 415 more often than not.  For this, creating media-types\nmakes sense (eschewing version) and I would create a media-type, such as\napplication/vnd.example.profile or application/profile+xml, and rely on the\ncontent to indicate the version.   A DOCTYPE or a namespace could serve the\nrole for detecting a version, requiring an inspection of the document before\nprocessing it.\n\nWhat does this look like in practice?  Lets start by examining the typical\napproach using XSD.  Assume that you have an xml document; for example, a\nlist of customers.  In XML-Schema, you would likely have a ns0:CustomersType\nthat contains 0..many ns0:CustomerType elements.  Traditionally, this is\nmapped to a collection of type customer (List&lt;Customer&gt; for those familiar\nwith Java) and marshaled up to a handler.  Abstraction is good(tm) the\ndeveloper says, I won&#39;t ever be bothered by invalid input...sweet!  But not\nsweet once the app is deployed.  Someone revs the schema, perhaps simply\nchanging the namespace, so ns1:CustomerType and ns0:CustomerType are no\nlonger equivalent even though there shape is exactly the same!  This means\nan entire rev of the application is required to accommodate something as\ntrivial as a change in namespace.\n\nLets say the developer threw out the marshaling framework and worked\ndirectly at the request/response level where they are able to inspect the\nbyte stream.  Now they could take the request and stuff it into an XSD\nvalidating parser but this won&#39;t buy them anything beyond the recently\ndiscarded framework.  Instead, using xpath, a developer finds all the\nCustomerTypes (e.g. //Customer) and processes each element, regardless of\nthe location in the document.  The code is not as short when the documents\nare marshaled into an object, but it&#39;s much more accommodating.  It also\navoids the marshaling overhead when only a handful of values are needed.\n\nBut wait, doesn&#39;t this boil into a big ball of mud?  Perhaps, but only if\nyou let it.  It could lead to a huge if/then/else mess, but there are plenty\nof ways to avoid such branching.  Better yet, the service can send a\nredirect (3xx?) to another service who can handle an unknown or older type.\n\nIn short, I would recommend that the handler make its best effort to\naccommodate the input, trying to not make any assumptions about the\nstructure of the input.  This means ditching marshaling stacks and handle\nthe bytes directly, querying the document to find matches based on intent,\ndump namespaces, ignore case, plan for parent/child relationships being more\nthen one generation apart, and when in doubt, find a meaningful response\ncode in HTTP to signal the user what went wrong.\n\n-Noah\n\nPS.  I tried to tighten up my grammar.  I had a head cold and an itch to\npush send.  Sorry for the previous mistakes.\n\nOn Mon, Sep 14, 2009 at 11:40 AM, Peter Williams &lt;pezra@...&gt;wrote:\n\n&gt; On Mon, Sep 14, 2009 at 10:26 AM, Noah Campbell &lt;noahcampbell@...&gt;\n&gt; wrote:\n&gt;\n&gt; &gt; The same goes for application/xml, it just folks want to have it\n&gt; &gt; bind to a schema so the tools know who to consume the document in its\n&gt; &gt; entirety. This is brittle since the serialization techniques rely\n&gt; &gt; on a very concise definition of the payload. Anything out of the\n&gt; &gt; ordinary causes an exception or error.\n&gt;\n&gt; In my view the problem is not that `application/xml` deserialization\n&gt; is often rather unforgiving.  (That is an issue, but it&#39;s just an\n&gt; implementation detail.)  The real problem is that media types like\n&gt; `application/xml` do describe the semantics at all.  When a request\n&gt; claims to accept `application/xml` what does that really mean? RSS?\n&gt; Maybe Atom?  Maybe BPML?  Or perhaps some proprietary inventory xml\n&gt; format?\n&gt;\n&gt; I think Jan Algermissen was pointing out is that the client should\n&gt; provide a sufficiently precise media type in it&#39;s content type and\n&gt; accept header fields that the server, and all the intermediates that\n&gt; care, know what it really needs to function correctly.\n&gt;\n&gt; XHTML meets this standard not because it has a well defined syntax but\n&gt; because a great deal of work has gone into describing the semantics of\n&gt; what its grammar means.  However, using XHTML as a container for\n&gt; application specific data while not utilizing its core semantics seems\n&gt; to miss the mark.  If the server could reasonably produce a response\n&gt; for the content type and acceptable media types of a request that\n&gt; would cause the client to not function then the media type is not\n&gt; specific enough.  Using XHTML as a container format puts you in\n&gt; exactly that position.\n&gt;\n&gt; --\n&gt; Peter Williamsthat\n&gt; http://barelyenough.org\n&gt;\n\r\n--000e0cd32874fb40d90473ab37f9\r\nContent-Type: text/html; charset=UTF-8\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;div&gt;Consider what browser agents do today? =C2=A0They will get their html =\r\nand then query the document to see what &quot;mode&quot; they need to proce=\r\nss. =C2=A0This is typically based on the doctype in html; see=C2=A0&lt;a href=\r\n=3D&quot;https://developer.mozilla.org/en/Mozilla&#39;s_DOCTYPE_sniffing&quot; target=\r\n=3D&quot;_blank&quot;&gt;https://developer.mozilla.org/en/Mozilla&#39;s_DOCTYPE_sniffing=\r\n&lt;/a&gt; for an example of one browser.&lt;/div&gt;\n\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;HTML is bui=\r\nlt on the principle of, if I don&#39;t understand it, I&#39;ll ignore it. =\r\n=C2=A0Browser also try their best to render the intent. =C2=A0Anyone involv=\r\ned in those projects understand how much effort is required to overcome jun=\r\nk input. =C2=A0Making REST services more accepting requires a change in dev=\r\nelopment style.=C2=A0=C2=A0 Application/xml is descriptive enough for opaqu=\r\ne xml blobs, but I would expect HTTP 415 more often than not. =C2=A0For thi=\r\ns, creating media-types makes sense (eschewing version) and I would create =\r\na media-type, such as application/vnd.example.profile or application/profil=\r\ne+xml, and rely on the content to indicate the version. =C2=A0 A DOCTYPE or=\r\n a namespace could serve the role for detecting a version, requiring an ins=\r\npection of the document before processing it.&lt;/div&gt;\n\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;W=\r\nhat does this look like in practice? =C2=A0Lets start by examining the typi=\r\ncal approach using XSD. =C2=A0Assume that you have an xml document; for exa=\r\nmple, a list of customers. =C2=A0In XML-Schema, you would likely have a ns0=\r\n:CustomersType that contains 0..many ns0:CustomerType elements. =C2=A0Tradi=\r\ntionally, this is mapped to a collection of type customer (List&lt;Customer=\r\n&gt; for those familiar with Java) and marshaled up to a handler. =C2=A0Abs=\r\ntraction is good(tm) the developer says, I won&#39;t ever be bothered by in=\r\nvalid input...sweet! =C2=A0But not sweet once the app is deployed. =C2=A0So=\r\nmeone revs the schema, perhaps simply changing the namespace, so ns1:Custom=\r\nerType and ns0:CustomerType are no longer equivalent even though there shap=\r\ne is exactly the same! =C2=A0This means an entire rev of the application is=\r\n required to accommodate something as trivial as a change in namespace.&lt;/di=\r\nv&gt;\n\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Lets say the developer threw out the marshaling fr=\r\namework and worked directly at the request/response level where they are ab=\r\nle to inspect the byte stream. =C2=A0Now they could take the request and st=\r\nuff it into an XSD validating parser but this won&#39;t buy them anything b=\r\neyond the recently discarded framework. =C2=A0Instead, using xpath, a devel=\r\noper finds all the CustomerTypes (e.g. //Customer) and processes each eleme=\r\nnt, regardless of the location in the document. =C2=A0The code is not as sh=\r\nort when the documents are marshaled into an object, but it&#39;s much more=\r\n accommodating. =C2=A0It also avoids the marshaling overhead when only a ha=\r\nndful of values are needed.&lt;/div&gt;\n\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;But wait, doesn&#39=\r\n;t this boil into a big ball of mud? =C2=A0Perhaps, but only if you let it.=\r\n =C2=A0It could lead to a huge if/then/else mess, but there are plenty of w=\r\nays to avoid such branching. =C2=A0Better yet, the service can send a redir=\r\nect (3xx?) to another service who can handle an unknown or older type.&lt;/div=\r\n&gt;\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;In short, I would recommend that the handler make it=\r\ns best effort to accommodate the input, trying to not make any assumptions =\r\nabout the structure of the input. =C2=A0This means ditching marshaling stac=\r\nks and handle the bytes directly, querying the document to find matches bas=\r\ned on intent, dump namespaces, ignore case, plan for parent/child relations=\r\nhips being more then one generation apart, and when in doubt, find a meanin=\r\ngful response code in HTTP to signal the user what went wrong.&lt;/div&gt;\n\n\n&lt;div=\r\n&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;-Noah&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;PS. =C2=A0I tried to tighten=\r\n up my grammar. =C2=A0I had a head cold and an itch to push send. =C2=A0Sor=\r\nry for the previous mistakes.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;div class=3D&quot;gmail_quote&quot;&gt;On M=\r\non, Sep 14, 2009 at 11:40 AM, Peter Williams &lt;span dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=\r\n=3D&quot;mailto:pezra@...&quot; target=3D&quot;_blank&quot;&gt;pezra@...=\r\n&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;\n\n\n&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;mar=\r\ngin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex&quot;&gt;&lt;div&gt;On Mon, Se=\r\np 14, 2009 at 10:26 AM, Noah Campbell &lt;&lt;a href=3D&quot;mailto:noahcampbell@gm=\r\nail.com&quot; target=3D&quot;_blank&quot;&gt;noahcampbell@...&lt;/a&gt;&gt; wrote:&lt;br&gt;\n\n\n\n&lt;br=\r\n&gt;\n&gt; The same goes for application/xml, it just folks want to have it&lt;br&gt;=\r\n\n&gt; bind to a schema so the tools know who to consume the document in its=\r\n&lt;br&gt;\n&gt; entirety. This is brittle since the serialization techniques rely=\r\n&lt;br&gt;\n&gt; on a very concise definition of the payload. Anything out of the&lt;=\r\nbr&gt;\n&gt; ordinary causes an exception or error.&lt;br&gt;\n&lt;br&gt;\n&lt;/div&gt;In my view t=\r\nhe problem is not that `application/xml` deserialization&lt;br&gt;\nis often rathe=\r\nr unforgiving. =C2=A0(That is an issue, but it&#39;s just an&lt;br&gt;\nimplementa=\r\ntion detail.) =C2=A0The real problem is that media types like&lt;br&gt;\n`applicat=\r\nion/xml` do describe the semantics at all. =C2=A0When a request&lt;br&gt;\nclaims =\r\nto accept `application/xml` what does that really mean? RSS?&lt;br&gt;\nMaybe Atom=\r\n? =C2=A0Maybe BPML? =C2=A0Or perhaps some proprietary inventory xml&lt;br&gt;\nfor=\r\nmat?&lt;br&gt;\n&lt;br&gt;\nI think Jan Algermissen was pointing out is that the client s=\r\nhould&lt;br&gt;\nprovide a sufficiently precise media type in it&#39;s content typ=\r\ne and&lt;br&gt;\naccept header fields that the server, and all the intermediates t=\r\nhat&lt;br&gt;\ncare, know what it really needs to function correctly.&lt;br&gt;\n&lt;br&gt;\nXHT=\r\nML meets this standard not because it has a well defined syntax but&lt;br&gt;\nbec=\r\nause a great deal of work has gone into describing the semantics of&lt;br&gt;\nwha=\r\nt its grammar means. =C2=A0However, using XHTML as a container for&lt;br&gt;\nappl=\r\nication specific data while not utilizing its core semantics seems&lt;br&gt;\nto m=\r\niss the mark. =C2=A0If the server could reasonably produce a response&lt;br&gt;\nf=\r\nor the content type and acceptable media types of a request that&lt;br&gt;\nwould =\r\ncause the client to not function then the media type is not&lt;br&gt;\nspecific en=\r\nough. =C2=A0Using XHTML as a container format puts you in&lt;br&gt;\nexactly that =\r\nposition.&lt;br&gt;\n&lt;font color=3D&quot;#888888&quot;&gt;&lt;br&gt;\n--&lt;br&gt;\nPeter Williamsthat&lt;br&gt;\n&lt;a=\r\n href=3D&quot;http://barelyenough.org&quot; target=3D&quot;_blank&quot;&gt;http://barelyenough.org=\r\n&lt;/a&gt;&lt;br&gt;\n&lt;/font&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;\n\r\n--000e0cd32874fb40d90473ab37f9--\r\n\n"}}
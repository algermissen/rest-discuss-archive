{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"eXPsnC1DvqeBHW1n_GUZFn1bLjRpGl39Wtf2h377-s6h1ou1VaXRb0YzLRq1Qa5CM7jaNiCdmSuKvWIkXo1QMQtDHJRk1xtAbCJVXTKCVw","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: RESTful design for Articles & Tags?","postDate":"1198929873","msgId":10118,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PFcyOTE4OTU2MDg2MzE0MTE5ODkyOTg3M0BtYWlsLm1haWxzbmFyZS5uZXQ+"},"prevInTopic":10114,"nextInTopic":10119,"prevInTime":10117,"nextInTime":10119,"topicId":9891,"numMessagesInTopic":99,"msgSnippet":"... But, if you *are* dealing with nails, isn t the appropriate tool a hammer? What I mean is, Drupal is a system for managing HTML documents, right?  So, what","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 26266 invoked from network); 29 Dec 2007 12:04:34 -0000\r\nX-Received: from unknown (66.218.67.97)\n  by m43.grp.scd.yahoo.com with QMQP; 29 Dec 2007 12:04:34 -0000\r\nX-Received: from unknown (HELO mail.mailsnare.net) (209.236.228.78)\n  by mta18.grp.scd.yahoo.com with SMTP; 29 Dec 2007 12:04:34 -0000\r\nX-Virus-Scanned: by ClamAV at mailsnare.net\r\nX-Message-ID: 749f92e98ac7daa1b40c7093adeba4681e7bd0d5869d272e49d9ebde58f8da29\r\nX-Received: from mail.mailsnare.net (unknown [209.236.228.74])\n\tby mail.mailsnare.net (Postfix) with ESMTP id 5ED474049E\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Sat, 29 Dec 2007 12:04:33 +0000 (UTC)\r\nTo: rest-discuss@yahoogroups.com\r\nImportance: Normal\r\nSensitivity: Normal\r\nMessage-ID: &lt;W29189560863141198929873@...&gt;\r\nX-Mailer: Mintersoft EdgeDesk, Build 4.03.0105\r\nDate: Sat, 29 Dec 2007 12:04:33 +0000\r\nOrganization: Bison Systems Corporation\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;utf-8&quot;\r\nContent-Transfer-Encoding: 8bit\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nReply-To: eric@...\r\nSubject: Re: RESTful design for Articles & Tags?\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\nMike Schinkel wrote:\n&gt;\n&gt; IOW, RegEx and XSLT let me consider things to be nails, but I&#39;d really like\n&gt; to have tools that are better designed for things that are not nails.\n&gt;\n\nBut, if you *are* dealing with nails, isn&#39;t the appropriate tool a hammer?  \nWhat I mean is, Drupal is a system for managing HTML documents, right?  So, \nwhat is the point of using a SQL database for this task, as opposed to say, \nan XML database which *is* designed to handle marked-up documents?  If \nyou insist that documents must be derived from SQL databases, then yes, \nperhaps JSON is a better alternative.  But, I see collections of marked-up \ndocuments as an ideal use of XML, specifically Atom.  We aren&#39;t talking \nabout some theoretical problem here, we&#39;re talking about documents and \ndiscussion threads and such, which model a lot better as Atom than they do \nas SQL, IMHO.\n\n&gt;\n&gt;&gt; Any time I can use an engine to complete a task, I&#39;ll do that\n&gt;&gt; before I start to write script or code.\n&gt;\n&gt; Ditto, but...\n&gt;\n&gt;&gt; And right now the\n&gt;&gt; XML family offers a great number of useful engines. And I can\n&gt;&gt; count on consistent performance on any platform and almost\n&gt;&gt; any language.\n&gt;\n&gt; ...they must be deployed and JSON parsing directly to objects is deployed by\n&gt; default in browsers.\n&gt;\n\nGranted, JavaScript is deployed in more browsers than XML, but I wouldn&#39;t \ngo so far as to call it a default.  I would go so far as to say that, where \nXML has been deployed in browsers, it is much more consistent cross-platform \nthan JavaScript.  Developing and debugging AJAX applications cross-browser \nis 100 times more of a chore than XSLT apps.\n\n&gt;\n&gt; There are not opt-in when a web service that I need to consume requires me\n&gt; to use them. That&#39;s why I said my opinion was that XML with all its baggage\n&gt; works best when you control the development of both the client and the\n&gt; server.\n&gt;\n\nA web service which requires me to use XSLT is using standards that anyone \ncan look up and implement (if needed), whereas a service feeding me JSON is \nrequiring me to opt-in to a code library to understand how objects are \nconverted into markup, and understand the client-by-client implementation \ndifferences.  Such a service would have a much steeper learning curve and \ngreater maintenance hassles, than a system which accomplishes the same \nthing using Atom + XSLT.\n\nAristotle Pagaltzis wrote:\n&gt;\n&gt; (well, unless you serve transformations to clients as a sort of code-on-\n&gt; demand approach, I suppose â€“ a rather hypothetical scenario)\n&gt;\n\nNothing hypothetical about it, see the link below...\n\nIsn&#39;t that a much lighter-weight solution?  Opera is on the verge (9.5 is in \nbeta) of adding the document() function, making all the major browsers XSLT-\ncompatible (even if Microsoft doesn&#39;t follow the standards, quite).  Which \nmeans a server can send Atom to browsers, with an XML PI to fire off a \nclient-side XSLT transformation, which only needs to be coded once as it is \nonly a couple of lines different from the identical XSLT code on the server, \nwhich can generate HTML for clients that don&#39;t have XSLT.\n\nWith this JSON/AJAX approach, the fallback for browsers with no JavaScript \nwould be what, PHP?  So that&#39;s PHP and JavaScript being used to accomplish \nthe transformation task XSLT was designed for, except with twice the labor \noverhead.  Using Atom + XSLT, the fallback for clients that don&#39;t grok XSLT \nis Atom, much more likely to be understood as a raw document than JSON.\n\nOK, OK, I&#39;ll post an URL to illustrate, but please bear in mind this is \nalpha code and needs a major rewrite, especially conneg.  For now, all \nversions of Safari and Firefox are treated as XSLT clients, and all \nversions of Opera are treated as non-XSLT clients.  Which is why I use \ncookies as part of conneg, so you can override conneg using an (optional) \nparameter on the URL and bookmark individual variants...\n\nAnyway, give this a try:\n\nhttp://ericjbowman.com/2006/aug/09/11;view=xslt\n\nThe output from WordPress is all Atom and is stored in an XML database, \nMySQL is still there to make the admin interface work, etc.  If your \nbrowser supports XSLT, all data transfers could be Atom documents (although \nour setup uses an extra step, the gist is Atom --&gt; XSLT --&gt; (X)HTML).  If \nnot, the same XSLT code just runs on the server.  So, content negotiation \naside, all that&#39;s really needed in order to enable a server-side XSLT \napproach to work client-side on modern Web browsers is to add one line of \ncode, an XML PI, to the Atom output.  Does it get any simpler?  Go XML!\n\nMy point is to keep an open mind about what browsers can do these days.  \nJavaScript is no longer the only viable alternative for client-side coding.  \nI guess my other point, is that PHP apps don&#39;t really need to know how to \nhandle XML, to generate XML.\n\n-Eric\n\n\n\n\n"}}
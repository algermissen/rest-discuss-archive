{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":63473576,"authorName":"Lucas Gonze","from":"&quot;Lucas Gonze&quot; &lt;lucas@...&gt;","profile":"lucas_gonze","replyTo":"SENDER","senderId":"_OPVg74D1ZTz5KhAs8pB_gzr-gKWueJErmIbOh7dHy_Ege68i8jzO_vgoiwXAHFv_E8-6B29CSqkCc71XmoDYJse3MtaXQ","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Expiration","postDate":"1012532769","msgId":506,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PE5FQkJKSUhNTUxLSEVPUE5PR0hEQ0VDTkZLQUEubHVjYXNAZ29uemUuY29tPg=="},"prevInTopic":0,"nextInTopic":508,"prevInTime":505,"nextInTime":507,"topicId":506,"numMessagesInTopic":8,"msgSnippet":"I have gone through the language regarding watch expiration and have the following comments. * Dates may not be the only, or even the most, important semantic","rawEmail":"Return-Path: &lt;lucas@...&gt;\r\nX-Sender: lucas@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_0_1_3); 1 Feb 2002 03:07:08 -0000\r\nReceived: (qmail 34152 invoked from network); 1 Feb 2002 03:07:08 -0000\r\nReceived: from unknown (216.115.97.167)\n  by m12.grp.snv.yahoo.com with QMQP; 1 Feb 2002 03:07:08 -0000\r\nReceived: from unknown (HELO mail2.panix.com) (166.84.0.213)\n  by mta1.grp.snv.yahoo.com with SMTP; 1 Feb 2002 03:07:07 -0000\r\nReceived: from mailspool1.panix.com (mailspool1.panix.com [166.84.0.210])\n\tby mail2.panix.com (Postfix) with ESMTP id 0EE7D91E4\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Thu, 31 Jan 2002 22:07:07 -0500 (EST)\r\nReceived: from lucas (159-98.nyc.dsl.access.net [166.84.159.98])\n\tby mailspool1.panix.com (Postfix) with SMTP id 2D5AA12E41\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Thu, 31 Jan 2002 22:07:06 -0500 (EST)\r\nTo: &quot;Rest-Discuss&quot; &lt;rest-discuss@yahoogroups.com&gt;\r\nSubject: Expiration\r\nDate: Thu, 31 Jan 2002 22:06:09 -0500\r\nMessage-ID: &lt;NEBBJIHMMLKHEOPNOGHDCECNFKAA.lucas@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain;\n\tcharset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: 7bit\r\nX-Priority: 3 (Normal)\r\nX-MSMail-Priority: Normal\r\nX-Mailer: Microsoft Outlook IMO, Build 9.0.2416 (9.0.2910.0)\r\nX-MIMEOLE: Produced By Microsoft MimeOLE V5.00.2919.6600\r\nImportance: Normal\r\nFrom: &quot;Lucas Gonze&quot; &lt;lucas@...&gt;\r\nX-Yahoo-Group-Post: member; u=63473576\r\nX-Yahoo-Profile: lucas_gonze\r\n\r\nI have gone through the language regarding watch expiration and have\nthe following comments.\n\n* Dates may not be the only, or even the most, important semantic for\nexpirations.  The most obvious exception is a request for one single\nnotification.  A usecase for one-shot notifications is a user\nrequesting a resource that is not yet available.  Another possible\nexception is a pay-per-use magazine subscription, where a user buys\ntwelve monthly updates.  I suggest that &quot;Requested-Expiration&quot; be\nrenamed &quot;Requested-Expiration-Date&quot; and second expiration header named\n&quot;Requested-Expiration-Count&quot; be added.  Finally, there is a third\npossible semantic that is probably the default case: &quot;do this watch\nfor as long as you feel like&quot;.\n\n* The prefix &quot;Requested-&quot; is redundant.  Better wording would be\n&quot;Expiration-Date&quot; and &quot;Expiration-Count&quot;.\n\n* If a publisher rejects a watch request because of an unsupported expiration\nsetting (such as a date too far in the future or a count beyond what has been\npaid for), the requester should be able to diagnose the problem.  There should\nbe a return status code for &quot;Invalid value for requested expiration&quot;.  Because\nnew global HTTP status codes are undesirable, possible candidates from existing\nstatus codes are:\n&quot;417&quot;  ; Section 10.4.18: Expectation Failed\n&quot;412&quot;  ; Section 10.4.13: Precondition Failed\n&quot;409&quot;  ; Section 10.4.10: Conflict\n\nNone of these is ideal.  However, 417 brings up the possibility of\n_not_ using a new header dedicated to expiration, because an expect\nheader already exists to support the need:\nExpect: Expiration;date=Jan 1, 2003\nExpect: Expiration;count=12\nExpect: Expiration;adhoc\n\nUnfortunately the 417 status code indicates that the expiration\nheader is not supported rather than that the expiration value was\nunacceptable.  Are there solutions within RFC 2616?\n\nThe 412 status code is a fairly good match, though I don&#39;t quite\nunderstand it.  Here is the definition:\n\n10.4.13 412 Precondition Failed\n   The precondition given in one or more of the request-header fields\n   evaluated to false when it was tested on the server. This response\n   code allows the client to place preconditions on the current resource\n   metainformation (header field data) and thus prevent the requested\n   method from being applied to a resource other than the one intended.\n\nPlacing preconditions sounds like just the right thing, but the\nproblem in this case would have nothing to do with getting the wrong\nresource.\n\nThe 409 status code is IMO the best match:\n\n10.4.10 409 Conflict\n    The request could not be completed due to a conflict with the current\n   state of the resource. This code is only allowed in situations where\n   it is expected that the user might be able to resolve the conflict\n   and resubmit the request. The response body SHOULD include enough\n    information for the user to recognize the source of the conflict.\n   Ideally, the response entity would include enough information for the\n   user or user agent to fix the problem; however, that might not be\n   possible and is not required.    Conflicts are most likely to occur\n   in response to a PUT request. For\n   example, if versioning were being used and the entity being PUT\n   included changes to a resource which conflict with those made by an\n   earlier (third-party) request, the server might use the 409 response\n   to indicate that it can&#39;t complete the request. In this case, the\n   response entity would likely contain a list of the differences\n   between the two versions in a format defined by the response\n   Content-Type.\n\nThis is a fairly good match, so I would adopt it.\n\n* The &quot;subscription-expiration&quot; header is required.  Since it\nis reasonable that many requests will be on a &quot;good enough&quot; basis\n(&quot;do the watch for as long as is feasible&quot;), I suggest that this be\nthe default value.  If there is a default value then there is no need\nto have an expiration request header be a MUST.\n\n* I believe that this language overspecifies: &quot;The client MAY renew\nthe subscription before this time. If it does not, the server MAY stop\nsending notifications after that time. The server MAY also remove the\nSubscription URI.&quot;  This behavior should be left to the implementation.\n\n* There is no need to assume that the above list of types of expiration is\nexhaustive.  The specification should allow for extension.\n\nPutting all the above together, I propose that the following text:\n&quot;Expiration: The response to the Subscription MUST include a header\ncalled &quot;Subscription-Expiration&quot;. This indicates the time that the\nsubscription expires. The client MAY renew the subscription before\nthis time. If it does not, the server MAY stop sending notifications\nafter that time. The server MAY also remove the Subscription URI.&quot;\n\nBe changed to the following:\n\nExpiration: The response to the Subscription MAY include a header\ncalled &quot;Subscription-Expiration&quot;.  The expiration may take any of the\nfollowing forms:\nExpect: Expiration;date=Jan 1, 2003\nExpect: Expiration;count=12\nExpect: Expiration;adhoc\nExpect: Expiration;extension-field\n\nextension-field  = token [ &quot;=&quot; ( token | quoted-string ) ]\n\nIn the case of Expiration;date, the field value is an HTTP-date, as\ndescribed in section 3.3.1; it MUST be sent in RFC 1123 [8]-date format.\n\nIn the case of Expiration;count, the field value is an unsigned\ninteger.\n\nIn the case of Expiration;adhoc, the server may cease performing the\nwatch at any time.  If the request does not specify an expiration, a\nserver MUST use an expiration setting equivalent to Expiration;adhoc.\nIt is expected that servers will continue performing an\nExpiration;adhoc watch for as long as is practically feasible.\n\nAll responses to the watch request that are rejected for reasons of\nunacceptable expiration field values MUST use status code 409 (Conflict).\n\n- Lucas\n\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":242972596,"authorName":"Jørn Wildt","from":"=?iso-8859-1?Q?J=F8rn_Wildt?= &lt;jw@...&gt;","profile":"jorn_lind_nielsen","replyTo":"SENDER","senderId":"W0OXaQTvg3XAGNJ_kWMr3fQ2VwLZKlQ2ybGPdzeIbVG4E778jjyMLKpvxYCh7sVA7HYIbeAWfOFk2mVd5e7gLV9JEi1xCtaGIcTxB4DW3-EYKrcz9rGXAdA","spamInfo":{"isSpam":false,"reason":"3"},"subject":"RESTful claims-based authorization","postDate":"1262048379","msgId":14426,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDlBOTUzMDlBOTU3NTQwMTJCQzg3RTFGMEE4MjFGNTVDQEpyblBDPg=="},"prevInTopic":0,"nextInTopic":14436,"prevInTime":14425,"nextInTime":14427,"topicId":14426,"numMessagesInTopic":4,"msgSnippet":"Is there any standard RESTful way of doing claims based authorization a la SAML and CardSpace? The authorization schemes I have seen so far usually encodes a","rawEmail":"Return-Path: &lt;jw@...&gt;\r\nX-Sender: jw@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 32337 invoked from network); 29 Dec 2009 00:58:51 -0000\r\nX-Received: from unknown (66.196.94.106)\n  by m1.grp.sp2.yahoo.com with QMQP; 29 Dec 2009 00:58:51 -0000\r\nX-Received: from unknown (HELO smtp1.cybercity.dk) (212.242.43.251)\n  by mta2.grp.re1.yahoo.com with SMTP; 29 Dec 2009 00:58:51 -0000\r\nX-Received: from uf7.cybercity.dk (uf7.cybercity.dk [212.242.42.164])\n\tby smtp1.cybercity.dk (Postfix) with ESMTP id C9F6A586814\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Tue, 29 Dec 2009 02:01:48 +0100 (CET)\r\nX-Received: from JrnPC (c-98-216-208-46.hsd1.ma.comcast.net [98.216.208.46])\n\t(Authenticated sender: dsl164923)\n\tby uf7.cybercity.dk (Postfix) with ESMTPA id 8E9397E8019\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Tue, 29 Dec 2009 01:58:47 +0100 (CET)\r\nMessage-ID: &lt;9A95309A95754012BC87E1F0A821F55C@JrnPC&gt;\r\nTo: &quot;REST Discuss&quot; &lt;rest-discuss@yahoogroups.com&gt;\r\nDate: Mon, 28 Dec 2009 19:59:39 -0500\r\nMIME-Version: 1.0\r\nContent-Type: text/plain;\n\tformat=flowed;\n\tcharset=&quot;iso-8859-1&quot;;\n\treply-type=original\r\nContent-Transfer-Encoding: 8bit\r\nX-Priority: 3\r\nX-MSMail-Priority: Normal\r\nX-Mailer: Microsoft Windows Mail 6.0.6002.18005\r\nX-MimeOLE: Produced By Microsoft MimeOLE V6.0.6002.18005\r\nX-eGroups-Msg-Info: 2:3:4:0:0\r\nFrom: =?iso-8859-1?Q?J=F8rn_Wildt?= &lt;jw@...&gt;\r\nSubject: RESTful claims-based authorization\r\nX-Yahoo-Group-Post: member; u=242972596; y=VcESwOa_4erZS8N1qmiycyI1EnsVGfc4jRZFEFMoaR0MLicyd2P54G0-4uU\r\nX-Yahoo-Profile: jorn_lind_nielsen\r\n\r\nIs there any standard RESTful way of doing claims based authorization a&#39;la \nSAML and CardSpace? The authorization schemes I have seen so far usually \nencodes a user reference and nothing more - there&#39;s no secure way to assert \nclaims like email=xxx@... or employeenumber=12345 or age-below-twenty.\n\nI guess you can use SAML &quot;HTTP Redirect (GET) Binding&quot;, but that generates \nsuch a huge URL that it seems impractical to use (it&#39;s a base-64 encoding of \na zip-encoding of a SAML XML document).\n\nAs I understand it a RESTful authorization scheme must be stateless, so you \ncannot rely on any kind of session use. This means you have to transfer all \nthe claims on each and every request which again means a potentially big \noverhead.\n\nWhat is needed is a standard way of encoding multiple claims in a compact, \nsecure, trusted way such that they can be transferred on each request \nwithout too much overhead (including whatever crypto stuff is needed).\n\nMaybe you could create a temporary ressource somewhere with the claims, then \nat least you only had to transfer the claims URL, not all the claims, and \nthe server could then cache these claims.\n\nAny ideas or references?\n\nIt even occurs to me that claims could be more RESTful than \nusername/password since they don&#39;t require any out-of-band setup of user \naccounts. All that is needed is a standard for claims and then everything \nshould work if the claims are issued by an authority that the web service \ntrusts. No need for any human interaction - the server just sends a \nchallenge &quot;show me your claims (and I accept them from authority X, Y and \nZ)&quot; whereafter the client sends the claims. These claims can even be \nobtained without human interaction if the client and the claims server trust \neach other.\n\nComments?\n\nThanks, J�rn \n\n\n"}}
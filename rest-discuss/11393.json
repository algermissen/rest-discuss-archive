{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":352334505,"authorName":"Craig McClanahan","from":"&quot;Craig McClanahan&quot; &lt;craigmcc@...&gt;","profile":"craig_mcclanahan","replyTo":"SENDER","senderId":"cR_vyJG-1ORG-yL9H42b0KUvo0HH4_LcRejk3RSmMAgEftzQbhPfhKvG5_rNnL2sgm_avvUUZKoBS7qIzBMs_nM209jO8XibgWiCkkgN","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] (Logical) Resources vs Web Service code","postDate":"1224525493","msgId":11393,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGY4YjM5YWNlMDgxMDIwMTA1OGdlMjU0ZGM2dWY1MTgyZjcxYzBlN2E0ODBAbWFpbC5nbWFpbC5jb20+","inReplyToHeader":"PDQ4NDM1Ni41NjU4OC5xbUB3ZWIyODMxMC5tYWlsLnVrbC55YWhvby5jb20+","referencesHeader":"PDQ4NDM1Ni41NjU4OC5xbUB3ZWIyODMxMC5tYWlsLnVrbC55YWhvby5jb20+"},"prevInTopic":11392,"nextInTopic":11395,"prevInTime":11392,"nextInTime":11394,"topicId":11392,"numMessagesInTopic":3,"msgSnippet":"... The details of how the server implementation is organized are *strongly* dependent on programming language, and what kind of framework (if any) you choose","rawEmail":"Return-Path: &lt;craigmcc@...&gt;\r\nX-Sender: craigmcc@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 83246 invoked from network); 20 Oct 2008 17:58:14 -0000\r\nX-Received: from unknown (66.218.67.97)\n  by m57.grp.scd.yahoo.com with QMQP; 20 Oct 2008 17:58:14 -0000\r\nX-Received: from unknown (HELO mail-gx0-f20.google.com) (209.85.217.20)\n  by mta18.grp.scd.yahoo.com with SMTP; 20 Oct 2008 17:58:14 -0000\r\nX-Received: by mail-gx0-f20.google.com with SMTP id 13so5056630gxk.12\n        for &lt;rest-discuss@yahoogroups.com&gt;; Mon, 20 Oct 2008 10:58:14 -0700 (PDT)\r\nX-Received: by 10.150.150.3 with SMTP id x3mr12640745ybd.147.1224525493823;\n        Mon, 20 Oct 2008 10:58:13 -0700 (PDT)\r\nX-Received: by 10.151.46.15 with HTTP; Mon, 20 Oct 2008 10:58:13 -0700 (PDT)\r\nMessage-ID: &lt;f8b39ace0810201058ge254dc6uf5182f71c0e7a480@...&gt;\r\nDate: Mon, 20 Oct 2008 10:58:13 -0700\r\nTo: &quot;Sean Kennedy&quot; &lt;seandkennedy@...&gt;\r\nCc: &quot;Rest Discussion Group&quot; &lt;rest-discuss@yahoogroups.com&gt;\r\nIn-Reply-To: &lt;484356.56588.qm@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: 7bit\r\nContent-Disposition: inline\r\nReferences: &lt;484356.56588.qm@...&gt;\r\nX-Google-Sender-Auth: ab0c4818f70f50b5\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nX-eGroups-From: &quot;Craig McClanahan&quot; &lt;craigmcc@...&gt;\r\nFrom: &quot;Craig McClanahan&quot; &lt;craigmcc@...&gt;\r\nSubject: Re: [rest-discuss] (Logical) Resources vs Web Service code\r\nX-Yahoo-Group-Post: member; u=352334505; y=5Jq6qUen5WYJ2YQ9GHN-y4PtAAss2ImKvQ7ltpMmJ66_PhM6s8Dof4R0jw\r\nX-Yahoo-Profile: craig_mcclanahan\r\n\r\nOn Mon, Oct 20, 2008 at 10:00 AM, Sean Kennedy &lt;seandkennedy@...&gt; wrote:\n&gt; Hi,\n&gt;    I have a question as to how resources and Web Services are\n&gt; organised/differentiated on the server:\n&gt;\n&gt; - if you have many logical parts as in\n&gt; http://www.xfront.com/REST-Web-Services.html where are the GETs inserted. I\n&gt; presume there is not a GET method (i.e. code) on each possible URI requested\n&gt; (as there could be thousands) i.e. :\n&gt;\n&gt; http://www.parts-depot.com/parts/00345\n&gt; http://www.parts-depot.com/parts/00346\n&gt; http://www.parts-depot.com/parts/00347 etc...\n&gt;\n&gt; But I also doubt there is a single endpoint (like SOAP has) where\n&gt;  there is a parse of the URI. The crux of\n&gt; my q is the logical URI versus where the GET code is put...\n&gt;\n&gt; Thanks,\n&gt; Sean.\n&gt;\n\nThe details of how the server implementation is organized are\n*strongly* dependent on programming language, and what kind of\nframework (if any) you choose to help you.  Here&#39;s a Java based\nexample using the JAX-RS[1] &quot;RESTful Web Services&quot; APIs -- JAX-RS\nrecently went to 1.0 final, and I&#39;ve had lots of success with\nJersey[2], the production quality reference implementation.\n\n    @Path(&quot;/parts&quot;)\n    public class PartsResource {\n\n        @GET\n        @Path(&quot;{id})\n        @Produces({&quot;application/xml&quot;, &quot;text/xml&quot;, &quot;application/json&quot;})\n        public Response find(@PathParam(&quot;id&quot;) String id) {\n            Part part = MyBusinessLogic.findPartById(id);\n            if (part != null) {\n                return Response.ok(part).build();\n            } else {\n                return Response.status(404).build();\n            }\n       }\n\n    }\n\nThere&#39;s a bit of &quot;magic&quot; going on here if you&#39;re not familiar with\nJAX-RS, so here are some clues to what is happening:\n\n* The @Path annotation on the class itself says this class responds to\nall URLs that begin with &quot;/parts&quot;.\n\n* The annotations on the find() method state:\n  - This method responds to GET requests\n  - It captures the second segment of the URL (/parts/xxxxx) in a\ntemplate variable named &quot;id&quot;\n  - It can produce either XML or JSON, depending on what media type\nthe client asked for\n    in the &quot;Accept&quot; header of the request\n\n* The &quot;id&quot; path parameter is passed in as a method parameter named\n&quot;id&quot; (not required, but logical)\n\n* A good resource class IMHO should play only the MVC controller role,\nso actually accessing\n  the underlying data in your system should be delegated to\nappropriate business logic\n  using your favorite implementation techniques.\n\n* If a part with the specified ID is found, it is returned in a status\ncode 200 response.  The\n  actual serialization of a Part instance is delegated to either a\n&quot;provider&quot; class that you\n  supply in your application, or (if you are using JAXB to create your\nJava model classes,\n  you get it &quot;for free&quot;).\n\n* If a part with the specified ID is not found, return a 404 &quot;Not\nFound&quot; status instead,\n  in accordance with RESTful principles.\n\nOf course, this isn&#39;t the only way to do it with JAX-RS, and certainly\nnot the only possible framework even for Java ... but I suspect most\nserver side frameworks will offer a similar abstraction that lets you\nuse a single method to process an entire set of request URIs, with the\nframework picking the right method based on the incoming URI, the\nrequest verb, and the requested content types.\n\nCraig McClanahan\n\n[1] http://jcp.org/en/jsr/detail?id=311\n[2] https://jersey.dev.java.net\n\n"}}
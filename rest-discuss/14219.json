{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":289191104,"authorName":"Jan Algermissen","from":"Jan Algermissen &lt;algermissen1971@...&gt;","profile":"algermissen1971","replyTo":"SENDER","senderId":"U5S5QzxOTpy-nwnTLKkniCWEj8XIqrdMHuryaDOcxM56sBT08tszmNMVPc8bEc09veAXwjEIMkPLR_0zduE_px5TqHEyjmjYAkwSJwnFDZQ","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] RESTful M2M Systems and Resource Typing","postDate":"1261159837","msgId":14219,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDM0MjZDRjI2LTg1OEMtNDJEMi1CRTcwLUNFQ0U0RUMwMDQ0QkBtYWMuY29tPg==","inReplyToHeader":"PDM0M2VjYjNlMDkxMjE4MDkzM3M0MTJhZTlkY3kyMzQ0ZWNiNTFjY2VjMTc1QG1haWwuZ21haWwuY29tPg==","referencesHeader":"PENCNEU1MkVDLTQ2RTktNDhFNC05QkY2LTVFNUVFMjg1NDM4OEBtYWMuY29tPiA8NkY2NTkxMzItN0IzQi00MjAwLUFCNTMtNDJCMzIyNUFFQTQzQG1hYy5jb20+IDw0QjJBMEFDMi4xMDgwNjA3QG15a2Fuam8uY28udWs+IDw2MzQ1NTVBRC04OUZCLTQ2ODctQkFENS1GODVCQzQyMzE0QUZAbWFjLmNvbT4gPDRCMkEzQ0JFLjQwNTA0MDFAbXlrYW5qby5jby51az4gPEM3NEEwRjUzLTdEMzEtNDk3Ni04MDU4LUNCRDBERjI3ODg0QUBtYWMuY29tPiA8NEIyQjc2RTcuMzAyMDIwMUBteWthbmpvLmNvLnVrPiA8MTk2MkJDNUYtNkJFMi00QjRBLTk4RUYtMThEMzkzMDM1RjJFQG1hYy5jb20+IDwzNDNlY2IzZTA5MTIxODA3MTB4OWIyOTU4OWs5MTY5YWZlYzMxYmIyZjIwQG1haWwuZ21haWwuY29tPiA8OUQ5OUZEMDItMTcwNy00OTIxLTkxNUEtNUREMDM0RERCNDEzQG1hYy5jb20+IDwzNDNlY2IzZTA5MTIxODA5MzNzNDEyYWU5ZGN5MjM0NGVjYjUxY2NlYzE3NUBtYWlsLmdtYWlsLmNvbT4="},"prevInTopic":14218,"nextInTopic":14220,"prevInTime":14218,"nextInTime":14220,"topicId":14156,"numMessagesInTopic":134,"msgSnippet":"... An ordering example: Suppose you are to design an ordering service. You might do the following: (A rather silly approach, but suitable for this example) ","rawEmail":"Return-Path: &lt;algermissen1971@...&gt;\r\nX-Sender: algermissen1971@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 88677 invoked from network); 18 Dec 2009 18:10:48 -0000\r\nX-Received: from unknown (98.137.34.45)\n  by m2.grp.sp2.yahoo.com with QMQP; 18 Dec 2009 18:10:48 -0000\r\nX-Received: from unknown (HELO asmtpout016.mac.com) (17.148.16.91)\n  by mta2.grp.sp2.yahoo.com with SMTP; 18 Dec 2009 18:10:48 -0000\r\nMIME-version: 1.0\r\nContent-type: text/plain; charset=WINDOWS-1252; format=flowed; delsp=yes\r\nX-Received: from [192.168.2.102] ([84.144.114.91])\n by asmtp016.mac.com (Sun Java(tm) System Messaging Server 6.3-8.01 (built Dec\n 16 2008; 32bit)) with ESMTPSA id &lt;0KUV004XN15Q4U50@...&gt; for\n rest-discuss@yahoogroups.com; Fri, 18 Dec 2009 10:10:42 -0800 (PST)\r\nCc: REST Discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nMessage-id: &lt;3426CF26-858C-42D2-BE70-CECE4EC0044B@...&gt;\r\nTo: Bob Haugen &lt;bob.haugen@...&gt;\r\nIn-reply-to: &lt;343ecb3e0912180933s412ae9dcy2344ecb51ccec175@...&gt;\r\nContent-transfer-encoding: quoted-printable\r\nDate: Fri, 18 Dec 2009 19:10:37 +0100\r\nReferences: &lt;CB4E52EC-46E9-48E4-9BF6-5E5EE2854388@...&gt;\n &lt;6F659132-7B3B-4200-AB53-42B3225AEA43@...&gt;\n &lt;4B2A0AC2.1080607@...&gt;\n &lt;634555AD-89FB-4687-BAD5-F85BC42314AF@...&gt;\n &lt;4B2A3CBE.4050401@...&gt;\n &lt;C74A0F53-7D31-4976-8058-CBD0DF27884A@...&gt;\n &lt;4B2B76E7.3020201@...&gt;\n &lt;1962BC5F-6BE2-4B4A-98EF-18D393035F2E@...&gt;\n &lt;343ecb3e0912180710x9b29589k9169afec31bb2f20@...&gt;\n &lt;9D99FD02-1707-4921-915A-5DD034DDB413@...&gt;\n &lt;343ecb3e0912180933s412ae9dcy2344ecb51ccec175@...&gt;\r\nX-Mailer: Apple Mail (2.936)\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Jan Algermissen &lt;algermissen1971@...&gt;\r\nSubject: Re: [rest-discuss] RESTful M2M Systems and Resource Typing\r\nX-Yahoo-Group-Post: member; u=289191104; y=yGC8cRRenjxVkUcjt-KnMufbr2QO2f4fCtscwB8jNajk_UHv9afyShmQ\r\nX-Yahoo-Profile: algermissen1971\r\n\r\n\nOn Dec 18, 2009, at 6:33 PM, Bob Haugen wrote:\n\n&gt; On Fri, Dec 18, 2009 at =\r\n10:03 AM, Jan Algermissen\n&gt; &lt;algermissen1971@...&gt; wrote:\n&gt;&gt;\n&gt;&gt; On Dec 1=\r\n8, 2009, at 4:10 PM, Bob Haugen wrote:\n&gt;&gt;\n&gt;&gt;&gt; On Fri, Dec 18, 2009 at 6:58 =\r\nAM, Jan Algermissen\n&gt;&gt;&gt; &lt;algermissen1971@...&gt; wrote:\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; My point=\r\n is that REST forbids that clients make any assumptions  \n&gt;&gt;&gt;&gt; based\n&gt;&gt;&gt;&gt; o=\r\nn such &#39;classification&#39;.\n&gt;&gt;&gt;\n&gt;&gt;&gt; Not trying to argue, just to understand:\n&gt;=\r\n&gt;&gt;\n&gt;&gt;&gt; Where/how does REST forbid such assumptions?  (I just re-scanned  \n&gt;=\r\n&gt;&gt; Roy&#39;s\n&gt;&gt;&gt; dissertation, and might have missed something, but did not see=\r\n\n&gt;&gt;&gt; anything quite that hard and fast.) And what is the functional\n&gt;&gt;&gt; dif=\r\nference between prior assumptions and reacting to or requesting\n&gt;&gt;&gt; media t=\r\nype?\n&gt;&gt;\n&gt;&gt; I think the last post is also answering this. Yes?\n&gt;\n&gt; Not quite=\r\n.\n&gt;\n&gt; From Roy&#39;s blog entry that you quoted:\n&gt; &quot;The only types that are sig=\r\nnificant to a client are the current\n&gt; representation=92s media type and st=\r\nandardized relation names.&quot;\n&gt;\n&gt; Standardized relation names (as I think you=\r\n have argued in this\n&gt; discussion, and I agree) are roughly equivalent to t=\r\nypes in roughly\n&gt; the sense of typed function parameters.  (Handwave handwa=\r\nve handwave\n&gt; magic happens here...)\n&gt;\n&gt;&gt; If you design for a problem space=\r\n that\n&gt;&gt; involves more specific hypermedia semantics you end up with a  \n&gt;&gt;=\r\n coupling that\n&gt;&gt; is surprisingly similar to non uniform interfaces, becaus=\r\ne so many  \n&gt;&gt; things\n&gt;&gt; are being said about resources at design time. You=\r\n end up asking  \n&gt;&gt; yourself:\n&gt;&gt; &quot;Damn, what exactly is it that I actually =\r\n*can* change about a  \n&gt;&gt; service\n&gt;&gt; implementation without messing up the =\r\nclients?&quot; Sure, I can add a new\n&gt;&gt; extension here and add a new supported m=\r\nedia type there - but  \n&gt;&gt; significantly\n&gt;&gt; changing the state machine, for=\r\n example? Not sure.\n&gt;\n&gt; Can you make that all clear with media types and re=\r\nlation names?\n\nAn ordering example:\n\nSuppose you are to design an ordering =\r\nservice. You might do the  \nfollowing:\n(A rather silly approach, but suitab=\r\nle for this example)\n\nDefine a service document media type application/orde=\r\nring-srv+xml that  \nincludes a &lt;order-processor href=3D&quot;&quot;/&gt; element to tell=\r\n the client where  \nthe resource is that accepts orders. Example:\n\n&lt;service=\r\n&gt;\n   &lt;order-processor href=3D&quot;/service/1234&quot;/&gt;\n&lt;/service&gt;\n\nNext, specify th=\r\nat clients place orders by POSTing to the order- \nprocessor resource and th=\r\nat the response will be 201 with location to  \nnew resource that represents=\r\n the order. (This specifies the client  \ngoal of place-order (AtomPub calls=\r\n the client goals &#39;protocol  \noperations&#39;, BTW).\n\nSpecify some application/=\r\norder+xml for representing orders and include  \nan element &lt;lineItems href=\r\n=3D&quot;&quot;&gt; to holde the line items of the order.  \nAn order would look like thi=\r\ns:\n\n&lt;order&gt;\n   &lt;buyuer&gt;...&lt;/buyer&gt;\n   &lt;lineItems href=3D&quot;/orders/6/lineItem=\r\ns&quot;&gt;\n     &lt;items&gt;Green Doll&lt;/item&gt;\n   &lt;/lineItems&gt;\n&lt;/order&gt;\n\nSpecify another=\r\n hypermedia semantic: The list of lineItems of the  \norder is identified by=\r\n the href of the lineItem element.\n\nSpecify another goal &#39;add-lineitem-to-o=\r\nrder&#39; as: POST to the lineItems  \nresource (s.a.) of the order to add a lin=\r\ne item. (Service should  \nrespond with a 303 See Other and the order URI to=\r\n indicate successful  \nupdate of the order.\n\n(Gee - not brilliant but I hop=\r\ne you get the point :-)\n\nNow, you can write a client that places an order a=\r\nnd adds a line item  \nand consists of the following pseudo code:\n\n- bootstr=\r\nap with a GET to the published service URI, receiving the  \nservice documen=\r\nt.\n- client now knows URI of order processor\n- client POSTs order to order =\r\nprocessor\n- client keeps as orderUri the Location URI of the 201 response\n-=\r\n client does a GET on orderUri\n- client uses response to find lineItems res=\r\nource and POSTs new line  \nitem.\n\nThe issue is this: How do you code the cl=\r\nient&#39;s last line without  \nbeing sure about the media type being returned? =\r\nThere is nothing that  \ntells you that the order will be given to the clien=\r\nt as application/ \norder+xml. A human driven client would not care but just=\r\n process the  \nresponse and show whetever state transitions are available t=\r\no the  \nhuman user (one of them possibly being &#39;post here to add line item&#39;=\r\n).  \nIf the response was not application/order+xml the &#39;add line item&#39; goal=\r\n  \nwould not be shown.\n\nThe machine client OTH has the hard coded goal of r=\r\neally adding the  \nline item and to code that you must know that there is a=\r\n reason to  \nexpect the GET on the order to return application/order+xml. T=\r\nhe only  \nway to know that is by baking it into the service specification: =\r\n \nResources that are orders (oops, a &#39;type&#39;!) are represented as  \napplicat=\r\nion/order+xml (maybe others too, but that one at least)\n\nThe effect of this=\r\n is that the client developer knows at design time  \nthat from the applicat=\r\nion state &#39;an order X&#39; there will be a  \ntransition &#39;add line item to X&#39; av=\r\nailable. This is contrary to the  \nidea of the client *discovering* the tra=\r\nnsition at run time.\n\nSure, one could code &quot;if have add-lineItem transition=\r\n then add line  \nitem else do nothing&quot;, but this just turns a failing clien=\r\nt assumption  \ninto the execution of an else-branch. The issue does not go =\r\naway: if  \nyou want to code a client that orders and then adds the line ite=\r\nm you  \nrely on the assumption that after placing an order there will be th=\r\ne  \ntransition to add the line item. This coupldes the server to the  \nclie=\r\nnt quite heavily.\n\nPew - sorry for the mess, I hope you get the point.\n\nJan=\r\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&gt;\n&gt;\n&gt; -----------------------------------=\r\n-\n&gt;\n&gt; Yahoo! Groups Links\n&gt;\n&gt;\n&gt;\n\n--------------------------------------\nJan=\r\n Algermissen\n\nMail: algermissen@...\nBlog: http://algermissen.blogspot.c=\r\nom/\nHome: http://www.jalgermissen.com\n-------------------------------------=\r\n-\n\n\n\n\n"}}
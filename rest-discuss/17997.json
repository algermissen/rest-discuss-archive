{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":69164307,"authorName":"mike amundsen","from":"mike amundsen &lt;mamund@...&gt;","profile":"mamund","replyTo":"SENDER","senderId":"17Stp8i5GwXsHTbV9cBXpNDS8LhXHef1am1DhE0YLWxg4n5DNB9jH6OVbDe5BG2QbbMsNPexj0RF0yzINmNYTz9qceDghzM","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] weighting and boundaries of evolvability and loose coupling?","postDate":"1322873334","msgId":17997,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PENBUFdfOG02LUNTNGpfMHd1OXdoMlI2MVVESDU2LWpqMno1LUdWeXk4OVFzc3JGdE1uQUBtYWlsLmdtYWlsLmNvbT4=","inReplyToHeader":"PDEzMjI4NTY4OTQuOTYxMjIuWWFob29NYWlsQ2xhc3NpY0B3ZWIxMjU1MDEubWFpbC5uZTEueWFob28uY29tPg==","referencesHeader":"PENBUFdfOG00MkorUG1GV2ZyZnEwR1Nmc01rNF9udENINk1FazF6V0RiVmN6T01qV3pXZ0BtYWlsLmdtYWlsLmNvbT4JPDEzMjI4NTY4OTQuOTYxMjIuWWFob29NYWlsQ2xhc3NpY0B3ZWIxMjU1MDEubWFpbC5uZTEueWFob28uY29tPg=="},"prevInTopic":17996,"nextInTopic":17998,"prevInTime":17996,"nextInTime":17998,"topicId":17994,"numMessagesInTopic":15,"msgSnippet":"Kevin: (my regrets for not responding sooner) this is long, my apologies ahead of time. Hopefully the content will be worth the time .  I think I get","rawEmail":"Return-Path: &lt;mca@...&gt;\r\nX-Sender: mca@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 55818 invoked from network); 3 Dec 2011 00:48:56 -0000\r\nX-Received: from unknown (98.137.34.45)\n  by m7.grp.sp2.yahoo.com with QMQP; 3 Dec 2011 00:48:56 -0000\r\nX-Received: from unknown (HELO mail-pz0-f42.google.com) (209.85.210.42)\n  by mta2.grp.sp2.yahoo.com with SMTP; 3 Dec 2011 00:48:55 -0000\r\nX-Received: by dado14 with SMTP id o14so4179521dad.1\n        for &lt;rest-discuss@yahoogroups.com&gt;; Fri, 02 Dec 2011 16:48:55 -0800 (PST)\r\nMIME-Version: 1.0\r\nX-Received: by 10.68.59.101 with SMTP id y5mr1352327pbq.20.1322873335001; Fri,\n 02 Dec 2011 16:48:55 -0800 (PST)\r\nX-Received: by 10.142.196.20 with HTTP; Fri, 2 Dec 2011 16:48:54 -0800 (PST)\r\nIn-Reply-To: &lt;1322856894.96122.YahooMailClassic@...&gt;\r\nReferences: &lt;CAPW_8m42J+PmFWfrfq0GSfsMk4_ntCH6MEk1zWDbVczOMjWzWg@...&gt;\n\t&lt;1322856894.96122.YahooMailClassic@...&gt;\r\nDate: Fri, 2 Dec 2011 19:48:54 -0500\r\nX-Google-Sender-Auth: XfuIdCOhtsMNz9huoU1mVPseusI\r\nMessage-ID: &lt;CAPW_8m6-CS4j_0wu9wh2R61UDH56-jj2z5-GVyy89QssrFtMnA@...&gt;\r\nTo: Kevin Duffey &lt;andjarnic@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nContent-Type: multipart/alternative; boundary=bcaec52e5b7937317504b325733a\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: mike amundsen &lt;mamund@...&gt;\r\nSubject: Re: [rest-discuss] weighting and boundaries of evolvability and loose coupling?\r\nX-Yahoo-Group-Post: member; u=69164307; y=ket3qL0CChf8eQqyPhW3Fob6oklUJvcvFOMbGRIappPf\r\nX-Yahoo-Profile: mamund\r\n\r\n\r\n--bcaec52e5b7937317504b325733a\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nKevin:\n\n(my regrets for not responding sooner)\n\nthis is long, my apologies =\r\nahead of time. Hopefully the content will be\nworth the time&lt;g&gt;.\n\n&lt;snip&gt;\nI t=\r\nhink I get the gist of what you are saying, but I still struggle\nunderstand=\r\ning the various aspects of writing a good rest api as well as\nconsuming one=\r\n.\n&lt;/snip&gt;\ni think that is a common POV. there is not much guidance on this =\r\nprocess.\nthis is proly a good place to discuss it. I&#39;d also encourage you t=\r\no join\nthe Hypermedia-Web discussion list[1] where some other folks working=\r\n in\nthis area also hang out.\n\n&lt;snip&gt;\nI want to provide them with Facebook l=\r\nogin to access the site.. am I now\nconsidered the M2M in this equation.. in=\r\n that I will be writing code on my\nweb app to interface with facebook api?\n=\r\n&lt;/snip&gt;\nWell, it turns out facebook&#39;s API is not very &quot;hypermedia-aware&quot; is=\r\n it?\nActually almost all the OAuth examples I&#39;ve seen are very difficult to=\r\n\n&quot;automate&quot; in an M2M environment; I suspect that&#39;s the goal.  Often we can=\r\n\n&quot;cover&quot; an RPC implementation w/ a hypermedia-aware one (I do this quite a=\r\n\nbit), but sometimes you can&#39;t.\n\nFWIW, I don&#39;t think the Facebook API is a =\r\ngood place to exercise your\nhypermedia skills.\n\n&lt;snip&gt;\nWhat continually con=\r\nfuses me is the idea of trying to remain HATEOAS\ncompliant as I write my ow=\r\nn API, and consuming an API as a developer.\n&lt;/snip&gt;\nDesigning a hypermedia =\r\nAPI is, essentially, designing a media type (or\napplying semantics to an ex=\r\nisting media type). That&#39;s the API. It&#39;s a big\ndiff from most implementatio=\r\nns. Some think it&#39;s not worth the trouble.\n\nOnce the media type is designed=\r\n & documented, the work of implementation\nservers and clients begins. Serve=\r\nrs are pretty straight-forward. Tooling is\nweak in most cases, but for the =\r\nmost part servers just wait for a request,\ndo some work and craft a respons=\r\ne (which may/may-not contain one or more\nhypermedia controls (links & forms=\r\n).\n\nWriting a client is more involved; not terribly difficult, but more wor=\r\nk is\ndone by hypermedia clients (HC) than RPC clients. The HC must &quot;know&quot; t=\r\nhe\nmedia type (not the app) before it can function successfully. And yes, a=\r\ns\nyou say, this means writing clients that are prepared for just about any\n=\r\nreasonable response in that media type. You can limit the effort by\ncreatin=\r\ng a restrictive, small-scope media type design. My Maze+XML design\nhas only=\r\n ten elmenents (five are for errors and debugging), six attributes,\nand nin=\r\ne link relations. Creating clients to navigate mazes is pretty\nsimple, too.=\r\n\n\nThe HAL media type design is even more compact[2]. Now, implementing an H=\r\nC\nthat can handle HTML is quite a feat. There is a wide spectrum between\nMa=\r\nze+XML and HTML, tho.\n\n&lt;snip&gt;\nWithout documenting what resources will resul=\r\nt in a successful (or failed)\nattempt at an admin resource, the developer w=\r\non&#39;t know what to scan for in\nthe &lt;links&gt; elements I return and what they c=\r\nan do next. I have to document\nthe returned links, the rel=3D&quot;&quot; string valu=\r\ne, and what each href resource\npointer will allow them to do, so that the d=\r\neveloper knows ahead of time\nand can make use of the resources as needed.\n&lt;=\r\n/snip&gt;\nYes, you need to document the media type. There are a number of exam=\r\nples\nout there to use as a guide. There is no need to document &quot;all the pos=\r\nsible\nresponses&quot; for a media type (can you imagine what that would entail f=\r\nor\nHTML?). Instead, you document the possible elements that can appear in a=\r\n\nresponse and the rules for those elements (MUST be child elements of X, MA=\r\nY\nhave the following children, etc.).\n\n&lt;snip&gt;\nWhat confuses me about all th=\r\nis is the idea that we can write (and consume)\nevolveable APIs that we know=\r\n nothing about.\n&lt;/snip&gt;\nYeah, that confuses me, too. I don&#39;t talk like that=\r\n and suggest anyone\ntelling you this &quot;you can write and consume an API that=\r\n you know nothing\nabout&quot;) is full of it. If you hear me saying that, call B=\r\nS on me ASAP!\n\n&lt;snip&gt;\nthere is no standard set of link/rel values that work=\r\n the same way for\nevery API.\n&lt;/snip&gt;\nfirst, just as there is no standard se=\r\nmantic for every problem domain,\nyou&#39;re not likely to find a single set of =\r\nstandard rel values for every\nAPI. However, there are a couple sources for =\r\nstandardized rels include the\nthe IANA[3], the Microformat group[4], and th=\r\ne Dublin Core[5]. Many media\ntypes also define their own rels set (includin=\r\ng HTML).\n\nIt is also possible to define and standardize your own rels (in c=\r\nases where\nyou think an important one is missing). I&#39;ve done that at the Mi=\r\ncroformats\nsite and am in the process of doing the same via an IETF Interne=\r\nt Draft.\n\nIn the end, you&#39;ll find that rels provide key mapping between the=\r\n problem\ndomain and the media type. this means, unless your problem domain =\r\nis\nincredibly common, you&#39;ll be using some unique rels in order to express\n=\r\nunique problem domain semantics.\n\n&lt;snip&gt;\nWhat throws me there is.. some lin=\r\nks may be POST only, or UPDATE only, some\nmay support GET,POST, etc.\n&lt;/snip=\r\n&gt;\nTechnically, the *links* don&#39;t hold the rules, the markup *around* the\nli=\r\nnks does. HTML.FORM@method=3D&quot;get&quot; tells you what you need to know. So does=\r\n\natom.link@rel=3D&quot;edit&quot; Now, when you design your own API (XML, JSON, etc.)=\r\n\nyou&#39;ll be responsible for taking care to design these same protocol-level\n=\r\ndetails. If you are using HTTP, the possibilities are few and it&#39;s not at\na=\r\nll hard to design media type elements that clients can easily recognize\n(&lt;u=\r\npdate href=3D&quot;...&quot; /&gt; OR {&quot;delete&quot; : {&quot;href&quot;:...&quot;}}, etc.).\n\nAgain, this wa=\r\ny of designing APIs (the way that includes the hypermedia\npossiblities in r=\r\nesponses, not just the data) is not at all common right\nnow.\n\n&lt;snip&gt;\nAs a d=\r\neveloper using someone&#39;s API to provide my user&#39;s a GUI to use my\nsite, I c=\r\nan&#39;t just go crawling through an API blindly and give my end users\nsome sor=\r\nt of useful functionality from the API.\n&lt;/snip&gt;\nYep, as stated earlier, any=\r\none telling you to &quot;blindly crawl&quot; is tossing\nBS. That not at all needed.\n\n=\r\n&lt;snip&gt;\nI have to know exactly what resource to call (or how to navigate to =\r\nit) and\nwhat it does.\n&lt;/snip&gt;\nWell, your version of &quot;exactly&quot; may vary, but=\r\n yes, client apps will need to\nknow how get convert &quot;intention&quot; into &quot;actio=\r\nn.&quot; That&#39;s what APIs are for.\nThis is the same whether you use SOAP, URI-RP=\r\nC, Hypermedia, etc. The key is\n&quot;how does the client know&quot; With most forms o=\r\nf API, the clients knows\nbecause a document sez so and the developer hard-c=\r\nodes this &quot;knowing&quot; into\nthe client. With hypermedia the document sez &quot;this=\r\n is how you will &#39;know&#39;\nwhere the weather can be found&quot; and describes the b=\r\nits that can appear in a\nresponse, even the link relation to use to get tho=\r\nse bits:\n\n&lt;!-- this is the representation for current weather --&gt;\n&lt;p class=\r\n=3D&quot;current-weather&quot;&gt;\n&lt;span class=3D&quot;zipcode&quot; /&gt;\n&lt;span class=3D&quot;location-na=\r\nme&quot; /&gt;\n&lt;span class=3D&quot;current-temp&quot; /&gt;\n&lt;/p&gt;\n\n&lt;!-- this affordance allows cl=\r\nients to get weather reports based on zipcode\n--&gt;\n&lt;form class=3D&quot;weather&quot; a=\r\nction=3D&quot;...&quot; method=3D&quot;get&quot;&gt;\n&lt;input type=3D&quot;text&quot; name=3D&quot;zipcode&quot; value=\r\n=3D&quot;&quot; /&gt;\n&lt;/form&gt;\n\n&lt;!-- this affordance allows clients to find the form that=\r\n allows clients to\nget weather reports --&gt;\n&lt;a href=3D&quot;...&quot; rel=3D&quot;weather&quot; =\r\n/&gt;weather&lt;/a&gt;\n\n&lt;!-- this affordance allows clients to find weather affordan=\r\nces[grin] --&gt;\n&lt;form class=3D&quot;api-list&quot; action=3D&quot;...&quot; method=3D&quot;get&quot;&gt;\n&lt;inpu=\r\nt type=3D&quot;text&quot; name=3D&quot;rel-or-class&quot; value=3D&quot;&quot; /&gt;\n&lt;/form&gt;\n\n&lt;!-- this is t=\r\nhe only URI needed to use the API --&gt;\nhttp://example.org/weather\n\nI bet mos=\r\nt people will understand this HTML-based &quot;Hypermedia API&quot; and I\nbet most pe=\r\nople can write both a client and server implementation for it. I\neven bet t=\r\nhe server and client implementations can be done independently,\non differen=\r\nt platforms, at different times, etc. and still work together\njust fine. I =\r\nalso bet this particular design would work for both H2M and\nM2M implementat=\r\nions.  And yes, all my other ramblings about the possible\nevolvability (for=\r\n H2M and M2M) for this design still applies.\n\nSure, this example is incompl=\r\nete and trivial, but it has the basics for all\ncomplete, non-trivial implem=\r\nentations.\n\nI hope this gives you some ideas.\n\nMike\n\n\n[1] https://groups.go=\r\nogle.com/forum/#!forum/hypermedia-web\n[2] http://stateless.co/hal_specifica=\r\ntion.html\n[3] http://www.iana.org/assignments/link-relations/link-relations=\r\n.xml\n[4] http://microformats.org/wiki/index.php?title=3Drels&rcid=3D56790\n[=\r\n5] http://dublincore.org/documents/dces/\n\nOn Fri, Dec 2, 2011 at 15:14, Kev=\r\nin Duffey &lt;andjarnic@...&gt; wrote:\n\n&gt;\n&gt;\n&gt;  Mike,\n&gt;\n&gt; I think I get the =\r\ngist of what you are saying, but I still struggle\n&gt; understanding the vario=\r\nus aspects of writing a good rest api as well as\n&gt; consuming one. In your e=\r\nxample of M2M, if I am a developer writing a web\n&gt; application with a UI fr=\r\nont end that users visit/log in/etc, and I want to\n&gt; provide them with Face=\r\nbook login to access the site.. am I now considered\n&gt; the M2M in this equat=\r\nion.. in that I will be writing code on my web app to\n&gt; interface with face=\r\nbook api? What continually confuses me is the idea of\n&gt; trying to remain HA=\r\nTEOAS compliant as I write my own API, and consuming an\n&gt; API as a develope=\r\nr. What I mean is, as the API developer, I am trying to\n&gt; provide a HATEOAS=\r\n compliant API.. one that returns response with links that\n&gt; MUST be follow=\r\ned by the consumer, and only those links. But as of now, I\n&gt; still have to =\r\nprovide documentation that explains to a developer the\n&gt; possible links tha=\r\nt can be returned from each resource. For example, my API\n&gt; provides access=\r\n control to a degree.. user and admin level resources. IF\n&gt; the request is =\r\nbeing made to an admin resource, the auth user must be one\n&gt; that is author=\r\nized to use that resource. IF they are, the response has the\n&gt; resource lin=\r\nk(s) that allow them to further do other things that a normal\n&gt; user can no=\r\nt. Without documenting what resources will result in a\n&gt; successful (or fai=\r\nled) attempt at an admin resource, the developer won&#39;t\n&gt; know what to scan =\r\nfor in the &lt;links&gt; elements I return and what they can do\n&gt; next. I have to=\r\n document the returned links, the rel=3D&quot;&quot; string value, and\n&gt; what each hr=\r\nef resource pointer will allow them to do, so that the\n&gt; developer knows ah=\r\nead of time and can make use of the resources as needed.\n&gt; To me, this is m=\r\nuch like the facebook API.. I can&#39;t just go to\n&gt; facebook.com/api and from =\r\nthere magically know how to use whatever\n&gt; resources come back. I have to, =\r\nas a developer providing my end users with\n&gt; the ablity to use facebook to =\r\nlog in, know what resources to call, what\n&gt; params to pass, etc. Am I wrong=\r\n on this assumption? IF so, please enlighten\n&gt; me such that I might underst=\r\nand how this would not be needed.\n&gt;\n&gt; What confuses me about all this is th=\r\ne idea that we can write (and\n&gt; consume) evolveable APIs that we know nothi=\r\nng about. We simply need the\n&gt; entry URL and from there we just know what t=\r\no do based on what is returned.\n&gt; Unless I am missing something, there is n=\r\no standard set of link/rel values\n&gt; that work the same way for every API. J=\r\nust because one rel=3D&quot;login&quot; might\n&gt; indicate a resource to log in to, doe=\r\nsn&#39;t mean it won&#39;t do something else\n&gt; on another site. Like wise, any give=\r\nn API could return a variety of other\n&gt; rel=3D&quot;&quot; values in the response lin=\r\nks, or return entirely different element\n&gt; names and without some sort of d=\r\nocumentation explaining all of this, I\n&gt; would not be able to consume it. I=\r\n realize a HATEOAS API should be just\n&gt; like a web site..such that a web bo=\r\nt could traverse html &lt;a&gt; elements..\n&gt; likewise we return &lt;link&gt; elements a=\r\nllowing a bot to traverse it. What\n&gt; throws me there is.. some links may be=\r\n POST only, or UPDATE only, some may\n&gt; support GET,POST, etc. A bot could b=\r\ne written in such a way to try every\n&gt; method type, see where it leads and =\r\ncrawl it&#39;s way through every link. As a\n&gt; developer using someone&#39;s API to =\r\nprovide my user&#39;s a GUI to use my site, I\n&gt; can&#39;t just go crawling through =\r\nan API blindly and give my end users some\n&gt; sort of useful functionality fr=\r\nom the API. I have to know exactly what\n&gt; resource to call (or how to navig=\r\nate to it) and what it does. If I want to\n&gt; get the weather, I need to know=\r\n how I pass my users location to the api,\n&gt; and what resource to call that =\r\nsupports me passing in the location and\n&gt; returns the weather for that loca=\r\ntion. Don&#39;t I?\n&gt;\n&gt; Thanks.\n&gt;\n&gt;\n&gt; --- On *Fri, 12/2/11, mike amundsen &lt;mamun=\r\nd@...&gt;* wrote:\n&gt;\n&gt;\n&gt; From: mike amundsen &lt;mamund@...&gt;\n&gt; Subject=\r\n: Re: [rest-discuss] weighting and boundaries of evolvability and\n&gt; loose c=\r\noupling?\n&gt; To: &quot;Jakob Strauch&quot; &lt;jakob.strauch@...&gt;\n&gt; Cc: rest-discuss@ya=\r\nhoogroups.com\n&gt; Date: Friday, December 2, 2011, 7:48 AM\n&gt;\n&gt;\n&gt;\n&gt;\n&gt; Jakob:\n&gt;\n=\r\n&gt; i&#39;ve been doing some work in this area (evolvability for hypermedia-based=\r\n\n&gt; systems) and, while my experiments are still not completed, i can pass\n&gt;=\r\n along some observations that might give you some ideas.\n&gt;\n&gt; first, IMO, yo=\r\nu are correct to state that most all the &quot;evolvability&quot; is\n&gt; due to changes=\r\n in the problem-domain. IOW, not the protocol (HTTP) and not\n&gt; the message =\r\nformats (media types).\n&gt;\n&gt; since REST focuses on sharing understanding thro=\r\nugh response\n&gt; representations that contain hypermedia to advance applicati=\r\non flow,  the\n&gt; focus of evolvability is (in my work) on the media type and=\r\n the response\n&gt; representations.\n&gt;\n&gt; the important task of writing hypermed=\r\nia applications is mapping the\n&gt; problem domain details to elements in the =\r\nmedia type. IOW, to evolve the\n&gt; system to match changes in the problem dom=\r\nain, you modify the\n&gt; representations and the hypermedia within those repre=\r\nsentations.\n&gt;\n&gt; so, with that as a basis...\n&gt;\n&gt; there are two different cas=\r\nes to consider:\n&gt; Human-driven user-agents (or Human-to-Machine - H2M) and,=\r\n\n&gt; Machine-driven user-agents (or Machine-to-Machine - M2M).\n&gt;\n&gt; H2M evolva=\r\nbility for hypermedia\n&gt; in this case the &quot;human&quot; driving the user agent (UA=\r\n) has &quot;knowledge in the\n&gt; head&quot; that the user agent does not have. the UA c=\r\nan focus just on\n&gt; recognizing, parsing, and rendering the media type repre=\r\nsentations and\n&gt; allowing the human to interpret the results and make choic=\r\nes based on the\n&gt; human&#39;s knowledge of the problem domain and the hypermedi=\r\na affordances\n&gt; (links and forms) presented.\n&gt;\n&gt; since the act of mapping i=\r\nntention (what i want to get done) to action\n&gt; (the links and forms availab=\r\nle) is all handled by a human, servers are free\n&gt; to make quite a wide rang=\r\ne of changes and the system will still function\n&gt; well.\n&gt;\n&gt; for example, in=\r\n H2M cases, the server is free to add/remove inputs\n&gt; elements in forms, ad=\r\nd/remove links, change the &quot;order&quot; in which\n&gt; links/forms are presented, ev=\r\nen introduce entirely new forms and inputs.\n&gt; All these things are not like=\r\nly to &quot;break&quot; the system since the human can\n&gt; be reasonably expected to &quot;k=\r\nnow&quot; the problem domain (or a similar domain)\n&gt; enough to make decisions al=\r\nong the way.\n&gt;\n&gt; M2M evolvability for hypermedia\n&gt; in this case there is no=\r\n human *directly* driving the interactions between\n&gt; client and server. the=\r\n UA is a &#39;bot&#39; and has only the &quot;knowledge in the\n&gt; code&quot; to work with. Thi=\r\ns knowledge has to be &quot;put&quot; there by some human, of\n&gt; course.\n&gt;\n&gt; for this =\r\nscenario, the server has a much more limited set of evolvability\n&gt; options.=\r\n severs can remove inputs, remove links/forms, and/or change the\n&gt; order of=\r\n their appearance and still expect the system to &quot;work properly.&quot;\n&gt; IOW, th=\r\ne server cannot add any new inputs, links, or forms and expect the\n&gt; &#39;bot&#39; =\r\nto &quot;know&quot; or &quot;understand&quot; these new elements.\n&gt;\n&gt; FWIW, i think there are a=\r\n number of ways to improve the M2M case, but i am\n&gt; not yet prepared to tal=\r\nk about that since i have not made much progress yet\n&gt; in this area.\n&gt;\n&gt; i =\r\nhope this gives you some ideas on how to tackle this problem and would\n&gt; be=\r\n interested in other POVs and observations on this topic.\n&gt; mca\n&gt; http://am=\r\nundsen.com/blog/\n&gt; http://twitter.com@mamund\n&gt; http://mamund.com/foaf.rdf#m=\r\ne\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt; On Fri, Dec 2, 2011 at 06:48, Jakob Strauch &lt;jakob.strauc=\r\nh@...&lt;http://mc/compose?to=3Djakob.strauch@...&gt;\n&gt; &gt; wrote:\n&gt;\n&gt; one ma=\r\njor aspect of using hypermedia is loose coupling and evolvability.\n&gt; but wh=\r\nere are the boundaries? which server-side changes may/may not affect\n&gt; hype=\r\nrmedia-aware clients?\n&gt;\n&gt; for example: as a human user, i can easely adapt =\r\nto a change in a web shop\n&gt; system, e.g. when the order procedure include s=\r\nuddenly an additional step\n&gt; like providing an optional voucher code.\n&gt;\n&gt; a=\r\n hypermedia client can be easely redirected. but i=B4m sure the agent can=\r\n=B4t\n&gt; do something useful there. at least not unless he gets tought how to=\r\n deal\n&gt; with the new domain concept (e.g. a new media type) - which means u=\r\npdating\n&gt; to a new version.\n&gt;\n&gt; so which aspect can be really decoupled? as=\r\n far as i can see, there are\n&gt; &quot;only&quot; technical details like internal struc=\r\ntures, urls. Speaking of\n&gt; evolvability, i think most changes to a growing =\r\nAPI are more domain-related\n&gt; than technical-related.\n&gt;\n&gt; If my assumptions=\r\n are correct, is it maybe more important to develop\n&gt; hypermedia clients, w=\r\nhich can be updated by hot-deploy mechanisms?\n&gt;\n&gt;\n&gt;\n&gt; ---------------------=\r\n---------------\n&gt;\n&gt; Yahoo! Groups Links\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt; \n\r\n--bcaec52e5b7937317504b325733a\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nKevin:&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;arial, h=\r\nelvetica, sans-serif&quot;&gt;(my regrets for not responding sooner)&lt;/font&gt;&lt;/div&gt;&lt;d=\r\niv&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;arial, helvetica, sans-serif&quot;&gt;&lt;=\r\nbr&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;arial, helve=\r\ntica, sans-serif&quot;&gt;this is long, my apologies ahead of time. Hopefully the c=\r\nontent will be worth the time&lt;g&gt;.&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font class=3D&quot;App=\r\nle-style-span&quot; face=3D&quot;arial, helvetica, sans-serif&quot;&gt;&lt;br&gt;\n&lt;/font&gt;&lt;/div&gt;&lt;div=\r\n&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;arial, helvetica, sans-serif&quot;&gt;&lt=\r\n;snip&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=3D&quot;background-color: rgb(255, 255, 2=\r\n55); &quot;&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;arial, helvetica, sans-seri=\r\nf&quot;&gt;I=A0think I get the gist of what you are saying, but I still struggle un=\r\nderstanding the various aspects of writing a good rest api as well as consu=\r\nming one.&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;\n\n&lt;div&gt;&lt;span style=3D&quot;background-color: rgb(25=\r\n5, 255, 255); &quot;&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;arial, helvetica, =\r\nsans-serif&quot;&gt;&lt;/snip&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=3D&quot;background=\r\n-color: rgb(255, 255, 255); &quot;&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;aria=\r\nl, helvetica, sans-serif&quot;&gt;i think that is a common POV. there is not much g=\r\nuidance on this process. this is proly a good place to discuss it. I&#39;d =\r\nalso encourage you to join the Hypermedia-Web discussion list[1] where some=\r\n other folks working in this area also hang out.&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;\n\n&lt;div&gt;=\r\n&lt;span style=3D&quot;background-color: rgb(255, 255, 255); &quot;&gt;&lt;font class=3D&quot;Apple=\r\n-style-span&quot; face=3D&quot;arial, helvetica, sans-serif&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;=\r\n&lt;div&gt;&lt;span style=3D&quot;background-color: rgb(255, 255, 255); &quot;&gt;&lt;font class=3D&quot;=\r\nApple-style-span&quot; face=3D&quot;arial, helvetica, sans-serif&quot;&gt;&lt;snip&gt;&lt;/font&gt;=\r\n&lt;/span&gt;&lt;/div&gt;\n\n&lt;div&gt;&lt;span style=3D&quot;background-color: rgb(255, 255, 255); &quot;&gt;=\r\n&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;arial, helvetica, sans-serif&quot;&gt;I wa=\r\nnt to provide them with Facebook login to access the site.. am I now consid=\r\nered the M2M in this equation.. in that I will be writing code on my web ap=\r\np to interface with facebook api?&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;\n\n&lt;div&gt;&lt;span style=3D&quot;=\r\nbackground-color: rgb(255, 255, 255); &quot;&gt;&lt;font class=3D&quot;Apple-style-span&quot; fa=\r\nce=3D&quot;arial, helvetica, sans-serif&quot;&gt;&lt;/snip&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;=\r\nspan style=3D&quot;background-color: rgb(255, 255, 255); &quot;&gt;&lt;font class=3D&quot;Apple-=\r\nstyle-span&quot; face=3D&quot;arial, helvetica, sans-serif&quot;&gt;Well, it turns out facebo=\r\nok&#39;s API is not very &quot;hypermedia-aware&quot; is it? Actually almos=\r\nt all the OAuth examples I&#39;ve seen are very difficult to &quot;automate=\r\n&quot; in an M2M environment; I suspect that&#39;s the goal. =A0Often we ca=\r\nn &quot;cover&quot; an RPC implementation w/ a hypermedia-aware one (I do t=\r\nhis quite a bit), but sometimes you can&#39;t.=A0&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;\n\n&lt;div=\r\n&gt;&lt;span style=3D&quot;background-color: rgb(255, 255, 255); &quot;&gt;&lt;font class=3D&quot;Appl=\r\ne-style-span&quot; face=3D&quot;arial, helvetica, sans-serif&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div=\r\n&gt;&lt;div&gt;&lt;span style=3D&quot;background-color: rgb(255, 255, 255); &quot;&gt;&lt;font class=3D=\r\n&quot;Apple-style-span&quot; face=3D&quot;arial, helvetica, sans-serif&quot;&gt;FWIW, I don&#39;t =\r\nthink the Facebook API is a good place to exercise your hypermedia skills.&lt;=\r\n/font&gt;&lt;/span&gt;&lt;/div&gt;\n\n&lt;div&gt;&lt;span style=3D&quot;background-color: rgb(255, 255, 25=\r\n5); &quot;&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;arial, helvetica, sans-serif=\r\n&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=3D&quot;background-color: rgb(255, 25=\r\n5, 255); &quot;&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;arial, helvetica, sans-=\r\nserif&quot;&gt;&lt;snip&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;\n\n&lt;div&gt;&lt;span style=3D&quot;background-col=\r\nor: rgb(255, 255, 255); &quot;&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;arial, h=\r\nelvetica, sans-serif&quot;&gt;What continually confuses me is the idea of trying to=\r\n remain HATEOAS compliant as I write my own API, and consuming an API as a =\r\ndeveloper.&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;\n\n&lt;div&gt;&lt;span style=3D&quot;background-color: rgb(2=\r\n55, 255, 255); &quot;&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;arial, helvetica,=\r\n sans-serif&quot;&gt;&lt;/snip&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=3D&quot;arial, hel=\r\nvetica, sans-serif&quot;&gt;Designing a hypermedia API is, essentially, designing a=\r\n media type (or applying semantics to an existing media type). That&#39;s t=\r\nhe API. It&#39;s a big diff from most implementations. Some think it&#39;s =\r\nnot worth the trouble.&lt;/font&gt;&lt;/div&gt;\n\n&lt;div&gt;&lt;font face=3D&quot;arial, helvetica, s=\r\nans-serif&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=3D&quot;arial, helvetica, sans-serif=\r\n&quot;&gt;Once the media type is designed &amp; documented, the work of implementat=\r\nion servers and clients begins. Servers are pretty straight-forward. Toolin=\r\ng is weak in most cases, but for the most part servers just wait for a requ=\r\nest, do some work and craft a response (which may/may-not contain one or mo=\r\nre hypermedia controls (links &amp; forms).&lt;/font&gt;&lt;/div&gt;\n\n&lt;div&gt;&lt;font face=\r\n=3D&quot;arial, helvetica, sans-serif&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=3D&quot;arial=\r\n, helvetica, sans-serif&quot;&gt;Writing a client is more involved; not terribly di=\r\nfficult, but more work is done by hypermedia clients (HC) than RPC clients.=\r\n The HC must &quot;know&quot; the media type (not the app) before it can fu=\r\nnction successfully. And yes, as you say, this means writing clients that a=\r\nre prepared for just about any reasonable response in that media type. You =\r\ncan limit the effort by creating a restrictive, small-scope media type desi=\r\ngn. My Maze+XML design has only ten elmenents (five are for errors and debu=\r\ngging), six attributes, and nine link relations. Creating clients to naviga=\r\nte mazes is pretty simple, too. =A0&lt;/font&gt;&lt;/div&gt;\n\n&lt;div&gt;&lt;font face=3D&quot;arial,=\r\n helvetica, sans-serif&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=3D&quot;arial, helvetic=\r\na, sans-serif&quot;&gt;The HAL media type design is even more compact[2]. Now, impl=\r\nementing an HC that can handle HTML is quite a feat. There is a wide spectr=\r\num between Maze+XML and HTML, tho.&lt;/font&gt;&lt;/div&gt;\n\n&lt;div&gt;&lt;font face=3D&quot;arial, =\r\nhelvetica, sans-serif&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=3D&quot;arial, helvetica=\r\n, sans-serif&quot;&gt;&lt;snip&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;span style=3D&quot;background-colo=\r\nr: rgb(255, 255, 255); &quot;&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;arial, he=\r\nlvetica, sans-serif&quot;&gt;Without documenting what resources will result in a su=\r\nccessful (or failed) attempt at an admin resource, the developer won&#39;t =\r\nknow what to scan for in the &lt;links&gt; elements I return and what they =\r\ncan do next. I have to document the returned links, the rel=3D&quot;&quot; =\r\nstring value, and what each href resource pointer will allow them to do, so=\r\n that the developer knows ahead of time and can make use of the resources a=\r\ns needed.&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;\n\n&lt;div&gt;&lt;span style=3D&quot;background-color: rgb(25=\r\n5, 255, 255); &quot;&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;arial, helvetica, =\r\nsans-serif&quot;&gt;&lt;/snip&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=3D&quot;background=\r\n-color: rgb(255, 255, 255); &quot;&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;aria=\r\nl, helvetica, sans-serif&quot;&gt;Yes, you need to document the media type. There a=\r\nre a number of examples out there to use as a guide. There is no need to do=\r\ncument &quot;all the possible responses&quot; for a media type (can you ima=\r\ngine what that would entail for HTML?). Instead, you document the possible =\r\nelements that can appear in a response and the rules for those elements (MU=\r\nST be child elements of X, MAY have the following children, etc.).=A0&lt;/font=\r\n&gt;&lt;/span&gt;&lt;/div&gt;\n\n&lt;div&gt;&lt;font face=3D&quot;arial, helvetica, sans-serif&quot;&gt;&lt;br&gt;&lt;/font=\r\n&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=3D&quot;arial, helvetica, sans-serif&quot;&gt;&lt;snip&gt;&lt;/font&gt;=\r\n&lt;/div&gt;\n&lt;div&gt;&lt;span style=3D&quot;background-color: rgb(255, 255, 255); &quot;&gt;&lt;font cl=\r\nass=3D&quot;Apple-style-span&quot; face=3D&quot;arial, helvetica, sans-serif&quot;&gt;What confuse=\r\ns me about all this is the idea that we can write (and consume) evolveable =\r\nAPIs that we know nothing about.=A0&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;\n\n&lt;div&gt;&lt;span style=\r\n=3D&quot;background-color: rgb(255, 255, 255); &quot;&gt;&lt;font class=3D&quot;Apple-style-span=\r\n&quot; face=3D&quot;arial, helvetica, sans-serif&quot;&gt;&lt;/snip&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;d=\r\niv&gt;&lt;span style=3D&quot;background-color: rgb(255, 255, 255); &quot;&gt;&lt;font class=3D&quot;Ap=\r\nple-style-span&quot; face=3D&quot;arial, helvetica, sans-serif&quot;&gt;Yeah, that confuses m=\r\ne, too. I don&#39;t talk like that and suggest anyone telling you this &quo=\r\nt;you can write and consume an API that you know nothing about&quot;) is fu=\r\nll of it. If you hear me saying that, call BS on me ASAP!&lt;br&gt;\n\n&lt;/font&gt;&lt;/spa=\r\nn&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=3D&quot;background-color: rgb(255, 255, 255); &quot;&gt;&lt;font c=\r\nlass=3D&quot;Apple-style-span&quot; face=3D&quot;arial, helvetica, sans-serif&quot;&gt;&lt;br&gt;&lt;/font&gt;=\r\n&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=3D&quot;background-color: rgb(255, 255, 255); &quot;&gt;&lt;f=\r\nont class=3D&quot;Apple-style-span&quot; face=3D&quot;arial, helvetica, sans-serif&quot;&gt;&lt;sn=\r\nip&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;\n&lt;div&gt;&lt;span class=3D&quot;Apple-style-span&quot; style=3D&quot;b=\r\nackground-color: rgb(255, 255, 255); &quot;&gt;&lt;font class=3D&quot;Apple-style-span&quot; fac=\r\ne=3D&quot;arial, helvetica, sans-serif&quot;&gt;there is no standard set of link/rel val=\r\nues that work the same way for every API.&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;\n&lt;div&gt;&lt;span cl=\r\nass=3D&quot;Apple-style-span&quot; style=3D&quot;background-color: rgb(255, 255, 255); &quot;&gt;&lt;=\r\nfont class=3D&quot;Apple-style-span&quot; face=3D&quot;arial, helvetica, sans-serif&quot;&gt;&lt;/=\r\nsnip&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;a=\r\nrial, helvetica, sans-serif&quot;&gt;first, just as there is no standard semantic f=\r\nor every problem domain, you&#39;re not likely to find a single set of stan=\r\ndard rel values for every API. However, there are a couple sources for stan=\r\ndardized rels include the the IANA[3], the Microformat group[4], and the Du=\r\nblin Core[5]. Many media types also define their own rels set (including HT=\r\nML).&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;arial, helv=\r\netica, sans-serif&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font class=3D&quot;Apple-style-span&quot; f=\r\nace=3D&quot;arial, helvetica, sans-serif&quot;&gt;It is also possible to define and stan=\r\ndardize your own rels (in cases where you think an important one is missing=\r\n). I&#39;ve done that at the Microformats site and am in the process of doi=\r\nng the same via an IETF Internet Draft.&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font class=3D&quot;Ap=\r\nple-style-span&quot; face=3D&quot;arial, helvetica, sans-serif&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div=\r\n&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;arial, helvetica, sans-serif&quot;&gt;In =\r\nthe end, you&#39;ll find that rels provide key mapping between the problem =\r\ndomain and the media type. this means, unless your problem domain is incred=\r\nibly common, you&#39;ll be using some unique rels in order to express uniqu=\r\ne problem domain semantics. =A0&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;span style=3D&quot;background=\r\n-color: rgb(255, 255, 255); &quot;&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;aria=\r\nl, helvetica, sans-serif&quot;&gt;&lt;br&gt;\n&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=3D&quot;back=\r\nground-color: rgb(255, 255, 255); &quot;&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=\r\n=3D&quot;arial, helvetica, sans-serif&quot;&gt;&lt;snip&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;spa=\r\nn class=3D&quot;Apple-style-span&quot; style=3D&quot;background-color: rgb(255, 255, 255);=\r\n &quot;&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;arial, helvetica, sans-serif&quot;&gt;W=\r\nhat throws me there is.. some links may be POST only, or UPDATE only, some =\r\nmay support GET,POST, etc.=A0&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;\n&lt;div&gt;&lt;span class=3D&quot;Apple=\r\n-style-span&quot; style=3D&quot;background-color: rgb(255, 255, 255); &quot;&gt;&lt;font class=\r\n=3D&quot;Apple-style-span&quot; face=3D&quot;arial, helvetica, sans-serif&quot;&gt;&lt;/snip&gt;&lt;/=\r\nfont&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;arial, helv=\r\netica, sans-serif&quot;&gt;Technically, the *links* don&#39;t hold the rules, the m=\r\narkup *around* the links does. HTML.FORM@method=3D&quot;get&quot; tells you=\r\n what you need to know. So does atom.link@rel=3D&quot;edit&quot; Now, when =\r\nyou design your own API (XML, JSON, etc.) you&#39;ll be responsible for tak=\r\ning care to design these same protocol-level details. If you are using HTTP=\r\n, the possibilities are few and it&#39;s not at all hard to design media ty=\r\npe elements that clients can easily recognize (&lt;update href=3D&quot;...&=\r\nquot; /&gt; OR {&quot;delete&quot; : {&quot;href&quot;:...&quot;}}, etc.).&lt;=\r\n/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;arial, helvetica=\r\n, sans-serif&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=\r\n=3D&quot;arial, helvetica, sans-serif&quot;&gt;Again, this way of designing APIs (the wa=\r\ny that includes the hypermedia possiblities in responses, not just the data=\r\n) is not at all common right now.=A0&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font class=3D&quot;Apple=\r\n-style-span&quot; face=3D&quot;arial, helvetica, sans-serif&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;f=\r\nont class=3D&quot;Apple-style-span&quot; face=3D&quot;arial, helvetica, sans-serif&quot;&gt;&lt;sn=\r\nip&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=3D&quot;Apple-style-span&quot; style=3D&quot;backgroun=\r\nd-color: rgb(255, 255, 255); &quot;&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;ari=\r\nal, helvetica, sans-serif&quot;&gt;As a developer using someone&#39;s API to provid=\r\ne my user&#39;s a GUI to use my site, I can&#39;t just go crawling through =\r\nan API blindly and give my end users some sort of useful functionality from=\r\n the API.&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;\n&lt;div&gt;&lt;span class=3D&quot;Apple-style-span&quot; style=\r\n=3D&quot;background-color: rgb(255, 255, 255); &quot;&gt;&lt;font class=3D&quot;Apple-style-span=\r\n&quot; face=3D&quot;arial, helvetica, sans-serif&quot;&gt;&lt;/snip&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;d=\r\niv&gt;&lt;span class=3D&quot;Apple-style-span&quot; style=3D&quot;background-color: rgb(255, 255=\r\n, 255); &quot;&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;arial, helvetica, sans-s=\r\nerif&quot;&gt;Yep, as stated earlier, anyone telling you to &quot;blindly crawl&quo=\r\nt; is tossing BS. That not at all needed.&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;\n&lt;div&gt;&lt;span cl=\r\nass=3D&quot;Apple-style-span&quot; style=3D&quot;background-color: rgb(255, 255, 255); &quot;&gt;&lt;=\r\nfont class=3D&quot;Apple-style-span&quot; face=3D&quot;arial, helvetica, sans-serif&quot;&gt;&lt;br&gt;&lt;=\r\n/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=3D&quot;Apple-style-span&quot; style=3D&quot;backgroun=\r\nd-color: rgb(255, 255, 255); &quot;&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;ari=\r\nal, helvetica, sans-serif&quot;&gt;&lt;snip&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;\n&lt;div&gt;&lt;span clas=\r\ns=3D&quot;Apple-style-span&quot; style=3D&quot;background-color: rgb(255, 255, 255); &quot;&gt;&lt;fo=\r\nnt class=3D&quot;Apple-style-span&quot; face=3D&quot;arial, helvetica, sans-serif&quot;&gt;I have =\r\nto know exactly what resource to call (or how to navigate to it) and what i=\r\nt does.&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;\n&lt;div&gt;&lt;span class=3D&quot;Apple-style-span&quot; style=3D&quot;=\r\nbackground-color: rgb(255, 255, 255); &quot;&gt;&lt;font class=3D&quot;Apple-style-span&quot; fa=\r\nce=3D&quot;arial, helvetica, sans-serif&quot;&gt;&lt;/snip&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;=\r\nspan style=3D&quot;background-color: rgb(255, 255, 255); &quot;&gt;&lt;font class=3D&quot;Apple-=\r\nstyle-span&quot; face=3D&quot;arial, helvetica, sans-serif&quot;&gt;Well, your version of &qu=\r\not;exactly&quot; may vary, but yes, client apps will need to know how get c=\r\nonvert &quot;intention&quot; into &quot;action.&quot; That&#39;s what APIs =\r\nare for. This is the same whether you use SOAP, URI-RPC, Hypermedia, etc. T=\r\nhe key is &quot;how does the client know&quot; With most forms of API, the =\r\nclients knows because a document sez so and the developer hard-codes this &=\r\nquot;knowing&quot; into the client. With hypermedia the document sez &quot;=\r\nthis is how you will &#39;know&#39; where the weather can be found&quot; an=\r\nd describes the bits that can appear in a response, even the link relation =\r\nto use to get those bits:&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;\n&lt;div&gt;&lt;span style=3D&quot;backgroun=\r\nd-color: rgb(255, 255, 255); &quot;&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;ari=\r\nal, helvetica, sans-serif&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=3D&quot;back=\r\nground-color: rgb(255, 255, 255); &quot;&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=\r\n=3D&quot;&#39;courier new&#39;, monospace&quot;&gt;&lt;!-- this is the representation fo=\r\nr current weather --&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;\n&lt;div&gt;&lt;span style=3D&quot;background=\r\n-color: rgb(255, 255, 255); &quot;&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;&#39=\r\n;courier new&#39;, monospace&quot;&gt;&lt;p class=3D&quot;current-weather&quot;&gt;=\r\n&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=3D&quot;background-color: rgb(255, 255, 255=\r\n); &quot;&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;&#39;courier new&#39;, monosp=\r\nace&quot;&gt;&lt;span class=3D&quot;zipcode&quot; /&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;\n&lt;div&gt;&lt;s=\r\npan style=3D&quot;background-color: rgb(255, 255, 255); &quot;&gt;&lt;font class=3D&quot;Apple-s=\r\ntyle-span&quot; face=3D&quot;&#39;courier new&#39;, monospace&quot;&gt;&lt;span class=3D&quot=\r\n;location-name&quot; /&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=3D&quot;backgroun=\r\nd-color: rgb(255, 255, 255); &quot;&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;&#3=\r\n9;courier new&#39;, monospace&quot;&gt;&lt;span class=3D&quot;current-temp&quot; /&=\r\ngt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;&#39;=\r\ncourier new&#39;, monospace&quot;&gt;&lt;/p&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font class=3D&quot;App=\r\nle-style-span&quot; face=3D&quot;&#39;courier new&#39;, monospace&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;=\r\ndiv&gt;&lt;span class=3D&quot;Apple-style-span&quot; style=3D&quot;background-color: rgb(255, 25=\r\n5, 255); &quot;&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;&#39;courier new&#39;, =\r\nmonospace&quot;&gt;&lt;!-- this affordance allows clients to get weather reports ba=\r\nsed on zipcode --&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;\n&lt;div&gt;&lt;span style=3D&quot;background-co=\r\nlor: rgb(255, 255, 255); &quot;&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;&#39;co=\r\nurier new&#39;, monospace&quot;&gt;&lt;form class=3D&quot;weather&quot; action=3D&q=\r\nuot;...&quot; method=3D&quot;get&quot;&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;\n&lt;div&gt;&lt;span s=\r\ntyle=3D&quot;background-color: rgb(255, 255, 255); &quot;&gt;&lt;font class=3D&quot;Apple-style-=\r\nspan&quot; face=3D&quot;&#39;courier new&#39;, monospace&quot;&gt;&lt;input type=3D&quot;text=\r\n&quot; name=3D&quot;zipcode&quot; value=3D&quot;&quot; /&gt;&lt;/font&gt;&lt;/span&gt;&lt;=\r\n/div&gt;\n&lt;div&gt;&lt;span style=3D&quot;background-color: rgb(255, 255, 255); &quot;&gt;&lt;font cla=\r\nss=3D&quot;Apple-style-span&quot; face=3D&quot;&#39;courier new&#39;, monospace&quot;&gt;&lt;/form=\r\n&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=3D&quot;background-color: rgb(255, 255,=\r\n 255); &quot;&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;&#39;courier new&#39;, mo=\r\nnospace&quot;&gt;&lt;br&gt;\n&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=3D&quot;background-color: rgb=\r\n(255, 255, 255); &quot;&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;&#39;courier ne=\r\nw&#39;, monospace&quot;&gt;&lt;!-- this affordance allows clients to find the form =\r\nthat allows clients to get weather reports --&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;\n&lt;div&gt;=\r\n&lt;div&gt;&lt;span style=3D&quot;background-color: rgb(255, 255, 255); &quot;&gt;&lt;font class=3D&quot;=\r\nApple-style-span&quot; face=3D&quot;&#39;courier new&#39;, monospace&quot;&gt;&lt;a href=3D&q=\r\nuot;...&quot; rel=3D&quot;weather&quot; /&gt;weather&lt;/a&gt;&lt;/font&gt;&lt;/span=\r\n&gt;&lt;/div&gt;\n&lt;div&gt;&lt;span style=3D&quot;background-color: rgb(255, 255, 255); &quot;&gt;&lt;font c=\r\nlass=3D&quot;Apple-style-span&quot; face=3D&quot;&#39;courier new&#39;, monospace&quot;&gt;&lt;br&gt;&lt;/f=\r\nont&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=3D&quot;background-color: rgb(255, 255, =\r\n255); &quot;&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;&#39;courier new&#39;, mon=\r\nospace&quot;&gt;&lt;!-- this affordance allows clients to find weather affordances[=\r\ngrin] --&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=\r\n=3D&quot;&#39;courier new&#39;, monospace&quot;&gt;&lt;form class=3D&quot;api-list&quot;=\r\n action=3D&quot;...&quot; method=3D&quot;get&quot;&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;fo=\r\nnt class=3D&quot;Apple-style-span&quot; face=3D&quot;&#39;courier new&#39;, monospace&quot;&gt;&lt=\r\n;input type=3D&quot;text&quot; name=3D&quot;rel-or-class&quot; value=3D&quo=\r\nt;&quot; /&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;&=\r\n#39;courier new&#39;, monospace&quot;&gt;&lt;/form&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font class=\r\n=3D&quot;Apple-style-span&quot; face=3D&quot;&#39;courier new&#39;, monospace&quot;&gt;&lt;br&gt;&lt;/font&gt;=\r\n&lt;/div&gt;&lt;div&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;&#39;courier new&#39;, =\r\nmonospace&quot;&gt;&lt;!-- this is the only URI needed to use the API --&gt;&lt;/font&gt;=\r\n&lt;/div&gt;\n&lt;div&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;&#39;courier new&#39;,=\r\n monospace&quot;&gt;&lt;a href=3D&quot;http://example.org/weather&quot;&gt;http://example.org/weath=\r\ner&lt;/a&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;arial, hel=\r\nvetica, sans-serif&quot;&gt;&lt;br&gt;\n&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font class=3D&quot;Apple-style-span&quot;=\r\n face=3D&quot;arial, helvetica, sans-serif&quot;&gt;I bet most people will understand th=\r\nis HTML-based &quot;Hypermedia API&quot; and I bet most people can write bo=\r\nth a client and server implementation for it. I even bet the server and cli=\r\nent implementations can be done independently, on different platforms, at d=\r\nifferent times, etc. and still work together just fine. I also bet this par=\r\nticular design would work for both H2M and M2M implementations.=A0=A0And ye=\r\ns, all my other ramblings about the possible evolvability (for H2M and M2M)=\r\n for this design still applies.&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font class=3D&quot;Apple-styl=\r\ne-span&quot; face=3D&quot;arial, helvetica, sans-serif&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;span c=\r\nlass=3D&quot;Apple-style-span&quot; style=3D&quot;font-family: arial, helvetica, sans-seri=\r\nf; &quot;&gt;Sure, this example is incomplete and trivial, but it has the basics fo=\r\nr all complete, non-trivial implementations.&lt;/span&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font class=\r\n=3D&quot;Apple-style-span&quot; face=3D&quot;arial, helvetica, sans-serif&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/di=\r\nv&gt;&lt;div&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;arial, helvetica, sans-seri=\r\nf&quot;&gt;I hope this gives you some ideas.&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font class=3D&quot;Apple-=\r\nstyle-span&quot; face=3D&quot;arial, helvetica, sans-serif&quot;&gt;&lt;br&gt;\n&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;f=\r\nont class=3D&quot;Apple-style-span&quot; face=3D&quot;arial, helvetica, sans-serif&quot;&gt;Mike&lt;/=\r\nfont&gt;&lt;/div&gt;&lt;div&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;arial, helvetica, =\r\nsans-serif&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;=\r\narial, helvetica, sans-serif&quot;&gt;=A0&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font class=3D&quot;Apple-st=\r\nyle-span&quot; face=3D&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=3D&quot;background-c=\r\nolor: rgb(255, 255, 255); &quot;&gt;[1]=A0&lt;/span&gt;&lt;a href=3D&quot;https://groups.google.c=\r\nom/forum/#!forum/hypermedia-web&quot; target=3D&quot;_blank&quot;&gt;https://groups.google.co=\r\nm/forum/#!forum/hypermedia-web&lt;/a&gt;&lt;span style=3D&quot;background-color: rgb(255,=\r\n 255, 255); &quot;&gt;=A0&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;\n\n&lt;div&gt;&lt;font class=3D&quot;Apple-style-span=\r\n&quot; face=3D&quot;arial, helvetica, sans-serif&quot;&gt;&lt;span style=3D&quot;background-color: rg=\r\nb(255, 255, 255); &quot;&gt;[2]=A0&lt;/span&gt;&lt;a href=3D&quot;http://stateless.co/hal_specifi=\r\ncation.html&quot; target=3D&quot;_blank&quot;&gt;http://stateless.co/hal_specification.html&lt;/=\r\na&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;arial, helvet=\r\nica, sans-serif&quot;&gt;[3]=A0&lt;a href=3D&quot;http://www.iana.org/assignments/link-rela=\r\ntions/link-relations.xml&quot;&gt;http://www.iana.org/assignments/link-relations/li=\r\nnk-relations.xml&lt;/a&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font class=3D&quot;Apple-style-span&quot; fac=\r\ne=3D&quot;arial, helvetica, sans-serif&quot;&gt;[4]=A0&lt;a href=3D&quot;http://microformats.org=\r\n/wiki/index.php?title=3Drels&amp;rcid=3D56790&quot;&gt;http://microformats.org/wiki=\r\n/index.php?title=3Drels&amp;rcid=3D56790&lt;/a&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font class=\r\n=3D&quot;Apple-style-span&quot; face=3D&quot;arial, helvetica, sans-serif&quot;&gt;[5]=A0&lt;a href=\r\n=3D&quot;http://dublincore.org/documents/dces/&quot;&gt;http://dublincore.org/documents/=\r\ndces/&lt;/a&gt;&lt;/font&gt;&lt;/div&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;arial, helve=\r\ntica, sans-serif&quot;&gt;\n&lt;/font&gt;&lt;div&gt;&lt;br&gt;&lt;div class=3D&quot;gmail_quote&quot;&gt;On Fri, Dec 2=\r\n, 2011 at 15:14, Kevin Duffey &lt;span dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:andja=\r\nrnic@...&quot; target=3D&quot;_blank&quot;&gt;andjarnic@...&lt;/a&gt;&gt;&lt;/span&gt; wrote:=\r\n&lt;br&gt;&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;margin:0 0 0 .8ex;border-lef=\r\nt:1px #ccc solid;padding-left:1ex&quot;&gt;\n\n\n\n\n\n\n\n\n        \n\n\n\n\n&lt;div&gt;\n\n\n\n\n\n&lt;br&gt;&lt;br=\r\n&gt;\n\n\n\n\n&lt;table cellspacing=3D&quot;0&quot; cellpadding=3D&quot;0&quot; border=3D&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;t=\r\nd valign=3D&quot;top&quot; style=3D&quot;font:inherit&quot;&gt;&lt;div style=3D&quot;font-family:&#39;time=\r\ns new roman&#39;,&#39;new york&#39;,times,serif;font-size:16px;background-c=\r\nolor:rgb(255,255,255)&quot;&gt;\n\n&lt;span&gt;Mike,&lt;/span&gt;&lt;/div&gt;&lt;div style=3D&quot;font-family:=\r\n&#39;times new roman&#39;,&#39;new york&#39;,times,serif;font-size:16px;bac=\r\nkground-color:rgb(255,255,255)&quot;&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=3D&quot;font-f=\r\namily:&#39;times new roman&#39;,&#39;new york&#39;,times,serif;font-size:16=\r\npx;background-color:rgb(255,255,255)&quot;&gt;\n\n&lt;span&gt;I think I get the gist of wha=\r\nt you are saying, but I still struggle understanding the various aspects of=\r\n writing a good rest api as well as consuming one. In your example of M2M, =\r\nif I am a developer writing a web application with a\n UI front end that use=\r\nrs visit/log in/etc, and I want to provide them with Facebook login to acce=\r\nss the site.. am I now considered the M2M in this equation.. in that I will=\r\n be writing code on my web app to interface with facebook api? What continu=\r\nally confuses me is the idea of trying to remain HATEOAS compliant as I wri=\r\nte my own API, and consuming an API as a developer. What I mean is, as the =\r\nAPI developer, I am trying to provide a HATEOAS compliant API.. one that re=\r\nturns response with links that MUST be followed by the consumer, and only t=\r\nhose links. But as of now, I still have to provide documentation that expla=\r\nins to a developer the possible links that can be returned from each resour=\r\nce. For example, my API provides access control to a degree.. user and admi=\r\nn level resources. IF the request is being made to an admin resource, the a=\r\nuth user must be one that is authorized to use that resource. IF they are, =\r\nthe response has the resource link(s) that\n allow them to further do other =\r\nthings that a normal user can not. Without documenting what resources will =\r\nresult in a successful (or failed) attempt at an admin resource, the develo=\r\nper won&#39;t know what to scan for in the &lt;links&gt; elements I return =\r\nand what they can do next. I have to document the returned links, the rel=\r\n=3D&quot;&quot; string value, and what each href resource pointer will allo=\r\nw them to do, so that the developer knows ahead of time and can make use of=\r\n the resources as needed. To me, this is much like the facebook API.. I can=\r\n&#39;t just go to &lt;a href=3D&quot;http://facebook.com/api&quot; target=3D&quot;_blank&quot;&gt;fac=\r\nebook.com/api&lt;/a&gt; and from there magically know how to use whatever resourc=\r\nes come back. I have to, as a developer providing my end users with the abl=\r\nity to use facebook to log in, know what resources to call, what params to =\r\npass, etc. Am I wrong on this assumption? IF so, please enlighten me such t=\r\nhat I might understand how this would not be needed.&lt;/span&gt;&lt;/div&gt;\n\n&lt;div sty=\r\nle=3D&quot;font-family:&#39;times new roman&#39;,&#39;new york&#39;,times,serif;=\r\nfont-size:16px;background-color:rgb(255,255,255)&quot;&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;d=\r\niv style=3D&quot;font-family:&#39;times new roman&#39;,&#39;new york&#39;,times,=\r\nserif;font-size:16px;background-color:rgb(255,255,255)&quot;&gt;\n\n&lt;span&gt;What confus=\r\nes me about all this is the idea that we can write (and consume) evolveable=\r\n APIs that we know nothing about. We simply need the entry URL and from the=\r\nre we just know what to do based on what is returned. Unless I am missing s=\r\nomething, there is no standard set of link/rel values that work the same wa=\r\ny for every API. Just because one rel=3D&quot;login&quot; might indicate a =\r\nresource to log in to, doesn&#39;t mean it won&#39;t do something else on a=\r\nnother site. Like wise, any given API could return a variety of other rel=\r\n=3D&quot;&quot; values in the response links, or return entirely different =\r\nelement\n names and without some sort of documentation explaining all of thi=\r\ns, I would not be able to consume it. I realize a HATEOAS API should be jus=\r\nt like a web site..such that a web bot could traverse html &lt;a&gt; elemen=\r\nts.. likewise we return &lt;link&gt; elements allowing a bot to traverse it=\r\n. What throws me there is.. some links may be POST only, or UPDATE only, so=\r\nme may support GET,POST, etc. A bot could be written in such a way to try e=\r\nvery method type, see where it leads and crawl it&#39;s way through every l=\r\nink. As a developer using someone&#39;s API to provide my user&#39;s a GUI =\r\nto use my site, I can&#39;t just go crawling through an API blindly and giv=\r\ne my end users some sort of useful functionality from the API. I have to kn=\r\now exactly what resource to call (or how to navigate to it) and what it doe=\r\ns. If I want to get the weather, I need to know how I pass my users locatio=\r\nn to the api, and what resource to call that supports me passing in the loc=\r\nation and returns\n the weather for that location. Don&#39;t I?&lt;/span&gt;&lt;/div&gt;=\r\n&lt;div style=3D&quot;font-family:&#39;times new roman&#39;,&#39;new york&#39;,time=\r\ns,serif;font-size:16px;background-color:rgb(255,255,255)&quot;&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;=\r\n&lt;/div&gt;&lt;div style=3D&quot;font-family:&#39;times new roman&#39;,&#39;new york&#39=\r\n;,times,serif;font-size:16px;background-color:rgb(255,255,255)&quot;&gt;\n\n&lt;span&gt;Tha=\r\nnks.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;br&gt;--- On &lt;b&gt;Fri, 12/2/11, mi=\r\nke amundsen &lt;i&gt;&lt;&lt;a href=3D&quot;mailto:mamund@...&quot; target=3D&quot;_blank&quot;&gt;ma=\r\nmund@...&lt;/a&gt;&gt;&lt;/i&gt;&lt;/b&gt; wrote:&lt;br&gt;&lt;blockquote style=3D&quot;border-left:2=\r\npx solid rgb(16,16,255);margin-left:5px;padding-left:5px&quot;&gt;\n\n&lt;br&gt;From: mike =\r\namundsen &lt;&lt;a href=3D&quot;mailto:mamund@...&quot; target=3D&quot;_blank&quot;&gt;mamund@y=\r\nahoo.com&lt;/a&gt;&gt;&lt;br&gt;Subject: Re: [rest-discuss] weighting and boundaries of=\r\n evolvability and loose coupling?&lt;br&gt;To: &quot;Jakob Strauch&quot; &lt;&lt;a h=\r\nref=3D&quot;mailto:jakob.strauch@...&quot; target=3D&quot;_blank&quot;&gt;jakob.strauch@...&lt;=\r\n/a&gt;&gt;&lt;br&gt;\n\nCc: &lt;a href=3D&quot;mailto:rest-discuss@yahoogroups.com&quot; target=3D&quot;=\r\n_blank&quot;&gt;rest-discuss@yahoogroups.com&lt;/a&gt;&lt;br&gt;Date: Friday, December 2,\n 2011=\r\n, 7:48 AM&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;div&gt;\n&lt;span&gt;=A0&lt;/span&gt;\n\n\n\n   =\r\n &lt;div&gt;\n      \n      \n      &lt;p&gt;Jakob:&lt;/p&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;i&#39;ve been d=\r\noing some work in this area (evolvability for hypermedia-based systems) and=\r\n, while my experiments are still not completed, i can pass along some obser=\r\nvations that might give you some ideas.&lt;/div&gt;\n\n\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;first,=\r\n IMO, you are correct to state that most all the &quot;evolvability&quot; i=\r\ns due to changes in the problem-domain. IOW, not the protocol (HTTP) and no=\r\nt the message formats (media types).&lt;/div&gt;&lt;div&gt;\n\n\n\n&lt;br&gt;&lt;/div&gt;&lt;div&gt;since RES=\r\nT focuses on sharing understanding through response representations that co=\r\nntain hypermedia to advance application flow, =A0the focus of evolvability =\r\nis (in my work) on the media type and the response representations.&lt;/div&gt;\n\n=\r\n\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;the important task of writing hypermedia applications=\r\n is mapping the problem domain details to elements in the media type.=A0IOW=\r\n, to evolve the system to match changes in the problem domain, you modify t=\r\nhe representations and the hypermedia within those representations.&lt;/div&gt;\n\n=\r\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;so, with that as a basis...&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;t=\r\nhere are two different cases to consider:&lt;/div&gt;&lt;div&gt;Human-driven user-agent=\r\ns (or Human-to-Machine - H2M) and,&lt;/div&gt;&lt;div&gt;Machine-driven user-agents (or=\r\n Machine-to-Machine - M2M).&lt;/div&gt;\n\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;H2M evolvability fo=\r\nr hypermedia&lt;/div&gt;&lt;div&gt;in this case the &quot;human&quot; driving the user =\r\nagent (UA) has &quot;knowledge in the head&quot; that the user agent does n=\r\not have. the UA can focus just on recognizing, parsing, and rendering the m=\r\nedia type representations and allowing the human to interpret the results a=\r\nnd make choices based on the human&#39;s knowledge of the problem domain an=\r\nd the hypermedia affordances (links and forms) presented.&lt;/div&gt;\n\n\n&lt;div&gt;&lt;br&gt;=\r\n&lt;/div&gt;&lt;div&gt;since the act of mapping intention (what i want to get done) to =\r\naction (the links and forms available) is all handled by a human, servers a=\r\nre free to make quite a wide range of changes and the system will still fun=\r\nction well. =A0&lt;/div&gt;\n\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;for example, in H2M cases, the =\r\nserver is free to add/remove inputs elements in forms, add/remove links, ch=\r\nange the &quot;order&quot; in which links/forms are presented, even introdu=\r\nce entirely new forms and inputs. All these things are not likely to &quot;=\r\nbreak&quot; the system since the human can be reasonably expected to &quot;=\r\nknow&quot; the problem domain (or a similar domain) enough to make decision=\r\ns along the way.=A0&lt;/div&gt;\n\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;M2M evolvability for hyperm=\r\nedia&lt;/div&gt;&lt;div&gt;in this case there is no human *directly* driving the intera=\r\nctions between client and server. the UA is a &#39;bot&#39; and has only th=\r\ne &quot;knowledge in the code&quot; to work with. This knowledge has to be =\r\n&quot;put&quot; there by some human, of course.&lt;/div&gt;\n\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div=\r\n&gt;for this scenario, the server has a much more limited set of evolvability =\r\noptions. severs can remove inputs, remove links/forms, and/or change the or=\r\nder of their appearance and still expect the system to &quot;work properly.=\r\n&quot; IOW, the server cannot add any new inputs, links, or forms and expec=\r\nt the &#39;bot&#39; to &quot;know&quot; or &quot;understand&quot; these new=\r\n elements.&lt;/div&gt;\n\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;FWIW, i think there are a number of =\r\nways to improve the M2M case, but i am not yet prepared to talk about that =\r\nsince i have not made much progress yet in this area.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;=\r\ndiv&gt;i hope this gives you some ideas on how to tackle this problem and woul=\r\nd be interested in other POVs and observations on this topic.&lt;br clear=3D&quot;a=\r\nll&quot;&gt;\nmca&lt;br&gt;&lt;a href=3D&quot;http://amundsen.com/blog/&quot; target=3D&quot;_blank&quot;&gt;http://=\r\namundsen.com/blog/&lt;/a&gt;&lt;br&gt;&lt;a href=3D&quot;http://twitter.com&quot; target=3D&quot;_blank&quot;&gt;=\r\nhttp://twitter.com&lt;/a&gt;@mamund&lt;br&gt;&lt;a href=3D&quot;http://mamund.com/foaf.rdf#me&quot; =\r\ntarget=3D&quot;_blank&quot;&gt;http://mamund.com/foaf.rdf#me&lt;/a&gt;&lt;br&gt;\n&lt;br&gt;&lt;br&gt;\n&lt;br&gt;&lt;br&gt;&lt;b=\r\nr&gt;\n&lt;br&gt;&lt;br&gt;&lt;div&gt;On Fri, Dec 2, 2011 at 06:48, Jakob Strauch &lt;span dir=3D&quot;lt=\r\nr&quot;&gt;&lt;&lt;a rel=3D&quot;nofollow&quot; href=3D&quot;http://mc/compose?to=3Djakob.strauch@web=\r\n.de&quot; target=3D&quot;_blank&quot;&gt;jakob.strauch@...&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;block=\r\nquote style=3D&quot;border-left:1px #ccc solid&quot;&gt;\n\n\n\none major aspect of using hy=\r\npermedia is loose coupling and evolvability. but where are the boundaries? =\r\nwhich server-side changes may/may not affect hypermedia-aware clients?&lt;br&gt;\n=\r\n&lt;br&gt;\nfor example: as a human user, i can easely adapt to a change in a web =\r\nshop system, e.g. when the order procedure include suddenly an additional s=\r\ntep like providing an optional voucher code.&lt;br&gt;\n&lt;br&gt;\na hypermedia client c=\r\nan be easely redirected. but i=B4m sure the agent can=B4t do something usef=\r\nul there. at least not unless he gets tought how to deal with the new domai=\r\nn concept (e.g. a new media type) - which means updating to a new version.&lt;=\r\nbr&gt;\n\n\n\n\n&lt;br&gt;\nso which aspect can be really decoupled? as far as i can see, =\r\nthere are &quot;only&quot; technical details like internal structures, urls=\r\n. Speaking of evolvability, i think most changes to a growing API are more =\r\ndomain-related than technical-related.&lt;br&gt;\n\n\n\n\n&lt;br&gt;\nIf my assumptions are c=\r\norrect, is it maybe more important to develop hypermedia clients, which can=\r\n be updated by hot-deploy mechanisms?&lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;\n------------------=\r\n------------------&lt;br&gt;\n&lt;br&gt;\nYahoo! Groups Links&lt;br&gt;\n&lt;br&gt;\n&lt;*&gt; To visit=\r\n your group on the web, go to:&lt;br&gt;\n =A0 =A0&lt;a rel=3D&quot;nofollow&quot; href=3D&quot;http=\r\n://groups.yahoo.com/group/rest-discuss/&quot; target=3D&quot;_blank&quot;&gt;http://groups.ya=\r\nhoo.com/group/rest-discuss/&lt;/a&gt;&lt;br&gt;\n&lt;br&gt;\n&lt;*&gt; Your email settings:&lt;br&gt;=\r\n\n =A0 =A0Individual Email | Traditional&lt;br&gt;\n&lt;br&gt;\n&lt;*&gt; To change settin=\r\ngs online go to:&lt;br&gt;\n =A0 =A0&lt;a rel=3D&quot;nofollow&quot; href=3D&quot;http://groups.yaho=\r\no.com/group/rest-discuss/join&quot; target=3D&quot;_blank&quot;&gt;http://groups.yahoo.com/gr=\r\noup/rest-discuss/join&lt;/a&gt;&lt;br&gt;\n =A0 =A0(Yahoo! ID required)&lt;br&gt;\n&lt;br&gt;\n&lt;*&g=\r\nt; To change settings via email:&lt;br&gt;\n =A0 =A0&lt;a rel=3D&quot;nofollow&quot; href=3D&quot;ht=\r\ntp://mc/compose?to=3Drest-discuss-digest@yahoogroups.com&quot; target=3D&quot;_blank&quot;=\r\n&gt;rest-discuss-digest@yahoogroups.com&lt;/a&gt;&lt;br&gt;\n =A0 =A0&lt;a rel=3D&quot;nofollow&quot; hr=\r\nef=3D&quot;http://mc/compose?to=3Drest-discuss-fullfeatured@yahoogroups.com&quot; tar=\r\nget=3D&quot;_blank&quot;&gt;rest-discuss-fullfeatured@yahoogroups.com&lt;/a&gt;&lt;br&gt;\n&lt;br&gt;\n&lt;*=\r\n&gt; To unsubscribe from this group, send an email to:&lt;br&gt;\n =A0 =A0&lt;a rel=\r\n=3D&quot;nofollow&quot; href=3D&quot;http://mc/compose?to=3Drest-discuss-unsubscribe@yahoo=\r\ngroups.com&quot; target=3D&quot;_blank&quot;&gt;rest-discuss-unsubscribe@yahoogroups.com&lt;/a&gt;&lt;=\r\nbr&gt;\n&lt;br&gt;\n&lt;*&gt; Your use of Yahoo! Groups is subject to:&lt;br&gt;\n =A0 =A0&lt;a =\r\nrel=3D&quot;nofollow&quot; href=3D&quot;http://docs.yahoo.com/info/terms/&quot; target=3D&quot;_blan=\r\nk&quot;&gt;http://docs.yahoo.com/info/terms/&lt;/a&gt;&lt;br&gt;\n&lt;br&gt;\n&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/=\r\ndiv&gt;\n\n\n    &lt;/div&gt;\n     \n\n\n\n&lt;/div&gt;\n\n\n\n\n\n&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/td&gt;=\r\n&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\n\n\n\n\n\n&lt;br&gt;\n\n    \n    \n&lt;br&gt;\n\n\n\n\n&lt;div width=3D&quot;1&quot; style=\r\n=3D&quot;color:white;clear:both&quot;&gt;&lt;/div&gt;\n\n\n\n&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;\n\r\n--bcaec52e5b7937317504b325733a--\r\n\n"}}
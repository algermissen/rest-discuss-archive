{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":175757792,"authorName":"Roy T.Fielding","from":"Roy T.Fielding &lt;fielding@...&gt;","profile":"roy_fielding","replyTo":"SENDER","senderId":"RDH8_X8T3sTDeVeo2Nn3lt_SE7QNDAwZZPgIgP19KuaxWaqyaTEVv58n-1C7eh6brisRj6EX_7IfYTx5dR8FXxo7IJSir-Ksdw","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Re: Restful Approaches to some Enterprise Integration Problems","postDate":"1278559521","msgId":15809,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDA2MUM2MzJBLUREQjctNERFMy1CMjBELUU4MUY2NzcyMUMwOEBnYml2LmNvbT4=","inReplyToHeader":"PGkwdWxraCtsdnI5QGVHcm91cHMuY29tPg==","referencesHeader":"PGkwdWxraCtsdnI5QGVHcm91cHMuY29tPg=="},"prevInTopic":15799,"nextInTopic":15810,"prevInTime":15808,"nextInTime":15810,"topicId":15761,"numMessagesInTopic":45,"msgSnippet":"... I guess it depends on how you define guaranteed delivery.  You can certainly do such things with HTTP, but doing CRUD ops via HTTP does not automatically","rawEmail":"Return-Path: &lt;fielding@...&gt;\r\nX-Sender: fielding@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 67085 invoked from network); 8 Jul 2010 03:25:43 -0000\r\nX-Received: from unknown (98.137.34.44)\n  by m10.grp.re1.yahoo.com with QMQP; 8 Jul 2010 03:25:43 -0000\r\nX-Received: from unknown (HELO spaceymail-a7.g.dreamhost.com) (208.113.200.5)\n  by mta1.grp.sp2.yahoo.com with SMTP; 8 Jul 2010 03:25:43 -0000\r\nX-Received: from di-524.corp.day.com (wsip-98-189-13-228.oc.oc.cox.net [98.189.13.228])\n\tby spaceymail-a7.g.dreamhost.com (Postfix) with ESMTP id 2899AA8541;\n\tWed,  7 Jul 2010 20:25:23 -0700 (PDT)\r\nMime-Version: 1.0 (Apple Message framework v1081)\r\nContent-Type: text/plain; charset=us-ascii\r\nIn-Reply-To: &lt;i0ulkh+lvr9@...&gt;\r\nDate: Wed, 7 Jul 2010 20:25:21 -0700\r\nCc: rest-discuss@yahoogroups.com\r\nContent-Transfer-Encoding: quoted-printable\r\nMessage-Id: &lt;061C632A-DDB7-4DE3-B20D-E81F67721C08@...&gt;\r\nReferences: &lt;i0ulkh+lvr9@...&gt;\r\nTo: bryan_w_taylor &lt;bryan_w_taylor@...&gt;\r\nX-Mailer: Apple Mail (2.1081)\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Roy T.Fielding &lt;fielding@...&gt;\r\nSubject: Re: [rest-discuss] Re: Restful Approaches to some Enterprise Integration Problems\r\nX-Yahoo-Group-Post: member; u=175757792; y=0l1cR_dbIoEgqDpS6Aci2OCvIFkJA7sCBg2Zo7MtU7Xnja2dc6Eq\r\nX-Yahoo-Profile: roy_fielding\r\n\r\nOn Jul 6, 2010, at 12:22 AM, bryan_w_taylor wrote:\n&gt; --- In rest-discuss@ya=\r\nhoogroups.com, &quot;Roy T. Fielding&quot; &lt;fielding@...&gt; wrote:\n&gt; \n&gt; &gt; &gt; Specificall=\r\ny, we are trying to find RESTful solutions to:\n&gt; &gt; &gt; \n&gt; &gt; &gt; 1) Guaranteed D=\r\nelivery - we need a paradigm to follow so that one service can transfer a s=\r\nequence of resource representations to another reliably even though both se=\r\nrvices and the network suffer temporary unreliability\n&gt; &gt; \n&gt; &gt; That doesn&#39;t=\r\n sound like a problem encountered by RESTful\n&gt; &gt; architectures. Reliable up=\r\nload of multiple files can be\n&gt; &gt; performed using a single zip file, but th=\r\ne assumption being made\n&gt; &gt; here is that the client has a shared understand=\r\ning of what the\n&gt; &gt; server is intending to do with those files. That&#39;s coup=\r\nling.\n&gt; \n&gt; I don&#39;t follow. Several people have given good simple answers sa=\r\nying to use the idempotent nature of PUT (or fake it with POST) until a GET=\r\n of the resource succeeds or add an HTTP header of If-None-Match: * and rep=\r\neat the PUT until you get a 412 Precondition Failed response, so I thought =\r\nthis was a slam dunk.\n\nI guess it depends on how you define guaranteed deli=\r\nvery.  You can\ncertainly do such things with HTTP, but doing CRUD ops via H=\r\nTTP does\nnot automatically make it a RESTful paradigm.\n\n&gt; But that answers =\r\n&quot;how&quot; and I think you are getting at &quot;why&quot;. I&#39;m imagining that we have two =\r\nservers A and B, where A plays the role of the client in the interaction. E=\r\nvents happen on server A and server B must receive some representation rela=\r\nted to each event or unacceptable business consequences occur.\n\nAh, typical=\r\n event-based integration.  That&#39;s a good architectural\nstyle for some appli=\r\ncations.  Why use REST to do that?\n\n&gt; Why can&#39;t we merge the functionality =\r\nof server A and B? Lots of reasons: Security, regulatory compliance, use of=\r\n 3rd party systems, organizational boundaries and/or politics are a few. Th=\r\ne way a company manages it&#39;s systems engineering work is to partition busin=\r\ness functionality into pieces, give ownership of each piece to a team, and =\r\nalign physical resources like servers to those teams. If this imposes const=\r\nraints not found in RESTful systems, then I have no choice but to deal with=\r\n those. \n\nYes, but the RESTful solution is not to pretend that REST is an\ne=\r\nvent-based integration style.  What you want to do with REST is\nre-architec=\r\nt the system into more isolated parts that are event-based\n(usually a very =\r\nsmall communication subsystem) and the remainder\nas a layered information s=\r\nystem.  The reason to do this, presumably,\nis to expose the RESTful interfa=\r\nce to consumers instead of exposing\nthe much more complex (and brittle) eve=\r\nnt interface.\n\nFor example, CQ5 has a content repository based on the JCR\ni=\r\nnterface, which includes both observation (change event notifiers)\nand REST=\r\nful interaction.  The observation is behind the resource\ninterface, so the =\r\nfact that it isn&#39;t RESTful itself does not\ninterfere with the multi-organiz=\r\national, long-lived applications\nthat might only use the Web interface.\n\n&gt; =\r\n&gt; Applications like that are usually accomplished via code-on-demand.\n&gt; &gt; T=\r\nhe problem you will run into here is implementation issues\n&gt; &gt; regarding cu=\r\nrrent browsers, not architectural issues and\n&gt; &gt; certainly not a style issu=\r\ne. Most such tools are developed\n&gt; &gt; as browser extensions or app-specific =\r\nclients, mostly because\n&gt; &gt; they need unfettered access to the filesystem a=\r\nnd because\n&gt; &gt; browsers (for some unknown reason) don&#39;t include integrity c=\r\nhecks\n&gt; &gt; in normal file uploads.\n&gt; \n&gt; I expect the clients of most of our =\r\nservices would count as &quot;app specific clients&quot;. These might be our other se=\r\nrvices, our app servers that host user interfaces, or sometimes we will all=\r\now external business entities (customers, partners, suppliers, etc...) to w=\r\nrite such apps directly. I don&#39;t mind going beyond browser limitations. \n&gt; =\r\n\n&gt; &gt; &gt; 2) Distributed Transactions - we need a paradigm to allow state chan=\r\nges on multiple services to happen so that the changes succeed or fail as a=\r\n unit\n&gt; &gt; \n&gt; &gt; Again, not a characteristic of RESTful architectures. If the=\r\n\n&gt; &gt; client knows the transaction is distributed, you have failed.\n&gt; &gt; Ther=\r\ne are lots of ways to solve this kind of problem on the\n&gt; &gt; back-end of ser=\r\nvices interfaces, behind the resource abstraction,\n&gt; &gt; but none of those ar=\r\ne relevant to the REST architectural style\n&gt; &gt; that might apply on the fron=\r\nt-end of the service interface.\n&gt; \n&gt; This one I accept doesn&#39;t fit in a RES=\r\nTful solution, and in other posts in this thread, we are exploring several =\r\nof other ways you mention.\n&gt; \n&gt; &gt; &gt; 3) Long running operations - we need as=\r\nynchronous invocations between services and a mechanism for the invoking se=\r\nrvice to find out when the invoked service is done given that this work may=\r\n take indefinitely long\n&gt; &gt; \n&gt; &gt; Any resource can behave as a long-running =\r\nservice. Just program it that way.\n&gt; \n&gt; Right, the question is how, exactly=\r\n. Good solutions have been posted in this thread for this. Subbu&#39;s RESTful =\r\nWeb Services Cookbook solves this in examples 1.10 and 1.11. I think this w=\r\nas another slam dunk.\n&gt; \n&gt; I&#39;m curious what you think about using so called=\r\n &quot;web hooks&quot; for this kind of thing. Would you consider this a violation of=\r\n the client-server constraint? \n\nNo, web hooks is just someone&#39;s marketing =\r\nterm for registering\nnotifications.  The components that act on them are st=\r\nill either\nclients or servers during the communication (i.e., they are not\n=\r\ntrying to do both at the same time and functionality is still\nsplit across =\r\ncomponents).  This is not a new concept.  E.g.,\n\nhttp://www.xent.com/FoRK-a=\r\nrchive/apr98/0445.html\n\nhttp://www.xent.com/FoRK-archive/august98/0307.html=\r\n\n\n\n&gt; &gt; &gt; 4) Workflow Orchestration - we would like to have orchestration se=\r\nrvices that define business processes via standardized representations (eg =\r\nBPMN), then execute instances of those processes and build up an process in=\r\nstance execution data resource by interacting with other RESTful resources =\r\nusing message exchange patterns that could specify the above behaviors.\n&gt; &gt;=\r\n \n&gt; &gt; That is a system, not an integration problem. If you want to\n&gt; &gt; solv=\r\ne it, buy a full-featured WCM system like Day&#39;s CQ5.\n&gt; &gt; \n&gt; &gt; http://www.da=\r\ny.com/day/en/products/web_content_management.html\n&gt; &gt; \n&gt; &gt; (sorry, I don&#39;t =\r\nhave a way to answer that one without sounding\n&gt; &gt; like a sales plug -- it =\r\nis, after all, why I work for a WCM vendor).\n&gt; \n&gt; No need to apologize for =\r\npointing me to a product that might be useful for us. I&#39;ve been in several =\r\nsales presentations in the last couple weeks with different vendors who hav=\r\ne big fancy workflow engines. They all want to talk about WS-BPEL and orche=\r\nstrating our SOAP endpoints. I enjoy the look of confusion when I mention t=\r\nhat we are considering not allowing any new services to be created using SO=\r\nAP. That seems to get their attention. They say &quot;what will you do instead?&quot;=\r\n and I say use HTTP and they say &quot;huh?&quot;. \n\nAs much as I like doing things i=\r\nn HTTP, there are many closed systems\nthat are better implemented in an eff=\r\nicient RPC syntax or a wire\nprotocol specifically designed for message queu=\r\nes.  Use whatever\nworks best for the specific architecture behind the resou=\r\nrce interface\nand then apply REST as the external facade to support large-s=\r\ncale\nintegration and reusability of the information produced/consumed.\n\nNot=\r\ne, however, that SOAP is fairly unique for being the least efficient\nway of=\r\n doing anything.  That&#39;s what happens when core protocol design\nis driven b=\r\ny marketing.\n\n....Roy\n\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":184797058,"authorName":"Benjamin Carlyle","from":"Benjamin Carlyle &lt;benjamincarlyle@...&gt;","profile":"fuzzybsc","replyTo":"SENDER","senderId":"HBOqOkxu_PNCIJT7PQLyEbbD926bddH9AmMbqJXp_J-JsmZeLX7xYcijFEr1U7Sw48sV-kAmVt_k7WfLecOIOGAj8cyUnqIFJdBjKfPOSRyw64t_YufkZuo","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Atompub missed opportunity","postDate":"1167824379","msgId":7404,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDExNjc4MjQzNzkuMTk5NzUuNTUuY2FtZWxAbG9jYWxob3N0LmxvY2FsZG9tYWluPg==","inReplyToHeader":"PDkyNzQ0MWIzMDcwMTAyMTAzMWozYTQwZGY3MWc0MTRhNjVhN2VhNWIxZTAwQG1haWwuZ21haWwuY29tPg==","referencesHeader":"PDkyNzQ0MWIzMDYxMjI4MTI1N2w3ZTc4MjQyYnM5NTYyMjBiZTFjNTFmZTQ2QG1haWwuZ21haWwuY29tPgkgPDExNjc1MTg3MjQuNDYzNy4xMi5jYW1lbEBsb2NhbGhvc3QubG9jYWxkb21haW4+CSA8OTI3NDQxYjMwNjEyMzAxNzA4aTIwYTlhYzJlb2Y5N2IwYTliODBjOTQ2ZGRAbWFpbC5nbWFpbC5jb20+CSA8MTE2NzYwODE5Ni41MTU3LjE1LmNhbWVsQGxvY2FsaG9zdC5sb2NhbGRvbWFpbj4JIDw5Mjc0NDFiMzA3MDEwMjEwMzFqM2E0MGRmNzFnNDE0YTY1YTdlYTViMWUwMEBtYWlsLmdtYWlsLmNvbT4="},"prevInTopic":7384,"nextInTopic":7426,"prevInTime":7403,"nextInTime":7405,"topicId":7295,"numMessagesInTopic":25,"msgSnippet":"... What you have to understand here, is that you are trying to replace human agreement with machine agreement. Humans are good at negotiating standards like","rawEmail":"Return-Path: &lt;benjamincarlyle@...&gt;\r\nX-Sender: benjamincarlyle@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 2459 invoked from network); 3 Jan 2007 11:56:03 -0000\r\nReceived: from unknown (66.218.66.172)\n  by m22.grp.scd.yahoo.com with QMQP; 3 Jan 2007 11:56:03 -0000\r\nReceived: from unknown (HELO mail21.syd.optusnet.com.au) (211.29.133.158)\n  by mta4.grp.scd.yahoo.com with SMTP; 3 Jan 2007 11:56:02 -0000\r\nReceived: from c210-49-93-69.rochd2.qld.optusnet.com.au (c210-49-93-69.rochd2.qld.optusnet.com.au [210.49.93.69])\n\tby mail21.syd.optusnet.com.au (8.13.1/8.13.1) with ESMTP id l03BdeIO007432;\n\tWed, 3 Jan 2007 22:39:42 +1100\r\nTo: Hugh Winkler &lt;hughw@...&gt;\r\nCc: REST Discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nIn-Reply-To: &lt;927441b30701021031j3a40df71g414a65a7ea5b1e00@...&gt;\r\nReferences: &lt;927441b30612281257l7e78242bs956220be1c51fe46@...&gt;\n\t &lt;1167518724.4637.12.camel@...&gt;\n\t &lt;927441b30612301708i20a9ac2eof97b0a9b80c946dd@...&gt;\n\t &lt;1167608196.5157.15.camel@...&gt;\n\t &lt;927441b30701021031j3a40df71g414a65a7ea5b1e00@...&gt;\r\nContent-Type: text/plain\r\nDate: Wed, 03 Jan 2007 21:39:39 +1000\r\nMessage-Id: &lt;1167824379.19975.55.camel@...&gt;\r\nMime-Version: 1.0\r\nX-Mailer: Evolution 2.6.3 \r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:0:0:0\r\nFrom: Benjamin Carlyle &lt;benjamincarlyle@...&gt;\r\nSubject: Re: [rest-discuss] Atompub missed opportunity\r\nX-Yahoo-Group-Post: member; u=184797058; y=JmODCtkrFZTPlseGBIIDsiuDjaIyfQ7uDPUw3bjpIdkDgY8\r\nX-Yahoo-Profile: fuzzybsc\r\n\r\nOn Tue, 2007-01-02 at 12:31 -0600, Hugh Winkler wrote:\n&gt; On 12/31/06, Benjamin Carlyle &lt;benjamincarlyle@...&gt; wrote:\n&gt; &gt; On Sat, 2006-12-30 at 19:08 -0600, Hugh Winkler wrote:\n&gt; &gt; &gt; On 12/30/06, Benjamin Carlyle &lt;benjamincarlyle@...&gt; wrote:\n&gt; &gt; &gt; &gt; I&#39;m not sure who you think will interpret this form on the client\n&gt; &gt; &gt; side.\n&gt; &gt; &gt; &gt; You see, the thing is that the atom document format is already a\n&gt; &gt; &gt; form. A\n&gt; &gt; &gt; &gt; client has already received the form by being programmed in a\n&gt; &gt; &gt; particular\n&gt; &gt; &gt; &gt; way, and is now submitting the form. It knows what information\n&gt; &gt; &gt; should be\n&gt; &gt; &gt; &gt; placed in each of the named fields. It knows how to construct the\n&gt; &gt; &gt; end\n&gt; &gt; &gt; &gt; document.\n&gt; &gt; &gt; Ah, but it is a standard form for all servers -- not for my particular\n&gt; &gt; &gt; server app. And to know what kind of form to submit, you read a spec\n&gt; &gt; &gt; -- you did not GET the description from the server. It&#39;s all baked in\n&gt; &gt; &gt; at design time.\n&gt; &gt; Exactly. It has been agreed ahead of time.\n&gt; That&#39;s the problem --- &quot;ahead of time&quot; rather than dynamically at run time.\n\nWhat you have to understand here, is that you are trying to replace\nhuman agreement with machine agreement. Humans are good at negotiating\nstandards like atom. It&#39;s a hard problem, but standards get nailed out.\nInformation producers agree to transform their internal models into the\nstandard format. Information consumers agree that the standard format is\na suitable source of data for their internal models. Internal models\noften have to bend as part of this process, and eventually realign\naround a competent standard to be more simliar than they are different.\n\nMachines are not good at negotiation. You give a machine a form to fill\nout, and the machine already needs to know how to fill out the form\nbefore it starts. The form says &quot;title&quot;, &quot;summary&quot;, &quot;content&quot;. The\nmachine already needs an internal model that has those elements. The\nform says &quot;don&#39;t give me the summary&quot;, the client could have code\nwritten to say &quot;only send the subset of the standard which the server\nsays it can accept&quot;. That&#39;s as good as you can do.\n\nYou can&#39;t give a client an arbitrary form that isn&#39;t a simple subset and\nexpect it to know what to do. If the client software wasn&#39;t written to\nknow that only one author might be supported on the other side, it can&#39;t\nchoose which author it should supply any better than the server side.\nYou are lucky if it can interpret the server&#39;s instructions not to\nsupply more than one at all.\n\nYou can&#39;t arbitrarily place restrictions on the client as to how it\nshould fill out its content. The only practical way to do it is to write\na program that the client must run over a standard atom data model in\norder to fit the server&#39;s point of view. And guess what: That&#39;s the same\nprogram you would run on the server side if the client just submitted\nthe atom document in the first place.\n\nClients can&#39;t deal with unexpected server demands. Server demands are\nonly expected if they are negotiated between humans, which is to say\nthey are part of the atom specification. You can&#39;t do any better than\nwhat is in the standard by supplying a form.\n\n&gt; &gt;Now, I can just send my POST\n&gt; &gt; request and know that the server understands a useful subset of what I\n&gt; &gt; am sending them.\n&gt; Not sure how you would know it understands a useful subset. You won&#39;t\n&gt; have the slightest idea what parts of your document it understands, or\n&gt; doesn&#39;t. doesn&#39;t handle multiple authors? Can only accept text/plain\n&gt; for &lt;title&gt;?\n\nI know it understands because we agreed on the content through the atom\nstandardisation process. We agreed that I would send this much and the\nserver would understand that much. Whether understand means &quot;completely\nmodel&quot; is up to the server. It is free to cut the xhtml out of its\ntitle. It is even free to use the xhtml content as text/plain. That&#39;s\nits perrogative. What is not in its perrogative is to reject a\nwell-formed and valid atom document. If it intends to do that it should\nnot claim to understand atom in the first place.\n\n&gt; &gt; What you are suggesting is that I first need to obtain a schema document\n&gt; &gt; (which you are calling a form)\n&gt; A schema document is not a form. Maybe we should stay away from XML\n&gt; for a moment. Think HTML form...  which is a little &quot;program&quot; telling\n&gt; the UA how to serialize a submission.\n\nYou are describing the set of valid documents I can submit to you. You\ncan call it a form if you like, but it is more correctly a schema.\n\nIf you are no longer talking about a schema, and are now talking about a\nprogram to transform my atom content into your sub-atom content... then\nwhy aren&#39;t you running that program on the server side?\n\n&gt; &gt; to see if the server is actually\n&gt; &gt; understanding only a subset of the atom vocabulary.\n&gt; Not a subset... could be a superset.\n\nNow you are talking about the client supplying more elements than it\nknows how to supply. You are presumably talking about extensions to the\nstandard, but extensions are standards too. Extensions require human\nagreement between client and server in order to be understood.\n\n&gt; &gt; Then I need to\n&gt; &gt; customize my content to conform to this subset. As a machine, I don&#39;t\n&gt; &gt; have any good way of doing that.\n&gt; See, you have this problem anyway. If you are sending a server stuff\n&gt; it doesn&#39;t understand, or not enough stuff, your application will\n&gt; fail.\n\nBut I have already agreed through the standardisation process with the\nserver that it will understand my content. My application will only fail\nif the server fails to implement the specification.\n\n&gt; With forms, at least, your application knows &quot;Hey, I don&#39;t know how to\n&gt; fill out this required field&quot;. Same as a human would using an HTML\n&gt; form. Your client can report that to a human for correction.\n\nIt only knows if I write code. I only write code if I have communicated\nwith the guy who wrote the server about what is permissible. I have\nalready done this. We called that conversation the atom standardisation\nprocess.\n\nWhy do you think a human in the loop can do anything about the failure\nto communicate? Are they going to hack on their client application every\ntime a server says it only understands an unexpectedly-small subset of\natom or demands an extension element be supplied? No... if there is a\nhuman in the loop she will write an email to the server&#39;s administrator\nto inform him of his bug in failing to implement the specification. It\nis not the client&#39;s problem. It is the server&#39;s problem.\n\n&gt; Atom (and any application protocol based on exchanging known document\n&gt; types) has to trade off between exhaustively specifying application\n&gt; behavior and exhaustively specifying failure handling.\n\nAnd exhaustively supporting forwards-compatability for extensions, and\nexhaustively trading server and client-side complexity for protocol\nfeatures.\n\n&gt; &gt;If I come up to a server that has\n&gt; &gt; support for an unexpectedly small subset of atom, I then have to\n&gt; &gt; customize my content in an unexpected way.\n&gt; It is better for you to do the customizing. TTake the example of a\n&gt; server that simply cannot honor text/html or application/xhtml+xml in\n&gt; the title field. It can only handle text/plain. Atom protocol says\n&gt; nothing at the moment about this situation, except that the server can\n&gt; change your POSted data as it needs to. So presently my server either\n&gt; a) rejects your submission or b) stores it as text/plain.  Better\n&gt; would be for your client to receive an Xform with a constraint\n&gt; specifiying &quot;text/plain&quot; only -- then, if the user had any imprtant\n&gt; rich content they wanted to put in the title, they can at least try to\n&gt; compensate.\n\nNo no no.... the client doesn&#39;t know how to customise the content. As\nthe author of the client I relied on the atom specification that says I\ncan supply a content element and I did. Now your server is telling me it\ndoesn&#39;t understand it and wants a summary element instead? My client is\nnot written to deal with that. The server can deal with its own\nshortcomings, thankyou. If it doesn&#39;t understand the protocol it should\nstop speaking it.\n\nIf the server doesn&#39;t understand xhtml in the title, then tough! It\nknows that it must be expected to deal with xhtml in the title because\nwe agreed through the standardisation process that it should be capable.\nHow it provides that support as the atom spec rightly points out is up\nto the server. Maybe it will strip out anything in angle-brackets before\nstoring the value into its internal title variable. Maybe it will just\nuse the xhtml content verbatim. That&#39;s the server&#39;s problem. It isn&#39;t\npermitted to reject my submission. How is my client supposed to know\nthat what it needs to do in the face of this dumb server? We already\nagreed that xhtml was fine, and now this server wants to go back on\nthat? Move complexity to me, will you? No thanks. I&#39;ll find another\nserver to talk to. Maybe one that understands xhtml in the title.\n\n&gt; &gt;That is to say, I way that\n&gt; &gt; noone programmed me to customise my content in :)\n&gt; Well, you would have programmed it from this pov, so you would have\n&gt; handled these exceptional situations.\n\nI don&#39;t write client software to deal with broken servers that don&#39;t\nimplment the spec. It is up to the server to deal with the problem if it\ncan&#39;t translate my request precisely.\n\n&gt; &gt; The server, on the other hand, is in a good position to customise the\n&gt; &gt; content. It knows which subset of atom it understands, and it knows what\n&gt; &gt; atom is generally. It knows multiple authors might be required, so is in\n&gt; &gt; a position to either model those multiple authors or use an algorithm to\n&gt; &gt; select an author for its model from the available list.\n&gt; See above. Yes, you are describing the undesirable behavior the\n&gt; current APP forces you into.\n\nQuite the opposite. Your suggestion doesn&#39;t hold water. The spec\nreflects decades of experience in developing protocols that work and can\nevolve succesfully for decades to come. Do you think you can do better\nwithout having written software on more than one side of the\nclient/server fence?\n\n&gt; &gt; &gt; What I proposed is that the form delivered by a server have just the\n&gt; &gt; &gt; elements that make sense for the server. My server might not know what\n&gt; &gt; &gt; to do with a &lt;source&gt; element. Using the standard &quot;form&quot;, my server\n&gt; &gt; &gt; has to have handling in place if you submit a &lt;source&gt; element, and it\n&gt; &gt; &gt; has to describe to you the problem if you do submit &lt;source&gt; and my\n&gt; &gt; &gt; server rejects it.\n&gt; &gt; All atom elements make sense to the server, even if they don&#39;t fit the\n&gt; &gt; server&#39;s internal model.\n&gt; &gt; The server implements atom, after all.\n&gt; not so -- the client may submit extgension elements the server isn&#39;t aware of.\n\nAnd the server is required to ignore them and the client is required to\naccept that old servers will ignore them. That&#39;s the way extensible\nprotocols work. If the extension is good it will be supported. If it is\nnot it will be ignored, sidelined, and eventually forgotten.\n\n&gt; &gt; What you\n&gt; &gt; are suggesting is adding an extra message exchange to move the\n&gt; &gt; complexity of fitting atom into the server&#39;s model back to the client.\n&gt; &gt; Neither side is going to be great at solving a model mismatch problem,\n&gt; &gt; but the client is likely to be downright incapable.\n&gt; As above: The client is in the best position to take corrective\n&gt; action, so as to best fulfill its intent.\n\nShow me the code. Your solution requires me to write client-side code\nevery time a new kind of dumb server is placed on the internet. That\ndoesn&#39;t work. That doesn&#39;t scale. Machines can&#39;t negotiate, only humans\ncan... and we already have. If you have anything more to add to that\nconversation you had better to do it. Don&#39;t try to hold a separate\nconversation with my client software. It doesn&#39;t know how to hold that\nconversation.\n\n&gt; Forms made the web adaptive. Go to any airline reservation web site.\n&gt; They&#39;re all the same, but different too. They mostly do the same\n&gt; things, but Orbitz offers packages with hotels and cars, while Delta\n&gt; offers connections with partner airlines, and  Priceline won&#39;t let you\n&gt; see the itinerary. There&#39;s some shared vocabulary among all those\n&gt; sites but varying behavior. If the airlines standardize their\n&gt; vocabulary for forms, you could program a client to interact,\n&gt; adaptively, with all those sites. But you could not constrain\n&gt; Priceline&#39;s app to squeeze into the same behavior model as Delta&#39;s.\n&gt; And you shouldn&#39;t -- you should encourage diversity among web apps, as\n&gt; has been successful on the web to date.\n\nThe evolvability of HTML and HTTP are what have been successful on the\nweb to date. Atom follows the evolvability and agreement model of its\npredecessors. Do you really want your web server to have to retrieve a\nform from every browser that requests a html page before it can be\nreturned? When that form says &quot;I don&#39;t understand paragraph markers&quot;,\nwhat will your web server do to make the content fit?\n\nBenjamin.\n\n\n"}}
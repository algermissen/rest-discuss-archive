{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":289191104,"authorName":"Jan Algermissen","from":"Jan Algermissen &lt;algermissen1971@...&gt;","profile":"algermissen1971","replyTo":"SENDER","senderId":"5xqHRfElXRy8yX-NmlWkIE90TvXO3GiP-eGpbUam5wNYhqe83MxVSmQ3dsVy9kSMsAE0yU4D7cPTFTq2iFYg0kQoAlcxqD0nAVm61bk0mw4","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] POST at most once / reliable messaging","postDate":"1170583986","msgId":7807,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEJBRkJBMDlGLUYwNTYtNEQ0Qi1BOEI3LTEyRjM0M0RDNUY5Q0BtYWMuY29tPg==","inReplyToHeader":"PDExNzA1NzkzMDcuNDk2Ni4zOC5jYW1lbEBsb2NhbGhvc3QubG9jYWxkb21haW4+","referencesHeader":"PDExNjkyOTc0NjUuNTEzMC41NS5jYW1lbEBsb2NhbGhvc3QubG9jYWxkb21haW4+IDw0NUIyNzQ0Mi4zMDMwMDAzQGRlaG9yYS5uZXQ+IDwxMTY5ODc1OTc1LjUzNjMuNDIuY2FtZWxAbG9jYWxob3N0LmxvY2FsZG9tYWluPiA8QzQzOEVBOUMtOEFGMC00OUQ1LUJGMUYtOThBMDZGQjJDNTczQG1hYy5jb20+IDwxMTcwNTc5MzA3LjQ5NjYuMzguY2FtZWxAbG9jYWxob3N0LmxvY2FsZG9tYWluPg=="},"prevInTopic":7806,"nextInTopic":7808,"prevInTime":7806,"nextInTime":7808,"topicId":7646,"numMessagesInTopic":40,"msgSnippet":"... Yes, exactly. Currently I am thinking about POST /poe-collection-factory 201 Created Location: /peo-collections/66525 Meaning the client requests the","rawEmail":"Return-Path: &lt;algermissen1971@...&gt;\r\nX-Sender: algermissen1971@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 32761 invoked from network); 4 Feb 2007 10:15:00 -0000\r\nReceived: from unknown (66.218.66.166)\n  by m44.grp.scd.yahoo.com with QMQP; 4 Feb 2007 10:15:00 -0000\r\nReceived: from unknown (HELO smtpout.mac.com) (17.250.248.181)\n  by mta5.grp.scd.yahoo.com with SMTP; 4 Feb 2007 10:15:00 -0000\r\nReceived: from mac.com (smtpin06-en2 [10.13.10.151])\n\tby smtpout.mac.com (Xserve/8.12.11/smtpout11/MantshX 4.0) with ESMTP id l14AEgto014358;\n\tSun, 4 Feb 2007 02:14:42 -0800 (PST)\r\nReceived: from [80.171.192.154] (d192154.adsl.hansenet.de [80.171.192.154])\n\t(authenticated bits=0)\n\tby mac.com (Xserve/smtpin06/MantshX 4.0) with ESMTP id l14AEYAd000997;\n\tSun, 4 Feb 2007 02:14:37 -0800 (PST)\r\nIn-Reply-To: &lt;1170579307.4966.38.camel@...&gt;\r\nReferences: &lt;1169297465.5130.55.camel@...&gt; &lt;45B27442.3030003@...&gt; &lt;1169875975.5363.42.camel@...&gt; &lt;C438EA9C-8AF0-49D5-BF1F-98A06FB2C573@...&gt; &lt;1170579307.4966.38.camel@...&gt;\r\nMime-Version: 1.0 (Apple Message framework v752.3)\r\nContent-Type: text/plain; charset=US-ASCII; delsp=yes; format=flowed\r\nMessage-Id: &lt;BAFBA09F-F056-4D4B-A8B7-12F343DC5F9C@...&gt;\r\nCc: Mark Baker &lt;distobj@...&gt;, Bill de hOra &lt;bill@...&gt;,\n        REST Discuss &lt;rest-discuss@yahoogroups.com&gt;,\n        Mark Nottingham &lt;mnot@...&gt;\r\nContent-Transfer-Encoding: 7bit\r\nDate: Sun, 4 Feb 2007 11:13:06 +0100\r\nTo: Benjamin Carlyle &lt;benjamincarlyle@...&gt;\r\nX-Mailer: Apple Mail (2.752.3)\r\nX-Brightmail-Tracker: AAAAAA==\r\nX-Brightmail-scanned: yes\r\nX-eGroups-Msg-Info: 1:0:0:0\r\nFrom: Jan Algermissen &lt;algermissen1971@...&gt;\r\nSubject: Re: [rest-discuss] POST at most once / reliable messaging\r\nX-Yahoo-Group-Post: member; u=289191104; y=TcZGXT1vfLq5iV1UdsLCRr2UMZbAKxfuK96y8A5iucJdvuQrBqWI7InX\r\nX-Yahoo-Profile: algermissen1971\r\n\r\n\nOn 04.02.2007, at 09:55, Benjamin Carlyle wrote:\n\n&gt; On Sat, 2007-01-27 at 11:32 +0100, Jan Algermissen wrote:\n&gt;&gt; The model I am thinking about to achieve POE is based on the use of\n&gt;&gt; Atom and the inclusion of an ID in the POST body (or an HTTP header).\n&gt;&gt; POE aware clients would receive the ID to use from a factory, non-POE\n&gt;&gt; aware clients would just do the normal POST.\n&gt;\n&gt; One of my REST design instincts is that whenever I see an ID used as\n&gt; part of a message exchange pattern, I wonder why it isn&#39;t a URL. I  \n&gt; think\n&gt; ids in headers have a tendancy to hide shared communication state\n&gt; instead of making it explicit. In this case I would prefer that the ID\n&gt; be the URL of the resource that the client needs to interact with  \n&gt; next.\n&gt; When the client makes its request to the factory this urls should be\n&gt; returned in the Location header of the response.\n\nYes, exactly. Currently I am thinking about\n\nPOST /poe-collection-factory\n\n201 Created\nLocation: /peo-collections/66525\n\nMeaning the client requests the factory to create a poe collection  \n(an APP collection that supports POST-retry)\n\n\n&gt;\n&gt;&gt; Another thought I had was that the client could probably create the\n&gt;&gt; ID itself (e.g. a tag: URI) and a new HTTP return code could indicate\n&gt;&gt; to the client that the ID was&#39;t suitable (together with a good one in\n&gt;&gt; the payload).\n&gt;\n&gt; Mark Baker has just suggested the use of a client-generated id,\n&gt; something like a client etag. The WS-* reliabile messaging  \n&gt; specification\n&gt; also uses a client-generated ID, but this time it is a sequence number\n&gt; a-la TCP so that missed messages and message ordering can also be  \n&gt; dealt\n&gt; with.\n\nYes, interesting. Have to think about it. Generally what I dislike  \nabout all ideas so far is the\nserver side state, even if it is cheap. It sill affects scalability,  \nruntime substitution of server components etc., basically\nall the good stuff about REST we tend to promote :-)\n\n&gt;\n&gt; I think the WS-* approach is interesting. I sometimes find myself\n&gt; wanting to be sure that requests are processed in the order in which\n&gt; they are sent. For example in SENA[1] I get a timing signal from the\n&gt; server to indicate something has changed. If these signals arrive too\n&gt; fast I might still have a previous GET outstanding. Should I send the\n&gt; new GET immediately, or wait until the existing one returns?\n&gt;\n&gt; If I send immediately the response will come back sooner, and I  \n&gt; will be\n&gt; able to update the state of some soft-realtime data on my page.  \n&gt; However\n&gt; under extreme conditions it is possible that my GET requests to the  \n&gt; same\n&gt; URL could be processed out of order. It might even be possible for the\n&gt; response I recieve second to be older than the response I recieve  \n&gt; first.\n&gt; If I update the user&#39;s screen with the second I could be misleading\n&gt; them.\n&gt;\n&gt; In practice, however, the use of sequence numbers can be pretty  \n&gt; limiting\n&gt; to scalability. The REST constraint of &quot;no shared communication state\n&gt; between requests&quot; helps explain why. If I am up to sequence number 200\n&gt; and the server fails over to an unrelated server, we won&#39;t be able to\n&gt; continue the conversation. We will have to reinitiate it from scratch.\n&gt; This already happens with HTTP/1.1 TCP/IP connections. It is usually\n&gt; necessary to tear down and reestablish the TCP/IP connection on server\n&gt; failover. It is probably impractical to try and ensure TCP-level\n&gt; failover even within a close-knit cluster. It is only slightly more\n&gt; practical to use a TCP-like technique at the coarser-grained message\n&gt; level. Certainly when clusters operate between physical sites it can\n&gt; become quite difficult.\n\nOnly scanned these paragraphs quickly, but it appears there is something\ncommunication state that should be represented as a resource, or?\n\n\n&gt;\n&gt; This suggests that reliable messaging that guarantees ordering of\n&gt; message processing is not achievable in the general case, though  \n&gt; special\n&gt; environments may support it. There will always be chances for loss of\n&gt; communication state on failover. Even without failover it is an unfair\n&gt; assumption that a server will process requests from a single client in\n&gt; sequence.\n\nIMO, if you want sequence, you need an application that controls that  \nsequence\n(via hypermedia).\n\nCoordination between processes is on a request-by-request basis in  \nREST. If you\nwant more complex coordination, you need application state (managed  \nby some\nof the coordinated parties).\n\n\n&gt; Proxies could reorder or alter the sequence, and simple\n&gt; threading models that perform parallelisation of processing will break\n&gt; the model. Ultimately, at most once delivery is probably as close  \n&gt; to the\n&gt; ideal that we can reach in general.\n&gt;\n&gt; On Sat, 2007-02-03 at 23:24 -0500, Mark Baker wrote:\n&gt;&gt; A technique I&#39;ve used once was to have the client send an HTTP header\n&gt;&gt; in the POST request which played a role sort of like a client-side\n&gt;&gt; etag with respect to the request body.  The server, upon receiving  \n&gt;&gt; the\n&gt;&gt; message and updating the state of the resource, would return another\n&gt;&gt; header containing a hash of the last days worth of tags (which wasn&#39;t\n&gt;&gt; many) on GET requests to that resource so that it could check if  \n&gt;&gt; *its*\n&gt;&gt; update was applied.\n&gt;\n&gt; The SCADA approach is more direct, but then again it is working on\n&gt; physical devices. You send a request for a transition. If all of the\n&gt; computer and networking devices are fine you&#39;ll get the equivalent  \n&gt; of an\n&gt; OK back. However, all we know is that we kicked the servos into  \n&gt; action.\n&gt; It is possible that the mechanical device itself hasn&#39;t moved. The\n&gt; device provides a read-back as to its actual state, and we configure a\n&gt; timeout by which it must reach that state. No resends occur as this is\n&gt; usually considered dangerous, however if the state doesn&#39;t match  \n&gt; what we\n&gt; requested soon enough it is reported as an error to the user for\n&gt; correction.\n&gt;\n&gt; The possible unreliability of mechanical devices (even of their\n&gt; read-backs) has interesting effects on idempotency. We have what are\n&gt; known as &quot;trip to trip&quot; transitions and &quot;close to close&quot;. In other\n&gt; words, everything we can see says that the device is in a particular\n&gt; state. However the user has determined from other evidence (ie by\n&gt; examining other resources) that we are being lied to. They send a\n&gt; request to put the device into the same state that it is currently in.\n&gt; We give the servos on the device another kick, and it usually fixes  \n&gt; the\n&gt; problem. Interestingly, though, we would normally not retry an\n&gt; idempotent request like this automatically. Every time we kick those\n&gt; servos it reduces the lifetime of the mechanical device. A big circuit\n&gt; breaker might only have 50 trips in it before it needs maintenence. We\n&gt; would not normally issue any request to a device like that unless the\n&gt; user is directly at the helm requesting it.\n&gt;\n\nUnable to digest all this right now, but sounds very interesting.\n\nJan\n\n&gt; Benjamin.\n&gt; [1] http://soundadvice.id.au/blog/draft-carlyle-sena-01.txt\n&gt;\n\n\n"}}
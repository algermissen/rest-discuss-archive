{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":352334505,"authorName":"Craig McClanahan","from":"Craig McClanahan &lt;craigmcc@...&gt;","profile":"craig_mcclanahan","replyTo":"SENDER","senderId":"A7Ox4ibsS2_jmLHGyjUmd9qJlXG6W-_wbexjS7Omk2YYCtyedx-SRMweDBkfRMbkpMouXbu6YKf7iPmbflY_dUrOF95_slPeXiKBgg","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Why HATEOAS?","postDate":"1238609577","msgId":12374,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGY4YjM5YWNlMDkwNDAxMTExMnQ1OWFmM2FjdThkODk0NzdjNDI3NTQwY0BtYWlsLmdtYWlsLmNvbT4=","inReplyToHeader":"PDEyMzg1Nzk0NzcuNjE3MS41MS5jYW1lbEBsaW5uYT4=","referencesHeader":"PDU1YzYwZTM3MDkwMzMxMTcwMXg0YWRhYzAyZG8zNjliNWQ4NjE3MDBmNmU2QG1haWwuZ21haWwuY29tPgkgPGY4YjM5YWNlMDkwMzMxMTc1OWwzY2JjZGFmNWoyZDkwZWU5NzJhMjJmNGFiQG1haWwuZ21haWwuY29tPgkgPDEyMzg1Nzk0NzcuNjE3MS41MS5jYW1lbEBsaW5uYT4="},"prevInTopic":12373,"nextInTopic":12375,"prevInTime":12373,"nextInTime":12375,"topicId":12357,"numMessagesInTopic":27,"msgSnippet":"Snipping and interspersing a few comments: ... In the specification, this is described on the various pages like ","rawEmail":"Return-Path: &lt;craigmcc@...&gt;\r\nX-Sender: craigmcc@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 16368 invoked from network); 1 Apr 2009 18:13:18 -0000\r\nX-Received: from unknown (69.147.108.201)\n  by m5.grp.sp2.yahoo.com with QMQP; 1 Apr 2009 18:13:18 -0000\r\nX-Received: from unknown (HELO qw-out-2122.google.com) (74.125.92.24)\n  by mta2.grp.re1.yahoo.com with SMTP; 1 Apr 2009 18:13:18 -0000\r\nX-Received: by qw-out-2122.google.com with SMTP id 8so132184qwh.45\n        for &lt;rest-discuss@yahoogroups.com&gt;; Wed, 01 Apr 2009 11:13:01 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.220.72.209 with SMTP id n17mr3797888vcj.44.1238609577787; Wed, \n\t01 Apr 2009 11:12:57 -0700 (PDT)\r\nIn-Reply-To: &lt;1238579477.6171.51.camel@linna&gt;\r\nReferences: &lt;55c60e370903311701x4adac02do369b5d861700f6e6@...&gt;\n\t &lt;f8b39ace0903311759l3cbcdaf5j2d90ee972a22f4ab@...&gt;\n\t &lt;1238579477.6171.51.camel@linna&gt;\r\nDate: Wed, 1 Apr 2009 11:12:57 -0700\r\nMessage-ID: &lt;f8b39ace0904011112t59af3acu8d89477c427540c@...&gt;\r\nTo: &quot;Andrew S. Townley&quot; &lt;ast@...&gt;\r\nCc: Solomon Duskis &lt;sduskis@...&gt;, Rest List &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Craig McClanahan &lt;craigmcc@...&gt;\r\nReply-To: craigmcc@...\r\nSubject: Re: [rest-discuss] Why HATEOAS?\r\nX-Yahoo-Group-Post: member; u=352334505; y=TJYS8fI2LaEC9LGz52Ziv9w6w230sTidUxPGA6LwiPOtblSN-MdbfvjbVw\r\nX-Yahoo-Profile: craig_mcclanahan\r\n\r\nSnipping and interspersing a few comments:\n\nOn Wed, Apr 1, 2009 at 2:51 AM,=\r\n Andrew S. Townley &lt;ast@...&gt; wrote:\n&gt; This was a great post. =A0I&#39;=\r\nm looking at doing something similar for an\n&gt; application as well, but, hav=\r\ning looked at the API for the Sun Cloud, I\n&gt; was planning on taking it a bi=\r\nt further.\n&gt;\n&gt; One thing that I see missing is &quot;full disclosure&quot; of the ope=\r\nrations\n&gt; (verbs) to be used as well as differentiation between actions vs.=\r\n\n&gt; information.\n\nIn the specification, this is described on the various pag=\r\nes like\n&lt;http://kenai.com/projects/suncloudapis/pages/CloudAPIVMRequests&gt;,\n=\r\nwhich describes the set of operations that a VM representation (or,\nmore pr=\r\noperly, a URI included in a VM representation).  On the wire,\nif you use th=\r\ne HTTP OPTIONS command to ask the server what verbs are\nsupported by that U=\r\nRI.  For example, the URI you get for the &quot;Attach\nVM to Public Address or V=\r\nNet&quot; will tell you that it only supports a\nPOST.\n\nWhat we are not including=\r\n in the representations, at least right now,\nis media type related restrict=\r\nions.  Partly, that is because many of\nthe operations are in fact polymorph=\r\nic (what happens depends on what\nmedia type you send in a request), and par=\r\ntly (at least in my view) is\nthat client applications using an API are goin=\r\ng to have *some*\nsemantic understanding of what is going on, so they will b=\r\ne &quot;hard\ncoding&quot; in a sense which representations to send already, so they\nd=\r\non&#39;t necessarily need to be told.  And, just knowing the media type\nstill d=\r\noesn&#39;t help you understand which fields have which impacts.\nThis is certain=\r\nly a design principle around which people will have\ndifferent opinions, but=\r\n it&#39;s the way we have gone so far.\n\n&gt;\n&gt; Don&#39;t get me wrong, I think the API=\r\n you have is pretty good! :)\n&gt;\n&gt; However, the only way that I could think o=\r\nf doing what I&#39;m talking about\n&gt; was to define some kind of envelope, or at=\r\n least a series of elements\n&gt; that were influenced by or imported directly =\r\nthe XHTML forms (and/or\n&gt; possibly XForms) elements to identify what action=\r\ns were possible for a\n&gt; given resource. =A0That way, you&#39;d have the full HA=\r\nTEOAS in the message\n&gt; and the clients wouldn&#39;t have to know anything excep=\r\nt how to interpret\n&gt; the markup. =A0I guess I should also say that I&#39;m look=\r\ning at XML\n&gt; representations here rather than JSON.\n\nXML versus JSON should=\r\nn&#39;t really matter all that much.  Indeed, I&#39;ve\nseen lots of APIs that suppo=\r\nrt both syntaxes (especially easy to do in\nJava if you&#39;re using JAX-RS, but=\r\n not that difficult in other\nenvironments).\n&gt;\n&gt; I was planning on posting s=\r\nome thoughts on this anyway, but the timing\n&gt; of this post was too good to =\r\npass up.\n&gt;\n&gt; What I was thinking was something like:\n&gt;\n&gt; &lt;ActionEnvelope&gt;\n&gt;=\r\n =A0&lt;Header&gt;\n&gt; =A0&lt;ActionList&gt;\n&gt; =A0 &lt;Action id=3D&quot;action1&quot; href=3D&quot;uri&quot; me=\r\nthod=3D&quot;POST&quot;&gt;Human readable description of the action here&lt;/Action&gt;\n&gt; =A0 =\r\n&lt;Action id=3D&quot;delete&quot; href=3D&quot;uri&quot; method=3D&quot;DELETE&quot;&gt;Delete this resource&lt;/=\r\nAction&gt;\n&gt; =A0 ...\n&gt; =A0&lt;/ActionList&gt;\n&gt; =A0&lt;/Header&gt;\n&gt; =A0&lt;Body&gt;\n&gt; =A0&lt;!-- a=\r\nny content can go here, and client processing will be based on\n&gt; either the=\r\n elements or the namespace URI(s) used in the root child\n&gt; element --&gt;\n&gt; =\r\n=A0&lt;/Body&gt;\n&gt; &lt;/ActionEnvelope&gt;\n&gt;\n&gt; Now, before everyone gets all fussy and =\r\nsays it&#39;s too much like SOAP, it\n&gt; truly isn&#39;t. =A0The only thing in common=\r\n is that it uses an envelope.\n\nA couple of thoughts and questions:\n\n* Why c=\r\nall out DELETE as a separate action?  I&#39;d tend to accept a DELETE\n  back to=\r\n the URI that got me this representation in the first place if I wanted\n  t=\r\no support that semantic.\n\n* It seems like you are focusing on an applicatio=\r\nn environment where the\n  client is a browser, and therefore potentially li=\r\nmited to &quot;form\nlike&quot; behaviors.\n  This leads you to a distinction between t=\r\nhe &quot;edit&quot; view of a &quot;read&quot; view of\n  a resource.  My preference is to assum=\r\ne that the client just wants the data,\n  and is totally in charge of format=\r\nting (you can synthesize a &lt;form&gt; or an\n  XForm in javascript), so I should=\r\nn&#39;t make model-versus-view distinctions\n  in the respresentations.\n\n&gt;\n&gt; The=\r\n other thing to note is that the total transitions available to the\n&gt; clien=\r\nt are the sum of any in-lined (like FORM submissions, regular\n&gt; hyperlink t=\r\nraversal, etc.) and then any of the other, &quot;meta&quot; actions\n&gt; possible for th=\r\ne system as a whole defined in the envelope&#39;s header.\n&gt;\n&gt; I went through se=\r\nveral iterations of putting them in in the &quot;real&quot;\n&gt; resource vs. in the hea=\r\nder, but this is where I&#39;m thinking at the\n&gt; moment, because it allows you =\r\nto easily process the resource for both\n&gt; human and machine interaction (th=\r\ne action list becomes a menu, for\n&gt; example, if the ultimate user agent wan=\r\nts (X)HTML -- this can be\n&gt; accomplished a number of different ways).\n&gt;\n&gt; I=\r\n was wondering if you guys went through this line of thinking with your\n&gt; A=\r\nPI design and discarded it, or if it was deemed either unnecessary or\n&gt; too=\r\n complicated.\n&gt;\n&gt; Of course, with this approach your automated user agent s=\r\ntill needs to\n&gt; understand the semantics of the action id&#39;s, but this would=\r\n be published\n&gt; as part of the API specification, separate from the specifi=\r\ncation for\n&gt; the underlying content schema(s), and the inputs required woul=\r\nd be fully\n&gt; supplied after making the request defined by the action.\n&gt;\n&gt; T=\r\nhis isn&#39;t terribly efficient, because an editing operation for the\n&gt; resour=\r\nce might look like:\n&gt;\n&gt; Step 1) Get the resource URI\n&gt;\n&gt; Step 2) Process th=\r\ne resource XML, recording the actions\n&gt;\n&gt; Step 3) If an action with ID &quot;edi=\r\nt&quot; exists in the header, but no form\n&gt; exists in the body, make request for=\r\n &quot;edit&quot; resource\n&gt;\n&gt; Step 4) Process the resource XML looking for &quot;resource=\r\n editing&quot; mark-up\n&gt; (defined by the API spec, probably a normal FORM in the=\r\n envelope body)\n&gt;\n&gt; Step 5) Supply available form values to be changed (als=\r\no prevents\n&gt; changing of read-only resource properties)\n&gt;\n&gt; Step 6) Submit =\r\nFORM\n&gt;\n&gt; Step 7) Process HTTP server response\n&gt;\n&gt; Granted, this certainly n=\r\not as efficient as:\n&gt;\n&gt; =A0PUT /vms/33333\n&gt; =A0Host: example.com\n&gt; =A0Autho=\r\nrization: Basic xxxxxxxxxxxxxxxxxxx\n&gt; =A0Accept: application/vnd.com.sun.cl=\r\noud.VM+json\n&gt; =A0Content-Length: nnn\n&gt; =A0Content-Type: application/vnd.com=\r\n.sun.cloud.VM+json\n&gt; =A0X-Cloud-Client-Specification-Version: 0.1\n&gt;\n&gt; =A0{\n=\r\n&gt; =A0 &quot;description&quot; : &quot;This is the new description&quot;\n&gt; =A0}\n&gt;\n&gt; But how does=\r\n the user agent know it can do this from the original\n&gt; resource?\n\nTurn tha=\r\nt question around.  With your approach, how does the client\nknow what value=\r\ns are valid in any of the input fields?  Or what is\ngoing to happen to the =\r\nstate of the system when you send in a POST or\na PUT or a DELETE?  My feeli=\r\nng is that the person developing the\nclient application is going to have to=\r\n understand this kind of\nsemantics anyway, so let&#39;s skip the extra round tr=\r\nips, and all the\nextra server side logic to create &quot;forms&quot; -- even if the c=\r\nlient really\nis an application that doesn&#39;t need such a thing.\n\nThe other t=\r\nhing I&#39;m doing, which is not obvious in the specification,\nis writing clien=\r\nt language bindings for this API (Java, Ruby, Python\nto start).  You don&#39;t =\r\nhave to use them, but it will make life simpler\nfor you.  In each language,=\r\n a VM representation is described as a\nclass VM with attributes/properties =\r\nfor all the fields, plus public\nmethods like attach() and detach() that tri=\r\ngger the POSTs to the\nappropriate URIs, with the appropriately formatted re=\r\npresentations.  A\nclient application that leverages a binding like this get=\r\ns a nice O-O\nview of the world, and all the stuff we RESTafarians love to a=\r\nrgue\nabout is hidden inside a black box :-).\n\nI&#39;ll be talking more about cl=\r\nient bindings once we&#39;re ready to publish\nthese as concrete examples ... th=\r\nere are some really interesting\ndecisions in how to represent a REST web se=\r\nrvice programmatically.\nBut I can tell you that the HATEOAS approach has ma=\r\nde writing these\nclients quite a lot easier.\n\n&gt;\n&gt; =A0HTTP/1.1 200 OK\n&gt; =A0C=\r\nontent-Type: application/vnd.com.sun.cloud.VM+json\n&gt; =A0Content-Length: nnn=\r\n\n&gt;\n&gt; =A0{\n&gt; =A0 &quot;name&quot; : &quot;web01&quot;,\n&gt; =A0 &quot;uri&quot; : &quot;http://example.com/vms/333=\r\n33&quot;\n&gt; =A0 &quot;run_status&quot; : &quot;RUNNING&quot;,\n&gt; =A0 &quot;model_status&quot; : &quot;DEPLOYED&quot;,\n&gt; =\r\n=A0 &quot;description&quot; : &quot;This is the old description&quot;\n&gt; =A0 ...\n&gt; =A0 &quot;back_up&quot;=\r\n : &quot;http://example.com/back-up?vm=3D33333&quot;\n&gt; =A0 &quot;attach&quot; : &quot;http://example=\r\n.com/attach?vm=3D33333&quot;,\n&gt; =A0 &quot;detach&quot; : &quot;http://example.com/detach-ip?vm=\r\n=3D33333&quot;,\n&gt; =A0 ...\n&gt; =A0}\n&gt;\n&gt; I realize the propsal above isn&#39;t perfect e=\r\nither, but it&#39;s really still\n&gt; in the embryonic phases at the moment. =A0Ho=\r\nwever, I plan on actually\n&gt; working through much of the detail over the nex=\r\nt few months, so any\n&gt; feedback (good, bad or otherwise) is welcome.\n&gt;\n&gt; Th=\r\ne Sun Cloud API is one of the more interesting ones that I&#39;ve seen\n&gt; recent=\r\nly, and I&#39;m sure there&#39;s lots to learn from it.\n&gt;\n&gt; Nice work.\n\nThanks.  Th=\r\nis API is still evolving, by the way, so feel free to\nprovide any direct fe=\r\nedback on the related wiki (free registration\nrequired).\n\n&gt;\n&gt; ast\n\nCraig\n\n\n=\r\n&gt; --\n&gt; Andrew S. Townley &lt;ast@...&gt;\n&gt; http://atownley.org\n&gt;\n&gt;\n\n"}}
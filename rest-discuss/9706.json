{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":272750603,"authorName":"Duncan Cragg","from":"&quot;Duncan Cragg&quot; &lt;rest-discuss@...&gt;","profile":"duncan_b_cragg","replyTo":"SENDER","senderId":"plnC-jSHNgUuYWajoq6VhrSHE2Twrqd6o9_83eLCWRkaq144FJJw9EnTxUQ7FeeQY21bH0n1ePyYgCcOsQ6LYVqR0lQjZoIAmWViULHF","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] advice sought re GET vs POST for RESTful search - URI opacity branch...","postDate":"1193671896","msgId":9706,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDViNWZlMTRhMDcxMDI5MDgzMWc3NTVlOWQ0MHM5ODE3NDJmMzVjNTcwNDZlQG1haWwuZ21haWwuY29tPg=="},"prevInTopic":0,"nextInTopic":9707,"prevInTime":9705,"nextInTime":9707,"topicId":9706,"numMessagesInTopic":9,"msgSnippet":"... This is also a great question for those of us in the sub-cult of RESTianism (! :-) who prefer opaque URIs where possible.  Of course, the answers you","rawEmail":"Return-Path: &lt;atomic.rant.surfer@...&gt;\r\nX-Sender: atomic.rant.surfer@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 65491 invoked from network); 29 Oct 2007 15:31:37 -0000\r\nX-Received: from unknown (66.218.67.94)\n  by m36.grp.scd.yahoo.com with QMQP; 29 Oct 2007 15:31:37 -0000\r\nX-Received: from unknown (HELO nz-out-0506.google.com) (64.233.162.234)\n  by mta15.grp.scd.yahoo.com with SMTP; 29 Oct 2007 15:31:37 -0000\r\nX-Received: by nz-out-0506.google.com with SMTP id m22so1332365nzf\n        for &lt;rest-discuss@yahoogroups.com&gt;; Mon, 29 Oct 2007 08:31:36 -0700 (PDT)\r\nX-Received: by 10.114.78.1 with SMTP id a1mr7171621wab.1193671896436;\n        Mon, 29 Oct 2007 08:31:36 -0700 (PDT)\r\nX-Received: by 10.114.174.20 with HTTP; Mon, 29 Oct 2007 08:31:36 -0700 (PDT)\r\nMessage-ID: &lt;5b5fe14a0710290831g755e9d40s981742f35c57046e@...&gt;\r\nDate: Mon, 29 Oct 2007 16:31:36 +0100\r\nTo: rest-discuss@yahoogroups.com\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=UTF-8\r\nContent-Transfer-Encoding: 7bit\r\nContent-Disposition: inline\r\nX-Google-Sender-Auth: c99546aa91a7b3bd\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Duncan Cragg&quot; &lt;rest-discuss@...&gt;\r\nSubject: Re: [rest-discuss] advice sought re GET vs POST for RESTful search - URI opacity branch...\r\nX-Yahoo-Group-Post: member; u=272750603; y=XzNBS0OQyUD1w3hd_r3aMFsUQJp9kH6Kn2DWjQRa-JWebuSNdjR0IEs\r\nX-Yahoo-Profile: duncan_b_cragg\r\n\r\nOriginal question chopped up:\n\n&gt;  http://example.com/search?query=atom+or+rss+syndication&type=article &#92;\n&gt;  &collection=my_collection&collection=your_collection&start=10&max=40\n&gt;\n&gt;  ..cache it, with the search md5 hash as the  key.\n&gt;\n&gt;  Embedded in the response are links to the &quot;previous&quot; and &quot;next&quot; set of\n&gt;  items (computed based on the &quot;start&quot; and &quot;max&quot; params of the original\n&gt;  request).  BUT, instead of embedding that entire query string, I can\n&gt;  simply embed a URL like:\n&gt;\n&gt;  http://example.com/search_hash/56YYYufgsfggfccFF098?start=50&max=40\n&gt;\n&gt;  for the &quot;next&quot; link.\n&gt;\n&gt;  Well, I appear to have used a GET request to create a new resource in\n&gt;  the search_hash resource &#39;collection&#39;, which I now refer to in the\n&gt;  resulting hypertext of that new search.  Should the original query\n&gt;  have used POST instead of GET?  (That seems wrong somehow, and in the\n&gt;  case of repeat searches it WON&#39;T create a new resource, but using GET\n&gt;  is CLEARLY resulting in a &#39;side effect&#39;, which is not allowed).\n&gt;\n\nThis is also a great question for those of us in the sub-cult of\nRESTianism (! :-) who prefer opaque URIs where possible.  Of course,\nthe answers you already got are totally correct, and you should follow\ntheir direction - if you don&#39;t want URI opacity. Why you may like URI\nopacity is a separate discussion, which I&#39;d be happy to address if\nyou&#39;re interested. The approach below is simply suggested to round out\nthe discussion...\n\nThose of us in this opaque-URI cult would, indeed, have you POST your\noriginal query. In general, you would POST your query to the (opaque!)\nURI of the collection you&#39;re querying. This collection then returns a\nredirect to a results resource that it has set up for you. In your\ncase, that would be easy - just redirect after the POST to your cache\nURI:\n\nhttp://example.com/search_hash/56YYYufgsfggfccFF098?start=0&max=40\n\nThe results here can either be tailored to this client in some way, or\nbe a cache of this specific query for everyone to use.  Further, it\nmay either be updated as the possible search results change, or stay\nas a constant, eternally-cacheable snapshot. Which of these can\nperhaps be set as an additional argument in the original POST query\nbody. Of course, this resource can have suitable headers sent along\nwith it, optimised to these particular dynamic and/or personalised\ncharacteristics. You may need to avoid nervous proxy-cache behaviour\naround query URIs by chunking up your results, after all, in chunks of\n40 with their own URIs, or, again, in chunks of a size asked for in\nthe original query.\n\nNote that a GET on the collection URI should return a content-type\nthat implies this URIs ability to accept such query POSTs.  For\nbrowsers, that&#39;d be a query form. For server-server REST integration,\nwe can talk on this list about defining generic a query protocol\nstandard for collections...\n\nOf course, the redirect is an extra call - amounting to two (probably\nsingle-packet) network latencies.  I&#39;d be interested in the opinions\nof this list on whether it is OK to optimise away this round-trip, by\nputting the results in the POST response and also putting the opaque\nURI in the Content-Location header. Unsavvy clients would redirect to\nthe Location, savvy clients would note the Location/Content-Location\nfor future accesses, but take the body directly, for now.\n\nI&#39;d also be interested to know how big this particular REST sub-cult\nis - I hope it&#39;s not just me!   =0)\n\nCheers!\n\nDuncan Cragg\n\n"}}
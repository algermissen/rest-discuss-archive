{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":184797058,"authorName":"Benjamin Carlyle","from":"Benjamin Carlyle &lt;benjamincarlyle@...&gt;","profile":"fuzzybsc","replyTo":"SENDER","senderId":"GQQ5r4BSYCAI5dWnllbn9Y9n910HzTl5MDfD0L4iiHLJ3uPVNsMlJUQwpRg2fCGoEeEADGF2Rf0pAJTLg27ynm3e0Sk0JY4YRwAmSQbmmSbriKQ_UI5r7x8","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: qualitative benchmarking (was Re: [rest-discuss] Sun proposes\tto apply Web service standardization principles to REST)","postDate":"1171831543","msgId":7915,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDExNzE4MzE1NDMuNjkyOC4yNi5jYW1lbEBsb2NhbGhvc3QubG9jYWxkb21haW4+","inReplyToHeader":"PDg3M2I1OG56d2YuZnNmXy1fQHRhcHNlbGxmZXJyaWVyLmNvLnVrPg==","referencesHeader":"PDQ1RDMyMzE5LjQwNTA2MDNAbWV0YWxhYi51bmMuZWR1PgkgPDdCMzU5RjI4LTBCRDMtNDg0Ri04QjM4LUM5N0EzNEQ3QzhGNEB3aGF0ZmV0dGxlLmNvbT4JIDw4NzNiNThuendmLmZzZl8tX0B0YXBzZWxsZmVycmllci5jby51az4="},"prevInTopic":7905,"nextInTopic":7918,"prevInTime":7914,"nextInTime":7916,"topicId":7830,"numMessagesInTopic":53,"msgSnippet":"... I think writing a client to automate anything will be difficult for the most important aspects of an architecture. Here is my quick list: Ad hoc","rawEmail":"Return-Path: &lt;benjamincarlyle@...&gt;\r\nX-Sender: benjamincarlyle@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 24044 invoked from network); 18 Feb 2007 20:47:01 -0000\r\nReceived: from unknown (66.218.67.33)\n  by m42.grp.scd.yahoo.com with QMQP; 18 Feb 2007 20:47:01 -0000\r\nReceived: from unknown (HELO mail21.syd.optusnet.com.au) (211.29.133.158)\n  by mta7.grp.scd.yahoo.com with SMTP; 18 Feb 2007 20:47:01 -0000\r\nReceived: from c210-49-75-64.rochd2.qld.optusnet.com.au (c210-49-75-64.rochd2.qld.optusnet.com.au [210.49.75.64])\n\tby mail21.syd.optusnet.com.au (8.13.1/8.13.1) with ESMTP id l1IKjiEZ024972;\n\tMon, 19 Feb 2007 07:45:46 +1100\r\nTo: Nic James Ferrier &lt;nferrier@...&gt;\r\nCc: Paul Downey &lt;paul.downey@...&gt;,\n        Elliotte Harold &lt;elharo@...&gt;,\n        REST Discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nIn-Reply-To: &lt;873b58nzwf.fsf_-_@...&gt;\r\nReferences: &lt;45D32319.4050603@...&gt;\n\t &lt;7B359F28-0BD3-484F-8B38-C97A34D7C8F4@...&gt;\n\t &lt;873b58nzwf.fsf_-_@...&gt;\r\nContent-Type: text/plain\r\nDate: Mon, 19 Feb 2007 06:45:43 +1000\r\nMessage-Id: &lt;1171831543.6928.26.camel@...&gt;\r\nMime-Version: 1.0\r\nX-Mailer: Evolution 2.6.3 \r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:0:0:0\r\nFrom: Benjamin Carlyle &lt;benjamincarlyle@...&gt;\r\nSubject: Re: qualitative benchmarking (was Re: [rest-discuss] Sun proposes\n\tto apply Web service standardization principles to REST)\r\nX-Yahoo-Group-Post: member; u=184797058; y=Wk8BiG9mhkdw0JKXMe-7pL14eHbLAwURqlyvuqIplEAjDHA\r\nX-Yahoo-Profile: fuzzybsc\r\n\r\nOn Wed, 2007-02-14 at 22:21 +0000, Nic James Ferrier wrote:\n&gt; One would have to come up with a list of attributes of RESTfull\n&gt; systems:\n&gt; - what&#39;s the content types? \n&gt; - does it support HEAD properly? \n&gt; - what happens when you do methods that aren&#39;t supported? etc...\n&gt; and then apply weights to each of them. \n&gt; Then write a client to test a webapp for each of the attributes (we\n&gt; might call them constraints /8-) and then produce a report.\n\nI think writing a client to automate anything will be difficult for the\nmost important aspects of an architecture. Here is my quick list:\n\nAd hoc interoperability, vertical scalability\n* Identifiers should fall into two overlapping classes:\n** Identifiers that select a particular piece of information to\nmanipulate, and\n** Identifiers that select a place where further data can be added (eg\nPOST(a) or POST(p))\n* Every resource should implement as many of the architecture&#39;s\ninteraction patterns as makes sense. eg GET, PUT, POST, DELETE, HEAD.\n** Content returned as the same document type by the same url should not\nnormally differ on other inputs such as cookies or basic authentication,\nthough personalisation can rub this up a little.\n* Content types should\n** Be free from verbs (except for code-on-demand), representing pure\ndata.\n** Encode similar data schemas into the same document type\n** Be standard wherever possible\n** Include standard documents as sub-documents wherever appropriate\n** Extend standard document types through subclassing when variation is\nrequired\n** Invent new document types when nothing out there is a good fit\n\nEvolvability:\n* Components should ignore features of a document they do not understand\n* Components should avoid wildcard matches in parsing that might lead\nthem to interpret a feature they do not understand as if it were one\nthey do understand\n* Components should not alter their processing depending on a version\nnumber found in a document\n* If incompatible changes occur to a document type, it should normally\nbe given a new document type identifier\n* Components should continue to support legacy features and interface\nuntil such time as it is known that they are no longer in use\n\nHorizontal scalability:\n* When a server does stores state due to client requests, that state is\neither:\n** Hidden from view, or\n** Made visible as a resource that can be further retrieved and\nmanipulated\n* Server-side state storage should be avoided when no money is changing\nhands to support this storage. This can be said for sessions, pub/sub,\nand other times when the server stores state either temporarily or\nperminently. Paying for bandwidth almost involves funny money, but\nstorage can really cost you. It hurts horizontal scalability, increases\ncomplexity, and generally makes life hard. That said, most services need\nto store some state. Just don&#39;t to any more than you have to.\n\nBenjamin.\n\n\n"}}
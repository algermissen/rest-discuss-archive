{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":175757792,"authorName":"Roy T. Fielding","from":"&quot;Roy T. Fielding&quot; &lt;fielding@...&gt;","profile":"roy_fielding","replyTo":"SENDER","senderId":"uyBicOljsx5TwrrV7Naxk25YaMxvLaRxzFsYGUKTEn0LkI0JL5ABg2Ekydnj386RiTYpGpHn2JwHSlsinuP8iyx-YcPcBqyyvibGIQ","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Re: REST intro slides","postDate":"1178812695","msgId":8377,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEJDMzQ0MEZFLUI1OUMtNDI0NS05MkJDLUQ5RjA3NkRBMDlGNkBnYml2LmNvbT4=","inReplyToHeader":"PDExNzg4MDQyNjkuMTYzNjYuMzQ2LmNhbWVsQHBob2VuaXg+","referencesHeader":"PGYxNHV1dStoMWhjQGVHcm91cHMuY29tPiA8MjAwNzA0MzAxNTE0MTEuR1kyMDc4NUBrbGFuZ3JhdW0+IDxCRkVBMkUxMi0zOTUyLTQ3QkItQjYyRi1GODJDNTNGNzhCNjJAbWluZHRvdWNoLmNvbT4gPDlDN0RCQUZFLUNCOTUtNDA4RS1BMzdGLTNBODY0QjE4RDNERUBnYml2LmNvbT4gPDExNzg4MDQyNjkuMTYzNjYuMzQ2LmNhbWVsQHBob2VuaXg+"},"prevInTopic":8376,"nextInTopic":8378,"prevInTime":8376,"nextInTime":8378,"topicId":8268,"numMessagesInTopic":41,"msgSnippet":"... Yep. ... Umm, no, it is essential to eliminate the coupling between client and server.  If the application doesn t follow the workflow defined by the","rawEmail":"Return-Path: &lt;fielding@...&gt;\r\nX-Sender: fielding@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 40103 invoked from network); 10 May 2007 15:58:43 -0000\r\nReceived: from unknown (66.218.67.36)\n  by m51.grp.scd.yahoo.com with QMQP; 10 May 2007 15:58:43 -0000\r\nReceived: from unknown (HELO spaceymail-a4.g.dreamhost.com) (208.97.132.202)\n  by mta10.grp.scd.yahoo.com with SMTP; 10 May 2007 15:58:41 -0000\r\nReceived: from [10.0.0.110] (bsl-rtr.day.com [62.192.10.254])\n\tby spaceymail-a4.g.dreamhost.com (Postfix) with ESMTP id 22DA5161537;\n\tThu, 10 May 2007 08:58:03 -0700 (PDT)\r\nIn-Reply-To: &lt;1178804269.16366.346.camel@phoenix&gt;\r\nReferences: &lt;f14uuu+h1hc@...&gt; &lt;20070430151411.GY20785@klangraum&gt; &lt;BFEA2E12-3952-47BB-B62F-F82C53F78B62@...&gt; &lt;9C7DBAFE-CB95-408E-A37F-3A864B18D3DE@...&gt; &lt;1178804269.16366.346.camel@phoenix&gt;\r\nMime-Version: 1.0 (Apple Message framework v752.2)\r\nContent-Type: text/plain; charset=US-ASCII; delsp=yes; format=flowed\r\nMessage-Id: &lt;BC3440FE-B59C-4245-92BC-D9F076DA09F6@...&gt;\r\nCc: Steve Bjorg &lt;steveb@...&gt;,\n\tREST Discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Transfer-Encoding: 7bit\r\nDate: Thu, 10 May 2007 08:58:15 -0700\r\nTo: Josh Sled &lt;jsled@...&gt;\r\nX-Mailer: Apple Mail (2.752.2)\r\nX-eGroups-Msg-Info: 1:0:0:0\r\nFrom: &quot;Roy T. Fielding&quot; &lt;fielding@...&gt;\r\nSubject: Re: [rest-discuss] Re: REST intro slides\r\nX-Yahoo-Group-Post: member; u=175757792; y=E6r5VKOSNfCzB8MExE9xc4aKiV8MLrTXND9O4J_QHtgAbEls614M\r\nX-Yahoo-Profile: roy_fielding\r\n\r\nOn May 10, 2007, at 6:37 AM, Josh Sled wrote:\n&gt; On Thu, 2007-05-10 at 05:53 -0700, Roy T. Fielding wrote:\n&gt;&gt; On May 9, 2007, at 12:54 PM, Steve Bjorg wrote:\n&gt;&gt;\n&gt;&gt;&gt; Thanks to everyone for your great feedback. It helped a lot!\n&gt;&gt;&gt;\n&gt;&gt;&gt; The final slides are uploaded here:\n&gt;&gt;&gt; http://doc.opengarden.org/REST/Introduction_to_REST\n&gt;&gt;\n&gt;&gt; It is missing one slide. I&#39;d point out which one, but I am curious\n&gt;&gt; if anyone else can figure out what is missing from the description.\n&gt;\n&gt; What is &quot;Hypermedia is the engine of application state&quot;?\n\nYep.\n\n&gt;&gt; I am especially curious because almost every presentation that\n&gt;&gt; tries to describe REST leaves the same bits out, and I am wondering\n&gt;&gt; if it is because I explained it poorly in my dissertation or if it\n&gt;&gt; is simply hard to understand why it is essential to the style.\n&gt;\n&gt; It&#39;s hard to apply in the machine-to-machine, replacement-for-RPC  \n&gt; case,\n&gt; which is where many people really want to use REST.  If the client  \n&gt; isn&#39;t\n&gt; a user-agent, but is instead a knowledgeable actor in the domain,  \n&gt; it can\n&gt; be out of place for the server to tell it what links to traverse, and\n&gt; what forms look like, rather than the client just constructing the  \n&gt; links\n&gt; and building the &quot;form-response&quot; from out-of-band knowledge.  It&#39;s  \n&gt; extra\n&gt; overhead.  While essential in the large-scale, evolutionary-web\n&gt; situation, it&#39;s wasted on the smaller-scale &quot;I know that I want to  \n&gt; make\n&gt; a version 1.1 &#39;POST shoppingCartItemAddition&#39; request of\n&gt; ShoppingCartFormat 2.7&quot;.\n\nUmm, no, it is essential to eliminate the coupling between client\nand server.  If the application doesn&#39;t follow the workflow defined\nby the representations that are received, then the application isn&#39;t\nusing the REST style.  Not even a little bit.  It is using RPC plus\nstreaming, with a rather inefficient syntax, and the client will\nbreak each time the server&#39;s application evolves because the client\nmust be anticipating the server&#39;s state based on its own assumptions.\nIn other words, the two are coupled by their original design.\n\nREST simplifies applications because it rips apart the million\npotential states inherent in any serious application and presents\nto the client only one at a time, with every single transition\nfrom that state described in a format that can be understood by\nthe client as a potential transition.  The client is completely\ndecoupled from the server aside from the shared agreement on what\neach media type means.  The entire application only needs to be\nunderstood (and can be completely tested) one state at a time.\n\nThe only difference between machine-to-machine interaction and\nhuman-browser interaction is the choice of media types and the\ndegree to which the potential transitions are described by those\ntypes. A browser knows the difference between an anchor and an\nin-line image because the media type standard defines that difference.\nIt doesn&#39;t have to ask the user each time whether they want a\ngiven relationship to be treated as an in-line image, stylesheet,\njavascript, atom subscription, or any of the other relationships\nthat are automated with even browser-based hypermedia.  A pure\nmachine-to-machine simply automates all transitions based on\nsome predefined (or adaptive) criteria that is evaluated for\neach representation received.\n\nHypermedia means the placement of controls within the presentation\nof information -- it is not just a GUI paradigm.\n\n&gt; As for the slides, I&#39;d not label it a &quot;design pattern&quot;.  As I\n&gt; understand, architecture sets up the constraints of a solution  \n&gt; space in\n&gt; a context, and design expresses a more specific class of technical\n&gt; solution within those constraints.\n\nPattern is, unfortunately, an overused term.  There are some\narchitectural patterns which are essentially the same as styles,\nbut most of the design patterns are simply language idioms.  The\nsoftware research folks call the former styles, whereas the\nOOPL research folks chose to call just about everything a design\npattern.  The funny thing is that Christopher Alexander&#39;s work\ndefined patterns based on common living patterns (more like our\nview of software data flows over time), not recipes for builders,\nso OOPL design patterns have always been a bit of an oddity.\nThey are both important, but architecture should be about how\nthe system works when it is running, not how to structure code.\n\n....Roy\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"PZsJIy3T4i15E1g44_L69eWDXkWyVwl58T_GeXcIYSssmOqKkS2ToM358Ynx9-0Gf6XMutfSGDAmzu4MmroGABqyc_CQGRIxchnlBtsQYA","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] PUT/POST content type hints","postDate":"1273573907","msgId":15340,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMTAwNTExMDQzMTQ3LmY5NWNhZTUwLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","inReplyToHeader":"PDRCRTg2RjU4LjYwNjAyMDlAc2l0ZXBlbi5jb20+","referencesHeader":"PEFBTkxrVGlseHpTY21NV1A4SndSclF0cTFyRHpOLU5VQzFrMjZyeUU0b2N3VUBtYWlsLmdtYWlsLmNvbT4JPDRCRTg2RjU4LjYwNjAyMDlAc2l0ZXBlbi5jb20+"},"prevInTopic":15339,"nextInTopic":15341,"prevInTime":15339,"nextInTime":15341,"topicId":15322,"numMessagesInTopic":12,"msgSnippet":"... Absolutely not.  The late binding of representation to resource precludes this assumption.  HTML is capable of providing an interface to an Atom system.","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 11117 invoked from network); 11 May 2010 10:32:37 -0000\r\nX-Received: from unknown (98.137.34.45)\n  by m5.grp.sp2.yahoo.com with QMQP; 11 May 2010 10:32:37 -0000\r\nX-Received: from unknown (HELO mxout-08.mxes.net) (216.86.168.183)\n  by mta2.grp.sp2.yahoo.com with SMTP; 11 May 2010 10:32:37 -0000\r\nX-Received: from bigbison (unknown [65.117.211.162])\n\t(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))\n\t(No client certificate requested)\n\tby smtp.mxes.net (Postfix) with ESMTPSA id 50F5B509DB;\n\tTue, 11 May 2010 06:32:05 -0400 (EDT)\r\nDate: Tue, 11 May 2010 04:31:47 -0600\r\nTo: Kris Zyp &lt;kris@...&gt;\r\nCc: REST-Discuss Discussion Group &lt;rest-discuss@yahoogroups.com&gt;\r\nMessage-Id: &lt;20100511043147.f95cae50.eric@...&gt;\r\nIn-Reply-To: &lt;4BE86F58.6060209@...&gt;\r\nReferences: &lt;AANLkTilxzScmMWP8JwRrQtq1rDzN-NUC1k26ryE4ocwU@...&gt;\n\t&lt;4BE86F58.6060209@...&gt;\r\nOrganization: Bison Systems Corporation\r\nX-Mailer: Sylpheed 3.0.0 (GTK+ 2.10.14; i686-pc-mingw32)\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=US-ASCII\r\nContent-Transfer-Encoding: 7bit\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nSubject: Re: [rest-discuss] PUT/POST content type hints\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\nKris Zyp wrote:\n&gt; \n&gt; I believe one should be able to assume that the content type of the\n&gt; representation returned from a server from GET for URI is acceptable\n&gt; in a PUT request to that server for the same URI.\n&gt;\n\nAbsolutely not.  The late binding of representation to resource\nprecludes this assumption.  HTML is capable of providing an interface\nto an Atom system.  What media type to PUT or POST to the system is\nexplicitly provided in the markup, i.e. a self-documenting interface.\n\nAssuming that you can PUT or POST HTML to my system because that&#39;s the\nmedia type I sent on GET would not work -- I derive HTML from Atom, not\nthe other way around.\n\nA PUT of an HTML document would show an intent to replace the\nself-documenting interface provided by the HTML representation, with\nsome other application state.  HTML is generated by my system, it is not\nsubject to change via PUT to negotiated resources which happen to return\ntext/html or application/xhtml+xml on GET with a Web browser, but\nhappen to return Atom to a feed reader.\n\n&gt;\n&gt; When using JSON,\n&gt; additional information about acceptable property values can be\n&gt; determined from any JSON Schema referenced by the resource. In other\n&gt; words, if you GET some resource, and the server responds with:\n&gt; \n&gt; Content-Type: application/my-type+json; profile=my-schema\n&gt; \n&gt; One could retrieve the schema from the &quot;my-schema&quot; relative URI and do\n&gt; a PUT using the application/my-type+json content type with the schema\n&gt; information as a guide to what property values are acceptable.\n&gt; \n\nSure you can *do* this, it just wouldn&#39;t be REST.  Leaving aside that\nthe media type identifier definition for JSON doesn&#39;t say anything about\nextending it using *+json, the media type definition for JSON says\nnothing about HTTP methods.  Where have you provided a self-documenting\ninterface giving a target URI, method and media type -- as provided by\nforms languages having no corollary in JSON, yet required by REST?\n\nIf you &quot;just know&quot; that you can PUT or DELETE some JSON resource, it&#39;s\nno more RESTful than &quot;just knowing&quot; that you can PUT or DELETE some\nJPEG.  You&#39;re resorting to unbounded creativity, rather than using\nstandard media types and link relations which *do* cover HTTP methods,\nfor any target media type.\n\n&gt;\n&gt; Discovery of POST actions is completely different than PUT (since\n&gt; PUT&#39;s behavior is implied by a GET response). A JSON Schema can\n&gt; describe possible POST actions with submission links, including an\n&gt; acceptable content type (in the &quot;enctype&quot; property).\n&gt; \n\nI don&#39;t see how.  Regardless of schema, there&#39;s simply no mention in\nthe media type definition of JSON for describing URIs or methods, i.e.\nthere&#39;s no forms language.  The demo I posted consists of XHTML steady-\nstates derived from various source representationss of other media\ntypes.  These steady-states (will) provide a self-documenting API to\nthe underlying Atom-based system.\n\nThe user isn&#39;t trying to discover PUT vs. POST actions.  The user is\ntrying to drive an application to another steady-state.  The user agent\nneeds to translate that user goal into HTTP interactions.  If the user\nis trying to add a new post, the user agent is instructed to POST to\nthe domain root.  If the user is trying to add a new comment, the user\nagent is instructed to POST to the appropriate comment thread.  If the\nuser intent is to edit an existing entry, the user agent is instructed\nto PUT to the existing URI.  In each case, the user agent is instructed\nto use application/atom+xml; type=entry.\n\nThere&#39;s no RESTful way to instruct any user agent that &quot;this system\nuses Atom Protocol&quot; and this may not be inferred by the fact that the\nsystem uses Atom.  All I can do is provide a self-documenting hypertext\nAPI which instructs user agents how to interact with the system.  This\nAPI may or may not conform to Atom Protocol.  Whether it does or not is\nless important to REST than its presence.\n\nNone of this is any different for a system based on JSON rather than\nAtom.  As a REST system, I could change my Atom backend to a JSON\nbackend on a whim.  I&#39;m not saying it would be easy, but I am saying\nthat the application states wouldn&#39;t change.  The HTML would still\npresent a textarea, changes to that textarea would be submitted to the\nsame URI, using whatever media type the form says to use -- all HTML\nuser agents automatically update to the new API.\n\nIf you need to guess what media type to use then you can&#39;t possibly be\nusing REST.  A REST API will always tell you exactly what media type to\nuse.  It isn&#39;t implicit in any guessable fashion, it&#39;s explicit.  If it\nisn&#39;t explicit, it isn&#39;t REST.  HTML says what POST does, but only your\nhypertext can specify media type, if you lack such hypertext you lack\na critical REST constraint.\n\n-Eric\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":24271648,"authorName":"John Panzer","from":"John Panzer &lt;jpanzer@...&gt;","profile":"zwyrthrop","replyTo":"SENDER","senderId":"gkxG0h9lzg27z2Yywo_x9SOb80xDoGfE5B6EfBaJiOegwDQgdQwlEEkCyp_Y5F0YFGEeWO13UxGj5EJTleXOV2LuQxc","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] An approach to deleting multiple resources use one  DELETE","postDate":"1238809409","msgId":12379,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQ5RDZCQjQxLjcwNDA1MDlAYWNtLm9yZz4=","inReplyToHeader":"PDIwMDkwNDAzMDkzMTEyLjMxYmFkOTI1LmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","referencesHeader":"PGU3OGJkYmMwMDkwMjI0MDczOHY0ODRkNmU5NGg0NDQ5ZWIwYjY3YTI4ZDJlQG1haWwuZ21haWwuY29tPgk8MjAwOTAzMjAwNTI4MTYuMWUzNGIyYTYuZXJpY0BiaXNvbnN5c3RlbXMubmV0Pgk8UC1JUkMtRVhCRTAxajUzWGFERjAwMDAxNGU2QEVYLlVDT1AuRURVPgk8MjAwOTAzMjExMzEyMTIuMTM4Nzk1NzIuZXJpY0BiaXNvbnN5c3RlbXMubmV0Pgk8UC1JUkMtRVhCRTAxVHQ3UXM2aDAwMDAxOThjQEVYLlVDT1AuRURVPgk8MjAwOTAzMjEyMjM0NDEuMjE5ODc3NmQuZXJpY0BiaXNvbnN5c3RlbXMubmV0Pgk8NDlDNjg1NEUuNTA5MDUwNEBhY20ub3JnPgk8MjAwOTAzMjkxODU2NTMuNzk4NTcwMmMuZXJpY0BiaXNvbnN5c3RlbXMubmV0Pgk8MzBhYzUxOWQwOTAzMjkyMTUxdTQ0ZmVkNTY4cTUyNDUzNDQ3MDk3OTkyMDdAbWFpbC5nbWFpbC5jb20+CTwyMDA5MDMzMTAwMjY1MC5mNTM5NDc1Yy5lcmljQGJpc29uc3lzdGVtcy5uZXQ+CTwzMGFjNTE5ZDA5MDMzMTEwMjZvNGU4NmIyODZ4MjUyMDQzYjk0ZDg2OWQxM0BtYWlsLmdtYWlsLmNvbT4gPDIwMDkwNDAzMDkzMTEyLjMxYmFkOTI1LmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4="},"prevInTopic":12378,"nextInTopic":12381,"prevInTime":12378,"nextInTime":12380,"topicId":12154,"numMessagesInTopic":112,"msgSnippet":"... Unless semantics of the resource in question includes the deletion of attached or subordinate or what have you resources upon deletion of the primary","rawEmail":"Return-Path: &lt;john@...&gt;\r\nX-Sender: john@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 79299 invoked from network); 4 Apr 2009 01:43:47 -0000\r\nX-Received: from unknown (69.147.108.200)\n  by m8.grp.re1.yahoo.com with QMQP; 4 Apr 2009 01:43:47 -0000\r\nX-Received: from unknown (HELO rv-out-0708.google.com) (209.85.198.242)\n  by mta1.grp.re1.yahoo.com with SMTP; 4 Apr 2009 01:43:47 -0000\r\nX-Received: by rv-out-0708.google.com with SMTP id k29so1253340rvb.54\n        for &lt;rest-discuss@yahoogroups.com&gt;; Fri, 03 Apr 2009 18:43:29 -0700 (PDT)\r\nX-Received: by 10.142.246.20 with SMTP id t20mr484075wfh.292.1238809409782;\n        Fri, 03 Apr 2009 18:43:29 -0700 (PDT)\r\nReturn-Path: &lt;john@...&gt;\r\nX-Received: from ?192.168.1.100? (adsl-70-132-24-163.dsl.snfc21.sbcglobal.net [70.132.24.163])\n        by mx.google.com with ESMTPS id 29sm2317707wfg.53.2009.04.03.18.43.29\n        (version=TLSv1/SSLv3 cipher=RC4-MD5);\n        Fri, 03 Apr 2009 18:43:29 -0700 (PDT)\r\nMessage-ID: &lt;49D6BB41.7040509@...&gt;\r\nDate: Fri, 03 Apr 2009 18:43:29 -0700\r\nUser-Agent: Thunderbird 2.0.0.21 (Windows/20090302)\r\nMIME-Version: 1.0\r\nTo: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nCc: Erik Hetzner &lt;erik.hetzner@...&gt;, rest-discuss@yahoogroups.com\r\nReferences: &lt;e78bdbc00902240738v484d6e94h4449eb0b67a28d2e@...&gt;\t&lt;20090320052816.1e34b2a6.eric@...&gt;\t&lt;P-IRC-EXBE01j53XaDF000014e6@...&gt;\t&lt;20090321131212.13879572.eric@...&gt;\t&lt;P-IRC-EXBE01Tt7Qs6h0000198c@...&gt;\t&lt;20090321223441.2198776d.eric@...&gt;\t&lt;49C6854E.5090504@...&gt;\t&lt;20090329185653.7985702c.eric@...&gt;\t&lt;30ac519d0903292151u44fed568q5245344709799207@...&gt;\t&lt;20090331002650.f539475c.eric@...&gt;\t&lt;30ac519d0903311026o4e86b286x252043b94d869d13@...&gt; &lt;20090403093112.31bad925.eric@...&gt;\r\nIn-Reply-To: &lt;20090403093112.31bad925.eric@...&gt;\r\nContent-Type: multipart/alternative;\n boundary=&quot;------------010301090101060400050209&quot;\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: John Panzer &lt;jpanzer@...&gt;\r\nReply-To: jpanzer@...\r\nSubject: Re: [rest-discuss] An approach to deleting multiple resources use\n one  DELETE\r\nX-Yahoo-Group-Post: member; u=24271648; y=vc8If85909PiX8LvmiuW5z96FswDl9_q2V8NTIiH4z_LxRyN\r\nX-Yahoo-Profile: zwyrthrop\r\n\r\n\r\n--------------010301090101060400050209\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\n\r\nEric J. Bowman wrote:\n&gt; John Panzer wrote:\n&gt;\n&gt;   \n&gt;&gt;&gt; I wouldn&#39;t expect anything.  Atom Protocol leaves the deletion of\n&gt;&gt;&gt; collections undefined, which means it could go either way.  Since\n&gt;&gt;&gt; members can belong to multiple collections, it seems wiser to me, to\n&gt;&gt;&gt; not delete individual members when a collection is deleted.  Unless\n&gt;&gt;&gt; my application logic constrains resources to only be members of one\n&gt;&gt;&gt; collection.\n&gt;&gt;&gt;       \n&gt;&gt; Still talking past each other :).   My question was not about\n&gt;&gt; AtomPub, but about REST; if one were defining an AtomPub-like\n&gt;&gt; protocol using the REST architectural style, and decided to define\n&gt;&gt; DELETE in this way, would it be a violation of REST&#39;s uniform\n&gt;&gt; interface constraint?  My opinion is no, it&#39;s fine.\n&gt;&gt;\n&gt;&gt;     \n&gt;\n&gt; Then take out the sentence about AtomPub, the answer still stands.  I\n&gt; don&#39;t know why the expected behavior of a DELETE request on a URI would\n&gt; ever consider side effects on other resources.  The expectation is that\n&gt; the requested URI is deleted, nothing else.\n&gt;   \nUnless semantics of the resource in question includes the deletion of \n&quot;attached&quot; or &quot;subordinate&quot; or what have you resources upon deletion of \nthe primary resource.\n&gt; Trying my earlier explanation another way, let&#39;s say that I have\n&gt; assigned the DELETE method to delete one and only one resource, be it\n&gt; member or collection.  Now, I want my API to also allow the deletion of\n&gt; a collection to mean delete all members of the collection.\n&gt;   \nIn this case, I agree that you would contradict yourself if you first \ndefined DELETE to mean delete exactly one resource, but then turned \naround and said that deletion of the collection also deleted subordinate \nresources.  So, as the doctor would say, &quot;don&#39;t do that then.&quot;  (Or are \nyou saying that REST dictates that you must assign the DELETE method to \ndelete one and only one resource?)\n&gt; To maintain a uniform, generic interface, I would hijack FTP&#39;s MDELETE\n&gt; method to mean delete all members of a named collection.  It&#39;s only\n&gt; allowed on collections, not members.  I now have the expected behavior\n&gt; of DELETE along with its visibility to intermediaries, without muddling\n&gt; its semantics to also sometimes mean bulk delete.\n&gt;\n&gt; As to MDELETE, in a REST API as opposed to FTP, it would only accept\n&gt; the target URI, not a list of URIs.\n&gt;   \nI agree that this would be perfectly RESTful.  It would also be RESTful \nto define a class of resources (identified via a MIME type of course) \nthat aggregated other resources, and which guaranteed that they would go \naway when the primary resource goes away.  (This might or might not be a \ngood design -- it&#39;s hard to argue in the abstract -- but it wouldn&#39;t \nviolate REST.)\n\nCheers,\nJohn\n\r\n--------------010301090101060400050209\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: 7bit\r\n\r\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;meta content=&quot;text/html;charset=ISO-8859-1&quot; http-equiv=&quot;Content-Type&quot;&gt;\n&lt;/head&gt;\n&lt;body bgcolor=&quot;#ffffff&quot; text=&quot;#000000&quot;&gt;\nEric J. Bowman wrote:\n&lt;blockquote cite=&quot;mid:20090403093112.31bad925.eric@...&quot;\n type=&quot;cite&quot;&gt;\n  &lt;pre wrap=&quot;&quot;&gt;John Panzer wrote:\n\n  &lt;/pre&gt;\n  &lt;blockquote type=&quot;cite&quot;&gt;\n    &lt;blockquote type=&quot;cite&quot;&gt;\n      &lt;pre wrap=&quot;&quot;&gt;I wouldn&#39;t expect anything.  Atom Protocol leaves the deletion of\ncollections undefined, which means it could go either way.  Since\nmembers can belong to multiple collections, it seems wiser to me, to\nnot delete individual members when a collection is deleted.  Unless\nmy application logic constrains resources to only be members of one\ncollection.\n      &lt;/pre&gt;\n    &lt;/blockquote&gt;\n    &lt;pre wrap=&quot;&quot;&gt;Still talking past each other :).   My question was not about\nAtomPub, but about REST; if one were defining an AtomPub-like\nprotocol using the REST architectural style, and decided to define\nDELETE in this way, would it be a violation of REST&#39;s uniform\ninterface constraint?  My opinion is no, it&#39;s fine.\n\n    &lt;/pre&gt;\n  &lt;/blockquote&gt;\n  &lt;pre wrap=&quot;&quot;&gt;&lt;!----&gt;\nThen take out the sentence about AtomPub, the answer still stands.  I\ndon&#39;t know why the expected behavior of a DELETE request on a URI would\never consider side effects on other resources.  The expectation is that\nthe requested URI is deleted, nothing else.&lt;big&gt;&lt;big&gt;&lt;/big&gt;&lt;/big&gt;\n  &lt;/pre&gt;\n&lt;/blockquote&gt;\nUnless semantics of the resource in question includes the deletion of\n&quot;attached&quot; or &quot;subordinate&quot; or what have you resources upon deletion of\nthe primary resource.&lt;br&gt;\n&lt;blockquote cite=&quot;mid:20090403093112.31bad925.eric@...&quot;\n type=&quot;cite&quot;&gt;\n  &lt;pre wrap=&quot;&quot;&gt;\nTrying my earlier explanation another way, let&#39;s say that I have\nassigned the DELETE method to delete one and only one resource, be it\nmember or collection.  Now, I want my API to also allow the deletion of\na collection to mean delete all members of the collection.\n  &lt;/pre&gt;\n&lt;/blockquote&gt;\nIn this case, I agree that you would contradict yourself if you first\ndefined DELETE to mean delete exactly one resource, but then turned\naround and said that deletion of the collection also deleted\nsubordinate resources.&nbsp; So, as the doctor would say, &quot;don&#39;t do that\nthen.&quot;&nbsp; (Or are you saying that REST dictates that you must assign the\nDELETE method to delete one and only one resource?)&lt;br&gt;\n&lt;blockquote cite=&quot;mid:20090403093112.31bad925.eric@...&quot;\n type=&quot;cite&quot;&gt;\n  &lt;pre wrap=&quot;&quot;&gt;\nTo maintain a uniform, generic interface, I would hijack FTP&#39;s MDELETE\nmethod to mean delete all members of a named collection.  It&#39;s only\nallowed on collections, not members.  I now have the expected behavior\nof DELETE along with its visibility to intermediaries, without muddling\nits semantics to also sometimes mean bulk delete.\n\nAs to MDELETE, in a REST API as opposed to FTP, it would only accept\nthe target URI, not a list of URIs.\n  &lt;/pre&gt;\n&lt;/blockquote&gt;\nI agree that this would be perfectly RESTful.&nbsp; It would also be RESTful\nto define a class of resources (identified via a MIME type of course)\nthat aggregated other resources, and which guaranteed that they would\ngo away when the primary resource goes away.&nbsp; (This might or might not\nbe a good design -- it&#39;s hard to argue in the abstract -- but it\nwouldn&#39;t violate REST.)&lt;br&gt;\n&lt;br&gt;\nCheers,&lt;br&gt;\nJohn\n&lt;/body&gt;\n&lt;/html&gt;\n\r\n--------------010301090101060400050209--\r\n\n"}}
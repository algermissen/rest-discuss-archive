{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":242972596,"authorName":"Jørn Wildt","from":"=?iso-8859-1?Q?J=F8rn_Wildt?= &lt;jw@...&gt;","profile":"jorn_lind_nielsen","replyTo":"SENDER","senderId":"zQ6yKmyMM1D_7Raefkf8PjRtQ6oqpKb6FOFPMY0WJZmyzDB5geiLrav6tlwPkC_jukExA7Vv02kFiNNVXColwDqlt9bsBpxWmFB0pOl7gm0h6UWIzwjZx6Y","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Combining HTML and XML?","postDate":"1293601552","msgId":17163,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDZFQUIwMzMzODUzNTREOUE5MzYwNzBGRDhEMTA2QTMyQEpyblBDPg==","inReplyToHeader":"PDIwMTAxMjI4MTYxOTUzLmRjOWQ0MDZkLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","referencesHeader":"PDM1NTE1ODMwNUQ5OTRGODJCMkE5MEUyQTFCMDc3NUQ3QEpyblBDPiA8MjAxMDEyMjgxNjE5NTMuZGM5ZDQwNmQuZXJpY0BiaXNvbnN5c3RlbXMubmV0Pg=="},"prevInTopic":17162,"nextInTopic":17164,"prevInTime":17162,"nextInTime":17164,"topicId":17135,"numMessagesInTopic":57,"msgSnippet":"... As you may have seen from my other answers, I am getting more and more convinced about the viability of a pure HTML approach. One of my issues with HTML","rawEmail":"Return-Path: &lt;jw@...&gt;\r\nX-Sender: jw@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 86891 invoked from network); 29 Dec 2010 05:45:45 -0000\r\nX-Received: from unknown (66.196.94.105)\n  by m13.grp.re1.yahoo.com with QMQP; 29 Dec 2010 05:45:45 -0000\r\nX-Received: from unknown (HELO smtp2.cybercity.dk) (212.242.43.252)\n  by mta1.grp.re1.yahoo.com with SMTP; 29 Dec 2010 05:45:45 -0000\r\nX-Received: from uf7.cybercity.dk (uf7.cybercity.dk [212.242.42.164])\n\tby smtp2.cybercity.dk (Postfix) with ESMTP id 17CB2313C3E;\n\tWed, 29 Dec 2010 06:45:44 +0100 (CET)\r\nX-Received: from JrnPC (port439.ds1-aroe.adsl.cybercity.dk [212.242.220.134])\n\t(Authenticated sender: dsl164923)\n\tby uf7.cybercity.dk (Postfix) with ESMTPA id EEA90B85C96;\n\tWed, 29 Dec 2010 06:45:43 +0100 (CET)\r\nMessage-ID: &lt;6EAB033385354D9A936070FD8D106A32@JrnPC&gt;\r\nTo: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nCc: &quot;Rest Discussion List&quot; &lt;rest-discuss@yahoogroups.com&gt;\r\nReferences: &lt;355158305D994F82B2A90E2A1B0775D7@JrnPC&gt; &lt;20101228161953.dc9d406d.eric@...&gt;\r\nIn-Reply-To: &lt;20101228161953.dc9d406d.eric@...&gt;\r\nDate: Wed, 29 Dec 2010 06:45:52 +0100\r\nMIME-Version: 1.0\r\nContent-Type: text/plain;\n\tformat=flowed;\n\tcharset=&quot;iso-8859-1&quot;;\n\treply-type=original\r\nContent-Transfer-Encoding: 8bit\r\nX-Priority: 3\r\nX-MSMail-Priority: Normal\r\nX-Mailer: Microsoft Windows Mail 6.0.6002.18197\r\nX-MimeOLE: Produced By Microsoft MimeOLE V6.0.6002.18263\r\nFrom: =?iso-8859-1?Q?J=F8rn_Wildt?= &lt;jw@...&gt;\r\nSubject: Re: [rest-discuss] Combining HTML and XML?\r\nX-Yahoo-Group-Post: member; u=242972596; y=752c1CnkNVD59PpTgzCxjD-wfMjnLDGufKR0XIKKbfELt3mfOkIbWEDCMsg\r\nX-Yahoo-Profile: jorn_lind_nielsen\r\n\r\n&gt; &gt; Now I am only dreaming up some ideas: what if there were a standard\n&gt; &gt; XML dialect which included links and schema references?\n&gt; &gt;\n&gt;\n&gt; Like HTML?  If the system is document-oriented, then this generic\n&gt; dialect will need to express common semantics like lists, headings,\n&gt; title, tabular data, paragraphs and the like.  Which is why HTML\n&gt; extensibility is such a big issue -- it seems like less work to me to\n&gt; extend HTML, than it is to start over from scratch with a custom media\n&gt; type.\n\nAs you may have seen from my other answers, I am getting more and more \nconvinced about the viability of a pure HTML approach. One of my issues with \nHTML extensions has been that different vendors would use different \nextension schemes and that would sort of defeat the idea of having one \nunified way to serialize data back and forth.\n\nBut now that I start to understand more of RDFa it looks more and more \nviable to use HTML + RDFa. That would allow the client code to work on \ngeneric RDF tripples instead of figuring out all the strange ways to encode \na case file, or a purchase order, in HTML. All it requires is that the \nclient implements (downloads) a RDFa preprocessor. Voila - all the \ndifficulties of working with various HTML encodings disappear with one swing \nof the magic wand :-)\n\nAll I need now is a way to mark up forms such that they decouple semantics \nlike &quot;this is the case title&quot; from the query variable names.\n\n/J�rn\n\n----- Original Message ----- \nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\nTo: &quot;J�rn Wildt&quot; &lt;jw@...&gt;\nCc: &quot;Rest Discussion List&quot; &lt;rest-discuss@yahoogroups.com&gt;\nSent: Wednesday, December 29, 2010 12:19 AM\nSubject: Re: [rest-discuss] Combining HTML and XML?\n\n\nJ�rn Wildt wrote:\n&gt;\n&gt; But using html for embedding machine-readable representations of\n&gt; complex data structures for reading seems a bit like bending over\n&gt; backwards to do something which is straight forward with XML.\n&gt;\n\nRe-inventing &lt;table&gt; may be *easier* (I wouldn&#39;t know as I&#39;ve always\navoided platforms and tooling entirely, particularly those geared\ntowards the SOA approach which is fundamentally different from REST --\nif the problem here is preserving the investment in SOA toolchains and\nexpecting REST to result, I don&#39;t know how I can help), but &lt;table&gt; has\n*simplicity* going for it.\n\nThe design of &lt;table&gt; markup predates the Web, there&#39;s nothing about it\nthat can&#39;t be tooled, even if your tools disregard it as a\nserialization for tabular data.  XSLT is both a great deployment and\ndevelopment tool; your toolchain probably allows you to execute a\ntransformation from whatever it is willing to generate for tabular\ndata, into &lt;table&gt; markup, as a pre-deployment operation.\n\nI&#39;ve never felt like I&#39;m bending over backwards to serialize tabular\ndata using &lt;table&gt; markup, because it&#39;s so straightforward to me as to\nhave become second-nature.  The essence of REST is the re-use of\ncommon data structures.\n\n&gt;\n&gt; But how would the machine readable HTML look like? Maybe:\n&gt;\n&gt;   &lt;div property=&quot;case&quot;&gt;\n&gt;     &lt;div property=&quot;title&quot;&gt;My title&lt;/div&gt;\n&gt;   &lt;/div&gt;\n&gt;\n\nNo, the whole point of using HTML is that its markup expresses very\ncommon semantics for any sort of document.  I&#39;d put the title inside\n&lt;head&gt;&lt;title&gt;, assuming one case per document.  There&#39;s no need to re-\ninvent the document title as a microformat, or tell anyone (h or m)\nwhat you mean by &lt;head&gt;&lt;title&gt; in HTML.  Attaching a title to a\nhypertext document is a problem that&#39;s long been solved, why re-visit\nthe issue?\n\n&gt;\n&gt; Many people turns to REST for simplicity. For me this also means\n&gt; simple and commonly available tools. That&#39;s not the case with the\n&gt; HTML serialization and for this reason I shy away from the HTML\n&gt; representation - it&#39;s too difficult to work with.\n&gt;\n\nYou&#39;re mistaking &#39;simplicity&#39; for &#39;ease-of-use&#39;, at least in terms of\nRoy&#39;s thesis.  In REST, simplicity means (in this case) that instead of\nevery type of document having its own data type with its own definition\nof the document title, we have a generic document data type such that\nany type of document has the same definition of title.  REST&#39;s power\nlies in the fact that most APIs can be modeled in terms of document\norientation, just as UNIX&#39;s power lies in the fact that most everything\nmay be modeled in terms of a file descriptor (filesystem and media type\nserving the same generic role in each).\n\n&gt;\n&gt; Now I am only dreaming up some ideas: what if there were a standard\n&gt; XML dialect which included links and schema references?\n&gt;\n\nLike HTML?  If the system is document-oriented, then this generic\ndialect will need to express common semantics like lists, headings,\ntitle, tabular data, paragraphs and the like.  Which is why HTML\nextensibility is such a big issue -- it seems like less work to me to\nextend HTML, than it is to start over from scratch with a custom media\ntype.\n\n&gt;\n&gt; I would be happy to use HTML all over the place if it wasn&#39;t for the\n&gt; fact that I haven&#39;t seen any useful serialization tools.\n&gt;\n\nLeading you to define your own serialization, requiring out-of-band\ndocumentation explaining the network-opaque algorithm behind it.  This\nisn&#39;t the REST style -- in REST, you aren&#39;t required to document the\nalgorithm behind your HTML &lt;table&gt;, because that&#39;s a standardized part\nof the data types your media type identifies for IP networks.\n\n-Eric \n\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":341233558,"authorName":"Tim Williams","from":"Tim Williams &lt;williamstw@...&gt;","profile":"quwiltw","replyTo":"SENDER","senderId":"oHVB7_Zq2TynFlB9tK3zma2aeakaX7MAy_4JtM0FI_zSRHAod6obR7Zp8QxgBuA1pRS7La_gP1CWUxTAz6jM3vSk6_sBvfupsy4","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Rebooting REST","postDate":"1262783228","msgId":14445,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQ5OTg4ODQ0MTAwMTA2MDUwN3cxYmU2MzZiMHdiMGIwNTkyNDQ0ODQ0OGQ3QG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PDIwMTAwMTA2MDIyNDM0LmQ4NTRlNDQ5LmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","referencesHeader":"PDIwMDkxMjIzMTgxODQ2LjgzODYyMzU2LmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JIDwyMDEwMDEwNjAyMjQzNC5kODU0ZTQ0OS5lcmljQGJpc29uc3lzdGVtcy5uZXQ+"},"prevInTopic":14442,"nextInTopic":14446,"prevInTime":14444,"nextInTime":14446,"topicId":14392,"numMessagesInTopic":13,"msgSnippet":"... An applied REST architecture extends REST by definition, right?  On the other hand, if you re talking about starting with REST and applying additional","rawEmail":"Return-Path: &lt;williamstw@...&gt;\r\nX-Sender: williamstw@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 10978 invoked from network); 6 Jan 2010 13:07:09 -0000\r\nX-Received: from unknown (98.137.34.45)\n  by m12.grp.re1.yahoo.com with QMQP; 6 Jan 2010 13:07:09 -0000\r\nX-Received: from unknown (HELO mail-yx0-f182.google.com) (209.85.210.182)\n  by mta2.grp.sp2.yahoo.com with SMTP; 6 Jan 2010 13:07:08 -0000\r\nX-Received: by yxe12 with SMTP id 12so15520577yxe.1\n        for &lt;rest-discuss@yahoogroups.com&gt;; Wed, 06 Jan 2010 05:07:08 -0800 (PST)\r\nMIME-Version: 1.0\r\nX-Received: by 10.150.80.12 with SMTP id d12mr31934976ybb.29.1262783228219; Wed, \n\t06 Jan 2010 05:07:08 -0800 (PST)\r\nIn-Reply-To: &lt;20100106022434.d854e449.eric@...&gt;\r\nReferences: &lt;20091223181846.83862356.eric@...&gt;\n\t &lt;20100106022434.d854e449.eric@...&gt;\r\nDate: Wed, 6 Jan 2010 08:07:08 -0500\r\nMessage-ID: &lt;499888441001060507w1be636b0wb0b05924448448d7@...&gt;\r\nTo: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Tim Williams &lt;williamstw@...&gt;\r\nSubject: Re: [rest-discuss] Rebooting REST\r\nX-Yahoo-Group-Post: member; u=341233558; y=H_cUoKVsIYw8tDshn18XT_Buy1JWYK1C74dxp4DIhPs4WA\r\nX-Yahoo-Profile: quwiltw\r\n\r\nOn Wed, Jan 6, 2010 at 4:24 AM, Eric J. Bowman &lt;eric@...&gt; wrot=\r\ne:\n&gt; Watching this was well worth my time:\n&gt;\n&gt; http://www.infoq.com/present=\r\nations/Systems-that-Never-Stop-Joe-Armstrong\n&gt;\n&gt; I&#39;m integrating Joe&#39;s idea=\r\ns (and those of his source references) into my\n&gt; applied REST architecture =\r\nwork. I don&#39;t think in terms of coding,\n&gt; particularly in Erlang. =A0But, s=\r\nome of Joe&#39;s laws have direct\n&gt; corollaries in REST -- the layered system a=\r\nnd self-descriptive\n&gt; messaging constraints come to mind. =A0Others have di=\r\nrect corollaries in\n&gt; my proposed system architecture, like using ZFS for s=\r\ntorage, and Solaris\n&gt; Zones to isolate system layers executing on the same =\r\ncomputer.\n&gt;\n&gt; REST allows for a system which obeys Joe&#39;s laws for system re=\r\nliability.\n&gt; While it specifies the layered system constraint, REST says no=\r\nthing\n&gt; about isolating those layers for concurrency. =A0To meet the &quot;softw=\r\nare\n&gt; development on the scale of decades&quot; goal of REST, I believe applied\n=\r\n&gt; REST architecture should extend beyond REST per se, and consider other\n\nA=\r\nn &quot;applied REST architecture&quot; extends REST by definition, right?  On\nthe ot=\r\nher hand, if you&#39;re talking about starting with REST and\napplying additiona=\r\nl constraints, that would be creating a new style\nhybrid style based on but=\r\n not REST?\n\n&gt; requirements of a long-running system like isolation and conc=\r\nurrency.\n\nRegarding isolation, a RESTful system gets the same property (e.g=\r\n.\nreliability) evoked by way of being a hybrid of the\nclient-stateless-serv=\r\ner style through separation of concern+stateless\nright?\n\nI&#39;m only familiar =\r\nwith concurrency withing application architecture\nand his talk is simply tr=\r\numpeting message-passing over shared-memory -\nwhich is important at that le=\r\nvel of abstraction.  It seems to me that\nthe REST architecture is inherentl=\r\ny concurrency friendly, can you\nelaborate on what&#39;s missing?\n\n&gt; Joe&#39;s Stabl=\r\ne Storage law is highly pragmatic to the goals of a REST\n&gt; system, even tho=\r\nugh REST itself says nothing of storage. =A0Isn&#39;t the\n&gt; notion of persisten=\r\nt storage something that belongs in an architectural\n&gt; model of an overall =\r\nsystem?\n\nIt seems important to origin servers within a system but not relev=\r\nant\nto the REST style itself.  It&#39;s not the level of abstraction that REST\n=\r\nwas intended to address is it?  I&#39;m not clear on how you&#39;re using the\nterm =\r\n&quot;architectural *model*&quot; - if it&#39;s a model of the REST\narchitectural style, =\r\nit seems that discussing storage is out of scope.\n Suppose you wanted to ac=\r\nhieve this by adding a new constraint,\nwouldn&#39;t the constraint at this leve=\r\nl of abstraction have to be in\nterms of the addressability of the resource =\r\nover time?\n\n&gt; My point is, the REST architectural style doesn&#39;t address key=\r\n aspects of\n&gt; system architecture, like storage. =A0So how can REST alone b=\r\ne the basis\n&gt; for any applied-software-architecture Implementation? =A0The =\r\nModel should\n&gt; therefore address issues like isolation, concurrency and sto=\r\nrage based\n&gt; on the REST-agnostic laws of long-running systems.\n\nThat seems=\r\n to run counter to the framework on which REST is based\nthough.  At this le=\r\nvel of architectural abstraction, the focus\nshouldn&#39;t be on &quot;how do we addr=\r\ness isolation&quot; but, rather, how can we\nmaximally induce isolation.  Similar=\r\nly, we shouldn&#39;t worry about\nconcurrency, but rather performance and user-p=\r\nerceived performance.\nThe framework is good because it encourages reasonabl=\r\ne decisions in\nterms of desired properties instead of the technical mechani=\r\nsm.\n\n--tim\n\n"}}
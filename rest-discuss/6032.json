{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":80219925,"authorName":"John Elliot","from":"John Elliot &lt;jj5@...&gt;","profile":"jj5v1","replyTo":"SENDER","senderId":"Vtyvq0-qfH500ELg0U1U8xI-7VtwB5r4SXZcOViaeiEmnKys-sXtMVppsawUyTtpeQsB1b-bfSSpkfu8Zx4goA","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Re: Meaning of stateless","postDate":"1145550577","msgId":6032,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQ0NDdCNkYxLjYwMzA3MDRAamo1Lm5ldD4=","inReplyToHeader":"PDMyMUQ4MkI2LTA3MkEtNDhEOC04MURBLTI3OTEwQzIwNzc3MUBhcnRpbWEuY29tPg==","referencesHeader":"PDQ0M0ZGMzFDLjgwMDAxMDlAdmVpY29uLmNvbT4JIDwzNDNlY2IzZTA2MDQxNDEyMzBnNDFjMTMyMWNuYjJhOTM2Y2NiZjUzZGM3ZEBtYWlsLmdtYWlsLmNvbT4gPDExNDUwOTU4OTMuNjk4OC4yNi5jYW1lbEBsb2NhbGhvc3QubG9jYWxkb21haW4+IDw0NDQ0NkNGMC45MDEwMzA4QGpqNS5uZXQ+IDw0RjhGRTQyNi01NEFFLTQ4REQtQUJEMC1FRjU0MzBFNTdBMEFAYXJ0aW1hLmNvbT4gPDQ0NDU4REIyLjcwNzAwMDNAamo1Lm5ldD4gPDQ0NDU5N0QzLjUwMDAwMDJAdmVpY29uLmNvbT4gPDQ0NDU5QzlDLjUwOTAxMDFAamo1Lm5ldD4gPDQ0NDVGNUFDLjkwNTA3QGRlaG9yYS5uZXQ+IDxGQjM4RjREQS0zOURELTREQTctQjMxMy0zOEFDMjlFRERDOTFAYXJ0aW1hLmNvbT4gPDQ0NDY3NDk3LjYwMzAzMDlAdmVpY29uLmNvbT4gPDBBRTA2OTVDLTVDM0YtNDUzQi05MUVBLTgzQTRGRDRCRDhCNUBhcnRpbWEuY29tPiA8NDQ0NzE4RjMuODAyMDgwN0BqajUubmV0PiA8MzIxRDgyQjYtMDcyQS00OEQ4LTgxREEtMjc5MTBDMjA3NzcxQGFydGltYS5jb20+"},"prevInTopic":6029,"nextInTopic":6034,"prevInTime":6031,"nextInTime":6033,"topicId":5949,"numMessagesInTopic":44,"msgSnippet":"... GET /wizard 302 /wizard/page-1 GET /wizard/page-1    ","rawEmail":"Return-Path: &lt;jj5@...&gt;\r\nX-Sender: jj5@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 4973 invoked from network); 20 Apr 2006 16:32:38 -0000\r\nReceived: from unknown (66.218.66.166)\n  by m33.grp.scd.yahoo.com with QMQP; 20 Apr 2006 16:32:38 -0000\r\nReceived: from unknown (HELO mail4.tpgi.com.au) (203.12.160.61)\n  by mta5.grp.scd.yahoo.com with SMTP; 20 Apr 2006 16:32:37 -0000\r\nX-TPG-Antivirus: Passed\r\nReceived: from johnny5 (220-245-41-182.static.tpgi.com.au [220.245.41.182])\n\tby mail4.tpgi.com.au (envelope-from jj5@...) (8.13.6/8.13.6) with ESMTP id k3KGWVjh005589\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Fri, 21 Apr 2006 02:32:32 +1000\r\nMessage-ID: &lt;4447B6F1.6030704@...&gt;\r\nDate: Thu, 20 Apr 2006 16:29:37 +0000\r\nUser-Agent: Debian Thunderbird 1.0.2 (X11/20051002)\r\nX-Accept-Language: en-us, en\r\nMIME-Version: 1.0\r\nTo: REST Discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nReferences: &lt;443FF31C.8000109@...&gt;\t &lt;343ecb3e0604141230g41c1321cnb2a936ccbf53dc7d@...&gt; &lt;1145095893.6988.26.camel@...&gt; &lt;44446CF0.9010308@...&gt; &lt;4F8FE426-54AE-48DD-ABD0-EF5430E57A0A@...&gt; &lt;44458DB2.7070003@...&gt; &lt;444597D3.5000002@...&gt; &lt;44459C9C.5090101@...&gt; &lt;4445F5AC.90507@...&gt; &lt;FB38F4DA-39DD-4DA7-B313-38AC29EDDC91@...&gt; &lt;44467497.6030309@...&gt; &lt;0AE0695C-5C3F-453B-91EA-83A4FD4BD8B5@...&gt; &lt;444718F3.8020807@...&gt; &lt;321D82B6-072A-48D8-81DA-27910C207771@...&gt;\r\nIn-Reply-To: &lt;321D82B6-072A-48D8-81DA-27910C207771@...&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 2:12:4:0\r\nFrom: John Elliot &lt;jj5@...&gt;\r\nSubject: Re: [rest-discuss] Re: Meaning of stateless\r\nX-Yahoo-Group-Post: member; u=80219925; y=inuPu_B5lFmb7-uam14mk2JGAgQCFU4lnT1HrqeDYnU\r\nX-Yahoo-Profile: jj5v1\r\n\r\nBill Venners wrote:\n&gt; One example is a wizard. I have a wizard on Artima that people use to  \n&gt; register their RSS feeds with Buzz (an RSS aggregator). Page one asks  \n&gt; you to select a Buzz community. Page two asks you to enter a short  \n&gt; bio. Page three asks you to enter the URL of your feed, etc. Until  \n&gt; you enter all three of these I don&#39;t have enough information to add a  \n&gt; new feed to Buzz in the database. The conversational state I need to  \n&gt; keep track of here is what data they entered in previous pages in the  \n&gt; wizard. If I don&#39;t redirect after POST to GET, then I can just send  \n&gt; the state back immediately in hidden fields. But if I do redirect  \n&gt; after GET, then I have to somehow keep state on the server that will  \n&gt; remember what they previously submitted so I can stick it in the  \n&gt; hidden fields. Once I get all three pages filled in from the wizard,  \n&gt; I combine that data and insert a new Buzz feed entity into the database.\n\n  GET /wizard\n\n  302 /wizard/page-1\n\n  GET /wizard/page-1\n\n  &lt;html&gt;&lt;body&gt;\n    &lt;form action=&quot;/wizard/page-2&quot; method=&quot;GET&quot;&gt;\n      &lt;select id=&quot;Community&quot; name=&quot;Community&quot;&gt;\n        &lt;option value=&quot;1&quot;&gt;Buzz 1&lt;/option&gt;\n        &lt;option value=&quot;2&quot;&gt;Buzz 2&lt;/option&gt;\n      &lt;/select&gt;\n      &lt;input type=&quot;submit&quot; /&gt;\n    &lt;/form&gt;\n  &lt;/body&gt;&lt;/html&gt;\n\n  GET /wizard/page-2?Community=1\n\n  &lt;html&gt;&lt;body&gt;\n    &lt;form action=&quot;/wizard/page-3&quot; method=&quot;GET&quot;&gt;\n      &lt;input type=&quot;hidden&quot; id=&quot;Community&quot; name=&quot;Community&quot; value=&quot;1&quot; /&gt;\n      &lt;textarea id=&quot;Bio&quot; name=&quot;Bio&quot;&gt;Please enter a short bio.&lt;/textarea&gt;\n      &lt;input type=&quot;submit&quot; /&gt;\n    &lt;/form&gt;\n  &lt;/body&gt;&lt;/html&gt;\n\n  GET /wizard/page-3?Community=1&Bio=I+have+bear+powers.\n\n  &lt;html&gt;&lt;body&gt;\n    &lt;form action=&quot;/wizard/confirm&quot; method=&quot;GET&quot;&gt;\n      &lt;input type=&quot;hidden&quot; id=&quot;Community&quot; name=&quot;Community&quot; value=&quot;1&quot; /&gt;\n      &lt;input type=&quot;hidden&quot; id=&quot;Bio&quot; name=&quot;Bio&quot; value=&quot;I have bear \npowers.&quot; /&gt;\n      &lt;input type=&quot;text&quot; id=&quot;Feed&quot; name=&quot;Feed&quot; /&gt;\n      &lt;input type=&quot;submit&quot; /&gt;\n    &lt;/form&gt;\n  &lt;/body&gt;&lt;/html&gt;\n\n  GET \n/wizard/confirm?Community=1&Bio=I+have+bear+powers.&Feed=www.example.org\n\n  &lt;html&gt;&lt;body&gt;\n    &lt;form action=&quot;/wizard&quot; method=&quot;POST&quot;&gt;\n      &lt;input type=&quot;hidden&quot; id=&quot;Community&quot; name=&quot;Community&quot; value=&quot;1&quot; /&gt;\n      &lt;input type=&quot;hidden&quot; id=&quot;Bio&quot; name=&quot;Bio&quot; value=&quot;I have bear \npowers.&quot; /&gt;\n      &lt;input type=&quot;hidden&quot; id=&quot;Feed&quot; name=&quot;Feed&quot; value=&quot;www.example.org&quot; /&gt;\n      &lt;input type=&quot;submit&quot; /&gt;\n    &lt;/form&gt;\n  &lt;/body&gt;&lt;/html&gt;\n\n  POST /wizard\n    Community=1\n    Bio=I have bear powers.\n    Feed=www.example.org\n\n  302 /wizard/thanks\n\n  GET /wizard/thanks\n\n  ...\n\n&gt; Another example is working with a user to get all required form data,  \n&gt; in a correct format. When someone goes to register with Artima, they  \n&gt; need to enter a desired nickname, first name, last name, the password  \n&gt; (twice), and so on. (I try to keep the amount of data to a minimum.)  \n&gt; Regardless, there are several problems that I can discover when they  \n&gt; submit. They can leave out required fields. They can have asked for a  \n&gt; nickname that is already in use. There passwords might not match. In  \n&gt; each case I want them to see the form as they filled it, but with  \n&gt; little red error messages indicating the problem. I use redirect  \n&gt; after GET, so after they POST, I redirect to a GET, and when that GET  \n&gt; comes in the server has to remember what the user previously typed  \n&gt; in, and what error messages to display. Once I get good data from the  \n&gt; user for registration, I insert a new registration into the database.\n\n  GET /registration\n\n  &lt;html&gt;&lt;body&gt;\n    &lt;form action=&quot;/registration&quot; method=&quot;POST&quot;&gt;\n      &lt;input type=&quot;text&quot; id=&quot;NickName&quot; name=&quot;NickName&quot; /&gt;\n      &lt;input type=&quot;text&quot; id=&quot;FirstName&quot; name=&quot;FirstName&quot; /&gt;\n      &lt;input type=&quot;text&quot; id=&quot;LastName&quot; name=&quot;LastName&quot; /&gt;\n      &lt;input type=&quot;password&quot; id=&quot;Password&quot; name=&quot;Password&quot; /&gt;\n      &lt;input type=&quot;password&quot; id=&quot;PasswordConfirmation&quot; \nname=&quot;PasswordConfirmation&quot; /&gt;\n      &lt;input type=&quot;submit&quot; /&gt;\n    &lt;/form&gt;\n  &lt;/body&gt;&lt;/html&gt;\n\n  POST /registration\n    NickName=joe\n    FirstName=Joe\n    LastName=\n    Password=secret\n    PasswordConfirmation=love\n\n  302 /registration?NickName=joe&FirstName=Joe&LastName=\n\n  &lt;html&gt;&lt;body&gt;\n    &lt;form action=&quot;/registration&quot; method=&quot;POST&quot;&gt;\n      &lt;input type=&quot;text&quot; id=&quot;NickName&quot; name=&quot;NickName&quot; value=&quot;joe&quot; \nclass=&quot;Invalid&quot; /&gt;\n      &lt;input type=&quot;text&quot; id=&quot;FirstName&quot; name=&quot;FirstName&quot; value=&quot;Joe&quot; /&gt;\n      &lt;input type=&quot;text&quot; id=&quot;LastName&quot; name=&quot;LastName&quot; class=&quot;Invalid&quot; /&gt;\n      &lt;input type=&quot;password&quot; id=&quot;Password&quot; name=&quot;Password&quot; /&gt;\n      &lt;input type=&quot;password&quot; id=&quot;PasswordConfirmation&quot; \nname=&quot;PasswordConfirmation&quot; /&gt;\n      &lt;input type=&quot;submit&quot; /&gt;\n    &lt;/form&gt;\n  &lt;/body&gt;&lt;/html&gt;\n\n  POST /registration\n    NickName=jojo\n    FirstName=Joe\n    LastName=Bloggs\n    Password=secret\n    PasswordConfirmation=secret\n\n  302 /registration/thanks\n\n&gt; Another example is state to do redirect after post when the user is  \n&gt; trying out different ideas for flights at an airline site. They may  \n&gt; try something, back up try something else. Open up a new window and  \n&gt; back up and try a third thing. Until they actually purchase a flight,  \n&gt; you may not want to persist anything in the database. But if you&#39;re  \n&gt; doing redirect after POST, you need to store conversational state  \n&gt; between requests to remember what query they are attempting to get  \n&gt; results for. Once they actually make a decision, then I can persist a  \n&gt; reservation in the database (and do whatever else I need to do to  \n&gt; make the reservation official).\n\n  GET /schedule\n\n  &lt;html&gt;&lt;body&gt;\n    &lt;form action=&quot;/schedule&quot; method=&quot;GET&quot;&gt;\n      &lt;select id=&quot;Airline&quot; name=&quot;Airline&quot;&gt;\n        &lt;option value=&quot;1&quot;&gt;Airline 1&lt;/option&gt;\n        &lt;option value=&quot;2&quot;&gt;Airline 2&lt;/option&gt;\n      &lt;/select&gt;\n      &lt;input type=&quot;submit&quot; /&gt;\n    &lt;/form&gt;\n  &lt;/body&gt;&lt;/html&gt;\n\n  GET /schedule?Airline=1\n\n  &lt;html&gt;&lt;body&gt;\n    &lt;form action=&quot;/schedule&quot; method=&quot;GET&quot;&gt;\n      &lt;input type=&quot;hidden&quot; id=&quot;Airline&quot; name=&quot;Airline&quot; value=&quot;1&quot; /&gt;\n      &lt;select id=&quot;Whatever&quot; name=&quot;Whatever&quot;&gt;\n        &lt;option value=&quot;1&quot;&gt;Option 1&lt;/option&gt;\n        &lt;option value=&quot;2&quot;&gt;Option 2&lt;/option&gt;\n      &lt;/select&gt;\n      &lt;input type=&quot;submit&quot; /&gt;\n    &lt;/form&gt;\n  &lt;/body&gt;&lt;/html&gt;\n\n  GET /schedule?Airline=1&Whatever=2\n\n  ...\n\n&gt; Lastly, although shopping carts don&#39;t seem to be modeled as  \n&gt; conversational state in practice, it was used as the first  \n&gt; illustration I ever read about what servlet session objects are for.  \n&gt; The idea was that when an HTTP request comes in, you somehow have to  \n&gt; remember what the user previously put in their shopping cart. But you  \n&gt; don&#39;t want to store that conversational state in the database until  \n&gt; they actually make a purchase. So, you store the shopping cart in the  \n&gt; session. Once they make a purchase, you persist that in the database.\n\nOK. It took me a while, but I now realise where this whole conversation \nwe&#39;ve been having went wrong.\n\nMy agenda here was:\n\n  1) To warn that increased interest in REST/HTTP may result in people \nmisappropriating HTTP headers and creating even more turmoil on the web. \nI tried to highlight why this might happen (i.e. using HTTP headers for \nsetting the &#39;subject&#39; context). In order to do this I also tried to \nexplain what &#39;stateless&#39; means (AIUI) in terms of REST/HTTP, and\n\n  2) To describe a conceptualisation of HTTP as &#39;subject&#39;, &#39;verb&#39;, \n&#39;object&#39; and solicit feedback on same.\n\nIn the course of pursuing my agenda I presented the case for &#39;user \nsessions&#39;. Initially we were talking about modelling interactions for \nmutable server side state.\n\nAs of your last email it became clear that we haven&#39;t been on the same \npage. Much of the &#39;transient&#39; and &#39;conversational&#39; state that you allude \nto can be kept entirely on the client. The server does not need to know \nabout this at all. Not until such time as a successful POST request is \nissued. So, while I was presenting the case for &#39;sessions&#39; and indeed \n&#39;server side session state&#39;, I wasn&#39;t presenting the case for sessions \nin any of the situations which you&#39;ve alluded to above. In almost all of \nthose cases you can use the &#39;stateless server&#39; method of storing \napplication state in the URL. Storing state in the URL does *not* mean \n&#39;creating state on the server and keying it in the URL&#39;. Rather, it \nmeans exactly what I&#39;ve shown above. The server doesn&#39;t store any of \nthat state, it just echoes it back at you until you&#39;re ready to POST a \nvalid message.\n\nThat none of these are particularly compelling uses of server side \nsession state does not mean that there are not valid use cases for same. \nA shopping basket being a good case in point. A three page wizard and \nsingle page registration form are not good examples of where session \nstate ought to be stored on the server though.\n\nHopefully I&#39;ve cleared up some confusion.\n\n\n\n\n\n\n\n\n\n\n"}}
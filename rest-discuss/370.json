{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":63473576,"authorName":"Lucas Gonze","from":"&quot;Lucas Gonze&quot; &lt;lucas@...&gt;","profile":"lucas_gonze","replyTo":"SENDER","senderId":"RYHOaBpc1Laoh3z5xS4OzcFN1M16Pip7ctKLKSp2BQTdqMyiAo46jdSlQjfAAhjLVn8IX_P7qOaVBAMhde2Fv1Q-EVnf9Q","spamInfo":{"isSpam":false,"reason":"0"},"subject":"RE: [rest-discuss] a proposal for secure notifications","postDate":"1012163636","msgId":370,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PE5FQkJKSUhNTUxLSEVPUE5PR0hET0VNRkZKQUEubHVjYXNAZ29uemUuY29tPg==","inReplyToHeader":"PDNDNTQ1QUI1LjQ1QzcwNDgxQHByZXNjb2QubmV0Pg=="},"prevInTopic":365,"nextInTopic":372,"prevInTime":369,"nextInTime":371,"topicId":360,"numMessagesInTopic":23,"msgSnippet":"... You bet!  That what PSP is!  Now, it may take a little while to craft PSP fully, but that s exactly what it ll end up being. ... Sorry, no good.  Security","rawEmail":"Return-Path: &lt;lucas@...&gt;\r\nX-Sender: lucas@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_0_1_3); 27 Jan 2002 20:35:57 -0000\r\nReceived: (qmail 94717 invoked from network); 27 Jan 2002 20:35:56 -0000\r\nReceived: from unknown (216.115.97.171)\n  by m11.grp.snv.yahoo.com with QMQP; 27 Jan 2002 20:35:56 -0000\r\nReceived: from unknown (HELO mail2.panix.com) (166.84.0.213)\n  by mta3.grp.snv.yahoo.com with SMTP; 27 Jan 2002 20:35:56 -0000\r\nReceived: from lucas (159-98.nyc.dsl.access.net [166.84.159.98])\n\tby mail2.panix.com (Postfix) with SMTP\n\tid 08AE38EF9; Sun, 27 Jan 2002 15:34:50 -0500 (EST)\r\nTo: &quot;Paul Prescod&quot; &lt;paul@...&gt;,\n\t&quot;Rest-Discuss&quot; &lt;rest-discuss@yahoogroups.com&gt;\r\nSubject: RE: [rest-discuss] a proposal for secure notifications\r\nDate: Sun, 27 Jan 2002 15:33:56 -0500\r\nMessage-ID: &lt;NEBBJIHMMLKHEOPNOGHDOEMFFJAA.lucas@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain;\n\tcharset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: 7bit\r\nX-Priority: 3 (Normal)\r\nX-MSMail-Priority: Normal\r\nX-Mailer: Microsoft Outlook IMO, Build 9.0.2416 (9.0.2910.0)\r\nIn-Reply-To: &lt;3C545AB5.45C70481@...&gt;\r\nX-MimeOLE: Produced By Microsoft MimeOLE V5.00.2919.6600\r\nImportance: Normal\r\nFrom: &quot;Lucas Gonze&quot; &lt;lucas@...&gt;\r\nX-Yahoo-Group-Post: member; u=63473576\r\nX-Yahoo-Profile: lucas_gonze\r\n\r\nPaul said:\n&gt; Who says you need to run a &quot;full server&quot;? We can explicitly define a\n&gt; minimal profile of HTTP that a callback target must support.\n\nYou bet!  That what PSP is!  Now, it may take a little while to craft PSP fully,\nbut that&#39;s exactly what it&#39;ll end up being.\n\n&gt; ecurity dudes are going to be unhappy with any system that allows\n&gt; people outside to open connections to people inside. But that&#39;s the very\n&gt; nature of a callback. We can &quot;route around&quot; them using persistent\n&gt; connection hacks etc. But first we should design as if we didn&#39;t need to\n&gt; do that.\n\nSorry, no good.  Security happens in the design.\n\n&gt; Can&#39;t the ticket be embedded in the PSP URI?\n\nDon&#39;t know.  Need to design the ticket with extreme care, so I wouldn&#39;t even try\nto answer this yet.\n\n&gt;\n&gt; &gt; 3) The source node emits a PSP notification.  The notification contains only\n&gt; &gt; enough information to validate the ticket.  It does not contain the callback\n&gt; &gt; address.  It is a fixed length to prevent buffer overflow attacks.\n&gt;\n&gt; What is the danger in containing the callback address? We could set up a\n&gt; maximum length on these things of 2048 bytes or something.\n\nDanger in containing the callback address is that a malicious spoofer could\nredirect the sink so that it doesn&#39;t pickup from the right location.\n\n\n&gt; &gt; 4) The sink validates the ticket and disconnects without a response\n&gt; of any kind.\n&gt;\n&gt; Okay, so this is clearly NOT HTTP. HTTP requires a response. What&#39;s\n&gt; dangerous about a formulaic 200 OK response?\n\nNope.  0.9 does not require a response.  It only requires that any response that\ndoes happen be HTML.\n\n&gt; &gt; To prevent port scanning, PSP does not return either a TCP ACK or an HTTP\n&gt; &gt; response.  However there does exist an ACK in the form of the sink\n&gt; poll in #5\n&gt; &gt; above.  A source MUST assume that a #3 notification not followed by\n&gt; a #5 poll\n&gt; &gt; has not been received.\n&gt;\n&gt; What does &quot;followed by&quot; mean? How long does the client have?\n\nDon&#39;t know!  Good question.  This is probably an application dependent variable.\n\n\n&gt; &gt; To prevent buffer overflows and to make TCP unnecessary, PSP uses\n&gt; fixed length\n&gt; &gt; messages.  512 bytes should be enough.\n&gt; &gt;\n&gt; &gt; To protect the sink from malicious parties, notifications MUST be\n&gt; idempotent.\n&gt; &gt; The sink need not store any information about the message after\n&gt; transmission.\n&gt; &gt; All notifications and polls related to a specific ticket are identical.  A\n&gt; &gt; single poll picks up all stored messages.\n&gt;\n&gt; Don&#39;t think that single-poll thing is very REST-y. The client and the\n&gt; server should not need to share an understanding about who has what\n&gt; messages. The client should control when it deletes a message on the\n&gt; server. The server can also impose timeout or space usage policies.\n\nMaybe a communication problem here: a notification doesn&#39;t say which event\narrived, it only says that an event arrived.    The purpose is to guarantee that\ncallback servers don&#39;t have to expose non-idempotent resources, which eliminates\na large family of attacks.\n\nI didn&#39;t mean to say anything at all about whether a callback deletes messages,\ndeletes em in a bunch, does it one by one, etc!  I&#39;d leave that definition to a\nconversation down the road -- this is just algorithms for now.\n\n&gt; &gt; For an implementation of PSP, HTTP 0.9 fits perfectly.  It can\n&gt; legally ride over\n&gt; &gt; UDP or IP, does not require any response at all, and only supports\n&gt; idempotent\n&gt; &gt; operations.\n&gt;\n&gt; Yes it does! http://www.w3.org/Protocols/HTTP/AsImplemented.html\n&gt;\n&gt; HTTP has always had a response.\n\n\n0.9 does not require a response.  It only requires that any response that does\nhappen be HTML.\n\n\n&gt; &gt; To prevent packet sniffers from spoofing notifications, the ticket should be\n&gt; &gt; renegotiated at each (#5) request.\n&gt;\n&gt; Why not address packet sniffing (and perhaps all server-authentication)\n&gt; using SSL?\n&gt;\n&gt; &quot;The response to a simple GET request is a message in hypertext mark-up\n&gt; language ( HTML ). This is a byte stream of ASCII characters.&quot;\n\nSSL might be a good idea, but I&#39;d leave that also for discussion down the road,\nonce algorithms are in place.\n\n\n"}}
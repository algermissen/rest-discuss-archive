{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":223135631,"authorName":"Felipe Gaúcho","from":"=?ISO-8859-1?Q?Felipe_Ga=FAcho?= &lt;fgaucho@...&gt;","profile":"felipegaucho2003","replyTo":"SENDER","senderId":"jPKg608Z_-fXb5K9_5TD3iEQNGAmwKT-T6o1ojM_JSCP-G1uCRYkLbVsjUwskRXeyAp6tiNqq08DZuLMHY2B25A_88VeDyqTNmhgQcImfUfK82DKsW2041lJ7w","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] PUT a resource + metadata simultaneously?","postDate":"1261589269","msgId":14369,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGQxMTYwMzg2MDkxMjIzMDkyN2s1NGY0MzEyOHc2NmY0ODZlYTE0MjVmY2VjQG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PGI1NDhkZjY1MDkxMjIzMDcxN3Q2NGRjZTgwMHc1MmUwYjc4MzA2NGZhOGYxQG1haWwuZ21haWwuY29tPg==","referencesHeader":"PGhnamJ1Zys5NG1kQGVHcm91cHMuY29tPgkgPGI1NDhkZjY1MDkxMjIzMDcxN3Q2NGRjZTgwMHc1MmUwYjc4MzA2NGZhOGYxQG1haWwuZ21haWwuY29tPg=="},"prevInTopic":14366,"nextInTopic":0,"prevInTime":14368,"nextInTime":14370,"topicId":14363,"numMessagesInTopic":3,"msgSnippet":"you can use PUT if you pass the complete resource to the server.. then your method will continue idempotent... otherwise, use POST ... -- ... Felipe Gaúcho ","rawEmail":"Return-Path: &lt;fgaucho@...&gt;\r\nX-Sender: fgaucho@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 84118 invoked from network); 23 Dec 2009 17:27:49 -0000\r\nX-Received: from unknown (98.137.34.44)\n  by m5.grp.sp2.yahoo.com with QMQP; 23 Dec 2009 17:27:49 -0000\r\nX-Received: from unknown (HELO mail-px0-f188.google.com) (209.85.216.188)\n  by mta1.grp.sp2.yahoo.com with SMTP; 23 Dec 2009 17:27:49 -0000\r\nX-Received: by mail-px0-f188.google.com with SMTP id 26so5177565pxi.17\n        for &lt;rest-discuss@yahoogroups.com&gt;; Wed, 23 Dec 2009 09:27:49 -0800 (PST)\r\nMIME-Version: 1.0\r\nX-Received: by 10.141.107.7 with SMTP id j7mr705824rvm.67.1261589269300; Wed, 23 \n\tDec 2009 09:27:49 -0800 (PST)\r\nIn-Reply-To: &lt;b548df650912230717t64dce800w52e0b783064fa8f1@...&gt;\r\nReferences: &lt;hgjbug+94md@...&gt;\n\t &lt;b548df650912230717t64dce800w52e0b783064fa8f1@...&gt;\r\nDate: Wed, 23 Dec 2009 18:27:49 +0100\r\nMessage-ID: &lt;d11603860912230927k54f43128w66f486ea1425fcec@...&gt;\r\nTo: &quot;rest-discuss@yahoogroups.com List&quot; &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Type: multipart/alternative; boundary=000e0cd138183fc727047b68a4fb\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: =?ISO-8859-1?Q?Felipe_Ga=FAcho?= &lt;fgaucho@...&gt;\r\nSubject: Re: [rest-discuss] PUT a resource + metadata simultaneously?\r\nX-Yahoo-Group-Post: member; u=223135631; y=V7k4gOJDaNPAkYouDzVQjnHPDzTAFWLnJKvVTI8zLV9oeQyzBNztInYcsA\r\nX-Yahoo-Profile: felipegaucho2003\r\n\r\n\r\n--000e0cd138183fc727047b68a4fb\r\nContent-Type: text/plain; charset=windows-1252\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nyou can use PUT if you pass the complete resource to the server.. then your=\r\n\nmethod will continue idempotent...\n\notherwise, use POST\n\n\n\nOn Wed, Dec 23,=\r\n 2009 at 4:17 PM, mike amundsen &lt;mamund@...&gt; wrote:\n\n&gt;\n&gt;\n&gt; I recommen=\r\nd checking out the Atom Publishing Protocol&#39;s solution for\n&gt; handling media=\r\n and related data [1]. I think the use of the Slug\n&gt; header [2] is also a g=\r\nreat way to deal with the friction between using\n&gt; POST and PUT to upload r=\r\nesources to the server.\n&gt;\n&gt; You should also check out the Link Header draft=\r\n [3] as a way to return\n&gt; links related resources. This is a handy solution=\r\n for adding\n&gt; hyperlinks to binary responses such as images.\n&gt;\n&gt; mca\n&gt; http=\r\n://amundsen.com/blog/\n&gt;\n&gt; [1] http://tools.ietf.org/html/rfc5023#section-9.=\r\n6\n&gt; [2] http://tools.ietf.org/html/rfc5023#section-9.7\n&gt; [3] http://tools.i=\r\netf.org/html/draft-nottingham-http-link-header-06\n&gt;\n&gt;\n&gt; On Sat, Dec 19, 200=\r\n9 at 15:09, spamspambakedbeansandspam\n&gt; &lt;roger.gonzalez@... &lt;roger.go=\r\nnzalez%40gmail.com&gt;&gt; wrote:\n&gt; &gt; I&#39;m building a HTTP document store for a pu=\r\nblic API, and\n&gt; &gt; I&#39;m trying to determine the most RESTful scheme for a upl=\r\noading a\n&gt; (possibly new) document and associated metadata in one atomic tr=\r\nansaction.\n&gt; &gt;\n&gt; &gt; It feels to me like I should be doing a PUT, but due to =\r\nthe strict\n&gt; definition in rfc2616 section 9.6, it feels awkward.\n&gt; &gt;\n&gt; &gt; M=\r\ny current implementation uses POST.  Let&#39;s say I want to write\n&gt; &quot;vacation.=\r\njpg&quot;, a few properties, and also store an associated blob of EXIF\n&gt; metadat=\r\na.  My current hacky implementation works like this (URIs truncated\n&gt; for b=\r\nrevity):\n&gt; &gt;\n&gt; &gt; POST vacation.jpg?title=3DMy%20Vacation\n&gt; &gt; Content-type: =\r\nmultipart/form-data\n&gt; &gt;\n&gt; &gt; ---\n&gt; &gt; Content-Disposition: form-data; name=3D=\r\n&quot;document&quot;\n&gt; &gt; Content-type: image/jpg\n&gt; &gt; ....\n&gt; &gt; ---\n&gt; &gt; Content-Disposi=\r\ntion: form-data; name=3D&quot;exif&quot;\n&gt; &gt; Content-type: application/x-exif\n&gt; &gt;\n&gt; &gt;=\r\n ....\n&gt; &gt;\n&gt; &gt; ---\n&gt; &gt; ....\n&gt; &gt; 201 Created\n&gt; &gt; Content-location: vacation.j=\r\npg\n&gt; &gt; Content-type: application/json\n&gt; &gt; {\n&gt; &gt;  &quot;document&quot; : &quot;vacation.jpg=\r\n&quot;,\n&gt; &gt;  &quot;*&quot; : &quot;vacation.jpg?content=3D*&quot;,  // results in a multipart as pos=\r\nted\n&gt; &gt;  &quot;basic&quot; : &quot;vacation.jpg?content=3Dbasic&quot;,  // the urlencoded query=\r\n\n&gt; &gt;  &quot;exif&quot; : &quot;vacation.jpg?content=3Dexif&quot;  // returns just the exif\n&gt; &gt; =\r\n}\n&gt; &gt;\n&gt; &gt; Each of these metadata URIs supports standard PUT/GET/DELETE.  (S=\r\nide\n&gt; note; I don&#39;t love my returned entity, as the &quot;content=3D&quot; implementa=\r\ntion\n&gt; actually supports arbitrary requesting combinations of multiple meta=\r\ndata\n&gt; entities.)\n&gt; &gt;\n&gt; &gt; In any case, it all works fine, but my inclinatio=\r\nn is that I should\n&gt; really provide this via PUT.  As it stands, though &quot;GE=\r\nT vacation.jpg&quot; just\n&gt; returns the main image/jpg document (without metadat=\r\na).  This would appear\n&gt; to violate rfc2616 section 9.6, which suggests tha=\r\nt GET should return the\n&gt; same entity that was PUT, i.e. the multipart docu=\r\nment.\n&gt; &gt;\n&gt; &gt; Solving is possible, but ugly.  I can change the PUT uri to:\n=\r\n&gt; &gt;\n&gt; &gt; PUT vacation.jpg?content=3D*\n&gt; &gt;\n&gt; &gt; which would have the property =\r\nthat the exact same URL can be used for a\n&gt; GET and it would indeed result =\r\nin the original multipart entity, and I&#39;d\n&gt; rely on the clause that says &quot;a=\r\n PUT request on a general URI might result in\n&gt; several other URIs being de=\r\nfined by the origin server&quot;, one of which would\n&gt; be the main resource, &quot;va=\r\ncation.jpg&quot;.\n&gt; &gt;\n&gt; &gt; Unfortunately, discovering the &quot;vacation.jpg&quot; URI woul=\r\nd be out of band\n&gt; with the protocol headers (I wish there were a way to re=\r\nturn content headers\n&gt; for each of the multipart entities sent!) and would =\r\nhave to be in the entity\n&gt; returned, as above.  So now GET looks user-frien=\r\ndly, but PUT is ugly.\n&gt; &gt;\n&gt; &gt; It looks weird and I can see this working, bu=\r\nt although I&#39;m\n&gt; &gt; fundamentally doing a PUT, I feel that I may be stretchi=\r\nng things a bit\n&gt; with the multipart entities, and maybe I should stick wit=\r\nh POST after all\n&gt; given the current spec(s).\n&gt; &gt;\n&gt; &gt; Thoughts?\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;=\r\n\n&gt; &gt;\n&gt; &gt; ------------------------------------\n&gt; &gt;\n&gt; &gt; Yahoo! Groups Links\n&gt;=\r\n &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt;  \n&gt;\n\n\n\n-- \n------------------------------------------\n=\r\n  Felipe Ga=FAcho\n  10+ Java Programmer\n  CEJUG Senior Advisor\n\r\n--000e0cd138183fc727047b68a4fb\r\nContent-Type: text/html; charset=windows-1252\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nyou can use PUT if you pass the complete resource to the server.. then your=\r\n method will continue idempotent...&lt;br&gt;&lt;br&gt;otherwise, use POST&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;=\r\nbr&gt;&lt;div class=3D&quot;gmail_quote&quot;&gt;On Wed, Dec 23, 2009 at 4:17 PM, mike amundse=\r\nn &lt;span dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:mamund@...&quot;&gt;mamund@...=\r\nm&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;\n&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;bord=\r\ner-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-l=\r\neft: 1ex;&quot;&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;div style=3D&quot;background-color: rgb(255, 255, 255)=\r\n;&quot;&gt;\n&lt;span&gt;=A0&lt;/span&gt;\n\n\n&lt;div&gt;\n  &lt;div&gt;\n\n\n    &lt;div&gt;\n      \n      \n      &lt;p&gt;I r=\r\necommend checking out the Atom Publishing Protocol&#39;s solution for&lt;br&gt;\nh=\r\nandling media and related data [1]. I think the use of the Slug&lt;br&gt;\nheader =\r\n[2] is also a great way to deal with the friction between using&lt;br&gt;\nPOST an=\r\nd PUT to upload resources to the server.&lt;br&gt;\n&lt;br&gt;\nYou should also check out=\r\n the Link Header draft [3] as a way to return&lt;br&gt;\nlinks related resources. =\r\nThis is a handy solution for adding&lt;br&gt;\nhyperlinks to binary responses such=\r\n as images.&lt;br&gt;\n&lt;br&gt;\nmca&lt;br&gt;\n&lt;a href=3D&quot;http://amundsen.com/blog/&quot; target=\r\n=3D&quot;_blank&quot;&gt;http://amundsen.com/blog/&lt;/a&gt;&lt;br&gt;\n&lt;br&gt;\n[1] &lt;a href=3D&quot;http://to=\r\nols.ietf.org/html/rfc5023#section-9.6&quot; target=3D&quot;_blank&quot;&gt;http://tools.ietf.=\r\norg/html/rfc5023#section-9.6&lt;/a&gt;&lt;br&gt;\n[2] &lt;a href=3D&quot;http://tools.ietf.org/h=\r\ntml/rfc5023#section-9.7&quot; target=3D&quot;_blank&quot;&gt;http://tools.ietf.org/html/rfc50=\r\n23#section-9.7&lt;/a&gt;&lt;br&gt;\n[3] &lt;a href=3D&quot;http://tools.ietf.org/html/draft-nott=\r\ningham-http-link-header-06&quot; target=3D&quot;_blank&quot;&gt;http://tools.ietf.org/html/dr=\r\naft-nottingham-http-link-header-06&lt;/a&gt;&lt;/p&gt;&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;div class=3D&quot;h5&quot;=\r\n&gt;&lt;br&gt;\n&lt;br&gt;\nOn Sat, Dec 19, 2009 at 15:09, spamspambakedbeansandspam&lt;br&gt;\n&lt=\r\n;&lt;a href=3D&quot;mailto:roger.gonzalez%40gmail.com&quot; target=3D&quot;_blank&quot;&gt;roger.gonz=\r\nalez@...&lt;/a&gt;&gt; wrote:&lt;br&gt;\n&gt; I&#39;m building a HTTP document sto=\r\nre for a public API, and&lt;br&gt;\n&gt; I&#39;m trying to determine the most REST=\r\nful scheme for a uploading a (possibly new) document and associated metadat=\r\na in one atomic transaction.&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; It feels to me like I should=\r\n be doing a PUT, but due to the strict definition in rfc2616 section 9.6, i=\r\nt feels awkward.&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; My current implementation uses POST. =A0=\r\nLet&#39;s say I want to write &quot;vacation.jpg&quot;, a few properties, a=\r\nnd also store an associated blob of EXIF metadata. =A0My current hacky impl=\r\nementation works like this (URIs truncated for brevity):&lt;br&gt;\n\n&gt;&lt;br&gt;\n&gt;=\r\n POST vacation.jpg?title=3DMy%20Vacation&lt;br&gt;\n&gt; Content-type: multipart/f=\r\norm-data&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; ---&lt;br&gt;\n&gt; Content-Disposition: form-data; nam=\r\ne=3D&quot;document&quot;&lt;br&gt;\n&gt; Content-type: image/jpg&lt;br&gt;\n&gt; ....&lt;br&gt;=\r\n\n&gt; ---&lt;br&gt;\n&gt; Content-Disposition: form-data; name=3D&quot;exif&quot;&lt;=\r\nbr&gt;\n&gt; Content-type: application/x-exif&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; ....&lt;br&gt;\n&gt;&lt;b=\r\nr&gt;\n&gt; ---&lt;br&gt;\n&gt; ....&lt;br&gt;\n&gt; 201 Created&lt;br&gt;\n&gt; Content-location: v=\r\nacation.jpg&lt;br&gt;\n&gt; Content-type: application/json&lt;br&gt;\n&gt; {&lt;br&gt;\n&gt; =A0=\r\n&quot;document&quot; : &quot;vacation.jpg&quot;,&lt;br&gt;\n&gt; =A0&quot;*&quot; =\r\n: &quot;vacation.jpg?content=3D*&quot;, =A0// results in a multipart as pos=\r\nted&lt;br&gt;\n&gt; =A0&quot;basic&quot; : &quot;vacation.jpg?content=3Dbasic&quot=\r\n;, =A0// the urlencoded query&lt;br&gt;\n&gt; =A0&quot;exif&quot; : &quot;vacation=\r\n.jpg?content=3Dexif&quot; =A0// returns just the exif&lt;br&gt;\n&gt; }&lt;br&gt;\n&gt;&lt;b=\r\nr&gt;\n&gt; Each of these metadata URIs supports standard PUT/GET/DELETE. =A0(S=\r\nide note; I don&#39;t love my returned entity, as the &quot;content=3D&quot=\r\n; implementation actually supports arbitrary requesting combinations of mul=\r\ntiple metadata entities.)&lt;br&gt;\n\n&gt;&lt;br&gt;\n&gt; In any case, it all works fine=\r\n, but my inclination is that I should really provide this via PUT. =A0As it=\r\n stands, though &quot;GET vacation.jpg&quot; just returns the main image/jp=\r\ng document (without metadata). =A0This would appear to violate rfc2616 sect=\r\nion 9.6, which suggests that GET should return the same entity that was PUT=\r\n, i.e. the multipart document.&lt;br&gt;\n\n&gt;&lt;br&gt;\n&gt; Solving is possible, but =\r\nugly. =A0I can change the PUT uri to:&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; PUT vacation.jpg?co=\r\nntent=3D*&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; which would have the property that the exact sa=\r\nme URL can be used for a GET and it would indeed result in the original mul=\r\ntipart entity, and I&#39;d rely on the clause that says &quot;a PUT request=\r\n on a general URI might result in several other URIs being defined by the o=\r\nrigin server&quot;, one of which would be the main resource, &quot;vacation=\r\n.jpg&quot;.&lt;br&gt;\n\n&gt;&lt;br&gt;\n&gt; Unfortunately, discovering the &quot;vacatio=\r\nn.jpg&quot; URI would be out of band with the protocol headers (I wish ther=\r\ne were a way to return content headers for each of the multipart entities s=\r\nent!) and would have to be in the entity returned, as above. =A0So now GET =\r\nlooks user-friendly, but PUT is ugly.&lt;br&gt;\n\n&gt;&lt;br&gt;\n&gt; It looks weird and=\r\n I can see this working, but although I&#39;m&lt;br&gt;\n&gt; fundamentally doing =\r\na PUT, I feel that I may be stretching things a bit with the multipart enti=\r\nties, and maybe I should stick with POST after all given the current spec(s=\r\n).&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; Thoughts?&lt;br&gt;\n&gt;&lt;br&gt;\n&gt;&lt;br&gt;\n&gt;&lt;br&gt;\n&gt;&lt;br&gt;&lt;/div=\r\n&gt;&lt;/div&gt;\n&gt; ------------------------------------&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; Yahoo! =\r\nGroups Links&lt;br&gt;\n&gt;&lt;br&gt;\n&gt;&lt;br&gt;\n&gt;&lt;br&gt;\n&gt;&lt;br&gt;\n&gt;&lt;br&gt;\n\n\n    &lt;/div&gt;\n=\r\n     \n\n    \n    &lt;div style=3D&quot;color: rgb(255, 255, 255); min-height: 0pt;&quot;&gt;=\r\n&lt;/div&gt;\n\n\n&lt;/div&gt;\n\n\n\n  \n\n\n\n\n\n\n&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;br clear=3D&quot;all&quot;&gt;&lt;br&gt;--=\r\n &lt;br&gt;------------------------------------------&lt;br&gt; =A0 Felipe Ga=FAcho&lt;br&gt;=\r\n =A0 10+ Java Programmer&lt;br&gt; =A0 CEJUG Senior Advisor&lt;br&gt;&lt;br&gt;\n\r\n--000e0cd138183fc727047b68a4fb--\r\n\n"}}
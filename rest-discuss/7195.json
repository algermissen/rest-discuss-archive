{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":175757792,"authorName":"Roy T. Fielding","from":"&quot;Roy T. Fielding&quot; &lt;fielding@...&gt;","profile":"roy_fielding","replyTo":"SENDER","senderId":"PENosuwBK-n5C656D1ei8mVP3yDWcSFTVXrnhj9ChPcU_RN0w63o344CeTo3ZI1CrC0J1le-NmkhLpkoljk5OyDW40T_Agy3HK-qrQ","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Dynamic Evolvability","postDate":"1165281997","msgId":7195,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDExQjI5MjkxLTg2QUYtNDQ0NC04Q0M4LUQ5MzZEOTE2OEUxNEBnYml2LmNvbT4=","inReplyToHeader":"PDA2NTk4ODBBLTI1RjEtNDE3NC04RkFFLTIzQjc3NDNBMTdFQkBtYWMuY29tPg==","referencesHeader":"PDA2NTk4ODBBLTI1RjEtNDE3NC04RkFFLTIzQjc3NDNBMTdFQkBtYWMuY29tPg=="},"prevInTopic":7194,"nextInTopic":7196,"prevInTime":7194,"nextInTime":7196,"topicId":7194,"numMessagesInTopic":6,"msgSnippet":"... I am pretty sure that I was thinking of the constraint that application state be kept on the user agent.  It is dynamic evolution in the sense that an","rawEmail":"Return-Path: &lt;fielding@...&gt;\r\nX-Sender: fielding@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 67095 invoked from network); 5 Dec 2006 01:26:46 -0000\r\nReceived: from unknown (66.218.67.33)\n  by m35.grp.scd.yahoo.com with QMQP; 5 Dec 2006 01:26:46 -0000\r\nReceived: from unknown (HELO scorpio.lunarpages.com) (209.200.229.70)\n  by mta7.grp.scd.yahoo.com with SMTP; 5 Dec 2006 01:26:45 -0000\r\nReceived: from wsip-70-183-62-251.oc.oc.cox.net ([70.183.62.251] helo=[10.2.8.55])\n\tby scorpio.lunarpages.com with esmtpa (Exim 4.52)\n\tid 1GrP5o-0006x5-Li; Mon, 04 Dec 2006 17:27:32 -0800\r\nIn-Reply-To: &lt;0659880A-25F1-4174-8FAE-23B7743A17EB@...&gt;\r\nReferences: &lt;0659880A-25F1-4174-8FAE-23B7743A17EB@...&gt;\r\nMime-Version: 1.0 (Apple Message framework v752.2)\r\nContent-Type: text/plain; charset=US-ASCII; delsp=yes; format=flowed\r\nMessage-Id: &lt;11B29291-86AF-4444-8CC8-D936D9168E14@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nContent-Transfer-Encoding: 7bit\r\nDate: Mon, 4 Dec 2006 17:26:37 -0800\r\nTo: Jan Algermissen &lt;algermissen1971@...&gt;\r\nX-Mailer: Apple Mail (2.752.2)\r\nX-AntiAbuse: This header was added to track abuse, please include it with any abuse report\r\nX-AntiAbuse: Primary Hostname - scorpio.lunarpages.com\r\nX-AntiAbuse: Original Domain - yahoogroups.com\r\nX-AntiAbuse: Originator/Caller UID/GID - [0 0] / [47 12]\r\nX-AntiAbuse: Sender Address Domain - gbiv.com\r\nX-Source: \r\nX-Source-Args: \r\nX-Source-Dir: \r\nX-eGroups-Msg-Info: 1:0:0:0\r\nFrom: &quot;Roy T. Fielding&quot; &lt;fielding@...&gt;\r\nSubject: Re: [rest-discuss] Dynamic Evolvability\r\nX-Yahoo-Group-Post: member; u=175757792; y=nXVy6YhYukvN0LUlczOhmtVStQ0qsUbuvoqunNhUiMJqotL_sGls\r\nX-Yahoo-Profile: roy_fielding\r\n\r\nOn Dec 4, 2006, at 2:57 PM, Jan Algermissen wrote:\n&gt; Roy writes in his dissertation:\n&gt;\n&gt; &quot;2.3.4.1 Evolvability\n&gt;\n&gt; Evolvability represents the degree to which a component\n&gt; implementation can be changed without negatively impacting other\n&gt; components. Static evolution of components generally depends on how\n&gt; well the architectural abstraction is enforced by the implementation,\n&gt; and thus is not something unique to any particular architectural\n&gt; style. Dynamic evolution, however, can be influenced by the style if\n&gt; it includes constraints on the maintenance and location of\n&gt; application state. The same techniques used to recover from partial\n&gt; failure conditions in a distributed system [133] can be used to\n&gt; support dynamic evolution.&quot;[1]\n&gt;\n&gt; While trying to flesh out the argument that REST does increase\n&gt; dynamic evolvability (and that SOA (whatever it really is) does not,\n&gt; if so) I realized that I am not entirely clear what architectral\n&gt; constraint of REST increases dynamic evolvability and why it does so.\n\nI am &quot;pretty sure&quot; that I was thinking of the constraint that  \napplication\nstate be kept on the user agent.  It is dynamic evolution in the  \nsense that\nan old origin server can be replaced with a new one in the middle of one\nbrowser&#39;s ongoing conversation with a website (aside from the current\nmessage streams, which are presumed to complete before the origin server\nis replaced). Likewise, servers don&#39;t need to remember clients, so  \nreplacing\na piece of client software does not affect other clients or servers.\nUse of URIs also helps in that regard (as opposed to using something\nthat is less portable during evolution, like UUIDs).\n\nIt is difficult for me to remember the exact origin of what I was  \nthinking\nat the time because architectural properties were the first parts of the\ndissertation written down (part of the survey paper) and I changed the\ncategories around several times.  Most software research calls them\n&quot;qualities&quot; (mostly because that is what Boehm called them in early\nstudies, IIRC), though some other sources refer to them as principles,\nrequirements, or a host of other disturbing things.\n\nMy first thought today was that I must have picked that definition up\nfrom some conversation with my apartment-mate (Peyman Oreizy).  His\ndissertation on decentralized software evolution can be found at\n\n    http://www.ics.uci.edu/~peymano/\n\nbut he seems to have settled on a different set of terms from the\nones that I used.  It is worth reading anyway if you are interested\nin software evolution (or adaptability).\n\n&gt; The reference to Waldo&#39;s &quot;Note on Disributed Computing&quot; suggests -if\n&gt; I understand correctly- that one of the problems of dynamic evolution\n&gt; is to leave the calling component in a consistent state if the\n&gt; interface of the called component unexpectedly changes. IOW, making a\n&gt; call to a remote object should either succeed or fail with a clear\n&gt; error indication that tells the caller that the interface changed and\n&gt; how.\n\nEr, possible, but more likely I was just thinking of partial failure\nconditions being the result of evolution-in-situ.\n\n&gt; Regarding REST I understand this:\n&gt;\n&gt; While REST&#39;s uniform interface constraint cannot prevent a remote\n&gt; component from changing its interface as part of an evolution (e.g.\n&gt; it could remove former support for PUT) the client will know exactly\n&gt; what happened since it knows the method semantics (they are uniform)\n&gt; and the error code (&quot;405 Method Not Allowed&quot;) indicates the reason\n&gt; for the failure. IOW, dynamic evolvability is increased because the\n&gt; called component can change without brealing the client (because the\n&gt; client is required to understand and expect a 405).\n&gt;\n&gt; Is this understanding correct?\n\nI think it is more accurate to say that a resource cannot change\nits interface as part of an evolution because all resources have\nthe same interface.  (405 doesn&#39;t change the interface -- it is an\nanswer to the request via the same interface.)  But REST does not\nrequire use of a single interface protocol, so in that sense the\ninterface could change dynamically (e.g., HTTP Upgrade).\n\n&gt; Assuming it is correct, does WS-* (being a SOA implementation) pass\n&gt; the test or not?\n&gt; (Without interface uniformity, all the server can really tell the\n&gt; client upon an interface change is: &quot;Interface changed&quot;. This IMHO\n&gt; violates the constraint that the client must be in a consistent state\n&gt; after the failed call).\n\nWS-* doesn&#39;t *do* anything, and thus doesn&#39;t qualify for any test.\nYou would have to test an application architecture that happens to\nuse WS-* in a specific way that is testable.  HTTP doesn&#39;t\n&quot;pass&quot; the test in isolation either -- it only passes when a\nREST-based application makes use of HTTP in a RESTful way.\n\n&gt; Can anyone explain to me, how the location of application state\n&gt; affects dynamic evolvability? I am honsetly missing a clue here (or\n&gt; do not see the forrest for the trees).\n\nConsider what happens when a stateful server is replaced in the\nmiddle of a conversation with a client by a new server which seems\njust like the old one but has no idea what stage the client is\nwithin its application.\n\n....Roy\n\n"}}
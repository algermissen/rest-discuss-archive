{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":198693287,"authorName":"Bill Venners","from":"Bill Venners &lt;bv-svp@...&gt;","profile":"billvenners","replyTo":"SENDER","senderId":"X0AP9E41ldYHosXU7IF5ZpT7LZGj1UWHVsFvQc95kAYKply5EBwcUjKw1H1F-tVHD9myDvTTi2nbaMhmsjUycvEjeiCo628","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Re: Meaning of stateless","postDate":"1145388735","msgId":5997,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDRGOEZFNDI2LTU0QUUtNDhERC1BQkQwLUVGNTQzMEU1N0EwQUBhcnRpbWEuY29tPg==","inReplyToHeader":"PDQ0NDQ2Q0YwLjkwMTAzMDhAamo1Lm5ldD4=","referencesHeader":"PDQ0M0ZGMzFDLjgwMDAxMDlAdmVpY29uLmNvbT4JIDwzNDNlY2IzZTA2MDQxNDEyMzBnNDFjMTMyMWNuYjJhOTM2Y2NiZjUzZGM3ZEBtYWlsLmdtYWlsLmNvbT4gPDExNDUwOTU4OTMuNjk4OC4yNi5jYW1lbEBsb2NhbGhvc3QubG9jYWxkb21haW4+IDw0NDQ0NkNGMC45MDEwMzA4QGpqNS5uZXQ+"},"prevInTopic":5989,"nextInTopic":5998,"prevInTime":5996,"nextInTime":5998,"topicId":5949,"numMessagesInTopic":44,"msgSnippet":"Hi John, ... Another way to do the anonymous shopping cart is to give it a unique URI. When a guest goes to add an initial item to his or her shopping cart,","rawEmail":"Return-Path: &lt;bv-svp@...&gt;\r\nX-Sender: bv-svp@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 51333 invoked from network); 18 Apr 2006 19:32:40 -0000\r\nReceived: from unknown (66.218.66.216)\n  by m24.grp.scd.yahoo.com with QMQP; 18 Apr 2006 19:32:40 -0000\r\nReceived: from unknown (HELO svcstsnq08.hotspot.t-mobile.com) (66.94.9.112)\n  by mta1.grp.scd.yahoo.com with SMTP; 18 Apr 2006 19:32:40 -0000\r\nReceived: from [10.253.213.162] (162.213.253.10.in-addr.arpa [10.253.213.162])\n\tby svcstsnq08.hotspot.t-mobile.com (8.12.10+Sun/8.12.10) with ESMTP id k3IJVaMs021370;\n\tTue, 18 Apr 2006 12:31:36 -0700 (PDT)\r\nIn-Reply-To: &lt;44446CF0.9010308@...&gt;\r\nReferences: &lt;443FF31C.8000109@...&gt;\t &lt;343ecb3e0604141230g41c1321cnb2a936ccbf53dc7d@...&gt; &lt;1145095893.6988.26.camel@...&gt; &lt;44446CF0.9010308@...&gt;\r\nMime-Version: 1.0 (Apple Message framework v746.3)\r\nContent-Type: text/plain; charset=US-ASCII; delsp=yes; format=flowed\r\nMessage-Id: &lt;4F8FE426-54AE-48DD-ABD0-EF5430E57A0A@...&gt;\r\nCc: REST Discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Transfer-Encoding: 7bit\r\nDate: Tue, 18 Apr 2006 12:32:15 -0700\r\nTo: John Elliot &lt;jj5@...&gt;\r\nX-Mailer: Apple Mail (2.746.3)\r\nX-Proofpoint-Spam-Details: rule=notspam policy=default score=0 mlx=0 adultscore=0 adjust=0 reason=mlx engine=3.1.0-06041100 definitions=3.0.0-06041810\r\nX-eGroups-Msg-Info: 1:12:0:0\r\nFrom: Bill Venners &lt;bv-svp@...&gt;\r\nSubject: Re: [rest-discuss] Re: Meaning of stateless\r\nX-Yahoo-Group-Post: member; u=198693287; y=8mbvH7T6NwKHALhdV0S1ZMwADZM2yJsuvuC7qC5tbUeAkLs1Cg8\r\nX-Yahoo-Profile: billvenners\r\n\r\nHi John,\n\nOn Apr 17, 2006, at 9:37 PM, John Elliot wrote:\n\n&gt;   c) A user who arrives at a web-site will initially be  \n&gt; &#39;anonymous&#39;, yet\n&gt; their very first request flags the beginning of a session. The very\n&gt; first thing they do might be to &#39;add item to shopping basket&#39;, and the\n&gt; very next thing they do &#39;login&#39;. &#39;Shopping basket&#39; is an application\n&gt; layer function, and it is perfectly reasonable for a server to  \n&gt; maintain\n&gt; this state and associate it with a &#39;session&#39;. Unfortunately, not all\n&gt; &#39;anonymous&#39; users can share the same shopping basket, and the  \n&gt; transition\n&gt; from &#39;anonymous&#39; to &#39;joe&#39; must migrate the shopping basket. The  \n&gt; shopping\n&gt; basket isn&#39;t associated with the &#39;user&#39;, it&#39;s associated with the  \n&gt; &#39;session&#39;.\n&gt;\nAnother way to do the anonymous shopping cart is to give it a unique  \nURI. When a guest goes to add an initial item to his or her shopping  \ncart, the server stores it not in the session, but in a set of  \nshopping cart snapshots, each of which has a unique ID. It then  \nredirects the client to a URI that includes that shopping cart  \nsnapshot ID with one item in it. If they add another item, then the  \nserver creates another shopping cart snapshot with two items in it  \n(which has a new ID), and redirects the client to a new URI with the  \nsecond ID. The client could log in at that point, even using HTTP  \nauth. Now we know this is Joe, and the next thing Joe does is add a  \nthird item to his shopping cart. The server creates a third shopping  \ncart snapshot, and redirects the client to a URI that includes the  \nunique ID of the third snapshot. In the third snapshot, the server  \nassociates Joe&#39;s user ID with the shopping cart, so only he and  \nadmins can look at it.\n\nAny user could look at the shopping cart with one or two items in it,  \nbecause it was created by anonymous (before Joe logged in) but if you  \nuse an opaque, hard-to-guess token for the ID, then it would be  \nhighly unlikely that anyone will accidentally go there even if they  \nare trying. And even if they did go there, all they would know is  \nsomeone put in these two items. If they added a third item to  \nshopping cart, they would essentially bifurcate the shopping cart.  \nThey would get a new shopping cart snapshot with a new ID that would  \nbe included in the URI to which they get redirected.\n\nTo me the biggest lesson I learned from reading about REST is that I  \ndon&#39;t need session state with HTTP. I can model everything as  \nresources with unique URIs, some of which require authentication and  \nauthorization. The kind of session I do want is an authentication  \nsession, which simply means the user doesn&#39;t have to provide  \ncredentials to the client each time they make an HTTP request. The  \nuser can provide credentials once and then be automatically  \nauthenticated each subsequent request during their authentication  \nsession. Cookies with a fallback on URL rewriting seem to work just  \nfine for holding this authentication token/session ID. You can even  \nhave the same user working with two different instances of the  \napplication from one client this way. I.e., Joe could actually be  \nadding different items to two different shopping carts at the same  \ntime from the same browser.\n\n&gt; If you know the &#39;object&#39; and the &#39;subject&#39; of a request, then along  \n&gt; with\n&gt; a single verb you have all of the information necessary to create the\n&gt; context in which to generate an appropriate response.\n&gt;\nWell, there are other possibilities. If a user has landed on one of  \nour sites after searching for &quot;rest relaxation,&quot; I want to highlight  \nthose terms in the page. So I need to look at the referrer header. If  \nthey indicate via their accept language headers that they speak  \nFrench, and they&#39;ve requested an English version of an article for  \nwhich I have a French translation, I want to add in a prominent link  \nto the French version into the English page I send back. I want to  \nalso try and detect requests that are coming from a device with a  \nsmall screen, and include a prominent link to a mobile version of the  \ncontent.\n\n(The following snippet is from your follow-up email.)\n\n&gt; The only thing I&#39;m trying to point out here is that &#39;session id&#39;  \n&gt; should\n&gt; not be in the URL, but it needs to be there. It should be a  \n&gt; transparent\n&gt; part of the universal uniform interface, and it should be able to  \n&gt; stand\n&gt; as the &#39;subject&#39; of a request.\n&gt;\n&gt; If this happens, then we can move toward using the &#39;subject&#39; *and* the\n&gt; &#39;object&#39; of the request to key a cache of what are otherwise\n&gt; non-cacheable responses to HTTP GET.\n&gt;\nI don&#39;t believe this either necessary or desirable. The reason it  \nisn&#39;t necessary is that you can use ETags to identify different  \nrepresentations, including personalized representations, of the same  \nresource to caches. The reason it isn&#39;t desirable is both because  \nmany sessions can share the same representations, and because I may  \nwant to send multiple representations for the same URI and subject  \nbased on other information in the request (such as referrer or accept- \nlanguage). By using ETags, which already exists in HTTP 1.1, I can  \neffectively identify and cache each representation. The fewer  \nrepresentations you have, the more caching can help with scalability,  \nand that mechanism will always be more flexible. At the extreme case,  \nif you really have a different representation for each session, then  \nyou can include the session ID in the ETag. But most of the time what  \nyou probably really have in that case is a different representation  \nper user, not per session, so you could include a user ID in the  \nETag. But to the extent possible it is better to try and minimize the  \nnumber of resources for which there are so many representations,  \nbecause the fewer the representations the more scalability benefit  \nyou get from HTTP caching.\n\nFor example, I do want to say, &quot;Welcome, John&quot; on the top of every  \npage once you&#39;ve signed in. But I&#39;m currently planning on attempting  \nto have only two representations of each page, one for signed in  \nusers and one for anonymous. The signed in representation will have  \nsome JavaScript that grabs the Welcome greeting and insert it  \ndynamically on the page. If a client doesn&#39;t have JavaScript enabled,  \nthen they still see they are signed in, because that&#39;s one of the two  \nrepresentations sent from the server, but they won&#39;t see their name  \nin a welcome message. To me that&#39;s a graceful degradation for non- \nJavaScript clients that I&#39;m willing to accept in exchange for  \nimproved cache effectiveness. (The signed in/anonymous  \nrepresentations only work for clients with cookies enabled. Otherwise  \nI have to fall back to URL rewriting, where the caching will be less  \neffective, because I&#39;ll have a different URI per resource per session.)\n\nI&#39;m going to try to take the same kind of JavaScript approach with  \nsearch keyword highlighting and links to translations, but I may just  \nsend those variations as representations from the server if  \nJavaScript turns out to be problematic for those use cases. One  \nattitude I&#39;ve heard on this list is that if it isn&#39;t cacheable it  \nisn&#39;t scalable. To me, caching is one tool in the scalability  \ntoolbox, but not the only one. Another example is using URL-rewriting  \nif cookies aren&#39;t enabled on the client. Yes, this doesn&#39;t make as  \neffective use of caching as cookies or even HTTP auth could, but if  \nit allows 5% more users to use the site effectively, then it is  \nuseful. Maybe because of the less effective caching on that 5% you  \nneed to add one more node to your server cluster.\n\nIn summary, I think ETags provide a very flexible solution to caching  \nmultiple representations of the same resource, and that using a  \ndifferent URI for each bit of new or changed state resulting from  \neach HTTP request, you don&#39;t need session state. One thing I don&#39;t  \nunderstand yet is why everyone says cookies are so evil. Is it really  \ncookies or how they are used that is evil? I can see how having  \nsession state, which can be identified via a cookie, can degrade  \ncaching effectiveness and break the back button. I can also see  \nprivacy problems with persistent cookies. But from every REST- \nproponent&#39;s disdain for cookies, I feel I must be missing something.  \nWhat is really wrong with cookies?\n\nBill\n----\nBill Venners\nEditor-in-Chief\nArtima Developer\nhttp://www.artima.com\n\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":10266038,"authorName":"Jeff Bone","from":"Jeff Bone &lt;jbone@...&gt;","replyTo":"SENDER","senderId":"roXeBOVWAQcchnEUB2GgO_hkMdutoFQpV04FStvMmgZe_FAXSY6NXJhCI7_ceKtMyvMqjdrn4YmFq32HfkxXeRM","spamInfo":{"isSpam":false,"reason":"0"},"subject":"HttpEvents as currently contemplated are extraneous?","postDate":"1012617313","msgId":591,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDNDNUI1MDYxLjM2OTNCNDJAanVtcC5uZXQ+"},"prevInTopic":0,"nextInTopic":594,"prevInTime":590,"nextInTime":592,"topicId":591,"numMessagesInTopic":16,"msgSnippet":"So just finished an afternoon reread of Ari Luotonen s book, hadn t looked at it in a couple of years;  also some material online.  I ve *almost* convinced","rawEmail":"Return-Path: &lt;jbone@...&gt;\r\nX-Sender: jbone@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_0_1_3); 2 Feb 2002 02:37:40 -0000\r\nReceived: (qmail 64519 invoked from network); 2 Feb 2002 02:37:39 -0000\r\nReceived: from unknown (216.115.97.171)\n  by m8.grp.snv.yahoo.com with QMQP; 2 Feb 2002 02:37:39 -0000\r\nReceived: from unknown (HELO blanco.clickfeed.com) (207.8.92.96)\n  by mta3.grp.snv.yahoo.com with SMTP; 2 Feb 2002 02:37:39 -0000\r\nReceived: from jump.net (cust-92-97.customer.jump.net [207.8.92.97])\n\tby blanco.clickfeed.com (8.10.0/8.10.0) with ESMTP id g122bcK09775\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Fri, 1 Feb 2002 20:37:38 -0600\r\nMessage-ID: &lt;3C5B5061.3693B42@...&gt;\r\nDate: Fri, 01 Feb 2002 20:35:13 -0600\r\nX-Mailer: Mozilla 4.7 [en]C-CCK-MCD {Sony}  (Win98; I)\r\nX-Accept-Language: en\r\nMIME-Version: 1.0\r\nTo: rest-discuss@yahoogroups.com\r\nSubject: HttpEvents as currently contemplated are extraneous?\r\nContent-Type: text/plain; charset=us-ascii\r\nContent-Transfer-Encoding: 7bit\r\nFrom: Jeff Bone &lt;jbone@...&gt;\r\nX-Yahoo-Group-Post: member; u=10266038\r\n\r\n\nSo just finished an afternoon reread of Ari Luotonen&#39;s book,\nhadn&#39;t looked at it in a couple of years;  also some material\nonline.  I&#39;ve *almost* convinced myself that HttpEvents as we are\ncurrently discussing them are mostly extraneous.  I&#39;m going to\nsay some things about my understanding of the current very rough\nbut gradually converging consensus, then lay out the strawman for\nwhy this approach is unnecessary.  It&#39;s a straw man, whack away.\n\nCURRENT CONSENSUS:  An HttpEvents protocol could be any one of or\ncombination of things.  It might be (1) simply a state-change\nnotification protocol, (2) a push-based state replication\nprotocol, or (3) a subscription / listener management protocol.\nIt appears that we are generally converging on (1), viewing (2)\nas either an optimization or application-specific or both, and\n(3) as interesting but somewhat out-of-scope for this spec.  (We\nare talking about reifying subscribers and subscriptions, but\npushing out &quot;listener management&quot; etc.)\n\nIs that about right?\n\nIf so, then we may be spinning our wheels somewhat; various folks\ndid a fair bit of work on NOTIFY back in the early days [1] in\nthe context of proxy cache notification and in the course of the\nHTTP-NG discussions.  Not sure what the current state of NOTIFY\nis;  did it ever go anywhere?  I apologize if there&#39;s an obvious\nanswer to this, as my own &quot;cache&quot; of HTTP caching-related\ninformation is a bit stale.  No mention of NOTIFY / this draft in\nAri&#39;s 1998 book, and very little I can find via Google.\n\nBUT...\n\n[1] describes a protocol extension (with a &quot;new&quot; method, NOTIFY)\nthat solves (1) in a very HTTPish way.  It doesn&#39;t reify\nsubscriptions, but it doesn&#39;t have to --- it appears that\nsubscriptions are at-most-once commitments to notify the\nsubscriber that the state of a resource has changed, for the\npurpose of cache invalidation.  Renewal of the subscription\nappears to happen incrementally --- the subscription &quot;expires&quot;\nafter the first notification, and is &quot;renewed&quot; on the subsequent\nGET (if any) that happens to refresh the cache after the\nnotification is received.\n\nThe more I think about this, the more elegant it seems.\n\nHere&#39;s how this protocol could be used to accomplish (1):\n\nCLIENT -&gt; SERVER\n----------------------\nGET /foo HTTP/1.1\nAccept: text/html\nProxy-Features: my.host.com; notify\n\n(Note that we&#39;re &quot;pretending&quot; to be our own proxy server cache.\nWe&#39;re requesting notification of state change on the resource if\nit&#39;s available.)\n\nSERVER -&gt; CLIENT\n---------------------\n201 OK\nCache-Control: notify\nContent-Type: text/html\n\n...text...\n\n(The SERVER responds and says, among other things, that it is\nwilling to notify (via the Cache-Control directive) the CLIENT\nat-most-once (?) that the resource has changed by possibly\nemitting a NOTIFY for that resource to the CLIENT at some later\ndate.)\n\nLater on, when /foo changes, the SERVER initiates a connection\nback to CLIENT (the machine specified in Proxy-Features:, i.e.\nmy.host.com) and sends notification that the state change\noccurred / the cached copy (if any) has expired:\n\nSERVER -&gt; CLIENT\n---------------------\nNOTIFY /foo HTTP/1.1\n\n(Presumably the fully-qualified URI is somehow reconstructed from\nTCP connection data.  This is gross and unworkable, so I would\nassume that instead NOTIFY is required to provide a\nfully-qualified URI.)\n\nThe client CLIENT proceed to refresh its cache via a GET.  At\nthis point, the SERVER is presumably allowed to stop sending\nfurther notifications;  in order to receive the next\nnotification, the client parameterizes the GET so that it looks\njust like the first one.  This cycle repeats, ad infinitum, as\nlong as the CLIENT is interested in being updated about state\nchanges on SERVER/foo:\n\nCLIENT -&gt; SERVER\n----------------------\nGET /foo HTTP/1.1\nAccept: text/html\nProxy-Features: my.host.com; notify\n\n...lather, rinse, repeat...\n\nDISCUSSION\n--------------\n\nPROS:  This seems generally workable.  It avoids issues with\nmanagement of subscriptions, etc. by its at-most-once\nnotification semantics.  (It&#39;s at-most-once in that notifications\naren&#39;t guaranteed;  the origin server may provide data to feed\ncache age and freshness calculations, and the client / proxy must\nuse its own heuristics to determine whether to trust a cached\nobject in the absense of a notification.)  The net effect is the\nsame as (1) in that clients receive state change notifications\nfor particular objects.  *** It also partially addresses Lucas&#39;\nconcern about state-leakage, in much the same manner that Lucas\nsuggested;  a notification client need only support the NOTIFY\nmethod.  Responses to NOTIFY aren&#39;t described, but presumably a\nreasonable set of responses could be specified so that extra\nstate isn&#39;t leaked in response to a NOTIFY. ***  It also, as Alex\nnotes, avoids complications with overloading the semantics of\ni.e. POST.\n\nCONS:  As noted in [1], any point-to-point notification protocol\nsuffers when there are a large number of parties interested in\nreceiving notifications;  the draft explicitly states that\n&quot;clients should not attempt to use this facility as a matter of\ncourse&quot; for that reason.  IMO, we&#39;re no better or worse off in\nthis regard with either [1] or HttpEvents as contemplated.  There\nare some problems with this draft, such as the lack of fully\nqualifying the URI in the NOTIFY message --- how does the\nnotification client know what the notification relates to?  Also,\nthe terminology is very proxy specific.  It doesn&#39;t reify the\nnotion of a subscription, but given a one-shot semantics I&#39;m not\nsure this is necessary or even desirable. (!) :-/\n\nTANGENTIAL ISSUES\n------------------------\n\nMost of the notification application scenarios I&#39;ve been\ncontemplating are actually made simpler by simply recasting them\nin terms of proxy cache invalidation and assuming something like\nthe above.  This does *not* specify any state replication /\nupdate by piggybacking the NOTIFY, nor does it address the issue\nof fan-out.  It also doesn&#39;t address the issue of proxy fan-out,\nwhere a *request* to an intermediary needs to be fanned out to\nmultiple origin servers, but that&#39;s a completely different topic\nand scenario.\n\n\n\n\n[1]  http://www.w3.org/TR/WD-proxy\n\n\n\n\n\n"}}
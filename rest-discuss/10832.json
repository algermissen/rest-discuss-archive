{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":147780944,"authorName":"Aristotle Pagaltzis","from":"Aristotle Pagaltzis &lt;pagaltzis@...&gt;","profile":"a22pag","replyTo":"SENDER","senderId":"q7orZkeugT9KuRcQRsHPmjyanzRHwvsVjXdAzNWQ3Thw6EH1nmFXVsDV3fXlkBC7Af_EZDQxtSuto6BZtxjtleNY_xhbZkv4iKor17c","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: Stack operations using Rest","postDate":"1211888060","msgId":10832,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMDgwNTI3MTEzNDIwLkdBMTUxMTlAa2xhbmdyYXVtLnBsYXNtYXN0dXJtLm9yZz4=","inReplyToHeader":"PGcwcThxbSttNzZrQGVHcm91cHMuY29tPg==","referencesHeader":"PGcwcThxbSttNzZrQGVHcm91cHMuY29tPg=="},"prevInTopic":10813,"nextInTopic":10844,"prevInTime":10831,"nextInTime":10833,"topicId":10795,"numMessagesInTopic":17,"msgSnippet":"... There’s be a container resource, a pointer to the top of the stack, and individual elements, as outlined. For the purposes of illustration let’s assume","rawEmail":"Return-Path: &lt;pagaltzis@...&gt;\r\nX-Sender: pagaltzis@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 64159 invoked from network); 27 May 2008 11:34:23 -0000\r\nX-Received: from unknown (66.218.67.97)\n  by m36.grp.scd.yahoo.com with QMQP; 27 May 2008 11:34:23 -0000\r\nX-Received: from unknown (HELO mail.gmx.net) (213.165.64.20)\n  by mta18.grp.scd.yahoo.com with SMTP; 27 May 2008 11:34:23 -0000\r\nX-Received: (qmail invoked by alias); 27 May 2008 11:34:21 -0000\r\nX-Received: from static-87-79-236-202.netcologne.de (EHLO klangraum) [87.79.236.202]\n  by mail.gmx.net (mp056) with SMTP; 27 May 2008 13:34:21 +0200\r\nX-Authenticated: #163624\r\nX-Provags-ID: V01U2FsdGVkX1813L0lgN41SBS4DAnYH0cqnp68jDRQ9U6M+ggIx1\n\tbzokpsxEH+uSUt\r\nDate: Tue, 27 May 2008 13:34:20 +0200\r\nTo: rest-discuss@yahoogroups.com\r\nMessage-ID: &lt;20080527113420.GA15119@...&gt;\r\nMail-Followup-To: rest-discuss@yahoogroups.com\r\nReferences: &lt;g0q8qm+m76k@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=utf-8\r\nContent-Disposition: inline\r\nContent-Transfer-Encoding: 8bit\r\nIn-Reply-To: &lt;g0q8qm+m76k@...&gt;\r\nUser-Agent: Mutt/1.5.17 (2007-11-01)\r\nX-Y-GMX-Trusted: 0\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Aristotle Pagaltzis &lt;pagaltzis@...&gt;\r\nSubject: Re: Stack operations using Rest\r\nX-Yahoo-Group-Post: member; u=147780944; y=TB2ps1C5Fs2ielYzrsYUP_7PthFYDvS9XV60Pn9vfmqG\r\nX-Yahoo-Profile: a22pag\r\n\r\n* akleak &lt;andy@...&gt; [2008-05-20 06:55]:\n&gt; I would like to provide a REST interface to some Stack (Lifo)\n&gt; collections on my system.\n&gt; \n&gt; Here is my idea for a restful STACK interface:\n&gt; \n&gt; &gt;Push (add an item to the top of the stack)\n&gt; POST /queue (action:create, controller: stack)\n&gt; \n&gt; &gt; Pop (read the top item, then destroy it)\n&gt; GET /queue/top (action:read, controller: stack)\n&gt; DEL /queue/top (action:delete, controller: stack)\n&gt; \n&gt; What is the best way to implement this??  Any feedback welcome.\n\nThere’s be a container resource, a pointer to the top of the\nstack, and individual elements, as outlined. For the purposes of\nillustration let’s assume we put the container at `/stack`, the\npointer to top of stack at `/stack/top`, and elements at\n`/stack/{num}`, where `num` increases monotonically in the\ninterest of idempotency (ie. no two elements are ever assigned\nthe same number).\n\n`GET /stack` --&gt; `200 OK`, Content:\n\n    &lt;stack top=&quot;/stack/top&quot; self=&quot;/stack&quot;&gt;\n        &lt;elt pos=&quot;0&quot; href=&quot;/stack/10&quot;/&gt; &lt;!-- top of stack --&gt;\n        &lt;elt pos=&quot;1&quot; href=&quot;/stack/8&quot;/&gt;\n        &lt;elt pos=&quot;2&quot; href=&quot;/stack/7&quot;/&gt;\n    &lt;/stack&gt;\n\nInteresting, so let’s see.\n\n`GET /queue/top` --&gt; `303 See Other /queue/10`\n\nAha; well, we knew what the top of stack is.\n\n`POST /queue` --&gt; `201 Created /queue/15`\n\nOK, fine.\n\n`GET /queue/top` --&gt; `303 See Other /queue/15`\n\nYeap, as expected.\n\n`DELETE /queue/15` --&gt; `204 No Content`\n\nHm, so I can delete any element I want? Isn’t this a stack?\n\n`DELETE /queue/7` --&gt; `409 Conflict`\n\nOh; no I can’t. It’s a stack, and deleting elements from\nelsewhere than the top would conflict with the state of the\nsystem.\n\n`DELETE /queue/top` --&gt; `403 Forbidden`\n\nSo I can’t delete the top-of-stack pointer. Handling this request\nin this fashion is actually important. Making it respond 2xx, but\nactually deleting a resource *other* than `/stack/top` *but not*\n`/stack/top` itself is broken. (It would be fine to delete\nanother resource *and* `/stack/top`, however.) It violates the\nsemantics of `DELETE`. This means that intermediaries, f.ex.,\nwhich do not know the particulars of the stack protocol after\nall, will get the wrong impression about what actually happened.\nDon’t do that.\n\nIn any case the most important part here is actually the design\nof the resource you `GET` from `/stack`: that is where the\nhypermedia happens. Hypermedia is the cornerstone of REST: the\nformat design needs to make all parts of the service explicit via\nlinks. The URI design particulars are actually irrelevant; what\nmatters is where in the document the link is found. This is the\nbasis for how to communicate to the client how it can interact\nwith resources linked by `elt` elements as opposed to the one\nlinked by the `top` attribute as opposed to the one linked by the\n`self` attribute. Given a spec of these semantics, every link\ncould point to a completely different host, each with a\ncompletely different URI structure – and as long as that\nconglomerate adhered to the semantics promised to clients by the\nspecification of the stack document format, to the client it\nwould all look just the same.\n\nThis means, f.ex., that the client actually knew ahead of time\nthat it couldn’t successfully `DELETE /stack/7`, because there is\nno other conclusion to draw from the given document based on the\nsemantics of the format.\n\nREST is hypermedia. URI design is orthogonal to hypermedia.\nTherefore, URI design is not part of REST (although it’s\nundeniably a good thing; it’s just good because of reasons\nother than REST).\n\nRegards,\n-- \nAristotle Pagaltzis // &lt;http://plasmasturm.org/&gt;\n\n"}}
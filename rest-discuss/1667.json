{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":78234457,"authorName":"Mikael Andersson","from":"Mikael Andersson &lt;mikael@...&gt;","profile":"snikkt","replyTo":"SENDER","senderId":"tfxlbydzjFtIfdt1iZ_zqwu2Yylra0ce0DITI4YQf-ue-TjRl04gTsi5ZaYNvDi7zGBE2Pfk_3s3QoVjS0XG17SgqWEg9_nVY9w7","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] XML&#39;s &quot;Big Idea&quot; and how it relates to REST","postDate":"1025627630","msgId":1667,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDNEMjFENUVFLjMwMjA2MDlAeHBlZGlvLmNvbT4=","referencesHeader":"PDEwMjIzNjcxODJCOEQ1MTFBNzcxMDA1MDhCREYzNDg2MDQ5QTUzMzNAZXhjaGFuZ2UtMS5rZXlub3RlLmNvbT4="},"prevInTopic":1638,"nextInTopic":1669,"prevInTime":1666,"nextInTime":1668,"topicId":1637,"numMessagesInTopic":7,"msgSnippet":"... Okay i ll have a go at this one :) 1) Object-Object interactions (semantics) OO systems have interactions between object and the semantic meaning of these","rawEmail":"Return-Path: &lt;mikael@...&gt;\r\nX-Sender: mikael@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_0_7_4); 2 Jul 2002 16:33:54 -0000\r\nReceived: (qmail 92818 invoked from network); 2 Jul 2002 16:33:52 -0000\r\nReceived: from unknown (66.218.66.217)\n  by m5.grp.scd.yahoo.com with QMQP; 2 Jul 2002 16:33:52 -0000\r\nReceived: from unknown (HELO mout01.xpedio.net) (212.247.4.232)\n  by mta2.grp.scd.yahoo.com with SMTP; 2 Jul 2002 16:33:52 -0000\r\nReceived: (qmail-ldap/ctrl 96843 invoked from network); 2 Jul 2002 16:33:50 -0000\r\nReceived: from generic133.xpedio.com (HELO xpedio.com) ([212.247.7.133]) (envelope-sender &lt;mikael@...&gt;)\n          by mout01.xpedio.net (qmail-ldap-1.03) with SMTP\n          for &lt;rest-discuss@yahoogroups.com&gt;; 2 Jul 2002 16:33:50 -0000\r\nMessage-ID: &lt;3D21D5EE.3020609@...&gt;\r\nDate: Tue, 02 Jul 2002 18:33:50 +0200\r\nUser-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.0; en-US; rv:1.1a) Gecko/20020611\r\nX-Accept-Language: en-us, en\r\nMIME-Version: 1.0\r\nTo: rest-discuss@yahoogroups.com\r\nSubject: Re: [rest-discuss] XML&#39;s &quot;Big Idea&quot; and how it relates to REST\r\nReferences: &lt;1022367182B8D511A77100508BDF3486049A5333@...&gt;\r\nContent-Type: text/plain; charset=us-ascii; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nFrom: Mikael Andersson &lt;mikael@...&gt;\r\nX-Yahoo-Group-Post: member; u=78234457\r\nX-Yahoo-Profile: snikkt\r\n\r\nJoe Hsy wrote:\n&gt; -----Original Message-----\n&gt; From: Paul Prescod [mailto:paul@...]\n&gt; \n&gt; \n&gt;&gt;Kevin Smathers described the difference very nicely.\n&gt;&gt;\n&gt;&gt;  While you can probably think of an OO design more quickly than you can\n&gt;&gt;  a distributed document design, (and I do agree that any good designer\n&gt;&gt;  could do so), that view completely neglects what you are trying to get\n&gt;&gt;  from a loosely coupled design.  Data/method encapsulation is what you\n&gt;&gt;  are trying to avoid, not what you are trying to achieve.\n&gt; \n&gt; \n&gt; I&#39;ve always thought this this type of characterization of OO is rather\n&gt; unfair.  Encapsulation can be both a good thing and a bad thing depending on\n&gt; what you&#39;re encapsulating and the nature of the application.  REST uses\n&gt; encapsulation to good use as well.  Per Roy&#39;s thesis chapter 5.2.1 (Data\n&gt; Elements):\n&gt; \n&gt;     REST therefore gains the separation of concerns of the client-server\n&gt; style without\n&gt;     the server scalability problem, allows information hiding through a\n&gt; generic interface\n&gt;     to enable encapsulation and evolution of services, and provides for a\n&gt; diverse set\n&gt;     of functionality through downloadable feature-engines.\n&gt; \n&gt; I&#39;ve never viewed OO as method oriented.  Objects are data as well as\n&gt; associated methods.  Exposing data and methods appropriately are matters of\n&gt; design (good designs expose the right set).  Exposing all the data all the\n&gt; time isn&#39;t the point and isn&#39;t always a good idea.  Likewise, I still don&#39;t\n&gt; understand why just because we are dealing with a super-scale distributed\n&gt; system that we should not allowing *any* object methods to be exposed.\n&gt; \n&gt; I think having an internet-scale OO system would be a very good thing and\n&gt; would quite useful.  I&#39;ve been trying to see if REST or some of the core\n&gt; concepts of REST can be the basis of such an OO system and I still think it\n&gt; can.  But, if we keep insisting REST as incompatible with OO, I guess it is\n&gt; a hopeless cause.\n\nOkay i&#39;ll have a go at this one :)\n\n1) Object-Object interactions (semantics)\nOO systems have interactions between object and the\nsemantic meaning of these methods is hard to encode in\na form that a machine can understand.\n\n2) State and side effects\nDoes a call to getMethod() alter the state ?\nDo i need to persist the Object after getMethod() to preserve the state ?\nShould the Object device when to persist ? This isn&#39;t always what you want.\nHow far does the side effects of this method call reach ?\nWill the call return in 0.01s or in 10days ?\nCan ignore the answer ?\n\nThe problem doesn&#39;t lie in associating the operations with data as being\ndone in OO, but rather in the fact that the information is hidden so an application\ncannot choose how to process the information itself.  Whoever builds the object\nmust anticipate the future uses for the system if it is to be scalable and\nextensible.\n\nIf a Object representing an image is to be anything more than data.\nIt must encode operations. And as describing behaviour of methods is\nvery hard. Actually the method itself is the only _exact_ description we can get.\n\nIf we use methods and hide data we can only have one implementation of each method\nif the system as a whole is to be reliable.And the behaviour must be exactly the\nsame regardless of where you use the Object/methods. So we need exact platform\nindependence for it to work. And still, in large scale distributed systems you\ncan easily get almost uncontrollable interactions when different parts of the\nsystems starts sending messages(method invocations) back and forth. These situations\naren&#39;t easily avoided.\n\nBut in a massively distributed system we must assume nodes in that system might be of\ndifferent kinds. Not all information processing units are created equal :)\n\nA data structure is much easier to describe because it doesn&#39;t generate interactions\nthat may be sequence dependend. init(),release() and release(),init() can have wildly\ndifferent interaction patterns. So we can describe data in fever dimensions.\nAnd this make it simpler.\n\nEach node can implement it&#39;s own (or use some library) operations for whatever\ndata types it is interested in. The errors that may arise is more easily handled\nbecause fewer (entirely unknown) interactions will occur. Formatting errors in\ndata is often quite easy to detect. So we can validate input to a higher degree.\nWe can not easily validate how a method works, mainly because of that we cannot\nse the side effects (as all side effects are hidden\nuntil we detect them)\n\nWhat i think one should strive for in distributed systems is to avoid side effects\nas much as possible.\nThis make the system much more robust against timing differences. It is even so that\nthe ordering of events is irrelevant if we have _no_ side-effects.\n\nOO is almost _purely_ side-effects, you use methods to alter the state of an object.\nAnd you never know how far these side effects reach. You are at the mercy of whoever\nmade that particular object. You never know the state of the object, it&#39;s lika\nquantum-mechanics. Unless you look, you don&#39;t know what you have. And when you&#39;ve\nlooked you still don&#39;t know :)\n\nComments and criticism are welcome ...\n\nI will not attempt to describe the REST architecture, many has done it before me\nand succeded well.\n\n\n&gt; \n&gt; //Joe\n\n/Mikael Andersson\n\n\n"}}
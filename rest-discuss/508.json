{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":23186829,"authorName":"Paul Prescod","from":"Paul Prescod &lt;paul@...&gt;","replyTo":"SENDER","senderId":"_wjHblW1svsWeUJ5UCv3KZ8T489k6XiiTRBmVZUmHG1sBPzyQ4cH4pb8sa1ShXqsRfBIekrQ7wnpjVWxOS0zdLiysIBNlQ","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Expiration","postDate":"1012539878","msgId":508,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDNDNUEyMUU2LkNFRTI2QzFDQHByZXNjb2QubmV0Pg==","referencesHeader":"PE5FQkJKSUhNTUxLSEVPUE5PR0hEQ0VDTkZLQUEubHVjYXNAZ29uemUuY29tPg=="},"prevInTopic":506,"nextInTopic":510,"prevInTime":507,"nextInTime":509,"topicId":506,"numMessagesInTopic":8,"msgSnippet":"Thanks for your comments and ideas. Overall I think they are good. ... Okay, of course expiration counts should go both ways. The client should request one and","rawEmail":"Return-Path: &lt;paul@...&gt;\r\nX-Sender: paul@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_0_1_3); 1 Feb 2002 05:05:47 -0000\r\nReceived: (qmail 37816 invoked from network); 1 Feb 2002 05:05:47 -0000\r\nReceived: from unknown (216.115.97.171)\n  by m8.grp.snv.yahoo.com with QMQP; 1 Feb 2002 05:05:47 -0000\r\nReceived: from unknown (HELO smtp1.ActiveState.com) (209.17.183.249)\n  by mta3.grp.snv.yahoo.com with SMTP; 1 Feb 2002 05:05:47 -0000\r\nReceived: from smtp3.ActiveState.com (smtp3.ActiveState.com [192.168.3.19])\n\tby smtp1.ActiveState.com (8.11.6/8.11.6) with ESMTP id g1155iN08204;\n\tThu, 31 Jan 2002 21:05:44 -0800\r\nReceived: from prescod.net (ssh1.ActiveState.com [192.168.3.32])\n\tby smtp3.ActiveState.com (8.11.6/8.11.6) with ESMTP id g1155he06004;\n\tThu, 31 Jan 2002 21:05:43 -0800\r\nMessage-ID: &lt;3C5A21E6.CEE26C1C@...&gt;\r\nDate: Thu, 31 Jan 2002 21:04:38 -0800\r\nX-Mailer: Mozilla 4.76 [en] (Windows NT 5.0; U)\r\nX-Accept-Language: en\r\nMIME-Version: 1.0\r\nTo: Lucas Gonze &lt;lucas@...&gt;, Rest-Discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nSubject: Re: [rest-discuss] Expiration\r\nReferences: &lt;NEBBJIHMMLKHEOPNOGHDCECNFKAA.lucas@...&gt;\r\nContent-Type: text/plain; charset=us-ascii\r\nContent-Transfer-Encoding: 7bit\r\nX-PerlMx-Spam: Gauge=, Probability=0%, Report=INTERNAL_HOST\r\nX-Filtered-By: PerlMx makes it fast and easy.  See http://www.ActiveState.com/Products/PerlMx/Header\r\nFrom: Paul Prescod &lt;paul@...&gt;\r\nX-Yahoo-Group-Post: member; u=23186829\r\n\r\nThanks for your comments and ideas. Overall I think they are good.\n\nLucas Gonze wrote:\n&gt; \n&gt; I have gone through the language regarding watch expiration and have\n&gt; the following comments.\n&gt; \n&gt; * Dates may not be the only, or even the most, important semantic for\n&gt; expirations.  The most obvious exception is a request for one single\n&gt; notification.  A usecase for one-shot notifications is a user\n&gt; requesting a resource that is not yet available.  Another possible\n&gt; exception is a pay-per-use magazine subscription, where a user buys\n&gt; twelve monthly updates.  I suggest that &quot;Requested-Expiration&quot; be\n&gt; renamed &quot;Requested-Expiration-Date&quot; and second expiration header named\n&gt; &quot;Requested-Expiration-Count&quot; be added.  Finally, there is a third\n&gt; possible semantic that is probably the default case: &quot;do this watch\n&gt; for as long as you feel like&quot;.\n\nOkay, of course expiration counts should go both ways. The client should\nrequest one and the server should say what it decided upon.\n\n&gt; * The prefix &quot;Requested-&quot; is redundant.  Better wording would be\n&gt; &quot;Expiration-Date&quot; and &quot;Expiration-Count&quot;.\n\nBut it is really just a request (or expectation). Your idea of using\nExpect: is good.\n\n&gt; * If a publisher rejects a watch request because of an unsupported expiration\n&gt; setting (such as a date too far in the future or a count beyond what has been\n&gt; paid for), the requester should be able to diagnose the problem.  \n\nMy sense was that it wouldn&#39;t be an exception, the server would just\nsubstitute what it really had. Like if you ask to read() 1000 bytes but\nthere are only 500 left, I get 500 back.\n\nI&#39;m worried about negotiation round trips. &quot;Gimme this. No! Okay this.\nNo! Okay this. No!&quot; Why not just have the server tell the client what it\ncan have. The client can cancel it if it isn&#39;t happy.\n\nPlus, HTTP (surprisingly!) doesn&#39;t really standardize how to report\nwhich expectation wasn&#39;t met. So how would you figure it out.\n\nIs there anything seriously wrong with failing silently? The client can\ncheck what it got against what it requested and puke if it wants or else\njust take what it got.\n\nMaybe there should be a Prefer: header that has the same syntax as\nExpect:.\n\n&gt;...\n&gt; The 409 status code is IMO the best match:\n\nI think that we need to figure out the issue above before we choose a\nresponse code. \n\nI didn&#39;t really understand why you disliked 417, though:\n\n&gt; Unfortunately the 417 status code indicates that the expiration\n&gt; header is not supported rather than that the expiration value was\n&gt; unacceptable.\n\nI think you misunderstood 14.20: &quot; The server MUST respond with a 417\n(Expectation Failed) status if any of the expectations cannot be met\n...&quot;\n\nThat seems perfect.\n\n&gt;...\n&gt; * The &quot;subscription-expiration&quot; header is required.  Since it\n&gt; is reasonable that many requests will be on a &quot;good enough&quot; basis\n&gt; (&quot;do the watch for as long as is feasible&quot;), I suggest that this be\n&gt; the default value.  If there is a default value then there is no need\n&gt; to have an expiration request header be a MUST.\n\nIt isn&#39;t a MUST. It&#39;s a MAY in the spec as it is:\n\n&quot;The message MAY contain a header called &quot;Requested-Expiration&quot;.&quot;\n\n&gt; * I believe that this language overspecifies: &quot;The client MAY renew\n&gt; the subscription before this time. If it does not, the server MAY stop\n&gt; sending notifications after that time. The server MAY also remove the\n&gt; Subscription URI.&quot;  This behavior should be left to the implementation.\n\nDebatable...what&#39;s the point of standardizing the headers if we don&#39;t\nstandardize the associated behaviour?\n\n&gt;...\n&gt; Expiration: The response to the Subscription MAY include a header\n&gt; called &quot;Subscription-Expiration&quot;.  \n\nJust one? I might want a year or twelve issues. Whichever comes first.\n\n&gt;...\n&gt; In the case of Expiration;adhoc, the server may cease performing the\n&gt; watch at any time.  \n\nI would say that the Server needs to report its policy in the response.\ni.e. One Month, 12 requests, etc. Otherwise, how will the client know\nwhen it is time to renew?\n\n Paul Prescod\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":302633978,"authorName":"Daniel Yokomizo","from":"&quot;Daniel Yokomizo&quot; &lt;daniel.yokomizo@...&gt;","profile":"daniel_yokomiso","replyTo":"SENDER","senderId":"9Ef1JGVvjR1bY5vlrhyJSOGCjjwLRZVAsbOL7Shx5oMlxJauma6bRVhUdOFQPjVVGqMhv2yo90CCcEPOtXWKTf85Gz1wa-54C5EkujJYlQCqhPrf","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] How to design validation of e.g. username, email-address, password","postDate":"1205421437","msgId":10485,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGU1YzZlY2FiMDgwMzEzMDgxN2s3MzQyNjZhMHA1YTVjZGIwOTMyNzkzNGY4QG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PDEyMDUzOTQ5OTEuMzIxMi4zMi5jYW1lbEBsb2NhbGhvc3QubG9jYWxkb21haW4udGxkPg==","referencesHeader":"PDEyMDUzNTI5MTQuMzE3NS4xNjguY2FtZWxAbG9jYWxob3N0LmxvY2FsZG9tYWluLnRsZD4JIDxlNWM2ZWNhYjA4MDMxMjE1MTV1OTkyMWJjYmtkYTVhYmU2NmY4ZGQ5YzY1QG1haWwuZ21haWwuY29tPgkgPDEyMDUzOTQ5OTEuMzIxMi4zMi5jYW1lbEBsb2NhbGhvc3QubG9jYWxkb21haW4udGxkPg=="},"prevInTopic":10484,"nextInTopic":10487,"prevInTime":10484,"nextInTime":10486,"topicId":10467,"numMessagesInTopic":11,"msgSnippet":"... I m saying that your validation code can call HEAD /users/{username} and HEAD /users/{email}, both must return 404 to be able to insert a new user. There s","rawEmail":"Return-Path: &lt;daniel.yokomizo@...&gt;\r\nX-Sender: daniel.yokomizo@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 31590 invoked from network); 13 Mar 2008 15:17:19 -0000\r\nX-Received: from unknown (66.218.67.94)\n  by m44.grp.scd.yahoo.com with QMQP; 13 Mar 2008 15:17:19 -0000\r\nX-Received: from unknown (HELO fg-out-1718.google.com) (72.14.220.159)\n  by mta15.grp.scd.yahoo.com with SMTP; 13 Mar 2008 15:17:19 -0000\r\nX-Received: by fg-out-1718.google.com with SMTP id e21so2950291fga.11\n        for &lt;rest-discuss@yahoogroups.com&gt;; Thu, 13 Mar 2008 08:17:17 -0700 (PDT)\r\nX-Received: by 10.82.186.5 with SMTP id j5mr23370006buf.38.1205421437788;\n        Thu, 13 Mar 2008 08:17:17 -0700 (PDT)\r\nX-Received: by 10.86.99.14 with HTTP; Thu, 13 Mar 2008 08:17:17 -0700 (PDT)\r\nMessage-ID: &lt;e5c6ecab0803130817k734266a0p5a5cdb09327934f8@...&gt;\r\nDate: Thu, 13 Mar 2008 15:17:17 +0000\r\nTo: &quot;Martin Grotzke&quot; &lt;mg@...&gt;\r\nCc: rest-discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nIn-Reply-To: &lt;1205394991.3212.32.camel@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: 7bit\r\nContent-Disposition: inline\r\nReferences: &lt;1205352914.3175.168.camel@...&gt;\n\t &lt;e5c6ecab0803121515u9921bcbkda5abe66f8dd9c65@...&gt;\n\t &lt;1205394991.3212.32.camel@...&gt;\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Daniel Yokomizo&quot; &lt;daniel.yokomizo@...&gt;\r\nSubject: Re: [rest-discuss] How to design validation of e.g. username, email-address, password\r\nX-Yahoo-Group-Post: member; u=302633978; y=Py2Ulh65J8GLUTaurBdQSUPJd0gjjTaSUx55-FOlTHOZFAmARyEtdiKx\r\nX-Yahoo-Profile: daniel_yokomiso\r\n\r\nOn Thu, Mar 13, 2008 at 7:56 AM, Martin Grotzke &lt;mg@...&gt; wrote:\n&gt; Hi,\n&gt;\n&gt;  &gt; Why not just HEAD /user/{username}? If the status code is 404 then it\n&gt;  &gt; is free for use. If username isn&#39;t the UID for users in the URI you\n&gt;  &gt; can use queries for that: HEAD /user?username={username}. For email\n&gt;  &gt; something similar can be used. You can have both username and email as\n&gt;  &gt; UID to find a single user with HEAD /user/{uid}, if both identifiers\n&gt;  &gt; give an unique user, there&#39;s no reason to choose just one.\n&gt;  But we do not want that users can use the email-address of another user\n&gt;  as username. Additionally we validate email-addresses slightly different\n&gt;  than usernames. So it&#39;s important what&#39;s validated - username of\n&gt;  email-address.\n\nI&#39;m saying that your validation code can call HEAD /users/{username}\nand HEAD /users/{email}, both must return 404 to be able to insert a\nnew user. There&#39;s no need to think that you can use two different\nthings in the URL (if you can unambiguously see which is which). I did\na login process that worked like that, you could log on with either an\nuid or the email, both had to be unique. Also in both cases you can\nreturn a 400 if the username or email is invalid.\n\n&gt;  But just for the username HEAD sounds well. So 404 would be the status\n&gt;  code if the username is still available, 409 if the username is already\n&gt;  taken, and 400 if the username is not well formed?\n\n409 should be returned when you are trying to PUT and there&#39;s a\nconflict. In this moment we are trying to see if the resource is\navailable.\n\n&gt;  &gt; &gt;  Or would it be better to have it at s.th.\n&gt;  &gt; &gt;  like /username/validation/{username}, /email/validation/{email}\n&gt;  &gt;\n&gt;  &gt; Unless username and email are resources in your app, it makes more\n&gt;  &gt; sense to go to the top level resource (i.e. user) and query it.\n&gt;  Given that we have to distinguish between username and email, you would\n&gt;  suggest to have s.th. like /users/validation/email/{email}?\n\nValidation is an activity, not a resource. A validator would be an\nresource, but it smells like a disguised RPC IMHO. In summary my\napproach would be:\n\n1. Client issues a HEAD /users/{username} and HEAD /users/{email}\n2. Server process the request see if the uid provided is valid\n(returning 400 if it&#39;s invalid), see if such value exists in the\ndatabase (returning a 404 if it doesn&#39;t exist) and returns 200.\n3. Client sees if a 400 is returned and corrects the input, if a 404\nis returned it can use the usernmae/email if 200 is returned it knows\nit can&#39;t.\n4. Client issues a POST /users with the information in the request\nbody url encoded. You could use a PUT /users/{username} but then the\nserver must be able to understand that this is a new user instead of\nan existing one. One approach is to check the authorization header, if\nit exists and is valid it&#39;s an update of an existing user, otherwise\nit&#39;s a new user.\n5. Server process the request and if there&#39;s a conflict it issues a\n409, otherwise it returns a 201.\n\nA concern you always need to have when exposing resources is how you\ndeal with sensitive information. If anyone can issue a GET\n/users/{username} the server will return a representation of this\nresource, so perhaps you want to require an authorization to GET (the\ncredential must match the user) and let anyone issue HEAD (as it\ndoesn&#39;t send a body). Also take care with the cache headers to ensure\nthat nothing is cached.\n\n&gt;  &gt; &gt;  And what were possible response status codes? I&#39;d think this could\n&gt;  &gt; &gt;  always be 200, with more details in the response body, as even a GET\n&gt;  &gt; &gt;  with a username that is syntactically not correct would be a valid\n&gt;  &gt; &gt;  request. Or should 200 be only returned if everything is ok, and 400 if\n&gt;  &gt; &gt;  the email address is not correct, and 409 if the username is already\n&gt;  &gt; &gt;  taken?\n&gt;  &gt;\n&gt;  &gt; 400 for syntax errors (e.g. invalid characters in username/email)\n&gt;  &gt; should be ok. 409 shouldn&#39;t be used in this case, because the request\n&gt;  &gt; completed without errors, a 409 should be issued only if the request\n&gt;  &gt; could not be completed.\n&gt;  I thought 409 would be good to indicate s.th. like &quot;usename already\n&gt;  taken&quot;. But this would occur in a PUT/POST request, not during a GET\n&gt;  request, what HEAD is related to. Does this mean, that if I want to be\n&gt;  able to return 409 to indicate a conflict, that I would have to use\n&gt;  PUT/POST? How else would it be possible to distinguish between &quot;not well\n&gt;  formed&quot; (400) and &quot;already taken&quot; (??) using response status codes?\n\nIf HEAD /users/{username} return 200 it means that there&#39;s a user with\nthat username, so it&#39;s already taken.\n\n&gt;  &gt; &gt;  I find it really hard to model such operations as resources, just to\n&gt;  &gt; &gt;  mention this :)\n&gt;  &gt;\n&gt;  &gt; Instead of thinking about the interaction (i.e. validating a username)\n&gt;  &gt; try to focus on what resources are necessary to interact with. So we\n&gt;  &gt; can quickly figure out that the users resource is a good way to find\n&gt;  &gt; an user by username, so we ask for it and if there&#39;s none we know the\n&gt;  &gt; username is available.\n&gt;  I&#39;m trying hard, really! :) The username of course is an easy one. Using\n&gt;  others gets more complicated...\n&gt;\n&gt;  Thanx a lot,\n&gt;  cheers,\n&gt;  Martin\n\nBest regards,\nDaniel Yokomizo.\n\n"}}
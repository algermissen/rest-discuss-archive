{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":319607554,"authorName":"Assaf Arkin","from":"&quot;Assaf Arkin&quot; &lt;assaf@...&gt;","profile":"assafarkin","replyTo":"SENDER","senderId":"lcTTDTj9LLepE0pX3iMqQfSO3cTe8Fv_9vj4f3KAj9LnzUnZygoehJAEOF5TpIp50xSf-DAOuMhi2-8d7bbwe3Pit9neaDXF2g","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] enterprise adoption of REST and amazon services","postDate":"1198142055","msgId":10035,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDUwMzdiNmU0MDcxMjIwMDExNGplZjc3MzEyZzFiNmYyZWU1MjUzMWIzNzFAbWFpbC5nbWFpbC5jb20+","inReplyToHeader":"PDlkYzc4ZDdiMDcxMjE5MTkzN3g1ZjkwMWJmZG0zMDE0YjgyNTgxZDAxMTdAbWFpbC5nbWFpbC5jb20+","referencesHeader":"PDlkYzc4ZDdiMDcxMjE5MTMyN3QxZDEyYTIxOG44ODQ1MjBkNGJmMGJmN2E4QG1haWwuZ21haWwuY29tPgkgPDUwMzdiNmU0MDcxMjE5MTcyNW4zODE5NWQ4MHA2ZWY1YTNkNmFiN2M0YzA5QG1haWwuZ21haWwuY29tPgkgPDlkYzc4ZDdiMDcxMjE5MTkzN3g1ZjkwMWJmZG0zMDE0YjgyNTgxZDAxMTdAbWFpbC5nbWFpbC5jb20+"},"prevInTopic":10028,"nextInTopic":10036,"prevInTime":10034,"nextInTime":10036,"topicId":10021,"numMessagesInTopic":7,"msgSnippet":"... I don t take it too seriously, but if I did, I wouldn t find it all that depressing.  We keep increasing capacity, we keep finding new ways to fill it up,","rawEmail":"Return-Path: &lt;assaf@...&gt;\r\nX-Sender: assaf@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 35436 invoked from network); 20 Dec 2007 09:14:19 -0000\r\nX-Received: from unknown (66.218.67.95)\n  by m42.grp.scd.yahoo.com with QMQP; 20 Dec 2007 09:14:19 -0000\r\nX-Received: from unknown (HELO fk-out-0910.google.com) (209.85.128.189)\n  by mta16.grp.scd.yahoo.com with SMTP; 20 Dec 2007 09:14:18 -0000\r\nX-Received: by fk-out-0910.google.com with SMTP id e30so3347152fke.15\n        for &lt;rest-discuss@yahoogroups.com&gt;; Thu, 20 Dec 2007 01:14:17 -0800 (PST)\r\nX-Received: by 10.86.81.8 with SMTP id e8mr9893650fgb.59.1198142056033;\n        Thu, 20 Dec 2007 01:14:16 -0800 (PST)\r\nX-Received: by 10.86.71.6 with HTTP; Thu, 20 Dec 2007 01:14:15 -0800 (PST)\r\nMessage-ID: &lt;5037b6e40712200114jef77312g1b6f2ee52531b371@...&gt;\r\nDate: Thu, 20 Dec 2007 01:14:15 -0800\r\nTo: &quot;Steve Loughran&quot; &lt;steve.loughran.soapbuilders@...&gt;\r\nCc: rest-discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nIn-Reply-To: &lt;9dc78d7b0712191937x5f901bfdm3014b82581d0117@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: 7bit\r\nContent-Disposition: inline\r\nReferences: &lt;9dc78d7b0712191327t1d12a218n884520d4bf0bf7a8@...&gt;\n\t &lt;5037b6e40712191725n38195d80p6ef5a3d6ab7c4c09@...&gt;\n\t &lt;9dc78d7b0712191937x5f901bfdm3014b82581d0117@...&gt;\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Assaf Arkin&quot; &lt;assaf@...&gt;\r\nSubject: Re: [rest-discuss] enterprise adoption of REST and amazon services\r\nX-Yahoo-Group-Post: member; u=319607554; y=iC4Fr_Ijh80NaHd3uVzEhBamrSBxD5-ivCJw2AQSF4s7FNWOsw\r\nX-Yahoo-Profile: assafarkin\r\n\r\nOn 12/19/07, Steve Loughran &lt;steve.loughran.soapbuilders@...&gt; wrote:\n&gt; On Dec 19, 2007 5:25 PM, Assaf Arkin &lt;assaf@...&gt; wrote:\n&gt; &gt;\n&gt; &gt; On 12/19/07, Steve Loughran &lt;steve.loughran.soapbuilders@...&gt; wrote:\n&gt;\n&gt; &gt; &gt;\n&gt; &gt; &gt; 2. WS-* is pretty deep  in the enterprise, especially as the glue\n&gt; &gt; &gt; between &quot;both&quot; platforms, Windows and Java. Hence Sun&#39;s investment in\n&gt; &gt; &gt; better WS-* interop. In in-house, single vendor systems, WS-* can be\n&gt; &gt; &gt; made to work over space -but not necessarily time. Again, with a\n&gt; &gt; &gt; decent deployment infrastructure when you can roll out code everywhere\n&gt; &gt; &gt; simultaneously, then you can stay in control.\n&gt; &gt; &gt;\n&gt; &gt; &gt; The WS-* tooling has set up enterprise developers with certain expectations\n&gt; &gt; &gt;  -you dont need to know WSDL or XSD\n&gt; &gt; &gt;  -you dont need to work with raw XML\n&gt; &gt; &gt;  -you can take the WSDL and have the client code generated for you\n&gt; &gt; &gt; There&#39;s probably also the implicit expectation that remote services\n&gt; &gt; &gt; look like synchronous remote method calls.\n&gt; &gt; &gt;\n&gt; &gt; &gt; As we on this list know, it is these assumptions that lead to so many\n&gt; &gt; &gt; problems -machine generated classes that can&#39;t handle changes in the\n&gt; &gt; &gt; XML, blocking rpc operations that cant handle failures, etc. But out\n&gt; &gt; &gt; there in the field, the stuff does work on a single version of an app,\n&gt; &gt; &gt; using the same toolkit at both ends, so people can easily roll out\n&gt; &gt; &gt; something big -because the computing world (esp. MS and IBM) say Ws-*\n&gt; &gt; &gt; is good. Its only later that they discover problems with\n&gt; &gt; &gt;  -attempts to connect new clients\n&gt; &gt; &gt;  -attempts to change the interface\n&gt; &gt; &gt; Failures at these point may be blamed on the new clients or their\n&gt; &gt; &gt; tooling, rather than fundamental flaws in the whole development\n&gt; &gt; &gt; methology of WS-* applications.\n&gt; &gt;\n&gt; &gt; I remember being told eight years ago that developers, already grown\n&gt; &gt; accustomed to the tooling and code generation, would see little value\n&gt; &gt; migrating from the comforts of CORBA to the theoretically more\n&gt; &gt; interesting, but practically immature, SOAP.  Back when SOAP was\n&gt; &gt; rolling your own code to handle the ever so unfriendly DOM.\n&gt; &gt;\n&gt; &gt; So taking those eight years and projecting them into the future, my guess is:\n&gt; &gt;\n&gt; &gt; 1.  Tools around REST will evolve to a similar level of comfort\n&gt; &gt; developers are accustomed to (as they always did).\n&gt; &gt; 2.  And will generate inflexible code that will require rolling out\n&gt; &gt; changes everywhere simultaneously (as they always did).\n&gt; &gt; 3.  Which will be blamed on the tooling, not the methodology (as we always did).\n&gt; &gt;\n&gt; &gt; Why the endless cycle?  Because at each generation you are reducing\n&gt; &gt; the complexity involved in solving existing problems, liberating you\n&gt; &gt; to take on more challenging problems, bringing you back to the same\n&gt; &gt; level of complexity.  Equilibrium, it seems, is the state when you&#39;re\n&gt; &gt; no longer able to deliver more features at standard industry costs.\n&gt; &gt;\n&gt; &gt; CEO frustration reigns, CTOs go reading InfoWorld for new answers,\n&gt; &gt; hype happens and a new cycle emerges.  As it always does.\n&gt; &gt;\n&gt; &gt; What really changes in each generation is the size of the solution.\n&gt; &gt; If you remember back in CORBA days, two machines was considered a\n&gt; &gt; challenging distributed networking problem.  Then we moved to server\n&gt; &gt; farms (more like cabinets) and grids, and now we&#39;re looking towards\n&gt; &gt; the clouds.\n&gt;\n&gt; I think that&#39;s a pretty bleak assessment.\n\nI don&#39;t take it too seriously, but if I did, I wouldn&#39;t find it all\nthat depressing.  We keep increasing capacity, we keep finding new\nways to fill it up, and in doing so keep creating value for people\naround us.  In my experience wide adoption of technologies is never\nabout the technology but the business economics around it.\n\n&gt; I have a different theory,\n&gt; which is that every language is used as the prototype for its\n&gt; successors.\n\nMetaphorically I would agree: lessons learned from one generation are\napplied to the next one -- hopefully we do learn from the mistakes of\nthe past.\n\nBut if we are making any predictions, I would consider the\ncontinuation from C/C++ to Java/C# anecdotal evidence and not draw any\nconclusions from it.  For one, I think it suffers from selection bias.\n It&#39;s natural for people who hold the purity of languages in high\nregard to dismiss dBase, TurboPascal, VB, PowerBuilder et al and\nimagine a world where C was far more dominant.\n\nFor another, it predicts that our choices moving forward are limited\nto young languages, like Scala and Groovy.  Other languages getting\nthe mindshare these days, like Ruby, Python, JavaScript, Erlang and\nHaskell are far too old to be an evolution of the existing incumbent.\n\nLikewise, progressing from SOAP would require a radical new\ntechnology, precluding REST which dates to the same time frame,\ndescribing an architecture that predates SOAP, and in fact led to the\ncreation of SOAP.\n\nSometimes the landscape changes to give rise to old technologies.\n\nAssaf\n\n&gt;\n&gt; CORBA and COM were written in the C era; they evolved to become\n&gt; actually usable in C++ code. Their model of IDL-&gt;.h/.cpp stubs worked\n&gt; very well with the superbly static world view of C/C++. Java and C#\n&gt; adopted a more agile form of communications with RMI and .NET\n&gt; remoting, both of which exploit the introspection features of the\n&gt; languages to eliminate some of the workflow stages of COM/Corba. SOAP\n&gt; took some of the ideas of this RPC/distributed object world view, and\n&gt; tried to make it cross platform by using XML as the transport. SOAP0.9\n&gt; section 5 encoding was clearly designed to marshall object graphs over\n&gt; the wire; SOAP1.0 and 1.1 adopted XSD to move to documents instead.\n&gt; But the inherent inflexibilties of the language prevent the tools\n&gt; being agile. If you want to move way from a DOM/XOM tree, you need to\n&gt; know what XML to expect -at compile time. .NET 3.0 and java7 are\n&gt; trying to handle XML with more agility, but they still dont like you\n&gt; adding new attributes/methods to existing classes. Whereas if I were\n&gt; to work with datastructures in a more dynamic language (scheme,\n&gt; prolog, javascript, etc). you can turn an arbitrary incoming text\n&gt; encoded datastructure straight into the type system of the platform\n&gt; (scheme lists, prolog clauses, javascript prototypes, ....).\n&gt;\n&gt; If we are going to have clients and servers that are less brittle than\n&gt; their previous generations, and yet which are still easy for people to\n&gt; code for, I think we need to move beyond java/C#. I&#39;m not going to\n&gt; advocate any specific language, just think its time to move on, at\n&gt; least from the aspect of the bits of code that deal with communication\n&gt; with other machines. Which, as it turns out, is a large slice of\n&gt; modern applications.\n&gt;\n&gt; -steve\n&gt;\n\n"}}
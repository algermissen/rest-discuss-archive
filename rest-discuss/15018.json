{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"4jFBZc-yuhe4bAS2gw9-OX8sPoftkDcfQQRkZMZkBlxHusuEZSCuWISZ1Qa3wpE9YuciQs8h3aisT8GzpUBAUHxST_nVIg0Y74S4CU41jg","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Re: Thoughts about URLs for a REST driven website","postDate":"1268057416","msgId":15018,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMTAwMzA4MDcxMDE2LmY5Y2NhMGY2LmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","inReplyToHeader":"PGhuMmIxNStycXJoQGVHcm91cHMuY29tPg==","referencesHeader":"PDIwMTAwMzA4MDAxODU3LjE5OTVlNmYyLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPGhuMmIxNStycXJoQGVHcm91cHMuY29tPg=="},"prevInTopic":15016,"nextInTopic":15019,"prevInTime":15017,"nextInTime":15019,"topicId":14978,"numMessagesInTopic":41,"msgSnippet":"... Whenever I come across the notion of Roy s REST I can t help but wonder, what other REST is there?  If you have to qualify your REST implementation as","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 57290 invoked from network); 8 Mar 2010 14:11:28 -0000\r\nX-Received: from unknown (66.196.94.105)\n  by m13.grp.re1.yahoo.com with QMQP; 8 Mar 2010 14:11:28 -0000\r\nX-Received: from unknown (HELO mxout-08.mxes.net) (216.86.168.183)\n  by mta1.grp.re1.yahoo.com with SMTP; 8 Mar 2010 14:11:27 -0000\r\nX-Received: from bigbison (unknown [65.117.211.162])\n\t(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))\n\t(No client certificate requested)\n\tby smtp.mxes.net (Postfix) with ESMTPSA id B37A1509DB;\n\tMon,  8 Mar 2010 09:10:22 -0500 (EST)\r\nDate: Mon, 8 Mar 2010 07:10:16 -0700\r\nTo: &quot;Jorn Wildt&quot; &lt;jw@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nMessage-Id: &lt;20100308071016.f9cca0f6.eric@...&gt;\r\nIn-Reply-To: &lt;hn2b15+rqrh@...&gt;\r\nReferences: &lt;20100308001857.1995e6f2.eric@...&gt;\n\t&lt;hn2b15+rqrh@...&gt;\r\nOrganization: Bison Systems Corporation\r\nX-Mailer: Sylpheed 3.0.0 (GTK+ 2.10.14; i686-pc-mingw32)\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=US-ASCII\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nSubject: Re: [rest-discuss] Re: Thoughts about URLs for a REST driven\n website\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\n&quot;Jorn Wildt&quot; wrote:\n&gt;\n&gt; Okay, so knowing the back-end URL format in the front-end is not\n&gt; unRESTful. Fine, I&#39;ll accept that it is not strickly unRESTful\n&gt; according to Roy&#39;s constraints.\n&gt;\n\nWhenever I come across the notion of &quot;Roy&#39;s REST&quot; I can&#39;t help but\nwonder, what other REST is there?  If you have to qualify your REST\nimplementation as based on something other than Roy&#39;s constraints, then\nyou probably don&#39;t have REST.  ;-)\n\n&gt;\n&gt; It&#39;s just that it is brittle and, as\n&gt; you say yourself, requires re-configuration of the front-end when the\n&gt; back-end changes. It simply anoys me: no one have ever told me to\n&gt; reconfigure my browser in order to lookup an ordernumber at Amazon,\n&gt; just because they changed their internal implementation and URL\n&gt; structure.\n&gt; \n\nI said reconfigure the frontend, not reconfigure the client, though.\nThe interaction between charger and wiski.org is hidden from the client,\nwhich is requesting ISO date-string translation from charger.  The\nwiski.org backend can change completely without affecting user-agent\ninteraction with the frontend.  The frontend simply needs a new mapping\nto the backend, this has no effect on the client (unless you&#39;ve embedded\nthe backend URI in the request to the frontend).\n\n&gt; \n&gt; So neither solutions are perfect. What can we do instead?\n&gt; \n\nI don&#39;t see any imperfection there.  I&#39;ll humor you, though, and point\nout that I could write the /date service proxy on charger to use an\nactual URI template from wiski.org.  I could then change the URI\nallocation scheme on wiski.org, update its URI template, and the /date\nservice proxy on charger would automatically use the new URI allocation.\n\nYou could do this, if you didn&#39;t mind adding complexity to support an\noptimization.  I&#39;m just trying to get the point across, that if you do\nso you shouldn&#39;t point to it and say, &quot;REST made me do it,&quot; because this\nnotion is really neither here nor there as far as REST is concerned.\n\nAs with any REST development, I can&#39;t stress enough that you should only\napply those REST constraints that bring about a benefit to your project,\nwhile leaving room to add constraints in the future, as the system\nscales to a point where they make sense in terms of cost-benefit.  This\napplies also, to any additional constraints you may wish to add.\n\nSo the question would be, in my case, what benefit would I achieve by\nbasing the system on a dynamic URI template instead of hard-coding?\nThe answer, even where REST constraints are involved, must make\npragmatic sense to me -- the answer never comes down to REST dogma,\nonly quantifiable benefits to the system.  I see none, in fact I see\ngreater maintenance costs, so I&#39;ll let the hard-coding stand.\n\nYour concerns are valid for clients interacting with frontends, but\nthey don&#39;t extend to the communication between layers in a system.  The\nwiski.org /date service and charger&#39;s /date proxy are both RESTful, even\nif the communication between charger and wiski.org isn&#39;t hypertext\ndriven -- the API is, taken as a whole, as are its constituent parts.\n\nI&#39;m perhaps overly-wordy in my explanation, it&#39;s just difficult for me\nto explain REST nuances to others, which come naturally to me for some\nreason... perhaps because I read Roy&#39;s thesis through twice each year,\nand refer to it regularly when engaged in REST development.\n\n&gt;\n&gt; &gt; The wiski.org\n&gt; &gt; /date service will eventually have an Xforms interface to describe\n&gt; &gt; the API -- a URI template won&#39;t do, because the number of days in\n&gt; &gt; February is algorithmic.  But, that doesn&#39;t mean a client of the\n&gt; &gt; API is required to be an Xforms client, or otherwise consume that\n&gt; &gt; form.\n&gt; \n&gt; Yes. Publishing search forms in the back-end solves most of the\n&gt; problems. Now my back-end has a way to instruct the front-end how to\n&gt; fetch the ATOM resource referenced externally by the simple string\n&gt; &quot;peter&quot;. \n&gt; \n\nNuance, again.  Your back-end has a hypertext REST API which may be used\nto instruct generic user-agents how to interact with it, as well as to\nprovide a self-documenting API which may be referenced by anyone\ndeveloping a client specific to your API.  A client, i.e. the frontend,\ndoesn&#39;t actually have to consume the hypertext -- all REST says is that\nthe API must provide it.\n\nThese are component implementation details, hidden behind the generic\ninterface, and are thus out-of-scope to REST.  If you insist on applying\nsome sort of constraint to component implementation, you can, but it\nisn&#39;t a REST constraint.  So, just as with any REST constraint, you&#39;ll\nneed to evaluate its pros and cons -- except you can&#39;t do that by\nreferring to REST since this constraint isn&#39;t in there.\n\n&gt; \n&gt; The same can be done programmatically in the front-end if just the\n&gt; back-end has a machine-readable search form. This adds my required\n&gt; flexibility at the cost of a bit more code in the front-end.\n&gt; \n\nIf this is a real requirement of your system, fine.  If you&#39;re doing\nthis to &quot;score REST points&quot;, don&#39;t -- there are none to be had.\n\n&gt; \n&gt; So what I am missing now is a standard format for publishing &quot;these\n&gt; are the ways you should access items using the REST API&quot; - in a way\n&gt; that can be parsed at runtime.\n&gt; \n\nI don&#39;t understand.  Hypertext is the engine of application state.  I\nrefer you again to my demo site.  All XHTML representations link to one\nXSLT transformation.  That XSLT transformation instructs the client, at\nruntime, how and when to dereference the /date service -- when it\nencounters a unique-to-page ISO 8601 date string, the XSLT code calls\nthis template:\n\n&lt;xsl:template name=&#39;date-service&#39;&gt;\n &lt;xsl:param name=&#39;iso-date&#39;/&gt;\n &lt;xsl:param name=&#39;date&#39; select=&quot;document(concat(&#39;../../date?iso=&#39;,$iso-date))//xht:p&quot;/&gt;\n &lt;xsl:value-of select=&quot;concat($date/xht:abbr[1]/@title,&#39;, &#39;)&quot;/&gt;\n &lt;xsl:value-of select=&quot;concat($date/xht:abbr[2]/@title,&#39; &#39;)&quot;/&gt;\n &lt;xsl:value-of select=&quot;concat($date/xht:abbr[3],&#39; &#39;)&quot;/&gt;\n &lt;xsl:value-of select=&#39;$date/xht:span&#39;/&gt;\n&lt;/xsl:template&gt;\n\nI don&#39;t know what a &quot;standard format&quot; would be, all I know is that\nthere are many standard hypertext formats which may be employed to\ninstruct clients how to use a REST API.  This is but one example, using\nstandard media types -- charger sends some hypertext (XSLT in this \ncase) which describes the use of a simple REST Web service, to replace\none string with another of a specific format.\n\n&gt; \n&gt; 1) The official &quot;here can you find the specs&quot; kind of REST &quot;sitemap&quot;.\n&gt; \n\nThis is exactly the opposite of what Roy means by, &quot;A REST API should be\nentered with no prior knowledge beyond the initial URI.&quot;  If, given a\nURI for some resource in a system, I must consult some other &quot;sitemap&quot;\nresource before I can request another URI in the system, then the API\nis being driven by out-of-band knowledge, not hypertext.\n\nWhile my /date service currently lacks rel=&#39;up&#39;, that will eventually \nlink all representations to the service document, i.e. an Xforms \ninterface.  For now, though, regardless of entry point, any client that\ngroks rel=&#39;next&#39; and rel=&#39;prev&#39; as Link headers can traverse the entire \nservice output.  IOW, the entire service is accessible through each and \nevery URI, this doesn&#39;t mean each and every URI needs a &lt;form&gt; of some \nsort.  HTH.\n\n-Eric\n\n"}}
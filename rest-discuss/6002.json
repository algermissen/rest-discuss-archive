{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":198693287,"authorName":"Bill Venners","from":"Bill Venners &lt;bv-svp@...&gt;","profile":"billvenners","replyTo":"SENDER","senderId":"YfK9mQOubQffxwCZxvp8SOdt-ewoJkXTDAN03suRN_znXvKPle47ESBJEVdTm-hykOk_E8Usk4_XJFV8dSX_TPZX5WPYWgM","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Re: Meaning of stateless","postDate":"1145416553","msgId":6002,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEUzNkNDOTMwLTgyNkItNEJCQS04QzM4LUNBNzRDRENEMDQyRUBhcnRpbWEuY29tPg==","inReplyToHeader":"PDQ0NDU4REIyLjcwNzAwMDNAamo1Lm5ldD4=","referencesHeader":"PDQ0M0ZGMzFDLjgwMDAxMDlAdmVpY29uLmNvbT4JIDwzNDNlY2IzZTA2MDQxNDEyMzBnNDFjMTMyMWNuYjJhOTM2Y2NiZjUzZGM3ZEBtYWlsLmdtYWlsLmNvbT4gPDExNDUwOTU4OTMuNjk4OC4yNi5jYW1lbEBsb2NhbGhvc3QubG9jYWxkb21haW4+IDw0NDQ0NkNGMC45MDEwMzA4QGpqNS5uZXQ+IDw0RjhGRTQyNi01NEFFLTQ4REQtQUJEMC1FRjU0MzBFNTdBMEFAYXJ0aW1hLmNvbT4gPDQ0NDU4REIyLjcwNzAwMDNAamo1Lm5ldD4="},"prevInTopic":6001,"nextInTopic":6003,"prevInTime":6001,"nextInTime":6003,"topicId":5949,"numMessagesInTopic":44,"msgSnippet":"Hi John, Thanks for the lively response. I ll insert a few comments: ... I m not quite sure I follow all of this, but one thing I would change is the last one.","rawEmail":"Return-Path: &lt;bv-svp@...&gt;\r\nX-Sender: bv-svp@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 4635 invoked from network); 19 Apr 2006 03:15:17 -0000\r\nReceived: from unknown (66.218.66.172)\n  by m26.grp.scd.yahoo.com with QMQP; 19 Apr 2006 03:15:17 -0000\r\nReceived: from unknown (HELO artima2.inetu.net) (209.235.240.43)\n  by mta4.grp.scd.yahoo.com with SMTP; 19 Apr 2006 03:15:16 -0000\r\nReceived: (qmail 13978 invoked by uid 89); 19 Apr 2006 03:15:21 -0000\r\nReceived: from unknown (HELO ?192.168.251.21?) (67.102.66.234)\n  by artima2.inetu.net with SMTP; 19 Apr 2006 03:15:21 -0000\r\nIn-Reply-To: &lt;44458DB2.7070003@...&gt;\r\nReferences: &lt;443FF31C.8000109@...&gt;\t &lt;343ecb3e0604141230g41c1321cnb2a936ccbf53dc7d@...&gt; &lt;1145095893.6988.26.camel@...&gt; &lt;44446CF0.9010308@...&gt; &lt;4F8FE426-54AE-48DD-ABD0-EF5430E57A0A@...&gt; &lt;44458DB2.7070003@...&gt;\r\nMime-Version: 1.0 (Apple Message framework v746.3)\r\nContent-Type: text/plain; charset=US-ASCII; delsp=yes; format=flowed\r\nMessage-Id: &lt;E36CC930-826B-4BBA-8C38-CA74CDCD042E@...&gt;\r\nCc: REST Discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Transfer-Encoding: 7bit\r\nDate: Tue, 18 Apr 2006 20:15:53 -0700\r\nTo: John Elliot &lt;jj5@...&gt;\r\nX-Mailer: Apple Mail (2.746.3)\r\nX-eGroups-Msg-Info: 1:12:0:0\r\nFrom: Bill Venners &lt;bv-svp@...&gt;\r\nSubject: Re: [rest-discuss] Re: Meaning of stateless\r\nX-Yahoo-Group-Post: member; u=198693287; y=Wn8D_MYUrFzqIhzUxWPyWqzaE13GdipQl3EOaoDivM8qwzf-6hU\r\nX-Yahoo-Profile: billvenners\r\n\r\nHi John,\n\nThanks for the lively response. I&#39;ll insert a few comments:\n\nOn Apr 18, 2006, at 6:09 PM, John Elliot wrote:\n\n&gt; Hi Bill,\n&gt;\n&gt; Bill Venners wrote:\n&gt;&gt; Another way to do the anonymous shopping cart is to give it a unique\n&gt;&gt; URI.\n&gt;\n&gt; If you think long and hard about this you&#39;ll realise that you&#39;re\n&gt; effectively storing a session key (or some aspect of the session)  \n&gt; in the\n&gt; URI. That&#39;s not cool. It&#39;s a failing of REST, and in my view a HTTP\n&gt; anti-pattern.\n&gt;\n&gt; Instead of a nice clean\n&gt;\n&gt;    { &#39;subject&#39; &#39;verb&#39; &#39;object&#39; }\n&gt;\n&gt; you&#39;ve basically said\n&gt;\n&gt;    { &#39;blah blah&#39; &#39;verb&#39; &#39;message&#39; }\n&gt;\n&gt; I.e. I say you want,\n&gt;\n&gt;    { &#39;Session 42&#39; GETs &#39;checkout facility&#39; }\n&gt;\n&gt; You say,\n&gt;\n&gt;    { &#39;Some IP address&#39; GETs &#39;checkout facility for shopping basket  \n&gt; 12&#39; }\n&gt;\nI&#39;m not quite sure I follow all of this, but one thing I would change  \nis the last one. I wouldn&#39;t say shopping basket 12, but shopping  \nbasket *snapshot* 12. The shopping basket is something the user  \nthinks in terms of. She is adding items to that conceptual basket.  \nBut on the server, there is not one basket. There is one snapshot of  \nher conceptual basket for each time she changed it. Plus it wouldn&#39;t  \nbe numbered 12, but some opaque ID such as F4Dmc983xRR12. The URI  \ncould be something like:\n\nhttp://shop.artima.com/basket?z= F4Dmc983xRR12\n\nThat&#39;s a completely different resource from:\n\nhttp://shop.artima.com/basket\n\nWhich is an empty shopping basket snapshot.\n\n&gt;&gt; To me the biggest lesson I learned from reading about REST is that I\n&gt;&gt; don&#39;t need session state with HTTP. I can model everything as   \n&gt;&gt; resources\n&gt;&gt; with unique URIs, some of which require authentication and\n&gt;&gt; authorization.\n&gt;\n&gt; I don&#39;t believe you. I believe you are mistaken. These URIs you  \n&gt; refer to\n&gt; are nothing more than session tokens in a format which happens to be\n&gt; compatible with URI format. To the extent that they aren&#39;t strictly\n&gt; &#39;session tokens&#39;, they are *worse* than &#39;session tokens&#39; because they\n&gt; stand as a key to server-side state which could have been indicated  \n&gt; by a\n&gt; single session key. All you&#39;ve done is &#39;denormalise&#39;. I.e. instead of\n&gt; saying &quot;session 42&quot;, you say &quot;shopping basket 23, user 37&quot;. Then  \n&gt; you put\n&gt; that session state in the URL, which breaks &#39;subject&#39; and &#39;object&#39;\n&gt; separation. This ruins the URL as the &#39;object&#39; of the request.\n&gt;\nNot if the object of the request is a shopping basket snapshot. Then  \nthe URI is exactly referencing that. Like I said previously, in this  \nway of thinking, there is no shopping basket on the server. There are  \nseveral snapshots of state that our shopper has created via POSTs as  \nshe has added, say books, to her shopping basket. When she adds an  \nitem to the shopping cart, she gets redirected to a new snapshot, the  \nlatest and greatest. She can back up and click reload, and she&#39;ll go  \nback to a previous snapshot.\n\nI used to think in terms of user sessions on the server, as you are  \ndescribing, and as all web frameworks I&#39;ve seen encourage. I feel the  \nmain way that reading about REST helped me is in gaining insight into  \nHTTP. It is a stateless protocol, as you I think explained well in a  \nprevious email:\n\n&#39;Stateless&#39; in terms of REST simply means that there is no &#39;sequencing&#39;\nof messages at the transfer protocol layer. That is, each transfer\nrequest stands alone and is itself capable of delineating the entire\ncontext in which a server will conduct processing of the request. It\nmeans that a server which supports the transfer protocol doesn&#39;t need to\nkeep track of the sequence of messages at that layer.\n\nWhen you talk about user session, I feel like you are trying to push  \nstatefullness on the stateless protocol in the traditional way that  \nmost web apps have done. You suggest that my opaque ID tokens for the  \nshopping cart session snapshots are &quot;nothing more than session  \ntokens,&quot; though worse because, &quot;they stand as a key to server-side  \nstate which could have been indicated by a single session key.&quot; My  \npoint, which I think you may understand but just don&#39;t agree with, is  \nthat you can avoid entirely the concept of a user session on the  \nserver side by considering each piece of state resulting from a  \nconversation over HTTP with a user as a resource. If you do so, then  \nyou aren&#39;t layering any statefulness on top of HTTP--each request  \nreally is completely independent of the other. Authentication and  \nauthorization is something that has to happen all over again each  \nrequest, because the server doesn&#39;t need to remember any notion of a  \nuser session.\n\n&gt;&gt; If a user has landed on one of  our\n&gt;&gt; sites after searching for &quot;rest relaxation,&quot; I want to highlight   \n&gt;&gt; those\n&gt;&gt; terms in the page. So I need to look at the referrer header.\n&gt;\n&gt; Bad idea. Redirect them to a new resource which indicates which  \n&gt; words to\n&gt; highlight. I firmly believe that if you return a representation (as\n&gt; opposed to a 300 class response) to a GET request then the URL should\n&gt; stand as the complete and explicit &#39;object&#39; of the request.\n&gt;\nThat&#39;s funny. About two weeks ago perhaps I mentioned I was thinking  \nabout doing just that, and someone on this list suggested I do it  \nwith JavaScript. The reason I&#39;m leaning in the JavaScript direction  \nnow is that search keyword highlighting isn&#39;t an aspect of a page  \nthat I care for users to be able to share. The only way to get it is  \nto actually come in from a search engine. If you grab the URI and  \nsend it to your friend, and they click on it, they won&#39;t get the  \nsyntax highlighting. In that case, I think the syntax highlighting  \nwould be confusing. If I&#39;m able to use JavaScript, then it will only  \nwork if JavaScript is enabled on the client. It is not important  \nenough to usability that I&#39;m willing to accept that. But I&#39;ll send  \nthe same JavaScript to everyone, so I don&#39;t need any extra  \nrepresentations to do it, which helps me cache effectively.\n\n&gt; In case you or others haven&#39;t picked up on it (because I didn&#39;t\n&gt; explicitly say so as yet), I&#39;m using the term &#39;subject&#39; and  \n&gt; &#39;object&#39; in\n&gt; a grammatical sense.\n&gt;\nI hadn&#39;t gotten that. I was thinking of subject in the authorization  \nsense, but now that you mention it, perhaps that&#39;s why *they* call it  \nsubject.\n\n&gt;&gt; If  they\n&gt;&gt; indicate via their accept language headers that they speak   \n&gt;&gt; French, and\n&gt;&gt; they&#39;ve requested an English version of an article for  which I  \n&gt;&gt; have a\n&gt;&gt; French translation, I want to add in a prominent link  to the French\n&gt;&gt; version into the English page I send back.\n&gt;\n&gt; Again, bad idea. Instead send a 300 class response to a new URL which\n&gt; indicates this is what should happen. E.g.,\n&gt;\n&gt;    /en/resource.html -&gt; /en/resource.html?opt-lang=fr\n&gt;\n&gt; In every case where you&#39;ve varied the semantics of the response  \n&gt; based on\n&gt; HTTP headers you&#39;ve undermined the URL as the description of the\n&gt; &#39;resource&#39; being requested.\n&gt;\nThe URI isn&#39;t the only thing in the request, and I think everything  \nin the request should be considered fair game in considering how to  \nrespond. The URI is the part that&#39;s sharable, so I want to have a  \nunique URI for each resource I want people to be able to share among  \neach other. I don&#39;t care that users can share the prominent link to a  \ntranslation, because that only makes sense for the user that actually  \nindicates in their request headers that they like French content.\n\n&gt; That is, the &#39;resource&#39; which highlights the terms &quot;rest  \n&gt; relaxation&quot; is\n&gt; a different resource to one which doesn&#39;t. The &#39;resource&#39; which  \n&gt; includes\n&gt; a link to a French translation is a different resource to one which\n&gt; doesn&#39;t. The URI is the place to describe a resource, not HTTP  \n&gt; headers.\n&gt;\nI agree with everything except that by using the same URI for all  \nthese things, I&#39;m declaring as the designer that they are all the  \nsame resource. If I use JavaScript, then they are all the same  \nrepresentation of the resource. If I make a different ETag for each,  \nand send all this stuff from the server, then each unique one is a  \ndifferent representation of that one resource. As the designer, I can  \nchop my state up into URI-addressable resources any way I want, and  \neach resulting URI by definition maps to a resource.\n\n&gt;&gt;&gt; The only thing I&#39;m trying to point out here is that &#39;session id&#39;   \n&gt;&gt;&gt; should\n&gt;&gt;&gt; not be in the URL, but it needs to be there. It should be a   \n&gt;&gt;&gt; transparent\n&gt;&gt;&gt; part of the universal uniform interface, and it should be able  \n&gt;&gt;&gt; to  stand\n&gt;&gt;&gt; as the &#39;subject&#39; of a request.\n&gt;&gt;&gt;\n&gt;&gt;&gt; If this happens, then we can move toward using the &#39;subject&#39;  \n&gt;&gt;&gt; *and* the\n&gt;&gt;&gt; &#39;object&#39; of the request to key a cache of what are otherwise\n&gt;&gt;&gt; non-cacheable responses to HTTP GET.\n&gt;&gt;&gt;\n&gt;&gt; The reason it isn&#39;t desirable is both because  many\n&gt;&gt; sessions can share the same representations, and because I may   \n&gt;&gt; want to\n&gt;&gt; send multiple representations for the same URI and subject  based on\n&gt;&gt; other information in the request (such as referrer or accept-  \n&gt;&gt; language).\n&gt;\n&gt; OK, I accept your first point, but I think the second part about  \n&gt; varying\n&gt; content based on HTTP headers remains a bad idea in my view.\n&gt;\nWell, it&#39;s content negotiation. I don&#39;t want to do a lot of it, but  \nwhere it improves usability I think it&#39;s fine to use.\n\n&gt;&gt; I&#39;m going to try to take the same kind of JavaScript approach with\n&gt;&gt; search keyword highlighting and links to translations, but I may just\n&gt;&gt; send those variations as representations from the server if   \n&gt;&gt; JavaScript\n&gt;&gt; turns out to be problematic for those use cases. One  attitude I&#39;ve\n&gt;&gt; heard on this list is that if it isn&#39;t cacheable it  isn&#39;t  \n&gt;&gt; scalable. To\n&gt;&gt; me, caching is one tool in the scalability  toolbox, but not the only\n&gt;&gt; one. Another example is using URL-rewriting  if cookies aren&#39;t  \n&gt;&gt; enabled\n&gt;&gt; on the client. Yes, this doesn&#39;t make as  effective use of caching as\n&gt;&gt; cookies or even HTTP auth could, but if  it allows 5% more users  \n&gt;&gt; to use\n&gt;&gt; the site effectively, then it is  useful. Maybe because of the less\n&gt;&gt; effective caching on that 5% you  need to add one more node to your\n&gt;&gt; server cluster.\n&gt;\n&gt; I value the &#39;purity&#39; of a URL too highly to consider stashing a  \n&gt; session\n&gt; key (or other session state) in it.\n&gt;\nI hate those ugly URLs too, but 5% means 5% more happy users, 5% more  \nparticipation, 5% more purchases. I value that more.\n\n&gt; However, I don&#39;t think this caching feature bears too heavily on  \n&gt; where I\n&gt; was going, which was to present the case for the need of &#39;subject&#39; as\n&gt; separate from &#39;object&#39; in a HTTP request. Cookies are all we&#39;ve got  \n&gt; for\n&gt; this, and there&#39;s negative energy applied to their use. If the  \n&gt; advice is\n&gt; &quot;don&#39;t use cookies&quot;, then what&#39;s going to happen (as it is unavoidable\n&gt; for many applications to require a &#39;session token&#39;) is that either\n&gt; people are going to start doing crazy things with HTTP headers, or\n&gt; putting session state in URLs. Either of those two outcomes are far\n&gt; worse than using cookies, they will lead to a very broken web.\n&gt;\nI would say that the subject is not the session, it is the user. Each  \nrequest the user must authenticate, and then they become the subject.  \nHTTP does attempt to support this view with HTTP authentication. I  \nbelieve it can also be supported via cookies or URL-rewriting, if you  \njust use that &quot;session ID&quot; as an authentication token and nothing more.\n\nThanks.\n\nBill\n----\nBill Venners\nEditor-in-Chief\nArtima Developer\nhttp://www.artima.com\n\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":11652427,"authorName":"Peter Keane","from":"Peter Keane &lt;pkeane@...&gt;","profile":"pkeane_littlehat","replyTo":"SENDER","senderId":"pd2ZYyuWWJo8q_HuaT7IkYEujYPJVi0_2Y6XRjCi49MZr9y0wJMnb1r7GLUqIj4Jz4cCoWIEZquJtPdNWJ8nA6av7HQ8JXGZ0zDL","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Re: RESTful batch transactions a red herring.","postDate":"1237409045","msgId":12231,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDgxNThhZDc1MDkwMzE4MTM0NGczNzdkYzczM2lhNzdkNmMyYjdlMDQwNjk2QG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PGdwcjk4citoYmk2QGVHcm91cHMuY29tPg==","referencesHeader":"PDIwMDkwMzEyMDUzNTUyLjMwM2M0YzE5LmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JIDxncHI5OHIraGJpNkBlR3JvdXBzLmNvbT4="},"prevInTopic":12228,"nextInTopic":12232,"prevInTime":12230,"nextInTime":12232,"topicId":12213,"numMessagesInTopic":15,"msgSnippet":"... I could be wrong, but I don t think conserving HTTP requests is one of the goals of REST.  Creating evolvable, rational, loosely-coupled interactions seems","rawEmail":"Return-Path: &lt;pjkeane@...&gt;\r\nX-Sender: pjkeane@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 25867 invoked from network); 18 Mar 2009 20:44:06 -0000\r\nX-Received: from unknown (69.147.108.202)\n  by m2.grp.re1.yahoo.com with QMQP; 18 Mar 2009 20:44:06 -0000\r\nX-Received: from unknown (HELO wf-out-1314.google.com) (209.85.200.173)\n  by mta3.grp.re1.yahoo.com with SMTP; 18 Mar 2009 20:44:06 -0000\r\nX-Received: by wf-out-1314.google.com with SMTP id 28so241877wfc.26\n        for &lt;rest-discuss@yahoogroups.com&gt;; Wed, 18 Mar 2009 13:44:05 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.142.172.20 with SMTP id u20mr427356wfe.83.1237409045921; Wed, \n\t18 Mar 2009 13:44:05 -0700 (PDT)\r\nIn-Reply-To: &lt;gpr98r+hbi6@...&gt;\r\nReferences: &lt;20090312053552.303c4c19.eric@...&gt;\n\t &lt;gpr98r+hbi6@...&gt;\r\nDate: Wed, 18 Mar 2009 15:44:05 -0500\r\nX-Google-Sender-Auth: 25d2bfdc0b645001\r\nMessage-ID: &lt;8158ad750903181344g377dc733ia77d6c2b7e040696@...&gt;\r\nTo: scameron02 &lt;scott.cameron@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nContent-Type: text/plain; charset=UTF-8\r\nContent-Transfer-Encoding: quoted-printable\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Peter Keane &lt;pkeane@...&gt;\r\nSubject: Re: [rest-discuss] Re: RESTful batch transactions a red herring.\r\nX-Yahoo-Group-Post: member; u=11652427; y=Mcj1Ww8uYpiJ3WLPs0rvkZg-POd3Tez873sOw2B9PfqIfZ5tafRlfCn1uw\r\nX-Yahoo-Profile: pkeane_littlehat\r\n\r\nOn Wed, Mar 18, 2009 at 11:59 AM, scameron02 &lt;scott.cameron@...&gt; wrote:=\r\n\n&gt;\n&gt; --- In rest-discuss@yahoogroups.com, &quot;Eric J. Bowman&quot; &lt;eric@...&gt; wrote=\r\n:\n&gt;&gt;\n&gt;&gt; In the common case of the Web, DELETE traffic is a tiny fraction of=\r\n GET\n&gt;&gt; traffic. So it just doesn&#39;t _matter_ that some sort of client logic=\r\n\n&gt;&gt; like my HTML form can accomplish the same objective as discrete DELETE\n=\r\n&gt;&gt; requests in one round trip, in terms of bandwidth. Splitting hairs.\n&gt;&gt; S=\r\name with batch updates. The bandwidth conserved by caching GET\n&gt;&gt; traffic i=\r\ns an order of magnitude greater than that consumed by fringe\n&gt;&gt; cases where=\r\n bandwidth could be saved by batching multiple DELETE (or\n&gt;&gt; PUT or POST) r=\r\nequests. REST optimizes for GET, not batch processing.\n&gt;&gt;\n&gt;\n&gt; What about th=\r\ne (so far) less common cases outside the Web, such as\n&gt; Enterprise-level di=\r\nstributed applications?=C2=A0 There are certainly many\n&gt; examples in that d=\r\nomain where high-volume writing (create/update/delete) is\n&gt; a requirement a=\r\nnd efficiency is key (as is atomicity).\n&gt;\n&gt; Are you suggesting that as an a=\r\nrchitecture style in its &quot;pure&quot; form, REST is\n&gt; only appropriate for the co=\r\nmmon case of read-heavy Web applications?=C2=A0 This\n&gt; seems to sell the st=\r\nyle short.=C2=A0 Certainly, in its current form it does not\n&gt; directly addr=\r\ness some of the problems associated with write-intensive\n&gt; applications.=C2=\r\n=A0 But the fundamental constraints still hold value for these\n&gt; apps, and =\r\nso far I haven&#39;t seen any better alternative for building general\n&gt; purpose=\r\n distibuted systems.\n&gt;\n&gt; Is the style so set in stone that new applications=\r\n for it shouldn&#39;t be\n&gt; explored, even if it means looking at things from a =\r\nslightly unorthodox\n&gt; angle?=C2=A0 Who knows, maybe it turns out that it is=\r\n possible to solve some of\n&gt; these problem in a way that is at least consis=\r\ntent with the fundamental\n&gt; constraints of REST.=C2=A0 It seems to me that =\r\nthis forum is exactly the right\n&gt; place to explore that kind of thing.\n&gt;\n&gt; =\r\nCheers,\n&gt; scott\n&gt;\n\nI could be wrong, but I don&#39;t think conserving HTTP requ=\r\nests is one of\nthe goals of REST.  Creating evolvable, rational, loosely-co=\r\nupled\ninteractions seems to be more to the point.  I know that in a\nconvers=\r\nation on a mailing list about adding 10K documents to an Atom\nstore, Roy F.=\r\n said he&#39;d as likely use a bash script and CURL to do the\njob as anything. =\r\n That suggests to me the ability to decompose the\noperation at the client a=\r\ns a series of simple operations (CURL POST)\nas a &quot;goal.&quot;\n\nOne could reasona=\r\nbly extapolate to a server which accepts, as a POST,\na &quot;job request&quot; that l=\r\nists urls of resources needing to be moved from\none place to another. That =\r\njob server could now be the &quot;bash script\nand CURL&quot; of Roy&#39;s description.  W=\r\ne could make status requests of the\njob server to find out the state of thi=\r\nngs (what&#39;s been moved, what&#39;s\nfailed, what&#39;s left to be moved, etc.).  Wha=\r\nt REST has done for us\nhere is simply provided a rational, simple way to de=\r\ncompose the job\ninto RESTful &quot;tasks.&quot;   I&#39;d also mention that in REST there=\r\n is a\nclient and a server for any operation but a single component can, at\n=\r\nvarious times serve as one or the other.\n\n--peter keane\n\n\n\n&gt; \n\n"}}
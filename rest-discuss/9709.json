{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":272750603,"authorName":"Duncan Cragg","from":"&quot;Duncan Cragg&quot; &lt;rest-discuss@...&gt;","profile":"duncan_b_cragg","replyTo":"SENDER","senderId":"EIDCHddVeh7u_snpXxCv9NA1r14XGSGHM1HBkTQ3Jkgwl0ggsySEIkqNAJmf2KFZMTOLUSsY58H2Y75vGV7AM0E1GCRjQ7WtBBrThez_","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] advice sought re GET vs POST for RESTful search - URI opacity branch...","postDate":"1193745826","msgId":9709,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDViNWZlMTRhMDcxMDMwMDUwM3YxNjU5Y2ZmOWpmMDQ0MDdkYzNhMjVmNWNjQG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PGFscGluZS5MTlguMC45OTk5LjA3MTAyOTExNTgzMTAuMTUwOTJAaGFycG8ubGFpdHMudXRleGFzLmVkdT4=","referencesHeader":"PDViNWZlMTRhMDcxMDI5MDgzMWc3NTVlOWQ0MHM5ODE3NDJmMzVjNTcwNDZlQG1haWwuZ21haWwuY29tPgkgPGFscGluZS5MTlguMC45OTk5LjA3MTAyOTExNTgzMTAuMTUwOTJAaGFycG8ubGFpdHMudXRleGFzLmVkdT4="},"prevInTopic":9708,"nextInTopic":9718,"prevInTime":9708,"nextInTime":9710,"topicId":9706,"numMessagesInTopic":9,"msgSnippet":"... Yup, that s us. You should drop in...   [Mmmwwaaaaahhaaaahaaa!] ... I d like whoever thinks user-specific requests are a venial REST sin to explain why!","rawEmail":"Return-Path: &lt;atomic.rant.surfer@...&gt;\r\nX-Sender: atomic.rant.surfer@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 65813 invoked from network); 30 Oct 2007 12:03:48 -0000\r\nX-Received: from unknown (66.218.67.95)\n  by m43.grp.scd.yahoo.com with QMQP; 30 Oct 2007 12:03:48 -0000\r\nX-Received: from unknown (HELO nz-out-0506.google.com) (64.233.162.237)\n  by mta16.grp.scd.yahoo.com with SMTP; 30 Oct 2007 12:03:48 -0000\r\nX-Received: by nz-out-0506.google.com with SMTP id x3so1238715nzd\n        for &lt;rest-discuss@yahoogroups.com&gt;; Tue, 30 Oct 2007 05:03:47 -0700 (PDT)\r\nX-Received: by 10.114.13.1 with SMTP id 1mr1731433wam.1193745826702;\n        Tue, 30 Oct 2007 05:03:46 -0700 (PDT)\r\nX-Received: by 10.114.174.20 with HTTP; Tue, 30 Oct 2007 05:03:46 -0700 (PDT)\r\nMessage-ID: &lt;5b5fe14a0710300503v1659cff9jf04407dc3a25f5cc@...&gt;\r\nDate: Tue, 30 Oct 2007 12:03:46 +0000\r\nTo: rest-discuss@yahoogroups.com\r\nIn-Reply-To: &lt;alpine.LNX.0.9999.0710291158310.15092@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=UTF-8\r\nContent-Transfer-Encoding: 7bit\r\nContent-Disposition: inline\r\nReferences: &lt;5b5fe14a0710290831g755e9d40s981742f35c57046e@...&gt;\n\t &lt;alpine.LNX.0.9999.0710291158310.15092@...&gt;\r\nX-Google-Sender-Auth: 2acf9c222e1320e9\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Duncan Cragg&quot; &lt;rest-discuss@...&gt;\r\nSubject: Re: [rest-discuss] advice sought re GET vs POST for RESTful search - URI opacity branch...\r\nX-Yahoo-Group-Post: member; u=272750603; y=OnJDc86KacD3t3akeCK_dJMZOkqmKufp6m7tWKig9YqYGIl-NEg3NQo\r\nX-Yahoo-Profile: duncan_b_cragg\r\n\r\n&gt; &gt; This is also a great question for those of us in the sub-cult of\n&gt; &gt; RESTianism (! :-) who prefer opaque URIs where possible.  Of course,\n&gt; &gt; the answers you already got are totally correct, and you should follow\n&gt; &gt; their direction - if you don&#39;t want URI opacity. Why you may like URI\n&gt; &gt; opacity is a separate discussion, which I&#39;d be happy to address if\n&gt; &gt; you&#39;re interested. The approach below is simply suggested to round out\n&gt; &gt; the discussion...\n&gt;\n&gt; I have heard of this cult.  I am told they are responsible for the strange\n&gt; chants and incantations heard emanating from the back room at our regular\n&gt; REST ceremonies.  It&#39;s been said if you enter that room you will never\n&gt; return....\n\nYup, that&#39;s us. You should drop in...   [Mmmwwaaaaahhaaaahaaa!]\n\n\n&gt; &gt; The results here can either be tailored to this client in some way, or\n&gt; &gt; be a cache of this specific query for everyone to use.  Further, it\n&gt; &gt; may either be updated as the possible search results change, or stay\n&gt; &gt; as a constant, eternally-cacheable snapshot. Which of these can\n&gt; &gt; perhaps be set as an additional argument in the original POST query\n&gt; &gt; body. Of course, this resource can have suitable headers sent along\n&gt; &gt; with it, optimised to these particular dynamic and/or personalised\n&gt; &gt; characteristics. You may need to avoid nervous proxy-cache behaviour\n&gt; &gt; around query URIs by chunking up your results, after all, in chunks of\n&gt; &gt; 40 with their own URIs, or, again, in chunks of a size asked for in\n&gt; &gt; the original query.\n&gt;\n&gt; You may have answered another, related issue here that&#39;s been on my mind\n&gt; regarding personalization. The application now either: 1. retrieves any\n&gt; &quot;personalized&quot; data as a separate XMLHTTTPRequest call and updates the DOM\n&gt; with that info (OK, so I have a cookie that holds the current user&#39;s\n&gt; username that allows me to create a user-specific Ajax GET request -- a\n&gt; venial REST sin, I think...), or 2. the user&#39;s username is part of the URL\n&gt; iteslf and creates, essentially, a custom web application for this\n&gt; user since all URLs include the username (I use this for the\n&gt; administrative side where the user is &quot;logged in&quot; as an admin and re-use\n&gt; of the same queries is not as important as in the read-only view).\n\nI&#39;d like whoever thinks user-specific requests are a venial REST sin\nto explain why!  :-)  Whether triggered by an Auth or a Cookie header,\nyou are allowed to either Vary or redirect. You lose cacheability for\neveryone - what a surprise! It&#39;s just for one user!  The browser can\nstill cache it, of course.\n\nAuth/Cookie Variation amounts, in effect, to adding the user id to the\nURL anyway: your second option, modulo the fact that in the first\ncase, sharing the URI gives a different result (surprise!) and in the\nsecond case, they&#39;re not able to see it, or get redirected to their\nown resource anyway..\n\nThe sin is to personalise resources that needn&#39;t be - losing linking\nand cacheing opportunities.\n\n\n&gt; As you say, these should be POSTS (although I note that Aristotle\n&gt; suggested in his reply to your post that GET would be OK there, at least\n&gt; for search).\n\nI wouldn&#39;t say &#39;should&#39; (the other responses were quite valid,\nRESTfully). I prefer to POST queries, firstly because the opacity\ntenet of my bizarre cult means I can&#39;t have GETs on transparent\nqueries in the URI; plus it does fit better with the fact that you&#39;re\ntriggering the creation of a new resource and with the fact that what\nyou&#39;re asking for is more about /you/ than about the collection - the\ncollection&#39;s never seen that query URI before - &#39;you said it, not\nme!&#39;.\n\nFinally, and we&#39;re getting into the more pragmatic reasons for URI\nopacity, putting the query template into a POST body is more flexible\nand more standardisable: you can talk about content/MIME types instead\nof URI templates. URI templates feel more like tunneling a schema\nthrough a limited length, limited charset, single-line string. They\nactually feel like that (definitely non-REST) evil: tunnelled function\ncalls! It&#39;s a slippery slope..\n\n\n&gt; ..  I like the idea of keeping these as GET requests since\n&gt; that will in almost all cases be the result of clicking a link.\n\nAnything that supplies a link can supply the opaque one, especially if\nit&#39;s a link back to the same site. Other sites can do the query POST\nprior to building the page with the opaque link in it - either\nautomatically or manually.\n\n\nCheers!\n\nDuncan\n\n"}}
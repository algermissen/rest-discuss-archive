{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":537489571,"authorName":"Keith Hassen","from":"Keith Hassen &lt;keith.hassen@...&gt;","profile":"erewh0n","replyTo":"SENDER","senderId":"D7zgO2HWxEVrpJxscCxPjHH9aOa1hiSYbO3OijPP9C6HlDVdeADedqMWiNSTKqi-WR5VzOoVQt14Jcv5W4NJ72QGMjTdiGY7QxvQgQ","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] API versioning","postDate":"1357735032","msgId":19251,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEQxNTM5RjM4LTlBMzEtNDE1MC1CM0YxLUZCQkFFMEQ5MDYyNkBnbWFpbC5jb20+","inReplyToHeader":"PENBRjg5YkNBMk9XT1ZSRXRDRF9POW9INy16ODgxcG1kRVQ4cGdad2laLWtBODd6alJDUUBtYWlsLmdtYWlsLmNvbT4=","referencesHeader":"PGtjZm1jMCthb2lkQGVHcm91cHMuY29tPiA8MjAxMzAxMDcyMDM3MTkuNWJhM2ZkZDIuZXJpY0BiaXNvbnN5c3RlbXMubmV0PiA8OUQ5NDUyQjAtQ0I1Qi00QkY3LThGMTgtRTEwRjZCNUZBNEI1QGdtYWlsLmNvbT4gPDIwMTMwMTA3MjI1NzEzLjNiMWZmNThjLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4gPDhFRDAyRDhBLTQ0QjAtNEMwNi05MzE1LTI3QzgyMzFERkM4QUBnbWFpbC5jb20+IDxDQUY4OWJDQTJPV09WUkV0Q0RfTzlvSDctejg4MXBtZEVUOHBnWndpWi1rQTg3empSQ1FAbWFpbC5nbWFpbC5jb20+"},"prevInTopic":19250,"nextInTopic":19252,"prevInTime":19250,"nextInTime":19252,"topicId":19240,"numMessagesInTopic":13,"msgSnippet":"Yeah we definitely make the distinction between the internal representation and the representation exposed to clients.  The changes I m thinking about are","rawEmail":"Return-Path: &lt;keith.hassen@...&gt;\r\nX-Sender: keith.hassen@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 68892 invoked from network); 9 Jan 2013 12:37:15 -0000\r\nX-Received: from unknown (98.137.34.46)\n  by m10.grp.sp2.yahoo.com with QMQP; 9 Jan 2013 12:37:15 -0000\r\nX-Received: from unknown (HELO mail-ie0-f171.google.com) (209.85.223.171)\n  by mta3.grp.sp2.yahoo.com with SMTP; 9 Jan 2013 12:37:15 -0000\r\nX-Received: by mail-ie0-f171.google.com with SMTP id 17so1987772iea.30\n        for &lt;rest-discuss@yahoogroups.com&gt;; Wed, 09 Jan 2013 04:37:15 -0800 (PST)\r\nX-Received: by 10.50.95.135 with SMTP id dk7mr1399293igb.55.1357735034975;\n        Wed, 09 Jan 2013 04:37:14 -0800 (PST)\r\nReturn-Path: &lt;keith.hassen@...&gt;\r\nX-Received: from [10.99.0.3] ([24.246.52.18])\n        by mx.google.com with ESMTPS id hg2sm1914231igc.3.2013.01.09.04.37.13\n        (version=TLSv1 cipher=ECDHE-RSA-RC4-SHA bits=128/128);\n        Wed, 09 Jan 2013 04:37:14 -0800 (PST)\r\nMime-Version: 1.0 (Apple Message framework v1283)\r\nContent-Type: multipart/alternative; boundary=&quot;Apple-Mail=_F7D33910-6CA2-489E-91B9-F44A3B2DD158&quot;\r\nIn-Reply-To: &lt;CAF89bCA2OWOVREtCD_O9oH7-z881pmdET8pgZwiZ-kA87zjRCQ@...&gt;\r\nDate: Wed, 9 Jan 2013 07:37:12 -0500\r\nCc: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;,\n REST-Discuss Discussion Group &lt;rest-discuss@yahoogroups.com&gt;\r\nMessage-Id: &lt;D1539F38-9A31-4150-B3F1-FBBAE0D90626@...&gt;\r\nReferences: &lt;kcfmc0+aoid@...&gt; &lt;20130107203719.5ba3fdd2.eric@...&gt; &lt;9D9452B0-CB5B-4BF7-8F18-E10F6B5FA4B5@...&gt; &lt;20130107225713.3b1ff58c.eric@...&gt; &lt;8ED02D8A-44B0-4C06-9315-27C8231DFC8A@...&gt; &lt;CAF89bCA2OWOVREtCD_O9oH7-z881pmdET8pgZwiZ-kA87zjRCQ@...&gt;\r\nTo: Alexander Johannesen &lt;alexander.johannesen@...&gt;\r\nX-Mailer: Apple Mail (2.1283)\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Keith Hassen &lt;keith.hassen@...&gt;\r\nSubject: Re: [rest-discuss] API versioning\r\nX-Yahoo-Group-Post: member; u=537489571; y=WN-bobcYCJzH5S5ElgCPx5k9SMFZg72Fy6UfHsI25Mwq9H2yeK1M7wwQ63jn7vSjDURDPH4foDWGXPc\r\nX-Yahoo-Profile: erewh0n\r\n\r\n\r\n--Apple-Mail=_F7D33910-6CA2-489E-91B9-F44A3B2DD158\r\nContent-Transfer-Encoding: quoted-printable\r\nContent-Type: text/plain;\n\tcharset=windows-1252\r\n\r\nYeah we definitely make the distinction between the internal representation=\r\n and the representation exposed to clients.  The changes I&#39;m thinking about=\r\n are those dictated by consumers, so in my case I&#39;m thinking of a scenario =\r\nwhere two consumers start with the same requirements for a representation o=\r\nf a resource (the thing that is returned to the client when issuing a GET o=\r\nn a certain resource), but then diverge over time.\n\nI&#39;m actually having a h=\r\nard time thinking of a *breaking* change for consumers that can&#39;t be accomm=\r\nodated by some kind of additive transformation to the original.  In the wor=\r\nst case, you may have data duplication, for example a user might start off =\r\nbeing:\n\n{ name:&quot;John Smith&quot;, address:&quot;123 nowhere ave.&quot; }\n\nbut due to chang=\r\ning requirements needs to change to:\n\n{ name:&quot;John Smith&quot;, address:{street_=\r\naddress:&quot;123 nowhere ave.&quot;, postal:&quot;12345&quot;, phone:&quot;555-5555&quot;}}\n\nIn which ca=\r\nse the new &quot;address&quot; representation could be added to the original represen=\r\ntation using a different name:\n\n{ name:&quot;John Smith&quot;, address:&quot;123 nowhere a=\r\nve.&quot;, full_address:{...}}\n\nThis allows for compatibility between old and ne=\r\nw client requirements.\n\n\nOn 2013-01-09, at 12:48 AM, Alexander Johannesen w=\r\nrote:\n\n&gt; Hiya,\n&gt; \n&gt; &gt; To be honest I&#39;m still not sure how this would be han=\r\ndled if two clients \n&gt; &gt; diverge in their understanding of the same resourc=\r\ne.\n&gt; \n&gt; I think there needs to be made some distinctions between a shared u=\r\nnderstanding of models and a shared understanding of a resource in that mod=\r\nel. Very often the model stays the same, and so the entities of that models=\r\n shouldn&#39;t change, or at best, provide a framework for dealing with small c=\r\nhanges (like backwards compatibility of models).\n&gt; \n&gt; What many confuse as =\r\nan API change in terms of REST is really a model change, not a change to th=\r\ne language itself, which is REST. Even if the internal representation of a =\r\nresource changes, its place in the model most often does not, and neither d=\r\noes the interface. True REST (TM) is representational through hyperlinks, a=\r\nnd applications should be guided through the model rather than having knowl=\r\nedge of it, at least in an ideal world (but people tend to think the overhe=\r\nad is too great for the world of computing to deal with). There&#39;s no point =\r\nin changing the interface nor the model if only representation changes. Tha=\r\nt is probably better dealt with through content negotiation, or, at worst, =\r\ninside the representation level itself.\n&gt; \n&gt; What&#39;s being stressed here is =\r\nthat the separation of interface, model and internal representation most of=\r\nten do not require versioning, at least not on the model and interface leve=\r\nl. So;\n&gt; \n&gt;    /user/johnson\n&gt;    /invoice/1023\n&gt;    /process/345/participa=\r\nnts\n&gt; \n&gt; These are URIs that probably don&#39;t change with &quot;versions&quot;. So why =\r\nversion them at this level? The model is probably fine, only semantics and =\r\nrepresentations change, so why not deal with it at that level instead?\n&gt; \n&gt;=\r\n Hope that makes sense. :) If not, gives us some examples of a change from =\r\none version to the next, and let&#39;s talk about various ways to deal with the=\r\n changes in question.\n&gt; \n&gt; \n&gt; Regards,\n&gt; \n&gt; Alex\n&gt; \n&gt; \n&gt; \n&gt; \n&gt; \n&gt; \n&gt; \n&gt; \n&gt; =\r\nOn Wed, Jan 9, 2013 at 4:25 PM, Keith Hassen &lt;keith.hassen@...&gt; wrote=\r\n:\n&gt;  \n&gt; \n&gt; First of all, thanks for the replies and perspective on REST.\n&gt; =\r\n\n&gt; Backing up to the original question it seems like your particular take o=\r\nn it is that there&#39;s no need to version URIs or the resource representation=\r\ns provided that a cautious approach is taken to resource evolution.\n&gt; \n&gt; To=\r\n be honest I&#39;m still not sure how this would be handled if two clients dive=\r\nrge in their understanding of the same resource.  Perhaps that divergence l=\r\neads us to different concepts and thus different resources and I&#39;ve just be=\r\nen thinking about the problem incorrectly. :)\n&gt; \n&gt; Back to your most recent=\r\n response...\n&gt; \n&gt;&gt;&gt; This seems to be a recommended practice that I&#39;ve encou=\r\nntered in\n&gt;&gt;&gt; reading about RESTful implementations.\n&gt;&gt;&gt; \n&gt;&gt; \n&gt;&gt; Perfectly =\r\ngood HTTP API practice; REST, not so much.  The point of\n&gt;&gt; media types is =\r\nto provide loose coupling based on shared understanding\n&gt;&gt; of how the repre=\r\nsentation is to be decoded.  \n&gt; \n&gt; I think I&#39;m actually talking about loose=\r\n coupling, but this area seems a little fuzzy.  Comprehensive coverage of m=\r\nedia type seems to be missing from Fielding&#39;s dissertation.  The media type=\r\n I specified was definitely too specific (vnd.example.com might be a better=\r\n choice rather than vnd.example.com.order, the latter effectively binding t=\r\nhe media type to the representation and starts smelling like RPC modelling =\r\nrather than the loose coupling promoted by the RESTful style).\n&gt; \n&gt; So how =\r\ntight should this coupling be?  And what about versioning?  I&#39;m tempted to =\r\nsay that if versioning is required, do so in the URi rather than the media =\r\ntype.  The media type seems to be more of an assertion/expectation regardin=\r\ng application context rather than a specification of the resource.\n&gt; \n&gt; It&#39;=\r\ns amazing (or maybe not at all amazing) how divided this subject appears to=\r\n be on the web.  This: http://www.informit.com/articles/article.aspx?p=3D15=\r\n66460 is a pretty typical example.\n&gt; \n&gt; Thanks again for the feedback.\n&gt; \n&gt;=\r\n K\n&gt; \n&gt; \n&gt; On 2013-01-08, at 12:57 AM, Eric J. Bowman wrote:\n&gt; \n&gt;&gt; Keith Ha=\r\nssen wrote:\n&gt;&gt;&gt; \n&gt;&gt;&gt; This seems to be a recommended practice that I&#39;ve enco=\r\nuntered in\n&gt;&gt;&gt; reading about RESTful implementations.\n&gt;&gt;&gt; \n&gt;&gt; \n&gt;&gt; Perfectly=\r\n good HTTP API practice; REST, not so much.  The point of\n&gt;&gt; media types is=\r\n to provide loose coupling based on shared understanding\n&gt;&gt; of how the repr=\r\nesentation is to be decoded.  Not tight coupling based\n&gt;&gt; on interpreting t=\r\nhe content of the representation.  I&#39;ve never seen an\n&gt;&gt; order API that cou=\r\nldn&#39;t be represented as HTML; despite any number of\n&gt;&gt; variations on this t=\r\nheme (or versions within), the media type doesn&#39;t\n&gt;&gt; vary between more orde=\r\nr APIs on the Web than I can count.\n&gt;&gt; \n&gt;&gt; REST has no notion of resource &quot;=\r\ntype&quot; let alone of exposing same on the\n&gt;&gt; wire, so I&#39;ve never understood w=\r\nhy this solution is so prevalent in REST\n&gt;&gt; discussions.  Just media types,=\r\n which are agnostic as to what &quot;type&quot; of\n&gt;&gt; resource is being represented (=\r\nwith rare exceptions as parameters).\n&gt;&gt; \n&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; Anything else is up to t=\r\nhe user-agent to work out.  This is actually\n&gt;&gt;&gt;&gt; easier for m2m than h2m; =\r\na v1 m2m client should already ignore any\n&gt;&gt;&gt;&gt; hypertext it doesn&#39;t underst=\r\nand, rolling out v2 can then re-use any\n&gt;&gt;&gt;&gt; non-deprecated bits of the API=\r\n already present plus the new stuff,\n&gt;&gt;&gt;&gt; and ignore the deprecated stuff. =\r\n Can&#39;t it?\n&gt;&gt;&gt; \n&gt;&gt;&gt; Not always, at least not in my experience. :)  I have f=\r\nound that\n&gt;&gt;&gt; while breaking changes don&#39;t happen often, they *do* happen. =\r\n Add to\n&gt;&gt;&gt; this the possibility of different types of API consumers that s=\r\ntart\n&gt;&gt;&gt; off implementing your APIs the same way, but slowly (or rapidly!)\n=\r\n&gt;&gt;&gt; diverge over time.  In some cases new resources (and thus new URIs)\n&gt;&gt;&gt;=\r\n will suffice, but in other cases what we are doing is very\n&gt;&gt;&gt; specificall=\r\ny *evolving* the resource representation to accommodate\n&gt;&gt;&gt; new requirement=\r\ns.\n&gt;&gt;&gt; \n&gt;&gt; \n&gt;&gt; Then design for graceful degradation (or progressive enhance=\r\nment) using\n&gt;&gt; client-side feature detection.  Just saying there&#39;s no need =\r\nto swing\n&gt;&gt; the conneg hammer to turn this particular screw.\n&gt;&gt; \n&gt;&gt; -Eric\n&gt;=\r\n \n&gt; \n&gt; \n&gt; \n&gt; \n&gt; \n&gt; -- \n&gt;  Project Wrangler, SOA, Information Alchemist, UX,=\r\n RESTafarian, Topic Maps\n&gt; --- http://shelter.nu/blog/ --------------------=\r\n--------------------------\n&gt; ------------------ http://www.google.com/profi=\r\nles/alexander.johannesen ---\n\n\r\n--Apple-Mail=_F7D33910-6CA2-489E-91B9-F44A3B2DD158\r\nContent-Transfer-Encoding: quoted-printable\r\nContent-Type: text/html;\n\tcharset=windows-1252\r\n\r\n&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body style=3D&quot;word-wrap: break-word; -webkit-nbsp-mode:=\r\n space; -webkit-line-break: after-white-space; &quot;&gt;Yeah we definitely make th=\r\ne distinction between the internal representation and the representation ex=\r\nposed to clients. &nbsp;The changes I&#39;m thinking about are those dictated b=\r\ny consumers, so in my case I&#39;m thinking of a scenario where two consumers s=\r\ntart with the same requirements for a representation of a resource (the thi=\r\nng that is returned to the client when issuing a GET on a certain resource)=\r\n, but then diverge over time.&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;I&#39;m actually having a=\r\n hard time thinking of a *breaking* change for consumers that can&#39;t be acco=\r\nmmodated by some kind of additive transformation to the original. &nbsp;In =\r\nthe worst case, you may have data duplication, for example a user might sta=\r\nrt off being:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;{ name:&quot;John Smith&quot;, address:&quot;123 no=\r\nwhere ave.&quot; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;but due to changing requirements nee=\r\nds to change to:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;{ name:&quot;John Smith&quot;, address:{str=\r\neet_address:&quot;123 nowhere ave.&quot;, postal:&quot;12345&quot;, phone:&quot;555-5555&quot;}}&lt;/div&gt;&lt;di=\r\nv&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;In which case the new &quot;address&quot; representation could be ad=\r\nded to the original representation using a different name:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/=\r\ndiv&gt;&lt;div&gt;{ name:&quot;John Smith&quot;, address:&quot;123 nowhere ave.&quot;, full_address:{...=\r\n}}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;This allows for compatibility between old and n=\r\new client requirements.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;div&gt;&lt;div&gt;On 2013-01-0=\r\n9, at 12:48 AM, Alexander Johannesen wrote:&lt;/div&gt;&lt;br class=3D&quot;Apple-interch=\r\nange-newline&quot;&gt;&lt;blockquote type=3D&quot;cite&quot;&gt;&lt;div dir=3D&quot;ltr&quot;&gt;Hiya,&lt;div&gt;&lt;br&gt;&lt;/di=\r\nv&gt;&lt;div&gt;&gt;&nbsp;&lt;span style=3D&quot;font-family:arial,sans-serif;font-size:13px=\r\n&quot;&gt;To be honest I&#39;m still not sure how this would be handled if two clients&=\r\nnbsp;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=3D&quot;font-family:arial,sans-serif;font-siz=\r\ne:13px&quot;&gt;&gt; diverge in their understanding of the same resource.&lt;/span&gt;&lt;/d=\r\niv&gt;\n&lt;div&gt;&lt;span style=3D&quot;font-family:arial,sans-serif;font-size:13px&quot;&gt;&lt;br&gt;&lt;/=\r\nspan&gt;&lt;/div&gt;&lt;div style=3D&quot;&quot;&gt;&lt;font face=3D&quot;arial, sans-serif&quot;&gt;I think there n=\r\needs to be made some distinctions between a shared understanding of models =\r\nand a shared understanding of a resource in that model. Very often the mode=\r\nl stays the same, and so the entities of that models shouldn&#39;t change, or a=\r\nt best, provide a framework for dealing with small changes (like backwards&=\r\nnbsp;compatibility&nbsp;of models).&lt;/font&gt;&lt;/div&gt;\n&lt;div style=3D&quot;&quot;&gt;&lt;font face=\r\n=3D&quot;arial, sans-serif&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=3D&quot;&quot;&gt;&lt;font face=3D&quot;arial=\r\n, sans-serif&quot;&gt;What many confuse as an API change in terms of REST is really=\r\n a model change, not a change to the language itself, which is REST. Even i=\r\nf the internal representation of a resource changes, its place in the model=\r\n most often does not, and neither does the interface. True REST (TM) is rep=\r\nresentational through hyperlinks, and applications should be guided through=\r\n the model rather than having knowledge of it, at least in an ideal world (=\r\nbut people tend to think the overhead is too great for the world of computi=\r\nng to deal with). There&#39;s no point in changing the interface nor the model =\r\nif only representation changes. That is probably better dealt with through =\r\ncontent negotiation, or, at worst, inside the representation level itself.&lt;=\r\n/font&gt;&lt;/div&gt;\n&lt;div style=3D&quot;&quot;&gt;&lt;font face=3D&quot;arial, sans-serif&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/=\r\ndiv&gt;&lt;div style=3D&quot;&quot;&gt;&lt;font face=3D&quot;arial, sans-serif&quot;&gt;What&#39;s being stressed =\r\nhere is that the separation of interface, model and internal representation=\r\n most often do not require versioning, at least not on the model and interf=\r\nace level. So;&lt;/font&gt;&lt;/div&gt;\n&lt;div style=3D&quot;&quot;&gt;&lt;font face=3D&quot;arial, sans-serif=\r\n&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=3D&quot;&quot;&gt;&lt;font face=3D&quot;arial, sans-serif&quot;&gt;&nbsp; =\r\n&nbsp;/user/johnson&lt;/font&gt;&lt;/div&gt;&lt;div style=3D&quot;&quot;&gt;&lt;font face=3D&quot;arial, sans-s=\r\nerif&quot;&gt;&nbsp; &nbsp;/invoice/1023&lt;/font&gt;&lt;/div&gt;&lt;div style=3D&quot;&quot;&gt;&lt;font face=3D&quot;=\r\narial, sans-serif&quot;&gt;&nbsp; &nbsp;/process/345/participants&lt;/font&gt;&lt;/div&gt;\n&lt;div=\r\n style=3D&quot;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=3D&quot;&quot;&gt;&lt;font face=3D&quot;arial, sans-serif&quot;&gt;Thes=\r\ne are URIs that probably don&#39;t change with &quot;versions&quot;. So why version them =\r\nat this level? The model is probably fine, only semantics and representatio=\r\nns change, so why not deal with it at that level instead?&lt;/font&gt;&lt;/div&gt;\n&lt;div=\r\n style=3D&quot;&quot;&gt;&lt;font face=3D&quot;arial, sans-serif&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=3D=\r\n&quot;&quot;&gt;&lt;font face=3D&quot;arial, sans-serif&quot;&gt;Hope that makes sense. :) If not, gives=\r\n us some examples of a change from one version to the next, and let&#39;s talk =\r\nabout various ways to deal with the changes in question.&lt;/font&gt;&lt;/div&gt;\n&lt;div =\r\nstyle=3D&quot;&quot;&gt;&lt;font face=3D&quot;arial, sans-serif&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=3D&quot;=\r\n&quot;&gt;&lt;font face=3D&quot;arial, sans-serif&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=3D&quot;&quot;&gt;&lt;font f=\r\nace=3D&quot;arial, sans-serif&quot;&gt;Regards,&lt;/font&gt;&lt;/div&gt;&lt;div style=3D&quot;&quot;&gt;&lt;font face=\r\n=3D&quot;arial, sans-serif&quot;&gt;&lt;br&gt;\n&lt;/font&gt;&lt;/div&gt;&lt;div style=3D&quot;&quot;&gt;&lt;font face=3D&quot;aria=\r\nl, sans-serif&quot;&gt;Alex&lt;/font&gt;&lt;/div&gt;&lt;div style=3D&quot;&quot;&gt;&lt;font face=3D&quot;arial, sans-s=\r\nerif&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=3D&quot;&quot;&gt;&lt;font face=3D&quot;arial, sans-serif&quot;&gt;&lt;br=\r\n&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=3D&quot;font-family:arial,sans-serif;font-size:13=\r\npx&quot;&gt;&lt;br&gt;\n&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=3D&quot;font-family:arial,sans-serif;font=\r\n-size:13px&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=3D&quot;font-family:arial,sans-ser=\r\nif;font-size:13px&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=3D&quot;font-family:arial,s=\r\nans-serif;font-size:13px&quot;&gt;&lt;br&gt;\n&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=3D&quot;gmail_extra=\r\n&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;div class=3D&quot;gmail_quote&quot;&gt;On Wed, Jan 9, 2013 at 4:25 PM, Keith =\r\nHassen &lt;span dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:keith.hassen@...&quot; targ=\r\net=3D&quot;_blank&quot;&gt;keith.hassen@...&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;\n&lt;blockquote =\r\nclass=3D&quot;gmail_quote&quot; style=3D&quot;margin:0 0 0 .8ex;border-left:1px #ccc solid=\r\n;padding-left:1ex&quot;&gt;\n\n\n&lt;u&gt;&lt;/u&gt;\n\n\n\n\n\n\n\n\n\n\n&lt;div style=3D&quot;&quot;&gt;\n&lt;span&gt;&nbsp;&lt;/span=\r\n&gt;\n\n\n&lt;div&gt;\n  &lt;div&gt;\n\n\n    &lt;div&gt;&lt;div&gt;&lt;br class=3D&quot;webkit-block-placeholder&quot;&gt;&lt;/=\r\ndiv&gt;&lt;div&gt;First of all, thanks for the replies and perspective on REST.&lt;/div=\r\n&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Backing up to the original question it seems like your=\r\n particular take on it is that there&#39;s no need to version URIs or the resou=\r\nrce representations provided that a cautious approach is taken to resource =\r\nevolution.&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;To be honest I&#39;m still not sure how th=\r\nis would be handled if two clients diverge in their understanding of the sa=\r\nme resource. &nbsp;Perhaps that divergence leads us to different concepts a=\r\nnd thus different resources and I&#39;ve just been thinking about the problem i=\r\nncorrectly. :)&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Back to your most recent response.=\r\n..&lt;/div&gt;&lt;div class=3D&quot;im&quot;&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;blockquote type=3D&quot;cite&quot;&gt;&lt;di=\r\nv&gt;&lt;blockquote type=3D&quot;cite&quot;&gt;This seems to be a recommended practice that I&#39;=\r\nve encountered in&lt;br&gt;\n&lt;/blockquote&gt;&lt;blockquote type=3D&quot;cite&quot;&gt;reading about =\r\nRESTful implementations.&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type=3D&quot;cite&quot;&gt;&lt;br&gt;&lt;/bl=\r\nockquote&gt;&lt;br&gt;Perfectly good HTTP API practice; REST, not so much. &nbsp;The=\r\n point of&lt;br&gt;media types is to provide loose coupling based on shared under=\r\nstanding&lt;br&gt;\nof how the representation is to be decoded. &nbsp;&lt;/div&gt;&lt;/bloc=\r\nkquote&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;I think I&#39;m actually talking about loose coupli=\r\nng, but this area seems a little fuzzy. &nbsp;Comprehensive coverage of med=\r\nia type seems to be missing from Fielding&#39;s dissertation. &nbsp;The media t=\r\nype I specified was definitely too specific (&lt;a href=3D&quot;http://vnd.example.=\r\ncom/&quot; target=3D&quot;_blank&quot;&gt;vnd.example.com&lt;/a&gt; might be a better choice rather=\r\n than vnd.example.com.order, the latter effectively binding the media type =\r\nto the representation and starts smelling like RPC modelling rather than th=\r\ne loose coupling promoted by the RESTful style).&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;=\r\nSo how tight should this coupling be? &nbsp;And what about versioning? &nbs=\r\np;I&#39;m tempted to say that if versioning is required, do so in the URi rathe=\r\nr than the media type. &nbsp;The media type seems to be more of an assertio=\r\nn/expectation regarding application context rather than a specification of =\r\nthe resource.&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;It&#39;s amazing (or maybe not at all a=\r\nmazing) how divided this subject appears to be on the web. &nbsp;This:&nbsp=\r\n;&lt;a href=3D&quot;http://www.informit.com/articles/article.aspx?p=3D1566460&quot; targ=\r\net=3D&quot;_blank&quot;&gt;http://www.informit.com/articles/article.aspx?p=3D1566460&lt;/a&gt;=\r\n&nbsp;is a pretty typical example.&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thanks again f=\r\nor the feedback.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;K&lt;/div&gt;&lt;div&gt;&lt;div class=3D&quot;h5&quot;&gt;&lt;di=\r\nv&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;On 2013-01-08, at 12:57 AM, Eric J. Bo=\r\nwman wrote:&lt;/div&gt;&lt;br&gt;&lt;blockquote type=3D&quot;cite&quot;&gt;\n&lt;div&gt;Keith Hassen wrote:&lt;br=\r\n&gt;&lt;blockquote type=3D&quot;cite&quot;&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type=3D&quot;cite&quot;&gt;This =\r\nseems to be a recommended practice that I&#39;ve encountered in&lt;br&gt;&lt;/blockquote=\r\n&gt;&lt;blockquote type=3D&quot;cite&quot;&gt;reading about RESTful implementations.&lt;br&gt;\n&lt;/blo=\r\nckquote&gt;&lt;blockquote type=3D&quot;cite&quot;&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;Perfectly good HTTP =\r\nAPI practice; REST, not so much. &nbsp;The point of&lt;br&gt;media types is to pr=\r\novide loose coupling based on shared understanding&lt;br&gt;of how the representa=\r\ntion is to be decoded. &nbsp;Not tight coupling based&lt;br&gt;\non interpreting t=\r\nhe content of the representation. &nbsp;I&#39;ve never seen an&lt;br&gt;order API tha=\r\nt couldn&#39;t be represented as HTML; despite any number of&lt;br&gt;variations on t=\r\nhis theme (or versions within), the media type doesn&#39;t&lt;br&gt;\nvary between mor=\r\ne order APIs on the Web than I can count.&lt;br&gt;&lt;br&gt;REST has no notion of reso=\r\nurce &quot;type&quot; let alone of exposing same on the&lt;br&gt;wire, so I&#39;ve never unders=\r\ntood why this solution is so prevalent in REST&lt;br&gt;\ndiscussions. &nbsp;Just =\r\nmedia types, which are agnostic as to what &quot;type&quot; of&lt;br&gt;resource is being r=\r\nepresented (with rare exceptions as parameters).&lt;br&gt;&lt;br&gt;&lt;blockquote type=3D=\r\n&quot;cite&quot;&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type=3D&quot;cite&quot;&gt;\n&lt;blockquote type=3D&quot;cite=\r\n&quot;&gt;Anything else is up to the user-agent to work out. &nbsp;This is actually=\r\n&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote type=3D&quot;cite&quot;&gt;&lt;blockquote type=3D=\r\n&quot;cite&quot;&gt;easier for m2m than h2m; a v1 m2m client should already ignore any&lt;b=\r\nr&gt;\n&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote type=3D&quot;cite&quot;&gt;&lt;blockquote type=3D&quot;=\r\ncite&quot;&gt;hypertext it doesn&#39;t understand, rolling out v2 can then re-use any&lt;b=\r\nr&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote type=3D&quot;cite&quot;&gt;&lt;blockquote type=3D&quot;c=\r\nite&quot;&gt;\nnon-deprecated bits of the API already present plus the new stuff,&lt;br=\r\n&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote type=3D&quot;cite&quot;&gt;&lt;blockquote type=3D&quot;ci=\r\nte&quot;&gt;and ignore the deprecated stuff. &nbsp;Can&#39;t it?&lt;br&gt;&lt;/blockquote&gt;&lt;/bloc=\r\nkquote&gt;\n&lt;blockquote type=3D&quot;cite&quot;&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type=3D&quot;cite=\r\n&quot;&gt;Not always, at least not in my experience. :) &nbsp;I have found that&lt;br&gt;=\r\n&lt;/blockquote&gt;&lt;blockquote type=3D&quot;cite&quot;&gt;while breaking changes don&#39;t happen =\r\noften, they *do* happen. &nbsp;Add to&lt;br&gt;\n&lt;/blockquote&gt;&lt;blockquote type=3D&quot;=\r\ncite&quot;&gt;this the possibility of different types of API consumers that start&lt;b=\r\nr&gt;&lt;/blockquote&gt;&lt;blockquote type=3D&quot;cite&quot;&gt;off implementing your APIs the sam=\r\ne way, but slowly (or rapidly!)&lt;br&gt;&lt;/blockquote&gt;\n&lt;blockquote type=3D&quot;cite&quot;&gt;=\r\ndiverge over time. &nbsp;In some cases new resources (and thus new URIs)&lt;br=\r\n&gt;&lt;/blockquote&gt;&lt;blockquote type=3D&quot;cite&quot;&gt;will suffice, but in other cases wh=\r\nat we are doing is very&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type=3D&quot;cite&quot;&gt;\nspecific=\r\nally *evolving* the resource representation to accommodate&lt;br&gt;&lt;/blockquote&gt;=\r\n&lt;blockquote type=3D&quot;cite&quot;&gt;new requirements.&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote typ=\r\ne=3D&quot;cite&quot;&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;Then design for graceful degradation (or pr=\r\nogressive enhancement) using&lt;br&gt;\nclient-side feature detection. &nbsp;Just =\r\nsaying there&#39;s no need to swing&lt;br&gt;the conneg hammer to turn this particula=\r\nr screw.&lt;br&gt;&lt;br&gt;-Eric&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br =\r\nclass=3D&quot;webkit-block-placeholder&quot;&gt;&lt;/div&gt;\n\n    &lt;/div&gt;\n     \n\n    \n    &lt;div =\r\nstyle=3D&quot;color:#fff;min-height:0&quot;&gt;&lt;/div&gt;\n\n\n&lt;/div&gt;\n\n\n\n  \n\n\n\n\n\n\n&lt;/blockquote&gt;=\r\n&lt;/div&gt;&lt;br&gt;&lt;br clear=3D&quot;all&quot;&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;-- &lt;br&gt;&nbsp;Project Wrangler, S=\r\nOA, Information Alchemist, UX, RESTafarian, Topic Maps&lt;br&gt;--- &lt;a href=3D&quot;ht=\r\ntp://shelter.nu/blog/&quot;&gt;http://shelter.nu/blog/&lt;/a&gt; ------------------------=\r\n----------------------&lt;br&gt;\n------------------ &lt;a href=3D&quot;http://www.google.=\r\ncom/profiles/alexander.johannesen&quot;&gt;http://www.google.com/profiles/alexander=\r\n.johannesen&lt;/a&gt; ---\n&lt;/div&gt;\n&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html=\r\n&gt;\r\n--Apple-Mail=_F7D33910-6CA2-489E-91B9-F44A3B2DD158--\r\n\n"}}
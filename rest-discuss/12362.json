{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":272793929,"authorName":"Kevin Duffey","from":"Kevin Duffey &lt;andjarnic@...&gt;","profile":"andjarnic","replyTo":"SENDER","senderId":"s7fWuCdpGNE01JP57Ywg6qXAgvF_KwgnUgFu3S2Gu2XBH0QLgAjmXxJUy0GAKzdr-jCZN7uWONY_LQGLR4FfHg0ghv64x8SP_A","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Why HATEOAS?","postDate":"1238567554","msgId":12362,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDM4ODU1MC4zNjQyLnFtQHdlYjU1OTA2Lm1haWwucmUzLnlhaG9vLmNvbT4=","inReplyToHeader":"PGY4YjM5YWNlMDkwMzMxMTc1OWwzY2JjZGFmNWoyZDkwZWU5NzJhMjJmNGFiQG1haWwuZ21haWwuY29tPg==","referencesHeader":"PDU1YzYwZTM3MDkwMzMxMTcwMXg0YWRhYzAyZG8zNjliNWQ4NjE3MDBmNmU2QG1haWwuZ21haWwuY29tPiA8ZjhiMzlhY2UwOTAzMzExNzU5bDNjYmNkYWY1ajJkOTBlZTk3MmEyMmY0YWJAbWFpbC5nbWFpbC5jb20+"},"prevInTopic":12361,"nextInTopic":12363,"prevInTime":12361,"nextInTime":12363,"topicId":12357,"numMessagesInTopic":27,"msgSnippet":"The last point really hits home for me. If I understand it correctly, as a client consuming an API that adheres to what Craig is saying, I can, for example","rawEmail":"Return-Path: &lt;andjarnic@...&gt;\r\nX-Sender: andjarnic@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 29971 invoked from network); 1 Apr 2009 06:33:34 -0000\r\nX-Received: from unknown (69.147.108.200)\n  by m5.grp.sp2.yahoo.com with QMQP; 1 Apr 2009 06:33:34 -0000\r\nX-Received: from unknown (HELO web55906.mail.re3.yahoo.com) (216.252.110.67)\n  by mta1.grp.re1.yahoo.com with SMTP; 1 Apr 2009 06:33:34 -0000\r\nX-Received: (qmail 4101 invoked by uid 60001); 1 Apr 2009 06:32:34 -0000\r\nMessage-ID: &lt;388550.3642.qm@...&gt;\r\nX-YMail-OSG: wGm5ncMVM1mcY8v2dqJwbNjllEpJjrPRr_m0oVlnV3BFxg.7uxplPcEUiRP6yMws5jdDQB0UGmAz2cTExRVhR5WDlO9Pekawf6iz1EA0H1oGDzJLbXvBqAX2RVlO.NznVc7UFjLjVjemuQnTbZB4rai_AaFePJ6Okf4zbYfkdT0RDB7cW_VTRmLPsZoaGzw2gdRw1_LiuDe3ENT7sGcIgy3Hnm30nLUj9zpPmcKWo962IqeB6Jre8qppoZHLOsEF6xiQnngqJ9rwdxhmXZnZB7_0q2DKNCSMCYsVvwkAUgVDWIghL5v3vWZ2ZXX4DDPNkWodvwE-\r\nX-Received: from [75.49.254.163] by web55906.mail.re3.yahoo.com via HTTP; Tue, 31 Mar 2009 23:32:34 PDT\r\nX-Mailer: YahooMailRC/1277.35 YahooMailWebService/0.7.289.1\r\nReferences: &lt;55c60e370903311701x4adac02do369b5d861700f6e6@...&gt; &lt;f8b39ace0903311759l3cbcdaf5j2d90ee972a22f4ab@...&gt;\r\nDate: Tue, 31 Mar 2009 23:32:34 -0700 (PDT)\r\nTo: craigmcc@..., Solomon Duskis &lt;sduskis@...&gt;\r\nCc: Rest List &lt;rest-discuss@yahoogroups.com&gt;\r\nIn-Reply-To: &lt;f8b39ace0903311759l3cbcdaf5j2d90ee972a22f4ab@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: multipart/alternative; boundary=&quot;0-1446816713-1238567554=:3642&quot;\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Kevin Duffey &lt;andjarnic@...&gt;\r\nSubject: Re: [rest-discuss] Why HATEOAS?\r\nX-Yahoo-Group-Post: member; u=272793929; y=TcJ0LaYbY11JeOUeSi7-DI6TIGKpnWslXkmpaVBjmGhKNKw7\r\nX-Yahoo-Profile: andjarnic\r\n\r\n\r\n--0-1446816713-1238567554=:3642\r\nContent-Type: text/plain; charset=us-ascii\r\n\r\nThe last point really hits home for me. If I understand it correctly, as a client consuming an API that adheres to what Craig is saying, I can, for example rely on the fact that a given URI might be changed by the server, say due to a bug fix or a new version deployed, but mean while my client still works without breaking. I would guess the server implementation would document this fact, especially in the case of a newer version deployed that may change the URI, but I particularly find this beneficial to clients for exactly the reason Craig gives, less worry about my client breaking due to a server URI change. As long as the expected functionality and response remains the same we&#39;re good.\n\nI never considered the 2nd point. Very interesting indeed. Craig did help me with something like this... pagination. In a search engine app for example, a consumer could get a 1 - 100, 101 - 200, etc back. By returning the proper URI to get the next series, and/or previous series of results, I myself do not need to figure out the values to send in the request.. I can simply pluck the URI the server returns for the next/previous, and use it with assurance.\n\n\n\n\n\n________________________________\nFrom: Craig McClanahan &lt;craigmcc@...&gt;\nTo: Solomon Duskis &lt;sduskis@...&gt;\nCc: Rest List &lt;rest-discuss@yahoogroups.com&gt;\nSent: Tuesday, March 31, 2009 5:59:03 PM\nSubject: Re: [rest-discuss] Why HATEOAS?\n\n\nOn Tue, Mar 31, 2009 at 5:01 PM, Solomon Duskis &lt;sduskis@gmail. com&gt; wrote:\n\n&gt; [snip]\n&gt; Assuming that the practical barriers of entry are removed, what practical\n&gt; benefits will we see?\n&gt;\n\nI know exactly where you are coming from with these questions ... I\nfelt the same way until recently.  I&#39;ve designed several REST APIs\nover the last couple of years, but up until the most recent one, I\ndesigned and documented them in the &quot;typical&quot; way, describing the URI\nstructure of the application and letting the client figure out what to\nsend when.  My most recent effort is contributing to the design of the\nREST architecture for the Sun Cloud API[1]  to control virtual\nmachines and so on.  In addition, I&#39;m very focused on writing client\nlanguage bindings for this API in multiple languages (Ruby, Python,\nJava) ... so I get a first hand feel for programming to this API at a\nvery low level.\n\nWe started from the presumption that the service would publish only\n*one* well-known URI (returning a &quot;cloud&quot; representation containing\nrepresentations for, and/or URI links to representations for, all the\ncloud resources that are accessible to the calling user).  Every other\nURI in the entire system (including all those that do state changes)\nare discovered by examining these representations.  Even in the early\ndays, I can see some significant, practical, short term benefits we\nhave gained from taking this approach:\n\n* REDUCED CLIENT CODING ERRORS.  Looking back at all the REST client\nside interfaces\nthat I, or people I work with, have built, about 90% of the bugs\nhave been in the construction\nof the right URIs for the server.  Typical mistakes are leaving out\npath segments, getting them\nin the wrong order, or forgetting to URL encode things.  All this\ngoes away when the server\nhands you exactly the right URI to use for every circumstance.\n\n* REDUCED INVALID STATE TRANSITION CALLS.  When the client decides\nwhich URI to call and\nwhen, they run the risk of attempting to request state transitions\nthat are not valid for the current\nstate of the server side resource.  An example from my problem\ndomain ... it&#39;s not allowed to\n&quot;start&quot; a virtual machine (VM) until you have &quot;deployed&quot; it.  The\nserver knows about URIs to\ninitiate each of the state changes (via a POST), but the\nrepresentation of the VM lists only the\nURIs for state transitions that are valid from the current state.\nThis makes it extremely easy\nfor the client to understand that trying to start a VM that hasn&#39;t\nbeen deployed yet is not legal,\nbecause there will be no corresponding URI in the VM representation.\n\n* FINE GRAINED EVOLUTION WITHOUT (NECESSARILY) BREAKING OLD CLIENTS.\nAt any given time, the client of any REST API is going to be\nprogrammed with *some* assumptions\nabout what the system can do.  But, if you document a restriction to\n&quot;pay attention to only those\naspects of the representation that you know about&quot;, plus a server\nside discipline to add things later\nthat don&#39;t disrupt previous behavior, you can evolve APIs fairly\nquickly without breaking all clients,\nor having to support multiple versions of the API simultaneously on\nyour server.  You don&#39;t have to\nwait years for serendipity benefits :-).  Especially compared to\nsomething like SOAP where the\nsyntax of your representations is versioned (in the WSDL), so you\nhave to mess with the clients\non every single change.\n\nHaving drunk the HATEOAS koolaid now, I would have a really hard time\ngoing back :-).\n\nCraig McClanahan\n\n[1] http://kenai. com/projects/ suncloudapis/ pages/Home\n\n   \n\n\n      \r\n--0-1446816713-1238567554=:3642\r\nContent-Type: text/html; charset=us-ascii\r\n\r\n&lt;html&gt;&lt;head&gt;&lt;style type=&quot;text/css&quot;&gt;&lt;!-- DIV {margin:0px;} --&gt;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div style=&quot;font-family:times new roman,new york,times,serif;font-size:12pt&quot;&gt;&lt;div&gt;The last point really hits home for me. If I understand it correctly, as a client consuming an API that adheres to what Craig is saying, I can, for example rely on the fact that a given URI might be changed by the server, say due to a bug fix or a new version deployed, but mean while my client still works without breaking. I would guess the server implementation would document this fact, especially in the case of a newer version deployed that may change the URI, but I particularly find this beneficial to clients for exactly the reason Craig gives, less worry about my client breaking due to a server URI change. As long as the expected functionality and response remains the same we&#39;re good.&lt;br&gt;&lt;br&gt;I never considered the 2nd point. Very interesting indeed. Craig did help me with something like\n this... pagination. In a search engine app for example, a consumer could get a 1 - 100, 101 - 200, etc back. By returning the proper URI to get the next series, and/or previous series of results, I myself do not need to figure out the values to send in the request.. I can simply pluck the URI the server returns for the next/previous, and use it with assurance.&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;font-family: times new roman,new york,times,serif; font-size: 12pt;&quot;&gt;&lt;br&gt;&lt;div style=&quot;border-left: 2px solid rgb(16, 16, 255); margin: 5px 0px 5px 5px; padding-left: 5px; font-family: times new roman,new york,times,serif; font-size: 12pt;&quot;&gt;&lt;font size=&quot;2&quot; face=&quot;Tahoma&quot;&gt;&lt;hr size=&quot;1&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;From:&lt;/span&gt;&lt;/b&gt; Craig McClanahan &lt;craigmcc@...&gt;&lt;br&gt;&lt;b&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;To:&lt;/span&gt;&lt;/b&gt; Solomon Duskis &lt;sduskis@...&gt;&lt;br&gt;&lt;b&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;Cc:&lt;/span&gt;&lt;/b&gt; Rest List\n &lt;rest-discuss@yahoogroups.com&gt;&lt;br&gt;&lt;b&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;Sent:&lt;/span&gt;&lt;/b&gt; Tuesday, March 31, 2009 5:59:03 PM&lt;br&gt;&lt;b&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;Subject:&lt;/span&gt;&lt;/b&gt; Re: [rest-discuss] Why HATEOAS?&lt;br&gt;&lt;/font&gt;&lt;br&gt;\n\n\n\n\n\n\n\n\n\n    &lt;div id=&quot;ygrp-text&quot;&gt;\n            &lt;p&gt;On Tue, Mar 31, 2009 at 5:01 PM, Solomon Duskis &lt;&lt;a rel=&quot;nofollow&quot; ymailto=&quot;mailto:sduskis%40gmail.com&quot; target=&quot;_blank&quot; href=&quot;mailto:sduskis%40gmail.com&quot;&gt;sduskis@gmail. com&lt;/a&gt;&gt; wrote:&lt;br&gt;\n&lt;br&gt;\n&gt; [snip]&lt;br&gt;\n&gt; Assuming that the practical barriers of entry are removed, what practical&lt;br&gt;\n&gt; benefits will we see?&lt;br&gt;\n&gt;&lt;br&gt;\n&lt;br&gt;\nI know exactly where you are coming from with these questions ... I&lt;br&gt;\nfelt the same way until recently.  I&#39;ve designed several REST APIs&lt;br&gt;\nover the last couple of years, but up until the most recent one, I&lt;br&gt;\ndesigned and documented them in the &quot;typical&quot; way, describing the URI&lt;br&gt;\nstructure of the application and letting the client figure out what to&lt;br&gt;\nsend when.  My most recent effort is contributing to the design of the&lt;br&gt;\nREST architecture for the Sun Cloud API[1]  to control virtual&lt;br&gt;\nmachines and so on.  In addition, I&#39;m very focused on writing client&lt;br&gt;\nlanguage bindings for this API in multiple languages (Ruby, Python,&lt;br&gt;\nJava) ... so I get a first hand feel for programming to this API at a&lt;br&gt;\nvery low level.&lt;br&gt;\n&lt;br&gt;\nWe started from the presumption that the service would publish only&lt;br&gt;\n*one* well-known URI (returning a &quot;cloud&quot; representation containing&lt;br&gt;\nrepresentations for, and/or URI links to representations for, all the&lt;br&gt;\ncloud resources that are accessible to the calling user).  Every other&lt;br&gt;\nURI in the entire system (including all those that do state changes)&lt;br&gt;\nare discovered by examining these representations.  Even in the early&lt;br&gt;\ndays, I can see some significant, practical, short term benefits we&lt;br&gt;\nhave gained from taking this approach:&lt;br&gt;\n&lt;br&gt;\n* REDUCED CLIENT CODING ERRORS.  Looking back at all the REST client&lt;br&gt;\nside interfaces&lt;br&gt;\n  that I, or people I work with, have built, about 90% of the bugs&lt;br&gt;\nhave been in the construction&lt;br&gt;\n  of the right URIs for the server.  Typical mistakes are leaving out&lt;br&gt;\npath segments, getting them&lt;br&gt;\n  in the wrong order, or forgetting to URL encode things.  All this&lt;br&gt;\ngoes away when the server&lt;br&gt;\n  hands you exactly the right URI to use for every circumstance.&lt;br&gt;\n&lt;br&gt;\n* REDUCED INVALID STATE TRANSITION CALLS.  When the client decides&lt;br&gt;\nwhich URI to call and&lt;br&gt;\n  when, they run the risk of attempting to request state transitions&lt;br&gt;\nthat are not valid for the current&lt;br&gt;\n  state of the server side resource.  An example from my problem&lt;br&gt;\ndomain ... it&#39;s not allowed to&lt;br&gt;\n  &quot;start&quot; a virtual machine (VM) until you have &quot;deployed&quot; it.  The&lt;br&gt;\nserver knows about URIs to&lt;br&gt;\n  initiate each of the state changes (via a POST), but the&lt;br&gt;\nrepresentation of the VM lists only the&lt;br&gt;\n  URIs for state transitions that are valid from the current state.&lt;br&gt;\nThis makes it extremely easy&lt;br&gt;\n  for the client to understand that trying to start a VM that hasn&#39;t&lt;br&gt;\nbeen deployed yet is not legal,&lt;br&gt;\n  because there will be no corresponding URI in the VM representation.&lt;br&gt;\n&lt;br&gt;\n* FINE GRAINED EVOLUTION WITHOUT (NECESSARILY) BREAKING OLD CLIENTS.&lt;br&gt;\n  At any given time, the client of any REST API is going to be&lt;br&gt;\nprogrammed with *some* assumptions&lt;br&gt;\n  about what the system can do.  But, if you document a restriction to&lt;br&gt;\n&quot;pay attention to only those&lt;br&gt;\n  aspects of the representation that you know about&quot;, plus a server&lt;br&gt;\nside discipline to add things later&lt;br&gt;\n  that don&#39;t disrupt previous behavior, you can evolve APIs fairly&lt;br&gt;\nquickly without breaking all clients,&lt;br&gt;\n  or having to support multiple versions of the API simultaneously on&lt;br&gt;\nyour server.  You don&#39;t have to&lt;br&gt;\n  wait years for serendipity benefits :-).  Especially compared to&lt;br&gt;\nsomething like SOAP where the&lt;br&gt;\n  syntax of your representations is versioned (in the WSDL), so you&lt;br&gt;\nhave to mess with the clients&lt;br&gt;\n  on every single change.&lt;br&gt;\n&lt;br&gt;\nHaving drunk the HATEOAS koolaid now, I would have a really hard time&lt;br&gt;\ngoing back :-).&lt;br&gt;\n&lt;br&gt;\nCraig McClanahan&lt;br&gt;\n&lt;br&gt;\n[1] &lt;a rel=&quot;nofollow&quot; target=&quot;_blank&quot; href=&quot;http://kenai.com/projects/suncloudapis/pages/Home&quot;&gt;http://kenai. com/projects/ suncloudapis/ pages/Home&lt;/a&gt;&lt;br&gt;\n&lt;/p&gt;\n \n\n    &lt;/div&gt;  \n\n\n\t\n\t&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br&gt;\n\n\n\n      &lt;/body&gt;&lt;/html&gt;\r\n--0-1446816713-1238567554=:3642--\r\n\n"}}
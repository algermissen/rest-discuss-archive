{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":23186829,"authorName":"Paul Prescod","from":"Paul Prescod &lt;paul@...&gt;","profile":"papresco","replyTo":"SENDER","senderId":"ay-282jZa0yFVAV_hE-sm29otv4f0XxA37v7hPgjlAfZOdwPIx53N6bM3_e567pwDMH3Vc6pUWOHx2ebSipv64ovvsa2PA","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] sending orders to order-takers","postDate":"1024441289","msgId":1574,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDNEMEZCQkM5LkM3NkQwNkNCQHByZXNjb2QubmV0Pg==","referencesHeader":"PDEwMjIzNjcxODJCOEQ1MTFBNzcxMDA1MDhCREYzNDg2MDQ5QTUyRjdAZXhjaGFuZ2UtMS5rZXlub3RlLmNvbT4="},"prevInTopic":1573,"nextInTopic":1575,"prevInTime":1573,"nextInTime":1575,"topicId":1570,"numMessagesInTopic":16,"msgSnippet":"... There are reasons that I feel that posting an proprietaryNamespace:Order this is different than calling a proprietyNamespace:method. It is because these","rawEmail":"Return-Path: &lt;paul@...&gt;\r\nX-Sender: paul@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_0_3_2); 18 Jun 2002 23:01:19 -0000\r\nReceived: (qmail 48031 invoked from network); 18 Jun 2002 23:01:19 -0000\r\nReceived: from unknown (66.218.66.216)\n  by m13.grp.scd.yahoo.com with QMQP; 18 Jun 2002 23:01:19 -0000\r\nReceived: from unknown (HELO smtp1.ActiveState.com) (209.17.183.249)\n  by mta1.grp.scd.yahoo.com with SMTP; 18 Jun 2002 23:01:18 -0000\r\nReceived: from smtp3.ActiveState.com (smtp3.ActiveState.com [192.168.3.19])\n\tby smtp1.ActiveState.com (8.11.6/8.11.6) with ESMTP id g5IN1Gd16763;\n\tTue, 18 Jun 2002 16:01:16 -0700\r\nReceived: from prescod.net (ssh1.ActiveState.com [192.168.3.32])\n\tby smtp3.ActiveState.com (8.11.6/8.11.6) with ESMTP id g5IN1E207688;\n\tTue, 18 Jun 2002 16:01:15 -0700\r\nMessage-ID: &lt;3D0FBBC9.C76D06CB@...&gt;\r\nDate: Tue, 18 Jun 2002 16:01:29 -0700\r\nX-Mailer: Mozilla 4.76 [en] (Windows NT 5.0; U)\r\nX-Accept-Language: en\r\nMIME-Version: 1.0\r\nTo: rest-discuss@yahoogroups.com\r\nCc: Joe Hsy &lt;joe.hsy@...&gt;\r\nSubject: Re: [rest-discuss] sending orders to order-takers\r\nReferences: &lt;1022367182B8D511A77100508BDF3486049A52F7@...&gt;\r\nContent-Type: text/plain; charset=us-ascii\r\nContent-Transfer-Encoding: 7bit\r\nX-Filtered-By: PerlMx makes it fast and easy.  See http://www.ActiveState.com/Products/PerlMx/Header\r\nFrom: Paul Prescod &lt;paul@...&gt;\r\nX-Yahoo-Group-Post: member; u=23186829\r\nX-Yahoo-Profile: papresco\r\n\r\nJoe Hsy wrote:\n&gt; \n&gt;...\n&gt; \n&gt; Many examples of RESTful application use the concept of an &quot;order&quot; which is\n&gt; posted to an &quot;order-taker&quot;.  The parts-depot accepts parts orders.  The RPG\n&gt; game server accepts &quot;action&quot; orders.\n&gt; \n&gt; I submit that this is not much different than invoking a method of an\n&gt; object.  The method is encapsulated in the XML order document which requires\n&gt; that the order taker understand what the methods mean for this to work.\n\nThere are reasons that I feel that posting an proprietaryNamespace:Order\nthis is different than calling a proprietyNamespace:method. It is\nbecause these differences are subtle that REST is NOT a no-brainer.\nThere are kind of two phases of REST enlightenment. First you say: &quot;we\nall use the same the methods so everything will just work with\neverything.&quot; Then you say: &quot;No, that won&#39;t really work because some\nkinds of resources and representations will only work with particular\nother kinds of resources and representations.&quot; Then you are ready for\nthe second phase.\n\nIn the second phase we acknowledge that the world is a complicated place\nand total interoperability will never come for free. REST isn&#39;t going to\nrepeal the laws of the universe and physics. We are shifting\ninteroperability hassles from the protocol down into the representation.\n\nBut this is MUCH BETTER because the representation is *already*\nnecessarily an interoperability headache. People will quote prices in\nYen, Dollars, Euros. They will use different date formats. They will use\ndifferent element type names for the same thing. Adding the\n&quot;operational&quot; interoperability issues to all of these &quot;representational&quot;\ninteroperability issues is a small change. Once we push all of the\ninteroperability down into one layer (you call it the application layer\nbut I call it the representation layer) we can use one set of tools. And\nthe tools we have available are MUCH BETTER than the tools we have\navailable for mapping between protocols. There is no XSLT for mapping\nHTTP to SMTP or vice versa. There is no RDF or DAML for protocols. \n\nThe other reason it is much better to move interoperability into the\nrepresentation is because it enables a wide variety of tools that don&#39;t\ncare about the representation. URI-Browsers, caching proxies, encrypting\nproxies, method-triggered filters, mirroring tools, etc. You can just\npoint these things at a set of URIs and they can do something useful\nwithout knowing anything about the XML vocabulary used.\n\n&gt; The reason this is better than RPC is that this mechanism is loosely coupled\n&gt; at the protocol layer, whereas RPC requires explicit bindings at the\n&gt; protocol layer.\n\nDifferent people use different definitions of RPC. I think that Mark&#39;s\ndefinition is that a protocol is an RPC protocol if the definition of\nnew methods is something routinely done by the application, rather than\nin a networking-specific layer.\n\n&gt; But, let&#39;s not deceive ourselves about the extent of the loose-coupling.  It\n&gt; is only loosely coupled as far as generic URI manipulation is concerned\n&gt; (passing a link, sorting links, ranking, etc).  If the RPG server stops\n&gt; understanding the action &quot;attack&quot;, the clients still break.\n\nOkay, but in REST, the action will almost always result in a new\nresource that can be referenced and discussed. So you might as well call\nit the &quot;submit attack request&quot; action. i.e. POST\n\n&gt; We simply moved the brittleness or fragility up to the application level\n&gt; where it belongs.  Certain applications will remain brittle whether it is\n&gt; RESTful at the protocol level or not - only good design will ameliorate\n&gt; brittleness.\n\nAgreed, but we have much better tools for working with brittleness in\nthe representation layer than we do at the protocol layer. \n\n&gt; REST works wonderfully in a document/data retrieval and hyperlinking\n&gt; application because the methods for documents and data are essentially GET,\n&gt; PUT, POST, and DELETE.  For this specific application, those are the most\n&gt; important verbs.\n\nREST is about recasting applications *into* document/data retrieval and\nhyperlinking applications!\n\n&gt; Unfortunately, this is not true for action-oriented services.  Encapsulating\n&gt; what we want the server to *do* into an order is again simply pushing the\n&gt; difficulties of application-specific verbs into the application level (where\n&gt; I agree it belongs).  However, we won&#39;t get same complete benefit that the\n&gt; document/data web enjoys with having the real semantics of GET, PUT, POST,\n&gt; DELETE be totally applicable and sufficient for that application.\n\n*Except* for performance requirements, I think you&#39;ll have a hard time\ndemonstrating that GET/PUT/POST/DELETE are insufficient for let&#39;s say a\nvideo game. All of the same benefits accrue as with any other\napplication of REST. Thinking about your problem in terms of\ndocument/data forces you to make URIs for objects. Doing that makes\nthings addressable. Other benefits follow naturally.\n\n&gt; Let&#39;s get back to verb URIs.  \n\nOne reason to keep verbs out of the URIs is that it then becomes\nimplicit what object is being acted *upon*. With REST it is explicit:\n\nDELETE /foo/bar/baz\n\nI can (for example) use ACLs to turn off DELETE permission to that URI\nor URIs of that resource type.\n\nNow compare to:\n\nPOST /foo/bar/baz?action=DELETE\n\nNow you&#39;ve moved the method up into the application level and a\npure-HTTP tool can&#39;t be used to secure it anymore. Now it needs to know\nyour application semantics. That&#39;s a big part of what REST is trying to\nget away from.\n\n&gt; ... I think the insistence on not having verbs in\n&gt; URIs makes total sense for a document/data web.  It doesn&#39;t make as much\n&gt; sense for a services-oriented web.  We are already creating fragility by\n&gt; using verbs in the orders but we are not getting the benefit of having the\n&gt; verbs be addressable directly.\n\nWho said we should use verbs in the order? Yes, the order has a\nvocabulary that must be negotiated, as verbs must be negotiated in an\nRPC system. But that doesn&#39;t mean there are verbs in the actual order.\n\n&gt; Ultimately, if we want to push REST as a way to implement action-oriented\n&gt; web services, we need to extend REST to support method invocation in a\n&gt; consistent and convenient way.  If not, we will need to have some other\n&gt; defining architecture which leverages URIs and loose-coupling as an\n&gt; alternative to RPC.\n\nWell, SOAP is moving in that direction. If all you want is to send XML\nto URIs, you can just send POSTs of XML. The standardization of the\nverbs is a big part of what makes REST REST.\n\n Paul Prescod\n\n"}}
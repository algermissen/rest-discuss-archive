{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":184797058,"authorName":"Benjamin Carlyle","from":"Benjamin Carlyle &lt;benjamincarlyle@...&gt;","profile":"fuzzybsc","replyTo":"SENDER","senderId":"iSOphsavYHAynAvGDCgEJFlhQ7W4ewrxlf8dOzepMTlCrTaP25-gWSlaVksxpFOOx_KpPh92JA3DtkEjr7V4bn4wAzoU-T8MM1vABv7Yu1-D43aQ5yJ9aqM","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] POST at most once / reliable messaging","postDate":"1170579306","msgId":7806,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDExNzA1NzkzMDcuNDk2Ni4zOC5jYW1lbEBsb2NhbGhvc3QubG9jYWxkb21haW4+","inReplyToHeader":"PEM0MzhFQTlDLThBRjAtNDlENS1CRjFGLTk4QTA2RkIyQzU3M0BtYWMuY29tPg==","referencesHeader":"PDExNjkyOTc0NjUuNTEzMC41NS5jYW1lbEBsb2NhbGhvc3QubG9jYWxkb21haW4+CSA8NDVCMjc0NDIuMzAzMDAwM0BkZWhvcmEubmV0PgkgPDExNjk4NzU5NzUuNTM2My40Mi5jYW1lbEBsb2NhbGhvc3QubG9jYWxkb21haW4+CSA8QzQzOEVBOUMtOEFGMC00OUQ1LUJGMUYtOThBMDZGQjJDNTczQG1hYy5jb20+"},"prevInTopic":7805,"nextInTopic":7807,"prevInTime":7805,"nextInTime":7807,"topicId":7646,"numMessagesInTopic":40,"msgSnippet":"... One of my REST design instincts is that whenever I see an ID used as part of a message exchange pattern, I wonder why it isn t a URL. I think ids in","rawEmail":"Return-Path: &lt;benjamincarlyle@...&gt;\r\nX-Sender: benjamincarlyle@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 29608 invoked from network); 4 Feb 2007 08:55:32 -0000\r\nReceived: from unknown (66.218.66.172)\n  by m40.grp.scd.yahoo.com with QMQP; 4 Feb 2007 08:55:32 -0000\r\nReceived: from unknown (HELO mail06.syd.optusnet.com.au) (211.29.132.187)\n  by mta4.grp.scd.yahoo.com with SMTP; 4 Feb 2007 08:55:32 -0000\r\nReceived: from c210-49-93-69.rochd2.qld.optusnet.com.au (c210-49-93-69.rochd2.qld.optusnet.com.au [210.49.93.69])\n\tby mail06.syd.optusnet.com.au (8.13.1/8.13.1) with ESMTP id l148t7T6020496;\n\tSun, 4 Feb 2007 19:55:08 +1100\r\nTo: Jan Algermissen &lt;algermissen1971@...&gt;, Mark Baker &lt;distobj@...&gt;\r\nCc: Bill de hOra &lt;bill@...&gt;,\n        REST Discuss &lt;rest-discuss@yahoogroups.com&gt;,\n        Mark Nottingham &lt;mnot@...&gt;\r\nIn-Reply-To: &lt;C438EA9C-8AF0-49D5-BF1F-98A06FB2C573@...&gt;\r\nReferences: &lt;1169297465.5130.55.camel@...&gt;\n\t &lt;45B27442.3030003@...&gt;\n\t &lt;1169875975.5363.42.camel@...&gt;\n\t &lt;C438EA9C-8AF0-49D5-BF1F-98A06FB2C573@...&gt;\r\nContent-Type: text/plain\r\nDate: Sun, 04 Feb 2007 18:55:06 +1000\r\nMessage-Id: &lt;1170579307.4966.38.camel@...&gt;\r\nMime-Version: 1.0\r\nX-Mailer: Evolution 2.6.3 \r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:0:0:0\r\nFrom: Benjamin Carlyle &lt;benjamincarlyle@...&gt;\r\nSubject: Re: [rest-discuss] POST at most once / reliable messaging\r\nX-Yahoo-Group-Post: member; u=184797058; y=COXcHmBSeJWme6zf2aX15ikQJQhq22Q5jiFvBBGYs4EZ7m4\r\nX-Yahoo-Profile: fuzzybsc\r\n\r\nOn Sat, 2007-01-27 at 11:32 +0100, Jan Algermissen wrote:\n&gt; The model I am thinking about to achieve POE is based on the use of  \n&gt; Atom and the inclusion of an ID in the POST body (or an HTTP header).  \n&gt; POE aware clients would receive the ID to use from a factory, non-POE  \n&gt; aware clients would just do the normal POST.\n\nOne of my REST design instincts is that whenever I see an ID used as\npart of a message exchange pattern, I wonder why it isn&#39;t a URL. I think\nids in headers have a tendancy to hide shared communication state\ninstead of making it explicit. In this case I would prefer that the ID\nbe the URL of the resource that the client needs to interact with next.\nWhen the client makes its request to the factory this urls should be\nreturned in the Location header of the response.\n\n&gt; Another thought I had was that the client could probably create the  \n&gt; ID itself (e.g. a tag: URI) and a new HTTP return code could indicate  \n&gt; to the client that the ID was&#39;t suitable (together with a good one in  \n&gt; the payload).\n\nMark Baker has just suggested the use of a client-generated id,\nsomething like a client etag. The WS-* reliabile messaging specification\nalso uses a client-generated ID, but this time it is a sequence number\na-la TCP so that missed messages and message ordering can also be dealt\nwith.\n\nI think the WS-* approach is interesting. I sometimes find myself\nwanting to be sure that requests are processed in the order in which\nthey are sent. For example in SENA[1] I get a timing signal from the\nserver to indicate something has changed. If these signals arrive too\nfast I might still have a previous GET outstanding. Should I send the\nnew GET immediately, or wait until the existing one returns?\n\nIf I send immediately the response will come back sooner, and I will be\nable to update the state of some soft-realtime data on my page. However\nunder extreme conditions it is possible that my GET requests to the same\nURL could be processed out of order. It might even be possible for the\nresponse I recieve second to be older than the response I recieve first.\nIf I update the user&#39;s screen with the second I could be misleading\nthem.\n\nIn practice, however, the use of sequence numbers can be pretty limiting\nto scalability. The REST constraint of &quot;no shared communication state\nbetween requests&quot; helps explain why. If I am up to sequence number 200\nand the server fails over to an unrelated server, we won&#39;t be able to\ncontinue the conversation. We will have to reinitiate it from scratch.\nThis already happens with HTTP/1.1 TCP/IP connections. It is usually\nnecessary to tear down and reestablish the TCP/IP connection on server\nfailover. It is probably impractical to try and ensure TCP-level\nfailover even within a close-knit cluster. It is only slightly more\npractical to use a TCP-like technique at the coarser-grained message\nlevel. Certainly when clusters operate between physical sites it can\nbecome quite difficult.\n\nThis suggests that reliable messaging that guarantees ordering of\nmessage processing is not achievable in the general case, though special\nenvironments may support it. There will always be chances for loss of\ncommunication state on failover. Even without failover it is an unfair\nassumption that a server will process requests from a single client in\nsequence. Proxies could reorder or alter the sequence, and simple\nthreading models that perform parallelisation of processing will break\nthe model. Ultimately, at most once delivery is probably as close to the\nideal that we can reach in general.\n\nOn Sat, 2007-02-03 at 23:24 -0500, Mark Baker wrote:\n&gt; A technique I&#39;ve used once was to have the client send an HTTP header\n&gt; in the POST request which played a role sort of like a client-side\n&gt; etag with respect to the request body.  The server, upon receiving the\n&gt; message and updating the state of the resource, would return another\n&gt; header containing a hash of the last days worth of tags (which wasn&#39;t\n&gt; many) on GET requests to that resource so that it could check if *its*\n&gt; update was applied.\n\nThe SCADA approach is more direct, but then again it is working on\nphysical devices. You send a request for a transition. If all of the\ncomputer and networking devices are fine you&#39;ll get the equivalent of an\nOK back. However, all we know is that we kicked the servos into action.\nIt is possible that the mechanical device itself hasn&#39;t moved. The\ndevice provides a read-back as to its actual state, and we configure a\ntimeout by which it must reach that state. No resends occur as this is\nusually considered dangerous, however if the state doesn&#39;t match what we\nrequested soon enough it is reported as an error to the user for\ncorrection.\n\nThe possible unreliability of mechanical devices (even of their\nread-backs) has interesting effects on idempotency. We have what are\nknown as &quot;trip to trip&quot; transitions and &quot;close to close&quot;. In other\nwords, everything we can see says that the device is in a particular\nstate. However the user has determined from other evidence (ie by\nexamining other resources) that we are being lied to. They send a\nrequest to put the device into the same state that it is currently in.\nWe give the servos on the device another kick, and it usually fixes the\nproblem. Interestingly, though, we would normally not retry an\nidempotent request like this automatically. Every time we kick those\nservos it reduces the lifetime of the mechanical device. A big circuit\nbreaker might only have 50 trips in it before it needs maintenence. We\nwould not normally issue any request to a device like that unless the\nuser is directly at the helm requesting it.\n\nBenjamin.\n[1] http://soundadvice.id.au/blog/draft-carlyle-sena-01.txt\n\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":289191104,"authorName":"Jan Algermissen","from":"Jan Algermissen &lt;algermissen1971@...&gt;","profile":"algermissen1971","replyTo":"SENDER","senderId":"9rwbFywEePW_HtA_E3I9lES4cZWzRzqPNswYiIZGpl3BviT7LEGnK9f51ypqxI0_QXn6GIyHbQtPCS42TuumiN-7cW_3wmOhhbCHrA9kkQM","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] HATEOAS and Cache","postDate":"1266562618","msgId":14810,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDZGQjYyQzg3LTcyMjMtNDFCMC1CRUM1LTM1QzE5MzlGMkU3QkBtYWMuY29tPg==","inReplyToHeader":"PDQ0NzUxNC41MDgwMi5xbUB3ZWI1NTkwOC5tYWlsLnJlMy55YWhvby5jb20+","referencesHeader":"PDQ0NzUxNC41MDgwMi5xbUB3ZWI1NTkwOC5tYWlsLnJlMy55YWhvby5jb20+"},"prevInTopic":14809,"nextInTopic":14811,"prevInTime":14809,"nextInTime":14811,"topicId":14806,"numMessagesInTopic":17,"msgSnippet":"... Exactly. This is why hiding a state traversal behind an OO interface violates the hypermedia constraint[1]. It hides the fact that the client should accept","rawEmail":"Return-Path: &lt;algermissen1971@...&gt;\r\nX-Sender: algermissen1971@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 89804 invoked from network); 19 Feb 2010 06:57:45 -0000\r\nX-Received: from unknown (98.137.34.45)\n  by m1.grp.sp2.yahoo.com with QMQP; 19 Feb 2010 06:57:45 -0000\r\nX-Received: from unknown (HELO asmtpout023.mac.com) (17.148.16.98)\n  by mta2.grp.sp2.yahoo.com with SMTP; 19 Feb 2010 06:57:45 -0000\r\nMIME-version: 1.0\r\nContent-transfer-encoding: 7BIT\r\nContent-type: text/plain; charset=us-ascii\r\nX-Received: from [192.168.2.102] ([84.144.85.136])\n by asmtp023.mac.com (Sun Java(tm) System Messaging Server 6.3-8.01 (built Dec\n 16 2008; 32bit)) with ESMTPSA id &lt;0KY200F9MTYY9E20@...&gt; for\n rest-discuss@yahoogroups.com; Thu, 18 Feb 2010 22:57:02 -0800 (PST)\r\nX-Proofpoint-Spam-Details: rule=notspam policy=default score=0 spamscore=0\n ipscore=0 phishscore=0 bulkscore=0 adultscore=0 classifier=spam adjust=0\n reason=mlx engine=5.0.0-0908210000 definitions=main-1002180281\r\nIn-reply-to: &lt;447514.50802.qm@...&gt;\r\nDate: Fri, 19 Feb 2010 07:56:58 +0100\r\nCc: rest-discuss@yahoogroups.com, Jan Vincent &lt;jvliwanag@...&gt;\r\nMessage-id: &lt;6FB62C87-7223-41B0-BEC5-35C1939F2E7B@...&gt;\r\nReferences: &lt;447514.50802.qm@...&gt;\r\nTo: Kevin Duffey &lt;andjarnic@...&gt;\r\nX-Mailer: Apple Mail (2.1077)\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Jan Algermissen &lt;algermissen1971@...&gt;\r\nSubject: Re: [rest-discuss] HATEOAS and Cache\r\nX-Yahoo-Group-Post: member; u=289191104; y=HPw1OB2Lt-LfDt-tZrTe4CqzYrU71cnxVnpe11XSxUCx44FhgylToIli\r\nX-Yahoo-Profile: algermissen1971\r\n\r\n\nOn Feb 19, 2010, at 7:45 AM, Kevin Duffey wrote:\n\n&gt; \n&gt; \n&gt; I think one problem you may run in to in order to be truly RESTful, is assuming that the response will return the link you wish to follow. From your multiple method invocation (assuming I am reading that correctly that it is one line of code with multiple method calls), the 2nd method invocation assumes the link is part of the response. What happens if it&#39;s not?\n\n\nExactly.\n\nThis is why hiding a state traversal behind an OO interface violates the hypermedia constraint[1]. It hides the fact that the client should accept the case of the link not being present as part of normal communication. That is: not throw an exception as the default behaviour.\n\nJan\n\n\n\n\n[1] Unless you have a media type that mandates the link to be there in valid instances, e.g.\n\nGET /sth\nAccept: appliation/foo\n\n200 Ok\nContent-Type: appliation/foo\n\n&lt;foo href=&quot;&quot;/&gt;\n\nIf vaid foo messages MUST contain the href attr then you could hide this in an OO call. But few media types ever do this and it can IMHO be considered bad media type design.\n\n\n&gt; For what ever reason the server decided not to include it, be it an error, invalid authorization, etc?\n&gt; \n&gt; \n&gt; --- On Thu, 2/18/10, Jan Vincent &lt;jvliwanag@...&gt; wrote:\n&gt; \n&gt; From: Jan Vincent &lt;jvliwanag@...&gt;\n&gt; Subject: [rest-discuss] HATEOAS and Cache\n&gt; To: rest-discuss@yahoogroups.com\n&gt; Date: Thursday, February 18, 2010, 4:56 PM\n&gt; \n&gt; Hi guys,\n&gt; \n&gt; I&#39;m trying to understand HATEOAS properly and aim to embrace it fully. However, the lack of client side libraries that embrace this is impeding me for the moment. The way I see it, all clients must be only be made known of one URI, say &quot;/&quot;. The client then derives the URIs from that link. As such, I was hoping to do something roughly like:\n&gt; \n&gt; from(&quot;/&quot;).follow( &quot;#users_link&quot; ).fill_form( &quot;search_user&quot; , {&quot;id&quot;: &quot;someid&quot;}).follow( &quot;#user_link&quot; ).follow( &quot;#friends_ link&quot;)\n&gt; \n&gt; The goal of the previous command was to get the friends of some user having an ID of &#39;someid&#39;. It starts by going to the given URL, then from the page it got, follows a certain link which redirect it to the resource for a list of users. It then searches for the user, probably filling up a form, submits it, and goes to the user&#39;s page. From the user&#39;s page, there is a link to the friends page, and that is followed and eventually processed.\n&gt; \n&gt; In reality of course, this shouldn&#39;t really necessitate multiple calls to the server if called multiple times since previous results have been cached and processed on the client side. Only when the cache expires, should there be an attempt to request again. I&#39;m not really sure if RESTful clients that respect HATEOAS do it this way, and should they in the first place. If they do, are there tools that exist for this?\n&gt; \n&gt; On a side note, content type negotiation should be preconfigured before doing the call I stated above.\n&gt; \n&gt; Thanks,\n&gt; \n&gt; Jan Vincent Liwanag\n&gt; jvliwanag@gmail. com\n&gt; \n&gt; \n&gt; \n&gt; \n&gt; \n&gt; \n\n-----------------------------------\n Jan Algermissen, Consultant\n NORD Software Consulting\n\n Mail: algermissen@...\n Blog: http://www.nordsc.com/blog/\n Work: http://www.nordsc.com/\n-----------------------------------\n\n\n\n\n\n"}}
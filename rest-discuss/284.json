{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":63473576,"authorName":"Lucas Gonze","from":"&quot;Lucas Gonze&quot; &lt;lucas@...&gt;","profile":"lucas_gonze","replyTo":"SENDER","senderId":"0J3tElEQqD-DPwmwDWBTJqRzX1b6dJs7Jf2ebINV3yGIHp_f6dTQ-frd0TnaxHuYx6wvQEy6gaCv9kobQMh0pfz73pXG3g","spamInfo":{"isSpam":false,"reason":"0"},"subject":"security of callbacks","postDate":"1011983967","msgId":284,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PE5FQkJKSUhNTUxLSEVPUE5PR0hET0VIR0ZKQUEubHVjYXNAZ29uemUuY29tPg=="},"prevInTopic":0,"nextInTopic":289,"prevInTime":283,"nextInTime":285,"topicId":284,"numMessagesInTopic":18,"msgSnippet":"HTTP callbacks create new security issues.  In the following message I present an orderly way to approach those issues. An HTTP request is asymetric with","rawEmail":"Return-Path: &lt;lucas@...&gt;\r\nX-Sender: lucas@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_0_1_3); 25 Jan 2002 18:40:23 -0000\r\nReceived: (qmail 53143 invoked from network); 25 Jan 2002 18:40:22 -0000\r\nReceived: from unknown (216.115.97.172)\n  by m10.grp.snv.yahoo.com with QMQP; 25 Jan 2002 18:40:22 -0000\r\nReceived: from unknown (HELO mail2.panix.com) (166.84.0.213)\n  by mta2.grp.snv.yahoo.com with SMTP; 25 Jan 2002 18:40:22 -0000\r\nReceived: from lucas (159-98.nyc.dsl.access.net [166.84.159.98])\n\tby mail2.panix.com (Postfix) with SMTP id 961C68FAB\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Fri, 25 Jan 2002 13:40:21 -0500 (EST)\r\nTo: &quot;Rest-Discuss&quot; &lt;rest-discuss@yahoogroups.com&gt;\r\nSubject: security of callbacks\r\nDate: Fri, 25 Jan 2002 13:39:27 -0500\r\nMessage-ID: &lt;NEBBJIHMMLKHEOPNOGHDOEHGFJAA.lucas@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain;\n\tcharset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: 7bit\r\nX-Priority: 3 (Normal)\r\nX-MSMail-Priority: Normal\r\nX-Mailer: Microsoft Outlook IMO, Build 9.0.2416 (9.0.2910.0)\r\nImportance: Normal\r\nX-MimeOLE: Produced By Microsoft MimeOLE V5.00.2919.6600\r\nFrom: &quot;Lucas Gonze&quot; &lt;lucas@...&gt;\r\nX-Yahoo-Group-Post: member; u=63473576\r\nX-Yahoo-Profile: lucas_gonze\r\n\r\nHTTP callbacks create new security issues.  In the following message I present\nan orderly way to approach those issues.\n\nAn HTTP request is asymetric with regard to state.  Client state is opaque,\nexcept that it must have enough state to interpret a response.  Server state is\nexposed using HTTP methods.  Clients have always been less prone to security\nproblems than servers, because they expose so much less state.  The only client\nresource exposed is the state machine that performs the request.  For a callback\nsink to be no less secure than a client request, the only resource the sink can\nexpose is a similar state machine.\n\nWhat&#39;s in that state machine?  There is a contractual obligation to perform\nstandard syntactic operations like reading the number of bytes specified in the\nContent-Length response header.  There is implicit knowledge of a reader process\nwith an open socket, some memory allocated, maybe some access restrictions.\nThere is implicit knowledge of context: the reader assumes that the writer is\nthe same process it initially contacted.  Etc -- this is not an exhaustive list.\nOne thing that is not exposed is information about the sink state after the\ntransaction is completed.\n\nAny approach to callbacks that directly addressed security could be evaluated by\ncomparison with the above baseline.  For the purpose of doing such an\nevaluation, it is useful to define a new pseudo-method as follows: this method\nexposes no more server state than is in a requester state machine.  A reasonable\nname for this pseudo-method is NOTIFY.  A NOTIFY method MAY affect any\nproperties of sink state that a response MAY affect; it MUST affect any elements\nof sink state that a response MUST affect; etc.\n\nNOTIFY is not necessarily a new actual method.  It is just a convenience for\ndiscussion.  It should be possible to define it as a synonym for existing HTTP\noperations.  For example, we might be able to POST to a well-known list of\nproperties, with one property for every aspect of a requester state machine.\nEG,\nPOST $root_uri/properties/headers/Content-Length/ HTTP/1.1\nPOST $root_uri/properties/assumptions/source_identity/ HTTP/1.1\nPOST $root_uri/properties/states/message_send_complete/ HTTP/1.1\n\nA sink MUST NOT expose any properties that a request state machine wouldn&#39;t.\nSo, to the degree that properties of request state machines can be known in\nadvance, the list of exposable properties can be known in advance.  A source\nMUST NOT POST a value to $root_uri/properties/headers/ that would not be a legal\nvalue in a response header.  A sink MUST accept any value in\n$root_uri/properties/headers/ that would be a legal value in a response header.\n\nGiven this equipment, we can place Jeff&#39;s comments about authentication and\nexpiration.  Expiration is the inverse of caching, therefore sink URIs and\nvalues related to expiration would be defined based on cache-response-directives\nin section 14.9 of RFC 2616.  A requester can assume authentication, but a\ncallback sink can&#39;t.  (There are probably other assumptions in the state machine\nof a requester.)  These can be tackled one by one and addressed by a URI\nhierarchy exposing them as properties.  EG,\nPOST $root_uri/properties/assumptions/source_identity/ HTTP/1.1\n\nSome miscellaneous comments:\n* Mike Dierken&#39;s reply-in-request is an obvious reference point here.  It\nstrikes me as surprizingly sensible now.\n* It is unavoidable for the state machine that accepts POST callbacks at the\nsink to leak state in a different way from the state machine of a requester.\nHowever, well-made HTTP servers should already keep this leakage to a minimum,\nsince they are necessarily more paranoid than HTTP clients.\n\nSummarizing, exposed sink properties must be a small and strictly limited subset\nof all POSTable properties.  Given that exposed sink properties are a 1-1 match\nwith reply properties, then it should be possible to perform callbacks without\ncreating new security leaks.\n\n- Lucas\n\n\n\n"}}
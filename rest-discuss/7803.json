{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":184797058,"authorName":"Benjamin Carlyle","from":"Benjamin Carlyle &lt;benjamincarlyle@...&gt;","profile":"fuzzybsc","replyTo":"SENDER","senderId":"iTtp-p_OHwuQpoIZJEPyXktxBYFPpLcSmvEpC7MbNgyJ8dWvy3B0x2kMuqXoChEN7eTy6G17hjY0TWKJsEJ25oIp6z6VKrn0orLMivMu8PLY0_1Q2SFxYHU","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] modelling transactions","postDate":"1170550543","msgId":7803,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDExNzA1NTA1NDQuNTMwMi4xOC5jYW1lbEBsb2NhbGhvc3QubG9jYWxkb21haW4+","inReplyToHeader":"PDIwMDcwMjAyMDUxNjA0LkdBMTA0OTVAc2xpbmtwLmNvbT4=","referencesHeader":"PDIwMDcwMjAyMDUxNjA0LkdBMTA0OTVAc2xpbmtwLmNvbT4="},"prevInTopic":7797,"nextInTopic":7812,"prevInTime":7802,"nextInTime":7804,"topicId":7780,"numMessagesInTopic":17,"msgSnippet":"... There are two basic approaches here: 1. Model a transaction over multiple small edits 2. Make a resource available that allows the user to operate on the ","rawEmail":"Return-Path: &lt;benjamincarlyle@...&gt;\r\nX-Sender: benjamincarlyle@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 32365 invoked from network); 4 Feb 2007 00:55:54 -0000\r\nReceived: from unknown (66.218.67.35)\n  by m34.grp.scd.yahoo.com with QMQP; 4 Feb 2007 00:55:54 -0000\r\nReceived: from unknown (HELO mail12.syd.optusnet.com.au) (211.29.132.193)\n  by mta9.grp.scd.yahoo.com with SMTP; 4 Feb 2007 00:55:54 -0000\r\nReceived: from c210-49-93-69.rochd2.qld.optusnet.com.au (c210-49-93-69.rochd2.qld.optusnet.com.au [210.49.93.69])\n\tby mail12.syd.optusnet.com.au (8.13.1/8.13.1) with ESMTP id l140tiHc023451;\n\tSun, 4 Feb 2007 11:55:45 +1100\r\nTo: Paul Winkler &lt;pw_lists@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nIn-Reply-To: &lt;20070202051604.GA10495@...&gt;\r\nReferences: &lt;20070202051604.GA10495@...&gt;\r\nContent-Type: text/plain\r\nDate: Sun, 04 Feb 2007 10:55:43 +1000\r\nMessage-Id: &lt;1170550544.5302.18.camel@...&gt;\r\nMime-Version: 1.0\r\nX-Mailer: Evolution 2.6.3 \r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:0:0:0\r\nFrom: Benjamin Carlyle &lt;benjamincarlyle@...&gt;\r\nSubject: Re: [rest-discuss] modelling transactions\r\nX-Yahoo-Group-Post: member; u=184797058; y=C_8bbg2JMAguRrRCgZaSAe0Jyj7MmwVY-i8V-FKfGVFmk4A\r\nX-Yahoo-Profile: fuzzybsc\r\n\r\nOn Fri, 2007-02-02 at 00:16 -0500, Paul Winkler wrote:\n&gt; I&#39;ve never built a REST app but am thinking of going that direction\n&gt; with the next major version of a content repository API used by my\n&gt; employer. There&#39;s a few things I&#39;m not sure how to model, the main\n&gt; one being transactions. I&#39;m hoping for some guidance on my path to\n&gt; grokking REST.\n...\n&gt; But what about this use case? A third party comes along and licenses\n&gt; 10,000 documents to us. There are lots of cross-links among those\n&gt; documents, so a requirement in the contract is that we must load the\n&gt; entire set successfully, or none at all.\n\nThere are two basic approaches here:\n1. Model a transaction over multiple small edits\n2. Make a resource available that allows the user to operate on the\nentire state they want to modify as one request\n\nThe former has various implementations, but is painful to implement.\nPart of that pain is because it butts up against the &quot;stateless between\nrequests&quot; constraint of REST. You transmit a bit of what you want to do,\nthen another bit in another request, and then finally request that all\nof the bits you requested actually happen. This may be necessary if the\nclient has to consult current state during the transaction, however\nthinking of a REST service in the same way you think about a database is\nusually a mistake.\n\nMy suggestion is to use a resource that allows them to do everything\nthey want as one operation. Without a more detailed explaination of what\nthe customer might be doing it is hard to be specific, but let&#39;s look at\nan example where they want to publish a thousand atom articles:\n\n&gt;&gt;&gt;\nPOST http://example.com/newentries\n&lt;atom&gt;\n   &lt;entry&gt;\n     entry 1\n   &lt;/entry&gt;\n   &lt;entry&gt;\n     entry 2\n   &lt;/entry&gt;\n...\n   &lt;entry&gt;\n     entry 1000\n   &lt;/entry&gt;\n&lt;/atom&gt;\n&lt;&lt;&lt;\n200 OK\n\nYou can use a POE technique to ensure that this operation can be safely\nretried if the client recieves no response.\n\nWhat about updating existing entries? Perhaps something like this would\nwork:\n\nPUT http://example.com/select?entries=http://example.com/0001\n+http://example.com/0002...+http://example.com/1000\n&lt;atom&gt;\n   &lt;entry xml:base=&quot;http://example.com/0001&quot;&gt;\n     entry 1\n   &lt;/entry&gt;\n   &lt;entry xml:base=&quot;http://example.com/0002&quot;&gt;\n     entry 2\n   &lt;/entry&gt;\n...\n   &lt;entry xml:base=&quot;http://example.com/1000&quot;&gt;\n     entry 1000\n   &lt;/entry&gt;\n&lt;/atom&gt;\n\nWhether attributes to identify each entry being updated are needed or\nwhether the order can be determined by the query is probably up for\ndebate, as is whether or not xml:base has strong enough semantics to\nindicate which entry is which. This approach ultimately boils down to\nfinding a url that represents all of the data you want to update,\npreferrably by filling out a server-provided template or form to locate\nthe data.\n\nIn my opinion, online services of all kinds (From REST to WS-*) will\ntend to perform, scale and behave better when a single request is a\nsingle request. Once the request is received, it is the responsbility of\nthe service that recieves the request to ensure it is treated as an\natomic update.\n\nBenjamin\n\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":289191104,"authorName":"Jan Algermissen","from":"Jan Algermissen &lt;algermissen1971@...&gt;","profile":"algermissen1971","replyTo":"SENDER","senderId":"8jk__--ZePfATCjKzD1YedwG4e292J1GJuZOQIKBdeV7mbKdqLvWCbSiy_u9x-8X9L0wynCPR2smeklNAJoqcRGb7-LIkJTiT9epX6LEWYg","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Re: RESTful M2M Systems and Resource Typing","postDate":"1261437362","msgId":14314,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDVFRTE0RDJCLUYxOTItNEJDRS1BQkQ5LUM5RTJDNEYyM0FFNEBtYWMuY29tPg==","inReplyToHeader":"PGRlNzBiMzlkMDkxMjIxMTQ0N3Q2YzM1MDRlN2s4YTZhMDI2OTZhMmJkYTEwQG1haWwuZ21haWwuY29tPg==","referencesHeader":"PGhnbnBmaCtwcGZrQGVHcm91cHMuY29tPiA8MjZERUVBQTUtNTJCMi00QzQxLTlENDAtMEQ3MTZEMDFGMDc0QG1hYy5jb20+IDxkZTcwYjM5ZDA5MTIyMTExMTlzMTg4Y2E4ZDRzNWJlNGRhZDBiNzBlMTUwN0BtYWlsLmdtYWlsLmNvbT4gPEVFQTg0RTA5LTlFNDctNDEyNy04OUQzLTBFOTVENDlDMkFFREBtYWMuY29tPiA8ZGU3MGIzOWQwOTEyMjExNDQ3dDZjMzUwNGU3azhhNmEwMjY5NmEyYmRhMTBAbWFpbC5nbWFpbC5jb20+"},"prevInTopic":14313,"nextInTopic":14315,"prevInTime":14313,"nextInTime":14315,"topicId":14156,"numMessagesInTopic":134,"msgSnippet":"... That is simple with SOAP because the artifact to enforce is the API. The SLA would be around the API lifecycle (e.g. once an API is out, it has to persist","rawEmail":"Return-Path: &lt;algermissen1971@...&gt;\r\nX-Sender: algermissen1971@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 8838 invoked from network); 21 Dec 2009 23:16:59 -0000\r\nX-Received: from unknown (66.196.94.105)\n  by m2.grp.sp2.yahoo.com with QMQP; 21 Dec 2009 23:16:59 -0000\r\nX-Received: from unknown (HELO asmtpout012.mac.com) (17.148.16.87)\n  by mta1.grp.re1.yahoo.com with SMTP; 21 Dec 2009 23:16:59 -0000\r\nMIME-version: 1.0\r\nContent-type: text/plain; charset=ISO-8859-1; format=flowed; delsp=yes\r\nX-Received: from [192.168.2.102] ([84.144.117.28])\n by asmtp012.mac.com (Sun Java(tm) System Messaging Server 6.3-8.01 (built Dec\n 16 2008; 32bit)) with ESMTPSA id &lt;0KV0008ZJZARYD70@...&gt; for\n rest-discuss@yahoogroups.com; Mon, 21 Dec 2009 15:16:08 -0800 (PST)\r\nCc: Jorn Wildt &lt;jw@...&gt;, rest-discuss@yahoogroups.com\r\nMessage-id: &lt;5EE14D2B-F192-4BCE-ABD9-C9E2C4F23AE4@...&gt;\r\nTo: Noah Campbell &lt;noahcampbell@...&gt;\r\nIn-reply-to: &lt;de70b39d0912211447t6c3504e7k8a6a02696a2bda10@...&gt;\r\nContent-transfer-encoding: quoted-printable\r\nDate: Tue, 22 Dec 2009 00:16:02 +0100\r\nReferences: &lt;hgnpfh+ppfk@...&gt;\n &lt;26DEEAA5-52B2-4C41-9D40-0D716D01F074@...&gt;\n &lt;de70b39d0912211119s188ca8d4s5be4dad0b70e1507@...&gt;\n &lt;EEA84E09-9E47-4127-89D3-0E95D49C2AED@...&gt;\n &lt;de70b39d0912211447t6c3504e7k8a6a02696a2bda10@...&gt;\r\nX-Mailer: Apple Mail (2.936)\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Jan Algermissen &lt;algermissen1971@...&gt;\r\nSubject: Re: [rest-discuss] Re: RESTful M2M Systems and Resource Typing\r\nX-Yahoo-Group-Post: member; u=289191104; y=41SFCg_1mPnXpdhuxO_7n011f52gIEGhU1hs69UzGxOr-4FWdSYbIyfC\r\nX-Yahoo-Profile: algermissen1971\r\n\r\n\nOn Dec 21, 2009, at 11:47 PM, Noah Campbell wrote:\n\n&gt;\n&gt;\n&gt; &quot;This would lead=\r\n to &quot;If you are going to adopt REST with all the  \n&gt; benefits do it all the=\r\n way through and believe that the business  \n&gt; level harm occasionally done=\r\n by evolution costs far less than  \n&gt; running a SOAP architecture in the lo=\r\nng run.&quot;\n&gt;\n&gt; Basically, no.  If your notion that SOAP somehow solved the pr=\r\noblems  \n&gt; that you&#39;ve identified being an issue in REST then I&#39;m curious h=\r\now  \n&gt; you over came SOAP&#39;s shortcoming&#39;s.  If anything, SOAP is more rigid=\r\n  \n&gt; and this leads to increase cost in the face of change.  This has  \n&gt; n=\r\nothing to do with SOAP the architecture, but more SOAP the  \n&gt; implementati=\r\non.  WSDL has done more harm than good, IMO.  I&#39;ve seen  \n&gt; POX work really=\r\n well, but again it&#39;s a different architecture than  \n&gt; REST.\n&gt;\n&gt; I&#39;m curio=\r\nus how SLA enforcement is achieved with a SOAP architecture?\n\n\nThat is simp=\r\nle with SOAP because the artifact to enforce is the API.  \nThe SLA would be=\r\n around the API lifecycle (e.g. once an API is out, it  \nhas to persist for=\r\n three years). Not saying that the API is a  \nsufficient means to guarantee=\r\n stability but it expresses a fixed  \ncontract. WS-* simply excludes evolut=\r\nion without explicit versioning  \n(doo, hope that is really correct; not an=\r\n expert there). The SLA would  \nonly be violated if an existing API would g=\r\no away. The evolution issue  \nis done away with by tightly coupling the com=\r\nponents.\n\n(AFAIK anyway)\n\nJan\n\n\n&gt;\n&gt; -Noah\n&gt;\n&gt; On Mon, Dec 21, 2009 at 1:18 =\r\nPM, Jan Algermissen &lt;algermissen1971@... \n&gt; &gt; wrote:\n&gt; Noah,\n&gt;\n&gt; (see b=\r\nelow),\n&gt;\n&gt;\n&gt; On Dec 21, 2009, at 8:19 PM, Noah Campbell wrote:\n&gt;\n&gt; &quot;AtomPub=\r\n for example enables the client *implementor* to assume that  \n&gt; a GET on a=\r\n collection will return an Atom feed document.&quot;\n&gt;\n&gt; To your prior point, so=\r\nmething is broken, but what?  Is it the  \n&gt; architectural style (by asking =\r\nit on this mailing list it may be  \n&gt; that you think it is)?  Is it the tra=\r\nnsport HTTP?  Is it the  \n&gt; specification?  Is it the implementor of the se=\r\nrver or the client?   \n&gt; Is it something else?\n&gt;\n&gt; You focus on the assumpt=\r\nion being negative and rightly so, but lets  \n&gt; be formal about what an ass=\r\numption is.  You&#39;ve alluded to an  \n&gt; assumption not met as negative.\n&gt;\n&gt; I=\r\n is usually not that negative on the open Web because the overall  \n&gt; expec=\r\ntations are not that strict; people allways plan for any kinds  \n&gt; of chang=\r\nes to happen and REST advantage here is that the uniform  \n&gt; interface enab=\r\nles the communication (the talking to each other) to  \n&gt; succeed even if th=\r\nere is an error. Instead of everything falling  \n&gt; apart the client user or=\r\n developer can pick up the clue (e.g. the  \n&gt; 406 body) and follow her nose=\r\n to fix things.\n&gt;\n&gt; But this is a model that is very hard to sell inside th=\r\ne enterprise  \n&gt; because the business level contracts require a certain deg=\r\nree of  \n&gt; certainty (e.g. SLAs). Saying &quot;hey, if business transactions  \n&gt;=\r\n suddenly stop working, look at the lock file and see what the  \n&gt; service =\r\nowner suggested as a fix. Nah, this will not happen evry  \n&gt; often, just be=\r\n prepared for it in any case&quot;.\n&gt;\n&gt; OTH, it might be the price to pay for th=\r\ne evolvability extreme of  \n&gt; not needing any kind of out of band communica=\r\ntion between client and  \n&gt; server developer at all. Possibly, if you compa=\r\nre investment in time  \n&gt; and travel resources etc. involved in discussing =\r\ninterfaces of the  \n&gt; SOAP style with the cost of some missing transactions=\r\n it might even  \n&gt; make a compelling case. (Like airline rather pay custome=\r\nrs some  \n&gt; money for overbooked flights than to make sure that every passe=\r\nnger  \n&gt; definitely gets a seat. The latter just costs less).\n&gt;\n&gt; This woul=\r\nd lead to &quot;If you are going to adopt REST with all the  \n&gt; benefits do it a=\r\nll the way through and believe that the business  \n&gt; level harm occasionall=\r\ny done by evolution costs far less than  \n&gt; running a SOAP architecture in =\r\nthe long run.\n&gt;\n&gt;\n&gt; If I had to translate this into code it would look like=\r\n this:\n&gt;\n&gt; fread (buffer, 1, lSize, pFile)\n&gt;\n&gt; There is an assumption here =\r\ngiven all the variables are initialized  \n&gt; correctly.  Do you see it?\n&gt;\n&gt; =\r\nThe return value is not checked.  The read may not have read all the  \n&gt; da=\r\nta in the file in this particular call.  Who is the guilty party?   \n&gt; Is i=\r\nt the architecture, POSIX?  Is it the specification,http://www.cplusplus.co=\r\nm/reference/clibrary/cstdio/fread/? \n&gt;  Is it the implementation, GNU? Is i=\r\nt the implementor?  I&#39;d argue  \n&gt; it&#39;s the implementor.  C has a long estab=\r\nlished history of using  \n&gt; return values to indicate success (as well as r=\r\neturn values...but  \n&gt; errno provides a (kludgy?) workaround).\n&gt;\n&gt; I would =\r\nurge an implementer to understand the architecture style,  \n&gt; the specifica=\r\ntion, the implementation and focus very hard on making  \n&gt; sure assumptions=\r\n like the above are not scattered through out the  \n&gt; code.  Since REST is =\r\nabout two remote systems communicating, I&#39;d  \n&gt; argue that any client must =\r\nvalidate any assumption before  \n&gt; proceeding, including checking the error=\r\n code.  If not, the client  \n&gt; will be be brittle, prone to error, and cost=\r\n more in ongoing  \n&gt; maintenance.  Good, robust applications assume nothing=\r\n.\n&gt;\n&gt; Let&#39;s assume for a moment the AtomPub spec represents the typical  \n&gt;=\r\n spec for a service.  It assumes RESTful architectural style using  \n&gt; the =\r\nHTTP transport.  To your point, the service must behave has  \n&gt; specified f=\r\nor any goal to be obtained.   Aspects of the http  \n&gt; transport &quot;leak&quot; into=\r\n the interaction even those it has not been  \n&gt; specified.  The spec doesn&#39;=\r\nt call out all the different response  \n&gt; codes and how to handle them, it =\r\nrelies on those familiar with the  \n&gt; HTTP transport to deal with those gra=\r\ncefully.  Case in point, if you  \n&gt; do:\n&gt;\n&gt; GET /\n&gt; Accept: application/ato=\r\nmsvc+xml\n&gt;\n&gt; and get a\n&gt;\n&gt; 307: Moved Temporarily\n&gt; Location: /svc.atom\n&gt;\n&gt;=\r\n or\n&gt;\n&gt; 305: Use Proxy\n&gt; Location: /proxy/svc.atom\n&gt;\n&gt; or\n&gt;\n&gt; 401: Unauthor=\r\nized\n&gt; www-authenticate: basic\n&gt;\n&gt; Is this an error?\n&gt;\n&gt; Roy thesis doesn&#39;t=\r\n explicitly say yes or no.  However, the argument  \n&gt; for a uniform interfa=\r\nce is that the intermediary can participate  \n&gt; without affecting the remot=\r\ne call.  I&#39;ll extrapolate a little in  \n&gt; that a uniform interface provides=\r\n a common behavior that permeates  \n&gt; all levels of an architecture, includ=\r\ning the implementation.  The  \n&gt; testers should be not be surprised to see =\r\nthe 3 response outline  \n&gt; above and should be able to accommodate appropri=\r\nately.\n&gt;\n&gt;\n&gt; Agreed and I see your point. But (sorry :-) I&#39;d expect an HTTP=\r\n  \n&gt; client connector to be able to follow these redirects or  \n&gt; authentic=\r\nate on its own without even propagating it to the next  \n&gt; level. Most clie=\r\nnt connectors do so (depending on config of course).  \n&gt; So, I&#39;d limit what=\r\n we are talking about to steady states and leave  \n&gt; out the transient ones=\r\n.\n&gt;\n&gt; However, I understand you to say that an AtomPub client  \n&gt; implement=\r\nation that uses an HTTP client connector must of course  \n&gt; implement all o=\r\nf HTTP. And yes, I agree that the 406 must be handled  \n&gt; correctly. But th=\r\nen? there is no possible recovery from the broken  \n&gt; expectation to receiv=\r\ne an Atom feed.\n&gt;\n&gt;\n&gt;\n&gt; Hopefully this response helps move the discussion f=\r\norward :)\n&gt;\n&gt; Thanks for keeping up with this. I am just sorry that I seem =\r\nto be  \n&gt; so unable to get this accross.\n&gt;\n&gt; Jan\n&gt;\n&gt;\n&gt;\n&gt;\n&gt; -Noah\n&gt;\n&gt; On Mon=\r\n, Dec 21, 2009 at 4:35 AM, Jan Algermissen &lt;algermissen1971@... \n&gt; &gt; wr=\r\note:\n&gt;\n&gt; On Dec 21, 2009, at 1:25 PM, Jorn Wildt wrote:\n&gt;\n&gt; &gt; Oh, lets back=\r\ntrack a bit. You said earlier on:\n&gt; &gt;\n&gt; &gt;&gt; In the enterprise people want to=\r\n develop clients and services in\n&gt; &gt;&gt; parallel, shich rules out client desi=\r\ngn by inspecting the runtime\n&gt; &gt;&gt; behavior of a service.\n&gt; &gt;\n&gt; &gt; Then I sai=\r\nd: you need not expect at runtime, you can have a mock. To\n&gt; &gt; this you ans=\r\nwered: no, you build clients on specs.\n&gt; &gt;\n&gt; &gt; What I was trying to say was=\r\n: if you build clients on specs and RFC\n&gt; &gt; 5023 (application/atomsrv+xml) =\r\nis a spec, then what is keeping you\n&gt; &gt; from building any kind of REST clie=\r\nnt on similar specs for other\n&gt; &gt; media types? If both server and client ag=\r\nrees on the media type spec\n&gt; &gt; then both can be built individually and sim=\r\nultaneously.\n&gt;\n&gt;\n&gt; No, that is all fine and I agree. I am questioning the R=\r\nESTfulness of\n&gt; specs that allow the clients to make assumptions about the =\r\nhypermedia\n&gt; it will receive at some point in the interaction. AtomPub for =\r\nexample\n&gt; enables the client *implementor* to assume that a GET on a collec=\r\ntion\n&gt; will return an Atom feed document. This is equivalent to making an\n&gt;=\r\n assumption about the application state to be in after the GET to the\n&gt; col=\r\nlection.\n&gt;\n&gt; And I am trying to say that M2M clients (besides passibe, serv=\r\ner\n&gt; driven crawlers) can only be built when such contracts are in place.\n&gt;=\r\n\n&gt; Jan\n&gt;\n&gt;\n&gt; &gt;\n&gt; &gt; /J=F8rn\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt; --------------------------------=\r\n----\n&gt; &gt;\n&gt; &gt; Yahoo! Groups Links\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt;\n&gt; --------------------------=\r\n------------\n&gt; Jan Algermissen\n&gt;\n&gt; Mail: algermissen@...\n&gt; Blog: http:/=\r\n/algermissen.blogspot.com/\n&gt; Home: http://www.jalgermissen.com\n&gt; ----------=\r\n----------------------------\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt; ----------------------------------=\r\n--\n&gt;\n&gt; Yahoo! Groups Links\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt; ------------------------------------=\r\n--\n&gt; Jan Algermissen\n&gt;\n&gt; Mail: algermissen@...\n&gt; Blog: http://algermiss=\r\nen.blogspot.com/\n&gt; Home: http://www.jalgermissen.com\n&gt; --------------------=\r\n------------------\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt; \n\n--------------------------------------\nJ=\r\nan Algermissen\n\nMail: algermissen@...\nBlog: http://algermissen.blogspot=\r\n.com/\nHome: http://www.jalgermissen.com\n-----------------------------------=\r\n---\n\n\n\n\n"}}
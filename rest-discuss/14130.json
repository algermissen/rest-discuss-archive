{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":401876259,"authorName":"Will Hartung","from":"Will Hartung &lt;willh@...&gt;","profile":"gaminginparis","replyTo":"SENDER","senderId":"teWIeuFehIaV9fn638rMygYvoCcDWmr5qSnLmuTvUeAhQzhb5iy_4HHwCZCU5n-7jMdjxbdPcBnD1hByvE0yM_xUPKfiLNmzQw","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] The &quot;purist&quot; C# REST client?","postDate":"1260553728","msgId":14130,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDM5MTVjNjlkMDkxMjExMDk0OG03NTM4OWI1Zmw2Y2IwZmI1ZjMxODY1ZDk1QG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PGI1NDhkZjY1MDkxMjExMDc0NXU3YzEwZmU2Yms0YjRkYzBlY2E2ZWU3NGMxQG1haWwuZ21haWwuY29tPg==","referencesHeader":"PEI1QUM5MEYyODQ5MzQ5OEI5MEU2MjAzRERFMkE0RTY1QEpyblBDPgkgPDM5MTVjNjlkMDkxMjA5MTU0OGk1N2Q4MTZiZGszY2QxMzAxODYzYzVlM2I3QG1haWwuZ21haWwuY29tPgkgPDE2NEQwMjQ2MDRGMDRDNkVCQjlDOEI5MUFGNkMwN0M0QEpyblBDPgkgPDRCMjI1RDY0LjYwOTAwMDVAaGFja2NyYWZ0Lm5ldD4gPDRCMjI2NjgzLjIwNzA5MDdAaGFja2NyYWZ0Lm5ldD4JIDxiNTQ4ZGY2NTA5MTIxMTA3NDV1N2MxMGZlNmJrNGI0ZGMwZWNhNmVlNzRjMUBtYWlsLmdtYWlsLmNvbT4="},"prevInTopic":14126,"nextInTopic":0,"prevInTime":14129,"nextInTime":14131,"topicId":14110,"numMessagesInTopic":12,"msgSnippet":"... Observationally, it seems to me that the Hard part about REST via HTTP is at the protocol layer, especially since a lot of the operational burden is on","rawEmail":"Return-Path: &lt;willh@...&gt;\r\nX-Sender: willh@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 99819 invoked from network); 11 Dec 2009 17:48:49 -0000\r\nX-Received: from unknown (98.137.34.46)\n  by m1.grp.sp2.yahoo.com with QMQP; 11 Dec 2009 17:48:49 -0000\r\nX-Received: from unknown (HELO mail-yw0-f178.google.com) (209.85.211.178)\n  by mta3.grp.sp2.yahoo.com with SMTP; 11 Dec 2009 17:48:48 -0000\r\nX-Received: by ywh8 with SMTP id 8so1174327ywh.3\n        for &lt;rest-discuss@yahoogroups.com&gt;; Fri, 11 Dec 2009 09:48:48 -0800 (PST)\r\nMIME-Version: 1.0\r\nX-Received: by 10.101.136.3 with SMTP id o3mr2524536ann.173.1260553728372; Fri, \n\t11 Dec 2009 09:48:48 -0800 (PST)\r\nIn-Reply-To: &lt;b548df650912110745u7c10fe6bk4b4dc0eca6ee74c1@...&gt;\r\nReferences: &lt;B5AC90F28493498B90E6203DDE2A4E65@JrnPC&gt;\n\t &lt;3915c69d0912091548i57d816bdk3cd1301863c5e3b7@...&gt;\n\t &lt;164D024604F04C6EBB9C8B91AF6C07C4@JrnPC&gt;\n\t &lt;4B225D64.6090005@...&gt; &lt;4B226683.2070907@...&gt;\n\t &lt;b548df650912110745u7c10fe6bk4b4dc0eca6ee74c1@...&gt;\r\nDate: Fri, 11 Dec 2009 09:48:48 -0800\r\nMessage-ID: &lt;3915c69d0912110948m75389b5fl6cb0fb5f31865d95@...&gt;\r\nTo: mike amundsen &lt;mamund@...&gt;\r\nCc: Jon Hanna &lt;jon@...&gt;, rest-discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Will Hartung &lt;willh@...&gt;\r\nSubject: Re: [rest-discuss] The &quot;purist&quot; C# REST client?\r\nX-Yahoo-Group-Post: member; u=401876259; y=Z4nhAcw3f-atcgSD8VcLLNYUJxAVRtVDSrdL2O__aiuRdjHnnhIAFQ\r\nX-Yahoo-Profile: gaminginparis\r\n\r\nOn Fri, Dec 11, 2009 at 7:45 AM, mike amundsen &lt;mamund@...&gt; wrote:\n\n&gt; My experience was that binding caching too tightly to the request\n&gt; object (burying it, really) was not a good idea. When I&#39;m coding my\n&gt; HTTP apps, I want control over this, not auto-magic stuff. Also,\n&gt; sometimes I can count on an existing cache infrastructure between my\n&gt; app (client or server) and the WWW. When that happens, I need very\n&gt; little caching work done within the library itself.\n&gt;\n&gt; IMO, the really important item in this area is proper support for\n&gt; conditional requests. Supporting GET is pretty straight-forward, PUT\n&gt; gets messy.\n\nObservationally, it seems to me that the &quot;Hard&quot; part about REST via\nHTTP is at the protocol layer, especially since a lot of the\noperational burden is on the client.\n\nOn the server, the logic is reasonably straightforward, especially\nsince the transaction is stateless. But the client has to handle the\ntask of behaving properly, and it is NOT stateless. A simple GET isn&#39;t\nnecessarily so simple when you consider all of the possible result\ncases and caching. Similarly, POST and PUT have their struggles as\nwell, such as redirects, conditional operations, and even things like\n100-Continue.\n\nAmplifying this is the fact that most folks use so little of the HTTP\nprotocol, and suddenly the &quot;ubquitous&quot;, &quot;oh it&#39;s just HTTP&quot; simplicity\nbecome &quot;Oh, you mean THAT HTTP, this is harder than I thought&quot;.\n\nRegards,\n\nWill Hartung\n(willh@...)\n\n"}}
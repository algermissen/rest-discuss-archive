{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"eec8edyAlwa10NTV--eZk3HSOZ1IDMibWpsZPJYyc37sUlqZjqmrIMqAMFDy-wL9NqZdjPDLS-fqQFO5ezp_obLGM421dJ03z_dAqkjvVg","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] An approach to deleting multiple resources use one  DELETE","postDate":"1237556115","msgId":12285,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMDkwMzIwMDczNTE1LmQ1MTQ5YWIxLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","inReplyToHeader":"PEJMVTEwMi1EUzY4NzA3NUY2MjNEMkM2OTRDOTA3OEI1OTcwQHBoeC5nYmw+","referencesHeader":"PGU3OGJkYmMwMDkwMjI0MDczOHY0ODRkNmU5NGg0NDQ5ZWIwYjY3YTI4ZDJlQG1haWwuZ21haWwuY29tPgk8MjAwOTAzMTgxNTE5MzYuNDkzMzlmZTQuZXJpY0BiaXNvbnN5c3RlbXMubmV0Pgk8NTAzN2I2ZTQwOTAzMTgxNDI1cDY2Y2E1NzhldWY2NWIzNDAyN2NkY2I4YWVAbWFpbC5nbWFpbC5jb20+CTwyMDA5MDMxODE2MzYwMS40MDQ3ZDA2Yi5lcmljQGJpc29uc3lzdGVtcy5uZXQ+CTw1MDM3YjZlNDA5MDMxODE2MzhuNTVhYWM3ZTBuMzdkMjJkYzNiYzE0YjE3MEBtYWlsLmdtYWlsLmNvbT4JPDIwMDkwMzE4MjEwNTI3LmZlNDJkYWZlLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPDUwMzdiNmU0MDkwMzE5MDA0MXI1MzYwZTA4ZGlmNzE4ZTI3MDQ5MDQwYTljQG1haWwuZ21haWwuY29tPgk8MjAwOTAzMTkwMjA2MDMuMjk5NDBhZTYuZXJpY0BiaXNvbnN5c3RlbXMubmV0Pgk8NTAzN2I2ZTQwOTAzMTkwMTE4aDM4YjhmMDRkeTQzZWIxNzE4YTIwYjEyOGNAbWFpbC5nbWFpbC5jb20+CTwyMDA5MDMxOTAzMTUzOC41ODllZjdhNi5lcmljQGJpc29uc3lzdGVtcy5uZXQ+CTwyZmE1NTQ0NzA5MDMxOTA1MDNrM2ZjMWM4ZjB0ZWM5NTI2MDgwNWJjYzRjZkBtYWlsLmdtYWlsLmNvbT4JPDIwMDkwMzIwMDMzMTM2LjE2OThkNGY2LmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPEJMVTEwMi1XNUY1NzhENDJCRDU4OUMwQTFBRTFCQjU5NzBAcGh4LmdibD4JPDIwMDkwMzIwMDUyODE2LjFlMzRiMmE2LmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPEJMVTEwMi1EUzY4NzA3NUY2MjNEMkM2OTRDOTA3OEI1OTcwQHBoeC5nYmw+"},"prevInTopic":12284,"nextInTopic":12286,"prevInTime":12284,"nextInTime":12286,"topicId":12154,"numMessagesInTopic":112,"msgSnippet":"... Yes, but having the deletion of a collection trigger the deletion of all its members is a library function.  Not something visible that can be counted on.","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 30857 invoked from network); 20 Mar 2009 13:34:53 -0000\r\nX-Received: from unknown (69.147.108.201)\n  by m5.grp.sp2.yahoo.com with QMQP; 20 Mar 2009 13:34:52 -0000\r\nX-Received: from unknown (HELO mxout-08.mxes.net) (216.86.168.183)\n  by mta2.grp.re1.yahoo.com with SMTP; 20 Mar 2009 13:34:52 -0000\r\nX-Received: from BigBison (unknown [65.117.211.162])\n\t(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))\n\t(No client certificate requested)\n\tby smtp.mxes.net (Postfix) with ESMTPSA id 8A216D0A83;\n\tFri, 20 Mar 2009 09:34:51 -0400 (EDT)\r\nDate: Fri, 20 Mar 2009 07:35:15 -0600\r\nTo: &quot;Sebastien Lambla&quot; &lt;seb@...&gt;\r\nCc: &lt;amsmota@...&gt;, &lt;rest-discuss@yahoogroups.com&gt;\r\nMessage-Id: &lt;20090320073515.d5149ab1.eric@...&gt;\r\nIn-Reply-To: &lt;BLU102-DS687075F623D2C694C9078B5970@...&gt;\r\nReferences: &lt;e78bdbc00902240738v484d6e94h4449eb0b67a28d2e@...&gt;\n\t&lt;20090318151936.49339fe4.eric@...&gt;\n\t&lt;5037b6e40903181425p66ca578euf65b34027cdcb8ae@...&gt;\n\t&lt;20090318163601.4047d06b.eric@...&gt;\n\t&lt;5037b6e40903181638n55aac7e0n37d22dc3bc14b170@...&gt;\n\t&lt;20090318210527.fe42dafe.eric@...&gt;\n\t&lt;5037b6e40903190041r5360e08dif718e27049040a9c@...&gt;\n\t&lt;20090319020603.29940ae6.eric@...&gt;\n\t&lt;5037b6e40903190118h38b8f04dy43eb1718a20b128c@...&gt;\n\t&lt;20090319031538.589ef7a6.eric@...&gt;\n\t&lt;2fa554470903190503k3fc1c8f0tec95260805bcc4cf@...&gt;\n\t&lt;20090320033136.1698d4f6.eric@...&gt;\n\t&lt;BLU102-W5F578D42BD589C0A1AE1BB5970@...&gt;\n\t&lt;20090320052816.1e34b2a6.eric@...&gt;\n\t&lt;BLU102-DS687075F623D2C694C9078B5970@...&gt;\r\nOrganization: Bison Systems Corporation\r\nX-Mailer: Sylpheed 2.4.5 (GTK+ 2.10.14; i686-pc-mingw32)\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=US-ASCII\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nSubject: Re: [rest-discuss] An approach to deleting multiple resources use\n one  DELETE\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\nSebastien Lambla wrote:\n\n&gt; \n&gt; If I want to delete 3 orders because one credit card has been\n&gt; rejected, I can either delete them sequentially (and potentially end\n&gt; up in an inconsistent internal state), or group them together as\n&gt; another resource (let&#39;s say ordersForCreditCardXxx) and delete that\n&gt; resource as a unit.\n&gt; \n\nYes, but having the deletion of a collection trigger the deletion of\nall its members is a library function.  Not something visible that can\nbe counted on.  Please refer to Roy&#39;s blog post, &quot;REST APIs must be\nhypertext-driven&quot;...\n\n&quot;\nA REST API should never have &#39;typed&#39; resources that are significant to\nthe client. Specification authors may use resource types for describing\nserver implementation behind the interface, but those types must be\nirrelevant and invisible to the client.\n&quot;\n\nThe key here is &quot;behind the interface&quot;.  A stored procedure happens\nbehind the interface; a batch request is made by the client.\n\nIf deleting ordersForCreditCardXxx triggers the deletion of other\nresources which may be individually deleted by calling their own DELETE\nmethods, then you do _not_ have &quot;a consistent set of semantics for all\nresources&quot;.  You have &quot;typed&quot; resources that are significant to the\nclient, i.e. unlike other resources on the system will behave a certain\nway.\n\n&quot;\nFailure here implies that clients are assuming a resource structure due\nto out-of band information, such as a domain-specific standard, which\nis the data-oriented equivalent to RPC&#39;s functional coupling.\n&quot;\n\n&gt;\n&gt; The idea that somehow those scenarios are not needed, or that retry\n&gt; and pray semantics of deleting multiple resources is usable in every\n&gt; situation is completely alien to me. Those are real-world scenarios\n&gt; where you are trying to do multiple things as a unit, not to save\n&gt; network calls or bandwidth, but because they belong logically to the\n&gt; same operation.\n&gt; \n\nOK, atomicity, I&#39;m not a DB jock so that doesn&#39;t naturally occur to\nme.  I didn&#39;t mean to imply that those scenarios aren&#39;t valid, just\nthat they aren&#39;t natural candidates for REST.  Unless, of course, we\nimplement Code on Demand for those scenarios so they can still use a\nuniform interface and be visible to intermediaries.\n\n&gt;\n&gt; Having such a composite resource you can delete on is perfectly\n&gt; reasonable. Yes the caches won&#39;t see it, but that&#39;s a trade-off you\n&gt; have to decide for yourself: is the cache consistency more important\n&gt; than the resulting state of my resource(s).\n&gt; \n\nYes, perfectly reasonable, just like I mentioned in the thread I\nstarted about using an HTML form and a POST handler for this sort of\nthing.  Just accept that an aspect of your API isn&#39;t REST and move on,\nit isn&#39;t the end of the world.\n\nThe individual members of a collection have DELETE methods, and the\nproper way to delete a resource is to call its DELETE method.\n\nIf you want the deletion of a collection to also delete every member of\nthe collection, by calling the DELETE method of the collection, you no\nlonger have a uniform interface, because you no longer have a\nconsistent set of semantics for all resources, because some of your\nresources have DELETE semantics assigned to the DELETE method\n(members), while other resources have BDELETE semantics assigned to the\nDELETE method (collections).\n\n&gt;\n&gt; To add insult to injury, intermediaries are not required to actually\n&gt; stale a representation upon receiving a DELETE. And the very nature\n&gt; of proxies as they&#39;re used today means that while your proxy may well\n&gt; delete the representation, mine won&#39;t, putting us exactly where we\n&gt; were.\n&gt; \n\nNo, it doesn&#39;t put us where we were.  Just because part of a standard\ndoesn&#39;t say &#39;MUST&#39; is no reason to throw our hands up in the air and\nproclaim that it won&#39;t ever work for anybody so why bother at all...\n\nIntermediaries SHOULD expire all representations of a resource it sees\na DELETE request for.  RFC 2119 explains SHOULD to mean, &quot;the full\nimplications must be understood and carefully weighed before choosing a\ndifferent course.&quot;  In this case, I&#39;m not sure anyone&#39;s come up with a\nvalid reason not to expire on DELETE, but I still don&#39;t think it merits\na &quot;MUST&quot;.\n\nBy not using DELETE, instead of this mechanism most likely working, it\ncan&#39;t possibly work.  That is not where we were using DELETE.\n\n&gt;\n&gt; At the end of the day, if you value your squid cache beyond the\n&gt; inherent atomicity of certain operations, you&#39;re quite free to do so.\n&gt; It&#39;s a tradeoff. But, IMHO, neither approaches are unrestful, by\n&gt; nature or by definition.\n&gt; \n\nDon&#39;t misstate the argument.  At the end of the day, I value the\nscalability of the uniform interface beyond the difficulty of either\nimplementing an Xforms interface to allow a user to mark a bunch of\nURIs for deletion which then DELETEs each one, or implementing Code on\nDemand for batch deletion if at some point I find atomicity to be\nimportant to an application I&#39;m working on.\n\nAssigning DELETE semantics to some resources&#39; DELETE method, while\nassigning BDELETE semantics to other resources&#39; DELETE method within\nthe same application, is the antithesis of a REST API.\n\n-Eric\n\n"}}
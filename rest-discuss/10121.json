{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":228155998,"authorName":"Mike Schinkel","from":"&quot;Mike Schinkel&quot; &lt;mikeschinkel@...&gt;","profile":"mikeschinkel","replyTo":"SENDER","senderId":"z3D3tRDloqybd-_NoR6d95FTm7VS-wKKvO7ejLlHQipvnyJdus5xFbqhbVCvy4IopTKiCwX2m-MDzMdRDf4C0QU2qOOegXepmzPVIKa1RQ","spamInfo":{"isSpam":false,"reason":"12"},"subject":"RE: [rest-discuss] Re: RESTful design for Articles & Tags?","postDate":"1198940173","msgId":10121,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDA4OWQwMWM4NGEyYSRmNzYxNzNlMCQwNzAyYThjMEBHdWlkZXMubG9jYWw+","inReplyToHeader":"PFcyOTE4OTU2MDg2MzE0MTE5ODkyOTg3M0BtYWlsLm1haWxzbmFyZS5uZXQ+","referencesHeader":"PFcyOTE4OTU2MDg2MzE0MTE5ODkyOTg3M0BtYWlsLm1haWxzbmFyZS5uZXQ+"},"prevInTopic":10120,"nextInTopic":10122,"prevInTime":10120,"nextInTime":10122,"topicId":9891,"numMessagesInTopic":99,"msgSnippet":"Eric J. Bowman wrote ... Yes, but when did I say we are dealing with nails? ... No, not exactly. It is a system for managing content (vs. just documents), and","rawEmail":"Return-Path: &lt;mikeschinkel@...&gt;\r\nX-Sender: mikeschinkel@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 35632 invoked from network); 29 Dec 2007 14:56:21 -0000\r\nX-Received: from unknown (66.218.67.96)\n  by m50.grp.scd.yahoo.com with QMQP; 29 Dec 2007 14:56:21 -0000\r\nX-Received: from unknown (HELO hs-out-2122.google.com) (64.233.178.246)\n  by mta17.grp.scd.yahoo.com with SMTP; 29 Dec 2007 14:56:21 -0000\r\nX-Received: by hs-out-2122.google.com with SMTP id 23so4688395hsn.2\n        for &lt;rest-discuss@yahoogroups.com&gt;; Sat, 29 Dec 2007 06:56:20 -0800 (PST)\r\nX-Received: by 10.150.12.5 with SMTP id 5mr402989ybl.39.1198940180501;\n        Sat, 29 Dec 2007 06:56:20 -0800 (PST)\r\nReturn-Path: &lt;mikeschinkel@...&gt;\r\nX-Received: from desktop ( [69.94.221.21])\n        by mx.google.com with ESMTPS id 74sm12218140wra.37.2007.12.29.06.56.14\n        (version=SSLv3 cipher=RC4-MD5);\n        Sat, 29 Dec 2007 06:56:18 -0800 (PST)\r\nTo: &lt;eric@...&gt;,\n\t&lt;rest-discuss@yahoogroups.com&gt;\r\nReferences: &lt;W29189560863141198929873@...&gt;\r\nDate: Sat, 29 Dec 2007 09:56:13 -0500\r\nKeywords: Archived\r\nMessage-ID: &lt;089d01c84a2a$f76173e0$0702a8c0@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain;\n\tcharset=&quot;us-ascii&quot;\r\nContent-Transfer-Encoding: 7bit\r\nX-Mailer: Microsoft Office Outlook 11\r\nThread-Index: AchKEv+11OKmXjoESBiODVYpThtqBAADd3uA\r\nIn-Reply-To: &lt;W29189560863141198929873@...&gt;\r\nX-MimeOLE: Produced By Microsoft MimeOLE V6.00.2900.3198\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Mike Schinkel&quot; &lt;mikeschinkel@...&gt;\r\nSubject: RE: [rest-discuss] Re: RESTful design for Articles & Tags?\r\nX-Yahoo-Group-Post: member; u=228155998; y=61vzKR2XpTyR0ZXcrDWehdDR6z6nD_kk0o77jd9fmk79u7i_etsN\r\nX-Yahoo-Profile: mikeschinkel\r\n\r\n Eric J. Bowman wrote\n&gt; But, if you *are* dealing with nails, isn&#39;t the appropriate \n&gt; tool a hammer?  \n\nYes, but when did I say we are dealing with nails?\n\n&gt; What I mean is, Drupal is a system for managing HTML \n&gt; documents, right?  \n\nNo, not exactly. It is a system for managing content (vs. just documents),\nand in the broader sense it is a framework for writing web apps.  \n\nPigeonholing it as a system for managing HTML documents is doing it and its\ncommunity a huge disservice.\n\n&gt; So, what is the point of using a SQL \n&gt; database for this task, as opposed to say, an XML database \n&gt; which *is* designed to handle marked-up documents?  \n\nWell, uh, because Drupal uses MySQL to store its content?\n\nBesides, I once tried for about six months to use XML to store documents and\nit turned out to be the biggest nightmare project I ever undertook, and it\nfailed miserably.  So why would I want to use an XML database?  \n\n&gt; If you \n&gt; insist that documents must be derived from SQL databases, \n&gt; then yes, perhaps JSON is a better alternative.  \n\nIf *I* insist?  Why not learn something about the open-source project before\nassigning me the responsibility of having selected the backend.  (Even so, I\nwould not these days ever choose an XML database...)\n\n&gt; But, I see \n&gt; collections of marked-up documents as an ideal use of XML, \n&gt; specifically Atom.  We aren&#39;t talking about some theoretical \n&gt; problem here, we&#39;re talking about documents and discussion \n&gt; threads and such, which model a lot better as Atom than they \n&gt; do as SQL, IMHO.\n\nIn that case, why not go over to http://drupal.org and start a discussion\nthread there telling them how everyone in the comminity has been getting it\nwrong all this time and that everyone using Drupal should immediately stop\nwhat they are doing and port to an XML database?\n\nSorry, your assertion was just so over-the-top I couldn&#39;t resist the\nsarcasm.\n \n&gt; &gt; ...they must be deployed and JSON parsing directly to objects is \n&gt; &gt; deployed by default in browsers.\n&gt; &gt;\n&gt; \n&gt; Granted, JavaScript is deployed in more browsers than XML, \n&gt; but I wouldn&#39;t go so far as to call it a default.  \n\nYou are splitting hairs.\n\n&gt; I would go \n&gt; so far as to say that, where XML has been deployed in \n&gt; browsers, it is much more consistent cross-platform than \n&gt; JavaScript.  \n\nI don&#39;t have the expertise to confirm or deny, but the point was that &quot;When\ncomparing ... it seems clear that the XML version takes more code ( in the\nbrowser than when using JSON) and requires a layer of mental indirection as\nthe developer has to be knowledgeable about XML APIs and their\nidiosyncracies.&quot;  This is just quoting Dare Obasanjo:\n\nhttp://www.25hoursaday.com/weblog/PermaLink.aspx?guid=39842a17-781a-45c8-ade\n5-58286909226b\n\n&gt; Developing and debugging AJAX applications \n&gt; cross-browser is 100 times more of a chore than XSLT apps.\n\nI strongly disagree with that assertion.  I worked on a failed project I\npreviously referenced that used XSLT, and as it grew it became more and more\nfragile to the point of being completely unworkable. The side effects that\ncan results from an XSLT transform and their unintended consequents are\nlegendary.\n\n&gt; A web service which requires me to use XSLT is using \n&gt; standards that anyone can look up and implement (if needed), \n\nTrue XSLT is a standard, but just because it made it&#39;s way to a standard\ndoesn&#39;t mean it was a good idea.  Group-think is, has always been, and will\nalways be alive in standard&#39;s processes.\n\n&gt; whereas a service feeding me JSON is requiring me to opt-in \n&gt; to a code library to understand how objects are converted \n&gt; into markup, and understand the client-by-client \n&gt; implementation differences.  \n\nUsing XSLT requires one to opt-in to a XSLT library, and I know from\nexperience the pain of experience the differences there are between those.\nThe things you can&#39;t do is XSLT that Microsoft&#39;s version allows are really\npathetic.  I&#39;d quote them if I hadn&#39;t blocked most of my XSLT knowledge from\nmemory.\n\nTransforming JSON is trivial: http://ajaxian.com/archives/transforming-json\n\nJSON is just not as mature as XML, but that&#39;s rapidly changing.  \n\nBy the same token Windows NT Server is more mature than Windows 2003 Server,\nbut you don&#39;t see too many people choosing the former over the latter.\n\n&gt;  Such a service would have a much \n&gt; steeper learning curve and greater maintenance hassles, than \n&gt; a system which accomplishes the same thing using Atom + XSLT.\n\nThat is a non-sequitur.  I&#39;ve already mentioned my painful experience that\nany XSLT app which is anything larger than trivial is a maintenance\nnightmare.  By its very nature XSLT is fragile and effectively impossible to\ntest because of XSLT&#39;s side-effecty nature. Conversely you can unit test\nJavascript (or any number of other similar languages) and ensure that a unit\nof code works as intended and always will. \n\nBut the irony of this argument is I don&#39;t really need to make it.  A large\nnumber of developers are using JSON/Javascript instead of XML/XSLT for the\nvery reasons I mention; it is just a whole lot easier to use JSON than XML\nin the browser. That may frustrate those enamored with XML/XSLT, but\ndevelopers are voting with their feet and all those advocating XML can&#39;t\nstop it.\n\nMy guess is someone will eventually create an Atom-to-JSON convertor, and\nthen someone else will create an Atom equivalent in JSON and who knows where\nthat might take us.\n\nOh wait, it&#39;s already happening!  http://www.google.com/search?q=json+atom\n:-)\n \nListen, the reason I&#39;m arguing strongly for JSON and against XML is because\nof the cargo-cultist mentality regarding XML that I seem to have unearthed\nhere. I&#39;m not really anti-XML (though I am anti XSLT and anti- for overdoing\nnamespaces, especially as namespaces identified by non-deferenceable URIs),\nI&#39;m just seeing that is many times easier to work with JSON in the browser.\nThe fact you have to defend XML tells me though doth protest too much.\n\n&gt; Isn&#39;t that a much lighter-weight solution?  Opera is on the \n&gt; verge (9.5 is in\n&gt; beta) of adding the document() function, making all the major \n&gt; browsers XSLT- compatible (even if Microsoft doesn&#39;t follow \n&gt; the standards, quite).  Which means a server can send Atom to \n&gt; browsers, with an XML PI to fire off a client-side XSLT \n&gt; transformation, which only needs to be coded once as it is \n&gt; only a couple of lines different from the identical XSLT code \n&gt; on the server, which can generate HTML for clients that don&#39;t \n&gt; have XSLT.\n&gt; \n&gt; With this JSON/AJAX approach, the fallback for browsers with \n&gt; no JavaScript would be what, PHP?  \n\nSure.  But it could also be done in Python, Ruby, Perl, Lisp, Java, C#,\nVB.NET, VBScript...\n\nAs you say, it only needs to be coded once (per language.)\n\n&gt; So that&#39;s PHP and \n&gt; JavaScript being used to accomplish the transformation task \n\nAnd the problem is?\n\n&gt; XSLT was designed for, \n\nYou forgot to insert &quot;poorly&quot; between &quot;was&quot; and &quot;designed&quot;...  &#39;-)\n\n&gt;&gt; except with twice the labor overhead.  \n\nHow is it twice the overhead?  \n\nBesides, groking XSLT takes an order of magnitude more mental effort for\nmost people.\n\nWhen are all the really smart people who can understand what most people\ncan&#39;t going to learn that simplistic and easy keeps winning the war on the\nweb over advanced and difficult?  It took a really long time for me to\naccept that myself, but now that I&#39;ve seen the light, well as they say there\nare none more zealous than the recently converted.\n\n&gt; Using Atom + XSLT, the fallback for clients that don&#39;t grok \n&gt; XSLT is Atom, much more likely to be understood as a raw \n&gt; document than JSON.\n\nHow is it more likely to be understood?  JSON has fewer non-data syntax\ncharacters than XML that would otherwise confuse the uninitiated.\n\n&gt; OK, OK, I&#39;ll post an URL to illustrate, but please bear in \n&gt; mind this is alpha code and needs a major rewrite, especially \n&gt; conneg.  For now, all versions of Safari and Firefox are \n&gt; treated as XSLT clients, and all versions of Opera are \n&gt; treated as non-XSLT clients.  Which is why I use cookies as \n&gt; part of conneg, so you can override conneg using an \n&gt; (optional) parameter on the URL and bookmark individual variants...\n&gt; \n&gt; Anyway, give this a try:\n&gt; \n&gt; http://ericjbowman.com/2006/aug/09/11;view=xslt\n\nNOW I see why you are arguing to strenously for XML & XSLT.  If you accepted\nthat I was right about JSON you&#39;d have to accept that all your efforts on\nour XML+XSLT project were for naught.  Knowing human nature&#39;s need to\njustify its decisions, I really probably should not be arguing this with you\nbecause even if I&#39;m right your efforts on XSLT would make it hard for you to\nadmit it.\n\n&gt; The output from WordPress is all Atom and is stored in an XML \n&gt; database, MySQL is still there to make the admin interface \n&gt; work, etc.  If your browser supports XSLT, all data transfers \n&gt; could be Atom documents (although our setup uses an extra \n&gt; step, the gist is Atom --&gt; XSLT --&gt; (X)HTML).  If not, the \n&gt; same XSLT code just runs on the server.  So, content \n&gt; negotiation aside, all that&#39;s really needed in order to \n&gt; enable a server-side XSLT approach to work client-side on \n&gt; modern Web browsers is to add one line of code, an XML PI, to \n&gt; the Atom output.  Does it get any simpler?  Go XML!\n\nFrankly, I&#39;d be horrified if that were every to take off on a broad scale.\nFortunately, I&#39;m pretty sure it won&#39;t; at least not the XSLT part; XSLT is\njust too hard to learn for the average Joe.\n\nHonestly speaking, aside from being a magnificent example of doing it\nbecause it can be done, what tangible benefits does this really provide that\nwere not already available on vanilla WordPress?\n\n&gt; My point is to keep an open mind about what browsers can do \n&gt; these days.  JavaScript is no longer the only viable alternative \n&gt; for client-side coding.  \n\nAre you really seriously suggesting to build a full-working web app with\nXSLT and foresaking all JavaScript?  Aside from not seeing how it will work,\nthe thought of having to code again in XSLT gives me the cold chills...\n\n&gt; I guess my other point, is that PHP apps \n&gt; don&#39;t really need to know how to handle XML, to generate XML.\n\nTrue, but that doesn&#39;t help the client consume it.\n\nBut hey, if you are wedded to XML+XLST and you have invested tons of time\ninto a project using them then more power to you; don&#39;t let my distaste for\nthe tools you used get you down.  Seriously; I&#39;m just one person trying to\nget something done. You don&#39;t have to convert me to your religion just as I\ndon&#39;t need to convert you to mine.  \n\nAs for the broader web, come what may as I doubt any potential debates we\nmight have could affect that outcome no matter what are respective religons\nbe.\n\n-- \n-Mike Schinkel\nhttp://www.mikeschinkel.com/blogs/\nhttp://www.welldesignedurls.org\nhttp://atlanta-web.org \n\n\n\n\n"}}
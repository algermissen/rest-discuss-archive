{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"RkerP15C0Q8e6fkRdeOpcLZchcy2rSDlvysQroy8gRm6U0LrQhaUhjNNHDeTuyqScQkF1XKifYEgMpT_5ju8fBD96rc0Hhu_SlfimkOqoQ","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: It&#39;s the architecture, stupid.","postDate":"1287249540","msgId":16736,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMTAxMDE2MTExOTAwLjJhNjdlYzFkLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","inReplyToHeader":"PGk5YTFhcCtwdnQ0QGVHcm91cHMuY29tPg==","referencesHeader":"PDIwMTAxMDE1MDEwMjMxLjkxY2Y2YzI5LmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPGk5YTFhcCtwdnQ0QGVHcm91cHMuY29tPg=="},"prevInTopic":16735,"nextInTopic":16737,"prevInTime":16735,"nextInTime":16737,"topicId":16728,"numMessagesInTopic":15,"msgSnippet":"... It s also interesting to note that back in the day, bandwidth, CPU, RAM, HD etc. were precious; now they re commodities.  The point being, if it were a","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 44327 invoked from network); 16 Oct 2010 17:19:07 -0000\r\nX-Received: from unknown (98.137.34.45)\n  by m1.grp.sp2.yahoo.com with QMQP; 16 Oct 2010 17:19:07 -0000\r\nX-Received: from unknown (HELO mxout-08.mxes.net) (216.86.168.183)\n  by mta2.grp.sp2.yahoo.com with SMTP; 16 Oct 2010 17:19:07 -0000\r\nX-Received: from bigbison (unknown [65.117.211.162])\n\t(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))\n\t(No client certificate requested)\n\tby smtp.mxes.net (Postfix) with ESMTPSA id 8F8AA509B3;\n\tSat, 16 Oct 2010 13:19:06 -0400 (EDT)\r\nDate: Sat, 16 Oct 2010 11:19:00 -0600\r\nTo: &quot;rcobbwork&quot; &lt;rick_cobb@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nMessage-Id: &lt;20101016111900.2a67ec1d.eric@...&gt;\r\nIn-Reply-To: &lt;i9a1ap+pvt4@...&gt;\r\nReferences: &lt;20101015010231.91cf6c29.eric@...&gt;\n\t&lt;i9a1ap+pvt4@...&gt;\r\nOrganization: Bison Systems Corporation\r\nX-Mailer: Sylpheed 3.0.3 (GTK+ 2.10.14; i686-pc-mingw32)\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=US-ASCII\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nSubject: Re: It&#39;s the architecture, stupid.\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\nRick Cobb wrote:\n&gt; \n&gt; Well, one point about Mr. Postel -- he largely worked in an Internet\n&gt; where all machines were reachable via the Internet Protocol, and\n&gt; security was managed on a protocol-endpoint (port) basis.   Most of\n&gt; the protocols he worked on were end-to-end, and the connection could\n&gt; be established in either direction.\n&gt; \n\nIt&#39;s also interesting to note that back in the day, bandwidth, CPU, RAM,\nHD etc. were precious; now they&#39;re commodities.  The point being, if it\nwere a good idea to create a universal application protocol essentially\nas raw TCP access, instead of protocols with &quot;header overhead&quot;, things\nwould have been done that way long ago.\n\nhttp://tools.ietf.org/html/rfc1958\nhttp://tools.ietf.org/html/rfc3439\nhttp://tools.ietf.org/html/rfc3724\n\nIt seems to me that the end-to-end principle has evolved since Dr.\nPostel&#39;s time, but still holds.  Web Sockets ignores this principle.\nIs the Web such a failure that it&#39;s time to &quot;raze the city and rebuild\nit&quot; rather than repaving the streets?  If the future of HTTP is binding\nto SCTP instead of TCP, does it make sense to couple Web Sockets to TCP?\nIsn&#39;t this exactly the &quot;vertical coupling&quot; described in RFC 3439?\n\n&gt;\n&gt; That Internet is long dead; NAT, HTTP, and RFC1918 killed it.  The\n&gt; Web established a network that has big well-named servers that\n&gt; clients must bow in supplication to connect to -- and anonymous\n&gt; clients that can&#39;t be reached without them establishing and holding a\n&gt; connection of some sort.\n&gt; \n\nI predict that Internet will come back to life in the form of IPv6, but\nfor political rather than technical reasons.  The 2010 Postel Award\nwinner is Jianping Wu:\n\nhttp://en.wikipedia.org/wiki/Dr._Jianping_Wu\n\nChina, due to the political need for censorship and control, requires\nthat each client node have a routable address.  Politically, I prefer\nNAT.  Technologically, I prefer IPv6.  I agree with you, though -- IPv4\nbegat RFC 1918, begat long-polling.\n\n&gt;\n&gt; There *are* legitimate applications for push. Not everything is\n&gt; request/response: P2P and publish/subscribe are legitimate\n&gt; communication patterns.  That&#39;s not to say they&#39;re REST, but if &quot;it&#39;s\n&gt; the architecture, stupid&quot;, you do have to look at the application\n&gt; communication pattern and find a way to deal with it.\n&gt; \n\nI have to disagree.  My view is that the application&#39;s goals must be\nrealized within the prevailing architecture, and the communication\npattern designed accordingly.  RESTful pub/sub is possible using\nrequest/response HTTP.  RESTful P2P?  On the one hand, REST has that\nclient-server constraint.  OTOH, Roy has stated that Waka is a P2P\nprotocol, in the Q&A at the end of this session:\n\nhttp://streaming.linux-magazin.de/events/apacheconfree/archive/rfielding/frames-java.htm\n\nI don&#39;t see why push needs to break the request/response model (Waka\nhas the MONITOR method).  Each message is still going over a network, so\nthere needs to be some sort of response code indicating success/fail.\nAll that&#39;s different is that the user-agent acts as server, and the\norigin server acts as client.  Using rHTTP, this can be just as RESTful\nas pull.\n\nIf a stock-ticker app is implemented using Web Sockets, how do I know\nI&#39;m not missing anything due to dropped packets?  Can I verify the\nintegrity of the data received, even if I get all the packets?  TCP is\nfine for this at the transmission layer, but not the application layer.\nThese seem to me like problems inherent to breaking the request/response\nmodel, rather than problems specific to Web Sockets; thus, ITAS...\n\n&quot;\nA specific case is that any network, however carefully designed, will\nbe subject to failures of transmission at some statistically determined\nrate.  The best way to cope with this is to accept it, and give\nresponsibility for the integrity of communication to the end systems.\n&quot;\n\nhttp://tools.ietf.org/html/rfc1958\n\nWhereas with BitTorrent, request/response doesn&#39;t matter because the\nend result (a file of size=x and checksum=x) is known -- it&#39;s still end-\nto-end.  With Web push, no a priori knowledge of the parameters of the\ntransfer exists unless presented as protocol headers (like rHTTP,\nunlike Web Sockets).\n\n&gt;\n&gt; HTTP, essentially the only important protocol in the context of the\n&gt; current Internet, makes it vey hard to do a good job on P2P or\n&gt; pub/sub. (...)\n&gt; \n\nVery hard, yes, but not impossible (except P2P, HTTP isn&#39;t a P2P\nprotocol by any stretch).  Which is why I object to the Web Sockets\nnotion that HTTP must be replaced in order to do push, particularly if\nthe alleged benefit is illogical, and the potential consequences severe.\nAs you point out, the requirement of a hanging connection is a\nlimitation imposed not by HTTP but by RFC 1918, so replacing HTTP isn&#39;t\nthe answer (without thoroughly documenting rationale, first).\n\nhttp://tech.groups.yahoo.com/group/rest-discuss/message/8314\nhttp://www.dehora.net/journal/2007/07/earned_value.html\n\nJust some interesting posts about working with the Web instead of\nagainst it.\n\n&gt;\n&gt; Roy&#39;s postings about the economics of scale of these communication\n&gt; patterns are sensible (though Facebook seems to have been able to\n&gt; monetize pub/sub pretty well), but people are going to need to\n&gt; implement them.\n&gt;\n\n(Not to jump all over your example, I was just looking for any excuse\nto bring up Fb...)\n\nI wouldn&#39;t hold Facebook up as an example; there&#39;s more to REST than\nscaling, which Fb doesn&#39;t actually do very well -- judging from their\nreputation for flaky service, and the fact that it&#39;s standard practice\nat Fb (and most other Web 2.0 sites) to disable features during peak\nusage.  I don&#39;t even know that Fb is monetized, vs. being a VC funding\npit...  In fact, Facebook wins my inaugural ITAS Award -- to be granted\nintermittently based on (de)merit:\n\nhttp://blogs.wsj.com/digits/2010/09/24/what-caused-facebooks-worst-outage-in-four-years/\n\nThere&#39;s a reason HTTP has a 500 error, and why the purported benefit of\nnot exposing errors to *some* users is a logical fallacy.  Is total\nsystem failure the automatic penalty for coding typos in Web Sockets,\ndue to the lack of *any* response codes, let alone for error handling?\nFrom REST, 2.3.7:\n\n&quot;\nReliability, within the perspective of application architectures, can\nbe viewed as the degree to which an architecture is susceptible to\nfailure at the system level in the presence of partial failures within\ncomponents, connectors, or data.  Styles can improve reliability by\navoiding single points of failure, enabling redundancy, allowing\nmonitoring, or reducing the scope of failure to a recoverable action.\n&quot;\n\nI don&#39;t even have to look at Facebook, the failure analysis is enough\nbasis for me to wave my magic guru wand and declare NOT REST.  RESTful\nsystems don&#39;t DDoS themselves!  Internet architecture allows for\nmonitoring.  Web Sockets doesn&#39;t, nor does it &quot;reduce the scope of\nfailure to recoverable actions&quot; due to its cross-layer coupling (RFC\n3439).\n\n&gt;\n&gt; Now, this isn&#39;t to defend websockets -- but to say that if you&#39;re\n&gt; going to accept a non-addressable Internet, people will need to\n&gt; invent things like it.\n&gt; \n\nWell, sure.  But the issue is what problem is Web Sockets trying to\nsolve?  There&#39;s no workaround to hanging connections, all that can be\ndone about them is make them scale better -- which Web Sockets doesn&#39;t\ndo.  I think rHTTP is as fine a solution to this problem as is\npossible, short of IPv6 becoming ubiquitous and allowing pub/sub via\nserver-stored IP addresses.\n\n&gt;\n&gt; What we did at KnowNow (remember Rohit Khare and Adam Rifkin?) is\n&gt; build a tiny web server in Javascript.  The implementation of\n&gt; resource handlers were (roughly) Javascript functions; the dominant\n&gt; media type was form/x-www-urlencoded.  As we got better at writing\n&gt; this server, it got more RESTful.  But the connection itself was\n&gt; always a tunnel; there was no alternative.  Whether we implemented\n&gt; that with long-poll or just a big GET with function callbacks, it was\n&gt; certainly more RESTful than the websocket approach -- but it&#39;s not\n&gt; like somebody could easily add an HTTP security system on those\n&gt; tunnels.\n&gt; \n\nYes, actually I just came across a KnowNow reference as I was typing\nthis response:\n\nhttp://lists.w3.org/Archives/Public/www-tag/2002Apr/0242.html\n\nThat thread discusses the Web architecture as being one in which URIs\nare used to address resources.  In Web Sockets, one URI starts sending\nmultiple, unrelated messages -- each of which seems like a different\nresource to me, and should therefore be addressable via separate URIs.\nNebulous transmissions aren&#39;t bookmarkable, or even distinguishable\nfrom one another.\n\nCan&#39;t HTTP security be added to rHTTP, or am I missing something?\n\n&gt;\n&gt; I&#39;m perfectly willing to admit that systems that use P2P or\n&gt; publish/subscribe communication patterns aren&#39;t REST, but it&#39;s not\n&gt; like anybody out there is generally opening their networks to XMPP,\n&gt; BEEP, AMQP....  Nor are they providing mechanisms (well, other than\n&gt; email addresses, hi, Mr. Spam) for addressing real endpoints so you\n&gt; don&#39;t have to hold request/response HTTP connections open in order to\n&gt; implement them.\n&gt; \n\nWell, I&#39;m not willing to say that pub/sub can&#39;t be RESTful, just that\nI&#39;ve yet to see it done that way (using redirection).  RESTful P2P, I\ndon&#39;t know...  But my post wasn&#39;t limited to REST (nowhere else is\nappropriate for general Internet architecture discussion).  The other\nprotocols you mention all represent architectural styles which at least\nconform to the fundamentals of the Internet, rather than being in\nactive denial of them, like Web Sockets.\n\n-Eric\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"X79bDx8wf1vFAparP8lNyMQHTx5vC1sGK93EdmSfMUIuymljSDCu5PIO3ZBGZfX9ZXFaGIIq3e57UI2XpMroGmCkJ72CCtVTFcqKlx0rMA","spamInfo":{"isSpam":false,"reason":"6"},"subject":"Re: [rest-discuss] Re: PUT for partial update of an existing resource","postDate":"1302849807","msgId":17472,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMTEwNDE1MDA0MzI3LjcwNjNmOTAzLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","inReplyToHeader":"PGlvOGgyYytuY3FnQGVHcm91cHMuY29tPg==","referencesHeader":"PDIwMTEwNDE0MTAyMDAxLmJkNDQ1YTBiLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPGlvOGgyYytuY3FnQGVHcm91cHMuY29tPg=="},"prevInTopic":17471,"nextInTopic":17473,"prevInTime":17471,"nextInTime":17473,"topicId":17415,"numMessagesInTopic":59,"msgSnippet":"... Well, I ve never followed the logic of optimizing PUT to save a few bytes -- I PUT atom:id s all the time, even though the server ignores them, because","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 53429 invoked from network); 15 Apr 2011 06:43:22 -0000\r\nX-Received: from unknown (98.137.34.46)\n  by m7.grp.sp2.yahoo.com with QMQP; 15 Apr 2011 06:43:22 -0000\r\nX-Received: from unknown (HELO mxout-08.mxes.net) (216.86.168.183)\n  by mta3.grp.sp2.yahoo.com with SMTP; 15 Apr 2011 06:43:22 -0000\r\nX-Received: from bigbison (unknown [65.117.211.162])\n\t(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))\n\t(No client certificate requested)\n\tby smtp.mxes.net (Postfix) with ESMTPSA id ACE8A509D9;\n\tFri, 15 Apr 2011 02:43:21 -0400 (EDT)\r\nDate: Fri, 15 Apr 2011 00:43:27 -0600\r\nTo: &quot;bryan_w_taylor&quot; &lt;bryan_w_taylor@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nMessage-Id: &lt;20110415004327.7063f903.eric@...&gt;\r\nIn-Reply-To: &lt;io8h2c+ncqg@...&gt;\r\nReferences: &lt;20110414102001.bd445a0b.eric@...&gt;\n\t&lt;io8h2c+ncqg@...&gt;\r\nOrganization: Bison Systems Corporation\r\nX-Mailer: Sylpheed 3.1.0 (GTK+ 2.10.14; i686-pc-mingw32)\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=US-ASCII\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:6:0:0:0\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nSubject: Re: [rest-discuss] Re: PUT for partial update of an existing\n resource\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\n&quot;bryan_w_taylor&quot; wrote:\n&gt; \n&gt; &gt; By that logic, GET should have been redefined to also sometimes mean\n&gt; &gt; DELETE, and a new really-mean-GET-this-time method created.  Before\n&gt; &gt; Google Web Accelerator came along and deleted everyone&#39;s blogs,\n&gt; &gt; forums and wikis, using GET to DELETE was quite common.  The REST\n&gt; &gt; solution is self-descriptive messaging, in HTTP this means PUT has\n&gt; &gt; create/replace semantics and PATCH as replacement semantics (or, if\n&gt; &gt; you can&#39;t/won&#39;t use PATCH for some reason, use POST), never using\n&gt; &gt; GET for unsafe interactions, etc.\n&gt; \n&gt; I really don&#39;t follow this. Nobody interprets GET to mean DELETE. I\n&gt; am saying you can read the spec for PUT and reasonably interpret the\n&gt; words and conclude that a partial update is allowed. If somebody is\n&gt; using GET for unsafe acts they are ignoring the spec.\n&gt; \n\nWell, I&#39;ve never followed the logic of optimizing PUT to save a few\nbytes -- I PUT atom:id&#39;s all the time, even though the server ignores\nthem, because validating the payload using standard libraries requires\natom:id.  The main point of REST is to optimize the hell out of GET,\nbecause that&#39;s by far the bulk of request traffic.  If adhering to REST\ncosts me a few bytes on PUT for the sake of self-descriptiveness and\nvisibility of my API overall, big deal.\n\nIn terms of my PUT traffic tagged as application/atom+xml, it&#39;s exactly\nthat, not an invalid subset.  If I omit atom:id, then the correct media\ntype would be application/xml, but my goals for self-descriptiveness\nand visibility are higher than that -- using a valid Atom payload on\nPUT self-descriptively screams at the world that my API is Atom\nProtocol (FWIW, which is serendipitous re-use).  Overloading PUT\ndoesn&#39;t help others to understand your code -- it actively works against\nit, because you&#39;re going against spec.\n\nTrust me, before GWA, many major CMS products were using GET to delete\nstuff regardless of what the spec said.  There&#39;s always unseen danger\nin ignoring interoperability concerns (i.e. spec compliance) for\nshort-term ease of implementation.  It&#39;s like Rummy said, it&#39;s all\nabout knowing your unknowns, vs. not knowing your unknowns.\n\nSo, if there&#39;s some intermediary out there configured to validate\npayloads before allowing PUT/PATCH, I have no worries.  If I assume\nI&#39;ll never have this problem and overload PUT, I wind up with a real\nmess on my hands if a client wants to implement exactly that security\nmeasure on their intranet firewall, and my work is found wanting for not\nbeing up to spec.  Like so many were by overloading GET for deletion.\n\n&gt; \n&gt; I am saying you can read the spec for PUT and reasonably interpret the\n&gt; words and conclude that a partial update is allowed.\n&gt; \n\nExactly.  The server can discard atom:id, but messaging is self-\ndescriptive of sender intent, not server processing.  The sender PUT a\nvalid Atom document to an interface which, on GET, returns that same\nAtom document (without allowing client-side control of atom:id).  What\nthe server does or doesn&#39;t do with atom:id is an implementation detail\nhidden behind the interface, and such details aren&#39;t exposed on the\nwire, so there&#39;s no reason atom:id must be omitted from PUT payloads if\nthe server intends to ignore it.\n\nMy messaging over the network exactly describes sender intent, which is\nto replace the content of the resource, with that content formatted as\nan Atom Entry document -- not to partially-update everything but the\natom:id of some representation of the resource.\n\nI&#39;ve discussed before how, if I&#39;m only changing the categories of an\natom:entry, PATCH is used with application/atomcat+xml to indicate that\nonly the atom:category tags are overwritten.  The messaging is self-\ndescriptive, in that a payload of one media type is used to partially\nupdate a resource which responds to GET with another media type,\nreflecting the sender intent of partially updating the content of the\nresource.  You can figure it out by driving the hypertext interface\nwhile monitoring the HTTP headers, like any good REST app.\n\nSo a lot of pragmatic REST development involves following the HTTP spec,\ninstead of making semantic arguments looking for loopholes in the\nwording.  The purpose of PUT is not partial update, that&#39;s always been\nthe job of PATCH, because HTTP (mostly) implements RESTful self-\ndescriptive messaging by assigning different sender intent to\ndifferent methods.  The arguments I&#39;ve put forth aren&#39;t &quot;because the\nspecs say so,&quot; I&#39;ve been trying to explain why the specs are written\nthe way they are -- because they&#39;re REST applied to protocol design.\n\n-Eric\n\n"}}
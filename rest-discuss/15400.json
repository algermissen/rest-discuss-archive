{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":338780200,"authorName":"Kris Zyp","from":"Kris Zyp &lt;kris@...&gt;","profile":"kriszyp","replyTo":"SENDER","senderId":"qH3RI1SLTgQgOn8O9zYKWyUBD1iJ6LLN2kyckTuew1nYESuQpfb-7exJDCiPb5_k0AHZOC0F4kSwRLeorsmir4Wg","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] PUT/POST content type hints","postDate":"1274735042","msgId":15400,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDRCRkFFOUMyLjcwNDA3MDBAc2l0ZXBlbi5jb20+","inReplyToHeader":"PDIwMTAwNTExMDQzMTQ3LmY5NWNhZTUwLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","referencesHeader":"PEFBTkxrVGlseHpTY21NV1A4SndSclF0cTFyRHpOLU5VQzFrMjZyeUU0b2N3VUBtYWlsLmdtYWlsLmNvbT4JPDRCRTg2RjU4LjYwNjAyMDlAc2l0ZXBlbi5jb20+IDwyMDEwMDUxMTA0MzE0Ny5mOTVjYWU1MC5lcmljQGJpc29uc3lzdGVtcy5uZXQ+"},"prevInTopic":15349,"nextInTopic":15447,"prevInTime":15399,"nextInTime":15401,"topicId":15322,"numMessagesInTopic":12,"msgSnippet":"... Hash: SHA1 ... I certainly agree that receiving a media type from a server does not guarantee that a server can receive that same media type from the ","rawEmail":"Return-Path: &lt;kris@...&gt;\r\nX-Sender: kris@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 22597 invoked from network); 24 May 2010 21:19:33 -0000\r\nX-Received: from unknown (66.196.94.105)\n  by m1.grp.sp2.yahoo.com with QMQP; 24 May 2010 21:19:33 -0000\r\nX-Received: from unknown (HELO rs61.luxsci.com) (65.61.166.69)\n  by mta1.grp.re1.yahoo.com with SMTP; 24 May 2010 21:19:33 -0000\r\nX-Received: from [192.168.0.64] (97-126-206-130.slkc.qwest.net [97.126.206.130])\n\t(authenticated bits=0)\n\tby rs61.luxsci.com (8.13.8/8.13.7) with ESMTP id o4OL4sqa010857\n\t(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NOT);\n\tMon, 24 May 2010 16:04:54 -0500\r\nMessage-ID: &lt;4BFAE9C2.7040700@...&gt;\r\nDate: Mon, 24 May 2010 15:04:02 -0600\r\nUser-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.1.9) Gecko/20100317 Thunderbird/3.0.4\r\nMIME-Version: 1.0\r\nTo: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nCc: REST-Discuss Discussion Group &lt;rest-discuss@yahoogroups.com&gt;\r\nReferences: &lt;AANLkTilxzScmMWP8JwRrQtq1rDzN-NUC1k26ryE4ocwU@...&gt;\t&lt;4BE86F58.6060209@...&gt; &lt;20100511043147.f95cae50.eric@...&gt;\r\nIn-Reply-To: &lt;20100511043147.f95cae50.eric@...&gt;\r\nX-Enigmail-Version: 1.0.1\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: 7bit\r\nFrom: Kris Zyp &lt;kris@...&gt;\r\nSubject: Re: [rest-discuss] PUT/POST content type hints\r\nX-Yahoo-Group-Post: member; u=338780200; y=1DPzkMBr_RDJXUFcbcvc-f3mIvo4Adtx3lFay7l5FsEQQw\r\nX-Yahoo-Profile: kriszyp\r\n\r\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n \n\n\nOn 5/11/2010 4:31 AM, Eric J. Bowman wrote:\n&gt; Kris Zyp wrote:\n&gt;&gt;\n&gt;&gt; I believe one should be able to assume that the content type of the\n&gt;&gt; representation returned from a server from GET for URI is acceptable\n&gt;&gt; in a PUT request to that server for the same URI.\n&gt;&gt;\n&gt;\n&gt; Absolutely not.  The late binding of representation to resource\n&gt; precludes this assumption.  HTML is capable of providing an interface\n&gt; to an Atom system.  What media type to PUT or POST to the system is\n&gt; explicitly provided in the markup, i.e. a self-documenting interface.\n&gt;\n&gt; Assuming that you can PUT or POST HTML to my system because that&#39;s the\n&gt; media type I sent on GET would not work -- I derive HTML from Atom, not\n&gt; the other way around.\n&gt;\n&gt; A PUT of an HTML document would show an intent to replace the\n&gt; self-documenting interface provided by the HTML representation, with\n&gt; some other application state.  HTML is generated by my system, it is not\n&gt; subject to change via PUT to negotiated resources which happen to return\n&gt; text/html or application/xhtml+xml on GET with a Web browser, but\n&gt; happen to return Atom to a feed reader.\n\nI certainly agree that receiving a media type from a server does not\nguarantee that a server can receive that same media type from the\nclient. However, in the absence of knowledge of a different explicit\nmedia type preference (from the media type definition) when it comes\nto negotiating an acceptable type with the server, pretending the all\nmedia types are equally likely is as silly as pretending that any\nlanguage is any equally likely to be understood in response to someone\nwho speaks to you in french.\n&gt;\n&gt;&gt;\n&gt;&gt; When using JSON,\n&gt;&gt; additional information about acceptable property values can be\n&gt;&gt; determined from any JSON Schema referenced by the resource. In other\n&gt;&gt; words, if you GET some resource, and the server responds with:\n&gt;&gt;\n&gt;&gt; Content-Type: application/my-type+json; profile=my-schema\n&gt;&gt;\n&gt;&gt; One could retrieve the schema from the &quot;my-schema&quot; relative URI and do\n&gt;&gt; a PUT using the application/my-type+json content type with the schema\n&gt;&gt; information as a guide to what property values are acceptable.\n&gt;&gt;\n&gt;\n&gt; Sure you can *do* this, it just wouldn&#39;t be REST.  Leaving aside that\n&gt; the media type identifier definition for JSON doesn&#39;t say anything about\n&gt; extending it using *+json, the media type definition for JSON says\n&gt; nothing about HTTP methods.  Where have you provided a self-documenting\n&gt; interface giving a target URI, method and media type -- as provided by\n&gt; forms languages having no corollary in JSON, yet required by REST?\n&gt;\n&gt; If you &quot;just know&quot; that you can PUT or DELETE some JSON resource, it&#39;s\n&gt; no more RESTful than &quot;just knowing&quot; that you can PUT or DELETE some\n&gt; JPEG.  You&#39;re resorting to unbounded creativity, rather than using\n&gt; standard media types and link relations which *do* cover HTTP methods,\n&gt; for any target media type.\n&gt;\n\nRFC2616 sufficiently defines the meaning of PUT and DELETE, a media\ntype does not need to conflate protocol concerns to be RESTful.\n&gt;&gt;\n&gt;&gt; Discovery of POST actions is completely different than PUT (since\n&gt;&gt; PUT&#39;s behavior is implied by a GET response). A JSON Schema can\n&gt;&gt; describe possible POST actions with submission links, including an\n&gt;&gt; acceptable content type (in the &quot;enctype&quot; property).\n&gt;&gt;\n&gt;\n&gt; I don&#39;t see how.  Regardless of schema, there&#39;s simply no mention in\n&gt; the media type definition of JSON for describing URIs or methods, i.e.\n&gt; there&#39;s no forms language.  The demo I posted consists of XHTML steady-\n&gt; states derived from various source representationss of other media\n&gt; types.  These steady-states (will) provide a self-documenting API to\n&gt; the underlying Atom-based system.\n&gt;\n&gt; The user isn&#39;t trying to discover PUT vs. POST actions.  The user is\n&gt; trying to drive an application to another steady-state.  The user agent\n&gt; needs to translate that user goal into HTTP interactions.  If the user\n&gt; is trying to add a new post, the user agent is instructed to POST to\n&gt; the domain root.  If the user is trying to add a new comment, the user\n&gt; agent is instructed to POST to the appropriate comment thread.  If the\n&gt; user intent is to edit an existing entry, the user agent is instructed\n&gt; to PUT to the existing URI.  In each case, the user agent is instructed\n&gt; to use application/atom+xml; type=entry.\n&gt;\n&gt; There&#39;s no RESTful way to instruct any user agent that &quot;this system\n&gt; uses Atom Protocol&quot; and this may not be inferred by the fact that the\n&gt; system uses Atom.  All I can do is provide a self-documenting hypertext\n&gt; API which instructs user agents how to interact with the system.  This\n&gt; API may or may not conform to Atom Protocol.  Whether it does or not is\n&gt; less important to REST than its presence.\n&gt;\n&gt; None of this is any different for a system based on JSON rather than\n&gt; Atom.  As a REST system, I could change my Atom backend to a JSON\n&gt; backend on a whim.  I&#39;m not saying it would be easy, but I am saying\n&gt; that the application states wouldn&#39;t change.  The HTML would still\n&gt; present a textarea, changes to that textarea would be submitted to the\n&gt; same URI, using whatever media type the form says to use -- all HTML\n&gt; user agents automatically update to the new API.\n&gt;\n&gt; If you need to guess what media type to use then you can&#39;t possibly be\n&gt; using REST.  A REST API will always tell you exactly what media type to\n&gt; use.  It isn&#39;t implicit in any guessable fashion, it&#39;s explicit.  If it\n&gt; isn&#39;t explicit, it isn&#39;t REST.  HTML says what POST does, but only your\n&gt; hypertext can specify media type, if you lack such hypertext you lack\n&gt; a critical REST constraint.\nThere is certainly nothing wrong with a specifying what media type a\nserver can handle in the media type definition or hypertext (JSON\nSchema allows for specifying an acceptable media type for requests as\nwell), however the dynamic representation/content negotiation\nprinciple implies that a server may have capabilities to handle\nvarious types that may independently evolve. I know my server software\ncan handle various media types to update resources (JSON, JS, XML,\nurl-encoded, etc.).\n\n- -- \nKris Zyp\nSitePen\n(503) 806-1841\nhttp://sitepen.com\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.9 (MingW32)\nComment: Using GnuPG with Mozilla - http://enigmail.mozdev.org/\n \niEYEARECAAYFAkv66cIACgkQ9VpNnHc4zAzASwCfeoeiGm7w2B4FmGssIaKfGafj\nt94An13EQXdWwHtvIC777FS9cXdL5pqn\n=x8xU\n-----END PGP SIGNATURE-----\n\n\n"}}
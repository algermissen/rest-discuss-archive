{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":23186829,"authorName":"Paul Prescod","from":"Paul Prescod &lt;paul@...&gt;","replyTo":"SENDER","senderId":"DENaeClqRmTqTPPtyCxP3NpzTrC9UZYVXRapoElQ_yl1IdQvTNzjpaLGoxochKniS-a0fTTd0ZRWr8bFsjWd8r96zdMi4A","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Idea: Simple Web Service Behaviour Language","postDate":"1013725451","msgId":725,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDNDNkMzOTBCLjExNEEzRjhAcHJlc2NvZC5uZXQ+"},"prevInTopic":0,"nextInTopic":726,"prevInTime":724,"nextInTime":726,"topicId":725,"numMessagesInTopic":41,"msgSnippet":"Idea I ve been noodling.... ==== Abstract The basic model of a REST Web Service is that services are described as webs of documents. Typically the documents","rawEmail":"Return-Path: &lt;paul@...&gt;\r\nX-Sender: paul@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_0_2); 14 Feb 2002 22:26:25 -0000\r\nReceived: (qmail 58722 invoked from network); 14 Feb 2002 22:26:25 -0000\r\nReceived: from unknown (216.115.97.167)\n  by m4.grp.snv.yahoo.com with QMQP; 14 Feb 2002 22:26:25 -0000\r\nReceived: from unknown (HELO smtp1.ActiveState.com) (209.17.183.249)\n  by mta1.grp.snv.yahoo.com with SMTP; 14 Feb 2002 22:26:25 -0000\r\nReceived: from smtp3.ActiveState.com (smtp3.ActiveState.com [192.168.3.19])\n\tby smtp1.ActiveState.com (8.11.6/8.11.6) with ESMTP id g1EMQL532311\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Thu, 14 Feb 2002 14:26:21 -0800\r\nReceived: from prescod.net (ssh1.ActiveState.com [192.168.3.32])\n\tby smtp3.ActiveState.com (8.11.6/8.11.6) with ESMTP id g1EMQKL10609\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Thu, 14 Feb 2002 14:26:20 -0800\r\nMessage-ID: &lt;3C6C390B.114A3F8@...&gt;\r\nDate: Thu, 14 Feb 2002 14:24:11 -0800\r\nX-Mailer: Mozilla 4.76 [en] (Windows NT 5.0; U)\r\nX-Accept-Language: en\r\nMIME-Version: 1.0\r\nTo: &quot;rest-discuss@yahoogroups.com&quot; &lt;rest-discuss@yahoogroups.com&gt;\r\nSubject: Idea: Simple Web Service Behaviour Language\r\nContent-Type: text/plain; charset=us-ascii\r\nContent-Transfer-Encoding: 7bit\r\nX-Filtered-By: PerlMx makes it fast and easy.  See http://www.ActiveState.com/Products/PerlMx/Header\r\nFrom: Paul Prescod &lt;paul@...&gt;\r\nX-Yahoo-Group-Post: member; u=23186829\r\n\r\nIdea I&#39;ve been noodling....\n====\nAbstract\n\nThe basic model of a REST Web Service is that services are described as\nwebs of documents. Typically the documents will be dynamically generated\nbut that is not necessarily the case. Just as with services based on\nCOM, CORBA or SOAP, it would be nice to have a declaration of a\nservice&#39;s behaviour in advance so that reliable software can be\nconstructed with less testing.\n\nInsofar as a service consists of documents, especially XML documents,\nXML schemas provide a partial description of the service. What they do\nnot describe is the transitions from one document to another. That&#39;s\nwhat SWSBL does. It is intended to be the IDL/WSDL for HTTP web\nservices. Just as with IDL it may one day make sense to &quot;bind&quot; SWSBL\ninto a statically typed programming language to make the construction of\ntype-incorrect client software more difficult.\n\nModel\n\nThink of a web service as a web of document types. The &quot;find airline\nseat&quot; document points to the &quot;reserve seat&quot; document through a URI. That\ndocument points to the &quot;purchase seat&quot; document through a URI and so\nforth. Each document has associated with it an XML Schema but also a\nbehaviour description (or perhaps just a fragment of a behaviour\ndescription ). The &quot;root&quot; behaviour description for a service asserts\nthat a particular URI references a service that conforms to a particular\nbehaviour description. \nAs you move from document to document following links, each link is\nstrongly and statically typed by the Behaviour Description. A failure to\nconform is a runtime error, just as with non-validation against an XML\nSchema or WSDL service description. \n\nSometimes the client wants to send information to the server. HTTP\nallows you to do this either by POSTing to a document or PUTting to a\nURI provided by the server. So beyond being strongly typed, each URI\nmust have associated with it a set of possible methods and inputs. Think\nof this as a 4-tuple: \n\n * HTTP method \n * query parameters \n * HTTP headers \n * body content (often XML in some vocabulary) \n\nSWSBL will help the service provider to define these valid inputs in\nadvance so that client software can be reliably constructed. \n\nSometimes you have an option of PUT and/or POST and/or DELETE so we must\nhave multiple possible input actions associated with each URI. The input\nto PUT is likely to be very different than the input to POST and DELETE\nor GET have no body inputs. SWSBL will allow that. \n\nOnce the HTTP request has been made, a response comes back. In order to\nbuild robust, statically typed, services we want to know what valid\nrange of responses are legal. So for each sort of input, a range of\nvalid outputs may be described. These consist of HTTP response and body\ncontent (perhaps constrained to one or more XML vocabularies). If a\nstatically typed programming language has data binding then one can\nimagine that each &quot;type&quot; of input maps to a particular method and the\nresult of the method would be either an XML DOM or the statically typed\nresult of the data binding. (e.e. IPurchaseOrder instead of\nIDOMDocument). To make this binding easier, input types should be named,\nsimilar to operations in WSDL. \n\nThe fundamental difference between this model and WSDL&#39;s is that this is\nabout interactions between web service components (every page is a\ncomponent) whereas WSDL is about describing a single web service\ncomponent (only one SWSBL page).\n\n"}}
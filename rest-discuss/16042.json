{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":237604743,"authorName":"Bill de h√ìra","from":"Bill de =?ISO-8859-1?Q?h=D3ra?= &lt;bill@...&gt;","profile":"bdehora","replyTo":"SENDER","senderId":"_rYtdPx2K5CpvjIEmgGOAam2qlwijg3vYfu_kDBpMuqnBcVSszxbE5Qyb7158g0Q64wgiM8rR0_1zY05FQNU6m105XB7iNtNJ9DSUZIoQlQkIhYtSQpEaA","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Google proposes RPC style APIs over REST","postDate":"1280516308","msgId":16042,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDEyODA1MTYzMDguMjQzNi4yMTUuY2FtZWxAZGVob3JhLWxhcHRvcD4=","inReplyToHeader":"PEFBTkxrVGk9MGtaZGpaNStEY2Q9c1p4dFRBQTBxQTY4NHE5RzByZDE1Q1VHZ0BtYWlsLmdtYWlsLmNvbT4=","referencesHeader":"PGkydGhyditzZjd0QGVHcm91cHMuY29tPgkgPDIwMTAwNzMwMDMwOTQyLmZkMmUxNDIwLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JIDwyMDEwMDczMDA0MjYzMi44Yzk5MGU4YS5lcmljQGJpc29uc3lzdGVtcy5uZXQ+CSA8MjAxMDA3MzAwNTQyMTEuZmYwZjdlOWEuZXJpY0BiaXNvbnN5c3RlbXMubmV0PgkgPDIwMTAwNzMwMDc0NTA0LmIyZDFmOWMzLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JIDxBQU5Ma1RpblpPcV8tVWI5bkY4ZWlEMHJ2VW5SbjJ4bVpCLVZmM1l3Z3czbnVAbWFpbC5nbWFpbC5jb20+CSA8QUFOTGtUaT0wa1pkalo1K0RjZD1zWnh0VEFBMHFBNjg0cTlHMHJkMTVDVUdnQG1haWwuZ21haWwuY29tPg=="},"prevInTopic":16040,"nextInTopic":16043,"prevInTime":16041,"nextInTime":16043,"topicId":16015,"numMessagesInTopic":60,"msgSnippet":"Long post, sorry. A lot of people in Google understand REST and the Web, very well. You can t build services at their scale and not understand fundamentals. ","rawEmail":"Return-Path: &lt;bill@...&gt;\r\nX-Sender: bill@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 15404 invoked from network); 30 Jul 2010 18:58:32 -0000\r\nX-Received: from unknown (66.196.94.106)\n  by m11.grp.re1.yahoo.com with QMQP; 30 Jul 2010 18:58:32 -0000\r\nX-Received: from unknown (HELO chilco.textdrive.com) (207.7.108.242)\n  by mta2.grp.re1.yahoo.com with SMTP; 30 Jul 2010 18:58:32 -0000\r\nX-Received: from [192.168.1.8] (unknown [79.97.75.92])\n\tby chilco.textdrive.com (Postfix) with ESMTP id 36136DDF3A\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Fri, 30 Jul 2010 18:58:31 +0000 (UTC)\r\nTo: rest-discuss@yahoogroups.com\r\nIn-Reply-To: &lt;AANLkTi=0kZdjZ5+Dcd=sZxtTAA0qA684q9G0rd15CUGg@...&gt;\r\nReferences: &lt;i2thrv+sf7t@...&gt;\n\t &lt;20100730030942.fd2e1420.eric@...&gt;\n\t &lt;20100730042632.8c990e8a.eric@...&gt;\n\t &lt;20100730054211.ff0f7e9a.eric@...&gt;\n\t &lt;20100730074504.b2d1f9c3.eric@...&gt;\n\t &lt;AANLkTinZOq_-Ub9nF8eiD0rvUnRn2xmZB-Vf3Ywgw3nu@...&gt;\n\t &lt;AANLkTi=0kZdjZ5+Dcd=sZxtTAA0qA684q9G0rd15CUGg@...&gt;\r\nContent-Type: text/plain; charset=&quot;UTF-8&quot;\r\nDate: Fri, 30 Jul 2010 19:58:28 +0100\r\nMessage-ID: &lt;1280516308.2436.215.camel@dehora-laptop&gt;\r\nMime-Version: 1.0\r\nX-Mailer: Evolution 2.28.3 \r\nContent-Transfer-Encoding: 8bit\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Bill de =?ISO-8859-1?Q?h=D3ra?= &lt;bill@...&gt;\r\nReply-To: bill@...\r\nSubject: Re: [rest-discuss] Google proposes RPC style APIs over REST\r\nX-Yahoo-Group-Post: member; u=237604743; y=zG2-HMT6lqxMgWtRO8rTrdl21msxgmUx29Xf7HmND65KIQ\r\nX-Yahoo-Profile: bdehora\r\n\r\nLong post, sorry.\n\nA lot of people in Google understand REST and the Web, very well. You\ncan&#39;t build services at their scale and not understand fundamentals.\nThat said, what I gather they&#39;re doing seems reasonable to me and I\ndon&#39;t the sky is going to fall in because they want to leverage their\ninternal tool chain or reach more developers. And I don&#39;t see this as\ngoing to back to RPC. For the reasons below, I suspect it&#39;s about\nbalancing trade-offs.\n\nThe fundamental, core problems aren&#39;t to do with REST v RPC any more. I\nthink as an industry we&#39;re past that thankfully, because it was hell.\n\nI think first there&#39;s an issue with notion of a &#39;Web API&#39;. The Web 2.0\ncrowd co-opted the term API, but in reality these things are very\ndifferent to Software APIs. Even the copyleft contingent of the FOSS\ncommunity had to mint a new licence, the AGPL to reflect how systems\nwork in this century. However the basic expectation of a Software API\nremains, one of which is ease of use and abstraction of low level\ndetail.\n\nThe approach I&#39;ve found that works, is to build your system substrate in\nline with REST and sane HTTP practices - resources, links, media type\nnegotiation, uniform interface, cache tiers, so you have a semblance of\na systems design. A lot of systems and scaling issues I see are very\nfixable when you apply REST, the notable exception being trying to do\nconnection-oriented stuff like Comet or IM over HTTP, for which there\nare no easy solutions (and obviously, it&#39;s not a problem domain REST is\ndesigned to solve). \n\nWith that in place you then layer on syntax sugar in the form of client\nlibraries. The downside is you are now supporting 2 &quot;APIs&quot; working at\ntwo different layers, the upside is that you&#39;ve obtained a decent\nadoption/scaling tradeoff. Developers just don&#39;t want to deal with HTTP\nand XML and JSON and sideline caching and marshalling and partial update\ngorp. I&#39;m sure the CPU and Programming Language architects aren&#39;t very\nhappy with developers either, but the industry is where it is.\n\nMike has nailed it when he said REST clients are hard to build.  Ok, so\nn a sense they aren&#39;t rock hard, but, and I&#39;m speaking very roughly\nspeaking here, they present the same barrier to a typical client\ndeveloper that building an event based server might present to a typical\nweb developer. Basically you&#39;ve lost 90% of your audience.  Actually any\nprotocol + format client is hard to build, but REST as in HTTP presents\na extra challenge as the whole world is building lots of different\napplications on top of it.\n\nIf you are in the platform game, this constitutes a problem, as\nplatforms are all about adoption. If you are in the distributed platform\ngame you have to balance these systems and ease of use concerns. There&#39;s\nno point having a super-scaling platform no-one uses. There&#39;s no point\nhaving a super-popular platform that collapses.\n\nThe client sugar bit is too hard today. Speaking from experience in the\nmobile world, supporting the  sheer variety of clients is a very tough\nask. Frankly, it is economically simpler on the server side to just\nexpose data and protocols. However to manage that cost down while\ngrowing your developer base, you will eventually want a way to help\ngenerate clients for the developers and client platforms that you\nhaven&#39;t reached yet. This is subtly but importantly different to the\nmindless application of RPC we&#39;ve seen in the past where one tries to\napply the wrong paradigm to the wrong reality. When you&#39;re looking to\nlower client development costs, the goal or solution isn&#39;t to to end up\nwith inappropriate systems. No systems engineer worth a damn working at\nscale will throw out REST quality properties. But ease of use is a\nreasonable concern. It is semantic tunnelling, but it&#39;s not total idiocy\nsuch as running deletes over get. \n\nWADL for example, can map a &#39;code method&#39; name  &#39;HTTP method&#39; so you get\na nice domain specific and expressive interface at the level of software\nmapped onto a sensible system primitive, exactly what you want to keep a\nbalance between systems engineers and developers. I don&#39;t see what&#39;s not\nto like about that - there&#39;s nothing that requires you to break\nuniformity. Ok, so you can declare URLs upfront and maybe that&#39;s always\nnot ideal, but if you don&#39;t want to stand over them, document that, and\nthen follow through with a cache expiration on the document to allow the\nclient to regenerate. Worst case you&#39;re standing over uri-template\nsyntax and maybe you need to manage the WADL URLs with the links in your\nformats. I don&#39;t see this as a huge problem or architecture violation.\n\nHence the trade off leads to cherry picking tools and approaches that\nassist with client generation and cleaner programming models.\n\nAnother serous problem is that time and effort to mint good media types\ndoesn&#39;t reflect business reality - strictly speaking that&#39;s not a\nproblem of the REST architecture, but it is a problem for a business.\nAtom and AtomPub took years to wrap up, and you know what, most\nhalf-decent general purpose formats take a long time. Companies need to\nship and just can&#39;t wait years to cut a format and the formats we have\naren&#39;t commodity options that just work in general for most application\ndomains.\n\nThis latter &#39;time to market&#39; issue there just isn&#39;t a good solution for,\nnot when the modelling primitives are just about managing structure such\nas JSON, XML and IDLs. RDF is probably the closest to something that has\ngeneral adoption promise, but ime that seems to require significant\nretooling on the server especially if you using relational databases and\nORMs. My early background was Agents and AI, so REST and network\nprotocol design seems like McAgents, a dumbed down version of speech\nacts and ACLs, but at least they hang together conceptually. I can\nremember ACL interlingua efforts like FIPA and KIF that make a ton of\nsense, fail, because the existing programming paradigms were too\nentrenched and the general state of the art too primitive for them have\nany chance of adoption.  Things are marginally better today and we still\nbadly need formats that can model above the level of syntax, but I don&#39;t\nsee that happening immediately. A current example if you want one, is\nhow tied up the Activity Streams effort is around modelling verbs, a\nlanguage with actual semantics would really help there, but then I&#39;m\nthinking well, at least the nouns are modelled, and how likely is it\nthat a large number of developers today would work with an interlingua.\nThe same goes for the FB Graph API. It&#39;s a small step in the right\ndirection.\n\nSo on the balance I think serving description formats that can drive\nclient tooling and peppering &#39;methods&#39; in URLs that don&#39;t mess with the\ninfrastructure or uniform method assurances, represent reasonable\ntrade-offs and not some kind of retreat to pure RPC. Think of it this\nway - all these developers are still getting numerous benefits from REST\nstyle HTTP but it&#39;s not shoved in their faces as incidental complexity\nand eat your greens - I think that is a good thing.\n\nBill\n\n\nOn Fri, 2010-07-30 at 16:43 +0100, Ant√≥nio Mota wrote: \n&gt; Let me argue a little here. First, let me say I&#39;m not &quot;defending&quot;\n&gt; Google (as if they needed...) nor their solution, just having some\n&gt; loud thoughts about it.\n&gt; \n&gt; So, I&#39;ll argue that having what they call &quot;Augment REST with Custom Verbs&quot; like\n&gt; \n&gt; POST /tasks/@me/{taskId}?method=markDone\n&gt; \n&gt; is not necessarily not-REST. Can or not be RESTfull. It depends.\n&gt; \n&gt; Now I&#39;m not going to quote Roy here, there are people more qualified\n&gt; than me to do it and I don&#39;t want to take the risk of misquoting\n&gt; and/or quote out of context as it is often the case. But it is my\n&gt; impression that REST doesn&#39;t advocate a limited number of verbs, or\n&gt; even less, that REST is limited to GET, POST, PUT, DELETE, or even\n&gt; less, that should be limited to CRUD verbs.\n&gt; \n&gt; And what I saw written by Roy is that a REST based architecture should\n&gt; not be dependent, or tied to, any particular protocol. And what I also\n&gt; see is most of the people discussing REST in terms of HTTP.\n&gt; \n&gt; Now as I said some times, our pro-REST, or the wish-to-become-REST\n&gt; infrastructure, was build since the beginning with the goal of\n&gt; supporting multi-protocols. Thankfully, we started on that before I\n&gt; was in this list from a long time, otherwise I&#39;ll probably have\n&gt; concluded from this list that that was impossible, or not REST. But of\n&gt; course, the first problem was how to have a Uniform Interface spanning\n&gt; multiple protocols. So after some consideration we decided to have\n&gt; GET, POST, PUT, DELETE - not because we wanted to work only to HTTP\n&gt; but because we knew that our HTTP connector was going to be the most\n&gt; used (it&#39;s the one our fat clients use). And out of necessity we also\n&gt; add another method, LISTEN. And so those 5 verbs were our uniform\n&gt; interface. We were not tunnelling HTTP over the other protocols as it\n&gt; may appear, we were kind of tunnelling our &quot;personal&quot; protocol over\n&gt; all the protocols.\n&gt; \n&gt; So, at this point, the use of\n&gt; \n&gt; POST  /tasks//123?verb=LISTEN\n&gt; \n&gt; at least as far as I can&#39;t see doesn&#39;t seems to me to break REST.\n&gt; \n&gt; So the same for that Google API, if they constraint the methods in\n&gt; \n&gt; POST /tasks/@me/{taskId}?method=XXXXXX\n&gt; \n&gt; in a way they are limited in number, they always mean the same, and\n&gt; they are described in a way that both the server and the client\n&gt; understand their meaning, I don&#39;t see that as unRESTfull...\n&gt; \n&gt; And to try to reach the maximum number of audience as possible is a\n&gt; legit objective, there&#39;s no point in having a &quot;perfect&quot; solution if no\n&gt; one knows about it...\n&gt; \n&gt; \n&gt; \n&gt; \n&gt; Melhores cumprimentos / Beir beannacht / Best regards\n&gt; _____________________________________________________________\n&gt; Ant√≥nio Manuel dos Santos Mota\n&gt; Contacts: http://card.ly/amsmota\n&gt; _____________________________________________________________\n&gt; If you&#39;re on a mobile phone you can add my contact\n&gt; by scanning the code on the card below\n&gt; \n&gt; \n&gt; Please click on the image to enlarge it\n&gt; _____________________________________________________________\n&gt; Disclaimer: The opinions expressed herein are just my opinions and\n&gt; they are not necessary right.\n&gt; _____________________________________________________________\n&gt; \n&gt; \n&gt; On 30 July 2010 15:47, mike amundsen &lt;mamund@...&gt; wrote:\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt; veering the thread slightly off to another angle...\n&gt; &gt;\n&gt; &gt; there are lots of engineering disciplines present @ Google. one\n&gt; &gt; engineering discipline that i suspect paid a role in the new\n&gt; &gt; &quot;Discovery-Based API&quot; model is _social_ engineering.\n&gt; &gt;\n&gt; &gt; i think this is an example of a team @ Google offering their audience\n&gt; &gt; (developers in this case) what Google thinks developers want; what\n&gt; &gt; Google needs to do to get developers to adopt their platform.\n&gt; &gt;\n&gt; &gt; i, personally, have seen the same thing happen at Microsoft.\n&gt; &gt;\n&gt; &gt; these are smart people. they &quot;get&quot; REST. however, they suspect their\n&gt; &gt; target audience does not.\n&gt; &gt;\n&gt; &gt; Also, it&#39;s been said on this list (more than once) that one of the\n&gt; &gt; prime barriers to adopting the REST style (or any new pattern, tech,\n&gt; &gt; etc.) is psycho-social. people don&#39;t like change, don&#39;t find the new\n&gt; &gt; thing appealing, don&#39;t want to lose something in the change, etc. and\n&gt; &gt; to prevent these perceived &quot;negative consequences&quot; from occurring,\n&gt; &gt; people will attempt to argue against the new thing using\n&gt; &gt; pseudo-technical reasoning (basically unsupported assertions like &quot;it\n&gt; &gt; won&#39;t scale&quot; or &quot;no one will like it&quot;, and so forth). often, this kind\n&gt; &gt; of arguing is effective in the social setting of the office since some\n&gt; &gt; in the conversation hold power over others (&quot;i can&#39;t convince my\n&gt; &gt; boss&quot;, etc.).\n&gt; &gt;\n&gt; &gt; Finally, the REST style is not complicated (it&#39;s one of the few\n&gt; &gt; network arch styles based in clear constraint-based terms), but it is\n&gt; &gt; hard work. hard work is not very appealing. in my experience the REST\n&gt; &gt; style is most demanding on those building _clients_ not servers.\n&gt; &gt; Google is trying to get people to build &quot;consuming&quot; applications; the\n&gt; &gt; hardest part, IMO. i think Google has decided to not try to convince\n&gt; &gt; their audience they need to adopt a state-machine style in order to\n&gt; &gt; consume the data Google is offering. instead, they decided to make\n&gt; &gt; consuming Google data &quot;easy&quot; and &quot;familiar.&quot; hence the adoption of an\n&gt; &gt; RPC over HTTP pattern.\n&gt; &gt;\n&gt; &gt; I think Google thought about this carefully and knows exactly what\n&gt; &gt; they are doing. and they&#39;ll get lots of adoption, too.\n&gt; &gt;\n&gt; &gt; mca\n&gt; &gt; http://amundsen.com/blog/\n&gt; &gt; http://mamund.com/foaf.rdf#me\n&gt; &gt;\n&gt; &gt; On Fri, Jul 30, 2010 at 09:45, Eric J. Bowman &lt;eric@...&gt; wrote:\n&gt; &gt; &gt;&gt;\n&gt; &gt; &gt;&gt; I made this too hard.  Forget the first GET.  The conditional PUT uses\n&gt; &gt; &gt;&gt; if-none-match the Etag of /image.jpg?rot=90.  Makes the hypertext API\n&gt; &gt; &gt;&gt; even easier to write.\n&gt; &gt; &gt;&gt;\n&gt; &gt; &gt;\n&gt; &gt; &gt; What if we don&#39;t want to transfer a representation of image.jpg to the\n&gt; &gt; &gt; client, or back to the server?  No problem.  HEAD /image.jpg?rot=90 to\n&gt; &gt; &gt; get the Etag (or GET), followed by a conditional POST to /image.jpg of a\n&gt; &gt; &gt; representation of the desired application state as application/x-www-\n&gt; &gt; &gt; form-urlencoded, i.e. POST /image.jpg?rot=90 if-none-match Etag.\n&gt; &gt; &gt;\n&gt; &gt; &gt; While this may technically solve the lost-update problem, without\n&gt; &gt; &gt; actually transferring the image, how does the user (human or machine)\n&gt; &gt; &gt; know the image hasn&#39;t already been rotated by 90 degrees?  If what\n&gt; &gt; &gt; Google meant to call awkward wasn&#39;t the notion of the client doing the\n&gt; &gt; &gt; rotation, but the notion that the image needs to be transferred to the\n&gt; &gt; &gt; client at all, then I don&#39;t see any way around it -- without viewing\n&gt; &gt; &gt; the image, how would a human or machine user know that it needs\n&gt; &gt; &gt; rotation, or by how many degrees?\n&gt; &gt; &gt;\n&gt; &gt; &gt; So my HEAD-conditional POST solution is only RESTful in situations\n&gt; &gt; &gt; where the user goal is to rotate an image regardless of current\n&gt; &gt; &gt; orientation.  Whereas this is the only use-case Google&#39;s RPC supports,\n&gt; &gt; &gt; without solving for lost-update, making it brittle even where lost-\n&gt; &gt; &gt; update isn&#39;t a problem:  Google&#39;s way, if the confirmation of the POST\n&gt; &gt; &gt; is lost and the operation repeated as a result, the rotation is 180\n&gt; &gt; &gt; degrees not 90.  My way, prevents this by properly identifying\n&gt; &gt; &gt; resources (for starters) and using conditional requests.  Not brittle.\n&gt; &gt; &gt;\n&gt; &gt; &gt; There is nothing unRESTful about POST /image.jpg?rot=90 being\n&gt; &gt; &gt; interpreted by the server to mean &quot;rotate image.jpg 90 degrees&quot; unless\n&gt; &gt; &gt; such an operation isn&#39;t hypertext-driven, and provided the media type is\n&gt; &gt; &gt; application/x-www-form-urlencoded.  In which case &quot;rot&quot; is not a &quot;verb&quot;,\n&gt; &gt; &gt; it is a noun identifying a stored procedure (regardless of HTTP method).\n&gt; &gt; &gt;\n&gt; &gt; &gt; Google&#39;s POST, by way of comparison, is not a transfer of a\n&gt; &gt; &gt; representation of the desired resource state.  It&#39;s RPC.  I couldn&#39;t\n&gt; &gt; &gt; make this argument if Google allowed GET on the same URI -- this is the\n&gt; &gt; &gt; difference between identification of resources (regardless of how sloppy\n&gt; &gt; &gt; the URIs) and custom verbs tunneled over POST.\n&gt; &gt; &gt;\n&gt; &gt; &gt; -Eric\n&gt; &gt; &gt;\n&gt; &gt; &gt;\n&gt; &gt; &gt; ------------------------------------\n&gt; &gt; &gt;\n&gt; &gt; &gt; Yahoo! Groups Links\n&gt; &gt; &gt;\n&gt; &gt; &gt;\n&gt; &gt; &gt;\n&gt; &gt; &gt;\n&gt; &gt; \n&gt; \n&gt; \n&gt; ------------------------------------\n&gt; \n&gt; Yahoo! Groups Links\n&gt; \n&gt; \n&gt; \n\n\n\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":23186829,"authorName":"Paul Prescod","from":"Paul Prescod &lt;paul@...&gt;","replyTo":"SENDER","senderId":"GqWGfSxEPyUbSmw_lS2PqX7mbRUcNxtwnKD9ER8WIRvxDnaLGCyrl1mGQxL-CDNhP9cygCG9LiBMqax0oioLQbStYrlwQg","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Asynch and rest-wiki (was Re: [rest-discuss] asynch)","postDate":"1011311577","msgId":50,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDNDNDc2M0Q5LjU5QjhFMzhAcHJlc2NvZC5uZXQ+","referencesHeader":"PDIwMDIwMTE3MjExOS5RQUExODE0NkBtYXJrYmFrZXIuY2E+"},"prevInTopic":0,"nextInTopic":0,"prevInTime":49,"nextInTime":51,"topicId":50,"numMessagesInTopic":1,"msgSnippet":"... Anyhow, you get my point. Eventually the REST world needs to standardize this or agree that HTTP just doesn t handle the problem of asynch. It s one of the","rawEmail":"Return-Path: &lt;paul@...&gt;\r\nX-Sender: paul@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_0_1_3); 17 Jan 2002 23:53:48 -0000\r\nReceived: (qmail 80393 invoked from network); 17 Jan 2002 23:53:48 -0000\r\nReceived: from unknown (216.115.97.172)\n  by m3.grp.snv.yahoo.com with QMQP; 17 Jan 2002 23:53:48 -0000\r\nReceived: from unknown (HELO smtp1.ActiveState.com) (209.17.183.249)\n  by mta2.grp.snv.yahoo.com with SMTP; 17 Jan 2002 23:53:48 -0000\r\nReceived: from smtp3.ActiveState.com (smtp3.ActiveState.com [192.168.3.19])\n\tby smtp1.ActiveState.com (8.11.6/8.11.6) with ESMTP id g0HNrjK09802\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Thu, 17 Jan 2002 15:53:45 -0800\r\nReceived: from prescod.net (ssh1.ActiveState.com [192.168.3.32])\n\tby smtp3.ActiveState.com (8.11.6/8.11.6) with ESMTP id g0HNrie04204\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Thu, 17 Jan 2002 15:53:44 -0800\r\nMessage-ID: &lt;3C4763D9.59B8E38@...&gt;\r\nDate: Thu, 17 Jan 2002 15:52:57 -0800\r\nX-Mailer: Mozilla 4.76 [en] (Windows NT 5.0; U)\r\nX-Accept-Language: en\r\nMIME-Version: 1.0\r\nTo: rest-discuss@yahoogroups.com\r\nSubject: Asynch and rest-wiki (was Re: [rest-discuss] asynch)\r\nReferences: &lt;200201172119.QAA18146@...&gt;\r\nContent-Type: text/plain; charset=us-ascii\r\nContent-Transfer-Encoding: 7bit\r\nX-Filtered-By: PerlMx makes it fast and easy.  See http://www.ActiveState.com/Products/PerlMx/Header\r\nFrom: Paul Prescod &lt;paul@...&gt;\r\nX-Yahoo-Group-Post: member; u=23186829\r\n\r\nMark Baker wrote:\n&gt; \n&gt;...\n&gt; \n&gt; You&#39;d still need to agree on what a &quot;watch&quot; property is though,\n&gt; so I guess that still counts as an extension.  Never mind. 8-)\n\nAnyhow, you get my point. Eventually the REST world needs to standardize\nthis or agree that HTTP just doesn&#39;t handle the problem of asynch. It&#39;s\none of the weakest points of REST rhetoric. But there are others. \n\nOn that note, I&#39;ve modified the REST wiki FAQ with a bunch of common\nFAQs. Here are the questions I changed or added.\n\nhttp://internet.conveyor.com/RESTwiki/moin.cgi/RestFaq\n\n====\n\n ** What do you mean when you say RPC? \n\nWe mean that each developer defines their own methods and makes them\navailable for remote invocation over the Internet. With this definition,\nREST can be said to use RPC, because it defines the methods for the\ndevelopers so that they don&#39;t have to worry about them. \n\nMost applications that self-identify as using &quot;RPC&quot; do not adhere to the\nREST philosophy. In particular, they use a single URL to represent the\nend-point instead of using a multitude of URLs representing every\ninteresting data object. Then they hide their data objects behind method\ncalls and parameters, making them unavailable to applications built\naround the Web architecture. REST-based services give addresses to every\nuseful data object and use the resources themselves as the targets for\nmethod calls (typically using HTTP methods). \n\n ** Are REST and RPCs incompatible? \n\nExcept for the proviso in the previous FAQ item, and that REST provides\nfor defining new methods (as long as they operate on resources), then\nthe answer is yes. REST is incompatible with &quot;end-point&quot; RPC. Either you\naddress data objects or you address &quot;software components&quot;. REST does the\nformer. End-point RPC does the later. You can try to contort RPC\nprotocols into working on data object URIs but then you end up\nre-inventing a non-standard variant of HTTP. \n\n\n ** Is the concept of Web Services incompatible with REST? \n\nOne answer is that there is no firm definition of WebServices. But REST\nseems to be compatible with most of the definitions floating around. It\nis not compatible with definitions that take SOAP-RPC as a starting\npoint. (but then why would you define the problem space around an\nimplementation technology?) \n\nMost applications that call themselves &quot;web services&quot; use an end-point\nRPC philosopy. \n\n ** What if I need to do a GET but my query is not something that can be\nfit into a URL? \n\nMarkBaker has addressed this and defended it in discussion. Someday\nsomebody should write a more unified discussion of this design and its\ndefence. But in the meantime, ask yourself how often this problem arises\nin real-world situations. GET is restricted to a single-URL line and\nthat sort of enforces a good design principle that everything\ninteresting on the web should be URL-addressable. If you want to make a\nsystem where interesting stuff is not URL-addressable then you need to\njustify that decision. Typically &quot;contorting&quot; your application around\nGET&#39;s limitations makes the application better by forcing it into the\nweb architecture. \n\n **  How does HTTP handle reliable delivery? \n\nGood question...there&#39;s an answer but nobody has typed it in yet.\nPaulPrescod claims that the gist of it is that reliable delivery is more\nof a characteristic of software than of a protocol. After all, there is\nno way that some fancy transaction monitoring program like MQSeries can\nprevent someone from pulling a network cable out in the middle of a\nmessage. The best it can do is try to re-send the message. This implies\nthat the protocol can help by having some kind of message-id. HTTP does\nneed an extension for this. Any volunteers to write this up? \n\n ** How does HTTP handle asynchronous delivery?\n\nThere is no standardized solution yet. You need an HTTP extension. The\noutlines of one were discussed on rest-discuss. Also, you should\nprobably learn about Adam and Rohit&#39;s work on notify.\n\n **  How does HTTP handle transactions: multiple step commands that are\nrolled back together if any one fails? \n\nGood question...while you wait for an answer let&#39;s ask how SOAP, XML-RPC\netc. handle transactions? The answer is mostly: &quot;it is the client&#39;s\nresponsibility&quot;. I think that&#39;s the REST answer also. The database\nconcept of transactions does not scale well to the Web because clients\nwill start transactions and then just forget about them. This doesn&#39;t\njust tie up server resources: it also has severe locking consequences.\nEssentially some other user could be locked out waiting for the\ntransaction to complete. On the other hand, if the clients take full\nresponsibility for reversing their own transactions then the server will\nnot try to do any locking etc. \n\n ** Can REST really beat RPC when the whole software industry is pushing\nRPC-like solutions? \n\nIf REST works and RPC doesn&#39;t then yes, REST can win. Some of us believe\nthat. Notice how the course of SOAP started as pure RPC and has been\nmoving further and further away from it? Perhaps that is early evidence\nof an industry shift. Also, how many RPC-based web services are really\ndeployed and in-use on the Web? SOAP and XML-RPC have been around for\nyears and yet there is no killer app! REST can point to the Web itself\nas proof that it works. If you want to see REST used with XML-RPC then\nI&#39;d suggest you look at Meerkat, which is a massively scalable\napplication, incorporating content from hundreds of sites. It does so by\nusing plain old HTTP. Is there any equivalent SOAP or XML-RPC API that\nis widely implemented in an interoperable fashion? It seems the answer\nis: &quot;not yet.&quot;\n\n **  What does a REST message look like? \n\nREST is just an architctural style. HTTP is the protocol that is most in\ntune with the style, and the one used by the largest REST application,\nthe World Wide Web. URIs are the addressing mechanism for that\napplication. REST can support any media type, but XML is expected to be\nthe most popular transport for structured information. REST is already\nused today with HTML, XHTML, RSS and various proprietary XML\nvocabularies. Unlike SOAP and XML-RPC, REST does not really require a\nnew message format. Just use HTTP and the most appropriate XML\nvocabulary! \n\n ** I need my app to work with non-HTTP protocols. Does REST still\napply? \n\nFirst, are you sure you need your app to work with non-HTTP protocols,\nor is that just what you were told? Perhaps if you read the rest of this\npage you&#39;ll learn to use HTTP in ways that obviate the need for other\nprotocols. Consider carefully how hard it is to deploy new protocols\nacross firewalls. If HTTP can be used for instant messaging (Magi),\ncontent management (WebDAV) and P2P (see above) then what did you have\nin mind that is outside of its scope? \n\nSecond, if you really do need non-HTTP (e.g. to talk to a village in\nZambia with only UUCP access) then have you considered tunnelling HTTP\nover that protocol? HTTP is pretty simple...basically just a couple of\nheaders and you are done!\n\n Paul Prescod\n\n"}}
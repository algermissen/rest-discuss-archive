{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"DgqECErHoPa2GvfV8tGtCPzpe8Fu9QKFzEMHbpgTCNO0_2iZEHh9SzCmMQe90p0G3NM6Xfc5d9sh6lU7abivuWrqBJfOHqv1iuYjBfVYJw","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Representational Cookies","postDate":"1145743378","msgId":6129,"canDelete":false,"contentTrasformed":false,"systemMessage":true,"headers":{"messageIdInHeader":"PFc0MjcyMjcyODI4MzQ2MTE0NTc0MzM3OEBtYWlsLm1haWxzbmFyZS5uZXQ+"},"prevInTopic":0,"nextInTopic":6130,"prevInTime":6128,"nextInTime":6130,"topicId":6129,"numMessagesInTopic":6,"msgSnippet":"Hello! I d love to get some knowledgeable feedback regarding the new use (to the best of my knowledge) I ve devised for cookies, a cacheing technique I refer","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nReceived: (qmail 32920 invoked from network); 22 Apr 2006 23:33:30 -0000\r\nReceived: from unknown (66.218.66.172)\n  by m19.grp.scd.yahoo.com with QMQP; 22 Apr 2006 23:33:30 -0000\r\nReceived: from unknown (HELO n22a.bullet.scd.yahoo.com) (66.94.237.51)\n  by mta4.grp.scd.yahoo.com with SMTP; 22 Apr 2006 23:33:30 -0000\r\nComment: DomainKeys? See http://antispam.yahoo.com/domainkeys\r\nReceived: from [66.218.69.1] by n22.bullet.scd.yahoo.com with NNFMP; 22 Apr 2006 23:33:30 -0000\r\nReceived: from [66.218.66.81] by t1.bullet.scd.yahoo.com with NNFMP; 22 Apr 2006 23:33:29 -0000\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 48327 invoked from network); 22 Apr 2006 22:03:11 -0000\r\nReceived: from unknown (66.218.66.167)\n  by m18.grp.scd.yahoo.com with QMQP; 22 Apr 2006 22:03:11 -0000\r\nReceived: from unknown (HELO mail.mailsnare.net) (206.246.200.187)\n  by mta6.grp.scd.yahoo.com with SMTP; 22 Apr 2006 22:03:00 -0000\r\nReceived: from mail.mailsnare.net (unknown [206.246.200.167])\n\tby mail.mailsnare.net (Postfix) with ESMTP id 34CB7277DC\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Sat, 22 Apr 2006 22:02:57 +0000 (UTC)\r\nTo: rest-discuss@yahoogroups.com\r\nImportance: Normal\r\nSensitivity: Normal\r\nMessage-ID: &lt;W42722728283461145743378@...&gt;\r\nX-Mailer: Mintersoft EdgeDesk, Build 4.03.0105\r\nDate: Sat, 22 Apr 2006 22:02:58 +0000\r\nOrganization: Bison Systems Corporation\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;utf-8&quot;\r\nContent-Transfer-Encoding: 7bit\r\nX-Virus-Scanned: by ClamAV at mailsnare.net\r\nX-eGroups-Msg-Info: 1:12:0:0\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nReply-To: eric@...\r\nSubject: Representational Cookies\r\nX-Yahoo-Group-Post: member; u=266460716\r\nX-Yahoo-Newman-Property: groups-system\r\nX-eGroups-Approved-By: gonga_thrash &lt;distobj@...&gt; via web; 22 Apr 2006 23:33:28 -0000\r\n\r\nHello! I&#39;d love to get some knowledgeable feedback regarding the \nnew use (to the best of my knowledge) I&#39;ve devised for cookies, a cacheing \ntechnique I refer to as &quot;representational cookies&quot;. I&#39;ve mentioned my work \nin a couple of places with no response, perhaps I should have posted here \ninstead, but I was unaware of this list&#39;s existence before today. I&#39;m \nuncertain of my method&#39;s compliance with proper web architecture/REST, in \nlight of the &quot;cookies are always RESTless&quot; assumption.  I have been \ndeveloping this technique (as part of a larger solution) for about a year now.\nIt does work (as far as I can test), and it doesn&#39;t cookie application state,\nbut I am open to criticism.\n\nThere are several problems inherent in content negotiation which are not \nadequately addressed in the standards, IMO. To illustrate, I&#39;ll use an \nimage-file example. Let&#39;s say I make an URI for a resource which happens to \nbe a photo of myself and call it /eric, then set up content negotiation \nbetween representations labeled eric.jpg and eric.png. I wind up with three \nURLs for what I intended (99.9% of the time) to be only one resource, \n&quot;picture of me&quot;. \n\nBut those filename extensions mean that each representation is also a \nresource in its own right, meaning they may be independently linked to. And \nthat&#39;s the problem with filename extensions -- URI aliasing. What if \nsomeone links to /eric.png instead of /eric in a message, and that link is \ndereferenced by a client which doesn&#39;t ACCEPT .png graphics or which prefers \n.jpg? If the client doesn&#39;t ACCEPT .png it should ask the user to download \nthe octet-stream. \n\nHowever, if the client has a higher q-value for .jpg and so does the server, \nand the representation of &quot;picture of me&quot; is intended to be determined via \ncontent negotiation, then haven&#39;t we defeated the entire purpose if we \nrespond to requests for eric.png, with eric.png? We could avoid this \nproblem by redirecting all requests for /eric.png or /eric.jpg to /eric, \nwhich forces the negotiation to occur. This does eliminate the URI alias, \nbut presents its own set of problems. \n\nWhat if the intent of the author of the message who linked to /eric.png was \nto discuss that specific representation, not the concept of &quot;picture of me&quot; \nor the eric.jpg file? In that case, we&#39;d be circumventing author intent by \nforcing negotiation with a redirect, because some clients would never be \nable to access the .png file even if they grok PNG. Ideally, we can figure \nout a way to redirect to our resource URL /eric, while allowing content \nnegotiation to be bypassed for that request. This way, a client which would \nnormally prefer to display the .jpg representation at the /eric URL may also \nbe allowed to display the .png representation at /eric. \n\nThis is where representational cookies come in. After negotiating with a \nclient, why not &quot;bookmark&quot; the result? Does the same client which has \nundergone negotiation for the /eric request have to be subjected to content \nnegotiation on all subsequent requests for /image resources? Won&#39;t the \nresult be the same, each time that client negotiates with the server? So \nset a cookie called image=png or image=jpg. The initial response, when \ncontent negotiation does occur, will set the cookie, and send a VARY:ACCEPT \nheader. \n\nBut that VARY header creates a seemingly infinite number of possibilities \nwhich all result in either &#39;png&#39; or &#39;jpg&#39;. The next request, by virtue of \nhaving the &#39;image=png&#39; cookie set, bypasses content negotiation. This time, \nsince the request for /eric contained a cookie, we set VARY:COOKIE. Since \nthere are only two possibilities, the likelihood of cache hits increases \ndramatically for _any_ client which accepts cookies regardless of how common \nor uncommon its particular ACCEPT header was. \n\nNow, back to that author who posted a link to /eric.png instead of /eric. \nResponses to requests ending in .png can set an image=png cookie and \n303-redirect to /eric. This bypasses content negotiation, allowing direct \naccess to the /eric.png resource at its own URL, which redirects so as not \nto create an URI alias of the /eric resource. The result of this, is we \ndon&#39;t have /eric.png and /eric.jpg stored in caches, we have two copies of \n/eric stored in cache, one with an image=png cookie and the other with an \nimage=jpg cookie. \n\nI&#39;d like to address a comment made here on March 23rd, by Searith Jacobs: \n\n&quot;And if you are hung up on the on the question of having two html responses \nor two icons for the same resource, you can&#39;t. Think of the content-type \nlike a filter one might hold up to light. What you get is all that can be \nrepresented through that filter, no more or less. The html response is the \nonly html response and the icon is the only icon.&quot; \n\nSure I can. The client negotiates based on content-type, using the q \nparameter. But the Apache server, for example, maps a content-type to one \nor more filename extensions using a qs parameter. So I can have eric.jpg \nand eric.jpeg with the first image of high quality and the second, low. \nThis could be reflected in the qs value set in the type-map for each \nextension used. If my server is getting hammered, I can invert the qs \nvalues between the .jpg and the .jpeg extensions, thereby cleanly reducing \nmy bandwidth requirements, and I know of no client (which accepts JPG) which \nwon&#39;t get the specific JPEG version I intend. \n\nMy &quot;problem space&quot; isn&#39;t images, though -- I&#39;m just of the opinion that it \nmakes this discussion easier to visualize if images are used as the example. \nWhat I&#39;ve (we&#39;ve) accomplished, is to use content negotiation to sort \nbrowsers into four &#39;buckets&#39;. The first two, modern desktop browsers and \nWAP-2 handhelds, are served different representations although both have the \n&#39;application/xhtml+xml&#39; content-type. The other two, are for browsers like \nIE which don&#39;t grok &#39;application/xhtml+xml&#39;, and bots/other clients. These \ndevices are served different representations (the latter being text-only) \nwhich are both &#39;text/html&#39;. \n\nSince the URL is the same for each representation, Googlebot may be indexing \nthe text-only, no-DOCTYPE generic HTML version of the site, but a visitor \nclicking through from a SERP undergoes content negotiation which most likely \nresults in either the XHTML 1.1 or HTML 4.01 graphics-enabled, fully-styled \nrepresentations being served. That&#39;s because each representation appears to \nuse the same filename-extension-free URL which is defined for the resource \nitself. Screen readers and such cleanly negotiate into the text-only \nbucket, but we provide those users the ability to switch to our XHTML 1.1 \nrepresentation if image descriptions (alt text, etc.) are desired. \n\nBack to the image example: If a user has cookies disabled and requests \n/eric.png they&#39;ll still get 303-redirected to /eric but their request won&#39;t \ncontain a cookie header, thus forcing content negotiation to occur. The \nresponse headers received will always be VARY:ACCEPT (in this example) never \nVARY:COOKIE. Thus, the downsides to this method, are users with cookies \ndisabled are subject to a little more latency on the origin server, which \nthey&#39;re more likely to be making requests to directly since they&#39;ll be less \nlikely to encounter a cache hit. \n\nAlternate representations may still be accessed directly, even if cookies \nare disabled (and that&#39;s where my image-file example breaks down, images \nneed filename extensions which interfere with this technique, but that \nexample has brought us this far). If a Firefox or Opera, etc. user wants to \nsee the HTML 4.01 representation, they don&#39;t need to have cookies enabled. \nIn the absence of cookies, we (carefully and judiciously so as to avoid \nURI-aliasing issues) use URL-rewriting, which I could call &quot;representational \nsessions&quot; because these pages may be cached (although they aren&#39;t likely to \nbe _retained_). I&#39;ve not seen any other content-negotiation solution for \ntoggling between XHTML 1.1 and HTML 4.01 which allows the alternate \nrepresentation to be accessed, without resorting to the use of URI-aliasing \nfilename extensions. \n\nIn some instances, we &quot;garbage-collect&quot; our representational cookies to \nprevent a) storing state and b) cache aliases, by using a 303-redirect to \nremove any &quot;leftover cookies&quot; which don&#39;t apply to the current request. \nAgain, the overall gains in cache efficiency and user-perceived performance \nmore than offset the occasional extra round-trip to the server, provided \nthat most clients have cookies enabled. This method does not co-exist with \ntraditional state-maintenance cookies, but this restriction is \nper-collection not per-resource or per-server. \n\nThanks for your input, \nEric J. Bowman\n\n\n\n\n\n"}}
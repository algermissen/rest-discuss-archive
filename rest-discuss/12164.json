{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":331949899,"authorName":"Sebastien Lambla","from":"&quot;Sebastien Lambla&quot; &lt;seb@...&gt;","profile":"serialseb","replyTo":"SENDER","senderId":"TVecEMvZA2p26PgiKrbD9ZxUZ6NQ_vUkErSoobbw6wHUHg79TfPgJKHnkwqhjCBVk5Z8ufHnN2R-ruri4oHNUDv7WDs697BCVM0k8oQ","spamInfo":{"isSpam":false,"reason":"12"},"subject":"RE: [rest-discuss] Implementing batches with pipelining","postDate":"1235557835","msgId":12164,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEJMVTEwMi1EUzUyQzZFQzdGNjhFMzVEMzYxNEY3NkI1QUMwQHBoeC5nYmw+","inReplyToHeader":"PDg3azU3ZjF0ZHkuZnNmQG1pY3JvamV0LmF0aC5jeD4=","referencesHeader":"PEJMVTEwMi1XNTYzQjAwMDYxNDlCNDdDNzQ0Njc1MkI1QUYwQHBoeC5nYmw+IDw4N2s1N2YxdGR5LmZzZkBtaWNyb2pldC5hdGguY3g+"},"prevInTopic":12157,"nextInTopic":12169,"prevInTime":12163,"nextInTime":12165,"topicId":12153,"numMessagesInTopic":4,"msgSnippet":"... I don t see much in the http spec that would imply the necessity for requests in a pipeline to fail or succeed individually. The constraints are that the","rawEmail":"Return-Path: &lt;seb@...&gt;\r\nX-Sender: seb@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 76954 invoked from network); 25 Feb 2009 10:31:04 -0000\r\nX-Received: from unknown (66.218.67.95)\n  by m55.grp.scd.yahoo.com with QMQP; 25 Feb 2009 10:31:04 -0000\r\nX-Received: from unknown (HELO blu0-omc4-s22.blu0.hotmail.com) (65.55.111.161)\n  by mta16.grp.scd.yahoo.com with SMTP; 25 Feb 2009 10:31:04 -0000\r\nX-Received: from BLU102-DS5 ([65.55.111.136]) by blu0-omc4-s22.blu0.hotmail.com with Microsoft SMTPSVC(6.0.3790.3959);\n\t Wed, 25 Feb 2009 02:31:04 -0800\r\nX-Originating-Email: [seb@...]\r\nMessage-ID: &lt;BLU102-DS52C6EC7F68E35D3614F76B5AC0@...&gt;\r\nReturn-Path: seb@...\r\nTo: &lt;rest-discuss@yahoogroups.com&gt;\r\nReferences: &lt;BLU102-W563B0006149B47C7446752B5AF0@...&gt; &lt;87k57f1tdy.fsf@...&gt;\r\nIn-Reply-To: &lt;87k57f1tdy.fsf@...&gt;\r\nDate: Wed, 25 Feb 2009 10:30:35 +0000\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;utf-8&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\nX-Mailer: Microsoft Office Outlook 12.0\r\nThread-Index: AcmWv3ATsG4uMTcEQ+yheKLrODPLmgAamJKg\r\nContent-Language: en-gb\r\nX-OriginalArrivalTime: 25 Feb 2009 10:31:04.0572 (UTC) FILETIME=[296AABC0:01C99734]\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Sebastien Lambla&quot; &lt;seb@...&gt;\r\nSubject: RE: [rest-discuss] Implementing batches with pipelining\r\nX-Yahoo-Group-Post: member; u=331949899; y=wsDpDhr-tjhXz_svFTwgWORpRkEk6e2_cJdApjMFQw3EBkzH\r\nX-Yahoo-Profile: serialseb\r\n\r\n&gt; That sounds more like doing atomic transaction than batching. In\n&gt; batchi=\r\nng, each command is or can be independent of the other. As such,\n&gt; they fai=\r\nl or succeed individually.\n\nI don&#39;t see much in the http spec that would im=\r\nply the necessity for requests in a pipeline to fail or succeed individuall=\r\ny. The constraints are that the server need to respond to the client in the=\r\n same order it&#39;s received the requests, and the client to process the respo=\r\nnses in the manner it usually would.\n\n&gt; HTTP pipelining uses the same conne=\r\nction to service multiple\n&gt; requests. It takes both ends to do pipeline. If=\r\n the client has no idea\n&gt; that the server supports pipeline, then there is =\r\nno pipelining. So the\n&gt; third scenario above is not plausible.\n\nYou may hav=\r\ne misread the scenario. The scenario is where the client pipelines the requ=\r\nests, unaware that the server would treat pipelined requests as a unit, aka=\r\n a sort of transaction.\n\n&gt; Depending on HTTP pipelining to define atomic tr=\r\nansaction boundary is\n&gt; a custom behaviour. The client has to know about th=\r\nat a priori.\n\nMy question wasn&#39;t one of *if* the client needs to understand=\r\n the additional semantics of batching as a unit using pipelining, it is an =\r\naccepted factor that this exists as an app protocol that defines how pipeli=\r\nning is supported.\n\nMy question was, is there any side-effects for clients =\r\nnot knowing that app behaviour. I treated the 3 scenarios:\nClient knows abo=\r\nut pipeline as batch and all is good, client doesn&#39;t know pipelining at all=\r\n (and the server will just not provide the &quot;all as one&quot; unit), client knows=\r\n about pipelining but not about the batching semantics on top of it.\n\nI am =\r\nsuggesting that none of those scenarios would break with the additional beh=\r\naviour, and it doesn&#39;t break (as in MUST and MUST NOT) http.\n\n&gt; The server =\r\ncan&#39;t conclusively know within a reasonable time if all the\n&gt; responses hav=\r\ne been received by the client. The server, of course, can\n&gt; define a timeou=\r\nt limit so it can discard the transaction, but does the\n&gt; data requirement =\r\nallow for holding dirty data that long?\n\nThe server cannot do it either wit=\r\nh individual requests, why would it gain that functionality in this scenari=\r\no? Whenever I update things within a single operation, I close my transacti=\r\non before I return the data to the client, not after they&#39;ve received it.\n\n=\r\nIt is assumed that, for the idempotent requests I&#39;m talking about, if the c=\r\nlient assumes failure because of network errors, it will retry, which will =\r\nhave no effect beyond giving the client a full and identical set of respons=\r\nes as the previous time.\n\nThe only change in behaviour between the request/=\r\nresponse model and using pipelining for batching is that the server, whenev=\r\ner it has finished receiving the requests (and there lays the complexity) w=\r\nill process them as a whole and come up with an outcome it will communicate=\r\n to the client. If the client fails to receive them, it&#39;ll retry and get gi=\r\nven the exact same answer, until it modifies the request.\n\n\nSeb \n\n\n"}}
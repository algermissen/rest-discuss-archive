{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":272793929,"authorName":"Kevin Duffey","from":"Kevin Duffey &lt;andjarnic@...&gt;","profile":"andjarnic","replyTo":"SENDER","senderId":"mqfah_hGAbki6XPwppzDVtTYYKxUeuhREn2UVIHB3Zuv09BMdKNjJLmpElt9amOXaDrA2wvhAF5VYitIHlaWOztVvAlJ-bZNOA","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Thoughts about URLs for a REST driven website","postDate":"1267742183","msgId":14991,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIyNTU3Ny40OTAwMi5xbUB3ZWI1NTkwMS5tYWlsLnJlMy55YWhvby5jb20+","inReplyToHeader":"PEIzMjlDQTRDNDIxQTRGNzM5QjIxN0NBNTM2RDFGRENEQEpyblBDPg=="},"prevInTopic":14990,"nextInTopic":14992,"prevInTime":14990,"nextInTime":14992,"topicId":14978,"numMessagesInTopic":41,"msgSnippet":"Hi, I think we must be thinking different ways of doing this. To me, the front action/mvc/struts/spring/whatever is an API consumer. Like you said, take away","rawEmail":"Return-Path: &lt;andjarnic@...&gt;\r\nX-Sender: andjarnic@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 94723 invoked from network); 4 Mar 2010 22:36:24 -0000\r\nX-Received: from unknown (98.137.34.46)\n  by m1.grp.sp2.yahoo.com with QMQP; 4 Mar 2010 22:36:24 -0000\r\nX-Received: from unknown (HELO web55901.mail.re3.yahoo.com) (216.252.110.62)\n  by mta3.grp.sp2.yahoo.com with SMTP; 4 Mar 2010 22:36:24 -0000\r\nX-Received: (qmail 49275 invoked by uid 60001); 4 Mar 2010 22:36:23 -0000\r\nMessage-ID: &lt;225577.49002.qm@...&gt;\r\nX-YMail-OSG: AoMe5OUVM1nItphAEnHmoeMCCNDjJm8_xffJWC71fkCFbN0\n k.lvor3tCYR.g3UogL1adOLj9V8_sh2xt5CD7JKgYkUCXx2JO5HHPiPcmP80\n 54Ib.n2tDyDT422kvumbnfMdk0nsLW7lCS6IP8FQm3xnafajhZ9P5uhet6SA\n 1UMbPY.oLnMRn9m0Pe7T86IZ_MlhZ7IS81rUaYwgBF8x.b.jry_6UW0Lk7cX\n XAEl6rVK1Mn0C.lo1sXkl9JTWPEMSQD30__zAtAKgT_yy.GZr8Gr4lCTD0sn\n TKEr1clHh1Kviey5qM6wE4MQ25FKo3Zg-\r\nX-Received: from [99.22.138.61] by web55901.mail.re3.yahoo.com via HTTP; Thu, 04 Mar 2010 14:36:23 PST\r\nX-Mailer: YahooMailClassic/9.2.12 YahooMailWebService/0.8.100.260964\r\nDate: Thu, 4 Mar 2010 14:36:23 -0800 (PST)\r\nTo: rest-discuss@yahoogroups.com,\n  =?iso-8859-1?Q?J=F8rn_Wildt?= &lt;jw@...&gt;\r\nIn-Reply-To: &lt;B329CA4C421A4F739B217CA536D1FDCD@JrnPC&gt;\r\nMIME-Version: 1.0\r\nContent-Type: multipart/alternative; boundary=&quot;0-431191984-1267742183=:49002&quot;\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Kevin Duffey &lt;andjarnic@...&gt;\r\nSubject: Re: [rest-discuss] Thoughts about URLs for a REST driven website\r\nX-Yahoo-Group-Post: member; u=272793929; y=qkvkmAPbFsNBym1wJZW8raunreOkGCe_UJDz25axIiBxGgHr\r\nX-Yahoo-Profile: andjarnic\r\n\r\n\r\n--0-431191984-1267742183=:49002\r\nContent-Type: text/plain; charset=iso-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nHi,\n\nI think we must be thinking different ways of doing this. To me, the f=\r\nront action/mvc/struts/spring/whatever is an API consumer. Like you said, t=\r\nake away the URL line. It&#39;s responsible for making API calls and translatin=\r\ng the responses from the API into some form of valid HTML.. and likewise, w=\r\nhen the user clicks on some link, your front-end should know that &lt;a href=\r\n=3D&quot;mysite.com?action=3DGetOrders&user=3Dkevin&id=3D12345&filterBy=3Dname,p=\r\nhone&quot;&gt; should translate to something like GET http://myservice.com/users/ke=\r\nvin/orders/12345?filterby=3Dname,phone.\n\nOf course the filterBy is just a s=\r\nilly example of adding a query string to it. The point is, if you build you=\r\nr API to be an API and not try to be an API that is ALSO going to be a web =\r\nfront end... you got to think along the API frame of mind. It sounds like y=\r\nou are (or were) planning on building the API first, which seems logical to=\r\n me. Once the API is done, you build yoru web front end separately. It will=\r\n &quot;translate&quot; xml/json responses from the API into valid HTML info. Let&#39;s sa=\r\ny you get a list of orders that you want to display nicely. Your initial ca=\r\nll GET /orders returns 5 &lt;order id=3D&quot;...&quot; name=3D&quot;...&quot;/&gt; elements. Now you=\r\n want to do something with that to make it look nice for the end user. In m=\r\ny mind, I do NOT care what the URL looks like to the end user..they just se=\r\ne links, images, etc that they interact with. The makeup of that link means=\r\n nothing to your API or the user. So, you want to represent a list of order=\r\ns in HTML to the user. You have some\n sort of servlet, action, etc that han=\r\ndles when the user clicks that link. The click they do does NOT go straight=\r\n back to the API layer. You will intercept everything they click on, to tra=\r\nnslate it as necessary into a valid REST API call. They may get some thml l=\r\nike:\n\n&lt;a href=3D&quot;http://myuisite.com?action=3DSelectedOrder&orderId=3D12&quot;&gt;O=\r\nrder 12&lt;/a&gt;\n&lt;a href=3D&quot;http://myuisite.com?action=3DSelectedOrder&orderId=\r\n=3D13&quot;&gt;Order 13&lt;/a&gt;\n\nwhen they click one of those, the servlet or action or=\r\n bean you have mapped to handle the SelectedOrder mapping, gets passed in t=\r\nhe orderid request paramter. You pull the ID from that, you then make a cal=\r\nl to the REST API=A0 GET /orders/12=A0 filling in the Authorization header,=\r\n etc as needed to satisfy the REST API. In response, you may get some order=\r\n details. From that, you either populate a JAX-RS bean (which is what I do =\r\nwhen I have webiste &quot;client&quot; call a REST API service), or what have you. Yo=\r\nu use that response data to then return the JSP, JSF, etc..what ever you ha=\r\nve that finally generates the HTML the end user sees.\n\nSo.. maybe I am way =\r\noff.. but that is how I have and will continue to do it until I am told oth=\r\nerwise.\n\nYou&#39;ll have to forgive me, but I am not entirely sure what apriori=\r\n knowledge means? If it&#39;s what I think it means, you&#39;re saying that when yo=\r\nu call /orders to get the list of orders.. it would return you orders AND l=\r\nink info regarding those individual orders. So like above, let&#39;s say it ret=\r\nurns:\n\n&lt;orders&gt;\n=A0 &lt;order id=3D&quot;12&quot; name=3D&quot;SomeOrder&quot; href=3D&quot;MyService.c=\r\nom/orders/12&quot;/&gt;\n=A0...\n&lt;/orders&gt;\n\nNow, when you return this as HTML like I =\r\nshowed above, then the user clicks, your web site will still maintain the &quot;=\r\nstate&quot; of the &lt;orders&gt; items it got back. Order 12 is selected, you search =\r\nthru your &lt;order&gt; items for 12, you find it, you pull the HREF out of it an=\r\nd you use that URI to make the call to the REST API. I don&#39;t see how this i=\r\ns prior knowledge.. the REST API gave you this on the last call. You&#39;re web=\r\n site is basically translating it to HTML and maintaining that state across=\r\n requests. But that is ok.. its the &quot;client&quot; and it&#39;s allowed to maintain s=\r\ntate, be it in a HttpSession or using URLRewriting.\n\nI am personally a fan =\r\nof setting loading up JavaScript and passing various state info to the java=\r\nscript tier, so as to avoid any HttpSession data. Every single HREF/JavaScr=\r\nipt link would then append the &quot;stateful&quot; info back on to the link when mak=\r\ning the ajax call. It really depends tho on the amount of data as well. If =\r\nyou got hundreds of users loading up 1000&#39;s of orders each, you are going t=\r\no have to scale your web tier to maintain all that. I still argue that this=\r\n is the job of a desktop app.. The browser is just an extension of the &quot;cli=\r\nent side&quot;, and sending that info back for the browser to keep in memory see=\r\nms trivial to me.\n\nAs for responses from the API containing link info to va=\r\nrious resources, I&#39;ve not seen an example of that before, but I would say t=\r\nhe web site &quot;client&quot; maintains response data that came back, and maybe prov=\r\nides a few options to the end user, be it a link to the order, or a link el=\r\nsewhere. You can only present to the end user the info you got back from th=\r\ne API tho. If there are alternative links available, you can provide more l=\r\ninks to the end user. Still, the same thing happens. Say you get orders, an=\r\nd history info back. So you set up a different servlet or action to handle =\r\nthe user clicking on a history link. Your web tier server still has all the=\r\n response data from the API, either in the HttpSession (so that any servler=\r\nt/action can access it), or passed back to the web client UI so that they c=\r\nan then pass it along on the next request. Either way, you have access to t=\r\nhat info so you can make the appropriate REST API call at that point.\n\nNot =\r\nsure that covers everything you asked about.\n\n\n\n      \r\n--0-431191984-1267742183=:49002\r\nContent-Type: text/html; charset=iso-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;table cellspacing=3D&quot;0&quot; cellpadding=3D&quot;0&quot; border=3D&quot;0&quot; &gt;&lt;tr&gt;&lt;td valign=3D&quot;=\r\ntop&quot; style=3D&quot;font: inherit;&quot;&gt;Hi,&lt;br&gt;&lt;br&gt;I think we must be thinking differ=\r\nent ways of doing this. To me, the front action/mvc/struts/spring/whatever =\r\nis an API consumer. Like you said, take away the URL line. It&#39;s responsible=\r\n for making API calls and translating the responses from the API into some =\r\nform of valid HTML.. and likewise, when the user clicks on some link, your =\r\nfront-end should know that &lt;a href=3D&quot;mysite.com?action=3DGetOrders&amp;=\r\nuser=3Dkevin&amp;id=3D12345&amp;filterBy=3Dname,phone&quot;&gt; should translate=\r\n to something like GET http://myservice.com/users/kevin/orders/12345?filter=\r\nby=3Dname,phone.&lt;br&gt;&lt;br&gt;Of course the filterBy is just a silly example of a=\r\ndding a query string to it. The point is, if you build your API to be an AP=\r\nI and not try to be an API that is ALSO going to be a web front end... you =\r\ngot to think along the API frame of mind. It sounds like you are (or were) =\r\nplanning on\n building the API first, which seems logical to me. Once the AP=\r\nI is done, you build yoru web front end separately. It will &quot;translate&quot; xml=\r\n/json responses from the API into valid HTML info. Let&#39;s say you get a list=\r\n of orders that you want to display nicely. Your initial call GET /orders r=\r\neturns 5 &lt;order id=3D&quot;...&quot; name=3D&quot;...&quot;/&gt; elements. Now you want to d=\r\no something with that to make it look nice for the end user. In my mind, I =\r\ndo NOT care what the URL looks like to the end user..they just see links, i=\r\nmages, etc that they interact with. The makeup of that link means nothing t=\r\no your API or the user. So, you want to represent a list of orders in HTML =\r\nto the user. You have some sort of servlet, action, etc that handles when t=\r\nhe user clicks that link. The click they do does NOT go straight back to th=\r\ne API layer. You will intercept everything they click on, to translate it a=\r\ns necessary into a valid REST API call. They may get some thml like:&lt;br&gt;&lt;br=\r\n&gt;&lt;a\n href=3D&quot;http://myuisite.com?action=3DSelectedOrder&amp;orderId=3D12=\r\n&quot;&gt;Order 12&lt;/a&gt;&lt;br&gt;&lt;a href=3D&quot;http://myuisite.com?action=3DSelec=\r\ntedOrder&amp;orderId=3D13&quot;&gt;Order 13&lt;/a&gt;&lt;br&gt;&lt;br&gt;when they click one=\r\n of those, the servlet or action or bean you have mapped to handle the Sele=\r\nctedOrder mapping, gets passed in the orderid request paramter. You pull th=\r\ne ID from that, you then make a call to the REST API&nbsp; GET /orders/12&n=\r\nbsp; filling in the Authorization header, etc as needed to satisfy the REST=\r\n API. In response, you may get some order details. From that, you either po=\r\npulate a JAX-RS bean (which is what I do when I have webiste &quot;client&quot; call =\r\na REST API service), or what have you. You use that response data to then r=\r\neturn the JSP, JSF, etc..what ever you have that finally generates the HTML=\r\n the end user sees.&lt;br&gt;&lt;br&gt;So.. maybe I am way off.. but that is how I have=\r\n and will continue to do it until I am told otherwise.&lt;br&gt;&lt;br&gt;You&#39;ll have t=\r\no forgive\n me, but I am not entirely sure what apriori knowledge means? If =\r\nit&#39;s what I think it means, you&#39;re saying that when you call /orders to get=\r\n the list of orders.. it would return you orders AND link info regarding th=\r\nose individual orders. So like above, let&#39;s say it returns:&lt;br&gt;&lt;br&gt;&lt;orde=\r\nrs&gt;&lt;br&gt;&nbsp; &lt;order id=3D&quot;12&quot; name=3D&quot;SomeOrder&quot; href=3D&quot;MyService.c=\r\nom/orders/12&quot;/&gt;&lt;br&gt;&nbsp;...&lt;br&gt;&lt;/orders&gt;&lt;br&gt;&lt;br&gt;Now, when you ret=\r\nurn this as HTML like I showed above, then the user clicks, your web site w=\r\nill still maintain the &quot;state&quot; of the &lt;orders&gt; items it got back. Ord=\r\ner 12 is selected, you search thru your &lt;order&gt; items for 12, you fin=\r\nd it, you pull the HREF out of it and you use that URI to make the call to =\r\nthe REST API. I don&#39;t see how this is prior knowledge.. the REST API gave y=\r\nou this on the last call. You&#39;re web site is basically translating it to HT=\r\nML and maintaining that state across requests. But that is ok.. its the &quot;cl=\r\nient&quot; and\n it&#39;s allowed to maintain state, be it in a HttpSession or using =\r\nURLRewriting.&lt;br&gt;&lt;br&gt;I am personally a fan of setting loading up JavaScript=\r\n and passing various state info to the javascript tier, so as to avoid any =\r\nHttpSession data. Every single HREF/JavaScript link would then append the &quot;=\r\nstateful&quot; info back on to the link when making the ajax call. It really dep=\r\nends tho on the amount of data as well. If you got hundreds of users loadin=\r\ng up 1000&#39;s of orders each, you are going to have to scale your web tier to=\r\n maintain all that. I still argue that this is the job of a desktop app.. T=\r\nhe browser is just an extension of the &quot;client side&quot;, and sending that info=\r\n back for the browser to keep in memory seems trivial to me.&lt;br&gt;&lt;br&gt;As for =\r\nresponses from the API containing link info to various resources, I&#39;ve not =\r\nseen an example of that before, but I would say the web site &quot;client&quot; maint=\r\nains response data that came back, and maybe provides a few options to the =\r\nend\n user, be it a link to the order, or a link elsewhere. You can only pre=\r\nsent to the end user the info you got back from the API tho. If there are a=\r\nlternative links available, you can provide more links to the end user. Sti=\r\nll, the same thing happens. Say you get orders, and history info back. So y=\r\nou set up a different servlet or action to handle the user clicking on a hi=\r\nstory link. Your web tier server still has all the response data from the A=\r\nPI, either in the HttpSession (so that any servlert/action can access it), =\r\nor passed back to the web client UI so that they can then pass it along on =\r\nthe next request. Either way, you have access to that info so you can make =\r\nthe appropriate REST API call at that point.&lt;br&gt;&lt;br&gt;Not sure that covers ev=\r\nerything you asked about.&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;br&gt;\n\n\n\n      \r\n--0-431191984-1267742183=:49002--\r\n\n"}}
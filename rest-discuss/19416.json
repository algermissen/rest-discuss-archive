{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":242972596,"authorName":"JÃ¸rn Wildt","from":"=?ISO-8859-1?Q?J=F8rn_Wildt?= &lt;jw@...&gt;","profile":"jorn_lind_nielsen","replyTo":"SENDER","senderId":"8Byk1Dnbbs7b989VoFbFIcYpDSCpYXIY0B-hA7Z6LRCdffOwCHuRl72Sh6wwCbPRppR0odUcSRrz1i767PwGgURhKLW5LCy0bsRgi88jfnxS3xwAlk1nsI8","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] How much REST should your Web API get?","postDate":"1367613672","msgId":19416,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PENBTGgteWsraTFjMnRDPVoxQz12WFZqNkhfK004REpjUHBuSF9qWXpBbkJLM1BmOU5FUUBtYWlsLmdtYWlsLmNvbT4=","inReplyToHeader":"PENBTGgteWtLN0RBZmJUTXJPU3R6QzNZR21tWHpYX1V3V289cEhXbWRiNmp6TWRxR0FiUUBtYWlsLmdtYWlsLmNvbT4=","referencesHeader":"PGtsdGlkditrMGtmQGVHcm91cHMuY29tPgk8MzhDMzMzQjUtMzk4OS00NzgyLUFDRjMtQjIzQTY5OUY2ODREQG5vcmRzYy5jb20+CTxDQU9zWThtU3JUbWVFY1B3dmVXaUd4Q1VBYXNMdEI4NlJCanQ9dG9BN3lOUTZldkdXOEFAbWFpbC5nbWFpbC5jb20+CTw1MDFDNjAxQy1DRDdGLTQxQjgtQTU5Ny1BQkZFQUUxMTE0NERAbm9yZHNjLmNvbT4JPEQ5NkUyQTJELTU2QUMtNDIyOC05QkVBLUQzQzBBQTg4QkQwQkBuZXdjbGFyaXR5Lm5ldD4JPDZGOUU1NEFCLTJEQkUtNDUxRC1BMEM0LTM2RkM2REIyQ0FCOEBub3Jkc2MuY29tPgk8Q0FPc1k4bVFUaUc1UFo0UFQ4ZUNMWkpzTnZSMTJlQ2FpMXBRaFBPaD1mK0c3PXlPKzJRQG1haWwuZ21haWwuY29tPgk8RTM3QUU4MEQtMDQ3Ni00MkNELThFOUMtQzcyMjkyRTM1MzYxQG5ld2NsYXJpdHkubmV0Pgk8Q0FPc1k4bVRkYVZ5amZuaEh0V3JrdDBlajM4Q244PXZLSENrSFh5M2Zjd1pvTENRT0t3QG1haWwuZ21haWwuY29tPgk8NTZFNkNGNTgtRUU1MS00MTdBLUFCQTktNzhCMjIxMEEwNzZGQG5ld2NsYXJpdHkubmV0Pgk8Q0FMaC15a0s3REFmYlRNck9TdHpDM1lHbW1YelhfVXdXbz1wSFdtZGI2anpNZHFHQWJRQG1haWwuZ21haWwuY29tPg=="},"prevInTopic":19415,"nextInTopic":19417,"prevInTime":19415,"nextInTime":19417,"topicId":19371,"numMessagesInTopic":46,"msgSnippet":"It seems to me that the biggest difference between Web API and REST is a matter of perspective: Web APIs talk about THE server and all its clients whereas","rawEmail":"Return-Path: &lt;jornwildt@...&gt;\r\nX-Sender: jornwildt@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 62290 invoked from network); 3 May 2013 20:41:13 -0000\r\nX-Received: from unknown (10.193.84.131)\n  by m10.grp.bf1.yahoo.com with QMQP; 3 May 2013 20:41:13 -0000\r\nX-Received: from unknown (HELO mail-wi0-f175.google.com) (209.85.212.175)\n  by mta4.grp.bf1.yahoo.com with SMTP; 3 May 2013 20:41:13 -0000\r\nX-Received: by mail-wi0-f175.google.com with SMTP id h11so991445wiv.14\n        for &lt;rest-discuss@yahoogroups.com&gt;; Fri, 03 May 2013 13:41:12 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.194.59.208 with SMTP id b16mr15983864wjr.15.1367613672558;\n Fri, 03 May 2013 13:41:12 -0700 (PDT)\r\nX-Received: by 10.194.143.112 with HTTP; Fri, 3 May 2013 13:41:12 -0700 (PDT)\r\nIn-Reply-To: &lt;CALh-ykK7DAfbTMrOStzC3YGmmXzX_UwWo=pHWmdb6jzMdqGAbQ@...&gt;\r\nReferences: &lt;kltidv+k0kf@...&gt;\n\t&lt;38C333B5-3989-4782-ACF3-B23A699F684D@...&gt;\n\t&lt;CAOsY8mSrTmeEcPwveWiGxCUAasLtB86RBjt=toA7yNQ6evGW8A@...&gt;\n\t&lt;501C601C-CD7F-41B8-A597-ABFEAE11144D@...&gt;\n\t&lt;D96E2A2D-56AC-4228-9BEA-D3C0AA88BD0B@...&gt;\n\t&lt;6F9E54AB-2DBE-451D-A0C4-36FC6DB2CAB8@...&gt;\n\t&lt;CAOsY8mQTiG5PZ4PT8eCLZJsNvR12eCai1pQhPOh=f+G7=yO+2Q@...&gt;\n\t&lt;E37AE80D-0476-42CD-8E9C-C72292E35361@...&gt;\n\t&lt;CAOsY8mTdaVyjfnhHtWrkt0ej38Cn8=vKHCkHXy3fcwZoLCQOKw@...&gt;\n\t&lt;56E6CF58-EE51-417A-ABA9-78B2210A076F@...&gt;\n\t&lt;CALh-ykK7DAfbTMrOStzC3YGmmXzX_UwWo=pHWmdb6jzMdqGAbQ@...&gt;\r\nDate: Fri, 3 May 2013 22:41:12 +0200\r\nX-Google-Sender-Auth: KT1krQGy1XBBooCkW5ZAUcs0woE\r\nMessage-ID: &lt;CALh-yk+i1c2tC=Z1C=vXVj6H_+M8DJcPpnH_jYzAnBK3Pf9NEQ@...&gt;\r\nTo: Rest Discussion List &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Type: multipart/alternative; boundary=047d7b86de32249a3604dbd65f3a\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: =?ISO-8859-1?Q?J=F8rn_Wildt?= &lt;jw@...&gt;\r\nSubject: Re: [rest-discuss] How much REST should your Web API get?\r\nX-Yahoo-Group-Post: member; u=242972596; y=Lu58aIPcXZVKQtb-TUTDZrc3NYb_oglPSnve4N4GQ-k1hQ3uglG-ykw2-dw\r\nX-Yahoo-Profile: jorn_lind_nielsen\r\n\r\n\r\n--047d7b86de32249a3604dbd65f3a\r\nContent-Type: text/plain; charset=windows-1252\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nIt seems to me that the biggest difference between &quot;Web API&quot; and &quot;REST&quot; is\n=\r\na matter of perspective: Web APIs talk about THE server and all its clients=\r\n\nwhereas REST talk about MANY servers and multiple clients.\n\nThis differenc=\r\ne in perspective influences many decisions and view points:\n\n- Web API: A s=\r\ningle server need not coordinate with other servers, owned by\nother authori=\r\nties, when it changes its representations - it only needs to\ninform its cli=\r\nents about it.\n\n- REST: all servers must adhere to a common set of well def=\r\nined, stable,\nspecifications (media types) otherwise it would be impossible=\r\n for the\nclients to interact with all the different servers.\n\nIn an ecosyst=\r\nem with one single server and custom build clients (Twitter\nclients for ins=\r\ntance) there really is no need for media types/uniform\ninterface: the clien=\r\nt can safely assume that the server is going to return\nJSON in one specific=\r\n flavor each and every time the client makes a request\nto it. Neither is hy=\r\nper media of much relevance since it is quite safe to\nassume that the serve=\r\nr won&#39;t change its URL structure.\n\nIn an ecosystem of global scale with man=\r\ny servers it is quite the opposite:\ndifferent servers are not implemented b=\r\ny the same development teams and\nthus, without a mechanism like media types=\r\n, the clients really wouldn&#39;t\nhave any way of knowing what kind of informat=\r\nion a resource representation\nmight contain. Neither can the clients make a=\r\nny assumptions about URL\nstructures across disparate server implementations=\r\n.\n\nIt is this difference in perspective that makes it hard for developers t=\r\no\nunderstand the benefits of REST: if all they want to implement is a new\no=\r\nne-off snowflake service with dedicated clients then its difficult to\nargue=\r\n for some of the uniform interface constraints.\n\nRelaxing on the constraint=\r\ns can probably be fine when the goal is a one-off\nnon-REST service - and th=\r\nis is probably often the case: who says Twitter is\ninterested in being redu=\r\nced to a commodity service that we can find all\nover the web? Had Twitter/F=\r\nacebook/others decided to define their interface\nin terms of shared media t=\r\nypes then they would have reduced them selves to\na commodity from the very =\r\nbeginning. This, I believe, is one of the reasons\nthat we don&#39;t see many do=\r\nmain specific media types in the wild.\n\n/J=F8rn\n\n\n\n\n\n\nOn Fri, May 3, 2013 a=\r\nt 9:57 PM, J=F8rn Wildt &lt;jw@...&gt; wrote:\n\n&gt; I know I am bit late=\r\n to the party here, but I would like to contribute\n&gt; with a small real life=\r\n story about a RESTful API for mobile clients - an\n&gt; example which in my op=\r\ninion illustrates rather well that hyper media is\n&gt; useful for mobile clien=\r\nts as well.\n&gt;\n&gt; The setup is as follows:\n&gt;\n&gt;    1. We (cBrain) develop soft=\r\nware for governmental case file management.\n&gt;    2. The software is install=\r\ned on location on different customer sites.\n&gt;    Each of the sites has thei=\r\nr own installation of the server side REST API.\n&gt;    3. We have a mobile iP=\r\nad client that synchronizes selected case files\n&gt;    to the iPad for off-li=\r\nne browsing.\n&gt;\n&gt; Due to the way the central iPad app-store works this means=\r\n that both our\n&gt; clients and servers must deal with all possible combinatio=\r\nns of different\n&gt; versions of the software: a new client may have to deal w=\r\nith an old server,\n&gt; just as well as an old client must work with a new ser=\r\nver.\n&gt;\n&gt; We decided to go &quot;full monty&quot; and stick as closely as possible to =\r\nthe REST\n&gt; constraints - especially hyper media. This means our clients hav=\r\ne one, and\n&gt; only one, single entry point to the REST service - and that en=\r\ntry point\n&gt; contains a service document with links/link-rels to all top lev=\r\nel\n&gt; resources. No hard coded URL structure on the client. The rest is clas=\r\nsic\n&gt; &quot;follow your nose&quot; links embedded in all resource representations.\n&gt;\n=\r\n&gt; Happy moment number one was this: a new, improved and more efficient,\n&gt; s=\r\nynchronization mechanism was introduced without requiring a mandatory\n&gt; upg=\r\nrade of all clients.\n&gt;\n&gt; We simply did what REST does best: introduce a new=\r\n resource and add that\n&gt; to the service document with a new link-rel. Now, =\r\nold clients look for the\n&gt; old link-rel and new clients look for the new li=\r\nnk-rel. This does of course\n&gt; put a maintenance burden on both clients and =\r\nservers since they have to\n&gt; support both ways of synchronizing for some ti=\r\nme.\n&gt;\n&gt; Happy moment number two was this: someone decides to include some t=\r\nhird\n&gt; party stuff that happens to look more a less like a case file - now =\r\nthe\n&gt; clients should be able to synchronize and show both the original case=\r\n files\n&gt; and the new kind-of case files.\n&gt;\n&gt; This too was easy using hyper =\r\nmedia: the clients make no assumptions about\n&gt; URLs so they really don&#39;t ca=\r\nre how the URLs look - and thus the server is\n&gt; free to embed any informati=\r\non it wants in the URL (in this case identifying\n&gt; what kind of case file i=\r\nt points to). When the client asks for the list of\n&gt; relevant case files it=\r\n is then served a list of highly heterogeneous URLs,\n&gt; but as long as any o=\r\nf these resources behaves as case file is expected to,\n&gt; the client happily=\r\n goes on without ever noticing that new types of case\n&gt; files has been adde=\r\nd.\n&gt;\n&gt; So what am I trying to say here? Well, part of the earlier conversat=\r\nion\n&gt; hinted that hyper media might be overkill for mobile clients. I just =\r\nwant\n&gt; to illustrate the opposite: hyper media can be good for mobile clien=\r\nts :-)\n&gt;\n&gt; The last happy moment also illustrates what (I think) was meant =\r\nby &quot;*A\n&gt; REST API should never have =93typed=94 resources that are signific=\r\nant to the\n&gt; client*&quot; in Roy&#39;s famous rant &quot;REST APIs must be hypertext-dri=\r\nven&lt;http://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven&gt;&quot;=\r\n.\n&gt; Had the client known anything about the internal type behind the facade=\r\n\n&gt; then it would have failed when we introduced multiple types behind the\n&gt;=\r\n facade.\n&gt;\n&gt; /J=F8rn\n&gt;\n\r\n--047d7b86de32249a3604dbd65f3a\r\nContent-Type: text/html; charset=windows-1252\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;div dir=3D&quot;ltr&quot;&gt;&lt;div&gt;It seems to me that the biggest difference between &q=\r\nuot;Web API&quot; and &quot;REST&quot; is a matter of perspective: Web APIs=\r\n talk about THE server and all its clients whereas REST talk about MANY ser=\r\nvers and multiple clients.&lt;br&gt;\n&lt;br&gt;&lt;/div&gt;&lt;div&gt;This difference in perspectiv=\r\ne influences many decisions and view points:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;- Web API: A=\r\n single server need not coordinate with other servers, owned by other autho=\r\nrities, when it changes its representations - it only needs to inform its c=\r\nlients about it.&lt;br&gt;\n&lt;br&gt;&lt;/div&gt;&lt;div&gt;- REST: all servers must adhere to a co=\r\nmmon set of well defined, stable, specifications (media types) otherwise it=\r\n would be impossible for the clients to interact with all the different ser=\r\nvers.&lt;br&gt;&lt;br&gt;&lt;/div&gt;\n&lt;div&gt;In an ecosystem with one single server and custom =\r\nbuild clients (Twitter clients for instance) there really is no need for me=\r\ndia types/uniform interface: the client can safely assume that the server i=\r\ns going to return JSON in one specific flavor each and every time the clien=\r\nt makes a request to it. Neither is hyper media of much relevance since it =\r\nis quite safe to assume that the server won&#39;t change its URL structure.=\r\n&lt;br&gt;\n&lt;br&gt;&lt;/div&gt;&lt;div&gt;In an ecosystem of global scale with many servers it is=\r\n quite the opposite: different servers are not implemented by the same deve=\r\nlopment teams and thus, without a mechanism like media types, the clients r=\r\neally wouldn&#39;t have any way of knowing what kind of information a resou=\r\nrce representation might contain. Neither can the clients make any assumpti=\r\nons about URL structures across disparate server implementations.&lt;br&gt;\n&lt;br&gt;&lt;=\r\n/div&gt;&lt;div&gt;It is this difference in perspective that makes it hard for devel=\r\nopers to understand the benefits of REST: if all they want to implement is =\r\na new one-off snowflake service with dedicated clients then its difficult t=\r\no argue for some of the uniform interface constraints. &lt;br&gt;\n&lt;br&gt;Relaxing on=\r\n the constraints can probably be fine when the goal is a one-off non-REST s=\r\nervice - and this is probably often the case: who says Twitter is intereste=\r\nd in being reduced to a commodity service that we can find all over the web=\r\n? Had Twitter/Facebook/others decided to define their interface in terms of=\r\n shared media types then they would have reduced them selves to a commodity=\r\n from the very beginning. This, I believe, is one of the reasons that we do=\r\nn&#39;t see many domain specific media types in the wild.&lt;br&gt;\n&lt;br&gt;&lt;/div&gt;&lt;di=\r\nv&gt;/J=F8rn&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;div class=\r\n=3D&quot;gmail_extra&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;div class=3D&quot;gmail_quote&quot;&gt;On Fri, May 3, 2013 at =\r\n9:57 PM, J=F8rn Wildt &lt;span dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:jw@fjeldgrupp=\r\nen.dk&quot; target=3D&quot;_blank&quot;&gt;jw@...&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;\n&lt;bloc=\r\nkquote class=3D&quot;gmail_quote&quot; style=3D&quot;margin:0 0 0 .8ex;border-left:1px #cc=\r\nc solid;padding-left:1ex&quot;&gt;&lt;div dir=3D&quot;ltr&quot;&gt;&lt;div&gt;I know I am bit late to the=\r\n party here, but I would like to contribute with a small real life story ab=\r\nout a RESTful API for mobile clients - an example which in my opinion illus=\r\ntrates rather well that hyper media is useful for mobile clients as well.&lt;b=\r\nr&gt;\n\n&lt;br&gt;&lt;/div&gt;The setup is as follows:&lt;br&gt;&lt;ol&gt;&lt;li&gt;We (cBrain) develop softw=\r\nare for governmental case file management.&lt;/li&gt;&lt;li&gt;The software is installe=\r\nd on location on different customer sites. Each of the sites has their own =\r\ninstallation of the server side REST API.&lt;/li&gt;\n\n&lt;li&gt;We have a mobile iPad c=\r\nlient that synchronizes selected case files to the iPad for off-line browsi=\r\nng.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Due to the way the central iPad app-store works this means =\r\nthat both our clients and servers must deal with all possible combinations =\r\nof different versions of the software: a new client may have to deal with a=\r\nn old server, just as well as an old client must work with a new server.&lt;/p=\r\n&gt;\n\n&lt;p&gt;We decided to go &quot;full monty&quot; and stick as closely as possi=\r\nble to the REST constraints - especially hyper media. This means our client=\r\ns have one, and only one, single entry point to the REST service - and that=\r\n entry point contains a service document with links/link-rels to all top le=\r\nvel resources. No hard coded URL structure on the client. The rest is class=\r\nic &quot;follow your nose&quot; links embedded in all resource representati=\r\nons.&lt;br&gt;\n\n&lt;/p&gt;&lt;p&gt;Happy moment number one was this: a new, improved and more=\r\n efficient, synchronization mechanism was introduced without requiring a ma=\r\nndatory upgrade of all clients. &lt;br&gt;&lt;/p&gt;&lt;p&gt;We simply did what REST does bes=\r\nt: introduce a new resource and add that to the service document with a new=\r\n link-rel. Now, old clients look for the old link-rel and new clients look =\r\nfor the new link-rel. This does of course put a maintenance burden on both =\r\nclients and servers since they have to support both ways of synchronizing f=\r\nor some time.&lt;/p&gt;\n\n&lt;p&gt;Happy moment number two was this: someone decides to =\r\ninclude some third party stuff that happens to look more a less like a case=\r\n file - now the clients should be able to synchronize and show both the ori=\r\nginal case files and the new kind-of case files. &lt;br&gt;\n\n&lt;/p&gt;&lt;p&gt;This too was =\r\neasy using hyper media: the clients make no assumptions about URLs so they =\r\nreally don&#39;t care how the URLs look - and thus the server is free to em=\r\nbed any information it wants in the URL (in this case identifying what kind=\r\n of case file it points to). When the client asks for the list of relevant =\r\ncase files it is then served a list of highly heterogeneous URLs, but as lo=\r\nng as any of these resources behaves as case file is expected to, the clien=\r\nt happily goes on without ever noticing that new types of case files has be=\r\nen added.&lt;/p&gt;\n\n&lt;p&gt;So what am I trying to say here? Well, part of the earlie=\r\nr conversation hinted that hyper media might be overkill for mobile clients=\r\n. I just want to illustrate the opposite: hyper media can be good for mobil=\r\ne clients :-)&lt;/p&gt;\n\n&lt;p&gt;The last happy moment also illustrates what (I think)=\r\n was meant by &quot;&lt;i&gt;A REST API should never have =93typed=94 resources t=\r\nhat are significant to the client&lt;/i&gt;&quot; in Roy&#39;s famous rant &quot;=\r\n&lt;a href=3D&quot;http://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-d=\r\nriven&quot; target=3D&quot;_blank&quot;&gt;REST APIs must be hypertext-driven&lt;/a&gt;&quot;. Had =\r\nthe client known anything about the internal type behind the facade then it=\r\n would have failed when we introduced multiple types behind the facade.&lt;spa=\r\nn class=3D&quot;HOEnZb&quot;&gt;&lt;font color=3D&quot;#888888&quot;&gt;&lt;br&gt;\n\n&lt;/font&gt;&lt;/span&gt;&lt;/p&gt;&lt;span cl=\r\nass=3D&quot;HOEnZb&quot;&gt;&lt;font color=3D&quot;#888888&quot;&gt;&lt;p&gt;/J=F8rn&lt;br&gt;&lt;/p&gt;&lt;/font&gt;&lt;/span&gt;&lt;/di=\r\nv&gt;\n&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;\n\r\n--047d7b86de32249a3604dbd65f3a--\r\n\n"}}
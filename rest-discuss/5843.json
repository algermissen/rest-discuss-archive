{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":184797058,"authorName":"Benjamin Carlyle","from":"Benjamin Carlyle &lt;benjamincarlyle@...&gt;","profile":"fuzzybsc","replyTo":"SENDER","senderId":"pAyN1G10yrF6ervXPfR5UaRb2ebFqmMzEaq4K4eLXzGAwnWBm8DUlTFViWjh3ONbyLr1izhlgRmNhxIT_I5anZuzpjHjZ8bgOEAV7NvKLzkCDMYEKJu4KXI","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] RESTful representation of side effects?","postDate":"1144335945","msgId":5843,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDExNDQzMzU5NDUuMTEwNjQuMzQuY2FtZWxAbG9jYWxob3N0LmxvY2FsZG9tYWluPg==","inReplyToHeader":"PDhFMjhCRkEzLTIzNzctNEE1Qi1CNEIwLTQxQjUxMTY1RDdGMkBvcGVuZGFyd2luLm9yZz4=","referencesHeader":"PDhFMjhCRkEzLTIzNzctNEE1Qi1CNEIwLTQxQjUxMTY1RDdGMkBvcGVuZGFyd2luLm9yZz4="},"prevInTopic":5842,"nextInTopic":0,"prevInTime":5842,"nextInTime":5844,"topicId":5832,"numMessagesInTopic":12,"msgSnippet":"... REST is a model for managing state mutation and transfer in a large scale distributed architecture. People often get caught up in whether a simple","rawEmail":"Return-Path: &lt;benjamincarlyle@...&gt;\r\nX-Sender: benjamincarlyle@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 78039 invoked from network); 6 Apr 2006 15:05:53 -0000\r\nReceived: from unknown (66.218.66.216)\n  by m33.grp.scd.yahoo.com with QMQP; 6 Apr 2006 15:05:53 -0000\r\nReceived: from unknown (HELO mail05.syd.optusnet.com.au) (211.29.132.186)\n  by mta1.grp.scd.yahoo.com with SMTP; 6 Apr 2006 15:05:52 -0000\r\nReceived: from c210-49-65-117.rochd2.qld.optusnet.com.au (c210-49-65-117.rochd2.qld.optusnet.com.au [210.49.65.117])\n\tby mail05.syd.optusnet.com.au (8.12.11/8.12.11) with ESMTP id k36F5jl8019548;\n\tFri, 7 Apr 2006 01:05:45 +1000\r\nTo: &quot;Dr. Ernie Prabhakar&quot; &lt;drernie@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nIn-Reply-To: &lt;8E28BFA3-2377-4A5B-B4B0-41B51165D7F2@...&gt;\r\nReferences: &lt;8E28BFA3-2377-4A5B-B4B0-41B51165D7F2@...&gt;\r\nContent-Type: text/plain\r\nDate: Fri, 07 Apr 2006 01:05:45 +1000\r\nMessage-Id: &lt;1144335945.11064.34.camel@...&gt;\r\nMime-Version: 1.0\r\nX-Mailer: Evolution 2.4.2.1 \r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0:0\r\nFrom: Benjamin Carlyle &lt;benjamincarlyle@...&gt;\r\nSubject: Re: [rest-discuss] RESTful representation of side effects?\r\nX-Yahoo-Group-Post: member; u=184797058; y=pZ1SU5RSpeZ4GMZyI-CIOKm1nrl9eELbj5F3aS9VViI4Y5E\r\nX-Yahoo-Profile: fuzzybsc\r\n\r\nOn Wed, 2006-04-05 at 15:37 -0700, Dr. Ernie Prabhakar wrote:\n&gt; I want to provide a web service that, say, converts HTML documents  \n&gt; into various formats.   The naive RPC method would seem to be to  \n&gt; create a special URL string for each type, e.g.:\n&gt; \t/convert.cgi?format=pdf&document=mydocument.html\n&gt; \t/convert.cgi?format=doc&document=mydocument.html\n&gt; etc.\n\nREST is a model for managing state mutation and transfer in a large\nscale distributed architecture. People often get caught up in whether a\nsimple conversion activity of this kind is RESTful. They want to add new\nURIs to the process and store the result somewhere on the server side.\nThis is not useful. The starting point for understanding a RESTful\narchitecture is to think about the state that needs to be retained on\nthe server side in order to keep things ticking along. In this case and\ncases like it, there is no server-side state. Because there is no\nserver-side state, there are no server-side resources that need to exist\nto manage or delimit that state.\n\nThe server side does not retain the converted document, so it returns\nthe document in the HTTP response and forgets about it. If it wanted to\nkeep the document around for other users of the service to view, it\nshould store it and represent the stored state as one or more resources.\nIf it wanted to keep public statistics on the number or types of\ndocuments converted, it should store statistical state and represent the\nstored state as one or more resources.\n\nThe difference between REST and RPC in the null-state case is not very\nwide, especially when we are already constraining ourselves to the\ndocument transfer problem domain. The REST version on the wire looks\nlike this:\n&gt;&gt; POST /doc2pdf\n&gt;&gt; (doc document)\n&lt;&lt; 200 OK\n&lt;&lt; (pdf document)\nThe RPC version looks like this:\n&gt;&gt; ConvertDoc2Pdf(doc document)\n&lt;&lt; (SUCCESS, pdf document)\n\nThis difference is still important. If we think about what the software\nlooks like that invokes the request, REST looks like this:\n\tresource = getResource(&quot;http://example.com/doc2pdf&quot;)\n\tdocument = resource.POST(document)\nRPC looks like this:\n\tdocConverter = getDocConverter(&quot;http://example.com/doc2pdf&quot;)\n\tdocument = resource.ConvertDoc2Pdf(document)\nThe RPC approach allows for a lot more of the variation at the code\nlevel to be translated into variation all the way down to the network\nlevel and back up again to the application level on the server side.\nREST takes a uniform approach, and only the code that wants to handle\nthings in a domain-specific way has to do so. The code that gets\nmessages to that code and directs them back away can be generic and\nstraightforward.\n\nREST pushes unformity of verbs and message structure at the network\nlevel, and in fact forces us to rethink the application level\nsignificantly. If the uniform version works, why waste time inventing a\nmore specific or type-safe version? Why validate the whole data\nstructure down in some network stack when you can transport the raw data\nto where it is used and only process what is needed when it arrives? Why\ninsist on converting a message into an intricate structure of data when\nyou are just going to reencode it again for transmission or display it\nto a user? Why not just retain it as strings until you know what you\nwill do with it?\n\nThe difference between REST and RPC is much clearer when we add\nserver-side state to the picture and the existence of intermediataries\nbetween server and client. This what Fielding&#39;s work is mostly about.\nHowever, there is a world view in REST that says &quot;types don&#39;t work on\nthe network unless everyone understands them&quot;. It says that html is\ninterchangable, but the xml schema you dreamed up yesterday is not. It\nsays only parse what you need to, and ignore what you don&#39;t understand.\nIt says that the network with all of it&#39;s different agencies and\nopposing interests is not an environment where traditional\nobject-orientation works. When we look at what does work, we find\nourselves thinking about compatability in different ways.\n\nREST is not the end goal. It is not an absolute good in it&#39;s own right.\nIt is the benefits of REST that cause use to follow its philosophy. REST\nis better than object-orientation for the same reason as we have web\nbrowsers instead of CORBA-browsers. Uniformity is key. Simplicity at the\nnetwork level is key. Managing state transparently as resources is\nimportant for its own reasons, but when you are looking at stateless\nservices such as document converters they really don&#39;t come into the\npicture that much.\n\nBenjamin.\n\n\n"}}
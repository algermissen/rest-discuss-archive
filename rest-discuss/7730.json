{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":184797058,"authorName":"Benjamin Carlyle","from":"Benjamin Carlyle &lt;benjamincarlyle@...&gt;","profile":"fuzzybsc","replyTo":"SENDER","senderId":"RCvVhvusbNTyK0LVu4HIX4qfcr9yHlEdbi3vkaHO2Rz5lgNlktxx8Zei7IREgZ32ePWfcbb1KQMuckXaT3AnMdSfkaeAyAd9UL_Iq4ri4ojwrP5QeRptKSw","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] POST at most once","postDate":"1169875974","msgId":7730,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDExNjk4NzU5NzUuNTM2My40Mi5jYW1lbEBsb2NhbGhvc3QubG9jYWxkb21haW4+","inReplyToHeader":"PDQ1QjI3NDQyLjMwMzAwMDNAZGVob3JhLm5ldD4=","referencesHeader":"PDExNjkyOTc0NjUuNTEzMC41NS5jYW1lbEBsb2NhbGhvc3QubG9jYWxkb21haW4+CSA8NDVCMjc0NDIuMzAzMDAwM0BkZWhvcmEubmV0Pg=="},"prevInTopic":7650,"nextInTopic":7731,"prevInTime":7729,"nextInTime":7731,"topicId":7646,"numMessagesInTopic":40,"msgSnippet":"... Thanks for the links. Problems with POE: * The specification does not cover how the POE resource is created. Presumably, it is through a POST which could","rawEmail":"Return-Path: &lt;benjamincarlyle@...&gt;\r\nX-Sender: benjamincarlyle@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 92090 invoked from network); 27 Jan 2007 05:33:07 -0000\r\nReceived: from unknown (66.218.66.68)\n  by m46.grp.scd.yahoo.com with QMQP; 27 Jan 2007 05:33:07 -0000\r\nReceived: from unknown (HELO mail23.syd.optusnet.com.au) (211.29.133.164)\n  by mta11.grp.scd.yahoo.com with SMTP; 27 Jan 2007 05:33:07 -0000\r\nReceived: from c210-49-93-69.rochd2.qld.optusnet.com.au (c210-49-93-69.rochd2.qld.optusnet.com.au [210.49.93.69])\n\tby mail23.syd.optusnet.com.au (8.13.1/8.13.1) with ESMTP id l0R5Wt4F014465;\n\tSat, 27 Jan 2007 16:32:57 +1100\r\nTo: Bill de hOra &lt;bill@...&gt;\r\nCc: REST Discuss &lt;rest-discuss@yahoogroups.com&gt;,\n        Mark Nottingham &lt;mnot@...&gt;\r\nIn-Reply-To: &lt;45B27442.3030003@...&gt;\r\nReferences: &lt;1169297465.5130.55.camel@...&gt;\n\t &lt;45B27442.3030003@...&gt;\r\nContent-Type: text/plain\r\nDate: Sat, 27 Jan 2007 15:32:54 +1000\r\nMessage-Id: &lt;1169875975.5363.42.camel@...&gt;\r\nMime-Version: 1.0\r\nX-Mailer: Evolution 2.6.3 \r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:0:0:0\r\nFrom: Benjamin Carlyle &lt;benjamincarlyle@...&gt;\r\nSubject: Re: [rest-discuss] POST at most once\r\nX-Yahoo-Group-Post: member; u=184797058; y=EMPd7ZTVtXh61uz0L4RJwr5zF-XJmPwREOqr0bjUU6OkAWE\r\nX-Yahoo-Profile: fuzzybsc\r\n\r\nOn Sat, 2007-01-20 at 19:57 +0000, Bill de hOra wrote:\n&gt; Benjamin Carlyle wrote:\n&gt; &gt; I have been thinking about the idempotency of POST lately, and the\n&gt; &gt; exchange with Steve Bjorg has prompted me to write about it. My\n&gt; current\n&gt; &gt; direction is to treat a POST of null to a factory resource as\n&gt; &gt; idempotent.\n&gt; &gt; [...] \n&gt; &gt; Thoughts?\n&gt; Start here:\n&gt; http://www.mnot.net/drafts/draft-nottingham-http-poe-00.txt\n&gt; http://www.dehora.net/doc/httplr/draft-httplr-01.html\n\nThanks for the links.\n\nProblems with POE:\n* The specification does not cover how the POE resource is created.\nPresumably, it is through a POST which could lead to a chicken and egg\nsituation. My proposal to POST null is designed to create the temporary\nresource from a factory with a stable url, solving this problem.\n* POST is consumed on the POE resource, and can&#39;t be used for other\nnormal purposes. For example, I can&#39;t use this mechanism to create a\nfactory resource. OTOH, the POST null approach only deals with creation\nof the resource. POST is available for normal uses on the created\nresource.\n\nOn HTTPLR:\n* This seems fairly similar to the POST null proposal. In fact, step one\nof the upload protocol appears to be a null POST with step two being the\nPUT. I&#39;m not sure about the explicit client DELETE of the channel, and\nthus I&#39;m not sure about the need for the channel concept at all. A\nserver must be free to time out the new resource in case of premature\nclient failure, so you can&#39;t guarantee delivery unless the request\nsequence completes before this timeout. In light of this I prefer the\nchannel concept to simply be replaced by the concept of a created\nresource.\n* I think there is some danger that the message could be read to be a\nwhole HTTP request or SOAP request or other request that needs to be\ndelivered. That interpretation doesn&#39;t smell right to me, and I think\nthat any suggestion of message transfer should be explicitly avoided in\nfavour of state transfer.\n* The GET appears OK, though clearly the server must also be free to\npurge old messages once its buffers start to fill up. This is a matter\nof summarisation that also affects pub/sub mechanisms.\n\nI think my suggestion remains intact and I&#39;ll look to implementing it\nwhere at most once delivery is required in my architecture. The current\nfactory resource pattern where a new resource is created by POSTing its\nstate to the factory is replaced by a two-phase operation. Phase one is\nthe same POST but with no content:\n&gt;&gt; POST http://example.com/resourcefactory\n&lt;&lt; 201 Created\n&lt;&lt; Location: http://example.com/theresource\nPhase two is to PUT the content you would have otherwise POSTed:\n&gt;&gt; PUT http://example.com/theresource\n&gt;&gt; &lt;&lt;the resource state&gt;&gt;\n&lt;&lt; 200 OK\nEither step can be repeated safely so long as the client doesn&#39;t\nbacktrack by dong a POST after a PUT has been sent and so long as the\nserver doesn&#39;t time out the created resource before the client is sure\nthe creation has occured. If 200 is returned from the POST a reliable\ndelivery is not possible and a regular POST should be attempted. To\nsupport a reliable POST the server must create a temporary resource from\nthe POST.\n\nBenjamin.\n\n\n"}}
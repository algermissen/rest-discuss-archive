{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":78234457,"authorName":"Mikael Andersson","from":"Mikael Andersson &lt;mikael@...&gt;","profile":"snikkt","replyTo":"SENDER","senderId":"vN2sQ-uAjx9pzWbNxE7h-AVUWgcv0VrAsVSB0Lo8wfS7zyzIwG0L4B6Fh7UpbI8r51wagoSmWDNZs_D22Q_L4sgYPnT3cEhzBpBO","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] XML&#39;s &quot;Big Idea&quot; and how it relates to REST","postDate":"1025695992","msgId":1671,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDNEMjJFMEY4LjUwOTA4QHhwZWRpby5jb20+","referencesHeader":"PDUuMS4wLjE0LjAuMjAwMjA3MDMyMDE3MjQuMDFjNDU5YzhAMTkyLjE2OC4wLjU+"},"prevInTopic":1670,"nextInTopic":1672,"prevInTime":1670,"nextInTime":1672,"topicId":1637,"numMessagesInTopic":7,"msgSnippet":"First i d like to state this: One can call (almost) any system OO if you look har enough. In the same way as all systems is procedureal to the core (as","rawEmail":"Return-Path: &lt;mikael@...&gt;\r\nX-Sender: mikael@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_0_7_4); 3 Jul 2002 11:33:15 -0000\r\nReceived: (qmail 63632 invoked from network); 3 Jul 2002 11:33:14 -0000\r\nReceived: from unknown (66.218.66.217)\n  by m10.grp.scd.yahoo.com with QMQP; 3 Jul 2002 11:33:14 -0000\r\nReceived: from unknown (HELO mout01.xpedio.net) (212.247.4.232)\n  by mta2.grp.scd.yahoo.com with SMTP; 3 Jul 2002 11:33:14 -0000\r\nReceived: (qmail-ldap/ctrl 11385 invoked from network); 3 Jul 2002 11:33:12 -0000\r\nReceived: from generic133.xpedio.com (HELO xpedio.com) ([212.247.7.133]) (envelope-sender &lt;mikael@...&gt;)\n          by mout01.xpedio.net (qmail-ldap-1.03) with SMTP\n          for &lt;robert@...&gt;; 3 Jul 2002 11:33:12 -0000\r\nMessage-ID: &lt;3D22E0F8.50908@...&gt;\r\nDate: Wed, 03 Jul 2002 13:33:12 +0200\r\nUser-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.0; en-US; rv:1.1a) Gecko/20020611\r\nX-Accept-Language: en-us, en\r\nMIME-Version: 1.0\r\nTo: Robert Leftwich &lt;robert@...&gt;,  rest-discuss@yahoogroups.com\r\nSubject: Re: [rest-discuss] XML&#39;s &quot;Big Idea&quot; and how it relates to REST\r\nReferences: &lt;5.1.0.14.0.20020703201724.01c459c8@192.168.0.5&gt;\r\nContent-Type: text/plain; charset=us-ascii; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nFrom: Mikael Andersson &lt;mikael@...&gt;\r\nX-Yahoo-Group-Post: member; u=78234457\r\nX-Yahoo-Profile: snikkt\r\n\r\nFirst i&#39;d like to state this:\nOne can call (almost) any system &#39;OO&#39; if you look har enough. In the same way as all systems\nis procedureal to the core (as machinecode is procedural in some sense)\n\nWe must try to look at how different techniques is used. Not how they are specified.\nDistributed systems is about realy more than about theory. People make mistakes.\n\nRobert Leftwich wrote:\n&gt; At 02:33 AM 3/07/2002, Mikael Andersson wrote:\n&gt; \n&gt; \n&gt;&gt;OO is almost _purely_ side-effects, you use methods to alter the state of an object.\n&gt; \n&gt; \n&gt; How is this any different from a description of REST, you still use methods \n &gt; (albeit standardized HTTP methods) to alter the state of a resource, with\n &gt;  the exception that GET allows side-effect free access? Refer to Mark Bakers\n &gt; &#39;An Abstract Model for HTTP Resource State&#39; (http://www.markbaker.ca/2001/09/draft-baker-http-resource-state-model).\n&gt; \n\nGET,POST,PUT has very clear meanings (esp. as describe in that draft). Most OO systems\ncontain 1000&#39;s of methods with different semantics, and it&#39;s hard for a system to know\nwhat they mean. And they cannot explore, for doing so may alter the state unpredictably.\n\nUsing GET you can (or you should be able to atleast...) explore quite freely. POST\notoh, may alter state.\n\n&gt; \n&gt;&gt;And you never know how far these side effects reach. You are at the mercy of whoever\n&gt;&gt;made that particular object. \n&gt; \n&gt; \n&gt; Why is this any different for a resource?\n&gt; \n\nWhen you have the &#39;object&#39; (the page/whatever). The information in it will\nnot change until you request it again. If you act on a local(or remote) object\nin a fullt distributed system, it may change.\n\nI feel the wholeness of a resource is important. All that is guaranteed\nin an OO system is that every object is consistent to it&#39;s own rules at all times.\nAnd the object is the rules, so we don&#39;t know them.\nBut if i call one method, and then another. The result from the first and second\nis subject to timing issues with other systems involved.\n\n&gt; \n&gt;&gt;You never know the state of the object, it&#39;s lika\n&gt;&gt;quantum-mechanics. Unless you look, you don&#39;t know what you have. And when you&#39;ve\n&gt;&gt;looked you still don&#39;t know :)\n&gt; \n&gt; \n&gt; This is where REST is advantageous, however, you can still only see a &#39;representation&#39; \n &gt; of the state of the resource, i.e. you only see what the resource provider wants you\n &gt; to see, so you can never truly know the state of the resource?\n&gt; \n\nMatter is built by atoms whose state we cannot know. But on a macroscopic scale it&#39;s predictable.\nBut an atom here, won&#39;t affect something somewhere entirely different (sans entanglement, but\nthat&#39;s another story :) ).\n\nBut we get some view of the state in a format we can understand. In OO the view is composite. We must\ncall many methods to get a &#39;view&#39;. And during that time we&#39;re at risk of timing issues.\n\n\n&gt; Continuing on with the whole no side-effects approach, I&#39;m having a hard time \n &gt; reconciling this notion, i.e. being purely functional (in the programming language sense)\n &gt; and being able to change the state of a resource via HTTP methods. Am I understanding what\n &gt; you mean when you say side-effect free and if so should we be looking more at FP rather\n &gt; than OOP for implementing REST-like systems?\n\nI don&#39;t think we can be functional. But i think there is some important ideas there. A purely\nfunctional  system can be executed in arbitrary order and yield the same result.\nThis behaviour would do wonders for any distributed system. But we should strive to reduce\nthe points where side effects can happen and also to reduce the impact they may have.\n\nBeing resilient to timing problems is very hard. And when doing something in a distributed\nenvironment timing can be a nightmare.\n\nBtw i&#39;m not an expert of functional languages. What i know is what a friend has showed me which\nis very good at these things and what i&#39;ve read from a few sources. So don&#39;t think i can give\na very  deep insight on functional programming idioms and how it possibly relates to REST\nlike systems.\n\nI have some more things on my mind here. But i&#39;ll try to keep myself from wandering to far\nastray. As i have a tendency to do so. I easily get too philosophical :)\n\n&gt; \n&gt; Robert\n&gt; \n\n\n/Mikael Andersson\n\n\n"}}
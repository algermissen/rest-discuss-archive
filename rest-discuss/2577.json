{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":87113616,"authorName":"S. Mike Dierken","from":"&quot;S. Mike Dierken&quot; &lt;mdierken@...&gt;","profile":"mdierken","replyTo":"SENDER","senderId":"4QCa1E4KuiAqbV5UDYvKU8oPZJM8SP2xgbH7ajZF-MCMh_6ax3F6qV818HTN1Iy_8cn-y1PJn8Rb2B29kg2qsLcfsZ57szf1V1VkQ4sHEg","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Client-composed URI","postDate":"1032237125","msgId":2577,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PE9FMjBDR3ZzZUU0RDNNQmhlM1cwMDAwMjEwN0Bob3RtYWlsLmNvbT4=","referencesHeader":"PDEzNzNENjM0MkZBMUQ0MTE5QTUxMDBFMDI5NDM3RjY0MDQ1RUVDRUJAY2xpZmZvcmQuZGV2by5pbHguY29tPiA8M0Q4NjBFNDYuMzAyMDgwN0BwcmVzY29kLm5ldD4gPE9FNTZmOVBTN1JQTWVrRzUwdjgwMDAwMWI0NEBob3RtYWlsLmNvbT4gPDNEODY0QTNDLjQwMzA2MDFAcHJlc2NvZC5uZXQ+IDxPRTEzUXB0Z0ZyWUlMb3lnWExzMDAwMDEzZWNAaG90bWFpbC5jb20+IDwzRDg2NzNGNC45MDQwOUBwcmVzY29kLm5ldD4="},"prevInTopic":2576,"nextInTopic":2578,"prevInTime":2576,"nextInTime":2578,"topicId":2566,"numMessagesInTopic":22,"msgSnippet":"... From: Paul Prescod  ... Nobody but you said the client knows everything interesting about the server. All I m pointing out is that the","rawEmail":"Return-Path: &lt;mdierken@...&gt;\r\nX-Sender: mdierken@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_1_1_3); 17 Sep 2002 04:29:44 -0000\r\nReceived: (qmail 93129 invoked from network); 17 Sep 2002 04:29:44 -0000\r\nReceived: from unknown (66.218.66.216)\n  by m7.grp.scd.yahoo.com with QMQP; 17 Sep 2002 04:29:44 -0000\r\nReceived: from unknown (HELO hotmail.com) (64.4.16.124)\n  by mta1.grp.scd.yahoo.com with SMTP; 17 Sep 2002 04:29:44 -0000\r\nReceived: from mail pickup service by hotmail.com with Microsoft SMTPSVC;\n\t Mon, 16 Sep 2002 21:29:44 -0700\r\nTo: &quot;Paul Prescod&quot; &lt;paul@...&gt;\r\nCc: &quot;rest-discuss&quot; &lt;rest-discuss@yahoogroups.com&gt;\r\nReferences: &lt;1373D6342FA1D4119A5100E029437F64045EECEB@...&gt; &lt;3D860E46.3020807@...&gt; &lt;OE56f9PS7RPMekG50v800001b44@...&gt; &lt;3D864A3C.4030601@...&gt; &lt;OE13QptgFrYILoygXLs000013ec@...&gt; &lt;3D8673F4.90409@...&gt;\r\nSubject: Re: [rest-discuss] Client-composed URI\r\nDate: Mon, 16 Sep 2002 21:32:05 -0700\r\nMIME-Version: 1.0\r\nContent-Type: text/plain;\n\tcharset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: 7bit\r\nX-Priority: 3\r\nX-MSMail-Priority: Normal\r\nX-Mailer: Microsoft Outlook Express 5.50.4133.2400\r\nX-MimeOLE: Produced By Microsoft MimeOLE V5.50.4133.2400\r\nMessage-ID: &lt;OE20CGvseE4D3MBhe3W00002107@...&gt;\r\nX-OriginalArrivalTime: 17 Sep 2002 04:29:44.0281 (UTC) FILETIME=[D8F70C90:01C25E02]\r\nFrom: &quot;S. Mike Dierken&quot; &lt;mdierken@...&gt;\r\nX-Yahoo-Group-Post: member; u=87113616\r\nX-Yahoo-Profile: mdierken\r\n\r\n\n----- Original Message -----\nFrom: &quot;Paul Prescod&quot; &lt;paul@...&gt;\n\n&gt;\n&gt;  &gt; But for the main use-case of getting a particular portfolio, the client\n&gt;  &gt; still needs to know which link is the right link. And that requires\n&gt; knowing\n&gt;  &gt; (in your example) the name &#39;asof&#39; and the value &#39;20020914&#39;.\n&gt;\n&gt; Yes, in the most tightly bound scenario where the client knows\n&gt; everything interesting about the server and is specifically coded to\n&gt; work with that particular type of server and its datatyhpes, there is no\n&gt; difference.\nNobody but you said the client knows everything interesting about the\nserver.\nAll I&#39;m pointing out is that the client needs to know the same amount of\ninformation in both approaches.\nA client that generates a URI via an algorithm knows only as much as a\ndate-versioned aware client.\nSince the algorithmic approach has no innate bounds (in this example) you\nmay want to surface them and make them explicit - but that is not my point\nand I don&#39;t care one way or the other at this time. The lookup based\napproach has no need for this, but it also does not provide or have access\nto that semantic information (of the allowable/exising bounds) either.\n\n&gt; But  then in that case I could also just as easily use SOAP,\n&gt; CORBA or ASN.1. It&#39;s allowing the other applications that is of interest\n&gt; to me and where I think REST can contribute.\n\n&gt;\n&gt;  &gt; .... The client pops\n&gt;  &gt; these two data items into a function and out pops a URI. Either\n&gt;  &gt; algorithmically constructed or retrieved via a lookup - not much\n&gt; difference,\n&gt;  &gt; except that transferring lookup tables isn&#39;t all that scalable and\n&gt; doesn&#39;t\n&gt;  &gt; reduce coupling.\n&gt;\n&gt; Obviously I disagree on the latter point.\nIf both approaches have a dependency on exactly the same information then\nthe coupling is exactly the same.\n\n&gt;\n&gt;  &gt;&gt;Whereas constructing URIs requires the knowledge\n&gt;  &gt;&gt;that you shouldn&#39;t try to construct URIs into the future or the distant\n&gt;  &gt;&gt;past.\n&gt;  &gt;\n&gt;  &gt; That is a &#39;nice-to-have&#39; not a &#39;need-to-have&#39;.\n&gt;\n&gt; If it prevents your client from hanging indefinately, it is a\n&gt; &quot;need-to-have&quot;.\nIf the resources have nearly infinite granularity then the lookup table will\nhang the client and avoiding a hyperlinking approach is also required.\nLooks like we are stuck. Can&#39;t get there from here.\n\n\n&gt; Basically the list version gives the client more\n&gt; information than the query version. It says not only &quot;you can try to get\n&gt; data at this URI&quot; but also: &quot;Here are URIs that are guaranteed to work\n&gt; and URIs that you don&#39;t see here are likely not to work.&quot;\nA list does not say the second part. If it did, then the list would have to\nbe a full and not partial list. Which isn&#39;t scalable in my opinion - very\nlarge data sets would choke even the copious bandwidth we have today.\n\n&gt; My philosophy\n&gt; is for the server to always give as much extra information to the client\n&gt; as is reasonably possible. To me that loosens binding.\nEarlier you said that the algorithmic approach would need to know the\nconstraints (boundary, past/future, etc.) Since this is extra information\nthat is provided to the client, isn&#39;t this an example of what you consider\n&#39;loosened coupling&#39;?\n\n\n&gt;\n&gt;  &gt;...\n&gt;  &gt; How would the client &quot;know how to retrieve &#39;date-versioned documents&#39;&quot;?\n&gt;  &gt; Isn&#39;t that what we are talking about?\n&gt;\n&gt; No, we&#39;re talking about specifically date-versioned portfolios not the\n&gt; more generic concept of date-versioned resources. I&#39;m trying to\n&gt; introduce the notion of subtyping. Subtyping on the Web is well-defined\n&gt; for graphs of links, but not for queries (though that is perhaps doable\n&gt; -- nobody has thought it through).\n&gt;\n&gt;  &gt;...\n&gt;  &gt;\n&gt;  &gt; Knowing the type/meaning is not the same as knowing how to retrieve the\n&gt;  &gt; information. The &#39;query contruction technologies&#39; is the &#39;how to\n&gt; retrieve&#39;\n&gt;  &gt; part. The semweb technologies you mentioned don&#39;t talk about it. You\njust\n&gt;  &gt; essentially said &#39;assume I know how to retrieve one&#39;...\n&gt;\n&gt; Basically you see a URI, you invoke GET. The question is how do I filter\n&gt; to certain dates. I already pretty much know how to do that right now\n&gt; using the N3 implementation CWM (presuming the data is somehow\n&gt; interperable as RDF). Of course saving the documents to the local hard\n&gt; disk is a side-effect that is outside the scope of N3.\nSorry... too many acronyms. Can you provide an example?\n\nSounds like you are advocating retrieving a (possibly very large) lookup\ntable and doing local queries. The &#39;filter to certain dates&#39; is an operation\nupon that local data - and that filter would need the same input data as a\nclient-composed URI (namely &#39;asof&#39; and the date\nsyntax/value-space/meaning/whatever).\n\n&gt;\n&gt; But anyhow, the part I could do in N3 is: &quot;Start with this URI which is\n&gt; a list of &#39;date-versioned resources&#39;. By definition each one has a date.\n&gt; Get the ones that are less than 5 days old (some hand waving around date\n&gt; functions here...).\nI think I&#39;m beginning to glimpse what you are getting at. The same\ninformation (&#39;asof&#39; and dates) is used to crawl local content (retrieved\nfrom a generic uri), rather than to directly address a remote resource... is\nthat correct?\n\n&gt; Then dereference each of them and parse them as RDF.\n&gt; Then look for a &#39;VersionType&#39; property and return me the set where the\n&gt; &#39;VersionType&#39; is &quot;Major&quot;, not &quot;Minor&quot;.&#39;\n&gt;\n&gt; Although it sounds like I am telling it the order of operations of\n&gt; course I wouldn&#39;t really. It could do a depth-first search for relevant\n&gt; data or get them all and then filter, based on its own best judgement.\n&gt;\n&gt; The N3 &quot;query&quot; will automatically work with any subtype of\n&gt; &quot;date-versioned-resource&quot; including &quot;date-versioned purchase order&quot; or\n&gt; &quot;date-versioned home page&quot; or &quot;date-versioned portfolio.&quot; It will also\n&gt; work with any resource that N3 knows how to interpret *as* a\n&gt; date-versioned resource using some inferencing rules that may rename or\n&gt; compute properties.\nQueries (which is a form of addressing) performed upon local content\ncontent, rather than queries turned into addresses and remote content\naccessed directly.\n\n&gt;\n&gt; As in object oriented programming, subtyping is usually only valuable in\n&gt; the long run, not for the very first project you apply it to. It&#39;s when\n&gt; you end up with many subtypes of the same thing that you get economies\n&gt; of scale.\nThe same re-application probably would not work with composed URIs out of\nthe box. But if you&#39;ve got content-manipulation approaches (arch forms, name\nmapping, etc.) executed on the client, then I supposed that same slot could\nbe filled with mappings of the declarative rules for generating URIs also.\n\n\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":4981751,"authorName":"Mark Nottingham","from":"Mark Nottingham &lt;mnot@...&gt;","profile":"mnotting","replyTo":"SENDER","senderId":"vHmAa2BT0Vwnhpo7EBr8Vsrjzry24WmryRIBaZStLJ3fRqCpkYT8j9sWrH8qFQyLb88QbCktelomkFzVS9waoruxD9sOOg","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Autogenerating REST code: which format?","postDate":"1019889741","msgId":1104,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEVDRjQ1QjM0LTU5QTktMTFENi04NzkwLTAwMEEyNzgzNkE2OEBtbm90Lm5ldD4=","inReplyToHeader":"PDIwMDIwNDI2MDAzMzAyLkEyOTU4N0BtZW1zLWV4Y2hhbmdlLm9yZz4="},"prevInTopic":1090,"nextInTopic":1107,"prevInTime":1103,"nextInTime":1105,"topicId":1086,"numMessagesInTopic":13,"msgSnippet":"Hi amk, I ve been plugging away (slowly) at a framework I m calling Tarawa for a while. It s basically a toolkit for writing RESTful web applications, and is","rawEmail":"Return-Path: &lt;mnot@...&gt;\r\nX-Sender: mnot@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_0_3_1); 27 Apr 2002 06:42:23 -0000\r\nReceived: (qmail 40059 invoked from network); 27 Apr 2002 06:42:22 -0000\r\nReceived: from unknown (66.218.66.217)\n  by m6.grp.scd.yahoo.com with QMQP; 27 Apr 2002 06:42:22 -0000\r\nReceived: from unknown (HELO mail.mnot.net) (64.170.196.242)\n  by mta2.grp.scd.yahoo.com with SMTP; 27 Apr 2002 06:42:22 -0000\r\nReceived: from 1-130.mnot.net (1-130.mnot.net [192.168.1.130])\n\tby mail.mnot.net (Postfix) with ESMTP\n\tid E4629976D; Fri, 26 Apr 2002 23:42:21 -0700 (PDT)\r\nDate: Fri, 26 Apr 2002 23:42:21 -0700\r\nSubject: Re: [rest-discuss] Autogenerating REST code: which format?\r\nContent-Type: text/plain; charset=US-ASCII; format=flowed\r\nMime-Version: 1.0 (Apple Message framework v481)\r\nCc: rest-discuss@yahoogroups.com\r\nTo: akuchlin@...\r\nIn-Reply-To: &lt;20020426003302.A29587@...&gt;\r\nMessage-Id: &lt;ECF45B34-59A9-11D6-8790-000A27836A68@...&gt;\r\nContent-Transfer-Encoding: 7bit\r\nX-Mailer: Apple Mail (2.481)\r\nFrom: Mark Nottingham &lt;mnot@...&gt;\r\nX-Yahoo-Group-Post: member; u=4981751\r\nX-Yahoo-Profile: mnotting\r\n\r\nHi amk,\n\nI&#39;ve been plugging away (slowly) at a framework I&#39;m calling Tarawa for a \nwhile. It&#39;s basically a toolkit for writing RESTful web applications, \nand is an outgrowth/generalisation of the exploration I did in Wallal \n[1].\n\nThe idea is to play off of the similarities between objects and REST;\n\ninstance -&gt; resource (noun)\nmethod -&gt; method (verb)\nparameters -&gt; parameters / query\nreturn value -&gt; representation\n\nThus, tarawa would define a class, Resource, which you could subclass \ninto a specific kind of resource, say a homepage, and then hang methods \noff it, which would handle content negotiation;\n\nclass Homepage(tarawa.Resource):\n\tdef GET_text_html(self, parameters, query_args):\n\t\t[ process ]\n\t\treturn representation\n\n\tdef text_xml_PUT_text_html(self, parameters, query_args, \nrepresentation):\n\t\t[ ... ]\n\t\treturn representation\n\nand so forth. This gives you a nice way to resource-model apps, and the \nability to drop in a variety of back-ends (e.g., CGI, medusa, etc.) \nState would live with the instance, and can be loaded and stored at \ninstance __init__ and __del__ as appropriate. In the future, I&#39;d like to \nhave intermediate subclasses to handle things like authentication, \ncaching, etc.\n\nIt&#39;s now mostly a lot of pseudocode, although I think it&#39;s mostly \nfunctional at a high level; the conneg and dispatching stuff is pretty \nmuch ready for testing. If anyone&#39;s interested, I&#39;ll document what&#39;s \nthere and throw it up; I&#39;d be glad for some help / ideas / crit.\n\nCheers,\n\n\n1. http://www.mnot.net/wallal/\n\n\nOn Thursday, April 25, 2002, at 09:33  PM, akuchlin@... \nwrote:\n\n&gt; On Thu, Apr 25, 2002 at 03:52:22PM -0700, Paul Prescod wrote:\n&gt;&gt; So I would say that you are in a good position to start with your code\n&gt;&gt; and factor away the irrelevancies using Python constructs until you \n&gt;&gt; have\n&gt;&gt; essentially factored the code into a declarative portion and an\n&gt;&gt; executable portion. If the declarative portion corresponds exactly to\n&gt;\n&gt; There were two problems, at least when doing this in Quixote.  The\n&gt; first was that I ended up writing a class to represent each object and\n&gt; sub-object; so if there was a Service URI, and Services contain\n&gt; Tickets, I needed to write Service and Ticket classes.  The second was\n&gt; that my method implementations all looked like:\n&gt;\n&gt; \tdef metadata (request):\n&gt; \t   rm = request.environ[&#39;REQUEST_METHOD&#39;]\n&gt; \t   if rm == &#39;GET&#39;:\n&gt; \t       # retrieve data & return it\n&gt; \t   elif rm == &#39;PUT&#39;:\n&gt; \t       # read body & store it\n&gt; \t   elif rm == &#39;POST&#39;:\n&gt; \t       # whatever POST does\n&gt;\n&gt; I suppose some clever base class could do this work, and call\n&gt; metadata_get() and metadata_put() methods.\n&gt;\n&gt;&gt; They have accepted my\n&gt;&gt; requirement that WSDL should support links as an official \n&gt;&gt; requirement...\n&gt;\n&gt; Wouldn&#39;t PUT/DEL also need to be supported in order to implement all\n&gt; of REST?\n&gt;\n&gt;&gt; True. In my mind the primary weakness with WRDL is that it isn&#39;t\n&gt;&gt; integrated into any kind of data binding framework. To clarify: WSDL\n&gt;&gt; more or less depends upon XML Schema. That means that if you figure out\n&gt;&gt; a way to map XML Schema into your language (as many languages have done\n&gt;&gt; -- at least for simple stuff) then you can generate wrapper classes \n&gt;&gt; that\n&gt;&gt; know how to serialize and deserialize themselves &quot;for free&quot;.\n&gt;\n&gt; Does this matter for a dynamic language, though?  You could just\n&gt; return XML-marshalled objects of whatever type, agreeing on the DTD\n&gt; beforehand, and let the chips fall at runtime.\n&gt;\n&gt;\n--\nMark Nottingham\nhttp://www.mnot.net/\n\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":272793929,"authorName":"Kevin Duffey","from":"Kevin Duffey &lt;andjarnic@...&gt;","profile":"andjarnic","replyTo":"SENDER","senderId":"kxrEIWWF12JVD69N7b9HgeAqdlVXILifw5jJXL-7wv3P49ydGmbJD0YbcD5vZlARLuWCNBWsnqhfFgV8nqacYFJop7wkNilaXA","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Link relations [was: A media type for case files, dossiers and documents]","postDate":"1291362884","msgId":17009,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDEwODA4MS42MDg0NC5xbUB3ZWI1NTkwMS5tYWlsLnJlMy55YWhvby5jb20+","inReplyToHeader":"PDIwMTAxMjAyMjMzMjU1LmQ1NWJhZTkzLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4="},"prevInTopic":17008,"nextInTopic":17010,"prevInTime":17008,"nextInTime":17010,"topicId":16947,"numMessagesInTopic":88,"msgSnippet":"I get everything you are saying..finally thanks to a few of you that set me clear on this whole media-type issue. I am however having a hard time thinking","rawEmail":"Return-Path: &lt;andjarnic@...&gt;\r\nX-Sender: andjarnic@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 9206 invoked from network); 3 Dec 2010 07:54:46 -0000\r\nX-Received: from unknown (98.137.34.45)\n  by m4.grp.sp2.yahoo.com with QMQP; 3 Dec 2010 07:54:46 -0000\r\nX-Received: from unknown (HELO nm17.bullet.mail.ac4.yahoo.com) (98.139.52.214)\n  by mta2.grp.sp2.yahoo.com with SMTP; 3 Dec 2010 07:54:45 -0000\r\nX-Received: from [98.139.52.188] by nm17.bullet.mail.ac4.yahoo.com with NNFMP; 03 Dec 2010 07:54:45 -0000\r\nX-Received: from [98.139.52.186] by tm1.bullet.mail.ac4.yahoo.com with NNFMP; 03 Dec 2010 07:54:45 -0000\r\nX-Received: from [127.0.0.1] by omp1069.mail.ac4.yahoo.com with NNFMP; 03 Dec 2010 07:54:45 -0000\r\nX-Yahoo-Newman-Property: ymail-3\r\nX-Yahoo-Newman-Id: 252922.45742.bm@...\r\nX-Received: (qmail 61391 invoked by uid 60001); 3 Dec 2010 07:54:45 -0000\r\nMessage-ID: &lt;108081.60844.qm@...&gt;\r\nX-YMail-OSG: xchHPPoVM1nKB31Wkwgq6U9afJaU8ARNpSmdFCS5RlVv3z.\n Vd2pO6C4IKZfX0hPr744IDM3ubzejytYkxHSb1_kjLb0Iy6FsVC_qTIBTz2w\n PU.zP0qq6.EFn29SnOqj9f.GQPTgcKyCPeuLzrZluh2ccXfd.VsUslwUphHL\n x78QMwYWs8c8mQtbMlg.IrWntli4E39oZjpGU88BspttcrmWTpNxuF6ZxM3K\n 060adD2.qWB6yjVY83KqVd6of_4QzN_VqT_AwRY7x8AHk_GF77aHs1F3J9zs\n KEqgNaP2Yb0pokK12Jve1ZREyJ1PAUv0Xknw_9PidECkIGMWMArQA.uuAyV3\n T4yunGoPBURKSCOQ-\r\nX-Received: from [99.22.138.61] by web55901.mail.re3.yahoo.com via HTTP; Thu, 02 Dec 2010 23:54:44 PST\r\nX-Mailer: YahooMailClassic/11.4.20 YahooMailWebService/0.8.107.285259\r\nDate: Thu, 2 Dec 2010 23:54:44 -0800 (PST)\r\nTo: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nCc: Rest Discussion List &lt;rest-discuss@yahoogroups.com&gt;,\n  juergen.brendel@...\r\nIn-Reply-To: &lt;20101202233255.d55bae93.eric@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: multipart/alternative; boundary=&quot;0-953486024-1291362884=:60844&quot;\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Kevin Duffey &lt;andjarnic@...&gt;\r\nSubject: Re: [rest-discuss] Link relations [was: A media type for case files, dossiers and documents]\r\nX-Yahoo-Group-Post: member; u=272793929; y=yJANDcFXu1-vEnNPYiWWsCW7TDwE0fxYBtlBUCDYLFCNt0OQ\r\nX-Yahoo-Profile: andjarnic\r\n\r\n\r\n--0-953486024-1291362884=:60844\r\nContent-Type: text/plain; charset=utf-8\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nI get everything you are saying..finally thanks to a few of you that set me=\r\n clear on this whole media-type issue. \n\nI am however having a hard time th=\r\ninking about telling clients that they basically need to parse html to use =\r\nmy API. I much rather say &quot;for /orders, you get this chunk of xml back with=\r\n these potential elements.. parse it to get the data you need&quot;. Or in JSON.=\r\n As I use Java/JAX-RS with Jersey, it handles automatically turning my obje=\r\ncts into either xml or json, whatever the Accept header specifies. Anyway, =\r\nfor my own learning, it is good to know what you said, and it does make sen=\r\nse. However, it seems odd to me to return things in HTML as opposed to xml =\r\nor json, when it&#39;s just chunks.. that is, a user places 100 orders over 3 m=\r\nonths, then comes in and asks to see a history of orders. I return an xml c=\r\nhunk with their 100 orders and related info. That seems perfectly fine to p=\r\nrovide in xml or json, allowing any client to parse the response as they se=\r\ne fit. I would obviously have some sort of api doc that would explain the r=\r\nesponse. \n\nI guess what I am grappling with is that for the most part, I wo=\r\nuld suspect most services like the one I am messing around with to learn, w=\r\nould be used by specific clients, not anyone and everyone out on the web. M=\r\nore so, I don&#39;t see anyone needing to use my particular bits of data I retu=\r\nrn for their own use.. that is, if I were to register a media type that rep=\r\nresents a generic ordering document, that might make sense, but in my case,=\r\n if I am building up a REST api for my specific little service, it doesn&#39;t =\r\nseem like returning HTML would make any more sense than returning xml or js=\r\non. I certainly can see if I was building my own web site, where I have som=\r\ne javascript make ajax requests and I return a chunk of HTML instead of XML=\r\n or JSON, so that my own site consuming my API can benefit from having HTML=\r\n directly, rather than xml or json then have to build up the html on the fl=\r\ny in the browser. But for say a mobile app that had a native client that\n a=\r\nllowed a user to log in and pull up their recent orders, a chunk of XML wou=\r\nld fit well. HTML seems more difficult to have to parse and deal with.. at =\r\nleast the way I think. Again, if I were going to display it in a browser..m=\r\naybe it&#39;s fine, but if I wanted to do something with the data before displa=\r\nying it or maybe it&#39;s not a web browser at all, html seems out of place. Th=\r\nat&#39;s just my opinion tho from the bits I&#39;ve learned the past few days.\n\n\n--=\r\n- On Thu, 12/2/10, Eric J. Bowman &lt;eric@...&gt; wrote:\n\nFrom: Eri=\r\nc J. Bowman &lt;eric@...&gt;\nSubject: Re: [rest-discuss] Link relati=\r\nons [was: A media type for case files, dossiers and documents]\nTo: &quot;Kevin D=\r\nuffey&quot; &lt;andjarnic@...&gt;\nCc: &quot;Rest Discussion List&quot; &lt;rest-discuss@yahoo=\r\ngroups.com&gt;, juergen.brendel@...\nDate: Thursday, December 2, 2010,=\r\n 10:32 PM\n\n\n\n\n\n\n\n=C2=A0\n\n\n\n  \n\n\n    \n      \n      \n      Kevin Duffey wrote=\r\n:\n\n&gt; \n\n&gt; Valid point. I am not sure what media type would fit then. I am\n\n&gt;=\r\n trying to follow the HATEOS design, I have an entry point that\n\n&gt; returns =\r\nsome links based on credentials, from there a client would\n\n&gt; use those to =\r\nmake calls to any of my resources, and each response\n\n&gt; would return a rele=\r\nvant chunk of XML or JSON with links for each\n\n&gt; resource accessible at tha=\r\nt point (for example GET /orders/id would\n\n&gt; return a specific order along =\r\nwith one or more links that can be used\n\n&gt; to operate on the order). \n\n&gt;\n\n\n=\r\n\nI&#39;ve never seen an order-processing system that couldn&#39;t be modeled as\n\nHT=\r\nML.  In fact, I&#39;ve rarely seen an order-processing system that wasn&#39;t\n\nHTML=\r\n.  In OOP terminology, the goal is to distribute not your objects,\n\nbut you=\r\nr object interfaces.  REST says, make those object interfaces\n\nuniform.  Wh=\r\nich means participants have a network-based shared\n\nunderstanding of your s=\r\ntate transitions (links, forms), IOW, a self-\n\ndocumenting API.\n\n\n\nIt&#39;s per=\r\nfectly acceptable to model your data as JSON or as XML (bearing\n\nin mind th=\r\nat schemas are an orthogonal concern).  The trick is to\n\ncreate an HTML int=\r\nerface for either JSON or XML data, which instructs\n\nuser-agents how to int=\r\neract with that data.  I&#39;d choose either JSON or\n\nXML, instead of trying to=\r\n do both, depending on whether you&#39;re more\n\ncomfortable transforming that d=\r\nata into HTML using Javascript or XSLT.\n\n\n\n&gt; \n\n&gt; So if I use application/xm=\r\nl, my API would not be considered truly\n\n&gt; RESTful? \n\n&gt; \n\n\n\nNo, not if you&#39;=\r\nre using application/xml as the hypertext engine driving\n\napplication state=\r\n.  If it&#39;s just a snippet of XML which gets read by,\n\nsay, an HTML front-en=\r\nd driving application state, then it&#39;s OK because\n\nthe processing model (pa=\r\nrse as XML, handling XInclude/XLink/rdf:about)\n\nis adequate to the task.  I=\r\nf that XML snippet contains URIs the user is\n\nsupposed to click on to trans=\r\nition the application to the next steady-\n\nstate (which aren&#39;t XLinks), wel=\r\nl, that&#39;s what &lt;a&gt; and atom:link are\n\nfor, there&#39;s no corollary in applicat=\r\nion/xml (besides XLink).\n\n\n\nAlso, most order forms are simply tabular data,=\r\n the semantics of which\n\ndon&#39;t exist in application/xml like they do in app=\r\nlication/xhtml+xml or\n\ntext/html with &lt;table&gt;.  Same with lists, same with =\r\nforms.\n\n\n\n&gt;\n\n&gt; So now I&#39;ll ask, what media type I could possibly use with m=\r\ny own\n\n&gt; xml/json structure? It almost sounds like you&#39;re saying I shouldn&#39;=\r\nt\n\n&gt; be returning my own made up structure, that I should instead use an\n\n&gt;=\r\n existing media type, like one with xhtml or something. Is there a\n\n&gt; media=\r\n type that allows for any sort of specific format to a domain to\n\n&gt; be retu=\r\nrned? Or does that now fall into a case where I should create\n\n&gt; my own med=\r\nia type and register it with IANA?\n\n&gt; \n\n\n\nIt falls into a case where you sh=\r\nould refactor.  You have tabular data,\n\nso you need to choose a data type w=\r\nhich expresses such semantics (i.e.\n\nHTML, or DocBook).  The whole point of=\r\n media types is that they are\n\n_not_ domain-specific, but rather, represent=\r\n a shared understanding of\n\na processing model at the network (IP) layer.  =\r\nThis is the fundamental\n\ntradeoff of the style:\n\n\n\n&quot;[A] uniform interface d=\r\negrades efficiency, since information is\n\ntransferred in a standardized for=\r\nm rather than one which is specific to\n\nan application&#39;s needs.&quot;\n\n\n\nAn orde=\r\nr consists of item numbers, descriptions, quantity, unit price\n\nand total p=\r\nrice.  You *could* re-invent the &lt;table&gt; wheel and register\n\nit as a new me=\r\ndia type, but it&#39;s more scalable (maintainable, portable)\n\nto re-use HTML e=\r\nven if it isn&#39;t a precise fit.  If you create a new\n\nmedia type, then you n=\r\need to distribute a custom user-agent.  When you\n\nupgrade your API, you mus=\r\nt simultaneously update that user-agent.\n\n\n\nThe success of the Web is due t=\r\no the common user-agent.  What I really\n\ndon&#39;t want, is for any system I in=\r\nteract with to require me to install\n\nyet another piece of software, and ke=\r\nep it up-to-date.  That&#39;s coupling.\n\nSo much easier for everyone concerned,=\r\n to target the browser.  That way,\n\nI only need to install and maintain one=\r\n user-agent regardless of how\n\nmany different systems I interact with.  Suc=\r\nh decoupling allows clients\n\nand servers to evolve independently.  So there=\r\n is a cost associated\n\nwith the minting of new media types -- coupling -- u=\r\nnless and until the\n\nnew media type achieves significant uptake.\n\n\n\n-Eric\n\n=\r\n\n\n    \n     \n\n    \n    \n\n\n \n\n\n\n  \n\n\n\n\n\n\n      \r\n--0-953486024-1291362884=:60844\r\nContent-Type: text/html; charset=utf-8\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;table cellspacing=3D&quot;0&quot; cellpadding=3D&quot;0&quot; border=3D&quot;0&quot; &gt;&lt;tr&gt;&lt;td valign=3D&quot;=\r\ntop&quot; style=3D&quot;font: inherit;&quot;&gt;I get everything you are saying..finally than=\r\nks to a few of you that set me clear on this whole media-type issue. &lt;br&gt;&lt;b=\r\nr&gt;I am however having a hard time thinking about telling clients that they =\r\nbasically need to parse html to use my API. I much rather say &quot;for /orders,=\r\n you get this chunk of xml back with these potential elements.. parse it to=\r\n get the data you need&quot;. Or in JSON. As I use Java/JAX-RS with Jersey, it h=\r\nandles automatically turning my objects into either xml or json, whatever t=\r\nhe Accept header specifies. Anyway, for my own learning, it is good to know=\r\n what you said, and it does make sense. However, it seems odd to me to retu=\r\nrn things in HTML as opposed to xml or json, when it&#39;s just chunks.. that i=\r\ns, a user places 100 orders over 3 months, then comes in and asks to see a =\r\nhistory of orders. I return an xml chunk with their 100 orders and related\n=\r\n info. That seems perfectly fine to provide in xml or json, allowing any cl=\r\nient to parse the response as they see fit. I would obviously have some sor=\r\nt of api doc that would explain the response. &lt;br&gt;&lt;br&gt;I guess what I am gra=\r\nppling with is that for the most part, I would suspect most services like t=\r\nhe one I am messing around with to learn, would be used by specific clients=\r\n, not anyone and everyone out on the web. More so, I don&#39;t see anyone needi=\r\nng to use my particular bits of data I return for their own use.. that is, =\r\nif I were to register a media type that represents a generic ordering docum=\r\nent, that might make sense, but in my case, if I am building up a REST api =\r\nfor my specific little service, it doesn&#39;t seem like returning HTML would m=\r\nake any more sense than returning xml or json. I certainly can see if I was=\r\n building my own web site, where I have some javascript make ajax requests =\r\nand I return a chunk of HTML instead of XML or JSON, so that my own\n site c=\r\nonsuming my API can benefit from having HTML directly, rather than xml or j=\r\nson then have to build up the html on the fly in the browser. But for say a=\r\n mobile app that had a native client that allowed a user to log in and pull=\r\n up their recent orders, a chunk of XML would fit well. HTML seems more dif=\r\nficult to have to parse and deal with.. at least the way I think. Again, if=\r\n I were going to display it in a browser..maybe it&#39;s fine, but if I wanted =\r\nto do something with the data before displaying it or maybe it&#39;s not a web =\r\nbrowser at all, html seems out of place. That&#39;s just my opinion tho from th=\r\ne bits I&#39;ve learned the past few days.&lt;br&gt;&lt;br&gt;&lt;br&gt;--- On &lt;b&gt;Thu, 12/2/10, E=\r\nric J. Bowman &lt;i&gt;&lt;eric@...&gt;&lt;/i&gt;&lt;/b&gt; wrote:&lt;br&gt;&lt;blockquot=\r\ne style=3D&quot;border-left: 2px solid rgb(16, 16, 255); margin-left: 5px; paddi=\r\nng-left: 5px;&quot;&gt;&lt;br&gt;From: Eric J. Bowman &lt;eric@...&gt;&lt;br&gt;Su=\r\nbject: Re: [rest-discuss] Link relations [was: A media type for\n case files=\r\n, dossiers and documents]&lt;br&gt;To: &quot;Kevin Duffey&quot; &lt;andjarnic@...&gt;=\r\n&lt;br&gt;Cc: &quot;Rest Discussion List&quot; &lt;rest-discuss@yahoogroups.com&gt;, juerge=\r\nn.brendel@...&lt;br&gt;Date: Thursday, December 2, 2010, 10:32 PM&lt;br&gt;&lt;br=\r\n&gt;&lt;div id=3D&quot;yiv1539576436&quot;&gt;\n\n\n\n\n\n&lt;span style=3D&quot;display: none;&quot;&gt;&nbsp;&lt;/spa=\r\nn&gt;\n\n\n\n    &lt;div id=3D&quot;yiv1539576436ygrp-text&quot;&gt;\n      \n      \n      &lt;p&gt;Kevin =\r\nDuffey wrote:&lt;br&gt;\n&gt; &lt;br&gt;\n&gt; Valid point. I am not sure what media type=\r\n would fit then. I am&lt;br&gt;\n&gt; trying to follow the HATEOS design, I have a=\r\nn entry point that&lt;br&gt;\n&gt; returns some links based on credentials, from t=\r\nhere a client would&lt;br&gt;\n&gt; use those to make calls to any of my resources=\r\n, and each response&lt;br&gt;\n&gt; would return a relevant chunk of XML or JSON w=\r\nith links for each&lt;br&gt;\n&gt; resource accessible at that point (for example =\r\nGET /orders/id would&lt;br&gt;\n&gt; return a specific order along with one or mor=\r\ne links that can be used&lt;br&gt;\n&gt; to operate on the order). &lt;br&gt;\n&gt;&lt;br&gt;\n&lt;=\r\nbr&gt;\nI&#39;ve never seen an order-processing system that couldn&#39;t be modeled as&lt;=\r\nbr&gt;\nHTML.  In fact, I&#39;ve rarely seen an order-processing system that wasn&#39;t=\r\n&lt;br&gt;\nHTML.  In OOP terminology, the goal is to distribute not your objects,=\r\n&lt;br&gt;\nbut your object interfaces.  REST says, make those object interfaces&lt;b=\r\nr&gt;\nuniform.  Which means participants have a network-based shared&lt;br&gt;\nunder=\r\nstanding of your state transitions (links, forms), IOW, a self-&lt;br&gt;\ndocumen=\r\nting API.&lt;br&gt;\n&lt;br&gt;\nIt&#39;s perfectly acceptable to model your data as JSON or =\r\nas XML (bearing&lt;br&gt;\nin mind that schemas are an orthogonal concern).  The t=\r\nrick is to&lt;br&gt;\ncreate an HTML interface for either JSON or XML data, which =\r\ninstructs&lt;br&gt;\nuser-agents how to interact with that data.  I&#39;d choose eithe=\r\nr JSON or&lt;br&gt;\nXML, instead of trying to do both, depending on whether you&#39;r=\r\ne more&lt;br&gt;\ncomfortable transforming that data into HTML using Javascript or=\r\n XSLT.&lt;br&gt;\n&lt;br&gt;\n&gt; &lt;br&gt;\n&gt; So if I use application/xml, my API would no=\r\nt be considered truly&lt;br&gt;\n&gt; RESTful? &lt;br&gt;\n&gt; &lt;br&gt;\n&lt;br&gt;\nNo, not if you&#39;=\r\nre using application/xml as the hypertext engine driving&lt;br&gt;\napplication st=\r\nate.  If it&#39;s just a snippet of XML which gets read by,&lt;br&gt;\nsay, an HTML fr=\r\nont-end driving application state, then it&#39;s OK because&lt;br&gt;\nthe processing =\r\nmodel (parse as XML, handling XInclude/XLink/rdf:about)&lt;br&gt;\nis adequate to =\r\nthe task.  If that XML snippet contains URIs the user is&lt;br&gt;\nsupposed to cl=\r\nick on to transition the application to the next steady-&lt;br&gt;\nstate (which a=\r\nren&#39;t XLinks), well, that&#39;s what &lt;a&gt; and atom:link are&lt;br&gt;\nfor, there=\r\n&#39;s no corollary in application/xml (besides XLink).&lt;br&gt;\n&lt;br&gt;\nAlso, most ord=\r\ner forms are simply tabular data, the semantics of which&lt;br&gt;\ndon&#39;t exist in=\r\n application/xml like they do in application/xhtml+xml or&lt;br&gt;\ntext/html wit=\r\nh &lt;table&gt;.  Same with lists, same with forms.&lt;br&gt;\n&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; =\r\nSo now I&#39;ll ask, what media type I could possibly use with my own&lt;br&gt;\n&gt; =\r\nxml/json structure? It almost sounds like you&#39;re saying I shouldn&#39;t&lt;br&gt;\n&gt=\r\n; be returning my own made up structure, that I should instead use an&lt;br&gt;\n&=\r\ngt; existing media type, like one with xhtml or something. Is there a&lt;br&gt;\n&=\r\ngt; media type that allows for any sort of specific format to a domain to&lt;b=\r\nr&gt;\n&gt; be returned? Or does that now fall into a case where I should creat=\r\ne&lt;br&gt;\n&gt; my own media type and register it with IANA?&lt;br&gt;\n&gt; &lt;br&gt;\n&lt;br&gt;\n=\r\nIt falls into a case where you should refactor.  You have tabular data,&lt;br&gt;=\r\n\nso you need to choose a data type which expresses such semantics (i.e.&lt;br&gt;=\r\n\nHTML, or DocBook).  The whole point of media types is that they are&lt;br&gt;\n_n=\r\not_ domain-specific, but rather, represent a shared understanding of&lt;br&gt;\na =\r\nprocessing model at the network (IP) layer.  This is the fundamental&lt;br&gt;\ntr=\r\nadeoff of the style:&lt;br&gt;\n&lt;br&gt;\n&quot;[A] uniform interface degrades efficiency, s=\r\nince information is&lt;br&gt;\ntransferred in a standardized form rather than one =\r\nwhich is specific to&lt;br&gt;\nan application&#39;s needs.&quot;&lt;br&gt;\n&lt;br&gt;\nAn order consist=\r\ns of item numbers, descriptions, quantity, unit price&lt;br&gt;\nand total price. =\r\n You *could* re-invent the &lt;table&gt; wheel and register&lt;br&gt;\nit as a new=\r\n media type, but it&#39;s more scalable (maintainable, portable)&lt;br&gt;\nto re-use =\r\nHTML even if it isn&#39;t a precise fit.  If you create a new&lt;br&gt;\nmedia type, t=\r\nhen you need to distribute a custom user-agent.  When you&lt;br&gt;\nupgrade your =\r\nAPI, you must simultaneously update that user-agent.&lt;br&gt;\n&lt;br&gt;\nThe success o=\r\nf the Web is due to the common user-agent.  What I really&lt;br&gt;\ndon&#39;t want, i=\r\ns for any system I interact with to require me to install&lt;br&gt;\nyet another p=\r\niece of software, and keep it up-to-date.  That&#39;s coupling.&lt;br&gt;\nSo much eas=\r\nier for everyone concerned, to target the browser.  That way,&lt;br&gt;\nI only ne=\r\ned to install and maintain one user-agent regardless of how&lt;br&gt;\nmany differ=\r\nent systems I interact with.  Such decoupling allows clients&lt;br&gt;\nand server=\r\ns to evolve independently.  So there is a cost associated&lt;br&gt;\nwith the mint=\r\ning of new media types -- coupling -- unless and until the&lt;br&gt;\nnew media ty=\r\npe achieves significant uptake.&lt;br&gt;\n&lt;br&gt;\n-Eric&lt;br&gt;\n&lt;/p&gt;\n\n    &lt;/div&gt;\n     \n\n=\r\n\n\n \n\n\n&lt;/div&gt;&lt;/blockquote&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;br&gt;\n\n\n\n\n\n\n\n      \r\n--0-953486024-1291362884=:60844--\r\n\n"}}
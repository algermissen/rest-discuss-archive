{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":4849001,"authorName":"Alex Jacobson","from":"Alex Jacobson &lt;alex@...&gt;","profile":"shop2it","replyTo":"SENDER","senderId":"VyzfcmtBSLUvTzuSlAVSn8tYc70nrZCdSv6fkig69ByZo-_Df6IyMsDBnLlM1mJWdDL_NisMqkDShv5pHl5bMSUe","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Re: MoST - Model State Transfer (was Pure-REST Wiki experiment)","postDate":"1059667041","msgId":3822,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDE4ODI1ODQxMjIuMTA1OTY1MjY0MUBsb2NhbGhvc3Q+","inReplyToHeader":"PEU4NkRCQ0YwLUMyREQtMTFENy1CRjg4LTAwMDM5Mzc1MzkzNkBhcGFjaGUub3JnPg==","referencesHeader":"IDxFODZEQkNGMC1DMkRELTExRDctQkY4OC0wMDAzOTM3NTM5MzZAYXBhY2hlLm9yZz4="},"prevInTopic":3815,"nextInTopic":3823,"prevInTime":3821,"nextInTime":3823,"topicId":3793,"numMessagesInTopic":23,"msgSnippet":"Roy, If there is other source material on ReST than your dissertation, please let me know. Here are the key quotes:  The key abstraction of information in","rawEmail":"Return-Path: &lt;alex@...&gt;\r\nX-Sender: alex@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 2499 invoked from network); 31 Jul 2003 16:00:46 -0000\r\nReceived: from unknown (66.218.66.217)\n  by m11.grp.scd.yahoo.com with QMQP; 31 Jul 2003 16:00:46 -0000\r\nReceived: from unknown (HELO mailgate.vo.com) (208.45.6.97)\n  by mta2.grp.scd.yahoo.com with SMTP; 31 Jul 2003 16:00:45 -0000\r\nReceived: from [10.255.218.171] (m6a8d36d0.tmodns.net [208.54.141.106])\n\t(using TLSv1 with cipher EDH-RSA-DES-CBC3-SHA (168/168 bits))\n\t(No client certificate requested)\n\tby mailgate.vo.com (Postfix) with ESMTP\n\tid 967B8890C2; Thu, 31 Jul 2003 12:00:14 -0400 (EDT)\r\nDate: Thu, 31 Jul 2003 11:57:21 -0400\r\nTo: &quot;Roy T. Fielding&quot; &lt;fielding@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nSubject: Re: [rest-discuss] Re: MoST - Model State Transfer (was Pure-REST\n Wiki experiment)\r\nMessage-ID: &lt;1882584122.1059652641@localhost&gt;\r\nIn-Reply-To: &lt;E86DBCF0-C2DD-11D7-BF88-000393753936@...&gt;\r\nReferences:  &lt;E86DBCF0-C2DD-11D7-BF88-000393753936@...&gt;\r\nX-Mailer: Mulberry/3.0.3 (Win32)\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=us-ascii; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nContent-Disposition: inline\r\nX-eGroups-From: Alex Jacobson &lt;alex@...&gt;\r\nFrom: Alex Jacobson &lt;alex@...&gt;\r\nX-Yahoo-Group-Post: member; u=4849001\r\nX-Yahoo-Profile: shop2it\r\n\r\nRoy,\n\nIf there is other source material on ReST than your dissertation, please \nlet me know.\nHere are the key quotes:\n&quot;&quot;&quot;\nThe key abstraction of information in REST is a resource. Any information \nthat can be named can be a resource: a document or image, a temporal \nservice (e.g. &quot;today&#39;s weather in Los Angeles&quot;), a collection of other \nresources, a non-virtual object (e.g. a person), and so on. In other words, \nany concept that might be the target of an author&#39;s hypertext reference \nmust fit within the definition of a resource. A resource is a conceptual \nmapping to a set of entities, not the entity that corresponds to the \nmapping at any particular point in time.\n&quot;&quot;&quot;\n\n&quot;&quot;&quot;\nREST components perform actions on a resource by using a representation to \ncapture the current or intended state of that resource and transferring \nthat representation between components. A representation is a sequence of \nbytes, plus representation metadata to describe those bytes. Other commonly \nused but less precise names for a representation include: document, file, \nand HTTP message entity, instance, or variant.\n&quot;&quot;&quot;\n\nThe elephant in the room here is that we have no way to talk about HOW a \nrepresentation captures the current state of a resource nor do we have a \nway of knowing what to do with &quot;intended state.&quot;  How do we differentiate \nbetween e.g. disagreements about the accuracy of a representation and \nattempts to change the underlying resource?  And if we intend to change the \nunderlying resource, how does a client know what change will result from \nthe presentation of a particular representation?\n\nThe reality is that both client and server need a shared model for mapping \nbetween &quot;representations&quot; and &quot;resources.&quot;  I am just saying we might as \nwell make the model explicit rather than developing custom mappings for \nevery single URI.\n\nYou advocate for ReST by saying:\n&quot;&quot;&quot;\nREST provides a hybrid of all three options by focusing on a shared \nunderstanding of data types with metadata, but limiting the scope of what \nis revealed to a standardized interface. REST components communicate by \ntransferring a representation of a resource in a format matching one of an \nevolving set of standard data types, selected dynamically based on the \ncapabilities or desires of the recipient and the nature of the resource.\n&quot;&quot;&quot;\n\nThe problem is that absent a shared MODEL having a shared understanding of \ndata types with metadata is useless.  I may understand GIF format and that \na GIF is intended to represent the current state of a resource, but unless \nI know the relationship between the GIF and the underlying resource its \npretty worthless.  If I GET a GIF of a &quot;:-)&quot;does that mean a resource is \nhappy?  If I PUT a &quot;:-(&quot; back does that make the resource sad?  So we have \na 1-bit database field that gets updated by these images?  Or perhaps the \nresource simply storing a random GIF and I can store any GIF there?  How \nshould I know?\n\nAt this point, you may argue that all that we are talking about is the \nreferent of the URI.  My point is that we need to do the work to get to the \npoint where we understand whether we are talking about a 1-bit database \nfield or about a random BLOB store.  Since ReST mandates that the \nrelationship between a representation and a resource is entirely arbitrary, \nthese relationships end up being negotiated on a URI by URI basis and \nvisibility suffers to the point of near-blindness.\n\nWe can achieve a MUCH higher level of visibility if constrain resources \nsimply to be model stores (think MVC).\nModels are data combined with meta-data constraining how it may be changed. \nIn the real-world, this metadata takes the form of content-types and \nXML-schema.  Obviously the effect of updating a model in a particular store \nis still application specific, but at least we can now understand \ncommunication back and forth as being ABOUT updating a model.  Taking this \nidea to its logical conclusion would allow a new sort of proxy that could \ncollect a set of PUT and POSTs into a batch update to a resource when it \nactually connects.\n\nJust to knock this point home, in your mail you say:\n&gt; The point of the definitions is that the interface does not define the \nexact meaning,\n&gt; leaving meaning to be defined by the nature of the links between\n&gt; the information.\n\nMy point is that it defines NO MEANING AT ALL!  All the work put into \nschemas and content-types are effectively useless without special purpose \nknowledge about each URI that ReST thinks should remain hidden!\n\n&gt; A server does the interpolation between the contents\n&gt; of a PUT and the model hidden behind the server -- saying that isn&#39;t\n&gt; defined by REST is just goofy.\n\nI think it is goofy that ReST means that I can have absolutely no idea what \nthe effect of PUT or POST actually is without an extended out of band \nconversation with the web server operator.\n\nFlexibility comes in defining agents that themselves respond to changes in \nthe model (either via internal notification, external notification, or \nperhaps GET from somewhere else).\n\nUnless you know the relationship between the content returned from a GET \nand the underlying model, you have no way to know what it means.  Unless \nyou know how the server will interpret a representation, you have no way to \nunderstand the effect of a PUT or POST and therefore no way to interact \nwith the server programmatically.\n\n&gt; If you don&#39;t like the generic interface, then just implement a\n&gt; distributed file system.  That has all the features you are looking\n&gt; for in a concrete model.\n\nI want a generic interface.  However without some constraints on the \nmeaning of the interface elements, you don&#39;t have one.  Instead you have a \nlot of special purpose interfaces which happen to share the same method \nnames.\nHowever, if you constrain the meaning of methods in terms of the resource \ndata-model/content-type/schema, you do get a generic interface.\n\nRegarding the DFS, how would you implement that with ReST without a large \namount of documentation about the meaning of each method w/r/t each file \nand directory? However, if I&#39;m willing to expose the model, then all I need \nis a XML schema for a DFS and I&#39;m good to go.\n\n-Alex-\n\n___________________________________________________________________\nS. Alexander Jacobson                   i2x Media\n1-212-787-1914 voice                    1-603-288-1280 fax\n\n\n\n\n--On Wednesday, July 30, 2003 3:33 PM -0700 &quot;Roy T. Fielding&quot; \n&lt;fielding@...&gt; wrote:\n\n&gt;&gt; MoST is either ReST with additional constraints to achieve much greater\n&gt;&gt; levels of visibility or MoST supercedes ReST because ReST is useful\n&gt;&gt; only\n&gt;&gt; for web publishing and we want more.\n&gt;&gt;\n&gt;&gt; I don&#39;t have a huge stake in defining ReST one way or another.  My\n&gt;&gt; personal\n&gt;&gt; view is that ReST is sufficiently semantically incoherent so you can\n&gt;&gt; go in\n&gt;&gt; whatever direction you like.  Try reading Roy&#39;s dissertation and\n&gt;&gt; figuring\n&gt;&gt; out the exact meaning of resource and representation in his paper and\n&gt;&gt; you&#39;ll see what I mean.\n&gt;\n&gt; Well, now that&#39;s a completely clueless statement.  The point of the\n&gt; definitions is that the interface does not define the exact meaning,\n&gt; leaving meaning to be defined by the nature of the links between\n&gt; the information.  A server does the interpolation between the contents\n&gt; of a PUT and the model hidden behind the server -- saying that isn&#39;t\n&gt; defined by REST is just goofy.  I have no problems building PUT,\n&gt; containers, or any of the other things that you claim are not defined\n&gt; by REST, since those are implementation details that are defined within\n&gt; HTTP by the origin server and not by the client.  I don&#39;t even need to\n&gt; use webdav, though it has its definitions as well.  The only problems\n&gt; I run into are buggy browsers that never managed to implement basic\n&gt; HTTP correctly, let alone the advanced features.\n&gt;\n&gt; If you don&#39;t like the generic interface, then just implement a\n&gt; distributed file system.  That has all the features you are looking\n&gt; for in a concrete model.\n&gt;\n&gt; ....Roy\n&gt;\n\n\n\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":210009313,"authorName":"Glenn Block","from":"Glenn Block &lt;glenn.block@...&gt;","profile":"glenn_block","replyTo":"SENDER","senderId":"I4Y9TdMIEMgqoP2xaRO3YKFn-DPhy0JaX50E_UtuCcYXu8KxEY5r0Sl8YQBaeqmqubj5wXw9_SxAdVUgHJae3itM_fQgq6Kt5i0","spamInfo":{"isSpam":false,"reason":"12"},"subject":"RE: [rest-discuss] Re: Does the client contribute to the RESTfulness of an application?","postDate":"1331235534","msgId":18621,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PC0xNTY1NzA1NTA2NjQ4OTg5ODA2QHVua25vd25tc2dpZD4="},"prevInTopic":18620,"nextInTopic":18622,"prevInTime":18620,"nextInTime":18622,"topicId":18602,"numMessagesInTopic":50,"msgSnippet":"Thanks William I agree with everything you said. The true benefits of REST are only realized if both client and server understand the constraints. However the ","rawEmail":"Return-Path: &lt;glenn.block@...&gt;\r\nX-Sender: glenn.block@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 71994 invoked from network); 8 Mar 2012 19:38:56 -0000\r\nX-Received: from unknown (98.137.34.45)\n  by m13.grp.sp2.yahoo.com with QMQP; 8 Mar 2012 19:38:56 -0000\r\nX-Received: from unknown (HELO mail-lpp01m010-f48.google.com) (209.85.215.48)\n  by mta2.grp.sp2.yahoo.com with SMTP; 8 Mar 2012 19:38:56 -0000\r\nX-Received: by lagu2 with SMTP id u2so1203531lag.35\n        for &lt;rest-discuss@yahoogroups.com&gt;; Thu, 08 Mar 2012 11:38:54 -0800 (PST)\r\nX-Received: by 10.152.115.38 with SMTP id jl6mr5495612lab.24.1331235534728; Thu,\n 08 Mar 2012 11:38:54 -0800 (PST)\r\nMIME-Version: 1.0\r\nDate: Thu, 8 Mar 2012 11:38:54 -0800\r\nMessage-ID: &lt;-1565705506648989806@unknownmsgid&gt;\r\nTo: William Martinez Pomares &lt;wmartinez@...&gt;, \n\t&quot;rest-discuss@yahoogroups.com&quot; &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Type: multipart/alternative; boundary=f46d040891eb28ed5704bac06d54\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Glenn Block &lt;glenn.block@...&gt;\r\nSubject: RE: [rest-discuss] Re: Does the client contribute to the RESTfulness\n of an application?\r\nX-Yahoo-Group-Post: member; u=210009313; y=9vUqmF5-jDEGxMAMFYcl_53KJTKMo5p1YN47LylgsHPCkWIMMT4\r\nX-Yahoo-Profile: glenn_block\r\n\r\n\r\n--f46d040891eb28ed5704bac06d54\r\nContent-Type: text/plain; charset=windows-1252\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nThanks William\n\nI agree with everything you said. The true benefits of REST=\r\n are only\nrealized if both client and server understand the constraints. Ho=\r\nwever the\nfact some clients may not adhere to those constraints is orthagon=\r\nal to the\nserver. However system is at many levels. Each combination of cli=\r\nent and\nserver is a system itself.\n\nThe one thing that is very clear is tha=\r\nt the server is the gate. If the\nserver doesn&#39;t adhere to the constraints t=\r\nhen all the &quot;macro&quot; level systems\nare not RESTful.\n\nMy point in all of this=\r\n was to reach a better understanding of where the\nRESTFulness of a system i=\r\ns defined / exhibited and what defines the\nboundaries of the system.\n\nSent =\r\nfrom my Windows Phone\n------------------------------\nFrom: William Martinez=\r\n Pomares\nSent: 3/8/2012 11:15 AM\nTo: rest-discuss@yahoogroups.com\nSubject: =\r\n[rest-discuss] Re: Does the client contribute to the RESTfulness\nof an appl=\r\nication?\n\n\n\nWill, I completely agree with your thoughts about the client an=\r\nd the\nvalidation of the REST design, at least of what I understand. My poin=\r\nt a\nsubtlety different. Anyway, I understand REST was designed to meet some=\r\n\nquality properties that were needed, and the benefits of the client are\nju=\r\nst collateral damage due to its role of service consumer and display\nagent =\r\n(yes, it says so in the dissertation).\n\nAn architectural style is not a com=\r\nplete definition of the architecture,\nbut just the ideas to achieve quality=\r\n attributes.\n\nI often say to my students that a system can implement perfec=\r\ntly all the\nfunctional requirements, and meet all the quality property stan=\r\ndards\nrequired, but if it does not deliver business value, it is a failure.=\r\n\n\nIn the same sense, just one level down: The good REST design badge is\nach=\r\nieved by implementing the REST constrains in your part of the system.\nBut t=\r\nhat badge will not assure the REST qualities are achieved in the whole\nsyst=\r\nem, or even in the system of systems above.\nEven more: having a completely =\r\nperfect REST design and execution at all\ncomponents, doesn&#39;t mean the app w=\r\nill give the business value and as such\nbe a success. It may also fail.\n\nSo=\r\n, to answer the original question, and a couple more I answered without\nbei=\r\nng questioned:\n1. Does the client contribute to the RESTfulness of an appli=\r\ncation? Yes if\nthe client is part of the application. It will not invalidat=\r\ne the\nRESTFulness of the server, but it may do so for the whole system.\n\n2.=\r\n Does designing an app server side to be compliant with REST rules\ndelivers=\r\n the goals of REST. Not necessarily, we need a compliant client and\ncomplai=\r\nnt interim layers (yup, REST is a layered architecture).\n\n3. Does having a =\r\nfully compliant REST architecture implemented is enough to\nbe a success. No=\r\n, it isn&#39;t.\n\nThose were the points I wanted to share.\n\nCheers\n\nWilliam Mart=\r\ninez.\n\n--- In rest-discuss@yahoogroups.com, Will Hartung &lt;willh@...&gt; wrote:=\r\n\n&gt;\n&gt; As Mike says, and part of generic matra REST for me is that a bad clie=\r\nnt\n&gt; does not invalidate a good REST design. By the nature of REST, many of=\r\n the\n&gt; aspects of the architecture are in fact designed to benefit the clie=\r\nnt.\nAnd\n&gt; other aspects simply cannot be counted on by the server in the wi=\r\nld\nanyway.\n&gt;\n&gt; The HATEOS is a client advantage. If a client cares about th=\r\ne robustness\nof\n&gt; their implementation, they will leverage HATEOS in order =\r\nto help keep\ntheir\n&gt; systems running without interruption. Many application=\r\ns that offer HATEOS,\n&gt; don&#39;t per se take advantage of it right off as it&#39;s =\r\nmostly a future\n&gt; proofing mechanism. You have simple apps on a single mach=\r\nine with a few,\n&gt; solid services that will &quot;never change&quot; vs an app that is=\r\n an aggressive\n&gt; user of HATEOS, and pretty much forces a client to leverag=\r\ne as well (i.e.\n&gt; no URL will ever be the same kind of thing). Those are op=\r\nposite extremes.\n&gt; Most fall in the former sense, they&#39;re just easier to de=\r\nsign and manage\n&gt; unless you have a very compelling reason to do otherwise.=\r\n\n&gt;\n&gt; So, you can see how a &quot;dumb&quot; client can easily get by with the first t=\r\nype\n&gt; of application, but fail miserably with the latter.\n&gt;\n&gt; Caches are an=\r\nother important aspect of the architecture that the system\nmay\n&gt; or may not=\r\n be able to leverage. If your system implements their own\ncaches,\n&gt; then yo=\r\nu can expect to see a benefit and plan around it. At this point a\n&gt; bad cli=\r\nent (i.e. one the completely ignores the caching constraints) can\n&gt; put an =\r\nexcessive load on your core system. They&#39;re still a REST client, in\n&gt; fact =\r\nthey can be an external cache themselves (perhaps a badly configured\n&gt; one)=\r\n.\n&gt;\n&gt; Now, if you&#39;re not providing you own caching layer, and effectively h=\r\noping\n&gt; to leverage external caches, then you have no room to complain when=\r\n you\nget\n&gt; several clients that perhaps ignore the caching aspect. When you=\r\n&#39;re\nrelying\n&gt; on external systems that you have no control over, you&#39;re on =\r\nthe\nborderline\n&gt; of &quot;serendipitous reuse&quot;. The bright side of SU is the new=\r\n value it can\n&gt; provide, the down side is the &quot;serendipitous&quot; part.\n&gt;\n&gt; And=\r\n finally, you can address the serendipitous reuse aspect. That too, is\na\n&gt; =\r\nbenefit of the client. It lets someone use the data in ways not envisioned\n=\r\n&gt; by the application designers. Thus providing added value to the client\n&gt; =\r\nWhether it&#39;s added value to the application is a different issue (maybe\nyou=\r\n\n&gt; didn&#39;t want or plan for all of this new traffic, then again maybe you&#39;re=\r\n\n&gt; excited to be offering new value that you didn&#39;t have to code and design=\r\n).\n&gt;\n&gt; So, yes, it takes good corporation between the clients and the serve=\r\nrs to\n&gt; get the highest level of benefits from the architecture, but the si=\r\nmple\n&gt; truth is much of the design is really there for the clients in the f=\r\nirst\n&gt; place and they&#39;re only hurting themselves in the long run by not pla=\r\nying\n&gt; along.\n&gt;\n&gt; Regards,\n&gt;\n&gt; Will Hartung\n&gt; (willh@...)\n&gt;\n&gt; --\n&gt; CONFIDEN=\r\nTIALITY NOTICE: The information contained in this electronic\n&gt; transmission=\r\n may be confidential. If you are not an intended recipient,\nbe\n&gt; aware that=\r\n any disclosure, copying, distribution or use of the\ninformation\n&gt; containe=\r\nd in this transmission is prohibited and may be unlawful. If you\n&gt; have rec=\r\neived this transmission in error, please notify us by email reply\n&gt; and the=\r\nn erase it from your computer system.\n&gt;\n\n \n\r\n--f46d040891eb28ed5704bac06d54\r\nContent-Type: text/html; charset=windows-1252\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;html&gt;&lt;head&gt;&lt;meta content=3D&quot;text/html; charset=3Dutf-8&quot; http-equiv=3D&quot;Cont=\r\nent-Type&quot;&gt;&lt;/head&gt;&lt;body&gt;&lt;div&gt;&lt;div style=3D&quot;font-family:Calibri,sans-serif;fo=\r\nnt-size:11pt&quot;&gt;Thanks William&lt;br&gt;&lt;br&gt;I agree with everything you said. The t=\r\nrue benefits of REST are only realized if both client and server understand=\r\n the constraints. However the fact some clients may not adhere to those con=\r\nstraints is orthagonal to the server. However system is at many levels. Eac=\r\nh combination of client and server is a system itself.&lt;br&gt;\n&lt;br&gt;The one thin=\r\ng that is very clear is that the server is the gate. If the server doesn&#3=\r\n9;t adhere to the constraints then all the &quot;macro&quot; level systems =\r\nare not RESTful.&lt;br&gt;&lt;br&gt;My point in all of this was to reach a better under=\r\nstanding of where the RESTFulness of a system is defined / exhibited and wh=\r\nat defines the boundaries of the system.&lt;br&gt;\n&lt;br&gt;Sent from my Windows Phone=\r\n&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;hr&gt;&lt;span style=3D&quot;font-family:Tahoma,sans-serif;font-size:=\r\n10pt;font-weight:bold&quot;&gt;From: &lt;/span&gt;&lt;span style=3D&quot;font-family:Tahoma,sans-=\r\nserif;font-size:10pt&quot;&gt;William Martinez Pomares&lt;/span&gt;&lt;br&gt;\n&lt;span style=3D&quot;fo=\r\nnt-family:Tahoma,sans-serif;font-size:10pt;font-weight:bold&quot;&gt;Sent: &lt;/span&gt;&lt;=\r\nspan style=3D&quot;font-family:Tahoma,sans-serif;font-size:10pt&quot;&gt;3/8/2012 11:15 =\r\nAM&lt;/span&gt;&lt;br&gt;&lt;span style=3D&quot;font-family:Tahoma,sans-serif;font-size:10pt;fo=\r\nnt-weight:bold&quot;&gt;To: &lt;/span&gt;&lt;span style=3D&quot;font-family:Tahoma,sans-serif;fon=\r\nt-size:10pt&quot;&gt;&lt;a href=3D&quot;mailto:rest-discuss@yahoogroups.com&quot;&gt;rest-discuss@y=\r\nahoogroups.com&lt;/a&gt;&lt;/span&gt;&lt;br&gt;\n&lt;span style=3D&quot;font-family:Tahoma,sans-serif;=\r\nfont-size:10pt;font-weight:bold&quot;&gt;Subject: &lt;/span&gt;&lt;span style=3D&quot;font-family=\r\n:Tahoma,sans-serif;font-size:10pt&quot;&gt;[rest-discuss] Re: Does the client contr=\r\nibute to the RESTfulness of an application?&lt;/span&gt;&lt;br&gt;\n&lt;br&gt;&lt;/body&gt;&lt;/html&gt;\n\n=\r\n\n\n&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n\n\n\n\n\n\n\n&lt;body style=3D&quot;background-color:#fff&quot;&gt;\n&lt;span=\r\n style&gt;=A0&lt;/span&gt;\n\n\n&lt;div id=3D&quot;ygrp-mlmsg&quot; style&gt;\n  &lt;div id=3D&quot;ygrp-msg&quot; st=\r\nyle&gt;\n\n\n    &lt;div id=3D&quot;ygrp-text&quot;&gt;\n      \n      \n      &lt;p&gt;Will, I completely=\r\n agree with your thoughts about the client and the validation of the REST d=\r\nesign, at least of what I understand. My point a subtlety different. Anyway=\r\n, I understand REST was designed to meet some quality properties that were =\r\nneeded, and the benefits of the client are just collateral damage due to it=\r\ns role of service consumer and display agent (yes, it says so in the disser=\r\ntation).&lt;br&gt;\n\n&lt;br&gt;\nAn architectural style is not a complete definition of t=\r\nhe architecture, but just the ideas to achieve quality attributes. &lt;br&gt;\n&lt;br=\r\n&gt;\nI often say to my students that a system can implement perfectly all the =\r\nfunctional requirements, and meet all the quality property standards requir=\r\ned, but if it does not deliver business value, it is a failure.&lt;br&gt;\n&lt;br&gt;\nIn=\r\n the same sense, just one level down: The good REST design badge is achieve=\r\nd by implementing the REST constrains in your part of the system. But that =\r\nbadge will not assure the REST qualities are achieved in the whole system, =\r\nor even in the system of systems above. &lt;br&gt;\n\nEven more: having a completel=\r\ny perfect REST design and execution at all components, doesn&#39;t mean the=\r\n app will give the business value and as such be a success. It may also fai=\r\nl.&lt;br&gt;\n&lt;br&gt;\nSo, to answer the original question, and a couple more I answer=\r\ned without being questioned:&lt;br&gt;\n1. Does the client contribute to the RESTf=\r\nulness of an application? Yes if the client is part of the application. It =\r\nwill not invalidate the RESTFulness of the server, but it may do so for the=\r\n whole system.&lt;br&gt;\n&lt;br&gt;\n2. Does designing an app server side to be complian=\r\nt with REST rules delivers the goals of REST. Not necessarily, we need a co=\r\nmpliant client and complaint interim layers (yup, REST is a layered archite=\r\ncture).&lt;br&gt;\n&lt;br&gt;\n3. Does having a fully compliant REST architecture impleme=\r\nnted is enough to be a success. No, it isn&#39;t. &lt;br&gt;\n&lt;br&gt;\nThose were the =\r\npoints I wanted to share.&lt;br&gt;\n&lt;br&gt;\nCheers&lt;br&gt;\n&lt;br&gt;\nWilliam Martinez.&lt;br&gt;\n&lt;b=\r\nr&gt;\n--- In &lt;a href=3D&quot;mailto:rest-discuss%40yahoogroups.com&quot;&gt;rest-discuss@ya=\r\nhoogroups.com&lt;/a&gt;, Will Hartung &lt;willh@...&gt; wrote:&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; =\r\nAs Mike says, and part of generic matra REST for me is that a bad client&lt;br=\r\n&gt;\n&gt; does not invalidate a good REST design. By the nature of REST, many =\r\nof the&lt;br&gt;\n&gt; aspects of the architecture are in fact designed to benefit=\r\n the client. And&lt;br&gt;\n&gt; other aspects simply cannot be counted on by the =\r\nserver in the wild anyway.&lt;br&gt;\n&gt; &lt;br&gt;\n&gt; The HATEOS is a client advant=\r\nage. If a client cares about the robustness of&lt;br&gt;\n&gt; their implementatio=\r\nn, they will leverage HATEOS in order to help keep their&lt;br&gt;\n&gt; systems r=\r\nunning without interruption. Many applications that offer HATEOS,&lt;br&gt;\n&gt; =\r\ndon&#39;t per se take advantage of it right off as it&#39;s mostly a future=\r\n&lt;br&gt;\n&gt; proofing mechanism. You have simple apps on a single machine with=\r\n a few,&lt;br&gt;\n&gt; solid services that will &quot;never change&quot; vs an ap=\r\np that is an aggressive&lt;br&gt;\n&gt; user of HATEOS, and pretty much forces a c=\r\nlient to leverage as well (i.e.&lt;br&gt;\n&gt; no URL will ever be the same kind =\r\nof thing). Those are opposite extremes.&lt;br&gt;\n&gt; Most fall in the former se=\r\nnse, they&#39;re just easier to design and manage&lt;br&gt;\n&gt; unless you have =\r\na very compelling reason to do otherwise.&lt;br&gt;\n&gt; &lt;br&gt;\n&gt; So, you can se=\r\ne how a &quot;dumb&quot; client can easily get by with the first type&lt;br&gt;\n&=\r\ngt; of application, but fail miserably with the latter.&lt;br&gt;\n&gt; &lt;br&gt;\n&gt; =\r\nCaches are another important aspect of the architecture that the system may=\r\n&lt;br&gt;\n&gt; or may not be able to leverage. If your system implements their o=\r\nwn caches,&lt;br&gt;\n&gt; then you can expect to see a benefit and plan around it=\r\n. At this point a&lt;br&gt;\n&gt; bad client (i.e. one the completely ignores the =\r\ncaching constraints) can&lt;br&gt;\n&gt; put an excessive load on your core system=\r\n. They&#39;re still a REST client, in&lt;br&gt;\n&gt; fact they can be an external=\r\n cache themselves (perhaps a badly configured&lt;br&gt;\n&gt; one).&lt;br&gt;\n&gt; &lt;br&gt;\n=\r\n&gt; Now, if you&#39;re not providing you own caching layer, and effectivel=\r\ny hoping&lt;br&gt;\n&gt; to leverage external caches, then you have no room to com=\r\nplain when you get&lt;br&gt;\n&gt; several clients that perhaps ignore the caching=\r\n aspect. When you&#39;re relying&lt;br&gt;\n&gt; on external systems that you have=\r\n no control over, you&#39;re on the borderline&lt;br&gt;\n&gt; of &quot;serendipit=\r\nous reuse&quot;. The bright side of SU is the new value it can&lt;br&gt;\n&gt; pro=\r\nvide, the down side is the &quot;serendipitous&quot; part.&lt;br&gt;\n&gt; &lt;br&gt;\n&g=\r\nt; And finally, you can address the serendipitous reuse aspect. That too, i=\r\ns a&lt;br&gt;\n&gt; benefit of the client. It lets someone use the data in ways no=\r\nt envisioned&lt;br&gt;\n&gt; by the application designers. Thus providing added va=\r\nlue to the client&lt;br&gt;\n&gt; Whether it&#39;s added value to the application =\r\nis a different issue (maybe you&lt;br&gt;\n&gt; didn&#39;t want or plan for all of=\r\n this new traffic, then again maybe you&#39;re&lt;br&gt;\n&gt; excited to be offer=\r\ning new value that you didn&#39;t have to code and design).&lt;br&gt;\n&gt; &lt;br&gt;\n&=\r\ngt; So, yes, it takes good corporation between the clients and the servers =\r\nto&lt;br&gt;\n&gt; get the highest level of benefits from the architecture, but th=\r\ne simple&lt;br&gt;\n&gt; truth is much of the design is really there for the clien=\r\nts in the first&lt;br&gt;\n&gt; place and they&#39;re only hurting themselves in t=\r\nhe long run by not playing&lt;br&gt;\n&gt; along.&lt;br&gt;\n&gt; &lt;br&gt;\n&gt; Regards,&lt;br&gt;\n=\r\n&gt; &lt;br&gt;\n&gt; Will Hartung&lt;br&gt;\n&gt; (willh@...)&lt;br&gt;\n&gt; &lt;br&gt;\n&gt; -- &lt;br&gt;=\r\n\n&gt; CONFIDENTIALITY NOTICE: The information contained in this electronic =\r\n&lt;br&gt;\n&gt; transmission may be confidential. If you are not an intended reci=\r\npient, be &lt;br&gt;\n&gt; aware that any disclosure, copying, distribution or use=\r\n of the information &lt;br&gt;\n&gt; contained in this transmission is prohibited =\r\nand may be unlawful. If you &lt;br&gt;\n&gt; have received this transmission in er=\r\nror, please notify us by email reply &lt;br&gt;\n&gt; and then erase it from your =\r\ncomputer system.&lt;br&gt;\n&gt;&lt;br&gt;\n&lt;br&gt;\n&lt;/p&gt;\n\n    &lt;/div&gt;\n     \n\n    \n    &lt;div st=\r\nyle=3D&quot;color:#fff;height:0&quot;&gt;&lt;/div&gt;\n\n\n&lt;/body&gt;\n\n\n&lt;head&gt;\n  &lt;style type=3D&quot;text=\r\n/css&quot;&gt;\n  &lt;!--\n  #ygrp-mkp {\n  border: 1px solid #d8d8d8;\n  font-family: Ari=\r\nal;\n  margin: 10px 0;\n  padding: 0 10px;\n}\n\n#ygrp-mkp hr {\n  border: 1px so=\r\nlid #d8d8d8;\n}\n\n#ygrp-mkp #hd {\n  color: #628c2a;\n  font-size: 85%;\n  font-=\r\nweight: 700;\n  line-height: 122%;\n  margin: 10px 0;\n}\n\n#ygrp-mkp #ads {\n  m=\r\nargin-bottom: 10px;\n}\n\n#ygrp-mkp .ad {\n  padding: 0 0;\n}\n\n#ygrp-mkp .ad p {=\r\n\n  margin: 0;\n}\n\n#ygrp-mkp .ad a {\n  color: #0000ff;\n  text-decoration: non=\r\ne;\n}\n  #ygrp-sponsor #ygrp-lc {\n  font-family: Arial;\n}\n\n#ygrp-sponsor #ygr=\r\np-lc #hd {\n  margin: 10px 0px;\n  font-weight: 700;\n  font-size: 78%;\n  line=\r\n-height: 122%;\n}\n\n#ygrp-sponsor #ygrp-lc .ad {\n  margin-bottom: 10px;\n  pad=\r\nding: 0 0;\n}\n\n  a {\n    color: #1e66ae;\n  }\n\n  #actions {\n    font-family: =\r\nVerdana;\n    font-size: 11px;\n    padding: 10px 0;\n  }\n\n  #activity {\n    b=\r\nackground-color: #e0ecee;\n    float: left;\n    font-family: Verdana;\n    fo=\r\nnt-size: 10px;\n    padding: 10px;\n  }\n\n  #activity span {\n    font-weight: =\r\n700;\n  }\n\n  #activity span:first-child {\n    text-transform: uppercase;\n  }=\r\n\n\n  #activity span a {\n    color: #5085b6;\n    text-decoration: none;\n  }\n\n=\r\n  #activity span span {\n    color: #ff7900;\n  }\n\n  #activity span .underlin=\r\ne {\n    text-decoration: underline;\n  }\n\n  .attach {\n    clear: both;\n    d=\r\nisplay: table;\n    font-family: Arial;\n    font-size: 12px;\n    padding: 10=\r\npx 0;\n    width: 400px;\n  }\n\n  .attach div a {\n    text-decoration: none;\n =\r\n }\n\n  .attach img {\n    border: none;\n    padding-right: 5px;\n  }\n\n  .attac=\r\nh label {\n    display: block;\n    margin-bottom: 5px;\n  }\n\n  .attach label =\r\na {\n    text-decoration: none;\n  }\n  \n  blockquote {\n    margin: 0 0 0 4px;=\r\n\n  }\n\n  .bold {\n    font-family: Arial;\n    font-size: 13px;\n    font-weigh=\r\nt: 700;\n  }\n\n  .bold a {\n    text-decoration: none;\n  }\n\n  dd.last p a {\n  =\r\n  font-family: Verdana;\n    font-weight: 700;\n  }\n\n  dd.last p span {\n    m=\r\nargin-right: 10px;\n    font-family: Verdana;\n    font-weight: 700;\n  }\n\n  d=\r\nd.last p span.yshortcuts {\n    margin-right: 0;\n  }\n\n  div.attach-table div=\r\n div a {\n    text-decoration: none;\n  }\n\n  div.attach-table {\n    width: 40=\r\n0px;\n  }\n\n  div.file-title a, div.file-title a:active, div.file-title a:hov=\r\ner, div.file-title a:visited {\n    text-decoration: none;\n  }\n\n  div.photo-=\r\ntitle a, div.photo-title a:active, div.photo-title a:hover, div.photo-title=\r\n a:visited {\n    text-decoration: none;\n  }\n\n  div#ygrp-mlmsg #ygrp-msg p a=\r\n span.yshortcuts {\n    font-family: Verdana;\n    font-size: 10px;\n    font-=\r\nweight: normal;\n  }\n\n  .green {\n    color: #628c2a;\n  }\n\n  .MsoNormal {\n   =\r\n margin: 0 0 0 0;\n  }\n\n  o {\n    font-size: 0;\n  }\n\n  #photos div {\n    flo=\r\nat: left;\n    width: 72px;\n  }\n\n  #photos div div {\n    border: 1px solid #=\r\n666666;\n    height: 62px;\n    overflow: hidden;\n    width: 62px;\n  }\n\n  #ph=\r\notos div label {\n    color: #666666;\n    font-size: 10px;\n    overflow: hid=\r\nden;\n    text-align: center;\n    white-space: nowrap;\n    width: 64px;\n  }\n=\r\n\n  #reco-category {\n    font-size: 77%;\n  }\n\n  #reco-desc {\n    font-size: =\r\n77%;\n  }\n\n  .replbq {\n    margin: 4px;\n  }\n\n  #ygrp-actbar div a:first-chil=\r\nd {\n   /* border-right: 0px solid #000;*/\n    margin-right: 2px;\n    paddin=\r\ng-right: 5px;\n  }\n\n  #ygrp-mlmsg {\n    font-size: 13px;\n    font-family: Ar=\r\nial, helvetica,clean, sans-serif;\n    *font-size: small;\n    *font: x-small=\r\n;\n  }\n\n  #ygrp-mlmsg table {\n    font-size: inherit;\n    font: 100%;\n  }\n\n =\r\n #ygrp-mlmsg select, input, textarea {\n    font: 99% Arial, Helvetica, clea=\r\nn, sans-serif;\n  }\n\n  #ygrp-mlmsg pre, code {\n    font:115% monospace;\n    =\r\n*font-size:100%;\n  }\n\n  #ygrp-mlmsg * {\n    line-height: 1.22em;\n  }\n\n  #yg=\r\nrp-mlmsg #logo {\n    padding-bottom: 10px;\n  }\n\n  #ygrp-mlmsg a {\n    color=\r\n: #1E66AE;\n  }\n\n  #ygrp-msg p a {\n    font-family: Verdana;\n  }\n\n  #ygrp-ms=\r\ng p#attach-count span {\n    color: #1E66AE;\n    font-weight: 700;\n  }\n\n  #y=\r\ngrp-reco #reco-head {\n    color: #ff7900;\n    font-weight: 700;\n  }\n\n  #ygr=\r\np-reco {\n    margin-bottom: 20px;\n    padding: 0px;\n  }\n\n  #ygrp-sponsor #o=\r\nv li a {\n    font-size: 130%;\n    text-decoration: none;\n  }\n\n  #ygrp-spons=\r\nor #ov li {\n    font-size: 77%;\n    list-style-type: square;\n    padding: 6=\r\npx 0;\n  } \n\n  #ygrp-sponsor #ov ul {\n    margin: 0;\n    padding: 0 0 0 8px;=\r\n\n  }\n\n  #ygrp-text {\n    font-family: Georgia;\n  }\n\n  #ygrp-text p {\n    ma=\r\nrgin: 0 0 1em 0;\n  }\n\n  #ygrp-text tt {\n    font-size: 120%;\n  }\n\n  #ygrp-v=\r\nital ul li:last-child {\n    border-right: none !important; \n  } \n  --&gt;\n  &lt;/=\r\nstyle&gt;\n&lt;/head&gt;\n\n\n&lt;/html&gt;\n\n\n\r\n--f46d040891eb28ed5704bac06d54--\r\n\n"}}
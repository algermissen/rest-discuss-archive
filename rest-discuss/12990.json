{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":339031295,"authorName":"Sam Johnston","from":"Sam Johnston &lt;samj@...&gt;","profile":"sam.johnston@ymail.com","replyTo":"SENDER","senderId":"V5onka5noD4MW4B3XyAVoFzZqaP4FQivnp_dA3FPXmz7RzC3LUP8juXJ2-89X3OBWhu0CZCTH-z9-FiSLci9TotBdg","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Using HTTP Link: headers for web linking \tnon-hypertext","postDate":"1246022899","msgId":12990,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIxNjA2ZGNmMDkwNjI2MDYyOHAzOWUwMDVlZGgyYTc1MzE2MzVlNmMwNTg5QG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PDRBNDQwNEY4LjMwMDAwMDhAcmVkaGF0LmNvbT4=","referencesHeader":"PDIxNjA2ZGNmMDkwNjI0MDU1M2szZDg4MjU4Mm00MjQ1NGZlNGNhNWU4ZkBtYWlsLmdtYWlsLmNvbT4JIDw0QTQzRjMwOS4xMDEwNDAyQGRlaG9yYS5uZXQ+IDw0QTQ0MDRGOC4zMDAwMDA4QHJlZGhhdC5jb20+"},"prevInTopic":12972,"nextInTopic":12997,"prevInTime":12989,"nextInTime":12991,"topicId":12926,"numMessagesInTopic":42,"msgSnippet":"... Ditto - the question was about devising a means to manage the implied relationship . The designers of HTTP planned to do it with LINK and UNLINK, but I","rawEmail":"Return-Path: &lt;samj@...&gt;\r\nX-Sender: samj@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 1836 invoked from network); 26 Jun 2009 13:29:20 -0000\r\nX-Received: from unknown (69.147.108.202)\n  by m7.grp.re1.yahoo.com with QMQP; 26 Jun 2009 13:29:20 -0000\r\nX-Received: from unknown (HELO mail-ew0-f226.google.com) (209.85.219.226)\n  by mta3.grp.re1.yahoo.com with SMTP; 26 Jun 2009 13:29:20 -0000\r\nX-Received: by ewy26 with SMTP id 26so2232951ewy.5\n        for &lt;rest-discuss@yahoogroups.com&gt;; Fri, 26 Jun 2009 06:28:19 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.210.70.8 with SMTP id s8mr4315660eba.75.1246022899515; Fri, 26 \n\tJun 2009 06:28:19 -0700 (PDT)\r\nIn-Reply-To: &lt;4A4404F8.3000008@...&gt;\r\nReferences: &lt;21606dcf0906240553k3d882582m42454fe4ca5e8f@...&gt;\n\t &lt;4A43F309.1010402@...&gt; &lt;4A4404F8.3000008@...&gt;\r\nDate: Fri, 26 Jun 2009 15:28:19 +0200\r\nMessage-ID: &lt;21606dcf0906260628p39e005edh2a7531635e6c0589@...&gt;\r\nTo: Bill Burke &lt;bburke@...&gt;\r\nCc: Bill de hOra &lt;bill@...&gt;, rest-discuss@yahoogroups.com\r\nContent-Type: multipart/alternative; boundary=0015174c3c6a4ec2c4046d405051\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Sam Johnston &lt;samj@...&gt;\r\nSubject: Re: [rest-discuss] Using HTTP Link: headers for web linking \n\tnon-hypertext\r\nX-Yahoo-Group-Post: member; u=339031295; y=1viurx607kxYMIqaNrFyRkNKb00da7ye6yza4dmbQY-U24v7WZZP71FGC9SM6biAlA\r\nX-Yahoo-Profile: sam.johnston@...\r\n\r\n\r\n--0015174c3c6a4ec2c4046d405051\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: 7bit\r\n\r\nOn Fri, Jun 26, 2009 at 1:15 AM, Bill Burke &lt;bburke@...&gt; wrote:\n&gt;\n&gt; Bill de hOra wrote:\n&gt; &gt; LINK suffers from a problem - it magically pops into existence as a\n&gt; &gt; header, but without a means to manage the implied relationship.\n&gt;\n&gt; I&#39;m not understanding what you mean by this.\n\nDitto - the question was about devising a &quot;means to manage the implied\nrelationship&quot;. The designers of HTTP planned to do it with LINK and UNLINK,\nbut I doubt I need to convince any of you that adding verbs should be an\nabsolute last resort (and even then firewalls, proxies, gateways, etc. will\nfail spectacularly until it&#39;s standardised and implemented). Set-Cookie\nworks well for cookies so it follows that we could do something similar for\nlinks (which are something like server side cookies in this proposal,\npointing at alternative representations and/or associating resources).\n\nThe original plan was to use Atom independently of cardinality but there was\nsignificant resistance to XML (and love for JSON, the format du jour). Of\ncourse now people are talking about supporting XML-based OVF which somewhat\ndefeats the purpose but we digress...\n\nMy main concerns about Atom in this context (e.g. individual resources\nrather than collections) are that it&#39;s not DRY in that metadata like atom:id\n(HTTP&#39;s URL) and atom:updated (HTTP&#39;s Last-Modified: header) is repeated, it\nrequires parsing and decoding just to get at the resource itself (ruling out\ninteractions from simple clients like curl/wget) or multiple requests where\nresources are passed by reference rather than by value it, it base64 encodes\nthe entity-body which is a significant performance and efficiency hit... the\nlist goes on. OTOH for collections is&#39;s an (almost) perfect fit, short of\nbundling message/http objects together somehow.\n\n&gt; &gt; I think\n&gt; &gt; the architecture simply doesn&#39;t support management of resource\n&gt; &gt; relationships in this way, and the only means is through hypertext and\n&gt; &gt; constrained protocols on top of HTTP.\n&gt;\n&gt; In some cases I can see that the data-format is inflexible (an old\n&gt; company document schema that doesn&#39;t support links) and the only way\n&gt; you&#39;d be able to transfer relationships is through an envelope (atom) or\n&gt; headers (this proposal). I think Atom is great for what it is built for\n&gt; (syndication), but I&#39;m not convinced it is a good format for web\n&gt; services. The way people are suggesting to use it in a web services\n&gt; environment is *way* to much like SOAP. Especially in this case, where\n&gt; headers would work just fine.\n\nAgreed, there are plenty of non-hypertext formats that we need to handle for\ndifferent types of resources (e.g. iCal, vCard, or in this context OVF/OVA).\nThis is obviously what the web&#39;s founding fathers had in mind but HTML was\nso wildly successful that we haven&#39;t needed it (until now). Why on earth\nwould anyone want a wrapper format when it was possible to use native HTTP,\nespecially when you&#39;re dealing with potentially enormous files like virtual\nhard drives and need the raw performance of a clean connection?\n\nSam\n\r\n--0015174c3c6a4ec2c4046d405051\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nOn Fri, Jun 26, 2009 at 1:15 AM, Bill Burke &lt;&lt;a href=3D&quot;mailto:bburke@re=\r\ndhat.com&quot;&gt;bburke@...&lt;/a&gt;&gt; wrote:&lt;br&gt;&gt;&lt;br&gt;&gt; Bill de hOra wro=\r\nte:&lt;br&gt;&gt; &gt; LINK suffers from a problem - it magically pops into exist=\r\nence as a&lt;br&gt;\n&gt; &gt; header, but without a means to manage the implied r=\r\nelationship.&lt;br&gt;&gt;&lt;br&gt;&gt; I&#39;m not understanding what you mean by thi=\r\ns.&lt;br&gt;&lt;br&gt;Ditto - the question was about devising a &quot;means to manage t=\r\nhe implied relationship&quot;. The designers of HTTP planned to do it with =\r\nLINK and UNLINK, but I doubt I need to convince any of you that adding verb=\r\ns should be an absolute last resort (and even then firewalls, proxies, gate=\r\nways, etc. will fail spectacularly until it&#39;s standardised and implemen=\r\nted). Set-Cookie works well for cookies so it follows that we could do some=\r\nthing similar for links (which are something like server side cookies in th=\r\nis proposal, pointing at alternative representations and/or associating res=\r\nources).&lt;br&gt;\n&lt;br&gt;The original plan was to use Atom independently of cardina=\r\nlity but there was significant resistance to XML (and love for JSON, the fo=\r\nrmat du jour). Of course now people are talking about supporting XML-based =\r\nOVF which somewhat defeats the purpose but we digress...&lt;br&gt;\n&lt;br&gt;My main co=\r\nncerns about Atom in this context (e.g. individual resources rather than co=\r\nllections) are that it&#39;s not DRY in that metadata like atom:id (HTTP&#3=\r\n9;s URL) and atom:updated (HTTP&#39;s Last-Modified: header) is repeated, i=\r\nt requires parsing and decoding just to get at the resource itself (ruling =\r\nout interactions from simple clients like curl/wget) or multiple requests w=\r\nhere resources are passed by reference rather than by value it, it base64 e=\r\nncodes the entity-body which is a significant performance and efficiency hi=\r\nt... the list goes on. OTOH for collections is&#39;s an (almost) perfect fi=\r\nt, short of bundling message/http objects together somehow.&lt;br&gt;\n&lt;br&gt;&gt; &g=\r\nt; I think&lt;br&gt;&gt; &gt; the architecture simply doesn&#39;t support managem=\r\nent of resource&lt;br&gt;&gt; &gt; relationships in this way, and the only means =\r\nis through hypertext and&lt;br&gt;&gt; &gt; constrained protocols on top of HTTP.=\r\n&lt;br&gt;\n&gt;&lt;br&gt;&gt; In some cases I can see that the data-format is inflexibl=\r\ne (an old&lt;br&gt;&gt; company document schema that doesn&#39;t support links) a=\r\nnd the only way&lt;br&gt;&gt; you&#39;d be able to transfer relationships is thro=\r\nugh an envelope (atom) or&lt;br&gt;\n&gt; headers (this proposal). I think Atom is=\r\n great for what it is built for&lt;br&gt;&gt; (syndication), but I&#39;m not conv=\r\ninced it is a good format for web&lt;br&gt;&gt; services. The way people are sugg=\r\nesting to use it in a web services&lt;br&gt;\n&gt; environment is *way* to much li=\r\nke SOAP. Especially in this case, where&lt;br&gt;&gt; headers would work just fin=\r\ne.&lt;br&gt;&lt;br&gt;Agreed, there are plenty of non-hypertext formats that we need to=\r\n handle for different types of resources (e.g. iCal, vCard, or in this cont=\r\next OVF/OVA). This is obviously what the web&#39;s founding fathers had in =\r\nmind but HTML was so wildly successful that we haven&#39;t needed it (until=\r\n now). Why on earth would anyone want a wrapper format when it was possible=\r\n to use native HTTP, especially when you&#39;re dealing with potentially en=\r\normous files like virtual hard drives and need the raw performance of a cle=\r\nan connection?&lt;br&gt;\n&lt;br&gt;Sam&lt;br&gt;&lt;br&gt;\n\r\n--0015174c3c6a4ec2c4046d405051--\r\n\n"}}
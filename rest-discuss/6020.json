{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":198693287,"authorName":"Bill Venners","from":"Bill Venners &lt;bv-svp@...&gt;","profile":"billvenners","replyTo":"SENDER","senderId":"8ZUBX-9Ohkzux54TX1jDDZoe3DyiLvwEm3GxPv_iikaT4IPZ6_M7Mi2M9jaqrJw1hUu3c_yLV0ovNvDAGQWd-FzhsHHEJVo","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Re: Meaning of stateless","postDate":"1145513492","msgId":6020,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDZDRkNEQkIyLTQxNzItNDU5Qi1BQUFFLUUyRDY0ODZCRkNGN0BhcnRpbWEuY29tPg==","inReplyToHeader":"PDQ0NDZEODczLjcwNDAxMDhAamo1Lm5ldD4=","referencesHeader":"PDQ0M0ZGMzFDLjgwMDAxMDlAdmVpY29uLmNvbT4JIDwzNDNlY2IzZTA2MDQxNDEyMzBnNDFjMTMyMWNuYjJhOTM2Y2NiZjUzZGM3ZEBtYWlsLmdtYWlsLmNvbT4gPDExNDUwOTU4OTMuNjk4OC4yNi5jYW1lbEBsb2NhbGhvc3QubG9jYWxkb21haW4+IDw0NDQ0NkNGMC45MDEwMzA4QGpqNS5uZXQ+IDw0RjhGRTQyNi01NEFFLTQ4REQtQUJEMC1FRjU0MzBFNTdBMEFAYXJ0aW1hLmNvbT4gPDQ0NDU4REIyLjcwNzAwMDNAamo1Lm5ldD4gPEUzNkNDOTMwLTgyNkItNEJCQS04QzM4LUNBNzRDRENEMDQyRUBhcnRpbWEuY29tPiA8NDQ0NkQ4NzMuNzA0MDEwOEBqajUubmV0Pg=="},"prevInTopic":6019,"nextInTopic":6021,"prevInTime":6019,"nextInTime":6021,"topicId":5949,"numMessagesInTopic":44,"msgSnippet":"Hi John, Thanks for another lively response. ... I think you re getting warm, though these snapshots need not be immutable. Where they behave like immutable","rawEmail":"Return-Path: &lt;bv-svp@...&gt;\r\nX-Sender: bv-svp@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 75417 invoked from network); 20 Apr 2006 06:12:17 -0000\r\nReceived: from unknown (66.218.67.35)\n  by m32.grp.scd.yahoo.com with QMQP; 20 Apr 2006 06:12:17 -0000\r\nReceived: from unknown (HELO artima2.inetu.net) (209.235.240.43)\n  by mta9.grp.scd.yahoo.com with SMTP; 20 Apr 2006 06:12:15 -0000\r\nReceived: (qmail 11779 invoked by uid 89); 20 Apr 2006 06:12:12 -0000\r\nReceived: from unknown (HELO ?192.168.251.21?) (67.102.66.234)\n  by artima2.inetu.net with SMTP; 20 Apr 2006 06:12:12 -0000\r\nIn-Reply-To: &lt;4446D873.7040108@...&gt;\r\nReferences: &lt;443FF31C.8000109@...&gt;\t &lt;343ecb3e0604141230g41c1321cnb2a936ccbf53dc7d@...&gt; &lt;1145095893.6988.26.camel@...&gt; &lt;44446CF0.9010308@...&gt; &lt;4F8FE426-54AE-48DD-ABD0-EF5430E57A0A@...&gt; &lt;44458DB2.7070003@...&gt; &lt;E36CC930-826B-4BBA-8C38-CA74CDCD042E@...&gt; &lt;4446D873.7040108@...&gt;\r\nMime-Version: 1.0 (Apple Message framework v746.3)\r\nContent-Type: text/plain; charset=US-ASCII; delsp=yes; format=flowed\r\nMessage-Id: &lt;6CFCDBB2-4172-459B-AAAE-E2D6486BFCF7@...&gt;\r\nCc: REST Discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Transfer-Encoding: 7bit\r\nDate: Wed, 19 Apr 2006 23:11:32 -0700\r\nTo: John Elliot &lt;jj5@...&gt;\r\nX-Mailer: Apple Mail (2.746.3)\r\nX-eGroups-Msg-Info: 1:12:0:0\r\nFrom: Bill Venners &lt;bv-svp@...&gt;\r\nSubject: Re: [rest-discuss] Re: Meaning of stateless\r\nX-Yahoo-Group-Post: member; u=198693287; y=p0RzOXaCkLdFVty4nKuCg2MNI0_5FY845YBTqVDh-oodOkZjgz0\r\nX-Yahoo-Profile: billvenners\r\n\r\nHi John,\n\nThanks for another lively response.\n\nOn Apr 19, 2006, at 5:40 PM, John Elliot wrote:\n\n&gt; The term for what you are doing is &#39;immutable&#39;, not &#39;stateless&#39;.\n&gt;\nI think you&#39;re getting warm, though these snapshots need not be  \nimmutable. Where they behave like immutable objects in Java, for  \nexample, is that when you POST to them, instead of updating  \nthemselves, they create and redirect to a new instance of themselves  \nwith the updated state. (Like when you invoke substring() on a Java  \nString, you get back a different String object holding the substring  \nwhile the original object remains unchanged.) Where they differ from  \nimmutable Java objects is that they may change behind the scenes. So  \nif someone else does something that would affect your snapshot, when  \nyou visit it again, it can reflect that change.\n\n&gt; The only analogy that won&#39;t &#39;fray&#39; apart like this is if you used\n&gt; something like a centralised version control system (like  \n&gt; subversion) as\n&gt; the backing store. If you did that, then you truly could have\n&gt; &#39;immutable&#39; shopping basket snapshots. The thing is though, that as  \n&gt; your\n&gt; products, stock levels, and prices can vary over time *in the real\n&gt; world*, it would be of limited value to you or your users to allow  \n&gt; them\n&gt; to proceed shopping for half an hour when you could already have told\n&gt; them &quot;Oh, look, that thing you want to buy... someone else just\n&gt; purchased it, and now we&#39;re out of stock&quot;. If you don&#39;t allow two  \n&gt; users\n&gt; to put a single item in their shopping basket, i.e., if you literally\n&gt; &#39;put it in their shopping basket&#39; (well, as close to &#39;literally&#39; as  \n&gt; you\n&gt; can get in this &#39;metaphorical&#39; sense.. :P  What I mean is that you  \n&gt; take\n&gt; the item &#39;off the shelf&#39; if it&#39;s in someone&#39;s basket), then that is\n&gt; tantamount to offering a pessimistic lock on a resource. Locking is  \n&gt; bad.\n&gt; That&#39;s not to say that &#39;resource locking&#39; isn&#39;t something that you  \n&gt; might\n&gt; have to do in order to support your line of business, but you can see\n&gt; that without a firm &#39;requirements definition&#39; it&#39;s difficult for me to\n&gt; pursue this &#39;shopping basket snapshot&#39; idea.\n&gt;\nI believe you&#39;re making snapshots more complex than need be. A  \nshopping cart snapshot, which you&#39;d use if you view a shopping cart  \nas conversational state, could work the same as a monolithic, one-per- \nuser shopping cart viewed as persistent state. If you want to make  \nsure you give people the latest information on availability and price  \neach time they make a request to see the cart, then perhaps you only  \nstore a set of product IDs and quantities for each shopping cart (or  \nsnapshot). Then when you display the page showing the shopping cart  \n(or snapshot), you always grab and display the latest price and  \navailability for each item. Doing snapshots for conversational  \nshopping carts is no more complex than doing monolithic per-user  \npersistent shopping carts. You would have more of them, but they  \ncould behave identically.\n\n&gt; I&#39;d like to propose that we consider instead a user&#39;s bank account.  \n&gt; This\n&gt; is an example of where the correlation of state with the &#39;real  \n&gt; world&#39; is\n&gt; undeniably important. How does your &#39;immutable snapshot&#39; attempt  \n&gt; help in\n&gt; this scenario?\n&gt;\nI see snapshots as a way to do conversational state, an alternative  \nto user sessions. Bank accounts are clearly persistent, not  \nconversational, state.\n\n&gt; ... That is, if a user deletes an email, then a\n&gt; representation of that user&#39;s inbox will no longer include that email.\n&gt;\nAgreed. Your email inbox, like your bank account, is also persistent,  \nnot conversational, state.\n\n&gt; You might be able to run the case for immutable resources in the  \n&gt; case of\n&gt; a &#39;shopping basket&#39; feature (although I beg to differ), but other  \n&gt; things\n&gt; like a user&#39;s &#39;bank account&#39; I think you&#39;d be forced to agree that  \n&gt; state\n&gt; can not be represented by immutable snapshots in a URL. What would  \n&gt; I do?\n&gt; Pay my bill. Click back. Pay another bill. Click back. Pay another  \n&gt; bill.\n&gt; Click back. Chuckle. :)\n&gt;\nWell, these smell kind of like straw man arguments. I never said that  \nyou should model bank accounts with snapshots.\n\nSnapshots are for *conversational state*, the kind of state web app  \ndevelopers have traditionally stored in a user session in memory on  \nthe server. They are not for persistent state, which people have  \ntraditionally stored in a database. The reason I brought it up in the  \ncontext of shopping carts is that you said you wanted shopping carts  \nto be associated with user sessions:\n\nc) A user who arrives at a web-site will initially be &#39;anonymous&#39;, yet\ntheir very first request flags the beginning of a session. The very\nfirst thing they do might be to &#39;add item to shopping basket&#39;, and the\nvery next thing they do &#39;login&#39;. &#39;Shopping basket&#39; is an application\nlayer function, and it is perfectly reasonable for a server to maintain\nthis state and associate it with a &#39;session&#39;. Unfortunately, not all\n&#39;anonymous&#39; users can share the same shopping basket, and the transition\nfrom &#39;anonymous&#39; to &#39;joe&#39; must migrate the shopping basket. The shopping\nbasket isn&#39;t associated with the &#39;user&#39;, it&#39;s associated with the  \n&#39;session&#39;.\n\nYou also indicated that you wanted the same user to be able to  \ninteract via multiple sessions:\n\n   b) A user, &#39;joe&#39;, who wishes to interact with two &#39;instances&#39; of your\napplication can not do so with REST or HTTP (without cookies, or custom\nheaders, each of which are evil because they do not have universal\nsemantics). This is a problem for many types of distributed applications\nwhere *application state* (i.e. not &#39;transfer protocol state&#39;) is\ndependant on &#39;session&#39;. Having the same user working from two different\nclients under the same account is not sufficient.\n\nMy point was that you don&#39;t need a concept of a user session if you  \nuse snapshots. They are an alternative way to handle conversational  \nserver-side state. Adding a few items to a shopping cart as  \nanonymous, then later logging in as Joe, then later opening a new  \nwindow and interacting as Joe on two completely different shopping  \ncarts simultaneously in two browser windows can be done with  \nsnapshots with no need for a user session.\n\nShopping carts was a bad example for the snapshot approach, though,  \nbecause with a bit of research I realized what all of you already  \nknew, that in practice shopping carts are modeled as persistent, not  \nconversational state. This means that you couldn&#39;t open up two  \nbrowser windows and interact simultaneously with two different  \nshopping carts, because as user Joe, you just have one. Prior to  \nlogging in, you could use snapshots. Or you could store a cookie in  \nthe browser if cookies are enabled, which would essentially make the  \nbrowser the subject. When Joe logs in, you could merge the browser&#39;s  \nshopping cart with Joe&#39;s.\n\n&gt;&gt; When you talk about user session, I feel like you are trying to push\n&gt;&gt; statefullness on the stateless protocol in the traditional way that\n&gt;&gt; most web apps have done.\n&gt;\n&gt; I thought we were on the same page with &#39;application state&#39; and\n&gt; &#39;transfer protocol state&#39; being different things, but this comment of\n&gt; yours hints that perhaps we&#39;re not. I&#39;ve stressed the difference  \n&gt; above,\n&gt; so hopefully that gels.\n&gt;\nI may be hearing you incorrectly, but what I hear when you talk about  \nthe need for a notion of session is what I heard years ago when  \nsomeone explained the session object of Java servlets to me: You need  \na session object because HTTP is stateless, but user&#39;s interaction  \nwith the application are stateful. The session object allows you to  \nkeep track of where you are in the stateful conversation with the  \nuser, even though HTTP is stateless. For a servlets session to work,  \nthe server needs to send a session ID back to the client and the  \nclient needs to send it back to the server on each subsequent HTTP  \nrequest.\n\nAs you put it, &quot;A &#39;session&#39; is just a number associated with a set of  \nclient initiated state transitions,&quot; and &quot;The only &#39;session state&#39;  \nthat needs to be maintained by the client is the &#39;session id&#39;, a  \nprocessing server can &#39;dereference&#39; this during processing to ensure  \nthat the session is active, valid, what user it&#39;s for, etc.&quot; Sounds  \nvery similar.\n\n&gt;&gt; My\n&gt;&gt; point, which I think you may understand but just don&#39;t agree with, is\n&gt;&gt; that you can avoid entirely the concept of a user session on the\n&gt;&gt; server side by considering each piece of state resulting from a\n&gt;&gt; conversation over HTTP with a user as a resource. If you do so, then\n&gt;&gt; you aren&#39;t layering any statefulness on top of HTTP--each request\n&gt;&gt; really is completely independent of the other.\n&gt;\n&gt; Yes, I do understand your point. Yes, I disagree with your point.\n&gt;\n&gt; User requests, in the context of a single user session are  \n&gt; dependant on\n&gt; each other. For example, I can&#39;t remove an item from my shopping  \n&gt; basket\n&gt; until after I&#39;ve added an item to my shopping basket.\n&gt;\n&gt; More than that, each request is dependant on *time*. I already\n&gt; highlighted this, and I pointed out that the only way you can &#39;stop\n&gt; time&#39; is to hold a lock. As you can&#39;t hold a lock for more than one\n&gt; request, every single request *must be* considered to be dependant  \n&gt; on time.\n&gt;\nLet me clarify. What I meant by &quot;completely independent&quot; is  \ncompletely independent of session state, not completely independent  \nof time or order or persistent state. I don&#39;t need to look at the  \nstate of the conversation as described by the session to figure out  \nwhat to do when a request comes in. If I just look at each request  \nand the resource the request URI points to, I can come up with a  \nresponse.\n\n&gt; The problem with HTTP which I&#39;ve being trying to point out is that the\n&gt; only &#39;session&#39; that a user can have with your application (if you only\n&gt; user HTTP Auth) is a &#39;single universal session&#39;. That&#39;s not sufficient\n&gt; for any web application I work on. It is sufficient for me to\n&gt; demonstrate how the &#39;subject&#39; of a request is relevant to the  \n&gt; context in\n&gt; which a server generates resource representations.\n&gt;\n&gt;&gt; I would say that the subject is not the session, it is the user. Each\n&gt;&gt; request the user must authenticate, and then they become the subject.\n&gt;&gt; HTTP does attempt to support this view with HTTP authentication. I\n&gt;&gt; believe it can also be supported via cookies or URL-rewriting, if you\n&gt;&gt; just use that &quot;session ID&quot; as an authentication token and nothing  \n&gt;&gt; more.\n&gt;\n&gt; Yep, the &#39;subject&#39; usually is the user. However, often you need it  \n&gt; to be\n&gt; the &#39;user session&#39;. A &#39;user session&#39; implies a user, but it means that\n&gt; users aren&#39;t forced to have a single &#39;universal session&#39;.\n&gt;\nI agree with your claim that a single universal session is not always  \nsufficient, but still believe that you can use resources to track  \nconversational state. If you do so, there is nothing opaque about  \neach request. Two different &quot;sessions&quot; would map to two different  \nstreams of conversational state snapshots. All the server needs from  \nthe client in that case is credentials for a user authentication, not  \na session ID.\n\nThe reason I&#39;m talking about this on this list is that REST is what  \nmade me rethink how to do conversational state. I&#39;m working with user- \nfacing web applications, not web services, so my concerns include  \nissues like making the browser button user-friendly, including  \navoiding the ugly pop-up when backup up to a previous POST. To avoid  \nthe ugly pop-up, I do redirect after POST to GET, but to do that I  \nneed to know the new state of the conversation on that GET. The usual  \nway people do this is by putting the state in the user session. The  \nmore RESTful way, in my judgement, is to actually create a new  \nresource for that state (a conversation snapshot), and redirecting  \nthe browser to that resource. When I do that, I don&#39;t need a user  \nsession.\n\nBill\n----\nBill Venners\nEditor-in-Chief\nArtima Developer\nhttp://www.artima.com\n\n\n"}}
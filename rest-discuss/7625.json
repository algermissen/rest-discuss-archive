{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":192184872,"authorName":"Ittay Dror","from":"Ittay Dror &lt;ittayd@...&gt;","profile":"ittayf","replyTo":"SENDER","senderId":"eZCv1WRxUM5cBGpXfOwpeIjPM9rM-fm1y-ceTbHzzI2B3MusJFJUCaJT0JTX_3IhYQv76esYQTL5Hd0k2ejqJkcbSup1Kpc","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Re: how to model actions","postDate":"1168931501","msgId":7625,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQ1QUM3QUFELjYwMTAwMDlAcWx1c3RlcnMuY29tPg==","inReplyToHeader":"PDQ1QUMyRTRBLjIwMjA3MDRAY2lsdXgub3JnPg==","referencesHeader":"PDQ1QTVEQjg3LjMwNzA3QHFsdXN0ZXJzLmNvbT4JIDw0NWE1ZGUxYi4yZTA0YjZjOS4wYThhLmZmZmY5NTllQG14Lmdvb2dsZS5jb20+CSA8MzQzZWNiM2UwNzAxMTIwMzAwajFiNDBhMzE2cTk3ZGYwYjYzMDE1MjNlMTlAbWFpbC5nbWFpbC5jb20+CSA8NDVBNzhCREQuMzA4MDkwN0BxbHVzdGVycy5jb20+IDwxMTY4NjExMTc0LjUzMjMuNDUuY2FtZWxAbG9jYWxob3N0LmxvY2FsZG9tYWluPiA8NDVBQzJFNEEuMjAyMDcwNEBjaWx1eC5vcmc+"},"prevInTopic":7623,"nextInTopic":7626,"prevInTime":7624,"nextInTime":7626,"topicId":7510,"numMessagesInTopic":39,"msgSnippet":"... good article. let s see if i got it right: the difference of REST design vs RPC (SOAP) is that in REST, the client states what the final state of the","rawEmail":"Return-Path: &lt;Ittay.Dror@...&gt;\r\nX-Sender: Ittay.Dror@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 59918 invoked from network); 16 Jan 2007 07:11:55 -0000\r\nReceived: from unknown (66.218.67.34)\n  by m38a.grp.scd.yahoo.com with QMQP; 16 Jan 2007 07:11:55 -0000\r\nReceived: from unknown (HELO DHOST002-94.dex002.intermedia.net) (64.78.20.229)\n  by mta8.grp.scd.yahoo.com with SMTP; 16 Jan 2007 07:11:55 -0000\r\nReceived: from misd002.dex002.intermedia.net ([64.78.61.100]) by DHOST002-94.dex002.intermedia.net with Microsoft SMTPSVC(6.0.3790.1830);\n\t Mon, 15 Jan 2007 23:11:45 -0800\r\nReceived: from [10.100.2.106] ([212.143.196.226]) by misd002.dex002.intermedia.net over TLS secured channel with Microsoft SMTPSVC(6.0.3790.1830);\n\t Mon, 15 Jan 2007 23:11:43 -0800\r\nMessage-ID: &lt;45AC7AAD.6010009@...&gt;\r\nDate: Tue, 16 Jan 2007 09:11:41 +0200\r\nUser-Agent: Thunderbird 1.5.0.9 (X11/20061219)\r\nMIME-Version: 1.0\r\nCc: rest-discuss@yahoogroups.com\r\nReferences: &lt;45A5DB87.30707@...&gt;\t &lt;45a5de1b.2e04b6c9.0a8a.ffff959e@...&gt;\t &lt;343ecb3e0701120300j1b40a316q97df0b6301523e19@...&gt;\t &lt;45A78BDD.3080907@...&gt; &lt;1168611174.5323.45.camel@...&gt; &lt;45AC2E4A.2020704@...&gt;\r\nIn-Reply-To: &lt;45AC2E4A.2020704@...&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nReturn-Path: ittayd@...\r\nX-OriginalArrivalTime: 16 Jan 2007 07:11:44.0751 (UTC) FILETIME=[94518FF0:01C7393D]\r\nX-eGroups-Msg-Info: 1:0:0:0\r\nFrom: Ittay Dror &lt;ittayd@...&gt;\r\nSubject: Re: [rest-discuss] Re: how to model actions\r\nX-Yahoo-Group-Post: member; u=192184872; y=mNj1h-s5pxvvPh2j_GGHZuvtqoA1ibKbWf20IMRBd6YO\r\nX-Yahoo-Profile: ittayf\r\n\r\n\n\nDuncan Cragg wrote:\n&gt; \n&gt; \n&gt; Ittay Dror:\n&gt; \n&gt;  &gt; this article is what prompted me to submit this thread in the first\n&gt;  &gt; place. if not, i would have probably gone the &quot;ebay&quot; way of defining\n&gt;  &gt; actions in the url. i also read\n&gt;  &gt;\n&gt; http://addsimplicit y.typepad. com/adding_ simplicity_ an_engi/2006/ \n&gt; 11/the_rest_ dialog.html \n&gt; &lt;http://addsimplicity.typepad.com/adding_simplicity_an_engi/2006/11/the_rest_dialog.html&gt; \n&gt; \n&gt; \n&gt;  &gt; in which the real architect continues the dialog from his point of view.\n&gt; \n&gt;  &gt; what i don&#39;t like about Duncan&#39;s post is that he addresses only getter\n&gt;  &gt; and setter business functions, not real ones, those that actually\n&gt;  &gt; create a process. it is very easy to say that instead of getFoo, you\n&gt;  &gt; can GET http://example. com/foo. &lt;http://example.com/foo.&gt;\n&gt;  &gt; it is harder when you want to model a doSomething function.\n&gt; \n&gt; Part 3 of the series has a discussion of these &#39;real business functions&#39;\n&gt; that go beyond simple reading and writing, or getting and setting, data\n&gt; on the server.\n\ngood article.\n\nlet&#39;s see if i got it right: the difference of REST design vs RPC (SOAP) is that in REST, the client states what the final state of the resource should be, and the server does whatever it needs to accomplish that. in RPC, the client initiates a process which can change states as it progresses.\n\nif this is true, what happens if the server can&#39;t reach the declared state? e.g., i have a printer, which i want to put online. i can POST/PUT &#39;online&#39; to http://example.org/printers/pr1/status. but what if the actual process of making the physical printer fails? won&#39;t it be confusing if http://example.org/printers/pr1/status changes to &#39;error&#39; by the server? it means the client can&#39;t be sure that what he posted stays. furthermore, once you allow both the server and client to modify resources, there&#39;s a risk of races. (or, maybe the part of the server that changes the resource can be thought of as a client?)\n\n&gt; \n&gt; Anyway, thanks for reading my dialogue articles! I have been hesitant to\n&gt; notify this list of their existence because: (a) they&#39;re not complete\n&gt; yet, and (b) they may be seen as a challenge to the direction that REST\n&gt; has gone towards the CRUD view since The Thesis, and I don&#39;t want to be\n&gt; seen as in any way confrontational.\n&gt; \n&gt; Plus, I&#39;m aware that I got a ton of traffic to my blog via a kind link\n&gt; from DHH - and he has just converted Rails to CRUD-REST... =0/\n&gt; \n&gt; However, now I&#39;ve been linked to on the list itself, I suppose it&#39;s\n&gt; pointless not coming over here and defending myself.\n&gt; \n&gt; So - I promote a /symmetric/ REST point of view, with active resources\n&gt; being dependent on each other and conveying state between themselves\n&gt; with either GET or POST depending on which party initiates the transfer.\n&gt; \n&gt; I do hope and believe this pattern is still REST-compatible. Please read\n&gt; part 3 of my series\n&gt; (http://duncan- cragg.org/ blog/post/ business- functions- \n&gt; rest-dialogues/ \n&gt; &lt;http://duncan-cragg.org/blog/post/business-functions-rest-dialogues/&gt;)\n&gt; for more explanation of this pattern.\n&gt; \n&gt; Of course, I probably end up thereby promoting POST idempotency, but I\n&gt; see that as a good thing. Example: if you&#39;ve added something to a list,\n&gt; adding it again doesn&#39;t do anything. For some function same(resx,resy) ,\n&gt; of course.\n&gt; \n&gt; Now, Benjamin Carlyle, who should always be heeded, said:\n&gt; \n&gt;  &gt; .. REST replaces the doSomething concept with a &quot;make something so&quot;\n&gt;  &gt; concept. If you think about it, all doSomething can be modelled\n&gt;  &gt; this way. .. &quot;make your state this&quot;.\n&gt; \n&gt; This is an example of what I currently call (in my grubby lab notebook)\n&gt; a &#39;transformation intent&#39; - where some party expresses directly to a\n&gt; resource that they&#39;d like some state to become manifest in or perhaps\n&gt; around that target resource.\n&gt; \n&gt; My heresy (maybe evolution, then) is that I don&#39;t see the future of REST\n&gt; being constrained to resources responding to such transformation intents\n&gt; of other parties: I see some (most!) resources transforming /themselves/\n&gt; in reaction to the state of /other/, peer resources. Allow me to\n&gt; elaborate..\n&gt; \n&gt; I break REST interaction down into three modes - from dumb to smart, via\n&gt; dependent:\n&gt; \n&gt; -: If a resource receives such a direct transformation request or\n&gt; intent, it may be *dumb* and go ahead and do just what it&#39;s told,\n&gt; whenever it&#39;s told. That&#39;s what I was talking about in parts 1 and 2 of\n&gt; the dialogues. It&#39;s a bit like a database. I&#39;d still do without PUT and\n&gt; DELETE, mind, to prevent it being seen that way!\n&gt; \n&gt; -: Alternatively - what seems to be the subject of this thread - it may\n&gt; have *real-world dependency*: maybe it can&#39;t just switch to &#39;running&#39;\n&gt; until the real world thing it models actually /is/ running! So, when it\n&gt; receives a direct transformation intent, it goes off and satisfies that\n&gt; constraint by ensuring it&#39;s ticking over in reality, and only then\n&gt; changes its visible state to &#39;running&#39;.\n&gt; \n&gt; -: Finally, the resource may be *smart*, and decide to switch to\n&gt; &#39;running&#39; because of the rule that, as long as Joe&#39;s resource is\n&gt; running, it should be running itself. So it spots Joe&#39;s resource\n&gt; running, and starts running without even being told to! That&#39;s what I\n&gt; was talking about in part 3 of my dialogues.\n&gt; \n&gt; The latter is advanced REST programming in transformation rules, I\n&gt; suppose. Spontaneous transformation without any direct transformation\n&gt; intent - indirect implication or even deduction.\n&gt; \n&gt; I haven&#39;t directly covered the middle - hidden real-world\n&gt; responsibilities - case so far in my article series. I didn&#39;t think\n&gt; settable resources with non-disk-state side-effects were sufficiently\n&gt; common in the usual REST integration world to warrant coverage as yet!\n&gt; \n&gt; Except insofar as it&#39;s implied by the first - dumb - case, in that the\n&gt; visible state of a resource obviously shouldn&#39;t be set to something for\n&gt; everyone to see until it&#39;s actually saved in that state on disk. I also\n&gt; alluded to this sort of thing when talking about email side effects in\n&gt; part 3.\n&gt; \n&gt; A printer comes to mind as another example of such a resource: you may\n&gt; want to take it offline by requesting online/offline state. A print\n&gt; queue resource is related to this.\n&gt; \n&gt; An example which is /not/ like this is a user interface, which &#39;watches&#39;\n&gt; other state rather than being told what state to achieve directly, and\n&gt; is more like the third, smart, dependent resource, case above.\n&gt; \n&gt; (Actually, in Second Life, I think someone can push your &#39;avatar\n&gt; resource&#39; and directly change what you can see, but now we&#39;re really\n&gt; looking ahead to the future of REST!)\n&gt; \n&gt; I&#39;ll get to these examples later in my series. Which may now need to be\n&gt; ten parts =0(\n&gt; \n&gt; Meanwhile, I&#39;d be delighted to hear what you - Roy Fielding - have to\n&gt; say about all this... =0)\n&gt; \n&gt; Cheers!\n&gt; \n&gt; Duncan\n&gt; \n&gt; ____________ _________ _________ ___\n&gt; Duncan Cragg\n&gt; http://duncan- cragg.org/ blog/ &lt;http://duncan-cragg.org/blog/&gt;\n&gt; \n&gt; \n\n\n-- \n===================================\nIttay Dror, \nChief architect, \nR&D, Qlusters Inc.\nittayd@...\n+972-3-6081994 Fax: +972-3-6081841\n\nwww.openqrm.org - Data Center Provisioning\n\n"}}
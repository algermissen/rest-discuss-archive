{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":174970602,"authorName":"Donald Strong","from":"&quot;Donald Strong&quot; &lt;dstrong@...&gt;","profile":"illyrian_au","replyTo":"SENDER","senderId":"VLwAnc6ks78g5kjmOub7L2_5h_5m9dljVxOWPTFeRWppkMRXiC41XNEh1uOIcoehiy7fJd85oMvJ-eFcXtwCe0lIxi4HskrstZ36rJLNF0xXh6Hz","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Categorising usage of HTTP methods - a matter of trust.","postDate":"1109656273","msgId":4921,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEVNRUFJQ0FHT1BPSUlGSk5QQkhKT0VFSERGQUEuZHN0cm9uZ0BhZ2VudGlzc29mdHdhcmUuY29tPg=="},"prevInTopic":0,"nextInTopic":4925,"prevInTime":4920,"nextInTime":4922,"topicId":4921,"numMessagesInTopic":2,"msgSnippet":" Categorising usage of HTTP methods - a matter of trust. ======================================================= Introduction ... There have been a number","rawEmail":"Return-Path: &lt;dstrong@...&gt;\r\nX-Sender: dstrong@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 39186 invoked from network); 1 Mar 2005 05:52:29 -0000\r\nReceived: from unknown (66.218.66.172)\n  by m24.grp.scd.yahoo.com with QMQP; 1 Mar 2005 05:52:29 -0000\r\nReceived: from unknown (HELO agentis.com.au) (192.35.59.253)\n  by mta4.grp.scd.yahoo.com with SMTP; 1 Mar 2005 05:52:28 -0000\r\nReceived: from voldemort.agentis.net (typhoeus-dmz.agentis.net [192.35.59.129])\n\tby agentis.com.au (8.11.6/8.11.6) with ESMTP id j215qPm24754\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Tue, 1 Mar 2005 16:52:25 +1100\r\nReceived: from eurynome (eurynome.agentis.net [192.168.129.146])\n\tby voldemort.agentis.net (8.11.6/8.11.6) with SMTP id j215qPd11191\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Tue, 1 Mar 2005 05:52:25 GMT\r\nTo: &quot;rest-discuss&quot; &lt;rest-discuss@yahoogroups.com&gt;\r\nDate: Tue, 1 Mar 2005 16:51:13 +1100\r\nMessage-ID: &lt;EMEAICAGOPOIIFJNPBHJOEEHDFAA.dstrong@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain;\n\tcharset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: 7bit\r\nX-Priority: 3 (Normal)\r\nX-MSMail-Priority: Normal\r\nX-Mailer: Microsoft Outlook IMO, Build 9.0.2416 (9.0.2911.0)\r\nX-MimeOLE: Produced By Microsoft MimeOLE V6.00.2900.2180\r\nImportance: Normal\r\nX-eGroups-Remote-IP: 192.35.59.253\r\nFrom: &quot;Donald Strong&quot; &lt;dstrong@...&gt;\r\nSubject: Categorising usage of HTTP methods - a matter of trust.\r\nX-Yahoo-Group-Post: member; u=174970602\r\nX-Yahoo-Profile: illyrian_au\r\n\r\n&lt;pre&gt;\n\nCategorising usage of HTTP methods - a matter of trust.\n=======================================================\n\nIntroduction\n------------\n\nThere have been a number of threads on the REST mail list \ndiscussing the usage of HTTP methods. In particular whether \nusing GET/PUT/DELETE/POST(a) is more RESTful than GET/POST(p).\n\nNote: POST(a) refers to using POST as an append operation,\n      POST(p) refers to using POST as a &#39;process this&#39; operation.\n\nThe semantic difference between these two flavours of POST is purely \nat an application level, neither REST or HTTP make this distinction.\n\nHere is some of the previous discussion :-\n\nhttp://groups.yahoo.com/group/rest-discuss/message/4723\nhttp://asynchronous.org/blog/archives/2004/08/index.html\nhttp://groups.yahoo.com/group/rest-discuss/message/4725\nhttp://groups.yahoo.com/group/rest-discuss/message/4728\n\nThe hypothesis I put forward here is that:\n\n    Whether it is appropriate to use GET/PUT/DELETE/POST(a) \n    rather than GET/POST(p) is a matter of the level of trust \n    between the user agent and the origin server.\n\nPut another way, you can only expose the resources on an\norigin server through GET/PUT/DELETE/POST(a) if the origin\nserver has complete trust in the user agent. In any other\ncircumstances you must limit the communication to\nGET/POST(p).\n\n\nAnalysis of the methods\n-----------------------\n\n Methods for UNTRUSTED user agents\n ---------------------------------\n\n  GET     = data retrieval\n  POST(p) = data processing\n\nGET is a readonly HTTP method without side effects so it \npresents no threat when used by an untrusted user agent.\n\nPOST is a request to process data contained in the entity \nbody. It&#39;s impact can be controlled by the process handling\nthe POST request. The request entity can be validated and\nappropriately constrained to ensure that the integrity of\nthe server and the resources for which it is responsible \nare not compromised.\n\n\n Methods for TRUSTED user agents\n -------------------------------\n\n  GET       = data retrieval\n  PUT       = write resource\n  DELETE    = remove resource\n  POST(a)   = create subordinate resource\n\nGET (see above).\n\nPUT is analogous to a write of the entity body to the \nresource URI. A high level of trust is required that the\nuser agent will not unintentionally or maliciously\ncorrupt the resource that is being replaced. The resource\ncannot be amended or extended by a PUT, it must be replaced.\nThis places a greater burden on the user agent to understand\nthe internal state of the resource and to maintain its\nconsistency within itself and in relation to the resources\nthat surround it.\n\nDELETE has similar constraints and impact as PUT. It \nrequires a similar level of trust of the user agent.\n\nPOST(a) can be used to create a new subordinate resource.\nThis can be thought of as a two step process, even if it\nis not implemented this way:\n\n  1. Calculate a new URI for the child resource\n  2. PUT the enclosed entity to that URI.\n\nTherefore, POST(a) has the same impact and requires the same\nlevel of trust as PUT and DELETE.\n\n\nObservations on levels of trust\n-------------------------------\n\nThese observations only concern those methods that request\nmodifications to resources. The GET method&#39;s behaviour is\nidentical for trusted and untrusted user agents.\n\nReferences to code mean the business application code \nnot the code for the user agent (eg. browser) or origin \nserver (eg. apache).\n\n\n Observations on UNTRUSTED access\n ................................\n\n\n         +---------+          +------------+\n         |         |   GET    |            |\n         |  User   |&lt;---------|  Origin    |\n         |  Agent  |          |  Server    |\n         |         |&lt;--------&gt;|            |\n         +---------+  POST(p) +------------+\n\n\n  1. Validation of the request is performed on the origin server\n     before the modifications are made and saved.\n\n  2. Modifications or amendments to existing resources are \n     possible.\n\n  3. Modifications to many resources are possible from the one\n     request.\n\n  4. The user agent only requires knowledge of the interface to\n     the resource. This may be as simple as a set of name/value\n     pairs.\n\n  5. The main processing logic occurs on the origin server. \n\n  6. The user agent may treat the responses from the origin\n     server in a fairly generic manner. A browser is an example of\n     this as it displays the responses according to the rules\n     for displaying HTML without any knowledge of the\n     application.\n\n  7. User agent code may be written by a different organisation\n     from the one that wrote the code on the origin server.\n\n\nObservations on TRUSTED access\n..............................\n\n         +---------+          +------------+\n         |         |   GET    |            |\n         |  User   |&lt;---------|  Origin    |\n         |  Agent  |          |  Server    |\n         |         |---------&gt;|            |\n         +---------+  PUT     +------------+\n                      POST(a)\n                      DELETE\n\n  1. The user agent must maintain relatively complete\n     representations of the internal state of the resources\n     it is manipulating.\n\n  2. Existing resource state on the origin server is\n     clobbered.\n\n  3. The user agent can only save the state of one resource\n     at a time.\n\n  4. The entire resource must be replaced as partial updates\n     are not possible.\n\n  5. The origin server may enforce constraints on the resources:\n        - referential integrity between resources\n        - structural, type or format constraints\n        - data validation.\n\n  6. The user agent requires intimate knowledge of the\n     representations of resources and the relationships\n     between resources.\n\n  7. The main processing logic occurs on the user agent. The\n     origin server is a repository for permanent or long\n     term application state.\n\n  8. The user agent code is probably written by the same\n     organisation that wrote the code on the origin \n     server or in close collaboration with them.\n\n\nThree tier architecture\n-----------------------\n\nIt is interesting to note that in the untrusted model the main\nprocessing is done on the origin server while in the trusted \nmodel the main processing is done on the user agent. When\nthese two models are overlapped we end up with the traditional\nthree tier architecture.\n\n\n Presentation           Business                  Data\n    Layer                Logic                   Services\n           {Untrusted}               {Trusted}\n           { access  }               { access}\n\n +---------+          +-------------+         +------------+\n |         |   GET    |             |  GET    |            |\n |  User   |&lt;---------|Origin   User|&lt;--------|  Origin    |\n |  Agent  |          |Server  Agent|         |  Server    |\n |         |&lt;--------&gt;|             |--------&gt;|            |\n +---------+  POST(p) +-------------+ PUT     +------------+\n                                      POST(a)\n                                      DELETE\n\n\n\nThe next logical step is to allow the business logic server to\ntalk to another business logic server and we have RESTful Web\nServices.\n\n\n\n Presentation           Business                  Data\n    Layer                Logic                   Services\n           {Untrusted}               {Trusted}\n           { access  }               { access}\n\n +---------+          +-------------+         +------------+\n |         |   GET    |             |  GET    |            |\n |  User   |&lt;---------|Origin   User|&lt;--------|  Origin    |\n |  Agent  |          |Server  Agent|         |  Server    |\n |         |&lt;--------&gt;|             |--------&gt;|            |\n +---------+  POST(p) +-------------+ PUT     +------------+\n                             |   ^    POST(a)\n                             |   |    DELETE\n                             |   |\n                         GET |   | POST(p)\n                             V   |\n +---------+          +-------------+\n |         |   GET    |        User |\n |  User   |&lt;---------|        Agent|\n |  Agent  |          |Origin       |\n |         |&lt;--------&gt;|Server       |\n +---------+  POST(p) +-------------+\n\n\nConclusion\n----------\n\nThis article looks at categorizing the use of HTTP methods\nin relation to the level of trust between the user agent and \nthe origin server. \n\nIt suggests that GET/PUT/DELETE/POST(a) methods should only be \nused where there is a high level of trust between the user\nagent and the origin server. Where there is not a sufficient\nlevel of trust only the GET/POST(p) methods should be used.\n\nIt further suggests that these access models can be mapped\nonto a three tier architecture. Untrusted access methods are \nappropriate to use between the Presentation Layer and Business \nLogic. Trusted access methods are appropriate to use between \nthe Business Logic and Data Services. Untrusted access methods\nare also appropriate to use between independent units of Business \nLogic.\n\nFinally, I contend that trusted access to web resources using \nGET/PUT/DELETE/POST(a) and untrusted access using \nGET/POST(p) are two sides of the same coin and that one\nis certainly NOT better or more RESTful than the other.\n\n\nDonald Strong.\n\n&lt;/pre&gt;\n\n\n"}}
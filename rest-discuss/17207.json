{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":45758910,"authorName":"Erik Mogensen","from":"Erik Mogensen &lt;erik@...&gt;","profile":"mogsie_oslo","replyTo":"SENDER","senderId":"YRnBzL0b2nUMlsDxlAjDwN0OuLTC-xNKMRGExY7YdQbasbs8tEltFYmNpvYe9fhcgdnrSsMyI_dyxpPKAeLGNw97QgmUGZYrag","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] How to approve?","postDate":"1295276968","msgId":17207,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEFBTkxrVGluRldrSFBQN2dSekFSaEZVUGt3ZVRyYmtYRDU2Y0pwdkJyLUQ9cUBtYWlsLmdtYWlsLmNvbT4=","inReplyToHeader":"PDhBNDc3QzM2LTQ5NUMtNDNEQi05MDI4LUU4MDQ5MzU4QTVGOUBnbWFpbC5jb20+","referencesHeader":"PDhBNDc3QzM2LTQ5NUMtNDNEQi05MDI4LUU4MDQ5MzU4QTVGOUBnbWFpbC5jb20+"},"prevInTopic":17206,"nextInTopic":17208,"prevInTime":17206,"nextInTime":17208,"topicId":17204,"numMessagesInTopic":5,"msgSnippet":"... I guess this will be heavily debated, but in a strictly RESTful interface, the client should discover the available options (state transitions).  So if ","rawEmail":"Return-Path: &lt;3rik.mogensen@...&gt;\r\nX-Sender: 3rik.mogensen@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 39348 invoked from network); 17 Jan 2011 15:09:29 -0000\r\nX-Received: from unknown (66.196.94.106)\n  by m10.grp.re1.yahoo.com with QMQP; 17 Jan 2011 15:09:29 -0000\r\nX-Received: from unknown (HELO mail-qw0-f46.google.com) (209.85.216.46)\n  by mta2.grp.re1.yahoo.com with SMTP; 17 Jan 2011 15:09:29 -0000\r\nX-Received: by qwa26 with SMTP id 26so4839907qwa.19\n        for &lt;rest-discuss@yahoogroups.com&gt;; Mon, 17 Jan 2011 07:09:28 -0800 (PST)\r\nMIME-Version: 1.0\r\nX-Received: by 10.224.67.66 with SMTP id q2mr3986290qai.174.1295276968660; Mon,\n 17 Jan 2011 07:09:28 -0800 (PST)\r\nX-Received: by 10.220.179.69 with HTTP; Mon, 17 Jan 2011 07:09:28 -0800 (PST)\r\nIn-Reply-To: &lt;8A477C36-495C-43DB-9028-E8049358A5F9@...&gt;\r\nReferences: &lt;8A477C36-495C-43DB-9028-E8049358A5F9@...&gt;\r\nDate: Mon, 17 Jan 2011 16:09:28 +0100\r\nX-Google-Sender-Auth: 7ru8Q7n_oxX__QfYXvzQvEhySqY\r\nMessage-ID: &lt;AANLkTinFWkHPP7gRzARhFUPkweTrbkXD56cJpvBr-D=q@...&gt;\r\nTo: Zhi-Qiang Lei &lt;zhiqiang.lei@...&gt;\r\nCc: Rest List &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Type: multipart/alternative; boundary=0015175ce1c69a50cf049a0c2b4e\r\nFrom: Erik Mogensen &lt;erik@...&gt;\r\nSubject: Re: [rest-discuss] How to approve?\r\nX-Yahoo-Group-Post: member; u=45758910; y=owsCDDkSfHRMgbXWeSLKux-gvIVm3_EEEvtcE06ipQpHvoA-1pw\r\nX-Yahoo-Profile: mogsie_oslo\r\n\r\n\r\n--0015175ce1c69a50cf049a0c2b4e\r\nContent-Type: text/plain; charset=ISO-8859-1\r\n\r\nOn Mon, Jan 17, 2011 at 2:53 PM, Zhi-Qiang Lei &lt;zhiqiang.lei@...&gt;wrote:\n\n&gt; In my application, there are a kind of ticket resources (URI:\n&gt; /tickets/{ticket-id}), and the ticket behaves like a state machine (status:\n&gt; pending -&gt; approved or pending -&gt; deny). Could you tell me what is a RESTful\n&gt; way to approve the tickets? Because there is no APPROVE manner in HTTP.\n&gt; Thanks in advance.\n&gt;\n\nI guess this will be heavily debated, but in a strictly RESTful interface,\nthe client should discover the available options (state transitions).  So if\nyour media type is HTML, your initial GET request might be\n\nGET /tickets/1234\n200 OK\n&lt;form method=&quot;post&quot;&gt;\n  &lt;input type=&quot;hidden&quot; name=&quot;approve&quot; value=&quot;true&quot;&gt;\n  Click this button to approve this ticket &lt;input type=&quot;submit&quot;&gt;\n&lt;/form&gt;\n\n(not the prettiest UI but it gets the point across.)\n\nUsing the above HTML page, the client will provide enough information to the\nuser what happens when he clicks the button, and clicking the button will\nresult in a HTTP POST to /ticket/1234 with &quot;approve=true&quot; in the body.  The\nresponse could be a redirect back to /ticket/1234 which would show the\nupdated resource state.\n\nThe client just transitioned the state of the ticket without knowing what\nthat ticket states are.\n\nIf your server has more specific media types than HTML, e.g.\napplication/x-ticket or whatever, then the definition of\napplication/x-ticket would typically provide similar documentation\nindicating that &quot;the presence of &lt;link rel=approve href=.../&gt; indicates that\nthe client should POST something to that href to approve the ticket.&quot;  This\nwould require the knowledge of application/x-ticket and its processing\nrequirements.\n\nAtom does this, e.g. for &lt;link rel=&quot;edit&quot;&gt; clients are expected to GET and\nPUT to modify items.  &lt;app:collection&gt; defines that the URI allows POST,\nwhich creates a new entry in the referenced collection.\n\nHTML defines &lt;form action=xxx method=post&gt; to instruct clients to perform\nHTTP POST.\n\nThe primary example of this would probably be the sun cloud API where the\nmedia types instruct to POST specific JSON structures to discovered URIs in\norder to perform quite high level operations (like turning on a machine). &lt;\nhttp://kenai.com/projects/suncloudapis/pages/Home&gt;\n-- \n-mogsie-\n\r\n--0015175ce1c69a50cf049a0c2b4e\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;div class=3D&quot;gmail_quote&quot;&gt;On Mon, Jan 17, 2011 at 2:53 PM, Zhi-Qiang Lei &lt;=\r\nspan dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:zhiqiang.lei@...&quot;&gt;zhiqiang.lei=\r\n@...&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote class=3D&quot;gmail_quote&quot; style=\r\n=3D&quot;margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex;&quot;&gt;\n\n\n\n\n\n\n=\r\n\n\n\n\n\n\n\n\n&lt;div style=3D&quot;background-color:#fff&quot;&gt;In my application, there are a=\r\n kind of ticket resources (URI: /tickets/{ticket-id}), and the ticket behav=\r\nes like a state machine (status: pending -&gt; approved or pending -&gt; de=\r\nny). Could you tell me what is a RESTful way to approve the tickets? Becaus=\r\ne there is no APPROVE manner in HTTP. Thanks in advance.&lt;/div&gt;\n&lt;/blockquote=\r\n&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I guess this will be heavily debated, but in a strictl=\r\ny RESTful interface, the client should discover the available options (stat=\r\ne transitions). =A0So if your media type is HTML, your initial GET request =\r\nmight be&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;GET /tickets/1234&lt;/div&gt;&lt;div&gt;200 OK&lt;/div&gt;=\r\n&lt;div&gt;&lt;form method=3D&quot;post&quot;&gt;&lt;/div&gt;&lt;div&gt;=A0=A0&lt;input type=\r\n=3D&quot;hidden&quot; name=3D&quot;approve&quot; value=3D&quot;true&quot;&g=\r\nt;&lt;/div&gt;&lt;div&gt;=A0=A0Click this button to approve this ticket &lt;input type=\r\n=3D&quot;submit&quot;&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/form&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div=\r\n&gt;(not the prettiest UI but it gets the point across.)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;=\r\ndiv&gt;Using the above HTML page, the client will provide enough information t=\r\no the user what happens when he clicks the button, and clicking the button =\r\nwill result in a HTTP POST to /ticket/1234 with &quot;approve=3Dtrue&quot; =\r\nin the body. =A0The response could be a redirect back to /ticket/1234 which=\r\n would show the updated resource state.&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The clien=\r\nt just transitioned the state of the ticket without knowing what that ticke=\r\nt states are.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;If your server has more specific med=\r\nia types than HTML, e.g. application/x-ticket or whatever, then the definit=\r\nion of application/x-ticket would typically provide similar documentation i=\r\nndicating that &quot;the presence of &lt;link rel=3Dapprove href=3D.../&gt;=\r\n indicates that the client should POST something to that href to approve th=\r\ne ticket.&quot; =A0This would require the knowledge of application/x-ticket=\r\n and its processing requirements.&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Atom does this,=\r\n e.g. for &lt;link rel=3D&quot;edit&quot;&gt; clients are expected to GET a=\r\nnd PUT to modify items. =A0&lt;app:collection&gt; defines that the URI allo=\r\nws POST, which creates a new entry in the referenced collection.&lt;/div&gt;\n&lt;div=\r\n&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;HTML defines &lt;form action=3Dxxx method=3Dpost&gt; to ins=\r\ntruct clients to perform HTTP POST.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The primary ex=\r\nample of this would probably be the sun cloud API where the media types ins=\r\ntruct to POST specific JSON structures to discovered URIs in order to perfo=\r\nrm quite high level operations (like turning on a machine). &lt;&lt;a href=3D&quot;=\r\nhttp://kenai.com/projects/suncloudapis/pages/Home&quot;&gt;http://kenai.com/project=\r\ns/suncloudapis/pages/Home&lt;/a&gt;&gt;&lt;/div&gt;\n&lt;meta http-equiv=3D&quot;content-type&quot; c=\r\nontent=3D&quot;text/html; charset=3Dutf-8&quot;&gt;&lt;div&gt;--=A0&lt;/div&gt;&lt;div&gt;-mogsie-&lt;/div&gt;&lt;/=\r\ndiv&gt;\n\r\n--0015175ce1c69a50cf049a0c2b4e--\r\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":23186829,"authorName":"Paul Prescod","from":"Paul Prescod &lt;paul@...&gt;","profile":"papresco","replyTo":"SENDER","senderId":"lY8K7fYfBpYZgs8ESq8AbJjzNpZ6LEcG5AWN8lJNxaDPj5D-iRWPvzW-d35TpM_opUyW3x0uh0EP7Ii2MwuKsC6d2QgA2A","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] REST Tutorial","postDate":"1021860915","msgId":1290,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDNDRTg1QzMzLkEzRjc5RjMxQHByZXNjb2QubmV0Pg==","referencesHeader":"PE9GN0M5OUZCMzguNDVCQ0Q0NkEtT044NTI1NkJCRi4wMDAwODNDMC04NTI1NkJCRi4wMDAzQzJDMUByYWxlaWdoLmlibS5jb20+"},"prevInTopic":1289,"nextInTopic":1291,"prevInTime":1289,"nextInTime":1291,"topicId":1272,"numMessagesInTopic":21,"msgSnippet":"... Is this simple or rocket science? Maybe you could write a tutorial one day. ... WSDL is not required in a theoretical sense but it is in a practical sense.","rawEmail":"Return-Path: &lt;paul@...&gt;\r\nX-Sender: paul@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_0_3_2); 20 May 2002 02:14:39 -0000\r\nReceived: (qmail 32150 invoked from network); 20 May 2002 02:14:38 -0000\r\nReceived: from unknown (66.218.66.217)\n  by m4.grp.scd.yahoo.com with QMQP; 20 May 2002 02:14:38 -0000\r\nReceived: from unknown (HELO smtp1.ActiveState.com) (209.17.183.249)\n  by mta2.grp.scd.yahoo.com with SMTP; 20 May 2002 02:14:38 -0000\r\nReceived: from smtp3.ActiveState.com (smtp3.ActiveState.com [192.168.3.19])\n\tby smtp1.ActiveState.com (8.11.6/8.11.6) with ESMTP id g4K2EUb03190;\n\tSun, 19 May 2002 19:14:30 -0700\r\nReceived: from prescod.net (ssh1.ActiveState.com [192.168.3.32])\n\tby smtp3.ActiveState.com (8.11.6/8.11.6) with ESMTP id g4K2EOe06290;\n\tSun, 19 May 2002 19:14:29 -0700\r\nMessage-ID: &lt;3CE85C33.A3F79F31@...&gt;\r\nDate: Sun, 19 May 2002 19:15:15 -0700\r\nX-Mailer: Mozilla 4.76 [en] (Windows NT 5.0; U)\r\nX-Accept-Language: en\r\nMIME-Version: 1.0\r\nTo: Sam Ruby &lt;rubys@...&gt;, rest-discuss@yahoogroups.com\r\nSubject: Re: [rest-discuss] REST Tutorial\r\nReferences: &lt;OF7C99FB38.45BCD46A-ON85256BBF.000083C0-85256BBF.0003C2C1@...&gt;\r\nContent-Type: text/plain; charset=us-ascii\r\nContent-Transfer-Encoding: 7bit\r\nX-Perlmx-Spam: Gauge=, Probability=0%, Report=&quot;INTERNAL_HOST&quot;\r\nX-Filtered-By: PerlMx makes it fast and easy.  See http://www.ActiveState.com/Products/PerlMx/Header\r\nFrom: Paul Prescod &lt;paul@...&gt;\r\nX-Yahoo-Group-Post: member; u=23186829\r\nX-Yahoo-Profile: papresco\r\n\r\nSam Ruby wrote:\n&gt; \n&gt;...\n&gt; &gt; For instance if I\n&gt; &gt; do a createStockTicker(&quot;RUBY&quot;) message, can any existing SOAP toolkit\n&gt; &gt; return:\n&gt; &gt;\n&gt; &gt; &lt;NewTickerURI&gt;http://www...../RUBY&lt;/NewTickerURI&gt;\n&gt; &gt;\n&gt; &gt; And then have the client do method calls against the newly created\n&gt; &gt; endpoint.\n&gt; \n&gt; Would Axis count?  When Axis is deployed as a servlet, one can map a\n&gt; url-pattern to the AxisServlet.  One can then deploy a transport specific\n&gt; handler which obtains the relative path and does something appropriate with\n&gt; that information.\n\nIs this simple or rocket science? Maybe you could write a tutorial one\nday.\n \n&gt; &gt; WSDL certainly does not support strongly and statically type\n&gt; &gt; declaring this interaction. That&#39;s its biggest flaw when it comes to\n&gt; &gt; REST.\n&gt; \n&gt; Several points.  First, WSDL need not be strongly typed.  I provide a\n&gt; complete and working example of this in\n&gt; http://radio.weblogs.com/0101679/stories/2002/02/15/aBusyDevelopersGuideToWsdl11.html.\n&gt; \n&gt;  Second, it is possible that a WSDL could be generated dynamically for such\n&gt; URLs.  And finally, WSDL is not required.\n\nWSDL is not required in a theoretical sense but it is in a practical\nsense. Deploying WSDL-less web services will become increasingly\ndifficult over the next few months. Already XMethods does not support\nWSDL-less services. Java and .NET programmers will start screaming\nbloody murder if you don&#39;t give them WSDLs compatible with &quot;wsdl.exe&quot;\nand &quot;wsdl2java&quot;. They will not be happy with WSDLs that are not strongly\ntyped. IMO, WSDL is for strong, static type declarations. Generating it\ndynamically, or declaring things anyType remove its value.\n\n&gt; &gt; I&#39;ve thought about the idea of a REST-on-SOAP\n&gt; &gt; and found a few problems\n&gt; \n&gt; I won&#39;t go point by point through these at this time.  I feel that you do\n&gt; have a legitimate beef about SOAP over HTTP, but continue to make\n&gt; distracting and somewhat irrelevant points, and I would like to focus first\n&gt; on the core issues.  For example, a position that SOAP over HTTP should\n&gt; never be used is one that I see as internally self consistent, but not one\n&gt; that says that HTTP should have a default port, but SOAP over HTTP should\n&gt; not.\n\n&quot;Applications communicate with the transport protocols through the use\nof &#39;ports&#39; which are unique I/O identifiers used by the ransport\nprotocols and hte specific instance of the application protocol.&quot;\n\n&quot;Just as every device on an IP network has a unique IP address, every\ninstance of every application protocol also has a unique port number\nthat is used to identify it to the transport protocols on the local\nsystem.&quot;\n\n * &quot;Internet Core Protocols&quot;\n\nIt is my belief that a protocol should have a port number if and only if\nit is an application protocol. I define application protocol as a\nprotocol that has a concept of:\n\n a) addressable data objects\n b) standardized methods on those data objects\n c) standardized semantics for those methods\n\nThis definition holds for FTP, HTTP, SMTP, NNTP etc. It doesn&#39;t hold for\nSOAP, DCOM, RMI, etc. Individual applications *built on top of* SOAP,\nDCOM, and RMI should have ports. For instance if you use SOAP and WSDL\nto define the Astronomical Data Interchange Protocol then it should have\na port. If you use them to define the Supermodel Scheduling Protocol,\nthat should have a port too. The fact that they have different ports\nwould allow system administrators to do different different kinds of\nfiltering on different ports. \n\nFor instance, virus checking on HTTP is relatively easy because there\nare only a couple of different ways to *directly* represent a binary\nattachment in HTTP. But then XML-RPC adds another. And SOAP adds two or\nthree more (base64, SwA, DIME). The &quot;multiplexing&quot; of the multiple\nprotocols on the same port makes system administration more difficult.\n&quot;Party at port 80.&quot;\n\n&gt; The next step is to discuss the relationship between HTTP and REST.  There\n&gt; are not synonymous.  In particular, there are quite a number of uses of\n&gt; HTTP that are inconsistent with REST, including most CGI based\n&gt; applications, and by implication most servlets, ASPs, ColdFusion\n&gt; applications, PHP applications and the like.  And don&#39;t even begin to\n&gt; mention cookies...\n\nThere are varying degrees of compatibility with REST. I don&#39;t know how\nto count &quot;most&quot; CGIs etc. There are a ton out there that are mostly\nRESTful, like Google, Mapquest, Expedia, Slashdot, Wiki. All over the\nWeb I see URIs of the form \n\nhttp://..../foo.php?some_other_stuff\n\nThey are obeying the REST principle of &quot;identification of resources&quot; and\n&quot;hypermedia as the engine of application state.&quot; They adhere to the\nother REST constraints basically for free by using HTTP.\n \n&gt; Yet none of these seem to inspire the vitriol that SOAP has received.\n\nIt is not possible to prevent all people everywhere from abusing a\nprotocol. I&#39;m not that much of a windmill tilter. But it should be\npossible to prevent the standards body tasked with the advancement of\nthe Web from canonizing a specification that abuses the Web protocol.\nThere are also sociological reasons to dislike a specification handed\ndown from a smoke-filled room to be rubber stamped by the masses,\nwhether it makes technical sense or not. But note that the sociological\nproblems only started to bother me when I came to recognize the\ntechnical shortcomings. WSDL will stay in my good graces if it fixes its\ntechnical problems although it also came from a smoke-filled room.\n \n&gt; &gt; Actually, I am interested in this also, but I have a feeling that we\n&gt; &gt; would disagree on the virtues of SOAP. Nevertheless, it would be\n&gt; &gt; illuminating for me to hear your list of what SOAP has to offer REST.\n&gt; \n&gt; Again, I think we need to separate REST and HTTP first.  And establish that\n&gt; HTTP is not the one answer to every question.\n\nI am willing to grant that HTTP is not the answer to every question.\nThen we can move on to the next part of the conversation. ;)\n\n&gt; A good place to start that discussion is with Don Box&#39;s observations:\n&gt; http://zdnet.com.com/2100-1105-845220.html\n\nWe discussed that before you came to rest-discuss. If you can stand to\ngo through Yahoo&#39;s increasingly intrusive interfaces:\n\n * http://groups.yahoo.com/group/rest-discuss/message/799\n\nSummary: You can build synchrony on top of asynchrony or vice versa. You\ncan build reliable-but-inefficient on top of unreliable-but-efficient\n(though not vice versa!).You can build bidirectional on top of\nunidirectional or vice versa. Anyhow, if you want to go out and define a\nREST-friendly protocol that selects a different set of defaults than\nHTTP, by all means do that. I think it will lose out on some network\neffects but it still might be a tecnically interesting protocol.\n\nSOAP does not, in my mind, represent forward progress in that direction.\nSOAP &quot;handles&quot; asynchrony by delegating it down to the underlying\ntransport protocol. SOAP handles REST (and addressing, and method\nstandardization) by delegating it up to the application level. In\nincreasingly mainstream usage, SOAP &quot;handles&quot; type declarations by\ndelegating them XML Schema and WSDL. So if I want to build an\nasynchronous system why don&#39;t I directly use WSDL-described-XML-on-SMTP\nor something like that? You&#39;re the best person on the list to tell me\nwhat value I get out of SOAP.\n\n Paul Prescod\n\n"}}
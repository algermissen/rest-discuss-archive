{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":228155998,"authorName":"Mike Schinkel","from":"&quot;Mike Schinkel&quot; &lt;mikeschinkel@...&gt;","profile":"mikeschinkel","replyTo":"SENDER","senderId":"kdGbTIrUbQvBPyYwKVNxN8CfmrXMJLhGPmuNMlOD1tNCtFy4iTwnSDzfH0lmky42c0lWL67EpZ7mcsy4LFPPoJU69zZ66Bproveze2tgJQ","spamInfo":{"isSpam":false,"reason":"12"},"subject":"RESTful design for Articles & Tags?","postDate":"1198810027","msgId":10081,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDA2NzIwMWM4NDhmYiRmNTJkMGE2MCQwNzAyYThjMEBHdWlkZXMubG9jYWw+","inReplyToHeader":"PDllZWJmNTc0MDcxMjI2MDI1N2g2OGUyMDYwNm83Nzg0NzQ5ZjAzMzE1ZjdmQG1haWwuZ21haWwuY29tPg==","referencesHeader":"PGFscGluZS5MTlguMC45OTk5LjA3MTIwMTA5NTQyNjAuMTk5MThAaGFycG8ubGFpdHMudXRleGFzLmVkdT4gPDQ3NTFEMDBGLjcwNjA1QG1ldGFsYWIudW5jLmVkdT4gPGFscGluZS5MTlguMC45OTk5LjA3MTIwMTE2NTg0NDAuMjA4ODJAaGFycG8ubGFpdHMudXRleGFzLmVkdT4gPDQ3NTIwMkExLjgwNjA5MDJAbWV0YWxhYi51bmMuZWR1PiA8YWxwaW5lLkxOWC4wLjk5OTkuMDcxMjAxMjE0NTAwMC4yMDg4MkBoYXJwby5sYWl0cy51dGV4YXMuZWR1PiA8NDc1MkE5NTMuNDAwMDgwM0BtZXRhbGFiLnVuYy5lZHU+IDxhbHBpbmUuTE5YLjAuOTk5OS4wNzEyMDIwODEzMzgwLjI1ODAyQGhhcnBvLmxhaXRzLnV0ZXhhcy5lZHU+IDw0NzUyRTIwQS42MDcwODA5QG1ldGFsYWIudW5jLmVkdT4gPGFscGluZS5MTlguMC45OTk5LjA3MTIwMjEyMTIyNTAuMjY0NjFAaGFycG8ubGFpdHMudXRleGFzLmVkdT4gPDQ3NjkwNjE5LjEwNkBtZXRhbGFiLnVuYy5lZHU+IDw5ZWViZjU3NDA3MTIyNjAyNTdoNjhlMjA2MDZvNzc4NDc0OWYwMzMxNWY3ZkBtYWlsLmdtYWlsLmNvbT4="},"prevInTopic":10078,"nextInTopic":10082,"prevInTime":10080,"nextInTime":10082,"topicId":9891,"numMessagesInTopic":99,"msgSnippet":"Hi all: I am working on a client project and I d like to get some input on a RESTful design for one aspect. The technical upshot is I am creating a RESTful","rawEmail":"Return-Path: &lt;mikeschinkel@...&gt;\r\nX-Sender: mikeschinkel@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 9790 invoked from network); 28 Dec 2007 02:47:21 -0000\r\nX-Received: from unknown (66.218.67.94)\n  by m45.grp.scd.yahoo.com with QMQP; 28 Dec 2007 02:47:21 -0000\r\nX-Received: from unknown (HELO an-out-0708.google.com) (209.85.132.251)\n  by mta15.grp.scd.yahoo.com with SMTP; 28 Dec 2007 02:47:21 -0000\r\nX-Received: by an-out-0708.google.com with SMTP id c38so684931ana.36\n        for &lt;rest-discuss@yahoogroups.com&gt;; Thu, 27 Dec 2007 18:47:21 -0800 (PST)\r\nX-Received: by 10.100.252.16 with SMTP id z16mr17978643anh.93.1198810041015;\n        Thu, 27 Dec 2007 18:47:21 -0800 (PST)\r\nReturn-Path: &lt;mikeschinkel@...&gt;\r\nX-Received: from desktop ( [69.94.221.21])\n        by mx.google.com with ESMTPS id 18sm13836124wry.17.2007.12.27.18.47.15\n        (version=SSLv3 cipher=RC4-MD5);\n        Thu, 27 Dec 2007 18:47:16 -0800 (PST)\r\nTo: &lt;rest-discuss@yahoogroups.com&gt;\r\nReferences: &lt;alpine.LNX.0.9999.0712010954260.19918@...&gt; &lt;4751D00F.70605@...&gt; &lt;alpine.LNX.0.9999.0712011658440.20882@...&gt; &lt;475202A1.8060902@...&gt; &lt;alpine.LNX.0.9999.0712012145000.20882@...&gt; &lt;4752A953.4000803@...&gt; &lt;alpine.LNX.0.9999.0712020813380.25802@...&gt; &lt;4752E20A.6070809@...&gt; &lt;alpine.LNX.0.9999.0712021212250.26461@...&gt; &lt;47690619.106@...&gt; &lt;9eebf5740712260257h68e20606o7784749f03315f7f@...&gt;\r\nDate: Thu, 27 Dec 2007 21:47:07 -0500\r\nMessage-ID: &lt;067201c848fb$f52d0a60$0702a8c0@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain;\n\tcharset=&quot;us-ascii&quot;\r\nContent-Transfer-Encoding: 7bit\r\nX-Mailer: Microsoft Office Outlook 11\r\nThread-Index: AchHrhfYW1NWJggOSY6EQikXjKLQZwBSyzEg\r\nIn-Reply-To: &lt;9eebf5740712260257h68e20606o7784749f03315f7f@...&gt;\r\nX-MimeOLE: Produced By Microsoft MimeOLE V6.00.2900.3198\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Mike Schinkel&quot; &lt;mikeschinkel@...&gt;\r\nSubject: RESTful design for Articles & Tags?\r\nX-Yahoo-Group-Post: member; u=228155998; y=vkCQ89b63PYuTixtEPso3IF9coc9pJZRyKBO22gsbJ859X0HSiey\r\nX-Yahoo-Profile: mikeschinkel\r\n\r\nHi all:\n\nI am working on a client project and I&#39;d like to get some input on a RESTful\ndesign for one aspect. The technical upshot is I am creating a RESTful layer\non a subset of functionality for the tables in the Drupal CMS v5.x using\nMySQL and PHP 4.4.7. I&#39;ll describe the situation in abstract but also in\nspecifics since the Drupal schema design is publically known. \n\nAt an abstract level I have a table with a list of articles, a second tables\nwith a list of predefined tags, a third table with a list of predefined tag\ncategories, and a forth table that joins tags to articles. Each tag is\nassigned to a tag category, and each article can have one or more tags where\ntags can be applied to any number of articles.  \n\nI plan to present the user with a list of HTML &lt;input type=&quot;checkbox&quot;&gt;\nelements, let them select the appropriate tags, and then use AJAX to update\nthe server via a RESTful web service as the default Drupal UI for managing\nterms on nodes is  at best archaic and abyssmally inefficient.\n\nOn the Apache/PHP/MySQL end there will be a sparse martix, i.e. if an\narticle has two tags (i.e. &#39;news&#39; and &#39;human-interest&#39;) there will only be\ntwo records in the &quot;article-tags&quot; table even though it is possible to have\ntens of applicable tags for an article type.  The web service will likely\nneed to INSERT any newly assigned tags and DELETE any formerly assigned\ntags.\n\nI can envision having either issuing the INSERTs and DELETEs individually as\nthe user selects and deselects tags, or it could be done on a &quot;batch submit&quot;\nbasis. I think I&#39;m learning toward the latter to be more consistent with the\nway the web normally works, i.e. &quot;Make all changes on a form and then click\nsubmit to saved or just abandon to not save&quot; as my users are not techies. On\nthe other hand, I&#39;d like to understand the best practice for resource\ninteraction for both approaches.  \n\nHere is what I&#39;ve come up with along with my justification; I&#39;d appreciate\nand critique of my approach along with any specific rationale.  BTW, I plan\nto use simple &#39;application/x-www-form-urlencoded&#39; for POST & PUT requests\nand JSON for GET and possibly POST and PUT responses.\n\nTo assign a tag to an article I could PUT to the following resource since I\nknow the tag-id in advance, and I assume the following should return a &#39;200\nOK&#39;:\n    \n        PUT /articles/{article-id}/tags/{tag-id}\n        \nAlternately I could POST to the same URL and get back a &#39;201 Created&#39;:\n\n        POST /articles/{article-id}/tags/{tag-id}\n        \nWhich is preferred or is there some better alternate, and why?\n\nTo unassign a tag from an article I think I would obviously DELETE the same\nresouce and expect back a 200 OK if it worked, right?\n\n        DELETE /articles/{article-id}/tags/{tag-id}\n        \nOn the other hand it seems a bit harder to pin down an obvious approach to\nsupport the &quot;batch submit&quot; user interaction. I assume this is the\nappropriate resource URL however I&#39;m really not sure whether to PUT or POST\nto it? \n\n        /articles/{article-id}/tags\n\nAlso, when I PUT or POST should I submit:\n\n1.) Just the tags the user wants assigned after they press submit?\n2.) A list of changed tags, i.e. which tags to assign and which tag to\nunassign?\n3.) All potential tags with each one designated as &quot;assigned&quot; or\n&quot;not-assigned&quot;?\n4.) Support all three and have a mode value specifying which mode to use?\n5.) Or some other approach?\n\nBTW, I&#39;m expecting that the attributes I&#39;ll use for the the &lt;input&gt;\nelement&#39;s &quot;id&quot; will be of the format &quot;article_{article-id}_tag_{tag-id}&quot;\nwhere an example might look like: &quot;article_1152_tag_215&quot;.\n\nSo what you do you think?  How do you think it should be best done? Thanks\nin advance for helping me think through my first real-world RESTful web api.\n\n-- \n-Mike Schinkel\nhttp://www.mikeschinkel.com/blogs/\nhttp://www.welldesignedurls.org\nhttp://atlanta-web.org \n\nP.S. For those familar with Drupal or are for those interested in looking\ninto Drupal my &#39;articles&#39; are stored in MySQL using the &#39;node&#39; table with an\ninteger primary key of &#39;nid&#39; and a &#39;type&#39; field with a value of &#39;article&#39;;\nthe tag categories are stored in the &#39;vocabulary&#39; table with an integer\nprimary key of &#39;vid&#39; and a &#39;name&#39; field containing the vocabulary&#39;s\nhuman-readable description; the tags themselves are stored in the\n&#39;term_data&#39; table with an integer primary key of &#39;tid&#39;, an integer foreign\nkey to the &#39;vocabulary&#39; table called &#39;vid&#39;, and a &#39;name&#39; field for the\nterm&#39;s human-readable description of the term; and the terms (tags) are\nrelated to the nodes (articles) via the &#39;term_node&#39; table using the integer\nforeign keys &#39;nid&#39; and &#39;tid&#39;.  \n\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"3RcW7kBiOvYGoBQzbkq5O9TnOWUhnZDh8HCJ_qTdy1sNw9mCK_ZlkZZhyKjp0ND2VWORy2MrLy-k9LP9JdxMcjUnrrBeAcJL8UBkJZeS-Q","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] WADL as an hypertext","postDate":"1279584873","msgId":15876,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMTAwNzE5MTgxNDMzLmU3MWEwNGU1LmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","inReplyToHeader":"PEFBTkxrVGltcDhoalZmLUNBS1VQRTRfOUZHUWJqb3BxaVhpMXF3aFBlSkN5dkBtYWlsLmdtYWlsLmNvbT4=","referencesHeader":"PEFBTkxrVGltcDhoalZmLUNBS1VQRTRfOUZHUWJqb3BxaVhpMXF3aFBlSkN5dkBtYWlsLmdtYWlsLmNvbT4="},"prevInTopic":15873,"nextInTopic":15877,"prevInTime":15875,"nextInTime":15877,"topicId":15848,"numMessagesInTopic":79,"msgSnippet":"... Not if it s a standard, no.  REST argues specifically against creating a new media type in the face of an existing, ubiquitous media type which already","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 65219 invoked from network); 20 Jul 2010 00:14:53 -0000\r\nX-Received: from unknown (66.196.94.106)\n  by m10.grp.re1.yahoo.com with QMQP; 20 Jul 2010 00:14:53 -0000\r\nX-Received: from unknown (HELO mxout-08.mxes.net) (216.86.168.183)\n  by mta2.grp.re1.yahoo.com with SMTP; 20 Jul 2010 00:14:53 -0000\r\nX-Received: from bigbison (unknown [65.117.211.162])\n\t(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))\n\t(No client certificate requested)\n\tby smtp.mxes.net (Postfix) with ESMTPSA id 61E1E509DB;\n\tMon, 19 Jul 2010 20:14:48 -0400 (EDT)\r\nDate: Mon, 19 Jul 2010 18:14:33 -0600\r\nTo: Giacomo Tesio &lt;giacomo@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nMessage-Id: &lt;20100719181433.e71a04e5.eric@...&gt;\r\nIn-Reply-To: &lt;AANLkTimp8hjVf-CAKUPE4_9FGQbjopqiXi1qwhPeJCyv@...&gt;\r\nReferences: &lt;AANLkTimp8hjVf-CAKUPE4_9FGQbjopqiXi1qwhPeJCyv@...&gt;\r\nOrganization: Bison Systems Corporation\r\nX-Mailer: Sylpheed 3.0.3 (GTK+ 2.10.14; i686-pc-mingw32)\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=US-ASCII\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nSubject: Re: [rest-discuss] WADL as an hypertext\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\nGiacomo Tesio wrote:\n&gt; \n&gt; It seem to me that nothing restfully wrong to use an alternative\n&gt; hypertext language instead of html, isn&#39;t it?\n&gt; \n\nNot if it&#39;s a standard, no.  REST argues specifically against creating\na new media type in the face of an existing, ubiquitous media type\nwhich already solves the problem.  I&#39;m not saying HTML and Atom are\nalways the solution -- they&#39;re just *almost* always the solution.\n\nIn a nutshell, REST says that most online systems, of any complexity,\nmay be represented as a standard HTML/HTTP website.  There&#39;s more to it\nthan that, but this is where REST is coming from.  By way of example,\nlet&#39;s consider the problem space of online genetic databases (which are\nproliferating as more genomes are mapped).\n\nIf each genetic-database website implements a &quot;REST API&quot; by developing\na proprietary media type (even if it&#39;s registered and public, if it&#39;s\nonly used by one system I say it&#39;s proprietary), then the result is a\nmishmash of different systems requiring different clients.  This isn&#39;t\nREST -- no Uniform Interface in sight.\n\nOTOH, if each website agrees to use HTML + RDFa and Atom, then each\nteam can evaluate the work of other teams using common Web browsers.\nThe data is a combination of tables and lists, so using HTML means\neveryone agrees on general markup semantics.  What will differ is the\nRDFa metadata used to express specific markup semantics.\n\nThis approach would eventually yield a consensus schema (XSD, RELAX NG +\nSchematron, DTD, whatever) for representing genetic data as XHTML, and a\ndomain-specific metadata vocabulary to annotate the general semantics\nof the markup language to be specific to the genetic-data problem\narea.  A common search syntax for URIs would also be developed.\n\nThe result would be myriad genetic-database websites, all dedicated to\ndifferent fields of research, all looking as different as they do now,\nstyle-wise, but which share the same API by virtue of being designed to\na uniform interface.  A researcher who knows how to search one, knows\nhow to search them all, using a Web browser -- only if those REST APIs,\ntaken as a whole, amount to a Uniform Interface.\n\n(Taken as a whole, the interoperable RESTful blogosphere shares a\nUniform Interface to syndicated collections of journal entries.\nInstead of everyone&#39;s weblog having proprietary media types, a small\nset of ubiquitous media types is used to express Atom Protocol\ninterfaces, such that if you know how to post to one Atom Protocol-\nbased REST-API weblog, you know how to post to them all, even in the\nface of significant variation in the stylistic presentations.)\n\nA bunch of genetic-database websites using proprietary media types in\ntheir &quot;REST APIs&quot; won&#39;t interoperate, because none of them actually has\na Uniform Interface.  It is my contention that only by following a\ndisciplined approach of working through the development of a system\nusing ubiquitous media types, can the parameters of any new media types\nultimately required, be properly determined.\n\nIOW, it may be that the genetic-database community determines that Web\nbrowsers can&#39;t do certain things, or identifies some shortcomings in\nthe approach of using ubiquitous media types, of otherwise decides that\na new media type is in order.  That media type would fill a legitimate\nneed that isn&#39;t otherwise met, while not re-inventing any of the wheels\nthat make up the existing HTML Web (like lists, tables, linking,\naccessibility).\n\nThe point I&#39;m trying to make, is that approaching REST development by\ncreating media types, misses the point.  IMO, there&#39;s a greater than\n95% chance that the media type or types your system needs, already\nexist.  Their ubiquity is what makes using them RESTful -- genetic data\npresented using HTML + Atom presents the opportunity for serendipitous\nre-use precisely because a new media type *wasn&#39;t* created.\n\n&gt; \n&gt; So, to represent a cargo I should send a Content-Type with it of type\n&gt; application/x-cargo+xml for example?\n&gt; \n\nWhat is a &#39;cargo&#39; other than a list of items?  Right off the top of my\nhead, the general semantics would be those of a definition list.  Any\nadditional semantics may be added using RDFa.  I see no compelling need\nto create a media type that re-invents the definition list in an\napplication-specific fashion, when to do so accomplishes nothing which\ncan&#39;t be done using the ubiquitous HTML media types.\n\nOr, shorter version of me, why *not* be able to use a Web browser to\nreview a cargo manifest?\n\n&gt;\n&gt; Is it right that different resources with such a mime type MUST share\n&gt; the same XSD?\n&gt; \n\nNo.  A REST system assigns set semantics to protocol methods, i.e. if\nyou have application/atom+xml resources and implement Atom Protocol, you\nconstrain POST to create and PUT to replace, for all resources on your\nsystem, as method semantics must not vary by media type.\n\nDomain-specific vocabularies are expressed to the user agent within the\nmedia type, but there is no constraint which requires all resources to\nuse the same domain-specific vocabulary -- that&#39;s an implementation\ndetail, hidden behind the uniform interface.\n\n&gt; \n&gt; Design an &quot;application indipendent&quot; standard rappresentation format\n&gt; each time I want to deliver a different application to a customer\n&gt; seem far too effort...\n&gt; \n\nExactly.  That&#39;s why REST requires standard, not just registered, media\ntypes -- re-use.  I&#39;ve come across very few custom application\ninterfaces that can&#39;t be presented using HTML, which is nice because I\ndon&#39;t have to re-invent the accessibility wheel for every system I\ndevelop.\n\nWhile it&#39;s true that an &quot;evolving set of standard media types&quot; requires\ninitial implementations of a media type to be proprietary, if your\ncustom media type is only ever used by a couple of systems, then it\ndefeats the purpose of self-descriptive messaging.  It&#39;s also much\neasier to hire someone to maintain a running system that&#39;s built\naround ubiquitous media types they already know, instead of having to\ntrain new hires to a proprietary media type they&#39;ve never encountered.\n\nIf there&#39;s a compelling need for your new media type, then it ought to\nbe widely adopted and standardized.  If it&#39;s specific to your\nimplementation and doesn&#39;t fit anyone else&#39;s needs, or doesn&#39;t do\nanything that can&#39;t already be done using ubiquitous media types, then\nit won&#39;t proliferate -- no serendipitous re-use.  If it does\nproliferate, then creating it was the right call.  If it doesn&#39;t\nproliferate, then what benefit is it to the RESTful goals of your\nsystem?\n\n&gt;\n&gt; And by the way, designing such formats do not seem a REST constraint:\n&gt; what do we need &quot;code on demand&quot; for otherwise?\n&gt; \n\nYes and no.  Technically, code on demand is used to extend a user\nagent&#39;s understanding of a media type, not as a substitute for creating\na media type.\n\n&gt; \n&gt; It seem to me that representing a chair, a cargo, a voyage, an private\n&gt; banker advisory session in HTML is just as inappropriate (from a\n&gt; semantic point of view) as using XML (but without the xml strictness).\n&gt; \n\nWhy?  A list of deck chairs on the Titanic, by voyage, seems like list/\ntabular data to me.  So why not represent it using HTML tables and\nlists?  For those service consumers which need to know that a chaise\nlounge is a type of deck chair, the table can be marked up with RDFa to\nexpress that domain-specific vocabulary.\n\nDeveloping a media type specific to the requirement of listing the deck\nchairs on the Titanic by voyage, runs counter to the REST style, where\n&quot;The trade-off... is that a uniform interface degrades efficiency,\nsince information is transferred in a standardized form rather than one\nwhich is specific to an application&#39;s needs.&quot;\n\nUbiquitous media types is the standardized form Roy&#39;s talking about.\nCreating new media types for every resource you develop, is proprietary.\n\n&gt;\n&gt; And btw, I don&#39;t think that a private banker advisory session is\n&gt; suitable for a standard &quot;application indipendent&quot; reppresentation.\n&gt; \n\nI don&#39;t see what actions in such a use case, couldn&#39;t be modeled using\nHTML.  Anyone with authorization could then use the system from any Web\nbrowser, instead of first needing to download and install some sort of\nspecialized client component.  The former is the whole point of REST as\nan alternative to the latter.\n\n-Eric\n\n"}}
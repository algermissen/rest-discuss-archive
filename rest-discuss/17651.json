{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":386718851,"authorName":"Eb","from":"Eb &lt;amaeze@...&gt;","profile":"amaeze77","replyTo":"SENDER","senderId":"R5rnpJAxToKdya7_tkweWT-aV_i_Z5RcTOLLvyI5qOJRUDXfdY9pwlNtoevWKZS8NGwm-xooUyehvL6W","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] REST and HATEOAS in the context of native applications?","postDate":"1312204065","msgId":17651,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDRFMzZBNTIxLjYwMjAzMDZAZ21haWwuY29tPg==","inReplyToHeader":"PENBK0NFNllVbkpaY3RaV3cxeF9EQ09MZUFVMnRfeWtHY3RqcHF1Zjd3WkUrWDlkQlM2Z0BtYWlsLmdtYWlsLmNvbT4=","referencesHeader":"PGowcGI3ZCtpYWRpQGVHcm91cHMuY29tPgk8NEUzNUUwNEYuMzAzMDEwOUBnbWFpbC5jb20+IDxDQStDRTZZVW5KWmN0Wld3MXhfRENPTGVBVTJ0X3lrR2N0anBxdWY3d1pFK1g5ZEJTNmdAbWFpbC5nbWFpbC5jb20+"},"prevInTopic":17650,"nextInTopic":17652,"prevInTime":17650,"nextInTime":17652,"topicId":17617,"numMessagesInTopic":40,"msgSnippet":"I meant to ask this question on the discussion list.  A combination of constraints and principles make up the REST architectural style targeted IMHO at","rawEmail":"Return-Path: &lt;amaeze@...&gt;\r\nX-Sender: amaeze@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 60015 invoked from network); 1 Aug 2011 13:07:49 -0000\r\nX-Received: from unknown (98.137.34.44)\n  by m6.grp.sp2.yahoo.com with QMQP; 1 Aug 2011 13:07:49 -0000\r\nX-Received: from unknown (HELO mail-gy0-f176.google.com) (209.85.160.176)\n  by mta1.grp.sp2.yahoo.com with SMTP; 1 Aug 2011 13:07:49 -0000\r\nX-Received: by gyb11 with SMTP id 11so4935347gyb.21\n        for &lt;rest-discuss@yahoogroups.com&gt;; Mon, 01 Aug 2011 06:07:48 -0700 (PDT)\r\nX-Received: by 10.91.197.27 with SMTP id z27mr3168374agp.44.1312204068637;\n        Mon, 01 Aug 2011 06:07:48 -0700 (PDT)\r\nReturn-Path: &lt;amaeze@...&gt;\r\nX-Received: from [192.168.1.106] (adsl-72-152-59-211.asm.bellsouth.net [72.152.59.211])\n        by mx.google.com with ESMTPS id l2sm496441anm.24.2011.08.01.06.07.46\n        (version=SSLv3 cipher=OTHER);\n        Mon, 01 Aug 2011 06:07:47 -0700 (PDT)\r\nMessage-ID: &lt;4E36A521.6020306@...&gt;\r\nDate: Mon, 01 Aug 2011 09:07:45 -0400\r\nUser-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.2.18) Gecko/20110617 Thunderbird/3.1.11\r\nMIME-Version: 1.0\r\nTo: REST-Discuss Group Discussion &lt;rest-discuss@yahoogroups.com&gt;\r\nReferences: &lt;j0pb7d+iadi@...&gt;\t&lt;4E35E04F.3030109@...&gt; &lt;CA+CE6YUnJZctZWw1x_DCOLeAU2t_ykGctjpquf7wZE+X9dBS6g@...&gt;\r\nIn-Reply-To: &lt;CA+CE6YUnJZctZWw1x_DCOLeAU2t_ykGctjpquf7wZE+X9dBS6g@...&gt;\r\nContent-Type: multipart/alternative;\n boundary=&quot;------------000906030608010407070800&quot;\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Eb &lt;amaeze@...&gt;\r\nSubject: Re: [rest-discuss] REST and HATEOAS in the context of native applications?\r\nX-Yahoo-Group-Post: member; u=386718851; y=KAqKMQmWZiIhCLX2DAMqzD4SgC_fD1e7SKYZhztPAMUr-Ho\r\nX-Yahoo-Profile: amaeze77\r\n\r\n\r\n--------------000906030608010407070800\r\nContent-Type: text/plain; charset=windows-1252; format=flowed\r\nContent-Transfer-Encoding: 8bit\r\n\r\nI meant to ask this question on the discussion list.  A combination of \nconstraints and principles make up the REST architectural style targeted \nIMHO at solutions that fit a particular problem space.  However, as has \nbeen mentioned, you get value from using any of the constraints and \nprinciples.  So you need to ask yourself if your system exists within \nthe problem space or if you just are forcing your system to conform to \nthe architectural style.  For example, why do you need hypermedia?\n\n\nOn 08/01/2011 08:27 AM, Daniel Roussel wrote:\n&gt; Hi,\n&gt;\n&gt; Well, first of all, our team is physically dispersed, some of them \n&gt; being in Montreal, some being in Toronto.  By using a Rest \n&gt; architecture more and more, we found that it is easier to have the two \n&gt; teams design the documents to be exchanged and not worry about an \n&gt; API/method calls to be properly documented.  The less coupling there \n&gt; is between the client app and the server app, the less coupling there \n&gt; is between the client app developers and the server developers.  This \n&gt; helps a lot because if a server dev need to completely rewrite one \n&gt; part of the app, it has no impact on the client and so, no need to \n&gt; contact the client side team to discuss impacts, new method calls, etc \n&gt; etc.\nCould this just be from leveraging HTTP properly?\n&gt;\n&gt; Another point is that HTTP and JSON are well supported on most mobile \n&gt; devices and pretty lightweight.  Statelessness is also a design \n&gt; contraint which makes sense on a phone, you can&#39;t assume that a user \n&gt; will perform a transaction all in one go.  Being stateless, you can \n&gt; have an application  maintain its own state, right on the device, and \n&gt; a &quot;transaction&quot; can thus span many hours if the user network \n&gt; connection is intermittent.\nRight, another architectural constraint.\n&gt;\n&gt; Also, what I studied and discovered last week, is that by using proper \n&gt; hypermedia, we will be able to decouple the client and the server even \n&gt; more.  We plan on having one single landing page for all our \n&gt; applications and from there, the client will be able to navigate and \n&gt; find its own server.  This will simplify things so much!  No more need \n&gt; to call Toronto to ask where have they deployed the latest server for \n&gt; this or that app.  They will update the URI on our landing page and \n&gt; the clients app will catch up by themselves.\n\nWhat is the client in your case? Is this a machine?\n&gt;\n&gt; I could go on and on but in the end, the more we respect the REST \n&gt; constraints, the simpler and reliable things seem to be.\n\nTrue, but at a definite cost which is why I asked my question.  Thanks \nfor sharing.\n\nEb\n&gt;\n&gt; Daniel\n&gt;\n&gt; On Sun, Jul 31, 2011 at 7:07 PM, Eb &lt;amaeze@... \n&gt; &lt;mailto:amaeze@...&gt;&gt; wrote:\n&gt;\n&gt;     Hi Daniel -\n&gt;\n&gt;     Why do you perceive conforming to the REST architectural style to\n&gt;     be the better way in this case for your problem space?  I&#39;m\n&gt;     curious for you to shed some more light on that?\n&gt;\n&gt;     Eb\n&gt;\n&gt;\n&gt;     On 07/27/2011 11:35 AM, Daniel Roussel wrote:\n&gt;&gt;\n&gt;&gt;     Hi,\n&gt;&gt;\n&gt;&gt;     I&#39;ve been reading a lot about how to do &quot;proper&quot; REST this week\n&gt;&gt;     and the more I read, the more I&#39;m lost, especially the HATEOAS\n&gt;&gt;     part I fear.\n&gt;&gt;\n&gt;&gt;     First, to give some context, the company I work for develops\n&gt;&gt;     mobile applications for clients. Most of the time, they want to\n&gt;&gt;     get an iPhone native application, an Android application and a\n&gt;&gt;     traditional Web based Application to cover the other mobile\n&gt;&gt;     phones out there.\n&gt;&gt;\n&gt;&gt;     The way we are currently doing things is the good old (bad?) RPC\n&gt;&gt;     over HTTP way. We define a bunch of URI which are coded inside\n&gt;&gt;     the different apps, we exchange data as JSON, etc. This week,\n&gt;&gt;     trying to do things in a better way, I&#39;ve begin a more serious\n&gt;&gt;     study of REST and how to do it properly.\n&gt;&gt;\n&gt;&gt;     What I really can&#39;t wrap my head around is how, technically, have\n&gt;&gt;     HATEOAS in a native application? I mean, when building a native\n&gt;&gt;     application, I have tables to display lists, buttons to do some\n&gt;&gt;     things, etc. My understanding is that all those should be\n&gt;&gt;     displayed based on the data (hypermedia) received from the\n&gt;&gt;     server. Is that right?\n&gt;&gt;\n&gt;&gt;     A concrete example would be a hotel room rental service. The\n&gt;&gt;     person would open the application and have fields to enter the\n&gt;&gt;     from/to dates. It would then tap a &quot;Get Available Rooms&quot;. The app\n&gt;&gt;     would call the server and get back a list of rooms along with\n&gt;&gt;     prices and other details. From there the person could select one\n&gt;&gt;     room and rent it.\n&gt;&gt;\n&gt;&gt;     The RPC way of coding this is obvious to me but I have no idea\n&gt;&gt;     how I&#39;d do that in a proper REST way! What bugs me is that every\n&gt;&gt;     way I look at it, the client application would still be tightly\n&gt;&gt;     coupled to the service. I understand how I would only need to GET\n&gt;&gt;     the http://rent-a-room.com URI hardcoded and then in the response\n&gt;&gt;     I would have the http://rent-a-room.com/available-rooms URI\n&gt;&gt;     given. But... My application would expect each &quot;call&quot; to return\n&gt;&gt;     some pre-defined data and &quot;rel&quot;, those can&#39;t appear out of the\n&gt;&gt;     blue?!\n&gt;&gt;\n&gt;&gt;     I guess what I&#39;m trying to say is that both the business process\n&gt;&gt;     and the data exchanged must be known to my client application at\n&gt;&gt;     the moment of coding it, and those can&#39;t change without breaking\n&gt;&gt;     existing clients. But reading about REST, every is talking about\n&gt;&gt;     loose coupling and not breaking clients... I just don&#39;t see it.\n&gt;&gt;\n&gt;&gt;     What am I missing?\n&gt;&gt;\n&gt;&gt;     Thanks a lot and sorry if it is a stupid question!\n&gt;&gt;\n&gt;&gt;     \n&gt;\n&gt;\n&gt;     -- \n&gt;     blog:http://eikonne.wordpress.com\n&gt;     twitter:http://twitter.com/eikonne\n&gt;\n&gt;\n\n\n-- \nblog: http://eikonne.wordpress.com\ntwitter: http://twitter.com/eikonne\n\n\r\n--------------000906030608010407070800\r\nContent-Type: text/html; charset=windows-1252\r\nContent-Transfer-Encoding: 8bit\r\n\r\n&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta content=&quot;text/html; charset=windows-1252&quot;\n      http-equiv=&quot;Content-Type&quot;&gt;\n  &lt;/head&gt;\n  &lt;body text=&quot;#000000&quot; bgcolor=&quot;#ffffff&quot;&gt;\n    I meant to ask this question on the discussion list.� A combination\n    of constraints and principles make up the REST architectural style\n    targeted IMHO at solutions that fit a particular problem space.�\n    However, as has been mentioned, you get value from using any of the\n    constraints and principles.� So you need to ask yourself if your\n    system exists within the problem space or if you just are forcing\n    your system to conform to the architectural style.� For example, why\n    do you need hypermedia?&lt;br&gt;\n    &lt;br&gt;\n    &lt;br&gt;\n    On 08/01/2011 08:27 AM, Daniel Roussel wrote:\n    &lt;blockquote\ncite=&quot;mid:CA+CE6YUnJZctZWw1x_DCOLeAU2t_ykGctjpquf7wZE+X9dBS6g@...&quot;\n      type=&quot;cite&quot;&gt;Hi,\n      &lt;div&gt;&lt;br&gt;\n      &lt;/div&gt;\n      &lt;div&gt;Well, first of all, our team is�physically�dispersed, some of\n        them being in Montreal, some being in Toronto. �By using a Rest\n        architecture more and more, we found that it is easier to have\n        the two teams design the documents to be exchanged and not worry\n        about an API/method calls to be properly documented. �The less\n        coupling there is between the client app and the server app, the\n        less coupling there is between the client app developers and the\n        server developers. �This helps a lot because if a server dev\n        need to completely rewrite one part of the app, it has no impact\n        on the client and so, no need to contact the client side team to\n        discuss impacts, new method calls, etc etc.&lt;/div&gt;\n    &lt;/blockquote&gt;\n    Could this just be from leveraging HTTP properly?&lt;br&gt;\n    &lt;blockquote\ncite=&quot;mid:CA+CE6YUnJZctZWw1x_DCOLeAU2t_ykGctjpquf7wZE+X9dBS6g@...&quot;\n      type=&quot;cite&quot;&gt;\n      &lt;div&gt;&lt;br&gt;\n      &lt;/div&gt;\n      &lt;div&gt;Another point is that HTTP and JSON are well supported on\n        most mobile devices and pretty lightweight. �Statelessness�is\n        also a design contraint which makes sense on a phone, you can&#39;t\n        assume that a user will perform a transaction all in one go.\n        �Being stateless, you can have an application �maintain its own\n        state, right on the device, and a &quot;transaction&quot; can thus span\n        many hours if the user network connection is�intermittent. &lt;br&gt;\n      &lt;/div&gt;\n    &lt;/blockquote&gt;\n    Right, another architectural constraint.&lt;br&gt;\n    &lt;blockquote\ncite=&quot;mid:CA+CE6YUnJZctZWw1x_DCOLeAU2t_ykGctjpquf7wZE+X9dBS6g@...&quot;\n      type=&quot;cite&quot;&gt;\n      &lt;div&gt;&lt;br&gt;\n      &lt;/div&gt;\n      &lt;div&gt;Also, what I studied and discovered last week, is that by\n        using proper hypermedia, we will be able to decouple the client\n        and the server even more. �We plan on having one single landing\n        page for all our applications and from there, the client will be\n        able to navigate and find its own server. �This will simplify\n        things so much! �No more need to call Toronto to ask where have\n        they deployed the latest server for this or that app. �They will\n        update the URI on our landing page and the clients app will\n        catch up by themselves.&lt;/div&gt;\n    &lt;/blockquote&gt;\n    &lt;br&gt;\n    What is the client in your case? Is this a machine?&lt;br&gt;\n    &lt;blockquote\ncite=&quot;mid:CA+CE6YUnJZctZWw1x_DCOLeAU2t_ykGctjpquf7wZE+X9dBS6g@...&quot;\n      type=&quot;cite&quot;&gt;\n      &lt;div&gt;&lt;br&gt;\n      &lt;/div&gt;\n      &lt;div&gt;I could go on and on but in the end, the more we respect the\n        REST constraints, the simpler and reliable things seem to be.&lt;/div&gt;\n    &lt;/blockquote&gt;\n    &lt;br&gt;\n    True, but at a definite cost which is why I asked my question.�\n    Thanks for sharing.&lt;br&gt;\n    &lt;br&gt;\n    Eb&lt;br&gt;\n    &lt;blockquote\ncite=&quot;mid:CA+CE6YUnJZctZWw1x_DCOLeAU2t_ykGctjpquf7wZE+X9dBS6g@...&quot;\n      type=&quot;cite&quot;&gt;\n      &lt;div&gt;&lt;br&gt;\n      &lt;/div&gt;\n      &lt;div&gt;Daniel&lt;br&gt;\n        &lt;br&gt;\n        &lt;div class=&quot;gmail_quote&quot;&gt;On Sun, Jul 31, 2011 at 7:07 PM, Eb &lt;span\n            dir=&quot;ltr&quot;&gt;&lt;&lt;a moz-do-not-send=&quot;true&quot;\n              href=&quot;mailto:amaeze@...&quot;&gt;amaeze@...&lt;/a&gt;&gt;&lt;/span&gt;\n          wrote:&lt;br&gt;\n          &lt;blockquote class=&quot;gmail_quote&quot; style=&quot;margin: 0pt 0pt 0pt\n            0.8ex; border-left: 1px solid rgb(204, 204, 204);\n            padding-left: 1ex;&quot;&gt;\n            &lt;div text=&quot;#000000&quot; bgcolor=&quot;#ffffff&quot;&gt; Hi Daniel -&lt;br&gt;\n              &lt;br&gt;\n              Why do you perceive conforming to the REST architectural\n              style to be the better way in this case for your problem\n              space?� I&#39;m curious for you to shed some more light on\n              that?&lt;br&gt;\n              &lt;br&gt;\n              Eb\n              &lt;div class=&quot;im&quot;&gt;&lt;br&gt;\n                &lt;br&gt;\n                On 07/27/2011 11:35 AM, Daniel Roussel wrote:\n                &lt;blockquote type=&quot;cite&quot;&gt; &lt;span&gt;�&lt;/span&gt;\n                  &lt;div&gt;\n                    &lt;div&gt;\n                      &lt;div&gt;\n                        &lt;p&gt;Hi,&lt;br&gt;\n                          &lt;br&gt;\n                          I&#39;ve been reading a lot about how to do\n                          &quot;proper&quot; REST this week and the more I read,\n                          the more I&#39;m lost, especially the HATEOAS part\n                          I fear.&lt;br&gt;\n                          &lt;br&gt;\n                          First, to give some context, the company I\n                          work for develops mobile applications for\n                          clients. Most of the time, they want to get an\n                          iPhone native application, an Android\n                          application and a traditional Web based\n                          Application to cover the other mobile phones\n                          out there.&lt;br&gt;\n                          &lt;br&gt;\n                          The way we are currently doing things is the\n                          good old (bad?) RPC over HTTP way. We define a\n                          bunch of URI which are coded inside the\n                          different apps, we exchange data as JSON, etc.\n                          This week, trying to do things in a better\n                          way, I&#39;ve begin a more serious study of REST\n                          and how to do it properly.&lt;br&gt;\n                          &lt;br&gt;\n                          What I really can&#39;t wrap my head around is\n                          how, technically, have HATEOAS in a native\n                          application? I mean, when building a native\n                          application, I have tables to display lists,\n                          buttons to do some things, etc. My\n                          understanding is that all those should be\n                          displayed based on the data (hypermedia)\n                          received from the server. Is that right?&lt;br&gt;\n                          &lt;br&gt;\n                          A concrete example would be a hotel room\n                          rental service. The person would open the\n                          application and have fields to enter the\n                          from/to dates. It would then tap a &quot;Get\n                          Available Rooms&quot;. The app would call the\n                          server and get back a list of rooms along with\n                          prices and other details. From there the\n                          person could select one room and rent it. &lt;br&gt;\n                          &lt;br&gt;\n                          The RPC way of coding this is obvious to me\n                          but I have no idea how I&#39;d do that in a proper\n                          REST way! What bugs me is that every way I\n                          look at it, the client application would still\n                          be tightly coupled to the service. I\n                          understand how I would only need to GET the &lt;a\n                            moz-do-not-send=&quot;true&quot;\n                            href=&quot;http://rent-a-room.com&quot;\n                            target=&quot;_blank&quot;&gt;http://rent-a-room.com&lt;/a&gt;\n                          URI hardcoded and then in the response I would\n                          have the &lt;a moz-do-not-send=&quot;true&quot;\n                            href=&quot;http://rent-a-room.com/available-rooms&quot;\n                            target=&quot;_blank&quot;&gt;http://rent-a-room.com/available-rooms&lt;/a&gt;\n                          URI given. But... My application would expect\n                          each &quot;call&quot; to return some pre-defined data\n                          and &quot;rel&quot;, those can&#39;t appear out of the\n                          blue?! &lt;br&gt;\n                          &lt;br&gt;\n                          I guess what I&#39;m trying to say is that both\n                          the business process and the data exchanged\n                          must be known to my client application at the\n                          moment of coding it, and those can&#39;t change\n                          without breaking existing clients. But reading\n                          about REST, every is talking about loose\n                          coupling and not breaking clients... I just\n                          don&#39;t see it.&lt;br&gt;\n                          &lt;br&gt;\n                          What am I missing?&lt;br&gt;\n                          &lt;br&gt;\n                          Thanks a lot and sorry if it is a stupid\n                          question!&lt;br&gt;\n                          &lt;br&gt;\n                        &lt;/p&gt;\n                      &lt;/div&gt;\n                      &lt;div style=&quot;color: rgb(255, 255, 255); min-height:\n                        0pt;&quot;&gt;&lt;/div&gt;\n                &lt;/blockquote&gt;\n                &lt;br&gt;\n                &lt;br&gt;\n              &lt;/div&gt;\n              &lt;font color=&quot;#888888&quot;&gt;\n                &lt;pre cols=&quot;72&quot;&gt;-- \nblog: &lt;a moz-do-not-send=&quot;true&quot; href=&quot;http://eikonne.wordpress.com&quot; target=&quot;_blank&quot;&gt;http://eikonne.wordpress.com&lt;/a&gt;\ntwitter: &lt;a moz-do-not-send=&quot;true&quot; href=&quot;http://twitter.com/eikonne&quot; target=&quot;_blank&quot;&gt;http://twitter.com/eikonne&lt;/a&gt;&lt;/pre&gt;\n              &lt;/font&gt;&lt;/div&gt;\n          &lt;/blockquote&gt;\n        &lt;/div&gt;\n        &lt;br&gt;\n      &lt;/div&gt;\n    &lt;/blockquote&gt;\n    &lt;br&gt;\n    &lt;br&gt;\n    &lt;pre class=&quot;moz-signature&quot; cols=&quot;72&quot;&gt;-- \nblog: &lt;a class=&quot;moz-txt-link-freetext&quot; href=&quot;http://eikonne.wordpress.com&quot;&gt;http://eikonne.wordpress.com&lt;/a&gt;\ntwitter: &lt;a class=&quot;moz-txt-link-freetext&quot; href=&quot;http://twitter.com/eikonne&quot;&gt;http://twitter.com/eikonne&lt;/a&gt;&lt;/pre&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n\r\n--------------000906030608010407070800--\r\n\n"}}
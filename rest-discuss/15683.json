{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"ijhkcIDf3KUtsa4nC9s0IamR6mvRBayg3peVJ5NgPKgu_w6CW2i8-XMPkwDMi9xrwb6EyQ3YXsdQGpIbplaEq7SRMvDDM5JPVvj1-xRprQ","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Determining which Media type for post/put","postDate":"1276561354","msgId":15683,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMTAwNjE0MTgyMjM0LjYxMmEwYTU3LmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","inReplyToHeader":"PEFBTkxrVGlrWVhOd3FDZktUZTRXVUdxc3BwMGwzQUhvakp6ZzUzZjVKem5PRkBtYWlsLmdtYWlsLmNvbT4=","referencesHeader":"PEFBTkxrVGlsazJZWnJnY2U5M3dYcDlFSjRHZnBpckxlUVZ2bUowSnhjeFBZSEBtYWlsLmdtYWlsLmNvbT4JPDIwMTAwNjA0MTQwOTE2LjNmZmQ3NTNjLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPEFBTkxrVGluU0plTndlckZZMTl4V1VYRFNDY0N5cG5Tdmt6WTc2LUdnVGFlNkBtYWlsLmdtYWlsLmNvbT4JPDIwMTAwNjA4MTAwMzIzLmFhNmVmOTllLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPEFBTkxrVGluVjh5eE4tUjRBRldBdk5hTHFwZWItdWY3Y08wV0ZtWDdEcGFSWEBtYWlsLmdtYWlsLmNvbT4JPDIwMTAwNjA5MTgwMDA1LjhhOGRhNzBiLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPEFBTkxrVGluVDRJdjUzRWhyaFBMR0dZYUxlMVFmaHBHVjFQTTE1NmNYQ0toWkBtYWlsLmdtYWlsLmNvbT4JPDIwMTAwNjExMDgxNDE4LjZkZGE0N2E5LmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPEFBTkxrVGltRHFhWHVIUE52eS1RVUZaa0ZNYUhwU2NnSkNHLXNQcUtxRndzdUBtYWlsLmdtYWlsLmNvbT4JPDIwMTAwNjExMjMzMjU4LmUxYjdlNWY3LmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPEFBTkxrVGltelViTmdyQnVuTXhHTGlLMGZvZDFSVlhxOGtXZTFkOC1LSEs2YkBtYWlsLmdtYWlsLmNvbT4JPDIwMTAwNjEyMTAzMjU1LjgwYzE1YThiLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPEFBTkxrVGluWUtUbk5oZmVTMl9UX1BJRklqV0p5SEtuUmJDWnFFTnM1MUhWV0BtYWlsLmdtYWlsLmNvbT4JPDIwMTAwNjE0MTAwNjU5LmVjNmU0OGU1LmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPEFBTkxrVGltajVkRXdDdTVIekV3ZWRtZWtJYkFuQjNTbUh4elU0N2xCN01JeUBtYWlsLmdtYWlsLmNvbT4JPEFBTkxrVGlrWVhOd3FDZktUZTRXVUdxc3BwMGwzQUhvakp6ZzUzZjVKem5PRkBtYWlsLmdtYWlsLmNvbT4="},"prevInTopic":15678,"nextInTopic":15685,"prevInTime":15682,"nextInTime":15684,"topicId":15466,"numMessagesInTopic":82,"msgSnippet":"... Not broken, just behaving in an unspecified fashion due to the origin server s failure to follow HTTP.  While there are caches that will make assumptions,","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 88325 invoked from network); 15 Jun 2010 00:23:07 -0000\r\nX-Received: from unknown (66.196.94.105)\n  by m10.grp.re1.yahoo.com with QMQP; 15 Jun 2010 00:23:07 -0000\r\nX-Received: from unknown (HELO mxout-08.mxes.net) (216.86.168.183)\n  by mta1.grp.re1.yahoo.com with SMTP; 15 Jun 2010 00:23:07 -0000\r\nX-Received: from bigbison (unknown [65.117.211.162])\n\t(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))\n\t(No client certificate requested)\n\tby smtp.mxes.net (Postfix) with ESMTPSA id 05BB3509DB;\n\tMon, 14 Jun 2010 20:23:04 -0400 (EDT)\r\nDate: Mon, 14 Jun 2010 18:22:34 -0600\r\nTo: Peter Williams &lt;pezra@...&gt;\r\nCc: Rest List &lt;rest-discuss@yahoogroups.com&gt;\r\nMessage-Id: &lt;20100614182234.612a0a57.eric@...&gt;\r\nIn-Reply-To: &lt;AANLkTikYXNwqCfKTe4WUGqspp0l3AHojJzg53f5JznOF@...&gt;\r\nReferences: &lt;AANLkTilk2YZrgce93wXp9EJ4GfpirLeQVvmJ0JxcxPYH@...&gt;\n\t&lt;20100604140916.3ffd753c.eric@...&gt;\n\t&lt;AANLkTinSJeNwerFY19xWUXDSCcCypnSvkzY76-GgTae6@...&gt;\n\t&lt;20100608100323.aa6ef99e.eric@...&gt;\n\t&lt;AANLkTinV8yxN-R4AFWAvNaLqpeb-uf7cO0WFmX7DpaRX@...&gt;\n\t&lt;20100609180005.8a8da70b.eric@...&gt;\n\t&lt;AANLkTinT4Iv53EhrhPLGGYaLe1QfhpGV1PM156cXCKhZ@...&gt;\n\t&lt;20100611081418.6dda47a9.eric@...&gt;\n\t&lt;AANLkTimDqaXuHPNvy-QUFZkFMaHpScgJCG-sPqKqFwsu@...&gt;\n\t&lt;20100611233258.e1b7e5f7.eric@...&gt;\n\t&lt;AANLkTimzUbNgrBunMxGLiK0fod1RVXq8kWe1d8-KHK6b@...&gt;\n\t&lt;20100612103255.80c15a8b.eric@...&gt;\n\t&lt;AANLkTinYKTnNhfeS2_T_PIFIjWJyHKnRbCZqENs51HVW@...&gt;\n\t&lt;20100614100659.ec6e48e5.eric@...&gt;\n\t&lt;AANLkTimj5dEwCu5HzEwedmekIbAnB3SmHxzU47lB7MIy@...&gt;\n\t&lt;AANLkTikYXNwqCfKTe4WUGqspp0l3AHojJzg53f5JznOF@...&gt;\r\nOrganization: Bison Systems Corporation\r\nX-Mailer: Sylpheed 3.0.0 (GTK+ 2.10.14; i686-pc-mingw32)\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=US-ASCII\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nSubject: Re: [rest-discuss] Determining which Media type for post/put\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\nPeter Williams wrote:\n&gt; \n&gt; Any cache that works as described above is broken, assuming all the\n&gt; components are behaving properly (ie, setting requests and responses\n&gt; header fields appropriately).\n&gt;\n\nNot broken, just behaving in an unspecified fashion due to the origin\nserver&#39;s failure to follow HTTP.  While there are caches that will make\nassumptions, such behavior is not specified.\n\nIf you don&#39;t explicitly tell caches how to distinguish between variants,\nthen the cache only knows that you want to cache the most-recent variant\nit has encountered.\n\n&gt;\n&gt; In the scenario above even compressed\n&gt; variants suffer from pollution issues.  For example, a user agent that\n&gt; supports `gzip` content encoding (for example, a browser) would\n&gt; pollute the cache for any user agents that do not\n&gt;\n\nAbsolutely not, as anyone can see by engaging compression on any httpd\nand testing this notion.  The cache gets a request for a resource, the\nuser agent and origin server both support compression, so the cache\neither returns the compressed variant it has stored, or on-the-fly\ncompresses the uncompressed variant it has stored.\n\nIf the next request is from K-meleon (no compression), the cache either\nreturns the uncompressed variant it has stored, or else it on-the-fly\nuncompresses the compressed variant it has stored.\n\nWhen dealing with compression, non-origin-server components are free to\nmake this assumption, and they do.  Unlike with variants used for other\npurposes, where non-origin-server components can&#39;t assume anything (we\ndon&#39;t expect a cache to use its XML variant to generate an HTML\nvariant, or to tranlate one human language to another, but these are\ndistinctly different problems than compression).\n\n&gt;\n&gt; The cache key for a response is the union of the URI and the values of\n&gt; the request header fields listed the Vary field of the response.\n&gt;\n\nTrue for compression.  Not true otherwise.  Unless we&#39;re talking about\ncaches which use sniffing to infer stuff we aren&#39;t telling it -- such\ncaches exist, but go beyond spec to accomplish this.  Caches which\nfollow RFC 2616 aren&#39;t sniffing, because they&#39;re expecting you to follow\nthe SHOULD.\n\nAny given version of IE has about a zillion different User-Agent\nstrings depending on the OS and its configuration.  Without the Content-\nLocation header, a cache cannot distinguish one variant from another,\nexcept by sniffing content.\n\nA cache has four choices in absence of Content-Location.  One, it can\nstore a variant for each IE User-Agent string it encounters.  Two, it\ncan store the most-recently-requested variant.  Three, it can deduce by\nsniffing that the response to one User-Agent string is identical to\nanother.  Or four, it can opt not to cache that resource.\n\nNone of these behaviors is specified.  Assigning URIs to variants *is*\nspecified, to keep just this problem from occurring.\n\nOnly when you assign the same URI to each possible IE User-Agent\nstring using Content-Location, can a cache safely deduce that each IE\nUser-Agent string maps to the _same_ variant (without sniffing the\ncontent).  Only by using Content-Location are you giving the cache\nenough information to associate multiple headers (in this case,\nmultiple User-Agent headers) with the same variant, for any given\nnegotiated URI (except compression).\n\nWithout Content-Location, a cache will treat IE/XP, IE/Vista and\nIE/Win7 responses as unique variants even if they&#39;re the same, unless\nthat cache is sniffing content.  A failure to apply the identification\nof resources constraint, leads to a failure to apply the self-\ndescriptive messaging constraint (as exemplified by the necessity to\nsniff content), in HTTP conneg.\n\nOnly with Content-Location (or some other means of distinguishing one\nvariant from another), can you inform caches that the relationship\nbetween variants and request headers is one-to-many, not one-to-one,\nbecause the cache can recognize that it got the same variant for\nmultiple request headers (rather than a different variant for each\nheader) without resorting to sniffing.\n\n&gt;\n&gt; If the server says `Vary: User-Agent` caching intermediates had\n&gt; better cache responses for different user agents separately, or not\n&gt; at all.\n&gt; \n\nBut that isn&#39;t what RFC 2616 says.  Instead of requiring each variant\nheader/header combination to be associated with its own _unique_ stored\nentity, RFC 2616 says you SHOULD use Content-Location such that variant\nheader/header combinations may be associated with a _shared_ stored\nentity.\n\n&gt;\n&gt; Regardless, the caching argument is an implementation argument.\n&gt;\n\nWell, yeah, it is.  But that doesn&#39;t mean it isn&#39;t a REST argument,\nsince the implementation we&#39;re discussing is an expression of REST&#39;s\nconstraints.  I refuse to accept the argument that because cookies\naren&#39;t RESTful, we can&#39;t point to real-world HTTP behavior as examples\nof REST in practice.\n\nCaching works correctly when REST is followed (by following RFC 2616&#39;s\nSHOULD) in HTTP implementations.  It does not work correctly otherwise.\n\n&gt;\n&gt; Basically, HTTP needs you to individually name every entity\n&gt; transferred over it.\n&gt; \n\nNo, it does not.  Compression, again, is the exception which results in\na SHOULD not a MUST in RFC 2616.  Aside from compression, it&#39;s REST\nwhich requires you to assign URIs to your variants, to meet the\nidentification of resources constraint.  Content-Location is the means\nto implement that constraint, not something HTTP requires (not a MUST).\n\n&gt;\n&gt; Do you assert that the REST architectural style itself demands\n&gt; (perhaps with a compression exception) that every variant of every\n&gt; resource be named as a resource in its own right?\n&gt; \n\nThat is what I keep saying -- glass is technically a liquid even if you\nrefuse to call it a liquid.  Aside from compression, variants are\nresources, even if you refuse to acknowledge that by giving them URIs.\nThe identification of resources constraint is about discovering and\nexposing your resources, not naming them.  Which is why failing to\nfollow the SHOULD (except for compression) is a REST violation --\nyou&#39;ve failed to expose those resources with URIs.\n\nI&#39;m still befuddled by all this pushback.  What reason exists to NOT\nassign URIs to variants?  Why is this solution so impractical, that\nit&#39;s even worth debating for weeks on end?  Can someone please answer\nthat?  Wouldn&#39;t it be easier to just follow the spec?\n\n-Eric\n\n"}}
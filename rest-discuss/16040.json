{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":69164307,"authorName":"mike amundsen","from":"mike amundsen &lt;mamund@...&gt;","profile":"mamund","replyTo":"SENDER","senderId":"hQOWiSSKX0wggGdeC2W15mynFBUNgOmmqMSu7v3kAukNSV8Y8xQQAiMe35fug7GVQ1iCmnAXgmWdwqVSHSKXcXtflIipO18","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Re: Google proposes RPC style APIs over REST","postDate":"1280506699","msgId":16040,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEFBTkxrVGk9NF9tLW1KQzgzOE4yZHVhR2pGUGlRZDgxUkM9NlhrSysyT2lGeUBtYWlsLmdtYWlsLmNvbT4=","inReplyToHeader":"PGkydXI3bCs0Y3R2QGVHcm91cHMuY29tPg==","referencesHeader":"PEFBTkxrVGluWk9xXy1VYjluRjhlaUQwcnZVblJuMnhtWkItVmYzWXdndzNudUBtYWlsLmdtYWlsLmNvbT4JPGkydXI3bCs0Y3R2QGVHcm91cHMuY29tPg=="},"prevInTopic":16039,"nextInTopic":16042,"prevInTime":16039,"nextInTime":16041,"topicId":16015,"numMessagesInTopic":60,"msgSnippet":"Peter: good points:  The Atom/AtomPub (v2) approach had some shortcomings that I think were hard to work around -- each service did enough customizing","rawEmail":"Return-Path: &lt;mca@...&gt;\r\nX-Sender: mca@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 97543 invoked from network); 30 Jul 2010 16:18:21 -0000\r\nX-Received: from unknown (98.137.34.44)\n  by m10.grp.re1.yahoo.com with QMQP; 30 Jul 2010 16:18:21 -0000\r\nX-Received: from unknown (HELO mail-wy0-f177.google.com) (74.125.82.177)\n  by mta1.grp.sp2.yahoo.com with SMTP; 30 Jul 2010 16:18:20 -0000\r\nX-Received: by mail-wy0-f177.google.com with SMTP id 32so92881wyb.8\n        for &lt;rest-discuss@yahoogroups.com&gt;; Fri, 30 Jul 2010 09:18:20 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.227.154.196 with SMTP id p4mr1885071wbw.195.1280506699986; \n\tFri, 30 Jul 2010 09:18:19 -0700 (PDT)\r\nX-Received: by 10.216.137.15 with HTTP; Fri, 30 Jul 2010 09:18:19 -0700 (PDT)\r\nIn-Reply-To: &lt;i2ur7l+4ctv@...&gt;\r\nReferences: &lt;AANLkTinZOq_-Ub9nF8eiD0rvUnRn2xmZB-Vf3Ywgw3nu@...&gt;\n\t&lt;i2ur7l+4ctv@...&gt;\r\nDate: Fri, 30 Jul 2010 12:18:19 -0400\r\nX-Google-Sender-Auth: JZE-XIOPYylbaNNrK4MqNmqqnkc\r\nMessage-ID: &lt;AANLkTi=4_m-mJC838N2duaGjFPiQd81RC=6XkK+2OiFy@...&gt;\r\nTo: Peter &lt;pkeane@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: mike amundsen &lt;mamund@...&gt;\r\nSubject: Re: [rest-discuss] Re: Google proposes RPC style APIs over REST\r\nX-Yahoo-Group-Post: member; u=69164307; y=CXa8s7l_vxlAaG9p90VaBMuxd4l1sHTXlRrDkxhl-OKf\r\nX-Yahoo-Profile: mamund\r\n\r\nPeter:\n\ngood points:\n\n&lt;snip&gt;\nThe Atom/AtomPub (v2) approach had some shortc=\r\nomings that I think were\nhard to work around -- each service did enough &quot;cu=\r\nstomizing&quot; to the\nAtom document, that what you ended up with was essentiall=\r\ny &quot;semantic\ntunnelling&quot; (hat-tip - Bill de hOra), a sub-optimal starting po=\r\nint for\na RESTful system that was really in need of custom media types.\n&lt;/s=\r\nnip&gt;\n\nIMO, the primary shortcoming of Atom was the commitment to the &quot;objec=\r\nt\ntransfer&quot; pattern (writing a predefined &lt;entry /&gt; item) instead of the\n&quot;s=\r\ntate bag&quot; pattern (writing an arbitrary set of elements [name-value\npairs] =\r\nor writing a base64-encoded element, etc. as needed).  this\nresulted in the=\r\n encouragement of what i refer to as &quot;payload-isms&quot;\nsimilar to the SOAP imp=\r\nlementation and resulted in several custom\npayloads that required too much =\r\nout-of-band knowledge to be\narchitecturally scalable.\n\n&lt;snip&gt;\nMy own take i=\r\ns that this sort of JSON/WADL approach was an attempt to\nget around that ne=\r\ned to mint new media types (or to come up w/ a\nsuitably generic media type =\r\nfor all Google services -- a role that\nAtom fell short of). =A0One of the s=\r\ntated goals was to make it easier to\nbring a new API online (interfaces, do=\r\ncumentation, clients, etc.) when\na new service was rolled out. =A0Ideally t=\r\nhat would entail careful\nconsideration of (perhaps custom) media type and l=\r\nink relations. =A0The\napproach here essentially makes those media types dyn=\r\namic &quot;runtime&quot;\nartifacts described by this discovery (JSON/WADL) document.\n=\r\n&lt;/snip&gt;\n\nWADL (and it&#39;s ilk) is a great example of Bill de hOra&#39;s &quot;semantic=\r\n\ntunneling&quot; approach. since Google is already &quot;minting&quot; new semantics\nand t=\r\nargeting their approach to a code-on-demand-only model (no simple\n&quot;browser&quot;=\r\n exists to &quot;render&quot; this content in a meaningful way), they\nare - in essenc=\r\ne - minting a new media type. one that provides almost\nno hypermedia suppor=\r\nt and required split between the data and the data\nsemantics (payload + dis=\r\ncovery doc).\n\nTo me, this looks very much like a JSON version of SOAP. or m=\r\naybe a\nJSON version of Atom + AtomSvc if you drop the semantic wrapper\ndefi=\r\nned in Atom and just use the SOAP-ish semantic tunneling in WSDL.\n\nIt is, I=\r\n think, a step backward, not forward, in the effort to provide\nsemantically=\r\n rich data that can be consumed by any device.\n\nand it&#39;s a bummer.\n\nmca\nhtt=\r\np://amundsen.com/blog/\nhttp://mamund.com/foaf.rdf#me\n\n\n\n\nOn Fri, Jul 30, 20=\r\n10 at 11:31, Peter &lt;pkeane@...&gt; wrote:\n&gt;\n&gt;\n&gt; --- In rest-discus=\r\ns@yahoogroups.com, mike amundsen &lt;mamund@...&gt; wrote:\n&gt;&gt;\n&gt;&gt; veering the thre=\r\nad slightly off to another angle...\n&gt;&gt;\n&gt;&gt; there are lots of engineering dis=\r\nciplines present @ Google. one\n&gt;&gt; engineering discipline that i suspect pai=\r\nd a role in the new\n&gt;&gt; &quot;Discovery-Based API&quot; model is _social_ engineering.=\r\n\n&gt;&gt;\n&gt;&gt; i think this is an example of a team @ Google offering their audienc=\r\ne\n&gt;&gt; (developers in this case) what Google thinks developers want; what\n&gt;&gt; =\r\nGoogle needs to do to get developers to adopt their platform.\n&gt;&gt;\n&gt;&gt; i, pers=\r\nonally, have seen the same thing happen at Microsoft.\n&gt;&gt;\n&gt;&gt; these are smart=\r\n people. they &quot;get&quot; REST. however, they suspect their\n&gt;&gt; target audience do=\r\nes not.\n&gt;\n&gt; I agree. There&#39;s no doubt in my mind that the folks behind the =\r\nnew discovery approach know exactly what they are doing. =A0In fact, Joe Gr=\r\negorio (editor of AtomPub spec & well-regarded RESTian), who is involved in=\r\n the new (v3) discovery approach has been promising a blog post which I sus=\r\npect will be of great interest to folks here.\n&gt;\n&gt; That has not always been =\r\nthe case, though. =A0The Atom/AtomPub (v2) approach had some shortcomings t=\r\nhat I think were hard to work around -- each service did enough &quot;customizin=\r\ng&quot; to the Atom document, that what you ended up with was essentially &quot;seman=\r\ntic tunnelling&quot; (hat-tip - Bill de hOra), a sub-optimal starting point for =\r\na RESTful system that was really in need of custom media types.\n&gt;\n&gt;\n&gt;&gt;\n&gt;&gt; A=\r\nlso, it&#39;s been said on this list (more than once) that one of the\n&gt;&gt; prime =\r\nbarriers to adopting the REST style (or any new pattern, tech,\n&gt;&gt; etc.) is =\r\npsycho-social. =A0people don&#39;t like change, don&#39;t find the new\n&gt;&gt; thing app=\r\nealing, don&#39;t want to lose something in the change, etc. and\n&gt;&gt; to prevent =\r\nthese perceived &quot;negative consequences&quot; from occurring,\n&gt;&gt; people will atte=\r\nmpt to argue against the new thing using\n&gt;&gt; pseudo-technical reasoning (bas=\r\nically unsupported assertions like &quot;it\n&gt;&gt; won&#39;t scale&quot; or &quot;no one will like=\r\n it&quot;, and so forth). often, this kind\n&gt;&gt; of arguing is effective in the soc=\r\nial setting of the office since some\n&gt;&gt; in the conversation hold power over=\r\n others (&quot;i can&#39;t convince my\n&gt;&gt; boss&quot;, etc.).\n&gt;\n&gt; I&#39;m disappointed that I =\r\nwill not be able to point to Google as an example of &quot;REST done right&quot; as t=\r\nhat makes the education (overcoming psycho-social =A0barriers) so much easi=\r\ner. =A0I&#39;m not yet convinced that this is an engineering or design failure,=\r\n though. =A0The *is* some RESTfulness in there, and there are some interest=\r\ning ideas. =A0It will be interesting ot see how it plays out. =A0My own tak=\r\ne is that this sort of JSON/WADL approach was an attempt to get around that=\r\n need to mint new media types (or to come up w/ a suitably generic media ty=\r\npe for all Google services -- a role that Atom fell short of). =A0One of th=\r\ne stated goals was to make it easier to bring a new API online (interfaces,=\r\n documentation, clients, etc.) when a new service was rolled out. =A0Ideall=\r\ny that would entail careful consideration of (perhaps custom) media type an=\r\nd link relations. =A0The approach here essentially makes those media types =\r\ndynamic &quot;runtime&quot; artifacts described by this discovery (JSON/WADL) documen=\r\nt.\n&gt;\n&gt; I&#39;m not passing judgement on it and certainly not asserting this was=\r\n the best/most-RESTful approach, but I do find it worthy of study, given th=\r\ne needs and requirements of their particular situation.\n&gt;\n&gt; --peter keane\n&gt;=\r\n\n&gt;\n&gt;&gt;\n&gt;&gt; Finally, the REST style is not complicated (it&#39;s one of the few\n&gt;&gt;=\r\n network arch styles based in clear constraint-based terms), but it is\n&gt;&gt; h=\r\nard work. hard work is not very appealing. in my experience the REST\n&gt;&gt; sty=\r\nle is most demanding on those building _clients_ not servers.\n&gt;&gt; Google is =\r\ntrying to get people to build &quot;consuming&quot; applications; the\n&gt;&gt; hardest part=\r\n, IMO. i think Google has decided to not try to convince\n&gt;&gt; their audience =\r\nthey need to adopt a state-machine style in order to\n&gt;&gt; consume the data Go=\r\nogle is offering. instead, they decided to make\n&gt;&gt; consuming Google data &quot;e=\r\nasy&quot; and &quot;familiar.&quot; hence the adoption of an\n&gt;&gt; RPC over HTTP pattern.\n&gt;&gt;\n=\r\n&gt;&gt; I think Google thought about this carefully and knows exactly what\n&gt;&gt; th=\r\ney are doing. and they&#39;ll get lots of adoption, too.\n&gt;&gt;\n&gt;&gt; mca\n&gt;&gt; http://am=\r\nundsen.com/blog/\n&gt;&gt; http://mamund.com/foaf.rdf#me\n&gt;&gt;\n&gt;&gt;\n&gt;&gt;\n&gt;&gt;\n&gt;&gt; On Fri, Ju=\r\nl 30, 2010 at 09:45, Eric J. Bowman &lt;eric@...&gt; wrote:\n&gt;&gt; &gt;&gt;\n&gt;&gt; &gt;&gt; I made th=\r\nis too hard. =EF=BF=BDForget the first GET. =EF=BF=BDThe conditional PUT us=\r\nes\n&gt;&gt; &gt;&gt; if-none-match the Etag of /image.jpg?rot=3D90. =EF=BF=BDMakes the =\r\nhypertext API\n&gt;&gt; &gt;&gt; even easier to write.\n&gt;&gt; &gt;&gt;\n&gt;&gt; &gt;\n&gt;&gt; &gt; What if we don&#39;t =\r\nwant to transfer a representation of image.jpg to the\n&gt;&gt; &gt; client, or back =\r\nto the server? =EF=BF=BDNo problem. =EF=BF=BDHEAD /image.jpg?rot=3D90 to\n&gt;&gt;=\r\n &gt; get the Etag (or GET), followed by a conditional POST to /image.jpg of a=\r\n\n&gt;&gt; &gt; representation of the desired application state as application/x-www-=\r\n\n&gt;&gt; &gt; form-urlencoded, i.e. POST /image.jpg?rot=3D90 if-none-match Etag.\n&gt;&gt;=\r\n &gt;\n&gt;&gt; &gt; While this may technically solve the lost-update problem, without\n&gt;=\r\n&gt; &gt; actually transferring the image, how does the user (human or machine)\n&gt;=\r\n&gt; &gt; know the image hasn&#39;t already been rotated by 90 degrees? =EF=BF=BDIf w=\r\nhat\n&gt;&gt; &gt; Google meant to call awkward wasn&#39;t the notion of the client doing=\r\n the\n&gt;&gt; &gt; rotation, but the notion that the image needs to be transferred t=\r\no the\n&gt;&gt; &gt; client at all, then I don&#39;t see any way around it -- without vie=\r\nwing\n&gt;&gt; &gt; the image, how would a human or machine user know that it needs\n&gt;=\r\n&gt; &gt; rotation, or by how many degrees?\n&gt;&gt; &gt;\n&gt;&gt; &gt; So my HEAD-conditional POST=\r\n solution is only RESTful in situations\n&gt;&gt; &gt; where the user goal is to rota=\r\nte an image regardless of current\n&gt;&gt; &gt; orientation. =EF=BF=BDWhereas this i=\r\ns the only use-case Google&#39;s RPC supports,\n&gt;&gt; &gt; without solving for lost-up=\r\ndate, making it brittle even where lost-\n&gt;&gt; &gt; update isn&#39;t a problem: =EF=\r\n=BF=BDGoogle&#39;s way, if the confirmation of the POST\n&gt;&gt; &gt; is lost and the op=\r\neration repeated as a result, the rotation is 180\n&gt;&gt; &gt; degrees not 90. =EF=\r\n=BF=BDMy way, prevents this by properly identifying\n&gt;&gt; &gt; resources (for sta=\r\nrters) and using conditional requests. =EF=BF=BDNot brittle.\n&gt;&gt; &gt;\n&gt;&gt; &gt; Ther=\r\ne is nothing unRESTful about POST /image.jpg?rot=3D90 being\n&gt;&gt; &gt; interprete=\r\nd by the server to mean &quot;rotate image.jpg 90 degrees&quot; unless\n&gt;&gt; &gt; such an o=\r\nperation isn&#39;t hypertext-driven, and provided the media type is\n&gt;&gt; &gt; applic=\r\nation/x-www-form-urlencoded. =EF=BF=BDIn which case &quot;rot&quot; is not a &quot;verb&quot;,\n=\r\n&gt;&gt; &gt; it is a noun identifying a stored procedure (regardless of HTTP method=\r\n).\n&gt;&gt; &gt;\n&gt;&gt; &gt; Google&#39;s POST, by way of comparison, is not a transfer of a\n&gt;&gt;=\r\n &gt; representation of the desired resource state. =EF=BF=BDIt&#39;s RPC. =EF=BF=\r\n=BDI couldn&#39;t\n&gt;&gt; &gt; make this argument if Google allowed GET on the same URI=\r\n -- this is the\n&gt;&gt; &gt; difference between identification of resources (regard=\r\nless of how sloppy\n&gt;&gt; &gt; the URIs) and custom verbs tunneled over POST.\n&gt;&gt; &gt;=\r\n\n&gt;&gt; &gt; -Eric\n&gt;&gt; &gt;\n&gt;&gt; &gt;\n&gt;&gt; &gt; ------------------------------------\n&gt;&gt; &gt;\n&gt;&gt; &gt; Y=\r\nahoo! Groups Links\n&gt;&gt; &gt;\n&gt;&gt; &gt;\n&gt;&gt; &gt;\n&gt;&gt; &gt;\n&gt;&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt; -----------------------=\r\n-------------\n&gt;\n&gt; Yahoo! Groups Links\n&gt;\n&gt;\n&gt;\n&gt;\n\n"}}
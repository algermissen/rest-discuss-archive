{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":289191104,"authorName":"Jan Algermissen","from":"Jan Algermissen &lt;algermissen1971@...&gt;","profile":"algermissen1971","replyTo":"SENDER","senderId":"cyBhJ3KJMC6PD_krT68Mc4ECPF3CBjKkhqa9mNpnWVdj2d-PqrxYiXePJzh2Q_1wGPcryzls8KZ4ewqSNEXbRZnvYhA1axbWNJkkZ6SO598","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] POST at most once","postDate":"1169893962","msgId":7731,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEM0MzhFQTlDLThBRjAtNDlENS1CRjFGLTk4QTA2RkIyQzU3M0BtYWMuY29tPg==","inReplyToHeader":"PDExNjk4NzU5NzUuNTM2My40Mi5jYW1lbEBsb2NhbGhvc3QubG9jYWxkb21haW4+","referencesHeader":"PDExNjkyOTc0NjUuNTEzMC41NS5jYW1lbEBsb2NhbGhvc3QubG9jYWxkb21haW4+IDw0NUIyNzQ0Mi4zMDMwMDAzQGRlaG9yYS5uZXQ+IDwxMTY5ODc1OTc1LjUzNjMuNDIuY2FtZWxAbG9jYWxob3N0LmxvY2FsZG9tYWluPg=="},"prevInTopic":7730,"nextInTopic":7732,"prevInTime":7730,"nextInTime":7732,"topicId":7646,"numMessagesInTopic":40,"msgSnippet":"... Yes to both. I had another thought the other day: The model I am thinking about to achieve POE is based on the use of Atom and the inclusion of an ID in","rawEmail":"Return-Path: &lt;algermissen1971@...&gt;\r\nX-Sender: algermissen1971@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 50596 invoked from network); 27 Jan 2007 10:36:01 -0000\r\nReceived: from unknown (66.218.66.68)\n  by m47.grp.scd.yahoo.com with QMQP; 27 Jan 2007 10:36:01 -0000\r\nReceived: from unknown (HELO smtpout.mac.com) (17.250.248.181)\n  by mta11.grp.scd.yahoo.com with SMTP; 27 Jan 2007 10:36:01 -0000\r\nReceived: from mac.com (smtpin06-en2 [10.13.10.151])\n\tby smtpout.mac.com (Xserve/8.12.11/smtpout11/MantshX 4.0) with ESMTP id l0RAYE73016970;\n\tSat, 27 Jan 2007 02:34:14 -0800 (PST)\r\nReceived: from [10.0.1.2] (d054228.adsl.hansenet.de [80.171.54.228])\n\t(authenticated bits=0)\n\tby mac.com (Xserve/smtpin06/MantshX 4.0) with ESMTP id l0RAY8ls006639;\n\tSat, 27 Jan 2007 02:34:10 -0800 (PST)\r\nIn-Reply-To: &lt;1169875975.5363.42.camel@...&gt;\r\nReferences: &lt;1169297465.5130.55.camel@...&gt; &lt;45B27442.3030003@...&gt; &lt;1169875975.5363.42.camel@...&gt;\r\nMime-Version: 1.0 (Apple Message framework v752.3)\r\nContent-Type: text/plain; charset=US-ASCII; delsp=yes; format=flowed\r\nMessage-Id: &lt;C438EA9C-8AF0-49D5-BF1F-98A06FB2C573@...&gt;\r\nCc: Bill de hOra &lt;bill@...&gt;,\n        REST Discuss &lt;rest-discuss@yahoogroups.com&gt;,\n        Mark Nottingham &lt;mnot@...&gt;\r\nContent-Transfer-Encoding: 7bit\r\nDate: Sat, 27 Jan 2007 11:32:42 +0100\r\nTo: Benjamin Carlyle &lt;benjamincarlyle@...&gt;\r\nX-Mailer: Apple Mail (2.752.3)\r\nX-Brightmail-Tracker: AAAAAA==\r\nX-Brightmail-scanned: yes\r\nX-eGroups-Msg-Info: 1:0:0:0\r\nFrom: Jan Algermissen &lt;algermissen1971@...&gt;\r\nSubject: Re: [rest-discuss] POST at most once\r\nX-Yahoo-Group-Post: member; u=289191104; y=NjHs4wKSwqBa3hELYG8jUSlcRRc0OXVxLoVwGzzO9Y0FCgWaquxy_SxM\r\nX-Yahoo-Profile: algermissen1971\r\n\r\n\nOn 27.01.2007, at 06:32, Benjamin Carlyle wrote:\n\n&gt;\n&gt; Problems with POE:\n&gt; * The specification does not cover how the POE resource is created.\n&gt; Presumably, it is through a POST which could lead to a chicken and egg\n&gt; situation.\n\nYes to both.\n\nI had another thought the other day:\n\nThe model I am thinking about to achieve POE is based on the use of  \nAtom and the inclusion of an ID in the POST body (or an HTTP header).  \nPOE aware clients would receive the ID to use from a factory, non-POE  \naware clients would just do the normal POST.\n\nThe problem with getting the IDs is of course that it violates GET&#39;s  \nidempotency (every GET will result in a new ID). OTH, IDs are cheap  \nand if we are not talking about hundreds of GETs per second to the  \nfactory, it is propably not that bad at all. It is after all just a  \nresource changing over time.\n\nAnother thought I had was that the client could probably create the  \nID itself (e.g. a tag: URI) and a new HTTP return code could indicate  \nto the client that the ID was&#39;t suitable (together with a good one in  \nthe payload).\n\nThoughts?\n\nJan\n\n\n\n&gt; My proposal to POST null is designed to create the temporary\n&gt; resource from a factory with a stable url, solving this problem.\n&gt; * POST is consumed on the POE resource, and can&#39;t be used for other\n&gt; normal purposes. For example, I can&#39;t use this mechanism to create a\n&gt; factory resource. OTOH, the POST null approach only deals with  \n&gt; creation\n&gt; of the resource. POST is available for normal uses on the created\n&gt; resource.\n&gt;\n&gt; On HTTPLR:\n&gt; * This seems fairly similar to the POST null proposal. In fact,  \n&gt; step one\n&gt; of the upload protocol appears to be a null POST with step two  \n&gt; being the\n&gt; PUT. I&#39;m not sure about the explicit client DELETE of the channel, and\n&gt; thus I&#39;m not sure about the need for the channel concept at all. A\n&gt; server must be free to time out the new resource in case of premature\n&gt; client failure, so you can&#39;t guarantee delivery unless the request\n&gt; sequence completes before this timeout. In light of this I prefer the\n&gt; channel concept to simply be replaced by the concept of a created\n&gt; resource.\n&gt; * I think there is some danger that the message could be read to be a\n&gt; whole HTTP request or SOAP request or other request that needs to be\n&gt; delivered. That interpretation doesn&#39;t smell right to me, and I think\n&gt; that any suggestion of message transfer should be explicitly  \n&gt; avoided in\n&gt; favour of state transfer.\n&gt; * The GET appears OK, though clearly the server must also be free to\n&gt; purge old messages once its buffers start to fill up. This is a matter\n&gt; of summarisation that also affects pub/sub mechanisms.\n&gt;\n&gt; I think my suggestion remains intact and I&#39;ll look to implementing it\n&gt; where at most once delivery is required in my architecture. The  \n&gt; current\n&gt; factory resource pattern where a new resource is created by POSTing  \n&gt; its\n&gt; state to the factory is replaced by a two-phase operation. Phase  \n&gt; one is\n&gt; the same POST but with no content:\n&gt;&gt;&gt; POST http://example.com/resourcefactory\n&gt; &lt;&lt; 201 Created\n&gt; &lt;&lt; Location: http://example.com/theresource\n&gt; Phase two is to PUT the content you would have otherwise POSTed:\n&gt;&gt;&gt; PUT http://example.com/theresource\n&gt;&gt;&gt; &lt;&lt;the resource state&gt;&gt;\n&gt; &lt;&lt; 200 OK\n&gt; Either step can be repeated safely so long as the client doesn&#39;t\n&gt; backtrack by dong a POST after a PUT has been sent and so long as the\n&gt; server doesn&#39;t time out the created resource before the client is sure\n&gt; the creation has occured. If 200 is returned from the POST a reliable\n&gt; delivery is not possible and a regular POST should be attempted. To\n&gt; support a reliable POST the server must create a temporary resource  \n&gt; from\n&gt; the POST.\n&gt;\n&gt; Benjamin.\n&gt;\n&gt;\n&gt;\n&gt;\n&gt; Yahoo! Groups Links\n&gt;\n&gt;\n&gt;\n\n\n"}}
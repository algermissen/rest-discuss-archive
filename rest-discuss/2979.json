{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":23186829,"authorName":"Paul Prescod","from":"Paul Prescod &lt;paul@...&gt;","profile":"papresco","replyTo":"SENDER","senderId":"sgzhYNNgFbo13NzcFnGsJWQNiRjkpihutt0fvkKUVnp8IVCmZ0uJKa-L_wySjIKLlZe91_KiwxNl5cV8hZZbflWsMrJwjA","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Another REST vs. SOAP article","postDate":"1038857264","msgId":2979,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDNERUJCNDMwLjUwMTAzMDVAcHJlc2NvZC5uZXQ+","inReplyToHeader":"PDAwNzcwMWMyOTk1NCQ2NWJkMWJiMCRkZWM0N2M0MkBkZXV0c2NoODEwMD4=","referencesHeader":"PDAwNzcwMWMyOTk1NCQ2NWJkMWJiMCRkZWM0N2M0MkBkZXV0c2NoODEwMD4gPDNERUE3RTA0LjcwNjAxMDJAcHJlc2NvZC5uZXQ+IDwzREVCMkJBMy42MDEwMjAxQGVpcmNvbS5uZXQ+"},"prevInTopic":2972,"nextInTopic":2980,"prevInTime":2978,"nextInTime":2980,"topicId":2908,"numMessagesInTopic":50,"msgSnippet":"... To me, OOP is about objects, and objects are things with identity, state and behaviour. If we put aside static type checking for a second, any object in an","rawEmail":"Return-Path: &lt;paul@...&gt;\r\nX-Sender: paul@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_2_3_0); 2 Dec 2002 19:28:16 -0000\r\nReceived: (qmail 66206 invoked from network); 2 Dec 2002 19:28:16 -0000\r\nReceived: from unknown (66.218.66.218)\n  by m13.grp.scd.yahoo.com with QMQP; 2 Dec 2002 19:28:16 -0000\r\nReceived: from unknown (HELO smtp1.ActiveState.com) (209.17.183.249)\n  by mta3.grp.scd.yahoo.com with SMTP; 2 Dec 2002 19:28:15 -0000\r\nReceived: from smtp3.ActiveState.com (smtp3.ActiveState.com [192.168.3.19])\n\tby smtp1.ActiveState.com (8.12.6/8.12.6) with ESMTP id gB2JRl76022089;\n\tMon, 2 Dec 2002 11:27:47 -0800\r\nReceived: from prescod.net (ssh1.ActiveState.com [192.168.3.32])\n\tby smtp3.ActiveState.com (8.11.6/8.11.6) with ESMTP id gB2JRkp12686;\n\tMon, 2 Dec 2002 11:27:46 -0800\r\nMessage-ID: &lt;3DEBB430.5010305@...&gt;\r\nDate: Mon, 02 Dec 2002 11:27:44 -0800\r\nUser-Agent: Mozilla/5.0 (Macintosh; U; PPC Mac OS X; en-US; rv:1.2b) Gecko/20021016\r\nX-Accept-Language: en-us, en\r\nMIME-Version: 1.0\r\nTo: =?ISO-8859-1?Q?Bill_de_h=D3ra?= &lt;dehora@...&gt;\r\nCc: &quot;Toivo &#92;&quot;Deutsch&#92;&quot; Lainevool&quot; &lt;tlainevool@...&gt;,\n   rest-discuss@yahoogroups.com\r\nSubject: Re: [rest-discuss] Another REST vs. SOAP article\r\nReferences: &lt;007701c29954$65bd1bb0$dec47c42@deutsch8100&gt; &lt;3DEA7E04.7060102@...&gt; &lt;3DEB2BA3.6010201@...&gt;\r\nIn-Reply-To: &lt;007701c29954$65bd1bb0$dec47c42@deutsch8100&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 8bit\r\nFrom: Paul Prescod &lt;paul@...&gt;\r\nX-Yahoo-Group-Post: member; u=23186829\r\nX-Yahoo-Profile: papresco\r\n\r\nBill de hï¿½ra wrote:\n\n&gt; I don&#39;t understand the terminology in this thread at all. To me, OOP\n&gt; is about managing dependencies in sofware by using jumptables.  \n\n &gt; I don&#39;t see how the service oriented example above is not OOP.\n\nTo me, OOP is about objects, and objects are things with identity, state \nand behaviour. If we put aside static type checking for a second, any \nobject in an OOPL may refer to any other object in a consistent way \n(void *x, Object x, etc).\n\nWhen you use the &quot;handle as first parameter hack&quot;, you now have to have \ntwo addresses for each object. The address of the service (usually an \nHTTP URI) and the &quot;handle&quot; which is really just another address. In my \nopinion, this is not proper OOP programming. It would be very rare to \nsee a Java interface like:\n\nclass IndividualAccount{\n     function debit(accountNumber, val);\n     function credit(accountNumber, val);\n}\n\nBecause this makes it _impossible_ to pass a reference to an account as \na standard Java object reference. Instead, you would much more often do:\n\nclass AccountManager{\n     function getAccount(number);\n}\n\nclass Account{\n     function debit(val);\n     function credit(val);\n}\n\nNow the account is a first-class object which can be passed around \nwithout reference to the query interface. i.e. it has identity, state \nand behaviour. As an example of how its identity might be important, you \nmight have different access controls on different accounts. This could \nbe done in a language or system with per-object access controls. Even in \nsuch a system, it is not straightforward if you&#39;ve hacked static methods \nto _emulate_ instance objects in a manner that is opaque to your \ninfrastructure.\n\n  Paul Prescod\n\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":242972596,"authorName":"JÃ¸rn Wildt","from":"=?ISO-8859-1?Q?J=F8rn_Wildt?= &lt;jw@...&gt;","profile":"jorn_lind_nielsen","replyTo":"SENDER","senderId":"tUS3IwmtGbqII8jiJCJg7ufC94wj28vS5yBLRQojO8T2J1XLNtc5J7RKgqRwg3BGw2OAd22SLkSau-dZ4ZB8MIwnYgxK82A2YqzUN7HrY282foAVBGYucnY","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] API versioning","postDate":"1357713904","msgId":19250,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PENBTGgteWtKcz1UanZTS09zcEJHRyt4X1dzUHJSWW9HZk9lWnR4Qi13N3hKNTExN3lPQUBtYWlsLmdtYWlsLmNvbT4=","inReplyToHeader":"PENBRjg5YkNBMk9XT1ZSRXRDRF9POW9INy16ODgxcG1kRVQ4cGdad2laLWtBODd6alJDUUBtYWlsLmdtYWlsLmNvbT4=","referencesHeader":"PGtjZm1jMCthb2lkQGVHcm91cHMuY29tPgk8MjAxMzAxMDcyMDM3MTkuNWJhM2ZkZDIuZXJpY0BiaXNvbnN5c3RlbXMubmV0Pgk8OUQ5NDUyQjAtQ0I1Qi00QkY3LThGMTgtRTEwRjZCNUZBNEI1QGdtYWlsLmNvbT4JPDIwMTMwMTA3MjI1NzEzLjNiMWZmNThjLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPDhFRDAyRDhBLTQ0QjAtNEMwNi05MzE1LTI3QzgyMzFERkM4QUBnbWFpbC5jb20+CTxDQUY4OWJDQTJPV09WUkV0Q0RfTzlvSDctejg4MXBtZEVUOHBnWndpWi1rQTg3empSQ1FAbWFpbC5nbWFpbC5jb20+"},"prevInTopic":19249,"nextInTopic":19251,"prevInTime":19249,"nextInTime":19251,"topicId":19240,"numMessagesInTopic":13,"msgSnippet":"If you work with generic media types like plain XML, JSON and(X)HTML (and others) then there is absolutely no reason to version those through the content-type","rawEmail":"Return-Path: &lt;jornwildt@...&gt;\r\nX-Sender: jornwildt@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 41434 invoked from network); 9 Jan 2013 06:45:05 -0000\r\nX-Received: from unknown (98.137.35.161)\n  by m8.grp.sp2.yahoo.com with QMQP; 9 Jan 2013 06:45:05 -0000\r\nX-Received: from unknown (HELO mail-ie0-f171.google.com) (209.85.223.171)\n  by mta5.grp.sp2.yahoo.com with SMTP; 9 Jan 2013 06:45:05 -0000\r\nX-Received: by mail-ie0-f171.google.com with SMTP id 17so1617438iea.2\n        for &lt;rest-discuss@yahoogroups.com&gt;; Tue, 08 Jan 2013 22:45:05 -0800 (PST)\r\nMIME-Version: 1.0\r\nX-Received: by 10.42.98.80 with SMTP id r16mr38923733icn.45.1357713905035; Tue,\n 08 Jan 2013 22:45:05 -0800 (PST)\r\nX-Received: by 10.43.132.131 with HTTP; Tue, 8 Jan 2013 22:45:04 -0800 (PST)\r\nIn-Reply-To: &lt;CAF89bCA2OWOVREtCD_O9oH7-z881pmdET8pgZwiZ-kA87zjRCQ@...&gt;\r\nReferences: &lt;kcfmc0+aoid@...&gt;\n\t&lt;20130107203719.5ba3fdd2.eric@...&gt;\n\t&lt;9D9452B0-CB5B-4BF7-8F18-E10F6B5FA4B5@...&gt;\n\t&lt;20130107225713.3b1ff58c.eric@...&gt;\n\t&lt;8ED02D8A-44B0-4C06-9315-27C8231DFC8A@...&gt;\n\t&lt;CAF89bCA2OWOVREtCD_O9oH7-z881pmdET8pgZwiZ-kA87zjRCQ@...&gt;\r\nDate: Wed, 9 Jan 2013 07:45:04 +0100\r\nX-Google-Sender-Auth: tAj-GyaCL1idbGq1J_5NeXuBIxI\r\nMessage-ID: &lt;CALh-ykJs=TjvSKOspBGG+x_WsPrRYoGfOeZtxB-w7xJ5117yOA@...&gt;\r\nTo: Alexander Johannesen &lt;alexander.johannesen@...&gt;\r\nCc: Keith Hassen &lt;keith.hassen@...&gt;, &quot;Eric J. Bowman&quot; &lt;eric@...&gt;, \n\tREST-Discuss Discussion Group &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Type: multipart/alternative; boundary=90e6ba61506e042a7d04d2d567cf\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: =?ISO-8859-1?Q?J=F8rn_Wildt?= &lt;jw@...&gt;\r\nSubject: Re: [rest-discuss] API versioning\r\nX-Yahoo-Group-Post: member; u=242972596; y=lr4YlCM_ilL1PJ45cPPMOmnfJPba26CGlDZyvWrqfA0sY2s5NFEV4GGExuk\r\nX-Yahoo-Profile: jorn_lind_nielsen\r\n\r\n\r\n--90e6ba61506e042a7d04d2d567cf\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nIf you work with generic media types like plain XML, JSON and(X)HTML (and\no=\r\nthers) then there is absolutely no reason to version those through the\ncont=\r\nent-type and content negotiation. I mean, when did the processing rules\nfor=\r\n XML and JSON last change? Oh, well, the rules for HTML does change -\nbut t=\r\nhis is not handled through the media type, but rather through a\nversioning =\r\nmechanism inside the payload (the DOCTYPE).\n\n&quot;Unfortunately&quot; there is a lot=\r\n of domain specific media types out there -\nand since domains changes regul=\r\narly over time, well, you start thinking\nthat versioning must be done throu=\r\ngh the media type. And this is where\nthings start to break down. If you avo=\r\nid domain specific media types (like\nvnd.order+xml and so on), then you can=\r\n avoid versioning through the media\ntype.\n\nBut, of course, your application=\r\n still evolves over time. Then what?\n\nTry these guidelines (and check also =\r\nNottingham&#39;s blog\nhttp://www.mnot.net/blog/2011/10/25/web_api_versioning_sm=\r\nackdown):\n\n- Do not expose your internal business objects directly on the w=\r\nire (for\ninstance by JSON serializing them directly). Do wrap your business=\r\n objects\nin a (more) stable external format, such that you are free to chan=\r\nge the\nunderlying business objects without the public facing format changin=\r\ng too.\nKeep that transformation in sync with your internal changes.\n\n- Don&#39;=\r\nt make breaking changes to your public format.\n\n- Add versioning informatio=\r\nn inside the payload.\n\n- If you have to introduce breaking changes then cre=\r\nate a new resource for\nthe new version.\n\n- Put links to never versions of t=\r\nhe resource into the original resource\n(for instance using the Link header)=\r\n. Never clients can look for these\nlinks and move on to the new and improve=\r\nd version.\n\n- Introduce new links, in addition to the old ones, where other=\r\n resources\nare linking to your resource (if possible), using new link relat=\r\nion names\nor similar mechanism. Newer clients will know which of the links =\r\nto follow\n- older clients will continue with the link that they have always=\r\n used.\n\n- URLs are not identities for your business data - they are identit=\r\nies for\nvarious representations of your business data. I mean,\napi-v1.examp=\r\nle.com/person/1234 is obviously not the same resource as\napi-v2.example.com=\r\n/person/1234 - but it can certainly represent exactly the\nsame piece of bus=\r\niness data.\n\n(and, yes, this is quite the opposite of what I argued in my f=\r\nirst post in\nthis thread)\n\n/J=F8rn\n\r\n--90e6ba61506e042a7d04d2d567cf\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;div dir=3D&quot;ltr&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;If you work with generic media types like p=\r\nlain XML, JSON and(X)HTML (and others) then there is absolutely no reason t=\r\no version those through the content-type and content negotiation. I mean, w=\r\nhen did the processing rules for XML and JSON last change? Oh, well, the ru=\r\nles for HTML does change - but this is not handled through the media type, =\r\nbut rather through a versioning mechanism inside the payload (the DOCTYPE).=\r\n&lt;br&gt;\n&lt;br&gt;&lt;/div&gt;&quot;Unfortunately&quot; there is a lot of domain specific =\r\nmedia types out there - and since domains changes regularly over time, well=\r\n, you start thinking that versioning must be done through the media type. A=\r\nnd this is where things start to break down. If you avoid domain specific m=\r\nedia types (like vnd.order+xml and so on), then you can avoid versioning th=\r\nrough the media type.&lt;br&gt;\n&lt;br&gt;&lt;/div&gt;&lt;div&gt;But, of course, your application s=\r\ntill evolves over time. Then what?&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Try these g=\r\nuidelines (and check also Nottingham&#39;s blog &lt;a href=3D&quot;http://www.mnot.=\r\nnet/blog/2011/10/25/web_api_versioning_smackdown&quot;&gt;http://www.mnot.net/blog/=\r\n2011/10/25/web_api_versioning_smackdown&lt;/a&gt;):&lt;br&gt;\n&lt;br&gt;&lt;/div&gt;&lt;div&gt;- Do not e=\r\nxpose your internal business objects directly on the wire (for instance by =\r\nJSON serializing them directly). Do wrap your business objects in a (more) =\r\nstable external format, such that you are free to change the underlying bus=\r\niness objects without the public facing format changing too. Keep that tran=\r\nsformation in sync with your internal changes.&lt;br&gt;\n&lt;/div&gt;&lt;div&gt;&lt;br&gt;- Don&#39=\r\n;t make breaking changes to your public format.&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;- Add ver=\r\nsioning information inside the payload.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;- If y=\r\nou have to introduce breaking changes then create a new resource for the ne=\r\nw version.&lt;br&gt;\n&lt;br&gt;&lt;/div&gt;&lt;div&gt;- Put links to never versions of the resource=\r\n into the original resource (for instance using the Link header). Never cli=\r\nents can look for these links and move on to the new and improved version.&lt;=\r\nbr&gt;&lt;br&gt;&lt;/div&gt;\n&lt;div&gt;- Introduce new links, in addition to the old ones, wher=\r\ne other resources are linking to your resource (if possible), using new lin=\r\nk relation names or similar mechanism. Newer clients will know which of the=\r\n links to follow - older clients will continue with the link that they have=\r\n always used.&lt;br&gt;\n&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;- URLs are not identities for y=\r\nour business data - they are identities for various representations of your=\r\n business data. I mean, &lt;a href=3D&quot;http://api-v1.example.com/person/1234&quot;&gt;a=\r\npi-v1.example.com/person/1234&lt;/a&gt; is obviously not the same resource as &lt;a =\r\nhref=3D&quot;http://api-v2.example.com/person/1234&quot;&gt;api-v2.example.com/person/12=\r\n34&lt;/a&gt; - but it can certainly represent exactly the same piece of business =\r\ndata.&lt;br&gt;\n&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;(and, yes, this is quite the opposite o=\r\nf what I argued in my first post in this thread)&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;d=\r\niv&gt;/J=F8rn&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;\n\r\n--90e6ba61506e042a7d04d2d567cf--\r\n\n"}}
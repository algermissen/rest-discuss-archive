{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":87126421,"authorName":"Marc Portier","from":"Marc Portier &lt;mpo@...&gt;","profile":"portiermarc","replyTo":"SENDER","senderId":"q6XdaR1zoH-sV7hEmXuaEI_l31_iXltdbkYOUPjtz0EaL_WhVUa171NHY92zzw6L4wWIZDmJj_BQTz8Buy7E9TliLzBgYI794QU","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Re: Partial PUT debate","postDate":"1289604184","msgId":16883,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDRDRERDQzU4LjUwNTA4MDhAb3V0ZXJ0aG91Z2h0Lm9yZz4=","inReplyToHeader":"PGliaDkwNStjZmc3QGVHcm91cHMuY29tPg==","referencesHeader":"PGliaDkwNStjZmc3QGVHcm91cHMuY29tPg=="},"prevInTopic":16881,"nextInTopic":0,"prevInTime":16882,"nextInTime":16884,"topicId":16839,"numMessagesInTopic":40,"msgSnippet":"... Ok, I m with you: there s bound to be a line we both don t want to cross :) ... Receiving the same partial-put twice (or more) doesn t change the outcome,","rawEmail":"Return-Path: &lt;mpo@...&gt;\r\nX-Sender: mpo@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 28631 invoked from network); 12 Nov 2010 23:23:11 -0000\r\nX-Received: from unknown (98.137.34.44)\n  by m3.grp.sp2.yahoo.com with QMQP; 12 Nov 2010 23:23:11 -0000\r\nX-Received: from unknown (HELO mail-wy0-f180.google.com) (74.125.82.180)\n  by mta1.grp.sp2.yahoo.com with SMTP; 12 Nov 2010 23:23:10 -0000\r\nX-Received: by wye20 with SMTP id 20so95671wye.25\n        for &lt;rest-discuss@yahoogroups.com&gt;; Fri, 12 Nov 2010 15:23:10 -0800 (PST)\r\nX-Received: by 10.216.187.82 with SMTP id x60mr5295616wem.9.1289604188877;\n        Fri, 12 Nov 2010 15:23:08 -0800 (PST)\r\nReturn-Path: &lt;mpo@...&gt;\r\nX-Received: from [192.168.124.199] (195-144-080-125.dyn.adsl.xs4all.be [195.144.80.125])\n        by mx.google.com with ESMTPS id f31sm2462827wej.15.2010.11.12.15.23.06\n        (version=TLSv1/SSLv3 cipher=RC4-MD5);\n        Fri, 12 Nov 2010 15:23:07 -0800 (PST)\r\nMessage-ID: &lt;4CDDCC58.5050808@...&gt;\r\nDate: Sat, 13 Nov 2010 00:23:04 +0100\r\nOrganization: Outerthought\r\nUser-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.2.12) Gecko/20101027 Lightning/1.0b2 Thunderbird/3.1.6\r\nMIME-Version: 1.0\r\nTo: wahbedahbe &lt;andrew.wahbe@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nReferences: &lt;ibh905+cfg7@...&gt;\r\nIn-Reply-To: &lt;ibh905+cfg7@...&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Marc Portier &lt;mpo@...&gt;\r\nSubject: Re: [rest-discuss] Re: Partial PUT debate\r\nX-Yahoo-Group-Post: member; u=87126421; y=bPN-Yp2-DwI7l0NKO0KZcIE5OQ6Km4eAnxEX3u3PSMH2WtkCRSw\r\nX-Yahoo-Profile: portiermarc\r\n\r\n\n\nOn 11/11/2010 06:26 PM, wahbedahbe wrote:\n&gt;\n&gt; --- In rest-discuss@yahoogroups.com, Marc Portier&lt;mpo@...&gt;  wrote:\n&gt;&gt;\n&gt;&gt;\n&gt;&gt;\n&gt;&gt; On 11/10/2010 07:34 PM, Andrew Wahbe wrote:\n&gt;&gt;&gt;\n&gt;&gt;&gt; Ok, I understand your question a bit better now.\n&gt;&gt;&gt; To me a key issue is that you seem to be addressing a specific\n&gt;&gt;&gt; sub-resource (the part of the resource updated by the PUT) but this\n&gt;&gt;&gt; addressing is not done in the URI. I&#39;d have to assume you are using a\n&gt;&gt;&gt; portion of the body (implicitly or explicitly) to address the piece of\n&gt;&gt;&gt; the resource that gets updated.\n&gt;&gt;\n&gt;&gt; I would think not a portion of the body but the entire body: the\n&gt;&gt; contract that this server takes in supporting partial update is that it\n&gt;&gt; offers the client the opportunity to only transfer that portion of the\n&gt;&gt; resource-state it wants to change (or very pragmatically only the\n&gt;&gt; portion it cares about)\n&gt;&gt;\n&gt;&gt; - or even &quot;knows&quot; about in case of security filtering\n&gt;&gt;\n&gt;&gt; - or is &#39;capable&#39; of updating in case it choose to use some\n&gt;&gt; format/media-type that is not capable to transfer all subtleties of the\n&gt;&gt; resource&#39;s members\n&gt;&gt;\n&gt;&gt; So really: I don&#39;t see a hidden &#39;address&#39;, only the agreement that the\n&gt;&gt; representation in the body can be &#39;sparse&#39;  (after all: the message-body\n&gt;&gt; for any method just holds a representation, never the resource itself :) )\n&gt;&gt;\n&gt;\n&gt; Ok but earlier in the thread I made a distinction between the server filling in the rest of the details using the previous resource state and doing so without. Mark Baker also extended things a bit saying:\n&gt; &quot; The important part from a REST perspective is that the meaning of the PUT message is independent of the state of the resource.&quot;\n&gt;\n&gt; I *think* the examples you give fall into the stuff that&#39;s &quot;ok&quot; based on this. In which case we&#39;re in agreement on the above.\n&gt;\n&gt; The sticky part is the &quot;but please *don&#39;t change* the other part(s)&quot; that is implicit in the Partial PUTs I think Mike is referring to. I think that leads you into trouble as I&#39;ve described elsewhere in the thread.\n&gt;\n&gt;&gt;&gt; If you take the example to its extreme you could just execute all PUT\n&gt;&gt;&gt; operations on the &quot;/&quot; resource and identify the sub-path in the body.\n&gt;&gt;&gt;\n&gt;&gt;\n&gt;&gt; very extreme, and nobody is suggesting that, right?\n&gt;\n&gt; Taking something to the extreme sometimes helps point out what is wrong especially when there is no well-defined line where &quot;extreme&quot; starts.\n&gt;\n\nOk, I&#39;m with you: there&#39;s bound to be a line we both don&#39;t want to cross :)\n\n&gt;&gt;\n&gt;&gt;&gt; I see a few negatives (in addition to Jan&#39;s points):\n&gt;&gt;&gt; - you are hurting visibility by moving addressing out of the URI\n&gt;&gt;\n&gt;&gt; don&#39;t agree: there is no sub-resource IMHO, just a sparse representation\n&gt;&gt; of the resource state\n&gt;&gt;\n&gt;&gt;&gt; - you can&#39;t use etags and conditional requests to control updates these\n&gt;&gt;&gt; specific portions you are updating, just to the &quot;parent&quot; resource\n&gt;&gt;\n&gt;&gt; on the contrary: in cases where this is important, the usage of etags\n&gt;&gt; and conditionals would allow to guarantee that the partial PUT is only\n&gt;&gt; applied if the resource wasn&#39;t changed yet.\n&gt;&gt;\n&gt;&gt; so in fact the conditional part in this case completes the sparse-ness\n&gt;&gt; of the passed sparse-representation\n&gt;\n&gt; I think you are implying that it is ok for PUT to be non-idempotent or partial only-if etags&  conditional requests. I disagree. The properties must hold without them.\n\nReceiving the same partial-put twice (or more) doesn&#39;t change the \noutcome, so I&#39;ld say that is idempotent to me.\n\nNote the partial put I envision is not about &#39;incrementing&#39; or \n&#39;operating&#39; on state, it really is about setting state, only not \nexplicitly all aspects of it.\n\nMy main argument really is that it&#39;s not as much a partial put as it is \na normal put holding only a partial representation, and that the server \nis ok with that.  (and depending on the case the app will enforce \nconditionals to guarantee some consistency)\n\nIt more is about &quot;wise bandwidth consumption&quot; then anything else really.\n\nI do understand the effects of concurrent independent writes in this \nstory.  But when an app &quot;doesn&#39;t care&quot; about conditional guarantees then \nI assume such attitude extends itself into being large about your \ninterpretation of idempotent, no?\n\n(thinking about update-counters, and time-stamps and the like again, but \nit&#39;s really only in a given appliction context one can really decide)\n\n\n&gt; I touched on the advantages of this earlier here:\n&gt; http://tech.groups.yahoo.com/group/rest-discuss/message/16857\n&gt;\n\nYep, read that, and I&#39;m on the same track I think. We&#39;re talking about \nthe same use case and app needs for sure, and we seem to agree that in \nfinding a balance towards &#39;working properly&#39; an app might find itself \nneeding partial updates in a way we described them.\n\nI think I read you acknowledge that the contraints/guarantees/contract \nneeded by such application to work properly (and fast enough) might lend \nitself towards using partial-update messages (with or without \nconditional guarding)\n\nOn the remaining topic: should those messages use the PUT or POST \nmethod?  I honestly don&#39;t think that choice is going to make the apps \nbehavioural properties any different. And I have the feeling that \nuser-agents and intermediaries should handle things in a similar way too.\n\n From there I suggested the actual choice should be influenced by a \ndevelopers-feeling of &#39;least surprise&#39;, and tried to show my slight \npreference next to some observation of inevitable surprise in cases like \nthese.\n\nAnyway: what precisely we find surprising or not is only to be discussed \nin the scope of a hands-on application, IMHO.\n\n&gt;&gt;\n&gt;&gt;&gt; - while things seem fine from the perspective of repeating a single\n&gt;&gt;&gt; operation multiple times, you don&#39;t have the same properties for\n&gt;&gt;&gt; non-conditional interleaved PUTs from multiple writers. Here, the state\n&gt;&gt;\n&gt;&gt; as mentioned above: etags and conditionals can make it do what you want\n&gt;&gt; here I think, in the end you get some semantics about the parts not in\n&gt;&gt; the put-representation saying: &quot;IF you&#39;re still in the same state I just\n&gt;&gt; GOT, then I&#39;m sure that changing only the fields I&#39;m passing you will\n&gt;&gt; bring the resource in the expected state&quot;\n&gt;&gt;\n&gt;&gt; and for apps that don&#39;t need these checks the parts not mentioned in the\n&gt;&gt; put-body can be considered as &quot;don&#39;t care&quot;\n&gt;&gt;\n&gt;&gt; (update-counters, update-timestamps would be typical examples here, but\n&gt;&gt; on the correct level of abstraction system-data, meta-data all just is\n&gt;&gt; data, no?)\n&gt;&gt;\n&gt;&gt; All in all: the server still has the right to interpret, partially\n&gt;&gt; ignore, additionally decorate whatever you&#39;ve PUT to update the\n&gt;&gt; &#39;resource state&#39; (it might even have an effect on resources not\n&gt;&gt; addressed in this put)\n&gt;\n&gt; Again, you are preventing the &quot;normal&quot; (non-conditional) PUT semantics of &quot;please update the state to this&quot;. Again, I&#39;m fine if the parts you don&#39;t specify are &quot;don&#39;t care&quot; parts -- the real problem I think arises is when you do care.\n&gt;\n\nI think we agree.\nIf the app cares, it should use conditionals. Sorry if I wasn&#39;t clear on \nthat.\n\n\n&gt;\n&gt;&gt;\n&gt;&gt;&gt; of the resource is not the state specified by the last successful PUT\n&gt;&gt;&gt; (as is usually the case). That is quite a significant difference in some\n&gt;&gt;&gt; apps I would think.\n&gt;&gt;&gt;\n&gt;&gt;\n&gt;&gt; I agree. However you correctly mention apps, not user-agents (or\n&gt;&gt; intermediaries): those should not make any assumptions on the result of\n&gt;&gt; GET just because they just completed a successful PUT, right?\n&gt;&gt;\n&gt;&gt; Looking at it from that angle I don&#39;t think the partial put violates the\n&gt;&gt; HTTP contracts, and also keeps playing nice with the REST principles.\n&gt;&gt;\n&gt; I gave an example of potential problems with intermediaries here:\n&gt; http://tech.groups.yahoo.com/group/rest-discuss/message/16880\n&gt;\n&gt; The key problem is that idempotent&  &quot;not depending on previous state&quot; imply that state is fully determined by last PUT/DELETE. (Here I&#39;m assuming that the &quot;don&#39;t care&quot; bits &quot;don&#39;t matter&quot; in the same way they don&#39;t for &quot;safe&quot; GETs -- i.e. the statement &quot;The important distinction here is that the user did not request the side-effects, so therefore cannot be held accountable for them.&quot; has a corollary of &quot;... the user did not specify how to change the portion of state set by the server based on prior state and therefore cannot be held accountable for it.&quot; Or something like that. This allows the intermediary I described in the linked message to work correctly.\n&gt;\n&gt; Again the key distinction is between the client &quot;not caring&quot; about unspecified portion vs. an implicit request to leave it unchanged.\n&gt;\n&gt; This discussion has raised the following question for me though: Can the use of an etag in a conditional request be considered as an implicit description (by reference) of the portion of resource state not explicitly described in the body? i.e. the message means set the state as it was in the version indicated by the etag but also apply the changes described in the body? If so then perhaps we fall into alignment... a little concerned on the use of an etag for this though as it isn&#39;t necessarily clearly understood by all parties (not fully self-descriptive but maybe &quot;self-descriptive enough&quot;?). As the request fails if the current state doesn&#39;t match the one referred to by the etag it gets a bit fuzzy for sure... I&#39;m also not too fond of a request that is valid only-if done conditionally...\n&gt;\n\nYep.\nAnd I have the same feeling about your concern and unease.  But as \nmentioned before: I think we&#39;re talking about border-use cases here that \nforce us into some uncommon strategies.\n\nSo surprise and unease there will be, and the awkward thing about it \nseems to be that YMMV.\n\nregards,\n-marc=\n\n\n"}}
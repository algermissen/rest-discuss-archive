{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":221173245,"authorName":"wahbedahbe","from":"&quot;wahbedahbe&quot; &lt;andrew.wahbe@...&gt;","profile":"wahbedahbe","replyTo":"SENDER","senderId":"LFjjg3VWY6ZGaxhiVt32kVNcBV_q4JBu85zhTAbR6Awbdqupo7CyX_j4uNudasjER1CKrx6lWOo4n2ETvMVPz4l-U8A2rvvSWpiLTg","spamInfo":{"isSpam":false,"reason":"6"},"subject":"Re: HATEOAS & REST APIs - back to basics","postDate":"1238125554","msgId":12328,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGdxaGk1aStvYW5nQGVHcm91cHMuY29tPg==","inReplyToHeader":"PDU1YzYwZTM3MDkwMzI2MDkwOHE3NzlhMTI0NHEzMjM4YWZkZDRjMzJkZDUwQG1haWwuZ21haWwuY29tPg=="},"prevInTopic":12327,"nextInTopic":12329,"prevInTime":12327,"nextInTime":12329,"topicId":12327,"numMessagesInTopic":9,"msgSnippet":"Solomon, I noticed the following comment in the first article: Website architectures are the only examples of architectures that I ve seen that fully implement","rawEmail":"Return-Path: &lt;andrew.wahbe@...&gt;\r\nX-Sender: andrew.wahbe@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 36959 invoked from network); 27 Mar 2009 03:45:56 -0000\r\nX-Received: from unknown (69.147.108.202)\n  by m1.grp.re1.yahoo.com with QMQP; 27 Mar 2009 03:45:56 -0000\r\nX-Received: from unknown (HELO n14d.bullet.sp1.yahoo.com) (69.147.64.237)\n  by mta3.grp.re1.yahoo.com with SMTP; 27 Mar 2009 03:45:55 -0000\r\nX-Received: from [69.147.65.174] by n14.bullet.sp1.yahoo.com with NNFMP; 27 Mar 2009 03:45:54 -0000\r\nX-Received: from [98.137.34.32] by t12.bullet.mail.sp1.yahoo.com with NNFMP; 27 Mar 2009 03:45:54 -0000\r\nDate: Fri, 27 Mar 2009 03:45:54 -0000\r\nTo: rest-discuss@yahoogroups.com\r\nMessage-ID: &lt;gqhi5i+oang@...&gt;\r\nIn-Reply-To: &lt;55c60e370903260908q779a1244q3238afdd4c32dd50@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: multipart/alternative; boundary=&quot;2-4595376473-0406479525=:8&quot;\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-Yahoo-Newman-Property: groups-compose\r\nX-eGroups-Msg-Info: 1:6:0:0:0\r\nFrom: &quot;wahbedahbe&quot; &lt;andrew.wahbe@...&gt;\r\nSubject: Re: HATEOAS & REST APIs - back to basics\r\nX-Yahoo-Group-Post: member; u=221173245; y=Ugv44fhd602a3V1_0qIBCTPz_eMAgqW7o1-uLN1nKbykZOPWXg\r\nX-Yahoo-Profile: wahbedahbe\r\n\r\n\r\n--2-4595376473-0406479525=:8\r\nContent-Type: text/plain; charset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nSolomon,\nI noticed the following comment in the first article:\n\nWebsite arc=\r\nhitectures are the only examples of architectures that I&#39;ve\nseen that fully=\r\n implement REST characteristics.\n\nI strongly suggest looking at CCXML &lt;http=\r\n://www.w3.org/TR/ccxml/&gt;   for\na good example of a markup language designed=\r\n for machine to machine\nRESTful interactions. CCXML is meant to control tel=\r\nephony resources to\nimplement call control applications. If you&#39;re not a te=\r\nlephony person,\nthe general state machine model is being distilled into and=\r\n improved in\nSCXML &lt;http://www.w3.org/TR/scxml/&gt; .\n\nThe key take away from =\r\nthese languages though is to model your client as\na set of APIs accessible =\r\nvia the markup language. You GET an initial\ndocument that drives the client=\r\n via those APIs. Part of the API allows\nthe client to make HTTP requests to=\r\n change resources and/or transition\nto new documents.\n\nIn this model, you h=\r\nave a client that consists of a markup interpreter\ndriving an underlying &quot;p=\r\nlatform&quot;. The platform has no dependencies on\nthe markup language, let alon=\r\ne any specific entities in those documents.\ni.e. you never ever have client=\r\n platform code that walks the document\nlooking for key pieces of data (whic=\r\nh is where most folks end up). Your\nmarkup just &quot;runs&quot; in the interpreter a=\r\nnd invokes the platform. The\nplatform can generate events up into the inter=\r\npreter which are typically\nsurfaced as events in the markup.\n\nThe result of=\r\n this model is that the client is completely decoupled from\nthe server whic=\r\nh, after all, is a key benefit of REST. Essentially, what\nI&#39;m describing ab=\r\nove is a general client design that is consistent with\nthe HATEOAS constrai=\r\nnt. There may be other designs that do this, but\nthis one has worked well f=\r\nor me. You can think of an HTML web browser\nworking this way. The platform =\r\nis the renderer, chrome etc. User input\ngenerates DOM events in the markup.=\r\n And so on.\n\nHope this helps.\n\nAndrew Wahbe\n\n\n--- In rest-discuss@yahoogrou=\r\nps.com, Solomon Duskis &lt;sduskis@...&gt; wrote:\n&gt;\n&gt; Hi guys,\n&gt;\n&gt; I put together=\r\n a series of blog entries with an idea on how to\nconstruct a\n&gt; HATEOAS REST=\r\n API.  The core of the idea is that the current REST APIs\nhave\n&gt; some AJAXy=\r\n (2006 - 2009) types of optimizations, but don&#39;t take\nadvantage of\n&gt; HTML&#39;s=\r\n more basic capabilities (~1995 - now) that are applicable to\nHATEOAS.\n&gt;\n&gt; =\r\nUsing that basic idea, I tried to figure out how to take advantage of\nHTML\n=\r\n&gt; and Browser idioms in a REST API setting.\n&gt;\n&gt; The road to Real REST APIs:=\r\n\n&gt; http://www.jroller.com/Solomon/entry/the_road_to_real_rest\n&gt; Proposal: R=\r\nEST/HATEOAS Java client:\n&gt; http://www.jroller.com/Solomon/entry/proposal_re=\r\nst_hateaos_java_client\n&gt; REST - HATEOAS Client communication:\n&gt; http://www.=\r\njroller.com/Solomon/entry/rest_hateoas_client_communication\n&gt;\n&gt; I&#39;m hoping =\r\nto get feedback from this illustrious crowd on the\nfollowing:\n&gt;\n&gt; 1) does t=\r\nhe idea fully implement REST, including HATEOAS\n&gt; 2) is this idea implement=\r\nable\n&gt; 3) future direction for the idea\n&gt;\n&gt; Any feedback (even &quot;it sucks, h=\r\nere&#39;s why...&quot;) would be appreciated. \nNote\n&gt; that it is a blog, and not a p=\r\nolished article... I don&#39;t mean to\nprovide\n&gt; flaim-bait, but it still happe=\r\nns :)\n&gt;\n&gt; -Solomon\n&gt;\n\n\r\n--2-4595376473-0406479525=:8\r\nContent-Type: text/html; charset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nSolomon,&lt;br&gt;I noticed the following comment in the first article:&lt;br&gt;&lt;br&gt;&lt;s=\r\ntrong&gt;Website architectures are the only examples of architectures that I&#39;v=\r\ne seen that fully implement REST characteristics&lt;/strong&gt;.&lt;br&gt;&lt;br&gt;I strongl=\r\ny suggest looking at &lt;a href=3D&quot;http://www.w3.org/TR/ccxml/&quot;&gt;CCXML&lt;/a&gt;&nbsp=\r\n; for a good example of a markup language designed for machine to machine R=\r\nESTful interactions. CCXML is meant to control telephony resources to imple=\r\nment call control applications. If you&#39;re not a telephony person, the gener=\r\nal state machine model is being distilled into and improved in &lt;a href=3D&quot;h=\r\nttp://www.w3.org/TR/scxml/&quot;&gt;SCXML&lt;/a&gt;.&lt;br&gt;&lt;br&gt;The key take away from these =\r\nlanguages though is to model your client as a set of APIs accessible via th=\r\ne markup language. You GET an initial document that drives the client via t=\r\nhose APIs. Part of the API allows the client to make HTTP requests to chang=\r\ne resources and/or transition to new documents.&lt;br&gt;&lt;br&gt;In this model, you h=\r\nave a client that consists of a markup interpreter driving an underlying &quot;p=\r\nlatform&quot;. The platform has no dependencies on the markup language, let alon=\r\ne any specific entities in those documents. i.e. you never ever have client=\r\n platform code that walks the document looking for key pieces of data (whic=\r\nh is where most folks end up). Your markup just &quot;runs&quot; in the interpreter a=\r\nnd invokes the platform. The platform can generate events up into the inter=\r\npreter which are typically surfaced as events in the markup. &lt;br&gt;&lt;br&gt;The re=\r\nsult of this model is that the client is completely decoupled from the serv=\r\ner which, after all, is a key benefit of REST. Essentially, what I&#39;m descri=\r\nbing above is a general client design that is consistent with the HATEOAS c=\r\nonstraint. There may be other designs that do this, but this one has worked=\r\n well for me. You can think of an HTML web browser working this way. The pl=\r\natform is the renderer, chrome etc. User input generates DOM events in the =\r\nmarkup. And so on.&lt;br&gt;&lt;br&gt;Hope this helps.&lt;br&gt;&lt;br&gt;Andrew Wahbe&lt;br&gt;&lt;br&gt;&lt;br&gt;-=\r\n-- In rest-discuss@yahoogroups.com, Solomon Duskis &lt;sduskis@...&gt; wrot=\r\ne:&lt;br&gt;&gt;&lt;br&gt;&gt; Hi guys,&lt;br&gt;&gt; &lt;br&gt;&gt; I put together a series of blo=\r\ng entries with an idea on how to construct a&lt;br&gt;&gt; HATEOAS REST API.  The=\r\n core of the idea is that the current REST APIs have&lt;br&gt;&gt; some AJAXy (20=\r\n06 - 2009) types of optimizations, but don&#39;t take advantage of&lt;br&gt;&gt; HTML=\r\n&#39;s more basic capabilities (~1995 - now) that are applicable to HATEOAS.&lt;br=\r\n&gt;&gt; &lt;br&gt;&gt; Using that basic idea, I tried to figure out how to take adv=\r\nantage of HTML&lt;br&gt;&gt; and Browser idioms in a REST API setting.&lt;br&gt;&gt; &lt;b=\r\nr&gt;&gt; The road to Real REST APIs:&lt;br&gt;&gt; http://www.jroller.com/Solomon/e=\r\nntry/the_road_to_real_rest&lt;br&gt;&gt; Proposal: REST/HATEOAS Java client:&lt;br&gt;&=\r\ngt; http://www.jroller.com/Solomon/entry/proposal_rest_hateaos_java_client&lt;=\r\nbr&gt;&gt; REST - HATEOAS Client communication:&lt;br&gt;&gt; http://www.jroller.com=\r\n/Solomon/entry/rest_hateoas_client_communication&lt;br&gt;&gt; &lt;br&gt;&gt; I&#39;m hopin=\r\ng to get feedback from this illustrious crowd on the following:&lt;br&gt;&gt; &lt;br=\r\n&gt;&gt; 1) does the idea fully implement REST, including HATEOAS&lt;br&gt;&gt; 2) i=\r\ns this idea implementable&lt;br&gt;&gt; 3) future direction for the idea&lt;br&gt;&gt; =\r\n&lt;br&gt;&gt; Any feedback (even &quot;it sucks, here&#39;s why...&quot;) would be appreciated=\r\n.  Note&lt;br&gt;&gt; that it is a blog, and not a polished article... I don&#39;t me=\r\nan to provide&lt;br&gt;&gt; flaim-bait, but it still happens :)&lt;br&gt;&gt; &lt;br&gt;&gt; =\r\n-Solomon&lt;br&gt;&gt;&lt;br&gt;\n\n\r\n--2-4595376473-0406479525=:8--\r\n\n"}}
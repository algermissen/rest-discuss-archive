{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":23186829,"authorName":"Paul Prescod","from":"Paul Prescod &lt;paul@...&gt;","replyTo":"SENDER","senderId":"gXnTFCiHrJjRzvrunn4v1n7cj0T9P7G6xDpXpOla3hv0fUc93BwQ-rwsknhxFZoBo5Civc2adfnnfyCH__h48rJaYk4Kxw","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Autogenerating REST code: which format?","postDate":"1019775142","msgId":1088,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDNDQzg4OEE2LkU4QTNGMjE0QHByZXNjb2QubmV0Pg==","referencesHeader":"PEUxNzBwUFYtMDAwMmVNLTAwQHV0ZS5tZW1zLWV4Y2hhbmdlLm9yZz4="},"prevInTopic":1087,"nextInTopic":1089,"prevInTime":1087,"nextInTime":1089,"topicId":1086,"numMessagesInTopic":13,"msgSnippet":"... I m somewhat surprised to hear you say that, because in my experience, code generators are for people using lesser languages. ;) Python programmers can","rawEmail":"Return-Path: &lt;paul@...&gt;\r\nX-Sender: paul@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_0_3_1); 25 Apr 2002 22:51:10 -0000\r\nReceived: (qmail 45785 invoked from network); 25 Apr 2002 22:51:10 -0000\r\nReceived: from unknown (66.218.66.218)\n  by m4.grp.scd.yahoo.com with QMQP; 25 Apr 2002 22:51:10 -0000\r\nReceived: from unknown (HELO smtp1.ActiveState.com) (209.17.183.249)\n  by mta3.grp.scd.yahoo.com with SMTP; 25 Apr 2002 22:51:10 -0000\r\nReceived: from smtp3.ActiveState.com (smtp3.ActiveState.com [192.168.3.19])\n\tby smtp1.ActiveState.com (8.11.6/8.11.6) with ESMTP id g3PMp5225736;\n\tThu, 25 Apr 2002 15:51:05 -0700\r\nReceived: from prescod.net (ssh1.ActiveState.com [192.168.3.32])\n\tby smtp3.ActiveState.com (8.11.6/8.11.6) with ESMTP id g3PMp4e06533;\n\tThu, 25 Apr 2002 15:51:04 -0700\r\nMessage-ID: &lt;3CC888A6.E8A3F214@...&gt;\r\nDate: Thu, 25 Apr 2002 15:52:22 -0700\r\nX-Mailer: Mozilla 4.76 [en] (Windows NT 5.0; U)\r\nX-Accept-Language: en\r\nMIME-Version: 1.0\r\nTo: akuchlin@...\r\nCc: rest-discuss@yahoogroups.com\r\nSubject: Re: [rest-discuss] Autogenerating REST code: which format?\r\nReferences: &lt;E170pPV-0002eM-00@...-exchange.org&gt;\r\nContent-Type: text/plain; charset=us-ascii\r\nContent-Transfer-Encoding: 7bit\r\nX-Filtered-By: PerlMx makes it fast and easy.  See http://www.ActiveState.com/Products/PerlMx/Header\r\nFrom: Paul Prescod &lt;paul@...&gt;\r\nX-Yahoo-Group-Post: member; u=23186829\r\n\r\nAndrew Kuchling wrote:\n&gt; \n&gt; A while ago I wrote up a set of ideas for RESTifying a service.  I\n&gt; began implementing those ideas, but abandoned them as the code began\n&gt; to get more and more repetitive.  Writing a REST application seems\n&gt; naturally suited to a code generator.\n\nI&#39;m somewhat surprised to hear you say that, because in my experience,\ncode generators are for people using lesser languages. ;) Python\nprogrammers can typically do at runtime what code generators do at\ncompile time -- and with more flexibility and ease of use.\n\nSo I would say that you are in a good position to start with your code\nand factor away the irrelevancies using Python constructs until you have\nessentially factored the code into a declarative portion and an\nexecutable portion. If the declarative portion corresponds exactly to\nWRDL then I&#39;m on the right track with it.\n\n&gt; However, what description format should this code generator take?\n&gt; Paul uses a WSDL example in his latest xml.com article, but observes\n&gt; that WSDL doesn&#39;t support links.  I also noticed that the WSDL note\n&gt; only mentions HTTP GET/POST, and for a code generator you&#39;d want to\n&gt; say what other HTTP operations (DEL, PUT, &c) are supported on a\n&gt; resource.  Also, the authors of the note are all from large companies\n&gt; that have embraced SOAP, making me pessimistic about the likelihood of\n&gt; improving the WSDL HTTP binding.\n\nWSDL is not a W3C project so you are not subject to the whims of W3C\npolitics which may make you feel better or not. They have accepted my\nrequirement that WSDL should support links as an official requirement\n(so far) but in my thinking about this issue, it is not trivial so they\nmay be tempted to do it in a half-assed way when they actually sit down\nto implement.\n\nWSDL is kind of a complicated language with many different layers of\nabstraction. This will make code generation a pain in the ass. The AXIS\nSOAP toolkit&#39;s &quot;wsdl2Java&quot; is almost 9000 lines of non-comment Java\ncode. Plus, I don&#39;t know how far you will get with WSDL given its\ncurrent state of link-support. It&#39;s not that I&#39;m biased in favor of my\nown language: I would love to have an &quot;industry standard&quot; language that\nalready supported REST. If you can make WSDL work for you then more\npower to you, maybe I can learn something.\n\n&gt; The other option is Paul&#39;s WRDL, but its current state of completion\n&gt; isn&#39;t clear, though the TODO list does seem to be mostly second-order\n&gt; things.\n\nTrue. In my mind the primary weakness with WRDL is that it isn&#39;t\nintegrated into any kind of data binding framework. To clarify: WSDL\nmore or less depends upon XML Schema. That means that if you figure out\na way to map XML Schema into your language (as many languages have done\n-- at least for simple stuff) then you can generate wrapper classes that\nknow how to serialize and deserialize themselves &quot;for free&quot;.\n\nIf C#/Java programmers have to go back to working with a DOM then they\nwill not be happy with WRDL. On the other hand, I am loathe to make WRDL\nexplicitly depend on XML Schema when that is such a hard language to\nimplement and use. I also don&#39;t want to choose RELAX when XML Schema is\nwhere the rest of the industry is going. In theory I could say: &quot;use\nwhatever schema language you want&quot; but then a WRDL implementation that\nuses RELAX will not be entirely interoperable with one that uses XML\nSchema. Still, that&#39;s probably the way I will go and let the market\ndecide. A third option is to ignore the schema and make a simple data\nbinding language -- maybe compile the different schema languages to\nthat.\n\nAlso, as an implementation issue, WRDL should naturally &quot;extend&quot; the\ndata binding process by making elements and attributes of type anyURI\nstrongly typed. That could be difficult in many data binding frameworks.\n:(\n\nIf you are happy working with a DOM instead of data-bound,\nbi-directional &quot;objects&quot; then I think WRDL is a good place to start.\n\n Paul Prescod\n\n"}}
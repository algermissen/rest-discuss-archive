{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"ED6WOXXeA6o8gQbDgrxLKR7X7taaVrPEbVsrmcBOcAfORrmhKBtiwlXJ_9eq2g4EBwuu3EFcnau3VKk98cw3TK_wPFHcr0Okh7RS_82DCw","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] An approach to deleting multiple resources use one  DELETE","postDate":"1239062645","msgId":12394,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMDkwNDA2MTgwNDA1LjY0MjE2MWRhLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","inReplyToHeader":"PFAtSVJDLUVYQkUwMW96Z1lMb3cwMDAwNjliYkBFWC5VQ09QLkVEVT4=","referencesHeader":"PGU3OGJkYmMwMDkwMjI0MDczOHY0ODRkNmU5NGg0NDQ5ZWIwYjY3YTI4ZDJlQG1haWwuZ21haWwuY29tPgk8MjAwOTAzMjAwNTI4MTYuMWUzNGIyYTYuZXJpY0BiaXNvbnN5c3RlbXMubmV0Pgk8UC1JUkMtRVhCRTAxajUzWGFERjAwMDAxNGU2QEVYLlVDT1AuRURVPgk8MjAwOTAzMjExMzEyMTIuMTM4Nzk1NzIuZXJpY0BiaXNvbnN5c3RlbXMubmV0Pgk8UC1JUkMtRVhCRTAxVHQ3UXM2aDAwMDAxOThjQEVYLlVDT1AuRURVPgk8MjAwOTAzMjEyMjM0NDEuMjE5ODc3NmQuZXJpY0BiaXNvbnN5c3RlbXMubmV0Pgk8NDlDNjg1NEUuNTA5MDUwNEBhY20ub3JnPgk8MjAwOTAzMjkxODU2NTMuNzk4NTcwMmMuZXJpY0BiaXNvbnN5c3RlbXMubmV0Pgk8MzBhYzUxOWQwOTAzMjkyMTUxdTQ0ZmVkNTY4cTUyNDUzNDQ3MDk3OTkyMDdAbWFpbC5nbWFpbC5jb20+CTwyMDA5MDMzMTAwMjY1MC5mNTM5NDc1Yy5lcmljQGJpc29uc3lzdGVtcy5uZXQ+CTwzMGFjNTE5ZDA5MDMzMTEwMjZvNGU4NmIyODZ4MjUyMDQzYjk0ZDg2OWQxM0BtYWlsLmdtYWlsLmNvbT4JPDIwMDkwNDAzMDkzMTEyLjMxYmFkOTI1LmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPDQ5RDZCQjQxLjcwNDA1MDlAYWNtLm9yZz4JPDIwMDkwNDA0MDgxMTIwLjkzZDZmN2IxLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPFAtSVJDLUVYQkUwMVhLQ256TncwMDAwNjc2NUBFWC5VQ09QLkVEVT4JPDIwMDkwNDA2MTIxNjI2Ljg3NGY0YjQzLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPFAtSVJDLUVYQkUwMXZQRWtHaEEwMDAwNjdlOUBFWC5VQ09QLkVEVT4JPDIwMDkwNDA2MTUyOTMyLjk0ODY5NTY1LmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPFAtSVJDLUVYQkUwMW96Z1lMb3cwMDAwNjliYkBFWC5VQ09QLkVEVT4="},"prevInTopic":12393,"nextInTopic":12395,"prevInTime":12393,"nextInTime":12395,"topicId":12154,"numMessagesInTopic":112,"msgSnippet":"... Howzat?  My application has URIs and uses HTTP methods, like any Web app, but I m applying a set of constraints to achieve desirable behaviors.  By","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 40638 invoked from network); 7 Apr 2009 00:03:55 -0000\r\nX-Received: from unknown (98.137.34.45)\n  by m5.grp.sp2.yahoo.com with QMQP; 7 Apr 2009 00:03:55 -0000\r\nX-Received: from unknown (HELO mxout-08.mxes.net) (216.86.168.183)\n  by mta2.grp.sp2.yahoo.com with SMTP; 7 Apr 2009 00:03:54 -0000\r\nX-Received: from BigBison (unknown [65.117.211.162])\n\t(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))\n\t(No client certificate requested)\n\tby smtp.mxes.net (Postfix) with ESMTPSA id 3939AD0BA0;\n\tMon,  6 Apr 2009 20:03:52 -0400 (EDT)\r\nDate: Mon, 6 Apr 2009 18:04:05 -0600\r\nTo: Erik Hetzner &lt;erik.hetzner@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nMessage-Id: &lt;20090406180405.642161da.eric@...&gt;\r\nIn-Reply-To: &lt;P-IRC-EXBE01ozgYLow000069bb@...&gt;\r\nReferences: &lt;e78bdbc00902240738v484d6e94h4449eb0b67a28d2e@...&gt;\n\t&lt;20090320052816.1e34b2a6.eric@...&gt;\n\t&lt;P-IRC-EXBE01j53XaDF000014e6@...&gt;\n\t&lt;20090321131212.13879572.eric@...&gt;\n\t&lt;P-IRC-EXBE01Tt7Qs6h0000198c@...&gt;\n\t&lt;20090321223441.2198776d.eric@...&gt;\n\t&lt;49C6854E.5090504@...&gt;\n\t&lt;20090329185653.7985702c.eric@...&gt;\n\t&lt;30ac519d0903292151u44fed568q5245344709799207@...&gt;\n\t&lt;20090331002650.f539475c.eric@...&gt;\n\t&lt;30ac519d0903311026o4e86b286x252043b94d869d13@...&gt;\n\t&lt;20090403093112.31bad925.eric@...&gt;\n\t&lt;49D6BB41.7040509@...&gt;\n\t&lt;20090404081120.93d6f7b1.eric@...&gt;\n\t&lt;P-IRC-EXBE01XKCnzNw00006765@...&gt;\n\t&lt;20090406121626.874f4b43.eric@...&gt;\n\t&lt;P-IRC-EXBE01vPEkGhA000067e9@...&gt;\n\t&lt;20090406152932.94869565.eric@...&gt;\n\t&lt;P-IRC-EXBE01ozgYLow000069bb@...&gt;\r\nOrganization: Bison Systems Corporation\r\nX-Mailer: Sylpheed 2.4.5 (GTK+ 2.10.14; i686-pc-mingw32)\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=UTF-8\r\nContent-Transfer-Encoding: 8bit\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nSubject: Re: [rest-discuss] An approach to deleting multiple resources use\n one  DELETE\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\nErik Hetzner wrote:\n\n&gt;\n&gt; &gt; &gt; ‘Uniformly defined for all resources’ means *all* resources on the\n&gt; &gt; &gt; web, e.g. anything addressable using a URI which is part of the\n&gt; &gt; &gt; web’s global hypertext infrastructure.\n&gt; &gt; \n&gt; &gt; I don&#39;t think so.  When designing an API, my concern is only those\n&gt; &gt; resources I control.  Since methods like PUT and DELETE have\n&gt; &gt; variable semantics, it&#39;s impossible for all resources on the Web to\n&gt; &gt; have uniformly-defined semantics.  REST may be seen as an\n&gt; &gt; architectural style consisting of constraints imposed upon the Web\n&gt; &gt; architectural style, i.e. HTTP is not REST.\n&gt; \n&gt; If you don’t think so, then you don’t think that your application is\n&gt; part of the web.\n&gt; \n\nHowzat?  My application has URIs and uses HTTP methods, like any Web\napp, but I&#39;m applying a set of constraints to achieve desirable\nbehaviors.  By constraining DELETE to the deletion of individual\nresources, and constraining PUT to replacement and not creation, I\nachieve (part of) a uniform interface, without violating RFC 2616 or\nsomehow taking my application off the Web.\n\nHTTP may or may not be used in a REST API.  Obviously, to be part of\nthe Web, the URIs must be public, and dereferenceable using HTTP.  But,\njust having a URI-based HTTP application is not the same as having a\nREST application, since HTTP makes no mention of the uniform interface.\n\n&gt;\n&gt; Of course when designing a web API you can constrain the semantics as\n&gt; you like (as long as it is *more* specific than HTTP). For the web as\n&gt; a whole, HTTP methods have the semantics described by HTTP - no more,\n&gt; no less.\n&gt; \n\nBy using PUT for both creation and replacement, I&#39;m not violating Web\narchitecture or RFC 2616, but I have failed to constrain my interface\nto be uniform.  The &quot;creation&quot; semantics of PUT are only RESTful, IMO,\nif the URI is created on the server and sent to the client as the\ntarget for a PUT request.  But, particularly if I&#39;ve implemented Atom\nProtocol, it&#39;s better to use POST for creation and let the assigned URI\nbe given to the client in response.  I&#39;ve never found constraining away\nthe creation semantics of PUT to be a big loss.\n\nBut, &quot;create&quot; and &quot;overwrite&quot; are clearly different semantics for the\nsame method, and while this is perfectly acceptable in uniform-\ninterface-agnostic HTTP, this is clearly verboten in REST.  So pick one\nor the other meaning and stick with it for all resources within your\napplication boundary, API, namespace, workspace, neck-of-the-woods or\nwhatever else you want to call it.\n\n&gt;\n&gt; &gt; &gt; There are no application boundaries in terms of method semantics.\n&gt; &gt; &gt; DELETE means the same thing everywhere. It can’t mean one thing\n&gt; &gt; &gt; for one URI which happens to be part of one application and\n&gt; &gt; &gt; another thing for another URI which happens to be part of another.\n&gt; &gt; &gt; The semantics must be general enough that it means the same thing\n&gt; &gt; &gt; for all URIs.\n&gt; &gt; \n&gt; &gt; Strongly disagree.  In HTTP, PUT may mean either create or\n&gt; &gt; replace.  In Atom Protocol, PUT is constrained to mean replace.  In\n&gt; &gt; Protocol XYZ, PUT is constrained to mean create.  Both protocols\n&gt; &gt; use HTTP, both protocols are RESTful, but PUT has different\n&gt; &gt; semantics within each application boundary.  PUT cannot possibly\n&gt; &gt; mean the same thing for all URIs, since PUT means two different\n&gt; &gt; things.\n&gt; \n&gt; So you are saying you do not believe in a uniform interface? We need\n&gt; to know which application a URI part of in order to build caches?\n&gt; \n\nHowzat?  My API&#39;s application of a constraint to PUT, to mean either\ncreate or overwrite but not both, has no effect on how intermediaries\nhandle PUT requests.  My application of a constraint to PUT helps\nimplement a uniform interface, a requirement of REST that isn&#39;t\nmentioned anywhere in HTTP, and has no bearing on the behavior of\nintermediaries -- merely leverages their behavior.\n\nHTTP never had a uniform interface as its goal, so we have more than\none meaning for methods like PUT and DELETE, choosing one and only one\nmeaning for each method and sticking with it for all resources in your\napp, is a key part of applying the uniform interface constraint to\nyour use of HTTP.\n\n&gt;\n&gt; &gt; We&#39;ll never get DELETE to mean the same thing everywhere, even\n&gt; &gt; within the HTTP protocol (see again the WebDAV definition of DELETE\n&gt; &gt; compared to the Atom Protocol definition of DELETE).  The best we\n&gt; &gt; can do is agree that it has a generic-interface meaning, and design\n&gt; &gt; our APIs accordingly, regardless of what the RFCs involved allow.\n&gt; &gt; \n&gt; &gt; The only method which fits your criteria, that it must unambiguously\n&gt; &gt; mean the same thing for all URIs everywhere, is GET.\n&gt; \n&gt; Why then does HTTP even try to define the meanings of methods?\n&gt; \n\nSeparation of concerns, visibility, all the reasons one uses REST\ninstead of POST-only WS-*/SOAP.  HTTP isn&#39;t an API, it&#39;s a protocol\nthat can be fashioned into any number of APIs, RESTful or not.  The\nprotocol gives pretty broad definitions, a RESTful API is built by\napplying certain constraints to any protocols in order to achieve a\nuniform interface.  Atom Protocol&#39;s constraints on HTTP comes closer to\ndefining a uniform interface than other HTTP-derived protocols, but\neven it makes no mention of a uniform interface.  Atom Protocol may be\nconstrained to build many different uniform-interface APIs, with all the\nconsiderable variation allowed for within the REST architectural style.\n\n&gt;\n&gt; DELETE means what it says in RFC 2616 (or whatever the HTTP wg comes\n&gt; up with next). That is all that it means - on the web. What it means\n&gt; in your application is up to you - as long as it extends the meaning\n&gt; of what is in RFC 2616.\n&gt; \n\nDELETE could also mean what it means in WebDAV, which is completely\ndifferent from what it means in RFC 2616, while both are HTTP.  As I\ndetailed in another message, DELETE has many different meanings, and\nfrom them we can deduce a &quot;generic&quot; meaning of deleting one and only\none resource.  Genericity, like visibility, varies within REST.  The\nconstraint is a uniform interface, not a generic interface.  Non-\ngeneric uses of DELETE are certainly allowed, provided they basically\nmean &quot;remove something&quot;.  Like DELETE in WebDAV can be interpreted in\nthe generic sense, or in the sense of batch deletion, while DELETE in\nFTP can only be interpreted in the generic sense.\n\nBut I prefer to use a different method instead of stretching a method\nbeyond its generic meaning, like MDELETE. This allows my consistent-\nacross-all-resources, constrained use of DELETE to match its generic\nmeaning.  Like using DELETE as a batch delete method, using MDELETE\nalso reduces visibility, but without the cost in interface genericity,\nor the non-uniformity of an interface which interprets DELETE in its\ngeneric sense for some resources, while being used as batch delete for\nother resources.\n\n&gt;\n&gt; But you cannot insist that people ‘choose’ one or the other *more*\n&gt; specific semantics of DELETE in their ‘application’ and stick to it.\n&gt; All that is needed to be part of the web - and to be RESTful! - is to\n&gt; stick to the semantics of DELETE as defined in RFC 2616.\n&gt; \n\nSo, you&#39;re saying WebDAV isn&#39;t part of the Web?  HTTP consists of more\nmethods, and in fact different definitions of methods, than just RFC\n2616. It&#39;s possible to build a WebDAV app that&#39;s RESTful, but doesn&#39;t\nuse DELETE as defined in RFC 2616, or use PUT or POST, but the protocol\nis still HTTP.  It&#39;s possible to repurpose a method from some other\nprotocol and make it part of your RESTful HTTP-based API -- if it&#39;s\nserendipitously re-used by enough others then it will eventually become\npart of the evolving HTTP standards family.  Or, just use some other\nprotocol for part of your API, like FTP.  REST is protocol-agnostic, and\nbeyond GET, method-agnostic.\n\nSo REST can&#39;t be simplified by just follwing RFC 2616.  HTTP makes no\nattempt to describe a uniform interface, and wasn&#39;t designed with the\nimplementation of a uniform interface in mind. REST describes a set of\nconstraints which may be applied to HTTP, or FTP, or other protocols\n(none of which say anything more about a uniform interface than HTTP\ndoes), singularly or in combination, to achieve any number of\nvariations on the notion of a uniform interfaces.\n\nThere is no reference implementation of REST, REST isn&#39;t a protocol, and\ntherefore doesn&#39;t define a uniform interface -- only the constraints\nwhich need to be applied to achieve one.  Saying that &quot;‘Uniformly\ndefined for all resources’ means *all* resources on the web&quot; implies\nthat REST is a protocol defining a single globally uniform interface,\ni.e. it&#39;s a building code rather than just a style of house.\n\nWhat&#39;s required for a uniform interface, is &quot;a consistent set of\nsemantics across all resources&quot; and that means choosing which of the\npossible meanings of DELETE is the best fit for your API, which meaning\nof PUT to constrain your API to, and whether or not some other method\nis more suitable to your usage of POST, even though POST is allowed\nmultiple meanings as a catch-all method.\n\n-Eric\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":263982739,"authorName":"Mike Herrick","from":"Mike Herrick &lt;mherrick66@...&gt;","profile":"mherrick66","replyTo":"SENDER","senderId":"64aQO4ckNxxFhGTxsXLMiP-OlqVRZkotcWcRWMr7VzvtBwdvRHdP_hByBXBbm_VRnRjNabfE4_kB_GPGIpqVd1jmltrS3YYS","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] REST & Internal Integration","postDate":"1146543044","msgId":6179,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDI0Rjc3Q0U2LTMzMDUtNDE2Mi1BODIzLTJCQzgwNDlGRjdCQkBtYWMuY29tPg==","inReplyToHeader":"PEJBWTEwMS1EQVYzRTU5QjcxOUIzRDg3REY1M0M0OUVEOEIwMEBwaHguZ2JsPg==","referencesHeader":"PEJBWTEwMS1EQVYzRTU5QjcxOUIzRDg3REY1M0M0OUVEOEIwMEBwaHguZ2JsPg=="},"prevInTopic":6175,"nextInTopic":6180,"prevInTime":6178,"nextInTime":6180,"topicId":5992,"numMessagesInTopic":12,"msgSnippet":"Hi Mike, Thanks for the response. I wrote you back a missive myself ;) I hope someone other then the two of us finds this conversation useful. I d love to see","rawEmail":"Return-Path: &lt;mherrick66@...&gt;\r\nX-Sender: mherrick66@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 54356 invoked from network); 2 May 2006 04:10:59 -0000\r\nReceived: from unknown (66.218.66.216)\n  by m33.grp.scd.yahoo.com with QMQP; 2 May 2006 04:10:59 -0000\r\nReceived: from unknown (HELO smtpout.mac.com) (17.250.248.177)\n  by mta1.grp.scd.yahoo.com with SMTP; 2 May 2006 04:10:59 -0000\r\nReceived: from mac.com (smtpin08-en2 [10.13.10.153])\n\tby smtpout.mac.com (Xserve/8.12.11/smtpout07/MantshX 4.0) with ESMTP id k424As3r004928;\n\tMon, 1 May 2006 21:10:54 -0700 (PDT)\r\nReceived: from [10.0.1.113] (c-71-193-198-186.hsd1.or.comcast.net [71.193.198.186])\n\t(authenticated bits=0)\n\tby mac.com (Xserve/smtpin08/MantshX 4.0) with ESMTP id k424Apv8017008;\n\tMon, 1 May 2006 21:10:51 -0700 (PDT)\r\nIn-Reply-To: &lt;BAY101-DAV3E59B719B3D87DF53C49ED8B00@...&gt;\r\nReferences: &lt;BAY101-DAV3E59B719B3D87DF53C49ED8B00@...&gt;\r\nMime-Version: 1.0 (Apple Message framework v746.3)\r\nContent-Type: text/plain; charset=US-ASCII; delsp=yes; format=flowed\r\nMessage-Id: &lt;24F77CE6-3305-4162-A823-2BC8049FF7BB@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nContent-Transfer-Encoding: 7bit\r\nDate: Mon, 1 May 2006 21:10:44 -0700\r\nTo: Mike Dierken &lt;mdierken@...&gt;\r\nX-Mailer: Apple Mail (2.746.3)\r\nX-eGroups-Msg-Info: 1:12:0:0\r\nFrom: Mike Herrick &lt;mherrick66@...&gt;\r\nSubject: Re: [rest-discuss] REST & Internal Integration\r\nX-Yahoo-Group-Post: member; u=263982739; y=0L_cW3MYPrW3w1zgZoidkQ_LHKoCribxqaH5MYf7D-yKBcA_gA\r\nX-Yahoo-Profile: mherrick66\r\n\r\nHi Mike,\n\nThanks for the response. I wrote you back a missive myself ;) I hope  \nsomeone other then the two of us finds this conversation useful. I&#39;d  \nlove to see a line drawn in the sand on whether what we are talking  \nabout is achievable / appropriate for REST or not. The WS-* world is  \ngoing after stuff like this. Maybe RESTafarians will say it isn&#39;t  \nappropriate, maybe it is and some impls will happen.\n\nYou hit it on the head on why REST appeals to me when you said, &quot;...  \npayload formats independent of message framing&quot;. I look at SOAP and  \nespecially some of the more recent WS-* specs and see all that cruft  \nright in the payload - just is awful IMHO. At first glance, the fact  \nthat SOAP does this seems largely immaterial ... but once you dig  \ndeeper you see what a negative impact it has.\n\nI was also thinking a few weeks ago when I read up some more on REST  \non the similarity that JMS does share with SOAP - that there are no  \napplication semantics as you called it. In JMS/messaging, its just a  \nmessage. The verb is somewhere in the Destination name or somewhere  \nin the XML (we hope). This is tolerable IMHO in JMS because it is a  \ndefined integration platform where SOAP is going over HTTP, which, is  \nused for web sites and integration. I read something on SOAP vs. REST  \nsecurity & a movement a while back on forcing SOAP/HTTP to go over  \nanother port then 80 ... my point is at least JMS has this going for  \nit. I don&#39;t know either way if I think its appropriate for JMS to  \nhave verbs (i.e., GET, PUT, POST, DELETE, etc.). But you are  \ndefinitely correct that the fact that JMS does not have application  \nsemantics results in coordination etc. I&#39;m very careful about this in  \nmy designs, but lots of people aren&#39;t.\n\nSounds pretty interesting on the config - I&#39;m cool with all config  \nmechanisms that aren&#39;t JNDI (sorry I spent too many years in J2EE).  \nWhat you describe is actually how our JMS provider works. It needs  \nthe config at broker start time, but caches the last good copy in  \ncase the management broker gets horked.\n\nOn &quot;stupid&quot; services ... they are only &quot;stupid&quot; because they  \nimplement an interface that deals with all the JMS stuff. So the  \nimpls. really are trivial. But you are right that at the end of the  \nday, developers do know a lot about JMS - they have to. My point was  \nmore around the details a developer doesn&#39;t have to deal with in  \nterms of manually acking delivery, saving things in a temporary data  \nstore, etc. I&#39;m curios on the HTTP & guaranteed delivery w/i the  \nsession - doesn&#39;t sound like the same thing though. With &quot;persistent&quot;  \nmessaging in JMS, the provider must write the message to disk before  \nreturning. This means that (unless you clown up the receiver by  \nacking the message when you shouldn&#39;t), your message is going to get  \nsomewhere and not get lost. And if you don&#39;t ack it, it will be  \nsitting on the Queue/Topic and will be resent to the receiver etc.  \nThis is very useful because your services don&#39;t have to account for  \nthis. A lot of the people I talk to who just use WS-* look at me like  \nI&#39;m really hard core for worrying about this - I think they are a  \nlittle incompetent for not ;) When JMS is used correctly, you get  \nvery clear success/failures - messages either get processed correctly  \nor they get sent to an error queue. You know what is going on. Not  \nsaying you don&#39;t w/o it, but beats the heck out of greping through  \nlog files. And to be fair, I&#39;ve seen people screw this up with JMS so  \nyou don&#39;t just get it for free.\n\nYou said, &quot;The extra complexity of guaranteed delivery outside of a  \nTCP/IP connection provides support for the disconnected use cases you  \nmention, and I think this would be a great thing for a Web-scale  \nsystem to provide, but I don&#39;t see it happening yet and I&#39;m not sure  \nwhy.&quot; Good to hear - so do I.\n\nNext you said, &quot;My hunch is that making progress when outbound  \nmessages are not being delivered isn&#39;t a huge win most of the time -  \nif there was work that could be accomplished without outbound network  \ntraffic, then it should be accomplished regardless of the messaging  \nstyle.&quot; In my world, it is a huge win. It is a huge win when you have  \na logical transaction (e.g., submit insurance) that spans several  \nservices. That message could make it through 3 of the 8 services  \ninvolved. It might make it through validation, rules engine, tiering,  \nand rating, but then fail on the way to getting imaged & sent to some  \nsystem of record. The original client (the web app where a mouse  \nclick happened) is long gone at this point. Lets say that for some  \nreason the service that was supposed to image the insurance  \napplication couldn&#39;t talk to the imaging service because a router  \nfailed. No problem with proper JMS/messaging ... that message either  \ngets routed to an error queue or &quot;rolled back / paused&quot; to messaging  \nfor future redelivery at the pause interval. Its the cumulative  \ncomplexity of service interaction that results in messaging being  \nbeneficial - if you have just a couple services, you can do without  \nit - its when there is coordination between the services where things  \nget hairy.\n\nNext you said, &quot;JMS is fine. I have to ask though, how often do you  \nuse JMS to integrate with groups outside your control, or outside  \nyour company?&quot;\n\nBingo - this is where it falls down. My company has several JMS  \nproviders. When certain organizations need to communicate, they need  \nto bridge the providers. Not ideal obviously. This is the type of  \nthing that makes me wonder if there is a better way. WS- \nReliableMessaging is supposed to do this, but I&#39;m not a fan of WS- \nanything. I&#39;d love to see a reliable REST and a pub/sub - event  \ndriven REST if it can be done w/o hurting the web etc.\n\nWe aren&#39;t disagreeing with each other, but you are proving my point  \nwhen you say, &quot;Nope, just a 50 line servlet and the messages in- \nmemory in a linked list.&quot; Now, you are smart and got this right I&#39;m  \nsure - I am positive my JMS vendor did. I just freak out about  \nvarious developers having to write their own impl. Sure you could  \nhave a little in house framework for this - not hard, but it is  \nharder then we think to mandate etc.\n\nLastly, you said: &quot;I was kidding. The issue I was alluding to is -  \nhow do you know you&#39;ve received all the messages or if there is still  \none more straggler? The pubsub approach is &#39;supposed&#39; to be about  \nloosely coupled systems, but if the publisher has to change to meet  \nthe specifications of each consumer, then that loose coupling has  \njust tightened.&quot; Again, great point. People often do this because  \nthey know who is listening - they wait for the N responses (they know  \nthe value of N) and the return the Set of responses. Even though you  \nslow things down, the only way to do this properly is to mandate a  \nconstant timeout (i.e., the request/reply pub/sub always takes 5  \nseconds) regardless if every service who can respond and did respond  \ndid so in 3 seconds.\n\nThanks again for the comments.\n\nMike\n\n\n\nOn Apr 29, 2006, at 11:29 PM, Mike Dierken wrote:\n\n&gt; Mike,\n&gt; Sorry I haven&#39;t responded sooner... To make up for it, I wrote a  \n&gt; really long\n&gt; response.\n&gt;\n&gt; I don&#39;t have anything against JMS or messaging systems, they are great\n&gt; tools. And just like HTTP, they work wonders when used in the right\n&gt; situation. This thread is interesting to me because there hasn&#39;t  \n&gt; been much\n&gt; discussion about applying aspects of REST to a classical asynchronous\n&gt; messaging based system.\n&gt; In my opinion, there are a couple things that are similar between  \n&gt; the two -\n&gt; simple and common interactions for many kinds of applications (send  \n&gt; message,\n&gt; receive message, etc), payload formats independent of message  \n&gt; framing, and\n&gt; so on. But there are a few things common in REST that I don&#39;t see  \n&gt; in JMS or\n&gt; other messaging systems :\n&gt;\n&gt; 1) application semantics : sending a message in REST means something\n&gt; (delete, modify, retrieve, etc), whereas sending a message in JMS  \n&gt; or other\n&gt; messaging systems is just sending a message (and it usually has  \n&gt; unknown\n&gt; consequences, which requires endless coordination to work out the  \n&gt; details)\n&gt;\n&gt; 2) resource identifiers : this sort of follows from being an  \n&gt; application\n&gt; protocol - the protocol is all about interacting with resources, which\n&gt; provides a framework for modelling applications (above just moving  \n&gt; bytes\n&gt; from point a to point b).\n&gt;\n&gt; 3) hypertext (as the engine of application state) : this is one of the\n&gt; facets of REST that took me the longest to put into practice, but  \n&gt; has paid\n&gt; off very well. Using documents with tags that help pick out the  \n&gt; resource\n&gt; identifiers is invaluable in a dynamic, adaptive and configuration- \n&gt; free\n&gt; system. Many systems have dynamically retrieved configurations, and  \n&gt; this\n&gt; provides part of the benefit of hypertext, and when links (resource\n&gt; identifiers that can be interacted with) are used a lot of config file\n&gt; processing becomes generalizable and just falls away. For example,  \n&gt; at work\n&gt; we recently built a large scale real-time data publishing system  \n&gt; and the\n&gt; consuming systems have a link to a &#39;directory service&#39;, which is an  \n&gt; xml blob\n&gt; with elements with links to the subjects to subscribe to, links to the\n&gt; cold-start data to bootstrap with and so on. The cold-start data is  \n&gt; somewhat\n&gt; large, but by teaching the clients to &#39;just follow the links&#39;, the  \n&gt; data\n&gt; could be arbitrarily partitioned by the server. In addition, with a  \n&gt; little\n&gt; thought you could put multiple links in there and have parallel  \n&gt; streams\n&gt; being retrieved by the client - a good way to utilize all that  \n&gt; bandwidth\n&gt; just laying around.\n&gt;\n&gt;\n&gt;&gt; I spend most of my time working on a system that has approximately 50\n&gt;&gt; services. The services are pretty stupid, all they know is\n&gt;&gt; they get an event XML input. They typically respond with an\n&gt;&gt; XML event. They listen on a set of JMS Topics or a Topic\n&gt;&gt; pattern (e.g., COMPANYNAME.LINEOFBUSINESS.NOUN.*).\n&gt;&gt; They also typically respond to set of Topics. What I like\n&gt;&gt; about JMS in the system is the guaranteed delivery & durable\n&gt;&gt; subscriptions. The service impls don&#39;t care about the network\n&gt;&gt; because they know that JMS is there.\n&gt; These are extremely useful tools - durable subscriptions, guaranteed\n&gt; delivery, etc. But from my point of view the &#39;service&#39; isn&#39;t all that\n&gt; &#39;stupid&#39;. The service is everything the outside world would see,  \n&gt; and that\n&gt; includes those handy things like disconnected use and reliability.  \n&gt; The code\n&gt; that plugs into this is simplified by that environment, which is  \n&gt; hufely\n&gt; valuable. I&#39;m not a messaging or protocol expert, but I always  \n&gt; thought that\n&gt; HTTP over TCP/IP provided guaranteed delivery within the connection  \n&gt; - I&#39;d\n&gt; like to hear from others on how we should consider the &#39;guarantee- \n&gt; ness&#39; of\n&gt; HTTP (within a connection). The extra complexity of guaranteed  \n&gt; delivery\n&gt; outside of a TCP/IP connection provides support for the  \n&gt; disconnected use\n&gt; cases you mention, and I think this would be a great thing for a  \n&gt; Web-scale\n&gt; system to provide, but I don&#39;t see it happening yet and I&#39;m not  \n&gt; sure why.\n&gt;\n&gt;\n&gt;&gt; Also, durable subscriptions are great [...]\n&gt;&gt; I would really like to see an HTTP based pub/sub like this.\n&gt;&gt; Idon&#39;t know enough about REST to know if it would be evil to do.\n&gt;&gt; I babbled about that a bit more here:\n&gt;&gt; http://fuzzypanic.blogspot.com/2006/03/httppox-xml-based-eda-pub- \n&gt;&gt; sub.html\n&gt;&gt; Let me know if you know of anything.\n&gt; There have been a few companies doing that - you found mod_pubsub  \n&gt; already,\n&gt; which was a spin-out from KnowNow (which I helped start up many  \n&gt; years ago,\n&gt; for a short period of time). Supposedly Renkoo may be doing work to  \n&gt; make\n&gt; mod-pubsub live again. The toy &#39;messaging&#39; web app I linked to last  \n&gt; time\n&gt; shows that it&#39;s very easy to build messaging with pure HTTP, and  \n&gt; with modern\n&gt; systems supporting non-blocking IO, it&#39;s not too hard to be  \n&gt; efficient. The\n&gt; hard part is the pump that keeps the messages flowing along the  \n&gt; durable\n&gt; subscriptions, dealing with cycles and other plumbing issues.\n&gt;\n&gt; You ask a very good question though - is pubsub compatible with  \n&gt; REST? If\n&gt; REST is about application level semantics, you could model messages,\n&gt; subscriptions, etc. as resources and go that route. But then what  \n&gt; are the\n&gt; messages about? How are those raised to the application level so  \n&gt; that common\n&gt; semantics can be applied?\n&gt;\n&gt;\n&gt;&gt; Sure, but that block means something typically - it means the\n&gt;&gt; message was persisted so the client doesn&#39;t have to ferret it\n&gt;&gt; away just in case something bad happens later.\n&gt;&gt; With Web Style, you can do that too - my point is you have to do that\n&gt;&gt; yourself (client ferret away the data that was PUT/POST).\n&gt; I see this as partly a difference in whether the client host or the  \n&gt; server\n&gt; host has some persistent storage. If there is no client persistent  \n&gt; storage,\n&gt; then the client application logic needs to know when the server has  \n&gt; taken\n&gt; hold of the data in some persistent fashion (if that&#39;s the goal in  \n&gt; that\n&gt; situation). The other part is how well the application behaves in  \n&gt; the face\n&gt; of an outage or disconnection - picking up where you left off is  \n&gt; harder if\n&gt; the application doesn&#39;t store the state as it makes progress. My  \n&gt; hunch is\n&gt; that making progress when outbound messages are not being delivered  \n&gt; isn&#39;t a\n&gt; huge win most of the time - if there was work that could be  \n&gt; accomplished\n&gt; without outbound network traffic, then it should be accomplished  \n&gt; regardless\n&gt; of the messaging style.\n&gt;\n&gt;\n&gt;&gt; Nope, I mean make pub/sub more RESTful.\n&gt;&gt; Like I said, I don&#39;t know enough about REST principals to know if\n&gt;&gt; this is evil or not. I have a decent messaging middleware product  \n&gt;&gt; today.\n&gt;&gt; I&#39;m happy with it - I just want to know if its overkill or not or\n&gt;&gt; if there is a simpler way. If some of my integration types\n&gt;&gt; are best handled via JMS, fine with me. I just want to ask\n&gt;&gt; the &quot;stupid question&quot; - to make sure I&#39;m not thinking JMS is\n&gt;&gt; better then it is.\n&gt; JMS is fine. I have to ask though, how often do you use JMS to  \n&gt; integrate\n&gt; with groups outside your control, or outside your company?\n&gt;\n&gt;&gt;&gt; Here is a sample app I wrote a while back that does what you are  \n&gt;&gt;&gt; talking\n&gt; about :\n&gt;&gt;&gt;\n&gt; http://www.searchalert.net:8080/dierken/events/chat.html?topic=rest- \n&gt; discuss\n&gt;&gt;&gt; The underlying system holds messages here:\n&gt; http://www.searchalert.net:8080/xmlrouter/msgs/rest-discuss\n&gt;&gt; So what is on the server - is there messaging behind it?\n&gt; Nope, just a 50 line servlet and the messages in-memory in a linked  \n&gt; list.\n&gt;\n&gt;\n&gt;\n&gt;&gt;&gt; Are you sure you didn&#39;t mean N+1 responses?\n&gt;&gt; I&#39;m talking about a client sending 1 request, having N\n&gt;&gt; services subscribe and send a response to the client.\n&gt; I was kidding. The issue I was alluding to is - how do you know you&#39;ve\n&gt; received all the messages or if there is still one more straggler? The\n&gt; pubsub approach is &#39;supposed&#39; to be about loosely coupled systems,  \n&gt; but if\n&gt; the publisher has to change to meet the specifications of each  \n&gt; consumer,\n&gt; then that loose coupling has just tightened.\n&gt;\n\n\n"}}
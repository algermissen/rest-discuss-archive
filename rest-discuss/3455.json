{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":139691997,"authorName":"Tyler Close","from":"Tyler Close &lt;tyler@...&gt;","profile":"tjclose","replyTo":"SENDER","senderId":"MzufGjEO0Xgpw7Tyf6nI5q8iJcF_RzfTXERLTCQKApeY_DzqKGbLPuVJ-RoVTPAr5a24_P9ls4ZMHIHhfQltmQ25zZgUmp0","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] W3C Note - User Agent Authentication FORM elements","postDate":"1046529637","msgId":3455,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEUxOHA4QUktMDAwMVhuLTAwQGNhbnRlZW4+","inReplyToHeader":"PDNFNUVFMEJGLjMwNTA3MDlAcG9uZC5jb20+","referencesHeader":"PFBpbmUuV05ULjQuNDMuMDMwMjI3MjAzOTUyMC4xMDcyLTEwMDAwMEBmYW5hdGljPiA8M0U1RUUwQkYuMzA1MDcwOUBwb25kLmNvbT4="},"prevInTopic":3454,"nextInTopic":3456,"prevInTime":3454,"nextInTime":3456,"topicId":3351,"numMessagesInTopic":49,"msgSnippet":"... Quite a number actually. The basic mechanism that Alex proposed, inserting an unguessable random number into a URL, can be used to implement distributed","rawEmail":"Return-Path: &lt;tyler@...&gt;\r\nReceived: (qmail 70433 invoked from network); 1 Mar 2003 20:44:35 -0000\r\nReceived: from unknown (66.218.66.216)\n  by m11.grp.scd.yahoo.com with QMQP; 1 Mar 2003 20:44:35 -0000\r\nReceived: from unknown (HELO n21.grp.scd.yahoo.com) (66.218.66.77)\n  by mta1.grp.scd.yahoo.com with SMTP; 1 Mar 2003 20:44:35 -0000\r\nX-eGroups-Return: tyler@...\r\nReceived: from [66.218.67.175] by n21.grp.scd.yahoo.com with NNFMP; 01 Mar 2003 20:44:33 -0000\r\nX-Sender: tyler@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_2_3_4); 1 Mar 2003 14:57:24 -0000\r\nReceived: (qmail 39850 invoked from network); 1 Mar 2003 14:57:23 -0000\r\nReceived: from unknown (66.218.66.217)\n  by m7.grp.scd.yahoo.com with QMQP; 1 Mar 2003 14:57:23 -0000\r\nReceived: from unknown (HELO canteen) (209.88.232.43)\n  by mta2.grp.scd.yahoo.com with SMTP; 1 Mar 2003 14:57:22 -0000\r\nReceived: from canteen ([127.0.0.1] helo=there)\n\tby canteen with smtp (Exim 3.35 #1 (Debian))\n\tid 18p8AI-0001Xn-00\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Sat, 01 Mar 2003 10:40:38 -0400\r\nContent-Type: text/plain;\n  charset=&quot;iso-8859-1&quot;\r\nTo: rest-discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nSubject: Re: [rest-discuss] W3C Note - User Agent Authentication FORM elements\r\nDate: Sat, 1 Mar 2003 10:40:37 -0400\r\nX-Mailer: KMail [version 1.3.2]\r\nReferences: &lt;Pine.WNT.4.43.0302272039520.1072-100000@fanatic&gt; &lt;3E5EE0BF.3050709@...&gt;\r\nIn-Reply-To: &lt;3E5EE0BF.3050709@...&gt;\r\nMIME-Version: 1.0\r\nContent-Transfer-Encoding: 8bit\r\nMessage-Id: &lt;E18p8AI-0001Xn-00@canteen&gt;\r\nFrom: Tyler Close &lt;tyler@...&gt;\r\nX-Yahoo-Group-Post: member; u=139691997\r\nX-Yahoo-Profile: tjclose\r\nX-eGroups-Approved-By: gonga_thrash &lt;distobj@...&gt; via web; 01 Mar 2003 20:44:30 -0000\r\n\r\nOn Friday 28 February 2003 00:08, Chuck Hinson wrote:\n&gt; While I&#39;m sure there are possibilities that I&#39;ve not thought of,\n\nQuite a number actually. The basic mechanism that Alex proposed,\ninserting an unguessable random number into a URL, can be used to\nimplement distributed capability security. The capability security\nmodel has been used to secure a wide range of software, from\noperating systems to end-user applications.\n\n&gt; I&#39;m\n&gt; having difficulty imagining a scenario where that is a reasonable\n&gt; solution.\n&gt;\n&gt; The way I see it, having a URL per user has several disdvantages:\n&gt; 1. exponential explosion of URIs - one URL per resource per user - makes\n&gt; content management much harder than it needs to be\n&gt; 2. can&#39;t share URIs between authorized users since everyone has their\n&gt; own personal URI for a resource\n&gt; 3. kills caching since every unique user will use a different name for\n&gt; the same resource\n\nIt appears that you&#39;re only thinking about protecting read-access\nto a read-only resource. I base this on your assumption that many\nusers have access to a shared (and cacheable!) resource.\n\nThis really isn&#39;t a very good example to use when trying to\nunderstand the benefits of capability-based security. For\nstarters, the example isn&#39;t one in which there are any actually\nenforceable security properties. You can&#39;t prevent users from\nsharing access to the resource with &quot;unauthorized&quot; users. There is\nalso very little sense is revoking read-access to a cacheable\nresource: why get it from the site at all when you&#39;ve still got it\nin your cache.\n\nFor a better overview of capability-based security, I suggest the\npaper at:\n\nhttp://www.erights.org/elib/capability/ode/index.html\n\nThe paper explains capability-based security using tradeable\nelectronic credit as an example. This is a better example to use\nwhen explaining capability-based security.\n\nFor an explanation of how capability-based security could be\napplied using REST design principles, I suggest my own paper at:\n\nhttp://www.waterken.com/dev/Web/Calculus/\n\nThe paper also uses tradeable electronic credit as an example, but\nwith a different design. The paper describes a RESTful interface\nfor tradeable electronic credit.\n\n&gt; 4. provides no real security since all you need is a URI in order to\n&gt; access a supposedly protected resource\n\nA lot of people get hung up on this, since they are so used to\nusername/password. Consider that a randomly-generated 128 bit\nnumber contains more entropy than any password you could possibly\nremember. If it were possible to guess a random 128 bit number, it\nwould also be possible to break any symmetric-key encryption\nalgorithm. A symmetric encryption key is typically also 128 bits.\n\nTyler\n\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":289191104,"authorName":"Jan Algermissen","from":"Jan Algermissen &lt;algermissen1971@...&gt;","profile":"algermissen1971","replyTo":"SENDER","senderId":"RCP3EOG4_653zfU4MuwsrTTUhUDH7uhcs-YGSgICw2efI3mWEyneODZSdEXBBhFcykdfZVu3BmqavI5pIZYrsTawRpymq-wbOmCTZ11d9Yw","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Dynamic Evolvability","postDate":"1165273022","msgId":7194,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDA2NTk4ODBBLTI1RjEtNDE3NC04RkFFLTIzQjc3NDNBMTdFQkBtYWMuY29tPg=="},"prevInTopic":0,"nextInTopic":7195,"prevInTime":7193,"nextInTime":7195,"topicId":7194,"numMessagesInTopic":6,"msgSnippet":"Hi, Roy writes in his dissertation: 2.3.4.1 Evolvability Evolvability represents the degree to which a component implementation can be changed without","rawEmail":"Return-Path: &lt;algermissen1971@...&gt;\r\nX-Sender: algermissen1971@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 41226 invoked from network); 4 Dec 2006 22:56:58 -0000\r\nReceived: from unknown (66.218.66.218)\n  by m26.grp.scd.yahoo.com with QMQP; 4 Dec 2006 22:56:58 -0000\r\nReceived: from unknown (HELO smtpout.mac.com) (17.250.248.184)\n  by mta3.grp.scd.yahoo.com with SMTP; 4 Dec 2006 22:56:48 -0000\r\nReceived: from mac.com (smtpin05-en2 [10.13.10.150])\n\tby smtpout.mac.com (Xserve/8.12.11/smtpout14/MantshX 4.0) with ESMTP id kB4MuiIY016305\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Mon, 4 Dec 2006 14:56:44 -0800 (PST)\r\nReceived: from [10.0.1.2] (e176058085.adsl.alicedsl.de [85.176.58.85])\n\t(authenticated bits=0)\n\tby mac.com (Xserve/smtpin05/MantshX 4.0) with ESMTP id kB4MuexF004718\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Mon, 4 Dec 2006 14:56:43 -0800 (PST)\r\nMime-Version: 1.0 (Apple Message framework v752.3)\r\nContent-Transfer-Encoding: 7bit\r\nMessage-Id: &lt;0659880A-25F1-4174-8FAE-23B7743A17EB@...&gt;\r\nContent-Type: text/plain; charset=US-ASCII; delsp=yes; format=flowed\r\nTo: rest-discuss@yahoogroups.com\r\nDate: Mon, 4 Dec 2006 23:57:02 +0100\r\nX-Mailer: Apple Mail (2.752.3)\r\nX-Brightmail-Tracker: AAAAAA==\r\nX-Brightmail-scanned: yes\r\nX-eGroups-Msg-Info: 1:0:0:0\r\nFrom: Jan Algermissen &lt;algermissen1971@...&gt;\r\nSubject: Dynamic Evolvability\r\nX-Yahoo-Group-Post: member; u=289191104; y=9NbZ38ruyT6eAinvvB_xauezdogvKqAp3ARqbnwodS5BVZFGbmM5XGuO\r\nX-Yahoo-Profile: algermissen1971\r\n\r\nHi,\n\nRoy writes in his dissertation:\n\n&quot;2.3.4.1 Evolvability\n\nEvolvability represents the degree to which a component  \nimplementation can be changed without negatively impacting other  \ncomponents. Static evolution of components generally depends on how  \nwell the architectural abstraction is enforced by the implementation,  \nand thus is not something unique to any particular architectural  \nstyle. Dynamic evolution, however, can be influenced by the style if  \nit includes constraints on the maintenance and location of  \napplication state. The same techniques used to recover from partial  \nfailure conditions in a distributed system [133] can be used to  \nsupport dynamic evolution.&quot;[1]\n\nWhile trying to flesh out the argument that REST does increase  \ndynamic evolvability (and that  SOA (whatever it really is) does not,  \nif so) I realized that I am not entirely clear what architectral  \nconstraint of REST increases dynamic evolvability and why it does so.\n\nThe reference to Waldo&#39;s &quot;Note on Disributed Computing&quot; suggests -if  \nI understand correctly- that one of the problems of dynamic evolution  \nis to leave the calling component in a consistent state if the  \ninterface of the called component unexpectedly changes. IOW, making a  \ncall to a remote object should either succeed or fail with a clear  \nerror indication that tells the caller that the interface changed and  \nhow.\n\nRegarding REST I understand this:\n\nWhile REST&#39;s uniform interface constraint cannot prevent a remote  \ncomponent from changing its interface as part of an evolution (e.g.  \nit could remove former support for PUT) the client will know exactly  \nwhat happened since it knows the method semantics (they are uniform)  \nand the error code (&quot;405 Method Not Allowed&quot;) indicates the reason  \nfor the failure. IOW, dynamic evolvability is increased because the  \ncalled component can change without brealing the client (because the  \nclient is required to understand and expect a 405).\n\nIs this understanding correct?\n\n\nAssuming it is correct, does WS-* (being a SOA implementation) pass  \nthe test or not?\n(Without interface uniformity, all the server can really tell the  \nclient upon an interface change is: &quot;Interface changed&quot;. This IMHO  \nviolates the constraint that the client must be in a consistent state  \nafter the failed call).\n\n\nCan anyone explain to me, how the location of application state  \naffects dynamic evolvability? I am honsetly missing a clue here (or  \ndo not see the forrest for the trees).\n\nThanks.\n\nJan\n\n\n[1]http://www.ics.uci.edu/~fielding/pubs/dissertation/ \nnet_app_arch.htm#sec_2_3_4_1\n[133] http://research.sun.com/techrep/1994/abstract-29.html\n\n"}}
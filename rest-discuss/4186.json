{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":154469508,"authorName":"justin_t_sampson","from":"&quot;justin_t_sampson&quot; &lt;justin.sampson@...&gt;","profile":"justin_t_sampson","replyTo":"SENDER","senderId":"nO3_qifuoxdQhBtMFmgOp8S4ujpJyIMu52G4pGUKGZPFzI7NnsTWewmY6B9vKf8pj28Ph-sDC8czg8jHh3jgPgGajVknzaSYJDuqLxCkvzxz2E8u90YxHhvbxm8","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: sessions and infinite URIs","postDate":"1076638781","msgId":4186,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGMwaGM3dCtibjE1QGVHcm91cHMuY29tPg==","inReplyToHeader":"PEJDQjY3NkUzLTVEQzEtMTFEOC1BOEEzLTAwMDM5Mzc1MzkzNkBnYml2LmNvbT4="},"prevInTopic":4185,"nextInTopic":4187,"prevInTime":4185,"nextInTime":4187,"topicId":4141,"numMessagesInTopic":67,"msgSnippet":"... Aaaah, okay. I didn t express myself clearly. When I asked, Does that mean that session cookies are okay, as long as I use URI syntax for the session key","rawEmail":"Return-Path: &lt;justin.sampson@...&gt;\r\nX-Sender: justin.sampson@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 52499 invoked from network); 13 Feb 2004 02:19:42 -0000\r\nReceived: from unknown (66.218.66.216)\n  by m7.grp.scd.yahoo.com with QMQP; 13 Feb 2004 02:19:42 -0000\r\nReceived: from unknown (HELO n39.grp.scd.yahoo.com) (66.218.66.107)\n  by mta1.grp.scd.yahoo.com with SMTP; 13 Feb 2004 02:19:42 -0000\r\nReceived: from [66.218.67.253] by n39.grp.scd.yahoo.com with NNFMP; 13 Feb 2004 02:19:41 -0000\r\nDate: Fri, 13 Feb 2004 02:19:41 -0000\r\nTo: rest-discuss@yahoogroups.com\r\nMessage-ID: &lt;c0hc7t+bn15@...&gt;\r\nIn-Reply-To: &lt;BCB676E3-5DC1-11D8-A8A3-000393753936@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Length: 3716\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-eGroups-Remote-IP: 66.218.66.107\r\nFrom: &quot;justin_t_sampson&quot; &lt;justin.sampson@...&gt;\r\nSubject: Re: sessions and infinite URIs\r\nX-Yahoo-Group-Post: member; u=154469508\r\nX-Yahoo-Profile: justin_t_sampson\r\n\r\nRoy T. Fielding wrote:\n\n&gt; &gt; &gt; &gt; Does that mean that session cookies are okay, as long as\n&gt; &gt; &gt; &gt; I use URI syntax for the session key and the session\n&gt; &gt; &gt; &gt; state is persisted?\n&gt; &gt; &gt;\n&gt; &gt; &gt; Yes and no.\n&gt; &gt;\n&gt; &gt; That means &quot;no,&quot; right? ;-)\n&gt;\n&gt; I meant that, if the session is defined as an aspect of the\n&gt; resource that is being acted upon (the effect of placing it in\n&gt; the URI instead of in the cookie header fields), then it does\n&gt; not violate the stateless constraint. However, that doesn&#39;t\n&gt; mean it is &quot;okay&quot;, because doing so makes the URI worthless for\n&gt; later reference (infinite URIs due to session id being in the\n&gt; URI). The set of URIs can be reduced to a more natural, finite\n&gt; set by inserting the user id instead. Better yet, when\n&gt; possible, avoid placing temporary state on the server and thus\n&gt; keep the URI free of any user state information. That is easy\n&gt; to do for new architectures -- much harder when dealing with\n&gt; legacy browsers.\n\nAaaah, okay. I didn&#39;t express myself clearly.\n\nWhen I asked, &quot;Does that mean that session cookies are okay, as\nlong as I use URI syntax for the session key and the session\nstate is persisted?&quot; I didn&#39;t mean putting the session key in the\nURI, I meant putting the session key in a cookie but using the\nURI syntax for composing the key itself. That is, assigning a URI\nto the session, persisting the session state, and then putting\nthe session URI in a cookie.\n\nI don&#39;t see the difference in principle for REST between that and\nusing a big random number for the session key and keeping the\nsession state in memory, in terms of what &quot;stateful&quot; means, but I\nbelieve you had suggested there would be a difference.\n\n&gt; In any case, the problem with cookies in the header is *not*\n&gt; that they violate statelessness, but rather that they violate\n&gt; visibility (because nobody knows why they are there) and\n&gt; reliability (because they are associated with the site rather\n&gt; than the current state of the user&#39;s interface). A message\n&gt; containing cookie headers is still stateless, assuming that the\n&gt; cookie isn&#39;t specified relative to some prior state (which\n&gt; would be very weird).\n\nReally? That&#39;s odd, because reading your dissertation just now\nfor the definition of statelessness I was about to suppose that\neven putting the session key in the URI itself would be\nconsidered stateful according to REST: &quot;communication must be\nstateless in nature [...] such that each request from client to\nserver must contain all of the information necessary to\nunderstand the request, and cannot take advantage of any stored\ncontext on the server. Session state is therefore kept entirely\non the client.\n\n&quot;This constraint induces the properties of visibility,\nreliability, and scalability. Visibility is improved because a\nmonitoring system does not have to look beyond a single request\ndatum in order to determine the full nature of the request.\nReliability is improved because it eases the task of recovering\nfrom partial failures. Scalability is improved because not having\nto store state between requests allows the server component to\nquickly free resources, and further simplifies implementation\nbecause the server doesn&#39;t have to manage resource usage across\nrequests.&quot;\n\n&lt;http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.ht\nm#sec_5_1_3&gt;\n\nThe &quot;managing resource usage&quot; problem applies equally to all the\nways we&#39;ve described for managing session state, suggesting that\nthe fact of the session state itself is &quot;stateful&quot; and therefore\nin violation of REST regardless of how the client passes the key\nto the server. You&#39;ve said as much in this discussion, except\nthat you&#39;re saying that&#39;s not what &quot;statefulness&quot; means, which I\nfind rather confusing.\n\nJustin\n\n\n\n"}}
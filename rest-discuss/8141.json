{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":184797058,"authorName":"Benjamin Carlyle","from":"Benjamin Carlyle &lt;benjamincarlyle@...&gt;","profile":"fuzzybsc","replyTo":"SENDER","senderId":"F-vw9zeEeAt36wZdXhhh6kn0T5ON1DDp49AcQKWhrClX6V3eloD9fgOXHjhUTqs5d8m_tPlAoWQDDR3LVfViKjmp0N3WPQhnAKwXCnNjerSeamLZkYxhLiw","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Re: The XML Semantic Web","postDate":"1174138478","msgId":8141,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDExNzQxMzg0NzguMTAxNjcuMTM5LmNhbWVsQGxvY2FsaG9zdC5sb2NhbGRvbWFpbj4=","inReplyToHeader":"PDFmMmVkNWNkMDcwMzAxMTA1NmoyNWQ3ZmVkN3Q4MWQ5ZmJiZTUyNzQwOWVmQG1haWwuZ21haWwuY29tPg==","referencesHeader":"PDExNzE5NjkxNzYuMjA3LjI3NTcyLm0xNkB5YWhvb2dyb3Vwcy5jb20+CSA8MTE3MjAwNTEwMC4xMjIwMi4xMC5jYW1lbEBsb2NhbGhvc3QubG9jYWxkb21haW4+CSA8NDVEQjdDRTUuNTA1MDFAZGVob3JhLm5ldD4JIDw5Mjc0NDFiMzA3MDIyMDE4MTB1NDQ3Yjk4OWZzYjZlMjBhMGI3MzQ4MmEwNEBtYWlsLmdtYWlsLmNvbT4JIDw0NURDMTMzRi4xMDIwMDA1QGRlaG9yYS5uZXQ+CSA8MTE3MjI2Nzc3MS40NzU1LjYxLmNhbWVsQGxvY2FsaG9zdC5sb2NhbGRvbWFpbj4JIDw0NUUwODZCNy43MDUwODA3QGRlaG9yYS5uZXQ+CSA8OWRjNzhkN2IwNzAyMjUwOTAzeDI3ZTUwMmI3bmRhZjRhMTM1ODlmODFjOTJAbWFpbC5nbWFpbC5jb20+CSA8MWYyZWQ1Y2QwNzAyMjUxMjUzcjE2ZWY1ZGUxeDg5NjNjMzMyNGRhMTk5ZTVAbWFpbC5nbWFpbC5jb20+CSA8MTE3Mjc1NDk2NC40NzM4LjQwLmNhbWVsQGxvY2FsaG9zdC5sb2NhbGRvbWFpbj4JIDwxZjJlZDVjZDA3MDMwMTEwNTZqMjVkN2ZlZDd0ODFkOWZiYmU1Mjc0MDllZkBtYWlsLmdtYWlsLmNvbT4="},"prevInTopic":8125,"nextInTopic":8142,"prevInTime":8140,"nextInTime":8142,"topicId":7927,"numMessagesInTopic":81,"msgSnippet":"... That s true, however that does not have a necessary impact on content type design. While a graph may be a suitable structure for conveying statements about","rawEmail":"Return-Path: &lt;benjamincarlyle@...&gt;\r\nX-Sender: benjamincarlyle@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 5589 invoked from network); 17 Mar 2007 13:46:11 -0000\r\nReceived: from unknown (66.218.66.72)\n  by m41a.grp.scd.yahoo.com with QMQP; 17 Mar 2007 13:46:11 -0000\r\nReceived: from unknown (HELO fallbackmx03.syd.optusnet.com.au) (211.29.133.136)\n  by mta14.grp.scd.yahoo.com with SMTP; 17 Mar 2007 13:46:10 -0000\r\nReceived: from mail01.syd.optusnet.com.au (mail01.syd.optusnet.com.au [211.29.132.182])\n\tby fallbackmx03.syd.optusnet.com.au (8.12.11.20060308/8.12.11) with ESMTP id l2HDjdSs025153\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Sun, 18 Mar 2007 00:45:39 +1100\r\nReceived: from c210-49-68-220.rochd2.qld.optusnet.com.au (c210-49-68-220.rochd2.qld.optusnet.com.au [210.49.68.220])\n\tby mail01.syd.optusnet.com.au (8.13.1/8.13.1) with ESMTP id l2HDYcK8022626;\n\tSun, 18 Mar 2007 00:34:39 +1100\r\nTo: Danny Ayers &lt;danny.ayers@...&gt;\r\nCc: Bill de hOra &lt;bill@...&gt;, Mark Baker &lt;distobj@...&gt;,\n        Steve Loughran &lt;steve.loughran.soapbuilders@...&gt;,\n        rest-discuss@yahoogroups.com\r\nIn-Reply-To: &lt;1f2ed5cd0703011056j25d7fed7t81d9fbbe527409ef@...&gt;\r\nReferences: &lt;1171969176.207.27572.m16@yahoogroups.com&gt;\n\t &lt;1172005100.12202.10.camel@...&gt;\n\t &lt;45DB7CE5.50501@...&gt;\n\t &lt;927441b30702201810u447b989fsb6e20a0b73482a04@...&gt;\n\t &lt;45DC133F.1020005@...&gt;\n\t &lt;1172267771.4755.61.camel@...&gt;\n\t &lt;45E086B7.7050807@...&gt;\n\t &lt;9dc78d7b0702250903x27e502b7ndaf4a13589f81c92@...&gt;\n\t &lt;1f2ed5cd0702251253r16ef5de1x8963c3324da199e5@...&gt;\n\t &lt;1172754964.4738.40.camel@...&gt;\n\t &lt;1f2ed5cd0703011056j25d7fed7t81d9fbbe527409ef@...&gt;\r\nContent-Type: text/plain\r\nDate: Sat, 17 Mar 2007 23:34:38 +1000\r\nMessage-Id: &lt;1174138478.10167.139.camel@...&gt;\r\nMime-Version: 1.0\r\nX-Mailer: Evolution 2.6.3 \r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:0:0:0\r\nFrom: Benjamin Carlyle &lt;benjamincarlyle@...&gt;\r\nSubject: Re: [rest-discuss] Re: The XML Semantic Web\r\nX-Yahoo-Group-Post: member; u=184797058; y=4LIMZmwZvUU1GgW9T4SwJE-aomHIgFPK9STXV57k8Dz2ss8\r\nX-Yahoo-Profile: fuzzybsc\r\n\r\nOn Thu, 2007-03-01 at 19:56 +0100, Danny Ayers wrote:\n&gt; On 01/03/07, Benjamin Carlyle &lt;benjamincarlyle@...&gt; wrote:\n&gt; &gt; On Sun, 2007-02-25 at 21:53 +0100, Danny Ayers wrote:\n&gt; &gt; &gt; The Web is a graph structure.\n&gt; &gt; That&#39;s fine in the abstract sense,\n&gt; More than that, my user agent (even if it&#39;s just a browser) can wander\n&gt; around that graph.\n&gt; but\n&gt; &gt; * An atom document has an atom structure\n&gt; &gt; * A html document has a html structure\n&gt; Both of these will describe part of a graph-shaped model, because of\n&gt; the links they contain.\n\nThat&#39;s true, however that does not have a necessary impact on content\ntype design. While a graph may be a suitable structure for conveying\nstatements about resources, I posit that it is not the most suitable\nstructure for conveying information about resources. I think RDF is\ninside-out when it comes to uniform messaging of the kind that REST\ndemands. It concentrates on a generic form of representing statements\nwithout incorporating the requirements of a particular vocabulary. I\nthink that the vocabulary or kind of information has more of an impact\non what makes a good or a bad representation than RDF gives it credit\nfor. I think Stu is right that this is the old object/relational battle\nall over again and that it depends on your perspective as to which is\nimportant. I guess I am on the object side of the fence.\n\n&gt; &gt; * A train list document has a train list structure\n&gt; Ok, a list can be expressed directly in a tree or a graph.\n\nA graph is rarely the data structure of choice when working with data\nthat could be stored a list. Graphs carry with them intrinsic\nalgorithmic complexity that lists side-step. Choosing a more specific\ntype reduces the cost of developing an application. Choosing a more\ngeneral type to convey the same information increases cost. It forces\ninformation consumers to accomodate possible variation in structure that\ndoes not exist in practice and employ more complex algorithms than\nnecessary.\n\nThere is a danger in getting too specific that we introduce coupling\nbetween the source of the data and the data sink. It could be that we\nget too specific and fail to be understood when we might have been\nunderstood if we had used more generic terminology. I am sure this issue\napplies for vocabulary, but I am not sure it applies to document\nstructure that might flow from that vocabulary.\n\nWhen two components exchange messages the content must be of a known\ntype that the components agree on. The source component encodes its\ninternal data structures into the form of the representation. The sink\npopulates its internal data structures from the representation.\nDepending on the importance of a particular content type to each, the\ninternal data structures will have a greater or lesser alignment to the\nstructure of the represenation. Components that speak a lot of atom are\nlikely to use structures that name atom elements. Components that speak\na lot of html are likely to align to the html specification. Sometimes\ncomponents will store their information in generic infosets such as a\nDOM or an RDF graph.\n\nWhere components do store information and manipulate it in the form of\nan RDF graph, RDF is a win. Where components store information and\nmanipulate it as an XML DOM or as any other structure, RDF is a cost and\na burden. I still could be wrong on this issue, but I suspect that the\nnumber of components that actually do use RDF internally is quite a\nsmall subset of applications. I don&#39;t see this figure changing much\neither, with the inherent complexity of dealing with graphs that RDF\nintroduces.\n\nMoreover, the subset of applications that do work with RDF internally\ncan still understand data that comes into them in non-RDF standard\ncontent type representations. An RDF app can still consume an atom\ndocument. It just costs more to do so than consuming an atom+rdf\n+something document. It really depends on the balance of applications\nusing RDF internally and those that don&#39;t as to which approach will\ncarry the most value in the long term: Standard document types built\naround the requirements of information in those document types, or\nstandard RDF vocabularies? I think the balance falls one way. Reasonable\npeople may see it falling the other way.\n\nIn terms of REST, I see no more value in using application/rdf+xml than\nin using application/xml. That is to say, in terms of messages on the\nnetwork I think that you need to be specific about the vocabulary you\nare using and about any related document structure. I still have some\nthoughts to work through in terms of envelope types, but generally I\nthink that the content type needs to be pretty close to a description of\nthe whole message. Ultimately, knowing that a content type is shared\nbetween resource and client should be enough to say that one will\nunderstand the output of the other. It should be enough to say that I&#39;ll\nbe able to plug them together. RDF or XML as the document type are only\nsufficient when the client doesn&#39;t need to understand the information\nreturned from a GET request. In general, someone needs to understand\neventually. If you retrieved information in terms of the wrong\nvocabulary there might be hell to pay when processing occurs on the\ndata.\n\n&gt; &gt; These are the structures I really want to get at when I process\n&gt; &gt; information from another component in the network.\n&gt; Are all your local data models trees?\n\nI would suggest that the majority of data that needs to be transferred\nbetween machines can be represented as simple structures (ie, class with\nmember variables) with a few vectors throw in. Graph interconnects can\nbe described in the same way RDF describes them: With URIs. They can\neven be described in more context-sensitive ways if that is appropriate.\nHowever, most of the time I think that the graph part of the model is\nsubservient to the simpler parts of the model. Semi-structured data like\nHTML&#39;s text with tags are probably one of the more important exceptions,\nbut RDF doesn&#39;t handle these any differently to the way an XML document\nwould. Both would just include a bit of special XML to deal with it.\n\n&gt; Note also that there are several non-XML RDF syntaxes, and that many\n&gt; non-RDF syntaxes can be interpreted directly as RDF (e.g. Raptor has\n&gt; an Atom parser).\n\nI understand that. It is graph model in memory that I have more of an\nissue with, as compared to the tree model of in-memory XML. If I don&#39;t\nwant to work with either model, I have to do more work processing the\ngraph than I do processing the tree. If I want to use use the tree model\nof XML then RDF is a step backwards. If I am happy to use the graph as\nmy data model then RDF is a win, but I don&#39;t think that is the common\ncase for distributed software that could form the basis of a semantic\nweb.\n\nI see the atom experience being repeated as the way we will achieve\nsemantic nirvana: One small step at a time, based on as simple an XML\nstructure as the underyling data model for a particular problem-space\nwill allow.\n\n&gt; &gt; If it is a prerequisite of the machine-processable web to have fully\n&gt; &gt; self-describing documents, then we can always translate these to RDF\n&gt; for\n&gt; &gt; our storage needs if we really want to. In the mean-time, I would\n&gt; &gt; suggest that RDF complicates the common case in favour of an\n&gt; uncommon\n&gt; &gt; case that can be solved in a different way once the common case is\n&gt; dealt\n&gt; &gt; with.\n&gt; I would see that the other way around, that RDF doesn&#39;t complicate the\n&gt; common case because there&#39;s no conflict with passing around XML. But\n&gt; when you need to integrate data across domains, RDF is mighty handy.\n\nI still haven&#39;t seen this kind of data integration working, especially\nwithin REST constraints of a message with a content type that describes\nits content. I look at how rss was not aggregated at the RDF level, but\nat a higher level and take from that that RDF doesn&#39;t provide automatic\naggregation within a vocabulary. I look at the problem of describing the\ncontent type of a mixed rdf document and take from that that RDF doesn&#39;t\nhave a good answer for exchanging multi-vocabulary documents in a\nRESTful way.\n\nWhat I do see in RDF is a foundation for the next generation of RDBMS. I\ndo see in RDF a possible foundation for reasoning-based languages. I\nthink both functions are useful within a particular service boundary or\nbehind a particular firewall. I don&#39;t think these functions are\nimportant to integrate into the main message-exchanging uniform Web. I\nthink the cost of that integration outweighs the benefits both now and\nfor the forseeable future.\n\nIf the kind of reasoning-based languages that RDF supports become more\nimportant this balance may shift, and it may be valuable to put data\ninto the Web in RDF form. I guess this is what current RDF proponents\nare counting on. I am dubious about these langauges supplanting the\nworld&#39;s current crop, but maybe I just haven&#39;t caught the bug yet.\nI think that RDF still has some hurdles to jump, as well, in terms of\nworking with REST.\n\nThanks for the discussion so far, gents. I guess where I am at at the\nmoment is that RDF is an expensive unnecessary complication for today&#39;s\nsoftware languages and techniques. If we replaced all of those\ntechniques with RDF-centric reasoning-based languages RDF might tip the\nbalance towards being useful.\n\nI&#39;m a conservative kind of guy who sees a system that works today and\ncan work well with RDF-based systems, and I guess I don&#39;t see the\nimpetus for change. However I can also see that developers pushing for\nan RDF tipping point might eventually gather enough RDF data to make the\nreasoning-based approach compelling. I suppose I&#39;ll have to think on it\nfor another few years.\n\nI am wary of RDF&#39;s lack of an internal architectural style to avoid\nvocabulary proliferation. I think it will need to develop ways of\ndeveloping communities around particular vocabularies, including the\nextension of those vocabularies. I don&#39;t think RDF successfully\nleverages REST&#39;s style in dealing with this aspect of its evolution, and\nI have a gut feel that the way RDF interacts with namepaces and\nuniversality will all end in tears. For now I will continue to develop\nwithout RDF. Perhaps after I see a few examples of dominant RDF\nvocabularies evolving and seeing real popular use on the web over the\ncourse of a decade or so I&#39;ll have cause to change my mind.\n\nBenjamin.\n\n\n\n"}}
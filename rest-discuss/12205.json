{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":198897688,"authorName":"Dong Liu","from":"Dong Liu &lt;edongliu@...&gt;","profile":"edonliu","replyTo":"SENDER","senderId":"06ohh0pbRjsXKoVI9OjnikNDsWVD8-ktp_O_0MBDVZvDoEUMtn-Vn2B8soU0Kj9KkX5d8QP6BiC6_P9OkPwgLuXoBjc","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Re: Reliable HTTP","postDate":"1236356832","msgId":12205,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGU3OGJkYmMwMDkwMzA2MDgyN283MTVlNzgwNnhjNjQzY2U1NzUwM2ZiMzJhQG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PDIwMDkwMzA2MTIwNjUzLkdBMTE5NTVAa2xhbmdyYXVtLnBsYXNtYXN0dXJtLm9yZz4=","referencesHeader":"PDQxMDQ3Ny4xOTQ1OC5xbUB3ZWIyODMwNC5tYWlsLnVrbC55YWhvby5jb20+CSA8MjAwOTAzMDYxMjA2NTMuR0ExMTk1NUBrbGFuZ3JhdW0ucGxhc21hc3R1cm0ub3JnPg=="},"prevInTopic":12204,"nextInTopic":12206,"prevInTime":12204,"nextInTime":12206,"topicId":208,"numMessagesInTopic":32,"msgSnippet":"I am not sure if this scenario is proper for the reliability of HTTP. Both HTTP 1.0 and 1.1 have comments on such scenarios. ... Cheers, Dong On Fri, Mar 6,","rawEmail":"Return-Path: &lt;edongliu@...&gt;\r\nX-Sender: edongliu@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 70566 invoked from network); 6 Mar 2009 16:27:13 -0000\r\nX-Received: from unknown (69.147.108.201)\n  by m2.grp.re1.yahoo.com with QMQP; 6 Mar 2009 16:27:13 -0000\r\nX-Received: from unknown (HELO wa-out-1112.google.com) (209.85.146.182)\n  by mta2.grp.re1.yahoo.com with SMTP; 6 Mar 2009 16:27:13 -0000\r\nX-Received: by wa-out-1112.google.com with SMTP id j37so308800waf.17\n        for &lt;rest-discuss@yahoogroups.com&gt;; Fri, 06 Mar 2009 08:27:13 -0800 (PST)\r\nMIME-Version: 1.0\r\nX-Received: by 10.114.102.1 with SMTP id z1mr1601715wab.186.1236356832813; Fri, \n\t06 Mar 2009 08:27:12 -0800 (PST)\r\nIn-Reply-To: &lt;20090306120653.GA11955@...&gt;\r\nReferences: &lt;410477.19458.qm@...&gt;\n\t &lt;20090306120653.GA11955@...&gt;\r\nDate: Fri, 6 Mar 2009 10:27:12 -0600\r\nMessage-ID: &lt;e78bdbc00903060827o715e7806xc643ce57503fb32a@...&gt;\r\nTo: Rest Discussion Group &lt;rest-discuss@yahoogroups.com&gt;\r\nCc: pagaltzis@..., seandkennedy@...\r\nContent-Type: multipart/alternative; boundary=001636458d88d5e8f7046475c19f\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Dong Liu &lt;edongliu@...&gt;\r\nSubject: Re: [rest-discuss] Re: Reliable HTTP\r\nX-Yahoo-Group-Post: member; u=198897688; y=oB2A2cTikmEptMr4zvn3_8xdcfsaSW7mIywDLvdAf9Pkew\r\nX-Yahoo-Profile: edonliu\r\n\r\n\r\n--001636458d88d5e8f7046475c19f\r\nContent-Type: text/plain; charset=windows-1252\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nI am not sure if this scenario is proper for the reliability of HTTP.\nBoth =\r\nHTTP 1.0 and 1.1 have comments on such scenarios.\n1.0:\n\n&gt; Note: If the clie=\r\nnt is sending data, server implementations on TCP\n&gt;      should be careful =\r\nto ensure that the client acknowledges receipt\n&gt;      of the packet(s) cont=\r\naining the response prior to closing the\n&gt;      input connection.\n&gt;\n1.1:\n\n&gt;=\r\n A client, server, or proxy MAY close the transport connection at any\n&gt;   t=\r\nime. For example, a client might have started to send a new request\n&gt;   at =\r\nthe same time that the server has decided to close the &quot;idle&quot;\n&gt;   connectio=\r\nn. From the server&#39;s point of view, the connection is being\n&gt;   closed whil=\r\ne it was idle, but from the client&#39;s point of view, a\n&gt;   request is in pro=\r\ngress.\n&gt;\n&gt;   This means that clients, servers, and proxies MUST be able to =\r\nrecover\n&gt;   from asynchronous close events. Client software SHOULD reopen t=\r\nhe\n&gt;   transport connection and retransmit the aborted sequence of requests=\r\n\n&gt;   without user interaction so long as the request sequence is\n&gt;   idempo=\r\ntent (see section 9.1.2). Non-idempotent methods or sequences\n&gt;   MUST NOT =\r\nbe automatically retried, although user agents MAY offer a\n&gt;   human operat=\r\nor the choice of retrying the request(s). Confirmation by\n&gt;   user-agent so=\r\nftware with semantic understanding of the application\n&gt;   MAY substitute fo=\r\nr user confirmation. The automatic retry SHOULD NOT\n&gt;   be repeated if the =\r\nsecond sequence of requests fails.\n&gt;\n&gt;   Servers SHOULD always respond to a=\r\nt least one request per connection,\n&gt;   if at all possible. Servers SHOULD =\r\nNOT close a connection in the\n&gt;   middle of transmitting a response, unless=\r\n a network or client failure\n&gt;   is suspected.\n&gt;\n\nCheers,\n\nDong\n\n\nOn Fri, M=\r\nar 6, 2009 at 6:06 AM, Aristotle Pagaltzis &lt;pagaltzis@...&gt;\nwrote:\n&gt; * Se=\r\nan Kennedy &lt;seandkennedy@...&gt; [2009-03-05 16:25]:\n&gt;\n&gt;&gt; I have a sim=\r\nple q: if TCP is a reliable protocol and HTTP uses\n&gt;&gt; TCP, how come HTTP is=\r\n viewed as unreliable?\n&gt;\n&gt; You=92re getting your layers mixed up.\n&gt;\n&gt; TCP i=\r\ns a reliable transport protocol; HTTP is an unreliable\n&gt; application protoo=\r\ncol. A reliable transport will do what=92s\n&gt; necessary to ensure that all t=\r\nhe bytes sent by either side will\n&gt; reach the other side, and in the right =\r\norder. But how that stream\n&gt; of bytes is interpreted is a question of the a=\r\npplication\n&gt; protocol, which is the level at which HTTP resides, and HTTP\n&gt;=\r\n makes no guarantees about how HTTP requests will be processed.\n&gt;\n&gt; F.ex. i=\r\nf you send a POST request, the server might close the\n&gt; connection before s=\r\nending you a result =96 no timeout or anything,\n&gt; the server just shuts dow=\r\nn the connection as soon as it receives\n&gt; your request. As far as the TCP l=\r\nayer is concerned, everything is\n&gt; in perfect shape: all bytes sent by both=\r\n sides are received and\n&gt; and the connection is closed properly. However, y=\r\nou still have no\n&gt; idea whether the POST request was processed and what the=\r\n result\n&gt; was, because in terms of HTTP semantics, no response was sent.\n&gt;\n=\r\n&gt; Regards,\n&gt; --\n&gt; Aristotle Pagaltzis // &lt;http://plasmasturm.org/&gt;\n&gt; \n\n\n\n--=\r\n \nhttp://dongnotes.blogspot.com/\n\r\n--001636458d88d5e8f7046475c19f\r\nContent-Type: text/html; charset=windows-1252\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nI am not sure if this scenario is proper for the reliability of HTTP. &lt;br&gt;B=\r\noth HTTP 1.0 and 1.1 have comments on such scenarios. &lt;br&gt;1.0: &lt;br&gt;&lt;blockqu=\r\note style=3D&quot;border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt=\r\n 0.8ex; padding-left: 1ex;&quot; class=3D&quot;gmail_quote&quot;&gt;\nNote: If the client is s=\r\nending data, server implementations on TCP&lt;br&gt; =A0 =A0 =A0should be careful=\r\n to ensure that the client acknowledges receipt&lt;br&gt; =A0 =A0 =A0of the packe=\r\nt(s) containing the response prior to closing the&lt;br&gt; =A0 =A0 =A0input conn=\r\nection.&lt;br&gt;\n&lt;/blockquote&gt;1.1:&lt;br&gt;&lt;blockquote style=3D&quot;border-left: 1px soli=\r\nd rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;&quot; class=\r\n=3D&quot;gmail_quote&quot;&gt;A client, server, or proxy MAY close the transport connect=\r\nion at any&lt;br&gt;\n =A0 time. For example, a client might have started to send =\r\na new request&lt;br&gt; =A0 at the same time that the server has decided to close=\r\n the &quot;idle&quot;&lt;br&gt; =A0 connection. From the server&#39;s point of vi=\r\new, the connection is being&lt;br&gt;\n =A0 closed while it was idle, but from the=\r\n client&#39;s point of view, a&lt;br&gt; =A0 request is in progress.&lt;br&gt;&lt;br&gt; =A0 =\r\nThis means that clients, servers, and proxies MUST be able to recover&lt;br&gt; =\r\n=A0 from asynchronous close events. Client software SHOULD reopen the&lt;br&gt;\n =\r\n=A0 transport connection and retransmit the aborted sequence of requests&lt;br=\r\n&gt; =A0 without user interaction so long as the request sequence is&lt;br&gt; =A0 i=\r\ndempotent (see section 9.1.2). Non-idempotent methods or sequences&lt;br&gt; =A0 =\r\nMUST NOT be automatically retried, although user agents MAY offer a&lt;br&gt;\n =\r\n=A0 human operator the choice of retrying the request(s). Confirmation by&lt;b=\r\nr&gt; =A0 user-agent software with semantic understanding of the application&lt;b=\r\nr&gt; =A0 MAY substitute for user confirmation. The automatic retry SHOULD NOT=\r\n&lt;br&gt;\n =A0 be repeated if the second sequence of requests fails.&lt;br&gt;&lt;br&gt; =A0=\r\n Servers SHOULD always respond to at least one request per connection,&lt;br&gt; =\r\n=A0 if at all possible. Servers SHOULD NOT close a connection in the&lt;br&gt; =\r\n=A0 middle of transmitting a response, unless a network or client failure&lt;b=\r\nr&gt;\n =A0 is suspected.&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;Cheers,&lt;br&gt;&lt;br&gt;Dong &lt;br&gt;&lt;br&gt;&lt;br&gt;O=\r\nn Fri, Mar 6, 2009 at 6:06 AM, Aristotle Pagaltzis &lt;&lt;a href=3D&quot;mailto:pa=\r\ngaltzis@...&quot;&gt;pagaltzis@...&lt;/a&gt;&gt; wrote:&lt;br&gt;&gt; * Sean Kennedy &lt;=\r\n&lt;a href=3D&quot;mailto:seandkennedy@...&quot;&gt;seandkennedy@...&lt;/a&gt;&gt=\r\n; [2009-03-05 16:25]:&lt;br&gt;\n&gt;&lt;br&gt;&gt;&gt; I have a simple q: if TCP is a r=\r\neliable protocol and HTTP uses&lt;br&gt;&gt;&gt; TCP, how come HTTP is viewed as =\r\nunreliable?&lt;br&gt;&gt;&lt;br&gt;&gt; You=92re getting your layers mixed up.&lt;br&gt;&gt;&lt;=\r\nbr&gt;&gt; TCP is a reliable transport protocol; HTTP is an unreliable&lt;br&gt;\n&gt=\r\n; application protoocol. A reliable transport will do what=92s&lt;br&gt;&gt; nece=\r\nssary to ensure that all the bytes sent by either side will&lt;br&gt;&gt; reach t=\r\nhe other side, and in the right order. But how that stream&lt;br&gt;&gt; of bytes=\r\n is interpreted is a question of the application&lt;br&gt;\n&gt; protocol, which i=\r\ns the level at which HTTP resides, and HTTP&lt;br&gt;&gt; makes no guarantees abo=\r\nut how HTTP requests will be processed.&lt;br&gt;&gt;&lt;br&gt;&gt; F.ex. if you send a=\r\n POST request, the server might close the&lt;br&gt;&gt; connection before sending=\r\n you a result =96 no timeout or anything,&lt;br&gt;\n&gt; the server just shuts do=\r\nwn the connection as soon as it receives&lt;br&gt;&gt; your request. As far as th=\r\ne TCP layer is concerned, everything is&lt;br&gt;&gt; in perfect shape: all bytes=\r\n sent by both sides are received and&lt;br&gt;&gt; and the connection is closed p=\r\nroperly. However, you still have no&lt;br&gt;\n&gt; idea whether the POST request =\r\nwas processed and what the result&lt;br&gt;&gt; was, because in terms of HTTP sem=\r\nantics, no response was sent.&lt;br&gt;&gt;&lt;br&gt;&gt; Regards,&lt;br&gt;&gt; --&lt;br&gt;&gt; A=\r\nristotle Pagaltzis // &lt;&lt;a href=3D&quot;http://plasmasturm.org/&quot;&gt;http://plasma=\r\nsturm.org/&lt;/a&gt;&gt;&lt;br&gt;\n&gt; &lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;-- &lt;br&gt;&lt;a href=3D&quot;http://dongno=\r\ntes.blogspot.com/&quot;&gt;http://dongnotes.blogspot.com/&lt;/a&gt;&lt;br&gt;&lt;br&gt;\n\r\n--001636458d88d5e8f7046475c19f--\r\n\n"}}
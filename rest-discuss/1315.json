{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":87113616,"authorName":"S. Mike Dierken","from":"&quot;S. Mike Dierken&quot; &lt;mdierken@...&gt;","profile":"mdierken","replyTo":"SENDER","senderId":"KiYiuYKwOAbS1-gXjJhVpa7p6gFOk03DRW3rOxXSlMa0FAH1VEFhObwRB9uO_-On-NIxXQ1kgQmqVX5hQGwKUQ6YUJl4tk6aczT4GppOVA","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] REST Questions","postDate":"1022137319","msgId":1315,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PE9FMzdUVnV5MTZ4c29JSXpRdE8wMDAwNDljYkBob3RtYWlsLmNvbT4=","referencesHeader":"PDNDRUMyOEJBLkQ2QkQwMjVBQG1pdHJlLm9yZz4="},"prevInTopic":1314,"nextInTopic":1316,"prevInTime":1314,"nextInTime":1316,"topicId":1311,"numMessagesInTopic":9,"msgSnippet":"... From: Roger L. Costello  ... Just make sure that you don t merge REST and HTTP. REST is just a summary of the key aspects of the Web","rawEmail":"Return-Path: &lt;mdierken@...&gt;\r\nX-Sender: mdierken@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_0_3_2); 23 May 2002 06:58:34 -0000\r\nReceived: (qmail 31145 invoked from network); 23 May 2002 06:58:33 -0000\r\nReceived: from unknown (66.218.66.218)\n  by m11.grp.scd.yahoo.com with QMQP; 23 May 2002 06:58:33 -0000\r\nReceived: from unknown (HELO hotmail.com) (64.4.16.94)\n  by mta3.grp.scd.yahoo.com with SMTP; 23 May 2002 06:58:33 -0000\r\nReceived: from mail pickup service by hotmail.com with Microsoft SMTPSVC;\n\t Wed, 22 May 2002 23:58:33 -0700\r\nTo: &lt;rest-discuss@yahoogroups.com&gt;\r\nReferences: &lt;3CEC28BA.D6BD025A@...&gt;\r\nSubject: Re: [rest-discuss] REST Questions\r\nDate: Thu, 23 May 2002 00:01:59 -0700\r\nMIME-Version: 1.0\r\nContent-Type: text/plain;\n\tcharset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: 7bit\r\nX-Priority: 3\r\nX-MSMail-Priority: Normal\r\nX-Mailer: Microsoft Outlook Express 5.50.4133.2400\r\nX-MimeOLE: Produced By Microsoft MimeOLE V5.50.4133.2400\r\nMessage-ID: &lt;OE37TVuy16xsoIIzQtO000049cb@...&gt;\r\nX-OriginalArrivalTime: 23 May 2002 06:58:33.0812 (UTC) FILETIME=[410C9940:01C20227]\r\nFrom: &quot;S. Mike Dierken&quot; &lt;mdierken@...&gt;\r\nX-Yahoo-Group-Post: member; u=87113616\r\nX-Yahoo-Profile: mdierken\r\n\r\n\n----- Original Message -----\nFrom: &quot;Roger L. Costello&quot; &lt;costello@...&gt;\n\n&gt;\n&gt; (a) A service to enable a client to get a list of parts.\n&gt; (b) A service to enable a client to get detailed information about a\n&gt; particular part.\n&gt; (c) A service to enable a client to submit a Purchase Order (PO).\n&gt;\n&gt; Clearly, an HTTP GET is the way to implement services (a) and (b).  For\n&gt; service (c) a client will want to do an HTTP POST.  (Correct?)  I would\n&gt; like to consider further how service (c) would be implemented in a\n&gt; REST-ful manner.\nJust make sure that you don&#39;t merge REST and HTTP.\nREST is just a summary of the key aspects of the Web that helped it succeed\nand keep it strong.\nHTTP is one of the Web protocols - which exhibits the most of these aspects.\n\n&gt;\n&gt; My understanding is that an XML Schema (or DTD) would be created by\n&gt; Parts Depot, Inc which defines the format that the PO must take.  A\n&gt; client then will create a PO instance document which conforms to the XML\n&gt; Schema, and submit that XML document as the payload of an HTTP POST.\n&gt; Correct?\nYes. The POST identifies the format being sent via the Content-Type header.\nThe receiver can do any mappings it chooses - if sensible.\n\n&gt; With a SOAP implementation of this service the only difference\n&gt; would be that the XML document would be wrapped within a SOAP envelope\n&gt; (and there may be a SOAP header).  Is this a correct assessment of the\n&gt; differences between REST and SOAP for this service?\nThe HTTP approach would have an HTTP header with &quot;Content-Type:\napplication/purchase-order&quot;, so HTTP aware firewalls, gateways, etc. can do\nuseful things.\nThe SOAP approach would require cracking both HTTP (and ignoring the http\nheaders) and XML to do the same thing.\n\n&gt; Is the ability to\n&gt; add headers in SOAP going to be an advantage over REST in this\n&gt; scenario?\nREST doesn&#39;t talk too much about headers - only to the extent that they\nshouldn&#39;t be used for resource or method identification. You can qualify\noperations via headers, like in HTTP you can &quot;GET if-none-match&quot; and stuff.\nHTTP does talk about though, and SOAP might have a more rigorous model for\nheaders. Or it might not.\n\n\n&gt; 2. Distinguishing characteristics of REST?\n&gt;    http://www.parts-depot.com?part=00345\n&gt;    http://www.parts-depot.com/part/00345\n&gt; Why is the later REST-ful but the former is not?  May I conclude that in\n&gt; a REST-ful system you would not use URLs with query strings?\nBoth are equivalent to REST and to HTTP (even though &#39;normalizing&#39; query\nstrings is difficult).\nAn HTTP based URI has path segments and query strings. The combination of\nthese is the full resource identifier.\nURI also have parameters like http://host/path/path;param/path;param?query -\nbut these are rarely used and not all libraries/clients/servers parse them\nproperly.\nBoth query strings and segment parameters are a convenience for the resource\nmodel implementation on the server. They generally should not be constructed\nby the client - they should be provided as opaque blobs via some response\nbody (likely in XML, but not necessarily).\n\n&gt;\n&gt; Can someone enumerate the distinguishing characteristics of a REST\n&gt; system?  In other words, how will I recognize a REST service when I see\n&gt; one?\n - addressable resources\n - uniform interfaces that apply to all resources\n - stateless messages\n - &#39;representations&#39; - multiple content types accepted or sent\n\nIf you implement a networked system that supported these concepts you&#39;ll\nhave a decent foundation - regardless of the protocol oor technology used.\n\n\n\n"}}
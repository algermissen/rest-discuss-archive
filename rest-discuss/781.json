{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":5226678,"authorName":"Jason Diamond","from":"&quot;Jason Diamond&quot; &lt;jason@...&gt;","profile":"injektilo12","replyTo":"SENDER","senderId":"byE0N9ST4eNGdgzTD8bVlji29T4D-yALUm3QbAk_Q_7uzZSwpWpgci62BerxY-x8zDT5wjDQ0j39oHoyLKR72w4oUwi4AX6oaHOB0g","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Fw: WRDL","postDate":"1014555158","msgId":781,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDAwNjQwMWMxYmQzMiQyYTJkYmVhMCQ2NDAxYThjMEBpbmpla3RpbG8+"},"prevInTopic":0,"nextInTopic":783,"prevInTime":780,"nextInTime":782,"topicId":781,"numMessagesInTopic":3,"msgSnippet":"Is it appropriate to send attachments to the list? If anybody s interested in seeing the code, just let me know. ... From: Paul Prescod  ","rawEmail":"Return-Path: &lt;jason@...&gt;\r\nX-Sender: jason@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: unknown); 24 Feb 2002 12:52:32 -0000\r\nReceived: (qmail 21557 invoked from network); 24 Feb 2002 12:52:31 -0000\r\nReceived: from unknown (216.115.97.171)\n  by m9.grp.snv.yahoo.com with QMQP; 24 Feb 2002 12:52:31 -0000\r\nReceived: from unknown (HELO epervier.cqhost.net) (216.167.57.201)\n  by mta3.grp.snv.yahoo.com with SMTP; 24 Feb 2002 12:52:31 -0000\r\nReceived: from injektilo (ca-crlsbd-u2-c5b-352.crlsca.adelphia.net [24.55.53.96])\n\tby virtualepervier.cqhost.net (8.10.2/8.10.2) with SMTP id g1OCqEE22838\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Sun, 24 Feb 2002 07:52:25 -0500\r\nMessage-ID: &lt;006401c1bd32$2a2dbea0$6401a8c0@injektilo&gt;\r\nTo: &lt;rest-discuss@yahoogroups.com&gt;\r\nSubject: Fw: WRDL\r\nDate: Sun, 24 Feb 2002 04:52:38 -0800\r\nMIME-Version: 1.0\r\nContent-Type: text/plain;\n\tcharset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: 7bit\r\nX-Priority: 3\r\nX-MSMail-Priority: Normal\r\nX-Mailer: Microsoft Outlook Express 6.00.2600.0000\r\nX-MimeOLE: Produced By Microsoft MimeOLE V6.00.2600.0000\r\nFrom: &quot;Jason Diamond&quot; &lt;jason@...&gt;\r\nX-Yahoo-Group-Post: member; u=5226678\r\nX-Yahoo-Profile: injektilo12\r\n\r\nIs it appropriate to send attachments to the list? If anybody&#39;s interested\nin seeing the code, just let me know.\n\n----- Original Message -----\nFrom: &quot;Paul Prescod&quot; &lt;paul@...&gt;\nTo: &quot;Jason Diamond&quot; &lt;jason@...&gt;\nSent: Sunday, February 24, 2002 4:22 AM\nSubject: Re: WRDL\n\n\n&gt; I&#39;ll respond now and then we can forward the messages to the mailing\n&gt; list if we decide to.\n&gt;\n&gt; Jason Diamond wrote:\n&gt; &gt;\n&gt; &gt; Hi, Paul.\n&gt; &gt;\n&gt; &gt; I&#39;m sick so am stuck at home and thought I would take advantage of it\nand do\n&gt; &gt; some experimentation. I don&#39;t really start to understand something until\nI\n&gt; &gt; use it. And REST/WRDL is hard enough without something concrete for me\nto\n&gt; &gt; play with as it is. :-)\n&gt; &gt;\n&gt; &gt; I&#39;ve hacked together some XSLT/C# to generate a proxy class from your\n&gt; &gt; meerkat.wrdl file. It doesn&#39;t do much yet but that will change.\n&gt;\n&gt; Great stuff! I don&#39;t suppose you&#39;ll buy my suggestion that you should\n&gt; &quot;regress&quot; to Java for portability and popularity reasons. ;) Either way,\n&gt; I&#39;m very happy because I would want to see C# support eventually anyhow.\n&gt;\n&gt; &gt; I don&#39;t know if you have the .NET Framework installed (or even if you\nrun\n&gt; &gt; Windows) but if you do, you should be able to type nmake in the\ndirectory\n&gt; &gt; containing my attached files and it will generate the proxy\n(meerkat.cs),\n&gt; &gt; build a test executable that fetches the Eclectic XML posts for the past\n&gt; &gt; seven days, and then saves it to a file called response.xml. All the\n&gt; &gt; generated files are included just in case you can&#39;t build them.\n&gt;\n&gt; Seems logical to me. One virtue of the .NET framework is that it has\n&gt; XPath built in. XPath would have to be an extra dependency in Java. But\n&gt; you haven&#39;t gotten to the references bit yet...\n&gt;\n&gt; &gt; &gt;From an RPC point-of-view, I don&#39;t think that meerkat makes a really\nusable\n&gt; &gt; API. There&#39;s too many (mutually exclusive) parameters for the same\nendpoint.\n&gt; &gt; I suspect that it doesn&#39;t make a good REST service, either. Shouldn&#39;t\neach\n&gt; &gt; channel, mob, and profile have its own URI?\n&gt;\n&gt; Yes. At this point I&#39;m just happy that there is any openly available\n&gt; XML/URI/HTTP-based service, whether ot not it is well designed from a\n&gt; REST point of view. Google had an XML service for a while but it&#39;s gone.\n&gt;\n&gt; One could also imagine talking to HTML, as it is possible to make a DOM\n&gt; from HTML and in most toolkits it should be possible to search it with\n&gt; an XPath. The tricky bit of course is distinguishing one href from\n&gt; another. It looks to extract referenced links in Google it is relatively\n&gt; safe to use this pattern:\n&gt;\n&gt; &quot;&lt;p&gt;&lt;a href=&quot;\n&gt;\n&gt; which would be an XPath like &quot;the first node children of paragraphs\n&gt; where the node is an &#39;a&#39;&quot; (as opposed to the first &quot;a&quot; children of\n&gt; paragraphs). Some of Google&#39;s other href&#39;s have class attributes.\n&gt; And of course the cache link always has the text &quot;Cached&quot;.\n&gt;\n&gt; It would be really great to have a read-write web service but there are\n&gt; reasons that people don&#39;t tend to open up read-write access to websites.\n&gt; ;) I&#39;ve been toying with the idea of a UDDI bridge.\n&gt;\n&gt; Looking at your home page you might consider REST services for POP3 or\n&gt; DNS. Those would be really cool. POP3 especially, because there are many\n&gt; people with a reverence for the mail system so over a few years I&#39;d like\n&gt; to recreate much of its infrastructure based on HTTP, not because I\n&gt; really think HTTP will compete with SMTP/IMAP/POP commercially\n&gt; (installed base is too large) but to show people who are building apps\n&gt; that are &quot;mail-like&quot; that they can use HTTP.\n&gt;\n&gt; &gt; By the way, the correct query name for the &quot;flavor&quot; parameter is &quot;_fl&quot;.\nAnd\n&gt; &gt; shouldn&#39;t the value of that parameter be fixed to &quot;xml&quot; somehow so that\nwe\n&gt; &gt; can always do XPath on the response?\n&gt;\n&gt; Good point. And yes.\n&gt;\n&gt; &gt; Take a look at meerkat.cs. That&#39;s the file that was generated. The first\n&gt; &gt; thing that jumps out at me is that the query parameter names are\nextremely\n&gt; &gt; terse. Would an optional parameter to specify a more programmer-friendly\n&gt; &gt; name be appropriate?\n&gt;\n&gt; I considered that and then thought: &quot;maybe we should just push this back\n&gt; on service developers to make nicer URI parameter names.&quot; After all, _fl\n&gt; isn&#39;t very friendly even in your browser bar. Still, your next point is\n&gt; very important:\n&gt;\n&gt; &gt; ... It might be more important for header inputs since\n&gt; &gt; those tend to have dashes in them and most programming languages don&#39;t\n&gt; &gt; support those in identifiers.\n&gt;\n&gt; Agreed.\n&gt;\n&gt; &quot;friendly-name&quot;? &quot;api-name&quot;? If api-names were required to be unique\n&gt; across queries and headers then we could unify the queries and header\n&gt; namespaces for languages where parameters matter (e.g. those with\n&gt; optional arguments).\n&gt;\n&gt; Don&#39;t forget to provide an API for extra query and header parameters.\n&gt;\n&gt; &gt; Do you have any ideas on how optional parameters could be handled for\n&gt; &gt; languages that don&#39;t support them (like C#)? I hacked in some checks for\n&gt; &gt; null and 0 but don&#39;t like that because with that we can never pass in\nnull\n&gt; &gt; or 0 to a resource that allows those values.\n&gt;\n&gt; Yeah, 0 is a problem.\n&gt;\n&gt; &gt; ... I can think of three other ways\n&gt; &gt; to get around this but they all involve a lot of work:\n&gt; &gt;\n&gt; &gt; - Add a boolean parameter for each optional parameter to the method\n&gt; &gt; signature. If false, the optional parameter is ignored.\n&gt; &gt;\n&gt; &gt; - Generate lots of overloads. (This doesn&#39;t seem usable, though.)\n&gt; &gt;\n&gt; &gt; - Generate some sort of &quot;parameters&quot; class. Like MeerkatGetInputs,\nperhaps.\n&gt; &gt; It could have getters, setters, and clearers for each parameter. It\nwould\n&gt; &gt; keep track of which parameters were never set internally. An instance of\n&gt; &gt; that class would be passed into the method instead of all the parameters\n&gt; &gt; individually.\n&gt; &gt;\n&gt; &gt; These are all just implementation details and don&#39;t really affect WRDL\nbut\n&gt; &gt; it&#39;s something to think about.\n&gt;\n&gt; The parameters class is not unlike the sort of message you have to build\n&gt; to use .NET My services. As web services move more and more to\n&gt; &quot;messaging&quot; style it will be pretty common. MeerkatPOSTInputs could also\n&gt; hold the DOM for any XML inputs to POST or PUT. i.e. one property per\n&gt; parameter/header and one for the bound XML document.\n&gt;\n&gt; &lt;aside&gt;There is a fundamental disconnect between languages that only\n&gt; support ordered-parameter arguments and good networking &quot;best practice&quot;\n&gt; where extensibility is paramount. RPC is bad enough architecturally\n&gt; without making it even worse by making parameter orders significant as\n&gt; SOAP and (especially!) XML-RPC services tend to. I don&#39;t really\n&gt; understand why in this day and age, optional and named parameters are\n&gt; considered a fancy language feature. IIRC, Ada had them in the\n&gt; 80s.&lt;/aside&gt;\n&gt;\n&gt; &gt; I&#39;m not doing anything with representations yet. I&#39;m just returning a\n&gt; &gt; generic WebResponse. But I want to be able to extract the links from the\n&gt; &gt; response. In your meerkat.wrdl file, you have two references with the\nsame\n&gt; &gt; names and patterns. Is that a mistake? And should they not have the\nleading\n&gt; &gt; slash?\n&gt;\n&gt; Right. Meerkat has a link and a url. I have a typo in the meerkate.wrdl.\n&gt;\n&gt; DTD is here:\n&gt;\n&gt;  * http://www.oreillynet.com/meerkat/dtd/meerkat_xml_flavour.dtd\n&gt;\n&gt; You might as well send me Meerkat.wsdl when you&#39;ve observed it to work.\n&gt; ;)\n&gt;\n&gt; &gt; This is what I suspect the reference for story links should look like:\n&gt; &gt;\n&gt; &gt; &lt;reference name=&quot;story&quot; match=&quot;story/link&quot; resourceType=&quot;ANY&quot; /&gt;\n&gt; &gt;\n&gt; &gt; The problem is that there are multiple stories and, hence, multiple\nlinks.\n&gt; &gt; So I can return a collection of resources. But what if I wanted to\nextract a\n&gt; &gt; specific one? This is where I think my XSLT key analogy would be\nperfect.\n&gt; &gt;\n&gt; &gt; &lt;reference name=&quot;story&quot; match=&quot;story/link&quot;\nuse=&quot;preceding-sibling::title&quot;\n&gt; &gt; resourceType=&quot;ANY&quot; /&gt;\n&gt;\n&gt; Now I get it. Excellent idea! You could even index the same URI by\n&gt; multiple keys. It&#39;s a little bit more complicated than what I was\n&gt; thinking but much more useful.\n&gt;\n&gt; BTW, I&#39;d spell that &quot;../title&quot; The abbreviated form is a little bit more\n&gt; readable and it&#39;s a little bit less dependent on ordering (in case the\n&gt; DTD ever changes).\n&gt;\n&gt; &gt;...\n&gt; &gt; Regarding representations: Generating code like your sample API might be\n&gt; &gt; difficult for type-safe languages. If multiple representationTypes can\nbe\n&gt; &gt; returned from a method then we might be forced to have those methods\nreturn\n&gt; &gt; something like System.Object (C#) or java.lang.Object and have the\n&gt; &gt; programmers cast down to whatever they think the correct representation\nis.\n&gt; &gt; I hate that.\n&gt;\n&gt; I think your idea of specifying the representation type to get in the\n&gt; method name is a good one. It&#39;s just a way of triggering the content\n&gt; negotiation in a static-type-safe way.\n&gt;\n&gt; &gt; Why exactly would you want to allow methods to return different types of\n&gt; &gt; representations anyways? The programmer probably knows exactly what type\nhe\n&gt; &gt; wants, wouldn&#39;t you think?\n&gt;\n&gt; Which programmer are you talking about? The web service provider might\n&gt; allow fetching data in RSS 0.9 versus RSS 1.0 versus XMLNews. Or they\n&gt; might have a a biztalk PO versus an ebxml versus rosettanet. It is\n&gt; probably useful for the semantic web not to give them all unique URIs\n&gt; otherwise you need to somehow broadcast that they are &quot;really&quot; the same\n&gt; thing (which you can do with RDF but still...).\n&gt;\n&gt; &gt; ... I suppose that we could generate a separate\n&gt; &gt; method for each representation type that was possible. So the meerkat\nproxy\n&gt; &gt; might have GetXML, GetRSS, etc. We would just combine the method name\nwith\n&gt; &gt; the representationType name.\n&gt;\n&gt; Yes, I like that idea.\n&gt;\n&gt; &gt; OK, I think I&#39;ve babbled for long enough. I hope you find these comments\n&gt; &gt; helpful.\n&gt;\n&gt; Very helpful! I appreciate all of your effort. The fact that our\n&gt; instincts line up so well reinforces my believe that WRDL is pretty\n&gt; logical -- it&#39;s like we&#39;re discovering it instead of creating it.\n&gt; Basically it is just a concrete syntax for statically type declaring\n&gt; bits of the existing web architecture.\n&gt;\n&gt;  Paul Prescod\n&gt;\n\n\n"}}
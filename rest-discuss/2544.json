{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":121832671,"authorName":"inthedarkplace","from":"&quot;inthedarkplace&quot; &lt;inthedarkplace@...&gt;","profile":"inthedarkplace","replyTo":"SENDER","senderId":"M448nGCO3uo_mBbkqbp1GC9Hf4BxV5wp4khjBOdJXLnvC_5EhvXEn52aWTTWkzETUYkTBuCIlxCpPHIKXEQ77AWfHmuogG7f0miTGLofEaiQEQ","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: Rediscovering Web Architecture  from first principles","postDate":"1031984743","msgId":2544,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGFsdWtwNytuYTVoQGVHcm91cHMuY29tPg==","inReplyToHeader":"PDAwZmYwMWMyNWJhMSQ0MWRmOTgzMCRhMDAwYThjMEBzZWFpcnRobGFwdG9wPg=="},"prevInTopic":2543,"nextInTopic":2545,"prevInTime":2543,"nextInTime":2545,"topicId":2540,"numMessagesInTopic":7,"msgSnippet":"Seairth, Yeah ,I definitely think you should use POST to create resources and never PUT (though the RFC says differently). There are many reasons why you want","rawEmail":"Return-Path: &lt;inthedarkplace@...&gt;\r\nX-Sender: inthedarkplace@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_1_1_3); 14 Sep 2002 06:25:46 -0000\r\nReceived: (qmail 90547 invoked from network); 14 Sep 2002 06:25:46 -0000\r\nReceived: from unknown (66.218.66.218)\n  by m12.grp.scd.yahoo.com with QMQP; 14 Sep 2002 06:25:46 -0000\r\nReceived: from unknown (HELO n22.grp.scd.yahoo.com) (66.218.66.78)\n  by mta3.grp.scd.yahoo.com with SMTP; 14 Sep 2002 06:25:46 -0000\r\nReceived: from [66.218.67.190] by n22.grp.scd.yahoo.com with NNFMP; 14 Sep 2002 06:25:45 -0000\r\nDate: Sat, 14 Sep 2002 06:25:43 -0000\r\nTo: rest-discuss@yahoogroups.com\r\nSubject: Re: Rediscovering Web Architecture  from first principles\r\nMessage-ID: &lt;alukp7+na5h@...&gt;\r\nIn-Reply-To: &lt;00ff01c25ba1$41df9830$a000a8c0@seairthlaptop&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Length: 5751\r\nX-Mailer: Yahoo Groups Message Poster\r\nFrom: &quot;inthedarkplace&quot; &lt;inthedarkplace@...&gt;\r\nX-Yahoo-Group-Post: member; u=121832671\r\nX-Yahoo-Profile: inthedarkplace\r\n\r\nSeairth,\n\n\nYeah ,I definitely think you should use POST to create resources and \nnever PUT (though the RFC says differently). There are many reasons \nwhy you want to do this:\n\n1) The client should be explicitly aware of resource creation. When \nthe client PUTs a resource they have no way of actually knowing \nwhether they&#39;re simply updating a resource or creating a brand new \nresource. These are two very different things and you should force \nthe client to acknowledge the distinction using POST.\n\n2) Because of the principle of URI opacity, it&#39;s in poor taste to \nlet the client assign URIs to new resources. Only the server should \nknow about URI construction.\n\n3) 90%+ of the time when a new resource is created (eg a purchase \norder, user, document, order) you rely on the database to assign a \nunique ID of the resource. Then, the URL you assign to that resource \nincludes the ID or a hash of the id (eg /purchase-\norders/po321343, /users/hash(social-security-#), /orders/332-43-\n43523) etc. If you use PUT you rarely can enforce this interface.\n\n4) Load balancing. When new resources are created you might want to \nspread them out among many different servers particularly if these \nare temporary resources. If you use PUT you can&#39;t do this because \nthe client decides which machine will contain the resource (or at \nleast process the creation request). This is often a bad idea.\n\n5) It is very easy to enforce security when POST is used against a \nsingle URI for resource creation.\n\n6) I think the RFC is just being flexible. AFAIK, POST as always \nmeant APPEND TO DOCUMENT/PROCESS DOCUMENT and PUT as always meant \nWRITE. \n\nSo, for hopefully the last time, I&#39;d say use POST to mean resource \ncreation and PUT to mean update.\n\n- itdp\n \n--- In rest-discuss@y..., &quot;Seairth Jacobs&quot; &lt;seairth@s...&gt; wrote:\n&gt; First, excellent summary.  There wasn&#39;t a single thing I found to \ndisagree\n&gt; with.  :~)\n&gt; \n&gt; Second, you indicate something towards the end of the post that, \nif I\n&gt; understand you correctly, mirrors a thought I have been having \nlately...\n&gt; \n&gt; From: &quot;Paul Prescod&quot; &lt;paul@p...&gt;\n&gt; &gt;\n&gt; &gt; [deleted]\n&gt; &gt;\n&gt; &gt;    = Resource construction and mutation =\n&gt; &gt;\n&gt; &gt; [deleted]\n&gt; &gt;\n&gt; &gt; POST can handle any operation which changes client-side state in \na\n&gt; &gt; manner that would be inappropriate for GET. But there are two \noperations\n&gt; &gt; that have pretty clear semantics that can be separated out from \nthe mass\n&gt; &gt; of POST-based actions. Sometimes you have a URI and you want to\n&gt; &gt; overwrite its content. For instance you load a document into \nyour word\n&gt; &gt; processor, make a few changes and want to save it back. Or you \nare\n&gt; &gt; maintaining a stock quote service and it is your job to udpdate \nthe\n&gt; &gt; quotes as the most recently quoted price change. PUT allows \nthese. The\n&gt; &gt; other operation is DELETE for destroying resources (i.e. making \nthem\n&gt; &gt; into 404s).\n&gt; \n&gt; You mention using PUT to update a resource, but not to create \none.  In fact,\n&gt; the only mention of creating a resource is by the use of POST.  \nHowever, the\n&gt; HTTP specs state the ability to create a resource with PUT.  But I \nam\n&gt; beginning to wonder if the use of PUT in this manner is less \nRESTful.  I see\n&gt; two scenarios when using POST and PUT, the first being the way \nHTTP allows\n&gt; and the second being the artificially contstrained (but still \nperfectly\n&gt; legal) way that I am beginning to lean towards.\n&gt; \n&gt; Standard HTTP Usage of POST and PUT:\n&gt; \n&gt; 1) POST:\n&gt;     a) Request URI points to an existing resource that will be \nmutated by\n&gt; the contents of the request entity.\n&gt;     b) Request URI points to an existing resource that will use \nthe contents\n&gt; of the request entity to create a new resource.\n&gt; 2) PUT:\n&gt;     a) Request URI points to an existing resource that will be \nentirely\n&gt; replaced by the contents of the request entity (at least from the \nclient&#39;s\n&gt; perspective).\n&gt;     b) Request URI does not point to an existing resource, in \nwhich case the\n&gt; server creates a new resource from the request entity that is \npointed to by\n&gt; the request URI.\n&gt; \n&gt; \n&gt; Constrained Usage of POST and PUT:\n&gt; \n&gt; 1) POST:\n&gt;     a) Request URI points to an existing resource that will be \nmutated by\n&gt; the contents of the request entity.\n&gt;     b) Request URI points to an existing resource that will use \nthe contents\n&gt; of the request entity to create a new resource.  This is the \n*only* method\n&gt; to create a new resource.  If the client wants the new resource to \nbe\n&gt; created with a specific URI associated with it, this can be passed \nin the\n&gt; entity itself (though I wonder about using the Location header in \nthe\n&gt; request).\n&gt; 2) PUT:\n&gt;     a) Request URI points to an existing resource that will be \nentirely\n&gt; replace by the contents of the request entity (at least from the \nclient&#39;s\n&gt; perspective).\n&gt;     b) There is no option (b).  PUT is never used to create a new \nresource.\n&gt; \n&gt; \n&gt; And here is why I am taking this view:  Using PUT to create a \nresource with\n&gt; a request URI just doesn&#39;t make sense.  In all other verbs (GET, \nPOST, and\n&gt; DELETE), the URI must be valid and point to a resource.  This \nmakes sense.\n&gt; You are accessing a resource and you need a valid identifier to do \nit.  But\n&gt; for PUT, this is only required part of the time.  In some cases, \nyou can use\n&gt; PUT with an *invalid* URI (i.e. does not identify a resource) as \nif it were\n&gt; valid.  By using the constrained view, resources can still be \ncreated while\n&gt; simplifying the rules about URI usage at the same time.\n&gt; \n&gt; So, is this a view you were expressing?  Is this view more \nconsistant with\n&gt; REST (simplified interface)?  Or is this just a personal \npreference and not\n&gt; any more or less RESTful than the &quot;traditional&quot; usage of the verbs?\n&gt; \n&gt; ---\n&gt; Seairth Jacobs\n&gt; seairth@s...\n\n\n"}}
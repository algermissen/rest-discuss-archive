{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":198693287,"authorName":"Bill Venners","from":"Bill Venners &lt;bv-svp@...&gt;","profile":"billvenners","replyTo":"SENDER","senderId":"dBSuOPhabdTMZWtBQBYMrSpF3i5AdTSJfctUCiLEpLfe0k4CKxjC4tCa3p6d2IdSGd2_tr-wZSY_dz7lFez9P6YY0CHCZuk","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Resource-Oriented Design (Was: Meaning of stateless)","postDate":"1145577494","msgId":6066,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDVFQzRGMzA4LTFBRjAtNDFCNi04QzNCLUU1QjE2OTAzMUYxMUBhcnRpbWEuY29tPg==","inReplyToHeader":"PDQ0NDdGNTRGLjMwOTAyQGpqNS5uZXQ+","referencesHeader":"PDQ0M0ZGMzFDLjgwMDAxMDlAdmVpY29uLmNvbT4JIDwzNDNlY2IzZTA2MDQxNDEyMzBnNDFjMTMyMWNuYjJhOTM2Y2NiZjUzZGM3ZEBtYWlsLmdtYWlsLmNvbT4gPDExNDUwOTU4OTMuNjk4OC4yNi5jYW1lbEBsb2NhbGhvc3QubG9jYWxkb21haW4+IDw0NDQ0NkNGMC45MDEwMzA4QGpqNS5uZXQ+IDw0RjhGRTQyNi01NEFFLTQ4REQtQUJEMC1FRjU0MzBFNTdBMEFAYXJ0aW1hLmNvbT4gPDQ0NDU4REIyLjcwNzAwMDNAamo1Lm5ldD4gPDQ0NDU5N0QzLjUwMDAwMDJAdmVpY29uLmNvbT4gPDQ0NDU5QzlDLjUwOTAxMDFAamo1Lm5ldD4gPDQ0NDVGNUFDLjkwNTA3QGRlaG9yYS5uZXQ+IDxGQjM4RjREQS0zOURELTREQTctQjMxMy0zOEFDMjlFRERDOTFAYXJ0aW1hLmNvbT4gPDQ0NDY3NDk3LjYwMzAzMDlAdmVpY29uLmNvbT4gPDBBRTA2OTVDLTVDM0YtNDUzQi05MUVBLTgzQTRGRDRCRDhCNUBhcnRpbWEuY29tPiA8NDQ0NzE4RjMuODAyMDgwN0BqajUubmV0PiA8MzIxRDgyQjYtMDcyQS00OEQ4LTgxREEtMjc5MTBDMjA3NzcxQGFydGltYS5jb20+IDw0NDQ3OTBBQS40MDUwODA5QGpqNS5uZXQ+IDwzNTczNzMxMi04MkExLTRDNTUtOTA0QS0yQkY1QUZEQkEzMDBAYXJ0aW1hLmNvbT4gPDQ0NDdGMEQzLjMwNTA5MDFAamo1Lm5ldD4gPDQ0NDdGNTRGLjMwOTAyQGpqNS5uZXQ+"},"prevInTopic":6061,"nextInTopic":6153,"prevInTime":6065,"nextInTime":6067,"topicId":5949,"numMessagesInTopic":44,"msgSnippet":"Hi John, ... That s a good question. The primary reason is not the back button problem, but scalability of my particular project, a network of sites, and how","rawEmail":"Return-Path: &lt;bv-svp@...&gt;\r\nX-Sender: bv-svp@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 98092 invoked from network); 20 Apr 2006 23:58:38 -0000\r\nReceived: from unknown (66.218.66.216)\n  by m19.grp.scd.yahoo.com with QMQP; 20 Apr 2006 23:58:35 -0000\r\nReceived: from unknown (HELO artima2.inetu.net) (209.235.240.43)\n  by mta1.grp.scd.yahoo.com with SMTP; 20 Apr 2006 23:58:23 -0000\r\nReceived: (qmail 32083 invoked by uid 89); 20 Apr 2006 23:57:46 -0000\r\nReceived: from unknown (HELO ?192.168.1.3?) (71.131.203.244)\n  by artima2.inetu.net with SMTP; 20 Apr 2006 23:57:46 -0000\r\nIn-Reply-To: &lt;4447F54F.30902@...&gt;\r\nReferences: &lt;443FF31C.8000109@...&gt;\t &lt;343ecb3e0604141230g41c1321cnb2a936ccbf53dc7d@...&gt; &lt;1145095893.6988.26.camel@...&gt; &lt;44446CF0.9010308@...&gt; &lt;4F8FE426-54AE-48DD-ABD0-EF5430E57A0A@...&gt; &lt;44458DB2.7070003@...&gt; &lt;444597D3.5000002@...&gt; &lt;44459C9C.5090101@...&gt; &lt;4445F5AC.90507@...&gt; &lt;FB38F4DA-39DD-4DA7-B313-38AC29EDDC91@...&gt; &lt;44467497.6030309@...&gt; &lt;0AE0695C-5C3F-453B-91EA-83A4FD4BD8B5@...&gt; &lt;444718F3.8020807@...&gt; &lt;321D82B6-072A-48D8-81DA-27910C207771@...&gt; &lt;444790AA.4050809@...&gt; &lt;35737312-82A1-4C55-904A-2BF5AFDBA300@...&gt; &lt;4447F0D3.3050901@...&gt; &lt;4447F54F.30902@...&gt;\r\nMime-Version: 1.0 (Apple Message framework v746.3)\r\nContent-Type: text/plain; charset=US-ASCII; delsp=yes; format=flowed\r\nMessage-Id: &lt;5EC4F308-1AF0-41B6-8C3B-E5B169031F11@...&gt;\r\nCc: REST Discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Transfer-Encoding: 7bit\r\nDate: Thu, 20 Apr 2006 16:58:14 -0700\r\nTo: John Elliot &lt;jj5@...&gt;\r\nX-Mailer: Apple Mail (2.746.3)\r\nX-eGroups-Msg-Info: 1:12:0:0\r\nFrom: Bill Venners &lt;bv-svp@...&gt;\r\nSubject: Re: [rest-discuss] Resource-Oriented Design (Was: Meaning of stateless)\r\nX-Yahoo-Group-Post: member; u=198693287; y=uR2JNkEyujCohaZi6D5WyXtsZE9JjQ6GQigIcut1uUHy5uTQhAs\r\nX-Yahoo-Profile: billvenners\r\n\r\nHi John,\n\nOn Apr 20, 2006, at 1:55 PM, John Elliot wrote:\n\n&gt; What I was really trying to say is that of the other two options\n&gt; available to you I don&#39;t see why you would prefer this.\n&gt;\n&gt; With this,\n&gt;\n&gt;    /basket?o=(P23,1,US$3)&o=(p42,3,US$7)\n&gt;\n&gt; you get the &#39;stateless server&#39; benefits.\n&gt;\n&gt; With this,\n&gt;\n&gt;    Session 42 GETs /basket\n&gt;\n&gt; You get simple URIs and persisted server side state.\n&gt;\n&gt; Your proposed model conflates these two notions, but I&#39;m not sure\n&gt; exactly where you see the benefit. Actually, that&#39;s not true. I do see\n&gt; where you see the benefit. You think it&#39;s good that the user can click\n&gt; &#39;back&#39; and pick up their older shopping basket. I just think that&#39;s\n&gt; complicated and not very useful.\n&gt;\nThat&#39;s a good question. The primary reason is not the back button  \nproblem, but scalability of my particular project, a network of  \nsites, and how hard it is for me to achieve that scalability in the  \nimplementation.\n\nIn thinking about scale I ask myself how this would work if I have  \n1000 servers. I will be a very successful guy if I ever get to that  \npoint, but if it works for 1000, I figure it will work for 10 or 20  \nor 50 whatever I actually get to.\n\nOne strategy we have for scale is not putting everything in one  \ndatabase. We plan to have multiple mini-clusters each consisting of a  \nfew app servers. Each mini-cluster is backed by a dedicated database.  \nSo if there are five mini-clusters, there will be five databases.  \nThis allows us to scale the database tier horizontally by adding more  \ndatabases, or bifurcating existing ones if they get too busy. I  \nfigure I&#39;ll be able to use postgres, a free open source databases  \nthis way for the most part, even as we scale.\n\nBesides conversational state, the other thing J2EE folks often put in  \nthe session object is the user&#39;s identity. Servlets will generate a  \nrandom session ID for you, and you can stick the user ID and/or a  \nsubject/roles/permissions, etc., in the session object. So the  \nsession ID is a random number, a key that allows me to look up in a  \nhashtable in memory an object that tells me who the user is. The same  \nuser could be operating in multiple sessions at the same time. I want  \nusers to be able to sign on to the whole network, which means that  \nthey may occasionally hop from one mini-cluster to another. So if I  \nused sessions for user identity in the traditional way, I&#39;d really  \nneed to replicate the sessions across all servers, not just the ones  \nin the mini-cluster, but all of them--all 1000 servers, so when a  \nuser hops from one mini-cluster to another, I&#39;d still be able to  \nrecognize them.\n\nThere are a lot of canned ways to replicate sessions, but then I ask  \nhow well they scale up to 1000 servers. One that I believe would  \nscale is a partitioned cache, as you can do with Tangosol Coherence.  \nI have the option of using Tangosol, because they donated a license  \nto Artima, but I still would rather not use it because the license  \nisn&#39;t transferable. And in general I want to use open source software  \nwhen I can in this architecture, and I don&#39;t know of any open source  \npartitioned caches. So what I really wanted to do was find an  \nalternative design that doesn&#39;t require sessions, so that I can avoid  \nreplicating them across all 1000 servers.\n\nIn our solution, we don&#39;t use user sessions. The session ID isn&#39;t a  \nrandom number. It contains a user&#39;s credentials encrypted with a  \npassword that is known by all 1000 servers. So the only thing I need  \nto replicate is the password, and I replicate a new password about  \nevery 15 minutes. That I believe I can do with a regular replicated  \ncache. I expect it would scale fine to 10,000 servers. I don&#39;t have a  \nsession ID anymore, actually, because at any one time there&#39;s one  \nnumber for each user. It is an authentication token that enables any  \nserver to authenticate a user with no session state context required.\n\nWith authentication and single sign on out of the way, I really only  \nneed to replicate the conversational state across a mini-cluster, but  \nI&#39;d rather not replicate it (for the same reason, there isn&#39;t an open  \nsource partitioned cache at the moment). We&#39;re going to use sticky  \nsessions, so all request from the same session ID (which is really an  \nauth token) will go back to the same server in the mini-cluster. Most  \nof the time the conversational state will only be needed there, but  \nif that server ever crashes, it would be nice if another server could  \npick up where this one left off. My current plan is to stick the  \nconversational state into &quot;diamonds,&quot; which are little hashtables  \nthat get persisted asynchronously behind the scenes to a database.  \n(Diamonds are an implementation of snapshots.) The servers in each  \nmini-cluster will share one diamond database.\n\nIn this scheme, the only thing I have to replicate to all 1000  \nservers are the passwords used to encrypt the authentication tokens.  \nEverything else in memory is either transient or a cache of what&#39;s in  \na database. I do have to keep those database caches coherent across  \nthe mini-clusters, but that&#39;s easy to do with open source tools.\n\nAnd although you keep insisting that snapshots are more complicated,  \nI really don&#39;t see it as any more complicated to create a new diamond  \nas it is to add some state to the session. It&#39;s just as easy, in fact  \nperhaps a bit easier because I won&#39;t have to worry about generating  \nunique ETags based on session state. That would generate too many  \nETags to be practical anyway, so I&#39;d basically lose the opportunity  \nto do caching on any form like the registration form if I use a  \nsession to hold conversational state. Caching is one tool for scaling  \nthat I want to use to full advantage.\n\nSo the main reason I&#39;ve tried to avoid session state is not to be  \nRESTful, nor to make the back button work, but to build a scalable  \nsystem given my particular requirements. Where this all fits in with  \nmy response to your initial post, is that I don&#39;t think I need a  \nsession. Thinking about 1000 servers pushed me to get rid of  \nsessions. What I need instead, is authentication that optionally  \nrides along with a request. Not a session ID, just an authentication  \ntoken. I have problems with HTTP authentication, which I described a  \nfew weeks ago on this list, but my cookies and URL-rewriting is  \nsimilar in spirit to HTTP authentication in that it alone can be used  \nto authenticate a user.\n\nBill\n----\nBill Venners\nEditor-in-Chief\nArtima Developer\nhttp://www.artima.com\n\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":93935798,"authorName":"Ryan Fugger","from":"Ryan Fugger &lt;rfugger@...&gt;","profile":"rfugger","replyTo":"SENDER","senderId":"Kw_J_yi3riuzeak233Y0ZpmxEsCMDVLX3zmUAUhz4glmGMcQ1veNoDnezsYMMEHbgFNLc0ccx15VPzOaIp49x8-nuANS","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] REST for P2P application?","postDate":"1097048000","msgId":4550,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PG9wc2ZmdHh1ZDhrM2U3YnFAd2hpc3Blci52Yy5zaGF3Y2FibGUubmV0Pg==","inReplyToHeader":"PEJBWTE2LURBVjExenJMQ0N0Z3gwMDAxNjZmMEBob3RtYWlsLmNvbT4=","referencesHeader":"PG9wc2ZiZWVpZWRrM2U3YnFAd2hpc3Blci52Yy5zaGF3Y2FibGUubmV0PiA8QkFZMTYtREFWMTRrTnNqVUhRSDAwMDAwMmE2QGhvdG1haWwuY29tPiA8b3BzZmR3djNhNGszZTdicUB3aGlzcGVyLnZjLnNoYXdjYWJsZS5uZXQ+IDxCQVkxNi1EQVYxMXpyTENDdGd4MDAwMTY2ZjBAaG90bWFpbC5jb20+"},"prevInTopic":4549,"nextInTopic":4551,"prevInTime":4549,"nextInTime":4551,"topicId":4544,"numMessagesInTopic":19,"msgSnippet":"On Tue, 5 Oct 2004 22:10:10 -0700, S. Mike Dierken  ... Gotcha. ... Ripple is a P2P trust network of software node-agents living on http ","rawEmail":"Return-Path: &lt;rfugger@...&gt;\r\nX-Sender: rfugger@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 89174 invoked from network); 6 Oct 2004 07:35:01 -0000\r\nReceived: from unknown (66.218.66.216)\n  by m18.grp.scd.yahoo.com with QMQP; 6 Oct 2004 07:35:00 -0000\r\nReceived: from unknown (HELO pd4mo3so.prod.shaw.ca) (24.71.223.10)\n  by mta1.grp.scd.yahoo.com with SMTP; 6 Oct 2004 07:35:00 -0000\r\nReceived: from pd4mr5so.prod.shaw.ca (pd4mr5so-qfe3.prod.shaw.ca [10.0.141.50])\n by l-daemon (Sun ONE Messaging Server 6.0 HotFix 1.01 (built Mar 15 2004))\n with ESMTP id &lt;0I55009S8JNLFA70@l-daemon&gt; for rest-discuss@yahoogroups.com;\n Wed, 06 Oct 2004 01:33:21 -0600 (MDT)\r\nReceived: from pn2ml8so.prod.shaw.ca ([10.0.121.152])\n by pd4mr5so.prod.shaw.ca (Sun ONE Messaging Server 6.0 HotFix 1.01 (built Mar\n 15 2004)) with ESMTP id &lt;0I5500K9QJNLJE50@...&gt; for\n rest-discuss@yahoogroups.com; Wed, 06 Oct 2004 01:33:21 -0600 (MDT)\r\nReceived: from whisper.vc.shawcable.net\n (S01060080c8b47a2b.vc.shawcable.net [24.80.131.229])\n by l-daemon (iPlanet Messaging Server 5.2 HotFix 1.18 (built Jul 28 2003))\n with ESMTP id &lt;0I5500IMHJNKXO@l-daemon&gt; for rest-discuss@yahoogroups.com; Wed,\n 06 Oct 2004 01:33:21 -0600 (MDT)\r\nDate: Wed, 06 Oct 2004 00:33:20 -0700\r\nIn-reply-to: &lt;BAY16-DAV11zrLCCtgx000166f0@...&gt;\r\nTo: &quot;S. Mike Dierken&quot; &lt;mdierken@...&gt;,\n &quot;rest-discuss@yahoogroups.com&quot; &lt;rest-discuss@yahoogroups.com&gt;\r\nMessage-id: &lt;opsfftxud8k3e7bq@...&gt;\r\nMIME-version: 1.0\r\nContent-type: text/plain; charset=iso-8859-15; delsp=yes; format=flowed\r\nContent-transfer-encoding: 8bit\r\nReferences: &lt;opsfbeeiedk3e7bq@...&gt;\n &lt;BAY16-DAV14kNsjUHQH000002a6@...&gt;\n &lt;opsfdwv3a4k3e7bq@...&gt;\n &lt;BAY16-DAV11zrLCCtgx000166f0@...&gt;\r\nUser-Agent: Opera M2/7.53 (Win32, build 3850)\r\nX-eGroups-Remote-IP: 24.71.223.10\r\nFrom: Ryan Fugger &lt;rfugger@...&gt;\r\nSubject: Re: [rest-discuss] REST for P2P application?\r\nX-Yahoo-Group-Post: member; u=93935798\r\nX-Yahoo-Profile: rfugger\r\n\r\nOn Tue, 5 Oct 2004 22:10:10 -0700, S. Mike Dierken &lt;mdierken@...&gt;  \nwrote:\n\n&gt; I&#39;m lost. Perhaps if your applications was re-phrased using &#39;resource&#39;\n&gt; rather than &#39;node&#39; and &#39;object&#39; I&#39;d be able to understand.\n\nGotcha.\n\n&gt;\n&gt;&gt; Due to anonymity requirements, the originating node cannot know where  \n&gt;&gt; all\n&gt;&gt; the pieces of an object are (for example, a query or a transaction), and\n&gt;&gt; nodes usually cannot know where the object originated.\n&gt; What is an &#39;originating node&#39;?\n\nRipple is a P2P trust network of software node-agents living on http  \nservers.  To make it more clear, I&#39;ll just use the word &quot;hosts&quot; from now  \non, even though that&#39;s not technically what I mean.\n\n&gt; Is that an HTTP client?\n\nYes, and server.\n\n&gt; To hide the location of the pieces, you have a single identifiable  \n&gt; resource and clients don&#39;t\n&gt; know what lays beyond.\n\nNo, for example, a transaction involves a chain of hosts, but each host  \nonly knows about the host directly before and after it.  What I&#39;m  \nstruggling with is that it seems so convenient to give the transaction a  \nsingle name, but I can&#39;t identify it with a single host for privacy  \nreasons, and so I can&#39;t give it a single URI.  Using a proxy doesn&#39;t work  \neither, unless everyone used the same one, which is a central point of  \nfailure and therefore bad.\n\n\n&gt;&gt; No, different hosts each holding their aspect of distributed objects is\n&gt;&gt; integral to the application.\n&gt; Okay, but how can you have different hosts holding aspects of a single\n&gt; distributed object but not tell any client where those different aspects  \n&gt; are located??\n\nThey only tell neighbouring host on the trust network, ie, those they  \ntrust.  All the bits can be found by passing queries down and back up the  \nchain of trusted hosts, without the requesting host ever knowing exactly  \nwhere the queries go.\n\n&gt;\n&gt;&gt; A server hosts multiple nodes that each communicate with many  \n&gt;&gt; neighbouring\n&gt;&gt; nodes (&quot;friends&quot; with which they can exchange IOUs).\n&gt; Okay - each &#39;node&#39; is a resource. Clients communicate with this &#39;public&#39;\n&gt; node. Clients do not know about neighboring nodes. The resource is a  \n&gt; type of aggregating proxy for those other nodes.\n\nSounds about right.  It may be informative to say also that clients are  \nthe means through which the owner of a node accesses his node and gives it  \ninstructions, whether in person (opening an account with another node), or  \nautomatically (accepting payments through an ecommerce site).\n\n&gt;\n&gt;&gt; Nodes may also communicate with a strange node to pay or receive payment\n&gt; from that node.\n&gt; Okay - each &#39;node&#39; may also be a client and can transfer payment to other\n&gt; resources or request payment from other resources. In order to receive\n&gt; unsolicited transfers, a node needs to have an identifier and the sender  \n&gt; of payment needs to know what that is.\n\nRight.  The node identifier being a resolvable URI makes perfect sense --  \nuntil the node moves to a different server!\n\n&gt;\n&gt;&gt; Payments are made by passing IOUs along paths connecting two strange  \n&gt;&gt; nodes\n&gt; in the network of neighbours.\n&gt; Ah... a chain of proxies... and this chain is used to obscure the legal\n&gt; entity requesting a transfer?\n\nNot primarily, although that might be a side benefit, I don&#39;t know.  The  \nchain of intermediaries is literally necessary to make the payment with  \nIOUs.  For example, would you ship me something if I paid you with my  \ndigitally-signed IOU?  Of course you wouldn&#39;t.  But you might if we could  \nfind a common friend who would vouch for my IOU by promising to make good  \non it himself if I didn&#39;t.  Ripple works by finding chains of these  \nintermediaries.\n\n--------------\nI&#39;m actually beginning to feel like a bit of a troll on this list, because  \nthe more I type about this, the more I become convinced that not only is  \nREST not particularly suited to my application, but HTTP isn&#39;t really  \neither.  Stateful bi-directional peer connections seem like the right fit  \n(been reading about BEEP - http://beepcore.org/).  Ripple really seems to  \nwant to be a closed, relatively tightly-coupled private network, despite  \nmy best efforts to make it otherwise.  So while I&#39;m still open to having  \nmy mind changed, I won&#39;t ask the list to delve any more into my arcane  \nlittle project unless it truly interests you as a &quot;hard case&quot;...\n\nI very much appreciate the responses.  Thanks Mike.  I may be back for  \nsome help with a RESTful client API, although I think that will be much  \neasier.\n\nRyan\n\n"}}
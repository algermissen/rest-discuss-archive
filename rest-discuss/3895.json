{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":4849001,"authorName":"Alex Jacobson","from":"Alex Jacobson &lt;alex@...&gt;","profile":"shop2it","replyTo":"SENDER","senderId":"i_A9XSY_RsqFYRWLWIzwbtZ3SvtKRc9fdjUL-6oY-n34scqw1T6d3HCP5MYjlYcCXgg1985TOWPKutM0GXLfDgsa","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] ReST vs MoST Messaging","postDate":"1060733862","msgId":3895,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDM1NDIxMTUyOS4xMDYwNzE5NDYyQGxvY2FsaG9zdD4="},"prevInTopic":3894,"nextInTopic":3896,"prevInTime":3894,"nextInTime":3896,"topicId":3880,"numMessagesInTopic":23,"msgSnippet":"Seairth, MoST is just about taking HTTP seriously.  If the resource does not allow a particular method, give an error. ... Bad premise.  HTTP URIs designate","rawEmail":"Return-Path: &lt;alex@...&gt;\r\nX-Sender: alex@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 55464 invoked from network); 13 Aug 2003 02:28:29 -0000\r\nReceived: from unknown (66.218.66.218)\n  by m17.grp.scd.yahoo.com with QMQP; 13 Aug 2003 02:28:29 -0000\r\nReceived: from unknown (HELO mailgate.vo.com) (208.45.6.97)\n  by mta3.grp.scd.yahoo.com with SMTP; 13 Aug 2003 02:28:28 -0000\r\nReceived: from [192.168.123.103] (m288d36d0.tmodns.net [208.54.141.40])\n\t(using TLSv1 with cipher EDH-RSA-DES-CBC3-SHA (168/168 bits))\n\t(No client certificate requested)\n\tby mailgate.vo.com (Postfix) with ESMTP\n\tid 60A6888758; Tue, 12 Aug 2003 22:28:27 -0400 (EDT)\r\nDate: Tue, 12 Aug 2003 20:17:42 -0400\r\nTo: Seairth Jacobs &lt;seairth@...&gt;,\n\trest-discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nSubject: Re: [rest-discuss] ReST vs MoST Messaging\r\nMessage-ID: &lt;354211529.1060719462@localhost&gt;\r\nX-Mailer: Mulberry/3.0.3 (Win32)\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=us-ascii; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nContent-Disposition: inline\r\nX-eGroups-From: Alex Jacobson &lt;alex@...&gt;\r\nFrom: Alex Jacobson &lt;alex@...&gt;\r\nX-Yahoo-Group-Post: member; u=4849001\r\nX-Yahoo-Profile: shop2it\r\n\r\nSeairth,\n\nMoST is just about taking HTTP seriously.  If the resource does not allow a \nparticular method, give an error.\n\nRe RNA (&lt;http://www.seairth.com/web/rna/&gt;):\n\n&gt; The interface is split into two URI types:  Identity and Inbox.\n\nBad premise.  HTTP URIs designate RESOURCES that have *content-types*. \nURIs themselves do not have types.  This bad URL-type premise means you \nstart by defining a special content-type for POST rather than a \ncontent-type for an inbox.  Having no inbox type means having no standard \nway to check your mail.  To me, this seems like a major failure in a \n&quot;notification&quot; protocol.  Your spec then becomes documentation of various \ninteraction protocols that I find lengthy, arbitrary, and hard to follow \n(sorry).\n\nRather than a 15 page specification, how about one sentence:\n\n Map email addresses to HTTP by delivering to http://user@...\n\nGiven the constraints imposed by taking HTTP seriously, a little knowledge \nof existing content-types, and a little common sense, this one sentence is \nall you need to specify a system that does everything I believe RNA does. \nSimply tell users:\n\n Your inbox is located at http://user@...\n\nUsers can GET their inbox URLs and discover they have content-type: \nmultipart/digest (RFC1521).  They can then build/install a simple \nHTTP&lt;-&gt;POP proxy and to read their mail using their favorite POP clients. \nWhen they reply to messages, their mail delivery agents can attempt to POST \nto the delivery URL of the sender before attempting SMTP delivery.  (The \ndelivery URL of the sender is defined by the one sentence spec).\n\nBefore they POST to this URI, they do a HEAD to discover the content-type \nthey may POST.  When they discover the content-type is multipart/digest, \nthey know they can POST message/rfc822.  When they attempt to POST a \nmessage/rfc822 but get a &quot;413 Request Entity Too Large&quot; (because the \nrecipient requires that mail storage be the sender&#39;s responsibility), they \nPUT their message body to some URI they control and then re-POST using an \nRFC2017 URL external-body content-type.  The server responds 201 CREATED \nwith a Location header.  If they later decide they want to cancel that \nmessage, they can try to DELETE the url provided in that Location header. \nIf they get a 200, they know their DELETE is successful.  If they get a \n403, they know they are going to have to explain the message they sent in a \nfit of rage.\n\nGeneral Comments:\n* The above system is defined ENTIRELY by the relevant content-types.  Any \nambiguities are the result of ambiguities in the content-types and not \nambiguities in how to use HTTP.  If you wanted to be more careful, you \nmight define a multipart/external-body content-type that  allows only parts \nthat are message/rfc822 with URL external-body content-type.  Note that \nhaving done so, you would still be COMPLETELY SILENT about HTTP methods as \nthey would be determined entirely by your container type..\n\n* There is no explicitly documented standard for associating a URL with a \nMIME-part.  You could specify one.  However, given the constraint of \nRFC2616 and digest format, I think the *obvious* standard is simply to give \neach part a Location: header.  I think this is so obvious that I am not \nsure it worth documenting.  But feel free.\n\n* The above was so short because there are already MIME container types \nthat do more-or-less what you want.  Some applications may require you do \ndefine new content-types and content-types for containers of those types \nbut any discussion of using HTTP with those types would be tutorial rather \nthan specification.\n\n* I am not aware of a standard XML container type.  There used to be work \non XML &quot;groves&quot; but I don&#39;t know where that went.  So implementing the \nabove with XML types actually requires a lot more content-type \ndocumentation work.  Given the installed base of messaging applications \nthat use MIME, I&#39;m also not sure it is worth bothering.\n\n-Alex-\n\n___________________________________________________________________\nS. Alexander Jacobson                   i2x Media\n1-212-787-1914 voice                    1-603-288-1280 fax\n\n\n\n\n\n--On Monday, August 11, 2003 9:57 PM -0400 Seairth Jacobs \n&lt;seairth@...&gt; wrote:\n\n&gt; From: &quot;Alex Jacobson&quot; &lt;alex@...&gt;\n&gt;&gt;\n&gt;&gt; If the server returns an index in response to a GET without an Accept\n&gt;&gt; header, the resource is an index and NOT a container.  That means the\n&gt;&gt; semantics of POST  should be with respect to that index and not a\n&gt;&gt; container.  In other words, if the resource IS an index, then POST means\n&gt;&gt; add an entry to the index and NOT add a message to a container; messages\n&gt;&gt; must be stored somewhere else a la DJ Bernstein.\n&gt;&gt;\n&gt;&gt; If the server returns a container in response to a GET without an Accept\n&gt;&gt; header, the resource is a container and not an index.  That means the\n&gt;&gt; semantics of POST should be with respect to the container and not an\n&gt; index.\n&gt;&gt; In other words, if the resource is a container, then POST means add a\n&gt;&gt; message to the container and can at your option affect an index.\n&gt;&gt; Messages are stored in the container  a la SMTP.  Note, nothing\n&gt;&gt; constrains the server from providing an index in response to a GET with\n&gt;&gt; a an &quot;Accept: text/x-yannick-index&quot;, but that is really beside the point.\n&gt;\n&gt; If I understand correctly, the idea is that if a resource is labeled as a\n&gt; &quot;container&quot; (where &quot;container&quot; has mutually agreed upon semantics), then a\n&gt; client absolutely knows how and when each of the HTTP methods can be used\n&gt; on that resource.  And what happens when you don&#39;t want to provide all\n&gt; capabilities of a container?  For instances, what if the only function you\n&gt; want to support is POST of a message and the only successful response is\n&gt; 202?  Once posted, there is no way to GET, PUT, DELETE, etc the message\n&gt; (via that URI, anyhow).  It seems to me you would have to define the\n&gt; container with restrictions or define a entirely new model (&quot;drop box&quot;?).\n&gt; But then what if the next time, you need something similar that provides\n&gt; only POST and GET, except that also the expected response for the POST is\n&gt; either 201 or 302?\n&gt;\n&gt; Let&#39;s take another look at RNA...\n&gt;\n&gt; The interface is split into two URI types:  Identity and Inbox.  In either\n&gt; case, the &quot;client&quot; (likely a remote server) may only POST an xml-based RNA\n&gt; document.  In the case of the Identity URI, there is a simple rule that\n&gt; says &quot;if recipient likes the request entity, it will return a 200 with a\n&gt; similar response entity, possibly adding or setting elements; otherwise,\n&gt; it will reject the request appropriately.&quot;  In the case of the Inbox URI,\n&gt; there is a simple rule that says &quot;if recipient likes the request entity,\n&gt; it will return a 202 (no response entity);  otherwise, it will reject the\n&gt; request appropriately.&quot;  The Identity and Inbox URI have different\n&gt; criteria and therefore do not necessarily return all of the same possible\n&gt; 4xx responses. Now, as it happens to be that the Identity URI is highly\n&gt; visible, it also defines the use of the GET method, which has absolutely\n&gt; no rules on how it is implemented (beyond the semantics of a GET).  This\n&gt; is because people tend to plug highly visible URIs into their web\n&gt; browsers and expect to get something understandable back.  The Inbox URI,\n&gt; on the other hand, is relatively hidden from the general user and\n&gt; therefore does not have the GET method defined.\n&gt;\n&gt; So, how can this be modeled in a way that would replace the need for\n&gt; documentation?  What are the data models of the two URI types?  What\n&gt; allows the client to know the valid range of RNA documents (in this case,\n&gt; xml-based) that can be sent in the request entity, and in the case of the\n&gt; Identity URI, returned in the response entity?  What if RNA were rewritten\n&gt; to use ONX or YAML or some entirely proprietary format?  What allows the\n&gt; clients to know what each of the possible 2xx, 3xx, and 4xx response codes\n&gt; mean in context to the request such that it may correct its problem and\n&gt; try again?\n&gt;\n&gt; If you know how to model all of this in a clear, simple manner that\n&gt; doesn&#39;t tie RNA&#39;s hands in any way, I&#39;m all for it.  But what I feel you\n&gt; are proposing is either too limiting or is too complicated.  Heck, I&#39;ve\n&gt; got the entire English language to write the spec with and I&#39;m *still*\n&gt; not entirely comfortable with the wording.\n&gt;\n&gt; ---\n&gt; Seairth Jacobs\n&gt; seairth@...\n&gt;\n&gt;\n&gt;\n&gt; To unsubscribe from this group, send an email to:\n&gt; rest-discuss-unsubscribe@yahoogroups.com\n&gt;\n&gt;\n&gt;\n&gt; Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/\n&gt;\n&gt;\n\n\n\n\n"}}
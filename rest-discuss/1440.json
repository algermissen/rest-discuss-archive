{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":98624433,"authorName":"bhaugen32","from":"&quot;bhaugen32&quot; &lt;bhaugen32@...&gt;","profile":"bhaugen32","replyTo":"SENDER","senderId":"dKdlXy2e_iqjB7ciqHBSyPxNd_pCMoKTCS7IS7M0LP1QpzLbengiQHitIqcZhEMP5bKYdb_e9TCmRgqBRnMDCY8S3UzwPI-y","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: REST transaction idea","postDate":"1023538591","msgId":1440,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGFkc3NpditzZmh1QGVHcm91cHMuY29tPg==","inReplyToHeader":"PDNEMDEyRDRGLjYxNTYzMTRFQHByZXNjb2QubmV0Pg=="},"prevInTopic":1434,"nextInTopic":1444,"prevInTime":1439,"nextInTime":1441,"topicId":1399,"numMessagesInTopic":12,"msgSnippet":"Paul, thanks for the well-reasoned reply. My followup comments interspersed. A little clarification on where I m coming from first, though: I m not trying to","rawEmail":"Return-Path: &lt;bhaugen32@...&gt;\r\nX-Sender: bhaugen32@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_0_3_2); 8 Jun 2002 12:16:33 -0000\r\nReceived: (qmail 29802 invoked from network); 8 Jun 2002 12:16:32 -0000\r\nReceived: from unknown (66.218.66.216)\n  by m3.grp.scd.yahoo.com with QMQP; 8 Jun 2002 12:16:32 -0000\r\nReceived: from unknown (HELO n28.grp.scd.yahoo.com) (66.218.66.84)\n  by mta1.grp.scd.yahoo.com with SMTP; 8 Jun 2002 12:16:32 -0000\r\nReceived: from [66.218.67.190] by n28.grp.scd.yahoo.com with NNFMP; 08 Jun 2002 12:16:32 -0000\r\nDate: Sat, 08 Jun 2002 12:16:31 -0000\r\nTo: rest-discuss@yahoogroups.com\r\nSubject: Re: REST transaction idea\r\nMessage-ID: &lt;adssiv+sfhu@...&gt;\r\nIn-Reply-To: &lt;3D012D4F.6156314E@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Length: 6942\r\nX-Mailer: Yahoo Groups Message Poster\r\nFrom: &quot;bhaugen32&quot; &lt;bhaugen32@...&gt;\r\nX-Yahoo-Group-Post: member; u=98624433\r\nX-Yahoo-Profile: bhaugen32\r\n\r\nPaul, thanks for the well-reasoned reply.\nMy followup comments interspersed.\n\nA little clarification on where I&#39;m coming from first, though:\nI&#39;m not trying to sell the REST gang on ebXML.\nYes, I worked on ebXML, but I have been trying to solve the problem \nof freely-associating economic agents for years. Working with ebXML \nwas just one learning experience.  Working with REST is another.\n\nI do think the RosettaNet-ebXML transaction model is RESTifiable, \nthough, which is why I suggest it.  Database transaction models are \nclearly not appropriate.\n\nI also think the next direction that the UN/CEFACT business process \ngang went in is also RESTifiable.  It could resolve to using \npublished resource state as an orchestration mechanism, which I think \nwas the same direction as you have been going in casting state \nmachines into hypertext form.\n\nPaul Prescod wrote:\n&gt; Okay, let&#39;s first define transactions in the context of this \ndiscussion\n&gt; because people often mean different things. You do not mean \ntransaction\n&gt; in the sense of requiring &quot;a group of operations on (distributed)\n&gt; resources be treated as one unit of work. In a unit of work, all the\n&gt; participating operations should either succeed or fail and recover\n&gt; together.&quot; \n\nOh, but I *do* mean a unit of work, in the sense of two trading \npartners coming to agreement on advancing a business deal to the next \nstate.  Each business transaction succeeds or fails as a whole.\n\nBut they are only trying to agree on whether or not to advance to the \nnext state.  Any database transactions are each partner&#39;s purely \nprivate matter.  I would not do my private database updates until the \nshared transaction completed, so no rollback or recovery would be \nnecessary.\n\nFor an Order, the transaction is Offer-Acceptance.  At the end of the \ntransaction, the order will be either accepted or not (it was either \nrejected or the transaction failed for technical reasons).  To be \naccepted, both trading partners must agree explicitly and auditably.\n\n&gt; Rather you mean transaction in the business sense, which is an \nagreement\n&gt; to exchange services, products or money.\n\nIn a typical order, there are at least three business stages:\n*order\n*delivery of goods or services\n*payment (not necessarily in that order, cd be prepay).\n\nIf all three stages are performed electronically, there will be at \nleast three business transactions:\n*Order - Offer-Acceptance, which we&#39;ve been discussing.\n*Delivery and Payment - Notify-Confirm, where one partner notifies \nthe other that the economic event happened, and the other partner \nconfirms that yes it did happen as notified (or it doesn&#39;t agree, in \nwhich case they need to go into a problem resolution process, which \ncould be another electronic transaction or a phone call or whatever).\n\n&gt; Now thinking about this from an XP perspective, I want to think \nabout\n&gt; the simplest thing and see why it won&#39;t work. The simplest thing is \nfor\n&gt; me to send you an &quot;offer&quot; message and you reply with &quot;accept&quot; or\n&gt; &quot;decline&quot;. That&#39;s not good enough, however, because deciding \nwhether to\n&gt; accept may take a long time. So it is necessary for the exchange to \nbe\n&gt; broken into two parts: &quot;request service&quot; and then at some \nindeterminate\n&gt; time later, &quot;provide response&quot;. In other words there are four \nmessages: \n\nExactly.  That&#39;s why I think this transaction model is about the \nsimplest thing that will work in situations where there is a lag.\n\n&gt; bhaugen32 wrote:\n&gt; &gt; It&#39;s a two-party request-response interaction, with receipt\n&gt; &gt; acknowledgements for both request and response.\n&gt; \n&gt; &quot;Can we do business?&quot;\n&gt; &quot;I acknowledge that you want to do business. I will get back to \nyou.&quot;\n&gt; &quot;I agree/disagree we should do business.&quot;\n&gt; &quot;I acknowledge your agreement/disagreement.&quot;\n\n\nBeautiful recap, you nailed it!\n\n&gt; &gt; There are time constraints on each step.  If any timeout occurs, \nthe\n&gt; &gt; transaction fails with a Control Failure.\n&gt; \n&gt; Note that in the absence of reliable transport it is still possible \nfor\n&gt; the businesses to end up misaligned. An HTTP-based solution needs \nto use\n&gt; HTTP in a manner that will ensure reliability.\n\nYes.\n\n&gt; &gt; In cases where the Response document says &quot;Accept&quot; but has an \nerror,\n&gt; &gt; and the error message from the requesting business service cannot \nbe\n&gt; &gt; delivered, the transaction model specifies a separate \nNotification of\n&gt; &gt; Failure to be sent from the requesting business service via \nanother\n&gt; &gt; channel.  Otherwise the responding activity may think incorrectly\n&gt; &gt; that the transaction succeeded.\n&gt; \n&gt; I see, so otherwise it is to assume the transaction succeeded if it\n&gt; returns an Accept, whether it gets a receipt or not?\n\nWell, it would be a bad assumption, but the end state is ambiguous, \nand ambiguities are what sometimes end up in court.\n\n&gt; &gt; RosettaNet and ebXML assume that a business service access point \nwill\n&gt; &gt; handle many transactions for many business activities, so each\n&gt; &gt; message contains tags for dispatching to the business \ncollaboration\n&gt; &gt; (long conversation about the Order), business transaction, and\n&gt; &gt; business activity.\n&gt; \n&gt; You&#39;ll have to describe why all of these levels of statefulness are\n&gt; necessary. And if you want to represent them in REST then you should\n&gt; give them all URIs and point to them.\n\nI&#39;m describing the complex dispatching as a bad example, something I \nwould prefer to avoid.  (I hope that was clear...)\n\n&gt; &gt; If the resource is the Order, then only the business transaction \nand\n&gt; &gt; business activity tags are required.\n&gt; &gt; If the resource is the Transaction, then the business activity \ncan be\n&gt; &gt; assumed.\n&gt; \n&gt; Sounds stateful. Better to use references.\n\nI agree.\n\n&gt; &gt; In either case, I think the REST style is functionally equivalent \nto\n&gt; &gt; the EDI-mailbox style, but has at least two advantages:\n&gt; \n&gt; Before I feel comfortable that this has been expressed in a REST \nstyle,\n&gt; I&#39;d like to see some URIs, XML and HTTP methods. ;)\n&gt; \n&gt; I propose that what you will need is at least two HTTP \nrequest/response\n&gt; pairs, one in each direction. To get reliability, though, you \nprobably\n&gt; actually need four, as I discuss here:\n&gt; \n&gt;  * http://www.prescod.net/reliable_http.html\n&gt; \n&gt; So you would \n&gt; \t-&gt; POST: &quot;I&#39;d like to make an offer&quot;\n&gt; \t&lt;- OK, here&#39;s an offer-holder URI\n&gt; \t-&gt; PUT the offer at offer-holder URI\n&gt; \t&lt;- OK, I&#39;ve received it and will get back to you\n\nOk, I read your Reliable HTTP article and think I agree.\n\n&gt; The offer should have a callback address, unless you are using \nsomething\n&gt; like HTTP events. Either way,\n&gt; \n&gt; \t&lt;- POST &quot;I&#39;d like to return a reliable offer-response&quot;\n&gt; \t-&gt; OK, here&#39;s an offer-response-holder URI\n&gt; \t&lt;- PUT the offer-response at the holder-URI\n&gt; \t-&gt; OK, I&#39;ve got the offer-response\n\nCouldn&#39;t you just send the offer-response-holder URI with the offer?\n\nSo do you think this has promise as a REST transaction protocol?\n(Are you still having trouble thinking of it as a transaction?)\n\nThanks again,\nBob Haugen\n\n\n\n\n"}}
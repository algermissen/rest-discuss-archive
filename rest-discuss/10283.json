{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":319607554,"authorName":"Assaf Arkin","from":"&quot;Assaf Arkin&quot; &lt;assaf@...&gt;","profile":"assafarkin","replyTo":"SENDER","senderId":"99czVy2qczPoI4SvB4uJv7De50QAY8Vk24gTRXblCQqoFplXzP4u575z5ETu_1Wmd22YCQI18QxgcsNwdN5yVzvcPeguZ2Ebag","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] bootstrapping","postDate":"1200740047","msgId":10283,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDUwMzdiNmU0MDgwMTE5MDI1NGozNGMzMThmcjI1MjA5ZDA3ZThjZDRmY2ZAbWFpbC5nbWFpbC5jb20+","inReplyToHeader":"PDE0ODcwMWM4NWE3ZSQ4NTVlMDY1MCQwNzAyYThjMEBHdWlkZXMubG9jYWw+","referencesHeader":"PGZta3M3OCtrMTVrQGVHcm91cHMuY29tPgkgPDEwNTQwMWM4NThlNyQ0OGZjYjVmMCQwNzAyYThjMEBHdWlkZXMubG9jYWw+CSA8NTAzN2I2ZTQwODAxMTcxOTE3aDJkMzZlNDgwbjc2MDM3NjU5ODVkMGM3NTZAbWFpbC5nbWFpbC5jb20+CSA8YzgyMDQ1NDMwODAxMTgxMzU5ajJjMWQyNDBkbGRhMDc4NzMwMGVhYjhiZGFAbWFpbC5nbWFpbC5jb20+CSA8NTAzN2I2ZTQwODAxMTgxNzE3Zzc2YWU5ODZhc2FjOTkwNTg5NjBkYTZmMGVAbWFpbC5nbWFpbC5jb20+CSA8MTQzMjAxYzg1YTNlJDg4MzU4NDYwJDA3MDJhOGMwQEd1aWRlcy5sb2NhbD4JIDw1MDM3YjZlNDA4MDExODE5MDlwNmZhOTYzNjJqYzc4OGFlMDI2ZWEzMWZjMkBtYWlsLmdtYWlsLmNvbT4JIDwxNDVjMDFjODVhNWEkNzQyZTdmYTAkMDcwMmE4YzBAR3VpZGVzLmxvY2FsPgkgPDUwMzdiNmU0MDgwMTE4MjIwNnE1NmE5YmU3M21lMGZjNGExYmU2MjZmMTYyQG1haWwuZ21haWwuY29tPgkgPDE0ODcwMWM4NWE3ZSQ4NTVlMDY1MCQwNzAyYThjMEBHdWlkZXMubG9jYWw+"},"prevInTopic":10282,"nextInTopic":10284,"prevInTime":10282,"nextInTime":10284,"topicId":10201,"numMessagesInTopic":65,"msgSnippet":"... I don t have a representation yet, although that would be a good project to start on. ... Let me add one more requirement to my list: 8.  Partial","rawEmail":"Return-Path: &lt;assaf@...&gt;\r\nX-Sender: assaf@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 71719 invoked from network); 19 Jan 2008 10:54:08 -0000\r\nX-Received: from unknown (66.218.67.94)\n  by m36.grp.scd.yahoo.com with QMQP; 19 Jan 2008 10:54:08 -0000\r\nX-Received: from unknown (HELO fg-out-1718.google.com) (72.14.220.153)\n  by mta15.grp.scd.yahoo.com with SMTP; 19 Jan 2008 10:54:08 -0000\r\nX-Received: by fg-out-1718.google.com with SMTP id e12so1375706fga.8\n        for &lt;rest-discuss@yahoogroups.com&gt;; Sat, 19 Jan 2008 02:54:07 -0800 (PST)\r\nX-Received: by 10.86.82.16 with SMTP id f16mr4102936fgb.60.1200740047313;\n        Sat, 19 Jan 2008 02:54:07 -0800 (PST)\r\nX-Received: by 10.86.71.6 with HTTP; Sat, 19 Jan 2008 02:54:07 -0800 (PST)\r\nMessage-ID: &lt;5037b6e40801190254j34c318fr25209d07e8cd4fcf@...&gt;\r\nDate: Sat, 19 Jan 2008 02:54:07 -0800\r\nTo: &quot;Mike Schinkel&quot; &lt;mikeschinkel@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nIn-Reply-To: &lt;148701c85a7e$855e0650$0702a8c0@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: 7bit\r\nContent-Disposition: inline\r\nReferences: &lt;fmks78+k15k@...&gt;\n\t &lt;105401c858e7$48fcb5f0$0702a8c0@...&gt;\n\t &lt;5037b6e40801171917h2d36e480n7603765985d0c756@...&gt;\n\t &lt;c82045430801181359j2c1d240dlda0787300eab8bda@...&gt;\n\t &lt;5037b6e40801181717g76ae986asac99058960da6f0e@...&gt;\n\t &lt;143201c85a3e$88358460$0702a8c0@...&gt;\n\t &lt;5037b6e40801181909p6fa96362jc788ae026ea31fc2@...&gt;\n\t &lt;145c01c85a5a$742e7fa0$0702a8c0@...&gt;\n\t &lt;5037b6e40801182206q56a9be73me0fc4a1be626f162@...&gt;\n\t &lt;148701c85a7e$855e0650$0702a8c0@...&gt;\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Assaf Arkin&quot; &lt;assaf@...&gt;\r\nSubject: Re: [rest-discuss] bootstrapping\r\nX-Yahoo-Group-Post: member; u=319607554; y=9tGhX2X1Z6iaXpxuhQswHQQDMNeZWUQPOcQjbSCY8VhZJDwudw\r\nX-Yahoo-Profile: assafarkin\r\n\r\nOn Jan 19, 2008 1:34 AM, Mike Schinkel &lt;mikeschinkel@...&gt; wrote:\n&gt; &gt; &gt; &gt; Those are the things we need to decide on first, before\n&gt; &gt; we even get\n&gt; &gt; &gt; &gt; to create an abstract model.\n&gt; &gt; &gt;\n&gt; &gt; &gt; So rather than use an analogy, what specific things do you think we\n&gt; &gt; &gt; need to decide on first related to RESTful web services?\n&gt; &gt;\n&gt; &gt; So far I mapped out the following:\n&gt; &gt;\n&gt; &gt; 1.  Describe a collection of resources (one or more).\n&gt; &gt;\n&gt; &gt; 2.  Describe which headers are used with that collection.\n&gt; &gt; I&#39;m following HTTP 1.1, so no need to describe the headers\n&gt; &gt; themselves, but you may want to know where I&#39;m allowing\n&gt; &gt; conditional GET and PUT, for example.\n&gt; &gt;\n&gt; &gt; 3.  Describe which content types are supported by that collection.\n&gt; &gt; And that should allow you to go all the way into structure\n&gt; &gt; and semantics of the various content types.\n&gt; &gt;\n&gt; &gt; 4.  Describe which status codes are returned and what they\n&gt; &gt; mean, for cases that are more specific than the HTTP spec.\n&gt; &gt;\n&gt; &gt; 5.  URL templates for entry points (mapped to #1), optionally\n&gt; &gt; separate from the base path.\n&gt; &gt;\n&gt; &gt; 6.  URL selection from content types (mapped to #1).\n&gt; &gt;\n&gt; &gt; 7.  Authentication mechanism.\n&gt;\n&gt; So how you would represent those, in an object model, and can you provide an\n&gt; example so we are not dealing in abstracts?\n\nI don&#39;t have a representation yet, although that would be a good\nproject to start on.\n\n&gt; As some point you actually do have to start talking about concrete\n&gt; implementations and not always discussing it in the abstract.  You can&#39;t\n&gt; navigate the object tree in JSON unless you know what properties will\n&gt; identifies what each URL is for, etc.\n&gt;\n&gt; There&#39;s two approaches here; we can let everyone design their services from\n&gt; scratch each time, such as you suggest with the hypothetical Amazon shopping\n&gt; cart or we can extract out the commonalities such as coming up with a common\n&gt; way to detemine the URL, content-type, status code, etc. needs to implement\n&gt; the Amazon shopping cart. To me the latter is far more pragmatic because\n&gt; you&#39;ll have to do it anyway for the former; why reinvent the wheel each\n&gt; time?\n\nLet me add one more requirement to my list:\n\n8.  Partial definition.\n\nThat means I can define some aspects of the service but not all of it,\ne.g. the shopping cart interaction alone.   I can say that a resource\nhas a well define add-item link, but not talk about anything else\nappearing in the representation, and have two different services with\nwidely different semantics except for that common part.\n\nAlthough, I came to expect that everyone would pretty much go and\ndefine their own stuff, and no two shopping sites will be\nintentionally compatible.  It&#39;s still a cool way to offer some common\nservices, e.g. the same ordering stages for both books and MP3, even\nthough the catalogs work differently.\n\n\n&gt; &gt; &gt; HTML (or JSON, or Atom, or, or, or...) are necessary, but\n&gt; &gt; not sufficient.\n&gt; &gt;\n&gt; &gt; I agree, I just don&#39;t see that as a browser problem.\n&gt;\n&gt; I never said it was a browser &quot;problem&quot;, but a browser could make it more\n&gt; accessible and I see that as desirable.\n\nI also see the accessible part as desirable, but my preference right\nnow is to serve HTML to people and something more concise (XML, JSON)\nto programmed clients, on the same resources.  So if you were to walk\nfrom a task to one of its attachment and delete it, you could be\nfollowing the same path from a browser and a program, except the\nbrowser view would be much more friendly to you and the JSON view much\neasier to code for.\n\n(And you can automate using the HTML view with tools like\nWWW:Mechanize, but only because the HTML is semantically rich)\n\n\n&gt; &gt; 1. Let&#39;s say the URL template for a collection of pending\n&gt; &gt; tasks resources is:\n&gt; &gt;\n&gt; &gt; {base}/person/{name}/pending\n&gt; &gt;\n&gt; &gt; There&#39;s a few content type descriptions, the XML one will say\n&gt; &gt; (abbreviated):\n&gt; &gt;\n&gt; &gt; &lt;tasks&gt;\n&gt; &gt;   &lt;task&gt;\n&gt; &gt;     . . .\n&gt; &gt;     &lt;attachments&gt; ... &lt;/attachments&gt;\n&gt; &gt;   &lt;/task&gt;*\n&gt; &gt; &lt;/tasks&gt;\n&gt; &gt;\n&gt; &gt; So now you have an entry point that, given an account name,\n&gt; &gt; let&#39;s you find all the pending tasks for that person, which\n&gt; &gt; returns a list of tasks.\n&gt;\n&gt; By &quot;content type description&quot; do you mean &quot;mime type&quot; or something else?\n\nTelling you it&#39;s XML doesn&#39;t really help you do anything interesting\nwith the result, telling it it&#39;s a &lt;task&gt; with specific structure and\nsemantic does.  So right now the description covers the abstract\nmodel, and separately the XML and JSON representation.  It&#39;s human\nreadable, so it&#39;s easier to start with the abstract model, which is\nbasically just a list of fields.\n\n\n&gt; And are you saying that for &quot;{base}/person/{name}/pending&quot; the software\n&gt; would do the substitution on {base} and {name}, and if so, where does it get\n&gt; that; from another URL?\n\nBase is absent because the same thing can be deployed in different\nURLs, I might be running one on localhost:8080 for development, and a\ncouple in production at different locations (and so URLs).  Obviously\nthose will be resolved, you&#39;ll know what base is before you decide to\naccess the service.\n\nName is the account name, so if you can write a script that takes name\nas an argument and grab all that person&#39;s tasks.\n\n\n&gt;  Or are you envisioning that the URI Template would\n&gt; simply be documented in a spoken language and the client developer would\n&gt; translate that into code?  If yes, that is not consistent with HATEOAS as\n&gt; far as I understand HATEOAS (although it is consistent with what I think is\n&gt; a reasonable and even preferred approach in many use cases.)\n\nI&#39;m giving you the possibility to translate it into code in the\nclient.  Also the possibility to translate it into code in another\nservice that will return a list of all URLs for all known people, in\nwhich case the client can HATEOAS from one resource to another in\nbliss, even though behind the scenes we have to components sharing a\nURL template.\n\nThere&#39;s a guarantee that the template is as permanent as any permanent\nURL, and that it&#39;s composable.\n\n\n&gt; &gt; 2.  Separately it specifies a collection of resources dealing\n&gt; &gt; with attachments, which doesn&#39;t have a URL template, but has\n&gt; &gt; a content type description, again briefly:\n&gt; &gt;\n&gt; &gt; &lt;attachments&gt;\n&gt; &gt;   &lt;attachment&gt;\n&gt; &gt;      ...\n&gt; &gt;      &lt;url&gt; ... &lt;/url&gt;\n&gt; &gt;   &lt;/attchment&gt;\n&gt; &gt; &lt;/attachments&gt;\n&gt; &gt;\n&gt; &gt; And specifies that the attachment element up above (in #1) is\n&gt; &gt; a URL to a resource from that collection, so you know that\n&gt; &gt; navigating there will get you the list of attachments for a\n&gt; &gt; given task.\n&gt;\n&gt; When you say &quot;Separately it specifies...&quot; what is &quot;it?&quot;\n\nThe specification.  It has several parts broken by functionality, and\nthose map nicely to different collections of resources.  Attachments,\nfor examples, are not just for tasks, but tasks reference them.\n\n&gt; &gt; 3.  Separately it specifies a collection of resources for\n&gt; &gt; attachments themselves, and specifies that the url element\n&gt; &gt; above (in #2) is a URL to a resource from that collection.\n&gt; &gt;\n&gt; &gt; So now you can write a client that given a name can download\n&gt; &gt; all the attachments for that person&#39;s pending tasks.\n&gt;\n&gt; Fine.  So why not just use &quot;{base}/person/{name}/pending/{task}/attachments&quot;\n&gt; to return a list of URLs attached?\n\nThe scenario I have here is one of getting all the tasks and their\nattachments, so you already have the URL to these attachments, from\nthe same source that provides the task ID, so why go to the pain of\ncomposing that URL?\n\nSeparately, I haven&#39;t decided on /attachments being an entry point, so\nthere&#39;s no URL template for it.  I mentioned before we need to come up\nwith practices before the language, that&#39;s why.  There are places\nwhere you want to use templates, places you don&#39;t, and places like\nthis ... how would you decide?\n\n\n&gt; And if the answer no because of HATEOAS, I&#39;m going to question &quot;Does it\n&gt; really make a difference whether our client knows the word &quot;attachments&quot; but\n&gt; that it be in the representation and not in the URL?  Either way the client\n&gt; will need to know about attachments so the whole requirement to navigate\n&gt; rather than just call a URL documented as a URI Template seems to me to be a\n&gt; non-sequiter (except in the case where the client is doing something generic\n&gt; *and* we have a generic way to handle HATEOAS navigation for well-known use\n&gt; cases, so as &quot;associated files&quot; like your attachements. This &quot;generic\n&gt; method&quot; I speak of is actually what I&#39;m suggesting we identify as a Service\n&gt; Object Model.)\n\nLeast coupling is a goal, and least coupling is about specifying the\nminimum stuff, with preference for that which is least likely to\nchange.\n\nI&#39;m thinking of it in terms of lines items in my spec.  A URL template\nis one line item.  An attachment element is another line item.  I can\nhave both, I prefer to have none, but I&#39;ll settle for one.  So as a\nrule of thumb which one should I pick.\n\nThese are thoughts, not conclusions:\n- I don&#39;t have (yet) a use case for accessing attachments directly,\nbut certainly for accessing them from the task, so maybe link from the\ntask?\n- There&#39;s also an HTML representation which will have the link, so\nwe&#39;re already documenting and testing the attachment element in one\nrepresentation.\n- If you get a URL it points to the resource, if you get an ID it&#39;s\nuseless without the template, so one piece of data vs two?\n- I can move the attachments to a different service, some place else,\nand that composition would require no change to the client if they\nalways request the URL?\n- But not necessarily if they cache them, or if the new service has\nincompatible semantics.\n- It&#39;s actually slightly easier to write functional code for\ntraversing links than composing URLs, which may be a sign that it&#39;s\nthe better model?\n\nAssaf\n\n&gt;\n&gt; --\n&gt;\n&gt; -Mike Schinkel\n&gt; http://www.mikeschinkel.com/blogs/\n&gt; http://www.welldesignedurls.org\n&gt; http://atlanta-web.org\n&gt;\n&gt;\n\n"}}
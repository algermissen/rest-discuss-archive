{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":289191104,"authorName":"Jan Algermissen","from":"Jan Algermissen &lt;algermissen1971@...&gt;","profile":"algermissen1971","replyTo":"SENDER","senderId":"P7MYBTvLokJsMcdtqVi1SOjFu7aQsq81FpU6zs62OunkLeOL-hkavlFzpMR3J3bw_l4F0Tf9PGMcM6K_9JBPifvPxOO8LtCd715E_gRsRa8","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Atom feed vs. list of orders","postDate":"1281217620","msgId":16225,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEQ3QTE0OTRDLTgxRDQtNDQyQy04ODQ4LTMxQTJGN0I0RjcxNUBtYWMuY29tPg==","inReplyToHeader":"PEFBTkxrVGlrMGRyUlgyb2U4WWpvUkYtLWQtdWVNYmN1MFkrUkFiOGcrLTc0SkBtYWlsLmdtYWlsLmNvbT4=","referencesHeader":"PEUyQjIwMjIyLUU1MTEtNEFCOC1BMkNFLUEyMUM4MTVFOTI1NEBtYWMuY29tPiA8RjE5NjI2NDZEM0I2NDY0MkI3QzlBMDYwNjhFRTFFNjQwRTE0Mzg1N0BleDEwLmhvc3RlZGV4Y2hhbmdlLmxvY2FsPiA8RUE2MDczMkMtM0IwMC00NUQ0LThGRDgtMDJFQjFCMjE0NEY1QG1hYy5jb20+IDxGMTk2MjY0NkQzQjY0NjQyQjdDOUEwNjA2OEVFMUU2NDBFMTQzQjExQGV4MTAuaG9zdGVkZXhjaGFuZ2UubG9jYWw+IDxCRTNEODY1OS1CNzYyLTQ3NTktQkM4Qy0xM0I0REE5ODVDNUZAbWFjLmNvbT4gPEFBTkxrVGk9K0x6bk9DdFhma0xVek9CLWFCOEVPWkRyYXNiMzdtV0ItUFd2QkBtYWlsLmdtYWlsLmNvbT4gPDExNTgzREFFLUYxRUEtNDhCMi05QjU1LTNFM0JEOTQ2QjY3NUBtYWMuY29tPiA8QUFOTGtUaWswZHJSWDJvZThZam9SRi0tZC11ZU1iY3UwWStSQWI4ZystNzRKQG1haWwuZ21haWwuY29tPg=="},"prevInTopic":16224,"nextInTopic":16226,"prevInTime":16224,"nextInTime":16226,"topicId":16194,"numMessagesInTopic":86,"msgSnippet":"... Yes, I think we are (sort of) in alignment now. ... Got a reference for [1]? :-) I (think I) like profiles to express bundles of extensions or syntax","rawEmail":"Return-Path: &lt;algermissen1971@...&gt;\r\nX-Sender: algermissen1971@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 97479 invoked from network); 7 Aug 2010 21:57:08 -0000\r\nX-Received: from unknown (98.137.34.44)\n  by m4.grp.sp2.yahoo.com with QMQP; 7 Aug 2010 21:57:08 -0000\r\nX-Received: from unknown (HELO asmtpout024.mac.com) (17.148.16.99)\n  by mta1.grp.sp2.yahoo.com with SMTP; 7 Aug 2010 21:57:08 -0000\r\nMIME-version: 1.0\r\nContent-transfer-encoding: 7BIT\r\nContent-type: text/plain; charset=us-ascii\r\nX-Received: from [10.129.155.155] ([80.187.153.91])\n by asmtp024.mac.com (Sun Java(tm) System Messaging Server 6.3-8.01 (built Dec\n 16 2008; 32bit)) with ESMTPSA id &lt;0L6S00BF4XUDGP50@...&gt; for\n rest-discuss@yahoogroups.com; Sat, 07 Aug 2010 14:47:08 -0700 (PDT)\r\nX-Proofpoint-Spam-Details: rule=notspam policy=default score=0 spamscore=0\n ipscore=0 phishscore=0 bulkscore=0 adultscore=0 classifier=spam adjust=0\n reason=mlx engine=6.0.2-1004200000 definitions=main-1008070174\r\nX-Proofpoint-Virus-Version: vendor=fsecure\n engine=2.50.10432:5.0.10011,1.0.148,0.0.0000\n definitions=2010-08-07_01:2010-08-06,2010-08-07,1970-01-01 signatures=0\r\nIn-reply-to: &lt;AANLkTik0drRX2oe8YjoRF--d-ueMbcu0Y+RAb8g+-74J@...&gt;\r\nDate: Sat, 07 Aug 2010 23:47:00 +0200\r\nCc: Robert Brewer &lt;fumanchu@...&gt;,\n REST Discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nMessage-id: &lt;D7A1494C-81D4-442C-8848-31A2F7B4F715@...&gt;\r\nReferences: &lt;E2B20222-E511-4AB8-A2CE-A21C815E9254@...&gt;\n &lt;F1962646D3B64642B7C9A06068EE1E640E143857@...&gt;\n &lt;EA60732C-3B00-45D4-8FD8-02EB1B2144F5@...&gt;\n &lt;F1962646D3B64642B7C9A06068EE1E640E143B11@...&gt;\n &lt;BE3D8659-B762-4759-BC8C-13B4DA985C5F@...&gt;\n &lt;AANLkTi=+LznOCtXfkLUzOB-aB8EOZDrasb37mWB-PWvB@...&gt;\n &lt;11583DAE-F1EA-48B2-9B55-3E3BD946B675@...&gt;\n &lt;AANLkTik0drRX2oe8YjoRF--d-ueMbcu0Y+RAb8g+-74J@...&gt;\r\nTo: mike amundsen &lt;mamund@...&gt;\r\nX-Mailer: Apple Mail (2.1081)\r\nFrom: Jan Algermissen &lt;algermissen1971@...&gt;\r\nSubject: Re: [rest-discuss] Atom feed vs. list of orders\r\nX-Yahoo-Group-Post: member; u=289191104; y=eISBL27QUFOuUPCOn3b2BZ55ILALVmpHHLHHMkBqgjVaOmZdI3uxrTAO\r\nX-Yahoo-Profile: algermissen1971\r\n\r\n\nOn Aug 7, 2010, at 6:13 PM, mike amundsen wrote:\n\n&gt; &lt;snip&gt;\n&gt;&gt; We know the user agent cannot handle the HTML-containing/scan-referencing feed because we did not program it that way. And besides that: both, HTML and the scan do not make good candidates for machine processing without a hidden contract regarding the structure.\n&gt; &lt;/snip&gt;\n&gt; \n&gt; not a problem. this would be easy in a face-to-face, but email has\n&gt; it&#39;s limitations that must be overcome.\n&gt; \n&gt; OK, &quot;because we did not program it that way&quot; is the key here. IOW, the\n&gt; ability to &quot;pluck&quot; the proper content out of a representation (that\n&gt; looks like the one you offered as your example) has not been\n&gt; programmed into the client. I understand that.\n&gt; \n&gt; &lt;snip&gt;\n&gt; HTML and the scan do not make good candidates for machine processing\n&gt; without a hidden contract regarding the structure.\n&gt; &lt;/snip&gt;\n&gt; and\n&gt; &lt;snip&gt;\n&gt; If the implemented goal is to compile a list of ordered items from\n&gt; each order the user agent needs to be able to parse the order\n&gt; representation.\n&gt; &lt;/snip&gt;\n&gt; \n&gt; and then: &quot;..without a [hidden] contract...&quot;\n&gt; All media-type processing is by contract: the contract offered when\n&gt; the media-type is documented. I think I hear you saying that the\n&gt; contract details for a client that uses Atom would need (in your case)\n&gt; _additional_ contract information such as (&quot;here is how you can\n&gt; recognize an order list inside an Atom feed&quot;, etc.). I can see that\n&gt; this is so.\n&gt; \n&gt; &lt;snip&gt;\n&gt; But the problem is really that of formats embedded in formats because\n&gt; we cannot implement the client without making assumptions about the\n&gt; possible  sub-formats. If these assumptions cannot be stated in the\n&gt; Acept header, the situation I am dealing with exists.\n&gt; &lt;/snip&gt;\n&gt; \n&gt; PROBLEM RESTATEMENT:\n&gt; OK, now I think we&#39;re getting to the heart of the matter. It would\n&gt; seem that the issue here is whether it is possible or reasonable to\n&gt; create ways for clients to &quot;know whether they understand this\n&gt; representation&quot; even in cases where the Accept header is &quot;insufficient\n&gt; as a descriptor&quot; (due to the fact that a well-known generic media-type\n&gt; is employed for the representation).\n\nYes, I think we are (sort of) in alignment now.\n\n\n&gt; \n&gt; PROPOSED SOLUTION:\n&gt; I will offer the following that I&#39;ve done in the past that might address this:\n&gt; 1 - for cases where the representation is based on HTML, I use the\n&gt; @profile model[1]. This allows me to program clients to look for the\n&gt; proper information within the @profile attribute and reject it if\n&gt; necessary (invalid representation) or, if the @profile is valid, but\n&gt; the body does not conform, pitch another error (invalid body), etc.\n\nGot a reference for [1]? :-)\n\nI (think I) like profiles to express &#39;bundles of extensions or syntax conventions&#39;. Though I&#39;d rather use the profile in the Accept header to enable conneg. Teh profile parameter is already standardized (I think; too late for a pointer). Another approach is the Content-Features header (also: too late for pointers).\n\nBasically, a profile parameter works like media type subclassing: Accept: application/atom+xml;profile=orderlist would mean: I can handle an atom feed, but only if it conforms to a certain profile. The server can still respond with 200 Ok, Content-Type:application/atom if the profile is met or 406 if it isn&#39;t.\n\nHowever, this is really not much different from minting a media type. \n\n\n&gt; \n&gt; 2 - for cases where the presentation is based on XML (Atom, etc.), I\n&gt; use standard namespace checking. That means, for my designs, I use\n&gt; Atom&#39;s extension model rather than embedding custom XML in the content\n&gt; element. I have, in the past, used a namespace within the content\n&gt; element, but no longer do that.\n\nAh - so you do not let the server &#39;negotiate&#39; but let the client fail gracefully if the condition is not met?\n\n\n&gt; \n&gt; These two &quot;hacks&quot; allow me to design representations that use\n&gt; well-known formats and still provide a simple test for clients to use\n&gt; in order to validate the representation before attempting to process\n&gt; it.\n&gt; \n&gt; Does this make sense?\n\nYes, but it does not solve the problem of a hidden expectation being in place that to some extend (implicitly) constrains the service owner. What is so bad about just minting a new type? (Especially since all design activity in REST is spent in this area anyhow?)\n\nI think we are just too afraid of minting media types. IMHO there should be one (or a couple) for each domain such as SCM (procurement), ERP, HR, ITIL, BI, etc. You know, the big acronyms of the enterprise IT space.\n\nJan\n\n\n&gt; \n&gt; mca\n&gt; http://amundsen.com/blog/\n&gt; http://mamund.com/foaf.rdf#me\n&gt; \n&gt; \n&gt; \n&gt; \n&gt; On Sat, Aug 7, 2010 at 11:43, Jan Algermissen &lt;algermissen1971@...&gt; wrote:\n&gt;&gt; \n&gt;&gt; On Aug 7, 2010, at 5:17 PM, mike amundsen wrote:\n&gt;&gt; \n&gt;&gt;&gt; &lt;snip&gt;\n&gt;&gt;&gt; While a usual feed reader (e.g. Apple Mail) would be able to perform\n&gt;&gt;&gt; it&#39;s implemented goal based on that feed our\n&gt;&gt;&gt; compile-list-of-newly-ordered-items user agent would definitely not be\n&gt;&gt;&gt; able to do what it is implemented to do.\n&gt;&gt;&gt; &lt;/snip&gt;\n&gt;&gt;&gt; \n&gt;&gt;&gt; QUESTION:\n&gt;&gt;&gt; how do you &quot;know&quot; this to be true? IOW, what is it about the\n&gt;&gt;&gt; representation example you provided that leads you to believe your\n&gt;&gt;&gt; &quot;compile-list-of-newly-ordered-items user agent&quot; cannot &quot;do what it is\n&gt;&gt;&gt; implemented to do&quot;?\n&gt;&gt; \n&gt;&gt; Gee - every sentence I leave out leads to confusion. Sorry. What I meant to say was:\n&gt;&gt; \n&gt;&gt; We know the user agent cannot handle the HTML-containing/scan-referencing feed because we did not program it that way. And besides that: both, HTML and the scan do not make good candidates for machine processing without a hidden contract regarding the structure.\n&gt;&gt; \n&gt;&gt;&gt; \n&gt;&gt;&gt; ASSUMPTION:\n&gt;&gt;&gt; I think I hear you talking about the need for clients to know ahead of\n&gt;&gt;&gt; time whether the representation returned is something they can\n&gt;&gt;&gt; process.\n&gt;&gt; \n&gt;&gt; Yes. That is: meaningfully process according to their implemented goals. If the goal is to turn the controls contained in the representation into something the user can activate (e.g. as browsers or feed readers do) then fine. If the implemented goal is to compile a list of ordered items from each order the user agent needs to be able to parse the order representation. If it understands that there are orders at all (feed not empty) but it does not understand the individual order syntax it needs to reposrt an error somehow. (Which might just be ok - depending on the goal implementation).\n&gt;&gt; \n&gt;&gt; But the problem is really that of formats embedded in formats because we cannot implement the client without making assumptions about the possible  sub-formats. If these assumptions cannot be stated in the Acept header, the situation I am dealing with exists.\n&gt;&gt; \n&gt;&gt;&gt; If that&#39;s the case, that means there must be some information\n&gt;&gt;&gt; baked into the client that is used to &quot;check&quot; the representation\n&gt;&gt;&gt; returned. The Accept header is one of these methods (&quot;I am a client\n&gt;&gt;&gt; that will only be able to understand the following representation\n&gt;&gt;&gt; formats&quot;).\n&gt;&gt;&gt; \n&gt;&gt;&gt; I that what this is about?\n&gt;&gt; \n&gt;&gt; Yes. It is the question of how specific the Acept header needs to be without causing hidden coupling. (Or whether we should just live with the uncertainty on the client side - which I think we should not).\n&gt;&gt; \n&gt;&gt; Jan\n&gt;&gt; \n&gt;&gt; \n&gt;&gt;&gt; \n&gt;&gt;&gt; mca\n&gt;&gt;&gt; http://amundsen.com/blog/\n&gt;&gt;&gt; http://mamund.com/foaf.rdf#me\n&gt;&gt;&gt; \n&gt;&gt;&gt; \n&gt;&gt;&gt; \n&gt;&gt;&gt; \n&gt;&gt;&gt; On Sat, Aug 7, 2010 at 06:47, Jan Algermissen &lt;algermissen1971@...&gt; wrote:\n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; On Aug 7, 2010, at 12:25 AM, Robert Brewer wrote:\n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt;&gt; Jan Algermissen wrote:\n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt;&gt; The question is whether Accept: text/html is indeed sufficient. Is it\n&gt;&gt;&gt;&gt;&gt;&gt; true that the user agent can persue its implemented goal of compiling\n&gt;&gt;&gt;&gt;&gt; a\n&gt;&gt;&gt;&gt;&gt;&gt; list of all newly ordered items from any HTML document?\n&gt;&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt;&gt; Suppose the server provides both, application/order and text/html as\n&gt;&gt;&gt;&gt;&gt;&gt; representations of the list of new orders. When a user agent comes\n&gt;&gt;&gt;&gt;&gt;&gt; along that says Accept: text/html the server can freely assume\n&gt;&gt;&gt;&gt;&gt; browser-\n&gt;&gt;&gt;&gt;&gt;&gt; like capabilities of the user agent (any HTML will do; even an &lt;ul&gt;\n&gt;&gt;&gt;&gt;&gt;&gt; with items referring to scanned PNGs of the orders). IOW, the owner of\n&gt;&gt;&gt;&gt;&gt;&gt; the server is free to change the implementation for text/html as long\n&gt;&gt;&gt;&gt;&gt;&gt; as a) the resource semantics remain stable (list of new orders) and\n&gt;&gt;&gt;&gt;&gt;&gt; valid HTML is returned.\n&gt;&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt;&gt; How would the user agent implementation deal with HTML? Special\n&gt;&gt;&gt;&gt;&gt;&gt; syntactic assumptions are not allowed (because of Accept: text/html)\n&gt;&gt;&gt;&gt;&gt; or\n&gt;&gt;&gt;&gt;&gt;&gt; would mean a hidden coupling. How would a user agent distinguish\n&gt;&gt;&gt;&gt;&gt;&gt; between an HTML it does not understand but that contains orders (e.g.\n&gt;&gt;&gt;&gt;&gt;&gt; the list of scanned order images) and an empty list of orders that is\n&gt;&gt;&gt;&gt;&gt;&gt; augmented with some HTML it does not (and need not) understand?\n&gt;&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt;&gt; IMO that is impossible and hence Accept: text/html does not cut it.\n&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt; I think all that demonstrates is that HTML is too generic to be useful\n&gt;&gt;&gt;&gt;&gt; for your particular task, not that all media types require &quot;special\n&gt;&gt;&gt;&gt;&gt; syntactic assumptions&quot; (whether implicit or explicit). The fact that you\n&gt;&gt;&gt;&gt;&gt; can make a &quot;list&quot; in HTML using any of a hundred types of tags doesn&#39;t\n&gt;&gt;&gt;&gt;&gt; mean Atom, for example, also suffers from the same inappropriateness to\n&gt;&gt;&gt;&gt;&gt; your task.\n&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; I knew you were going to say that :-)\n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; Let&#39;s see:\n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; The implementor of the server side chooses to expose the order list as HTML and Atom. In the Atom case, she would write sth like this (in JAX-RS):\n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; @Path(&quot;/new-orders&quot;)\n&gt;&gt;&gt;&gt; class NewOrders {\n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;  @GET\n&gt;&gt;&gt;&gt;  @Produces(&quot;text/html&quot;)\n&gt;&gt;&gt;&gt;  public Response newOrdersAsHTML() {\n&gt;&gt;&gt;&gt;     // ...\n&gt;&gt;&gt;&gt;  }\n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;  @GET\n&gt;&gt;&gt;&gt;  @Produces(&quot;application/atom+xml&quot;)\n&gt;&gt;&gt;&gt;  public Response newOrdersAsAtomFeed() {\n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;  }\n&gt;&gt;&gt;&gt; }\n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; When it comes to implementing (or changing) the Atom-producing method, the server developer need not (must not) be concerned with any client expectations. All that matters is to produce any valid Atom feed[1].\n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; Given that, it would be a perfectly fine implementation to produce an Atom feed such as this:\n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; &lt;feed&gt;\n&gt;&gt;&gt;&gt;  &lt;entry&gt;\n&gt;&gt;&gt;&gt;    &lt;summary type=&quot;xhtml&quot;&gt;\n&gt;&gt;&gt;&gt;      &lt;xhtml:div xmlns:xhtml=&quot;http://www.w3.org/1999/xhtml&quot;&gt;\n&gt;&gt;&gt;&gt;        &lt;xhtml:h1&gt;Order 551-A-1272&lt;/xhtml:h1&gt;\n&gt;&gt;&gt;&gt;        &lt;xhtml:ul&gt;\n&gt;&gt;&gt;&gt;          &lt;xhtml:li&gt;Device Foo, Item Price: ... &lt;/xhtml:li&gt;\n&gt;&gt;&gt;&gt;          &lt;xhtml:li&gt;Screw Bar, Item Price: ... &lt;/xhtml:li&gt;\n&gt;&gt;&gt;&gt;        &lt;/xhtml:ul&gt;\n&gt;&gt;&gt;&gt;        &lt;xhtml:b&gt;Total: 600 EUR&lt;/xhtml:b&gt;\n&gt;&gt;&gt;&gt;      &lt;/xhtml:div&gt;\n&gt;&gt;&gt;&gt;    &lt;/summary&gt;\n&gt;&gt;&gt;&gt;    &lt;content type=&quot;image/png&quot; src=&quot;/scan-archive/orders/551-A-1272.png&quot;/&gt;\n&gt;&gt;&gt;&gt;  &lt;/entry&gt;\n&gt;&gt;&gt;&gt;  &lt;entry&gt;\n&gt;&gt;&gt;&gt;    &lt;summary type=&quot;xhtml&quot;&gt;\n&gt;&gt;&gt;&gt;      &lt;xhtml:div xmlns:xhtml=&quot;http://www.w3.org/1999/xhtml&quot;&gt;\n&gt;&gt;&gt;&gt;        &lt;xhtml:h1&gt;Order 551-A-1273&lt;/xhtml:h1&gt;\n&gt;&gt;&gt;&gt;        &lt;xhtml:ul&gt;\n&gt;&gt;&gt;&gt;          &lt;xhtml:li&gt;Device Foo, Item Price: ... &lt;/xhtml:li&gt;\n&gt;&gt;&gt;&gt;          &lt;xhtml:li&gt;Screw Bar, Item Price: ... &lt;/xhtml:li&gt;\n&gt;&gt;&gt;&gt;        &lt;/xhtml:ul&gt;\n&gt;&gt;&gt;&gt;        &lt;xhtml:b&gt;Total: 600 EUR&lt;/xhtml:b&gt;\n&gt;&gt;&gt;&gt;      &lt;/xhtml:div&gt;\n&gt;&gt;&gt;&gt;    &lt;/summary&gt;\n&gt;&gt;&gt;&gt;    &lt;content type=&quot;image/png&quot; src=&quot;/scan-archive/orders/551-A-1273.png&quot;/&gt;\n&gt;&gt;&gt;&gt;  &lt;/entry&gt;\n&gt;&gt;&gt;&gt; &lt;/feed&gt;\n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; If you develop a user agent that says Accept: application/atom+xml;type=feed you must be prepared to receive the above feed.\n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; While a usual feed reader (e.g. Apple Mail) would be able to perform it&#39;s implemented goal based on that feed our compile-list-of-newly-ordered-items user agent would definitely not be able to do what it is implemented to do.\n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; Two questions arise:\n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; 1. How does the user agent detect that it cannot perform its task but (despite having a perfectly valid answer)\n&gt;&gt;&gt;&gt; 2. What to do about that\n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; 1.:\n&gt;&gt;&gt;&gt; Given the feed above, how do we need to implement the client to report to the user (e.g. someone that at some point looks in a log file or someone that uses the business intelligence application that uses the compiled reports about newly ordered items) that a correct answer was received, that it did indeed contain orders but that the list could not be processed as intended?\n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; First of all, the client trusts the higher level assumption that the resource indeed provides the list of new orders. This is the same kind of trust that any browser has when it follows an &lt;img src=&quot;&quot;/&gt; hypermedia control. The server told the user agent something about the referenced resource and the client can reasonably expect that to be true (otherwise we would deal with a broken server and that is not the issue here).\n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; Since the client expects the feed to represent the list of new orders, it is IMHO reasonable to assume that any entry in that feed points to a new order. No entries would mean &#39;no new orders&#39;. This is IMHO not semantic tunneling through the Atom feed because the assumption is backed by the semantics of the resource as advertised by the server.\n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; The feed appearently contains two entries, hence the user agent can be programmed to understand that there are two new orders to process. When it comes to processing the orders the user agent will have to realize that neither the summary nor the referenced content is available in a format that is sufficient to extract the ordered items automatically. Hence the user agent has to report an error eventually leading to some human action to fix the situation:\n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; 2.:\n&gt;&gt;&gt;&gt; We reach question #2 once the fact that a problem exists for the user agent has reached a human. What is he supposed to do? There are three options:\n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; a) call the server developer and negotiate a certain format for the Atom feed\n&gt;&gt;&gt;&gt; b) adjust the user agent implementation to handle the format received (e.g. parse out the HTML from the summary or OCR the scanned orders)\n&gt;&gt;&gt;&gt; c) do nothing except mark the compiled report as &#39;wrong&#39; or &#39;unusable&#39;. IWO, accept the fact that the user goal cannot be satisfied\n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; a) Leads to coupling (if it is at all possible/desireable to call the server implementor)\n&gt;&gt;&gt;&gt; b) Does not improve the situation because the format can just change again tomorrow\n&gt;&gt;&gt;&gt; c) is the honest option but provides no business value\n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; In my opinion, the only thing to really improve the situation is to standardize a format that allows the server developer to actually determine the user agent expectations (capabilities) from the Accept header. If we had application/orderlist (or at least application/atom+xml;profile=orderlist) the server developer would need to either add a new response-producing method or send a 406.\n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; Does that sufficiently illustrate the point?\n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; Jan\n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; [1] and of course be true to be true to the server&#39;s own statement that the resource represents\n&gt;&gt;&gt;&gt;    the new orders. It would be bad to serve a list of shipped orders, for example.\n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt; Robert Brewer\n&gt;&gt;&gt;&gt;&gt; fumanchu@...\n&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; -----------------------------------\n&gt;&gt;&gt;&gt;  Jan Algermissen, Consultant\n&gt;&gt;&gt;&gt;  NORD Software Consulting\n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;  Mail: algermissen@...\n&gt;&gt;&gt;&gt;  Blog: http://www.nordsc.com/blog/\n&gt;&gt;&gt;&gt;  Work: http://www.nordsc.com/\n&gt;&gt;&gt;&gt; -----------------------------------\n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; ------------------------------------\n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; Yahoo! Groups Links\n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt; \n&gt;&gt;&gt; \n&gt;&gt;&gt; ------------------------------------\n&gt;&gt;&gt; \n&gt;&gt;&gt; Yahoo! Groups Links\n&gt;&gt;&gt; \n&gt;&gt;&gt; \n&gt;&gt;&gt; \n&gt;&gt; \n&gt;&gt; -----------------------------------\n&gt;&gt;  Jan Algermissen, Consultant\n&gt;&gt;  NORD Software Consulting\n&gt;&gt; \n&gt;&gt;  Mail: algermissen@...\n&gt;&gt;  Blog: http://www.nordsc.com/blog/\n&gt;&gt;  Work: http://www.nordsc.com/\n&gt;&gt; -----------------------------------\n&gt;&gt; \n&gt;&gt; \n&gt;&gt; \n&gt;&gt; \n&gt;&gt; \n\n-----------------------------------\n Jan Algermissen, Consultant\n NORD Software Consulting\n\n Mail: algermissen@...\n Blog: http://www.nordsc.com/blog/\n Work: http://www.nordsc.com/\n-----------------------------------\n\n\n\n\n\n"}}
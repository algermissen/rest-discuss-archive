{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":23186829,"authorName":"Paul Prescod","from":"Paul Prescod &lt;paul@...&gt;","replyTo":"SENDER","senderId":"OYCqhJ_kEi8RJGhFGlF4ZmVf4eIseWg1XckTpOzGvBkVmr0GofWHVIsy0ds8e1QQUuFHgv96eGOdehChMQog4lmrtuFTNQ","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Indicating Notifications in HTTP","postDate":"1011727886","msgId":140,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDNDNERCRTBFLjE5M0E5QjQ3QHByZXNjb2QubmV0Pg==","referencesHeader":"PDIwMDIwMTIyMDUzNC5BQUEyNjg4MEBtYXJrYmFrZXIuY2E+IDwzQzRDRkVDOS5CNjFBNTFCQkBqdW1wLm5ldD4gPDNDNEQwNkE2LjdFQTA2QzZAanVtcC5uZXQ+IDwzQzREQTVEQS40NUFFMDgzREBwcmVzY29kLm5ldD4gPDNDNERCMTUxLjJBQTFEMUExQGp1bXAubmV0Pg=="},"prevInTopic":136,"nextInTopic":147,"prevInTime":139,"nextInTime":141,"topicId":109,"numMessagesInTopic":50,"msgSnippet":"... Fair enough. ... Why not a header like Accepts ? ... This is already fuzzy because of caching. Obviously we don t treat every counter bump as a state","rawEmail":"Return-Path: &lt;paul@...&gt;\r\nX-Sender: paul@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_0_1_3); 22 Jan 2002 19:33:52 -0000\r\nReceived: (qmail 37502 invoked from network); 22 Jan 2002 19:32:21 -0000\r\nReceived: from unknown (216.115.97.172)\n  by m5.grp.snv.yahoo.com with QMQP; 22 Jan 2002 19:32:21 -0000\r\nReceived: from unknown (HELO smtp1.ActiveState.com) (209.17.183.249)\n  by mta2.grp.snv.yahoo.com with SMTP; 22 Jan 2002 19:32:21 -0000\r\nReceived: from smtp3.ActiveState.com (smtp3.ActiveState.com [192.168.3.19])\n\tby smtp1.ActiveState.com (8.11.6/8.11.6) with ESMTP id g0MJWI130268;\n\tTue, 22 Jan 2002 11:32:18 -0800\r\nReceived: from prescod.net (ssh1.ActiveState.com [192.168.3.32])\n\tby smtp3.ActiveState.com (8.11.6/8.11.6) with ESMTP id g0MJWHe13645;\n\tTue, 22 Jan 2002 11:32:17 -0800\r\nMessage-ID: &lt;3C4DBE0E.193A9B47@...&gt;\r\nDate: Tue, 22 Jan 2002 11:31:26 -0800\r\nX-Mailer: Mozilla 4.76 [en] (Windows NT 5.0; U)\r\nX-Accept-Language: en\r\nMIME-Version: 1.0\r\nTo: jbone@...\r\nCc: &quot;rest-discuss@yahoogroups.com&quot; &lt;rest-discuss@yahoogroups.com&gt;\r\nSubject: Re: [rest-discuss] Indicating Notifications in HTTP\r\nReferences: &lt;200201220534.AAA26880@...&gt; &lt;3C4CFEC9.B61A51BB@...&gt; &lt;3C4D06A6.7EA06C6@...&gt; &lt;3C4DA5DA.45AE083D@...&gt; &lt;3C4DB151.2AA1D1A1@...&gt;\r\nContent-Type: text/plain; charset=us-ascii\r\nContent-Transfer-Encoding: 7bit\r\nX-PerlMx-Spam: Gauge=, Probability=0%, Report=INTERNAL_HOST\r\nX-Filtered-By: PerlMx makes it fast and easy.  See http://www.ActiveState.com/Products/PerlMx/Header\r\nFrom: Paul Prescod &lt;paul@...&gt;\r\nX-Yahoo-Group-Post: member; u=23186829\r\n\r\nJeff Bone wrote:\n&gt; \n&gt; Paul Prescod wrote:\n&gt; \n&gt; &gt; Therefore I&#39;d propose that we view it as a convention layered on top of\n&gt; &gt; existing methods in the short term with a transition to a WATCH method\n&gt; &gt; in the long (perhaps very long) term.\n&gt; \n&gt; I&#39;m not *entirely* antagonistic to this kind of a both / and approach, assuming that we\n&gt; can guarantee that the semantics of the two mechanisms are consistent and that any\n&gt; service that supports WATCH is also required to support the other mechanism as well.  (I\n&gt; think this is important from an adoption perspective.)  \n\nFair enough.\n\n&gt; ...\n&gt; \n&gt; I think that the kind of notification desired is a very application (i.e., resource)\n&gt; specific thing.  There are really three distinct parts to a subscription:  an expression\n&gt; of interest in notifications of state change on some resource by some other component,\n&gt; an event notification of state change per-se, and potentially the representation of the\n&gt; changed state.  In the latter case, what you&#39;re really doing is specifying what\n&gt; representation of the resource you want sent to you when state changes;  it&#39;s entirely\n&gt; consistent (AFAICT) with HTTP / URI to specify this in a query string, e.g.\n&gt; \n&gt;   POST /some/rsrc/subs?reply-to=http://foo.com/notices/1;repr=delta\n\nWhy not a header like &quot;Accepts&quot;?\n\n&gt; But there&#39;s a deeper issue:  what does a state change on a given resource mean,\n&gt; exactly?  It&#39;s not clear that this is generically meaningful for all resources.  If a\n&gt; web page, for example, contains a counter that changes every time a GET happens on it,\n&gt; should that then trigger a bunch of notifications?  \n\nThis is already fuzzy because of caching. Obviously we don&#39;t treat every\ncounter bump as a state change and the HTTP spec. has leeway to allow\nthat. So the problem isn&#39;t specific to subscriptions.\n\n&gt; ... IMO, the issue of what&#39;s &quot;in&quot; a\n&gt; notification, how to represent it, and when to trigger it are all dependent on the\n&gt; application / resource in question.  Each app --- indeed each resource --- should be\n&gt; free to define these things however they like.\n\nI agree. We can only standardize the parts that are really general. But\nI think that it is possible to define a base behaviour that is widely\napplicable and optimizable. In particular:\n\n * notifications are sent whenever the resource thing changes in a\n&quot;meaningful&quot; sense\n * the notification&#39;s representation is specified in a header, else it\nis just a URL\n * a notification&#39;s lifespan is expressed in a header, else it is server\ndefined\n\n&gt; &gt; &gt; (2)  Supporting subscriptions for a substantial portion of resources hosted by a\n&gt; &gt; &gt; particular domain has costs which may not be justified for a given service /\n&gt; &gt; &gt; application.\n&gt; &gt;\n&gt; &gt; The same goes for supporting PUT! That&#39;s why most web sites don&#39;t\n&gt; &gt; support PUT!\n&gt; \n&gt; Yup.  Think about that.\n\nI&#39;m content to have WATCH be like PUT, something that we would like to\nbe widespread some day, but probably not for a while.\n\n&gt;...\n&gt; Anyway, recognizing that this problem exists, it seems silly to build something and hope\n&gt; it&#39;s generally used when there&#39;s this kind of built-in adoption friction.\n\nAbsolutely agree that WATCH must be like PUT: something you could use\nbut that you could do without if you&#39;re stuck with stupid admins or\ncoders who want to only learn two methods.\n\n&gt; ...\n&gt; If this is strongly true, then I&#39;m (somewhat uneasily) okay with a new method; if the\n&gt; spec for a new method *requires* that subscriptions be reified in a general way --- thus\n&gt; ensuring parity of method and non-method based, um, methods --- then we&#39;re good.  I\n&gt; doubt very seriously that this is acceptable to the general HTTP audience, though ---\n&gt; the protocol space shouldn&#39;t mold the resource model.\n\nEither way the protocol space is molding the resource model. Whether it\nis a header or a method, it is &quot;protocol&quot;. And anyway, doesn&#39;t PUT mold\nthe resource space? You PUT something you get a new resource. Yu DELETE\nsomething you remove a resource. WATCH creates a new notification\nresource.\n\nAnother option is for the Server to return a &quot;Subscription-URI:&quot; header\nto a GET or HEAD. Then the client knows that it can POST to the\nsubscription-URI to get a subscription for this resource.\n\n--&gt;\nGET /index.html\n\n&lt;---\n200 OK\nSubscription-URI: /index.html?subscriptions\n\n---&gt;\nPOST /index.html?subscriptions\n\nThis maintains the virtue of allowing *any resource* to declare that it\nis watchable without out-of-band arrangement. That&#39;s what I&#39;m trying to\npreserve. I don&#39;t want a bunch of conventions that client and server\nhave to agree to use through email. For simple cases I want it to &quot;just\nwork&quot;.\n\n&gt;...\n&gt; We agree on the value of reifying subscriptions on the server end of things;  similar\n&gt; benefits and arguments obtain for reifying subscriptions on the client end of things.\n&gt; If you *don&#39;t* reify subscriptions on the client end of things, then generally speaking\n&gt; the client needs to do much more work to determine what particular subscription a\n&gt; particular event notification refers to.  \n\nI agree that you will often want this. But maybe the changed URI is all\nyou care about. That&#39;s all I cared about from netmind.\n\n Paul Prescod\n\n"}}
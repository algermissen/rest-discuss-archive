{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":10266038,"authorName":"Jeff Bone","from":"Jeff Bone &lt;jbone@...&gt;","replyTo":"SENDER","senderId":"x86yrRoIsxaBg6-42RE2fco9TgMDCw5yRJIzoQ-F-Lxtiy7vAI3Tdhk7IClIPQYtDFcqhhqUvW_dIsBXEExu1cw","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Re: [XML-SIG] REST made more concrete still","postDate":"1014324350","msgId":765,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDNDNzU1QzdFLjNDNDZERUE0QGp1bXAubmV0Pg==","referencesHeader":"PDNDNzJGNDVDLjNDRDUyNzRBQHByZXNjb2QubmV0PiA8MjAwMjAyMTkyMjM4MzkuQTIwMjA5QG1vemFydC5tZW1zLWV4Y2hhbmdlLm9yZz4gPDIwMDIwMjIwMDAwMDE3LkEyMTA2NUBtb3phcnQubWVtcy1leGNoYW5nZS5vcmc+IDwzQzczOURENS4yRUYzRUQ2QkBwcmVzY29kLm5ldD4gPDIwMDIwMjIwMjA1MDM3LkdEMTA5M0BjcnlzdGFsLm1lbXMtZXhjaGFuZ2Uub3JnPg=="},"prevInTopic":761,"nextInTopic":789,"prevInTime":764,"nextInTime":766,"topicId":757,"numMessagesInTopic":8,"msgSnippet":"Andrew, Paul --- I think this is a great thread!  It s nice to see somebody looking at RESTifying an already-designed XML-RPC interface with a possible eye ","rawEmail":"Return-Path: &lt;jbone@...&gt;\r\nX-Sender: jbone@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_0_2); 21 Feb 2002 20:48:44 -0000\r\nReceived: (qmail 98822 invoked from network); 21 Feb 2002 20:48:43 -0000\r\nReceived: from unknown (216.115.97.172)\n  by m6.grp.snv.yahoo.com with QMQP; 21 Feb 2002 20:48:43 -0000\r\nReceived: from unknown (HELO sm13.texas.rr.com) (24.93.35.40)\n  by mta2.grp.snv.yahoo.com with SMTP; 21 Feb 2002 20:48:43 -0000\r\nReceived: from jump.net (rrcs-sw-24-242-137-238.biz.rr.com [24.242.137.238])\n\tby sm13.texas.rr.com (8.12.0.Beta16/8.12.0.Beta16) with ESMTP id g1LKoK6D003071;\n\tThu, 21 Feb 2002 14:50:21 -0600\r\nMessage-ID: &lt;3C755C7E.3C46DEA4@...&gt;\r\nDate: Thu, 21 Feb 2002 14:45:50 -0600\r\nOrganization: Clickfeed\r\nX-Mailer: Mozilla 4.7 [en] (Win95; I)\r\nX-Accept-Language: en\r\nMIME-Version: 1.0\r\nTo: akuchlin@...\r\nCc: &quot;rest-discuss@yahoogroups.com&quot; &lt;rest-discuss@yahoogroups.com&gt;\r\nSubject: Re: [rest-discuss] Re: [XML-SIG] REST made more concrete still\r\nReferences: &lt;3C72F45C.3CD5274A@...&gt; &lt;20020219223839.A20209@...-exchange.org&gt; &lt;20020220000017.A21065@...-exchange.org&gt; &lt;3C739DD5.2EF3ED6B@...&gt; &lt;20020220205037.GD1093@...-exchange.org&gt;\r\nContent-Type: text/plain; charset=us-ascii\r\nContent-Transfer-Encoding: 7bit\r\nFrom: Jeff Bone &lt;jbone@...&gt;\r\nReply-To: jbone@...\r\nX-Yahoo-Group-Post: member; u=10266038\r\n\r\n\nAndrew, Paul --- I think this is a great thread!  It&#39;s nice to see somebody\nlooking at RESTifying an already-designed XML-RPC interface with a possible eye\ntowards implementation instead of simply as a thought experiment.  And the idea\nabout language binding is *juicy...*  (Hint, hint, Andrew. ;-)\n\nJust a few comments, with the proviso that my understanding of Matisse is\nlimited to a single read-through of the REST and RPC specs.\n\n&gt; &lt;service\n&gt; URI&gt;/check_auth?user_id is how you check whether a user can access\n&gt; that service.\n\nThis is more an aesthetics-of-naming comment than anything else, but it seems to\nme that there&#39;s a more &quot;resourceful&quot; way to model this.  How about\n\n&lt;serviceURI&gt;/users\n  GET returns a collection of authorized users for this service\n...and optionally....\n  POST of &lt;something?&gt; if authorized adds a user to this service, creating a new\nuserID\n  PUT of &lt;something?&gt; if authorized replaces the collection of authorized users\n\n&lt;serviceURI&gt;/users/userID\n  GET returns a struct describing the user, if it exists and is authorized; 404\nmeans not authorized\n...and optionally...\n  POST / PUT update or replace user by userID\n  DELETE removes a user\n\nNote that while the controversy rages on over whether URI and verbs (e.g.\n&quot;check_auth&quot;) are in some way incompatible, the more I work through these things\nthe more I find that (a) verbs-as-resources usually aren&#39;t necessary, and (b)\nURI-izing what are otherwise parameters to methods / verbs generally results in\nthe exposure of domain objects as interesting resources in their own right.\n\n&gt; Interesting possibilities, but they&#39;d make this REST version way more\n&gt; complicated than the XML-RPC version.  More powerful, too, of course\n&gt; -- the WATCH idea is particularly neat -- but I want to stay close to\n&gt; the original version&#39;s capabilities.\n\nIgnoring WATCH, it&#39;s still probably useful to consider whether making tickets\ninto resources adds some value to what you&#39;re doing....  IMO but admittedly at\nfirst glance, it would seem that making authentication / authorization tickets\nfirst-class citizens of URI space is a powerful idea.\n\n&gt; How about just this: POST &lt;service URI&gt;/check_auth?user_id, returning\n&gt; an XML-RPC encoded Boolean.  And the interface gets a little bit\n&gt; simpler, again.\n\nCf. above comments about URI-izing users, user_ids, etc.  While it makes the\ninterface slightly larger, it seems much more RESTful and flexible to me without\nadding a whole lot to implementation complexity or bulk.\n\n&gt; &gt;Sure. Shove as much data as you want down the POST. Maybe it&#39;s mildly\n&gt; &gt;non-HTTP-ish to create two resources with a single POST but it is very\n&gt; &gt;mild. If you want to be a purist, use HTTP POST and then a PUT for the\n&gt; &gt;metadata. Have the data URI point to its metadata.\n&gt;\n&gt; I think I like the POST+PUT approach.  Putting two resources, data +\n&gt; metadata, in a single POST isn&#39;t practical because the data might be\n&gt; very large, say a couple of gigabytes.\n\nCall me a purist, but it seems that this is the correct way to do this.  Having\nthe metadata be a subresource of the data URI, hyperlinking them, and operating\non them independently via separate methods adds much flexibility.  (Think:  it\ncould then be possible to eventually use content negotiation to return different\nrepresentations of the data URI&#39;s metadata...  yummy. :-)\n\n&gt; Revised REST version: POST &lt;master&gt;/new_cache_location?&lt;ticket&gt;.  The\n&gt; body is the data to be stored.  You will be returned a Location:\n&gt; header with the new URI for the data object.  GET from the new URI to\n&gt; get a URI for the metadata (probably URI/metadata); HTTP PUT the\n&gt; metadata to store it.\n\nYup.  Nitty aesthetic naming suggestion:  how about &lt;master&gt;/cache instead of\nall that new_cache_location stuff?\n\n&gt; Then again, if I have private data that I don&#39;t want Google to index\n&gt; for all the world to see, using HTTP+URIs doesn&#39;t buy me much.\n\nWell, not necessarily true.  The benefit is that you&#39;ve got all your domain\nobjects named and structured and accessible via a generic interface, which makes\nintegrating with / extending these things much, much easier.  There&#39;s lots of\nbenefits to this besides making this stuff Google-friendly.\n\n&gt; I&#39;m not sure whether preferences are a property of the user, indexed\n&gt; by application, or a property of the application indexed by user.  If\n&gt; the latter, then GETting/PUTting to &lt;service-URI&gt;/prefs?&lt;URI-encoded\n&gt; ticket&gt; works nicely.\n\nI agree, and I think this is a better way to look at the problem.\n\njb\n\n\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":69164307,"authorName":"mike amundsen","from":"mike amundsen &lt;mamund@...&gt;","profile":"mamund","replyTo":"SENDER","senderId":"OT4u1wFcN9AxVvaScgVU6obyR6SiV5N1rhiEL4uqkzJsU6NtZ1BdIKYCReq6pXHDCiJTaw5uZLcX03AMG-KrFH0J2kX2_fg","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] HTTP request and &quot;type safety&quot;","postDate":"1268178917","msgId":15022,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGI1NDhkZjY1MTAwMzA5MTU1NWszNDc5YzFmMm43YTkwMTE4NWMzNWY5Yzc3QG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PGY4YjM5YWNlMTAwMzA5MTU0NWwxMTFmNjc2ZHRmODE5YzMwMzgxZmYzMjdiQG1haWwuZ21haWwuY29tPg==","referencesHeader":"PDc1ODc4NC41MjE0Mi5xbUB3ZWIxMTI2MDEubWFpbC5ncTEueWFob28uY29tPgkgPGY4YjM5YWNlMTAwMzA5MTU0NWwxMTFmNjc2ZHRmODE5YzMwMzgxZmYzMjdiQG1haWwuZ21haWwuY29tPg=="},"prevInTopic":15021,"nextInTopic":15023,"prevInTime":15021,"nextInTime":15023,"topicId":15020,"numMessagesInTopic":18,"msgSnippet":"I would add to Craig s excellent reply that I ve sometimes used a token pattern to ensure tight control on updates to a server. If I want to allow a client app","rawEmail":"Return-Path: &lt;mca@...&gt;\r\nX-Sender: mca@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 19411 invoked from network); 9 Mar 2010 23:55:20 -0000\r\nX-Received: from unknown (98.137.34.46)\n  by m10.grp.re1.yahoo.com with QMQP; 9 Mar 2010 23:55:20 -0000\r\nX-Received: from unknown (HELO mail-fx0-f216.google.com) (209.85.220.216)\n  by mta3.grp.sp2.yahoo.com with SMTP; 9 Mar 2010 23:55:20 -0000\r\nX-Received: by fxm8 with SMTP id 8so466893fxm.25\n        for &lt;rest-discuss@yahoogroups.com&gt;; Tue, 09 Mar 2010 15:55:19 -0800 (PST)\r\nMIME-Version: 1.0\r\nX-Received: by 10.223.4.145 with SMTP id 17mr698211far.17.1268178917750; Tue, 09 \n\tMar 2010 15:55:17 -0800 (PST)\r\nIn-Reply-To: &lt;f8b39ace1003091545l111f676dtf819c30381ff327b@...&gt;\r\nReferences: &lt;758784.52142.qm@...&gt;\n\t &lt;f8b39ace1003091545l111f676dtf819c30381ff327b@...&gt;\r\nDate: Tue, 9 Mar 2010 18:55:17 -0500\r\nX-Google-Sender-Auth: e3d532c1f69e1251\r\nMessage-ID: &lt;b548df651003091555k3479c1f2n7a901185c35f9c77@...&gt;\r\nTo: craigmcc@...\r\nCc: jumeier@..., rest-discuss@yahoogroups.com\r\nContent-Type: multipart/alternative; boundary=000e0ce00a50e777d0048166e9f2\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: mike amundsen &lt;mamund@...&gt;\r\nSubject: Re: [rest-discuss] HTTP request and &quot;type safety&quot;\r\nX-Yahoo-Group-Post: member; u=69164307; y=myf_rNTZzkpDegONeCpOLHce76aR0pAzlq1DlkBZbLrC\r\nX-Yahoo-Profile: mamund\r\n\r\n\r\n--000e0ce00a50e777d0048166e9f2\r\nContent-Type: text/plain; charset=ISO-8859-1\r\n\r\nI would add to Craig&#39;s excellent reply that I&#39;ve sometimes used a token\npattern to ensure tight control on updates to a server.\n\nIf I want to allow a client app to update the server but still maintain\ntight control, I can require the client app to first request a ticket or\ntoken that grants that client the permission to perform the update. This\ntoken can be built any way the server wishes including using hash tags for\nthe enclosing resource (for POST) or some other value. You can easily make\nthe token time-limited and user- (or user-agent) specific, too. The way it\nis constructed is of no consequence to the client, of course.\n\nWhen the client performs the update (POST,PUT,DELETE) the value can be sent\nas part of the state representation or, in cases where the message body does\nnot allow for this (e.g. binary uploads), the data can be included in as an\nHTTP Header.\n\nIt&#39;s an extra step, but in cases where this information is critical and (as\nCraig already pointed out) the media-type in use is insufficient for the\ntask, a validation token is useful.\n\nmca\nhttp://amundsen.com/blog/\n\n\n\nOn Tue, Mar 9, 2010 at 18:45, Craig McClanahan &lt;craigmcc@...&gt; wrote:\n\n&gt;\n&gt;\n&gt;\n&gt;\n&gt; On Tue, Mar 9, 2010 at 9:48 AM, &lt;jumeier@...&gt; wrote:\n&gt;\n&gt;&gt;\n&gt;&gt;\n&gt;&gt; Hi all,\n&gt;&gt;\n&gt;&gt; I have a customer who raised a concern about REST &quot;type safety&quot;. What he\n&gt;&gt; means may be best explained by a simple example.\n&gt;&gt;\n&gt;&gt; Assume we have a resource that represents a folder, and by issueing a POST\n&gt;&gt; request, I can attach a file. What, however, if that post request wrongly\n&gt;&gt; goes to, let&#39;s say, another document resource instead of our folder, and the\n&gt;&gt; document resource also accepts POST (for some reason)?\n&gt;&gt;\n&gt;&gt; In a RPC world, the document type would not understand an &quot;addDocument()&quot;\n&gt;&gt; call, and consequently return an exception. But what about REST? Of course,\n&gt;&gt; the POST&#39;s attributes most likely wouldn&#39;t be understood and something like\n&gt;&gt; 400 Bad Request returned. But what if they were understood?\n&gt;&gt;\n&gt;&gt; So, are there means or patterns, to achieve (some sort) of type safety?\n&gt;&gt;\n&gt;&gt; This is one of the reasons I prefer to use specific media types, instead\n&gt; of generic things like &quot;application/xml&quot; or &quot;application/json&quot;, for my\n&gt; resources.  Then, if your &quot;folder&quot; resource accepts a media type that says\n&gt; &quot;here is a new document resource&quot;, but your document resource doesn&#39;t (it\n&gt; accepts some other kind of POST request like &quot;here is a comment to add to\n&gt; the discussion about this document&quot; with a different media type), then\n&gt; you&#39;re fine ... a 4xx response would be appropriate (and, if you&#39;re using a\n&gt; framework like JAX-RS for Java, the framework will take care of this\n&gt; negotiation for you).  An an extra for-free bonus, you can set things up so\n&gt; that the same resource can accept different POSTs (with different media\n&gt; types) to trigger different state changes and server responses.  No need to\n&gt; create 3 &quot;artificial&quot; resource URIs to support 3 different POSTs that\n&gt; trigger state changes.\n&gt;\n&gt; If you use a generic media type, then your &quot;document resource&quot; will need to\n&gt; validate the details of the received input to make sure it obeys the rules\n&gt; for what kind of behavior a POST should trigger on a document.  Of course,\n&gt; you should be doing that anyway ... so it should be pretty obvious that the\n&gt; incoming data doesn&#39;t have the right set of fields.  This kind of &quot;form\n&gt; validation&quot; isn&#39;t really much different than what you should be doing in a\n&gt; browser-based webapp, where the same scenario is possible.\n&gt;\n&gt;&gt; Thanks so much,\n&gt;&gt; Juerg\n&gt;&gt;\n&gt; Craig\n&gt;\n&gt;\n&gt;\n&gt; \n\r\n--000e0ce00a50e777d0048166e9f2\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nI would add to Craig&#39;s excellent reply that I&#39;ve sometimes used a t=\r\noken pattern to ensure tight control on updates to a server.&lt;div&gt;&lt;br&gt;&lt;/div&gt;=\r\n&lt;div&gt;If I want to allow a client app to update the server but still maintai=\r\nn tight control, I can require the client app to first request a ticket or =\r\ntoken that grants that client the permission to perform the update. This to=\r\nken can be built any way the server wishes including using hash tags for th=\r\ne enclosing resource (for POST) or some other value. You can easily make th=\r\ne token time-limited and user- (or user-agent) specific, too. The way it is=\r\n constructed is of no consequence to the client, of course.=A0&lt;/div&gt;\n&lt;div&gt;&lt;=\r\nbr&gt;&lt;/div&gt;&lt;div&gt;When the client performs the update (POST,PUT,DELETE) the val=\r\nue can be sent as part of the state representation or, in cases where the m=\r\nessage body does not allow for this (e.g. binary uploads), the data can be =\r\nincluded in as an HTTP Header.&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;It&#39;s an extra =\r\nstep, but in cases where this information is critical and (as Craig already=\r\n pointed out) the media-type in use is insufficient for the task, a validat=\r\nion token is useful.&lt;/div&gt;&lt;div&gt;&lt;br clear=3D&quot;all&quot;&gt;\nmca&lt;br&gt;&lt;a href=3D&quot;http://=\r\namundsen.com/blog/&quot;&gt;http://amundsen.com/blog/&lt;/a&gt;&lt;br&gt;&lt;br&gt;\n&lt;br&gt;&lt;br&gt;&lt;div clas=\r\ns=3D&quot;gmail_quote&quot;&gt;On Tue, Mar 9, 2010 at 18:45, Craig McClanahan &lt;span dir=\r\n=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:craigmcc@...&quot;&gt;craigmcc@...&lt;/a&gt;&g=\r\nt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;margin:0 0 0=\r\n .8ex;border-left:1px #ccc solid;padding-left:1ex;&quot;&gt;\n\n\n\n\n\n\n\n        \n\n\n\n&lt;di=\r\nv&gt;\n\n\n\n\n\n&lt;br&gt;&lt;br&gt;\n\n\n\n\n&lt;br&gt;&lt;br&gt;&lt;div class=3D&quot;gmail_quote&quot;&gt;&lt;div class=3D&quot;im&quot;&gt;O=\r\nn Tue, Mar 9, 2010 at 9:48 AM,  &lt;span dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:jum=\r\neier@...&quot; target=3D&quot;_blank&quot;&gt;jumeier@...&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;b=\r\nr&gt;&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;border-left:1px solid rgb(204,=\r\n 204, 204);margin:0pt 0pt 0pt 0.8ex;padding-left:1ex&quot;&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;div =\r\nstyle=3D&quot;background-color:rgb(255, 255, 255)&quot;&gt;\n&lt;span&gt;=A0&lt;/span&gt;\n\n\n&lt;div&gt;\n  &lt;=\r\ndiv&gt;\n\n\n    &lt;div&gt;\n      \n      \n      &lt;p&gt;Hi all,&lt;br&gt;\n&lt;br&gt;\nI have a customer =\r\nwho raised a concern about REST &quot;type safety&quot;. What he means may =\r\nbe best explained by a simple example.&lt;br&gt;\n&lt;br&gt;\nAssume we have a resource t=\r\nhat represents a folder, and by issueing a POST request, I can attach a fil=\r\ne. What, however, if that post request wrongly goes to, let&#39;s say, anot=\r\nher document resource instead of our folder, and the document resource also=\r\n accepts POST (for some reason)?&lt;br&gt;\n\n\n&lt;br&gt;\nIn a RPC world, the document ty=\r\npe would not understand an &quot;addDocument()&quot; call, and consequently=\r\n return an exception. But what about REST? Of course, the POST&#39;s attrib=\r\nutes most likely wouldn&#39;t be understood and something like 400 Bad Requ=\r\nest returned. But what if they were understood?&lt;br&gt;\n\n\n&lt;br&gt;\nSo, are there me=\r\nans or patterns, to achieve (some sort) of type safety?&lt;br&gt;\n&lt;br&gt;&lt;/p&gt;&lt;/div&gt;&lt;=\r\n/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;div&gt;This is one of the reasons I prefe=\r\nr to use specific media types, instead of generic things like &quot;applica=\r\ntion/xml&quot; or &quot;application/json&quot;, for my resources.=A0 Then, =\r\nif your &quot;folder&quot; resource accepts a media type that says &quot;he=\r\nre is a new document resource&quot;, but your document resource doesn&#39;t=\r\n (it accepts some other kind of POST request like &quot;here is a comment t=\r\no add to the discussion about this document&quot; with a different media ty=\r\npe), then you&#39;re fine ... a 4xx response would be appropriate (and, if =\r\nyou&#39;re using a framework like JAX-RS for Java, the framework will take =\r\ncare of this negotiation for you).=A0 An an extra for-free bonus, you can s=\r\net things up so that the same resource can accept different POSTs (with dif=\r\nferent media types) to trigger different state changes and server responses=\r\n.=A0 No need to create 3 &quot;artificial&quot; resource URIs to support 3 =\r\ndifferent POSTs that trigger state changes.&lt;br&gt;\n\n&lt;br&gt;If you use a generic m=\r\nedia type, then your &quot;document resource&quot; will need to validate th=\r\ne details of the received input to make sure it obeys the rules for what ki=\r\nnd of behavior a POST should trigger on a document.=A0 Of course, you shoul=\r\nd be doing that anyway ... so it should be pretty obvious that the incoming=\r\n data doesn&#39;t have the right set of fields.=A0 This kind of &quot;form =\r\nvalidation&quot; isn&#39;t really much different than what you should be do=\r\ning in a browser-based webapp, where the same scenario is possible.&lt;br&gt;\n\n&lt;/=\r\ndiv&gt;&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;border-left:1px solid rgb(20=\r\n4, 204, 204);margin:0pt 0pt 0pt 0.8ex;padding-left:1ex&quot;&gt;&lt;div style=3D&quot;backg=\r\nround-color:rgb(255, 255, 255)&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;p&gt;\nThanks so much,&lt;br&gt;\nJuer=\r\ng &lt;br&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;Craig&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;b=\r\nr&gt;\n\n\n\n\n\n\n&lt;br&gt;\n\n    \n    \n&lt;br&gt;\n\n\n\n\n&lt;div width=3D&quot;1&quot; style=3D&quot;color:white;cle=\r\nar:both&quot;&gt;&lt;/div&gt;\n\n\n\n&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;\n\r\n--000e0ce00a50e777d0048166e9f2--\r\n\n"}}
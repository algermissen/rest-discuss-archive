{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":343278744,"authorName":"Subbu Allamaraju","from":"Subbu Allamaraju &lt;subbu@...&gt;","profile":"sallamar","replyTo":"SENDER","senderId":"bW5sl5UlYaRwBAJzv86nyGjVMx3XXg9crurzPy1m39601nhCNl7vL4JY2s_Dq4JLBhGldde6M3HNSzk7w1hpt7NU-Wryh461Iw","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Why HATEOAS?","postDate":"1238554760","msgId":12361,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDg3MkM3RkU0LTAyQzQtNDZDMy1CNkRDLUVEMjk5OUQ1NDkzOUBzdWJidS5vcmc+","inReplyToHeader":"PGY4YjM5YWNlMDkwMzMxMTc1OWwzY2JjZGFmNWoyZDkwZWU5NzJhMjJmNGFiQG1haWwuZ21haWwuY29tPg==","referencesHeader":"PDU1YzYwZTM3MDkwMzMxMTcwMXg0YWRhYzAyZG8zNjliNWQ4NjE3MDBmNmU2QG1haWwuZ21haWwuY29tPiA8ZjhiMzlhY2UwOTAzMzExNzU5bDNjYmNkYWY1ajJkOTBlZTk3MmEyMmY0YWJAbWFpbC5nbWFpbC5jb20+"},"prevInTopic":12360,"nextInTopic":12362,"prevInTime":12360,"nextInTime":12362,"topicId":12357,"numMessagesInTopic":27,"msgSnippet":"Hi Craig, That is a great summary. The key point leakage of business rules. In the absence of hyperlinks, the server will have to explain the clients the rules","rawEmail":"Return-Path: &lt;subbu@...&gt;\r\nX-Sender: subbu@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 85715 invoked from network); 1 Apr 2009 02:58:34 -0000\r\nX-Received: from unknown (69.147.108.200)\n  by m1.grp.re1.yahoo.com with QMQP; 1 Apr 2009 02:58:34 -0000\r\nX-Received: from unknown (HELO wf-out-1314.google.com) (209.85.200.168)\n  by mta1.grp.re1.yahoo.com with SMTP; 1 Apr 2009 02:58:33 -0000\r\nX-Received: by wf-out-1314.google.com with SMTP id 29so3101218wff.20\n        for &lt;rest-discuss@yahoogroups.com&gt;; Tue, 31 Mar 2009 19:58:33 -0700 (PDT)\r\nX-Received: by 10.142.14.18 with SMTP id 18mr2909670wfn.215.1238554713507;\n        Tue, 31 Mar 2009 19:58:33 -0700 (PDT)\r\nReturn-Path: &lt;subbu@...&gt;\r\nX-Received: from ?192.168.1.100? (nat-dip6.cfw-a-gci.corp.yahoo.com [209.131.62.115])\n        by mx.google.com with ESMTPS id l31sm1639286rvb.11.2009.03.31.19.58.31\n        (version=TLSv1/SSLv3 cipher=RC4-MD5);\n        Tue, 31 Mar 2009 19:58:32 -0700 (PDT)\r\nCc: Solomon Duskis &lt;sduskis@...&gt;,\n Rest List &lt;rest-discuss@yahoogroups.com&gt;\r\nMessage-Id: &lt;872C7FE4-02C4-46C3-B6DC-ED2999D54939@...&gt;\r\nTo: craigmcc@...\r\nIn-Reply-To: &lt;f8b39ace0903311759l3cbcdaf5j2d90ee972a22f4ab@...&gt;\r\nContent-Type: text/plain; charset=US-ASCII; format=flowed; delsp=yes\r\nContent-Transfer-Encoding: 7bit\r\nMime-Version: 1.0 (Apple Message framework v930.3)\r\nDate: Tue, 31 Mar 2009 19:59:20 -0700\r\nReferences: &lt;55c60e370903311701x4adac02do369b5d861700f6e6@...&gt; &lt;f8b39ace0903311759l3cbcdaf5j2d90ee972a22f4ab@...&gt;\r\nX-Mailer: Apple Mail (2.930.3)\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Subbu Allamaraju &lt;subbu@...&gt;\r\nSubject: Re: [rest-discuss] Why HATEOAS?\r\nX-Yahoo-Group-Post: member; u=343278744; y=w8Rrln8Pq5Qt7Com8wPKxvXpDKOtFg9Fx2bJuhHtGqlhpBc\r\nX-Yahoo-Profile: sallamar\r\n\r\nHi Craig,\n\nThat is a great summary.\n\nThe key point leakage of business rules. In the absence of hyperlinks,  \nthe server will have to explain the clients the rules under which a  \ngiven transition is valid so that clients can initiate them. By  \nproviding hyperlinks, the server can hide those business rules from  \nclients. The clients will still have to know how to make transitions,  \nbut not when and why. In other words, HATEOAS helps reduce abstraction  \nleakage.\n\nSubbu\n\nOn Mar 31, 2009, at 5:59 PM, Craig McClanahan wrote:\n\n&gt; On Tue, Mar 31, 2009 at 5:01 PM, Solomon Duskis &lt;sduskis@...&gt;  \n&gt; wrote:\n&gt;\n&gt;&gt; [snip]\n&gt;&gt; Assuming that the practical barriers of entry are removed, what  \n&gt;&gt; practical\n&gt;&gt; benefits will we see?\n&gt;&gt;\n&gt;\n&gt; I know exactly where you are coming from with these questions ... I\n&gt; felt the same way until recently.  I&#39;ve designed several REST APIs\n&gt; over the last couple of years, but up until the most recent one, I\n&gt; designed and documented them in the &quot;typical&quot; way, describing the URI\n&gt; structure of the application and letting the client figure out what to\n&gt; send when.  My most recent effort is contributing to the design of the\n&gt; REST architecture for the Sun Cloud API[1]  to control virtual\n&gt; machines and so on.  In addition, I&#39;m very focused on writing client\n&gt; language bindings for this API in multiple languages (Ruby, Python,\n&gt; Java) ... so I get a first hand feel for programming to this API at a\n&gt; very low level.\n&gt;\n&gt; We started from the presumption that the service would publish only\n&gt; *one* well-known URI (returning a &quot;cloud&quot; representation containing\n&gt; representations for, and/or URI links to representations for, all the\n&gt; cloud resources that are accessible to the calling user).  Every other\n&gt; URI in the entire system (including all those that do state changes)\n&gt; are discovered by examining these representations.  Even in the early\n&gt; days, I can see some significant, practical, short term benefits we\n&gt; have gained from taking this approach:\n&gt;\n&gt; * REDUCED CLIENT CODING ERRORS.  Looking back at all the REST client\n&gt; side interfaces\n&gt;  that I, or people I work with, have built, about 90% of the bugs\n&gt; have been in the construction\n&gt;  of the right URIs for the server.  Typical mistakes are leaving out\n&gt; path segments, getting them\n&gt;  in the wrong order, or forgetting to URL encode things.  All this\n&gt; goes away when the server\n&gt;  hands you exactly the right URI to use for every circumstance.\n&gt;\n&gt; * REDUCED INVALID STATE TRANSITION CALLS.  When the client decides\n&gt; which URI to call and\n&gt;  when, they run the risk of attempting to request state transitions\n&gt; that are not valid for the current\n&gt;  state of the server side resource.  An example from my problem\n&gt; domain ... it&#39;s not allowed to\n&gt;  &quot;start&quot; a virtual machine (VM) until you have &quot;deployed&quot; it.  The\n&gt; server knows about URIs to\n&gt;  initiate each of the state changes (via a POST), but the\n&gt; representation of the VM lists only the\n&gt;  URIs for state transitions that are valid from the current state.\n&gt; This makes it extremely easy\n&gt;  for the client to understand that trying to start a VM that hasn&#39;t\n&gt; been deployed yet is not legal,\n&gt;  because there will be no corresponding URI in the VM representation.\n&gt;\n&gt; * FINE GRAINED EVOLUTION WITHOUT (NECESSARILY) BREAKING OLD CLIENTS.\n&gt;  At any given time, the client of any REST API is going to be\n&gt; programmed with *some* assumptions\n&gt;  about what the system can do.  But, if you document a restriction to\n&gt; &quot;pay attention to only those\n&gt;  aspects of the representation that you know about&quot;, plus a server\n&gt; side discipline to add things later\n&gt;  that don&#39;t disrupt previous behavior, you can evolve APIs fairly\n&gt; quickly without breaking all clients,\n&gt;  or having to support multiple versions of the API simultaneously on\n&gt; your server.  You don&#39;t have to\n&gt;  wait years for serendipity benefits :-).  Especially compared to\n&gt; something like SOAP where the\n&gt;  syntax of your representations is versioned (in the WSDL), so you\n&gt; have to mess with the clients\n&gt;  on every single change.\n&gt;\n&gt; Having drunk the HATEOAS koolaid now, I would have a really hard time\n&gt; going back :-).\n&gt;\n&gt; Craig McClanahan\n&gt;\n&gt; [1] http://kenai.com/projects/suncloudapis/pages/Home\n\n---\nhttp://subbu.org\n\n\n"}}
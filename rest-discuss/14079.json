{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":242972596,"authorName":"Jorn Wildt","from":"&quot;Jorn Wildt&quot; &lt;jw@...&gt;","profile":"jorn_lind_nielsen","replyTo":"SENDER","senderId":"6TwWJ02EWXTKM7PjN-G8GKfnqlALXYGhDZIAcYxWRaGIcatrkm03yx076MQXgSHfrICluiCNVthfeB7k2tj-JwC3mzRFQQjI","spamInfo":{"isSpam":false,"reason":"6"},"subject":"Documenting RESTful Services (part II)","postDate":"1260168873","msgId":14079,"canDelete":false,"contentTrasformed":false,"systemMessage":true,"headers":{"messageIdInHeader":"PGhmaThyOSsxbnFwQGVHcm91cHMuY29tPg=="},"prevInTopic":0,"nextInTopic":14080,"prevInTime":14078,"nextInTime":14080,"topicId":14079,"numMessagesInTopic":5,"msgSnippet":"Describing query parameters One of the recuring questions of REST is how to describe services while adhering to the ideal of one URL must rule them all","rawEmail":"Return-Path: &lt;jw@...&gt;\r\nReceived: (qmail 38754 invoked from network); 7 Dec 2009 14:57:10 -0000\r\nReceived: from unknown (98.137.34.44)\n  by m5.grp.sp2.yahoo.com with QMQP; 7 Dec 2009 14:57:10 -0000\r\nReceived: from unknown (HELO n38b.bullet.mail.sp1.yahoo.com) (66.163.168.152)\n  by mta1.grp.sp2.yahoo.com with SMTP; 7 Dec 2009 14:57:10 -0000\r\nDKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=yahoogroups.com; s=lima; t=1260197771; bh=ygzLYM4D57YuiJuXmQDPPDegmwejj6HwGFlisNOvif8=; h=Received:Received:X-Sender:X-Apparently-To:X-Received:X-Received:X-Received:X-Received:X-Received:Date:To:Message-ID:User-Agent:MIME-Version:Content-Type:X-Mailer:X-Yahoo-Newman-Property:X-Originating-IP:X-eGroups-Msg-Info:X-Yahoo-Post-IP:From:Subject:X-Yahoo-Group-Post:X-Yahoo-Profile:X-YGroups-SubInfo:Sender:X-eGroups-Approved-By:X-eGroups-Auth; b=ccKDdA1LY8ZhLQXX/gsLsD7H+T3FcTEV7nQvFXzMu/ASle4rpp2hOr8rNEr3tYGcQ9cWZlEDCpAVaae1zeBawrItiS6rnY/ce0LIe9JK8qfo7Sompj6OTRz/NfT0Z77t\r\nReceived: from [69.147.65.148] by n38.bullet.mail.sp1.yahoo.com with NNFMP; 07 Dec 2009 14:56:11 -0000\r\nReceived: from [98.137.34.36] by t11.bullet.mail.sp1.yahoo.com with NNFMP; 07 Dec 2009 14:56:11 -0000\r\nX-Sender: jw@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 40492 invoked from network); 7 Dec 2009 06:54:41 -0000\r\nX-Received: from unknown (98.137.34.44)\n  by m14.grp.re1.yahoo.com with QMQP; 7 Dec 2009 06:54:41 -0000\r\nX-Received: from unknown (HELO n37b.bullet.mail.sp1.yahoo.com) (66.163.168.151)\n  by mta1.grp.sp2.yahoo.com with SMTP; 7 Dec 2009 06:54:41 -0000\r\nX-Received: from [69.147.65.174] by n37.bullet.mail.sp1.yahoo.com with NNFMP; 07 Dec 2009 06:54:33 -0000\r\nX-Received: from [98.137.34.35] by t12.bullet.mail.sp1.yahoo.com with NNFMP; 07 Dec 2009 06:54:33 -0000\r\nDate: Mon, 07 Dec 2009 06:54:33 -0000\r\nTo: rest-discuss@yahoogroups.com\r\nMessage-ID: &lt;hfi8r9+1nqp@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: multipart/alternative; boundary=&quot;6-1738644388-0813615498=:1&quot;\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-Yahoo-Newman-Property: groups-system\r\nX-eGroups-Msg-Info: 1:6:0:0:0\r\nFrom: &quot;Jorn Wildt&quot; &lt;jw@...&gt;\r\nSubject: Documenting RESTful Services (part II)\r\nX-Yahoo-Group-Post: member; u=242972596; y=MWHZOOKdyYQDs96_O2FPq7rZ984AbXFQ3Wy3AcELHcGIzhyBpOR90Lclx5Y\r\nX-Yahoo-Profile: jorn_lind_nielsen\r\nX-eGroups-Approved-By: gonga_thrash &lt;distobj@...&gt; via web; 07 Dec 2009 14:56:10 -0000\r\n\r\n\r\n--6-1738644388-0813615498=:1\r\nContent-Type: text/plain; charset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nDescribing query parameters\n\nOne of the recuring questions of REST is how t=\r\no describe services while\nadhering to the ideal of &quot;one URL must rule them =\r\nall&quot; constraint,\nmeaning you should only publish the root URL of your API a=\r\nnd then\neverything should be discoverable from there.\n\nThis goes very well =\r\nwhen you are working with simple ressource URLs,\nlike for instance a single=\r\n movie at http:://movies.org/movie/1234.\nEverybody seems to agree that you =\r\njust need to know the returned\ncontent-type apriori to consume such a URL. =\r\nSo far so good - if I happen\nto stumble upon a movie URL then my content-ty=\r\npe tells me it&#39;s a movie,\nand I know what to do with that.\n\nThe next questi=\r\non is then: how do I discover this URL when I am not\nallowed to assume anyt=\r\nhing about the URL template? The answer seems to\nbe: you get the URL from t=\r\nhe collection of all movies URL, for instance\nhttp://movies.org/movies. Thi=\r\ns ressource could simply return an XML list\nof all movies in the system, an=\r\nd you could then select the entry that\ncorresponds to your intended movie.\n=\r\n\nUnfortunately our movie collection is way too big for this approach to\nwor=\r\nk, so we turn to searching or filtering the collection through query\nparame=\r\nters. You can for instance get all the thrillers by filtering with\nthe &quot;thr=\r\niller&quot; category: http://movies.org/movies?category=3Dthriller.\n\nBut, wait a=\r\n moment, how do I know what parameters to use? This has\nnothing to do with =\r\ncontent-types, so publishing some movie vendor\ncontent-type does not help m=\r\ne at all. To me it&#39;s quite obvious that my\nmovie API must somehow describe =\r\nthe available query parameters to the\nconsumers. But how (and without docum=\r\nenting the actual URL)?\n\nNow we come to my first question: has anyone been =\r\nusing XHTML forms for\ndescribing URL-parameters for REST services?\n\nHere is=\r\n an example description of my movies search service:\n\n&lt;form action=3D&quot;http:=\r\n//movies.org/movies&quot; method=3D&quot;GET&quot;&gt;\n   &lt;p&gt;Some general introduction ...&lt;/p=\r\n&gt;\n   &lt;label for=3D&quot;categoryRef&quot;&gt;The &quot;category&quot; parameter can filter the\nmov=\r\nies collection by category&lt;/label&gt;\n   &lt;input type=3D&quot;text&quot; name=3D&quot;category=\r\n&quot; id=3D&quot;categoryRef&quot;/&gt;\n   &lt;input type=3D&quot;submit&quot; value=3D&quot;Search&quot;/&gt;\n&lt;/form&gt;=\r\n\n\nXHTML forms seems like a perfect fit for me: 1) you get an executable\nspe=\r\ncification that the end user can try out, 2) you can include human\nreadable=\r\n prosa for the parameter descriptions using &lt;label&gt; tags, 3) you\ndescribe b=\r\noth the action URL and the HTTP method, and 4) you should in\nprincipple be =\r\nable to auto-generate code proxies for the forms.\n\nThis doesn&#39;t remove the =\r\nneed for a human to actually study the service\nbefore programming the appli=\r\ncation, but it makes it easy to do so, and\nit makes it possible to resolve =\r\nthe actual service URL at runtime by\nlooking at the forms action=3D&quot;...&quot; at=\r\ntribute. I don&#39;t see any sensible\nway of making the parameters themselves s=\r\nomewhat computer deductable\nfrom the description, so they must be hardcoded=\r\n into the application\nafter reading the published (online) description.\n\n\nD=\r\nescribing available services\n\nNow we have a way of describing a single serv=\r\nice and it&#39;s associated\nquery parameters. But still we have no way of disco=\r\nvering the actual URL\nof the service since this must not be known apriori.\n=\r\n\nWhat we need is a list of all the available service URLs (or collection\nUR=\r\nLs) in a computer (and human) readable form.\n\nSo here is my next question: =\r\nare there any de-facto standards for a list\nof service URLs?\n\nPersonally I =\r\nwould suggest using XHTML again with a description list:\n\n  &lt;dl&gt;\n   &lt;dt&gt;&lt;a =\r\nhref=3D&quot;http://movies.org/movies&quot; class=3D&quot;movies&quot;&gt;Movies&lt;/a&gt;&lt;/dt&gt;\n   &lt;dd&gt;T=\r\nhe &quot;Movies&quot; service lets you search all our available moves.&lt;/dd&gt;\n  &lt;/dl&gt;\n\n=\r\nNow our client can look for the anchor tag marked as class=3D&quot;movies&quot; and\nf=\r\netch the URL from the href attribute.\n\nAnother easy solution could be to us=\r\ne Atom which essentially is just a\nlist of URLs and their description.\n\n\nDe=\r\nscribing actions\n\nThis has been covered quite well by Subbu Allamaraju at I=\r\nnfoQ:\nhttp://www.infoq.com/articles/subbu-allamaraju-rest\n&lt;http://www.infoq=\r\n.com/articles/subbu-allamaraju-rest&gt;   - you simply\ninclude action links in=\r\n your formats.\n\nSo the URL for buying a movie would be embedded in the movi=\r\ne description\ntogether with all sorts of other actions you can perform on t=\r\nhe movie:\n\n&lt;movie&gt;\n  ...\n  &lt;actions&gt;\n   &lt;link href=3D&quot;http://movies.org/mov=\r\nie/1234/buy&quot; rel=3D&quot;buy-movie&quot;/&gt;\n   &lt;link href=3D&quot;http://movie-rating.org/r=\r\nate/1234&quot; rel=3D&quot;rate-movie&quot;/&gt;\n  &lt;/actions&gt;\n&lt;/move&gt;\n\nAt each of these URLs =\r\nyou would be given an XHTML form describing how to\nactually buy or rate a m=\r\novie.\n\n\nPutting it all together\n\nSo here is what my fictive movie client wo=\r\nuld do to use the API:\n\n# Request service URLs\nGET /\n\n# Response - from thi=\r\ns the client derives the &quot;movies&quot; URL.\n200 OK\nContentType: text/xhtml\n&lt;html=\r\n&gt;\n  &lt;dl&gt;\n   &lt;dt&gt;&lt;a href=3D&quot;http://movies.org/movies&quot; class=3D&quot;movies&quot;&gt;Movie=\r\ns&lt;/a&gt;&lt;/dt&gt;\n   &lt;dd&gt;The &quot;Movies&quot; service lets you search all our available mo=\r\nves.&lt;/dd&gt;\n  &lt;/dl&gt;\n&lt;/html&gt;\n\n# Request movie description\nGET /movies\n\n# Respo=\r\nnse - from this form the client derives the action URL to use for\nsearching=\r\n movies\n200 OK\nContentType: text/xhtml\n&lt;html&gt;\n  &lt;form action=3D&quot;http://movi=\r\nes.org/movies&quot;&gt;\n   &lt;p&gt;Some general introduction ...&lt;/p&gt;\n   &lt;label for=3D&quot;ca=\r\ntegoryRef&quot;&gt;The &quot;category&quot; parameter can filter the\nmovies collection by cat=\r\negory&lt;/label&gt;\n   &lt;input type=3D&quot;text&quot; name=3D&quot;category&quot; id=3D&quot;categoryRef&quot;/=\r\n&gt;\n   &lt;input type=3D&quot;submit&quot; value=3D&quot;Search&quot;/&gt;\n  &lt;/form&gt;\n&lt;/html&gt;\n\n# Request=\r\n thrillers\nGET /movies?category=3Dthrillers\n\n# Response\n200 OK\nContentType:=\r\n application/vnd.movies.movie-collection+xml\n&lt;movies&gt;\n  &lt;movie href=3D&quot;http=\r\n://movies.org/movie/1234&quot;&gt;Thriller no. 1&lt;/movie&gt;\n&lt;/movies&gt;\n\n# Alternative r=\r\nesponse (using a micro format)\n200 OK\nContentType: text/xhtml\n&lt;html&gt;\n  &lt;ul&gt;=\r\n\n    &lt;li&gt;&lt;a href=3D&quot;http://movies.org/movie/1234&quot; class=3D&quot;movie&quot;&gt;Thriller =\r\nno.\n1&lt;/a&gt;&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/html&gt;\n\n# At last we can request the actual movie\nG=\r\nET /movies/1234\n\n# Response\n200 OK\nContentType: application/vnd.movies.movi=\r\ne+xml\n&lt;movie&gt;\n  ...\n&lt;/movie&gt;\n\n\n/J=F8rn Wildt\n\n(somewhat related to the olde=\r\nr discussion here:\nhttp://tech.groups.yahoo.com/group/rest-discuss/message/=\r\n13707)\n\n\n\r\n--6-1738644388-0813615498=:1\r\nContent-Type: text/html; charset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;b&gt;Describing query parameters&lt;/b&gt;&lt;br&gt;&lt;br&gt;One of the recuring questions of =\r\nREST is how to describe services while adhering to the ideal of &quot;one URL mu=\r\nst rule them all&quot; constraint, meaning you should only publish the root URL =\r\nof your API and then everything should be discoverable from there.&lt;br&gt;&lt;br&gt;T=\r\nhis goes very well when you are working with simple ressource URLs, like fo=\r\nr instance a single movie at http:://movies.org/movie/1234. Everybody seems=\r\n to agree that you just need to know the returned content-type apriori to c=\r\nonsume such a URL. So far so good - if I happen to stumble upon a movie URL=\r\n then my content-type tells me it&#39;s a movie, and I know what to do with tha=\r\nt.&lt;br&gt;&lt;br&gt;The next question is then: how do I discover this URL when I am n=\r\not allowed to assume anything about the URL template? The answer seems to b=\r\ne: you get the URL from the collection of all movies URL, for instance http=\r\n://movies.org/movies. This ressource could simply return an XML list of all=\r\n movies in the system, and you could then select the entry that corresponds=\r\n to your intended movie.&lt;br&gt;&lt;br&gt;Unfortunately our movie collection is way t=\r\noo big for this approach to work, so we turn to searching or filtering the =\r\ncollection through query parameters. You can for instance get all the thril=\r\nlers by filtering with the &quot;thriller&quot; category: http://movies.org/movies?ca=\r\ntegory=3Dthriller.&lt;br&gt;&lt;br&gt;But, wait a moment, how do I know what parameters=\r\n to use? This has nothing to do with content-types, so publishing some movi=\r\ne vendor content-type does not help me at all. To me it&#39;s quite obvious tha=\r\nt my movie API must somehow describe the available query parameters to the =\r\nconsumers. But how (and without documenting the actual URL)?&lt;br&gt;&lt;br&gt;Now we =\r\ncome to my first question: has anyone been using XHTML forms for describing=\r\n URL-parameters for REST services? &lt;br&gt;&lt;br&gt;Here is an example description o=\r\nf my movies search service:&lt;br&gt;&lt;br&gt;&lt;font face=3D&quot;courier new&quot;&gt;&lt;form acti=\r\non=3D&quot;http://movies.org/movies&quot; method=3D&quot;GET&quot;&gt;&lt;br&gt;&nbsp; &lt;p&gt;Some =\r\ngeneral introduction ...&lt;/p&gt;&lt;br&gt;&nbsp; &lt;label for=3D&quot;categoryRef&quot;&=\r\ngt;The &quot;category&quot; parameter can filter the movies collection by category&lt=\r\n;/label&gt;&lt;br&gt;&nbsp; &lt;input type=3D&quot;text&quot; name=3D&quot;category&quot; id=3D&quot;categ=\r\noryRef&quot;/&gt;&lt;br&gt;&nbsp; &lt;input type=3D&quot;submit&quot; value=3D&quot;Search&quot;/&gt;&lt;br&gt;&=\r\nlt;/form&gt;&lt;/font&gt;&lt;br&gt;&lt;br&gt;XHTML forms seems like a perfect fit for me: 1) =\r\nyou get an executable specification that the end user can try out, 2) you c=\r\nan include human readable prosa for the parameter descriptions using &lt;la=\r\nbel&gt; tags, 3) you describe both the action URL and the HTTP method, and =\r\n4) you should in principple be able to auto-generate code proxies for the f=\r\norms.&lt;br&gt;&lt;br&gt;This doesn&#39;t remove the need for a human to actually study the=\r\n service before programming the application, but it makes it easy to do so,=\r\n and it makes it possible to resolve the actual service URL at runtime by l=\r\nooking at the forms action=3D&quot;...&quot; attribute. I don&#39;t see any sensible way =\r\nof making the parameters themselves somewhat computer deductable from the d=\r\nescription, so they must be hardcoded into the application after reading th=\r\ne published (online) description.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Describing available servic=\r\nes&lt;/b&gt;&lt;br&gt;&lt;br&gt;Now we have a way of describing a single service and it&#39;s ass=\r\nociated query parameters. But still we have no way of discovering the actua=\r\nl URL of the service since this must not be known apriori.&lt;br&gt;&lt;br&gt;What we n=\r\need is a list of all the available service URLs (or collection URLs) in a c=\r\nomputer (and human) readable form.&lt;br&gt;&lt;br&gt;So here is my next question: are =\r\nthere any de-facto standards for a list of service URLs?&lt;br&gt;&lt;br&gt;Personally =\r\nI would suggest using XHTML again with a description list:&lt;br&gt;&lt;br&gt;&lt;font fac=\r\ne=3D&quot;courier new&quot;&gt;&nbsp;&lt;dl&gt;&lt;br&gt;&nbsp; &lt;dt&gt;&lt;a href=3D&quot;http:/=\r\n/movies.org/movies&quot; class=3D&quot;movies&quot;&gt;Movies&lt;/a&gt;&lt;/dt&gt;&lt;br&gt;&nbs=\r\np; &lt;dd&gt;The &quot;Movies&quot; service lets you search all our available moves.&=\r\nlt;/dd&gt;&lt;br&gt;&nbsp;&lt;/dl&gt;&lt;/font&gt;&lt;br&gt;&lt;br&gt;Now our client can look for t=\r\nhe anchor tag marked as class=3D&quot;movies&quot; and fetch the URL from the href at=\r\ntribute.&lt;br&gt;&lt;br&gt;Another easy solution could be to use Atom which essentiall=\r\ny is just a list of URLs and their description.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt; Describing a=\r\nctions&lt;/b&gt;&lt;br&gt;&lt;br&gt;This has been covered quite well by Subbu Allamaraju at I=\r\nnfoQ: &lt;a href=3D&quot;http://www.infoq.com/articles/subbu-allamaraju-rest&quot;&gt;http:=\r\n//www.infoq.com/articles/subbu-allamaraju-rest&lt;/a&gt;&nbsp; - you simply inclu=\r\nde action links in your formats.&lt;br&gt;&lt;br&gt;So the URL for buying a movie would=\r\n be embedded in the movie description together with all sorts of other acti=\r\nons you can perform on the movie:&lt;br&gt;&lt;br&gt;&lt;font face=3D&quot;courier new&quot;&gt;&lt;mov=\r\nie&gt;&lt;br&gt;&nbsp;...&lt;br&gt;&nbsp;&lt;actions&gt;&lt;br&gt;&nbsp; &lt;link href=3D&quot;htt=\r\np://movies.org/movie/1234/buy&quot; rel=3D&quot;buy-movie&quot;/&gt;&lt;br&gt;&nbsp; &lt;link hr=\r\nef=3D&quot;http://movie-rating.org/rate/1234&quot; rel=3D&quot;rate-movie&quot;/&gt;&lt;br&gt;&nbsp;&=\r\nlt;/actions&gt;&lt;br&gt;&lt;/move&gt;&lt;/font&gt;&lt;br&gt;&lt;br&gt;At each of these URLs you wo=\r\nuld be given an XHTML form describing how to actually buy or rate a movie.&lt;=\r\nbr&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Putting it all together&lt;/b&gt;&lt;br&gt;&lt;br&gt;So here is what my fictive=\r\n movie client would do to use the API:&lt;br&gt;&lt;br&gt;&lt;font face=3D&quot;courier new&quot;&gt;# =\r\nRequest service URLs&lt;br&gt;GET /&lt;br&gt;&lt;br&gt;# Response - from this the client deri=\r\nves the &quot;movies&quot; URL.&lt;br&gt;200 OK&lt;br&gt;ContentType: text/xhtml&lt;br&gt;&lt;html&gt;&lt;=\r\nbr&gt;&nbsp;&lt;dl&gt;&lt;br&gt;&nbsp; &lt;dt&gt;&lt;a href=3D&quot;http://movies.org/mov=\r\nies&quot; class=3D&quot;movies&quot;&gt;Movies&lt;/a&gt;&lt;/dt&gt;&lt;br&gt;&nbsp; &lt;dd&gt;Th=\r\ne &quot;Movies&quot; service lets you search all our available moves.&lt;/dd&gt;&lt;br&gt;&=\r\nnbsp;&lt;/dl&gt;&lt;br&gt;&lt;/html&gt;&lt;br&gt;&lt;br&gt;# Request movie description&lt;br&gt;GET=\r\n /movies&lt;br&gt;&lt;br&gt;# Response - from this form the client derives the action U=\r\nRL to use for searching movies&lt;br&gt;200 OK&lt;br&gt;ContentType: text/xhtml&lt;br&gt;&lt;=\r\nhtml&gt;&lt;br&gt;&nbsp;&lt;form action=3D&quot;http://movies.org/movies&quot;&gt;&lt;br&gt;&nbsp=\r\n; &lt;p&gt;Some general introduction ...&lt;/p&gt;&lt;br&gt;&nbsp; &lt;label for=\r\n=3D&quot;categoryRef&quot;&gt;The &quot;category&quot; parameter can filter the movies collecti=\r\non by category&lt;/label&gt;&lt;br&gt;&nbsp; &lt;input type=3D&quot;text&quot; name=3D&quot;cate=\r\ngory&quot; id=3D&quot;categoryRef&quot;/&gt;&lt;br&gt;&nbsp; &lt;input type=3D&quot;submit&quot; value=3D&quot;=\r\nSearch&quot;/&gt;&lt;br&gt;&nbsp;&lt;/form&gt;&lt;br&gt;&lt;/html&gt;&lt;br&gt;&lt;br&gt;# Request thril=\r\nlers&lt;br&gt;GET /movies?category=3Dthrillers&lt;br&gt;&lt;br&gt;# Response&lt;br&gt;200 OK&lt;br&gt;Con=\r\ntentType: application/vnd.movies.movie-collection+xml&lt;br&gt;&lt;movies&gt;&lt;br&gt;=\r\n&nbsp;&lt;movie href=3D&quot;http://movies.org/movie/1234&quot;&gt;Thriller no. 1&lt;=\r\n/movie&gt;&lt;br&gt;&lt;/movies&gt;&lt;br&gt;&lt;br&gt;# Alternative response (using a micro =\r\nformat)&lt;br&gt;200 OK&lt;br&gt;ContentType: text/xhtml&lt;br&gt;&lt;html&gt;&lt;br&gt;&nbsp;&lt;u=\r\nl&gt;&lt;br&gt;&nbsp;&nbsp; &lt;li&gt;&lt;a href=3D&quot;http://movies.org/movie/1234&quot;=\r\n class=3D&quot;movie&quot;&gt;Thriller no. 1&lt;/a&gt;&lt;/li&gt;&lt;br&gt;&nbsp;&lt;/ul&gt=\r\n;&lt;br&gt;&lt;/html&gt;&lt;br&gt;&lt;br&gt;# At last we can request the actual movie&lt;br&gt;GET =\r\n/movies/1234&lt;br&gt;&lt;br&gt;# Response&lt;br&gt;200 OK&lt;br&gt;ContentType: application/vnd.mo=\r\nvies.movie+xml&lt;br&gt;&lt;movie&gt;&lt;br&gt;&nbsp;...&lt;br&gt;&lt;/movie&gt;&lt;br&gt;&lt;/font&gt;&lt;b=\r\nr&gt;&lt;br&gt;/J=F8rn Wildt&lt;br&gt;&lt;br&gt;(somewhat related to the older discussion here: =\r\nhttp://tech.groups.yahoo.com/group/rest-discuss/message/13707)&lt;br&gt;\n&lt;br&gt;\n\r\n--6-1738644388-0813615498=:1--\r\n\n"}}
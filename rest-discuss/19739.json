{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":254182892,"authorName":"Judson Lester","from":"Judson Lester &lt;nyarly@...&gt;","profile":"nyarly4life","replyTo":"SENDER","senderId":"3YOZc1H7Js4byCLLWsDJtXX9VdkRbPTE_V2R_YTjLHvV3PaxtBfHM000C-2BiOcRxJ9Iiwrv2es_rcgpc-mN_oW1kM1QpDY","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Canary fields","postDate":"1497992354","msgId":19739,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PENBT3BicDNjUlMteisxM0FqdU96PUpWcXM4am52RmY2a2dlQ2hSd1hxWG0raDFQRTRNZ0BtYWlsLmdtYWlsLmNvbT4="},"prevInTopic":0,"nextInTopic":0,"prevInTime":19738,"nextInTime":19740,"topicId":19739,"numMessagesInTopic":1,"msgSnippet":"I ve just had a problem with serialization of JSON in Go that seems like it would be a general problem. I don t know about the elegance of my solution or its","rawEmail":"Return-Path: &lt;nyarly@...&gt;\r\nX-Sender: nyarly@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 24241 invoked by uid 102); 20 Jun 2017 21:04:29 -0000\r\nX-Received: from unknown (HELO mtaq1.grp.bf1.yahoo.com) (10.193.84.32)\n  by m5.grp.bf1.yahoo.com with SMTP; 20 Jun 2017 21:04:29 -0000\r\nX-Received: (qmail 24479 invoked from network); 20 Jun 2017 21:04:29 -0000\r\nX-Received: from unknown (HELO mta1003.groups.mail.bf1.yahoo.com) (98.139.170.167)\n  by mtaq1.grp.bf1.yahoo.com with SMTP; 20 Jun 2017 21:04:29 -0000\r\nX-Original-Return-Path: &lt;nyarly@...&gt;\r\nX-Received-SPF: pass (domain of gmail.com designates 209.85.214.53 as permitted sender)\r\nX-YMailISG: QEo5ZrAWLDt1.0peyoGvXlo1Q5Gv6HYXvkybb8580IYJptsO\n EXuLdNyifw4QwKb6TxXie37ey1uE4gIecSfoKG1kbsOHkGu5JOFQiORTrOTd\n Buh.rKv6QDyCCyWLtcb1JDq4PvhnZxy5j1NAIEmAAC52QpjdlFGNLwyBMOL3\n nVNQ15MddzodmzMZrHYMFHZzme1XsIoimcGrfcO3qXJNvzb_B3SryrGP0DjT\n 385G5KN47volrEFyUOvX5FhuALESP3beS5dgAR5u7J92csDqtB4ZdtZiiYct\n PVnsmbPKyBld_mI0TUZBfpMknxNgOcgGvK5duw5CU4iC2veRlMF8i7sKLhQN\n guwfthm9Betzou.o_jw_ZAb.fbZtBvjjJBywzOCCagp8PNThRbMxpYhx9TU9\n zJFrdNjACmNt5YVzosUnLUvIapBNncuZaKwYcyfSlII837K_eC9hwpITHGXm\n XsyA1Pjw8gCrQi9B5xN5Ax7bAVedr3vz7p6UTL8tC9_qe4S2EH77YwS5lQdR\n HG8HlSZSkjF8Rr2ZIFdBPYGUoxwqwXmgKCwml.M1Bdlm9F9qqOVXZTQaXzrO\n odLfAO8.nyOJAup.bv7lTt82nTUeJ_6ikNGG2x85Vg3GZz2hf8mCgekIIIYC\n T86QaSv8x5YKwyXPYPnjghzQQcHORkwg2BJWf.EvYSr3HorI2Wv204kpJ.RO\n 34rqYXnbUfCtXa6VNo5RPUQ._9NMylCy1oSXVtxgAFM8ZkkzDr3sv6FfGQj1\n MvlK471.b.CrPZOedK_W9P7e8WdNN6ZUByRiw9tySnZ.XScHMzyG.L9Oi1pm\n cOU4M.lPc1TvstruNMKAR32nKXRrQffCLrUtvdoFoJ38CRsULnRTphoQwtgN\n CM8xTLgOsxD.NgmQjKRVNp9IQbZPdnPPtS6POn.bskVut15y_hNcsp0nw_B2\n itU0TQhzq5HSVO6Vn59Gc0080bnV.uujSPcqYTTE03wSJn5FKhuHZPAvob2V\n EH_JUK3N0eLfGEHs.1bOopCJ4wEdBUczk3o9DbqsaPxC7kYF.wUNtT8wvk7w\n SUg7MD7wPujTbEAtEYuofBj7y58bqLdnmkePsoHWw.Zn3PFntNV1Q7EjBYmF\n H.Q9xouT.5U4ulyNe9z6c7IJKLPbuoBwd4S5WUlNN2Ffp7TXC0E9ce2ouDwn\n hW9G3ohIUD.hNdK4bQ09yAvzOyfLrrhRocKOPyAfkVyaE8Q958Dynqwv9Xbm\n DbYa.0Tsiyrq4hkAMo6LC9gXLeTprxZVFg--\r\nAuthentication-Results: mta1003.groups.mail.bf1.yahoo.com  from=gmail.com; domainkeys=neutral (no sig);  from=gmail.com; dkim=pass (ok)\r\nX-Received: from 127.0.0.1  (EHLO mail-it0-f53.google.com) (209.85.214.53)\n  by mta1003.groups.mail.bf1.yahoo.com with SMTPS; Tue, 20 Jun 2017 21:04:28 +0000\r\nX-Received: by mail-it0-f53.google.com with SMTP id b205so21554839itg.1\n        for &lt;rest-discuss@yahoogroups.com&gt;; Tue, 20 Jun 2017 14:04:28 -0700 (PDT)\r\nX-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;\n        d=1e100.net; s=20161025;\n        h=x-gm-message-state:mime-version:from:date:message-id:subject:to;\n        bh=HTvjMu7NY74d7ewO92nU3PZj7vyLdcS3YM/Q5xwbDP0=;\n        b=LULNHbZHHSy8hZPxGw0MnOv5AMT+7+B8+TC3dQv2ONPP3GZtyTJl1jF7k+61RsDiCt\n         PMEJjxJvJd+w82sIi+osvMPGCsw+TVay74IgLumfAdc2v7grCnqZC/ahdva8EtpRVWZF\n         5j+RmmwCL10j7+cZDrBJSrB9hHUMVV2m0JkztJT3DiHQX2HlR+7pj/0rJgA77NopUB7N\n         fUNyTrS1a3zdsGSmiDeY3S/yEhevz46ZIjLq08+Enc7dQtG3Ph6uPisgC5Q9oGTEZvvG\n         io3uTp209YS9CS8k1mgSqsa6qj+UT/d78OR6qcdwINtYlObgrk4+0ZE0q5NXQsgQUfhj\n         e3Pw==\r\nX-Gm-Message-State: AKS2vOzz9HHuuNtlNtsdtZOqINFfWqI+fNEri5vRYXGEeqz3g8uajNuL\n\ta3xYi8TWkPVLo52pWEKGT9IHTef8YQHX\r\nX-Received: by 10.36.31.4 with SMTP id d4mr5645821itd.70.1497992365230; Tue,\n 20 Jun 2017 13:59:25 -0700 (PDT)\r\nMIME-Version: 1.0\r\nDate: Tue, 20 Jun 2017 20:59:14 +0000\r\nMessage-ID: &lt;CAOpbp3cRS-z+13AjuOz=JVqs8jnvFf6kgeChRwXqXm+h1PE4Mg@...&gt;\r\nTo: &quot;rest-discuss@yahoogroups.com&quot; &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Type: multipart/alternative; boundary=&quot;001a11459a08ce742205526a86de&quot;\r\nSubject: Canary fields\r\nX-Yahoo-Group-Post: member; u=254182892; y=E4pfIMVeR6bSh3M9B5b-G9M8hsb9LPnZt3fT3rXeHJuOv79uQlU\r\nX-Yahoo-Profile: nyarly4life\r\nFrom: Judson Lester &lt;nyarly@...&gt;\r\n\r\n\r\n--001a11459a08ce742205526a86de\r\nContent-Type: text/plain; charset=&quot;UTF-8&quot;\r\n\r\nI&#39;ve just had a problem with serialization of JSON in Go that seems like it\nwould be a general problem. I don&#39;t know about the elegance of my solution\nor its generality but I doubt I&#39;m the only one who came to it, and further\nthan others must&#39;ve come up with something similar.\n\nThe context is this: Go permissively deserializes JSON into structs -\nattributes that don&#39;t correspond to a struct member are ignored silently,\nand struct members without a corresponding JSON attribute are left with a\nzero value. When the server is upgraded, if its versions of JSON resources\nget new attributes, the client ignores them (nbd), but when the client does\na PUT with the intention of updating, it zeros out attributes of which it\nis unaware. The solution to this problem was not difficult (and involved an\napplicaiton of the concept of lenses in the Go context...).\n\nThe problem is: if the server receives an PUT update, how does it know that\nthe update is legitimate, or produced by a pre-lens client who may have\nelided important fields?\n\nMy solution is that the server adds a JSON attribute on all resources whose\nname is the Etag of the resource, and whose value is (unconditionally)\n&quot;canary.&quot; PUTs without this field intact are assumed not to know how to\nproperly do updates and return a 4xx status.\n\nI dimly feel as if I&#39;m reimplementing something I may have heard/read in\npassing, but I&#39;m wondering if the technique is well known? Perhaps it is\n(or should be) deprecated - if so in favor of what?\n\nJudson\n\r\n--001a11459a08ce742205526a86de\r\nContent-Type: text/html; charset=&quot;UTF-8&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;div dir=3D&quot;ltr&quot;&gt;I&#39;ve just had a problem with serialization of JSON in =\r\nGo that seems like it would be a general problem. I don&#39;t know about th=\r\ne elegance of my solution or its generality but I doubt I&#39;m the only on=\r\ne who came to it, and further than others must&#39;ve come up with somethin=\r\ng similar.&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The context is this: Go permissively deserial=\r\nizes JSON into structs - attributes that don&#39;t correspond to a struct m=\r\nember are ignored silently, and struct members without a corresponding JSON=\r\n attribute are left with a zero value. When the server is upgraded, if its =\r\nversions of JSON resources get new attributes, the client ignores them (nbd=\r\n), but when the client does a PUT with the intention of updating, it zeros =\r\nout attributes of which it is unaware. The solution to this problem was not=\r\n difficult (and involved an applicaiton of the concept of lenses in the Go =\r\ncontext...).&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The problem is: if the server receive=\r\ns an PUT update, how does it know that the update is legitimate, or produce=\r\nd by a pre-lens client who may have elided important fields?&lt;/div&gt;&lt;div&gt;&lt;br&gt;=\r\n&lt;/div&gt;&lt;div&gt;My solution is that the server adds a JSON attribute on all reso=\r\nurces whose name is the Etag of the resource, and whose value is (unconditi=\r\nonally) &quot;canary.&quot; PUTs without this field intact are assumed not =\r\nto know how to properly do updates and return a 4xx status.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;=\r\n/div&gt;&lt;div&gt;I dimly feel as if I&#39;m reimplementing something I may have he=\r\nard/read in passing, but I&#39;m wondering if the technique is well known? =\r\nPerhaps it is (or should be) deprecated - if so in favor of what?&lt;/div&gt;&lt;div=\r\n&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Judson&lt;/div&gt;&lt;/div&gt;\n\r\n--001a11459a08ce742205526a86de--\r\n\n"}}
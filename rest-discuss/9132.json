{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":145532415,"authorName":"Stefan Tilkov","from":"Stefan Tilkov &lt;stefan.tilkov@...&gt;","profile":"stilkov","replyTo":"SENDER","senderId":"KYnihVJNWIDJ0sYIY7UXt9A1JsfK921NOHW65l7cq4Td8KQkHb0N0Dd7ws0RLqrTDZl_2S_ZZ-tnw4hKcAy3qaEsfDrc3DkoDBUr-imE","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Must POST be non-idempotent?","postDate":"1182415012","msgId":9132,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDg2QjQ4MDQ3LUNCQjgtNDQ4Ri1CNzFDLTlCMzQ2NDgxNDVFNUBpbm5vcS5jb20+","referencesHeader":"PDAyMjgwMWM3YjM0ZiQ2NjY5OGM1MCQ4NzAwYThjMEBNQVJDTk9URT4="},"prevInTopic":0,"nextInTopic":9133,"prevInTime":9131,"nextInTime":9133,"topicId":9132,"numMessagesInTopic":29,"msgSnippet":"Forwarding from another list - this seems more appropriate for rest- discuss ...","rawEmail":"Return-Path: &lt;stefan.tilkov@...&gt;\r\nX-Sender: stefan.tilkov@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 65652 invoked from network); 21 Jun 2007 08:37:02 -0000\r\nReceived: from unknown (66.218.66.68)\n  by m53.grp.scd.yahoo.com with QMQP; 21 Jun 2007 08:37:02 -0000\r\nReceived: from unknown (HELO notes.innoq.org) (217.160.213.102)\n  by mta11.grp.scd.yahoo.com with SMTP; 21 Jun 2007 08:37:02 -0000\r\nReceived: from [192.168.16.163] ([83.79.241.115])\n          by notes.innoq.org (Lotus Domino Release 7.0)\n          with ESMTP id 2007062110365423-7727 ;\n          Thu, 21 Jun 2007 10:36:54 +0200 \r\nMime-Version: 1.0 (Apple Message framework v752.3)\r\nReferences: &lt;022801c7b34f$66698c50$8700a8c0@MARCNOTE&gt;\r\nMessage-Id: &lt;86B48047-CBB8-448F-B71C-9B34648145E5@...&gt;\r\nDate: Thu, 21 Jun 2007 10:36:52 +0200\r\nTo: Rest List &lt;rest-discuss@yahoogroups.com&gt;\r\nX-Mailer: Apple Mail (2.752.3)\r\nX-MIMETrack: Itemize by SMTP Server on notes/innoQ(Release 7.0|August 18, 2005) at 06/21/2007\n 10:36:54,\n\tSerialize by Router on notes/innoQ(Release 7.0|August 18, 2005) at 06/21/2007\n 10:37:01,\n\tSerialize complete at 06/21/2007 10:37:01\r\nContent-Transfer-Encoding: 7bit\r\nContent-Type: text/plain; charset=US-ASCII; delsp=yes; format=flowed\r\nX-eGroups-Msg-Info: 1:0:0:0\r\nFrom: Stefan Tilkov &lt;stefan.tilkov@...&gt;\r\nSubject: Must POST be non-idempotent?\r\nX-Yahoo-Group-Post: member; u=145532415; y=Dws8juYT-nKehcpkoLfaWNmiLpY9hQ0X93gA1KmxyIoaWQ\r\nX-Yahoo-Profile: stilkov\r\n\r\nForwarding from another list - this seems more appropriate for rest- \ndiscuss ...\n\nBegin forwarded message:\n\n&gt; From: &quot;Marc de Graauw&quot; &lt;marc@...&gt;\n&gt; Date: June 20, 2007 5:26:39 PM GMT+02:00\n&gt; To: &lt;service-orientated-architecture@yahoogroups.com&gt;\n&gt; Subject: RE: [service-orientated-architecture] Anne on REST (Time  \n&gt; for Spring WS v. REST Campaign to Open)\n&gt; Reply-To: service-orientated-architecture@yahoogroups.com\n&gt;\n&gt; Mark Baker:\n&gt;\n&gt; | On 6/19/07, Stefan Tilkov &lt;stefan.tilkov@...&gt; wrote:\n&gt; | &gt; You are right, I should have written &quot;PUT is defined to be\n&gt; | idempotent\n&gt; | &gt; (by the spec), POST is not - which means POST can or cannot be\n&gt; | &gt; idempotent&quot;. Seems a little like splitting hairs, but OK.\n&gt; |\n&gt; | Not quite. POST is defined to be non-idempotent, i.e. if you see an\n&gt; | HTTP message with a POST request method, then that message is a\n&gt; | non-idempotent message. What any particular receiving implementation\n&gt; | *does* with such a message - idempotent or not - is an entirely\n&gt; | separate issue.\n&gt;\n&gt; Jan Algermissen:\n&gt;\n&gt; | Actually, I&#39;d say that every single invokation of POST is\n&gt; | significant from a client&#39;s POV and it explicitly expects\n&gt; | multiple POSTs to have distinct effects, or?\n&gt; |\n&gt; | IMO, POST *is* in fact non-idempotent...always. Per definition.\n&gt;\n&gt; I find it hard to find this in RFC2616, and it seems impossible as  \n&gt; well.\n&gt;\n&gt; RFC2616:\n&gt;\n&gt; &quot;Methods can also have the property of &quot;idempotence&quot; in that (aside  \n&gt; from\n&gt; error or expiration issues) the side-effects of N &gt; 0 identical  \n&gt; requests is\n&gt; the same as for a single request. The methods GET, HEAD, PUT and  \n&gt; DELETE\n&gt; share this property.&quot;\n&gt;\n&gt; So PUT is idempotent, and POST not necessarily so, but where does  \n&gt; it say\n&gt; that POST messages are _always_ non-idempotent?\n&gt;\n&gt; Seems impossible too. Presumably a non-idempotent method has the  \n&gt; property\n&gt; that &quot;the side-effects of N &gt; 0 identical requests is NOT the same  \n&gt; as for a\n&gt; single request&quot; So if I POST twice, and get 500 with a body &quot;Credit  \n&gt; expired&quot;\n&gt; twice, that&#39;s an idempotent message, right? In fact, if it get that  \n&gt; response\n&gt; once, my expectation would be to get it the next time as well. We&#39;d  \n&gt; have to\n&gt; re-interpret RFC2616 as really saying &quot;for POST the side-effects of  \n&gt; N &gt; 0\n&gt; identical succesfull requests SHOULD NOT be the same as for a single\n&gt; request&quot;, but this seems nonsensical to me. Whether a message is  \n&gt; idempotent\n&gt; or not is up to the business logic behind it, and POST is telling  \n&gt; the client\n&gt; it may not count on the message being idempotent, and must act  \n&gt; accordingly\n&gt; (not just re-POST after failure). POST - IMO - isn&#39;t telling the  \n&gt; client\n&gt; there are indeed such side-effects for N &gt; 0 messages to be expected.\n&gt;\n&gt; I&#39;ve always read RFC2616 as saying PUT is always idempotent, and  \n&gt; with POST\n&gt; the client cannot count on it being idempotent or not, but correct  \n&gt; me if I&#39;m\n&gt; wrong.\n&gt;\n&gt; It also seems to leave an empty slot. With PUT, the client is  \n&gt; supposed to\n&gt; create the URI, with POST, the server. So if I have some logic  \n&gt; where I want\n&gt; the server to create the URI (who trusts those darn clients  \n&gt; anyway!), and\n&gt; the logic is idempotent, what do I do?\n&gt;\n&gt; RFC 2616: &quot;The fundamental difference between the POST and PUT  \n&gt; requests is\n&gt; reflected in the different meaning of the Request-URI. The URI in a  \n&gt; POST\n&gt; request identifies the resource that will handle the enclosed  \n&gt; entity ... In\n&gt; contrast, the URI in a PUT request identifies the entity enclosed  \n&gt; with the\n&gt; request&quot;.\n&gt;\n&gt; I can see how that leads to PUT being idempotent, but I cannot see  \n&gt; why this\n&gt; would make POST necessarily non-idempotent.\n&gt;\n&gt; Marc de Graauw\n&gt;\n&gt; www.marcdegraauw.com\n&gt;\n&gt;\n&gt; \n\n\n"}}
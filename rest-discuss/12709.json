{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":157827282,"authorName":"johnzabroski","from":"&quot;johnzabroski&quot; &lt;johnzabroski@...&gt;","profile":"johnzabroski","replyTo":"SENDER","senderId":"KgkIL0_IW8xQ7FXvW7avcJRMrEY9Axh5H-Ebiw8HYiFQXVE-7xvU2PGSvizGDNkHmJv711qTBnJsKNw2rWP3zwvG-v-WFSVclx4yGpI-","spamInfo":{"isSpam":false,"reason":"6"},"subject":"Re: CommandQuerySeparation and REST?","postDate":"1243312363","msgId":12709,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGd2ZnJkYitpcGVmQGVHcm91cHMuY29tPg==","inReplyToHeader":"PDRBMTdBRTI2LjIwMzA5MDZAZ21haWwuY29tPg=="},"prevInTopic":12706,"nextInTopic":12716,"prevInTime":12708,"nextInTime":12710,"topicId":12555,"numMessagesInTopic":39,"msgSnippet":"... Sorry, but I don t see a difference.  Command-Query Separation is a basic principle for improving the testability and reliability of code that modifies","rawEmail":"Return-Path: &lt;johnzabroski@...&gt;\r\nX-Sender: johnzabroski@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 30050 invoked from network); 26 May 2009 04:32:55 -0000\r\nX-Received: from unknown (98.137.34.44)\n  by m5.grp.sp2.yahoo.com with QMQP; 26 May 2009 04:32:55 -0000\r\nX-Received: from unknown (HELO n43d.bullet.mail.sp1.yahoo.com) (66.163.169.157)\n  by mta1.grp.sp2.yahoo.com with SMTP; 26 May 2009 04:32:55 -0000\r\nX-Received: from [69.147.65.148] by n43.bullet.mail.sp1.yahoo.com with NNFMP; 26 May 2009 04:32:45 -0000\r\nX-Received: from [98.137.35.13] by t11.bullet.mail.sp1.yahoo.com with NNFMP; 26 May 2009 04:32:45 -0000\r\nDate: Tue, 26 May 2009 04:32:43 -0000\r\nTo: rest-discuss@yahoogroups.com\r\nMessage-ID: &lt;gvfrdb+ipef@...&gt;\r\nIn-Reply-To: &lt;4A17AE26.2030906@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;ISO-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-Yahoo-Newman-Property: groups-compose\r\nX-eGroups-Msg-Info: 1:6:0:0:0\r\nFrom: &quot;johnzabroski&quot; &lt;johnzabroski@...&gt;\r\nSubject: Re: CommandQuerySeparation and REST?\r\nX-Yahoo-Group-Post: member; u=157827282; y=JZi-I4HilNXfjLxuuTBP6Vw8l_sexrdTLjEGTzR-6QXYmoC4PY-l\r\nX-Yahoo-Profile: johnzabroski\r\n\r\n--- In rest-discuss@yahoogroups.com, Rickard =D6berg &lt;rickardoberg@...&gt; wro=\r\nte:\n&gt;\n&gt; \n&gt; Yes, I was referring to CQS on the architectural level a la Udi,=\r\n rather \n&gt; than on an object basis as I think it was described initially.\n&gt;=\r\n \n&gt; /Rickard\n&gt;\n\nSorry, but I don&#39;t see a difference.  Command-Query Separat=\r\nion is a basic principle for improving the testability and reliability of c=\r\node that modifies state.  \n\nI also think that &quot;at the architectural level&quot; =\r\nvs &quot;object basis&quot; ruins the point of the principle.  As an example, I recen=\r\ntly tried commenting on Udi Dahan&#39;s blog (he and I are just chatting about =\r\nsomething separate from the CQS entry).  What happened when I clicked Submi=\r\nt Comment?  I got back the following error page:\n-----\nMethod Not Implement=\r\ned\n\nPOST to /wp-comments-post.php not supported.\nApache Server at www.udida=\r\nhan.com Port 80\n-----\nFirst off, an end-user has no idea what the heck that=\r\n means.  It&#39;s scary, and it also doesn&#39;t make any sense whatsoever.  Can&#39;t =\r\nPOST to /post.php?!\n\nI am using this as an example, not to talk bad about U=\r\ndi&#39;s blog software vendor, but rather to illuminate what you should be aski=\r\nng.  (I get similar errors on other blogs, such as Tim Heuer&#39;s.)\n\nIf you&#39;re=\r\n handling a problem at an architectural level, then you are defining constr=\r\naints that disallow such non-sense as the above from ever happening.  As an=\r\n architect, you really don&#39;t want a customer service email saying &quot;The web =\r\npage told me I can&#39;t POST to example.com/post.php&quot;.  Actually, chances are =\r\nyou won&#39;t even get that email, because people seek pleasure and avoid pain,=\r\n and that email -- unless successfully POSTING to Post.PHP is life or death=\r\n -- is PAIN.\n\nThat&#39;s why you want to explicitly do CQS in your architecture=\r\n as part of ensuring correct resource deployment.  Architectural principles=\r\n exist and are enforced so that programmer&#39;s don&#39;t make these common mistak=\r\nes.  By preventing mistakes, you improve the reliability, durability and co=\r\nnsistency of your system, end-to-end.  At the object-level, you&#39;re enforcin=\r\ng the same kind of &quot;hey, let&#39;s make state transformations clear&quot; mission as=\r\n you are at the architectural level.\n\nI also find that REST&#39;s set of archit=\r\nectural constraints are great for resource deployment and ad-hoc configurat=\r\nion of resources.  So as I see it, CQS and REST go together like P&J.  REST=\r\n is your architectural constraints, though.  CQS is simply your sanity chec=\r\nk/design pattern to make sure you&#39;re obeying those constraints.\n\nThe major =\r\ndifference between REST and Udi&#39;s CQS is static deployment, which is a faul=\r\nty assumption on the Web (or any truly dynamic, late-bound app where signif=\r\nicant pieces of the puzzle aren&#39;t known until &quot;runtime&quot;) and also leads to =\r\n&quot;page request life cycle&quot;-based architectural specifications.\n\n\n"}}
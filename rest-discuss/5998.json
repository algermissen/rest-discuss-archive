{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":80219925,"authorName":"John Elliot","from":"John Elliot &lt;jj5@...&gt;","profile":"jj5v1","replyTo":"SENDER","senderId":"G4YmmSiL8-y8EBE92FK0eLkyIURNX0nTHnHFLFWupw8JFSeCZUWjnBN24OaJUQom_2uK7ekUbyRifV5TdRWVXQ","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Re: Meaning of stateless","postDate":"1145408946","msgId":5998,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQ0NDU4REIyLjcwNzAwMDNAamo1Lm5ldD4=","inReplyToHeader":"PDRGOEZFNDI2LTU0QUUtNDhERC1BQkQwLUVGNTQzMEU1N0EwQUBhcnRpbWEuY29tPg==","referencesHeader":"PDQ0M0ZGMzFDLjgwMDAxMDlAdmVpY29uLmNvbT4JIDwzNDNlY2IzZTA2MDQxNDEyMzBnNDFjMTMyMWNuYjJhOTM2Y2NiZjUzZGM3ZEBtYWlsLmdtYWlsLmNvbT4gPDExNDUwOTU4OTMuNjk4OC4yNi5jYW1lbEBsb2NhbGhvc3QubG9jYWxkb21haW4+IDw0NDQ0NkNGMC45MDEwMzA4QGpqNS5uZXQ+IDw0RjhGRTQyNi01NEFFLTQ4REQtQUJEMC1FRjU0MzBFNTdBMEFAYXJ0aW1hLmNvbT4="},"prevInTopic":5997,"nextInTopic":5999,"prevInTime":5997,"nextInTime":5999,"topicId":5949,"numMessagesInTopic":44,"msgSnippet":"Hi Bill, ... If you think long and hard about this you ll realise that you re effectively storing a session key (or some aspect of the session) in the URI.","rawEmail":"Return-Path: &lt;jj5@...&gt;\r\nX-Sender: jj5@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 45037 invoked from network); 19 Apr 2006 01:12:01 -0000\r\nReceived: from unknown (66.218.67.35)\n  by m30.grp.scd.yahoo.com with QMQP; 19 Apr 2006 01:12:01 -0000\r\nReceived: from unknown (HELO mail6.tpgi.com.au) (203.12.160.113)\n  by mta9.grp.scd.yahoo.com with SMTP; 19 Apr 2006 01:12:00 -0000\r\nX-TPG-Antivirus: Passed\r\nReceived: from johnny5 (220-245-41-182.static.tpgi.com.au [220.245.41.182])\n\tby mail6.tpgi.com.au (envelope-from jj5@...) (8.13.6/8.13.6) with ESMTP id k3J1Bvga006055\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Wed, 19 Apr 2006 11:11:59 +1000\r\nMessage-ID: &lt;44458DB2.7070003@...&gt;\r\nDate: Wed, 19 Apr 2006 01:09:06 +0000\r\nUser-Agent: Debian Thunderbird 1.0.2 (X11/20051002)\r\nX-Accept-Language: en-us, en\r\nMIME-Version: 1.0\r\nTo: REST Discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nReferences: &lt;443FF31C.8000109@...&gt;\t &lt;343ecb3e0604141230g41c1321cnb2a936ccbf53dc7d@...&gt; &lt;1145095893.6988.26.camel@...&gt; &lt;44446CF0.9010308@...&gt; &lt;4F8FE426-54AE-48DD-ABD0-EF5430E57A0A@...&gt;\r\nIn-Reply-To: &lt;4F8FE426-54AE-48DD-ABD0-EF5430E57A0A@...&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0:0\r\nFrom: John Elliot &lt;jj5@...&gt;\r\nSubject: Re: [rest-discuss] Re: Meaning of stateless\r\nX-Yahoo-Group-Post: member; u=80219925; y=RlrShziPK0YuqIN3WCJmu7K7LlXlNjTKdRA9gZvmiLE\r\nX-Yahoo-Profile: jj5v1\r\n\r\nHi Bill,\n\nBill Venners wrote:\n&gt; Another way to do the anonymous shopping cart is to give it a unique  \n&gt; URI.\n\nIf you think long and hard about this you&#39;ll realise that you&#39;re \neffectively storing a session key (or some aspect of the session) in the \nURI. That&#39;s not cool. It&#39;s a failing of REST, and in my view a HTTP \nanti-pattern.\n\nInstead of a nice clean\n\n   { &#39;subject&#39; &#39;verb&#39; &#39;object&#39; }\n\nyou&#39;ve basically said\n\n   { &#39;blah blah&#39; &#39;verb&#39; &#39;message&#39; }\n\nI.e. I say you want,\n\n   { &#39;Session 42&#39; GETs &#39;checkout facility&#39; }\n\nYou say,\n\n   { &#39;Some IP address&#39; GETs &#39;checkout facility for shopping basket 12&#39; }\n\n&gt; To me the biggest lesson I learned from reading about REST is that I  \n&gt; don&#39;t need session state with HTTP. I can model everything as  resources \n&gt; with unique URIs, some of which require authentication and  \n&gt; authorization.\n\nI don&#39;t believe you. I believe you are mistaken. These URIs you refer to \nare nothing more than session tokens in a format which happens to be \ncompatible with URI format. To the extent that they aren&#39;t strictly \n&#39;session tokens&#39;, they are *worse* than &#39;session tokens&#39; because they \nstand as a key to server-side state which could have been indicated by a \nsingle session key. All you&#39;ve done is &#39;denormalise&#39;. I.e. instead of \nsaying &quot;session 42&quot;, you say &quot;shopping basket 23, user 37&quot;. Then you put \nthat session state in the URL, which breaks &#39;subject&#39; and &#39;object&#39; \nseparation. This ruins the URL as the &#39;object&#39; of the request.\n\nDon&#39;t get me wrong, I&#39;m not saying that this is or is not REST, or HTTP. \nI&#39;m just trying to warn you not to do this. It&#39;s a bad idea. If I&#39;m \nmistaken about this, I would dearly love for you to argue with me until \nI come to your way of thinking (though, I&#39;ve given this a lot of \nthought, so I think the alternate outcome is more likely.. ;)\n\n&#39;Unique URI&#39; is tautology btw. It&#39;s true that many URIs can map to a \nsingle resource, but that doesn&#39;t bear on the phrase &#39;unique URI&#39;.\n\n&gt;&gt; If you know the &#39;object&#39; and the &#39;subject&#39; of a request, then along  with\n&gt;&gt; a single verb you have all of the information necessary to create the\n&gt;&gt; context in which to generate an appropriate response.\n&gt;&gt;\n&gt; Well, there are other possibilities.\n\nYou mean, like, RPC..? ;)\n\n&gt; If a user has landed on one of  our \n&gt; sites after searching for &quot;rest relaxation,&quot; I want to highlight  those \n&gt; terms in the page. So I need to look at the referrer header.\n\nBad idea. Redirect them to a new resource which indicates which words to \nhighlight. I firmly believe that if you return a representation (as \nopposed to a 300 class response) to a GET request then the URL should \nstand as the complete and explicit &#39;object&#39; of the request.\n\nIn case you or others haven&#39;t picked up on it (because I didn&#39;t \nexplicitly say so as yet), I&#39;m using the term &#39;subject&#39; and &#39;object&#39; in \na grammatical sense.\n\n&gt; If  they \n&gt; indicate via their accept language headers that they speak  French, and \n&gt; they&#39;ve requested an English version of an article for  which I have a \n&gt; French translation, I want to add in a prominent link  to the French \n&gt; version into the English page I send back.\n\nAgain, bad idea. Instead send a 300 class response to a new URL which \nindicates this is what should happen. E.g.,\n\n   /en/resource.html -&gt; /en/resource.html?opt-lang=fr\n\nIn every case where you&#39;ve varied the semantics of the response based on \nHTTP headers you&#39;ve undermined the URL as the description of the \n&#39;resource&#39; being requested.\n\nThat is, the &#39;resource&#39; which highlights the terms &quot;rest relaxation&quot; is \na different resource to one which doesn&#39;t. The &#39;resource&#39; which includes \na link to a French translation is a different resource to one which \ndoesn&#39;t. The URI is the place to describe a resource, not HTTP headers.\n\n&gt; I want to  also try and \n&gt; detect requests that are coming from a device with a  small screen, and \n&gt; include a prominent link to a mobile version of the  content.\n\nAgain, don&#39;t do that. Redirect to a URL which indicates that it should \nprovide help for mobile users. E.g.,\n\n   /resource.html -&gt; /resource.html?mobile-help=true\n\n&gt;&gt; The only thing I&#39;m trying to point out here is that &#39;session id&#39;  should\n&gt;&gt; not be in the URL, but it needs to be there. It should be a  transparent\n&gt;&gt; part of the universal uniform interface, and it should be able to  stand\n&gt;&gt; as the &#39;subject&#39; of a request.\n&gt;&gt;\n&gt;&gt; If this happens, then we can move toward using the &#39;subject&#39; *and* the\n&gt;&gt; &#39;object&#39; of the request to key a cache of what are otherwise\n&gt;&gt; non-cacheable responses to HTTP GET.\n&gt;&gt;\n&gt; I don&#39;t believe this either necessary or desirable. The reason it  isn&#39;t \n&gt; necessary is that you can use ETags to identify different  \n&gt; representations, including personalized representations, of the same  \n&gt; resource to caches.\n\nI&#39;m going to have to come perfectly clean and admit I know practically \nnothing about ETags. Thanks for bringing it up. I&#39;ll do some reading.\n\n&gt; The reason it isn&#39;t desirable is both because  many \n&gt; sessions can share the same representations, and because I may  want to \n&gt; send multiple representations for the same URI and subject  based on \n&gt; other information in the request (such as referrer or accept- language). \n\nOK, I accept your first point, but I think the second part about varying \ncontent based on HTTP headers remains a bad idea in my view.\n\n&gt; By using ETags, which already exists in HTTP 1.1, I can  effectively \n&gt; identify and cache each representation. The fewer  representations you \n&gt; have, the more caching can help with scalability,  and that mechanism \n&gt; will always be more flexible. At the extreme case,  if you really have a \n&gt; different representation for each session, then  you can include the \n&gt; session ID in the ETag. But most of the time what  you probably really \n&gt; have in that case is a different representation  per user, not per \n&gt; session, so you could include a user ID in the  ETag. But to the extent \n&gt; possible it is better to try and minimize the  number of resources for \n&gt; which there are so many representations,  because the fewer the \n&gt; representations the more scalability benefit  you get from HTTP caching.\n\nI accept all this, it makes sense.\n\n&gt; For example, I do want to say, &quot;Welcome, John&quot; on the top of every  page \n&gt; once you&#39;ve signed in. But I&#39;m currently planning on attempting  to have \n&gt; only two representations of each page, one for signed in  users and one \n&gt; for anonymous. The signed in representation will have  some JavaScript \n&gt; that grabs the Welcome greeting and insert it  dynamically on the page. \n&gt; If a client doesn&#39;t have JavaScript enabled,  then they still see they \n&gt; are signed in, because that&#39;s one of the two  representations sent from \n&gt; the server, but they won&#39;t see their name  in a welcome message. To me \n&gt; that&#39;s a graceful degradation for non- JavaScript clients that I&#39;m \n&gt; willing to accept in exchange for  improved cache effectiveness. (The \n&gt; signed in/anonymous  representations only work for clients with cookies \n&gt; enabled. Otherwise  I have to fall back to URL rewriting, where the \n&gt; caching will be less  effective, because I&#39;ll have a different URI per \n&gt; resource per session.)\n\nI agree that avoiding session keys in URLs is a very good idea, even at \nthe expense of degraded functionality for ancient or crippled visual agents.\n\n&gt; I&#39;m going to try to take the same kind of JavaScript approach with  \n&gt; search keyword highlighting and links to translations, but I may just  \n&gt; send those variations as representations from the server if  JavaScript \n&gt; turns out to be problematic for those use cases. One  attitude I&#39;ve \n&gt; heard on this list is that if it isn&#39;t cacheable it  isn&#39;t scalable. To \n&gt; me, caching is one tool in the scalability  toolbox, but not the only \n&gt; one. Another example is using URL-rewriting  if cookies aren&#39;t enabled \n&gt; on the client. Yes, this doesn&#39;t make as  effective use of caching as \n&gt; cookies or even HTTP auth could, but if  it allows 5% more users to use \n&gt; the site effectively, then it is  useful. Maybe because of the less \n&gt; effective caching on that 5% you  need to add one more node to your \n&gt; server cluster.\n\nI value the &#39;purity&#39; of a URL too highly to consider stashing a session \nkey (or other session state) in it.\n\n&gt; In summary, I think ETags provide a very flexible solution to caching  \n&gt; multiple representations of the same resource, and that using a  \n&gt; different URI for each bit of new or changed state resulting from  each \n&gt; HTTP request, you don&#39;t need session state.\n\nYou&#39;ve taken this discussion down the &#39;ETags&#39; road, and that&#39;s fine, and \nI accept your points in this regard. I learned something, and that&#39;s \nvaluable to me.\n\nHowever, I don&#39;t think this caching feature bears too heavily on where I \nwas going, which was to present the case for the need of &#39;subject&#39; as \nseparate from &#39;object&#39; in a HTTP request. Cookies are all we&#39;ve got for \nthis, and there&#39;s negative energy applied to their use. If the advice is \n&quot;don&#39;t use cookies&quot;, then what&#39;s going to happen (as it is unavoidable \nfor many applications to require a &#39;session token&#39;) is that either \npeople are going to start doing crazy things with HTTP headers, or \nputting session state in URLs. Either of those two outcomes are far \nworse than using cookies, they will lead to a very broken web.\n\n&gt; One thing I don&#39;t  \n&gt; understand yet is why everyone says cookies are so evil. Is it really  \n&gt; cookies or how they are used that is evil? I can see how having  session \n&gt; state, which can be identified via a cookie, can degrade  caching \n&gt; effectiveness and break the back button. I can also see  privacy \n&gt; problems with persistent cookies. But from every REST- proponent&#39;s \n&gt; disdain for cookies, I feel I must be missing something.  What is really \n&gt; wrong with cookies?\n\nI&#39;m going to be perfectly candid here and offer my (barely informed) \nopinion that this is largely a political issue. I believe it&#39;s residue \nand bitterness from Netscape deploying cookies outside of the standards \nprocess. Certainly cookies aren&#39;t the perfect implementation for \nmodelling the &#39;subject&#39; of a request, but they are the only hook which \nHTTP has for doing this effectively and close to universally.\n\nYou can usually spot a &#39;political issue&#39;, because the arguments fail to \nappeal sufficiently to logic or reason.\n\nClearly there is a need for modelling the &#39;subject&#39; of a request, and \ncookies are the only thing we really have for this. Such need is \nexplicitly denied by Roy in his dissertation on REST. I think it&#39;s \nimportant that people understand they generally can&#39;t implement REST for \nthis reason.\n\nMy take on REST and HTTP could be summarised as:\n\n  There is value in coming to understand REST, but use HTTP.\n\nHTTP and REST aren&#39;t the same thing. HTTP has opaque support for the \nseparation of the &#39;subject&#39; and &#39;object&#39; of a request via cookies. It&#39;d \nbe nice if this support was transparent, but opaque is better than none.\n\n\n\n\n\n\n\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":45758910,"authorName":"Erik Mogensen","from":"Erik Mogensen &lt;erik@...&gt;","profile":"mogsie_oslo","replyTo":"SENDER","senderId":"CDLVQQscYjtuxwUlEHh44bRdkXiWOoQSJjbUDqpERiM0nkNAUnTX0BoM_JD-V4OPX4MCKwUr9MqZmC2IiXkxNWobwcSt24iIWQ","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Paging Atom Feeds for Business Events","postDate":"1307571208","msgId":17570,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEJBTkxrVGltOGthQ2pKNkwtdlBUeXFuUFd0YmVoTFBHcE5RQG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PDY4MzQwMS4yODkyNS5xbUB3ZWIxMTA3MTYubWFpbC5ncTEueWFob28uY29tPg==","referencesHeader":"PDY4MzQwMS4yODkyNS5xbUB3ZWIxMTA3MTYubWFpbC5ncTEueWFob28uY29tPg=="},"prevInTopic":17569,"nextInTopic":17718,"prevInTime":17569,"nextInTime":17571,"topicId":17567,"numMessagesInTopic":5,"msgSnippet":"tl;dr  YES!!!  We do this.  It s cool. ... A nice constraint to start with, for sure.  At my company we have more or less the same thing; immutable lists","rawEmail":"Return-Path: &lt;3rik.mogensen@...&gt;\r\nX-Sender: 3rik.mogensen@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 81794 invoked from network); 8 Jun 2011 22:13:59 -0000\r\nX-Received: from unknown (66.196.94.107)\n  by m17.grp.re1.yahoo.com with QMQP; 8 Jun 2011 22:13:59 -0000\r\nX-Received: from unknown (HELO mail-vx0-f181.google.com) (209.85.220.181)\n  by mta3.grp.re1.yahoo.com with SMTP; 8 Jun 2011 22:13:59 -0000\r\nX-Received: by mail-vx0-f181.google.com with SMTP id 39so942618vxb.40\n        for &lt;rest-discuss@yahoogroups.com&gt;; Wed, 08 Jun 2011 15:13:59 -0700 (PDT)\r\nX-Received: by 10.220.111.84 with SMTP id r20mr842235vcp.260.1307571238194; Wed,\n 08 Jun 2011 15:13:58 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.220.188.10 with HTTP; Wed, 8 Jun 2011 15:13:28 -0700 (PDT)\r\nIn-Reply-To: &lt;683401.28925.qm@...&gt;\r\nReferences: &lt;683401.28925.qm@...&gt;\r\nDate: Thu, 9 Jun 2011 00:13:28 +0200\r\nX-Google-Sender-Auth: 5LyrQvXj7p6eavqDQHx5ywbxNEg\r\nMessage-ID: &lt;BANLkTim8kaCjJ6L-vPTyqnPWtbehLPGpNQ@...&gt;\r\nTo: Bryan Taylor &lt;bryan_w_taylor@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nContent-Type: multipart/alternative; boundary=0016e64ec2782bcf1804a53aa75a\r\nFrom: Erik Mogensen &lt;erik@...&gt;\r\nSubject: Re: [rest-discuss] Paging Atom Feeds for Business Events\r\nX-Yahoo-Group-Post: member; u=45758910; y=20Ye4E59-Kg7SWqYrJVnAHbEC99P3RM6nRk2RMnIcu8UlYEvpUU\r\nX-Yahoo-Profile: mogsie_oslo\r\n\r\n\r\n--0016e64ec2782bcf1804a53aa75a\r\nContent-Type: text/plain; charset=windows-1252\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\ntl;dr  YES!!!  We do this.  It&#39;s cool.\n\nOn Tue, Jun 7, 2011 at 6:55 AM, Bry=\r\nan Taylor &lt;bryan_w_taylor@...&gt;wrote:\n\n&gt;\n&gt;\n&gt; This makes our atom entri=\r\nes immutable and our collections\n&gt; append-only.\n&gt;\nA nice constraint to star=\r\nt with, for sure.  At my company we have more or\nless the same thing; immut=\r\nable lists (except for the odd logical delete) of\nthings.  Extremely large =\r\nlists of things. (for logical deletes we&#39;re going\nto add atom tombstones).\n=\r\n\n&gt; The paged strategy from RFC 5005 uses &quot;next&quot;, &quot;previous&quot;, &quot;first&quot;, and\n&gt;=\r\n &quot;last&quot; links, though it doesn&#39;t imply how the entries are ordered.\n&gt;\nTrue.=\r\n  They only extend the inherent order of the things in the collection.\n So =\r\nif they are &quot;descending date&quot; then next will naturally be descending\ndate.\n=\r\n\n&gt; because the meaning of &quot;page=3D3&quot; isn&#39;t stateless\n&gt;\nExactly!  Nail on th=\r\ne head.  It might not be state per se, but I like to\nthink of it like that =\r\ntoo.\n\npage=3D3 means &quot;whatever is 20 items from the top&quot; and it changes ove=\r\nr time.\n I like the simile of a stack of index cards: You look at a single =\r\ncard\n(say, number 17 from the top) and think &quot;oh, I want the *next* card&quot; d=\r\no you\n\n(a) flip your way down to (*n* + 1)=3D18 cards? or\n\n(b) move your fi=\r\nngers down one from the card you&#39;re holding?\n\nObviously in the real world, =\r\n(b).  (a) highlights the problem if someone\nelse is messing with your deck =\r\nof cards, e.g. a new item was added to the\ntop, and when you flip through (=\r\n*n* + 1) =3D 18 cards you end up with the same\ncard...\n\nFinally, we settled=\r\n on the &quot;mark method&quot; for paging, where we construct a\n&gt; &quot;next&quot;\n&gt; page by u=\r\nsing a ?before=3D$oldest parameter where $oldest is the unique key\n&gt; value\n=\r\n&gt; for the oldest entry on the page we just showed. Similarly, &quot;previous&quot;\n&gt; =\r\npages use\n&gt; a ?after=3D$newest parameter where $newest is the newest entry =\r\non the page.\n&gt; The\n&gt; &quot;first&quot; case is the collection URI with no parameters.=\r\n\n&gt;\nThere&#39;s prior art in this technique, although not that use AtomPub:\nTwit=\r\nter:\nhttp://apiwiki.twitter.com/w/page/22554749/Twitter-REST-API-Method:-st=\r\natuses%C2%A0friends=97they\ncall it &quot;cursor based pagination&quot;\n\nCouchDB:  htt=\r\np://guide.couchdb.org/draft/recipes.html#fast=97It has &quot;startkey&quot;\nand &quot;limi=\r\nt&quot;, where you typically ask for 11 items, and then use the ID of\nthe 11th i=\r\ntem as the key for the &quot;next&quot; page.\n\nUs.  haha.  No, really... at RESTFest =\r\n2010, I gave a talk on &quot;Extremely\nlarge lists&quot; where I (IIRC) highlighted t=\r\nhe benefits of cursor based\npagination.  The slides are available http://mo=\r\ngsie.com/2011/lists/.  The\ntalk works best with audio (see last slide).\n\n\n&gt;=\r\n An interesting consequence of this mechanism: first-&gt;previous is actually\n=\r\n&gt; useful, because events may arrive after the server sends the entry point\n=\r\n&gt; representation. If none have, this will be an empty page with only the\n&gt; =\r\nfirst\n&gt; link.\n&gt;\nIt&#39;s uncanny.  We&#39;ve done this too.  We use this as a cheap=\r\n steady state for\nall of those clients listening for everything new.  If yo=\r\nu have 100s of\nclients and they&#39;re all constantly polling what&#39;s new, getti=\r\nng the &quot;first&quot;\npage by following previous links will take them to the _same=\r\n_ empty page\nright at the beginning of the list.\n\nI&#39;ve discussed this with =\r\nvarious people, and I thought that it might be an\nidea to standardize a lin=\r\nk relation (&quot;before-first&quot;) for this.  If your list\nextends in both directi=\r\nons then a corollary &quot;after-last&quot; link relation could\nbe useful.  But I bel=\r\nieve the way we use these links are within the\ndefinition of the &quot;previous&quot;=\r\n link relation...\n\n\n&gt; But repeated polling of previous links gives clients =\r\na way to\n&gt; get guaranteed in-order delivery.\n&gt;\nAnd apparently that&#39;s such a=\r\n hard problem to solve...\n\n\n&gt; It complicates the server&#39;s caching picture\n&gt;=\r\n somewhat\n&gt;\nBut it increases the efficiency of intermediary caching.  Here&#39;=\r\ns how:\n\nLet&#39;s say you have 100 items=97the numbers 1 through 100=97on 10 pa=\r\nges, in\ndescending order.  Any client that&#39;s anywhere in the list will see =\r\nthe list\nalong the &quot;old&quot; boundaries of items 100, 90, 80, 70 etc.  You add =\r\none item\nto the top.  Traditional wisdom with offset based pagination, all =\r\npages\nchange (unless you flip it around like Eric Bowman suggests).  But wi=\r\nth\ncursor based pagination, all the pages are still valid (except perhaps t=\r\nhe\n&quot;first&quot; page).  So if a client is looking at &quot;page 2&quot;, or first-&gt;next (i=\r\ntems\n81=9690), the previous link will still show a page containing 91=96100=\r\n.  This\npage will no longer be the first page.  It will now sport a previou=\r\ns link to\na page containing only 101.  However, if a *new* client appears, =\r\nthe &quot;entry\npoint&quot; of the list would be a page containing the 10 top items; =\r\n92=96101.\n\nWe don&#39;t think this will be a big problem. You might think that =\r\na worst case\nscenario, each item would be cached by an intermediary ten tim=\r\nes, as\ndifferent clients walk through the list at different boundaries.  Ho=\r\nwever\n(at least for us), the typical usage would be for clients to only wan=\r\nt to\nkeep up-to-date, so very quickly any client would end up at the &quot;stead=\r\ny\nstate&quot; of the empty first-&gt;previous page.  When a new item appears, they =\r\nall\npounce on the page and go to the -&gt;previous page once more.\n\n\n&gt; but it&#39;=\r\ns O(1) to force the eviction and freshening of the URIs in the\n&gt; last $page=\r\nsize entries.\n&gt;\nYou don&#39;t need to.  If you leave them in the cache, what ba=\r\nd thing can\nhappen?\n\nLet&#39;s say in the above scenario, three items were adde=\r\nd in slow succession,\nallowing clients to &quot;keep up&quot; and populate some inter=\r\nmediary with five\none-page items:  101=96101, 102=96102 and 103=96103.  In =\r\nthe mean time, a client\nthat had been down for maintenance or offline wakes=\r\n up and picks up from\nwhere they left off (which was page 91=96100).  The c=\r\nached previous page still\nshows 101=96101.  Which links to a cached 102=961=\r\n02.  Which links to a cached\npage 103=96103.\n\nEverything is still in-order,=\r\n guaranteed delivery, and blazingly fast (since\nit&#39;s cached).\n\nOften in bus=\r\niness eventing situations, we need to\n&gt; watch all resource state transition=\r\ns and react to certain transitions,\n&gt; which\n&gt; might be skipped over if mult=\r\niple updates happen in quick succession.\n&gt;\n\nOk that&#39;s two of us.  How many =\r\nare needed for it to be a pattern?  Anyone\nelse doing this?\n\n\n&gt; I&#39;m curious=\r\n to hear what others have done. Feedback welcome.\n&gt;\n\nAs you can imagine, I&#39;=\r\nve thought about this a while, and it has quite a few\ndesirable properties:=\r\n\n* resilient=97if a client goes down, it picks up where it left off by\nbook=\r\nmarking the last URI it saw.  No matter how long the outage, the client\nwil=\r\nl see exactly the items in the right order.  The same goes for if the\nserve=\r\nr is down; the client just sits tight waiting for it to work.  It works\nif =\r\nthey&#39;re both down, in any combination of down ;-)\n* scalable=97any number o=\r\nf clients can be at different places in the list.\n* stateless=97the server =\r\nknows nothing about where its clients are in the\nlist.  The state of the cl=\r\nient is magically encoded in the URI.\n* fast=97the client gets the item as =\r\nfast as it can poll.\n* efficient=97reasonably efficient, that is. The clien=\r\nt only gets the items\nthat it hasn&#39;t seen yet, and sees each item only once=\r\n.\n* transparent=97since the resources don&#39;t change over time, you can re-re=\r\nquest\nthe URI and be relatively sure that it contains the same items (albei=\r\nt\nperhaps more items).\n\nSorry about the long post...\n-- \n-mogsie-\n\r\n--0016e64ec2782bcf1804a53aa75a\r\nContent-Type: text/html; charset=windows-1252\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\ntl;dr =A0YES!!! =A0We do this. =A0It&#39;s cool.&lt;br&gt;&lt;br&gt;&lt;div class=3D&quot;gmail=\r\n_quote&quot;&gt;On Tue, Jun 7, 2011 at 6:55 AM, Bryan Taylor &lt;span dir=3D&quot;ltr&quot;&gt;&lt;=\r\n&lt;a href=3D&quot;mailto:bryan_w_taylor@...&quot;&gt;bryan_w_taylor@...&lt;/a&gt;&gt=\r\n;&lt;/span&gt; wrote:&lt;br&gt;\n\n&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;margin:0 0 =\r\n0 .8ex;border-left:1px #ccc solid;padding-left:1ex;&quot;&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;div sty=\r\nle=3D&quot;background-color:#fff&quot;&gt;\n&lt;span&gt;=A0&lt;/span&gt;\n\n\n&lt;div&gt;\n  &lt;div&gt;\n\n\n    &lt;div&gt;\n=\r\n      \n      \n      &lt;p&gt;This makes our atom entries immutable and our collec=\r\ntions &lt;br&gt;\nappend-only. &lt;br&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;A=\r\n nice constraint to start with, for sure. =A0At my company we have more or =\r\nless the same thing; immutable lists (except for the odd logical delete) of=\r\n things. =A0Extremely large lists of things. (for logical deletes we&#39;re=\r\n going to add atom tombstones).&lt;/div&gt;\n\n&lt;blockquote class=3D&quot;gmail_quote&quot; st=\r\nyle=3D&quot;margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex;&quot;&gt;&lt;div=\r\n style=3D&quot;background-color:#fff&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;p&gt;The paged strategy from =\r\nRFC 5005 uses &quot;next&quot;, &quot;previous&quot;, &quot;first&quot;, an=\r\nd &lt;br&gt;\n\n\n&quot;last&quot; links, though it doesn&#39;t imply how the entrie=\r\ns are ordered. &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;True. =A0They =\r\nonly extend the inherent order of the things in the collection. =A0So if th=\r\ney are &quot;descending date&quot; then next will naturally be descending d=\r\nate.=A0&lt;/div&gt;\n\n&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;margin:0 0 0 .8ex=\r\n;border-left:1px #ccc solid;padding-left:1ex;&quot;&gt;&lt;div style=3D&quot;background-col=\r\nor:#fff&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;p&gt;because the meaning of &quot;page=3D3&quot; isn&=\r\n#39;t stateless &lt;br&gt;\n\n&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;Exactly=\r\n! =A0Nail on the head. =A0It might not be state per se, but I like to think=\r\n of it like that too.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;page=3D3 means &quot;whateve=\r\nr is 20 items from the top&quot; and it changes over time. =A0I like the si=\r\nmile of a stack of index cards: You look at a single card (say, number 17 f=\r\nrom the top) and think &quot;oh, I want the &lt;i&gt;next&lt;/i&gt;=A0card&quot; do you=\r\n=A0&lt;/div&gt;\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;(a) flip your way down to (&lt;i&gt;n&lt;/i&gt;=A0+ 1)=\r\n=3D18 cards? or&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;(b) move your fingers down one fro=\r\nm the card you&#39;re holding?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Obviously in the re=\r\nal world, (b). =A0(a) highlights the problem if someone else is messing wit=\r\nh your deck of cards, e.g. a new item was added to the top, and when you fl=\r\nip through (&lt;i&gt;n&lt;/i&gt;=A0+ 1) =3D 18 cards you end up with the same card...&lt;/=\r\ndiv&gt;\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;margin:0 0 =\r\n0 .8ex;border-left:1px #ccc solid;padding-left:1ex;&quot;&gt;&lt;div style=3D&quot;backgrou=\r\nnd-color:#fff&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;p&gt;Finally, we settled on the &quot;mark meth=\r\nod&quot; for paging, where we construct a &quot;next&quot; &lt;br&gt;\n\n\npage by u=\r\nsing a ?before=3D$oldest parameter where $oldest is the unique key value &lt;b=\r\nr&gt;\nfor the oldest entry on the page we just showed. Similarly, &quot;previo=\r\nus&quot; pages use &lt;br&gt;\na ?after=3D$newest parameter where $newest is the n=\r\newest entry on the page. The &lt;br&gt;\n&quot;first&quot; case is the collection =\r\nURI with no parameters.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;There&=\r\n#39;s prior art in this technique, although not that use AtomPub:&lt;/div&gt;&lt;div=\r\n&gt;Twitter:=A0&lt;a href=3D&quot;http://apiwiki.twitter.com/w/page/22554749/Twitter-R=\r\nEST-API-Method:-statuses%C2%A0friends&quot;&gt;http://apiwiki.twitter.com/w/page/22=\r\n554749/Twitter-REST-API-Method:-statuses%C2%A0friends&lt;/a&gt;=97they call it &q=\r\nuot;cursor based pagination&quot;&lt;/div&gt;\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;CouchDB: =A0&lt;a=\r\n href=3D&quot;http://guide.couchdb.org/draft/recipes.html#fast&quot;&gt;http://guide.cou=\r\nchdb.org/draft/recipes.html#fast&lt;/a&gt;=97It=A0has &quot;startkey&quot; and &q=\r\nuot;limit&quot;, where you typically ask for 11 items, and then use the ID =\r\nof the 11th item as the key for the &quot;next&quot; page.&lt;/div&gt;\n\n&lt;meta htt=\r\np-equiv=3D&quot;content-type&quot; content=3D&quot;text/html; charset=3Dutf-8&quot;&gt;&lt;meta http-=\r\nequiv=3D&quot;content-type&quot; content=3D&quot;text/html; charset=3Dutf-8&quot;&gt;&lt;div&gt;&lt;br&gt;&lt;/di=\r\nv&gt;&lt;div&gt;Us. =A0haha. =A0No, really... at RESTFest 2010, I gave a talk on &qu=\r\not;Extremely large lists&quot; where I (IIRC) highlighted the benefits of c=\r\nursor based pagination. =A0The slides are available=A0&lt;a href=3D&quot;http://mog=\r\nsie.com/2011/lists/&quot;&gt;http://mogsie.com/2011/lists/&lt;/a&gt;. =A0The talk works b=\r\nest with audio (see last slide).&lt;/div&gt;\n\n&lt;meta http-equiv=3D&quot;content-type&quot; c=\r\nontent=3D&quot;text/html; charset=3Dutf-8&quot;&gt;&lt;meta http-equiv=3D&quot;content-type&quot; con=\r\ntent=3D&quot;text/html; charset=3Dutf-8&quot;&gt;&lt;div&gt;=A0&lt;/div&gt;&lt;blockquote class=3D&quot;gmai=\r\nl_quote&quot; style=3D&quot;margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left=\r\n:1ex;&quot;&gt;\n\n&lt;div style=3D&quot;background-color:#fff&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;p&gt;An interest=\r\ning consequence of this mechanism: first-&gt;previous is actually &lt;br&gt;\nusef=\r\nul, because events may arrive after the server sends the entry point &lt;br&gt;\nr=\r\nepresentation. If none have, this will be an empty page with only the first=\r\n &lt;br&gt;\nlink.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;It&#39;s uncanny. =\r\n=A0We&#39;ve done this too. =A0We use this as a cheap steady state for all =\r\nof those clients listening for everything new. =A0If you have 100s of clien=\r\nts and they&#39;re all constantly polling what&#39;s new, getting the &quot=\r\n;first&quot; page by following previous links will take them to the _same_ =\r\nempty page right at the beginning of the list.&lt;/div&gt;\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I=\r\n&#39;ve discussed this with various people, and I thought that it might be =\r\nan idea to standardize a link relation (&quot;before-first&quot;) for this.=\r\n =A0If your list extends in both directions then a corollary &quot;after-la=\r\nst&quot; link relation could be useful. =A0But I believe the way we use the=\r\nse links are within the definition of the &quot;previous&quot; link relatio=\r\nn...&lt;/div&gt;\n\n&lt;div&gt;=A0&lt;/div&gt;&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;margin=\r\n:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex;&quot;&gt;&lt;div style=3D&quot;bac=\r\nkground-color:#fff&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;p&gt;But repeated polling of previous link=\r\ns gives clients a way to &lt;br&gt;\n\n\nget guaranteed in-order delivery.&lt;/p&gt;&lt;/div&gt;=\r\n&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;And apparently that&#39;s such a hard p=\r\nroblem to solve...&lt;/div&gt;&lt;div&gt;=A0&lt;/div&gt;&lt;blockquote class=3D&quot;gmail_quote&quot; sty=\r\nle=3D&quot;margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex;&quot;&gt;\n\n&lt;di=\r\nv style=3D&quot;background-color:#fff&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;p&gt;It complicates the serv=\r\ner&#39;s caching picture &lt;br&gt;\nsomewhat&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockqu=\r\note&gt;&lt;div&gt;But it increases the efficiency of intermediary caching. =A0Here&#=\r\n39;s how:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Let&#39;s say you have 100 items=97the n=\r\numbers 1 through 100=97on 10 pages, in descending order. =A0Any client that=\r\n&#39;s anywhere in the list will see the list along the &quot;old&quot; bou=\r\nndaries of items 100, 90, 80, 70 etc. =A0You add one item to the top. =A0Tr=\r\naditional wisdom with offset based pagination, all pages change (unless you=\r\n flip it around like Eric Bowman suggests). =A0But with cursor based pagina=\r\ntion, all the pages are still valid (except perhaps the &quot;first&quot; p=\r\nage). =A0So if a client is looking at &quot;page 2&quot;, or first-&gt;next=\r\n (items 81=9690), the previous link will still show a page containing 91=96=\r\n100. =A0This page will no longer be the first page. =A0It will now sport a =\r\nprevious link to a page containing only 101. =A0However, if a &lt;i&gt;new&lt;/i&gt; cl=\r\nient appears, the &quot;entry point&quot; of the list would be a page conta=\r\nining the 10 top items; 92=96101.&lt;/div&gt;\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;We don&#39;t t=\r\nhink this will be a big problem. You might think that a worst case scenario=\r\n, each item would be cached by an intermediary ten times, as different clie=\r\nnts walk through the list at different boundaries. =A0However (at least for=\r\n us), the typical usage would be for clients to only want to keep up-to-dat=\r\ne, so very quickly any client would end up at the &quot;steady state&quot; =\r\nof the empty first-&gt;previous page. =A0When a new item appears, they all =\r\npounce on the page and go to the -&gt;previous page once more.&lt;/div&gt;\n\n&lt;meta=\r\n http-equiv=3D&quot;content-type&quot; content=3D&quot;text/html; charset=3Dutf-8&quot;&gt;&lt;div&gt;=\r\n=A0&lt;/div&gt;&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;margin:0 0 0 .8ex;borde=\r\nr-left:1px #ccc solid;padding-left:1ex;&quot;&gt;&lt;div style=3D&quot;background-color:#ff=\r\nf&quot;&gt;&lt;div&gt;\n\n&lt;div&gt;&lt;div&gt;&lt;p&gt;but it&#39;s O(1) to force the eviction and fresheni=\r\nng of the URIs in the &lt;br&gt;\nlast $pagesize entries.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/d=\r\niv&gt;&lt;/blockquote&gt;&lt;div&gt;You don&#39;t need to. =A0If you leave them in the cac=\r\nhe, what bad thing can happen?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Let&#39;s say in th=\r\ne above scenario, three items were added in slow succession, allowing clien=\r\nts to &quot;keep up&quot; and populate some intermediary with five one-page=\r\n items: =A0101=96101, 102=96102 and 103=96103. =A0In the mean time, a clien=\r\nt that had been down for maintenance or offline wakes up and picks up from =\r\nwhere they left off (which was page 91=96100). =A0The cached previous page =\r\nstill shows 101=96101. =A0Which links to a cached 102=96102. =A0Which links=\r\n to a cached page 103=96103.&lt;/div&gt;\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Everything is still=\r\n in-order, guaranteed delivery, and blazingly fast (since it&#39;s cached).=\r\n&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;margin:0 0 =\r\n0 .8ex;border-left:1px #ccc solid;padding-left:1ex;&quot;&gt;\n\n&lt;div style=3D&quot;backgr=\r\nound-color:#fff&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;p&gt;Often in business eventing situations, w=\r\ne need to &lt;br&gt;\nwatch all resource state transitions and react to certain tr=\r\nansitions, which &lt;br&gt;\nmight be skipped over if multiple updates happen in q=\r\nuick succession. &lt;br&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/di=\r\nv&gt;&lt;div&gt;Ok that&#39;s two of us. =A0How many are needed for it to be a patte=\r\nrn? =A0Anyone else doing this?&lt;/div&gt;\n\n&lt;div&gt;=A0&lt;/div&gt;&lt;blockquote class=3D&quot;gm=\r\nail_quote&quot; style=3D&quot;margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-le=\r\nft:1ex;&quot;&gt;&lt;div style=3D&quot;background-color:#fff&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;p&gt;\nI&#39;m cu=\r\nrious to hear what others have done. Feedback welcome.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div=\r\n&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;As you can imagine, I&#39;ve though=\r\nt about this a while, and it has quite a few desirable properties:&lt;/div&gt;\n\n&lt;=\r\ndiv&gt;* resilient=97if a client goes down, it picks up where it left off by b=\r\nookmarking the last URI it saw. =A0No matter how long the outage, the clien=\r\nt will see exactly the items in the right order. =A0The same goes for if th=\r\ne server is down; the client just sits tight waiting for it to work. =A0It =\r\nworks if they&#39;re both down, in any combination of down ;-)&lt;/div&gt;\n\n&lt;div&gt;=\r\n* scalable=97any number of clients can be at different places in the list.&lt;=\r\n/div&gt;&lt;div&gt;* stateless=97the server knows nothing about where its clients ar=\r\ne in the list. =A0The state of the client is magically encoded in the URI.&lt;=\r\n/div&gt;\n\n&lt;div&gt;* fast=97the client gets the item as fast as it can poll.=A0&lt;/d=\r\niv&gt;&lt;div&gt;* efficient=97reasonably efficient, that is. The client only gets t=\r\nhe items that it hasn&#39;t seen yet, and sees each item only once.&lt;/div&gt;&lt;d=\r\niv&gt;* transparent=97since the resources don&#39;t change over time, you can =\r\nre-request the URI and be relatively sure that it contains the same items (=\r\nalbeit perhaps more items).&lt;/div&gt;\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Sorry about the long=\r\n post...&lt;/div&gt;&lt;div&gt;--=A0&lt;/div&gt;&lt;div&gt;-mogsie-&lt;/div&gt;&lt;/div&gt;\n\r\n--0016e64ec2782bcf1804a53aa75a--\r\n\n"}}
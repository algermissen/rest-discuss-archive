{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":221173245,"authorName":"wahbedahbe","from":"&quot;wahbedahbe&quot; &lt;andrew.wahbe@...&gt;","profile":"wahbedahbe","replyTo":"SENDER","senderId":"vxRInvOppIfrhONCJAQIfv-Eu0LqZK5M-tjMtz-3XKC3qWzaR5-jrq4Z9QUi9Sd7eVU8ljERk0xMQZ3MshUbVR1WB1KWzVv7nofxBA","spamInfo":{"isSpam":false,"reason":"6"},"subject":"Re: Understanding Steady States","postDate":"1264445050","msgId":14671,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGhqa29wcStiZ2ZlQGVHcm91cHMuY29tPg==","inReplyToHeader":"PDA3QjY4NjAyLUMyQzMtNDE2Ri1CQjM2LUY2QjI4RUI4QURFM0BtYWMuY29tPg=="},"prevInTopic":14658,"nextInTopic":14672,"prevInTime":14670,"nextInTime":14672,"topicId":14643,"numMessagesInTopic":27,"msgSnippet":"... Another relevant Roy writing (wow this list feels like theological discussions referencing Bible passages sometimes!) is in section 6.3.4.2 of his thesis","rawEmail":"Return-Path: &lt;andrew.wahbe@...&gt;\r\nX-Sender: andrew.wahbe@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 53683 invoked from network); 25 Jan 2010 18:45:03 -0000\r\nX-Received: from unknown (98.137.34.46)\n  by m4.grp.sp2.yahoo.com with QMQP; 25 Jan 2010 18:45:03 -0000\r\nX-Received: from unknown (HELO n45b.bullet.mail.sp1.yahoo.com) (66.163.168.159)\n  by mta3.grp.sp2.yahoo.com with SMTP; 25 Jan 2010 18:45:03 -0000\r\nX-Received: from [69.147.65.174] by n45.bullet.mail.sp1.yahoo.com with NNFMP; 25 Jan 2010 18:44:10 -0000\r\nX-Received: from [98.137.34.34] by t12.bullet.mail.sp1.yahoo.com with NNFMP; 25 Jan 2010 18:44:10 -0000\r\nDate: Mon, 25 Jan 2010 18:44:10 -0000\r\nTo: rest-discuss@yahoogroups.com\r\nMessage-ID: &lt;hjkopq+bgfe@...&gt;\r\nIn-Reply-To: &lt;07B68602-C2C3-416F-BB36-F6B28EB8ADE3@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;ISO-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-Yahoo-Newman-Property: groups-compose\r\nX-eGroups-Msg-Info: 1:6:0:0:0\r\nFrom: &quot;wahbedahbe&quot; &lt;andrew.wahbe@...&gt;\r\nSubject: Re: Understanding Steady States\r\nX-Yahoo-Group-Post: member; u=221173245; y=fAdueGEYM0juK_uJy45tyWtZlk22tyfnyDteXeZhrVxYLD8K5A\r\nX-Yahoo-Profile: wahbedahbe\r\n\r\n\n\n--- In rest-discuss@yahoogroups.com, Jan Algermissen &lt;algermissen1971@...=\r\n&gt; wrote:\n&gt;\n&gt; \n&gt; On Jan 24, 2010, at 4:51 PM, Jan Algermissen wrote:\n&gt; \n&gt; &gt;\n=\r\n&gt; &gt; On Jan 24, 2010, at 4:46 PM, Mike Kelly wrote:\n&gt; &gt;\n&gt; &gt;&gt; Jan Algermissen=\r\n wrote:\n&gt; &gt;&gt;&gt; On Jan 24, 2010, at 2:07 PM, Mike Kelly wrote:\n&gt; &gt;&gt;&gt;\n&gt; &gt;&gt;&gt;\n&gt; =\r\n&gt;&gt;&gt;&gt; the only way for the client to understand the &#39;meaning&#39; of its\n&gt; &gt;&gt;&gt;&gt; =\r\ncurrent state is in the context of the application flow (i.e.\n&gt; &gt;&gt;&gt;&gt; series=\r\n  of link relations) which led up to it.\n&gt; &gt;&gt;&gt;&gt;\n&gt; &gt;&gt;&gt;\n&gt; &gt;&gt;&gt;\n&gt; &gt;&gt;&gt; Correct m=\r\ne, but this is exactly what REST prevents. A client can\n&gt; &gt;&gt;&gt; use  the URI =\r\nof any steady-state and just proceed through the\n&gt; &gt;&gt;&gt; application  from th=\r\nat point on without the need for any knowledge\n&gt; &gt;&gt;&gt; about prior  interacti=\r\nons. If it can&#39;t, the representation is just\n&gt; &gt;&gt;&gt; badly designed.\n&gt; &gt;&gt;&gt;\n&gt; =\r\n&gt;&gt;\n&gt; &gt;&gt; Are we drawing a distinction here between steady-state and entry-\n&gt;=\r\n &gt;&gt; point?\n&gt; &gt;\n&gt; &gt; Hmm, IMHO each steady state is a potential entry point.\n=\r\n&gt; \n&gt; I knew it wasn&#39;t my clever observation but that Roy wrote it  \n&gt; somew=\r\nhere... here is the link:\n&gt; &lt;http://tech.groups.yahoo.com/group/rest-discus=\r\ns/message/5841&gt;\n&gt; \n\nAnother relevant Roy writing (wow this list feels like =\r\ntheological discussions referencing Bible passages sometimes!) is in sectio=\r\nn 6.3.4.2 of his thesis where he talks about cookies messing up the back bu=\r\ntton. \n\nYour application state machine should allow arbitrary jumps (via &quot;t=\r\nyped in&quot; urls, back buttons, etc.) and so that implies that the application=\r\n state shouldn&#39;t depend on the path taken.\n\nAt the same time I can think th=\r\nere is &quot;client state&quot; that is independent of &quot;application state&quot;. For examp=\r\nle, the size of the window in a browser, the content that an atompub client=\r\n is trying to publish are some examples. This client state affects the exec=\r\nution of the application, combining with the application state to affect cl=\r\nient behavior. e.g. the application could display differently depending on =\r\nthe window size or the atompub client could pick different feeds from the s=\r\nervice doc based on client state.\n\nI think was is important is that the app=\r\nlication state should never rely on the client state value. One possible ap=\r\nproach to ensuring this is to enforce that the application state should nev=\r\ner affect/change the client state, but I don&#39;t think this is necessary or r=\r\nealistic. For example, the content that a client is trying to publish might=\r\n depend on something that it previously fetched. The HTML5 client-side SQL =\r\nstore is another example of mutable client state (I think).\n\nSo I think tha=\r\nt application state can effect the client state, but as long as your applic=\r\nation states never depend on the client state, you can jump around to arbit=\r\nrary application states without things breaking. This does constrain how yo=\r\nu do things though, for example, you have to write your HTML5 application t=\r\no not depend on the state of client-side SQL tables.\n\nI&#39;m making up my own =\r\nterminology here as I&#39;m not aware of a precedent. And maybe, this &quot;client s=\r\ntate&quot; is really part of the application state -- but that doesn&#39;t seem righ=\r\nt to me and doesn&#39;t match my experience.\nRegards,\n\nAndrew\n\n\n"}}
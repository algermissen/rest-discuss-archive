{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":124198377,"authorName":"William Martinez Pomares","from":"&quot;William Martinez Pomares&quot; &lt;wmartinez@...&gt;","profile":"willmarpo","replyTo":"SENDER","senderId":"A2lPHOduSUJhfoKsH_uQIL8DQKtemkpiD-gSBmSuuBl9nz2d9CGa-MJbPsq0RXBpDh3hsraUewI2C5WQlycXG-93JbAbIM0PD24VOa7Sfh50z2gMQbQeAkoB","spamInfo":{"isSpam":false,"reason":"6"},"subject":"Re: Partial PUT debate","postDate":"1289415067","msgId":16870,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGliZXBpcitmazRpQGVHcm91cHMuY29tPg==","inReplyToHeader":"PEFBTkxrVGltWFYya0h1cHNHdXBpTVJYZCtyam1RNXF1SDk2NW9fSkV5eDFaaEBtYWlsLmdtYWlsLmNvbT4="},"prevInTopic":16869,"nextInTopic":16871,"prevInTime":16869,"nextInTime":16871,"topicId":16839,"numMessagesInTopic":40,"msgSnippet":"Interesting. Jan also agrees. I do too. There is a need and ways people overcome that need. Still, I m not totally convinced. Granted, PUT and PATCH are","rawEmail":"Return-Path: &lt;wmartinez@...&gt;\r\nX-Sender: wmartinez@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 56376 invoked from network); 10 Nov 2010 18:51:08 -0000\r\nX-Received: from unknown (98.137.34.44)\n  by m6.grp.sp2.yahoo.com with QMQP; 10 Nov 2010 18:51:08 -0000\r\nX-Received: from unknown (HELO n4-vm6.bullet.mail.sp2.yahoo.com) (67.195.135.100)\n  by mta1.grp.sp2.yahoo.com with SMTP; 10 Nov 2010 18:51:08 -0000\r\nX-Received: from [67.195.134.239] by n4.bullet.mail.sp2.yahoo.com with NNFMP; 10 Nov 2010 18:51:08 -0000\r\nX-Received: from [69.147.65.172] by t4.bullet.mail.sp2.yahoo.com with NNFMP; 10 Nov 2010 18:51:08 -0000\r\nX-Received: from [98.137.35.12] by t14.bullet.mail.sp1.yahoo.com with NNFMP; 10 Nov 2010 18:51:08 -0000\r\nDate: Wed, 10 Nov 2010 18:51:07 -0000\r\nTo: rest-discuss@yahoogroups.com\r\nMessage-ID: &lt;ibepir+fk4i@...&gt;\r\nIn-Reply-To: &lt;AANLkTimXV2kHupsGupiMRXd+rjmQ5quH965o_JEyx1Zh@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;ISO-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-Yahoo-Newman-Property: groups-compose\r\nX-eGroups-Msg-Info: 1:6:0:0:0\r\nFrom: &quot;William Martinez Pomares&quot; &lt;wmartinez@...&gt;\r\nSubject: Re: Partial PUT debate\r\nX-Yahoo-Group-Post: member; u=124198377; y=ZTTFo7OxYhuaC6xddPqQyo5ScGfXLJWZ78ASUADzq_v8NzI1\r\nX-Yahoo-Profile: willmarpo\r\n\r\nInteresting.\nJan also agrees.\nI do too. There is a need and ways people ove=\r\nrcome that need.\n\nStill, I&#39;m not totally convinced.\n\nGranted, PUT and PATCH=\r\n are totally different things, no discussion there. The distinction shouldn=\r\n&#39;t even be there, explained in the PATCH description, as PUT is a creationa=\r\nl operation. Still, I guess it is there due to the extended use of PUT as a=\r\nn Update operation.\n\nAt some moment, PATCH looks to me like POST but with a=\r\nn update intention. Probably the POST description, by enumerating the 3 use=\r\ns, reduces a little bit the POST semantic, although it is kept open.\nI mean=\r\n, the payload in POST is not necessarily a (sub)resource representation. It=\r\n is a payload sent to a resource, who will act accordingly. PATCH does the =\r\nsame but denoting an intention of changing the resource in a predictable wa=\r\ny.\n\nNot sure if my feeling is wrong or not, but PATCH transfers, somehow, r=\r\nesponsibility to client about the particular modifications to a resource, w=\r\nhile POST keeps that in the server. With PATCH, client should be aware and =\r\ncareful with what it is requesting, with POST the server is the one under c=\r\nontrol (or should be). With patch, if not used carefully, we may need the c=\r\nlient to know much more that desirable about the resource structure.\n\nAbout=\r\n visibility, and about the update intention, I guess it is good to have cle=\r\nar in the line we are trying to update something. But, I still think we are=\r\n trying to force CRUD into HTTP, and the update may be somehow better if pe=\r\nrformed silently by the server based on posted data, rather the directly co=\r\nmmanded by the client. \n\nI know, blurred line.\n\nWilliam Martinez Pomares\n\n\n=\r\n--- In rest-discuss@yahoogroups.com, mike amundsen &lt;mamund@...&gt; wrote:\n&gt;\n&gt; =\r\nWilliam:\n&gt; \n&gt; &lt;snip&gt;\n&gt; &gt; So, PATCH may work, but I feel still it is not the=\r\n full solution. At the end, as you say, we may need to go back and use POST=\r\n.\n&gt; &gt; What do you think?\n&gt; &lt;/snip&gt;\n&gt; \n&gt; From my POV, there are two things t=\r\no keep in mind here:\n&gt; - The affect the PATCH RFC has on how we view|use PU=\r\nT\n&gt; - The affect the PATCH RFC has on how we view|use POST\n&gt; \n&gt; PATCH AND P=\r\nUT\n&gt; One of the things that sets PATCH apart from PUT is that the RFC[1]\n&gt; =\r\ndescribes the PATCH payload as &quot;a set of instructions...&quot;\n&gt; &lt;quote&gt;\n&gt; The d=\r\nifference between the PUT and PATCH requests is reflected in the\n&gt;    way t=\r\nhe server processes the enclosed entity to modify the resource\n&gt;    identif=\r\nied by the Request-URI.  In a PUT request, the enclosed entity\n&gt;    is cons=\r\nidered to be a modified version of the resource stored on the\n&gt;    origin s=\r\nerver, and the client is requesting that the stored version\n&gt;    be replace=\r\nd.  With PATCH, however, the enclosed entity contains a set\n&gt;    of instruc=\r\ntions describing how a resource currently residing on the\n&gt;    origin serve=\r\nr should be modified to produce a new version.  The PATCH\n&gt;    method affec=\r\nts the resource identified by the Request-URI, and it\n&gt;    also MAY have si=\r\nde effects on other resources; i.e., new resources\n&gt;    may be created, or =\r\nexisting ones modified, by the application of a\n&gt;    PATCH.\n&gt; &lt;/quote&gt;\n&gt; \n&gt;=\r\n There are no details on what that set of instructions looks like; that\n&gt; d=\r\netail is left open for implementors to work out. It is also\n&gt; interesting t=\r\no note that the PATCH RFC makes allowances for the\n&gt; possibility that the r=\r\nesults of a PATCH request MAY be the creation of\n&gt; a new resource.\n&gt; \n&gt; PAT=\r\nCH AND POST\n&gt; In the past, I used the basic approach described in PATCH ( a=\r\n set of\n&gt; instructions delineated by a media type) but used the existing PO=\r\nST\n&gt; method to complete the task. Usually that meant I minted a URI for\n&gt; h=\r\nandling &quot;change instructions&quot; (e.g. /my-customers/1;patch or\n&gt; /my-customer=\r\ns/1/patch/, or /patches/my-customer/1, etc.).\n&gt; \n&gt; Now, with this new metho=\r\nd, I don&#39;t need to mint a new URI to handle\n&gt; &quot;change instructions.&quot; I only=\r\n need to tell clients that a new method\n&gt; (PATCH) is valid for an existing =\r\nresource (e.g. /my-customers/1) and\n&gt; that any execution of PATCH against a=\r\n resource needs to use the proper\n&gt; media-type (e.g. application/vnd.amunds=\r\nen.patch, etc.).\n&gt; \n&gt; To me this is a major improvement in both the visibil=\r\nity and accuracy\n&gt; of my HTTP interactions. No more overloading POST using =\r\na special\n&gt; &quot;patch URI.&quot; My documentation can be clearer and my client can =\r\nlearn\n&gt; the details of a target media type and apply that to multiple\n&gt; res=\r\nources safely.\n&gt; \n&gt; That&#39;s my viewpoint, anyway.\n&gt; \n&gt; [1] http://tools.ietf=\r\n.org/html/rfc5789\n&gt; \n&gt; mca\n&gt; http://amundsen.com/blog/\n&gt; http://twitter.com=\r\n@mamund\n&gt; http://mamund.com/foaf.rdf#me\n&gt; \n&gt; \n&gt; #RESTFest 2010\n&gt; http://res=\r\nt-fest.googlecode.com\n&gt; \n&gt; \n&gt; \n&gt; \n&gt; On Wed, Nov 10, 2010 at 11:32, William =\r\nMartinez Pomares\n&gt; &lt;wmartinez@...&gt; wrote:\n&gt; &gt; Hi Mike!\n&gt; &gt; Sorry, I&#39;m posti=\r\nng in this discussion although I prefer to avoid HTTP related ones. Not my =\r\nlevel of detail.\n&gt; &gt;\n&gt; &gt; Still, this is interesting.\n&gt; &gt; I dislike a little=\r\n bit PATCH. There are several reasons, these are just a couple:\n&gt; &gt;\n&gt; &gt; 1. =\r\nOne of important part of PATCH is the payload, as it defines the changes. A=\r\nnd that payload is not standardized.\n&gt; &gt;\n&gt; &gt; 2. As Payload is important, it=\r\n makes the resource update much more representational oriented. That is, li=\r\nke patching a source code file. Also, it makes the resource expose its attr=\r\nibutes, avoiding data hiding\n&gt; &gt;\n&gt; &gt; 3. Although it may be generic, adjusti=\r\nng the alpha channel of an image may not be as intuitive. In this case, the=\r\n PATCH Payload should request the change of the alpha channel. Metadata?\n&gt; =\r\n&gt;\n&gt; &gt; 4. Not all resources are just a bunch of fields, some can be more com=\r\nplex and the update should be done by the server based on certain condition=\r\ns or requests.\n&gt; &gt;\n&gt; &gt; So, PATCH may work, but I feel still it is not the f=\r\null solution. At the end, as you say, we may need to go back and use POST.\n=\r\n&gt; &gt; What do you think?\n&gt; &gt;\n&gt; &gt; William Martinez Pomares.\n&gt; &gt; --- In rest-di=\r\nscuss@yahoogroups.com, mike amundsen &lt;mamund@&gt; wrote:\n&gt; &gt;&gt;\n&gt; &gt;&gt; Partial upd=\r\nates should be done using PATCH [1]\n&gt; &gt;&gt; Complete updates should be done us=\r\ning PUT.\n&gt; &gt;&gt; When those methods are not practical, POST can be used instea=\r\nd.\n&gt; &gt;&gt;\n&gt; &gt;&gt; Subbu&#39;s &quot;RESTful Web Services Cookbook&quot; has a very good chapte=\r\nr (&quot;11.\n&gt; &gt;&gt; Miscellaneous Writes&quot;) [2] that includes more than one section=\r\n\n&gt; &gt;&gt; covering strategies for partial updates, too.\n&gt; &gt;&gt;\n&gt; &gt;&gt; [1] http://to=\r\nols.ietf.org/html/rfc5789\n&gt; &gt;&gt; [2] http://bit.ly/bRCwGj\n&gt; &gt;&gt;\n&gt; &gt;&gt; mca\n&gt; &gt;&gt; =\r\nhttp://amundsen.com/blog/\n&gt; &gt;&gt; http://twitter.com@mamund\n&gt; &gt;&gt; http://mamund=\r\n.com/foaf.rdf#me\n&gt; &gt;&gt;\n&gt; &gt;&gt;\n&gt; &gt;&gt; #RESTFest 2010\n&gt; &gt;&gt; http://rest-fest.google=\r\ncode.com\n&gt; &gt;&gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt; ------------------------------------\n&gt; &gt;\n=\r\n&gt; &gt; Yahoo! Groups Links\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt;\n\n\n\n"}}
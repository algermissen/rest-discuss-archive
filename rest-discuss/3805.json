{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":4849001,"authorName":"Alex Jacobson","from":"Alex Jacobson &lt;alex@...&gt;","profile":"shop2it","replyTo":"SENDER","senderId":"HtuWgTqoAr-f0eJMwgcBH-LFozj-UtZmoKNu1uJQia4i0gm_W1SZ0MNgCp7sFQaBIYvjPRFup7t3McqyDAHICPs2","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] MoST - Model State Transfer","postDate":"1059577052","msgId":3805,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDE3OTI1NjU1MjIuMTA1OTU2MjY1MkBsb2NhbGhvc3Q+","inReplyToHeader":"PHV2ZnRrajAwcS5mc2ZAeHNvbC5jb20+","referencesHeader":"PDBFQUE1MDY3ODdEMTJCNEI5OUQzQ0EwODYyMzBBMkI0REE5RkEyQG1haWwtMDEuc3Bva2Vzb2Z0d2FyZS5jbwkgbT4gPDE3MzU5MTgzMzguMTA1OTUwNjAwNUBsb2NhbGhvc3Q+IDx1dmZ0a2owMHEuZnNmQHhzb2wuY29tPg=="},"prevInTopic":3804,"nextInTopic":3806,"prevInTime":3804,"nextInTime":3806,"topicId":3793,"numMessagesInTopic":23,"msgSnippet":"--On Wednesday, July 30, 2003 1:06 PM +1200 Berend de Boer ... My point is that ReST views the returned content as a representation of the refferent of a URL.","rawEmail":"Return-Path: &lt;alex@...&gt;\r\nX-Sender: alex@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 91929 invoked from network); 30 Jul 2003 15:13:48 -0000\r\nReceived: from unknown (66.218.66.217)\n  by m1.grp.scd.yahoo.com with QMQP; 30 Jul 2003 15:13:48 -0000\r\nReceived: from unknown (HELO mailgate.vo.com) (208.45.6.97)\n  by mta2.grp.scd.yahoo.com with SMTP; 30 Jul 2003 15:13:48 -0000\r\nReceived: from [10.255.218.171] (m6a8d36d0.tmodns.net [208.54.141.106])\n\t(using TLSv1 with cipher EDH-RSA-DES-CBC3-SHA (168/168 bits))\n\t(No client certificate requested)\n\tby mailgate.vo.com (Postfix) with ESMTP\n\tid C72BA8807D; Wed, 30 Jul 2003 11:13:45 -0400 (EDT)\r\nDate: Wed, 30 Jul 2003 10:57:32 -0400\r\nTo: Berend de Boer &lt;berend@...&gt;\r\nCc: Justin Sampson &lt;justin.sampson@...&gt;,\n\trest-discuss@yahoogroups.com\r\nSubject: Re: [rest-discuss] MoST - Model State Transfer\r\nMessage-ID: &lt;1792565522.1059562652@localhost&gt;\r\nIn-Reply-To: &lt;uvftkj00q.fsf@...&gt;\r\nReferences: &lt;0EAA506787D12B4B99D3CA086230A2B4DA9FA2@...\t\n m&gt; &lt;1735918338.1059506005@localhost&gt; &lt;uvftkj00q.fsf@...&gt;\r\nX-Mailer: Mulberry/3.0.3 (Win32)\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=us-ascii; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nContent-Disposition: inline\r\nX-eGroups-From: Alex Jacobson &lt;alex@...&gt;\r\nFrom: Alex Jacobson &lt;alex@...&gt;\r\nX-Yahoo-Group-Post: member; u=4849001\r\nX-Yahoo-Profile: shop2it\r\n\r\n--On Wednesday, July 30, 2003 1:06 PM +1200 Berend de Boer \n&lt;berend@...&gt; wrote:\n&gt;&gt;&gt;&gt;&gt;&gt; &quot;Alex&quot; == Alex Jacobson &lt;alex@...&gt; writes:\n&gt;     Alex&gt; REST pretends that we can talk about transferring\n&gt;     Alex&gt; representations without talking about being able to talk\n&gt;     Alex&gt; unambiguously about what is represented.\n&gt;\n&gt; How is this different from Content-Type? If I ask for a GET with\n&gt; Content-Type V-Card isn&#39;t that unambigious? Or GET with Content-Type\n&gt; audio/wav or audio/mp3, isn&#39;t that clear?\n\nMy point is that ReST views the returned content as a representation of the \nrefferent of a URL.  So, in ReST, a V-Card or an MP3 is only a \nrepresentation of a business card or a song not the business-card or song \nitself.  We&#39;ve known since Plato that there is no unmediated access to any \nreal-world thing so this representational view guarantees vagueness.\n\nI am suggesting that we concentrate all the representational vagueness in \nthe construction of the data model and then focus our Internet applications \nonly on manipulating particular data models -- which is much less vague.\n\nIn other words, I am suggesting that clients and servers have a shared data \nmodel (content-type) and not just a shared referent (URI).\n\n&gt;     Alex&gt; Content-Negotiation Content-negotiation exacerbates the\n&gt;     Alex&gt; problem above.  It is particularly incompatible with\n&gt;     Alex&gt; PUT/POST because the server has no way to tell the client\n&gt;     Alex&gt; what types may be PUT/POST and REST provides no way to\n&gt;     Alex&gt; understand what was meant when a client does so.\n&gt;\n&gt; A GET with Content-Type rest/content-types can solve this perhaps?\n\nI&#39;m not sure what you mean\n\n&gt; A server can always accepts content types it understands and issue a\n&gt; 4xx when it doesn&#39;t of course.\n\nOn some level, my point is that machines don&#39;t understand content-types \nPERIOD; they only manipulate them according to some set of predefined \nrules.  My issue with ReST is that it provides no rules for manipulating \nthem other than the application specific rules divined by the server \noperator and hidden from the world.\n\nIf the data model of the server is hidden, then the effect of a PUT is \ncompletely unpredictable.  If a client GETs foo.gif and then PUTs bar.gif, \nexactly what should be the expected behavior?  Should the server delete the \nfoo.gif and replace it with the bar.gif?  If the foo.gif is a picture of a \nperson wearing a blue shirt and bar.gif a person wearing a green shirt, \nshould the server simply update a database entry about the color of a \nshirt?  Without the underlying data model, we have no way to understand the \neffect of any change operation without a lot of application/server specific \nlocal knowledge.\n\nIn contrast, if a MoST client GETs a foo.gif, it knows that foo.gif is the \nshared data model for whatever it represents. If it PUTs bar.gif, the \neffect actually will be simply to replace foo.gif with a new model.\n\nAlternatively, if we are really talking about colors of shirts, then \nperhaps the MoST server would return a\n&lt;shirt&gt;&lt;color&gt;#12aabb&lt;/color&gt;&lt;/shirt&gt; perhaps with some stylesheet that \nconverts &lt;shirt&gt; into a user friendly representation and perhaps with the \nURL of a shirt editor (or perhaps the user has an editor for &lt;shirt&gt;s).\n\nAgain the problem is that just saying that agents transfer Representations \nis not enough of a constraint to have any useful understanding of what is \ngoing on.  Unless the content-type is the thing itself, it really tells you \nvery little.  The only thing you an do with a representation (absent a data \nmodel) is receive it.\n\n&gt; I&#39;m afraid that meta modeling doesn&#39;t solve any problem. The next\n&gt; problem is usually the meta meta model of that. And the meta meta meta\n&gt; model of that.\n\nI&#39;m not sure what you are referencing here.  My point is simple that \nclients and servers should share data models and not simply transfer \nrepresentations/views.  Communications between agents centers around \nsynchronizing data models of particular referrents.  Effectively I am \nsaying that each agent should implements Model-View-Controller locally and \nwhen its Model changes state, it should transfer that state change.\n\nIn contrast, ReST has clients transfer Views around.  Since in most \napplication contexts it is very hard to know what changed in the model \nsimply by an arbitrary view, ReST then requires a lot more coordination \nbehavior to understand change in view means from a local (private) model \nperspective.\n\n-Alex-\n\n\n___________________________________________________________________\nS. Alexander Jacobson                   i2x Media\n1-212-787-1914 voice                    1-603-288-1280 fax\n\n\n"}}
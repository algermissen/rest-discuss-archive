{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":537489571,"authorName":"Keith Hassen","from":"Keith Hassen &lt;keith.hassen@...&gt;","profile":"erewh0n","replyTo":"SENDER","senderId":"cN0Z8Xdfl2RwkgwYLJCb8mBNW75BDp7IUpQ-dwINyUlfhfNVutsw23THcQlVt5xPMFfbXPLlbhUQYbMOvlaPb-Pa81cf5SIBWvVxww","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] API versioning","postDate":"1357735720","msgId":19252,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDc3ODY0MzNBLUQwNDUtNDk2My04MDZBLUZBMzI5N0FDRTlFNUBnbWFpbC5jb20+","inReplyToHeader":"PENBTGgteWtKcz1UanZTS09zcEJHRyt4X1dzUHJSWW9HZk9lWnR4Qi13N3hKNTExN3lPQUBtYWlsLmdtYWlsLmNvbT4=","referencesHeader":"PGtjZm1jMCthb2lkQGVHcm91cHMuY29tPiA8MjAxMzAxMDcyMDM3MTkuNWJhM2ZkZDIuZXJpY0BiaXNvbnN5c3RlbXMubmV0PiA8OUQ5NDUyQjAtQ0I1Qi00QkY3LThGMTgtRTEwRjZCNUZBNEI1QGdtYWlsLmNvbT4gPDIwMTMwMTA3MjI1NzEzLjNiMWZmNThjLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4gPDhFRDAyRDhBLTQ0QjAtNEMwNi05MzE1LTI3QzgyMzFERkM4QUBnbWFpbC5jb20+IDxDQUY4OWJDQTJPV09WUkV0Q0RfTzlvSDctejg4MXBtZEVUOHBnWndpWi1rQTg3empSQ1FAbWFpbC5nbWFpbC5jb20+IDxDQUxoLXlrSnM9VGp2U0tPc3BCR0creF9Xc1ByUllvR2ZPZVp0eEItdzd4SjUxMTd5T0FAbWFpbC5nbWFpbC5jb20+"},"prevInTopic":19251,"nextInTopic":0,"prevInTime":19251,"nextInTime":19253,"topicId":19240,"numMessagesInTopic":13,"msgSnippet":"Thanks, the link below is interesting.  I think the rules you listed below are good ones and generally make sense.  Maybe it is *almost* always true that we","rawEmail":"Return-Path: &lt;keith.hassen@...&gt;\r\nX-Sender: keith.hassen@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 68850 invoked from network); 9 Jan 2013 12:48:43 -0000\r\nX-Received: from unknown (98.137.34.46)\n  by m4.grp.sp2.yahoo.com with QMQP; 9 Jan 2013 12:48:43 -0000\r\nX-Received: from unknown (HELO mail-ia0-f172.google.com) (209.85.210.172)\n  by mta3.grp.sp2.yahoo.com with SMTP; 9 Jan 2013 12:48:43 -0000\r\nX-Received: by mail-ia0-f172.google.com with SMTP id u8so787360iag.17\n        for &lt;rest-discuss@yahoogroups.com&gt;; Wed, 09 Jan 2013 04:48:42 -0800 (PST)\r\nX-Received: by 10.50.194.196 with SMTP id hy4mr1379691igc.52.1357735722858;\n        Wed, 09 Jan 2013 04:48:42 -0800 (PST)\r\nReturn-Path: &lt;keith.hassen@...&gt;\r\nX-Received: from [10.99.0.3] ([24.246.52.18])\n        by mx.google.com with ESMTPS id qn10sm1891453igc.15.2013.01.09.04.48.41\n        (version=TLSv1 cipher=ECDHE-RSA-RC4-SHA bits=128/128);\n        Wed, 09 Jan 2013 04:48:42 -0800 (PST)\r\nMime-Version: 1.0 (Apple Message framework v1283)\r\nContent-Type: multipart/alternative; boundary=&quot;Apple-Mail=_4D255542-6066-4DA9-A180-86DD0148E4C5&quot;\r\nIn-Reply-To: &lt;CALh-ykJs=TjvSKOspBGG+x_WsPrRYoGfOeZtxB-w7xJ5117yOA@...&gt;\r\nDate: Wed, 9 Jan 2013 07:48:40 -0500\r\nCc: Alexander Johannesen &lt;alexander.johannesen@...&gt;,\n &quot;Eric J. Bowman&quot; &lt;eric@...&gt;,\n REST-Discuss Discussion Group &lt;rest-discuss@yahoogroups.com&gt;\r\nMessage-Id: &lt;7786433A-D045-4963-806A-FA3297ACE9E5@...&gt;\r\nReferences: &lt;kcfmc0+aoid@...&gt; &lt;20130107203719.5ba3fdd2.eric@...&gt; &lt;9D9452B0-CB5B-4BF7-8F18-E10F6B5FA4B5@...&gt; &lt;20130107225713.3b1ff58c.eric@...&gt; &lt;8ED02D8A-44B0-4C06-9315-27C8231DFC8A@...&gt; &lt;CAF89bCA2OWOVREtCD_O9oH7-z881pmdET8pgZwiZ-kA87zjRCQ@...&gt; &lt;CALh-ykJs=TjvSKOspBGG+x_WsPrRYoGfOeZtxB-w7xJ5117yOA@...&gt;\r\nTo: =?iso-8859-1?Q?J=F8rn_Wildt?= &lt;jw@...&gt;\r\nX-Mailer: Apple Mail (2.1283)\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Keith Hassen &lt;keith.hassen@...&gt;\r\nSubject: Re: [rest-discuss] API versioning\r\nX-Yahoo-Group-Post: member; u=537489571; y=SCRHvvZxX2jjiqwofkv8zGnsOCUnjxxCiujIVYxvC8aihPhIh9dcWUfcfT98H4JDxSEjJdGE7PIsObU\r\nX-Yahoo-Profile: erewh0n\r\n\r\n\r\n--Apple-Mail=_4D255542-6066-4DA9-A180-86DD0148E4C5\r\nContent-Transfer-Encoding: quoted-printable\r\nContent-Type: text/plain;\n\tcharset=iso-8859-1\r\n\r\nThanks, the link below is interesting.  I think the rules you listed below =\r\nare good ones and generally make sense.  Maybe it is *almost* always true t=\r\nhat we can find a way to either a) make the change non-breaking or b) creat=\r\ne a new resource.  In the rare cases where it must be done, then specifying=\r\n a version in the URI might be necessary, but should be limited to very exc=\r\neptional cases that I&#39;m having a hard time devising. :)\n\nK\n\n\nOn 2013-01-09,=\r\n at 1:45 AM, J=F8rn Wildt wrote:\n\n&gt; If you work with generic media types li=\r\nke plain XML, JSON and(X)HTML (and others) then there is absolutely no reas=\r\non to version those through the content-type and content negotiation. I mea=\r\nn, when did the processing rules for XML and JSON last change? Oh, well, th=\r\ne rules for HTML does change - but this is not handled through the media ty=\r\npe, but rather through a versioning mechanism inside the payload (the DOCTY=\r\nPE).\n&gt; \n&gt; &quot;Unfortunately&quot; there is a lot of domain specific media types out=\r\n there - and since domains changes regularly over time, well, you start thi=\r\nnking that versioning must be done through the media type. And this is wher=\r\ne things start to break down. If you avoid domain specific media types (lik=\r\ne vnd.order+xml and so on), then you can avoid versioning through the media=\r\n type.\n&gt; \n&gt; But, of course, your application still evolves over time. Then =\r\nwhat?\n&gt; \n&gt; Try these guidelines (and check also Nottingham&#39;s blog http://ww=\r\nw.mnot.net/blog/2011/10/25/web_api_versioning_smackdown):\n&gt; \n&gt; - Do not exp=\r\nose your internal business objects directly on the wire (for instance by JS=\r\nON serializing them directly). Do wrap your business objects in a (more) st=\r\nable external format, such that you are free to change the underlying busin=\r\ness objects without the public facing format changing too. Keep that transf=\r\normation in sync with your internal changes.\n&gt; \n&gt; - Don&#39;t make breaking cha=\r\nnges to your public format.\n&gt; \n&gt; - Add versioning information inside the pa=\r\nyload.\n&gt; \n&gt; - If you have to introduce breaking changes then create a new r=\r\nesource for the new version.\n&gt; \n&gt; - Put links to never versions of the reso=\r\nurce into the original resource (for instance using the Link header). Never=\r\n clients can look for these links and move on to the new and improved versi=\r\non.\n&gt; \n&gt; - Introduce new links, in addition to the old ones, where other re=\r\nsources are linking to your resource (if possible), using new link relation=\r\n names or similar mechanism. Newer clients will know which of the links to =\r\nfollow - older clients will continue with the link that they have always us=\r\ned.\n&gt; \n&gt; - URLs are not identities for your business data - they are identi=\r\nties for various representations of your business data. I mean, api-v1.exam=\r\nple.com/person/1234 is obviously not the same resource as api-v2.example.co=\r\nm/person/1234 - but it can certainly represent exactly the same piece of bu=\r\nsiness data.\n&gt; \n&gt; (and, yes, this is quite the opposite of what I argued in=\r\n my first post in this thread)\n&gt; \n&gt; /J=F8rn\n&gt; \n&gt; \n\n\r\n--Apple-Mail=_4D255542-6066-4DA9-A180-86DD0148E4C5\r\nContent-Transfer-Encoding: quoted-printable\r\nContent-Type: text/html;\n\tcharset=iso-8859-1\r\n\r\n&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body style=3D&quot;word-wrap: break-word; -webkit-nbsp-mode:=\r\n space; -webkit-line-break: after-white-space; &quot;&gt;Thanks, the link below is =\r\ninteresting. &nbsp;I think the rules you listed below are good ones and gen=\r\nerally make sense. &nbsp;Maybe it is *almost* always true that we can find =\r\na way to either a) make the change non-breaking or b) create a new resource=\r\n. &nbsp;In the rare cases where it must be done, then specifying a version =\r\nin the URI might be necessary, but should be limited to very exceptional ca=\r\nses that I&#39;m having a hard time devising. :)&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;K&lt;/div&gt;&lt;div=\r\n&gt;&lt;br&gt;&lt;div&gt;&lt;br&gt;&lt;div&gt;&lt;div&gt;On 2013-01-09, at 1:45 AM, J=F8rn Wildt wrote:&lt;/div=\r\n&gt;&lt;br class=3D&quot;Apple-interchange-newline&quot;&gt;&lt;blockquote type=3D&quot;cite&quot;&gt;&lt;div dir=\r\n=3D&quot;ltr&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;If you work with generic media types like plain XML=\r\n, JSON and(X)HTML (and others) then there is absolutely no reason to versio=\r\nn those through the content-type and content negotiation. I mean, when did =\r\nthe processing rules for XML and JSON last change? Oh, well, the rules for =\r\nHTML does change - but this is not handled through the media type, but rath=\r\ner through a versioning mechanism inside the payload (the DOCTYPE).&lt;br&gt;\n&lt;br=\r\n&gt;&lt;/div&gt;&quot;Unfortunately&quot; there is a lot of domain specific media types out th=\r\nere - and since domains changes regularly over time, well, you start thinki=\r\nng that versioning must be done through the media type. And this is where t=\r\nhings start to break down. If you avoid domain specific media types (like v=\r\nnd.order+xml and so on), then you can avoid versioning through the media ty=\r\npe.&lt;br&gt;\n&lt;br&gt;&lt;/div&gt;&lt;div&gt;But, of course, your application still evolves over =\r\ntime. Then what?&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Try these guidelines (and che=\r\nck also Nottingham&#39;s blog &lt;a href=3D&quot;http://www.mnot.net/blog/2011/10/25/we=\r\nb_api_versioning_smackdown&quot;&gt;http://www.mnot.net/blog/2011/10/25/web_api_ver=\r\nsioning_smackdown&lt;/a&gt;):&lt;br&gt;\n&lt;br&gt;&lt;/div&gt;&lt;div&gt;- Do not expose your internal bu=\r\nsiness objects directly on the wire (for instance by JSON serializing them =\r\ndirectly). Do wrap your business objects in a (more) stable external format=\r\n, such that you are free to change the underlying business objects without =\r\nthe public facing format changing too. Keep that transformation in sync wit=\r\nh your internal changes.&lt;br&gt;\n&lt;/div&gt;&lt;div&gt;&lt;br&gt;- Don&#39;t make breaking changes t=\r\no your public format.&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;- Add versioning information inside=\r\n the payload.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;- If you have to introduce break=\r\ning changes then create a new resource for the new version.&lt;br&gt;\n&lt;br&gt;&lt;/div&gt;&lt;=\r\ndiv&gt;- Put links to never versions of the resource into the original resourc=\r\ne (for instance using the Link header). Never clients can look for these li=\r\nnks and move on to the new and improved version.&lt;br&gt;&lt;br&gt;&lt;/div&gt;\n&lt;div&gt;- Intro=\r\nduce new links, in addition to the old ones, where other resources are link=\r\ning to your resource (if possible), using new link relation names or simila=\r\nr mechanism. Newer clients will know which of the links to follow - older c=\r\nlients will continue with the link that they have always used.&lt;br&gt;\n&lt;/div&gt;&lt;d=\r\niv&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;- URLs are not identities for your business data - they a=\r\nre identities for various representations of your business data. I mean, &lt;a=\r\n href=3D&quot;http://api-v1.example.com/person/1234&quot;&gt;api-v1.example.com/person/1=\r\n234&lt;/a&gt; is obviously not the same resource as &lt;a href=3D&quot;http://api-v2.exam=\r\nple.com/person/1234&quot;&gt;api-v2.example.com/person/1234&lt;/a&gt; - but it can certai=\r\nnly represent exactly the same piece of business data.&lt;br&gt;\n&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;=\r\n/div&gt;&lt;div&gt;(and, yes, this is quite the opposite of what I argued in my firs=\r\nt post in this thread)&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/J=F8rn&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;=\r\nbr&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;\r\n--Apple-Mail=_4D255542-6066-4DA9-A180-86DD0148E4C5--\r\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":121832671,"authorName":"inthedarkplace","from":"&quot;inthedarkplace&quot; &lt;inthedarkplace@...&gt;","profile":"inthedarkplace","replyTo":"SENDER","senderId":"vePJyiWevUvV9ULvxOnYSlBaWCYF0U3tViuJv7ZNMvi3WSjqVz9S5GItAgXccM_TbiFghjqilRqav0mfYXXPlyv-PKEuII-Pb1UfBVkqwMIH9g","spamInfo":{"isSpam":false,"reason":"0"},"subject":"squaring (was Re:HTTP and safety)","postDate":"1030679674","msgId":2274,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGFrbXE5cSs3NzJiQGVHcm91cHMuY29tPg==","inReplyToHeader":"PDAwMTYwMWMyNGZiYSQ3N2QxNmM0MCQ2NDAxYThjMEB3aW50ZXI+"},"prevInTopic":2271,"nextInTopic":2279,"prevInTime":2273,"nextInTime":2275,"topicId":2255,"numMessagesInTopic":11,"msgSnippet":"See http://mail.python.org/pipermail/xml-sig/2002-February/007160.html: The point is to think of documents. This is a subtle but crucial distinction. Don t","rawEmail":"Return-Path: &lt;inthedarkplace@...&gt;\r\nX-Sender: inthedarkplace@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_1_0_1); 30 Aug 2002 03:54:36 -0000\r\nReceived: (qmail 24140 invoked from network); 30 Aug 2002 03:54:36 -0000\r\nReceived: from unknown (66.218.66.218)\n  by m8.grp.scd.yahoo.com with QMQP; 30 Aug 2002 03:54:36 -0000\r\nReceived: from unknown (HELO n19.grp.scd.yahoo.com) (66.218.66.74)\n  by mta3.grp.scd.yahoo.com with SMTP; 30 Aug 2002 03:54:36 -0000\r\nReceived: from [66.218.67.171] by n19.grp.scd.yahoo.com with NNFMP; 30 Aug 2002 03:54:36 -0000\r\nDate: Fri, 30 Aug 2002 03:54:34 -0000\r\nTo: rest-discuss@yahoogroups.com\r\nSubject: squaring (was Re:HTTP and safety)\r\nMessage-ID: &lt;akmq9q+772b@...&gt;\r\nIn-Reply-To: &lt;001601c24fba$77d16c40$6401a8c0@winter&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Length: 4265\r\nX-Mailer: Yahoo Groups Message Poster\r\nFrom: &quot;inthedarkplace&quot; &lt;inthedarkplace@...&gt;\r\nX-Yahoo-Group-Post: member; u=121832671\r\nX-Yahoo-Profile: inthedarkplace\r\n\r\nSee\nhttp://mail.python.org/pipermail/xml-sig/2002-February/007160.html:\n\nThe point is to think of documents. This is a subtle but crucial \ndistinction. Don&#39;t think of a document processor as a procedure that \ntakes parameters; think of it as a folder into which you insert \ndocuments. Eventually something happens to those documents but the \ntruth is, you don&#39;t really care. \n\nIf you&#39;re asking about the advantages over using the POST/Document \nProcessor approach versus RPC then from experience I can tell you:\n\n1) EXTENSIBILITY & MAINTAINABILITY - I can&#39;t stress this enough. The \nfundamental problem with all RPC-mechanisms is that they are \ninherently not loosely coupled. Think of a method in Java. This \nmethod defines a contract and semantics. If you change this method -- \nby removing or adding a parameter or changing parameters etc -- then \nyou break all clients which depend on that method. Now think of an \nhtml document. It&#39;s a document whose meaning and semantics are fully \nself-contained in the document. A browser, which processes html \ndocuments, isn&#39;t broken when you add elements or even when you remove \nelements. Think about event based processing. \n\nThe fundamental idea is that in a highly distributed system two \nparties should know as little about each other as possible. In \nREST/document/event-based systems, all the parties have to know is \nessentially a URL to which they send documents/events. In an RPC/SOAP \nworld, they have to know a lot more. This is one of the primary \nreasons my group began reworking all webservices to be REST based. I \nsaw the time and effor that went into managing RPC services and \ncoordinating interfaces and decided it was unacceptable.\n\n2) SCALABILITY - See mprescod and fielding for how a document-\ncentric, highly asynchronous approach will always scale better than \nthe basic rpc approach.\n\n3) FLEXIBILITY - I don&#39;t really have time to explain it in full \ndetail, but there are many, many bad things that can happen when you \nuse POST as an RPC-mechanism or use RPC in general. You can end up in \nsituations where a competitor has &#39;locked&#39; you in because he controls \nthe api on his side and if you want access to his info well you get \nthe idea. (This is why I call the WS-* standards one api to rule them \nall). But there are many good things that happen when you think in \nterms of business documents particularly in terms of reuse. It&#39;s been \nmy experience that integerating REST systems is trivial and building \nweb-frontends is even easier. Not many people see it, but there&#39;s a \nhuge difference between exposing business logic -- which consists of \ndocuments like purchase orders -- and exposing application logic -- \nwhich consists of methods and behavior and state and all that good \nstuff.\n\nAs for your transfer funds use case, I&#39;ve designed something pretty \nsimilar. The way I did it, I created a document which described the \ntransaction itself and POSTED that to a transaction processor \nresource. I then repeatedly performed GETs on a transaction monitor \nresource to know what was up. This trick of turning methods into \ndocuments/events works well.\n\n- itdp\n\n--- In rest-discuss@y..., &quot;Niteo&quot; &lt;j.winter@n...&gt; wrote:\n&gt; Terrence,\n&gt; \n&gt; First off, I agree with you.  I should say that I was \n&gt; most definitely *not* trying to offer a new definition \n&gt; of POST; I was basically trying to catalogue the \n&gt; uses of POST that have been brought up in order to try \n&gt; to bring into relief the precise issue that Walden was \n&gt; trying to raise.  Which I think boils down to: if RPC \n&gt; is bad because it&#39;s misusing POST to send, in essence, \n&gt; arbitrary data to some URL, in what way is that different \n&gt; from using it as what you call a Document Processor - if\n&gt; I understand what you mean by that term. :)\n&gt; \n&gt; I tried to spell out what I see as a real and meaningful \n&gt; difference.  \n&gt; \n&gt; I agree with Walden that there are situations that seem\n&gt; very gray. One that I can think of right away is performing\n&gt; atomic updates across multiple resources.  The canonical,\n&gt; &quot;transfer funds between accounts&quot; example seems like a\n&gt; good use case to examine.\n&gt; \n&gt; I would be very interested in hearing other&#39;s thoughts on \n&gt; how to do that in a way that doesn&#39;t smack of RPC.\n&gt; \n&gt; Thanks,\n&gt; \n&gt; - Jeff\n\n\n"}}
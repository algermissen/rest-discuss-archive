{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":435049665,"authorName":"Markus KARG","from":"&quot;Markus KARG&quot; &lt;markus@...&gt;","profile":"headcrashing","replyTo":"SENDER","senderId":"sHa1fStvANqtPkK_5gQd119IbMUqxIcK0lQsMXm11GS3KLkNQFqxgjtldEVwNcfW9Vgby1l5bD67Wg9wDRkLG2685CAXgk2ol-lS6K8","spamInfo":{"isSpam":false,"reason":"12"},"subject":"RE: [rest-discuss] Re: [Jersey] Moved thread to rest-discuss / HATEOAS-via-HTTP: Which HTTP Method to use to follow link?","postDate":"1267214261","msgId":14930,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDAwNWEwMWNhYjcxZCRmNDhjNzIyMCRkZGE1NTY2MCRAZXU+","inReplyToHeader":"PEI5QTYyNEI3LTExRjctNDMzMi04QkY0LUMyNjJCQUMzN0ZCOEBtYWMuY29tPg==","referencesHeader":"PDAxOTIwMWNhYjIzOSQyOGI5ZGRiMCQ3YTJkOTkxMCQla2FyZ0BnbXgubmV0PiA8Rjk1NDYxM0EtOTNCMC00RTE3LUFBOTYtMzZEMTM0MDEyQjAyQG1hYy5jb20+IDwwMWFlMDFjYWIyNTgkZDMyZjAyNjAkNzk4ZDA3MjAkQGV1PiA8NEI4NDFDNzAuOTA5MDEwOEBzaXRlcGVuLmNvbT4gPDAwNTcwMWNhYjRiYSQzMzk3ZTVmMCQ5YWM3YjFkMCRAZXU+IDw0Qjg0MkQwQy42MDYwMjA4QHNpdGVwZW4uY29tPiA8MDA1ODAxY2FiNTdkJDg0NjEwMjUwJDhkMjMwNmYwJEBldT4gPDRCODU3MUVCLjEwNzA1MDhAc2l0ZXBlbi5jb20+IDwwMDBkMDFjYWI1ODIkNGM5MmRlNzAkZTViODliNTAkQGV1PiA8QjlBNjI0QjctMTFGNy00MzMyLThCRjQtQzI2MkJBQzM3RkI4QG1hYy5jb20+"},"prevInTopic":14927,"nextInTopic":14931,"prevInTime":14929,"nextInTime":14931,"topicId":14827,"numMessagesInTopic":27,"msgSnippet":"... I need to disagree here: The WWW is working without anybody having to learn about the semantics of a particular method called upon a particular URI. Why?","rawEmail":"Return-Path: &lt;markus@...&gt;\r\nX-Sender: markus@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 74152 invoked from network); 26 Feb 2010 20:16:07 -0000\r\nX-Received: from unknown (98.137.34.44)\n  by m13.grp.re1.yahoo.com with QMQP; 26 Feb 2010 20:16:07 -0000\r\nX-Received: from unknown (HELO smtprelay04.ispgateway.de) (80.67.31.31)\n  by mta1.grp.sp2.yahoo.com with SMTP; 26 Feb 2010 20:16:07 -0000\r\nX-Received: from [88.66.11.240] (helo=MarkusPC)\n\tby smtprelay04.ispgateway.de with esmtpsa (TLSv1:AES128-SHA:128)\n\t(Exim 4.68)\n\t(envelope-from &lt;markus@...&gt;)\n\tid 1Nl6Jc-00014t-5e; Fri, 26 Feb 2010 20:57:36 +0100\r\nTo: &quot;&#39;Jan Algermissen&#39;&quot; &lt;algermissen1971@...&gt;\r\nCc: &quot;&#39;Kris Zyp&#39;&quot; &lt;kris@...&gt;,\n\t&quot;&#39;REST Discuss&#39;&quot; &lt;rest-discuss@yahoogroups.com&gt;\r\nReferences: &lt;019201cab239$28b9ddb0$7a2d9910$%karg@...&gt; &lt;F954613A-93B0-4E17-AA96-36D134012B02@...&gt; &lt;01ae01cab258$d32f0260$798d0720$@eu&gt; &lt;4B841C70.9090108@...&gt; &lt;005701cab4ba$3397e5f0$9ac7b1d0$@eu&gt; &lt;4B842D0C.6060208@...&gt; &lt;005801cab57d$84610250$8d2306f0$@eu&gt; &lt;4B8571EB.1070508@...&gt; &lt;000d01cab582$4c92de70$e5b89b50$@eu&gt; &lt;B9A624B7-11F7-4332-8BF4-C262BAC37FB8@...&gt;\r\nIn-Reply-To: &lt;B9A624B7-11F7-4332-8BF4-C262BAC37FB8@...&gt;\r\nDate: Fri, 26 Feb 2010 20:57:41 +0100\r\nOrganization: HeadCrash\r\nMessage-ID: &lt;005a01cab71d$f48c7220$dda55660$@eu&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain;\n\tcharset=&quot;US-ASCII&quot;\r\nContent-Transfer-Encoding: 7bit\r\nX-Mailer: Microsoft Office Outlook 12.0\r\nthread-index: Acq19PYoPQ5fzXD0SnyJZbkkDHbhMwBJakwQ\r\nContent-Language: de\r\nX-Df-Sender: markus@...\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Markus KARG&quot; &lt;markus@...&gt;\r\nSubject: RE: [rest-discuss] Re: [Jersey] Moved thread to rest-discuss / HATEOAS-via-HTTP: Which HTTP Method to use to follow link?\r\nX-Yahoo-Group-Post: member; u=435049665; y=WE7mi9N192Z2QCUKsO32jBprQgGR7w33NcQwm6TYWMuS-RjVejl1\r\nX-Yahoo-Profile: headcrashing\r\n\r\n&gt; &gt; I think we must differentiate here between CRUD GUIs (which I\n&gt; dislike) and CRUD APIs: As SQL works so well, I don&#39;t actually see a\n&gt; real need to invent more commands. I mean, what benefit should it\n&gt; actually bringt? If I want my server to send an email, what would be\n&gt; wrong to say that I must do a POST to the &quot;http://.../mail-outbox/&quot;\n&gt; URI, which in turn will make the server send away the received entity\n&gt; as an email, and which ist a RESTful operation\n&gt; \n&gt; Nothing is wrong with that. That is how domain specific operations\n&gt; (&#39;goals&#39; if you want) are achieved: tell a resource *with the\n&gt; appropriate semantics* to process-this (POST). So, if you learned from\n&gt; some hypermedia that http://.../mail-outbox/ has the semantics of\n&gt; sending a mail when you POST something to it then that is how you\n&gt; achieve that domain goal.\n&gt; \n&gt; The need for the hypermedia is there because that is how the client\n&gt; learns ar runtime that http://.../mail-outbox/ has these semantics.\n&gt; \n\nI need to disagree here: The WWW is working without anybody having to learn\nabout the semantics of a particular method called upon a particular URI.\nWhy? Because it is defined by http iteself! I think it is just a wrong idea\nto impose any other semantics than those defined by http.\n\nExample:\n\nA POST on an URI implies that a new resource is created (just like an INSERT\ndefines that in SQL).\n\nThe fact that the created object actually is an email but not a row in a\ndatabase or a file on disk plays no role. The semantics are the same. So\nthere actually is nothing to learn. It is just clear that if you want to\nsend an email, that it obviously must be POST, since a PUT would imply an\nupdate of an existing object (just like UPDATE defines that in SQL) - but\nyou cannot update an email, as it certainly is already sent!\n\nJust keep things simple and drill down to the bottom, and you&#39;ll see that\nthere is no need for &quot;learning&quot; about semantics.\n\nMore complex example:\n\nYou like to instruct your car to drive either left or right etc.: You know\nyour car reacts if you send &quot;application/instruction+xml&quot; as that might be\nthe mime found on Wikipedia for car steering systems (containing primitives\nlike &quot;left turn&quot;, &quot;right turn&quot;, etc. or complex instructions like &quot;drive to\nlos angeles&quot;) to the URI &quot;http://mycar/steering/&quot; (as this might be printed\non your car&#39;s key). What would PUT / POST / DELETE / GET do? Is there a need\nto defined the actual semantics (I suppose: No). While driving a car\nactually is such complex that there still (sigh!) is no automatic driving\ncar to buy even in 2010, the answer to this question is rather simple:\n\nPOST (&quot;INSERT&quot;): Uploads a new instruction, so obviously the car will finish\nthe existing instructions and after that follow the new one. It doesn&#39;t\nmatter that the result might not be cached, as it will as you will GET it\nlater using the new instruction&#39;s server-generated URI returned by POST. The\nuploaded instruction is kept in some form of a queue, as you didn&#39;t say PUT\nto replace it. It&#39;s just obvious, just as a human driver also would\nunderstand a sequence of instructions as a queue.\n\nDELETE (on sub-resource) (&quot;DELETE&quot;): Deletes the specified instruction, i.\ne. will stop executing it at once if already running, otherwise just drops\nit from the queue of queued instructions.\n\nGET (on root) (&quot;SELECT&quot;): Returns a list of all uploaded instructions (&quot;What\nwill the car do in sequence?&quot;)\n\nGET (on sub-resource) (&quot;SELECT&quot;): Returns the specified instruction,\npossibly to learn about it&#39;s execution status (&quot;Did the car already follow\nthis instruction, or is it still in the queue?&quot;)\n\nPUT (on sub-resource) (&quot;UPDATE&quot;): Overwrites the specified instruction by\nthis new one, i. e. will stop executing it and instead execute the new one\nwhen already running (otherwise just replaces it in the queue). Just as a\nhuman driver would understand if you say: &quot;I said turn left next, but I\nactually meant turn right!&quot;.\n\nEven in this complex example, the semantics of PUT / POST / DELETE / GET is\nreally obvious and follows exacty the WWW semantics. No need to define\nsemantics. Just expect anything on earth to be a document that can be\ncreated, read, updated, deleted. Nobody says that CRUD must deal with\ndatabases or single rows in a table. The CRUD&#39;s &quot;C&quot; or &quot;U&quot; can be\nimplemented as highly complex algorithms, as the car example shows.\n\nSo I just wait for a business use case (not a synthetic example) that will\nnot be that simple in the end. ;-)\n\n\n&gt; Note: if the general semantics of the domain operation map to PUT or\n&gt; DELETE or PATCH these specific methods should be used because you get\n&gt; more visibility compared to POST (which has visibility zero). For\n&gt; example, a PUT on /orders/2 allows caches to flush what they have for\n&gt; /orders/2 and store the response to the PUT. If you POST /orders/2 the\n&gt; caches just flush - and they only do this not because they know what is\n&gt; going on but because that is the (necessary) default behavior for POST.\n\nIn this particular example, actually I do not see any problem in the fact\nthat a cache is flushing as the target was to create an email: There is no\nresult to flush actually. ;-) But I understand what you mean actually.\n\n\n"}}
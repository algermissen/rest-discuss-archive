{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":4849001,"authorName":"Alex Jacobson","from":"Alex Jacobson &lt;alex@...&gt;","profile":"shop2it","replyTo":"SENDER","senderId":"Cs0YpvdnpC0tZ1q3B9EjJnfI3V5T45qx0eoPfxrg16sbvbNHcIajwckgLrAu35NrOnBERomOEoJgIUPEO6EktTxk","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Jot, RNA and ReST vs MoST","postDate":"1060377344","msgId":3881,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDI2Nzc4NTc3NS4xMDYwMzYyOTQ0QGxvY2FsaG9zdD4="},"prevInTopic":3879,"nextInTopic":3882,"prevInTime":3880,"nextInTime":3882,"topicId":3846,"numMessagesInTopic":32,"msgSnippet":"In your dissertation, you say:  REST components communicate by transferring a representation of a resource in a format matching one of an evolving set of","rawEmail":"Return-Path: &lt;alex@...&gt;\r\nX-Sender: alex@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 26208 invoked from network); 8 Aug 2003 21:16:03 -0000\r\nReceived: from unknown (66.218.66.216)\n  by m11.grp.scd.yahoo.com with QMQP; 8 Aug 2003 21:16:03 -0000\r\nReceived: from unknown (HELO mailgate.vo.com) (208.45.6.97)\n  by mta1.grp.scd.yahoo.com with SMTP; 8 Aug 2003 21:16:03 -0000\r\nReceived: from [192.168.123.103] (m298d36d0.tmodns.net [208.54.141.41])\n\t(using TLSv1 with cipher EDH-RSA-DES-CBC3-SHA (168/168 bits))\n\t(No client certificate requested)\n\tby mailgate.vo.com (Postfix) with ESMTP\n\tid 9669889E43; Fri,  8 Aug 2003 17:16:01 -0400 (EDT)\r\nDate: Fri, 08 Aug 2003 17:15:44 -0400\r\nTo: &quot;Roy T. Fielding&quot; &lt;fielding@...&gt;\r\nCc: rest-discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nSubject: Re: [rest-discuss] Jot, RNA and ReST vs MoST\r\nMessage-ID: &lt;267785775.1060362944@localhost&gt;\r\nX-Mailer: Mulberry/3.0.3 (Win32)\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=us-ascii; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nContent-Disposition: inline\r\nX-eGroups-From: Alex Jacobson &lt;alex@...&gt;\r\nFrom: Alex Jacobson &lt;alex@...&gt;\r\nX-Yahoo-Group-Post: member; u=4849001\r\nX-Yahoo-Profile: shop2it\r\n\r\nIn your dissertation, you say:\n&quot;&quot;&quot;\nREST components communicate by transferring a representation of a resource \nin a format matching one of an evolving set of standard data types, \nselected dynamically based on the capabilities or desires of the recipient \nand the nature of the resource. Whether the representation is in the same \nformat as the raw source, or is derived from the source, remains hidden \nbehind the interface.\n[...]\nEach origin server provides a generic interface to its services as a \nresource hierarchy. The resource implementation details are hidden behind \nthe interface.\n&quot;&quot;&quot;\n\nMoST says that the semantics of this generic interface should apply to the \nexposed representation rather than the &quot;hidden&quot; one.  Because, if HTTP \nmethods apply only to the exposed representation of a resource, then their \nsemantics are constrained entirely by the HTTP protocol and the \ncontent-type of the subject resource and HTTP thereby becomes a truly \ngeneric interface (at least on a per-content-type basis).\n\nHowever, if HTTP methods are intended to apply to the &quot;hidden&quot; \nrepresentation then, aside from the fact that the &quot;hidden&quot; representation \nwould not be truly hidden, the semantics of HTTP methods would need to \ninclude the mapping between hidden and external representations.  If this \nmapping varies from resource to resource then the semantics of HTTP methods \ncease to be generic as they depend on the behavior of each resource \nserver&#39;s mapping functions.\n\nAlthough, based on your comments quoted above, I believe MoST follows \nlogically and necessarily from ReST, many of the people on this list appear \nto disagree.  They believe that HTTP methods should be interpreted as \napplying to the internal representations rather than the external ones, \nforcing me so articulate this issue as &quot;ReST vs MoST&quot; rather than &quot;ReST \nimplies MoST.&quot;\n\n&gt;&gt; * Without an *explicit* model of exactly how the server maps the &gt;&gt; \nstate of a resource into a response to a GET request, a client &gt;&gt; can have \nABSOLUTELY NO IDEA what the content of that response\n&gt;&gt; means; it is simply has bits that can mean anything at all.\n&gt;\n&gt; What does &quot;mean&quot; mean in this context?\n\nIf I GET a number and that number is intended to *represent* another \nnumber, how do I know what functions were applied to the represented number \nto produce the representing number.  Was it only the identity function? Was \nln() applied?  Was round() or floor() applied?  If I don&#39;t know the mapping \nfunction between the internal and external representations, exactly what do \nI know about a represented resource simply from GETting a  representation \nfrom its server?\n\n&gt;&gt; * Without an *explicit* model of exactly how the server uses\n&gt;&gt; PUT/POST-ed content to change the state of a resource, a client\n&gt;&gt; can have ABSOLUTELY NO IDEA what the effect of a PUT or POST\n&gt;&gt; actually will be.\n&gt;\n&gt; That just says that REST doesn&#39;t mandate one single model.  Nothing\n&gt; prevents the server from establishing a model and telling the client\n&gt; what it is.  That is how hypertext works: the engine of application\n&gt; state change.\n\nExactly how does hypertext tell me the relationship between a resource and \nits representation?\n\nFollowing the above example, if I PUT a number to the server, how does \nhypertext tell me what transformations the server applies to that number to \nchange the actual state of the resource?\n\nNote absent this hypothetical hypertext engine, what you are really saying \nis that ReST allows every server to choose its own semantics for GET, PUT, \nPOST and that all the advantages ReST claims from delivering a generic \ninterface would be bogus.\n\n\n&gt;&gt; Roy thinks these explicit models should be entirely arbitrary\n&gt;&gt; and specified at the whim of the server operator on a per-URI\n&gt;&gt; basis.  I think these models should be standardized in some\n&gt;&gt; manner and be URI independent.\n&gt;\n&gt; They aren&#39;t entirely arbitrary; they are merely chosen by the server.\n\nThey are arbitrarily chosen by the server operator because the server \noperator can choose whichever internal representation suits his/her fancy.\n\n&gt; In some cases they will be selected from a standard (such as webdav).\n&gt; In other cases they will be defined by an interface language (like WSDL).\n\nYou used to think differently.  In your dissertation you say:\n\n&quot;&quot;&quot;\nThe semantics are thus not defined by the network interface (IIOP), but by \nthe object&#39;s IDL spec. Whether this is a good thing or not depends on the \napplication -- for distributed objects it is a necessity, for the Web it \nisn&#39;t.\n&quot;&quot;&quot;\n\nNow you tell us that we need these IDLs (now taking the form of WSDL). \nWhat changed?\n\nYou used to want &quot;generic interface with standard semantics that can be \ninterpreted by intermediaries almost as well as by the machines that \noriginate services.&quot;\n\nYou now appear to have abandoned that project in favor of per-service \nsemantics.  What happened?\n\n&gt;&gt; Allowing clients to interact with agents of this power and\n&gt;&gt; complexity through HTTP then requires that service operators be\n&gt;&gt; permitted to overload HTTP methods to have essentially arbitrary\n&gt;&gt; meanings.\n&gt;\n&gt; That doesn&#39;t follow at all.  Service operators control the implementation\n&gt; of HTTP methods.  Methods get overloaded because service operators do want\n&gt; additional semantics, but normal people don&#39;t know how to extend them and\n&gt; implementers can&#39;t read protocol specs.  It is an artifact of the social\n&gt; process surrounding standardized protocols.  You can&#39;t fix it by\n&gt; forbidding the extension of methods.\n\nIn another thread on this topic, Yannick wants to create an &quot;inbox&quot; \nresource that is represented by plaintext lines of &quot;subject : uri&quot;.  He \nsays that this format actually represents a container of MIME messages, \nthat one can add a message to this container by POSTing message/rfc822, and \nthat a GET of a URI in the inbox representation should return a \nmessage/rfc822.\n\nIn other words, Yannick arbitrarily overloads GET to return his new index \nformat as a representation of a &quot;hidden&quot; container rather than e.g. a \nmultipart/digest containing all the messages (no downloading of mail \narchives allowed!).  He arbitrarily overloads POST to take a message/rfc822 \nand add it to this imaginary container (in what order?),  rather than e.g. \ntaking text/xml+message and converting and rather than taking the POST \ncontent as a message body and constructing message headers from the HTTP \nheaders.\n\nI&#39;m pretty sure that Yannick is doing nothing that contravenes any spec. \nBut I am also pretty sure that there is a problem if all of these methods \ncan mean so many different things for such a tiny application.  It means \nthat we need documentation of how to use HTTP for each and every actual and \nhypothetical URI on the Internet.  It means we lose the whole notion of \nsimple interoperability.\n\nPerhaps we could use WSDL, but why not simply follow the rule that HTTP \nsemantics operate on external representations.  Then Yannick&#39;s index format \nspecifies everything about you need to know and we don&#39;t need him to tell \nus how to use HTTP to operate on his resources.  (See the other thread for \ndetails).\n\n-Alex-\n\n___________________________________________________________________\nS. Alexander Jacobson                   i2x Media\n1-212-787-1914 voice                    1-603-288-1280 fax\n\n\n&gt;&gt; But resources don&#39;t really need to be so abstract and the meanings of\n&gt;&gt; HTTP\n&gt;&gt; methods don&#39;t need to be so loose.  Programs don&#39;t actually manipulate\n&gt;&gt; &quot;concepts&quot; or &quot;non-virtual objects;&quot; they just manipulate bits.\n&gt;\n&gt; Right.  It&#39;s people that manipulate concepts and non-virtual objects.\n&gt;\n&gt;&gt;   It would\n&gt;&gt; be more realistic to say that an HTTP resource is simply a set of bits\n&gt;&gt; whose syntactic structure is enforced by an HTTP server and whose\n&gt;&gt; meaning\n&gt;&gt; is determined entirely by agents which interact with this server.\n&gt;\n&gt; No it wouldn&#39;t, since such a definition ignores the ability of people\n&gt; to anticipate changes that have not yet occurred.  Time is essential\n&gt; to the meaning of a hypertext link, and thus the definition of resource.\n&gt; HTTP servers store representations, not resources.\n\n\n\n\n&gt;&gt;   To say\n&gt;&gt; otherwise is to say that there is a meaningful difference in effect\n&gt;&gt; between\n&gt;&gt; having an agent poll a resource and act when it changes and having a\n&gt;&gt; server\n&gt;&gt; notify an agent to act whenever a resource is changed or to say that\n&gt;&gt; there\n&gt;&gt; is a meaningful difference between such an agent residing on the HTTP\n&gt;&gt; server itself and such an agent residing on another machine across the\n&gt;&gt; Internet and interacting via HTTP.\n&gt;\n&gt; Or simply that resource isn&#39;t what you think it means.\n&gt;\n&gt;&gt; Viewed this way, it makes no sense to talk about some single *special*\n&gt;&gt; hidden representation to which a single special HTTP server agent\n&gt;&gt; mediates\n&gt;&gt; access.  Instead we should recognize that agents on the server and\n&gt;&gt; across\n&gt;&gt; the Internet can use any data structures they want for their\n&gt;&gt; activities but\n&gt;&gt; that their doing so is really beside the point.  The function of an\n&gt;&gt; HTTP\n&gt;&gt; server as such is simply to provide a shared blackboard for\n&gt;&gt; communication\n&gt;&gt; between these agents.  What these agents really need is a shared\n&gt;&gt; *explicit\n&gt;&gt; model* for determining what is on this blackboard and for how it may be\n&gt;&gt; changed.\n&gt;\n&gt; The blackboard model is another architectural style with a lot of\n&gt; interesting work associated with it.  Tuple-spaces use that.  The\n&gt; problem with blackboards isn&#39;t just a lack of a data model;\n&gt; they also have centralized identification and lack metadata.\n&gt;\n&gt; ....Roy\n&gt;\n\n\n\n\n\n\n\n"}}
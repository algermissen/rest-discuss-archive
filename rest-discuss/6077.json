{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":263982739,"authorName":"mherrick66@mac.com","from":"mherrick66@...","profile":"mherrick66","replyTo":"SENDER","senderId":"e7C9yr8Bpq-MDUQxwtcDFffupkW_di-1n75TxUMbAOCVm5AMDkYFQpmwnVNgr7SECN_2A2CCWEWV","spamInfo":{"isSpam":false,"reason":"12"},"subject":"RE: [rest-discuss] REST & Internal Integration","postDate":"1145582520","msgId":6077,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDI3MTUyNjguMTE0NTU4MjUyMDMzOS5KYXZhTWFpbC5taGVycmljazY2QG1hYy5jb20+","inReplyToHeader":"PEJBWTEwMS1EQVYxMkJGMzREN0E4REE0QTIyMEMxRDFBRDhDNTBAcGh4LmdibD4=","referencesHeader":"PEJBWTEwMS1EQVYxMkJGMzREN0E4REE0QTIyMEMxRDFBRDhDNTBAcGh4LmdibD4="},"prevInTopic":6024,"nextInTopic":6079,"prevInTime":6076,"nextInTime":6078,"topicId":5992,"numMessagesInTopic":12,"msgSnippet":"I appreciate your response Mike. Yes, many of the integration types I mentioned are done using JMS today. I responded to some of your comments below. Thanks","rawEmail":"Return-Path: &lt;mherrick66@...&gt;\r\nX-Sender: mherrick66@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 72498 invoked from network); 21 Apr 2006 01:22:06 -0000\r\nReceived: from unknown (66.218.67.36)\n  by m32.grp.scd.yahoo.com with QMQP; 21 Apr 2006 01:22:06 -0000\r\nReceived: from unknown (HELO smtpout.mac.com) (17.250.248.47)\n  by mta10.grp.scd.yahoo.com with SMTP; 21 Apr 2006 01:22:06 -0000\r\nReceived: from mac.com (webmail08-en1 [10.13.11.150])\n\tby smtpout.mac.com (Xserve/8.12.11/smtpout09/MantshX 4.0) with ESMTP id k3L1M1pv022980;\n\tThu, 20 Apr 2006 18:22:01 -0700 (PDT)\r\nReceived: from webmail08 (localhost [127.0.0.1])\n\tby mac.com (Xserve/panther-woa/MantshX 4.0) with ESMTP id k3L1M0nS023232;\n\tThu, 20 Apr 2006 18:22:00 -0700 (PDT)\r\nMessage-ID: &lt;2715268.1145582520339.JavaMail.mherrick66@...&gt;\r\nDate: Thu, 20 Apr 2006 18:22:00 -0700\r\nTo: Mike Dierken &lt;mdierken@...&gt;\r\nCc: mherrick66@..., rest-discuss@yahoogroups.com\r\nin-reply-to: &lt;BAY101-DAV12BF34D7A8DA4A220C1D1AD8C50@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: multipart/mixed; \n\tboundary=&quot;----=_Part_206_4613466.1145582520296&quot;\r\nreferences: &lt;BAY101-DAV12BF34D7A8DA4A220C1D1AD8C50@...&gt;\r\nX-eGroups-Msg-Info: 1:12:0:0\r\nFrom: mherrick66@...\r\nSubject: RE: [rest-discuss] REST & Internal Integration\r\nX-Yahoo-Group-Post: member; u=263982739; y=4FBAAUffjKxEsJjyn2q5hgZ4_j4TkVI5Aq3f4DnNCbk3mIPqRg\r\nX-Yahoo-Profile: mherrick66\r\n\r\n\r\n------=_Part_206_4613466.1145582520296\r\nContent-Type: text/plain; charset=&quot;ISO-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nI appreciate your response Mike. Yes, many of the integration types I menti=\r\noned are done using JMS today. I responded to some of your comments below. =\r\nThanks again.\n\nMike\n-------------\n\nI think all of those could be designed t=\r\no have uniform interfaces and resource identifiers and exchange representat=\r\nions of state. You could build it yourself, and the limits of your integrat=\r\nion would be as far as you care to push them. Or you could use existing tec=\r\nhnology - possibly placing extra constraints to achieve the uniform interfa=\r\nce, resource identifiers, etc. - and maybe do it cheaper with broader accep=\r\ntance. The existing technologies could be HTTP (for most of those), or some=\r\nthing like JMS or a vendor specific message publishing/queueing system.\n \n =\r\n&gt; For example looking up existing customer information. It definitely would=\r\nn&#39;t be my first choice, however, for something transactional like creating =\r\nan order. \n&gt; Not saying I&#39;d never do it, just wouldn&#39;t be my first choice.\n=\r\nUsing HTTP for requests that must be transactional doesn&#39;t seem to be a pro=\r\nblem in my view. I&#39;m pretty sure there are several online retailers that us=\r\ne HTTP to create and manage orders. It&#39;s even theoretically possible they u=\r\nse HTTP within their firewall as well - but you can never know what&#39;s going=\r\n on in there...\nWhat is it about HTTP based request/response doesn&#39;t fit wi=\r\nth &#39;transactional&#39; from your point of view?\n#Nothing really. I think it is =\r\nfine. I?m just used to using JMS for this sort of thing. But it doesn?t #re=\r\nally buy me much other then perhaps consistent security. I can have the ser=\r\nvice authenticate #to JMS and put an ACL on the JMS destinations that says =\r\nthe service can send and or receive #from them them. Of course I can do the=\r\n same with REST ? that is what makes it better then #SOAP/WS-*. When I say =\r\n?consistent?, I mean it is administered in the same place.\n \n&gt; My problem w=\r\nith using Web Style at all for heavy integration is the coupling and comple=\r\nxity that starts to add up \n&gt; when you have a lot of services all doing Req=\r\nuest/Reply. Each client has to handle errors and retry logic.\nWhen you have=\r\n a network, each client has to handle errors and retry logic. Really. The n=\r\nifty part about REST is that with a uniform interface and a message oriente=\r\nd protocol, once you have it figure out, that software is re-usable across =\r\ndifferent services - whether it&#39;s creating an order, updating inventory, ch=\r\nanging prices or getting a list of things in a shopping cart.\n\nYeah, you ar=\r\ne correct on the network ? that argument sold me on REST vs. WS-*. Here is =\r\nwhere I am coming from ? I spend most of my time working on a system that h=\r\nas approximately 50 services. The services are pretty stupid, all they know=\r\n is they get an event XML input. They typically respond with an XML event. =\r\nThey listen on a set of JMS Topics or a Topic pattern (e.g., COMPANYNAME.LI=\r\nNEOFBUSINESS.NOUN.*). They also typically respond to set of Topics. What I =\r\nlike about JMS in the system is the guaranteed delivery & durable subscript=\r\nions. The service impls don?t care about the network because they know that=\r\n JMS is there. When they send a message it is persisted before the thread r=\r\neturns. It is nice not to have to do this by hand (i.e., ferret it away in =\r\na database in the receiving service before return from the PUT/POST). Also,=\r\n durable subscriptions are great ? if a service goes down or its threads ha=\r\nng, the events it is interested in are saved to the durable subscription. M=\r\ny point is that for me (at least with my current point of view) with this m=\r\nany services, doing this w/o something like JMS would be hard. I would real=\r\nly like to see an HTTP based pub/sub like this. I don?t know enough about R=\r\nEST to know if it would be evil to do. I babbled about that a bit more here=\r\n: http://fuzzypanic.blogspot.com/2006/03/httppox-xml-based-eda-pub-sub.html=\r\n \nLet me know if you know of anything.\n \n \n&gt;  Once you get to anything asyn=\r\nc, however, Web Style quickly falls down for me. Lets start with &quot;Async Req=\r\nuest/Reply&quot;. \n&gt; [...] \n&gt; If you are writing one service, it is no big deal =\r\n- its when there are more then a few where you get a cumulative amount of c=\r\nomplexity that \n&gt; starts to get your attention.\nComplexity doesn&#39;t accumula=\r\nte when you have a uniform interface. Any asynchronous system has more comp=\r\nlex interactions than synchronous, but if the benefits outweigh the costs t=\r\nhen it&#39;s a fine choice. I don&#39;t see how an asynchronous approach where the =\r\nreceiver returns a token to the sender is a poor approach or falls down - i=\r\nt&#39;s fairly common in many messaging systems, not just Web style systems. Us=\r\ning a Web Style means to create a common way to do asynchronous interaction=\r\ns, likely using hyperlinks (that&#39;s the &quot;get an id back&quot; part) or registerin=\r\ng a callback (again, a form of hyperlinking). The Atom publishing protocol =\r\nis doing just this - defining how document exchange can become asynchronous=\r\n when building on top of synchronous request/reply messages.\n\nSee I don?t a=\r\ngree with you on sync vs. async ? I still see complexity mounting when you =\r\nhave a lot of sync services. I?m ok with the callback - handing the service=\r\n you post the request to a URL to post back to you with the results. I don?=\r\nt like the post to service, get an id, and then post back to the same servi=\r\nce at an interval to get the response approach. We have a feature that was =\r\nimplemented like this and it is a pain. The polling thread wakes up every h=\r\nour to check for results. It has a fair amount of complexity and wastes a l=\r\not of CPU (not that I?m really counting). But I?m cool with the callback ap=\r\nproach so it?s a non issue next time.\n \n&gt; For &quot;Async 1:1&quot;, you can do that =\r\nwith Web Style like Request/Reply. You do have to contend with error cases,=\r\n however. \n&gt; And &quot;out of the box&quot; you don&#39;t get guaranteed delivery. You ca=\r\nn&#39;t send the message persistently so that you know that the send being ack&#39;=\r\nd means something.\nMost messaging systems I&#39;ve worked with that provide rel=\r\niable or guaranteed delivery have APIs that look suspiciously like &quot;post&quot;, =\r\nand the API is a blocking call - quick, but still blocking. \n \n&gt; How would =\r\nyou do &quot;Async 1:M&quot;? This is classic pub/sub. A client sends 1 message and N=\r\n subscribers listen to the message. \n&gt; The client has no idea who is listen=\r\ning. I don&#39;t know of any way to do this w/o writing a ton of code.\nI have a=\r\n feeling you are talking about how to do this with HTTP, rather than how to=\r\n make pubsub more RESTful.\nYou could just acquire a decent messaging middle=\r\nware product and put an HTTP server in front in order to post messages to t=\r\nhe topics, then define the HTTP requests for consumers to retrieve messages=\r\n - the trick is to define how the consuming applications maintain state as =\r\nto which messages have been processed.\nHere is a sample app I wrote a while=\r\n back that does what you are talking about : http://www.searchalert.net:808=\r\n0/dierken/events/chat.html?topic=3Drest-discuss\nThe underlying system holds=\r\n messages here: http://www.searchalert.net:8080/xmlrouter/msgs/rest-discuss=\r\n\nThis is a working example of using HTTP to send 1 message and having N sub=\r\nscribers listen to the message. The publisher does not know what applicatio=\r\nns will consume the messages. In addition, this particular example also sho=\r\nws two approaches to notification - polling for messages via following the =\r\n&#39;next&#39; link, and persistent connections for low latency delivery to subscri=\r\nbers (when the &#39;next&#39; link falls off the end of the chain, the server holds=\r\n onto the request and doesn&#39;t send a response until there are messages read=\r\ny). There is a client implemented via javascript within the HTML page, but =\r\nany programming language that can talk HTTP and parse XML will do. This was=\r\n written in just a few hours, but gives you the idea of what is possible.\n =\r\n\n&gt;  How about &quot;Async 1:M Request/Reply&quot;? This is when you send one message =\r\nand get N responses. This is pub/sub request reply.\nAre you sure you didn&#39;t=\r\n mean N+1 responses?\n \n&gt;  Last one on my list is &quot;Async M:1&quot;. This is 1 ser=\r\nvice listening to N destinations / Topics for events.\nThis is the flip side=\r\n of 1-N pubsub. The service either is pro-actively notified (via a post in =\r\nsome language or protocol) or polls. A middle-ware service would allow this=\r\n service to register &#39;routes&#39; between topics so that the service only need =\r\nto subscribe to one &#39;journal&#39; topic. There have been a few companies and op=\r\nen-source projects in the past that did this with pure HTTP. \n\n\n\n \nOn Tuesd=\r\nay, April 18, 2006, at 10:19PM, Mike Dierken &lt;mdierken@...&gt; wrote:\n=\r\n\n&gt;\n&gt;&lt;&lt;Original Attached&gt;&gt;\n\r\n------=_Part_206_4613466.1145582520296\r\nContent-Type: text/html;\n\tcharset=&quot;US-ASCII&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot;&gt;\n&lt;HTML&gt;&lt;HEAD&gt;=\r\n\n&lt;META http-equiv=3DContent-Type content=3D&quot;text/html; charset=3Dus-ascii&quot;&gt;=\r\n\n&lt;META content=3D&quot;MSHTML 6.00.2900.2873&quot; name=3DGENERATOR&gt;&lt;/HEAD&gt;\n&lt;BODY \nst=\r\nyle=3D&quot;WORD-WRAP: break-word; khtml-nbsp-mode: space; khtml-line-break: aft=\r\ner-white-space&quot;&gt;\n&lt;DIV dir=3Dltr align=3Dleft&gt;&lt;SPAN class=3D925403604-190420=\r\n06&gt;&lt;FONT face=3DArial \ncolor=3D#0000ff size=3D2&gt;I think all of those could =\r\nbe designed to have uniform \ninterfaces and resource identifiers and exchan=\r\nge representations of state. You \ncould build it yourself, and the limits o=\r\nf your integration would be as far as \nyou care to push them. Or you could =\r\nuse existing technology - possibly placing \nextra constraints to achieve th=\r\ne uniform interface, resource identifiers, etc. - \nand maybe do it cheaper =\r\nwith broader acceptance. The existing technologies could \nbe HTTP (for most=\r\n of those), or something like JMS or a vendor specific message \npublishing/=\r\nqueueing system.&lt;/FONT&gt;&lt;/SPAN&gt;&lt;/DIV&gt;\n&lt;DIV dir=3Dltr align=3Dleft&gt;&lt;SPAN clas=\r\ns=3D925403604-19042006&gt;&lt;FONT face=3DArial \ncolor=3D#0000ff size=3D2&gt;&lt;/FONT&gt;=\r\n&lt;/SPAN&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV dir=3Dltr align=3Dleft&gt;&lt;SPAN class=3D925403604-190=\r\n42006&gt;&lt;FONT face=3DArial \ncolor=3D#0000ff size=3D2&gt;&nbsp;&gt; &lt;FONT face=3D=\r\n&quot;Times New Roman&quot; color=3D#000000 \nsize=3D3&gt;For example looking up existing=\r\n customer information. It definitely \nwouldn&#39;t be my first choice, however,=\r\n for something transactional like creating \nan order. &lt;/FONT&gt;&lt;/FONT&gt;&lt;/SPAN&gt;=\r\n&lt;/DIV&gt;\n&lt;DIV dir=3Dltr align=3Dleft&gt;&lt;SPAN class=3D925403604-19042006&gt;&lt;FONT f=\r\nace=3DArial \ncolor=3D#0000ff size=3D2&gt;&lt;FONT face=3D&quot;Times New Roman&quot; color=\r\n=3D#000000 size=3D3&gt;&gt; Not \nsaying I&#39;d never do it, just wouldn&#39;t be my f=\r\nirst \nchoice.&lt;/FONT&gt;&lt;/FONT&gt;&lt;/SPAN&gt;&lt;/DIV&gt;\n&lt;DIV dir=3Dltr align=3Dleft&gt;&lt;FONT =\r\nface=3DArial&gt;&lt;FONT size=3D2&gt;&lt;FONT color=3D#0000ff&gt;&lt;SPAN \nclass=3D925403604-=\r\n19042006&gt;Using HTTP for requests that must be transactional \ndoesn&#39;t seem t=\r\no be a problem in my view. &lt;/SPAN&gt;&lt;SPAN \nclass=3D925403604-19042006&gt;I&#39;m pre=\r\ntty sure there are several online retailers that \nuse HTTP to create and ma=\r\nnage orders. It&#39;s even theoretically possible they use \nHTTP within their f=\r\nirewall as well - but you can never know what&#39;s going on in \nthere...&lt;/SPAN=\r\n&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV dir=3Dltr align=3Dleft&gt;&lt;SPAN class=3D9254=\r\n03604-19042006&gt;&lt;FONT face=3DArial \ncolor=3D#0000ff size=3D2&gt;What is it abou=\r\nt HTTP based request/response doesn&#39;t fit \nwith &#39;transactional&#39; from your p=\r\noint of view?&lt;/FONT&gt;&lt;/SPAN&gt;&lt;/DIV&gt;\n&lt;DIV dir=3Dltr align=3Dleft&gt;&lt;SPAN class=\r\n=3D925403604-19042006&gt;&lt;FONT face=3DArial \ncolor=3D#0000ff size=3D2&gt;&lt;/FONT&gt;&lt;=\r\n/SPAN&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV dir=3Dltr align=3Dleft&gt;&lt;SPAN class=3D925403604-1904=\r\n2006&gt;&lt;FONT face=3DArial \ncolor=3D#0000ff size=3D2&gt;&gt; &lt;FONT face=3D&quot;Times =\r\nNew Roman&quot; color=3D#000000 size=3D3&gt;My \nproblem with using Web Style at all=\r\n for heavy integration is the coupling and \ncomplexity that starts to add u=\r\np &lt;/FONT&gt;&lt;/FONT&gt;&lt;/SPAN&gt;&lt;/DIV&gt;\n&lt;DIV dir=3Dltr align=3Dleft&gt;&lt;SPAN class=3D925=\r\n403604-19042006&gt;&lt;FONT face=3DArial \ncolor=3D#0000ff size=3D2&gt;&lt;FONT face=3D&quot;=\r\nTimes New Roman&quot; color=3D#000000 size=3D3&gt;&gt; when \nyou have a lot of serv=\r\nices all doing Request/Reply. Each client has to handle \nerrors and retry l=\r\nogic.&lt;/FONT&gt;&lt;/FONT&gt;&lt;/SPAN&gt;&lt;/DIV&gt;\n&lt;DIV dir=3Dltr align=3Dleft&gt;&lt;SPAN class=3D=\r\n925403604-19042006&gt;&lt;FONT face=3DArial \ncolor=3D#0000ff size=3D2&gt;When you ha=\r\nve a network, each client has to handle errors \nand retry logic. Really. Th=\r\ne nifty part about REST is that with a uniform \ninterface and a message ori=\r\nented protocol, once you have it figure out, that \nsoftware is re-usable ac=\r\nross different services - whether it&#39;s creating an \norder, updating invento=\r\nry, changing prices or getting a list of things in a \nshopping cart.&lt;/FONT&gt;=\r\n&lt;/SPAN&gt;&lt;/DIV&gt;\n&lt;DIV dir=3Dltr align=3Dleft&gt;&lt;SPAN class=3D925403604-19042006&gt;=\r\n&lt;FONT face=3DArial \ncolor=3D#0000ff size=3D2&gt;&lt;/FONT&gt;&lt;/SPAN&gt;&nbsp;&lt;/DIV&gt;\n&lt;DI=\r\nV dir=3Dltr align=3Dleft&gt;&lt;SPAN class=3D925403604-19042006&gt;&lt;FONT face=3DAria=\r\nl \ncolor=3D#0000ff size=3D2&gt;&lt;/FONT&gt;&lt;/SPAN&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV dir=3Dltr align=\r\n=3Dleft&gt;&lt;SPAN class=3D925403604-19042006&gt;&lt;FONT face=3DArial \ncolor=3D#0000f=\r\nf size=3D2&gt;&gt;&nbsp;&lt;FONT face=3D&quot;Times New Roman&quot; color=3D#000000 \nsize=\r\n=3D3&gt; Once you get to anything async, however, Web Style quickly falls down=\r\n \nfor me. Lets start with &quot;Async Request/Reply&quot;. &lt;/FONT&gt;&lt;/FONT&gt;&lt;/SPAN&gt;&lt;/DIV=\r\n&gt;\n&lt;DIV dir=3Dltr align=3Dleft&gt;&lt;SPAN class=3D925403604-19042006&gt;&lt;FONT face=\r\n=3DArial \ncolor=3D#0000ff size=3D2&gt;&lt;FONT face=3D&quot;Times New Roman&quot; color=3D#=\r\n000000 size=3D3&gt;&gt; \n[...] &lt;/FONT&gt;&lt;/FONT&gt;&lt;/SPAN&gt;&lt;/DIV&gt;\n&lt;DIV dir=3Dltr alig=\r\nn=3Dleft&gt;&lt;SPAN class=3D925403604-19042006&gt;&lt;FONT face=3DArial \ncolor=3D#0000=\r\nff size=3D2&gt;&lt;FONT face=3D&quot;Times New Roman&quot; color=3D#000000 size=3D3&gt;&gt; If=\r\n \nyou are writing one service, it is no big deal - its when there are more =\r\nthen a \nfew where you get a cumulative amount of complexity that \n&lt;/FONT&gt;&lt;/=\r\nFONT&gt;&lt;/SPAN&gt;&lt;/DIV&gt;\n&lt;DIV dir=3Dltr align=3Dleft&gt;&lt;SPAN class=3D925403604-1904=\r\n2006&gt;&lt;FONT face=3DArial \ncolor=3D#0000ff size=3D2&gt;&lt;FONT face=3D&quot;Times New R=\r\noman&quot; color=3D#000000 size=3D3&gt;&gt; \nstarts to get your attention.&lt;/FONT&gt;&lt;/=\r\nFONT&gt;&lt;/SPAN&gt;&lt;/DIV&gt;\n&lt;DIV dir=3Dltr align=3Dleft&gt;&lt;SPAN class=3D925403604-1904=\r\n2006&gt;&lt;FONT face=3DArial \ncolor=3D#0000ff size=3D2&gt;Complexity doesn&#39;t accumu=\r\nlate when you have a uniform \ninterface. Any asynchronous system has more c=\r\nomplex interactions than \nsynchronous, but if the benefits outweigh the cos=\r\nts then it&#39;s a fine choice. \n&lt;/FONT&gt;&lt;/SPAN&gt;&lt;SPAN class=3D925403604-19042006=\r\n&gt;&lt;FONT face=3DArial color=3D#0000ff \nsize=3D2&gt;I don&#39;t see how an asynchrono=\r\nus approach where the receiver returns a \ntoken to the sender is a poor app=\r\nroach or falls down - it&#39;s fairly common in \nmany messaging systems, not ju=\r\nst Web style systems. Using a Web Style means to \ncreate a common way to do=\r\n asynchronous interactions, likely using hyperlinks \n(that&#39;s the &quot;get an id=\r\n back&quot; part) or registering a callback (again, a form of \nhyperlinking). Th=\r\ne Atom publishing protocol is doing just this - defining how \ndocument exch=\r\nange can become asynchronous when building on top of synchronous \nrequest/r=\r\neply messages.&lt;/FONT&gt;&lt;/SPAN&gt;&lt;/DIV&gt;\n&lt;DIV dir=3Dltr align=3Dleft&gt;&lt;SPAN class=\r\n=3D925403604-19042006&gt;&lt;FONT face=3DArial \ncolor=3D#0000ff size=3D2&gt;&lt;/FONT&gt;&lt;=\r\n/SPAN&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV dir=3Dltr align=3Dleft&gt;&lt;SPAN class=3D925403604-1904=\r\n2006&gt;&lt;FONT face=3DArial \ncolor=3D#0000ff size=3D2&gt;&gt; &lt;FONT face=3D&quot;Times =\r\nNew Roman&quot; color=3D#000000 size=3D3&gt;For \n&quot;Async 1:1&quot;, you can do that with =\r\nWeb Style like Request/Reply. You do have to \ncontend with error cases, how=\r\never. &lt;/FONT&gt;&lt;/FONT&gt;&lt;/SPAN&gt;&lt;/DIV&gt;\n&lt;DIV dir=3Dltr align=3Dleft&gt;&lt;SPAN class=\r\n=3D925403604-19042006&gt;&lt;FONT face=3DArial \ncolor=3D#0000ff size=3D2&gt;&lt;FONT fa=\r\nce=3D&quot;Times New Roman&quot; color=3D#000000 size=3D3&gt;&gt; And \n&quot;out of the box&quot; =\r\nyou don&#39;t get guaranteed delivery. You can&#39;t send the message \npersistently=\r\n so that you know that the send being ack&#39;d means \nsomething.&lt;/FONT&gt;&lt;/FONT&gt;=\r\n&lt;/SPAN&gt;&lt;/DIV&gt;\n&lt;DIV dir=3Dltr align=3Dleft&gt;&lt;SPAN class=3D925403604-19042006&gt;=\r\n&lt;FONT face=3DArial \ncolor=3D#0000ff size=3D2&gt;Most messaging systems I&#39;ve wo=\r\nrked with that provide \nreliable or guaranteed delivery have APIs that look=\r\n suspiciously like &quot;post&quot;, \nand the API is a blocking call - quick, but sti=\r\nll blocking.&lt;/FONT&gt; &lt;/SPAN&gt;&lt;/DIV&gt;\n&lt;DIV dir=3Dltr align=3Dleft&gt;&lt;SPAN class=\r\n=3D925403604-19042006&gt;&lt;FONT face=3DArial \ncolor=3D#0000ff size=3D2&gt;&lt;/FONT&gt;&lt;=\r\n/SPAN&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV dir=3Dltr align=3Dleft&gt;&lt;SPAN class=3D925403604-1904=\r\n2006&gt;&lt;FONT face=3DArial \ncolor=3D#0000ff size=3D2&gt;&gt; &lt;FONT face=3D&quot;Times =\r\nNew Roman&quot; color=3D#000000 size=3D3&gt;How \nwould you do &quot;Async 1:M&quot;? This is =\r\nclassic pub/sub. A client sends 1 message and \nN subscribers listen to the =\r\nmessage. &lt;/FONT&gt;&lt;/FONT&gt;&lt;/SPAN&gt;&lt;/DIV&gt;\n&lt;DIV dir=3Dltr align=3Dleft&gt;&lt;SPAN clas=\r\ns=3D925403604-19042006&gt;&lt;FONT face=3DArial \ncolor=3D#0000ff size=3D2&gt;&lt;FONT f=\r\nace=3D&quot;Times New Roman&quot; color=3D#000000 size=3D3&gt;&gt; The \nclient has no id=\r\nea who is listening. I don&#39;t know of any way to do this w/o \nwriting a ton =\r\nof code.&lt;/FONT&gt;&lt;/FONT&gt;&lt;/SPAN&gt;&lt;/DIV&gt;\n&lt;DIV dir=3Dltr align=3Dleft&gt;&lt;SPAN class=\r\n=3D925403604-19042006&gt;&lt;FONT face=3DArial \ncolor=3D#0000ff size=3D2&gt;I have a=\r\n feeling you are talking about how to do this with \nHTTP, rather than how t=\r\no make pubsub more RESTful.&lt;/FONT&gt;&lt;/SPAN&gt;&lt;/DIV&gt;\n&lt;DIV dir=3Dltr align=3Dleft=\r\n&gt;&lt;SPAN class=3D925403604-19042006&gt;&lt;FONT face=3DArial \ncolor=3D#0000ff size=\r\n=3D2&gt;You could just acquire a decent messaging middleware \nproduct and put =\r\nan HTTP server in front in order to post messages to the topics, \nthen defi=\r\nne the HTTP requests for consumers to retrieve messages - the trick is \nto =\r\ndefine how the consuming applications maintain state as to which messages \n=\r\nhave been processed.&lt;/FONT&gt;&lt;/SPAN&gt;&lt;/DIV&gt;\n&lt;DIV dir=3Dltr align=3Dleft&gt;&lt;SPAN =\r\nclass=3D925403604-19042006&gt;&lt;FONT face=3DArial \ncolor=3D#0000ff size=3D2&gt;Her=\r\ne is a sample app I wrote a while back that does what \nyou are talking abou=\r\nt : &lt;A \nhref=3D&quot;http://www.searchalert.net:8080/dierken/events/chat.html?to=\r\npic=3Drest-discuss&quot;&gt;http://www.searchalert.net:8080/dierken/events/chat.htm=\r\nl?topic=3Drest-discuss&lt;/A&gt;&lt;/FONT&gt;&lt;/SPAN&gt;&lt;/DIV&gt;\n&lt;DIV dir=3Dltr align=3Dleft&gt;=\r\n&lt;SPAN class=3D925403604-19042006&gt;&lt;FONT face=3DArial \ncolor=3D#0000ff size=\r\n=3D2&gt;The underlying system holds messages here: &lt;/FONT&gt;&lt;FONT \nface=3DArial&gt;=\r\n&lt;FONT size=3D2&gt;&lt;FONT color=3D#0000ff&gt;&lt;A \nhref=3D&quot;http://www.searchalert.net=\r\n:8080/xmlrouter/msgs/rest-discuss&quot;&gt;http://www.searchalert.net:8080/xmlroute=\r\nr/msgs/rest-discuss&lt;/A&gt;&lt;/SPAN&gt;&lt;/DIV&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;\n&lt;DIV dir=3Dltr al=\r\nign=3Dleft&gt;&lt;SPAN class=3D925403604-19042006&gt;&lt;FONT face=3DArial \ncolor=3D#00=\r\n00ff size=3D2&gt;This is a working example of using HTTP to send 1 message \nan=\r\nd having N subscribers listen to the message. The publisher does not know w=\r\nhat \napplications will consume the messages. In addition, this particular e=\r\nxample \nalso shows two approaches to notification - polling for messages vi=\r\na following \nthe &#39;next&#39; link, and persistent connections for low latency de=\r\nlivery to \nsubscribers (when the &#39;next&#39; link falls off the end of the chain=\r\n, the server \nholds onto the request and doesn&#39;t send a response until ther=\r\ne are messages \nready). There is a client implemented via javascript within=\r\n the HTML page, but \nany programming language that can talk HTTP and parse =\r\nXML will do.&nbsp;This was \nwritten in just a few hours, but gives you the =\r\nidea of what is \npossible.&lt;/FONT&gt;&lt;/SPAN&gt;&lt;/DIV&gt;\n&lt;DIV dir=3Dltr align=3Dleft&gt;=\r\n&lt;SPAN class=3D925403604-19042006&gt;&lt;FONT face=3DArial \ncolor=3D#0000ff size=\r\n=3D2&gt;&lt;/FONT&gt;&lt;/SPAN&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV dir=3Dltr align=3Dleft&gt;&lt;SPAN class=3D9=\r\n25403604-19042006&gt;&lt;FONT face=3DArial \ncolor=3D#0000ff size=3D2&gt;&gt;&nbsp;&lt;F=\r\nONT face=3D&quot;Times New Roman&quot; color=3D#000000 \nsize=3D3&gt; How about &quot;Async 1:=\r\nM Request/Reply&quot;? This is when you send one message \nand get N responses. T=\r\nhis is pub/sub request reply.&lt;/FONT&gt;&lt;/FONT&gt;&lt;/SPAN&gt;&lt;/DIV&gt;\n&lt;DIV dir=3Dltr ali=\r\ngn=3Dleft&gt;&lt;SPAN class=3D925403604-19042006&gt;&lt;FONT face=3DArial \ncolor=3D#000=\r\n0ff size=3D2&gt;Are you sure you didn&#39;t mean N+1 \nresponses?&lt;/FONT&gt;&lt;/SPAN&gt;&lt;/DI=\r\nV&gt;\n&lt;DIV dir=3Dltr align=3Dleft&gt;&lt;SPAN class=3D925403604-19042006&gt;&lt;FONT face=\r\n=3DArial \ncolor=3D#0000ff size=3D2&gt;&lt;/FONT&gt;&lt;/SPAN&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV dir=3Dlt=\r\nr align=3Dleft&gt;&lt;SPAN class=3D925403604-19042006&gt;&lt;FONT face=3DArial \ncolor=\r\n=3D#0000ff size=3D2&gt;&gt;&nbsp;&lt;FONT face=3D&quot;Times New Roman&quot; color=3D#00000=\r\n0 \nsize=3D3&gt; Last one on my list is &quot;Async M:1&quot;. This is 1 service listenin=\r\ng to N \ndestinations / Topics for events.&lt;/FONT&gt;&lt;/FONT&gt;&lt;/SPAN&gt;&lt;/DIV&gt;\n&lt;DIV d=\r\nir=3Dltr align=3Dleft&gt;&lt;SPAN class=3D925403604-19042006&gt;&lt;FONT face=3DArial \n=\r\ncolor=3D#0000ff size=3D2&gt;This is the flip side of 1-N pubsub. The service e=\r\nither is \npro-actively notified (via a post in some language or protocol) o=\r\nr polls. A \nmiddle-ware service would allow this service to register &#39;route=\r\ns&#39; between topics \nso that the service only need to subscribe to one &#39;journ=\r\nal&#39; topic. There have \nbeen a few companies and open-source projects in the=\r\n past that did this with \npure HTTP. &lt;/FONT&gt;&lt;/SPAN&gt;&lt;/DIV&gt;\n&lt;DIV dir=3Dltr al=\r\nign=3Dleft&gt;&lt;SPAN class=3D925403604-19042006&gt;&lt;FONT face=3DArial \ncolor=3D#00=\r\n00ff size=3D2&gt;&lt;/FONT&gt;&lt;/SPAN&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV dir=3Dltr align=3Dleft&gt;&lt;SPAN =\r\nclass=3D925403604-19042006&gt;&lt;FONT face=3DArial \ncolor=3D#0000ff size=3D2&gt;&lt;/F=\r\nONT&gt;&lt;/SPAN&gt;&nbsp;&lt;/DIV&gt;&lt;BR&gt;\n&lt;BLOCKQUOTE \nstyle=3D&quot;PADDING-LEFT: 5px; MARGIN=\r\n-LEFT: 5px; BORDER-LEFT: #0000ff 2px solid; MARGIN-RIGHT: 0px&quot;&gt;\n  &lt;DIV clas=\r\ns=3DOutlookMessageHeader lang=3Den-us dir=3Dltr align=3Dleft&gt;\n  &lt;HR tabInde=\r\nx=3D-1&gt;\n  &lt;FONT face=3DTahoma size=3D2&gt;&lt;B&gt;From:&lt;/B&gt; rest-discuss@yahoogroup=\r\ns.com \n  [mailto:rest-discuss@yahoogroups.com] &lt;B&gt;On Behalf Of \n  &lt;/B&gt;mherr=\r\nick66@...&lt;BR&gt;&lt;B&gt;Sent:&lt;/B&gt; Monday, April 17, 2006 11:14 \n  PM&lt;BR&gt;&lt;B&gt;To:&lt;=\r\n/B&gt; rest-discuss@yahoogroups.com&lt;BR&gt;&lt;B&gt;Subject:&lt;/B&gt; \n  [rest-discuss] REST =\r\n&amp; Internal Integration&lt;BR&gt;&lt;/FONT&gt;&lt;BR&gt;&lt;/DIV&gt;\n  &lt;DIV&gt;&lt;/DIV&gt;&lt;TT&gt;Hi,\n  &lt;DIV=\r\n&gt;&lt;BR class=3Dkhtml-block-placeholder&gt;&lt;/DIV&gt;\n  &lt;DIV&gt;I am not a REST expert, =\r\nbut definitely prefer it to SOAP &amp; WS-*. \n  &lt;/DIV&gt;\n  &lt;DIV&gt;&lt;BR class=3Dk=\r\nhtml-block-placeholder&gt;&lt;/DIV&gt;\n  &lt;DIV&gt;I am participating in some future stat=\r\ne architecture planning and am \n  trying to see where REST fits. I&#39;m trying=\r\n to challenge some of my assumptions \n  so I am sending this email to this =\r\nlist. While I certainly prefer REST to \n  WS-*, I still don&#39;t think its the=\r\n best choice for internal integration within \n  a company.&lt;/DIV&gt;\n  &lt;DIV&gt;&lt;BR=\r\n class=3Dkhtml-block-placeholder&gt;&lt;/DIV&gt;\n  &lt;DIV&gt;As part of this architecture=\r\n planning we have identified some integration \n  categories that are common=\r\n to us:&lt;SPAN class=3DApple-style-span \n  style=3D&quot;LINE-HEIGHT: 18px&quot;&gt;&lt;BR&gt;&lt;/=\r\nSPAN&gt;&lt;/DIV&gt;\n  &lt;OL&gt;\n    &lt;LI style=3D&quot;MARGIN: 0px&quot;&gt;&lt;FONT class=3DApple-style-=\r\nspan face=3D&quot;Trebuchet MS&quot; \n    size=3D3&gt;&lt;SPAN class=3DApple-style-span sty=\r\nle=3D&quot;FONT-SIZE: 12px&quot;&gt;Sync \n    Request/Reply&lt;/SPAN&gt;&lt;/FONT&gt;\n    &lt;LI style=\r\n=3D&quot;MARGIN: 0px&quot;&gt;&lt;FONT class=3DApple-style-span face=3D&quot;Trebuchet MS&quot; \n    =\r\nsize=3D3&gt;&lt;SPAN class=3DApple-style-span style=3D&quot;FONT-SIZE: 12px&quot;&gt;Async \n  =\r\n  Request/Reply&lt;/SPAN&gt;&lt;/FONT&gt;\n    &lt;LI style=3D&quot;MARGIN: 0px&quot;&gt;&lt;FONT class=3DA=\r\npple-style-span face=3D&quot;Trebuchet MS&quot; \n    size=3D3&gt;&lt;SPAN class=3DApple-sty=\r\nle-span style=3D&quot;FONT-SIZE: 12px&quot;&gt;Async \n    1:1&lt;/SPAN&gt;&lt;/FONT&gt;\n    &lt;LI styl=\r\ne=3D&quot;MARGIN: 0px&quot;&gt;&lt;FONT class=3DApple-style-span face=3D&quot;Trebuchet MS&quot; \n   =\r\n size=3D3&gt;&lt;SPAN class=3DApple-style-span style=3D&quot;FONT-SIZE: 12px&quot;&gt;Async \n =\r\n   1:M&lt;/SPAN&gt;&lt;/FONT&gt;\n    &lt;LI style=3D&quot;MARGIN: 0px&quot;&gt;&lt;FONT class=3DApple-styl=\r\ne-span face=3D&quot;Trebuchet MS&quot; \n    size=3D3&gt;&lt;SPAN class=3DApple-style-span s=\r\ntyle=3D&quot;FONT-SIZE: 12px&quot;&gt;Async 1:M \n    Request/Reply&lt;/SPAN&gt;&lt;/FONT&gt;\n    &lt;LI=\r\n style=3D&quot;MARGIN: 0px&quot;&gt;&lt;FONT class=3DApple-style-span face=3D&quot;Trebuchet MS&quot;=\r\n \n    size=3D3&gt;&lt;SPAN class=3DApple-style-span style=3D&quot;FONT-SIZE: 12px&quot;&gt;Asy=\r\nnc \n    M:1&lt;/SPAN&gt;&lt;/FONT&gt;\n    &lt;LI style=3D&quot;MARGIN: 0px&quot;&gt;&lt;FONT class=3DApple=\r\n-style-span face=3D&quot;Trebuchet MS&quot; \n    size=3D3&gt;&lt;SPAN class=3DApple-style-s=\r\npan style=3D&quot;FONT-SIZE: 12px&quot;&gt;Batch \n    Feed&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/LI&gt;&lt;/OL&gt;\n  &lt;DI=\r\nV&gt;I wrote a bit more on these and which ones I think can/should be done via=\r\n \n  REST and which ones shouldn&#39;t:&lt;/DIV&gt;\n  &lt;DIV&gt;&lt;A \n  href=3D&quot;http://fuzzyp=\r\nanic.blogspot.com/2006/04/just-how-much-rest-web-style-are-we.html&quot;&gt;http://=\r\nfuzzypanic.blogspot.com/2006/04/just-how-much-rest-web-style-are-we.html&lt;/A=\r\n&gt;&lt;/DIV&gt;\n  &lt;DIV&gt;&lt;BR class=3Dkhtml-block-placeholder&gt;&lt;/DIV&gt;\n  &lt;DIV&gt;Please let=\r\n me know what you think.&lt;/DIV&gt;\n  &lt;DIV&gt;&lt;BR class=3Dkhtml-block-placeholder&gt;&lt;=\r\n/DIV&gt;\n  &lt;DIV&gt;Thanks for your help,&lt;/DIV&gt;\n  &lt;DIV&gt;&lt;BR class=3Dkhtml-block-pla=\r\nceholder&gt;&lt;/DIV&gt;\n  &lt;DIV&gt;Mike Herrick&lt;/DIV&gt;\n  &lt;DIV&gt;Portland, OR&lt;/DIV&gt;&lt;/TT&gt;&lt;/B=\r\nODY&gt;&lt;/HTML&gt;\n\r\n------=_Part_206_4613466.1145582520296--\r\n\n"}}
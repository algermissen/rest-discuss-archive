{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":272750603,"authorName":"Duncan Cragg","from":"Duncan Cragg &lt;rest-discuss@...&gt;","profile":"duncan_b_cragg","replyTo":"SENDER","senderId":"ErqAbCFZ4JUtfRfSZ-bPylMK8sq-5Jyj_qa3Xd3JT-VjU1fX2C7cLiVfvjyk6py6oazYJ0Nh9bbYbBH166vvTxVfZ4fedpUBM0tOKw","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Re: how to model actions","postDate":"1168911946","msgId":7623,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQ1QUMyRTRBLjIwMjA3MDRAY2lsdXgub3JnPg==","inReplyToHeader":"PDExNjg2MTExNzQuNTMyMy40NS5jYW1lbEBsb2NhbGhvc3QubG9jYWxkb21haW4+","referencesHeader":"PDQ1QTVEQjg3LjMwNzA3QHFsdXN0ZXJzLmNvbT4JIDw0NWE1ZGUxYi4yZTA0YjZjOS4wYThhLmZmZmY5NTllQG14Lmdvb2dsZS5jb20+CSA8MzQzZWNiM2UwNzAxMTIwMzAwajFiNDBhMzE2cTk3ZGYwYjYzMDE1MjNlMTlAbWFpbC5nbWFpbC5jb20+CSA8NDVBNzhCREQuMzA4MDkwN0BxbHVzdGVycy5jb20+IDwxMTY4NjExMTc0LjUzMjMuNDUuY2FtZWxAbG9jYWxob3N0LmxvY2FsZG9tYWluPg=="},"prevInTopic":7619,"nextInTopic":7625,"prevInTime":7622,"nextInTime":7624,"topicId":7510,"numMessagesInTopic":39,"msgSnippet":"... http://addsimplicity.typepad.com/adding_simplicity_an_engi/2006/11/the_rest_dialog.html ... Part 3 of the series has a discussion of these real business","rawEmail":"Return-Path: &lt;rest-discuss@...&gt;\r\nX-Sender: rest-discuss@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 54700 invoked from network); 16 Jan 2007 01:01:05 -0000\r\nReceived: from unknown (66.218.66.217)\n  by m41.grp.scd.yahoo.com with QMQP; 16 Jan 2007 01:01:05 -0000\r\nReceived: from unknown (HELO qg.cilux.org) (212.23.31.158)\n  by mta2.grp.scd.yahoo.com with SMTP; 16 Jan 2007 01:01:04 -0000\r\nReceived: from cilux.org (qg [127.0.0.1])\n\tby qg.cilux.org (8.12.8/8.12.8) with ESMTP id l0G1jkG3017124\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Tue, 16 Jan 2007 01:45:47 GMT\r\nMessage-ID: &lt;45AC2E4A.2020704@...&gt;\r\nDate: Tue, 16 Jan 2007 01:45:46 +0000\r\nUser-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.7b) Gecko/20040316\r\nX-Accept-Language: en-us, en\r\nMIME-Version: 1.0\r\nTo: rest-discuss@yahoogroups.com\r\nReferences: &lt;45A5DB87.30707@...&gt;\t &lt;45a5de1b.2e04b6c9.0a8a.ffff959e@...&gt;\t &lt;343ecb3e0701120300j1b40a316q97df0b6301523e19@...&gt;\t &lt;45A78BDD.3080907@...&gt; &lt;1168611174.5323.45.camel@...&gt;\r\nIn-Reply-To: &lt;1168611174.5323.45.camel@...&gt;\r\nContent-Type: text/plain; charset=us-ascii; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:0:0:0\r\nFrom: Duncan Cragg &lt;rest-discuss@...&gt;\r\nSubject: Re: [rest-discuss] Re: how to model actions\r\nX-Yahoo-Group-Post: member; u=272750603; y=RU_Nny-blVwgyc2FkST0W6L9ZYLV_9qX5vpsC_0_jAASDmOSSrKCcfU\r\nX-Yahoo-Profile: duncan_b_cragg\r\n\r\nIttay Dror:\n\n  &gt; this article is what prompted me to submit this thread in the first\n  &gt; place. if not, i would have probably gone the &quot;ebay&quot; way of defining\n  &gt; actions in the url. i also read\n  &gt; \nhttp://addsimplicity.typepad.com/adding_simplicity_an_engi/2006/11/the_rest_dialog.html \n\n  &gt; in which the real architect continues the dialog from his point of view.\n\n  &gt; what i don&#39;t like about Duncan&#39;s post is that he addresses only getter\n  &gt; and setter business functions, not real ones, those that actually\n  &gt; create a process. it is very easy to say that instead of getFoo, you\n  &gt; can GET http://example.com/foo.\n  &gt; it is harder when you want to model a doSomething function.\n\nPart 3 of the series has a discussion of these &#39;real business functions&#39; \nthat go beyond simple reading and writing, or getting and setting, data \non the server.\n\n\n\nAnyway, thanks for reading my dialogue articles! I have been hesitant to \nnotify this list of their existence because: (a) they&#39;re not complete \nyet, and (b) they may be seen as a challenge to the direction that REST \nhas gone towards the CRUD view since The Thesis, and I don&#39;t want to be \nseen as in any way confrontational.\n\nPlus, I&#39;m aware that I got a ton of traffic to my blog via a kind link \nfrom DHH - and he has just converted Rails to CRUD-REST...  =0/\n\nHowever, now I&#39;ve been linked to on the list itself, I suppose it&#39;s \npointless not coming over here and defending myself.\n\n\n\nSo - I promote a /symmetric/ REST point of view, with active resources \nbeing dependent on each other and conveying state between themselves \nwith either GET or POST depending on which party initiates the transfer.\n\nI do hope and believe this pattern is still REST-compatible. Please read \npart 3 of my series \n(http://duncan-cragg.org/blog/post/business-functions-rest-dialogues/) \nfor more explanation of this pattern.\n\nOf course, I probably end up thereby promoting POST idempotency, but I \nsee that as a good thing. Example: if you&#39;ve added something to a list, \nadding it again doesn&#39;t do anything. For some function same(resx,resy), \nof course.\n\n\n\nNow, Benjamin Carlyle, who should always be heeded, said:\n\n&gt; .. REST replaces the doSomething concept with a &quot;make something so&quot;\n&gt; concept. If you think about it, all doSomething can be modelled\n&gt; this way. .. &quot;make your state this&quot;. \n\nThis is an example of what I currently call (in my grubby lab notebook) \na &#39;transformation intent&#39; - where some party expresses directly to a \nresource that they&#39;d like some state to become manifest in or perhaps \naround that target resource.\n\nMy heresy (maybe evolution, then) is that I don&#39;t see the future of REST \nbeing constrained to resources responding to such transformation intents \nof other parties: I see some (most!) resources transforming /themselves/ \nin reaction to the state of /other/, peer resources.  Allow me to \nelaborate..\n\n\nI break REST interaction down into three modes - from dumb to smart, via \ndependent:\n\n-: If a resource receives such a direct transformation request or \nintent, it may be *dumb* and go ahead and do just what it&#39;s told, \nwhenever it&#39;s told. That&#39;s what I was talking about in parts 1 and 2 of \nthe dialogues. It&#39;s a bit like a database. I&#39;d still do without PUT and \nDELETE, mind, to prevent it being seen that way!\n\n-: Alternatively - what seems to be the subject of this thread - it may \nhave *real-world dependency*: maybe it can&#39;t just switch to &#39;running&#39; \nuntil the real world thing it models actually /is/ running!  So, when it \nreceives a direct transformation intent, it goes off and satisfies that \nconstraint by ensuring it&#39;s ticking over in reality, and only then \nchanges its visible state to &#39;running&#39;.\n\n-: Finally, the resource may be *smart*, and decide to switch to \n&#39;running&#39; because of the rule that, as long as Joe&#39;s resource is \nrunning, it should be running itself. So it spots Joe&#39;s resource \nrunning, and starts running without even being told to!  That&#39;s what I \nwas talking about in part 3 of my dialogues.\n\n\n\nThe latter is advanced REST programming in transformation rules, I \nsuppose.  Spontaneous transformation without any direct transformation \nintent - indirect implication or even deduction.\n\nI haven&#39;t directly covered the middle - hidden real-world \nresponsibilities - case so far in my article series. I didn&#39;t think \nsettable resources with non-disk-state side-effects were sufficiently \ncommon in the usual REST integration world to warrant coverage as yet!\n\nExcept insofar as it&#39;s implied by the first - dumb - case, in that the \nvisible state of a resource obviously shouldn&#39;t be set to something for \neveryone to see until it&#39;s actually saved in that state on disk. I also \nalluded to this sort of thing when talking about email side effects in \npart 3.\n\nA printer comes to mind as another example of such a resource: you may \nwant to take it offline by requesting online/offline state. A print \nqueue resource is related to this.\n\nAn example which is /not/ like this is a user interface, which &#39;watches&#39; \nother state rather than being told what state to achieve directly, and \nis more like the third, smart, dependent resource, case above.\n\n(Actually, in Second Life, I think someone can push your &#39;avatar \nresource&#39; and directly change what you can see, but now we&#39;re really \nlooking ahead to the future of REST!)\n\n\nI&#39;ll get to these examples later in my series. Which may now need to be \nten parts  =0(\n\nMeanwhile, I&#39;d be delighted to hear what you - Roy Fielding - have to \nsay about all this...  =0)\n\nCheers!\n\nDuncan\n\n_________________________________\nDuncan Cragg\nhttp://duncan-cragg.org/blog/\n\n"}}
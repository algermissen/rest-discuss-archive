{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"lqelWWdWJNrGOKRIBlt2bMc5-hNj0p8Ai88tDXh_GKpDPS1nvrEfVD1bjtVV1Bp8YgWMSvcTo10td8Y0Hu5PZk4E_WjZPnsQaf8Y4MqGpA","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] An approach to deleting multiple resources use one DELETE","postDate":"1237371795","msgId":12223,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMDkwMzE4MDQyMzE1LjRlZmE5YzgyLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","inReplyToHeader":"PGU3OGJkYmMwMDkwMjI0MDczOHY0ODRkNmU5NGg0NDQ5ZWIwYjY3YTI4ZDJlQG1haWwuZ21haWwuY29tPg==","referencesHeader":"PGU3OGJkYmMwMDkwMjI0MDczOHY0ODRkNmU5NGg0NDQ5ZWIwYjY3YTI4ZDJlQG1haWwuZ21haWwuY29tPg=="},"prevInTopic":12154,"nextInTopic":12224,"prevInTime":12222,"nextInTime":12224,"topicId":12154,"numMessagesInTopic":112,"msgSnippet":"... Let s use Atom as an example, here.  The application developer could have the server interpret the deletion of a collection, as a request to delete all","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 79096 invoked from network); 18 Mar 2009 10:22:57 -0000\r\nX-Received: from unknown (69.147.108.200)\n  by m8.grp.re1.yahoo.com with QMQP; 18 Mar 2009 10:22:57 -0000\r\nX-Received: from unknown (HELO mxout-08.mxes.net) (216.86.168.183)\n  by mta1.grp.re1.yahoo.com with SMTP; 18 Mar 2009 10:22:57 -0000\r\nX-Received: from BigBison (unknown [65.117.211.162])\n\t(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))\n\t(No client certificate requested)\n\tby smtp.mxes.net (Postfix) with ESMTPSA id 81BF1D051E;\n\tWed, 18 Mar 2009 06:22:56 -0400 (EDT)\r\nDate: Wed, 18 Mar 2009 04:23:15 -0600\r\nTo: Dong Liu &lt;edongliu@...&gt;\r\nCc: Rest List &lt;rest-discuss@yahoogroups.com&gt;\r\nMessage-Id: &lt;20090318042315.4efa9c82.eric@...&gt;\r\nIn-Reply-To: &lt;e78bdbc00902240738v484d6e94h4449eb0b67a28d2e@...&gt;\r\nReferences: &lt;e78bdbc00902240738v484d6e94h4449eb0b67a28d2e@...&gt;\r\nOrganization: Bison Systems Corporation\r\nX-Mailer: Sylpheed 2.4.5 (GTK+ 2.10.14; i686-pc-mingw32)\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=US-ASCII\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nSubject: Re: [rest-discuss] An approach to deleting multiple resources use\n one DELETE\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\n&gt; \n&gt; How about doing this in the following way:\n&gt; \n&gt; 1. use PUT to create a composite resource that contains all the\n&gt; resource that are going to be deleted at the &quot;same&quot; time. Of course,\n&gt; the server side should know the purpose of this PUT, and return the\n&gt; URI of the created composite resource.\n&gt; 2. use DELETE to delete the composite resource.\n&gt; \n\nLet&#39;s use Atom as an example, here.  The application developer could\nhave the server interpret the deletion of a collection, as a request to\ndelete all member resources in that collection.  A user could then\ncreate a collection, like any other, for the purpose of deleting it and\nwhatever entries it references.\n\nThe tradeoff in such a configuration, is eliminating the ability to\ndelete a collection *without* deleting its member resources.  Ask\nyourself if any reduction in API functionality is acceptable, for the\npurpose of optimizing DELETE -- a method whose traffic doesn&#39;t amount\nto a very big slice of the overall network-traffic pie to begin with.\n\n&gt;\n&gt; In this way, both the client side and the server side have clear\n&gt; understanding of what each operation and each URI mean.\n&gt; \n&gt; I feel it is more explicit and clear than sending a POST with many\n&gt; &quot;delete&quot;.\n&gt; \n\nAh, but the question is, would this be more explicit and clear than\nhaving the client make atomic DELETE requests to the desired URIs, in\naccordance with Atom Protocol and REST?  There is no possibility for\nmisunderstanding the purpose of an atomic DELETE request made against a\nspecific URI, or the resulting response status.\n\nFrom the standpoint of the user deleting a collection for the purpose\nof batch-deleting member resources, the problem is one of visibility.\nUsing atomic, URI-by-URI DELETE requests tells intermediaries to expire\nany cached representations of the deleted resources.  Using an opaque\nserver behavior, i.e. relying on the server to behave a certain way\nwhen a collection is deleted, won&#39;t cause intermediaries to expire\nmember resources, meaning the user who performed the DELETE could still\npotentially dereference the &quot;deleted&quot; resources from a cache.\n\nThis confusion certainly doesn&#39;t arise when each resource is deleted by\nmaking a DELETE request against its URI and receiving a &quot;success&quot;\nstatus code, a visible transaction that an intermediary can understand\nand act upon by expiring cached representations. The user won&#39;t (or\nshouldn&#39;t) experience a reload re-rendering a representation of a\nresource he thinks he&#39;s just deleted, using RESTful URI-by-URI deletion.\n\n-Eric\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":352334505,"authorName":"Craig McClanahan","from":"Craig McClanahan &lt;craigmcc@...&gt;","profile":"craig_mcclanahan","replyTo":"SENDER","senderId":"2iZKo8TEVjUUJx316EX2aVsF-vhifnehNxVm1UA7G_XJPwQI8nrlu4Bmf4xYbP621LVTV-6jtJAB_E18gA0gjsfpdqDR705WBT-YMw","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] (in)visible properties of RESTful interfaces","postDate":"1297277489","msgId":17339,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEFBTkxrVGltcWNab20zS09xWTVfNytodWNUPVE4YzJ2WkJSN3p2MXlIeV9QbkBtYWlsLmdtYWlsLmNvbT4=","inReplyToHeader":"PGlpdW5idStvYzluQGVHcm91cHMuY29tPg==","referencesHeader":"PGlpdW5idStvYzluQGVHcm91cHMuY29tPg=="},"prevInTopic":17338,"nextInTopic":17340,"prevInTime":17338,"nextInTime":17340,"topicId":17338,"numMessagesInTopic":8,"msgSnippet":"... be prepared to handle *any* of the defined HTTP status codes, not just the ones that might be documented by the service you re contacting.  After all, it s","rawEmail":"Return-Path: &lt;craigmcc@...&gt;\r\nX-Sender: craigmcc@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 65596 invoked from network); 9 Feb 2011 18:51:31 -0000\r\nX-Received: from unknown (66.196.94.107)\n  by m16.grp.re1.yahoo.com with QMQP; 9 Feb 2011 18:51:31 -0000\r\nX-Received: from unknown (HELO mail-ey0-f180.google.com) (209.85.215.180)\n  by mta3.grp.re1.yahoo.com with SMTP; 9 Feb 2011 18:51:30 -0000\r\nX-Received: by eyf18 with SMTP id 18so322588eyf.11\n        for &lt;rest-discuss@yahoogroups.com&gt;; Wed, 09 Feb 2011 10:51:30 -0800 (PST)\r\nMIME-Version: 1.0\r\nX-Received: by 10.14.124.133 with SMTP id x5mr9049430eeh.22.1297277490005; Wed,\n 09 Feb 2011 10:51:30 -0800 (PST)\r\nX-Received: by 10.14.119.68 with HTTP; Wed, 9 Feb 2011 10:51:29 -0800 (PST)\r\nIn-Reply-To: &lt;iiunbu+oc9n@...&gt;\r\nReferences: &lt;iiunbu+oc9n@...&gt;\r\nDate: Wed, 9 Feb 2011 10:51:29 -0800\r\nMessage-ID: &lt;AANLkTimqcZom3KOqY5_7+hucT=Q8c2vZBR7zv1yHy_Pn@...&gt;\r\nTo: Jakob Strauch &lt;jakob.strauch@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nContent-Type: multipart/alternative; boundary=e0cb4e7000c5f7895f049bddf376\r\nFrom: Craig McClanahan &lt;craigmcc@...&gt;\r\nReply-To: craigmcc@...\r\nSubject: Re: [rest-discuss] (in)visible properties of RESTful interfaces\r\nX-Yahoo-Group-Post: member; u=352334505; y=0jYGGG9Zi1jBncfC4kh19sL2yAHn83tL-S5CXQU6ir5q9yte3Kn0BYc2-Q\r\nX-Yahoo-Profile: craig_mcclanahan\r\n\r\n\r\n--e0cb4e7000c5f7895f049bddf376\r\nContent-Type: text/plain; charset=windows-1252\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nOn Wed, Feb 9, 2011 at 10:45 AM, Jakob Strauch &lt;jakob.strauch@...&gt; wrote=\r\n:\n\n&gt;\n&gt;\n&gt; The Visibility of an interface=B4s properties is an important aspe=\r\nct to code\n&gt; against it. In theory i need only a single starting URL to &quot;ex=\r\nplore&quot; a\n&gt; RESTful system. HEAD, OPTIONS can be used to retrieve supported =\r\nHTTP\n&gt; operations, the mediatype, supported security mechanismens. This can=\r\n\n&gt; subsumed as an interface contract.\n&gt;\n&gt; What about the possible errors? W=\r\nell, maybe i have to expect all HTTP\n&gt; response codes. At least the common =\r\none (404 etc.). In practice, only a smal\n&gt; subset of response codes will be=\r\n supported. But how do you tell the clients,\n&gt; which ones? Are response cod=\r\nes not part of the &quot;contract&quot;. Or are even all\n&gt; response part implicit par=\r\nt of the contract?\n&gt;\n&gt; If you are accessing your REST service across HTTP, =\r\na robust client should\nbe prepared to handle *any* of the defined HTTP stat=\r\nus codes, not just the\nones that might be documented by the service you&#39;re =\r\ncontacting.  After all,\nit&#39;s not just the application that can return such =\r\nerrors -- for example,\nthink of a 504 (Gateway Timeout) returned by an inte=\r\nrmediate proxy server\nthat is overloaded.\n\nIn practice, you certainly want =\r\nto do whatever you can to respect the\nsemantics of commonly used status cod=\r\nes, but it is a wild world out there,\nand pretty much anything is possible.=\r\n\n\nJakob\n&gt;\n&gt; Craig\n\n\n&gt;  \n&gt;\n\r\n--e0cb4e7000c5f7895f049bddf376\r\nContent-Type: text/html; charset=windows-1252\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;div class=3D&quot;gmail_quote&quot;&gt;On Wed, Feb 9, 2011 at 10:45 AM, Jakob Strauch &lt;=\r\nspan dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:jakob.strauch@...&quot;&gt;jakob.strauch@=\r\nweb.de&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;=\r\nmargin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex;&quot;&gt;\n\n\n\n\n\n\n\n\n\n\n=\r\n\n\n\n\n&lt;div style=3D&quot;background-color:#fff&quot;&gt;\n&lt;span&gt;=A0&lt;/span&gt;\n\n\n&lt;div&gt;\n  &lt;div&gt;\n=\r\n\n\n    &lt;div&gt;\n      \n      \n      &lt;p&gt;The Visibility of an interface=B4s prope=\r\nrties is an important aspect to code against it. In theory i need only a si=\r\nngle starting URL to &quot;explore&quot; a RESTful system. HEAD, OPTIONS ca=\r\nn be used to retrieve supported HTTP operations, the mediatype, supported s=\r\necurity mechanismens. This can subsumed as an interface contract.&lt;br&gt;\n\n&lt;br&gt;=\r\n\nWhat about the possible errors? Well, maybe i have to expect all HTTP resp=\r\nonse codes. At least the common one (404 etc.). In practice, only a smal su=\r\nbset of response codes will be supported. But how do you tell the clients, =\r\nwhich ones? Are response codes not part of the &quot;contract&quot;. Or are=\r\n even all response part implicit part of the contract?&lt;br&gt;\n\n&lt;br&gt;&lt;/p&gt;&lt;/div&gt;&lt;=\r\n/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;If you are accessing your REST service a=\r\ncross HTTP, a robust client should be prepared to handle *any* of the defin=\r\ned HTTP status codes, not just the ones that might be documented by the ser=\r\nvice you&#39;re contacting. =A0After all, it&#39;s not just the application=\r\n that can return such errors -- for example, think of a 504 (Gateway Timeou=\r\nt) returned by an intermediate proxy server that is overloaded.&lt;/div&gt;\n&lt;div&gt;=\r\n&lt;br&gt;&lt;/div&gt;&lt;div&gt;In practice, you certainly want to do whatever you can to re=\r\nspect the semantics of commonly used status codes, but it is a wild world o=\r\nut there, and pretty much anything is possible.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;\n&lt;block=\r\nquote class=3D&quot;gmail_quote&quot; style=3D&quot;margin:0 0 0 .8ex;border-left:1px #ccc=\r\n solid;padding-left:1ex;&quot;&gt;&lt;div style=3D&quot;background-color:#fff&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;d=\r\niv&gt;&lt;p&gt;\nJakob&lt;br&gt;\n&lt;br&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;Craig&lt;/d=\r\niv&gt;&lt;div&gt;=A0&lt;/div&gt;&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;margin:0 0 0 .8=\r\nex;border-left:1px #ccc solid;padding-left:1ex;&quot;&gt;&lt;div style=3D&quot;background-c=\r\nolor:#fff&quot;&gt;&lt;div&gt;&lt;div&gt;\n&lt;div&gt;&lt;p&gt;\n&lt;/p&gt;\n\n    &lt;/div&gt;\n     \n\n    \n    &lt;div style=\r\n=3D&quot;color:#fff;min-height:0&quot;&gt;&lt;/div&gt;\n\n\n&lt;/div&gt;\n\n\n\n  \n\n\n\n\n\n\n&lt;/blockquote&gt;&lt;/div=\r\n&gt;&lt;br&gt;\n\r\n--e0cb4e7000c5f7895f049bddf376--\r\n\n"}}
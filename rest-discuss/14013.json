{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":221173245,"authorName":"wahbedahbe","from":"&quot;wahbedahbe&quot; &lt;andrew.wahbe@...&gt;","profile":"wahbedahbe","replyTo":"SENDER","senderId":"tS5WAojAzGfsf2KaARVFbxJ2GqZxvdVKp9UrQzjxNnvrDn5IeN4_e1aReuXTFmmfZV7j3gogSW5VLXWlOD8Ls5-VL1x0wAgqFYAqTQ","spamInfo":{"isSpam":false,"reason":"6"},"subject":"Re: Service descriptions and legal contracts","postDate":"1257539087","msgId":14013,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGhkMjBtZitnN2J2QGVHcm91cHMuY29tPg==","inReplyToHeader":"PERCQzk1MzY5LTA0RDItNDU2Ni04QzM4LTU3NEFDRjI5MUFDN0BtYWMuY29tPg=="},"prevInTopic":14012,"nextInTopic":14014,"prevInTime":14012,"nextInTime":14014,"topicId":13996,"numMessagesInTopic":25,"msgSnippet":"... A CCXML document describes a state machine for processing events raised up to the client. For each type of event fired, the document describes the","rawEmail":"Return-Path: &lt;andrew.wahbe@...&gt;\r\nX-Sender: andrew.wahbe@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 23758 invoked from network); 6 Nov 2009 20:25:04 -0000\r\nX-Received: from unknown (98.137.34.44)\n  by m4.grp.sp2.yahoo.com with QMQP; 6 Nov 2009 20:25:04 -0000\r\nX-Received: from unknown (HELO n43d.bullet.mail.sp1.yahoo.com) (66.163.169.157)\n  by mta1.grp.sp2.yahoo.com with SMTP; 6 Nov 2009 20:25:04 -0000\r\nX-Received: from [69.147.65.149] by n43.bullet.mail.sp1.yahoo.com with NNFMP; 06 Nov 2009 20:24:49 -0000\r\nX-Received: from [98.137.34.184] by t9.bullet.mail.sp1.yahoo.com with NNFMP; 06 Nov 2009 20:24:49 -0000\r\nDate: Fri, 06 Nov 2009 20:24:47 -0000\r\nTo: rest-discuss@yahoogroups.com\r\nMessage-ID: &lt;hd20mf+g7bv@...&gt;\r\nIn-Reply-To: &lt;DBC95369-04D2-4566-8C38-574ACF291AC7@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;ISO-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-Yahoo-Newman-Property: groups-compose\r\nX-eGroups-Msg-Info: 1:6:0:0:0\r\nFrom: &quot;wahbedahbe&quot; &lt;andrew.wahbe@...&gt;\r\nSubject: Re: Service descriptions and legal contracts\r\nX-Yahoo-Group-Post: member; u=221173245; y=mXD7mEKVGCi5fL4oRh5gipwnFdnwgM6_MDozlfdO9xeQB4ge9g\r\nX-Yahoo-Profile: wahbedahbe\r\n\r\n\n\n--- In rest-discuss@yahoogroups.com, Jan Algermissen &lt;algermissen1971@...=\r\n&gt; wrote:\n&gt;\n&gt; \n&gt; On Nov 6, 2009, at 6:45 AM, wahbedahbe wrote:\n&gt; \n&gt; &gt; I&#39;ve b=\r\neen encouraging folks on this list to look at CCXML for a long  \n&gt; &gt; time, =\r\nbut as far as I know I haven&#39;t convinced anyone to spend the  \n&gt; &gt; time. He=\r\ny -- maybe CCXML isn&#39;t RESTful after all; it certainly has a  \n&gt; &gt; differen=\r\nt flavor than most of the media types coming from the REST  \n&gt; &gt; community.=\r\n I&#39;d love to get all of your feedback; maybe I&#39;m missing  \n&gt; &gt; something. B=\r\nut if it isn&#39;t then perhaps the as yet to be formally  \n&gt; &gt; defined style b=\r\nehind CCXML is a good alternative to REST for machine  \n&gt; &gt; to machine inte=\r\nraction. It certainly seems to have many of the  \n&gt; &gt; properties most reade=\r\nrs of this list are looking for.\n&gt; \n&gt; \n&gt;  From the TR: &quot;A CCXML session beg=\r\nins with the execution of a CCXML  \n&gt; document.&quot;\n&gt; \n&gt; Now, my understanding=\r\n might be wrong because I dod not have the time  \n&gt; to put my head into the=\r\n spec, but the above quote sounds a lot like  \n&gt; that the coordination betw=\r\neen components in CCXML is achieved by  \n&gt; passing code (executable documen=\r\nts) around. To be RESTful the  \n&gt; coordination should be achieved by passin=\r\ng representations of state  \n&gt; around.\n&gt; \n&gt; Can you provide us with an exam=\r\nple of a typical interaction?\n&gt; \n&gt; Jan\n\nA CCXML document describes a state =\r\nmachine for processing events raised up to the client. For each type of eve=\r\nnt fired, the document describes the transition -- the next state as well a=\r\ns the &quot;actions&quot; to be taken on the transition. This could be events sent ba=\r\nck down to the underlying platform, the execution of some javascript or it =\r\ncould describe a page transition.\n\nThe entire service is composed of a set =\r\nof mini-state machine documents. A GET or a POST can be used to transition =\r\nfrom document to document. Javascript variables can be marshalled into the =\r\nquery string of a GET or the body of a POST much like an HTML form (though =\r\nthe syntax is very different as this is not a form abstraction). Also, ther=\r\ne is no PUT or DELETE support like in (current) HTML.\n\nPage transitions are=\r\n kind of interesting in CCXML because they are broken into two steps. First=\r\n, a &lt;fetch&gt; tag is executed on a page transition that tells the client to p=\r\nerform the GET or POST. An event is fired when the request is complete and =\r\nthe page is parsed and ready to go. A &lt;goto&gt; tag can then be executed to co=\r\nmplete the transition. This model is used to allow the state machine to con=\r\ntinue handling events during page transitions. Ancillary script resources c=\r\nan be handled in a similar way with &lt;fetch&gt; and &lt;script&gt; (though &lt;script&gt; c=\r\nan also just use a src attribute in which case the script is fetched and pa=\r\nrsed when the parent ccxml document is first being prepared for execution).=\r\n\n\nIn HTML, a good portion of the javascript processing is focused on handli=\r\nng events. This is the same in CCXML, but here the scripts do not modify a =\r\nDOM -- the ccxml markup describes the state machine being executed and a st=\r\nate machine that changes as it executes would likely make most developers h=\r\neads explode! The objects exposed to the script are objects controlled by t=\r\nhe client -- calls, conferences and dialogs (an automated phone system sess=\r\nion, usually implemented in VoiceXML -- http://www.w3.org/TR/voicexml20/). =\r\nI think perhaps the window object would be a good HTML analog.\n\nThe events =\r\nin ccxml are mostly describing changes to these objects (though some are re=\r\nlated to the document execution, e.g. &quot;your &lt;fetch&gt; completed&quot;). So an even=\r\nt might signify that caller A hung up. The messages/events sent down to the=\r\n platform on a state transition are primarily used to invoke methods on tho=\r\nse objects. You get an event back when your method completed. e.g. You send=\r\n a message to join callers A and B together so they can hear each other and=\r\n get an event back when the join completed. This is not implemented as simp=\r\nle javascript calls as asynchrony is important so that the state machine is=\r\n never blocked. You could use asynchronous javascript functions I suppose, =\r\nbut the event handling is the primary purpose of the document format so the=\r\n markup expresses event handling as much as possible.\n\nThat&#39;s sort of a lon=\r\ng intro to CCXML. Sorry about that, but I thought it was necessary to estab=\r\nlish a bit of common ground on the format before answering your questions. =\r\nSome of the simple examples in the spec might be worth a quick read at this=\r\n point: http://www.w3.org/TR/ccxml/#SimpleExamples\n\nSo back to your questio=\r\nns...\n\nIs a CCXML document executable? Yes. But I&#39;d argue that an HTML docu=\r\nment is too. It&#39;s funny, but when people look at HTML through REST-colored =\r\nglasses they seem to completely miss all of the event handling going on. A =\r\nhuge portion of the content of an HTML document is focused on handling inpu=\r\nt events. Even if you strip out the javascript and the on* attributes, the =\r\nmarkup is still telling the browser how to handle input events. The &lt;a&gt; ele=\r\nment tells the browser what to do when the presentation of the enclosed tex=\r\nt is &quot;activated&quot; (e.g. clicked). The &lt;form&gt; and &lt;input&gt; elements tell the b=\r\nrowser how to present controls with specific interaction semantics.\n\nMaybe =\r\nit&#39;s my own background in VoiceXML/CCXML but I&#39;ve always thought of markup =\r\nas &quot;executable&quot; -- a mini-program in a declarative form. The declarative fo=\r\nrmat makes the program semantics more visible and allows tools and spiders =\r\nto deal with the markup more easily to provide &quot;secondary&quot; types of documen=\r\nt processing. e.g. what TBL describes as the Principle of Least Power: http=\r\n://www.w3.org/DesignIssues/Principles.html\n\nTo me &quot;code on demand&quot; means ad=\r\nding non-declarative executable content into the mix to provide functionali=\r\nty beyond what is expressable in declarative form at the expense of visibil=\r\nity. So because CCXML, VoiceXML, or event HTML markup can be seen as &quot;execu=\r\ntable&quot; does not instantly imply code-on-demand (well, CCXML is unnecessaril=\r\ny tied to Javascript, but you could envision an equivalent language that di=\r\ndn&#39;t require it).\n\nNow, can you view a CCXML document as a representation o=\r\nf resource state? I think so. Consider a Google Voice like service that all=\r\nows a single phone number to be used to contact you at a number of alternat=\r\ne numbers (your home, office and cell phone) and send the call to voice mai=\r\nl if you don&#39;t answer any of them. A resource here might be a single user&#39;s=\r\n settings for the service, specifying the phone numbers to try and in what =\r\norder, the number of seconds to wait on each number before sending the call=\r\n to voicemail, etc.\n\nThe standard approach most REST practitioners would ta=\r\nke here would be to cook up an XML or JSON format for this data and stick i=\r\nt behind a URI. The same XML/JSON would be served to say an Ajax interface =\r\nfor editing the data and to the system that actually implemented the call c=\r\nontrol service that tried to reach you.\n\nI consider this a non-self-descrip=\r\ntive message because it&#39;s using a service-specific, non-standard format. Al=\r\nl clients would be bound to the service because they are bound to it&#39;s form=\r\nat. Instead, content negotiation should be used to represent the resource i=\r\nn a format specific to the requesting client. So serve the HTML page to vie=\r\nw and edit the user&#39;s settings to a web browser and serve the CCXML state m=\r\nachine that represented those settings to the call control system. The CCXM=\r\nL state machine is a representation of those settings, just as the HTML web=\r\n page is a representation. Here the clients support their native markup for=\r\nmats and are not bound to the service at all.\n\nIf you&#39;ve got this far in th=\r\ne email, then thanks for reading -- this was a lot longer than I anticipate=\r\nd, but hopefully it gets the idea across.\nRegards,\n\nAndrew\n\n\n\n\n"}}
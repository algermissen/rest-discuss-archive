{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":69164307,"authorName":"mike amundsen","from":"mike amundsen &lt;mamund@...&gt;","profile":"mamund","replyTo":"SENDER","senderId":"MSRliZ5wWCYaqaDgajqKIKeWF5S0sXcGNUX-vAO0XOrKoGSsZgEwocUWZsx4d29Lu-7g2vhFGjn-NDjgOKW-zXsSlOa-tLI","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Re: RESTful URLs?","postDate":"1233859612","msgId":12087,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGI1NDhkZjY1MDkwMjA1MTA0NncyYTk1NDAzOHVmZWY4YzVkMjljZTZiYTFmQG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PGVjZjM1YTFiMDkwMjA1MDkyNnMzNzM3NDUxc2Q3N2RjZmEyOGRlYWFmNzJAbWFpbC5nbWFpbC5jb20+","referencesHeader":"PDQ5ODUyMjVBLjMwODA5MDRAZ21haWwuY29tPgkgPDIwMDkwMjAyMTM0MjQ3LkdBMjA2MThAa2xhbmdyYXVtLnBsYXNtYXN0dXJtLm9yZz4JIDxhNmE2ZGYzNjA5MDIwMjA3MzZpMWRjMzBlYTF3NDc5MTJlNmEyZjE4MjI1ZEBtYWlsLmdtYWlsLmNvbT4JIDxlY2YzNWExYjA5MDIwNTA5MjZzMzczNzQ1MXNkNzdkY2ZhMjhkZWFhZjcyQG1haWwuZ21haWwuY29tPg=="},"prevInTopic":12086,"nextInTopic":12088,"prevInTime":12086,"nextInTime":12088,"topicId":12048,"numMessagesInTopic":54,"msgSnippet":"FWIW, my views are as follows: First, I know of nothing un-REST-full about bookmarking. I see no reasoning deep-linking is un-REST-ful or evidence that","rawEmail":"Return-Path: &lt;mca@...&gt;\r\nX-Sender: mca@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 92146 invoked from network); 5 Feb 2009 18:46:54 -0000\r\nX-Received: from unknown (66.218.67.95)\n  by m56.grp.scd.yahoo.com with QMQP; 5 Feb 2009 18:46:54 -0000\r\nX-Received: from unknown (HELO fg-out-1718.google.com) (72.14.220.155)\n  by mta16.grp.scd.yahoo.com with SMTP; 5 Feb 2009 18:46:53 -0000\r\nX-Received: by fg-out-1718.google.com with SMTP id l26so257904fgb.31\n        for &lt;rest-discuss@yahoogroups.com&gt;; Thu, 05 Feb 2009 10:46:52 -0800 (PST)\r\nMIME-Version: 1.0\r\nX-Received: by 10.223.117.1 with SMTP id o1mr430949faq.96.1233859612606; Thu, 05 \n\tFeb 2009 10:46:52 -0800 (PST)\r\nIn-Reply-To: &lt;ecf35a1b0902050926s3737451sd77dcfa28deaaf72@...&gt;\r\nReferences: &lt;4985225A.3080904@...&gt;\n\t &lt;20090202134247.GA20618@...&gt;\n\t &lt;a6a6df360902020736i1dc30ea1w47912e6a2f18225d@...&gt;\n\t &lt;ecf35a1b0902050926s3737451sd77dcfa28deaaf72@...&gt;\r\nDate: Thu, 5 Feb 2009 13:46:52 -0500\r\nX-Google-Sender-Auth: 1859f899496e912e\r\nMessage-ID: &lt;b548df650902051046w2a954038ufef8c5d29ce6ba1f@...&gt;\r\nTo: rest-discuss@yahoogroups.com\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: mike amundsen &lt;mamund@...&gt;\r\nSubject: Re: [rest-discuss] Re: RESTful URLs?\r\nX-Yahoo-Group-Post: member; u=69164307; y=wLmdCa9Vk8GVL1Xsp5MkQ5yf3K7ck9yfvOX2slCiGMoA\r\nX-Yahoo-Profile: mamund\r\n\r\nFWIW, my views are as follows:\n\nFirst, I know of nothing &quot;un-REST-full&quot; about bookmarking. I see no\nreasoning &quot;deep-linking&quot; is &quot;un-REST-ful&quot; or evidence that it is\ndiscouraged by the the REST style. In fact, the one use of the term in\nChap5 of Fielding&#39;s dissertation speaks rather positively on the use\nof bookmarks:\n&quot;The application state is controlled and stored by the user agent and\ncan be composed of representations from multiple servers. In addition\nto freeing the server from the scalability problems of storing state,\nthis allows the user to directly manipulate the state (e.g., a Web\nbrowser&#39;s history), anticipate changes to that state (e.g., link maps\nand prefetching of representations), and jump from one application to\nanother (e.g., bookmarks and URI-entry dialogs).&quot;[1]\n\nSecond, IMO, bookmarks are orthogonal to URI design. Once an item is\nbookmarked the user agent need not care about the actual composition\nof the URI - as long as it continues to resolve properly.\n\nThird, URI templating is also orthogonal to URI design. Sure, a sane\ndesign makes automating the generation of URIs easier to deal with,\nbut that&#39;s as far as I see it going. A server-side URI generator that\nproduces random numbers is no better/worse than one that goes to great\npains to build a more complex URI that contains separators and the\nlike - as long as it continues to resolve properly.\n\nFourth, resolving URIs properly is the work of the server and, while\n&quot;Cool URIs don&#39;t change&quot; [2], implementing a design that *requires*\nURIs never change is a (possibly fatal) self-inflicted wound. If the\nserver finds a need to start generating different URIs for existing\nresources, it is the server&#39;s responsibility to deal with the &#39;old&#39;\nURIs that might still be out in the wild. URI rewriters are a\nwonderful thing. Also, there are many cases where bookmarked URIs\nshould return 410 Gone. This is not a bad thing and should not be\ndiscouraged.\n\nThat said, things can be thought of differently if you assume the\n*user agent* is in charge of building the URIs in order to advance the\nstate of the application. In that case, the server must send to the\nuser agent all the necessary information to allow the user agent to\nconstruct the proper URIs for use. This might be in the form of a\nscript, a set of templates and rules, or, if the user agent doing the\nURI constructing is a human, it might take the form of an &#39;easily\ngrok-able&#39; pattern in the existing URIs that make things more\n&#39;hackable.&#39;  In that case it seems desirable to have a URI design that\n&#39;makes sense&#39; (to humans, usually) in order to ease the construction.\nThis desirability, however, has nothing to do with REST.\n\nFinally, IMO, the more one relies on the user agent to construct URIs,\nthe less REST-ful the application. This is especially true of the\nemerging set of &#39;Data API&#39; implementations. And that is the point of\nthe &quot;limited entry URIs&quot; notion. If you want your data to be useful to\na wide range of non-human user agents, don&#39;t require these non-human\nuser agents to have a great deal of fore-knowledge about the URIs in\nyour application. Instead, *tell* the user agent what those possible\nURIs are by sending links with every response.\n\n\nmca\nhttp://amundsen.com/blog/\n\n[1] http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm#sec_5_3_3\n[2] http://www.w3.org/Provider/Style/URI\n\n\n\nOn Thu, Feb 5, 2009 at 12:26, Devdatta &lt;dev.akhawe@...&gt; wrote:\n&gt; I don&#39;t know but it seems to me that the discussion has gone into\n&gt; HATEOAS instead of talking about the issues Nick has raised (seeing\n&gt; Nick&#39;s points I think he understand HATEOAS pretty well) -- I will try\n&gt; and address them in what little way I can and hopefully it will also\n&gt; bring back the discussion to the issues Nick raised (which I think are\n&gt; really interesting )\n&gt;\n&gt; 2009/2/2 Nick Gall &lt;nick.gall@...&gt;:\n&gt;&gt; On Mon, Feb 2, 2009 at 8:42 AM, Aristotle Pagaltzis &lt;pagaltzis@...&gt;\n&gt;&gt; wrote:\n&gt;&gt;&gt; If anything is important in that sense, then it&#39;s the design of\n&gt;&gt;&gt; your resource representations: where do hyperlinks go? What does\n&gt;&gt;&gt; a particular form of link mean? Ie. what does it imply about the\n&gt;&gt;&gt; operations you can expect to be able to perform on the target of\n&gt;&gt;&gt; the link? These are the things that a client has to know in order\n&gt;&gt;&gt; to operate a REST service.\n&gt;&gt;&gt;\n&gt;&gt;&gt; The structure of URIs, in contrast, is a server implementation\n&gt;&gt;&gt; detail that the client neither need nor should care about.\n&gt;&gt;\n&gt;&gt; (I know I&#39;m going to regret asking this, but it&#39;s been bothering me for so\n&gt;&gt; long that I have to ask it.)\n&gt;&gt;\n&gt;&gt; I think the concept of (promiscuous) bookmarking means that the client\n&gt;&gt; effectively does care (or at least becomes dependent upon) the structure of\n&gt;&gt; URIs.\n&gt;\n&gt; Why ? The client becomes dependant on the URI ... but not the\n&gt; structure .. I bookmark the URI, not assume a template from it. The\n&gt; only case of promiscuous bookmarking of a template I can think of is\n&gt; the use of search engines in browsers.\n&gt;\n&gt;&gt; What&#39;s been bothering me for a long time is that I think there is a\n&gt;&gt; fundamental tension between REST&#39;s concept of &quot;bookmarks as limited set of\n&gt;&gt; entry points&quot; and the Web&#39;s concept of &quot;URIs for everything&quot;.\n&gt;&gt; When I read some of the posts in this list, including those by Roy Fielding\n&gt;&gt; himself, I sometimes get the sense that &quot;entry point&quot; URIs should be kept to\n&gt;&gt; a bare minimum in order to minimize the &quot;dependency surface area&quot; between\n&gt;&gt; clients and servers. For example, Roy made this comment about bookmarks:\n&gt;&gt; &quot;REST is limited to the client being told what to do next by the current\n&gt;&gt; state of where they are now, aside from the entry point(s) we call a\n&gt;&gt; bookmark.&quot;\n&gt;\n&gt; My view is that bookmarking templates is fine as long as it is limited\n&gt; to a few important starting points (like a search engine).\n&gt;\n&gt;&gt; In other words, bookmarks are an aside -- only a relative handful of URIs\n&gt;&gt; should be &quot;bookmarked&quot; by clients. But isn&#39;t one of the core principles of\n&gt;\n&gt; And this handful could contain a template too ...\n&gt;\n&gt; Bottom line .. bookmarking should be limited - whether thats template\n&gt; or URI itself.\n&gt;\n&gt;&gt; the Web the idea that any URI should be bookmarkable and that bookmarking is\n&gt;&gt; to be encouraged? And remember, bookmarking doesn&#39;t just mean putting the\n&gt;&gt; URI into a list of favorites in a browser. It also means the client\n&gt;&gt; embedding that URI into a representation that it passes along to some other\n&gt;&gt; client. Sometimes the REST talk of URI &quot;entry points&quot; seems like an implicit\n&gt;&gt; rejection of deep linking, ie forbidding linking to any site page other than\n&gt;&gt; a site&#39;s main or home page. And a rejection of deep linking is fundamentally\n&gt;&gt; at odds with the core principles of the Web.\n&gt;\n&gt; Yeah .. I have noticed this too .. I don&#39;t have an answer to this --\n&gt; it does look like it is against the concept of deep linking.\n&gt;\n&gt; I think (in a wild guess) , that you can deep link inside a website,\n&gt; to the start of an application/transaction - but not deep link inside\n&gt; it somewhere (as I said this is very crude and I don&#39;t know the answer\n&gt; )\n&gt;\n&gt;&gt; If promiscuous bookmarking is indeed encouraged by the Web (and by REST),\n&gt;&gt; then a well designed system must assume that any URI that appears in any\n&gt;&gt; representation it returns could someday be used as an &quot;entry point&quot;. In\n&gt;&gt; which case the system must assume that the world of clients is potentially\n&gt;&gt; dependent on the entire structure of its initial &quot;network&quot; of  URIs -- not\n&gt;&gt; just a handful of designated &quot;entry point&quot; URIs. In other words the ratio of\n&gt;&gt; bookmarked (entry point) URIs to all the URIs returned in representations\n&gt;&gt; isn&#39;t extremely small, its potentially one-to-one.\n&gt;&gt; To put it another way, what&#39;s the difference in the degree or nature of the\n&gt;&gt; dependency, from the server&#39;s POV, between:\n&gt;&gt;\n&gt;&gt; The entire set of URIs it has ever returned in representations being\n&gt;&gt; bookmarked by clients and then used later as entry points; and\n&gt;&gt; Clients generating such entry-point URIs via URI templates and a scripting\n&gt;&gt; language\n&gt;&gt;\n&gt;&gt; Conceptually the difference is that (2) can generate novel URIs that were\n&gt;&gt; never returned in any representation. For example, a geospatial system could\n&gt;&gt; have returned millions of lat/long URIs in various representations over the\n&gt;&gt; years, but never returned one with the specific lat/long that a client\n&gt;&gt; script generates, eg no one had ever asked about THAT part of the Pacific\n&gt;&gt; yet.\n&gt;\n&gt; I think , the server should encourage people to bookmark only a\n&gt; particular set of URIs. A (not good) example is how blogs require you\n&gt; to permalink instead of the page you are viewing . If the user doesn&#39;t\n&gt; follow what the server asked it to do, then he/she would end up in a\n&gt; mess (which won&#39;t be server&#39;s fault).\n&gt;\n&gt;\n&gt;\n&gt;&gt; But pragmatically there seems to me to be no difference at all. In other\n&gt;&gt; words, the idea that one can substantially reduce the dependencies between\n&gt;&gt; clients and servers by returning a network of URIs in representations\n&gt;&gt; (HATEOAS) instead of explicitly documenting the URI templates that could\n&gt;&gt; generate them, seems only to work if one prohibits or at least discourages\n&gt;&gt; promiscuous bookmarking of URIs, ie prohibits deep linking by REST clients.\n&gt;&gt; This is why I think the structure of URIs IS important and the use of URI\n&gt;&gt; templates is NOT suspect. Do others see this as a tension as well, or I am\n&gt;&gt; just misunderstanding something?\n&gt;&gt;\n&gt;\n&gt; I think I am also misunderstanding things .. we need Roy here I think :)\n&gt;\n&gt; But I do see the tension!\n&gt;\n&gt; Cheers\n&gt; Devdata\n&gt;\n&gt;\n&gt; ------------------------------------\n&gt;\n&gt; Yahoo! Groups Links\n&gt;\n&gt;\n&gt;\n&gt;\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":4981751,"authorName":"Mark Nottingham","from":"&quot;Mark Nottingham&quot; &lt;mnot@...&gt;","profile":"mnotting","replyTo":"SENDER","senderId":"smEDiRTvt5cr2dkFMObJjQuQi2RWKr-NIs4l-hvcU9ewdV_KNECiXeQep-Y0ExrVkk5TBdY_416BLhQa1DujVu9MwOYnND5b","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Beating my head against the &quot;session management&quot; wall","postDate":"1030388299","msgId":2228,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDAwY2MwMWMyNGQzMiQ4YzM3NjdhMCQyODBiYThjMEBtbm90bGFwdG9wPg==","referencesHeader":"PDAwMDkwMWMyNGNhYSRjNTRhYTUzMCQ2NDAwYThjMEBzZWFpcnRobGFwdG9wPiA8MDEzZTAxYzI0Y2MyJGY1MzkzYTUwJDI2MGJhOGMwQG1ub3RsYXB0b3A+IDwwMDEwMDFjMjRkMDkkYjhhZjVkMjAkNjQwMGE4YzBAc2VhaXJ0aGxhcHRvcD4="},"prevInTopic":2222,"nextInTopic":2229,"prevInTime":2227,"nextInTime":2229,"topicId":2217,"numMessagesInTopic":13,"msgSnippet":"My pop culture references weren t meant to answer your questions; I was hoping/assuming that someone more REST enlightened than I would do so. Since noone has,","rawEmail":"Return-Path: &lt;mnot@...&gt;\r\nX-Sender: mnot@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_1_0_1); 26 Aug 2002 18:59:27 -0000\r\nReceived: (qmail 31095 invoked from network); 26 Aug 2002 18:59:27 -0000\r\nReceived: from unknown (66.218.66.216)\n  by m7.grp.scd.yahoo.com with QMQP; 26 Aug 2002 18:59:27 -0000\r\nReceived: from unknown (HELO mail.mnot.net) (67.119.69.242)\n  by mta1.grp.scd.yahoo.com with SMTP; 26 Aug 2002 18:59:26 -0000\r\nReceived: from mnotlaptop (unknown [63.96.163.118])\n\t(using TLSv1 with cipher RC4-MD5 (128/128 bits))\n\t(No client certificate requested)\n\tby mail.mnot.net (Postfix) with ESMTP id EFDE372BB\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Mon, 26 Aug 2002 11:59:24 -0700 (PDT)\r\nMessage-ID: &lt;00cc01c24d32$8c3767a0$280ba8c0@mnotlaptop&gt;\r\nTo: &quot;rest-discuss&quot; &lt;rest-discuss@yahoogroups.com&gt;\r\nReferences: &lt;000901c24caa$c54aa530$6400a8c0@seairthlaptop&gt; &lt;013e01c24cc2$f5393a50$260ba8c0@mnotlaptop&gt; &lt;001001c24d09$b8af5d20$6400a8c0@seairthlaptop&gt;\r\nSubject: Re: [rest-discuss] Beating my head against the &quot;session management&quot; wall\r\nDate: Mon, 26 Aug 2002 11:58:19 -0700\r\nMIME-Version: 1.0\r\nContent-Type: text/plain;\n\tcharset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: 7bit\r\nX-Priority: 3\r\nX-MSMail-Priority: Normal\r\nX-Mailer: Microsoft Outlook Express 6.00.2600.0000\r\nX-MimeOLE: Produced By Microsoft MimeOLE V6.00.2600.0000\r\nFrom: &quot;Mark Nottingham&quot; &lt;mnot@...&gt;\r\nX-Yahoo-Group-Post: member; u=4981751\r\nX-Yahoo-Profile: mnotting\r\n\r\nMy pop culture references weren&#39;t meant to answer your questions; I was\nhoping/assuming that someone more REST enlightened than I would do so.\n\nSince noone has, here are my thoughts;\n\nHTTP authentication clearly involves keeping state on the client; as such,\nwhenever I try to resource model an application, this is the main means of\nidentifying a client in order to tailor information for it. As you\nsurmise, cookies are often used in place of HTTP authentication because\nthey can be persistent across invocations of the browser (although modern\nbrowsers address this with a &#39;password store&#39; mechanism), they can be\ndeleted, and because there is more control over the UI. Authentication,\nOTOH, has advantages in that the state can be incorporated into the URI\n(cookies can&#39;t), and the mechanism is standardized, allowing for machines\nto present credentials (this could be possible with cookies, but\npractically, it&#39;s impossible; they&#39;d have to understand your specific\nauthentication scheme).\n\nDoing it in the request body (POST) is clearly not RESTful, and doing it\ncorrectly with the URI query is tricky at best, IMHO.\n\nSo, when choosing between these mechanisms, I prefer HTTP authentication\nwherever possible; if you investigate modern browsers, you should find\nthat Digest has been implemented correctly (I use it opften with IE6,\nMozilla and Amaya; IIRC it also works on Opera).\n\nAll of this notwithstanding, and most importantly, if you approach your\napplication from a model of &#39;sessions&#39; (which most environments encourage\nyou to do), you&#39;ll find it very hard to keep it RESTful. Model your\napplication as resources which expose state as representations, and the\nissue of sessions will (hopefully) dissolve into the background, for the\nmost part.\n\nArchitecting applications that don&#39;t require client state brings many\nbenefits. Witness search engines, translation services, annotation\nservices, shared caching, &#39;this page has changed&#39; bots, etc., etc.\nRequiring client state reduces the effectiveness or even eliminates these\nbenefits, and locks your users into exactly one way of seeing the data:\nthe way that you lead them through it. While this is attractive to the\napplication developer, it isn&#39;t to users, and hence ultimately reduces the\npotential benefit of making the application part of the Web.\n\nRegards,\n\n\n----- Original Message -----\nFrom: &quot;Seairth Jacobs&quot; &lt;seairth@...&gt;\nTo: &quot;rest-discuss&quot; &lt;rest-discuss@yahoogroups.com&gt;\nSent: Monday, August 26, 2002 7:06 AM\nSubject: Re: [rest-discuss] Beating my head against the &quot;session\nmanagement&quot; wall\n\n\n&gt; That wasn&#39;t helpful at all (with apologies :)).  If &quot;there is no\nsession&quot;\n&gt; means to say that you get rid of the concept of sessions when using the\nREST\n&gt; model, then I honestly do not see how REST could be successfully applied\nto\n&gt; the majority of existing web applications today.  Further, if anyone\n&gt; considers HTTP authentication to not be a session-handling method\n(though I\n&gt; know you didn&#39;t say this), I strongly disagree.\n&gt;\n&gt; And what do you mean by the second quote?\n&gt;\n&gt;\n&gt; If these quotes are the answers to my session-handling issues, then I\n&gt; obviously have a gross misunderstanding about how REST is meant to\nwork...\n&gt;\n&gt; ---\n&gt; Seairth Jacobs\n&gt; seairth@...\n&gt;\n&gt;\n&gt; ----- Original Message -----\n&gt; From: &quot;Mark Nottingham&quot; &lt;mnot@...&gt;\n&gt;\n&gt; &gt; This may be helpful:\n&gt; &gt;\n&gt; &gt;   &quot;There is no session&quot;\n&gt; &gt;\n&gt; &gt; and\n&gt; &gt;\n&gt; &gt;   &quot;You&#39;ll come to realize, as I did, that there&#39;s a difference between\n&gt; &gt; knowing the resource and representing the resource.&quot;\n&gt; &gt;\n&gt; &gt; (with apologies)\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt; ----- Original Message -----\n&gt; &gt; From: &quot;Seairth Jacobs&quot; &lt;seairth@...&gt;\n&gt; &gt; To: &quot;rest-discuss&quot; &lt;rest-discuss@yahoogroups.com&gt;\n&gt; &gt; Sent: Sunday, August 25, 2002 7:46 PM\n&gt; &gt; Subject: [rest-discuss] Beating my head against the &quot;session\nmanagement&quot;\n&gt; &gt; wall\n&gt; &gt;\n&gt; &gt;\n&gt; &gt; &gt; *sigh*  Do you ever have the feeling that the solutions set before\nyou\n&gt; &gt; are\n&gt; &gt; &gt; all not-quite-good-enough, each in their own way?  Currently, this\nis\n&gt; &gt; how I\n&gt; &gt; &gt; am feeling about session management when it comes to REST...\n&gt; &gt; &gt;\n&gt; &gt; &gt; Known options:\n&gt; &gt; &gt;\n&gt; &gt; &gt; 1) HTTP Authentication:  This is a simple, non-intrusive solution.\n&gt; &gt; However,\n&gt; &gt; &gt; &quot;basic&quot; is insecure and &quot;digest&quot; is not consistently implemented.\n&gt; &gt; &gt;\n&gt; &gt; &gt; 2) Generating your own &quot;session id&quot;.  This has the problem that you\nmust\n&gt; &gt; &gt; provide an &quot;intrusive&quot; login screen/process.  Further, you then need\nto\n&gt; &gt; &gt; continue tracking the session id.  With this, there are two\ntechniques\n&gt; &gt; &gt; (well, three sorta):\n&gt; &gt; &gt;\n&gt; &gt; &gt;     a) Session Cookie:  If done properly, this is effectively no\n&gt; &gt; different\n&gt; &gt; &gt; than http authentication in the sense that the browser is sending an\n&gt; &gt; &gt; &quot;authenticating&quot; identifier with each request.  Session cookies are\n&gt; &gt; somewhat\n&gt; &gt; &gt; nicer than http authentication in that they are potentially more\nsecure\n&gt; &gt; (if\n&gt; &gt; &gt; done correctly) and that it is easier for the server to handle them\n&gt; &gt; (e.g.\n&gt; &gt; &gt; deleting them, updating them, etc.).  The major down side is that\n&gt; &gt; current\n&gt; &gt; &gt; browsers allow the users to reject session cookies.\n&gt; &gt; &gt;\n&gt; &gt; &gt;     b) Query String:  This one, from a REST POV, seems like a really\nbad\n&gt; &gt; &gt; technique.  This effectively creates non-permanent unique URL spaces\nfor\n&gt; &gt; &gt; each user session.  Further, the session id may not actually be\nrelated\n&gt; &gt; to\n&gt; &gt; &gt; the resource that the URL (with the query string) is pointing to.\n&gt; &gt; However,\n&gt; &gt; &gt; the good thing about query strings is that, short of a user typing\nan\n&gt; &gt; &gt; address into the browser or using a stored link, the server has\ncontrol\n&gt; &gt; over\n&gt; &gt; &gt; them and the user does not have the ability to reject them.\n&gt; &gt; &gt;\n&gt; &gt; &gt;     c) Hidden Field: if you are not using the QueryString method and\nare\n&gt; &gt; &gt; have a form, you could put the session id in a hidden field.\nHowever,\n&gt; &gt; you\n&gt; &gt; &gt; are then limited to using only the POST method.  Otherwise, the\nbrowser\n&gt; &gt; will\n&gt; &gt; &gt; generate a URL with your hidden field showing up in a QueryString.\nBut,\n&gt; &gt; if\n&gt; &gt; &gt; the request is guaranteed to be idempotent, then it is my\nunderstanding\n&gt; &gt; that\n&gt; &gt; &gt; the GET method should be used, not POST.\n&gt; &gt; &gt;\n&gt; &gt; &gt;\n&gt; &gt; &gt; Now, I know that all of the above methods (with the possible\nexception\n&gt; &gt; of\n&gt; &gt; &gt; digest authentication, if done correctly and at a certain cost)\nstill\n&gt; &gt; allows\n&gt; &gt; &gt; someone to sniff the connection and get enough information to\n&gt; &gt; potentially\n&gt; &gt; &gt; mimic the session.  This could all be taken care of using SSL (at\nwhich\n&gt; &gt; &gt; point, even basic authentication is secure), but that seems to be\nadding\n&gt; &gt; a\n&gt; &gt; &gt; lot of overhead.  When I only need to authenticate the request, not\n&gt; &gt; secure\n&gt; &gt; &gt; the response, this seems like overkill (and it can be expensive\ntoo).\n&gt; &gt; &gt;\n&gt; &gt; &gt;\n&gt; &gt; &gt;\n&gt; &gt; &gt; Frankly, I think I am leaning towards session cookies at this point.\n&gt; &gt; Since\n&gt; &gt; &gt; the site will primarily be for web developers, I am hoping that they\nat\n&gt; &gt; &gt; least accept session cookies.  I would have liked to go the HTTP\n&gt; &gt; &gt; authentication route, but it just seems to unsecure for my taste\n&gt; &gt; &gt; (considering the fact that I am not using SSL).  If anyone out there\ncan\n&gt; &gt; &gt; convince my why I should not follow this route, esp. as far as REST\nis\n&gt; &gt; &gt; concerned, please say so.  I really would like to be convinced of\n&gt; &gt; another\n&gt; &gt; &gt; method.\n&gt; &gt; &gt;\n&gt; &gt; &gt;\n&gt; &gt; &gt; IN THE MEANTIME....\n&gt; &gt; &gt;\n&gt; &gt; &gt; I have been thinking of this dilemma (the one above).  And I have an\n&gt; &gt; idea.\n&gt; &gt; &gt; I am wondering whether the idea would work well with the REST model\nor\n&gt; &gt; not.\n&gt; &gt; &gt; If it would, I would like to get a group of people together to\nformalize\n&gt; &gt; it\n&gt; &gt; &gt; and get it submitted to the right people.\n&gt; &gt; &gt;\n&gt; &gt; &gt; What I propose is that web browsers should support a new HTTP header\n&gt; &gt; called\n&gt; &gt; &gt; &quot;session-id&quot;.  This header would conform to the following rules:\n&gt; &gt; &gt;\n&gt; &gt; &gt; 1) The header works sort of like a session cookie.  When the header\nis\n&gt; &gt; sent\n&gt; &gt; &gt; to the browser, you can specify the domain and path (http\nauthentication\n&gt; &gt; &gt; realm?) and an expiration timestamp.  The timestamp only ensures\nthat\n&gt; &gt; the\n&gt; &gt; &gt; header will stop being sent back to the server if the browser is not\n&gt; &gt; closed\n&gt; &gt; &gt; by that point.  Just like current cookies, setting the timestamp to\nthe\n&gt; &gt; past\n&gt; &gt; &gt; will cause the session-id header to become immediately stale.\n&gt; &gt; &gt;\n&gt; &gt; &gt; 2) THE USER MAY NOT REJECT THE HEADER.  Browsers that allow optional\n&gt; &gt; &gt; rejection will be considered NON-STANDARDS-COMPLIANT.  Proxies\nSHOULD\n&gt; &gt; NOT\n&gt; &gt; &gt; REJECT THE HEADER.  I would prefer to make this MAY NOT, but I doubt\nit\n&gt; &gt; &gt; would stick.  What are proxies allowed to do with the\nwww-authenticate\n&gt; &gt; &gt; header?\n&gt; &gt; &gt;\n&gt; &gt; &gt; 3) the www-authenticate and session-id headers are mutually\nexclusive.\n&gt; &gt; In\n&gt; &gt; &gt; other words, if a browser receives a session-id header which matches\nthe\n&gt; &gt; &gt; existing realm, the browser dumps the www-authenticate response and\nuses\n&gt; &gt; &gt; session-id instead.  This allows the http authentication methods to\n&gt; &gt; still be\n&gt; &gt; &gt; used, but also allows the request headers to be replaced with\nsomething\n&gt; &gt; that\n&gt; &gt; &gt; is more controllable by the server.\n&gt; &gt; &gt;\n&gt; &gt; &gt;\n&gt; &gt; &gt; Though I know that more thought needs to be put into the idea, I\nfeel it\n&gt; &gt; &gt; would provide the consistency of basic authentication, the\nflexibility\n&gt; &gt; and\n&gt; &gt; &gt; overhead of cookies, and the security of digest authentication.\nNote\n&gt; &gt; that\n&gt; &gt; &gt; it is not even necessary to use HTML forms, since http\nauthentication\n&gt; &gt; could\n&gt; &gt; &gt; be used as the first step then replaced as in #3 above.  However, if\none\n&gt; &gt; &gt; *really* wants the nice look, they could do that as well.\n&gt; &gt; &gt;\n&gt; &gt; &gt; So, what do you all think?  Would this interfere with the REST\nmodel?\n&gt; &gt; &gt;\n&gt; &gt; &gt; ---\n&gt; &gt; &gt; Seairth Jacobs\n&gt; &gt; &gt; seairth@...\n&gt; &gt; &gt;\n&gt; &gt; &gt;\n&gt; &gt; &gt;\n&gt; &gt; &gt;\n&gt; &gt; &gt;\n&gt; &gt; &gt; To unsubscribe from this group, send an email to:\n&gt; &gt; &gt; rest-discuss-unsubscribe@yahoogroups.com\n&gt; &gt; &gt;\n&gt; &gt; &gt;\n&gt; &gt; &gt;\n&gt; &gt; &gt; Your use of Yahoo! Groups is subject to\n&gt; &gt; http://docs.yahoo.com/info/terms/\n&gt; &gt; &gt;\n&gt; &gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt; To unsubscribe from this group, send an email to:\n&gt; &gt; rest-discuss-unsubscribe@yahoogroups.com\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt; Your use of Yahoo! Groups is subject to\nhttp://docs.yahoo.com/info/terms/\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt;\n&gt;\n&gt;\n&gt; To unsubscribe from this group, send an email to:\n&gt; rest-discuss-unsubscribe@yahoogroups.com\n&gt;\n&gt;\n&gt;\n&gt; Your use of Yahoo! Groups is subject to\nhttp://docs.yahoo.com/info/terms/\n&gt;\n&gt;\n\n\n"}}
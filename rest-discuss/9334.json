{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":192402827,"authorName":"Mike Dierken","from":"&quot;Mike Dierken&quot; &lt;dierken@...&gt;","profile":"mdierken","replyTo":"SENDER","senderId":"QjvN7zu33Xg8n5Ul-559lNO7lbOBwYCzIfMj7BkChlcA6Hxrq_1KtAiNv297-Q1lXAEUARwGrhMNIeOtfyTv9CUjqqKLIT6Lrg","spamInfo":{"isSpam":false,"reason":"0"},"subject":"RE: [rest-discuss] PUT or POST, idempotent for the application","postDate":"1183692529","msgId":9334,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDAwNDIwMWM3YmY3ZCRjNTNlNzM1MCQwMjAxYThjMEBtZXJjdXJ5Pg==","inReplyToHeader":"PDQ2OEQzQ0QwLjcwMjAzMDBAbWFuY2hlc3Rlci5hYy51az4=","referencesHeader":"PDQ2OEQzQ0QwLjcwMjAzMDBAbWFuY2hlc3Rlci5hYy51az4="},"prevInTopic":9333,"nextInTopic":9337,"prevInTime":9333,"nextInTime":9335,"topicId":9332,"numMessagesInTopic":4,"msgSnippet":"When you use PUT, the URI sent in the request is the identifier of the content within that message. So doing the following would replace the factory with a","rawEmail":"Return-Path: &lt;dierken@...&gt;\r\nX-Sender: dierken@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 19434 invoked from network); 6 Jul 2007 03:28:59 -0000\r\nReceived: from unknown (66.218.67.36)\n  by m37.grp.scd.yahoo.com with QMQP; 6 Jul 2007 03:28:59 -0000\r\nReceived: from unknown (HELO nz-out-0506.google.com) (64.233.162.235)\n  by mta10.grp.scd.yahoo.com with SMTP; 6 Jul 2007 03:28:59 -0000\r\nReceived: by nz-out-0506.google.com with SMTP id i1so73951nzh\n        for &lt;rest-discuss@yahoogroups.com&gt;; Thu, 05 Jul 2007 20:28:35 -0700 (PDT)\r\nDKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;\n        d=gmail.com; s=beta;\n        h=domainkey-signature:received:received:from:to:references:subject:date:message-id:mime-version:content-type:content-transfer-encoding:x-mailer:x-mimeole:thread-index:in-reply-to;\n        b=p3897w5iTPaBSankQTKDjkBwkTQJUFU741AVz87dHsb7tcz8sTzgcG6hrQ4QOe1F/RRhO7Rm2C1N1WJRHEUu22x930z+xed6mGnIYnbhcGklvkGJXFIVQl5xPnzFHrT0AChnI2LmRPCCt1Udo8gOKOOTYvmJZcnUYdRT8MEMpqU=\r\nReceived: by 10.115.55.1 with SMTP id h1mr246598wak.1183692515301;\n        Thu, 05 Jul 2007 20:28:35 -0700 (PDT)\r\nReturn-Path: &lt;dierken@...&gt;\r\nReceived: from mercury ( [67.165.117.15])\n        by mx.google.com with ESMTP id v37sm20911179wah.2007.07.05.20.28.34\n        (version=SSLv3 cipher=RC4-MD5);\n        Thu, 05 Jul 2007 20:28:35 -0700 (PDT)\r\nTo: &quot;&#39;Bruno Harbulot&#39;&quot; &lt;Bruno.Harbulot@...&gt;,\n\t&lt;rest-discuss@yahoogroups.com&gt;\r\nReferences: &lt;468D3CD0.7020300@...&gt;\r\nDate: Thu, 5 Jul 2007 20:28:49 -0700\r\nMessage-ID: &lt;004201c7bf7d$c53e7350$0201a8c0@mercury&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain;\n\tcharset=&quot;us-ascii&quot;\r\nContent-Transfer-Encoding: 7bit\r\nX-Mailer: Microsoft Office Outlook 11\r\nX-MimeOLE: Produced By Microsoft MimeOLE V6.00.2900.3138\r\nThread-Index: Ace/NYUQsW58pNLyTsi/vIt286baXwARvOQg\r\nIn-Reply-To: &lt;468D3CD0.7020300@...&gt;\r\nX-eGroups-Msg-Info: 1:0:0:0\r\nFrom: &quot;Mike Dierken&quot; &lt;dierken@...&gt;\r\nSubject: RE: [rest-discuss] PUT or POST, idempotent for the application\r\nX-Yahoo-Group-Post: member; u=192402827; y=2f_9TvhxythUNSTwToISt_yARIG_wYpwSvuMFSk4gdUV73Q\r\nX-Yahoo-Profile: mdierken\r\n\r\n\nWhen you use PUT, the URI sent in the request is the identifier of the\ncontent within that message.\nSo doing the following would replace the &#39;factory&#39; with a &#39;newItem&#39; blob:\nC: HTTP PUT to http://example.org/Factory containing &lt;newItemReq /&gt; \n\nOne difference between PUT and POST is that with PUT the client already\nknows the intended URI (the &#39;id&#39;) of the data being submitted. With POST,\nthe server might create a new identifier for the submitted data and the\nclients needs to receive the response to learn what that identifier is.\n\nIn order to activate the resource (acknowledge to the server that the client\nreceived the response) you are sending a PUT to the new resource with a\nparticular content type. Sending different content types via PUT gives rise\nto really long discussion threads on rest-discuss and I generally avoid\nthat.\n\nPerhaps you could request a new blank resource be created via a POST to the\nfactory, then populate that blank resource via a PUT with the actual content\nto be stored - this initializing PUT on a blank resource would be idempotent\nso simple retries would help get past some network failures. If the factory\nPOST didn&#39;t work, the client can retry but a different identifier would be\ncreated in that case - which is similar to how your design allows for\nun-acknowledged resouces to fade away and similar to what Mike Amundsen\nsuggested as well.\n\n\n\n\n&gt; -----Original Message-----\n&gt; From: rest-discuss@yahoogroups.com \n&gt; [mailto:rest-discuss@yahoogroups.com] On Behalf Of Bruno Harbulot\n&gt; Sent: Thursday, July 05, 2007 11:48 AM\n&gt; To: rest-discuss@yahoogroups.com\n&gt; Subject: [rest-discuss] PUT or POST, idempotent for the application\n&gt; \n&gt; Hello,\n&gt; \n&gt; \n&gt; Apologies if I revive last week&#39;s thread about POST being \n&gt; idempotent or not, but it got me confused on the choice \n&gt; between using POST or PUT in the system on which I&#39;m working, \n&gt; and idempotent messages matter in this case.\n&gt; \n&gt; \n&gt; We&#39;ve designed a system (which I believe complies with the REST\n&gt; principles) that relies on a client interacting with a \n&gt; resource to create other resources.\n&gt; \n&gt; \n&gt; To summarise how this system works, a client can ask the \n&gt; Factory resource to create Item resources. The process of \n&gt; creating an Item resource must follow two constraints:\n&gt;    - at the end of the process, the client must have created \n&gt; one Item resource and must know its URI;\n&gt;    - at the end of the process, the Factory resource must \n&gt; know that the client knows the new Item resource URI.\n&gt; \n&gt; Initially, we assume the client has been configured to know \n&gt; the URI of the Factory: http://example.org/Factory.\n&gt; \n&gt; The protocol we use is as follows (the numbers in the URIs are just\n&gt; examples):\n&gt; \n&gt; (phase 1: tentative)\n&gt; C: HTTP PUT to http://example.org/Factory containing &lt;newItemReq /&gt;\n&gt; S: HTTP 201 with Location: http://example.org/Item/1\n&gt; \n&gt; (phase 2: activation)\n&gt; C: HTTP PUT to http://example.org/Item/1 containing &lt;resActivator /&gt;\n&gt; S: HTTP 200 OK.\n&gt; \n&gt; \n&gt; An HTTP GET on http://example.org/Factory returns a list of \n&gt; all the Items that have been created and &#39;activated&#39; (i.e. of \n&gt; which the Factory knows that the client knows their address).\n&gt; If the Factory never receives the second PUT, the Item \n&gt; resource is not the list document. (Optionally, if the client \n&gt; interacts later with the Item resource, this may activate \n&gt; this resource anyway). Item resources that are not activated \n&gt; may be discarded at any time by the Factory (in which case \n&gt; the client would have to re-start the entire process.)\n&gt; \n&gt; Here is an example of what could go wrong and how this would \n&gt; be handled:\n&gt; \n&gt; (phase 1: tentative)\n&gt; C: HTTP PUT to http://example.org/Factory containing &lt;newItemReq /&gt;\n&gt; S: HTTP 201 with Location: http://example.org/Item/1\n&gt;    - the connection is lost and the new URI never reaches the client.\n&gt; \n&gt; (phase 1: another attempt)\n&gt; C: HTTP PUT to http://example.org/Factory containing &lt;newItemReq /&gt;\n&gt; S: HTTP 201 with Location: http://example.org/Item/2\n&gt; \n&gt; (phase 2: activation)\n&gt; C: HTTP PUT to http://example.org/Item/2 containing &lt;resActivator /&gt;\n&gt; S: HTTP 200 OK.\n&gt;    - the client knows the URI of the Item it has successfully \n&gt; created, and the factory knows that the client knows.\n&gt; \n&gt; \n&gt; \n&gt; The &#39;activation&#39; PUT is idempotent because sending it N+1 \n&gt; times has the \n&gt; same effect as sending it just once.\n&gt; \n&gt; I also think the first &#39;tentative&#39; PUT is idempotent, although it is \n&gt; more subtle. Effectively, whatever the URI returned in the tentative \n&gt; phase is does not matter, either to the client or to the \n&gt; factory. When \n&gt; taking into account the two phases, sending N+1 &#39;tentative&#39; PUT + an \n&gt; &#39;activation&#39; has the same result as sending only one tentative PUT \n&gt; followed by an activation: only one Item resource is \n&gt; activated and both \n&gt; the client and the server know about its URI.\n&gt; \n&gt; \n&gt; When reading Section 9.5 and 9.6 of RFC 2616, my use of PUT \n&gt; here is not \n&gt; appropriate, and it should probably be POST, in both cases, for two \n&gt; different reasons:\n&gt;    - the &#39;tentative&#39; PUT clearly does not comply with &quot;the \n&gt; URI in a PUT \n&gt; request identifies the entity enclosed with the request&quot; (in \n&gt; Section 9.6);\n&gt;    - the &#39;activation&#39; PUT might rather be considered as an \n&gt; &quot;annotation \n&gt; of existing resources&quot; (in Section 9.5).\n&gt; \n&gt; \n&gt; \n&gt; I&#39;m tempted to change these two PUTs into POSTs. However, I \n&gt; quite like \n&gt; the fact that PUT is intended to be idempotent. I believe the \n&gt; fact that \n&gt; a request is guaranteed to be idempotent is more important \n&gt; than &quot;the URI \n&gt; in a PUT request identifies the entity enclosed with the \n&gt; request&quot; when \n&gt; designing distributed systems.\n&gt; Obviously, the use of POST in this system may be idempotent, but it \n&gt; appears to me that it&#39;s a constraint that deserves to be given more \n&gt; importance, by using PUT. (By the way, to refer to last \n&gt; week&#39;s thread, \n&gt; my understanding of POST not being idempotent is that N+1 \n&gt; times the same \n&gt; request may or may not have the same effect as just one.)\n&gt; \n&gt; \n&gt; I&#39;m not sure which one is right between PUT and POST (in both cases), \n&gt; although I tend to think at least the &#39;tentative&#39; PUT ought to be a \n&gt; POST. Any comments appreciated.\n&gt; \n&gt; \n&gt; Best wishes,\n&gt; \n&gt; \n&gt; Bruno.\n&gt; \n&gt; \n&gt;  \n&gt; Yahoo! Groups Links\n&gt; \n&gt; \n&gt; \n\n\n"}}
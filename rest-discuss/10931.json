{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":147780944,"authorName":"Aristotle Pagaltzis","from":"Aristotle Pagaltzis &lt;pagaltzis@...&gt;","profile":"a22pag","replyTo":"SENDER","senderId":"ayiph3eoiIatPugIm9eDUYUwF-IUhJDr-HaBXZVUAQMlwFTLREejJqjAUptEKqQZGkUEY1DAFagnN3LGUDwWR6s2mM06FlLRxXa1f5o","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: How to model a missing method?","postDate":"1213222373","msgId":10931,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMDgwNjExMjIxMjUzLkdCMTcxODdAa2xhbmdyYXVtLnBsYXNtYXN0dXJtLm9yZz4=","inReplyToHeader":"PGU1YzZlY2FiMDgwNjEwMTY0MXc3YzJiMWEyYXc3NDhlZDAxNDhjNjgzYmZlQG1haWwuZ21haWwuY29tPg==","referencesHeader":"PDQ4NEUyRUFELjIwNDAwMDlAd2ViLmRlPiA8ZTVjNmVjYWIwODA2MTAwNjU1eDZmN2ZmZDkxbGYzNzM4MmZmZTBiYTIyN2NAbWFpbC5nbWFpbC5jb20+IDwyMDA4MDYxMDIyMTAzMS5HSjI1NDMzQGtsYW5ncmF1bS5wbGFzbWFzdHVybS5vcmc+IDxlNWM2ZWNhYjA4MDYxMDE2NDF3N2MyYjFhMmF3NzQ4ZWQwMTQ4YzY4M2JmZUBtYWlsLmdtYWlsLmNvbT4="},"prevInTopic":10924,"nextInTopic":0,"prevInTime":10930,"nextInTime":10932,"topicId":10884,"numMessagesInTopic":9,"msgSnippet":"... So don’t send an Expires header for /users/1234. ... Yes. My point is that as long as the semantics of a method in the context of an application are a","rawEmail":"Return-Path: &lt;pagaltzis@...&gt;\r\nX-Sender: pagaltzis@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 68817 invoked from network); 11 Jun 2008 22:12:56 -0000\r\nX-Received: from unknown (66.218.67.96)\n  by m44.grp.scd.yahoo.com with QMQP; 11 Jun 2008 22:12:56 -0000\r\nX-Received: from unknown (HELO mail.gmx.net) (213.165.64.20)\n  by mta17.grp.scd.yahoo.com with SMTP; 11 Jun 2008 22:12:55 -0000\r\nX-Received: (qmail invoked by alias); 11 Jun 2008 22:12:54 -0000\r\nX-Received: from static-87-79-236-202.netcologne.de (EHLO klangraum) [87.79.236.202]\n  by mail.gmx.net (mp067) with SMTP; 12 Jun 2008 00:12:54 +0200\r\nX-Authenticated: #163624\r\nX-Provags-ID: V01U2FsdGVkX19O0hx9fSNOyuF2hEb247zcTMBlRKMAgxTZVL2Fel\n\tam6qqOxxa6W7xa\r\nDate: Thu, 12 Jun 2008 00:12:53 +0200\r\nTo: Rest Discussion List &lt;rest-discuss@yahoogroups.com&gt;\r\nMessage-ID: &lt;20080611221253.GB17187@...&gt;\r\nMail-Followup-To: Rest Discussion List &lt;rest-discuss@yahoogroups.com&gt;\r\nReferences: &lt;484E2EAD.2040009@...&gt; &lt;e5c6ecab0806100655x6f7ffd91lf37382ffe0ba227c@...&gt; &lt;20080610221031.GJ25433@...&gt; &lt;e5c6ecab0806101641w7c2b1a2aw748ed0148c683bfe@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=utf-8\r\nContent-Disposition: inline\r\nContent-Transfer-Encoding: 8bit\r\nIn-Reply-To: &lt;e5c6ecab0806101641w7c2b1a2aw748ed0148c683bfe@...&gt;\r\nUser-Agent: Mutt/1.5.17 (2007-11-01)\r\nX-Y-GMX-Trusted: 0\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Aristotle Pagaltzis &lt;pagaltzis@...&gt;\r\nSubject: Re: How to model a missing method?\r\nX-Yahoo-Group-Post: member; u=147780944; y=wTDtiudJfciLYeJ-cWoa6v6RiWxgvrZoKb3zeuD1x1dm\r\nX-Yahoo-Profile: a22pag\r\n\r\n* Daniel Yokomizo &lt;daniel.yokomizo@...&gt; [2008-06-11 01:45]:\n&gt; On Tue, Jun 10, 2008 at 7:10 PM, Aristotle Pagaltzis &lt;pagaltzis@...&gt; wrote:\n&gt;&gt; * Daniel Yokomizo &lt;daniel.yokomizo@...&gt; [2008-06-10 16:00]:\n&gt;&gt;&gt; Doing PUT sending &quot;activated&quot;/&quot;deactivated&quot; works with other\n&gt;&gt;&gt; applications but the semantics of PUT is underspecified (for\n&gt;&gt;&gt; this case).\n&gt;&gt;\n&gt;&gt; No, they&#39;re not: they depend on the hypermedia format that\n&gt;&gt; contained the link which the client is using to PUT.\n&gt;\n&gt; My point is that PUT has a well defined semantics, while\n&gt; activating/deactivating a resource may have different\n&gt; semantics. After sending &quot;PUT /users/1234/status active=0&quot; the\n&gt; intermediates can&#39;t possibly know that the cached\n&gt; representation for &quot;GET /users/1234&quot; is stale (because the\n&gt; status text changed, for example).\n\nSo don’t send an Expires header for /users/1234.\n\n&gt; I&#39;m talking about the semantics of the method, which is defined\n&gt; in the RFC, not what both ends know about the implied semantics\n&gt; of calling PUT in this particular URI at this moment in time.\n\nYes. My point is that as long as the semantics of a method in the\ncontext of an application are a subset of the semantics of the\nmethod as defined in the RFC, you are in the clear.\n\n&gt;&gt; It&#39;s the representations that carry meaning; methods are\n&gt;&gt; generic state-change operators and no more.\n&gt;\n&gt; Of course the methods have meaning, otherwise we could just\n&gt; tunnel everything over POST (which can be also generic\n&gt; state-change operator).\n\nYes, but their meaning is limited to the operation. The semantics\nof PUT say nothing about what the enclosed entity means, they\nonly define the intent of the client that uses such a request.\n\n&gt;&gt;&gt; but then the semantics is unclear because the server rely on\n&gt;&gt;&gt; the entity to distinguish between each state\n&gt;&gt;\n&gt;&gt; I see nothing unclear about that at all.\n&gt;\n&gt; If we send &quot;GET /users/1234&quot; and get back an hypermedia\n&gt; representation, the hypermedia have to embed the entity body\n&gt; too:\n&gt;\n&gt; request: GET /users/1234\n&gt; response: &lt;user href=&#39;/users/1234&#39;&gt;&lt;form name=&#39;activate&#39;\n&gt; href=&#39;/users/1234/status&#39; method=&#39;put&#39;\n&gt; content-type=&#39;application/x-www-urlencoded&#39;&gt;active=1&lt;/form&gt;&lt;/user&gt;\n&gt;\n&gt; That&#39;s what I meant by unclear: it&#39;s not sufficient to send\n&gt; back the URI and both the client and the server must understand\n&gt; that for this particular URI PUT can have two different effects\n&gt; depending on the entity.\n\nWith extension methods the client and server must understand that\none of two different methods is applicable based on the state of\nthe resource. You have not removed any coupling, you have merely\nshifted it to another aspect of the protocol.\n\n&gt; Usually when people talk about HATEOAS they say follow the\n&gt; links, not follow the links and send just this exact\n&gt; representation and nothing else.\n\nCounterexample: Atompub.\n\n&gt;&gt; So to recap:\n&gt;&gt;\n&gt;&gt; • In one case I have to send an OPTIONS request to the\n&gt;&gt;   resource and then check whether the Accept header contains\n&gt;&gt;   ACTIVATE or DEACTIVATE, so that I can use the right method\n&gt;&gt;   to change the state.\n&gt;&gt;\n&gt;&gt; • In the other case I have to send a GET request to the\n&gt;&gt;   resource and then check the representation to see whether it\n&gt;&gt;   contains `active=0` or `active=1`, so that I can PUT the\n&gt;&gt;   right entity to change the state.\n&gt;&gt;\n&gt;&gt; And you are saying the former is less tricky than the latter?\n&gt;&gt;\n&gt;&gt; If you ask me, it&#39;s the other way around.\n&gt;\n&gt; The first situation relies only on two extension methods\n&gt; (ACTIVATE/DEACTIVATE), one standard method (OPTIONS), one  standard\n&gt; header and one URI. The second situation relies on two standard\n&gt; methods, two URIs, and the knowledge of a media-type that has a\n&gt; unusual definition of how a link can be followed.\n\nNo more unusual than Atompub. And what you brush over with “two\nextension methods” is arguably more unusual.\n\n&gt; but it doesn&#39;t specify what happens to /users/1234 if I follow\n&gt; the link to /users/1234/status, while the method can specify\n&gt; it.\n\nOh? So does Atompub not specify that the collection feed will\nchange if you PUT to an entry in that collection?\n\n&gt; The OP seemed confused about REST (particularly saying that it\n&gt; has only four verbs) and I was trying to explain that extension\n&gt; verbs is a valid approach, but it depends on the particular\n&gt; problem being solved and that different approaches are possible\n&gt; and each has it&#39;s own benefits/problems.\n\nIt can be valid. PATCH is a good extension method. MOVE in WebDAV\nis another worthwhile one.\n\n&gt; I think it&#39;s a fool&#39;s attempt to embed everything in\n&gt; GET/PUT/POST/DELETE and multiply the resources/media-types ad\n&gt; infinitum. The constraint isn&#39;t a fixed set of verbs but\n&gt; uniform interface.\n\nTrue, but erring on the side of hypermedia seems like a\nno-brainer to me, whereas extra methods require extraordinary\njustification.\n\nAnd I’d also say that people like the OP who come from a SOAP\nbackground should definitely lay off the methods and try to think\nin terms of resources for a while until they have a firmer grasp\nof REST and how to design applications according to it.\n\n&gt; WebDAV has its particular set of verbs because the additional\n&gt; semantics they carry is useful. Atom uses only the basic four\n&gt; verbs because they don&#39;t need the added semantics. Both\n&gt; approaches are valid (and useful).\n\nI think WebDAV went way overboard with extra methods. Some of\nthem are worthwhile, but many of them would be unnecessary given\nmore hypermedia.\n\nRegards,\n-- \nAristotle Pagaltzis // &lt;http://plasmasturm.org/&gt;\n\n"}}
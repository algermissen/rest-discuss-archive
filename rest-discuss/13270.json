{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"p5PaKriG99bVrRsgiZqsULr4pTL9TNcnFUcZjimJJcRX0c6V1iyA-3yBR2X4xYZHOHxFJOG_dxJp2sI_8u4d2MgNMQyDszC1GOGSpXoSNg","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] REST-*","postDate":"1253139638","msgId":13270,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMDkwOTE2MTYyMDM4LmU2ODRkY2Q5LmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","inReplyToHeader":"PDRBQjEzOUQ5LjcwNTA1MDFAcmVkaGF0LmNvbT4=","referencesHeader":"PEJMVTEwMi1EUzE0RDlEN0IyRUJBN0YwRkVEQjBDNkI1RTIwQHBoeC5nYmw+CTw0OTk4ODg0NDA5MDkxNjA4MzBtNDc1ZTQ2NTBpZTYzODgwYTNmMjI2YThlY0BtYWlsLmdtYWlsLmNvbT4JPDIxNjA2ZGNmMDkwOTE2MDg0N2o0ZDBkZjE3MHg1YjliMWEzMWY4YWM5ZTBkQG1haWwuZ21haWwuY29tPgk8MjAwOTA5MTYxMDA2MTMuNjAzMDA3NWEuZXJpY0BiaXNvbnN5c3RlbXMubmV0Pgk8NEFCMTM5RDkuNzA1MDUwMUByZWRoYXQuY29tPg=="},"prevInTopic":13269,"nextInTopic":13271,"prevInTime":13269,"nextInTime":13271,"topicId":13253,"numMessagesInTopic":97,"msgSnippet":"... No, they don t begin to conform to the Uniform Interface.  There is no concept of resource to be found.  The existing specs are wholly RPCish and are","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 17341 invoked from network); 16 Sep 2009 22:20:54 -0000\r\nX-Received: from unknown (98.137.34.46)\n  by m2.grp.re1.yahoo.com with QMQP; 16 Sep 2009 22:20:54 -0000\r\nX-Received: from unknown (HELO mxout-08.mxes.net) (216.86.168.183)\n  by mta3.grp.sp2.yahoo.com with SMTP; 16 Sep 2009 22:20:54 -0000\r\nX-Received: from bigbison (unknown [65.117.211.162])\n\t(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))\n\t(No client certificate requested)\n\tby smtp.mxes.net (Postfix) with ESMTPSA id 07C25509DB;\n\tWed, 16 Sep 2009 18:20:51 -0400 (EDT)\r\nDate: Wed, 16 Sep 2009 16:20:38 -0600\r\nTo: Bill Burke &lt;bburke@...&gt;\r\nCc: Sam Johnston &lt;samj@...&gt;, Tim Williams &lt;williamstw@...&gt;,\n Sebastien Lambla &lt;seb@...&gt;, Rest List\n &lt;rest-discuss@yahoogroups.com&gt;\r\nMessage-Id: &lt;20090916162038.e684dcd9.eric@...&gt;\r\nIn-Reply-To: &lt;4AB139D9.7050501@...&gt;\r\nReferences: &lt;BLU102-DS14D9D7B2EBA7F0FEDB0C6B5E20@...&gt;\n\t&lt;499888440909160830m475e4650ie63880a3f226a8ec@...&gt;\n\t&lt;21606dcf0909160847j4d0df170x5b9b1a31f8ac9e0d@...&gt;\n\t&lt;20090916100613.6030075a.eric@...&gt;\n\t&lt;4AB139D9.7050501@...&gt;\r\nOrganization: Bison Systems Corporation\r\nX-Mailer: Sylpheed 2.6.0 (GTK+ 2.10.14; i686-pc-mingw32)\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=US-ASCII\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nSubject: Re: [rest-discuss] REST-*\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\nBill Burke wrote:\n \n&gt; \n&gt; Eric J. Bowman wrote:\n&gt; &gt; \n&gt; &gt; Maybe the concept is sound, but calling it REST is not. The proposed\n&gt; &gt; specs are describing an RPC-like system. What they are not\n&gt; &gt; describing is an architecture whereby representations of\n&gt; &gt; application state are transferred, but rather an architecture made\n&gt; &gt; up of procedures invoked upon specified URIs.\n&gt; &gt; \n&gt; \n&gt; YES!  The proposed specs are kind of RPCish. (They are at least \n&gt; conforming to the uniform interface).  The point is to jumpstart\n&gt; things.\n&gt; \n\nNo, they don&#39;t begin to conform to the Uniform Interface.  There is no\nconcept of &#39;resource&#39; to be found.  The existing specs are wholly\nRPCish and are useful only as background information.  They provide a\nblueprint for what you are trying to re-implement as REST.  So start\nwith a disciplined approach -- the first step in designing a RESTful\nprotocol is to identify your resources (not assign URIs, just figure\nout what the resources are) and figure out how they relate to one\nanother.\n\n&quot;P-URL/commit&quot; is a case in point.  This is not a REST resource.  If it\nwere, then a GET wouldn&#39;t return 400.  You can&#39;t have a REST resource\nthat claims it doesn&#39;t exist for one request method but not another.  A\nPOST to this non-existent resource triggers a procedure -- a Remote\nProcedure Call if I&#39;ve ever seen one -- no representation state is\nbeing transferred as there&#39;s no query string or message body.  This is\nnot what is meant by self-descriptive messages.\n\nThe interaction between components is specific to your application, not\ngeneric, because HTTP doesn&#39;t have a COMMIT method, tunneled over POST\nor not.  To begin to be RESTful, the transaction would need to be\ntriggered by a POST to P-URL containing some sort of query string or\nmessage body to process, which triggers your stored COMMIT procedure\nopaquely. That&#39;s a generic interaction. But that still doesn&#39;t work,\nbecause P-URL wouldn&#39;t be your resource. Even if it is, /commit etc.\naren&#39;t sub-resources, they&#39;re remote procedures to be called on P-URL.\n\nIn a Uniform Interface, HTTP method calls are invoked on P-URL.  The\nquery or entity content (i.e. hypermedia) combined with the request\nmethod is the driver of application state.  Changing state by invoking\na POST on some action URL is certainly doable in HTML, but it isn&#39;t\nHEAS as there&#39;s no representation of a resource being transferred --\nthe component interactions are specific to your application, i.e. &quot;If\nyou want to manipulate resource A, POST nothing to URL B.&quot;  The generic\nway is to manipulate resource A directly by passing a representation of\nthe desired application state.\n\n&gt;\n&gt; To be fair....\n&gt; \n&gt; The two transaction specifications (compensation and 2pc) were\n&gt; written 8 years ago.  The messaging one was a simple exercise I did\n&gt; to create a facade over an existing messaging implementation (JMS).\n&gt; \n\nRight, there&#39;s absolutely no concept of REST resources in them.  The\nchallenge is to model these component interactions as transfers of\nresource representations.  The first step is to identify your resources\nand figure out how they relate to one another.\n\n&gt;\n&gt; I think there are a huge amount of improvements we can make here.\n&gt; For instance instead of defining URL patterns, URLs can be made more\n&gt; opaque and instead the spec defines a set of resources, link\n&gt; relationships, and interactions with those relationships.\n&gt; \n\nWhich you seem to understand.  However, without having embarked on this\nwork, you haven&#39;t proven that a RESTful end result is possible.  Clean\nslate time.  You&#39;ll either come up with a solution based on the REST\ndesign pattern, and prove Roy wrong, or you&#39;ll wind up where everyone\nelse has, which is &quot;Huh, Roy&#39;s right.&quot;  But you&#39;re nowhere near enough\nto boldly claim that problem solved, since you&#39;re defining URI patterns\nrather than describing what your resources are to begin with.\n\n&gt; \n&gt; I hope many of you can keep an open mind with what we&#39;re trying to do.\n&gt; \n\nI do have an open mind to the possibility that someone might come up\nwith a RESTful 2PC implementation.  But until you&#39;ve laid the basic\ngroundwork of describing your resources, link relationships and\ncomponent interactions, you need to keep an open mind to the\npossibility that it can&#39;t be done.  You can&#39;t know the outcome of\napplying the REST discipline to a problem space, ahead of time.  All\nyou have is proof that WS-* can leverage HTTP as an alternative to\nSOAP.  I&#39;m sure you could model some WS-specs as REST, but the ones\nyou&#39;ve chosen to start with are the ones I&#39;m almost certain you can&#39;t.\n\n-Eric\n\n"}}
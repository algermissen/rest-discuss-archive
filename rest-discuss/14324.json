{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":289191104,"authorName":"Jan Algermissen","from":"Jan Algermissen &lt;algermissen1971@...&gt;","profile":"algermissen1971","replyTo":"SENDER","senderId":"nbgToyjgaIWTn64yX5Ak9LF121RnDqe8DoXvMACXId8wz6FAHW3w05gaTLeJJWqRGj30lcFcdCevAQPKJrtY-BdmAHDY2FuB-ESywGjdlSc","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Re: RESTful M2M Systems and Resource Typing","postDate":"1261469203","msgId":14324,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEMwQjQzQUE3LTdBRjEtNDA3Ri1BMjFFLTkwN0Q2NTUyMUZCRUBtYWMuY29tPg==","inReplyToHeader":"PGRlNzBiMzlkMDkxMjIxMTgxNXE2NzgxZGVjN3I1YTlhODM0NTVkMTdiNGM2QG1haWwuZ21haWwuY29tPg==","referencesHeader":"PGhnbnBmaCtwcGZrQGVHcm91cHMuY29tPiA8MjZERUVBQTUtNTJCMi00QzQxLTlENDAtMEQ3MTZEMDFGMDc0QG1hYy5jb20+IDxkZTcwYjM5ZDA5MTIyMTExMTlzMTg4Y2E4ZDRzNWJlNGRhZDBiNzBlMTUwN0BtYWlsLmdtYWlsLmNvbT4gPEVFQTg0RTA5LTlFNDctNDEyNy04OUQzLTBFOTVENDlDMkFFREBtYWMuY29tPiA8ZGU3MGIzOWQwOTEyMjExNDQ3dDZjMzUwNGU3azhhNmEwMjY5NmEyYmRhMTBAbWFpbC5nbWFpbC5jb20+IDw1RUUxNEQyQi1GMTkyLTRCQ0UtQUJEOS1DOUUyQzRGMjNBRTRAbWFjLmNvbT4gPGRlNzBiMzlkMDkxMjIxMTgxNXE2NzgxZGVjN3I1YTlhODM0NTVkMTdiNGM2QG1haWwuZ21haWwuY29tPg=="},"prevInTopic":14319,"nextInTopic":14328,"prevInTime":14323,"nextInTime":14325,"topicId":14156,"numMessagesInTopic":134,"msgSnippet":"... Yes, (at least that is what I think). ... Yes, of course. ... Yes. ... Yes. Jan ... Jan Algermissen Mail: algermissen@acm.org Blog:","rawEmail":"Return-Path: &lt;algermissen1971@...&gt;\r\nX-Sender: algermissen1971@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 42246 invoked from network); 22 Dec 2009 08:07:06 -0000\r\nX-Received: from unknown (66.196.94.105)\n  by m3.grp.sp2.yahoo.com with QMQP; 22 Dec 2009 08:07:06 -0000\r\nX-Received: from unknown (HELO asmtpout020.mac.com) (17.148.16.95)\n  by mta1.grp.re1.yahoo.com with SMTP; 22 Dec 2009 08:07:05 -0000\r\nMIME-version: 1.0\r\nContent-type: text/plain; charset=ISO-8859-1; format=flowed; delsp=yes\r\nX-Received: from [192.168.2.102] ([84.144.118.136])\n by asmtp020.mac.com (Sun Java(tm) System Messaging Server 6.3-8.01 (built Dec\n 16 2008; 32bit)) with ESMTPSA id &lt;0KV100JGWNV7WN60@...&gt; for\n rest-discuss@yahoogroups.com; Tue, 22 Dec 2009 00:06:48 -0800 (PST)\r\nCc: Jorn Wildt &lt;jw@...&gt;, rest-discuss@yahoogroups.com\r\nMessage-id: &lt;C0B43AA7-7AF1-407F-A21E-907D65521FBE@...&gt;\r\nTo: Noah Campbell &lt;noahcampbell@...&gt;\r\nIn-reply-to: &lt;de70b39d0912211815q6781dec7r5a9a83455d17b4c6@...&gt;\r\nContent-transfer-encoding: quoted-printable\r\nDate: Tue, 22 Dec 2009 09:06:43 +0100\r\nReferences: &lt;hgnpfh+ppfk@...&gt;\n &lt;26DEEAA5-52B2-4C41-9D40-0D716D01F074@...&gt;\n &lt;de70b39d0912211119s188ca8d4s5be4dad0b70e1507@...&gt;\n &lt;EEA84E09-9E47-4127-89D3-0E95D49C2AED@...&gt;\n &lt;de70b39d0912211447t6c3504e7k8a6a02696a2bda10@...&gt;\n &lt;5EE14D2B-F192-4BCE-ABD9-C9E2C4F23AE4@...&gt;\n &lt;de70b39d0912211815q6781dec7r5a9a83455d17b4c6@...&gt;\r\nX-Mailer: Apple Mail (2.936)\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Jan Algermissen &lt;algermissen1971@...&gt;\r\nSubject: Re: [rest-discuss] Re: RESTful M2M Systems and Resource Typing\r\nX-Yahoo-Group-Post: member; u=289191104; y=SO-Bx3aj_AWp9tMOa0R0xuYonN12KE4sd9W2-lvzitOVKemncBCgrVSs\r\nX-Yahoo-Profile: algermissen1971\r\n\r\n\nOn Dec 22, 2009, at 3:15 AM, Noah Campbell wrote:\n\n&gt; See below...\n&gt;\n&gt; On M=\r\non, Dec 21, 2009 at 3:16 PM, Jan Algermissen &lt;algermissen1971@... \n&gt; &gt; =\r\nwrote:\n&gt;\n&gt; On Dec 21, 2009, at 11:47 PM, Noah Campbell wrote:\n&gt;\n&gt;\n&gt;\n&gt; &quot;This=\r\n would lead to &quot;If you are going to adopt REST with all the  \n&gt; benefits do=\r\n it all the way through and believe that the business  \n&gt; level harm occasi=\r\nonally done by evolution costs far less than  \n&gt; running a SOAP architectur=\r\ne in the long run.&quot;\n&gt;\n&gt; Basically, no.  If your notion that SOAP somehow so=\r\nlved the problems  \n&gt; that you&#39;ve identified being an issue in REST then I&#39;=\r\nm curious how  \n&gt; you over came SOAP&#39;s shortcoming&#39;s.  If anything, SOAP is=\r\n more rigid  \n&gt; and this leads to increase cost in the face of change.  Thi=\r\ns has  \n&gt; nothing to do with SOAP the architecture, but more SOAP the  \n&gt; i=\r\nmplementation.  WSDL has done more harm than good, IMO.  I&#39;ve seen  \n&gt; POX =\r\nwork really well, but again it&#39;s a different architecture than  \n&gt; REST.\n&gt;\n=\r\n&gt; I&#39;m curious how SLA enforcement is achieved with a SOAP architecture?\n&gt;\n&gt;=\r\n\n&gt; That is simple with SOAP because the artifact to enforce is the API.\n&gt;\n&gt;=\r\n WSDL being the API artifact here?\n\nYes, (at least that is what I think).\n&gt;=\r\n\n&gt; The SLA would be around the API lifecycle (e.g. once an API is out,  \n&gt; =\r\nit has to persist for three years). Not saying that the API is a  \n&gt; suffic=\r\nient means to guarantee stability but it expresses a fixed  \n&gt; contract. WS=\r\n-* simply excludes evolution without explicit versioning  \n&gt; (doo, hope tha=\r\nt is really correct; not an expert there). The SLA  \n&gt; would only be violat=\r\ned if an existing API would go away. The  \n&gt; evolution issue is done away w=\r\nith by tightly coupling the components.\n&gt;\n&gt; The evolution is done away with=\r\n to the point that it&#39;s very  \n&gt; difficult to change anything in practice. =\r\n It&#39;s my opinion that  \n&gt; tight coupling is actually a risk/liability,\n\nYes=\r\n, of course.\n\n&gt; but I digress.\n&gt;\n&gt; Versioning is one means of controlling e=\r\nvolution and RESTful  \n&gt; architecture supports it.  There are numerous ways=\r\n to achieve a  \n&gt; transition from one version to the next.  SOAP has option=\r\ns as well,  \n&gt; but it can&#39;t take advantage of intermediaries to aide in the=\r\n  \n&gt; transition.\n&gt;\n&gt; For example, a RESTful architecture based on HTTP can =\r\nuse an HTTP  \n&gt; load balancer to direct traffic to another version (via 301=\r\n/307 or  \n&gt; through pass through proxy) because it can take advantage of th=\r\ne  \n&gt; URLs for uniquely identifying a resource.  SOAP isn&#39;t so lucky since =\r\n \n&gt; it tunnels through one URL, i.e. /context/service, and the proxy  \n&gt; wo=\r\nuld have to inspect the payload to know where to route it (que the  \n&gt; ESB =\r\nvendor sales pitch here).  SOAP may present the appearance of an  \n&gt; artifa=\r\nct to establish a SLA, but it may be a false sense of stability.\n\nYes.\n\n&gt;\n&gt;=\r\n\n&gt;\n&gt; I&#39;ve also seen RESTful system that include configuration as the  \n&gt; fi=\r\nrst transition in the client state.  The first response to a url  \n&gt; is a d=\r\nocument (xhtml, atom, xml) that has relationships a client  \n&gt; becomes tigh=\r\ntly coupled to.  A rel tag with &quot;apiv2&quot; and a link to  \n&gt; the v2 version of=\r\n the service.  The server cannot retire until all  \n&gt; clients evolve to a n=\r\new version.  The client can start to evolve  \n&gt; when a new version is made =\r\navailable (they can be done in parallel,  \n&gt; but this is an optimization) a=\r\nnd the client code is rolled out.  v2  \n&gt; and v3 of the site can be running=\r\n side by side if necessary.\n\nYes.\n\n\nJan\n\n&gt;\n&gt;\n&gt; (AFAIK anyway)\n&gt;\n&gt; Jan\n&gt;\n&gt;\n&gt;=\r\n\n&gt; -Noah\n&gt;\n&gt; On Mon, Dec 21, 2009 at 1:18 PM, Jan Algermissen &lt;algermissen1=\r\n971@... \n&gt; &gt; wrote:\n&gt; Noah,\n&gt;\n&gt; (see below),\n&gt;\n&gt;\n&gt; On Dec 21, 2009, at =\r\n8:19 PM, Noah Campbell wrote:\n&gt;\n&gt; &quot;AtomPub for example enables the client *=\r\nimplementor* to assume that  \n&gt; a GET on a collection will return an Atom f=\r\need document.&quot;\n&gt;\n&gt; To your prior point, something is broken, but what?  Is =\r\nit the  \n&gt; architectural style (by asking it on this mailing list it may be=\r\n  \n&gt; that you think it is)?  Is it the transport HTTP?  Is it the  \n&gt; speci=\r\nfication?  Is it the implementor of the server or the client?   \n&gt; Is it so=\r\nmething else?\n&gt;\n&gt; You focus on the assumption being negative and rightly so=\r\n, but lets  \n&gt; be formal about what an assumption is.  You&#39;ve alluded to an=\r\n  \n&gt; assumption not met as negative.\n&gt;\n&gt; I is usually not that negative on =\r\nthe open Web because the overall  \n&gt; expectations are not that strict; peop=\r\nle allways plan for any kinds  \n&gt; of changes to happen and REST advantage h=\r\nere is that the uniform  \n&gt; interface enables the communication (the talkin=\r\ng to each other) to  \n&gt; succeed even if there is an error. Instead of every=\r\nthing falling  \n&gt; apart the client user or developer can pick up the clue (=\r\ne.g. the  \n&gt; 406 body) and follow her nose to fix things.\n&gt;\n&gt; But this is a=\r\n model that is very hard to sell inside the enterprise  \n&gt; because the busi=\r\nness level contracts require a certain degree of  \n&gt; certainty (e.g. SLAs).=\r\n Saying &quot;hey, if business transactions  \n&gt; suddenly stop working, look at t=\r\nhe lock file and see what the  \n&gt; service owner suggested as a fix. Nah, th=\r\nis will not happen evry  \n&gt; often, just be prepared for it in any case&quot;.\n&gt;\n=\r\n&gt; OTH, it might be the price to pay for the evolvability extreme of  \n&gt; not=\r\n needing any kind of out of band communication between client and  \n&gt; serve=\r\nr developer at all. Possibly, if you compare investment in time  \n&gt; and tra=\r\nvel resources etc. involved in discussing interfaces of the  \n&gt; SOAP style =\r\nwith the cost of some missing transactions it might even  \n&gt; make a compell=\r\ning case. (Like airline rather pay customers some  \n&gt; money for overbooked =\r\nflights than to make sure that every passenger  \n&gt; definitely gets a seat. =\r\nThe latter just costs less).\n&gt;\n&gt; This would lead to &quot;If you are going to ad=\r\nopt REST with all the  \n&gt; benefits do it all the way through and believe th=\r\nat the business  \n&gt; level harm occasionally done by evolution costs far les=\r\ns than  \n&gt; running a SOAP architecture in the long run.\n&gt;\n&gt;\n&gt; If I had to t=\r\nranslate this into code it would look like this:\n&gt;\n&gt; fread (buffer, 1, lSiz=\r\ne, pFile)\n&gt;\n&gt; There is an assumption here given all the variables are initi=\r\nalized  \n&gt; correctly.  Do you see it?\n&gt;\n&gt; The return value is not checked. =\r\n The read may not have read all the  \n&gt; data in the file in this particular=\r\n call.  Who is the guilty party?   \n&gt; Is it the architecture, POSIX?  Is it=\r\n the specification,http://www.cplusplus.com/reference/clibrary/cstdio/fread=\r\n/? \n&gt;  Is it the implementation, GNU? Is it the implementor?  I&#39;d argue  \n&gt;=\r\n it&#39;s the implementor.  C has a long established history of using  \n&gt; retur=\r\nn values to indicate success (as well as return values...but  \n&gt; errno prov=\r\nides a (kludgy?) workaround).\n&gt;\n&gt; I would urge an implementer to understand=\r\n the architecture style,  \n&gt; the specification, the implementation and focu=\r\ns very hard on making  \n&gt; sure assumptions like the above are not scattered=\r\n through out the  \n&gt; code.  Since REST is about two remote systems communic=\r\nating, I&#39;d  \n&gt; argue that any client must validate any assumption before  \n=\r\n&gt; proceeding, including checking the error code.  If not, the client  \n&gt; wi=\r\nll be be brittle, prone to error, and cost more in ongoing  \n&gt; maintenance.=\r\n  Good, robust applications assume nothing.\n&gt;\n&gt; Let&#39;s assume for a moment t=\r\nhe AtomPub spec represents the typical  \n&gt; spec for a service.  It assumes =\r\nRESTful architectural style using  \n&gt; the HTTP transport.  To your point, t=\r\nhe service must behave has  \n&gt; specified for any goal to be obtained.   Asp=\r\nects of the http  \n&gt; transport &quot;leak&quot; into the interaction even those it ha=\r\ns not been  \n&gt; specified.  The spec doesn&#39;t call out all the different resp=\r\nonse  \n&gt; codes and how to handle them, it relies on those familiar with the=\r\n  \n&gt; HTTP transport to deal with those gracefully.  Case in point, if you  =\r\n\n&gt; do:\n&gt;\n&gt; GET /\n&gt; Accept: application/atomsvc+xml\n&gt;\n&gt; and get a\n&gt;\n&gt; 307: M=\r\noved Temporarily\n&gt; Location: /svc.atom\n&gt;\n&gt; or\n&gt;\n&gt; 305: Use Proxy\n&gt; Location=\r\n: /proxy/svc.atom\n&gt;\n&gt; or\n&gt;\n&gt; 401: Unauthorized\n&gt; www-authenticate: basic\n&gt;\n=\r\n&gt; Is this an error?\n&gt;\n&gt; Roy thesis doesn&#39;t explicitly say yes or no.  Howev=\r\ner, the argument  \n&gt; for a uniform interface is that the intermediary can p=\r\narticipate  \n&gt; without affecting the remote call.  I&#39;ll extrapolate a littl=\r\ne in  \n&gt; that a uniform interface provides a common behavior that permeates=\r\n  \n&gt; all levels of an architecture, including the implementation.  The  \n&gt; =\r\ntesters should be not be surprised to see the 3 response outline  \n&gt; above =\r\nand should be able to accommodate appropriately.\n&gt;\n&gt;\n&gt; Agreed and I see you=\r\nr point. But (sorry :-) I&#39;d expect an HTTP  \n&gt; client connector to be able =\r\nto follow these redirects or  \n&gt; authenticate on its own without even propa=\r\ngating it to the next  \n&gt; level. Most client connectors do so (depending on=\r\n config of course).  \n&gt; So, I&#39;d limit what we are talking about to steady s=\r\ntates and leave  \n&gt; out the transient ones.\n&gt;\n&gt; However, I understand you t=\r\no say that an AtomPub client  \n&gt; implementation that uses an HTTP client co=\r\nnnector must of course  \n&gt; implement all of HTTP. And yes, I agree that the=\r\n 406 must be handled  \n&gt; correctly. But then? there is no possible recovery=\r\n from the broken  \n&gt; expectation to receive an Atom feed.\n&gt;\n&gt;\n&gt;\n&gt; Hopefully=\r\n this response helps move the discussion forward :)\n&gt;\n&gt; Thanks for keeping =\r\nup with this. I am just sorry that I seem to be  \n&gt; so unable to get this a=\r\nccross.\n&gt;\n&gt; Jan\n&gt;\n&gt;\n&gt;\n&gt;\n&gt; -Noah\n&gt;\n&gt; On Mon, Dec 21, 2009 at 4:35 AM, Jan Al=\r\ngermissen &lt;algermissen1971@... \n&gt; &gt; wrote:\n&gt;\n&gt; On Dec 21, 2009, at 1:25=\r\n PM, Jorn Wildt wrote:\n&gt;\n&gt; &gt; Oh, lets backtrack a bit. You said earlier on:=\r\n\n&gt; &gt;\n&gt; &gt;&gt; In the enterprise people want to develop clients and services in\n=\r\n&gt; &gt;&gt; parallel, shich rules out client design by inspecting the runtime\n&gt; &gt;&gt;=\r\n behavior of a service.\n&gt; &gt;\n&gt; &gt; Then I said: you need not expect at runtime=\r\n, you can have a mock. To\n&gt; &gt; this you answered: no, you build clients on s=\r\npecs.\n&gt; &gt;\n&gt; &gt; What I was trying to say was: if you build clients on specs a=\r\nnd RFC\n&gt; &gt; 5023 (application/atomsrv+xml) is a spec, then what is keeping y=\r\nou\n&gt; &gt; from building any kind of REST client on similar specs for other\n&gt; &gt;=\r\n media types? If both server and client agrees on the media type spec\n&gt; &gt; t=\r\nhen both can be built individually and simultaneously.\n&gt;\n&gt;\n&gt; No, that is al=\r\nl fine and I agree. I am questioning the RESTfulness of\n&gt; specs that allow =\r\nthe clients to make assumptions about the hypermedia\n&gt; it will receive at s=\r\nome point in the interaction. AtomPub for example\n&gt; enables the client *imp=\r\nlementor* to assume that a GET on a collection\n&gt; will return an Atom feed d=\r\nocument. This is equivalent to making an\n&gt; assumption about the application=\r\n state to be in after the GET to the\n&gt; collection.\n&gt;\n&gt; And I am trying to s=\r\nay that M2M clients (besides passibe, server\n&gt; driven crawlers) can only be=\r\n built when such contracts are in place.\n&gt;\n&gt; Jan\n&gt;\n&gt;\n&gt; &gt;\n&gt; &gt; /J=F8rn\n&gt; &gt;\n&gt; =\r\n&gt;\n&gt; &gt;\n&gt; &gt; ------------------------------------\n&gt; &gt;\n&gt; &gt; Yahoo! Groups Links\n=\r\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt;\n&gt; --------------------------------------\n&gt; Jan Algermissen\n&gt;\n=\r\n&gt; Mail: algermissen@...\n&gt; Blog: http://algermissen.blogspot.com/\n&gt; Home=\r\n: http://www.jalgermissen.com\n&gt; --------------------------------------\n&gt;\n&gt;\n=\r\n&gt;\n&gt;\n&gt;\n&gt; ------------------------------------\n&gt;\n&gt; Yahoo! Groups Links\n&gt;\n&gt;\n&gt;\n=\r\n&gt;\n&gt;\n&gt; --------------------------------------\n&gt; Jan Algermissen\n&gt;\n&gt; Mail: al=\r\ngermissen@...\n&gt; Blog: http://algermissen.blogspot.com/\n&gt; Home: http://w=\r\nww.jalgermissen.com\n&gt; --------------------------------------\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt; =\r\n\n&gt;\n&gt; --------------------------------------\n&gt; Jan Algermissen\n&gt;\n&gt; Mail: alg=\r\nermissen@...\n&gt; Blog: http://algermissen.blogspot.com/\n&gt; Home: http://ww=\r\nw.jalgermissen.com\n&gt; --------------------------------------\n&gt;\n&gt;\n&gt;\n&gt;\n\n------=\r\n--------------------------------\nJan Algermissen\n\nMail: algermissen@...=\r\n\nBlog: http://algermissen.blogspot.com/\nHome: http://www.jalgermissen.com\n-=\r\n-------------------------------------\n\n\n\n\n"}}
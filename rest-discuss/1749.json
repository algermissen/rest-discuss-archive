{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":0,"authorName":"Jeff Bone","from":"Jeff Bone &lt;jbone@...&gt;","replyTo":"SENDER","senderId":"8RNjxuE95lLD6buXbf5LD-u-SNS_3LHutHn-Ub499N_DLI0SI4qrshX0ehHX2hr9GCLszzLwaJJgXb2m3D7CutxXzaRO","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] An attempt at a RESTful implementation","postDate":"1026173239","msgId":1749,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEI5NEY5MzY3LjNDNjIlamJvbmVAZGVlcGZpbGUuY29tPg==","inReplyToHeader":"PDAwMTQwMWMyMjZkNSRiMTNlODdmMCRhMDAwYThjMEBzZWFpcnRobGFwdG9wPg=="},"prevInTopic":1747,"nextInTopic":1754,"prevInTime":1748,"nextInTime":1750,"topicId":1728,"numMessagesInTopic":9,"msgSnippet":"... The distinction between client-server and peer-to-peer has everything to do with overall system architecture - with the roles the various components play","rawEmail":"Return-Path: &lt;jbone@...&gt;\r\nX-Sender: jbone@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_0_7_4); 9 Jul 2002 00:07:21 -0000\r\nReceived: (qmail 20849 invoked from network); 9 Jul 2002 00:07:21 -0000\r\nReceived: from unknown (66.218.66.216)\n  by m2.grp.scd.yahoo.com with QMQP; 9 Jul 2002 00:07:21 -0000\r\nReceived: from unknown (HELO blanco.deepfile.com) (24.242.137.237)\n  by mta1.grp.scd.yahoo.com with SMTP; 9 Jul 2002 00:07:21 -0000\r\nReceived: from [207.8.92.100] (cust-92-100.customer.jump.net [207.8.92.100] (may be forged))\n\t(authenticated)\n\tby blanco.deepfile.com (8.11.6/8.11.6) with ESMTP id g6905rx01677;\n\tMon, 8 Jul 2002 19:05:53 -0500\r\nUser-Agent: Microsoft-Entourage/10.0.0.1331\r\nDate: Mon, 08 Jul 2002 19:07:19 -0500\r\nSubject: Re: [rest-discuss] An attempt at a RESTful implementation\r\nTo: Seairth Jacobs &lt;seairth@...&gt;,\n   rest-discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nMessage-ID: &lt;B94F9367.3C62%jbone@...&gt;\r\nIn-Reply-To: &lt;001401c226d5$b13e87f0$a000a8c0@seairthlaptop&gt;\r\nMime-version: 1.0\r\nContent-type: text/plain; charset=&quot;US-ASCII&quot;\r\nContent-transfer-encoding: 7bit\r\nFrom: Jeff Bone &lt;jbone@...&gt;\r\nX-Yahoo-Group-Post: public\r\n\r\n\n&gt;&gt; The major exception seems to be that you have a notion of a &quot;response\n&gt;&gt; method&quot; indicated by PUT.  I&#39;m not sure what that buys you, really.\n&gt; \n&gt; Actually, GTP is a good deal different from HTTP (at least as I see it).\n&gt; One of the primary differences is that it is not necessarily a client-server\n&gt; protocol.  \n\nThe distinction between client-server and peer-to-peer has everything to do\nwith overall system architecture - with the roles the various components\nplay in the context of a single interaction - and, really, very little to do\nwith the underlying protocol.  Having built, I think, the first\nInternet-scale commercial p2p app (Ding!), I think I can safely make some\nassertions, here. ;-)\n\nI&#39;ve generally found C-S to be an inadequate distinction --- really, you\nwant to think about whether components initiate or service a request in a\ngiven interaction;  a component that plays the role of a server in one\ninteraction might be a client in the next;  indeed, proxy components play\nboth roles in the context of a single conceptual interaction (server to the\ninitiating client, client to the origin server.)\n\nAnother distinction is whether responses are synchronous or asynchronous (or\nboth) with requests --- this issue is orthogonal but related to C-S v. p2p.\nAs discussed ad nauseam early in this list&#39;s lifecycle, either is sufficient\nto model the other.\n\nThe short version is that you don&#39;t need new protocols beyond HTTP to do\nthings like &quot;p2p&quot; or async --- assuming that the semantics of the supported\nmethods are equivalent.  The protocol should describe the interactions\nbetween components at a semantic level.\n\nAgain, given the similarity between the semantics, I see no need for a new\napplication protocol.\n\n&gt; It may be possible to force implementation all of the above on top of HTTP,\n&gt; but that feels to me like the proverbial &quot;square peg in a round hole&quot;.\n\n:-/\n\nI see nothing in your list that can&#39;t be modeled IMHO even more simply just\nby assuming you have resources chatting with each other over HTTP.  But that\nmay be because resource modeling in terms of HTTP has become second nature\nby now...  It&#39;s a hard thing to grok, but seriously:  whenever in the past\nI&#39;ve thought HTTP provided a more complex or unnatural or grotty model for\nsomething, I&#39;ve been wrong.  Having helped propagate at least one non-HTTP\napp protocol (whodp) and lived to regret it, I&#39;m seriously leery of any new\nprotocols.\n\nHTTP is incredibly general, and it doesn&#39;t have the constraints and\nimplications that most programmers intuitively think it has.\n\n&gt;   IF GET\n&gt;       EDIT\n&gt;   ELSE\n&gt;       ADD\n&gt;   END\n&gt; \n&gt; In my opinion (for what little that is worth), HTTP PUT is a &quot;lazy&quot; verb.\n&gt; You are attempting to perform a compoung command using a single command.\n&gt; This seems to me to be a particularly non-RESTian verb.\n\nI don&#39;t think I understand what you&#39;ve said, but I&#39;m pretty sure we don&#39;t\nagree on the meaning of HTTP&#39;s PUT.\n\n&gt; Okay, given that GTP PUT can be used like HTTP POST and that GTP is not like\n&gt; HTTP, would you still say that GTP is still weaker?\n\nI can&#39;t get past the second:  I&#39;m still certain that GTP is essentially\nequivalent to HTTP, the differences merely rooted in misunderstanding of\nHTTP.\n\n&gt; GTP allows the\n&gt; &quot;representation&quot; of a resource to be sent instead of the resource itself.\n\nThat&#39;s the basis of HTTP --- resources are NEVER, EVER sent.  Only\nrepresentations.  \n\n&gt; Yes, ONX is similar to XML.  However, the devil is in the details.  ONX is\n&gt; specifically designed to accomodate data in ways that XML is unsuited for.\n\nYou know, everytime I run into this argument, nobody can ever come up with\ndatatypes that XML is *actually* unsuitable for.  (Graph structures are\nincredibly general...)\n\n&gt; It is also designed to be more efficiently parsable.\n\nSome research by some guys at IBM Almaden a year or so ago proved that the\nefficiency issue -wrt- parsing XML is wildly overstated.  For the average\nbit of XML, it&#39;s statistical noise in the overall performance picture.\n\n&gt; And yet, if HTTP and XML were truly the &quot;dynamic duo&quot; that everyone wants to\n&gt; believe they are, this list (and several others) wouldn&#39;t exist.\n\nMethinks you misunderstand the purpose of this list...  It exists, in large\npart, specifically to help propagate better understanding of HTTP&#39;s\ngenerality and utility.  Resistance is futile. :-)  Reinventing the wheel is\none thing;  reinventing *wood* something else entirely. ;-)\nJb\n\n\n"}}
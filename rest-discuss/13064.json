{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":29059672,"authorName":"Yannick Loiseau","from":"Yannick Loiseau &lt;yloiseau@...&gt;","profile":"pioupiougroups","replyTo":"SENDER","senderId":"kqSMQWEAv67L_PIdb8vx3z7NiaZFJCXkW-aqOWVyZf68qiJ3CisDZViMeoBLVvq5VMsQ1YslmC_m8oPaURTmM0qh9JdKR0dcKQ","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Using HTTP Link: headers for web linking \tnon-hypertext","postDate":"1246462658","msgId":13064,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDRBNEI4MkMyLjcwMTAxMDNAZnJlZS5mcj4=","inReplyToHeader":"PDIxNjA2ZGNmMDkwNzAxMDY0NHQyNTY3OWQ5YnQzNDA1YjZjZDU3ZmIyMThmQG1haWwuZ21haWwuY29tPg==","referencesHeader":"PDIxNjA2ZGNmMDkwNjI0MDU1M2szZDg4MjU4Mm00MjQ1NGZlNGNhNWU4ZkBtYWlsLmdtYWlsLmNvbT4JIDwyMTYwNmRjZjA5MDYzMDAzNDRnNGI5ZjdmYzNrYzUxNDYyNDc4NmVjMmNmZEBtYWlsLmdtYWlsLmNvbT4JIDwwRENDQTBEMC1GNDVGLTRENTYtQTI2Ni0zQjU1QjM4NDUzNzNAc3ViYnUub3JnPgkgPDgxNThhZDc1MDkwNjMwMTEzMnI0NTkxMDg4NHY1MjE2ZGVhZjQ3NWEzYWU4QG1haWwuZ21haWwuY29tPgkgPEYxOTEzOUQ0LUQ4RjAtNEMwRS04NDlDLThDQjZFRkQ1MjUwMEBzdWJidS5vcmc+CSA8ODE1OGFkNzUwOTA2MzAxMzI4dzY3MTc3ZjkyaGU2NzI3MWYzM2I2NTI1NTFAbWFpbC5nbWFpbC5jb20+CSA8MEFENjVCRkEtRkUzNi00RDMyLUE0NzItODQ4QTdBRkFBQjhFQHN1YmJ1Lm9yZz4JIDw4MTU4YWQ3NTA5MDYzMDE4MzJvM2ViY2I3ZDlnMWNjZjM4Nzg2ZDJjODA1OEBtYWlsLmdtYWlsLmNvbT4JIDxiNTQ4ZGY2NTA5MDYzMDIwMDF0MzBkZGRmMGRvOGVhNzY5Y2Y2ZWZiZjE1QG1haWwuZ21haWwuY29tPgkgPDRBNEIzMEY1LjYwNjA1MDZAZnJlZS5mcj4gPDIxNjA2ZGNmMDkwNzAxMDY0NHQyNTY3OWQ5YnQzNDA1YjZjZDU3ZmIyMThmQG1haWwuZ21haWwuY29tPg=="},"prevInTopic":13063,"nextInTopic":13065,"prevInTime":13063,"nextInTime":13065,"topicId":12926,"numMessagesInTopic":42,"msgSnippet":"... Indeed, this is a little overhead since here I modeled a one-to-many (or many-to-many as suggested before) relationship, and added more semantic than","rawEmail":"Return-Path: &lt;yloiseau@...&gt;\r\nX-Sender: yloiseau@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 97559 invoked from network); 1 Jul 2009 15:38:53 -0000\r\nX-Received: from unknown (69.147.108.200)\n  by m2.grp.sp2.yahoo.com with QMQP; 1 Jul 2009 15:38:53 -0000\r\nX-Received: from unknown (HELO sp.isima.fr) (193.55.95.1)\n  by mta1.grp.re1.yahoo.com with SMTP; 1 Jul 2009 15:38:52 -0000\r\nX-Received: from [172.16.67.28] (pc158.isima.fr [193.55.95.158])\n\tby sp.isima.fr (8.13.8/8.13.8) with ESMTP id n61GaIZk254092\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Wed, 1 Jul 2009 17:36:18 +0100\r\nMessage-ID: &lt;4A4B82C2.7010103@...&gt;\r\nDate: Wed, 01 Jul 2009 17:37:38 +0200\r\nUser-Agent: Thunderbird 2.0.0.22 (X11/20090630)\r\nMIME-Version: 1.0\r\nTo: rest-discuss@yahoogroups.com\r\nReferences: &lt;21606dcf0906240553k3d882582m42454fe4ca5e8f@...&gt;\t &lt;21606dcf0906300344g4b9f7fc3kc514624786ec2cfd@...&gt;\t &lt;0DCCA0D0-F45F-4D56-A266-3B55B3845373@...&gt;\t &lt;8158ad750906301132r45910884v5216deaf475a3ae8@...&gt;\t &lt;F19139D4-D8F0-4C0E-849C-8CB6EFD52500@...&gt;\t &lt;8158ad750906301328w67177f92he67271f33b652551@...&gt;\t &lt;0AD65BFA-FE36-4D32-A472-848A7AFAAB8E@...&gt;\t &lt;8158ad750906301832o3ebcb7d9g1ccf38786d2c8058@...&gt;\t &lt;b548df650906302001t30dddf0do8ea769cf6efbf15@...&gt;\t &lt;4A4B30F5.6060506@...&gt; &lt;21606dcf0907010644t25679d9bt3405b6cd57fb218f@...&gt;\r\nIn-Reply-To: &lt;21606dcf0907010644t25679d9bt3405b6cd57fb218f@...&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 8bit\r\nX-Greylist: Sender IP whitelisted, not delayed by milter-greylist-3.0 (sp.isima.fr [193.55.95.1]); Wed, 01 Jul 2009 17:36:19 +0100 (WEST)\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Yannick Loiseau &lt;yloiseau@...&gt;\r\nSubject: Re: [rest-discuss] Using HTTP Link: headers for web linking \tnon-hypertext\r\nX-Yahoo-Group-Post: member; u=29059672; y=gw--KBCQjYwFDU1T0K-5Z1LQOLKEKifPy0UiJWUPPsIKFRyAcKflqFY\r\nX-Yahoo-Profile: pioupiougroups\r\n\r\n\n\n\n\nSam Johnston a ï¿½crit :\n\n&gt; Does this not strike you as far more complicated than necessary? Under \n&gt; your proposal I need to do a bunch of requests and understand a new \n&gt; language just to work out that two resources are related.\n\nIndeed, this is a little overhead since here I modeled a one-to-many (or \nmany-to-many as suggested before) relationship, and added more semantic \nthan necessary here for example, implying the use of RDF, which is IMO \nthe better approach to represent metadata for and links between \nresources. A more simple approach could use text/uri-list [RFC2483] as \nmedia type for the representation of the resource containing the \nrelations (i.e. a simple uri...) as in\n\n===============\nGET /buildings/1234\nAccept: image/jpeg\n----------\n200 OK\n...\n(jpeg representation of the building)\n==============\nGET /buildings/1234\nAccept: text/uri-list\n\n200 Ok\n...\n\nhttp://www.example.com/architects/spamegg\n==============\n\ngranted that it is a one-to-one relation and there is no ambiguity on \nthe link semantic (as with Link header).\n\nThe main point is that the link is itself a (sub)resource (or an \nalternate representation) of the initial resource and can therefore be \nmanipulated directly using existing methods\n\n=============\nPUT  /buildings/1234\nContent-Type: text/uri-list\n\nhttp://www.example.com/architects/foobar\n=============\n\n&gt; The Link: header accomplishes the same job in a far simpler and more \n&gt; performant manner, only until now no mechanism (beyond the HTTP LINK and \n&gt; UNLINK verbs) has been specified for creating them.\n\n&gt; Therein lies the question... what is the most intuitive way to associate \n&gt; resources? Given the relationships are exposed via HTTP headers one \n&gt; would assume that the same mechanism could/should be used to manage them.\n\nAs stated in Roy thesis (if I&#39;m right), every piece of information that \ncan or should be manipulated by the UA must be a resource by itself.\n\nMoreover, this approach allow many-to-many relations (not talking about \nseveral kinds of semantic relations) to be represented and manipulated \nin the same homogeneous way as simple non ambiguous unique links\n\n\n&gt; On Wed, Jul 1, 2009 at 11:48 AM, Yannick Loiseau &lt;yloiseau@... \n&gt; &lt;mailto:yloiseau@...&gt;&gt; wrote:\n&gt; \n&gt; \n&gt; \n&gt;     I agree with mike.\n&gt;     IMHO, it seems it is here a meta level problem w.r.t. the application\n&gt;     vs. protocol POV.\n&gt;     Taking the building/architect example, the architect of a building is a\n&gt;     metadata for the application (information about the building). But as\n&gt;     long as the UA needs to manage this information (read/edit), it should\n&gt;     be a resource by itself, i.e. data at the protocol level. The fact that\n&gt;     this metadata can&#39;t be embed in one of the representations of the\n&gt;     building resource (e.g. an image) just imply the need for another\n&gt;     representation (conneg is your friend), not that this information\n&gt;     pertains to HTTP headers. RDF was just design for this use case:\n&gt;     provide\n&gt;     external metadata about resources that can&#39;t embed them. Turtle or N3\n&gt;     can be used for xml reticents, or just a custom key:value format (but\n&gt;     don&#39;t reinvent the wheel :)\n&gt;     Metadata being a resource, they can be easily edited (using POST, PUT,\n&gt;     PATCH, or lower granularity (sub)resource manipulation).\n&gt; \n&gt;     example (turtle not tested)\n&gt;     ==============\n&gt;     GET /buildings/1234\n&gt;     Accept: image/jpeg\n&gt;     ----------\n&gt;     200 OK\n&gt;     ...\n&gt;     (jpeg representation of the building)\n&gt;     ==============\n&gt;     GET /buildings/1234\n&gt;     Accept: text/turtle\n&gt;     ---------\n&gt;     200 Ok\n&gt;     ...\n&gt; \n&gt;     @prefix rel: &lt;http://www.example.com/relations/ns#&gt; .\n&gt;     @prefix dc: &lt;http://purl.org/dc/elements/1.1/&gt; .\n&gt;     @prefix ent: &lt;http://www.example.com/entities/ns#&gt; .\n&gt; \n&gt;     &lt;http://www.example.com/buildings/1234&gt;\n&gt;     a ent:building ;\n&gt;     dc:title &quot;A nice building&quot;;\n&gt;     rel:architects &lt;http://www.example.com/buildings/1234/architects;\n&gt;     ==============\n&gt;     GET /buildings/1234/architects\n&gt;     Accept: text/turtle\n&gt;     ----\n&gt;     200 Ok\n&gt; \n&gt;     @prefix ent: &lt;http://www.example.com/entities/ns#&gt; .\n&gt; \n&gt;     &lt;http://www.example.com/buildings/1234&gt;\n&gt;     ent:Architect &lt;http://www.example.com/architects/spamegg&gt; .\n&gt; \n&gt;     ==============\n&gt;     POST /buildings/1234/architects\n&gt;     ...\n&gt; \n&gt;     http://www.example.com/architects/foobar\n&gt;     -------\n&gt;     201 Created\n&gt;     ...\n&gt; \n&gt;     @prefix ent: &lt;http://www.example.com/entities/ns#&gt; .\n&gt; \n&gt;     &lt;http://www.example.com/buildings/1234&gt;\n&gt;     ent:Architect &lt;http://www.example.com/architects/foobar&gt;,\n&gt;     &lt;http://www.example.com/architects/spamegg&gt; .\n&gt;     ===============\n&gt;     GET /architects/foobar\n&gt;     Accept: text/turtle\n&gt;     ------\n&gt;     200 Ok\n&gt; \n&gt;     @prefix ent: &lt;http://www.example.com/entities/ns#&gt; .\n&gt;     @prefix rel: &lt;http://www.example.com/relations/ns#&gt; .\n&gt;     @prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt; .\n&gt; \n&gt;     &lt;http://www.example.com/architects/foobar&gt;\n&gt;     a foaf:Person ;\n&gt;     foaf:name &quot;Foo Bar&quot;;\n&gt;     rel:hasBuilt [\n&gt;     &lt;http://www.example.com/buildings/1234&gt; ;\n&gt;     &lt;http://www.example.com/buildings/5678&gt; ;\n&gt;     ] .\n&gt; \n&gt;     If the list of buildings for an architect needs to be manipulated, the\n&gt;     same pattern can be used, creating a /architects/foobar/buildings\n&gt;     resource, using HATEOAS...\n&gt; \n&gt; \n&gt; \n&gt;      &gt;\n&gt;      &gt; FWIW, Link *Headers* make sense to me when the link are metadata\n&gt;     about\n&gt;      &gt; the resource. However, when the links are to be treated as\n&gt;     first-class\n&gt;      &gt; resources themselves, I think Link Headers is not the right\n&gt;     choice. For\n&gt;      &gt; example, I assert that links appearing in the &lt;head /&gt; section of\n&gt;      &gt; typical HTML documents are metadata. Links that appear in the\n&gt;     &lt;body /&gt;\n&gt;      &gt; section are not.\n&gt;      &gt;\n&gt;      &gt; I am not privy to the details of your particular use of links,\n&gt;     but I get\n&gt;      &gt; the impression that they are more than metadata. If true, I would\n&gt;      &gt; consider placing the links either in the body of the resource or,\n&gt;     when\n&gt;      &gt; the resource does not support body links easily (certain binary\n&gt;     files,\n&gt;      &gt; etc.), I would add a single link header (Link:\n&gt;      &gt; &lt;http://www.example.org/resource123/links&gt;; rel=related) that\n&gt;     points to\n&gt;      &gt; the related resource that holds all the links. One possible\n&gt;     advantage of\n&gt;      &gt; this approach is that the related links are now exposed in a way\n&gt;     that\n&gt;      &gt; easily allows searching and filtering using well-established\n&gt;     mechanisms.\n&gt;      &gt;\n&gt;      &gt; Also, this sentence from your last post caught my eye:\n&gt;      &gt; &lt;snip&gt;\n&gt;      &gt; It&#39;s unavoidable (I think) that a case in which you might simply\n&gt;     add a\n&gt;      &gt; foreign key or a bridge table when thinking relationally, you\n&gt;     need to do\n&gt;      &gt; lots of contortions to do RESTfully.\n&gt;      &gt; &lt;/snip&gt;\n&gt;      &gt;\n&gt;      &gt; This is very true. For me, that&#39;s an excellent reminder that the\n&gt;      &gt; relational approach is not the same as a RESTful approach.\n&gt;      &gt;\n&gt;      &gt; mca\n&gt;      &gt; http://amundsen.com/blog/\n&gt;      &gt;\n&gt;      &gt;\n&gt; \n\n"}}
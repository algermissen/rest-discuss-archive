{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":212893065,"authorName":"Joe Gregorio","from":"Joe Gregorio &lt;joe.gregorio@...&gt;","profile":"JCGregorio","replyTo":"SENDER","senderId":"nMfu3LxOD6PnmJCY2oiqW7ZREzcOqVK7NNrT-tUxP5olJ6BKHwgHKZCE8Z8KGhQR6cPWBzV3kJylQUeg6t7nNCgR_y4Ak_WP5sSJHw","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] coding question","postDate":"1113334455","msgId":4996,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDNmMTQ1MWY1MDUwNDEyMTIzNDZkMjQzNGQxQG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PFBpbmUuTkVCLjQuNjIuMDUwNDA4MTgzMjU2MC4xNjUwNEBwYW5peDIucGFuaXguY29tPg==","referencesHeader":"PFBpbmUuTkVCLjQuNjIuMDUwNDA4MTgzMjU2MC4xNjUwNEBwYW5peDIucGFuaXguY29tPg=="},"prevInTopic":4994,"nextInTopic":4998,"prevInTime":4995,"nextInTime":4997,"topicId":4983,"numMessagesInTopic":14,"msgSnippet":"In Python I have a dispatcher base class: class BaseHttpDispatch: Dispatch HTTP events based on the verb and requested Mimi-Type def dispatch(self, verb,","rawEmail":"Return-Path: &lt;joe.gregorio@...&gt;\r\nX-Sender: joe.gregorio@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 72071 invoked from network); 12 Apr 2005 19:34:16 -0000\r\nReceived: from unknown (66.218.66.167)\n  by m27.grp.scd.yahoo.com with QMQP; 12 Apr 2005 19:34:16 -0000\r\nReceived: from unknown (HELO zproxy.gmail.com) (64.233.162.204)\n  by mta6.grp.scd.yahoo.com with SMTP; 12 Apr 2005 19:34:16 -0000\r\nReceived: by zproxy.gmail.com with SMTP id 34so1261230nzf\n        for &lt;rest-discuss@yahoogroups.com&gt;; Tue, 12 Apr 2005 12:34:15 -0700 (PDT)\r\nDomainKey-Signature: a=rsa-sha1; q=dns; c=nofws;\n        s=beta; d=gmail.com;\n        h=received:message-id:date:from:reply-to:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:references;\n        b=ccbjG17ZkXY3xIp/UB1La6S30EXGSjQeSmHuoOZaT+WSXUVfUXpdjFFYMRaqb3p3pwfa9Tr3KoM/c3YZcajMgTeiAhf16TiQGjW3nGgPwaqBX7YXh/0w7PRq9au1zQEF5oxbzJ5of3XrXgZoHc0JSOJwJT8GejEvlOmvHGd68J0=\r\nReceived: by 10.36.25.19 with SMTP id 19mr275050nzy;\n        Tue, 12 Apr 2005 12:34:15 -0700 (PDT)\r\nReceived: by 10.36.65.13 with HTTP; Tue, 12 Apr 2005 12:34:15 -0700 (PDT)\r\nMessage-ID: &lt;3f1451f505041212346d2434d1@...&gt;\r\nDate: Tue, 12 Apr 2005 15:34:15 -0400\r\nTo: lucas@...\r\nCc: rest-discuss@yahoogroups.com\r\nIn-Reply-To: &lt;Pine.NEB.4.62.0504081832560.16504@...&gt;\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: 7bit\r\nReferences: &lt;Pine.NEB.4.62.0504081832560.16504@...&gt;\r\nX-eGroups-Msg-Info: 1:12:0\r\nFrom: Joe Gregorio &lt;joe.gregorio@...&gt;\r\nReply-To: Joe Gregorio &lt;joe.gregorio@...&gt;\r\nSubject: Re: [rest-discuss] coding question\r\nX-Yahoo-Group-Post: member; u=212893065\r\nX-Yahoo-Profile: JCGregorio\r\n\r\nIn Python I have a dispatcher base class:\n\nclass BaseHttpDispatch:\n    &quot;&quot;&quot;Dispatch HTTP events based on the verb and requested Mimi-Type&quot;&quot;&quot;\n    def dispatch(self, verb, mime_type):\n        &quot;&quot;&quot;Pass in the verb and the simplified mime-type, i.e. html or xml,\n        and the best matching function will be called, for example\n        &#39;POST&#39; and &#39;xml&#39; will first look for &#39;POST_xml&#39; and then if that fails\n        it will try to call &#39;POST&#39;. Returns True if any match was found.&quot;&quot;&quot;\n        returnValue = False\n        fun_name = verb + &quot;_&quot; + mime_type\n        if fun_name in dir(self) and callable(getattr(self, fun_name)):\n            getattr(self, fun_name)()\n            returnValue = True\n        elif verb in dir(self) and callable(getattr(self, verb)):\n            getattr(self, verb)()\n            returnValue = True\n        return returnValue\n\n\nThen subclass it for each resource in the system:\n\nclass ArchiveDispatch(dispatch.BaseHttpDispatch):\n    def __init__(self, queryPath):\n        self.queryPath = queryPath\n\n    def GET_xml(self):\n        itemFileNames = templating.buildFileLis...\n        print &quot;Content-type: text/xml&#92;n&quot;\n        templating.transformItemsUsingTempla...\n\n    def GET_html(self):\n        itemFileNames = templating.buildFile...\n        print &quot;Content-type: text/html&#92;n&quot;\n        templating.transformItemsUsingTemp...\n\nThe only piece left is to inspect the incoming path to create the \nright Dispatch object. My main loop ends up looking like this:\n\n\ndef Main():\n    dispatcher = dispatcherFactory()\n    mime_type = detMimeType()\n\n    if False == dispatch(os.environ.get(&#39;REQUEST_METHOD&#39;, &#39;GET&#39;), mime_type):\n        fileNotFound()\n\n\n  -joe\n\n-- \nJoe Gregorio        http://bitworking.org\n\n"}}
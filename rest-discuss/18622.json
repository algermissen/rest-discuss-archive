{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":69164307,"authorName":"mike amundsen","from":"mike amundsen &lt;mamund@...&gt;","profile":"mamund","replyTo":"SENDER","senderId":"bk_Z9A0Vyp_312FWez---JDuPt7oQ3KXKtzOxAdQ9fnw13weCCVwuMUvzT9jWBC1ypyIE7sXTP-0fenJ_dKc3l8B5ZTLOx8","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Re: Does the client contribute to the RESTfulness of an application?","postDate":"1331236358","msgId":18622,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PENBUFdfOG00T2lfVWRiVmVUMll5UW5CMzFNRm51UTJrV0M4UDBDSkp0LU9nMzM0di0tZ0BtYWlsLmdtYWlsLmNvbT4=","inReplyToHeader":"PC0xNTY1NzA1NTA2NjQ4OTg5ODA2QHVua25vd25tc2dpZD4=","referencesHeader":"PC0xNTY1NzA1NTA2NjQ4OTg5ODA2QHVua25vd25tc2dpZD4="},"prevInTopic":18621,"nextInTopic":18623,"prevInTime":18621,"nextInTime":18623,"topicId":18602,"numMessagesInTopic":50,"msgSnippet":" My point in all of this was to reach a better understanding of where the RESTFulness of a system is defined / exhibited and what defines the boundaries","rawEmail":"Return-Path: &lt;mca@...&gt;\r\nX-Sender: mca@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 30796 invoked from network); 8 Mar 2012 19:52:39 -0000\r\nX-Received: from unknown (98.137.35.161)\n  by m8.grp.sp2.yahoo.com with QMQP; 8 Mar 2012 19:52:39 -0000\r\nX-Received: from unknown (HELO mail-tul01m020-f182.google.com) (209.85.214.182)\n  by mta5.grp.sp2.yahoo.com with SMTP; 8 Mar 2012 19:52:39 -0000\r\nX-Received: by obbwc7 with SMTP id wc7so1357948obb.13\n        for &lt;rest-discuss@yahoogroups.com&gt;; Thu, 08 Mar 2012 11:52:38 -0800 (PST)\r\nMIME-Version: 1.0\r\nX-Received: by 10.182.41.6 with SMTP id b6mr2999110obl.10.1331236358610; Thu, 08\n Mar 2012 11:52:38 -0800 (PST)\r\nX-Received: by 10.182.77.168 with HTTP; Thu, 8 Mar 2012 11:52:38 -0800 (PST)\r\nIn-Reply-To: &lt;-1565705506648989806@unknownmsgid&gt;\r\nReferences: &lt;-1565705506648989806@unknownmsgid&gt;\r\nDate: Thu, 8 Mar 2012 14:52:38 -0500\r\nX-Google-Sender-Auth: qY1vyyOgyDJWSIO_6-F4sd8o7Xc\r\nMessage-ID: &lt;CAPW_8m4Oi_UdbVeT2YyQnB31MFnuQ2kWC8P0CJJt-Og334v--g@...&gt;\r\nTo: Glenn Block &lt;glenn.block@...&gt;\r\nCc: William Martinez Pomares &lt;wmartinez@...&gt;, \n\t&quot;rest-discuss@yahoogroups.com&quot; &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Type: multipart/alternative; boundary=f46d044517a344602604bac09e97\r\nX-Gm-Message-State: ALoCoQnxCb3cPZAgLTBhE6wGxDuu3D6al3WvDCwtq0aeiHIn14TpSR92MDB0fC06Y5dn/SbfO6be\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: mike amundsen &lt;mamund@...&gt;\r\nSubject: Re: [rest-discuss] Re: Does the client contribute to the RESTfulness\n of an application?\r\nX-Yahoo-Group-Post: member; u=69164307; y=9NfWZAoKTFDK9A3MwNheaCEFi6xwC_6trfH-gGmtHluA\r\nX-Yahoo-Profile: mamund\r\n\r\n\r\n--f46d044517a344602604bac09e97\r\nContent-Type: text/plain; charset=ISO-8859-1\r\n\r\n&lt;snip&gt;\nMy point in all of this was to reach a better understanding of where the\nRESTFulness of a system is defined / exhibited and what defines the\nboundaries of the system.\n&lt;/snip&gt;\n\nI think it&#39;s important to consider whether &quot;a system&quot; has more than one\n&quot;server&quot; in it and whether that &quot;system&quot; could be judged as a &quot;REST system&quot;\nonly if all the machines acting in a &quot;server role&quot; sufficiently exhibited\nthe &quot;REST style.&quot; This is particularly challenging when you consider that\nany machine in &quot;the system&quot; can adopt the &quot;client&quot; or &quot;server&quot; role at any\ntime.\n\nmca\nhttp://amundsen.com/blog/\nhttp://twitter.com@mamund\nhttp://mamund.com/foaf.rdf#me\n\n\n\n\n\nOn Thu, Mar 8, 2012 at 14:38, Glenn Block &lt;glenn.block@...&gt; wrote:\n\n&gt;\n&gt;\n&gt; Thanks William\n&gt;\n&gt; I agree with everything you said. The true benefits of REST are only\n&gt; realized if both client and server understand the constraints. However the\n&gt; fact some clients may not adhere to those constraints is orthagonal to the\n&gt; server. However system is at many levels. Each combination of client and\n&gt; server is a system itself.\n&gt;\n&gt; The one thing that is very clear is that the server is the gate. If the\n&gt; server doesn&#39;t adhere to the constraints then all the &quot;macro&quot; level systems\n&gt; are not RESTful.\n&gt;\n&gt; My point in all of this was to reach a better understanding of where the\n&gt; RESTFulness of a system is defined / exhibited and what defines the\n&gt; boundaries of the system.\n&gt;\n&gt;\n&gt; Sent from my Windows Phone\n&gt; ------------------------------\n&gt; From: William Martinez Pomares\n&gt; Sent: 3/8/2012 11:15 AM\n&gt; To: rest-discuss@yahoogroups.com\n&gt; Subject: [rest-discuss] Re: Does the client contribute to the RESTfulness\n&gt; of an application?\n&gt;\n&gt;\n&gt;\n&gt; Will, I completely agree with your thoughts about the client and the\n&gt; validation of the REST design, at least of what I understand. My point a\n&gt; subtlety different. Anyway, I understand REST was designed to meet some\n&gt; quality properties that were needed, and the benefits of the client are\n&gt; just collateral damage due to its role of service consumer and display\n&gt; agent (yes, it says so in the dissertation).\n&gt;\n&gt; An architectural style is not a complete definition of the architecture,\n&gt; but just the ideas to achieve quality attributes.\n&gt;\n&gt; I often say to my students that a system can implement perfectly all the\n&gt; functional requirements, and meet all the quality property standards\n&gt; required, but if it does not deliver business value, it is a failure.\n&gt;\n&gt; In the same sense, just one level down: The good REST design badge is\n&gt; achieved by implementing the REST constrains in your part of the system.\n&gt; But that badge will not assure the REST qualities are achieved in the whole\n&gt; system, or even in the system of systems above.\n&gt; Even more: having a completely perfect REST design and execution at all\n&gt; components, doesn&#39;t mean the app will give the business value and as such\n&gt; be a success. It may also fail.\n&gt;\n&gt; So, to answer the original question, and a couple more I answered without\n&gt; being questioned:\n&gt; 1. Does the client contribute to the RESTfulness of an application? Yes if\n&gt; the client is part of the application. It will not invalidate the\n&gt; RESTFulness of the server, but it may do so for the whole system.\n&gt;\n&gt; 2. Does designing an app server side to be compliant with REST rules\n&gt; delivers the goals of REST. Not necessarily, we need a compliant client and\n&gt; complaint interim layers (yup, REST is a layered architecture).\n&gt;\n&gt; 3. Does having a fully compliant REST architecture implemented is enough\n&gt; to be a success. No, it isn&#39;t.\n&gt;\n&gt; Those were the points I wanted to share.\n&gt;\n&gt; Cheers\n&gt;\n&gt; William Martinez.\n&gt;\n&gt; --- In rest-discuss@yahoogroups.com, Will Hartung &lt;willh@...&gt; wrote:\n&gt; &gt;\n&gt; &gt; As Mike says, and part of generic matra REST for me is that a bad client\n&gt; &gt; does not invalidate a good REST design. By the nature of REST, many of\n&gt; the\n&gt; &gt; aspects of the architecture are in fact designed to benefit the client.\n&gt; And\n&gt; &gt; other aspects simply cannot be counted on by the server in the wild\n&gt; anyway.\n&gt; &gt;\n&gt; &gt; The HATEOS is a client advantage. If a client cares about the robustness\n&gt; of\n&gt; &gt; their implementation, they will leverage HATEOS in order to help keep\n&gt; their\n&gt; &gt; systems running without interruption. Many applications that offer\n&gt; HATEOS,\n&gt; &gt; don&#39;t per se take advantage of it right off as it&#39;s mostly a future\n&gt; &gt; proofing mechanism. You have simple apps on a single machine with a few,\n&gt; &gt; solid services that will &quot;never change&quot; vs an app that is an aggressive\n&gt; &gt; user of HATEOS, and pretty much forces a client to leverage as well (i.e.\n&gt; &gt; no URL will ever be the same kind of thing). Those are opposite extremes.\n&gt; &gt; Most fall in the former sense, they&#39;re just easier to design and manage\n&gt; &gt; unless you have a very compelling reason to do otherwise.\n&gt; &gt;\n&gt; &gt; So, you can see how a &quot;dumb&quot; client can easily get by with the first type\n&gt; &gt; of application, but fail miserably with the latter.\n&gt; &gt;\n&gt; &gt; Caches are another important aspect of the architecture that the system\n&gt; may\n&gt; &gt; or may not be able to leverage. If your system implements their own\n&gt; caches,\n&gt; &gt; then you can expect to see a benefit and plan around it. At this point a\n&gt; &gt; bad client (i.e. one the completely ignores the caching constraints) can\n&gt; &gt; put an excessive load on your core system. They&#39;re still a REST client,\n&gt; in\n&gt; &gt; fact they can be an external cache themselves (perhaps a badly configured\n&gt; &gt; one).\n&gt; &gt;\n&gt; &gt; Now, if you&#39;re not providing you own caching layer, and effectively\n&gt; hoping\n&gt; &gt; to leverage external caches, then you have no room to complain when you\n&gt; get\n&gt; &gt; several clients that perhaps ignore the caching aspect. When you&#39;re\n&gt; relying\n&gt; &gt; on external systems that you have no control over, you&#39;re on the\n&gt; borderline\n&gt; &gt; of &quot;serendipitous reuse&quot;. The bright side of SU is the new value it can\n&gt; &gt; provide, the down side is the &quot;serendipitous&quot; part.\n&gt; &gt;\n&gt; &gt; And finally, you can address the serendipitous reuse aspect. That too,\n&gt; is a\n&gt; &gt; benefit of the client. It lets someone use the data in ways not\n&gt; envisioned\n&gt; &gt; by the application designers. Thus providing added value to the client\n&gt; &gt; Whether it&#39;s added value to the application is a different issue (maybe\n&gt; you\n&gt; &gt; didn&#39;t want or plan for all of this new traffic, then again maybe you&#39;re\n&gt; &gt; excited to be offering new value that you didn&#39;t have to code and\n&gt; design).\n&gt; &gt;\n&gt; &gt; So, yes, it takes good corporation between the clients and the servers to\n&gt; &gt; get the highest level of benefits from the architecture, but the simple\n&gt; &gt; truth is much of the design is really there for the clients in the first\n&gt; &gt; place and they&#39;re only hurting themselves in the long run by not playing\n&gt; &gt; along.\n&gt; &gt;\n&gt; &gt; Regards,\n&gt; &gt;\n&gt; &gt; Will Hartung\n&gt; &gt; (willh@...)\n&gt; &gt;\n&gt; &gt; --\n&gt; &gt; CONFIDENTIALITY NOTICE: The information contained in this electronic\n&gt; &gt; transmission may be confidential. If you are not an intended recipient,\n&gt; be\n&gt; &gt; aware that any disclosure, copying, distribution or use of the\n&gt; information\n&gt; &gt; contained in this transmission is prohibited and may be unlawful. If you\n&gt; &gt; have received this transmission in error, please notify us by email\n&gt; reply\n&gt; &gt; and then erase it from your computer system.\n&gt; &gt;\n&gt;\n&gt;\n&gt;\n&gt; \n&gt;\n\r\n--f46d044517a344602604bac09e97\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;snip&gt;&lt;div&gt;&lt;span style&gt;My point in all of this was to reach a better =\r\nunderstanding of where the RESTFulness of a system is defined / exhibited a=\r\nnd what defines the boundaries of the system.&lt;/span&gt;=A0&lt;br clear=3D&quot;all&quot;&gt;&l=\r\nt;/snip&gt;&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I think it&#39;s important to conside=\r\nr whether &quot;a system&quot; has more than one &quot;server&quot; in it a=\r\nnd whether that &quot;system&quot; could be judged as a &quot;REST system&q=\r\nuot; only if all the machines acting in a &quot;server role&quot; sufficien=\r\ntly exhibited the &quot;REST style.&quot; This is particularly challenging =\r\nwhen you consider that any machine in &quot;the system&quot; can adopt the =\r\n&quot;client&quot; or &quot;server&quot; role at any time.&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;=\r\n/div&gt;&lt;div&gt;mca&lt;/div&gt;&lt;div&gt;&lt;a href=3D&quot;http://amundsen.com/blog/&quot; target=3D&quot;_bl=\r\nank&quot;&gt;http://amundsen.com/blog/&lt;/a&gt;&lt;br&gt;&lt;a href=3D&quot;http://twitter.com&quot; target=\r\n=3D&quot;_blank&quot;&gt;http://twitter.com&lt;/a&gt;@mamund&lt;br&gt;&lt;a href=3D&quot;http://mamund.com/f=\r\noaf.rdf#me&quot; target=3D&quot;_blank&quot;&gt;http://mamund.com/foaf.rdf#me&lt;/a&gt;&lt;br&gt;\n&lt;br&gt;&lt;br=\r\n&gt;\n&lt;br&gt;\n&lt;br&gt;&lt;br&gt;&lt;div class=3D&quot;gmail_quote&quot;&gt;On Thu, Mar 8, 2012 at 14:38, Gle=\r\nnn Block &lt;span dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:glenn.block@...&quot;&gt;gle=\r\nnn.block@...&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote class=3D&quot;gmail_quot=\r\ne&quot; style=3D&quot;margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex&quot;&gt;=\r\n\n\n\n\n\n\n\n\n        \n&lt;div&gt;\n\n\n\n\n&lt;br&gt;&lt;br&gt;\n\n\n\n\n&lt;div&gt;&lt;div style=3D&quot;font-family:Cali=\r\nbri,sans-serif;font-size:11pt&quot;&gt;Thanks William&lt;br&gt;&lt;br&gt;I agree with everythin=\r\ng you said. The true benefits of REST are only realized if both client and =\r\nserver understand the constraints. However the fact some clients may not ad=\r\nhere to those constraints is orthagonal to the server. However system is at=\r\n many levels. Each combination of client and server is a system itself.&lt;br&gt;=\r\n\n\n&lt;br&gt;The one thing that is very clear is that the server is the gate. If t=\r\nhe server doesn&#39;t adhere to the constraints then all the &quot;macro&qu=\r\not; level systems are not RESTful.&lt;br&gt;&lt;br&gt;My point in all of this was to re=\r\nach a better understanding of where the RESTFulness of a system is defined =\r\n/ exhibited and what defines the boundaries of the system.&lt;div class=3D&quot;im&quot;=\r\n&gt;\n&lt;br&gt;\n&lt;br&gt;Sent from my Windows Phone&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;hr&gt;&lt;span style=\r\n=3D&quot;font-family:Tahoma,sans-serif;font-size:10pt;font-weight:bold&quot;&gt;From: &lt;/=\r\nspan&gt;&lt;span style=3D&quot;font-family:Tahoma,sans-serif;font-size:10pt&quot;&gt;William M=\r\nartinez Pomares&lt;/span&gt;&lt;br&gt;\n\n&lt;span style=3D&quot;font-family:Tahoma,sans-serif;fo=\r\nnt-size:10pt;font-weight:bold&quot;&gt;Sent: &lt;/span&gt;&lt;span style=3D&quot;font-family:Taho=\r\nma,sans-serif;font-size:10pt&quot;&gt;3/8/2012 11:15 AM&lt;/span&gt;&lt;br&gt;&lt;span style=3D&quot;fo=\r\nnt-family:Tahoma,sans-serif;font-size:10pt;font-weight:bold&quot;&gt;To: &lt;/span&gt;&lt;sp=\r\nan style=3D&quot;font-family:Tahoma,sans-serif;font-size:10pt&quot;&gt;&lt;a href=3D&quot;mailto=\r\n:rest-discuss@yahoogroups.com&quot; target=3D&quot;_blank&quot;&gt;rest-discuss@yahoogroups.c=\r\nom&lt;/a&gt;&lt;/span&gt;&lt;br&gt;\n\n&lt;span style=3D&quot;font-family:Tahoma,sans-serif;font-size:1=\r\n0pt;font-weight:bold&quot;&gt;Subject: &lt;/span&gt;&lt;span style=3D&quot;font-family:Tahoma,san=\r\ns-serif;font-size:10pt&quot;&gt;[rest-discuss] Re: Does the client contribute to th=\r\ne RESTfulness of an application?&lt;/span&gt;&lt;br&gt;\n\n&lt;br&gt;&lt;/div&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;div s=\r\ntyle&gt;\n&lt;span&gt;=A0&lt;/span&gt;\n\n\n&lt;div&gt;\n  &lt;div&gt;&lt;div&gt;&lt;div class=3D&quot;h5&quot;&gt;\n\n\n    &lt;div&gt;\n =\r\n     \n      \n      &lt;p&gt;Will, I completely agree with your thoughts about the=\r\n client and the validation of the REST design, at least of what I understan=\r\nd. My point a subtlety different. Anyway, I understand REST was designed to=\r\n meet some quality properties that were needed, and the benefits of the cli=\r\nent are just collateral damage due to its role of service consumer and disp=\r\nlay agent (yes, it says so in the dissertation).&lt;br&gt;\n\n\n&lt;br&gt;\nAn architectura=\r\nl style is not a complete definition of the architecture, but just the idea=\r\ns to achieve quality attributes. &lt;br&gt;\n&lt;br&gt;\nI often say to my students that =\r\na system can implement perfectly all the functional requirements, and meet =\r\nall the quality property standards required, but if it does not deliver bus=\r\niness value, it is a failure.&lt;br&gt;\n&lt;br&gt;\nIn the same sense, just one level do=\r\nwn: The good REST design badge is achieved by implementing the REST constra=\r\nins in your part of the system. But that badge will not assure the REST qua=\r\nlities are achieved in the whole system, or even in the system of systems a=\r\nbove. &lt;br&gt;\n\n\nEven more: having a completely perfect REST design and executi=\r\non at all components, doesn&#39;t mean the app will give the business value=\r\n and as such be a success. It may also fail.&lt;br&gt;\n&lt;br&gt;\nSo, to answer the ori=\r\nginal question, and a couple more I answered without being questioned:&lt;br&gt;\n=\r\n1. Does the client contribute to the RESTfulness of an application? Yes if =\r\nthe client is part of the application. It will not invalidate the RESTFulne=\r\nss of the server, but it may do so for the whole system.&lt;br&gt;\n&lt;br&gt;\n2. Does d=\r\nesigning an app server side to be compliant with REST rules delivers the go=\r\nals of REST. Not necessarily, we need a compliant client and complaint inte=\r\nrim layers (yup, REST is a layered architecture).&lt;br&gt;\n&lt;br&gt;\n3. Does having a=\r\n fully compliant REST architecture implemented is enough to be a success. N=\r\no, it isn&#39;t. &lt;br&gt;\n&lt;br&gt;\nThose were the points I wanted to share.&lt;br&gt;\n&lt;br=\r\n&gt;\nCheers&lt;br&gt;\n&lt;br&gt;\nWilliam Martinez.&lt;br&gt;\n&lt;br&gt;\n--- In &lt;a href=3D&quot;mailto:rest-=\r\ndiscuss%40yahoogroups.com&quot; target=3D&quot;_blank&quot;&gt;rest-discuss@yahoogroups.com&lt;/=\r\na&gt;, Will Hartung &lt;willh@...&gt; wrote:&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; As Mike says, a=\r\nnd part of generic matra REST for me is that a bad client&lt;br&gt;\n&gt; does not=\r\n invalidate a good REST design. By the nature of REST, many of the&lt;br&gt;\n&gt;=\r\n aspects of the architecture are in fact designed to benefit the client. An=\r\nd&lt;br&gt;\n&gt; other aspects simply cannot be counted on by the server in the w=\r\nild anyway.&lt;br&gt;\n&gt; &lt;br&gt;\n&gt; The HATEOS is a client advantage. If a clien=\r\nt cares about the robustness of&lt;br&gt;\n&gt; their implementation, they will le=\r\nverage HATEOS in order to help keep their&lt;br&gt;\n&gt; systems running without =\r\ninterruption. Many applications that offer HATEOS,&lt;br&gt;\n&gt; don&#39;t per s=\r\ne take advantage of it right off as it&#39;s mostly a future&lt;br&gt;\n&gt; proof=\r\ning mechanism. You have simple apps on a single machine with a few,&lt;br&gt;\n&gt=\r\n; solid services that will &quot;never change&quot; vs an app that is an ag=\r\ngressive&lt;br&gt;\n&gt; user of HATEOS, and pretty much forces a client to levera=\r\nge as well (i.e.&lt;br&gt;\n&gt; no URL will ever be the same kind of thing). Thos=\r\ne are opposite extremes.&lt;br&gt;\n&gt; Most fall in the former sense, they&#39;r=\r\ne just easier to design and manage&lt;br&gt;\n&gt; unless you have a very compelli=\r\nng reason to do otherwise.&lt;br&gt;\n&gt; &lt;br&gt;\n&gt; So, you can see how a &quot;d=\r\numb&quot; client can easily get by with the first type&lt;br&gt;\n&gt; of applicat=\r\nion, but fail miserably with the latter.&lt;br&gt;\n&gt; &lt;br&gt;\n&gt; Caches are anot=\r\nher important aspect of the architecture that the system may&lt;br&gt;\n&gt; or ma=\r\ny not be able to leverage. If your system implements their own caches,&lt;br&gt;\n=\r\n&gt; then you can expect to see a benefit and plan around it. At this point=\r\n a&lt;br&gt;\n&gt; bad client (i.e. one the completely ignores the caching constra=\r\nints) can&lt;br&gt;\n&gt; put an excessive load on your core system. They&#39;re s=\r\ntill a REST client, in&lt;br&gt;\n&gt; fact they can be an external cache themselv=\r\nes (perhaps a badly configured&lt;br&gt;\n&gt; one).&lt;br&gt;\n&gt; &lt;br&gt;\n&gt; Now, if yo=\r\nu&#39;re not providing you own caching layer, and effectively hoping&lt;br&gt;\n&g=\r\nt; to leverage external caches, then you have no room to complain when you =\r\nget&lt;br&gt;\n&gt; several clients that perhaps ignore the caching aspect. When y=\r\nou&#39;re relying&lt;br&gt;\n&gt; on external systems that you have no control ove=\r\nr, you&#39;re on the borderline&lt;br&gt;\n&gt; of &quot;serendipitous reuse&quot;=\r\n. The bright side of SU is the new value it can&lt;br&gt;\n&gt; provide, the down =\r\nside is the &quot;serendipitous&quot; part.&lt;br&gt;\n&gt; &lt;br&gt;\n&gt; And finally,=\r\n you can address the serendipitous reuse aspect. That too, is a&lt;br&gt;\n&gt; be=\r\nnefit of the client. It lets someone use the data in ways not envisioned&lt;br=\r\n&gt;\n&gt; by the application designers. Thus providing added value to the clie=\r\nnt&lt;br&gt;\n&gt; Whether it&#39;s added value to the application is a different =\r\nissue (maybe you&lt;br&gt;\n&gt; didn&#39;t want or plan for all of this new traff=\r\nic, then again maybe you&#39;re&lt;br&gt;\n&gt; excited to be offering new value t=\r\nhat you didn&#39;t have to code and design).&lt;br&gt;\n&gt; &lt;br&gt;\n&gt; So, yes, it=\r\n takes good corporation between the clients and the servers to&lt;br&gt;\n&gt; get=\r\n the highest level of benefits from the architecture, but the simple&lt;br&gt;\n&g=\r\nt; truth is much of the design is really there for the clients in the first=\r\n&lt;br&gt;\n&gt; place and they&#39;re only hurting themselves in the long run by =\r\nnot playing&lt;br&gt;\n&gt; along.&lt;br&gt;\n&gt; &lt;br&gt;\n&gt; Regards,&lt;br&gt;\n&gt; &lt;br&gt;\n&gt; =\r\nWill Hartung&lt;br&gt;\n&gt; (willh@...)&lt;br&gt;\n&gt; &lt;br&gt;\n&gt; -- &lt;br&gt;\n&gt; CONFIDENT=\r\nIALITY NOTICE: The information contained in this electronic &lt;br&gt;\n&gt; trans=\r\nmission may be confidential. If you are not an intended recipient, be &lt;br&gt;\n=\r\n&gt; aware that any disclosure, copying, distribution or use of the informa=\r\ntion &lt;br&gt;\n&gt; contained in this transmission is prohibited and may be unla=\r\nwful. If you &lt;br&gt;\n&gt; have received this transmission in error, please not=\r\nify us by email reply &lt;br&gt;\n&gt; and then erase it from your computer system=\r\n.&lt;br&gt;\n&gt;&lt;br&gt;\n&lt;br&gt;\n&lt;/p&gt;\n\n    &lt;/div&gt;\n     \n\n    \n    &lt;div style=3D&quot;color:#f=\r\nff;min-height:0&quot;&gt;&lt;/div&gt;\n\n\n\n\n\n\n\n\n&lt;br&gt;\n\n    \n    \n&lt;br&gt;\n\n\n\n\n&lt;div width=3D&quot;1&quot; s=\r\ntyle=3D&quot;color:white;clear:both&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n\n\n\n  \n\n\n\n\n\n=\r\n\n&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;\n\r\n--f46d044517a344602604bac09e97--\r\n\n"}}
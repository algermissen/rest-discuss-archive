{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":69164307,"authorName":"mike amundsen","from":"mike amundsen &lt;mamund@...&gt;","profile":"mamund","replyTo":"SENDER","senderId":"j8F3zSPkpHw2VGi3-kmRtgM7GPQzzBpwKxnS6DLFhOc4r1akq9BZvrGeV2y44hAiXuWK1_lWmIjH6Jq0t2iS3RN4rOOTiz4","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Re: (in)visible properties of RESTful interfaces","postDate":"1297364255","msgId":17347,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEFBTkxrVGluZ28wPXE3RUJScXplQnRHakRwd3ZScUhuSGg9WDRWQUhzZG5pTkBtYWlsLmdtYWlsLmNvbT4=","inReplyToHeader":"PGlqMGtlMStqZGRuQGVHcm91cHMuY29tPg==","referencesHeader":"PEU4NUNFNDg0LTM0QjctNEE4QS1BMjEwLUM1MDBCNzRFRjAxOUBtYWMuY29tPgk8aWowa2UxK2pkZG5AZUdyb3Vwcy5jb20+"},"prevInTopic":17346,"nextInTopic":0,"prevInTime":17346,"nextInTime":17348,"topicId":17338,"numMessagesInTopic":8,"msgSnippet":"Jakob: There is no need for a complete media-type dedicated to representing application-level error information.  Every media-type should have a way to","rawEmail":"Return-Path: &lt;mca@...&gt;\r\nX-Sender: mca@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 84891 invoked from network); 10 Feb 2011 18:57:37 -0000\r\nX-Received: from unknown (98.137.34.46)\n  by m4.grp.sp2.yahoo.com with QMQP; 10 Feb 2011 18:57:37 -0000\r\nX-Received: from unknown (HELO mail-ew0-f41.google.com) (209.85.215.41)\n  by mta3.grp.sp2.yahoo.com with SMTP; 10 Feb 2011 18:57:36 -0000\r\nX-Received: by ewy27 with SMTP id 27so949518ewy.28\n        for &lt;rest-discuss@yahoogroups.com&gt;; Thu, 10 Feb 2011 10:57:36 -0800 (PST)\r\nMIME-Version: 1.0\r\nX-Received: by 10.223.72.207 with SMTP id n15mr8677082faj.49.1297364255752; Thu,\n 10 Feb 2011 10:57:35 -0800 (PST)\r\nX-Received: by 10.223.117.74 with HTTP; Thu, 10 Feb 2011 10:57:35 -0800 (PST)\r\nIn-Reply-To: &lt;ij0ke1+jddn@...&gt;\r\nReferences: &lt;E85CE484-34B7-4A8A-A210-C500B74EF019@...&gt;\n\t&lt;ij0ke1+jddn@...&gt;\r\nDate: Thu, 10 Feb 2011 13:57:35 -0500\r\nX-Google-Sender-Auth: nE481NZNUw6XQcsz2oNXYmNDvYo\r\nMessage-ID: &lt;AANLkTingo0=q7EBRqzeBtGjDpwvRqHnHh=X4VAHsdniN@...&gt;\r\nTo: Jakob Strauch &lt;jakob.strauch@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: mike amundsen &lt;mamund@...&gt;\r\nSubject: Re: [rest-discuss] Re: (in)visible properties of RESTful interfaces\r\nX-Yahoo-Group-Post: member; u=69164307; y=BtrfxbM6WB4AmX3Kn1w_R-Y0LDwqQ-ipUdHW12tT3Gul\r\nX-Yahoo-Profile: mamund\r\n\r\nJakob:\n\nThere is no need for a complete media-type dedicated to representin=\r\ng\napplication-level error information.  Every media-type should have a\nway =\r\nto represent these app-level errors.\n\nSubbu Allamarju has some good guidanc=\r\ne (that will work w/ any media\ntype) on representing errors[1] in his RESTF=\r\nul Web Services Cookbook.\n\n[1] http://my.safaribooksonline.com/book/web-dev=\r\nelopment/web-services/9780596809140/designing-representations/recipe-how-to=\r\n-return-errors\n\nmca\nhttp://amundsen.com/blog/\nhttp://twitter.com@mamund\nhtt=\r\np://mamund.com/foaf.rdf#me\n\n\n#RESTFest 2010\nhttp://rest-fest.googlecode.com=\r\n\n\n\n\n\nOn Thu, Feb 10, 2011 at 07:07, Jakob Strauch &lt;jakob.strauch@...&gt; wr=\r\note:\n&gt;&gt; Jakob, note that the body you receive in the case of 4xx also\n&gt;&gt; co=\r\nntributes to application state.\n&gt;\n&gt; Ah yes, this sounds plausible. In &quot;appl=\r\nication&quot; error cases i already send some detail information within the body=\r\n. But i didn=B4t think of using also link relations inside the answer, as i=\r\n=B4m using already in 2xx cases. (The RPC style is very present in a progra=\r\nmer=B4s mind :-) )\n&gt;\n&gt; This leads me to the question, if some generic media=\r\n type exists for an application error state, and if it makes sense to provi=\r\nde/use/invent one at all? This could be a good starting point for designing=\r\n application (fault) state...\n&gt;\n&gt;\n&gt; Jakob\n&gt;\n&gt;\n&gt; --- In rest-discuss@yahoogr=\r\noups.com, Jan Algermissen &lt;algermissen1971@...&gt; wrote:\n&gt;&gt;\n&gt;&gt;\n&gt;&gt; On Feb 9, 2=\r\n011, at 8:38 PM, mike amundsen wrote:\n&gt;&gt;\n&gt;&gt; &gt; Jakob:\n&gt;&gt; &gt;\n&gt;&gt; &gt; HTTP Respons=\r\ne codes are protocol-level elements. All\n&gt;&gt; &gt; protocol-compliant clients ne=\r\ned to be coded to recognize and respond\n&gt;&gt; &gt; appropriately to them per the =\r\nRFC.\n&gt;&gt; &gt;\n&gt;&gt; &gt; Most protocol-level response codes allow for servers to also=\r\n return\n&gt;&gt; &gt; entity bodies that contain *application-level* information. Cl=\r\nients\n&gt;&gt; &gt; that are coded to understand the application-level protocol will=\r\n be\n&gt;&gt; &gt; responsible for understanding these particular entity bodies, just=\r\n as\n&gt;&gt; &gt; they understand the &quot;non-error&quot; entity bodies.\n&gt;&gt; &gt;\n&gt;&gt; &gt; Coding ap=\r\nplication-level protocols detail is not covered in REST or\n&gt;&gt; &gt; the HTTP RF=\r\nC.\n&gt;&gt;\n&gt;&gt; Good comment, Mike.\n&gt;&gt;\n&gt;&gt; Jakob, note that the body you receive in=\r\n the case of 4xx also contributes to application state. 4xx does not mean t=\r\nhat the communication / the application failed. It just means that the inte=\r\nnded interaction result was not achieved. The body tells you what to do nex=\r\nt. If your automated user agent understands the media type of that body, it=\r\n can probably take a sensible action.\n&gt;&gt;\n&gt;&gt; Even something simple as sendin=\r\ng the body of e.g. a 406 response to the IT helpdesk with an incident repor=\r\nt is still WAY BETTER than an RPC call that just dies upon you.\n&gt;&gt;\n&gt;&gt; Jan\n&gt;=\r\n&gt;\n&gt;&gt;\n&gt;&gt;\n&gt;&gt;\n&gt;&gt;\n&gt;&gt; &gt;\n&gt;&gt; &gt; mca\n&gt;&gt; &gt; http://amundsen.com/blog/\n&gt;&gt; &gt; http://twit=\r\nter.com@mamund\n&gt;&gt; &gt; http://mamund.com/foaf.rdf#me\n&gt;&gt; &gt;\n&gt;&gt; &gt;\n&gt;&gt; &gt; #RESTFest =\r\n2010\n&gt;&gt; &gt; http://rest-fest.googlecode.com\n&gt;&gt; &gt;\n&gt;&gt; &gt;\n&gt;&gt; &gt;\n&gt;&gt; &gt;\n&gt;&gt; &gt; On Wed, =\r\nFeb 9, 2011 at 13:55, Jan Algermissen &lt;algermissen1971@...&gt; wrote:\n&gt;&gt; &gt;&gt;\n&gt;&gt;=\r\n &gt;&gt; On Feb 9, 2011, at 7:45 PM, Jakob Strauch wrote:\n&gt;&gt; &gt;&gt;\n&gt;&gt; &gt;&gt;&gt;\n&gt;&gt; &gt;&gt;&gt; Wh=\r\nat about the possible errors? Well, maybe i have to expect all HTTP respons=\r\ne codes.\n&gt;&gt; &gt;&gt;\n&gt;&gt; &gt;&gt; Yep! HTTP *is* the interface. You have to expect all o=\r\nf it.\n&gt;&gt; &gt;&gt;\n&gt;&gt; &gt;&gt;&gt; At least the common one (404 etc.). In practice, only a =\r\nsmal subset of response codes will be supported.\n&gt;&gt; &gt;&gt;\n&gt;&gt; &gt;&gt; Why? And besid=\r\nes - who knows what intermediaries sit in the middle and produce responses =\r\nthe service developer never dreamed of?\n&gt;&gt; &gt;&gt;\n&gt;&gt; &gt;&gt;\n&gt;&gt; &gt;&gt;&gt; But how do you t=\r\nell the clients, which ones?\n&gt;&gt; &gt;&gt;\n&gt;&gt; &gt;&gt; RFC2616 tells them. There is no se=\r\nrvice specific description in a RESTful system.\n&gt;&gt; &gt;&gt;\n&gt;&gt; &gt;&gt;&gt; Are response c=\r\nodes not part of the &quot;contract&quot;.\n&gt;&gt; &gt;&gt;\n&gt;&gt; &gt;&gt; The contract is HTTP. No more =\r\nno less. That is what clients have to understand.\n&gt;&gt; &gt;&gt;\n&gt;&gt; &gt;&gt; Jan\n&gt;&gt; &gt;&gt;\n&gt;&gt; =\r\n&gt;&gt; P.S. However, in order to develop clients, you must have some sort of kn=\r\nowledge about the media types and link relations to expect. That is what th=\r\ne global registry (IANA) is for. If you apply REST inside the enterprise, a=\r\nn enterprise-global registry will suffice, meaning you do not necessarily h=\r\nave to register all your media types with IANA....but you can, of course.\n&gt;=\r\n&gt; &gt;&gt;\n&gt;&gt; &gt;&gt;\n&gt;&gt; &gt;&gt;\n&gt;&gt; &gt;&gt;\n&gt;&gt; &gt;&gt;\n&gt;&gt; &gt;&gt;\n&gt;&gt; &gt;&gt;&gt; Or are even all response part imp=\r\nlicit part of the contract?\n&gt;&gt; &gt;&gt;&gt;\n&gt;&gt; &gt;&gt;&gt;\n&gt;&gt; &gt;&gt;&gt; Jakob\n&gt;&gt; &gt;&gt;&gt;\n&gt;&gt; &gt;&gt;&gt;\n&gt;&gt; &gt;&gt;&gt;=\r\n\n&gt;&gt; &gt;&gt;&gt;\n&gt;&gt; &gt;&gt;&gt;\n&gt;&gt; &gt;&gt;&gt; ------------------------------------\n&gt;&gt; &gt;&gt;&gt;\n&gt;&gt; &gt;&gt;&gt; Ya=\r\nhoo! Groups Links\n&gt;&gt; &gt;&gt;&gt;\n&gt;&gt; &gt;&gt;&gt;\n&gt;&gt; &gt;&gt;&gt;\n&gt;&gt; &gt;&gt;\n&gt;&gt; &gt;&gt;\n&gt;&gt; &gt;&gt;\n&gt;&gt; &gt;&gt; ------------=\r\n------------------------\n&gt;&gt; &gt;&gt;\n&gt;&gt; &gt;&gt; Yahoo! Groups Links\n&gt;&gt; &gt;&gt;\n&gt;&gt; &gt;&gt;\n&gt;&gt; &gt;&gt;\n=\r\n&gt;&gt; &gt;&gt;\n&gt;&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt; ------------------------------------\n&gt;\n&gt; Yahoo! Groups L=\r\ninks\n&gt;\n&gt;\n&gt;\n&gt;\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"Jxe_9ZZwzdfKwaFkPJyXbHrnILBNYdPZUdjKm_0JO1aga5bOt5SN9RLVfXukk8nONjuDVuu1sMA8Ej1-SkOMe5TYaeDNTnG198EYAKOamg","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] REST isn&#39;t hard to learn, it&#39;s just taught wrong.","postDate":"1261440455","msgId":14316,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMDkxMjIxMTcwNzM1LjZiMzkxOWNlLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","inReplyToHeader":"PDIwMDkxMjIxMDAzNjA1LjdjZDkwNzBiLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","referencesHeader":"PDIwMDkxMjIwMjEyNjMzLjcxNWNhOTQyLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPDg3aXFjMHp6aWcud2wlYmVyZW5kQHBvYm94LmNvbT4JPDIwMDkxMjIwMjI0NjEyLmI4MzVmNTAyLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPDIwMDkxMjIwMjI1OTQwLjc1MzdlOTMxLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPDIwMDkxMjIxMDAzNjA1LjdjZDkwNzBiLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4="},"prevInTopic":14300,"nextInTopic":14318,"prevInTime":14315,"nextInTime":14317,"topicId":14255,"numMessagesInTopic":44,"msgSnippet":"... My system also extends Atom Protocol through the use of PATCH.  The system is a basic weblog, with multiple authors, plus registered and unregistered","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 77927 invoked from network); 22 Dec 2009 00:07:45 -0000\r\nX-Received: from unknown (66.196.94.106)\n  by m4.grp.sp2.yahoo.com with QMQP; 22 Dec 2009 00:07:45 -0000\r\nX-Received: from unknown (HELO mxout-08.mxes.net) (216.86.168.183)\n  by mta2.grp.re1.yahoo.com with SMTP; 22 Dec 2009 00:07:44 -0000\r\nX-Received: from bigbison (unknown [65.117.211.162])\n\t(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))\n\t(No client certificate requested)\n\tby smtp.mxes.net (Postfix) with ESMTPSA id 44CD7509DA;\n\tMon, 21 Dec 2009 19:07:43 -0500 (EST)\r\nDate: Mon, 21 Dec 2009 17:07:35 -0700\r\nTo: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nCc: berend@..., rest-discuss@yahoogroups.com\r\nMessage-Id: &lt;20091221170735.6b3919ce.eric@...&gt;\r\nIn-Reply-To: &lt;20091221003605.7cd9070b.eric@...&gt;\r\nReferences: &lt;20091220212633.715ca942.eric@...&gt;\n\t&lt;87iqc0zzig.wl%berend@...&gt;\n\t&lt;20091220224612.b835f502.eric@...&gt;\n\t&lt;20091220225940.7537e931.eric@...&gt;\n\t&lt;20091221003605.7cd9070b.eric@...&gt;\r\nOrganization: Bison Systems Corporation\r\nX-Mailer: Sylpheed 2.6.0 (GTK+ 2.10.14; i686-pc-mingw32)\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=US-ASCII\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nSubject: Re: [rest-discuss] REST isn&#39;t hard to learn, it&#39;s just taught\n wrong.\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\n&quot;Eric J. Bowman&quot; wrote:\n&gt; \n&gt; So my client extends Atom Protocol by self-describing the unspecified\n&gt; behavior of DELETE on a collection, in two different user-selectable\n&gt; ways, using hypertext to drive application state and avoiding Atom\n&gt; Protocol&#39;s REST mismatch on DELETE for both collections and member\n&gt; resources.  Client and server are now decoupled, and may evolve\n&gt; independently.\n&gt; \n\nMy system also extends Atom Protocol through the use of PATCH.  The\nsystem is a basic weblog, with multiple authors, plus registered and\nunregistered users.  Role-based security is implemented (using HTTP-\nDigest) per HTTP method:  Authors may POST new articles and PUT\nedits to their own articles.  Registered users may POST new comments\nand, for a limited time, PUT edits to their own comments.  Unregistered\nusers may POST comments.  Only Administrator-authors may DELETE\nanything.\n\nWhat I want, is for authors and registered users to be able to change\nthe tags associated with an article.  If I follow Atom Protocol and do\nthis with PUT, then I&#39;m breaking my security model by allowing any\nauthor or registered user to potentially edit the article, unless I add\na whole lot of code to the server.  This would also require much more\nbandwidth than necessary, since the client only wants to update the\n&lt;category/&gt; tags.  So I define application/atomcat+xml as one possible\ndelta format for application/atom+xml representations, and implement\nPATCH.\n\nNow, my security model remains intact, as I have a new method to\nsecure, which only allows the &lt;category/&gt; tags to be changed.  This\nwill flesh out to where the server returns 202 Accepted with a message\nindicating that the server keeps track of all submitted PATCH entities\nassociated with the article, and calculates the Top 5 tags, which then\nbecome the actual tags for an article.  So a PATCH request may or may\nnot honor the user&#39;s intention, and is not limited to only suggesting\nfive tags.  Without all that, a PATCH adds new tags by virtue of their\npresence, while removing old tags by virtue of their absence, in the\nsubmitted application/atomcat+xml document.\n\nSure, this implementation is architecturally sound, but I have to put\nup my asterisk stating that this portion of my API is not standardized,\nand is therefore not REST.  Currently, by virtue of Xforms 1.1 allowing\nany HTTP method to be used, PATCH is only defined for application/xhtml\n+xml.  Its use is not defined by the media types I&#39;m using, as\napplication/atomcat+xml doesn&#39;t define itself as a possible delta\nformat (even though it can be), and application/atom+xml only defines\nGET, PUT, POST and DELETE (and HEAD, as a given any time GET is\nallowed).\n\nSo how do I change my Implementation to make it REST?  Well, I don&#39;t.\nThe problem lies with my Model.  However, the (re)standardization of\nPATCH recently makes it inevitable that Atom Protocol will eventually\nbe revised -- PATCH only didn&#39;t make the cut because it wasn&#39;t &quot;in&quot;\nHTTP (even though it was).  Now that that&#39;s been cleared up, there&#39;s no\nreason to avoid PATCH in Atom Protocol (not suggesting this will happen\nany time soon, though).\n\nWhen the time comes to add PATCH to Atom Protocol, it will be possible\nto base that standardization on existing implementations.  If my use\nmakes the cut, I can change my Model to follow the new standard, instead\nof going off the reservation.  My Implementation wouldn&#39;t need to be\nchanged, but it would become RESTful.  Until then, it&#39;s proprietary,\neven if it&#39;s open-source, from the REST perspective.\n\n-Eric\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":289191104,"authorName":"Jan Algermissen","from":"Jan Algermissen &lt;algermissen1971@...&gt;","profile":"algermissen1971","replyTo":"SENDER","senderId":"cffsDCEuHNtP5Rrf3RBOXV3tgtEXaf8du7GOCYqUH--3vpXFoH6P-NHGtXgzyZWoKEAEFI-k3jn9vJvBN4CZL6q2_fruOWn2mwyYiEwTGUo","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Re: Restful Approaches to some Enterprise Integration Problems","postDate":"1278580295","msgId":15815,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDVDQjA1QjdCLTc2QUMtNDA2NS05MEE1LTVBQzIwNDg1RTcwQUBtYWMuY29tPg==","inReplyToHeader":"PEFBTkxrVGlua1NtbW9yUm9zMWsyYlpGN1pZZlAwU0d2Rkw3NXcwTHJTYXN1c0BtYWlsLmdtYWlsLmNvbT4=","referencesHeader":"PGkwdWxraCtsdnI5QGVHcm91cHMuY29tPiA8MDYxQzYzMkEtRERCNy00REUzLUIyMEQtRTgxRjY3NzIxQzA4QGdiaXYuY29tPiA8QUFOTGtUaW5rU21tb3JSb3MxazJiWkY3WllmUDBTR3ZGTDc1dzBMclNhc3VzQG1haWwuZ21haWwuY29tPg=="},"prevInTopic":15814,"nextInTopic":15816,"prevInTime":15814,"nextInTime":15816,"topicId":15761,"numMessagesInTopic":45,"msgSnippet":"... While it is certainly possible (and even with pure HTTP[1]) it would be against the simplicity/understandability goals of REST because it complicates the","rawEmail":"Return-Path: &lt;algermissen1971@...&gt;\r\nX-Sender: algermissen1971@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 24994 invoked from network); 8 Jul 2010 09:21:45 -0000\r\nX-Received: from unknown (98.137.34.45)\n  by m3.grp.sp2.yahoo.com with QMQP; 8 Jul 2010 09:21:45 -0000\r\nX-Received: from unknown (HELO asmtpout025.mac.com) (17.148.16.100)\n  by mta2.grp.sp2.yahoo.com with SMTP; 8 Jul 2010 09:21:45 -0000\r\nMIME-version: 1.0\r\nContent-transfer-encoding: 7BIT\r\nContent-type: text/plain; charset=us-ascii\r\nX-Received: from [10.208.109.6]\n (tmo-108-251.customers.d1-online.com [80.187.108.251])\n by asmtp025.mac.com (Sun Java(tm) System Messaging Server 6.3-8.01 (built Dec\n 16 2008; 32bit)) with ESMTPSA id &lt;0L58004GWEVBF270@...&gt; for\n rest-discuss@yahoogroups.com; Thu, 08 Jul 2010 02:11:41 -0700 (PDT)\r\nX-Proofpoint-Spam-Details: rule=notspam policy=default score=0 spamscore=0\n ipscore=0 phishscore=0 bulkscore=0 adultscore=0 classifier=spam adjust=0\n reason=mlx engine=6.0.2-1004200000 definitions=main-1007080013\r\nX-Proofpoint-Virus-Version: vendor=fsecure\n engine=1.12.8161:2.4.5,1.2.40,4.0.166\n definitions=2010-07-07_05:2010-02-06,2010-07-08,2010-07-08 signatures=0\r\nIn-reply-to: &lt;AANLkTinkSmmorRos1k2bZF7ZYfP0SGvFL75w0LrSasus@...&gt;\r\nDate: Thu, 08 Jul 2010 11:11:35 +0200\r\nCc: REST Discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nMessage-id: &lt;5CB05B7B-76AC-4065-90A5-5AC20485E70A@...&gt;\r\nReferences: &lt;i0ulkh+lvr9@...&gt;\n &lt;061C632A-DDB7-4DE3-B20D-E81F67721C08@...&gt;\n &lt;AANLkTinkSmmorRos1k2bZF7ZYfP0SGvFL75w0LrSasus@...&gt;\r\nTo: Glenn Block &lt;glenn.block@...&gt;\r\nX-Mailer: Apple Mail (2.1078)\r\nFrom: Jan Algermissen &lt;algermissen1971@...&gt;\r\nSubject: Re: [rest-discuss] Re: Restful Approaches to some Enterprise\n Integration Problems\r\nX-Yahoo-Group-Post: member; u=289191104; y=yTd9OojwVRaTLgIVFczh9bqw617aqWYOrE-hVU1tccwjIDUwLGlnkqTT\r\nX-Yahoo-Profile: algermissen1971\r\n\r\n\nOn Jul 8, 2010, at 7:52 AM, Glenn Block wrote:\n\n&gt; \n&gt; \n&gt; Hi Roy\n&gt;  \n&gt; Any thoughs on HTML5 Web Sockets wrt REST? Would it be viable to have a REST resources that can communicate changes (events) through web sockets? Or would you say that it is orthagonal?\n\nWhile it is certainly possible (and even with pure HTTP[1]) it would be against the simplicity/understandability goals of REST because it complicates the architecture (client components take a server role).\n\nI&#39;d try to go with polling as long as possible.\n\nJan\n\n\n[1] http://sourceforge.net/projects/mod-pubsub/\n\n\n\n&gt;  \n&gt; Thanks\n&gt; Glenn\n&gt; \n&gt; On Wed, Jul 7, 2010 at 8:25 PM, Roy T.Fielding &lt;fielding@...&gt; wrote:\n&gt;  \n&gt; \n&gt; On Jul 6, 2010, at 12:22 AM, bryan_w_taylor wrote:\n&gt; &gt; --- In rest-discuss@yahoogroups.com, &quot;Roy T. Fielding&quot; &lt;fielding@...&gt; wrote:\n&gt; &gt; \n&gt; &gt; &gt; &gt; Specifically, we are trying to find RESTful solutions to:\n&gt; &gt; &gt; &gt; \n&gt; &gt; &gt; &gt; 1) Guaranteed Delivery - we need a paradigm to follow so that one service can transfer a sequence of resource representations to another reliably even though both services and the network suffer temporary unreliability\n&gt; &gt; &gt; \n&gt; &gt; &gt; That doesn&#39;t sound like a problem encountered by RESTful\n&gt; &gt; &gt; architectures. Reliable upload of multiple files can be\n&gt; &gt; &gt; performed using a single zip file, but the assumption being made\n&gt; &gt; &gt; here is that the client has a shared understanding of what the\n&gt; &gt; &gt; server is intending to do with those files. That&#39;s coupling.\n&gt; &gt; \n&gt; &gt; I don&#39;t follow. Several people have given good simple answers saying to use the idempotent nature of PUT (or fake it with POST) until a GET of the resource succeeds or add an HTTP header of If-None-Match: * and repeat the PUT until you get a 412 Precondition Failed response, so I thought this was a slam dunk.\n&gt; \n&gt; I guess it depends on how you define guaranteed delivery. You can\n&gt; certainly do such things with HTTP, but doing CRUD ops via HTTP does\n&gt; not automatically make it a RESTful paradigm.\n&gt; \n&gt; \n&gt; &gt; But that answers &quot;how&quot; and I think you are getting at &quot;why&quot;. I&#39;m imagining that we have two servers A and B, where A plays the role of the client in the interaction. Events happen on server A and server B must receive some representation related to each event or unacceptable business consequences occur.\n&gt; \n&gt; Ah, typical event-based integration. That&#39;s a good architectural\n&gt; style for some applications. Why use REST to do that?\n&gt; \n&gt; \n&gt; &gt; Why can&#39;t we merge the functionality of server A and B? Lots of reasons: Security, regulatory compliance, use of 3rd party systems, organizational boundaries and/or politics are a few. The way a company manages it&#39;s systems engineering work is to partition business functionality into pieces, give ownership of each piece to a team, and align physical resources like servers to those teams. If this imposes constraints not found in RESTful systems, then I have no choice but to deal with those. \n&gt; \n&gt; Yes, but the RESTful solution is not to pretend that REST is an\n&gt; event-based integration style. What you want to do with REST is\n&gt; re-architect the system into more isolated parts that are event-based\n&gt; (usually a very small communication subsystem) and the remainder\n&gt; as a layered information system. The reason to do this, presumably,\n&gt; is to expose the RESTful interface to consumers instead of exposing\n&gt; the much more complex (and brittle) event interface.\n&gt; \n&gt; For example, CQ5 has a content repository based on the JCR\n&gt; interface, which includes both observation (change event notifiers)\n&gt; and RESTful interaction. The observation is behind the resource\n&gt; interface, so the fact that it isn&#39;t RESTful itself does not\n&gt; interfere with the multi-organizational, long-lived applications\n&gt; that might only use the Web interface.\n&gt; \n&gt; \n&gt; &gt; &gt; Applications like that are usually accomplished via code-on-demand.\n&gt; &gt; &gt; The problem you will run into here is implementation issues\n&gt; &gt; &gt; regarding current browsers, not architectural issues and\n&gt; &gt; &gt; certainly not a style issue. Most such tools are developed\n&gt; &gt; &gt; as browser extensions or app-specific clients, mostly because\n&gt; &gt; &gt; they need unfettered access to the filesystem and because\n&gt; &gt; &gt; browsers (for some unknown reason) don&#39;t include integrity checks\n&gt; &gt; &gt; in normal file uploads.\n&gt; &gt; \n&gt; &gt; I expect the clients of most of our services would count as &quot;app specific clients&quot;. These might be our other services, our app servers that host user interfaces, or sometimes we will allow external business entities (customers, partners, suppliers, etc...) to write such apps directly. I don&#39;t mind going beyond browser limitations. \n&gt; &gt; \n&gt; &gt; &gt; &gt; 2) Distributed Transactions - we need a paradigm to allow state changes on multiple services to happen so that the changes succeed or fail as a unit\n&gt; &gt; &gt; \n&gt; &gt; &gt; Again, not a characteristic of RESTful architectures. If the\n&gt; &gt; &gt; client knows the transaction is distributed, you have failed.\n&gt; &gt; &gt; There are lots of ways to solve this kind of problem on the\n&gt; &gt; &gt; back-end of services interfaces, behind the resource abstraction,\n&gt; &gt; &gt; but none of those are relevant to the REST architectural style\n&gt; &gt; &gt; that might apply on the front-end of the service interface.\n&gt; &gt; \n&gt; &gt; This one I accept doesn&#39;t fit in a RESTful solution, and in other posts in this thread, we are exploring several of other ways you mention.\n&gt; &gt; \n&gt; &gt; &gt; &gt; 3) Long running operations - we need asynchronous invocations between services and a mechanism for the invoking service to find out when the invoked service is done given that this work may take indefinitely long\n&gt; &gt; &gt; \n&gt; &gt; &gt; Any resource can behave as a long-running service. Just program it that way.\n&gt; &gt; \n&gt; &gt; Right, the question is how, exactly. Good solutions have been posted in this thread for this. Subbu&#39;s RESTful Web Services Cookbook solves this in examples 1.10 and 1.11. I think this was another slam dunk.\n&gt; &gt; \n&gt; &gt; I&#39;m curious what you think about using so called &quot;web hooks&quot; for this kind of thing. Would you consider this a violation of the client-server constraint? \n&gt; \n&gt; No, web hooks is just someone&#39;s marketing term for registering\n&gt; notifications. The components that act on them are still either\n&gt; clients or servers during the communication (i.e., they are not\n&gt; trying to do both at the same time and functionality is still\n&gt; split across components). This is not a new concept. E.g.,\n&gt; \n&gt; http://www.xent.com/FoRK-archive/apr98/0445.html\n&gt; \n&gt; http://www.xent.com/FoRK-archive/august98/0307.html\n&gt; \n&gt; \n&gt; &gt; &gt; &gt; 4) Workflow Orchestration - we would like to have orchestration services that define business processes via standardized representations (eg BPMN), then execute instances of those processes and build up an process instance execution data resource by interacting with other RESTful resources using message exchange patterns that could specify the above behaviors.\n&gt; &gt; &gt; \n&gt; &gt; &gt; That is a system, not an integration problem. If you want to\n&gt; &gt; &gt; solve it, buy a full-featured WCM system like Day&#39;s CQ5.\n&gt; &gt; &gt; \n&gt; &gt; &gt; http://www.day.com/day/en/products/web_content_management.html\n&gt; &gt; &gt; \n&gt; &gt; &gt; (sorry, I don&#39;t have a way to answer that one without sounding\n&gt; &gt; &gt; like a sales plug -- it is, after all, why I work for a WCM vendor).\n&gt; &gt; \n&gt; &gt; No need to apologize for pointing me to a product that might be useful for us. I&#39;ve been in several sales presentations in the last couple weeks with different vendors who have big fancy workflow engines. They all want to talk about WS-BPEL and orchestrating our SOAP endpoints. I enjoy the look of confusion when I mention that we are considering not allowing any new services to be created using SOAP. That seems to get their attention. They say &quot;what will you do instead?&quot; and I say use HTTP and they say &quot;huh?&quot;. \n&gt; \n&gt; As much as I like doing things in HTTP, there are many closed systems\n&gt; that are better implemented in an efficient RPC syntax or a wire\n&gt; protocol specifically designed for message queues. Use whatever\n&gt; works best for the specific architecture behind the resource interface\n&gt; and then apply REST as the external facade to support large-scale\n&gt; integration and reusability of the information produced/consumed.\n&gt; \n&gt; Note, however, that SOAP is fairly unique for being the least efficient\n&gt; way of doing anything. That&#39;s what happens when core protocol design\n&gt; is driven by marketing.\n&gt; \n&gt; ....Roy\n&gt; \n&gt; \n&gt; \n&gt; \n&gt; \n&gt; \n&gt; \n\n-----------------------------------\n Jan Algermissen, Consultant\n NORD Software Consulting\n\n Mail: algermissen@...\n Blog: http://www.nordsc.com/blog/\n Work: http://www.nordsc.com/\n-----------------------------------\n\n\n\n\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":0,"authorName":"Jeff Bone","from":"Jeff Bone &lt;jbone@...&gt;","replyTo":"SENDER","senderId":"A_28zMS2YnsH4wAbo3enYD8ZOTnzdaqeRGI1hCrnAkh5wy-9fvtVvXCOCZXNMNxE7ENxpVPOHOwGr7OnrAlxnnJ8RlrO","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] HTTP/Linda, and versioning/locking rant","postDate":"1026232145","msgId":1769,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEI5NTA3OTgxLjNDQzMlamJvbmVAZGVlcGZpbGUuY29tPg=="},"prevInTopic":1761,"nextInTopic":1772,"prevInTime":1768,"nextInTime":1770,"topicId":1733,"numMessagesInTopic":74,"msgSnippet":"... That s a good question...  IME, the lost update problem is neither as common / problematic as most people seem to think, nor as difficult to resolve.  It","rawEmail":"Return-Path: &lt;jbone@...&gt;\r\nX-Sender: jbone@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_0_7_4); 9 Jul 2002 16:29:09 -0000\r\nReceived: (qmail 8775 invoked from network); 9 Jul 2002 16:29:09 -0000\r\nReceived: from unknown (66.218.66.216)\n  by m6.grp.scd.yahoo.com with QMQP; 9 Jul 2002 16:29:09 -0000\r\nReceived: from unknown (HELO blanco.deepfile.com) (24.242.137.237)\n  by mta1.grp.scd.yahoo.com with SMTP; 9 Jul 2002 16:29:09 -0000\r\nReceived: from [192.168.123.100] ([192.168.123.100])\n\t(authenticated)\n\tby blanco.deepfile.com (8.11.6/8.11.6) with ESMTP id g69GRYx03473;\n\tTue, 9 Jul 2002 11:27:35 -0500\r\nUser-Agent: Microsoft-Entourage/10.0.0.1331\r\nDate: Tue, 09 Jul 2002 11:29:05 -0500\r\nSubject: Re: [rest-discuss] HTTP/Linda, and versioning/locking rant\r\nTo: Robert Leftwich &lt;robert@...&gt;\r\nCc: &lt;rest-discuss@yahoogroups.com&gt;\r\nMessage-ID: &lt;B9507981.3CC3%jbone@...&gt;\r\nMime-version: 1.0\r\nContent-type: text/plain; charset=&quot;US-ASCII&quot;\r\nContent-transfer-encoding: 7bit\r\nFrom: Jeff Bone &lt;jbone@...&gt;\r\nX-Yahoo-Group-Post: public\r\n\r\nOn 7/8/02 7:58 PM, &quot;Robert Leftwich&quot; &lt;robert@...&gt; wrote:\n\n&gt; \n&gt; Since the OP specifically mentioned process synchronization, how does the\n&gt; immutable approach make that disappear? More specifically how does it handle\n&gt; the stale data/lost update problem? I can see that there is no such thing\n&gt; as a lost update in the traditional sense, but how does it cope with that\n&gt; scenario and still make sure that the &#39;current &#39; file contents are accurate?\n\nThat&#39;s a good question...  IME, the &quot;lost update&quot; problem is neither as\ncommon / problematic as most people seem to think, nor as difficult to\nresolve.  It does, however, usually require really application-specific\nsolutions.\n\nIn the case where the stored objects --- including perhaps the canonical\nname -&gt; object mappings --- are immutable, there are a number of ways to\nresolve it.  Techniques for doing so are indeed simpler by virtue of the\nimmutability of the stored objects.  Consider the following sequence:\n\nA looks up name foo, gets ref to object 1\nA computes 1&#39; from 1\nB looks up name foo, gets ref to object 1\nB computes 1&#39;&#39; from 1\nB writes 1&#39;&#39;\nB writes new mapping of foo -&gt; 1&#39;&#39;\nA writes new mapping of foo -&gt; 1&#39;\n\nThe canonical mapping of foo now points at 1&#39;, and the mapping foo -&gt; 1&#39;&#39; is\n&quot;lost.&quot;  However, it&#39;s not really lost:  during this time, the mappings from\nname to object have been:\n\nt1: foo -&gt; 1\nt2: foo -&gt; 1&#39;&#39;\nt3: foo -&gt; 1&#39;\n\nThe version tree for the object has been (read down and left-to-right)\n\nFoo @ t1 --&gt;    1\n               / &#92;\nFoo @ t2 --&gt;  1&#39;&#39; &#92;\n                   &#92;\nFoo @ t3 --&gt;        1&#39;\n\nThe &quot;canonical&quot; version of the object can heuristically be considered to be\nthe one pointed to by the latest mapping of name -&gt; object.  If this isn&#39;t\nsufficient, if it&#39;s truly necessary for correct application semantics to\nensure that this mapping is never updated if it has been updated subsequent\nto the initial read, then it suffices to just check the canonical (most\ncurrent) mapping to ensure it&#39;s the same before doing the update.  I.e.:\n\nA looks up name foo, gets ref to object 1\nA computes 1&#39; from 1\nB looks up name foo, gets ref to object 1\nB computes 1&#39;&#39; from 1\nB writes 1&#39;&#39;\nCONDITIONAL ON foo -&gt; 1, B writes new mapping of foo -&gt; 1&#39;&#39;\nCONDITIONAL ON foo -&gt; 1, A writes new mapping of foo -&gt; 1&#39;\n\nIn the failure case, A must then take some application-specific action to\nresolve things.  This could be notifying a user, rereading and doing some\nkind of merge, etc.\n\nNote that transactions --- the ability to perform or not perform a sequence\nof such actions as an atomic unit --- does indeed aid in implementation of\ncorrect algorithms even in the presence of immutable stored objects.  But\nthat&#39;s really orthogonal to locking - transactions in the abstract neither\nimply nor require locking.\n\n&gt; \n&gt; Further, were you implying that immutability makes the problem of\n&gt; people/processes working out of queue go away, e.g. in the workflow sense\n&gt; that there is a shared queue of work needing to be done, with multiple\n&gt; processes being fed from the queue, how does immutability help with this\n&gt; sort of process synch&#39;ing?\n\nI&#39;m not sure it does...  Explain further?\n\nJb\n\n\n"}}
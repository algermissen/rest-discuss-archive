{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":228155998,"authorName":"Mike Schinkel","from":"&quot;Mike Schinkel&quot; &lt;mikeschinkel@...&gt;","profile":"mikeschinkel","replyTo":"SENDER","senderId":"N-is3Iu-NgHdH2_jOz2Z_MeLR1kAwQw1xEAXeCAK73hvRe1IyuohCA8YEBk6jMUEw9iKe1hPSaMUovA19b7C5R8jlMTBv7zVeKPSO_8TcA","spamInfo":{"isSpam":false,"reason":"0"},"subject":"RE: [rest-discuss] orchestration - choreography","postDate":"1163140772","msgId":6808,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDAwZGQwMWM3MDQ5MiRmYjIxZWY3MCQwNzAyYThjMEBHdWlkZXMubG9jYWw+","inReplyToHeader":"PDAzMEMyMzg2LTc1MjItNEEzMS04NDU1LTU4OTBCRjlGNTI4MkB0b3BpY21hcHBpbmcuY29tPg=="},"prevInTopic":6802,"nextInTopic":6821,"prevInTime":6807,"nextInTime":6809,"topicId":6790,"numMessagesInTopic":16,"msgSnippet":"Jan This form of loose coupling is simply impossible Jan if the client has to know (aka hard-coded) the Jan call sequence of the API methods. Here s what","rawEmail":"Return-Path: &lt;mikeschinkel@...&gt;\r\nX-Sender: mikeschinkel@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 62432 invoked from network); 10 Nov 2006 06:43:34 -0000\r\nReceived: from unknown (66.218.67.35)\n  by m35.grp.scd.yahoo.com with QMQP; 10 Nov 2006 06:43:34 -0000\r\nReceived: from unknown (HELO wx-out-0506.google.com) (66.249.82.225)\n  by mta9.grp.scd.yahoo.com with SMTP; 10 Nov 2006 06:43:34 -0000\r\nReceived: by wx-out-0506.google.com with SMTP id i30so539401wxd\n        for &lt;rest-discuss@yahoogroups.com&gt;; Thu, 09 Nov 2006 22:39:33 -0800 (PST)\r\nReceived: by 10.70.109.12 with SMTP id h12mr2398935wxc.1163140773356;\n        Thu, 09 Nov 2006 22:39:33 -0800 (PST)\r\nReturn-Path: &lt;mikeschinkel@...&gt;\r\nReceived: from desktop ( [69.94.221.21])\n        by mx.google.com with ESMTP id 10sm2485135wrl.2006.11.09.22.39.32;\n        Thu, 09 Nov 2006 22:39:33 -0800 (PST)\r\nTo: &lt;rest-discuss@yahoogroups.com&gt;\r\nDate: Fri, 10 Nov 2006 01:39:32 -0500\r\nMessage-ID: &lt;00dd01c70492$fb21ef70$0702a8c0@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: multipart/alternative;\n\tboundary=&quot;----=_NextPart_000_00DE_01C70469.124BE770&quot;\r\nX-Mailer: Microsoft Office Outlook 11\r\nX-MimeOLE: Produced By Microsoft MimeOLE V6.00.2900.2962\r\nThread-Index: AccEfjjg0IsL5GHdSbq0kK8jvrOsMAAFAygA\r\nIn-Reply-To: &lt;030C2386-7522-4A31-8455-5890BF9F5282@...&gt;\r\nFrom: &quot;Mike Schinkel&quot; &lt;mikeschinkel@...&gt;\r\nSubject: RE: [rest-discuss] orchestration - choreography\r\nX-Yahoo-Group-Post: member; u=228155998; y=S6Sefg6L88FfLfSVD8f3y1l-w8vow3zfTGKI1wmVhuQ-KreKVUVR\r\nX-Yahoo-Profile: mikeschinkel\r\n\r\n\r\n------=_NextPart_000_00DE_01C70469.124BE770\r\nContent-Type: text/plain;\n\tcharset=&quot;us-ascii&quot;\r\nContent-Transfer-Encoding: 7bit\r\n\r\nJan&gt;&gt; This form of loose coupling is simply impossible \nJan&gt;&gt; if the client has to know (aka hard-coded) the \nJan&gt;&gt; call sequence of the API methods.\n \nHere&#39;s what I haven&#39;t figured out. Yes, hypermedia can provide the ability\nto go from link to link to link in an automated fashion, but how can the\nknowledge of what parameters to pass and why to do with the return values to\narranged in a chained-automated hypermedia fashion (and does how I worked my\nquestion make sense? :-)\n \nIt seems to me your code has to understand the specific APIs in order to do\nanything useful...?\n \n-Mike Schinkel \nhttp://www.mikeschinkel.com/blogs/ \nhttp://www.welldesignedurls.org/ \n\n\n  _____  \n\nFrom: rest-discuss@yahoogroups.com [mailto:rest-discuss@yahoogroups.com] On\nBehalf Of Jan Algermissen\nSent: Thursday, November 09, 2006 5:03 PM\nTo: Nic James Ferrier\nCc: Stelios Eliakis; rest-discuss@yahoogroups.com\nSubject: Re: [rest-discuss] orchestration - choreography\n\n\n\n\nOn Nov 9, 2006, at 8:06 PM, Nic James Ferrier wrote:\n\n&gt; orchestration is surely more complex than that. It is the meeting of\n&gt; many web services to achieve some business process.\n&gt;\n&gt; It&#39;s really a nonsense term. It&#39;s just another form of\n&gt; programming.\n\nExactly, it is entirely procedural.\n\nI think that when you approach the topic of processes from a REST \nPOV, the processes should become applications (in the REST sense). To \ncreate a new process instance you POST to the process container and \nget back the URI of the instance. A GET on that URI will provide you \nwith some hypermedia that tells you what state transitions are \npossible from the current state of the process. Depending on who does \nthe GET the application can present different sets of possible \ntransitions. That way the application (the process instance) serves \nas a coordinator for the various process participants.\n\nTrouble ticket systems are a very nice example of that, I think. \nEvery individual ticket (==process instance) coordinates stakeholders \nof the incident represented by the ticket.\n\nWhat makes REST so special is that the clients need not know anything \nabout the application flow (the state machine), they just need to \nunderstand link semantics. This enables the application to change the \nstate machine without beaking client code.\n\nWhen you do a purchase at Amazon, you do not memorize the transitions \nyou did once and do the same transitions every time; you start from \nthe beginning each time and let the application take you through the \nstate machine. If it changes from one purchase to the next (e.g. they \nmight bring in an extra click-here-to-get-a-discount step), you will \nstill be able to carry out your purchase as desired.\n\nThis form of loose coupling is simply impossible if the client has to \nknow (aka hard-coded) the call sequence of the API methods.\n\nJan\n\n&gt; But a form of programming that deals with very high level\n&gt; concepts rather than the nitty gritty that programmers usually deal\n&gt; with.\n\n\n\n \n\r\n------=_NextPart_000_00DE_01C70469.124BE770\r\nContent-Type: text/html;\n\tcharset=&quot;us-ascii&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.=\r\nw3c.org/TR/1999/REC-html401-19991224/loose.dtd&quot;&gt;\n&lt;HTML&gt;&lt;HEAD&gt;\n&lt;META http-eq=\r\nuiv=3DContent-Type content=3D&quot;text/html; charset=3Dus-ascii&quot;&gt;&lt;!-- Network c=\r\nontent --&gt;\n&lt;META content=3D&quot;MSHTML 6.00.2900.2963&quot; name=3DGENERATOR&gt;&lt;/HEAD&gt;=\r\n\n&lt;BODY style=3D&quot;BACKGROUND-COLOR: #ffffff&quot;&gt;\n&lt;DIV dir=3Dltr align=3Dleft&gt;&lt;SP=\r\nAN class=3D130283406-10112006&gt;Jan&gt;&gt; &lt;/SPAN&gt;This \nform of loose coupli=\r\nng is simply impossible &lt;/DIV&gt;\n&lt;DIV dir=3Dltr align=3Dleft&gt;Jan&lt;SPAN class=\r\n=3D130283406-10112006&gt;&gt;&gt; &lt;/SPAN&gt;if the \nclient has to know (aka hard-=\r\ncoded) the &lt;/DIV&gt;\n&lt;DIV dir=3Dltr align=3Dleft&gt;Jan&lt;SPAN class=3D130283406-10=\r\n112006&gt;&gt;&gt; &lt;/SPAN&gt;call \nsequence of the API methods.&lt;/DIV&gt;\n&lt;DIV dir=3D=\r\nltr align=3Dleft&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV dir=3Dltr align=3Dleft&gt;&lt;SPAN class=3D130=\r\n283406-10112006&gt;&lt;/SPAN&gt;&lt;FONT \ncolor=3D#0000ff&gt;&lt;FONT size=3D2&gt;H&lt;SPAN class=\r\n=3D130283406-10112006&gt;ere&#39;s what I haven&#39;t \nfigured out. Yes, hypermedia ca=\r\nn provide the ability to go from link to link to \nlink in an automated fash=\r\nion, but how can the knowledge of what parameters to \npass and why to do wi=\r\nth the return values to arranged in a chained-automated \nhypermedia fashion=\r\n&nbsp;(and does how I worked my question make sense? \n:-)&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FO=\r\nNT&gt;&lt;/DIV&gt;\n&lt;DIV dir=3Dltr align=3Dleft&gt;&lt;FONT color=3D#0000ff&gt;&lt;FONT size=3D2&gt;=\r\n&lt;SPAN \nclass=3D130283406-10112006&gt;&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV di=\r\nr=3Dltr align=3Dleft&gt;&lt;FONT color=3D#0000ff&gt;&lt;FONT size=3D2&gt;&lt;SPAN \nclass=3D13=\r\n0283406-10112006&gt;It seems to me your code has to understand the specific \nA=\r\nPIs in order to do anything useful...?&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV dir=\r\n=3Dltr align=3Dleft&gt;&lt;SPAN lang=3Den-us&gt;&lt;FONT face=3DVerdana \nsize=3D2&gt;&lt;/FON=\r\nT&gt;&lt;/SPAN&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV dir=3Dltr align=3Dleft&gt;&lt;SPAN lang=3Den-us&gt;&lt;FONT =\r\nface=3DVerdana size=3D2&gt;-Mike \nSchinkel&lt;/FONT&gt;&lt;/SPAN&gt; &lt;BR&gt;&lt;SPAN lang=3Den-u=\r\ns&gt;&lt;U&gt;&lt;FONT face=3DVerdana color=3D#0000ff \nsize=3D2&gt;&lt;A \nhref=3D&quot;http://www.=\r\nmikeschinkel.com/blogs/&quot;&gt;http://www.mikeschinkel.com/blogs/&lt;/A&gt;&lt;/FONT&gt;&lt;/U&gt;&lt;=\r\n/SPAN&gt; \n&lt;BR&gt;&lt;SPAN lang=3Den-us&gt;&lt;U&gt;&lt;FONT face=3DVerdana color=3D#0000ff size=\r\n=3D2&gt;&lt;A \nhref=3D&quot;http://www.welldesignedurls.org/&quot;&gt;http://www.welldesignedu=\r\nrls.org/&lt;/A&gt;&lt;/FONT&gt;&lt;/U&gt;&lt;/SPAN&gt; \n&lt;/DIV&gt;&lt;BR&gt;&lt;BR&gt;\n&lt;DIV class=3DOutlookMessageH=\r\neader lang=3Den-us dir=3Dltr align=3Dleft&gt;\n&lt;HR tabIndex=3D-1&gt;\n&lt;FONT face=3D=\r\nTahoma size=3D2&gt;&lt;B&gt;From:&lt;/B&gt; rest-discuss@yahoogroups.com \n[mailto:rest-dis=\r\ncuss@yahoogroups.com] &lt;B&gt;On Behalf Of &lt;/B&gt;Jan \nAlgermissen&lt;BR&gt;&lt;B&gt;Sent:&lt;/B&gt; =\r\nThursday, November 09, 2006 5:03 PM&lt;BR&gt;&lt;B&gt;To:&lt;/B&gt; \nNic James Ferrier&lt;BR&gt;&lt;B&gt;=\r\nCc:&lt;/B&gt; Stelios Eliakis; \nrest-discuss@yahoogroups.com&lt;BR&gt;&lt;B&gt;Subject:&lt;/B&gt; R=\r\ne: [rest-discuss] orchestration \n- choreography&lt;BR&gt;&lt;/FONT&gt;&lt;BR&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;=\r\n/DIV&gt;\n&lt;DIV id=3Dygrp-text&gt;\n&lt;P&gt;&lt;FONT face=3DVerdana color=3D#0000ff&gt;&lt;/FONT&gt;&lt;=\r\nBR&gt;On Nov 9, 2006, at 8:06 PM, Nic \nJames Ferrier wrote:&lt;BR&gt;&lt;BR&gt;&gt; orches=\r\ntration is surely more complex than that. \nIt is the meeting of&lt;BR&gt;&gt; man=\r\ny web services to achieve some business \nprocess.&lt;BR&gt;&gt;&lt;BR&gt;&gt; It&#39;s real=\r\nly a nonsense term. It&#39;s just another form \nof&lt;BR&gt;&gt; programming.&lt;BR&gt;&lt;BR&gt;=\r\nExactly, it is entirely procedural.&lt;BR&gt;&lt;BR&gt;I \nthink that when you approach =\r\nthe topic of processes from a REST &lt;BR&gt;POV, the \nprocesses should become ap=\r\nplications (in the REST sense). To &lt;BR&gt;create a new \nprocess instance you P=\r\nOST to the process container and &lt;BR&gt;get back the URI of \nthe instance. A G=\r\nET on that URI will provide you &lt;BR&gt;with some hypermedia that \ntells you wh=\r\nat state transitions are &lt;BR&gt;possible from the current state of the \nproces=\r\ns. Depending on who does &lt;BR&gt;the GET the application can present different =\r\n\nsets of possible &lt;BR&gt;transitions. That way the application (the process \ni=\r\nnstance) serves &lt;BR&gt;as a coordinator for the various process \nparticipants.=\r\n&lt;BR&gt;&lt;BR&gt;Trouble ticket systems are a very nice example of that, I \nthink. &lt;=\r\nBR&gt;Every individual ticket (=3D=3Dprocess instance) coordinates stakeholder=\r\ns \n&lt;BR&gt;of the incident represented by the ticket.&lt;BR&gt;&lt;BR&gt;What makes REST so=\r\n special \nis that the clients need not know anything &lt;BR&gt;about the applicat=\r\nion flow (the \nstate machine), they just need to &lt;BR&gt;understand link semant=\r\nics. This enables \nthe application to change the &lt;BR&gt;state machine without =\r\nbeaking client \ncode.&lt;BR&gt;&lt;BR&gt;When you do a purchase at Amazon, you do not m=\r\nemorize the \ntransitions &lt;BR&gt;you did once and do the same transitions every=\r\n time; you start \nfrom &lt;BR&gt;the beginning each time and let the application =\r\ntake you through the \n&lt;BR&gt;state machine. If it changes from one purchase to=\r\n the next (e.g. they \n&lt;BR&gt;might bring in an extra click-here-to-&lt;WBR&gt;get-a-=\r\ndiscount step), you will \n&lt;BR&gt;still be able to carry out your purchase as d=\r\nesired.&lt;BR&gt;&lt;BR&gt;This form of \nloose coupling is simply impossible if the cli=\r\nent has to &lt;BR&gt;know (aka \nhard-coded) the call sequence of the API methods.=\r\n&lt;BR&gt;&lt;BR&gt;Jan&lt;BR&gt;&lt;BR&gt;&gt; But a \nform of programming that deals with very hig=\r\nh level&lt;BR&gt;&gt; concepts rather than \nthe nitty gritty that programmers usu=\r\nally deal&lt;BR&gt;&gt; with.&lt;BR&gt;&lt;BR&gt;&lt;/P&gt;&lt;/DIV&gt;&lt;!--End group email --&gt;&lt;/BODY&gt;&lt;/HT=\r\nML&gt;\n\r\n------=_NextPart_000_00DE_01C70469.124BE770--\r\n\n"}}
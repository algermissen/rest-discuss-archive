{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"ZHjN9L39Kp8-vbsABg2823-xA_Xh4tBHBoDHeRbYBjSS91SGO_sPoz0nG-Ya0GdxDy0h3lQUWQXP-VjCt6noypcARuhFMV9v2gPyfilMKg","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] REST API descriptions","postDate":"1262995315","msgId":14477,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMTAwMTA4MTcwMTU1LjY4MGE0YmJjLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","inReplyToHeader":"PDNCMzUxM0JGLUQyQTItNERGOC1COUE3LUVFNUQ0RTk4Qzg4QUBtYWMuY29tPg==","referencesHeader":"PDAwM0FCQ0MyLTE0RDQtNDREQi1CQzM3LTE2NkUxQzY2RDEyRUBtYWMuY29tPgk8MjAxMDAxMDcxMjU4MzcuNWM0ZWRmZWUuZXJpY0BiaXNvbnN5c3RlbXMubmV0Pgk8NUM4QzRGNTktQkQ4Qy00RjE2LUE0NUItRUU3RDRCNkFGOTc0QG1hYy5jb20+CTwyMDEwMDEwODEzNDYzNS4xM2NhMDgxZS5lcmljQGJpc29uc3lzdGVtcy5uZXQ+CTwzQjM1MTNCRi1EMkEyLTRERjgtQjlBNy1FRTVENEU5OEM4OEFAbWFjLmNvbT4="},"prevInTopic":14475,"nextInTopic":14484,"prevInTime":14476,"nextInTime":14478,"topicId":14461,"numMessagesInTopic":10,"msgSnippet":"... Regardless, RFC 5023 is correct that RFC 2616 says exactly what I said, about using descriptive messaging (and linking) in 4xx response bodies. When","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 48017 invoked from network); 9 Jan 2010 00:02:31 -0000\r\nX-Received: from unknown (98.137.34.46)\n  by m12.grp.re1.yahoo.com with QMQP; 9 Jan 2010 00:02:31 -0000\r\nX-Received: from unknown (HELO mxout-08.mxes.net) (216.86.168.183)\n  by mta3.grp.sp2.yahoo.com with SMTP; 9 Jan 2010 00:02:31 -0000\r\nX-Received: from bigbison (unknown [65.117.211.162])\n\t(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))\n\t(No client certificate requested)\n\tby smtp.mxes.net (Postfix) with ESMTPSA id 23E91509DC;\n\tFri,  8 Jan 2010 19:02:28 -0500 (EST)\r\nDate: Fri, 8 Jan 2010 17:01:55 -0700\r\nTo: Jan Algermissen &lt;algermissen1971@...&gt;\r\nCc: REST Discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nMessage-Id: &lt;20100108170155.680a4bbc.eric@...&gt;\r\nIn-Reply-To: &lt;3B3513BF-D2A2-4DF8-B9A7-EE5D4E98C88A@...&gt;\r\nReferences: &lt;003ABCC2-14D4-44DB-BC37-166E1C66D12E@...&gt;\n\t&lt;20100107125837.5c4edfee.eric@...&gt;\n\t&lt;5C8C4F59-BD8C-4F16-A45B-EE7D4B6AF974@...&gt;\n\t&lt;20100108134635.13ca081e.eric@...&gt;\n\t&lt;3B3513BF-D2A2-4DF8-B9A7-EE5D4E98C88A@...&gt;\r\nOrganization: Bison Systems Corporation\r\nX-Mailer: Sylpheed 2.6.0 (GTK+ 2.10.14; i686-pc-mingw32)\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=US-ASCII\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nSubject: Re: [rest-discuss] REST API descriptions\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\nJan Algermissen wrote:\n&gt;\n&gt; &gt; Please see sections 4.4 and 5.5 of RFC 5023.\n&gt; \n&gt; I know - but RFC 5023 should actually not do that.\n&gt; \n\nRegardless, RFC 5023 is correct that RFC 2616 says exactly what I said,\nabout using descriptive messaging (and linking) in 4xx response bodies.\nWhen someone wants to know what REST is, I point them to what it is not\n-- every major CMS implementation out there (wiki, forum, weblog etc.)\nreturns a fully-styled page, either to create the resource, or a search\ninterface, when a document isn&#39;t found.\n\nThe problem is they all do this with a 200 OK response, when the\ncorrect response is 404.  There&#39;s nothing wrong with a 404 page that\nlooks like the rest of the site, complete with menu links, offering a\nvariety of choices for error recovery.  I explain that changing the\nresponse code wouldn&#39;t make the system RESTful, but it does illustrate\nthe idea of hypertext driving application state very well.\n\nIs the 404 failure mode of the system a search interface (forum), or a\ncreate new content interface (wiki)?  You can document this out-of-band\nif you&#39;d like, but this aspect of the API documents itself in hypertext,\nalong with all the other choices for transitioning to another steady-\nstate (menu links), to recover from the error.\n\nThe standard 404 response is essentially terminating the application,\nthe user has to back up and try something different, instead of being\ninstructed as to how to move forwards.  That isn&#39;t a self-documenting\nAPI.\n\n&gt;\n&gt; &gt;  Response codes are indeed\n&gt; &gt; described by HTTP, that isn&#39;t the issue.  The issue is what\n&gt; &gt; response is\n&gt; &gt; issued to what request, and that isn&#39;t defined by media type.\n&gt; \n&gt; No, it is completely up to the server. The server may respond in any  \n&gt; way, as long as the response is correctly telling the client what  \n&gt; happened (e.g. send 201 when a resource has been created). The  \n&gt; examples in RFC 5023 do actually tell you nothing about how a given  \n&gt; server might choose to respond.\n&gt; \n\nExactly.  The server&#39;s response tells you how the server responded to a\nhypertext interaction.  You asked what you need to document outside the\nscope of a media type.  Whatever out-of-band documentation you have\nshould be reflective of what&#39;s actually happening in-band.  The media\ntype is only telling you what methods to use and how to use them, not\nwhat the responses are going to be... wiggle-room, like I said.\n\n&gt;\n&gt; &gt; My Atom\n&gt; &gt; Protocol implementation may respond 202 Accepted instead of 201  \n&gt; &gt; Created\n&gt; &gt; because I&#39;ve implemented moderation of new content.  Only my API can\n&gt; &gt; describe that authoritatively.\n&gt; \n&gt; No, RFC2616 describes what has to happen. Return 201 upon creation\n&gt; and 202 if the request has been accepted but not yet been processed.\n&gt; \n\nRFC 2616 tells the client how to interpret the response.  Whether the\nresponse is a 201 or a 202 is up to your server.  Isn&#39;t this the sort\nof thing you were asking about documenting, that&#39;s outside the scope of\na media type (or the protocol definition)?\n\n&gt;\n&gt; &gt; I know you were.  But, a REST system combines self-descriptive\n&gt; &gt; messaging with a self-documenting API.\n&gt; \n&gt; What is a &#39;self documenting API&#39;?\n&gt; \n\nAny truly RESTful API documents itself in-band.  My Xforms Atom\nProtocol client (minus the PATCH stuff) is RESTful because it is\nhypertext-driven. The specifics of my implementation may be deduced by\ndriving the hypertext application (and viewing source) in a browser\nwith xforms and protocol analyzer extensions.  All out-of-band knowledge\nrelevant to protocol interaction, is encapsulated within the media types\nused, which are standard.\n\nI use the term self-documenting, because people get confused into\nthinking that payloads must be self-describing.  My use of the term\nself-documenting is w3c approved:\n\nhttp://www.w3.org/TR/gov-data/\n\nBecause while following their advice won&#39;t get you REST as a result,\nit&#39;s at least hypertext-driven, i.e. has a self-documenting API even if\nthe messaging isn&#39;t self-descriptive.\n\n&gt;\n&gt; &gt;  You can write out-of-band\n&gt; &gt; documentation for it to your heart&#39;s content.  But that\n&gt; &gt; documentation ought to be reflected at runtime, so I can know\n&gt; &gt; exactly how your system\n&gt; &gt; works by stepping my way through it using curl or a protocol\n&gt; &gt; analyzer,\n&gt; \n&gt; You can never know from observing an interaction at a given time how  \n&gt; the server might respond the next time.\n&gt; \n\nOf course not.  At any given time, the only authoritative information\nis what the server&#39;s response is, at that time.  If your implementation\nisn&#39;t bounded by your API documentation, you can change whatever you\nwant whenever you want, even while I&#39;m stepping through it with a\nprotocol analyzer.  That&#39;s an edge case.\n\n&gt; \n&gt; &gt; without having to constantly refer to the design-time documentation.\n&gt; \n&gt; What &#39;design time documentation&#39; are you refering to?\n&gt; \n\nYou&#39;re the one who brought it up, I assumed you knew?  Assuming a\nstable implementation with documentation, I shouldn&#39;t have to rely on\nyour out-of-band documentation to figure out what&#39;s what.  I ought to\nbe able to determine everything I need to know that isn&#39;t covered by\nmedia type or protocol definitions in-band from the hypertext.\n\nThe only authoritative source for how a server will respond to an Atom\nProtocol POST request, is the server&#39;s response.  One day that response\nmay be 201, the next day it may change to 202.  Presumably, the user is\ninformed of the change using natural language somewhere on the create-\npost form, that moderation is now in effect and their posts will no\nlonger appear instantly.  So the API documents itself in-band, and sure\nenough, the change is reflected in that my protocol analyzer is no\nlonger receiving 201 responses to POST requests, the response code is\nnow 202.  If I care about why, the explanation is right there in-band.\n\nIf all out-of-band knowledge in REST is relegated to media type\ndefinitions (except for domain-specific vocabularies presented within a\nstandard media type), then all other knowledge must be documented in-\nband (including in-band links to definitions of domain-specific\nvocabularies), right?\n\nSo that&#39;s the other thing you can document, the meaning of whatever\ndomain-specific ontology you&#39;re presenting using RDFa inside XHTML.\nIt&#39;s part of your API, though, so you should link to it in-band such\nthat its use is self-documenting.\n\n-Eric\n\n"}}
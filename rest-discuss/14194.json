{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"lJPPcNFF3k94U9Af0HtdE4QdFjG8V1WlzcddZdZo0f3dishOAJ2nl3zInaACaePOhJLNp34Sq2v4Xht754aL-dxo7u89-Xm0zfESKBH3Kg","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Good examples of REST implementations","postDate":"1261056368","msgId":14194,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMDkxMjE3MDYyNjA4LjE0OWVkMzJiLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","inReplyToHeader":"PDU1YzYwZTM3MDkxMjE1MDYyMnMzNzRkMDc3N2kyMWE2M2NlZWY2YzE3Y2FhQG1haWwuZ21haWwuY29tPg==","referencesHeader":"PGhlbXBjaCszbGRuQGVHcm91cHMuY29tPgk8OUI4OTYwM0QtQTI4Mi00ODUwLUFDRkUtRjEyRjNBOTEwMzhEQGJibGZpc2gubmV0Pgk8ZWM4NjEzYTgwOTEyMTEwMjA5cjcwNGMwNjNhazM4MGNmYjQxYzVjZTY3MjNAbWFpbC5nbWFpbC5jb20+CTwyMDA5MTIxNTAxNTcwMS4xOWJjM2IxMy5lcmljQGJpc29uc3lzdGVtcy5uZXQ+CTw1NWM2MGUzNzA5MTIxNTA2MjJzMzc0ZDA3NzdpMjFhNjNjZWVmNmMxN2NhYUBtYWlsLmdtYWlsLmNvbT4="},"prevInTopic":14155,"nextInTopic":14240,"prevInTime":14193,"nextInTime":14195,"topicId":14060,"numMessagesInTopic":20,"msgSnippet":"... Yes, but Roy s rant is, IMHO, the most helpful thing I ve read -- it really made all the pieces fall together for me.  My approach, instead of snarkily","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 22697 invoked from network); 17 Dec 2009 13:26:51 -0000\r\nX-Received: from unknown (98.137.34.45)\n  by m12.grp.re1.yahoo.com with QMQP; 17 Dec 2009 13:26:51 -0000\r\nX-Received: from unknown (HELO mxout-08.mxes.net) (216.86.168.183)\n  by mta2.grp.sp2.yahoo.com with SMTP; 17 Dec 2009 13:26:51 -0000\r\nX-Received: from bigbison (unknown [65.117.211.162])\n\t(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))\n\t(No client certificate requested)\n\tby smtp.mxes.net (Postfix) with ESMTPSA id 780C5509DE;\n\tThu, 17 Dec 2009 08:26:49 -0500 (EST)\r\nDate: Thu, 17 Dec 2009 06:26:08 -0700\r\nTo: Solomon Duskis &lt;sduskis@...&gt;\r\nCc: Ian Davis &lt;lists@...&gt;, swschilke &lt;steffen.schilke@...&gt;,\n rest-discuss &lt;rest-discuss@yahoogroups.com&gt;, Story Henry\n &lt;henry.story@...&gt;\r\nMessage-Id: &lt;20091217062608.149ed32b.eric@...&gt;\r\nIn-Reply-To: &lt;55c60e370912150622s374d0777i21a63ceef6c17caa@...&gt;\r\nReferences: &lt;hempch+3ldn@...&gt;\n\t&lt;9B89603D-A282-4850-ACFE-F12F3A91038D@...&gt;\n\t&lt;ec8613a80912110209r704c063ak380cfb41c5ce6723@...&gt;\n\t&lt;20091215015701.19bc3b13.eric@...&gt;\n\t&lt;55c60e370912150622s374d0777i21a63ceef6c17caa@...&gt;\r\nOrganization: Bison Systems Corporation\r\nX-Mailer: Sylpheed 2.6.0 (GTK+ 2.10.14; i686-pc-mingw32)\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=US-ASCII\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nSubject: Re: [rest-discuss] Good examples of REST implementations\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\nSolomon Duskis wrote:\n&gt; \n&gt; While I agree with you about the &quot;missing link&quot; of the RDF &quot;RESTful&quot;\n&gt; API, your statement don&#39;t supply example of a hypertext constraint\n&gt; compliant API, simply a link to a rant.  There are degress of HATEOAS\n&gt; compliance in various APIs, but nothing that strikes me as\n&gt; particularly fully featured.\n&gt;\n\nYes, but Roy&#39;s rant is, IMHO, the most helpful thing I&#39;ve read -- it\nreally made all the pieces fall together for me.  My approach, instead\nof snarkily linking to well-developed GET/POST-only HTML 4.01 websites\nthat get all the fundamentals correct, has been to develop what I call\nthe &quot;REST Discipline&quot; (thread eventually, including nifty single-image\nchart), which is a method of getting any REST project started off on\nthe right foot by emphasizing the identification of reources, and\nproviding an iterative process to discover what those resources are in\nthe design phase -- which is used as the key production guideline going\nforward.\n\nMy thinking on this evolves from two foundational posts I&#39;ve made, meant\nto be taken as a pair, now:\n\nhttp://tech.groups.yahoo.com/group/rest-discuss/message/13322\nhttp://tech.groups.yahoo.com/group/rest-discuss/message/13543\n\nWhen I look at a new REST claimant, the fundamental problems I see can\nmostly be explained by having started off with URI design, and as a\nconsequence, have no real notion of what their resources actually _are_.\nThe nifty chart for the REST Discipline is meant as a guide in the\nidentification, but not naming, of resources. Only by getting a good\nidea of link relations, resource &quot;types&quot;, media types and methods to be\nused, is it possible to discover what the actual resources of a system\nare. Only then can work progress to the URI allocation scheme, i.e. the\n_naming_ of the identified resources.\n\n&gt; \n&gt; Some more examples that I&#39;ve seen that approach HATEOASness are:\n&gt; \n&gt;    - Jim Weber&#39;s work with &lt;atom:link&gt; and rel values to express\n&gt; workflow. I think his work a great start, but doesn&#39;t go far enough.\n&gt;    - Sun&#39;s JSon based Kenai (Cloud Management API).  Again it has\n&gt; elements of HATEOASness, but doesn&#39;t really have a &quot;you only use\n&gt; in-band communication&quot; feel\n&gt; \n\nActually, although it&#39;s been a few months since I looked at it, Kenai\nwas my inspiration for working out how I go about developing a REST\nsystem, because it&#39;s so completely far away from what I come up with\nworking on a hypothetical cloud API that I don&#39;t know where to start\noffering any help.  Other than to say, try it again using the REST\nDiscipline approach, and see if we don&#39;t wind up pretty close to one\nanother, working independently.  See if that result doesn&#39;t just scale\nbetter, make more intuitive sense, and quickly get adopted by multiple\nvendors plus a swarm of open-source projects.\n\nThis evolved into using a hypothetical cloud API as the example for the\nREST Discipline.  Following my method resulted in the discovery that\nthe application transcends clouds to include all types of web hosting\nplans, be they cloud, VPS, dedicated or collocated server.  Shouldn&#39;t I\nbe able to reboot my collocated server using the same API I use to\nreboot my VPS as I use to reboot my cloud instance as I use to reboot\na zone inside my cloud instance?  So you can&#39;t call the central\nresource type a &quot;box&quot; or a &quot;server&quot; or even a &quot;virtual machine&quot;...\n\nThis example illustrates the reasons for, and a method of, creating a\nnew XML subtype.  Which I define by co-opting various XHTML modules for\nparagraphs, lists, links, xforms, tables and such, while adding several\nblock-level elements while adapting WAI-ARIA attributes (like role)\ninto the mix to support accessibility.  Also, a dual-root-element a la\nAtom whereby the central resource type may stand alone, or be listed as\nmembers of a collection.  The new block-level elements are mostly taken\nfrom existing vendor-specific media types, a couple from VMware, etc..\n\nThe application/xhtml+xml media type is out, because of the non-XHTML\nelements introduced which are specific to a general webhosting API.\nSo a new media type is proposed, application/webhost+xml.  Besides\ndescribing a new type of document, the media type introduces a new\nHTTP method:  RESET.  Initially, this was REBOOT, which is an operation\nwhich just plain doesn&#39;t model well with any existing HTTP method.\nBut, REBOOT is too application-specific, whereas RESET, like PATCH,\nstands alone and provides a useful new generic-interface semantic that\ncleanly encompasses a variety of existing or upcoming needs like remote-\npower-cycling vs. remote-resetting of a webhost of some sort.\n\nAn upcoming need may be to RESET a representation itself...  HTML 5 adds\nsome interesting new features to the client side. As opposed to\nreloading a page, the user intent may be to clear the application cache\n(in which case the RESET method is targeted at the client&#39;s cache\nconnector itself, rather than the server) and re-start all scripts\nwithout checking for fresh content.  Who knows?  My point is, RESET\nisn&#39;t limited to use in a media type specific to the webhosting problem\narea.\n\nSo, my iterative REST Discipline approach (which I&#39;ll eventually start\na forum about, and link to it here) is all about going through an\nentire process of using standard methods and media types.  But, it uses\nas an example a system which exposes itself (through my process) as one\nwhich requires both a new standard method, and a new standard media\ntype.  The examples illustrate the derivation of the new method and\nmedia type through implementation of a simulator for a mythical\nwebhosting operation offering VPS, dedicated, collocated and cloud\nhosting accounts, which can be manipulated by administrators or\ncustomers in various ways according to privilege using HTTP-Digest\nauthentication.  But, the method which leads to the derivation of a new\nmedia type also treats that path as a last-ditch approach.\n\nBear in mind, the new media type is only one of many media types used\nin the resulting API.  I&#39;m from the old school:  I have always had a\nserver in my office, and attached to it has always been a spiral-bound\nnotebook where I&#39;ve inked in everything I&#39;ve ever done to it.  So, a\nmedia type for virtual hosts should also include an administrator&#39;s\npersonal log.  This task is delegated to Atom and Atom Protocol in the\nAPI via the appropriate &lt;link&gt; elements embedded in the new media\ntype.\n\nA collection of all the different webhosts and their IP addresses\ncontained on a physical server would be nice, it could show status and\nallow individual or bulk shutdown, or Allow: RESET on the collection to\npower-cycle the entire physical server, and/or Allow: RESET on a\nspecific IP, with the entity body determining reboot vs. poweroff-wait-\npoweron.  A collection could be a mashup across different providers,\neven.  But, I ramble.\n\n&gt;\n&gt; IMHO, There are plenty of great success stories with non-HATEOAS\n&gt; &quot;REST&quot; APIs, but I still haven&#39;t seen anything that resembles Roy&#39;s\n&gt; REST in what we&#39;re calling REST APIs.\n&gt; \n\nDon&#39;t anybody take this the wrong way, it&#39;s just a lighthearted attempt\nat humor regarding non-hypertext-driven APIs:\n\nhttp://www.youtube.com/watch?v=C7OJvv4LG9M\n\nIn the end, the Wright Brothers get it Right, Brother!  By discovering\nthe fundamental architectural constraints that define airplanes to this\nday.  If you&#39;re missing something crucial like an elevator or a rudder,\nit might take off, but it just won&#39;t fly.\n\nExactly why I&#39;ve undertaken the task not just of creating my API, but\ndocumenting the exact thoughts I have and process I go through as I\ncreate it.  My thoughts and processes don&#39;t change from project to\nproject, only the results do, as a function of being applied to\ndifferent problem areas.  So if I sit down to write a Cloud API one\nday, then drop it for a year and start over without looking at my\nprevious work, the result will be the same because I have a disciplined\napproach to REST development which I consistently apply.  I hope that,\nwhen it&#39;s done, the quality of REST APIs will progress in the proper\ndirection as a result of following a method (the REST Discipline) that&#39;s\nstrongly grounded in the fundamentals, and gets these APIs started off\non the right foot by fanatically avoiding any discussion of URI\nallocation scheme until the project is off the drawing board and into\nthe prototype.\n\n-Eric\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"tvxEDFOz3Qr3-3gdyHyvfZY20HRrExj_FBx9tnMhXOBV2EPRG5AqqUs4mIdm4I6lDQ_AZw-MZ3p5cEJbj4gMxtpa5QmXfQHuCr_lHy4t8g","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] An approach to deleting multiple resources use one  DELETE","postDate":"1237447044","msgId":12258,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMDkwMzE5MDExNzI0LmU2YWZlMDJkLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","inReplyToHeader":"PGI1NDhkZjY1MDkwMzE4MTcyOHI0NDI5YmVhZGplYmVkMDI3Mzc0NTUzN2QzQG1haWwuZ21haWwuY29tPg==","referencesHeader":"PGU3OGJkYmMwMDkwMjI0MDczOHY0ODRkNmU5NGg0NDQ5ZWIwYjY3YTI4ZDJlQG1haWwuZ21haWwuY29tPgk8MjAwOTAzMTgwNDIzMTUuNGVmYTljODIuZXJpY0BiaXNvbnN5c3RlbXMubmV0Pgk8ZTc4YmRiYzAwOTAzMTgwODM0azUwYjFjMmVlbjQ2MTRjNTQwZmMzYTJiYmJAbWFpbC5nbWFpbC5jb20+CTxiNTQ4ZGY2NTA5MDMxODA5MzhwMzkzMWJjMTNnYTQ4NWUwOWNkMWNmZGZhMEBtYWlsLmdtYWlsLmNvbT4JPDIwMDkwMzE4MTU0ODIwLjg1ZmNiYmYzLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPGI1NDhkZjY1MDkwMzE4MTUyOHcyN2ZhOWUyM3RhZmUwYTA1YzgyOGM3NTg2QG1haWwuZ21haWwuY29tPgk8MjAwOTAzMTgxNzE2NDMuNTI5YWZjNTYuZXJpY0BiaXNvbnN5c3RlbXMubmV0Pgk8YjU0OGRmNjUwOTAzMTgxNzI4cjQ0MjliZWFkamViZWQwMjczNzQ1NTM3ZDNAbWFpbC5nbWFpbC5jb20+"},"prevInTopic":12257,"nextInTopic":12259,"prevInTime":12257,"nextInTime":12259,"topicId":12154,"numMessagesInTopic":112,"msgSnippet":"... Well, if you apply cache-control: must-revalidate to the collection, a cache will check its Etag against the origin server s.  If the Etag was updated","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 79791 invoked from network); 19 Mar 2009 07:17:11 -0000\r\nX-Received: from unknown (69.147.108.200)\n  by 98.137.34.37 with QMQP; 19 Mar 2009 07:17:11 -0000\r\nX-Received: from unknown (HELO mxout-08.mxes.net) (216.86.168.183)\n  by mta1.grp.re1.yahoo.com with SMTP; 19 Mar 2009 07:17:04 -0000\r\nX-Received: from BigBison (unknown [65.117.211.162])\n\t(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))\n\t(No client certificate requested)\n\tby smtp.mxes.net (Postfix) with ESMTPSA id CE176D0A2C;\n\tThu, 19 Mar 2009 03:17:03 -0400 (EDT)\r\nDate: Thu, 19 Mar 2009 01:17:24 -0600\r\nTo: mike amundsen &lt;mamund@...&gt;\r\nCc: rest-discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nMessage-Id: &lt;20090319011724.e6afe02d.eric@...&gt;\r\nIn-Reply-To: &lt;b548df650903181728r4429beadjebed0273745537d3@...&gt;\r\nReferences: &lt;e78bdbc00902240738v484d6e94h4449eb0b67a28d2e@...&gt;\n\t&lt;20090318042315.4efa9c82.eric@...&gt;\n\t&lt;e78bdbc00903180834k50b1c2een4614c540fc3a2bbb@...&gt;\n\t&lt;b548df650903180938p3931bc13ga485e09cd1cfdfa0@...&gt;\n\t&lt;20090318154820.85fcbbf3.eric@...&gt;\n\t&lt;b548df650903181528w27fa9e23tafe0a05c828c7586@...&gt;\n\t&lt;20090318171643.529afc56.eric@...&gt;\n\t&lt;b548df650903181728r4429beadjebed0273745537d3@...&gt;\r\nOrganization: Bison Systems Corporation\r\nX-Mailer: Sylpheed 2.4.5 (GTK+ 2.10.14; i686-pc-mingw32)\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=US-ASCII\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nSubject: Re: [rest-discuss] An approach to deleting multiple resources use\n one  DELETE\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\nmike amundsen wrote:\n\n&gt; \n&gt; In other words, when composite documents are returned upon a GET\n&gt; (/get-last-ten-entires, etc.), at what point do intermediaries know\n&gt; that these composites are invalid due to the proper use of DELETE\n&gt; against one of the items that appears in the composite resource?\n&gt; \n\nWell, if you apply &#39;cache-control: must-revalidate&#39; to the collection,\na cache will check its Etag against the origin server&#39;s.  If the Etag\nwas updated because a member resource was removed, then the cache will\nserve an updated representation instead of a stale one.  But, bear in\nmind that the cache isn&#39;t actually *obligated* to serve the fresh data.\n\n(Or, the cached collection can be set to expire every few minutes.)\n\nWhich is why the DELETE method is important.  It allows the caches\npertinent to the user who requested the DELETE, to recognize that the\nresource is no longer available, and not serve stale representations\neven if the cache-control headers don&#39;t indicate &#39;expired&#39;.\n\n&gt;\n&gt; To my knowledge the answer is that intermediaries do not know the\n&gt; proper status of any cached representation of composite resources that\n&gt; are affected by the proper use of DELETE upon a single resource that\n&gt; is included in the GET-able composite.\n&gt;\n\nSure they do, provided the application is properly written.  If your\napplication generates a collection of member resources (a feed of Atom\nentries, for example), and assigns it an Etag, then a member resource\nis deleted, the next request for the collection at the origin server\nwill generate new output and therefore, a new Etag.  The tradeoff\ninvolved with caching, is that you don&#39;t get to control un-caching\nprecisely, since a cache can always decide to serve stale data (say, it\ncan&#39;t connect to the origin server).\n\n&gt; \n&gt; Thus, it seems to me, that when it comes to the test of &quot;visibility&quot;\n&gt; my hypothetical example matches the same behaviors as DELETE, PUT (as\n&gt; create), and POST. In other words, I understand my hypothetical to\n&gt; contain the proper mitigations such that visibility is not violated.\n&gt; With that in mind, I conclude my hypothetical, while possibly\n&gt; distasteful to some, does not violate the principles of Fielding&#39;s\n&gt; work.\n&gt; \n\nVisibility is a &quot;desirable property&quot; which results from the application\nof REST constraints, not a constraint itself, just to clarify.  Code-on-\nDemand, REST&#39;s optional constraint, reduces visibility.  So you can&#39;t\nthink of it as a &quot;visibility violation&quot; if that helps any.\n\nAs to your hypothetical.  You can&#39;t just not care about caching, even\nif you aren&#39;t using it.  Because, if you are adhering to a uniform\ninterface design, caching is possible.  If you couldn&#39;t cache even if\nyou wanted to, it&#39;s 50% likely to mean that you haven&#39;t developed a\nuniform interface, and 50% likely that your hypothetical is too\nconvoluted to represent the &quot;common case of the Web&quot; that REST is\ndesigned for.  ;-)\n\nSome of my solutions may be unorthodox, without violating any of REST&#39;s\nconstraints, so I sympathize with what you&#39;re trying to conclude.  But,\nsorry, I can&#39;t get past this:\n\n&quot;3 assume a single resource can be send to the origin server that\ncontains all the details to handle the above methods&quot;\n\nI&#39;m sure you meant to say representation, not resource, but that&#39;s not\nmy problem with it.  What you&#39;re describing is sending a set of\ninstructions to the server.  In REST, the only data we send to the\nserver is in the form of a representation of an application state.\n\nA list of URIs for batch deletion doesn&#39;t represent an application\nstate.  Instructions to move or copy a resource aren&#39;t application\nstates.  A PATCH request whose entity is a delta, is a representation\nof the desired new state of the application.  A POST request using the\nwww-form-urlencoded media type is a representation of the desired state\nof the form the user dereferenced with GET.\n\nSending instructions to the server isn&#39;t an unorthodox interpretation\nof REST, it&#39;s something fundamentally opposed to and not beginning to\nresemble REST.\n\n-Eric\n\n"}}
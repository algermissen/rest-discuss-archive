{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":110414260,"authorName":"Toivo &quot;Deutsch&quot; Lainevool","from":"&quot;Toivo &#92;&quot;Deutsch&#92;&quot; Lainevool&quot; &lt;tlainevool@...&gt;","profile":"tlainevool","replyTo":"SENDER","senderId":"m_htaySoAz6xhUkGThtAsGRRDD142hv2zYM3OAXZ_8y0vduWiWpJaQauXExXs3INo1hsd0EZko33cNPglA9upjbe4Kap7YY5eNba4cScQlD20UYSTXgrfyAsL4Mh52vSDsygkg","spamInfo":{"isSpam":false,"reason":"0"},"subject":"RE: [rest-discuss] Another REST vs. SOAP article","postDate":"1038759127","msgId":2963,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDAwNzcwMWMyOTk1NCQ2NWJkMWJiMCRkZWM0N2M0MkBkZXV0c2NoODEwMD4=","inReplyToHeader":"PDNERTk2QzVBLjcwNDAxMDVAcHJlc2NvZC5uZXQ+"},"prevInTopic":2959,"nextInTopic":2964,"prevInTime":2962,"nextInTime":2964,"topicId":2908,"numMessagesInTopic":50,"msgSnippet":"... objects ... sociological ... seems ... I think one advantage the generic object approach has over REST is that it can still be modeled with standard OO","rawEmail":"Return-Path: &lt;tlainevool@...&gt;\r\nX-Sender: tlainevool@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_2_3_0); 1 Dec 2002 16:15:11 -0000\r\nReceived: (qmail 74067 invoked from network); 1 Dec 2002 16:15:11 -0000\r\nReceived: from unknown (66.218.66.216)\n  by m10.grp.scd.yahoo.com with QMQP; 1 Dec 2002 16:15:11 -0000\r\nReceived: from unknown (HELO mail.ebizhostingsolutions.com) (64.46.100.39)\n  by mta1.grp.scd.yahoo.com with SMTP; 1 Dec 2002 16:15:11 -0000\r\nReceived: (qmail 12563 invoked from network); 1 Dec 2002 16:15:09 -0000\r\nReceived: from unknown (HELO deutsch8100) (66.124.196.222)\n  by server2010.ebizhostingsolutions.com with SMTP; 1 Dec 2002 16:15:09 -0000\r\nTo: &quot;&#39;Paul Prescod&#39;&quot; &lt;paul@...&gt;,\n\t&lt;rest-discuss@yahoogroups.com&gt;\r\nCc: &quot;&#39;Mark Baker&#39;&quot; &lt;distobj@...&gt;\r\nSubject: RE: [rest-discuss] Another REST vs. SOAP article\r\nDate: Sun, 1 Dec 2002 08:12:07 -0800\r\nMessage-ID: &lt;007701c29954$65bd1bb0$dec47c42@deutsch8100&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain;\n\tcharset=&quot;us-ascii&quot;\r\nContent-Transfer-Encoding: 7bit\r\nX-Priority: 3 (Normal)\r\nX-MSMail-Priority: Normal\r\nX-Mailer: Microsoft Outlook, Build 10.0.2627\r\nX-MimeOLE: Produced By Microsoft MimeOLE V6.00.2600.0000\r\nImportance: Normal\r\nIn-Reply-To: &lt;3DE96C5A.7040105@...&gt;\r\nFrom: &quot;Toivo &#92;&quot;Deutsch&#92;&quot; Lainevool&quot; &lt;tlainevool@...&gt;\r\nX-Yahoo-Group-Post: member; u=110414260\r\nX-Yahoo-Profile: tlainevool\r\n\r\n\n&gt; -----Original Message-----\n&gt; From: Paul Prescod, Sent: Saturday, November 30, 2002 5:57 PM\n&gt; \n&gt; I think I could be convinced that a &quot;generic objects&quot; model has some\n&gt; advantages over a REST model in some circumstances but I really cannot\n&gt; see _any_ virtue in the service oriented model over the generic\nobjects\n&gt; model. It seems to me to be just a &quot;dumbed down&quot; version of OOP (where\n&gt; objects have a uniform addressing scheme and can be created and\n&gt; destroyed at runtime). Perhaps that dumbing down has useful\nsociological\n&gt; effects. Clearly SOAP and XML-RPC seem not to have suffered in\n&gt; popularity for leaving out the concept of &quot;dynamic objects&quot; but it\nseems\n&gt; a serious omission to me.\n\nI think one advantage the &quot;generic object&quot; approach has over REST is\nthat it can still be modeled with standard OO notation, and it can\neasily be mapped to OO programming languages via toolkits.  Ease of use\nis an important architectural aspect to consider.  There is dissonance\nthat developers feel when switching between OO and REST.  In other words\nswitching between OO and REST is a major paradigm shift.  Switching\nbetween &quot;dynamic objects&quot; and &quot;generic objects&quot; is not that big a deal.\n\n&gt; \n&gt; \n&gt; I&#39;m not convinced that there is a correspondance between granularity\nof\n&gt; addressing and granularity of messaging. One message could influence\n&gt; thousands of addressable objects or thousands of messages could have\n&gt; only a small effect on a single object.\n&gt; \n&gt; Despite what I said above, I can see how REST makes it harder to have\n&gt; precise control over the granularity of messaging. You can&#39;t\nreasonably\n&gt; have a method called &quot;UpdateNThings&quot; in REST, though you could emulate\n&gt; it by POSTing an &quot;UpdateNThingsRequest&quot; resource. I would actually\n&gt; rather compare SOA to &quot;traditional, arbitrary methods OOP&quot; because the\n&gt; delta between that and SOA is smaller.\n\nMakes sense.\n\n&gt; \n&gt; \n&gt; You call the service Account but it is really AccountManager in that\nit\n&gt; does not represent any particular account. That is nothing like OOP.\nIn\n&gt; OOP it would be:\n&gt; \n&gt; Service: AccountManager\n&gt; \tHas operation: listAccounts() -&gt; Account\n&gt; \tHas operation: findAccount(account_number) -&gt; Account\n&gt; \tHas operation: findAccount(branch, customer_id) -&gt; Account\n&gt; \tHas operation: findAccounts(customer_name) -&gt; Account[]\n&gt; \tHas operation: createAccount(account_number, AccountData) -&gt;\nAccount\n&gt; \tHas operation: destroyAccount(account_number)\n&gt; \n&gt; Service: Account\n&gt; \tHas operation: deposit(amount)\n&gt; \tHas operation: withdraw(amount)\n&gt; \tHas operation: calculateInterest()\n&gt; \n&gt; This is a proper separation of concerns. Now we do not even have to\n&gt; agree upon an account query model to share accounts. Similarly in a\nJava\n&gt; program, you don&#39;t have to know how I created an InputStream to use it\n&gt; as an InputStream. One library doesn&#39;t need to know the full details\nof\n&gt; another library&#39;s interface to share objects. It only needs to know\nthe\n&gt; interfaces _of the objects_.\n\n\nIn a service oriented system this can be modeled as:\n\nService: Accounts\n\tHas operation: listAccounts() -&gt; Account\n\tHas operation: findAccount(account_number) -&gt; Account\n\tHas operation: findAccount(branch, customer_id) -&gt; Account\n\tHas operation: findAccounts(customer_name) -&gt; Account[]\n\tHas operation: createAccount(account_number, AccountData) -&gt;\nAccount\n\tHas operation: destroyAccount(account_number)\n\nService: IndividualAccount\n\tHas operation: deposit(account_number, amount)\n\tHas operation: withdraw(account_number, amount)\n\tHas operation: calculateInterest(account_number)\n\nThis still has all the goodness of separation of concerns and fully\ndefined query model.  Sure it&#39;s not full blown &quot;dynamic objects&quot;, but it\nlooks familiar to anyone who knows OO.\n\n&gt; \n&gt; The mapping to REST is basically:\n&gt; \n&gt;   listAccounts -&gt; GET /accounts\n&gt;   findAccount(s) -&gt; GET /accounts?customer_name=...\n&gt;   createAccount -&gt; POST /accounts returns /accounts/some_account\n&gt;   destroyAccount -&gt; DELETE /accounts/some_account\n&gt;   deposit -&gt; POST /accounts/credits (as per Dierkin)\n&gt;   withdraw -&gt; POST (arguably those could be the same method)\n&gt;   calculateInterest -&gt; (should this be a client service or embedded in\n&gt; the server business logic???)\n&gt; \n\nThis model seems to introduce some incidental complexity (see\nhttp://www.computer.org/proceedings/icre/0565/05650130abs.htm).  Instead\nof just representing an account as a single abstraction, we now have an\naccount resource, an account-credit abstraction and an account-debit\nabstraction.\n\nThis is getting interesting.  Its making me think that if there were a\ngood Object-&gt;REST mapping language we could have the best of both\nworlds: a fully &quot;dynamic object&quot; model (that allows OO notation and easy\nmapping to OOPLs) with a REST based messaging taking caring of the\nnetworking aspects.  I might noodle on this for a bit and see if I can\ncome up with something.\n\n\nToivo Lainevool\n\n\n"}}
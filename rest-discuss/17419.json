{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":119533972,"authorName":"Bryan Taylor","from":"Bryan Taylor &lt;bryan_w_taylor@...&gt;","profile":"bryan_w_taylor","replyTo":"SENDER","senderId":"mWgPzkAlxIWOAcHrKIaXUUrYs1SUyh_GdMcXFlQoN8uL9u-nisziY2AZQF3MJgzHMdzQDg2n23Bpdp75XVQYafDFXpLEEgjGDqQ4iNCe","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] PUT for partial update of an existing resource","postDate":"1302670395","msgId":17419,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDg1NjE4MC41OTA0NC5xbUB3ZWIxMTA3MDUubWFpbC5ncTEueWFob28uY29tPg==","inReplyToHeader":"PEJBTkxrVGlraUZYQmdUTFUxTGNiYjdmOEw1YlhSU0VpaDV3QG1haWwuZ21haWwuY29tPg==","referencesHeader":"PDUzMDE0MS44ODAxOC5xbUB3ZWIxMTA3MDEubWFpbC5ncTEueWFob28uY29tPiA8QkFOTGtUaWtpRlhCZ1RMVTFMY2JiN2Y4TDViWFJTRWloNXdAbWFpbC5nbWFpbC5jb20+"},"prevInTopic":17418,"nextInTopic":17421,"prevInTime":17418,"nextInTime":17420,"topicId":17415,"numMessagesInTopic":59,"msgSnippet":"This seems like a reasonable approach once you accept that you want to allow PATCH. In my development organization, we ve defined our uniform interface to be ","rawEmail":"Return-Path: &lt;bryan_w_taylor@...&gt;\r\nX-Sender: bryan_w_taylor@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 10747 invoked from network); 13 Apr 2011 04:53:16 -0000\r\nX-Received: from unknown (66.196.94.106)\n  by m14.grp.re1.yahoo.com with QMQP; 13 Apr 2011 04:53:16 -0000\r\nX-Received: from unknown (HELO nm28-vm0.bullet.mail.ac4.yahoo.com) (98.139.52.246)\n  by mta2.grp.re1.yahoo.com with SMTP; 13 Apr 2011 04:53:16 -0000\r\nX-Received: from [98.139.52.195] by nm28.bullet.mail.ac4.yahoo.com with NNFMP; 13 Apr 2011 04:53:16 -0000\r\nX-Received: from [98.138.90.55] by tm8.bullet.mail.ac4.yahoo.com with NNFMP; 13 Apr 2011 04:53:16 -0000\r\nX-Received: from [98.138.89.171] by tm8.bullet.mail.ne1.yahoo.com with NNFMP; 13 Apr 2011 04:53:16 -0000\r\nX-Received: from [127.0.0.1] by omp1027.mail.ne1.yahoo.com with NNFMP; 13 Apr 2011 04:53:16 -0000\r\nX-Yahoo-Newman-Property: ymail-3\r\nX-Yahoo-Newman-Id: 667184.65113.bm@...\r\nX-Received: (qmail 93893 invoked by uid 60001); 13 Apr 2011 04:53:15 -0000\r\nMessage-ID: &lt;856180.59044.qm@...&gt;\r\nX-YMail-OSG: wgpYjMAVM1mj34.G.rwnCBBZsG_s7Cm1dpQyiE6r8XecBoB\n N7bfz9sdZbDmhZfiMpxqcbWiA84_CSvqqf87dgnZ3oTMRMZKROSQeWtAIaic\n Fg17N.pbc86Gg2CV1_1QSZqfv0Du_6LV0vpwxWxWduUNakgxPEZtmA8dO1_P\n 5GKewQsekgk0Cb41sjNLiZlD5TTzWmTRm1Bjbm4RtvN2PE7G0M37BhLd0BkU\n dssFuiRVia34j3LNnTLPXuz07F5UXEjJTlO.LzdUwdNlsGZbSXrwEEi0CI1G\n CxQ_WGabbuaci7bds0IkclHV3GG_6qlaTQhh9YFNYVGQDjYH0hueL.J7XpPz\n 7yLxeDgPEUwpAlk7ltjMI4vuxEIJx0Hkh6uUFrf49CpjNnDLabHPXZyVpXEG\n aJ_zP2uMKNhI3\r\nX-Received: from [99.5.221.56] by web110705.mail.gq1.yahoo.com via HTTP; Tue, 12 Apr 2011 21:53:15 PDT\r\nX-Mailer: YahooMailRC/559 YahooMailWebService/0.8.109.295617\r\nReferences: &lt;530141.88018.qm@...&gt; &lt;BANLkTikiFXBgTLU1Lcbb7f8L5bXRSEih5w@...&gt;\r\nDate: Tue, 12 Apr 2011 21:53:15 -0700 (PDT)\r\nTo: mike amundsen &lt;mamund@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nIn-Reply-To: &lt;BANLkTikiFXBgTLU1Lcbb7f8L5bXRSEih5w@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=us-ascii\r\nFrom: Bryan Taylor &lt;bryan_w_taylor@...&gt;\r\nSubject: Re: [rest-discuss] PUT for partial update of an existing resource\r\nX-Yahoo-Group-Post: member; u=119533972; y=OezyWNay4BCFTLPpc6a539qyY8W9bt8WJdFbwG5dg6mlgLRwTboiUcU\r\nX-Yahoo-Profile: bryan_w_taylor\r\n\r\n\nThis seems like a reasonable approach once you accept that you want to allow \nPATCH. In my development organization, we&#39;ve defined our uniform interface to be \nthe HTTP methods of RFC 2616, so PATCH isn&#39;t an option for me.\n\nIf you read the PATCH RFC, it starts out with the assertion &quot;The PUT method is \nalready defined to overwrite a resource with a complete new body, and cannot be \nreused to do partial changes.&quot; I&#39;m not exactly sure why they believe the \n&quot;complete new body&quot; part, and I don&#39;t think this even makes sense. The body of a \nPUT is a representation, not a resource, so I don&#39;t know what it means to \noverwrite a resource with a representation. Recall Fielding&#39;s definition of a \nresource as a function that defines a time varying set of representations. I \ndon&#39;t see anything in section 9.6 of RFC 2616 that suggests that the body of the \nPUT contains the &quot;complete&quot; resource state. It says &quot;The PUT method requests \nthat the  enclosed entity be stored under the supplied Request-URI.&quot; I note it  \nsays &quot;under&quot; and not &quot;as&quot;. I think PUT could be re-expressed as &quot;take  the \nsubmitted representation and make the corresponding state of the  resource \nmatch&quot;. \n\n\nConsider a resource that offers two representations, one in text and one  in \nSVG. The SVG is drawing and includes some text as a  caption within the SVG \ndrawing. The text representation is just the caption. Why can I not PUT a new \ntext representation and expect it to change the caption? This illustrates that \nGET returns a representation in a single negotiated media type, which is a the \nvalue of projecting the resource onto that media type. I see no reason to \ninterpret PUT any differently than GET in this regard.\n\n\n\n----- Original Message ----\nFrom: mike amundsen &lt;mamund@...&gt;\nTo: Bryan Taylor &lt;bryan_w_taylor@...&gt;\nCc: rest-discuss@yahoogroups.com\nSent: Tue, April 12, 2011 5:58:22 PM\nSubject: Re: [rest-discuss] PUT for partial update of an existing resource\n\nBryan:\n\nRegarding partial updates over HTTP, I do the following:\n\n1) When I want to replace an existing resource, I use PUT + ETag on\nthe URI of the existing resource.\n2) When I want to amend/repair an existing resource, I use PATCH +\nETag on the URI of the existing resource.\n\nPUT\nIn the case of #1, the entity body I transfer contains a\nrepresentation that is a &quot;whole&quot; representation of the existing\nresource. It may not have all the fields in the existing resource\n(e.g. the resource id, the creation date, or other server-generated\nvalues) but it is usually pretty easy to see that this entity\nrepresents a resource. The media types I use for these entities is\noften application/x-www-form-urlencoded, but I sometimes use\napplication/xml, application/{my-media-type}+xml, or JSON\nrepresentations, etc.\n\nPATCH\nIn the case of #2, the entity body I transfer contains a\nrepresentation of a &quot;DIFF&quot; format that has instructions on how to\npartially modify the existing resource. It is, essentially, a bag of\ninstructions on how to handle a modification of select elements of the\nresource. It doesn&#39;t look anything like the existing resource. I\ncurrently use a simple XML format as the custom media type for this\nwork. I use this XML diff format without regard to the native (or\nnegotiated) media type used for responses for the target resource.\n\nI&#39;ve also used the PATCH w/ DIFF pattern to apply to a set of\nresources on the target serer (e.g. &quot;replace discount rate on all\ntwelve instances of product X in the catalog&quot;, etc.).\n\nIn cases where the target server does not support the PATCH verb (but\n_does_ support the application/diff+xml media type), the server will\nsupport POST + checksum on a special URI (/products/;patch). This can\nbe less desirable cache-wise, but works just fine for most cases.\n\nFINAL REMARKS\nI keep these two separate (PUT=replace, PATCH=amend) primarily to make\nit easier for devs to know what to expect for each case. When you want\nto amend a view items for an existing resource, use PATCH and the DIFF\nformat. When you want to simply replace an existing resource, just use\nPUT and the usual entity formats.\n\nHopefully this gives you some ideas on how to handle your cases.\n\nmca\nhttp://amundsen.com/blog/\nhttp://twitter.com@mamund\nhttp://mamund.com/foaf.rdf#me\n\n\n#RESTFest 2010\nhttp://rest-fest.googlecode.com\n\n\n\n\nOn Tue, Apr 12, 2011 at 14:30, Bryan Taylor &lt;bryan_w_taylor@...&gt; wrote:\n&gt;\n&gt; I&#39;ve been pondering whether or not it is OK to use PUT for a partial update of \n&gt;a\n&gt; resource. When I look at the HTTP spec it says &quot;The PUT method requests that \n&gt;the\n&gt; enclosed entity be stored under the    supplied Request-URI.&quot; This seems to be \n&gt;a\n&gt; little loosy goosy to me, as the entity is a represenation and the Request-URI\n&gt; identifies a resource and so the thing I create (the resource) is logically\n&gt; different than one particular representation of it. To illustrate this, \nsuppose\n&gt; my media type allows an optional create-timestamp field and my server supplies\n&gt; the value using its own clock if the resource does not already exist. I might\n&gt; want to allow PUT operations to do updates, but not allow them to include the\n&gt; create-timestamp. In fact, I might explicitly define in the media type that \nPUT\n&gt; requests will be rejected if they include the create-timestamp.\n&gt;\n&gt; I don&#39;t think this violates any requirement for PUT that I can find.\n&gt; Specifically, I don&#39;t think I see anything that requires that a if I put\n&gt; representation X to resource Y and follow it by a GET that I have to get back\n&gt; the same representation. In fact, I don&#39;t think anything requires that if I \nuse\n&gt; PUT I have to support GET at all, let alone with the same media type, let \nalone\n&gt; with the same representation provided by PUT. All that I see required is that\n&gt; PUT is idempotent and that the enclosed entity be stored under the    supplied\n&gt; Request-URI, which doesn&#39;t seem (to me) to imply that it must be all that is\n&gt; stored. I would think that each media type can define the semantics of PUT in\n&gt; terms of how resource state is affected.\n&gt;\n&gt; If the above create-timestamp is OK, then why not PUT for wholesale partial\n&gt; updates? If I create a car resource with an engine within its state and then I\n&gt; PUT a new engine why can I not expect to store this engine under the original\n&gt; car resource, so that a subsequent GET returns the car?\n&gt;\n&gt; Sam Ruby in his blog\n&gt; http://intertwingly.net/blog/2008/02/15/Embrace-Extend-then-Innovate wrote\n&gt; &quot;Having some servers interpret the removal of elements (such as content) as a\n&gt; modification, and others interpret the requests in such a way that elided\n&gt; elements are to be left alone is hardly uniform or self-descriptive.&quot; I think\n&gt; this is easily disposed of. It isn&#39;t the server that interprets what to do, it\n&gt; should be defined by the media type.\n&gt;\n&gt;\n&gt; What do other people think of PUT for partial updates?\n&gt;\n&gt;\n&gt;\n&gt; ------------------------------------\n&gt;\n&gt; Yahoo! Groups Links\n&gt;\n&gt;\n&gt;\n&gt;\n\n\n"}}
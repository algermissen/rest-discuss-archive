{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":221173245,"authorName":"wahbedahbe","from":"&quot;wahbedahbe&quot; &lt;andrew.wahbe@...&gt;","profile":"wahbedahbe","replyTo":"SENDER","senderId":"FxFdEwmW6DDVAI3TqfCzHsBpMUYQ1DMGV3dvul_CNp1WTlCLngMo3wpUyc0koeXzj8DQRBIdnY1lKubDB9rN5TWKIyNBmj4F5vzGhg","spamInfo":{"isSpam":false,"reason":"6"},"subject":"Method Mismatch","postDate":"1173596760","msgId":8126,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGV0MDlvbytkYjZ0QGVHcm91cHMuY29tPg=="},"prevInTopic":0,"nextInTopic":0,"prevInTime":8125,"nextInTime":8127,"topicId":8126,"numMessagesInTopic":1,"msgSnippet":"I have to say that I agree with Elliotte Rusty Harold s blog post that PUT is not the same thing as UPDATE (http://cafe.elharo.com/web/put-is-not-update/). The","rawEmail":"Return-Path: &lt;andrew.wahbe@...&gt;\r\nX-Sender: andrew.wahbe@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 63067 invoked from network); 11 Mar 2007 07:08:38 -0000\r\nReceived: from unknown (66.218.66.70)\n  by m31.grp.scd.yahoo.com with QMQP; 11 Mar 2007 07:08:38 -0000\r\nReceived: from unknown (HELO n15a.bullet.sp1.yahoo.com) (69.147.64.118)\n  by mta12.grp.scd.yahoo.com with SMTP; 11 Mar 2007 07:08:38 -0000\r\nReceived: from [216.252.122.219] by n15.bullet.sp1.yahoo.com with NNFMP; 11 Mar 2007 07:06:02 -0000\r\nReceived: from [66.218.69.3] by t4.bullet.sp1.yahoo.com with NNFMP; 11 Mar 2007 07:06:02 -0000\r\nReceived: from [66.218.66.91] by t3.bullet.scd.yahoo.com with NNFMP; 11 Mar 2007 07:06:02 -0000\r\nDate: Sun, 11 Mar 2007 07:06:00 -0000\r\nTo: rest-discuss@yahoogroups.com\r\nMessage-ID: &lt;et09oo+db6t@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;ISO-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-Yahoo-Newman-Property: groups-compose\r\nX-eGroups-Msg-Info: 1:6:0:0\r\nFrom: &quot;wahbedahbe&quot; &lt;andrew.wahbe@...&gt;\r\nSubject: Method Mismatch\r\nX-Yahoo-Group-Post: member; u=221173245; y=uGP-O84LUVsLvsj9GXxNzMkVdhTmVnwrVYdKv3fV4sQxz2xQYQ\r\nX-Yahoo-Profile: wahbedahbe\r\n\r\nI have to say that I agree with Elliotte Rusty Harold&#39;s blog post that\nPUT =\r\nis not the same thing as UPDATE\n(http://cafe.elharo.com/web/put-is-not-upda=\r\nte/). The SQL analogy that\nis so prevalent in REST 101 tutorials hurt me mo=\r\nre than the helped me\nas I was coming up to speed. It&#39;s just confusing.\n\nI =\r\nthink a better alias for PUT is &quot;SET&quot;. Its connotations fit the\nmethod much=\r\n better and pair it up nicely with GET -- programmers\nusually think of acce=\r\nssor methods when they hear &quot;get&quot; and &quot;set&quot;. Its\nnot a perfect analogy as a=\r\nn accessor method usually isn&#39;t setting or\ngetting the full object. But if =\r\nyou instead think of your resource\nspace as the &quot;object&quot; then accessors get=\r\nX() or setX() on member X map\nto the semantics of GET and PUT on resource X=\r\n. If you also add that X\nmight start out as NULL or undefined until you cal=\r\nl setX() then you&#39;ve\npretty much covered it.\n\nHowever, if you pair GET and =\r\nPUT in this way, it leaves you with POST\nand DELETE. With the CRUD analogy,=\r\n you have CREATE and DELETE --\nanother great pair.\n\nBut POST is so much mor=\r\ne than CREATE. In both the HTTP RFC and common\n(restful) practice, POST is =\r\ngeneralized to a transformation of the\ntarget resource and its subordinate =\r\nresource space. However, this\ntransformation is usually some sort of augmen=\r\ntation of the resource\nand/or its subordinates. For example, you are creati=\r\nng a new resource,\nor appending information to the target resource, etc. Th=\r\ne examples in\nthe definition of POST all have this flavor. Even when a POST=\r\n just\nsubmits something for processing, you&#39;ve added the something to an\nin=\r\nvisible queue of work.\n\nUnfortunately, the lowly DELETE method is not such =\r\na great match for\nthe almighty POST. It deletes the target resource... and =\r\nthat&#39;s about\nit. It makes you wonder: should DELETE be given a shot of ster=\r\noids? Or\ndo we need a new method to represent a general reduction of the\nre=\r\nsource and/or subordinates?\n\nThis issue sort of jumps out at you when you c=\r\nonsider implementing a\nREST interface to some sort of queue. You immediatel=\r\ny arrive at\nPOSTing to the queue resource to enqueue data (e.g. POST to\nhtt=\r\np://example.com/queue). But dequeuing data, on the other hand, is\nnot so ob=\r\nvious. One solution is proposed here:\nhttp://www.xml.com/pub/a/2005/01/05/r=\r\nestful.html But as pointed out in\nthe comments, there seems to be a race-co=\r\nndition issue with multiple\nconsumers. The reply to the comment proposes a =\r\nwork around, but unless\nI&#39;m mistaken uses an unsafe version of GET as it es=\r\nsentially dequeues\ndata in the read. Regardless of the specific issues thou=\r\ngh --\ndequeuing is certainly not a straight forward as enqueuing.\n\nPerhaps =\r\nDELETE can be extended to make this easier. Allowing DELETE to\nreturn the c=\r\nontents of the delete resource helps. This isn&#39;t strictly\nforbidden by HTTP=\r\n as the DELETE response can have a body. But ideally\nyou also want to be ab=\r\nle to target the operation on a resource that\nrepresents the head of the qu=\r\neue rather than the resource to be\ndeleted (e.g. http://example.com/queue/h=\r\nead). This saves consumers\nfrom having to co-ordinate ownership of dequeued=\r\n resources before they\nDELETE them. So you&#39;d want http://example.com/queue/=\r\nhead to be an\nalias for the resource currently at the front of the queue; w=\r\nhen you\nDELETE the alias, you actually delete the resource at the front of =\r\nthe\nqueue and the alias stays intact. But that sort of behavior is not\nallo=\r\nwed by DELETE right now -- its not idempotent.\n\nAnother possibility is to a=\r\ndd a new method, say PULL, that performs\nsome reduction transformation on t=\r\nhe resource and its subordinates and\nreturns the removed data. A 2xx &quot;Delet=\r\ned&quot; response code could be added\nto indicate when the method resulted in a =\r\nresource being deleted. The\nLocation header could name the victim. With thi=\r\ns method, you add to\nthe queue with a POST to http://example.com/queue and =\r\nremove from the\nqueue with a PULL from the same resource.\n\nFinally, one cou=\r\nld just say that POST is a transformation that is\ntypically an augmentation=\r\n -- but not always. That let&#39;s you POST to\nhttp://example.com/queue/tail to=\r\n enqueue and POST to\nhttp://example.com/queue/head to dequeue.\n\nDoes anyone=\r\n else see this as a problem? This lack of symmetry does\nseem to be related =\r\nto a lot of the headaches I come across when trying\nto do things RESTfully.=\r\n Are there alternative solutions that I&#39;m missing?\n\nAndrew Wahbe\n\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":210067383,"authorName":"Nick Gall","from":"Nick Gall &lt;nick.gall@...&gt;","profile":"nick_gall_1117","replyTo":"SENDER","senderId":"iqFniKyQ42_2vVndvnUbJxQgS4QtMl6kDq6fU091fzGg4vdXyTvtUyiAZKR4lrwd6ThmYzlj4pb0xdhjf9kMJIXPbzGF6g","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] How comes to life an &quot;Application&quot; in the sense of \tRoy&#39;s dissertation?","postDate":"1270650095","msgId":15163,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGwydGE2YTZkZjM2MTAwNDA3MDcyMWw3MjQzNWNiMXc2ZmRiZTU4MjE5MTBhNjRAbWFpbC5nbWFpbC5jb20+","inReplyToHeader":"PEVDRkI3QTU2LTA2NTYtNDAwQS04NjQ2LTlFNjdGMUI0MjQ5Q0BtYWMuY29tPg==","referencesHeader":"PEVDRkI3QTU2LTA2NTYtNDAwQS04NjQ2LTlFNjdGMUI0MjQ5Q0BtYWMuY29tPg=="},"prevInTopic":15159,"nextInTopic":15169,"prevInTime":15162,"nextInTime":15164,"topicId":15152,"numMessagesInTopic":30,"msgSnippet":"... I think you are on the right track, so let me add my observations of how I use the term application these days. Have you ever seen ads for craft","rawEmail":"Return-Path: &lt;nick.gall@...&gt;\r\nX-Sender: nick.gall@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 80454 invoked from network); 7 Apr 2010 14:22:58 -0000\r\nX-Received: from unknown (98.137.34.46)\n  by m3.grp.sp2.yahoo.com with QMQP; 7 Apr 2010 14:22:58 -0000\r\nX-Received: from unknown (HELO mail-pv0-f177.google.com) (74.125.83.177)\n  by mta3.grp.sp2.yahoo.com with SMTP; 7 Apr 2010 14:22:58 -0000\r\nX-Received: by pvc30 with SMTP id 30so351878pvc.36\n        for &lt;rest-discuss@yahoogroups.com&gt;; Wed, 07 Apr 2010 07:21:58 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.231.166.72 with HTTP; Wed, 7 Apr 2010 07:21:35 -0700 (PDT)\r\nIn-Reply-To: &lt;ECFB7A56-0656-400A-8646-9E67F1B4249C@...&gt;\r\nReferences: &lt;ECFB7A56-0656-400A-8646-9E67F1B4249C@...&gt;\r\nDate: Wed, 7 Apr 2010 10:21:35 -0400\r\nX-Received: by 10.114.236.2 with SMTP id j2mr8859867wah.110.1270650115782; Wed, \n\t07 Apr 2010 07:21:55 -0700 (PDT)\r\nMessage-ID: &lt;l2ta6a6df361004070721l72435cb1w6fdbe5821910a64@...&gt;\r\nTo: Jan Algermissen &lt;algermissen1971@...&gt;\r\nCc: REST Discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Type: multipart/alternative; boundary=0016e64b0384c90cf50483a64888\r\nFrom: Nick Gall &lt;nick.gall@...&gt;\r\nSubject: Re: [rest-discuss] How comes to life an &quot;Application&quot; in the sense of \n\tRoy&#39;s dissertation?\r\nX-Yahoo-Group-Post: member; u=210067383; y=D7uUM7_LxIDv4rERlltJyzJJO7Uea2qxjUuO9oFwImT2wJnWN-HJlyU\r\nX-Yahoo-Profile: nick_gall_1117\r\n\r\n\r\n--0016e64b0384c90cf50483a64888\r\nContent-Type: text/plain; charset=ISO-8859-1\r\n\r\nOn Wed, Apr 7, 2010 at 7:40 AM, Jan Algermissen &lt;algermissen1971@...&gt;wrote:\n\n&gt; Thinking through this (and the following paragraphs) I get the impression\n&gt; that a specific application is &#39;created&#39; only when a user[2] chooses a goal\n&gt; it intends to pursue and turns to the RESTful system (the Web) to start\n&gt; pursuing it. The application thereby brought to life might span several,\n&gt; unrelated &#39;services&#39;.\n&gt;\n&gt; Another way one might say this is &#39;The application is defined by the\n&gt; current use of the system (the Web) for the given user intention&#39; (and the\n&gt; current application state is &quot;defined by its pending requests, the topology\n&gt; of connected components (some of which may be filtering buffered data), the\n&gt; active requests on those connectors, the data flow of representations in\n&gt; response to those requests, and the processing of those representations as\n&gt; they are received by the user agent.&quot;[1]\n&gt;\n\nI think you are on the right track, so let me add my observations of how I\nuse the term &quot;application&quot; these days.\n\nHave you ever seen ads for craft products, eg glue, or fasteners, where they\nsay &quot;thousands of applications!&quot;. That&#39;s how I interpret &quot;application&quot; these\ndays. Thus, properly speaking, an &quot;application&quot; isn&#39;t a thing, it&#39;s a use of\na thing to get something done, ie achieve a goal. To put it into IT jargon,\nan &quot;application&quot; is a &quot;use case&quot; or in some contexts regarding state, &quot;an\ninstance of a use case&quot;.To see how well this fits, let&#39;s try to substitute\nthe latter for the former in Roy&#39;s description:\n\n*Since REST is specifically targeted at distributed information systems, it\nviews **a use case** as a cohesive structure of information and control\nalternatives through which a user can perform a desired task. For example,\nlooking-up a word in an on-line dictionary is one **use case**, as is\ntouring through a virtual museum, or reviewing a set of class notes to study\nfor an exam. Each **use case **defines goals for the underlying system,\nagainst which the system&#39;s performance can be measured.*\n\n\nWorks for me!\n\nOne of the worst things to happen to IT was to use the label &quot;application&quot;\nfor the thing being applied, ie a software system. This is the root of all\nthe confusion. Other words for the software system would have been far\nbetter (and are sometimes actually used): tool, utility, program, service,\nsite, widget, etc. Even the word &quot;appliance&quot; would have been better. Why?\nBecause it makes perfect sense to say &quot;this appliance has hundreds of *\napplications*&quot; (think of a food processor). In contrast, &quot;this application\nhas hundreds of applications&quot; is confusing to the point of meaninglessness.\n\nI think one of the reasons that the label &quot;application&quot; was slapped onto\nsoftware systems (instead of being reserved to refer to the use of such\nsystems), is that so many software systems are SO specialized that that have\nonly a single use case, eg an expense report program has only a single\n*application\n*(ie use case): submitting expense reports.\n\nBut the bad news is that the (mis)label is probably here to stay. People\n(especially people in IT) are going to continue to say things like &quot;build an\napplication&quot;, &quot;deploy an application,&quot; &quot;use an application&quot;, &quot;the\napplication crashed&quot;, etc. We can try to avoid the term in our personal\nconversations and writings, but that&#39;s unlikely to eliminate the problem any\ntime soon.\n\nOne possibility for reducing the confusion struck me as I wrote this. Given\nthe popularity of the slang &quot;app&quot; as shorthand for &quot;application&quot;, we could\nuse &quot;app&quot; to refer to the &quot;software system&quot; and reserve &quot;application&quot; to\nmean &quot;use case for the app&quot; or &quot;an instance of using the app&quot;. That way, we\ncan say &quot;this app has hundreds of applications&quot; without nearly as much\nconfusion.\n\nI think that&#39;s what I&#39;m going to do from now on!\n\nSo does clarifying the distinction between &quot;application&quot; (an instance of\nusing the app) and an &quot;app&quot; (the software system being used) help much? Not\ntoo much IMO. Because it doesn&#39;t really address the orthogonal issue of how\nthe software components that constitutes an &quot;app&quot; (in this case a\ndistributed software system) are distributed. Some of the software\ncomponents may run on a given client and some may run on the server (or\nworse, various servers), thus we still have to make decisions about where to\nstore &quot;state&quot;, ie information about where this particular user is in her\n&quot;instance of using the system&quot;. Clarifying &quot;app&quot; vs &quot;application&quot; doesn&#39;t\ntell us anything about where to store state. Only an architectural style can\ntell us that. And REST tells us to store state on the many client &quot;apps&quot;\n(aka client-based software components) sharing a common server &quot;app&quot; (aka a\nserver-based software components). However, it does help us say something\nlike &quot;the *application* state should be stored in the client components of\nan *app*, not the server components&quot; and be a little less confused.\n\n-- Nick\n\nNick Gall\nPhone: +1.781.608.5871\nTwitter: ironick\nAOL IM: Nicholas Gall\nYahoo IM: nick_gall_1117\nMSN IM: (same as email)\nGoogle Talk: (same as email)\nEmail: nick.gall AT-SIGN gmail DOT com\nWeblog: http://ironick.typepad.com/ironick/\n\r\n--0016e64b0384c90cf50483a64888\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;div class=3D&quot;gmail_quote&quot;&gt;On Wed, Apr 7, 2010 at 7:40 AM, Jan Algermissen =\r\n&lt;span dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:algermissen1971@...&quot;&gt;algermisse=\r\nn1971@...&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote class=3D&quot;gmail_quote&quot; st=\r\nyle=3D&quot;margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex;&quot;&gt;\n\nTh=\r\ninking through this (and the following paragraphs) I get the impression tha=\r\nt a specific application is &#39;created&#39; only when a user[2] chooses a=\r\n goal it intends to pursue and turns to the RESTful system (the Web) to sta=\r\nrt pursuing it. The application thereby brought to life might span several,=\r\n unrelated &#39;services&#39;.&lt;br&gt;\n\n\n&lt;br&gt;\nAnother way one might say this is=\r\n &#39;The application is defined by the current use of the system (the Web)=\r\n for the given user intention&#39; (and the current application state is &q=\r\nuot;defined by its pending requests, the topology of connected components (=\r\nsome of which may be filtering buffered data), the active requests on those=\r\n connectors, the data flow of representations in response to those requests=\r\n, and the processing of those representations as they are received by the u=\r\nser agent.&quot;[1]&lt;br&gt;\n\n&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I think you are o=\r\nn the right track, so let me add my observations of how I use the term &quo=\r\nt;application&quot; these days.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Have you ever seen=\r\n ads for craft products, eg glue, or fasteners, where they say &quot;thousa=\r\nnds of applications!&quot;. That&#39;s how I interpret &quot;application&qu=\r\not; these days. Thus, properly speaking, an &quot;application&quot; isn&#39=\r\n;t a thing, it&#39;s a use of a thing to get something done, ie=A0achieve=\r\n=A0a goal. To put it into IT jargon, an &quot;application&quot; is a &quot;=\r\nuse case&quot; or in some contexts regarding state, &quot;an instance of a =\r\nuse case&quot;.To see how well this fits, let&#39;s try to substitute the l=\r\natter for the former in Roy&#39;s description:&lt;/div&gt;\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;=\r\n&lt;blockquote class=3D&quot;webkit-indent-blockquote&quot; style=3D&quot;margin: 0 0 0 40px;=\r\n border: none; padding: 0px;&quot;&gt;&lt;div class=3D&quot;gmail_quote&quot;&gt;&lt;div&gt;&lt;span class=\r\n=3D&quot;Apple-style-span&quot; style=3D&quot;font-family: arial, sans-serif; font-size: 1=\r\n0px; border-collapse: collapse; &quot;&gt;&lt;i&gt;Since REST is specifically targeted at=\r\n distributed information systems, it views &lt;/i&gt;&lt;u&gt;&lt;i&gt;a use case&lt;/i&gt;&lt;/u&gt;&lt;i&gt; =\r\nas a cohesive structure of information and control alternatives through whi=\r\nch a user can perform a desired task. For example, looking-up a word in an =\r\non-line dictionary is one &lt;/i&gt;&lt;u&gt;&lt;i&gt;use case&lt;/i&gt;&lt;/u&gt;&lt;i&gt;, as is touring thro=\r\nugh a virtual museum, or reviewing a set of class notes to study for an exa=\r\nm. Each &lt;/i&gt;&lt;u&gt;&lt;i&gt;use case=A0&lt;/i&gt;&lt;/u&gt;&lt;i&gt;defines goals for the underlying sy=\r\nstem, against which the system&#39;s performance can be measured.&lt;/i&gt;&lt;/span=\r\n&gt;&lt;/div&gt;\n\n&lt;/div&gt;&lt;/blockquote&gt;&lt;div class=3D&quot;gmail_quote&quot;&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;=\r\nWorks for me!&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;One of the worst things to happen to=\r\n IT was to use the label &quot;application&quot; for the thing being applie=\r\nd, ie a software system. This is the root of all the confusion. Other words=\r\n for the software system would have been far better (and are sometimes actu=\r\nally used): tool, utility, program, service, site, widget, etc. Even the wo=\r\nrd &quot;appliance&quot; would have been better. Why? Because it makes perf=\r\nect sense to say &quot;this appliance has hundreds of &lt;u&gt;applications&lt;/u&gt;&q=\r\nuot; (think of a food processor). In contrast, &quot;this application has h=\r\nundreds of applications&quot; is confusing to the point of meaninglessness.=\r\n&lt;/div&gt;\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I think one of the reasons that the label &quot=\r\n;application&quot; was slapped onto software systems (instead of being rese=\r\nrved to refer to the use of such systems), is that so many software systems=\r\n are SO specialized that that have only a single use case, eg an expense re=\r\nport program has only a single &lt;i&gt;application &lt;/i&gt;(ie use case): submitting=\r\n expense reports.&lt;/div&gt;\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;But the bad news is that the (=\r\nmis)label is probably here to stay. People (especially people in IT) are go=\r\ning to continue to say things like &quot;build an application&quot;, &quot;=\r\ndeploy an application,&quot; &quot;use an application&quot;, &quot;the appl=\r\nication crashed&quot;, etc. We can try to avoid the term in our personal co=\r\nnversations and writings, but that&#39;s unlikely to eliminate the problem =\r\nany time soon.&lt;/div&gt;\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;One possibility for reducing the =\r\nconfusion struck me as I wrote this. Given the popularity of the slang &quo=\r\nt;app&quot; as shorthand for &quot;application&quot;, we could use &quot;ap=\r\np&quot; to refer to the &quot;software system&quot; and reserve &quot;appli=\r\ncation&quot; to mean &quot;use case for the app&quot; or &quot;an instance =\r\nof using the app&quot;. That way, we can say &quot;this app has hundreds of=\r\n applications&quot; without nearly as much confusion.&lt;/div&gt;\n\n&lt;div&gt;&lt;br&gt;&lt;/div=\r\n&gt;&lt;div&gt;I think that&#39;s what I&#39;m going to do from now on!&lt;/div&gt;&lt;div&gt;&lt;b=\r\nr&gt;&lt;/div&gt;&lt;div&gt;So does clarifying the distinction between &quot;application&q=\r\nuot; (an instance of using the app) and an &quot;app&quot; (the software sy=\r\nstem being used) help much? Not too much IMO. Because it doesn&#39;t really=\r\n address the orthogonal issue of how the software components that constitut=\r\nes an &quot;app&quot; (in this case a distributed software system) are dist=\r\nributed. Some of the software components may run on a given client and some=\r\n may run on the server (or worse, various servers), thus we still have to m=\r\nake decisions about where to store &quot;state&quot;, ie information about =\r\nwhere this particular user is in her &quot;instance of using the system&quo=\r\nt;. Clarifying &quot;app&quot; vs &quot;application&quot; doesn&#39;t tell =\r\nus anything about where to store state. Only an architectural style can tel=\r\nl us that. And REST tells us to store state on the many client &quot;apps&q=\r\nuot; (aka client-based software components) sharing a common server &quot;a=\r\npp&quot; (aka a server-based software components). However, it does help us=\r\n say something like &quot;the &lt;u&gt;application&lt;/u&gt; state should be stored in =\r\nthe client components of an &lt;u&gt;app&lt;/u&gt;, not the server components&quot; and=\r\n be a little less confused.&lt;/div&gt;\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;-- Nick&lt;/div&gt;&lt;div&gt;=\r\n=A0&lt;/div&gt;&lt;/div&gt;Nick Gall&lt;br&gt;Phone: +1.781.608.5871&lt;br&gt;Twitter: ironick&lt;br&gt;A=\r\nOL IM: Nicholas Gall&lt;br&gt;Yahoo IM: nick_gall_1117&lt;br&gt;MSN IM: (same as email)=\r\n&lt;br&gt;Google Talk: (same as email)&lt;br&gt;\n\nEmail: nick.gall AT-SIGN gmail DOT co=\r\nm&lt;br&gt;Weblog: &lt;a href=3D&quot;http://ironick.typepad.com/ironick/&quot;&gt;http://ironick=\r\n.typepad.com/ironick/&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;\n\r\n--0016e64b0384c90cf50483a64888--\r\n\n"}}
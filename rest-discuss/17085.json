{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"nLwRewX6uJiIX0ey2eVuELg4ty2JA0EtSuoryO8P5IjJxw5rbkDsauP6dlmmQB-lWBaAxyuIfsqo0ZKfD6aspTgKSZLAIvBWozNl-ePKKw","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Re: HTML REST API example [was: Link relations]","postDate":"1291707738","msgId":17085,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMTAxMjA3MDA0MjE4LjBhMTIxZGJiLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","inReplyToHeader":"PEFBTkxrVGlrZjJXUTNFZ2ZUMXYrdTJKVFd5YVp2M1BEUzAtWWNhMGFKMmNRdEBtYWlsLmdtYWlsLmNvbT4=","referencesHeader":"PDIwMTAxMjA1MjIyNDA5LjJkYzZjYjY2LmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPGlkaXV2cys3ZXBzQGVHcm91cHMuY29tPgk8MjAxMDEyMDYxNDU2MjQuNjNiMTM1ODkuZXJpY0BiaXNvbnN5c3RlbXMubmV0Pgk8QUFOTGtUaWtmMldRM0VnZlQxdit1MkpUV3lhWnYzUERTMC1ZY2EwYUoyY1F0QG1haWwuZ21haWwuY29tPg=="},"prevInTopic":17084,"nextInTopic":17086,"prevInTime":17084,"nextInTime":17086,"topicId":17057,"numMessagesInTopic":43,"msgSnippet":"... We re basically on the same page.  The issue is making APIs as machine- accessible as they are human-accessible.  The discussion is how well HTML is suited","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 47999 invoked from network); 7 Dec 2010 07:42:17 -0000\r\nX-Received: from unknown (66.196.94.106)\n  by m10.grp.re1.yahoo.com with QMQP; 7 Dec 2010 07:42:17 -0000\r\nX-Received: from unknown (HELO mxout-08.mxes.net) (216.86.168.183)\n  by mta2.grp.re1.yahoo.com with SMTP; 7 Dec 2010 07:42:17 -0000\r\nX-Received: from bigbison (unknown [65.117.211.162])\n\t(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))\n\t(No client certificate requested)\n\tby smtp.mxes.net (Postfix) with ESMTPSA id 36CF1509B3;\n\tTue,  7 Dec 2010 02:42:17 -0500 (EST)\r\nDate: Tue, 7 Dec 2010 00:42:18 -0700\r\nTo: Andrew Wahbe &lt;andrew.wahbe@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nMessage-Id: &lt;20101207004218.0a121dbb.eric@...&gt;\r\nIn-Reply-To: &lt;AANLkTikf2WQ3EgfT1v+u2JTWyaZv3PDS0-Yca0aJ2cQt@...&gt;\r\nReferences: &lt;20101205222409.2dc6cb66.eric@...&gt;\n\t&lt;idiuvs+7eps@...&gt;\n\t&lt;20101206145624.63b13589.eric@...&gt;\n\t&lt;AANLkTikf2WQ3EgfT1v+u2JTWyaZv3PDS0-Yca0aJ2cQt@...&gt;\r\nOrganization: Bison Systems Corporation\r\nX-Mailer: Sylpheed 3.0.3 (GTK+ 2.10.14; i686-pc-mingw32)\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nSubject: Re: [rest-discuss] Re: HTML REST API example [was: Link relations]\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\nAndrew Wahbe wrote:\n&gt; \n&gt; I think we have a different view on what benefits =\r\nREST can provide. If\n&gt; I understand your POV then you are saying that REST =\r\nmakes it easy for\n&gt; a developer to understand the request body format (and =\r\nI suppose\n&gt; parameters if applicable, for example, for form-url-encoded nam=\r\ne-value\n&gt; pairs) and methods that are acceptable at the URIs exposed by the=\r\n\n&gt; server.\n&gt; \n\nWe&#39;re basically on the same page.  The issue is making APIs =\r\nas machine-\naccessible as they are human-accessible.  The discussion is how=\r\n well\nHTML is suited to this task for the general (i.e. non-CCXML) case.  M=\r\ny\nposition is that profound benefits arise from having one representation\ns=\r\nerve both purposes -- accessible, self-documenting APIs reduce costs\nassoci=\r\nated with development, deployment and maintenance; with out-of-\nthe-box Int=\r\nernet scale and serendipitous re-use.  If the data needs to\nbe modeled as a=\r\n hierarchical collection, then ditch the &lt;head&gt; and wrap\nthe markup in Atom=\r\n.  This approach applies to myriad projects, without\nspending time creating=\r\n and documenting markup languages, increasing\ndeveloper productivity.  Etc.=\r\n\n\n&gt; \n&gt; The above was perhaps a lot to digest -- I haven&#39;t had much luck\n&gt; e=\r\nxplaining this in short forum postings.\n&gt;\n\nYou&#39;re making progress, but I&#39;m =\r\na hard audience and I really believe\nyour goals are acievable via RDFa in X=\r\nHTML.\n\n&gt;\n&gt; While this is true for your example, I am saying that REST can d=\r\no\n&gt; better than that. I am saying that a client coded only to a media type\n=\r\n&gt; (a STANDARD, REGISTERED one -- I am not debating that point) can adapt\n&gt; =\r\nto a service that uses that type. The name-value pairs and methods at\n&gt; the=\r\n service&#39;s URIs are not coded into the client at all. So in my\n&gt; ideal worl=\r\nd, it is possible for the developer of the RESTful client to\n&gt; never see an=\r\ny of the representations of the service(s) the client will\n&gt; interact with.=\r\n This is possible for browser development is it not?\n&gt; \n\nOK, there are two =\r\napproaches here.  One is a human-readable API which\nguides the hard-coding =\r\nof name-value pairs and their meaning.  The\nother is a machine-readable API=\r\n which auto-updates user-agents coded to\nthe media type.  I&#39;m of the opinio=\r\nn a &quot;polyglot&quot; approach is possible.\n\n&gt;\n&gt; &gt;\n&gt; &gt; The id values aren&#39;t intend=\r\ned for human consumption, either. =A0They\n&gt; &gt; are there for machine-readabi=\r\nlity by assistive devices, because\n&gt; &gt; that&#39;s the most-widely-interoperable=\r\n manner of binding a label to a\n&gt; &gt; field.\n&gt; &gt;\n&gt;\n&gt; Fair enough. So how does=\r\n the client in your model know &quot;Ah the form\n&gt; that accepts variables foo an=\r\nd bar can be used now&quot;? I had assumed the\n&gt; ids, is this not so?\n&gt;\n\nRDFa.  =\r\nI&#39;ve updated the content of both links I posted, the DOCTYPE of\nboth uses t=\r\nhe XHTML+RDFa DTD.  I only bothered annotating the contact\ninformation.  Ea=\r\nch application is associated with an URL, which scopes\nthe markup describin=\r\ng three foaf:Person&#39;s.  The policy, or contract, is\nto refer to the registr=\r\nant as dc:publisher, the maintenance/information\ncontact as dc:mediator and=\r\n the editor as dc:creator.  The same metadata\ncan also be used to annotate =\r\nthe imaginary XForms document.\n\nNow there could be a distributed media type=\r\n registry, with each provider\ncollecting the same information in an interop=\r\nerable fashion -- the\nvariable names don&#39;t have to be registrant-, contact-=\r\n and editor-; they\ncould just as easily be reggie-, connie- and eddie-.  So=\r\n there&#39;s no\nhard-coding of name-value pairs, without being coupled to any o=\r\nne\nparticular representation of the submission form; client components are\n=\r\nas compatible as their understanding of the media type allows them to\nbe.\n\n=\r\n&gt;\n&gt; &gt;\n&gt; &gt; It&#39;s possible to write such a client for shopping carts which re-=\r\nuse\n&gt; &gt; the GoodRelations ontology. =A0But I still don&#39;t see why the desire=\r\n to\n&gt; &gt; write such clients has anything to do with the media type. =A0If\n&gt; =\r\n&gt; you&#39;re creating media types which attempt to lead the user-agent\n&gt; &gt; arou=\r\nnd by the nose, it isn&#39;t REST -- in REST, the media type\n&gt; &gt; instructs the =\r\nuser-agent how to determine what the state\n&gt; &gt; transitions are, so the user=\r\n can choose between them. =A0Don&#39;t change\n&gt; &gt; this basic paradigm and tell =\r\nme it&#39;s REST, or a proper use case for\n&gt; &gt; custom media types.\n&gt; &gt;\n&gt; \n&gt; It&#39;=\r\ns not clear to me what the difference is between &quot;leading the\n&gt; user-agent =\r\naround by the nose&quot; and &quot;instructing the user-agent how to\n&gt; determine what=\r\n the state transitions are&quot;. Can you clarify?\n&gt;\n\nYou probably aren&#39;t fallin=\r\ng into this trap, but it does seem quite\ncommon to me, that media types are=\r\n being used to key specific behaviors.\nComponents shouldn&#39;t dispatch decisi=\r\non-trees based on media type, they\nshould dispatch based on the hypertext r=\r\nepresentation.\n\n-Eric\n\n"}}
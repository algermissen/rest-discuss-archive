{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":352334505,"authorName":"Craig McClanahan","from":"Craig McClanahan &lt;craigmcc@...&gt;","profile":"craig_mcclanahan","replyTo":"SENDER","senderId":"iZVQBnxikIAFGtunOjtrGWDygyvReIju-9NWxZd2rQDgR9RcPR5AYOkOW7LI5AFOrMthX3ASSbPugKz0bJeyg1tOhDLWaOmTAAl9mQ","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Media Type Version Negotiation","postDate":"1252645162","msgId":13221,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGY4YjM5YWNlMDkwOTEwMjE1OWoyZjcyOTg1N3MxNTA2OTE3NTgzM2YyMzRmQG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PDRBQTlDM0NCLjgwODA3QHJlZGhhdC5jb20+","referencesHeader":"PDQ5OTg4ODQ0MDkwOTEwMjAwNHI3MDIwNjA4M3FkNzU0ODg5YWU1NzhmNDRjQG1haWwuZ21haWwuY29tPgkgPDRBQTlDM0NCLjgwODA3QHJlZGhhdC5jb20+"},"prevInTopic":13220,"nextInTopic":13222,"prevInTime":13220,"nextInTime":13222,"topicId":13218,"numMessagesInTopic":43,"msgSnippet":"... This kind of approach definitely works well if the various representations your app supports are (or potentially could be) versioned independently.  In my","rawEmail":"Return-Path: &lt;craigmcc@...&gt;\r\nX-Sender: craigmcc@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 48735 invoked from network); 11 Sep 2009 05:00:31 -0000\r\nX-Received: from unknown (69.147.108.202)\n  by m1.grp.re1.yahoo.com with QMQP; 11 Sep 2009 05:00:31 -0000\r\nX-Received: from unknown (HELO mail-vw0-f172.google.com) (209.85.212.172)\n  by mta3.grp.re1.yahoo.com with SMTP; 11 Sep 2009 05:00:31 -0000\r\nX-Received: by vws2 with SMTP id 2so515282vws.20\n        for &lt;rest-discuss@yahoogroups.com&gt;; Thu, 10 Sep 2009 21:59:22 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.220.68.233 with SMTP id w41mr2860581vci.103.1252645162052; \n\tThu, 10 Sep 2009 21:59:22 -0700 (PDT)\r\nIn-Reply-To: &lt;4AA9C3CB.80807@...&gt;\r\nReferences: &lt;499888440909102004r70206083qd754889ae578f44c@...&gt;\n\t &lt;4AA9C3CB.80807@...&gt;\r\nDate: Thu, 10 Sep 2009 21:59:22 -0700\r\nMessage-ID: &lt;f8b39ace0909102159j2f729857s15069175833f234f@...&gt;\r\nTo: Bill Burke &lt;bburke@...&gt;\r\nCc: Tim Williams &lt;williamstw@...&gt;, rest-discuss@yahoogroups.com\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Craig McClanahan &lt;craigmcc@...&gt;\r\nReply-To: craigmcc@...\r\nSubject: Re: [rest-discuss] Media Type Version Negotiation\r\nX-Yahoo-Group-Post: member; u=352334505; y=FrC2bi5o_Zj4MAcYajFTu4yQr-KfXEpH3WoWRqHTmiDyt85T7ttcVZN3KQ\r\nX-Yahoo-Profile: craig_mcclanahan\r\n\r\nOn Thu, Sep 10, 2009 at 8:28 PM, Bill Burke&lt;bburke@...&gt; wrote:\n&gt;\n&gt;\n&gt; Tim Williams wrote:\n&gt;&gt; 3) The next thing that comes to mind is something like the &quot;level&quot;\n&gt;&gt; accept-extension exampled in rfc2616 (e.g. text/html;level=1). In my\n&gt;&gt; scenario, would be something like: application/myformat;version=2.0 I\n&gt;&gt; suppose.\n&gt;&gt;\n&gt;\n&gt; I like this approach the best. I also prefer:\n&gt;\n&gt; application/myformat+xml;version=2.0\n&gt; application/myformat+json;version=2.0\n&gt;\n&gt; In other words, the &quot;+&quot; whether or not the media type allows the + or\n&gt; not. (json doesn&#39;t I think).\n&gt;\n&gt; Bill\n\nThis kind of approach definitely works well if the various\nrepresentations your app supports are (or potentially could be)\nversioned independently.  In my experience, it&#39;s also common for a\nclient to be programmed against a particular version of an entire API\nspecification.  In that case, it&#39;s convenient to let the client assert\nthis version number assumption in a separate HTTP header (in my case,\nmy servers assume lack of this header means &quot;I want the latest version\nsupported by this server instance&quot;), and leave the media types alone.\nThis means you don&#39;t have to go change 23 gazillion instances of your\nmedia type strings when you update to a later spec version.\n\nOf course, naughty developers who arbitrarily break backwards\ncompatibility can still mess this up, but if you couple this with a\n&quot;please ignore any new elements that you don&#39;t recognize&quot; rule in your\nAPI spec, you can cover a pretty large number of use cases where\nyou&#39;ve added fields in an updated representation, but can still be\nprocessed by an older-spec-version client.\n\nCraig McClanahan\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":117929308,"authorName":"Jeffrey Winter","from":"&quot;Jeffrey Winter&quot; &lt;j.winter@...&gt;","replyTo":"SENDER","senderId":"1gRIQyZgBBWbrtezzXH2IpgaNMvhi98pUSYPAEvMKMvvxNicZRp1i_DJBtyyXNHjN65AUZuvwYRJg5U20McpV1B6Hkzb0sFTXQtwVw","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] URI design question","postDate":"1026604427","msgId":1846,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDAwMmIwMWMyMmFjOCQ4N2ViZjk5MCQ2NDAxYThjMEB3aW50ZXI+","referencesHeader":"PDAwMjEwMWMyMmFiYSQ4MzhjNTE1MCQxMTAxYThjMEByYXpvcnNvZnQuY29tPg=="},"prevInTopic":1845,"nextInTopic":1847,"prevInTime":1845,"nextInTime":1847,"topicId":1844,"numMessagesInTopic":6,"msgSnippet":"Peter, If you re looking for some references, there s of course Berners-Lee s Universal Resource Identifiers -- Axioms of Web Architecture [1] which as a lot","rawEmail":"Return-Path: &lt;J.Winter@...&gt;\r\nX-Sender: J.Winter@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_0_7_4); 13 Jul 2002 23:51:19 -0000\r\nReceived: (qmail 95509 invoked from network); 13 Jul 2002 23:51:19 -0000\r\nReceived: from unknown (66.218.66.216)\n  by m13.grp.scd.yahoo.com with QMQP; 13 Jul 2002 23:51:19 -0000\r\nReceived: from unknown (HELO exch-gw-ab.EXCHPROD.USA.NET) (165.212.49.201)\n  by mta1.grp.scd.yahoo.com with SMTP; 13 Jul 2002 23:51:19 -0000\r\nReceived: from EXCH-MR-AA.EXCHPROD.USA.NET ([10.26.48.53]) by exch-gw-ab.EXCHPROD.USA.NET with Microsoft SMTPSVC(5.0.2195.2966);\n\t Sat, 13 Jul 2002 17:51:18 -0600\r\nReceived: from 10.26.48.53 by EXCH-MR-AA.EXCHPROD.USA.NET (InterScan E-Mail VirusWall NT); Sat, 13 Jul 2002 17:51:18 -0600 (Mountain Daylight Time)\r\nReceived: from winter ([66.31.113.239]) by EXCH-MR-AA.EXCHPROD.USA.NET with Microsoft SMTPSVC(5.0.2195.2966);\n\t Sat, 13 Jul 2002 17:51:17 -0600\r\nMessage-ID: &lt;002b01c22ac8$87ebf990$6401a8c0@winter&gt;\r\nTo: &lt;rest-discuss@yahoogroups.com&gt;,\n\t&quot;Peter Drayton&quot; &lt;peter@...&gt;\r\nReferences: &lt;002101c22aba$838c5150$1101a8c0@...&gt;\r\nSubject: Re: [rest-discuss] URI design question\r\nDate: Sat, 13 Jul 2002 19:53:47 -0400\r\nMIME-Version: 1.0\r\nContent-Type: text/plain;\n\tcharset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: 7bit\r\nX-Priority: 3\r\nX-MSMail-Priority: Normal\r\nX-Mailer: Microsoft Outlook Express 6.00.2600.0000\r\nX-MimeOLE: Produced By Microsoft MimeOLE V6.00.2600.0000\r\nReturn-Path: j.winter@...\r\nX-OriginalArrivalTime: 13 Jul 2002 23:51:18.0040 (UTC) FILETIME=[2E6B3980:01C22AC8]\r\nFrom: &quot;Jeffrey Winter&quot; &lt;j.winter@...&gt;\r\nX-Yahoo-Group-Post: member; u=117929308\r\n\r\nPeter,\n\nIf you&#39;re looking for some references, there&#39;s of course Berners-Lee&#39;s\n&quot;Universal Resource Identifiers -- Axioms of Web Architecture&quot; [1] which as\na lot of good discussion and references to other articles, some specific to\nhierarchies. Paul Prescod&#39;s short article &quot;Creating an Extreme Web Service\nin N Easy Steps&quot; [2] might shed some light on this.  I found it interesting\nanyway...\n\nPersonally, I think the way to go is similar to what you&#39;ve already outlined\nwith a couple of changes:\n\nThe initial list of containers as you have (although I think the &quot;service&quot;\nis implied so I dropped that):\nUC1:    http://hypothetical.com/containers\n\nThe list of URIs in the returned document uses the singular &quot;container&quot;, so\nUC2:    http://hypothetical.com/container/1234\n\nCould return the xml document with a URI to it&#39;s subcontainer as you have:\nUC3:    http://hypothetical.com/container/1234/subcontainer\n\nFrom there though, I don&#39;t see that you need to necessarily show the entire\nhierarchy, i.e., dereferencing UC3 returns a list of URIs of the form:\nUC4:    http://hypothetical.com/subcontainer/5678\n\n... and so one down the tree.  Perhaps if your model was really a graph\n(multiple parents) you might need to show the full chain but I haven&#39;t\nreally thought through the implications of that.\n\nCreating a new subcontainer would be accomplished with, a POST to UC3, and\nthe new URI returned in the Location header of the HTTP 201 response.\nPrescod also has some thoughts on doing this reliably [3].  Actually, just\ngo ahead and read all his stuff [4].\n\nAs for making the containers and subcontainers implicit in the URI, unless\nyour underlying data model is trivial, you would need something to key on in\norder to reasonably obtain the entity&#39;s representation.  For example,\nsuppose instead of container/subcontainer you had book/chapters and\nbook/authors (two subcontainers); if you only had /service/1234/5678, how\nwould you know if &quot;5678&quot; referred to a chapter or an author?  What table\nwould you look in if this happened to be sitting on top of a relational\ndatabase?\n\nYou&#39;d be better off using:\nUC5:    http://hypothetical.com/book/1234/chapter/5678\n\nor better yet:\nUC6:    http://hypothetical.com/chapter/5678\n\nI find this an interesting subject, and if I&#39;m off base anywhere I&#39;d like to\nhear about it!\n\nThanks,\n\n- Jeff\n\n[1] http://www.w3.org/DesignIssues/Axioms.html\n[2] http://www.prescod.net/rest/Steps_to_extreme.html\n[3] http://www.prescod.net/reliable_http.html\n[4] http://www.prescod.net/rest/\n\n----- Original Message -----\nFrom: &quot;Peter Drayton&quot; &lt;peter@...&gt;\nTo: &lt;rest-discuss@yahoogroups.com&gt;\nSent: Saturday, July 13, 2002 6:13 PM\nSubject: [rest-discuss] URI design question\n\n\n&gt; I&#39;m looking for references to reading material to help me design a good\n&gt; set of URIs to represent a set of containers and subcontainers. Although\n&gt; I realize that URIs are opaque, I&#39;m trying to have them look reasonable\n&gt; should people see them - the problem I&#39;m having is how to differentiate\n&gt; between &quot;give me a representation of the container&quot;, and &quot;give me a\n&gt; represenation of everything inside the container&quot;, without having the\n&gt; URIs seem very verbose.\n&gt;\n&gt; Imagine a service that exposes a set of containers. Each container which\n&gt; held interesting data, and one or more subcontainers. Each subcontainer\n&gt; also held some interestesting data. I want to be able to support the\n&gt; following use cases\n&gt; o Get the list of containers in the service (UC1)\n&gt; o Get the data in a container (UC2)\n&gt; o Get a list of the subcontainers in a container (UC3)\n&gt; o Get the data in a subcontainer (UC4)\n&gt;\n&gt; One approach I&#39;ve been consider is to model &quot;Get the list of containers\n&gt; in the service&quot; as:\n&gt;   UC1: GET http://hypothetical.com/service/containers\n&gt; This would return a list of container URIs. These URIs could then be\n&gt; used to &quot;Get the data in a container&quot;, like this:\n&gt;   UC2: GET  http://hypothetical.com/service/containers/1234\n&gt; This would return the data in the container. One of the data items would\n&gt; be a URI to &quot;Get the list of subcontainers in a container&quot;, like this:\n&gt;   UC3: GET http://hypothetical.com/service/containers/1234/subcontainers\n&gt; This would return a list of subcontainer URIs. These URIs could then be\n&gt; used to &quot;Get the data in a subcontainer&quot;, like this:\n&gt;   UC4: GET\n&gt; http://hypothetical.com/service/containers/1234/subcontainers/5678\n&gt;\n&gt; My concern is that this approach gets pretty verbose. Given that at each\n&gt; level there is only one class of sub-item, I have considered making the\n&gt; containers & subcontainers implicit. This results in a shorter set of\n&gt; URLs than the above four, like this:\n&gt;   UC1: GET http://hypothetical.com/service/\n&gt;   UC2: GET http://hypothetical.com/service/1234\n&gt;   UC3: GET http://hypothetical.com/service/1234/\n&gt;   UC4: GET http://hypothetical.com/service/1234/5678\n&gt;\n&gt; My concern is that the difference between the GETs for UC2 and UC3 seem\n&gt; so trivial to be incorrect/confusing/plain wrong.\n&gt;\n&gt; I&#39;d appreciate any suggestions, comments, required reading or references\n&gt; from the group. Thanks in advance.\n&gt;\n&gt; --Peter\n&gt;\n&gt;\n&gt;\n&gt; To unsubscribe from this group, send an email to:\n&gt; rest-discuss-unsubscribe@yahoogroups.com\n&gt;\n&gt;\n&gt;\n&gt; Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/\n&gt;\n&gt;\n\n\n"}}
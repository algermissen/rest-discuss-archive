{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":198693287,"authorName":"Bill Venners","from":"Bill Venners &lt;bv-svp@...&gt;","profile":"billvenners","replyTo":"SENDER","senderId":"8KHGQ75tPHu8crq6ekovRUdn2n0QPh68kEyjI6hrARUeHnm9jTc0Rw_CxY2vtDPOInLoP0cY1F1jGzBLMh_fuhG4at0gllU","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Re: Meaning of stateless","postDate":"1145135424","msgId":5976,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDNDNTc1OTEzLTk3QTAtNEVBOS1BNEQ2LTA5ODQyQTY4QjVGMUBhcnRpbWEuY29tPg==","inReplyToHeader":"PGUxcWQxMytnNTQ3QGVHcm91cHMuY29tPg==","referencesHeader":"PGUxcWQxMytnNTQ3QGVHcm91cHMuY29tPg=="},"prevInTopic":5973,"nextInTopic":5978,"prevInTime":5975,"nextInTime":5977,"topicId":5951,"numMessagesInTopic":26,"msgSnippet":"Hi Alan, ... I m not convinced stateless is that much harder than stateful if you re operating close to the HTTP level of abstraction. It seems to me that","rawEmail":"Return-Path: &lt;bv-svp@...&gt;\r\nX-Sender: bv-svp@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 89593 invoked from network); 15 Apr 2006 21:09:50 -0000\r\nReceived: from unknown (66.218.66.166)\n  by m34.grp.scd.yahoo.com with QMQP; 15 Apr 2006 21:09:50 -0000\r\nReceived: from unknown (HELO bosseaport.solutionip.com) (209.21.212.74)\n  by mta5.grp.scd.yahoo.com with SMTP; 15 Apr 2006 21:09:49 -0000\r\nReceived: from [10.0.45.247] (helo=[10.0.45.247])\n\tby bosseaport.solutionip.com with esmtp (Exim 3.34 #1)\n\tid 1FUs1a-0006In-00; Sat, 15 Apr 2006 17:09:46 -0400\r\nIn-Reply-To: &lt;e1qd13+g547@...&gt;\r\nReferences: &lt;e1qd13+g547@...&gt;\r\nMime-Version: 1.0 (Apple Message framework v746.3)\r\nContent-Type: text/plain; charset=US-ASCII; delsp=yes; format=flowed\r\nMessage-Id: &lt;3C575913-97A0-4EA9-A4D6-09842A68B5F1@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nContent-Transfer-Encoding: 7bit\r\nDate: Sat, 15 Apr 2006 17:10:24 -0400\r\nTo: &quot;Alan Dean&quot; &lt;alan.dean+rest-discuss@...&gt;\r\nX-Mailer: Apple Mail (2.746.3)\r\nX-eGroups-Msg-Info: 2:12:4:0\r\nFrom: Bill Venners &lt;bv-svp@...&gt;\r\nSubject: Re: [rest-discuss] Re: Meaning of stateless\r\nX-Yahoo-Group-Post: member; u=198693287; y=v-Kc8eUWsHyQOsNpnJMTlNUTAAGd2oCtYaYzZrFIHwfAOkWaAkI\r\nX-Yahoo-Profile: billvenners\r\n\r\nHi Alan,\n\nOn Apr 15, 2006, at 2:05 AM, Alan Dean wrote:\n\n&gt; I think that many software developers have become hostage to the\n&gt; development frameworks that they utilise. In turn, many frameworks\n&gt; have made session state a fundamental building block of web\n&gt; development because it permits sloppy design. In the pursuit of\n&gt; productivity, framework providers have sought to abstract away the\n&gt; fundamental nature of HTTP and pretend that it is stateful. Why?\n&gt; Because stateless development is harder.\n\nI&#39;m not convinced stateless is that much harder than stateful if  \nyou&#39;re operating close to the HTTP level of abstraction. It seems to  \nme that whatever data you put in a user session and reference by the  \nauthentication token of subsequent requests, you could alternatively  \nput into a generic store which you reference by an ID included in the  \nsubsequent request URIs, and authenticate whether the user has access  \nto that data. People have long struggled with the back button not  \nworking using the session state approach, and I was really glad to  \nfinally have been shown a way to solve that problem by reading about  \nREST.\n\nI suspect the real reason these web frameworks all encourage user  \nsessions is that the web development community as a whole didn&#39;t  \nunderstand any better way initially. I think the first I ever heard  \nthat user session state was &quot;bad&quot; was from REST proponents, and that  \nwas fairly recently. As REST becomes better and more widely  \nunderstood, I believe people are starting to think differently about  \nhow to architect a web application. I certainly am.\n\n&gt; A concrete example? These\n&gt; days I develop using the .NET Framework. If you take at ASP.NET &#39;from\n&gt; 15,000 feet&#39; then you can see that the objective of WebForms is to\n&gt; pretend that a web page can be written in the same way that a Windows\n&gt; Forms application can be written. This is simply not so. One is an\n&gt; apple, the other is an orange. No matter how you squint, they aren&#39;t\n&gt; the same.\nI have seen frameworks that attempt to raise the level of abstraction  \nof web application programming above that of HTTP. Java Server Faces  \nfeels this way to me to an extent, and possibly Tapestry. In such  \nframeworks, I feel they are trying to abstract away the details of  \nHTTP to make it easier on developers used to GUI frameworks like  \nSwing. In both JSF and Tapestry, you define your pages in terms of  \ntrees of components. I quite like using components for rendering, and  \nin our home-grown web/mvc framework, we are doing that. But what I  \ndon&#39;t quite feel right about is that in both of these frameworks,  \nPOST requests that come back get chopped up into events which are  \nsent back to the components. Each component handles the its own  \nevents. So it feels very much like Swing (apples) on the surface, but  \nit really isn&#39;t, because it&#39;s a request/response HTTP (oranges)  \nunderneath. In our web/mvc framework, even though we use components  \nto render pages on the way out the door, we just use controllers with  \nmethods that handle GET, POST, and HEAD.\n\nAlthough it is pretty neat the kind of Visual Basic-like click and  \ndrag, property editing stuff you can do to build web apps with JSF  \nand Sun Studio, I think that&#39;s a good fit for smaller internal  \nenterprise apps that don&#39;t really need to scale, the kinds of thing  \nVisual Basic has been used for in the past. For apps that need to  \nscale much larger, I think developers will be better served by a  \nframework that doesn&#39;t try to hide that fact that they&#39;re working  \nwith HTTP.\n\nBill\n----\nBill Venners\nEditor-in-Chief\nArtima Developer\nhttp://www.artima.com\n\n\n"}}
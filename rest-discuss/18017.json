{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":364579677,"authorName":"Mike Kelly","from":"Mike Kelly &lt;mike@...&gt;","profile":"pleb1985","replyTo":"SENDER","senderId":"5qu5s0FpTpGRt4ZpS8VLbcdV_Q7IQ7CTft5NE2IkyvCE5G7ZeetK5wTLlwcloHJC786XpoAXrLvGTFHH89xCawDIAAN3Kg","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Rails 3.2 and PATCH","postDate":"1323946467","msgId":18017,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PENBTnFpWkphRTFOeEJjVFJ6N04xRlo3NU1uWGRyaFBSTXY4eGN4QkxHN1JCU0VycC1UUUBtYWlsLmdtYWlsLmNvbT4=","inReplyToHeader":"PDhDRTEzOEI5LUE5REUtNDk0RC1CRDk3LThENzZBMkQwNjM3MkBub3Jkc2MuY29tPg==","referencesHeader":"PENBQkwrWkI2Y1JpS1k4cD14MFpSPVUxempwUk1kQkI1RGRRdlFoV1Foem1YbUQzVW1FZ0BtYWlsLmdtYWlsLmNvbT4JPENBTnFpWkpZTWhDPVh3QmVRaCtyUXpHUHppUDkyeDBUTHh6Z1RHbi1DZFNScDFiPUhtQUBtYWlsLmdtYWlsLmNvbT4JPDFGNjJDRTVBLTk0NEYtNDk1OC1BNjE2LTI2ODA1MzREQ0M2MEBub3Jkc2MuY29tPgk8Q0FOcWlaSmJTZGN4ZkVuaHktUkdqQ3h2dFFfQ2cwZG05aGd0RXdFU21veU9NWG5HZDFnQG1haWwuZ21haWwuY29tPgk8OENFMTM4QjktQTlERS00OTRELUJEOTctOEQ3NkEyRDA2MzcyQG5vcmRzYy5jb20+"},"prevInTopic":18016,"nextInTopic":18018,"prevInTime":18016,"nextInTime":18018,"topicId":18011,"numMessagesInTopic":86,"msgSnippet":"What is it specifically, in practice, that non-compliant implementations like Rails lose by doing it wrong and allowing partial PUTs? On Thu, Dec 15, 2011 at","rawEmail":"Return-Path: &lt;mike@...&gt;\r\nX-Sender: mike@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 79260 invoked from network); 15 Dec 2011 10:54:30 -0000\r\nX-Received: from unknown (98.137.35.160)\n  by m8.grp.sp2.yahoo.com with QMQP; 15 Dec 2011 10:54:30 -0000\r\nX-Received: from unknown (HELO moutng.kundenserver.de) (212.227.126.171)\n  by mta4.grp.sp2.yahoo.com with SMTP; 15 Dec 2011 10:54:30 -0000\r\nX-Received: from mail-yw0-f44.google.com (mail-yw0-f44.google.com [209.85.213.44])\n\tby mrelayeu.kundenserver.de (node=mreu1) with ESMTP (Nemesis)\n\tid 0M6hai-1QpcuX0XHo-00x3q5; Thu, 15 Dec 2011 11:54:29 +0100\r\nX-Received: by yhjj72 with SMTP id j72so2486722yhj.31\n        for &lt;rest-discuss@yahoogroups.com&gt;; Thu, 15 Dec 2011 02:54:27 -0800 (PST)\r\nMIME-Version: 1.0\r\nX-Received: by 10.236.174.3 with SMTP id w3mr3883996yhl.117.1323946467901; Thu,\n 15 Dec 2011 02:54:27 -0800 (PST)\r\nX-Received: by 10.236.72.137 with HTTP; Thu, 15 Dec 2011 02:54:27 -0800 (PST)\r\nIn-Reply-To: &lt;8CE138B9-A9DE-494D-BD97-8D76A2D06372@...&gt;\r\nReferences: &lt;CABL+ZB6cRiKY8p=x0ZR=U1zjpRMdBB5DdQvQhWQhzmXmD3UmEg@...&gt;\n\t&lt;CANqiZJYMhC=XwBeQh+rQzGPziP92x0TLxzgTGn-CdSRp1b=HmA@...&gt;\n\t&lt;1F62CE5A-944F-4958-A616-2680534DCC60@...&gt;\n\t&lt;CANqiZJbSdcxfEnhy-RGjCxvtQ_Cg0dm9hgtEwESmoyOMXnGd1g@...&gt;\n\t&lt;8CE138B9-A9DE-494D-BD97-8D76A2D06372@...&gt;\r\nDate: Thu, 15 Dec 2011 10:54:27 +0000\r\nMessage-ID: &lt;CANqiZJaE1NxBcTRz7N1FZ75MnXdrhPRMv8xcxBLG7RBSErp-TQ@...&gt;\r\nTo: Jan Algermissen &lt;jan.algermissen@...&gt;\r\nCc: Steve Klabnik &lt;steve@...&gt;, Darrel Miller &lt;darrel.miller@...&gt;, \n\trest-discuss@yahoogroups.com\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\nX-Provags-ID: V02:K0:bDCD34ZsIvavJErXHdbRAx6M4hJL//egR0wVLt08K4V\n 09aKZ6uBo8Pos2sgE9hO3fWJ/Jeb+0m+lCkc+pHbhI+2je39Aw\n U2sqs/dIVaSwoPyhJLzs5v77J6ygoOXxTQ1gpScGo+TonSF29g\n Kvj7OaYMA4EqMHn5uoKNQoqSL1El+P4844jqnJLXPYYegq6Ksr\n QQo4XDAZ5N7VCnZ0r+G7UOfipkbVFJ26FPmBO44KmppBW2FgHo\n KqPXaPtE1VuBou6kaIAKI8i/+Mn2dpDxPfz/0/+W5H05MnZuko\n Wxv57fPVNWYvrjQhlIYKIkl1w5BIreE8sfsZc88cEceWmt4/PA\n CD1D6O/OrGs07tLyoxYRRQIrQOaTkwld3FkyLULiZZwOMoLCWm\n Fwu1carVrxC0aSD+PvlzW+LrfkU0eeuhT7CesndRnJPfGnP/1q\n mC3+6\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Mike Kelly &lt;mike@...&gt;\r\nSubject: Re: [rest-discuss] Rails 3.2 and PATCH\r\nX-Yahoo-Group-Post: member; u=364579677; y=6JcIOZ3h6so3LFyIFUzXyX2xcRE4fr0xBDh_mITx342E7gk\r\nX-Yahoo-Profile: pleb1985\r\n\r\nWhat is it specifically, in practice, that non-compliant\nimplementations li=\r\nke Rails lose by &#39;doing it wrong&#39; and allowing\npartial PUTs?\n\nOn Thu, Dec 1=\r\n5, 2011 at 10:36 AM, Jan Algermissen\n&lt;jan.algermissen@...&gt; wrote:\n&gt;\n=\r\n&gt; On Dec 15, 2011, at 11:02 AM, Mike Kelly wrote:\n&gt;\n&gt;&gt; On Thu, Dec 15, 2011=\r\n at 9:14 AM, Jan Algermissen\n&gt;&gt; &lt;jan.algermissen@...&gt; wrote:\n&gt;&gt;&gt;\n&gt;&gt;&gt;=\r\n On Dec 15, 2011, at 1:42 AM, Mike Kelly wrote:\n&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; I created a questi=\r\non on Stack Overflow about this a while ago:\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; http://stackoverflow=\r\n.com/questions/2364110/whats-the-justification-behind-disallowing-partial-p=\r\nut\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; I still don&#39;t really understand the benefit of not allowing PU=\r\nT to be\n&gt;&gt;&gt;&gt; partial,\n&gt;&gt;&gt;\n&gt;&gt;&gt; So you are asking, why PUT was defined as ide=\r\nmpotent in the first place, yes?\n&gt;&gt;&gt;\n&gt;&gt;&gt; I think the reason is sort of &quot;bec=\r\nause we can define it that way&quot;. There is POST, which has no visibility (=\r\n=3D=3DPOST is meaningless to an intermediary) and everything could just be =\r\ndone with POST. But then, adding methods that *have* visibility adds some s=\r\nerious capabilities to HTTP. E.g. GET&#39;s semantics allow for caching and it =\r\nis also very helpful that we know that GET is safe - we can call it any num=\r\nber of times.\n&gt;&gt;&gt;\n&gt;&gt;\n&gt;&gt; .. and PUTs &#39;complete replace&#39; semantics allow for.=\r\n. ?\n&gt;&gt;\n&gt;&gt;&gt; You could do updates with POST, but then, full updates have the =\r\ninherent property of being idempotent so it makes sense to define a method =\r\nfor that, leveraging the idempotency to the protocol level. Same for DELETE=\r\n. For example, no a cache can mark copies it has of a response as stale upo=\r\nn a corresponding response to a PUT. PUT&#39;s idempotency is also a win over j=\r\nust using POST.\n&gt;&gt;&gt;\n&gt;&gt;&gt; If the interactions you design match the semantics =\r\nof PUT, use it (for its added visibility), if they do not match, just use P=\r\nOST.\n&gt;&gt;\n&gt;&gt; Again.. the point of the question is to try and fathom what the\n=\r\n&gt;&gt; &#39;guaranteed completeness&#39; of PUT requests actually contributes in\n&gt;&gt; ter=\r\nms of visibility on the web. i.e. what intermediary mechanisms rely\n&gt;&gt; on t=\r\nhe completeness of a PUT?\n&gt;\n&gt; Huh? No, it is the other way round: *partial*=\r\n updates cannot be guaranteed to be idempotent. It is the idempotency we wa=\r\nnt for the sake of greater visibility (compared to POST). And we can only s=\r\npecify idempotent update semantics if the updates are replaces.\n&gt;\n&gt; (As to =\r\nwhy partial updates cannot be guaranteed to be idempotent, see my answer in=\r\n the mentioned SO question).\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;&gt;\n&gt;&gt;&gt; Redefining PUT to mean &#39;partial=\r\n update without idempotency&#39; is no win because =A0&#39;partial update without i=\r\ndempotency&#39; does not give an intermediary any visibility. You could just us=\r\ne POST in the first place.\n&gt;&gt;&gt;\n&gt;&gt;&gt; Does that help?\n&gt;&gt;&gt;\n&gt;&gt;\n&gt;&gt; No it doesn&#39;t.=\r\n POST is a non-idempotent action; using it for an\n&gt;&gt; _intentionally idempot=\r\nent partial update_\n&gt;\n&gt; See - this is a contradiction. How would you preven=\r\nt people to define media types that lead to non-idempotency in partial upda=\r\ntes? Remember that the method semantics must be orthogonal to the media typ=\r\ne semantics.\n&gt;\n&gt; Itempotent partial updates depend on the specific media ty=\r\npe used and hence you cannot specify a method that alone has these idempote=\r\nnt partial update semantics.\n&gt;\n&gt; (This is also the reason why PATH cannot b=\r\ne idempotent, never).\n&gt;\n&gt; Jan\n&gt;\n&gt;&gt; complicates the interaction\n&gt;&gt; from the =\r\nclient&#39;s perspective - what if the request fails?\n&gt;&gt;\n&gt;&gt;\n&gt;&gt; Maybe a better w=\r\nay of approaching this might be for someone to\n&gt;&gt; demonstrate what supposed=\r\n &quot;non-compliant&quot; implementations that allow\n&gt;&gt; partial PUT (e.g. Rails) los=\r\ne as a result of not following the suposed\n&gt;&gt; &quot;worthwhile&quot; no-partials-allo=\r\nwed semantics of PUT?\n&gt;&gt;\n&gt;&gt; Cheers,\n&gt;&gt; Mike\n&gt;\n\n"}}
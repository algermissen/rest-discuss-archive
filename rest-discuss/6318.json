{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":224364543,"authorName":"Dave Pawson","from":"&quot;Dave Pawson&quot; &lt;dave.pawson@...&gt;","profile":"dpawson2000","replyTo":"SENDER","senderId":"gXo3XhCOZgxgcBtww1k7lYCj8yfuNMiuJsrInqI9VYGvm55DF-vmUfQrSTu53mOEnrfUYp1iMnde5xV2n2DNE10yUmvxL4A5Khy7BA","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] more ssl clarifications please.","postDate":"1150114518","msgId":6318,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDcxMWE3M2RmMDYwNjEyMDUxNXE0YWViMmQ5NXE5YmZmN2U1ZDFkYjNmNWVkQG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PDg3b2R3eWlwcDUuZnNmQG5pY2ZlcnJpZXIudGFwc2VsbGZlcnJpZXIuY28udWs+","referencesHeader":"PDcxMWE3M2RmMDYwNjEyMDQwNG42MjM5YTY0NXM4MDAzYmRiMTg1NzA3M2ZjQG1haWwuZ21haWwuY29tPgkgPDg3b2R3eWlwcDUuZnNmQG5pY2ZlcnJpZXIudGFwc2VsbGZlcnJpZXIuY28udWs+"},"prevInTopic":6317,"nextInTopic":6319,"prevInTime":6317,"nextInTime":6319,"topicId":6313,"numMessagesInTopic":12,"msgSnippet":"... Quite on line with this, Mark sent  The client makes a connection, usually to port 443, on which the server is listening using SSL. There is some","rawEmail":"Return-Path: &lt;dave.pawson@...&gt;\r\nX-Sender: dave.pawson@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 63416 invoked from network); 12 Jun 2006 12:15:31 -0000\r\nReceived: from unknown (66.218.66.218)\n  by m25.grp.scd.yahoo.com with QMQP; 12 Jun 2006 12:15:31 -0000\r\nReceived: from unknown (HELO wx-out-0102.google.com) (66.249.82.196)\n  by mta3.grp.scd.yahoo.com with SMTP; 12 Jun 2006 12:15:31 -0000\r\nReceived: by wx-out-0102.google.com with SMTP id h28so816048wxd\n        for &lt;rest-discuss@yahoogroups.com&gt;; Mon, 12 Jun 2006 05:15:29 -0700 (PDT)\r\nReceived: by 10.70.26.1 with SMTP id 1mr6342408wxz;\n        Mon, 12 Jun 2006 05:15:18 -0700 (PDT)\r\nReceived: by 10.70.129.11 with HTTP; Mon, 12 Jun 2006 05:15:18 -0700 (PDT)\r\nMessage-ID: &lt;711a73df0606120515q4aeb2d95q9bff7e5d1db3f5ed@...&gt;\r\nDate: Mon, 12 Jun 2006 13:15:18 +0100\r\nTo: &quot;REST Discuss&quot; &lt;rest-discuss@yahoogroups.com&gt;\r\nIn-Reply-To: &lt;87odwyipp5.fsf@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nContent-Disposition: inline\r\nReferences: &lt;711a73df0606120404n6239a645s8003bdb1857073fc@...&gt;\n\t &lt;87odwyipp5.fsf@...&gt;\r\nX-eGroups-Msg-Info: 1:0:0:0\r\nFrom: &quot;Dave Pawson&quot; &lt;dave.pawson@...&gt;\r\nSubject: Re: [rest-discuss] more ssl clarifications please.\r\nX-Yahoo-Group-Post: member; u=224364543; y=hvYLAAGObILLzZwm5khW1ZJO3-TxM1XiEcIbDs8MQ0ih2jalOlU\r\nX-Yahoo-Profile: dpawson2000\r\n\r\nOn 12/06/06, Nic James Ferrier &lt;nferrier@...&gt; wrote:\n\n\n&gt; &gt; It seems little better than using PKI over http\n&gt; &gt; where the client has public, server has private keys.\n&gt;\n&gt; It should all be more highlevel than that.\n&gt;\n&gt; From the HTTP point of view the interaction should just be:\n&gt;\n&gt;   CL: &gt; PUT https://server/someresource\n&gt;  SRV: &lt; 200 (or whatever)\n&gt;\n&gt; in terms of SSL/TLS there&#39;s a lot going on underneath:\n&gt;\n&gt;   CL: sends TCP connect request to server\n&gt;  SRV: examines suggested crypto; responds with an algorithm\n&gt;   CL: sends OK to algorithm selection\n&gt;  SRV: sends certificate/key negotiation\n&gt;   CL: OKs all that...\n&gt;  SRV: OKs\n&gt;   CL: sends data (in this case your HTTP request)\n\nQuite on line with this, Mark sent\n&lt;quote&gt; The client makes a connection, usually to port\n443, on which the server is listening using SSL. There\nis some negotiation - is the server going authenicate\nitself to the client, is the client going to authenicate\nitself to the server etc. In the case of just the\nserver authenicating itself: the server sends the client\nits public certificate along with some data it signed\nwith it the associated private key. The client checks the signature\nusing the public certificate and then checks the public\ncertificate has been signed by a CA it trusts. If all\nis OK the client and server go on to negotiate a symmetric\nkey (there are various algorithms for this) - the symmetric\nkey will be a lot smaller than the public key/private\nkey pair (and so a lot faster to encrypt/decrypt stuff with)\nbut will only be used for this connection. Once the symmetric\nkey has been choosen the application data can be exchanged.\nIt is useful to use keepalive when using HTTPS\nas you do not want to got through the whole phase of setting\nup the SSL connection each time a client wants to send something.\n\nYou can treat the SSL connection as a black box, just as\nyou treat the tcp connection as a black box with http.\n&lt;/quote&gt;\n\n\n&gt;\n&gt;  and so on.\n&gt;\n&gt; But from HTTP(S) that&#39;s all transparent.\nWhich isn&#39;t helping me. I&#39;m trying to do this programmatically.\nJava client and IIS server. I can see it working when Mark says,\n\n&quot;The client checks the signature\nusing the public certificate and then checks the public\ncertificate has been signed by a CA it trusts. &quot;\n\nI.e. If its &#39;does the client trust the server&#39;, I need to check that\nI trust the man at the end of the chain? Thawte etc.\n(Presumably using the Issuer information).\n\n\n\n\n\n&gt;\n&gt; Your client does need to have a keystore with the public key of the\n&gt; certificate provider who has signed your server&#39;s private key. I\n&gt; thought that most toolkits these days came with the main keys; just\n&gt; like browsers do; but there may be something you have to do to import\n&gt; a key.\n\nWhich is a big part of my problem.\n\nI&#39;m trying a REST mc - mc transaction, and I guess I want either both way\nchecks, or minimally I want the server to verify the client?\nthis was the opposite of Marks (more usual?) scenario where the client\nneeds to trust the server.\n\nI think this is where Nic&#39;s story comes in? I need to export\n(from the server keystore) a public key with an alias for use on the client\nas Nic suggests.\n\nideally I&#39;d like to use a self certification (using the Java tools) but\nwe couldn&#39;t get the java keystore values  into the IIS &#39;store&#39;.\nCould be that IIS just won&#39;t play with Java (Sun).\n\n\nChris wrote\nWhy do you say &quot;seems little better than using PKI&quot;? It does use PKI.\n\nyes, I agree. And in my simplistic mode, I guess that if I could guess\nthe user name and password, then any client could access this &#39;secure&#39;\nserver - which left me thinking it was too easy.\n\nregards\n\n\n\n\n\n-- \nDave Pawson\nXSLT XSL-FO FAQ.\nhttp://www.dpawson.co.uk\n\n"}}
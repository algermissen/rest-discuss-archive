{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":148737865,"authorName":"Hugh Winkler","from":"&quot;Hugh Winkler&quot; &lt;hughw@...&gt;","profile":"hwinkler99","replyTo":"SENDER","senderId":"eczjHuXgTZ89od0pkQVtsdXE-0iw_L1FG06U3ihYdYhta2qg7neywUjbd23LaerLgGA-XKDx2V5joFkKTvE4vIxVx35ayN8","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Asynchronicity","postDate":"1155842022","msgId":6481,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDkyNzQ0MWIzMDYwODE3MTIxM3EyZjk0OGIzYWw4ZTY2NGVjZDc5NGFmNDBlQG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PGVjMjV1ZytnZ2tkQGVHcm91cHMuY29tPg==","referencesHeader":"PGVjMjV1ZytnZ2tkQGVHcm91cHMuY29tPg=="},"prevInTopic":6480,"nextInTopic":0,"prevInTime":6480,"nextInTime":6482,"topicId":6476,"numMessagesInTopic":3,"msgSnippet":"... You want rfc 2616 ... it s ok to return 202 for PUT and POST ... If the result of doing an operation two or more times gives the same result as doing it","rawEmail":"Return-Path: &lt;hwinkler@...&gt;\r\nX-Sender: hwinkler@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 67290 invoked from network); 17 Aug 2006 19:18:18 -0000\r\nReceived: from unknown (66.218.66.166)\n  by m36.grp.scd.yahoo.com with QMQP; 17 Aug 2006 19:18:18 -0000\r\nReceived: from unknown (HELO py-out-1112.google.com) (64.233.166.179)\n  by mta5.grp.scd.yahoo.com with SMTP; 17 Aug 2006 19:18:17 -0000\r\nReceived: by py-out-1112.google.com with SMTP id b29so1473785pya\n        for &lt;rest-discuss@yahoogroups.com&gt;; Thu, 17 Aug 2006 12:13:43 -0700 (PDT)\r\nReceived: by 10.35.61.14 with SMTP id o14mr4142622pyk;\n        Thu, 17 Aug 2006 12:13:42 -0700 (PDT)\r\nReceived: by 10.35.100.7 with HTTP; Thu, 17 Aug 2006 12:13:42 -0700 (PDT)\r\nMessage-ID: &lt;927441b30608171213q2f948b3al8e664ecd794af40e@...&gt;\r\nDate: Thu, 17 Aug 2006 14:13:42 -0500\r\nTo: &quot;Phil Ruelle&quot; &lt;Philip.Ruelle@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nIn-Reply-To: &lt;ec25ug+ggkd@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nContent-Disposition: inline\r\nReferences: &lt;ec25ug+ggkd@...&gt;\r\nX-Google-Sender-Auth: 9e5b7c6156230b9e\r\nX-eGroups-From: &quot;Hugh Winkler&quot; &lt;hughw@...&gt;\r\nFrom: &quot;Hugh Winkler&quot; &lt;hughw@...&gt;\r\nSubject: Re: [rest-discuss] Asynchronicity\r\nX-Yahoo-Group-Post: member; u=148737865; y=2_xt347KrqzzYxxpbLx5JSv40i5AsbFFVmbV3aK9RrRxetckmg\r\nX-Yahoo-Profile: hwinkler99\r\n\r\nOn 8/17/06, Phil Ruelle &lt;Philip.Ruelle@...&gt; wrote:\n\n&gt; I&#39;ve been looking through the HTTP 1.1 spec to try to answer some\n&gt; questions about support for asynchronous processing of requests.\n&gt;\n&gt; To my mind of the 4 main methods (GET, PUT, POST, DELETE) GET is the\n&gt; only one which could not be processed asynchronously. The others can\n&gt; all validly return 202 codes.\n&gt;\n&gt; Section 9 of RFC2068\n\nYou want rfc 2616\n\n&gt; specifically mentions returning a 202 for a\n&gt; DELETE\n&gt; request but does not mention 202 as a valid response for either PUT\n&gt; or\n&gt; POST. Since section 9 is about method descriptions I am not taking\n&gt; the\n&gt; omission of 202 as being a definitive statement about it being\n&gt; disallowed.\n&gt;\n\nit&#39;s ok to return 202 for PUT and POST\n\n&gt; It all seems quite straight forward but then you get into issues\n&gt; about\n&gt; idempotency. PUT and DELETE are both idempotent (section 9.1.2). I\n&gt; was\n&gt; thinking that any asynchronous request would return a 202 along with\n&gt; a\n&gt; URI for a status monitor resource. I assume this would break the\n&gt; idempotency rule since each invocation would involve the creation of\n&gt; a\n&gt; new resource - the status monitor.\n&gt;\n\nIf the result of doing an operation two or more times gives the same\nresult as doing it once, then it&#39;s idempotent. Creation of a status\nmonitor is a harmless side effect that doesn&#39;t affect idempotency.\n\nsee http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html\n\n\n&gt; For a DELETE the client could always poll the resource and would know\n&gt; its request had been processed when it got back a 404. Of course\n&gt; following this approach the client would never know if their request\n&gt; failed or was just taking an extremely long time to be processed.\n&gt;\n&gt; A similar problem exists with PUT. The client can continually GET the\n&gt; resource until it looks like the one that it PUT but of course that\n&gt; may\n&gt; never happen not least because someone else can have changed it\n&gt; inbetween polling.\n\nGood questions. If the server supports conditional put you can look in\nthe ETag or last-Modified header returned by GET. That tells you\nwhether the resource has changed since the last GET on that resource.\nIt doesn&#39;t indicate whether this represents your PUT or someone else&#39;s\nthat occurred *after* yours.  If you PUT conditionally using e.g.\nIf-Match http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.24,\nnobody else&#39;s change could precede yours. If everybody else PUTs\nconditionally, then likewise, they won&#39;t clobber your change unless\nit&#39;s intentional (i.e they previously retrieved your version). If you\ncontrol the server you can make it refuse to honor unconditional PUTs.\nSo while you can&#39;t know for sure that the any particular response to\nGET is the one you PUT, you can be sure that all changes happened\nintentionally.\n\nSo hopefully that&#39;s good enough. Because I think if you examine what\nyou&#39;re asking for, it would require some sort of locking mechanism\nwhich HTTP doesn&#39;t and shouldn&#39;t have.\n\n\n\n&gt;This line of thought has lead me to start thinking\n&gt; about versioning resources but that is non-trivial and I&#39;d like to\n&gt; gather some other opinions before I open that pandora&#39;s box.\n&gt;\n\nWebDAV?\n\n&gt; If anyone can share their opinion on which methods can be invoked\n&gt; asynchronously I&#39;d appreciate it and any elaboration on how to\n&gt; achieve\n&gt; it (with regard to return codes, resource status, status monitors,\n&gt; etc)\n&gt; would be especially welcomed.\n&gt;\n&gt; Thanks and regards,\n&gt; Phil\n&gt;\n&gt;\n&gt;\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":23186829,"authorName":"Paul Prescod","from":"Paul Prescod &lt;paul@...&gt;","replyTo":"SENDER","senderId":"tRHxGaifCD0FQzpcxXJynLk4-9xvap_8vBtFPZkKaososGrk4jX_L3925x6WC_2YqInfPjeZCb6LaklUXXHRM3Zok6-rmw","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Resource State","postDate":"1020877525","msgId":1222,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDNDRDk1QUQ1LkVFNTJDOTA3QHByZXNjb2QubmV0Pg==","referencesHeader":"PE9GODg4NkNDODEuRjE0OTk4ODctT044NTI1NkJCMy4wMDU5Q0FBNC04NTI1NkJCMy4wMDVBNTEwQUByYWxlaWdoLmlibS5jb20+"},"prevInTopic":1221,"nextInTopic":1223,"prevInTime":1221,"nextInTime":1223,"topicId":1217,"numMessagesInTopic":19,"msgSnippet":"... That s true at the protocol level. An HTTP server is not required to remember previous HTTP messages. It is not necessarily true at the application","rawEmail":"Return-Path: &lt;paul@...&gt;\r\nX-Sender: paul@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_0_3_2); 8 May 2002 17:04:29 -0000\r\nReceived: (qmail 52378 invoked from network); 8 May 2002 17:04:29 -0000\r\nReceived: from unknown (66.218.66.217)\n  by m15.grp.scd.yahoo.com with QMQP; 8 May 2002 17:04:29 -0000\r\nReceived: from unknown (HELO smtp1.ActiveState.com) (209.17.183.249)\n  by mta2.grp.scd.yahoo.com with SMTP; 8 May 2002 17:04:29 -0000\r\nReceived: from smtp3.ActiveState.com (smtp3.ActiveState.com [192.168.3.19])\n\tby smtp1.ActiveState.com (8.11.6/8.11.6) with ESMTP id g48H4Ob02091;\n\tWed, 8 May 2002 10:04:24 -0700\r\nReceived: from prescod.net (ssh1.ActiveState.com [192.168.3.32])\n\tby smtp3.ActiveState.com (8.11.6/8.11.6) with ESMTP id g48H4Ne28224;\n\tWed, 8 May 2002 10:04:23 -0700\r\nMessage-ID: &lt;3CD95AD5.EE52C907@...&gt;\r\nDate: Wed, 08 May 2002 10:05:25 -0700\r\nX-Mailer: Mozilla 4.76 [en] (Windows NT 5.0; U)\r\nX-Accept-Language: en\r\nMIME-Version: 1.0\r\nTo: Sam Ruby &lt;rubys@...&gt;, rest-discuss@yahoogroups.com\r\nSubject: Re: [rest-discuss] Resource State\r\nReferences: &lt;OF8886CC81.F1499887-ON85256BB3.0059CAA4-85256BB3.005A510A@...&gt;\r\nContent-Type: text/plain; charset=us-ascii\r\nContent-Transfer-Encoding: 7bit\r\nX-Perlmx-Spam: Gauge=, Probability=0%, Report=&quot;INTERNAL_HOST&quot;\r\nX-Filtered-By: PerlMx makes it fast and easy.  See http://www.ActiveState.com/Products/PerlMx/Header\r\nFrom: Paul Prescod &lt;paul@...&gt;\r\nX-Yahoo-Group-Post: member; u=23186829\r\n\r\nSam Ruby wrote:\n&gt; \n&gt;...\n&gt; \n&gt; This is rest-discuss right?\n&gt; \n&gt; My read of Roy&#39;s thesis (in particular 5.1.3) is that it encourages\n&gt; stateless servers, with clients providing all the necessary state on every\n&gt; request.\n\nThat&#39;s true at the protocol level. An HTTP server is not required to\n&quot;remember&quot; previous HTTP messages. It is not necessarily true at the\napplication level. The Web would be useless if it were not possible to\nstore state on web servers. How would you implement a discussion group\nin a completely stateless environment? Three out of the four main HTTP\nmethods manipulate state so clearly this was always intended!\n\nConsider the three stated reasons for the requirement:\n\n&quot;This constraint induces the properties of visibility, reliability, and\nscalability. Visibility is improved because a monitoring system does not\nhave to look beyond a single request datum in order to determine the\nfull nature of the request. Reliability is improved because it eases the\ntask of recovering from partial failures [133].&quot;\n\nThese two features are preserved by the rule I stated about &quot;No Implicit\nState&quot;. \n\n&quot;Scalability is improved because not having to store state between\nrequests allows the server component to quickly free resources, and\nfurther simplifies implementation because the server doesn&#39;t have to\nmanage resource usage across requests.&quot;\n\nThis feature is also preserved *to the extent possible*. Obviously if\nthe client is allowed to manipulate server state then you introduce the\npossibility of scalability problems. But there is no distributed system\nthat can get around the fact that storing lots of data takes lots of\ndisk space. The important thing is that the state is managed at the\napplication, not protocol layer. HTTP just transmits the request to PUT\nbut nothing in the HTTP specification says that an HTTP server must\nremember that it just handled a PUT. Only the application remembers\nthis, if it chooses to do so.\n\n Paul Prescod\n\n"}}
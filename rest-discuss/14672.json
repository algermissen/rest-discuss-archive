{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":69164307,"authorName":"mike amundsen","from":"mike amundsen &lt;mamund@...&gt;","profile":"mamund","replyTo":"SENDER","senderId":"eako0kyekjdlEkE4sYseody3J27738Vv5xbIbNcn6RCL_qj4veXnlVrzNc7NrozaYS8gQfF8wnR7V9QinVL516rbre_pMu8","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Re: Understanding Steady States","postDate":"1264446994","msgId":14672,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGI1NDhkZjY1MTAwMTI1MTExNmgyNDdlMGY0N2c3OGNiODFjYjg0OTVlMjJhQG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PGhqa29wcStiZ2ZlQGVHcm91cHMuY29tPg==","referencesHeader":"PDA3QjY4NjAyLUMyQzMtNDE2Ri1CQjM2LUY2QjI4RUI4QURFM0BtYWMuY29tPgkgPGhqa29wcStiZ2ZlQGVHcm91cHMuY29tPg=="},"prevInTopic":14671,"nextInTopic":14673,"prevInTime":14671,"nextInTime":14673,"topicId":14643,"numMessagesInTopic":27,"msgSnippet":"Andrew: I treat client state as volatile optional data - similar to cached data. IOW, I write my code to work w/ any existing client state if it s available","rawEmail":"Return-Path: &lt;mca@...&gt;\r\nX-Sender: mca@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 24264 invoked from network); 25 Jan 2010 19:17:09 -0000\r\nX-Received: from unknown (98.137.34.46)\n  by m5.grp.sp2.yahoo.com with QMQP; 25 Jan 2010 19:17:09 -0000\r\nX-Received: from unknown (HELO mail-fx0-f210.google.com) (209.85.220.210)\n  by mta3.grp.sp2.yahoo.com with SMTP; 25 Jan 2010 19:17:08 -0000\r\nX-Received: by fxm2 with SMTP id 2so2382121fxm.25\n        for &lt;rest-discuss@yahoogroups.com&gt;; Mon, 25 Jan 2010 11:16:34 -0800 (PST)\r\nMIME-Version: 1.0\r\nX-Received: by 10.223.75.66 with SMTP id x2mr5565614faj.7.1264446994444; Mon, 25 \n\tJan 2010 11:16:34 -0800 (PST)\r\nIn-Reply-To: &lt;hjkopq+bgfe@...&gt;\r\nReferences: &lt;07B68602-C2C3-416F-BB36-F6B28EB8ADE3@...&gt;\n\t &lt;hjkopq+bgfe@...&gt;\r\nDate: Mon, 25 Jan 2010 14:16:34 -0500\r\nX-Google-Sender-Auth: bb93dec41851b8f2\r\nMessage-ID: &lt;b548df651001251116h247e0f47g78cb81cb8495e22a@...&gt;\r\nTo: wahbedahbe &lt;andrew.wahbe@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: mike amundsen &lt;mamund@...&gt;\r\nSubject: Re: [rest-discuss] Re: Understanding Steady States\r\nX-Yahoo-Group-Post: member; u=69164307; y=ip-7ovCZkdjbYsQ0OmHhqZOGRPECj4YeqHl9xzJlEHo8\r\nX-Yahoo-Profile: mamund\r\n\r\nAndrew:\n\nI treat client state as volatile optional data - similar to cached=\r\n\ndata. IOW, I write my code to work w/ any existing client state if\nit&#39;s av=\r\nailable and, if not, lead the client into creating the needed\nstate to comp=\r\nlete the operation.\n\nShopping cart is an example. When I client visits a UR=\r\nI, the server\nmight check to see if there is any client state data (stored\n=\r\nselections in the cart) to display. If not, the client is offered the\nprope=\r\nr link(s) to create some cart data.\n\nIf I have any multiple-step operations=\r\n (ala &quot;Wizard UI&quot;) I&#39;ll inspect\nthe client state on each step to see where =\r\nin the process they\ncurrently are. If no state is avail (or some of the dat=\r\na is missing or\nhas expired), the client is directed to the proper URI (pos=\r\nsibly the\nstart URI) and led along as needed.\n\nIf a client attempts a write=\r\n operation on the server (POST/PUT)\nwithout the required client state data =\r\n(missing or invalid state\ndata), the client is given the appropriate respon=\r\nse code and offered\none or more URIs to help deliver the expected data befo=\r\nre\nre-attempting the write operation.\n\nThe &quot;client state data&quot; might be com=\r\nplete data on the client (for\ncustom clients) or a cookie identifier/authen=\r\ntication identifier (for\ncommon Web browsers). In the case of common browse=\r\nrs, I store any\ncomplex client state data on the server as a user resource =\r\n(instead of\nuser-agent resource) to get around data storage limits in curre=\r\nnt\nbrowsers and make sure users can log in via different agents and still\nr=\r\netrieve their data. Now that local data storage APIs are available\nfor scri=\r\npted browsers, I hope to move some of this data back to the\nclient.\n\nAll th=\r\nese examples might include an authenticate step, but that&#39;s\ntreated as an a=\r\ndditional layer on the set of state transitions.\n\nIn my experience, adoptin=\r\ng these patterns from the outset takes more\nimplementation time, but result=\r\ns in a more stable and, in the long\nrun, more adaptable application.\n\nmca\nh=\r\nttp://amundsen.com/blog/\n\n\n\n\nOn Mon, Jan 25, 2010 at 13:44, wahbedahbe &lt;and=\r\nrew.wahbe@...&gt; wrote:\n&gt;\n&gt;\n&gt; --- In rest-discuss@yahoogroups.com, Jan =\r\nAlgermissen &lt;algermissen1971@...&gt; wrote:\n&gt;&gt;\n&gt;&gt;\n&gt;&gt; On Jan 24, 2010, at 4:51 =\r\nPM, Jan Algermissen wrote:\n&gt;&gt;\n&gt;&gt; &gt;\n&gt;&gt; &gt; On Jan 24, 2010, at 4:46 PM, Mike K=\r\nelly wrote:\n&gt;&gt; &gt;\n&gt;&gt; &gt;&gt; Jan Algermissen wrote:\n&gt;&gt; &gt;&gt;&gt; On Jan 24, 2010, at 2:=\r\n07 PM, Mike Kelly wrote:\n&gt;&gt; &gt;&gt;&gt;\n&gt;&gt; &gt;&gt;&gt;\n&gt;&gt; &gt;&gt;&gt;&gt; the only way for the client =\r\nto understand the &#39;meaning&#39; of its\n&gt;&gt; &gt;&gt;&gt;&gt; current state is in the context =\r\nof the application flow (i.e.\n&gt;&gt; &gt;&gt;&gt;&gt; series =A0of link relations) which le=\r\nd up to it.\n&gt;&gt; &gt;&gt;&gt;&gt;\n&gt;&gt; &gt;&gt;&gt;\n&gt;&gt; &gt;&gt;&gt;\n&gt;&gt; &gt;&gt;&gt; Correct me, but this is exactly wh=\r\nat REST prevents. A client can\n&gt;&gt; &gt;&gt;&gt; use =A0the URI of any steady-state an=\r\nd just proceed through the\n&gt;&gt; &gt;&gt;&gt; application =A0from that point on without=\r\n the need for any knowledge\n&gt;&gt; &gt;&gt;&gt; about prior =A0interactions. If it can&#39;t=\r\n, the representation is just\n&gt;&gt; &gt;&gt;&gt; badly designed.\n&gt;&gt; &gt;&gt;&gt;\n&gt;&gt; &gt;&gt;\n&gt;&gt; &gt;&gt; Are =\r\nwe drawing a distinction here between steady-state and entry-\n&gt;&gt; &gt;&gt; point?\n=\r\n&gt;&gt; &gt;\n&gt;&gt; &gt; Hmm, IMHO each steady state is a potential entry point.\n&gt;&gt;\n&gt;&gt; I k=\r\nnew it wasn&#39;t my clever observation but that Roy wrote it\n&gt;&gt; somewhere... h=\r\nere is the link:\n&gt;&gt; &lt;http://tech.groups.yahoo.com/group/rest-discuss/messag=\r\ne/5841&gt;\n&gt;&gt;\n&gt;\n&gt; Another relevant Roy writing (wow this list feels like theol=\r\nogical discussions referencing Bible passages sometimes!) is in section 6.3=\r\n.4.2 of his thesis where he talks about cookies messing up the back button.=\r\n\n&gt;\n&gt; Your application state machine should allow arbitrary jumps (via &quot;type=\r\nd in&quot; urls, back buttons, etc.) and so that implies that the application st=\r\nate shouldn&#39;t depend on the path taken.\n&gt;\n&gt; At the same time I can think th=\r\nere is &quot;client state&quot; that is independent of &quot;application state&quot;. For examp=\r\nle, the size of the window in a browser, the content that an atompub client=\r\n is trying to publish are some examples. This client state affects the exec=\r\nution of the application, combining with the application state to affect cl=\r\nient behavior. e.g. the application could display differently depending on =\r\nthe window size or the atompub client could pick different feeds from the s=\r\nervice doc based on client state.\n&gt;\n&gt; I think was is important is that the =\r\napplication state should never rely on the client state value. One possible=\r\n approach to ensuring this is to enforce that the application state should =\r\nnever affect/change the client state, but I don&#39;t think this is necessary o=\r\nr realistic. For example, the content that a client is trying to publish mi=\r\nght depend on something that it previously fetched. The HTML5 client-side S=\r\nQL store is another example of mutable client state (I think).\n&gt;\n&gt; So I thi=\r\nnk that application state can effect the client state, but as long as your =\r\napplication states never depend on the client state, you can jump around to=\r\n arbitrary application states without things breaking. This does constrain =\r\nhow you do things though, for example, you have to write your HTML5 applica=\r\ntion to not depend on the state of client-side SQL tables.\n&gt;\n&gt; I&#39;m making u=\r\np my own terminology here as I&#39;m not aware of a precedent. And maybe, this =\r\n&quot;client state&quot; is really part of the application state -- but that doesn&#39;t =\r\nseem right to me and doesn&#39;t match my experience.\n&gt; Regards,\n&gt;\n&gt; Andrew\n&gt;\n&gt;=\r\n\n&gt;\n&gt; ------------------------------------\n&gt;\n&gt; Yahoo! Groups Links\n&gt;\n&gt;\n&gt;\n&gt;\n\n"}}
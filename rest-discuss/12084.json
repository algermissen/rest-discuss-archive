{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":319607554,"authorName":"Assaf Arkin","from":"Assaf Arkin &lt;assaf@...&gt;","profile":"assafarkin","replyTo":"SENDER","senderId":"S0I2sTr9uYwsyyGIDUZHl6Op7m8klItUUAHrLyJ19NksNFCmCA6mYyewRSr8RJ5oPzySOsV43QGMrCXYE_ziNfntvAPrBjU","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Re: RESTful URLs?","postDate":"1233786633","msgId":12084,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDUwMzdiNmU0MDkwMjA0MTQzMGwzZTA1MzQ5M25mNjM3NWI3YmYxMDRiMDE3QG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PGdtZDJwMCtzdGVkQGVHcm91cHMuY29tPg==","referencesHeader":"PDIwMDkwMjAzMjIzNDQzLkdBNzE2NkBrbGFuZ3JhdW0ucGxhc21hc3R1cm0ub3JnPgkgPGdtZDJwMCtzdGVkQGVHcm91cHMuY29tPg=="},"prevInTopic":12083,"nextInTopic":12086,"prevInTime":12083,"nextInTime":12085,"topicId":12048,"numMessagesInTopic":54,"msgSnippet":"... If you use hypermedia, servers have more liberty in choosing which URL structures to use, even which methods and content types. It s easier to build","rawEmail":"Return-Path: &lt;assaf@...&gt;\r\nX-Sender: assaf@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 51148 invoked from network); 4 Feb 2009 22:30:33 -0000\r\nX-Received: from unknown (66.218.67.97)\n  by m35.grp.scd.yahoo.com with QMQP; 4 Feb 2009 22:30:33 -0000\r\nX-Received: from unknown (HELO rv-out-0506.google.com) (209.85.198.229)\n  by mta18.grp.scd.yahoo.com with SMTP; 4 Feb 2009 22:30:33 -0000\r\nX-Received: by rv-out-0506.google.com with SMTP id f6so2859020rvb.5\n        for &lt;rest-discuss@yahoogroups.com&gt;; Wed, 04 Feb 2009 14:30:33 -0800 (PST)\r\nMIME-Version: 1.0\r\nX-Received: by 10.141.76.21 with SMTP id d21mr501645rvl.34.1233786633134; Wed, \n\t04 Feb 2009 14:30:33 -0800 (PST)\r\nIn-Reply-To: &lt;gmd2p0+sted@...&gt;\r\nReferences: &lt;20090203223443.GA7166@...&gt;\n\t &lt;gmd2p0+sted@...&gt;\r\nDate: Wed, 4 Feb 2009 14:30:33 -0800\r\nMessage-ID: &lt;5037b6e40902041430l3e053493nf6375b7bf104b017@...&gt;\r\nTo: scameron02 &lt;scott.cameron@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nContent-Type: multipart/alternative; boundary=000e0cd50a54ff216d04621f5553\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Assaf Arkin &lt;assaf@...&gt;\r\nSubject: Re: [rest-discuss] Re: RESTful URLs?\r\nX-Yahoo-Group-Post: member; u=319607554; y=O2CU4ry4_eRU2vNpd9rYUzJMX8FNWtFCZ4fBFfbJ1sl1wTYSHg\r\nX-Yahoo-Profile: assafarkin\r\n\r\n\r\n--000e0cd50a54ff216d04621f5553\r\nContent-Type: text/plain; charset=windows-1252\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nOn Wed, Feb 4, 2009 at 1:53 PM, scameron02 &lt;scott.cameron@...&gt; wrote:\n\n=\r\n&gt;\n&gt; --- In rest-discuss@yahoogroups.com, Aristotle Pagaltzis &lt;pagaltzis@...=\r\n&gt;\n&gt; wrote:\n&gt; &gt;\n&gt; &gt; &gt; It seems to me that in cases like this this there will=\r\n have to\n&gt; &gt; &gt; be a deterministic, programmatic method of producing URIs ba=\r\nsed\n&gt; &gt; &gt; on some kind of template or documentation or something else.\n&gt; &gt;\n=\r\n&gt; &gt; Exactly. But the template must be provided by the server in\n&gt; &gt; hyperme=\r\ndia, not hardwired into the client on a per-app basis.\n&gt; &gt;\n&gt;\n&gt; This is wher=\r\ne I get a little bit stuck when I think about the hypermedia\n&gt; constraint o=\r\nf REST.  At some point it seems that a transition needs to be\n&gt; made betwee=\r\nn the world of machine-discovered application interaction and the\n&gt; world o=\r\nf human-discovered application interaction.  At some level there will\n&gt; be =\r\nan agreement made between the server application writers and the client\n&gt; a=\r\npplication writers that tells the client guys what they need to hardcode\n&gt; =\r\ninto their apps.  That is, which aspects of the interface are guaranteed to=\r\n\n&gt; never change.\n&gt;\n&gt; One option for doing this is a documented URI schema. =\r\n In REST, this is\n&gt; considered bad because clients should be interacting wi=\r\nth hypermedia, not\n&gt; constructing URIs based on promises from the server.\n&gt;=\r\n\n&gt; The other option (the one prescribed by REST) is hypermedia.  OK, so you=\r\n\n&gt; return a set of hyperlinks or some kind of form to the client.  The use =\r\nof\n&gt; well-known hyperlink tags and standard form vocabularies provides a hi=\r\ngher\n&gt; level of machine-discoverable semantics.  For example, my app knows =\r\nit=E2=80=99s\n&gt; safe to do a GET on a hyperlink.  And it knows that, say, th=\r\ne form is asking\n&gt; for an input selection of one of the following 3 choices=\r\n.  But what does\n&gt; this really mean?  How does my application distinguish b=\r\netween one hyperlink\n&gt; and another hyperlink?  The one tagged =E2=80=9Cpare=\r\nnts=E2=80 probably returns the\n&gt; current resource=E2=80=99s parent resource=\r\ns and the one tagged =E2=80=9Cchildren=E2=80\n&gt; returns its children.  But a=\r\nren=E2=80=99t we back to hardcoding knowledge into the\n&gt; application about =\r\nwhat =E2=80=9Cparents=E2=80 and =E2=80=9Cchildren=E2=80 actually mean?  If =\r\nthe\n&gt; server  ever changes this meaning, my application breaks.  The same g=\r\noes for\n&gt; content (as opposed to the structure) of the forms.\n&gt;\n&gt; I think t=\r\nhat the answer comes down to well-known representation formats.\n&gt; The seman=\r\ntics hardcoded into client application should be based on metadata\n&gt; that i=\r\ns not determined by the server but rather by an agreed upon,\n&gt; standardized=\r\n format that is guaranteed to never change.  As long as the\n&gt; server implem=\r\nents the format correctly, everybody is automatically in\n&gt; agreement.  But =\r\n=E2=80&quot; taking forms as a specific example --  there still seems\n&gt; to be mi=\r\nssing information.  The form structure may be standardized, but the\n&gt; seman=\r\ntics associated with the content of a specific form instance will be\n&gt; spec=\r\nialized for each application.  Aren=E2=80=99t we back, then, to hard-coding=\r\n\n&gt; semantics into the client based on documentation from the server?\n&gt;\n&gt; In=\r\n this case, how much difference is there between documenting the\n&gt; semantic=\r\ns of a transparent URI schema or documenting the semantics of a\n&gt; specific =\r\nform instance (assuming the form is used to drive a program).\n&gt;\n\nIf you use=\r\n hypermedia, servers have more liberty in choosing which URL\nstructures to =\r\nuse, even which methods and content types. It&#39;s easier to\nbuild compatible =\r\nservices using different tools, platforms, change them over\ntime, build the=\r\nm out of parts, etc. When the only thing you reuse is the\ncontent type, it&#39;=\r\ns easier to mix as many clients and servers as you need.\nIt&#39;s also easier t=\r\no extend by adding more links/actions into the hypermedia.\n\nIf you use URL =\r\nstructures (don&#39;t forget to also list which methods are\navailable when) you=\r\n&#39;ve added a restriction on the servers. And URLs that are\nreally easy, some=\r\ntimes free, in one platform can be a pain to support in\nanother. A structur=\r\ne you think is awesome today could feel very restrictive\ntomorrow. And exte=\r\nnsibility is hard because you can&#39;t determine what a\nservice is capable of,=\r\n you no longer get a list of links/actions, you have\nto guess if making a m=\r\nethod against a URL is safe or not.\n\nOn the other hand, in my experience it=\r\n&#39;s easier to build code around a fixed\nURL structure, and if you only imagi=\r\nne having one (or few) clients to a\nsingle service, hypermedia might be an =\r\noverkill.\n\nAssaf\n\n\n&gt;\n&gt;\n&gt; I=E2=80=99m not trying to be argumentative here...=\r\n the hypermedia constraint of\n&gt; REST is something that I=E2=80=99m finding =\r\nthe most difficult of all the core\n&gt; principles to understand in practical =\r\nterms.  I=E2=80=99m very interested in your\n&gt; take on this topic.\n&gt;\n&gt; Thank=\r\ns,\n&gt; scott\n&gt;\n&gt;\n&gt; \n&gt;\n\r\n--000e0cd50a54ff216d04621f5553\r\nContent-Type: text/html; charset=windows-1252\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;div class=3D&quot;gmail_quote&quot;&gt;On Wed, Feb 4, 2009 at 1:53 PM, scameron02 &lt;span=\r\n dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:scott.cameron@...&quot;&gt;scott.cameron@sap=\r\n.com&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;ma=\r\nrgin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex;&quot;&gt;\n\n\n\n\n\n\n\n     =\r\n   \n\n\n\n&lt;div&gt;\n\n\n&lt;font face=3D&quot;georgia&quot;&gt;&lt;div class=3D&quot;Ih2E3d&quot;&gt;&lt;br&gt;--- In &lt;a h=\r\nref=3D&quot;mailto:rest-discuss@yahoogroups.com&quot; target=3D&quot;_blank&quot;&gt;rest-discuss@=\r\nyahoogroups.com&lt;/a&gt;, Aristotle Pagaltzis &lt;pagaltzis@...&gt; wrote:&lt;br&gt;&g=\r\nt; &lt;br&gt;&gt; &gt; It seems to me that in cases like this this there will hav=\r\ne to&lt;br&gt;\n&gt; &gt; be a deterministic, programmatic method of producing URI=\r\ns based&lt;br&gt;&gt; &gt; on some kind of template or documentation or something=\r\n else.&lt;br&gt;&gt; &lt;br&gt;&gt; Exactly. But the template must be provided by the s=\r\nerver in&lt;br&gt;\n&gt; hypermedia, not hardwired into the client on a per-app ba=\r\nsis.&lt;br&gt;&gt; &lt;br&gt;&lt;br&gt;&lt;/div&gt;This is where I get a little bit stuck when I th=\r\nink about the hypermedia constraint of REST.&nbsp; At some point it seems t=\r\nhat a transition needs to be made between the world of machine-discovered a=\r\npplication interaction and the world of human-discovered application intera=\r\nction.&nbsp; At some level there will be an agreement made between the serv=\r\ner application writers and the client application writers that tells the cl=\r\nient guys what they need to hardcode into their apps.&nbsp; That is, which =\r\naspects of the interface are guaranteed to never change.&lt;br&gt;\n&lt;br&gt;One option=\r\n for doing this is a documented URI schema.&nbsp; In REST, this is consider=\r\ned bad because clients should be interacting with hypermedia, not construct=\r\ning URIs based on promises from the server.&lt;br&gt;&lt;br&gt;The other option (the on=\r\ne prescribed by REST) is hypermedia.&nbsp; OK, so you return a set of hyper=\r\nlinks or some kind of form to the client.&nbsp; The use of well-known hyper=\r\nlink tags and standard form vocabularies provides a higher level of machine=\r\n-discoverable semantics.&nbsp; For example, my app knows it=E2=80=99s safe =\r\nto do a GET on a hyperlink.&nbsp; And it knows that, say, the form is askin=\r\ng for an input selection of one of the following 3 choices.&nbsp; But what =\r\ndoes this really mean?&nbsp; How does my application distinguish between on=\r\ne hyperlink and another hyperlink?&nbsp; The one tagged =E2=80=9Cparents=E2=\r\n=80  probably returns the current resource=E2=80=99s parent resources and t=\r\nhe one tagged =E2=80=9Cchildren=E2=80  returns its children.&nbsp; But aren=\r\n=E2=80=99t we back to hardcoding knowledge into the application about what =\r\n=E2=80=9Cparents=E2=80  and =E2=80=9Cchildren=E2=80  actually mean?&nbsp; I=\r\nf the server&nbsp; ever changes this meaning, my application breaks.&nbsp; =\r\nThe same goes for content (as opposed to the structure) of the forms.&lt;br&gt;\n&lt;=\r\nbr&gt;I think that the answer comes down to well-known representation formats.=\r\n&nbsp; The semantics hardcoded into client application should be based on m=\r\netadata that is not determined by the server but rather by an agreed upon, =\r\nstandardized format that is guaranteed to never change.&nbsp; As long as th=\r\ne server implements the format correctly, everybody is automatically in agr=\r\neement.&nbsp; But =E2=80&quot; taking forms as a specific example --&nbsp; =\r\nthere still seems to be missing information.&nbsp; The form structure may b=\r\ne standardized, but the semantics associated with the content of a specific=\r\n form instance will be specialized for each application.&nbsp; Aren=E2=80=\r\n=99t we back, then, to hard-coding semantics into the client based on docum=\r\nentation from the server?&lt;br&gt;\n&lt;br&gt;In this case, how much difference is ther=\r\ne between documenting the semantics of a transparent URI schema or document=\r\ning the semantics of a specific form instance (assuming the form is used to=\r\n drive a program).&lt;/font&gt;&lt;/div&gt;\n&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;If you use=\r\n hypermedia, servers have more liberty in choosing which URL structures to =\r\nuse, even which methods and content types. It&#39;s easier to build compati=\r\nble services using different tools, platforms, change them over time, build=\r\n them out of parts,&nbsp;etc. When the only thing you reuse is the content =\r\ntype, it&#39;s easier to mix as many clients and servers as you need. It&#3=\r\n9;s also easier to extend by adding more links/actions into the hypermedia.=\r\n&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;If you use URL structures (don&#39;t forget to a=\r\nlso list which methods are available when) you&#39;ve added a restriction o=\r\nn the servers. And URLs that are really easy, sometimes free, in one platfo=\r\nrm can be a pain to support in another. A structure you think is awesome to=\r\nday could feel very restrictive tomorrow. And extensibility is hard because=\r\n you can&#39;t determine what a service is capable of, you no longer get a =\r\nlist of links/actions, you have to guess if making a method against a URL i=\r\ns safe or not.&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;On the other hand, in my experienc=\r\ne it&#39;s easier to build code around a fixed URL structure, and if you on=\r\nly imagine having one (or few) clients to a single service, hypermedia migh=\r\nt be an overkill.&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Assaf&lt;/div&gt;&lt;div&gt;&nbsp;&lt;/div&gt;&lt;bl=\r\nockquote class=3D&quot;gmail_quote&quot; style=3D&quot;margin:0 0 0 .8ex;border-left:1px #=\r\nccc solid;padding-left:1ex;&quot;&gt;&lt;div&gt;&lt;font face=3D&quot;georgia&quot;&gt;&lt;br&gt;&lt;br&gt;I=E2=80=99=\r\nm not trying to be argumentative here... the hypermedia constraint of REST =\r\nis something that I=E2=80=99m finding the most difficult of all the core pr=\r\ninciples to understand in practical terms.&nbsp; I=E2=80=99m very intereste=\r\nd in your take on this topic.&lt;br&gt;\n&lt;br&gt;Thanks,&lt;br&gt;scott&lt;br&gt;&lt;/font&gt;\n\n\n\n\n\n\n&lt;br=\r\n&gt;\n\n    \n&lt;br&gt;\n\n\n\n\n&lt;div width=3D&quot;1&quot; style=3D&quot;color:white;clear:both&quot;&gt;&lt;/div&gt;\n&lt;=\r\n/div&gt;\n\n\n&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;\n\r\n--000e0cd50a54ff216d04621f5553--\r\n\n"}}
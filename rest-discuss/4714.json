{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":174970602,"authorName":"Donald Strong","from":"&quot;Donald Strong&quot; &lt;dstrong@...&gt;","profile":"illyrian_au","replyTo":"SENDER","senderId":"6MXoXMuxNxALGvOBeieUGbybkCJV_uQ_dNrWkvo2drf2kMLSj9CMZQgzPBMifnhwPPsnqnvop_05od-rG93EotSVCGlKjLfZV3LgpovFK3zKxWNr","spamInfo":{"isSpam":false,"reason":"0"},"subject":"RE: [rest-discuss] RESTful Queues","postDate":"1103261174","msgId":4714,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEVNRUFJQ0FHT1BPSUlGSk5QQkhKSUVBTkREQUEuZHN0cm9uZ0BhZ2VudGlzc29mdHdhcmUuY29tPg==","inReplyToHeader":"PDExMDMyMTE1MjYuMTMwMjkuMTA0LmNhbWVsQHBob2VuaXg+"},"prevInTopic":4713,"nextInTopic":4715,"prevInTime":4713,"nextInTime":4715,"topicId":4698,"numMessagesInTopic":21,"msgSnippet":"Hi again, My original posting stated that I assumed many producers and one consumer. I thought that was the usual setup for queues, ie. to regulate input into","rawEmail":"Return-Path: &lt;dstrong@...&gt;\r\nX-Sender: dstrong@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 35779 invoked from network); 17 Dec 2004 05:26:20 -0000\r\nReceived: from unknown (66.218.66.166)\n  by m21.grp.scd.yahoo.com with QMQP; 17 Dec 2004 05:26:20 -0000\r\nReceived: from unknown (HELO agentis.com.au) (192.35.59.253)\n  by mta5.grp.scd.yahoo.com with SMTP; 17 Dec 2004 05:26:20 -0000\r\nReceived: from voldemort.agentis.net (typhoeus-dmz.agentis.net [192.35.59.129])\n\tby agentis.com.au (8.11.6/8.11.6) with ESMTP id iBH5QHH16227;\n\tFri, 17 Dec 2004 16:26:17 +1100\r\nReceived: from roc (roc.agentis.net [192.168.129.235])\n\tby voldemort.agentis.net (8.11.6/8.11.6) with SMTP id iBH5QEd20553;\n\tFri, 17 Dec 2004 05:26:15 GMT\r\nTo: &lt;jsled@...&gt;, &quot;Jeffrey Winter&quot; &lt;jeffreywinter@...&gt;\r\nCc: &quot;Vincent D Murphy&quot; &lt;vdm@...&gt;, &lt;rest-discuss@yahoogroups.com&gt;\r\nDate: Fri, 17 Dec 2004 16:26:14 +1100\r\nMessage-ID: &lt;EMEAICAGOPOIIFJNPBHJIEANDDAA.dstrong@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain;\n\tcharset=&quot;US-ASCII&quot;\r\nContent-Transfer-Encoding: 7bit\r\nX-Priority: 3 (Normal)\r\nX-MSMail-Priority: Normal\r\nX-Mailer: Microsoft Outlook IMO, Build 9.0.2416 (9.0.2911.0)\r\nImportance: Normal\r\nX-MimeOLE: Produced By Microsoft MimeOLE V6.00.2800.1441\r\nIn-Reply-To: &lt;1103211526.13029.104.camel@phoenix&gt;\r\nX-eGroups-Remote-IP: 192.35.59.253\r\nFrom: &quot;Donald Strong&quot; &lt;dstrong@...&gt;\r\nSubject: RE: [rest-discuss] RESTful Queues\r\nX-Yahoo-Group-Post: member; u=174970602\r\nX-Yahoo-Profile: illyrian_au\r\n\r\nHi again,\n\nMy original posting stated that I assumed many producers\nand one consumer. I thought that was the usual setup for\nqueues, ie. to regulate input into a process.\n\nIf there are many consumers then this seems more like load\nbalancing. I do not think that load balancing was the\noriginal intention of Jeffery&#39;s question. My interpretation\nwas that he was interested in reliable delivery of the\nmessages on the queue to a single consumer, and in\nparticular the question:\n\n&quot;How to I acknowledge successful reciept so the message\n can be deleted from the queue&quot;.\n\nHowever, if we are talking load balancing now, just for the sake\nof a challange, the algorithm can be slightly modified so that\nthe initial GET returns messages IDs from the set (rather than\nqueue) on a round-robin basis. Consequently, client2 will usually\nbe allocated a different message to download than client 2,\nassuming that more than one message is available.\n\n\n&gt; [POST or PUT could be used instead of DELETE, I s&#39;pose, but I&#39;ll use\n&gt; DELETE here since it seems most appropriate:]\n&gt;\n&gt; client1: GET /queue\n&gt;       s: 303 /queue/1\n&gt; client2: GET /queue\n&gt;       s: 303 /queue/1\n&gt; client1: GET /queue/1   # client1 is _fast_.\n&gt;       s: &lt;data&gt;\n&gt; client1: DELETE /queue/1\n&gt;       s: 204\n&gt; client2: GET /queue/1\n&gt;       s: 409 # losah!\n&gt; client2: GET /queue\n&gt;       s: 303 /queue/2\n&gt; # ...\n&gt;\n\nJosh&#39;s suggestion is a good one, however, I would note that the conflict can\nalso occur on the DELETE. In fact, the server doesn&#39;t know the\nmessage has been successfully transfered until the DELETE, so\nit may be inappropriate to signal the conflict on the GET.\n\nclient1: GET /queue\n      s: 303 /queue/1\nclient2: GET /queue\n      s: 303 /queue/1\nclient1: GET /queue/1   # client1 is _fast_.\n      s: &lt;data&gt;\nclient1: DELETE /queue/1\n      s: 204\nclient2: GET /queue/1\n      s: &lt;data&gt;\nclient2: DELETE /queue/1\n      s: 409 # losah!\nclient2: GET /queue\n      s: 303 /queue/2\n\nIn this scenario client1 knows it should process the\nmessage when it receives a 204 (No Content) response to the\nDELETE. client2 knows it should not process the\nmessage because it received a 409 (Conflict) response to the\nDELETE.\n\nThis protocol will still not guarentee that the message\nwill be processed by exactly one consumer. If the DELETE\nrequest by client1 is interupted there is a window where\nthe server may receive the DELETE but the client does not\nreceive the response from the DELETE. A subsequent DELETE\nfrom client1 would return 409 and the message is lost.\nIn other words, the DELETE is not idempotent.\n\nThe only way I can see around that problem is if the\nDELETE request can identify the User Agent (consumer)\nmaking the request. Then the DELETE response entity could\nidentify the consumer that was successful, eg.\n &quot;Message 1 was DELETED by client1&quot;.\nA subsequent DELETE by client1 would identify itself as the\nconsumer of the message.\n\nThere is no way for the User Agent to identify itself\nin HTTP1.1 so that is a problem. There is also no ID for\nthe request in HTTP1.1 so that cannot be used either.\n\nI think perhaps an entirely different approach is needed\nto guarentee the message is only processed by one consumer.\n\nReagrds\nDonald.\n\n\n"}}
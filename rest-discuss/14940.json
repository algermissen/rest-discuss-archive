{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":289191104,"authorName":"Jan Algermissen","from":"Jan Algermissen &lt;algermissen1971@...&gt;","profile":"algermissen1971","replyTo":"SENDER","senderId":"JfG5bS3mAYBL_3zis62_RFLXT9VUOAgXzJQF3w0B_HRfeqi8OF7I5KUiPP3P4U3o7pz_MA8YIMDmZOAfyajxkbColX73uOfKl2j4fzi1MyU","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Idea for a REST client","postDate":"1267349053","msgId":14940,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEY1QTlFMUY0LTZCMTktNERFMy04OTdFLTI0NEJFOUU1NkVDN0BtYWMuY29tPg==","inReplyToHeader":"PEU1MkJCOEFDLUFFRkYtNENEQS05RDcwLTgzQjhCOTY0Qzg5OEBnbWFpbC5jb20+","referencesHeader":"PDFBRDNCRjgyLTQ5ODItNEFDMC1CRjM1LTRCMTg0QkFGN0Y0NkBnbWFpbC5jb20+IDxBMDgzMDBERC00NTMzLTQ5NDctQTQxMy03MTg4MThDNDE3QTdAbWFjLmNvbT4gPDY5RThGQUEyLTU2RDYtNEJFOC04NjE4LUM5NEFCNTdERkQzM0BnbWFpbC5jb20+IDxGMUM5NDc5MS1DNkU3LTQ3NDItQUYzNy0wM0VBMjI2NDM4MkVAbWFjLmNvbT4gPEU1MkJCOEFDLUFFRkYtNENEQS05RDcwLTgzQjhCOTY0Qzg5OEBnbWFpbC5jb20+"},"prevInTopic":14938,"nextInTopic":14942,"prevInTime":14939,"nextInTime":14941,"topicId":14934,"numMessagesInTopic":11,"msgSnippet":"... Yes, axactly. ... I d do this: Either the data is included in the current state already or the current state includes a link to the data which the client","rawEmail":"Return-Path: &lt;algermissen1971@...&gt;\r\nX-Sender: algermissen1971@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 1279 invoked from network); 28 Feb 2010 09:24:19 -0000\r\nX-Received: from unknown (66.196.94.105)\n  by m2.grp.sp2.yahoo.com with QMQP; 28 Feb 2010 09:24:19 -0000\r\nX-Received: from unknown (HELO asmtpout029.mac.com) (17.148.16.104)\n  by mta1.grp.re1.yahoo.com with SMTP; 28 Feb 2010 09:24:19 -0000\r\nMIME-version: 1.0\r\nContent-transfer-encoding: 7BIT\r\nContent-type: text/plain; charset=us-ascii\r\nX-Received: from [192.168.2.102] ([84.144.48.69])\n by asmtp029.mac.com (Sun Java(tm) System Messaging Server 6.3-8.01 (built Dec\n 16 2008; 32bit)) with ESMTPSA id &lt;0KYJ00K49OSDO850@...&gt; for\n rest-discuss@yahoogroups.com; Sun, 28 Feb 2010 01:24:18 -0800 (PST)\r\nX-Proofpoint-Spam-Details: rule=notspam policy=default score=0 spamscore=0\n ipscore=0 phishscore=0 bulkscore=0 adultscore=0 classifier=spam adjust=0\n reason=mlx engine=5.0.0-0908210000 definitions=main-1002280017\r\nIn-reply-to: &lt;E52BB8AC-AEFF-4CDA-9D70-83B8B964C898@...&gt;\r\nDate: Sun, 28 Feb 2010 10:24:13 +0100\r\nCc: REST Discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nMessage-id: &lt;F5A9E1F4-6B19-4DE3-897E-244BE9E56EC7@...&gt;\r\nReferences: &lt;1AD3BF82-4982-4AC0-BF35-4B184BAF7F46@...&gt;\n &lt;A08300DD-4533-4947-A413-718818C417A7@...&gt;\n &lt;69E8FAA2-56D6-4BE8-8618-C94AB57DFD33@...&gt;\n &lt;F1C94791-C6E7-4742-AF37-03EA2264382E@...&gt;\n &lt;E52BB8AC-AEFF-4CDA-9D70-83B8B964C898@...&gt;\r\nTo: Jan Vincent &lt;jvliwanag@...&gt;\r\nX-Mailer: Apple Mail (2.1077)\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Jan Algermissen &lt;algermissen1971@...&gt;\r\nSubject: Re: [rest-discuss] Idea for a REST client\r\nX-Yahoo-Group-Post: member; u=289191104; y=7ccn7qX2altgwWsbm4_c8ZAi0EzT16AkOOU1yl7KgoqMY58OW3bQq-fi\r\nX-Yahoo-Profile: algermissen1971\r\n\r\n\nOn Feb 28, 2010, at 5:30 AM, Jan Vincent wrote:\n\n&gt; After careful thought, I believe I understand HATEOAS better now. My question however is, since the current resource dictates where I can go, does this mean that in an application, the UI is highly dependent on which state I am right now?\n\nYes, axactly.\n\n&gt; For web applications, this is understandable. But for desktop applications, this may not be so.\n&gt; Say, I create a rich address book app. Assume further that I have a simple feature wherein if I hover on a contact&#39;s entry, I display that contact&#39;s brief profile information. How do I accomplish this? Which resource should I be at?\n\nI&#39;d do this:\n\nEither the data is included in the current state already or the current state includes a link to the data which the client downloads when the user hovers over the contact.\n\nThe hypermedia constraint issue here is that the hovering will only display data if the data is there or if that link is available.\n\n\n&gt; In addition to this, is it feasible to access multiple REST web services, thereby maintaining more than one current &#39;state&#39;?\n\nPersonally, I have not made up my mind on this. I guess that an application is limited to a single service unless the service itself point to another service itself.\n\nJan\n\n&gt; \n&gt; On Feb 28, 2010, at 9:20 AM, Jan Algermissen wrote:\n&gt; \n&gt;&gt; Jan,\n&gt;&gt; \n&gt;&gt; On Feb 28, 2010, at 1:17 AM, Jan Vincent wrote:\n&gt;&gt; \n&gt;&gt;&gt; I&#39;m not sure again, why some knowledge of the state machine on the server would be a bad thing.\n&gt;&gt; \n&gt;&gt; It is bad because it couples client and server. This has the effect that the server owner needs to be aware of its clients to anticipate the impact of change. REST aims to eliminate that coupling.\n&gt;&gt; \n&gt;&gt;&gt; The idea I have is something like that of a user browsing through different pages of a website, the difference being is that it is based on some script. Should the server decide to deviate from that script, then yes, things would be screwed up.\n&gt;&gt; \n&gt;&gt; Yep - and REST focusses on the server being able to change without things screwing up. This can only be achieved if the client adheres to the hypermedia constraint. Meaning that the client must look at any steady state (that it is being put into by the server) how to proceed to achieve its overall goal. The client must only decide this based on the current steady state after having reached it.\n&gt;&gt; \n&gt;&gt;&gt; \n&gt;&gt;&gt; As such, the content-types provide some form of contract that some elements would need to exist on the representations the restful service serves.\n&gt;&gt; \n&gt;&gt; But the client must not make any design time assumptions about the content type it will actually receive.\n&gt;&gt; \n&gt;&gt;&gt; In the example provided below, I assume the presence of certain links, and some forms I could fill out.\n&gt;&gt; \n&gt;&gt; The hypermedia constraint forbids such assumptions.\n&gt;&gt; \n&gt;&gt; This is of course not to say that clients that make such assumptions cannot be appropriate for a given set of requirements. But it is important to understand that the system you end up with is not RESTful because client and server are coupled around these assumptions.\n&gt;&gt; \n&gt;&gt; In my opinion, RESTful systems have two essential benefits: Simplicity and eliminating the need for service owners to communicate with client owners when they intend to change the service to support some previously unanticipated requirement (think &quot;business agility&quot;).\n&gt;&gt; \n&gt;&gt; Simplicity is a huge benefit in itself and achieving it does not depend on adhering to the hypermedia constraint (see my HTTP-based Type I/II). However, being able to evolve the components of a complex system (think &quot;The Web&quot; or &quot;enterprise integration&quot;) at an independent pace easily justifies the effort of building a truly RESTful system.\n&gt;&gt; \n&gt;&gt; Jan\n&gt;&gt; \n&gt;&gt; \n&gt;&gt;&gt; I don&#39;t really care about the format of the URL, and to some extent, even the methods (since I simply fill out forms on the xhtml representation).\n&gt;&gt;&gt; \n&gt;&gt;&gt; Moreover, I liken what I have described below as something like tabbed browsing by some user. The user, goes on to the main site, clicks on the lists of users, fills in a form to search for some user and then clicks on the result. If another search is needed, a new &#39;tab&#39; is opened to save the old resource (say, the setting on the browser is to open the same page on the former tab), hit &#39;back&#39; to the search users form, and search again.\n&gt;&gt;&gt; \n&gt;&gt;&gt; On Feb 27, 2010, at 9:21 PM, Jan Algermissen wrote:\n&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; Jan\n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; On Feb 27, 2010, at 10:15 AM, Jan Vincent wrote:\n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt; Hi guys,\n&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt; I wish to create a framework for accessing REST resources over HTTP. I wish to focus on xhtml Content-Type in particular. The idea is that the developer would provide instructions on how to get to the resource from a single URL.\n&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt; Implementation-wise however, the framework would provide all the necessary plumbing to take care of caching and what not.\n&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt; Consider three resources:\n&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt; Root Resource - primary URL (&quot;/&quot;), entry point for the service, has a link to the User List\n&gt;&gt;&gt;&gt;&gt; User List - lists all users, on GET, may accept a query string &quot;email&quot; to search for a specific user, contains link to the users&#39; respective profiles\n&gt;&gt;&gt;&gt;&gt; User Profile - the profile of a user\n&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt; In order to implement something like get_user_by_email, the developer would have to describe how to get from the Root Resource to the User Profile. In code, a developer using the framework would do something like:\n&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt; get_user_by_email(email) {\n&gt;&gt;&gt;&gt;&gt; from(&quot;/&quot;)\n&gt;&gt;&gt;&gt;&gt; .on(200) { |Root|\n&gt;&gt;&gt;&gt;&gt;   Root.follow(&quot;#users_link&quot;)\n&gt;&gt;&gt;&gt;&gt;     .on(200) { |Users|\n&gt;&gt;&gt;&gt;&gt;       Users.fill_in(&quot;#search_form&quot;, {&quot;email&quot;: email})\n&gt;&gt;&gt;&gt;&gt;         .on(200) { |SearchResult|\n&gt;&gt;&gt;&gt;&gt;            SearchResult ...get_first_result...\n&gt;&gt;&gt;&gt;&gt;              .on(200) { |Profile|\n&gt;&gt;&gt;&gt;&gt;                return profile_to_some_struct(Profile)\n&gt;&gt;&gt;&gt;&gt;              }\n&gt;&gt;&gt;&gt;&gt;         }\n&gt;&gt;&gt;&gt;&gt;     }\n&gt;&gt;&gt;&gt;&gt; }\n&gt;&gt;&gt;&gt;&gt; }\n&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt; I&#39;m still working on how to best express this intent as code, and it&#39;s pretty ugly now I must admit.\n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; The problem (from a RESTfulness POV) with this is that the code assumes a certain state machine of the application. If the server decides to change that state machine, the code will break.\n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; If the service publishes information that allows the client to make such assumptions as manifested by the code above, the service is not RESTful but is an &quot;HTTP-based Type I&quot; &lt;http://nordsc.com/ext/classification_of_http_based_apis.html#http-type-one&gt; (or &quot;HTTP-based Type II&quot;) API.\n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; If the server does not publish such information the code above just represents guess-work which would be worse because the coupling would actually be hidden inside the code.\n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; When you think about such a framework approach, keep in mind that it will lead to tightly coupled systems no matter how &quot;Webby&quot; the system looks. If the service evolves, the client will break.\n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; Whether this is actually a bad thing depends on the requirements - maybe long term evolvability has been traded for getting something started fast and maybe the expected system lifetime is so short that evolvability does not matter, but you need to be aware of this to make an informed decision.\n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; Jan\n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt; However, the framework doesn&#39;t really execute the instructions by the developer directly. Instead, it uses its built in cache to get the result. From the example above, the framework would do things in reverse:\n&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt; 1. Is there a cache* of the result to a call to get_user_by_email(email)? If YES, return prior result, If NO, go to step 2\n&gt;&gt;&gt;&gt;&gt; 2. Is there a cache of the result to a call getting the search matches of a user given a specified email? If YES, using that result, go down the code -- following the link to the user profile, then returning the result. If NO, go to step 3.\n&gt;&gt;&gt;&gt;&gt; 3. Is there a cache of the list of users? If YES, go on and fill in the search form, etc. If NO, go to step 4\n&gt;&gt;&gt;&gt;&gt; 4. Is there a cache of the root resource? If YES, go back steps 3,2,1. If NO, get the root resource, and then go further back the steps.\n&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt; * When I say cached, I generally mean that there has been a prior call, and the result was cached AND the cache hasn&#39;t expired yet based on the server cache instructions\n&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt; The framework forms a tree of possible scenarios. It starts from the most optimistic test (step 1) on the leaf, and if it fails, goes back to its parent.\n&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt; I believe this would be useful especially if the applications that are going to be built don&#39;t follow the UI style of web pages following linked documents. Is this a HATEOAS respecting client? I&#39;d truly appreciate some inputs.\n&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt; FYI, I&#39;ll start development of an Erlang version at http://bitbucket.org/jvliwanag/restr/ . Though, there&#39;s nothing there yet now. Hehe.\n&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt; Jan Vincent Liwanag\n&gt;&gt;&gt;&gt;&gt; jvliwanag@...\n&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; -----------------------------------\n&gt;&gt;&gt;&gt; Jan Algermissen, Consultant\n&gt;&gt;&gt;&gt; NORD Software Consulting\n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; Mail: algermissen@...\n&gt;&gt;&gt;&gt; Blog: http://www.nordsc.com/blog/\n&gt;&gt;&gt;&gt; Work: http://www.nordsc.com/\n&gt;&gt;&gt;&gt; -----------------------------------\n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt; \n&gt;&gt;&gt; Jan Vincent Liwanag\n&gt;&gt;&gt; jvliwanag@...\n&gt;&gt;&gt; \n&gt;&gt;&gt; \n&gt;&gt;&gt; \n&gt;&gt; \n&gt;&gt; -----------------------------------\n&gt;&gt; Jan Algermissen, Consultant\n&gt;&gt; NORD Software Consulting\n&gt;&gt; \n&gt;&gt; Mail: algermissen@...\n&gt;&gt; Blog: http://www.nordsc.com/blog/\n&gt;&gt; Work: http://www.nordsc.com/\n&gt;&gt; -----------------------------------\n&gt;&gt; \n&gt;&gt; \n&gt;&gt; \n&gt;&gt; \n&gt; \n&gt; Jan Vincent Liwanag\n&gt; jvliwanag@...\n&gt; \n&gt; \n&gt; \n\n-----------------------------------\n Jan Algermissen, Consultant\n NORD Software Consulting\n\n Mail: algermissen@...\n Blog: http://www.nordsc.com/blog/\n Work: http://www.nordsc.com/\n-----------------------------------\n\n\n\n\n\n"}}
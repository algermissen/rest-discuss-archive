{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"DLHLn3dIfRARaBi3Q4eJccrFBEhRIg8NwmwBU-7BUKmJKlFaq7y2oqiwvkJmIF7Pkk2ynA81j8hR7RVO5LJncbCNGpdWcBm00g3dKrqNRA","spamInfo":{"isSpam":false,"reason":"6"},"subject":"Re: [rest-discuss] HTML5 and RESTful HTTP in browsers","postDate":"1226995189","msgId":11523,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMDgxMTE4MDA1OTQ5LmFiNzQ0YmVkLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","inReplyToHeader":"PDIwMTUxMDEwLjIzNjg3MTIyNjkxOTk1NDUzMi5KYXZhTWFpbC5zZXJ2bGV0QGt1bmRlbnNlcnZlcj4=","referencesHeader":"PDIwMTUxMDEwLjIzNjg3MTIyNjkxOTk1NDUzMi5KYXZhTWFpbC5zZXJ2bGV0QGt1bmRlbnNlcnZlcj4="},"prevInTopic":11522,"nextInTopic":11524,"prevInTime":11522,"nextInTime":11524,"topicId":11508,"numMessagesInTopic":82,"msgSnippet":"On Mon, 17 Nov 2008 12:05:54 +0100 ... Not at all.  Horribly bad practice, though...  A URI identifies a resource, there s nothing theoretically wrong with two","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 5470 invoked from network); 18 Nov 2008 07:59:51 -0000\r\nX-Received: from unknown (66.218.67.94)\n  by m49.grp.scd.yahoo.com with QMQP; 18 Nov 2008 07:59:51 -0000\r\nX-Received: from unknown (HELO mxout-08.mxes.net) (216.86.168.183)\n  by mta15.grp.scd.yahoo.com with SMTP; 18 Nov 2008 07:59:50 -0000\r\nX-Received: from BigBison (unknown [65.117.211.162])\n\t(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))\n\t(No client certificate requested)\n\tby smtp.mxes.net (Postfix) with ESMTP id C6F57D05A1;\n\tTue, 18 Nov 2008 02:59:49 -0500 (EST)\r\nDate: Tue, 18 Nov 2008 00:59:49 -0700\r\nTo: mike@...\r\nCc: &lt;rest-discuss@yahoogroups.com&gt;\r\nMessage-Id: &lt;20081118005949.ab744bed.eric@...&gt;\r\nIn-Reply-To: &lt;20151010.236871226919954532.JavaMail.servlet@kundenserver&gt;\r\nReferences: &lt;20151010.236871226919954532.JavaMail.servlet@kundenserver&gt;\r\nOrganization: Bison Systems Corporation\r\nX-Mailer: Sylpheed 2.4.5 (GTK+ 2.10.14; i686-pc-mingw32)\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=US-ASCII\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:6:0:0:0\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nSubject: Re: [rest-discuss] HTML5 and RESTful HTTP in browsers\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\nOn Mon, 17 Nov 2008 12:05:54 +0100\nmike@... wrote:\n&gt; \n&gt; To my mind, the best situation would be to have both options\n&gt; available for developers. Although, I assume that specifying\n&gt; content-type in a URI is violating RESTful principals; theoretically\n&gt; at least.\n&gt; \n\nNot at all.  Horribly bad practice, though...  A URI identifies a\nresource, there&#39;s nothing theoretically wrong with two resources having\nthe following identifiers (since they&#39;re opaque):\n\nhttp://example.org/image;type=image/png\nhttp://example.org/image;type=image/jpeg\n\nCoupling that parameter to the Content-Type header returned by the\nserver can certainly be done, but why?  Standard practice would look\nsomething like this:\n\nhttp://example.org/image.png\nhttp://example.org/image.jpg\n\nWith a corresponding server configuration which bases Content-Type on\nfilename extension. These are separate resources, in either case.  What\nyou&#39;re missing, is that both resources can also be representations of\nthe following negotiated resource:\n\nhttp://example.org/image\n\nEither resource may be returned as a representation of /image, using\ncontent negotiation based on Accept header.  The response should also\ninclude a Content-Location header giving the URL of the resource used\nto fulfill the request, and a Vary: Accept header to explicitly inform\nclients and intermediaries that multiple representations exist.\n\nIf an HTML author or generator wishes to explicitly link to the PNG or\nthe JPG, they have all the information they need to do so and avoid\nusing the negotiated URL altogether, if the situation warrants.\n\nSo it seems to me that there&#39;s already plenty of mechanism in place to\ndo exactly what it is that you want to do, without adding @accept.\n\n&gt;\n&gt; One argument that can be made for providing the option for both\n&gt; methods is browser bookmarking - can anyone tell me how browsers\n&gt; store bookmarks; do they store the entire request complete with\n&gt; headers? If this is not the case, the only feasible way to provision\n&gt; typed bookmarking is to specify the type in the URL.\n&gt; \n\nA browser&#39;s bookmarks have nothing to do with HTTP headers, at least\nnot in any that I&#39;ve ever seen.  Bookmarks are fairly portable between\nbrowsers these days, I&#39;ve partially implemented import/export between\nblogroll and browser even, they&#39;re just links annotated in one way or\nanother.  AFAIK, browsers only care about HTTP headers for caching.\n\n&gt;\n&gt; Does anyone else agree that an Accept attribute would be a useful\n&gt; tool for making browser interaction more RESTful? Is it worth\n&gt; persuing this issue with the HTML5 working group?\n&gt; \n\nYes and no, and no comment as regards WHATWG.  There are cases where a\nWeb application may need to override the browser&#39;s request headers, of\ncourse JavaScript can do this these days, but you do have a point that\nsome provision should be made in markup.\n\n&gt; \n&gt; A browser and a markup language that support the HTTP protocol.. what\n&gt; a novel idea..!\n&gt; \n&gt; This is just standard HTTP stuff, right? Surely it needs to be\n&gt; supported?\n&gt;\n\n\nI&#39;m not sure what you mean by browsers not supporting HTTP, just\nbecause HTML disallows PUT doesn&#39;t mean browsers can&#39;t send PUT.  As\nfar as better HTTP support in markup languages, this has already been\ndone in XForms 1.1, using submission elements inside the &#39;model&#39;:\n\n&lt;xfm:submission method=&#39;get&#39; resource=&#39;http://example.org/image&#39;&gt;\n&lt;xfm:header&gt;\n &lt;xfm:name&gt;Accept&lt;/xfm:name&gt;\n &lt;xfm:value&gt;image/png&lt;/xfm:value&gt;\n&lt;/xfm:header&gt;\n&lt;/xfm:submission&gt;\n\nThis would retrieve image.png but never image.jpg from /image .\n\n&gt; \n&gt; I can&#39;t seedevelopers moving to implement multiple representations at\n&gt; single URIsif the browsers (and HTML) can&#39;t even make use of it\n&gt; without having toresort to all of this javascript voodoo nonsense.\n&gt;\n\nDevelopers have been implementing content negotiation for years, and\nbrowsers have sent request headers for years.  So browsers make use of\nnegotiated resources all the time, the advantage to the developer is\nthe opportunity to offer multiple representations without any advance\nknowledge of client preference or capability.\n\nOverriding clients&#39; innate HTTP headers without Javascript is a noble\ngoal, but content negotiation is hardly useless, pointless or not\nimplemented because of it, since conneg is done at the protocol level,\nand is not a function of media-type.\n\n-Eric\n\n"}}
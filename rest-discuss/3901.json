{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":4849001,"authorName":"Alex Jacobson","from":"Alex Jacobson &lt;alex@...&gt;","profile":"shop2it","replyTo":"SENDER","senderId":"TltSWbA0o6EyiCdqyzhOcsGDv-tOsp-lmQzBWdXMuicCJmjA2bve4KN5jNOaKMaH-zUeyZI1XNiSjKyWTymguEUE","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] ReST vs MoST Messaging","postDate":"1060789736","msgId":3901,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQxMDExNTQ0NC4xMDYwNzc1MzM2QGxvY2FsaG9zdD4=","inReplyToHeader":"PDAwMDAwMWMzNjE5NyRhNDNiNDZkMCRhMDAwYThjMEBTZWFpcnRoQTMxPg==","referencesHeader":"PDM1NDIxMTUyOS4xMDYwNzE5NDYyQGxvY2FsaG9zdD4gPDAwMDAwMWMzNjE5NyRhNDNiNDZkMCRhMDAwYThjMEBTZWFpcnRoQTMxPg=="},"prevInTopic":3900,"nextInTopic":3902,"prevInTime":3900,"nextInTime":3902,"topicId":3880,"numMessagesInTopic":23,"msgSnippet":"... allow a ... Nothing about ReST or MoST or HTTP prevents a server from requiring valid authentication tokens in GET request.  You can discover that","rawEmail":"Return-Path: &lt;alex@...&gt;\r\nX-Sender: alex@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 24171 invoked from network); 13 Aug 2003 16:11:16 -0000\r\nReceived: from unknown (66.218.66.218)\n  by m13.grp.scd.yahoo.com with QMQP; 13 Aug 2003 16:11:16 -0000\r\nReceived: from unknown (HELO mailgate.vo.com) (208.45.6.97)\n  by mta3.grp.scd.yahoo.com with SMTP; 13 Aug 2003 16:11:16 -0000\r\nReceived: from [192.168.123.103] (m288d36d0.tmodns.net [208.54.141.40])\n\t(using TLSv1 with cipher EDH-RSA-DES-CBC3-SHA (168/168 bits))\n\t(No client certificate requested)\n\tby mailgate.vo.com (Postfix) with ESMTP\n\tid 129F888540; Wed, 13 Aug 2003 12:11:15 -0400 (EDT)\r\nDate: Wed, 13 Aug 2003 11:48:56 -0400\r\nTo: Seairth Jacobs &lt;seairth@...&gt;,\n\trest-discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nSubject: Re: [rest-discuss] ReST vs MoST Messaging\r\nMessage-ID: &lt;410115444.1060775336@localhost&gt;\r\nIn-Reply-To: &lt;000001c36197$a43b46d0$a000a8c0@SeairthA31&gt;\r\nReferences: &lt;354211529.1060719462@localhost&gt;\n &lt;000001c36197$a43b46d0$a000a8c0@SeairthA31&gt;\r\nX-Mailer: Mulberry/3.0.3 (Win32)\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=us-ascii; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nContent-Disposition: inline\r\nX-eGroups-From: Alex Jacobson &lt;alex@...&gt;\r\nFrom: Alex Jacobson &lt;alex@...&gt;\r\nX-Yahoo-Group-Post: member; u=4849001\r\nX-Yahoo-Profile: shop2it\r\n\r\n&gt;&gt; MoST is just about taking HTTP seriously.  If the resource does not \nallow a\n&gt;&gt; particular method, give an error.\n&gt;\n&gt; But if a client only knows a given resource is a &quot;container&quot;, it won&#39;t\n&gt; know that a given method is not allowed until the method is actually\n&gt; tried. I certainly wouldn&#39;t want to design a client with expectations\n&gt; that are not necessarily true.\n\nNothing about ReST or MoST or HTTP prevents a server from requiring valid \nauthentication tokens in GET request.  You can discover that authentication \nis required simply by receiving a 401.  More generally, why have all of \nthese status codes if the client should simply know not to violate the \nconstraints they describe from some out-of-band documentation.\n\nWhat is at issue here is how much you can discover WITHOUT out-of-band \ndocumentation of the particular resource.  Per resource documentation means \nyou no longer have a generic/visible/transparent API.\n\nMoST says that HTTP provides enough constraints so that the only \nout-of-band documentation needed is the content-type definitions.\n\nA useful rule:\nIf you would be better off defining a new HTTP method than using an \nexisting one, you are not really using HTTP.  You would be better off using \na new HTTP method if it is the only way to tell whether or not your \nresource has the functionality you are prescribing.  In other words, a \nresource that doesn&#39;t implement your method returns a 501 NOT IMPLEMENTED \nstatus.\n\n&gt; RNA is *not* a mail\n&gt; protocol and &quot;Inbox&quot; does *not* mean a mail inbox.  Viewing RNA in this\n&gt; manner would definitely cause the misunderstanding you seem to have.\n\nOK, what is the purpose of RNA?\n\n&gt; Having said that, let&#39;s try another approach.  It may even be that this is\n&gt; the sort of modeling you are talking about.  I&#39;m making this up as I go,\n&gt; so bear with me...\n&gt;\n&gt; 1. resources: Identity, Inbox\n&gt; 2. content-types: application/x.rna.agreement+xml,\n&gt; application/x.rna.notification+xml\n&gt; 3. map(Identity): POST application/x.rna.agreement+xml =&gt;\n&gt; 200(application/x.rna.agreement+xml), GET =&gt; (200(*/*), 302())\n&gt; 4. map(Inbox): POST application/x.rna.notification+xml =&gt; 202()\n\nNope.  You still don&#39;t have a content-type for identity or inbox.\n\n&gt; 1. Two resources are involved: an Identity resource and an Inbox resource.\n&gt; In order to write a client, the programmer will have to understand what\n&gt; these resources are.  This understanding comes from documentation that\n&gt; describes them.\n\nBut since you don&#39;t provide content-type for the resources, the programmer \nhas no way to understand what they are.\n\nInstead you are providing documentation that describes how they respond to \nvarious HTTP method names.  The programmer still has no idea what they \n*are*.\n\nWhat they *are* constrains how they interact via HTTP.  Defining a custom \ninterface via HTTP is defining a custom interface and loses all the \nadvantages of genericity/visibility/transparency etc.  It is NOT \ndiscoverable.\nGiven the arbitrariness of your interface, why not define a new HTTP method?\n\n&gt; 2. Two content-types are involved: application/x.rna.agreement+xml and\n&gt; application/x.rna.notification+xml [1].  As with the resources, the\n&gt; programmer must understand the content-types to write the client.  Here,\n&gt; however, it would at least be possible to plug in existing code (written\n&gt; by another programmer).\n\nNOTHING motivates these content-types unless you specify the content-type \nof the resource itself.  They are completely arbitrary.  Why not just \ndefine a new HTTP method that requires these content-types?  Then, at \nleast, you would know whether the resource supports it.\n\n&gt; 3. An Identity resource allows two methods: POST and GET.  For POST, the\n&gt; request entity&#39;s content-type must be application/x.rna.agreement+xml.\n&gt; The possible response [2] to a POST is 200, where the only returnable\n&gt; content-type is also application/x.rna.agreement+xml.  For GET, the\n&gt; possible responses can be 200, where the returnable content-type can be\n&gt; anything, and 302, where no response entity is given.\n\nIf the returned content-type is undefined, you are violating HTTP and \ndescribing NOTHING.\n\n&gt; 4. An Inbox resource allows one method: POST.  For POST, the request\n&gt; entity&#39;s content-type must be application/x.rna.notification+xml.  The\n&gt; possible response to a POST is 202, where no response entity is given.\n\n202 implies ABSOLUTELY NOTHING about the behavior of the system.  You are \ndescribing entirely arbitrary interfaces.  Why not define a new method?\n\nA resource that accepts POSTs of ANY content-type and returns random \ncontent in response to a GET implements RNA.  What is the point?\nAt least if you created a new method, the fact that RNA is supported would \nbe visible.\n\n&gt; Notes:\n&gt; [1] Currently, the RNA spec only has one content-type:\n&gt; application/x.rna+xml.  However, the above process has made me realize\n&gt; that I really had two different content types that need to be defined.\n&gt; On the other hand, I suppose I could also just use application/xml with\n&gt; XML Namespaces to differentiate the two document types internally.  That\n&gt; doesn&#39;t really seem like a good approach, but I have to admit I am a bit\n&gt; gun shy when it comes to XMLNS.\n\nIt really helps HTTP to pass as specific a content-type as possible in the \nheader.  Use the text/xml+format convention if you can.\n\n&gt; [2] 4xx and 5xx responses are alway implicitly supported, but can be\n&gt; explicitly named above if special criteria need to be given (such as a\n&gt; specific returnable content-type).\n\nYour spec says that an RNA inbox accepts any POST of the content-type you \nspecify.  Stuff that is not that content-type is not covered by your spec.\nAgain, your spec defines ABSOLUTELY NO visible behavior by an HTTP server.\n\n&gt; Identity Resource\n&gt; This resource represents a user&#39;s (person, program, machine, etc.)\n&gt; identity. Currently, it has only two functions:  negotiate RNA Agreement\n&gt; documents (content-type of application/x.rna.agreement+xml), and to\n&gt; return something (such as an html document) what queried. Upon successful\n&gt; negotiation of an RNA Agreement document, the client has either been\n&gt; given access to an Inbox Resource, or has been given validation of the\n&gt; current RNA Agreement.\n\nIf resources have &quot;functions&quot; you are implementing a custom interface.  Why \nnot give these functions explicit method names?\n\n&gt; Inbox Resource\n&gt; This resource represents an endpoint that collects notifications.\n&gt; Currently, it has only one function: accept RNA Notification documents\n&gt; (content-type of application/x.rna.notification+xml).\n\nSee above re functions.\n\n&gt; Additional Note(s):  The RNA specification does not define any method for\n&gt; a user to retrieve notifications sent to him.  It also does not define any\n&gt; other configuration, validation, etc criteria.  RNA only defines the\n&gt; &quot;public&quot; server interface.\n\nFine.  Why not define custom method names for this interface so at least \nthe client can know that the server actually claims to implement this \ninterface?\n\n&gt; It is expected that servers will act as\n&gt; clients when using RNA between each other (as opposed to having a\n&gt; dedicated client program).  I am currently working on a set of &quot;private&quot;\n&gt; server interfaces that allows a user to view received notifications,\n&gt; define agreement negotiation criteria, send notifications, etc.  This\n&gt; specification is being kept separate from RNA on purpose.  This allows\n&gt; other to define their own specifications for dealing with the back-end\n&gt; stuff as is appropriate for their own uses of RNA.  For instance, one\n&gt; such set of interfaces may be used to implement a mail-like usage of RNA.\n&gt; Another such set of interfaces may be used to implement a peer\n&gt; file-sharing network.  Yet another may be used to implement an &quot;instant\n&gt; messaging&quot; function.\n\nIf you want to define customer interfaces, that is fine.  Its just not \nusing HTTP.  Why not use IDL?\n\n-Alex-\n___________________________________________________________________\nS. Alexander Jacobson                   i2x Media\n1-212-787-1914 voice                    1-603-288-1280 fax\n\n\n"}}
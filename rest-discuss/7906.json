{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":1070305,"authorName":"Dave Orchard","from":"&quot;Dave Orchard&quot; &lt;orchard@...&gt;","profile":"dorchard100","replyTo":"SENDER","senderId":"PvxoyhGKTQIEEZtdBEWM-6-8GSuF1FENxvAwkf2c0A6T1jVxEOtWgqnovg3uU9-gQy2KNzpunMQWMUvDE-2-lLicCbgBBfv2VRneSq95INXk","spamInfo":{"isSpam":false,"reason":"0"},"subject":"RE: [rest-discuss] Re: Another potential problem with the 311 proposal","postDate":"1171591784","msgId":7906,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDAyNjIwMWM3NTE2ZiQ4NzA4MzQzMCQ2NzAxYThjMEBhbWVyLmJlYS5jb20+","inReplyToHeader":"PGVyMXZiZys5N3IzQGVHcm91cHMuY29tPg==","referencesHeader":"PGM3MGJjODVkMDcwMjE1MDcxOXYxZmFjOWNmM21mYWJiMTVjNGFmOWE4NWRmQG1haWwuZ21haWwuY29tPiA8ZXIxdmJnKzk3cjNAZUdyb3Vwcy5jb20+"},"prevInTopic":7900,"nextInTopic":7907,"prevInTime":7905,"nextInTime":7907,"topicId":7871,"numMessagesInTopic":23,"msgSnippet":"Jerome, There s a huge difference between a protocol specification such as HTTP and an API specification for a protocol.  HTTP is the same for both client and ","rawEmail":"Return-Path: &lt;orchard@...&gt;\r\nX-Sender: orchard@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 55011 invoked from network); 16 Feb 2007 02:13:05 -0000\r\nReceived: from unknown (66.218.66.72)\n  by m40a.grp.scd.yahoo.com with QMQP; 16 Feb 2007 02:13:05 -0000\r\nReceived: from unknown (HELO smtp-relay2.uniserve.ca) (216.113.193.122)\n  by mta14.grp.scd.yahoo.com with SMTP; 16 Feb 2007 02:13:05 -0000\r\nReceived: from [142.179.104.151] (helo=DORCHARD01)\n\tby smtp-relay2.uniserve.ca with esmtpa (Exim 4.63)\n\t(envelope-from &lt;orchard@...&gt;)\n\tid 1HHsXp-0006fI-90; Thu, 15 Feb 2007 18:09:55 -0800\r\nTo: =?iso-8859-1?Q?&#39;J=E9r=F4me_Louvel&#39;?= &lt;contact@...&gt;,\n\t&lt;rest-discuss@yahoogroups.com&gt;\r\nReferences: &lt;c70bc85d0702150719v1fac9cf3mfabb15c4af9a85df@...&gt; &lt;er1vbg+97r3@...&gt;\r\nDate: Thu, 15 Feb 2007 18:09:44 -0800\r\nMessage-ID: &lt;026201c7516f$87083430$6701a8c0@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: multipart/alternative;\n\tboundary=&quot;----=_NextPart_000_0263_01C7512C.78E4F430&quot;\r\nX-Mailer: Microsoft Office Outlook 11\r\nX-MimeOLE: Produced By Microsoft MimeOLE V6.00.2900.3028\r\nIn-Reply-To: &lt;er1vbg+97r3@...&gt;\r\nThread-Index: AcdRGOvFso45OIr9TRi6z6uQb6dm0gAVnGbg\r\nX-Scanner: OK. Scanned.\r\nX-Uniserve-Spam-Score: 0.3 3 (/)\r\nX-Uniserve-Spam-Report: Content analysis details:   (0.3 points)\n\tpts rule name              description\n\t---- ---------------------- --------------------------------------------------\n\t0.0 HTML_MESSAGE           BODY: HTML included in message\n\t0.2 HTML_70_80             BODY: Message is 70% to 80% HTML\n\t0.1 HTML_BACKHAIR_2        BODY: HTML tags used to obfuscate words\r\nX-eGroups-Msg-Info: 1:0:0:0\r\nFrom: &quot;Dave Orchard&quot; &lt;orchard@...&gt;\r\nReply-To: &lt;orchard@...&gt;\r\nSubject: RE: [rest-discuss] Re: Another potential problem with the 311 proposal\r\nX-Yahoo-Group-Post: member; u=1070305; y=1sYA8wsz0xcHjwCVC-OXrOaC-22_jiFwGiHC-QCEx61LNf5EZT8\r\nX-Yahoo-Profile: dorchard100\r\n\r\n\r\n------=_NextPart_000_0263_01C7512C.78E4F430\r\nContent-Type: text/plain;\n\tcharset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nJerome,\n \nThere&#39;s a huge difference between a protocol specification such a=\r\ns HTTP and\nan API specification for a protocol.  HTTP is the same for both =\r\nclient and\nsender because they both see the same things on the wire.  An AP=\r\nI could be\ndramatically different based upon the needs of clients vs servic=\r\nes, and what\nkind of infrastructure is available for use.  I&#39;m not saying J=\r\nSR 311 should\nhave separate APIs for client/server, just pointing out that =\r\nthere are\nscenarios where it is desirable.  \n \nCheers,\nDave\n \n\n\n  _____  \n\n=\r\nFrom: rest-discuss@yahoogroups.com [mailto:rest-discuss@yahoogroups.com] On=\r\n\nBehalf Of J=E9r=F4me Louvel\nSent: Thursday, February 15, 2007 7:48 AM\nTo: =\r\nrest-discuss@yahoogroups.com\nSubject: [rest-discuss] Re: Another potential =\r\nproblem with the 311 proposal\n\n\n\nHi Mark,\n\n&gt; I agree. Moreover, I also thin=\r\nk you generally have different design\n&gt; goals with client and server APIs. =\r\nFor example performance is\n&gt; normally a lot more important for servers than=\r\n clients. Also, a\n&gt; simple API might be more desirable on the client than o=\r\nn the server\n&gt; (again, because of performance). For these reasons it will l=\r\nikely do\n&gt; more harm than good to try to use server abstractions in a clien=\r\nt API\n&gt; or vice-versa.\n\nI understand your point of view, but we also have t=\r\no take into account\napplications that need high performance for clients too=\r\n.\nImplementating transparent RESTful proxies for non-RESTful\napplications i=\r\ns a common use case where you need excellent\nperformance, multi-threading o=\r\nn both sides of your application. \n\nFYI, we provide two client HTTP connect=\r\nors (pluggable and using the\nsame API), one based on JDK&#39;s HttpURLConnectio=\r\nn and another based on\nApache HTTP Client library. \n\nAlso, in our case, you=\r\n can directly set the client&#39;s output\nrepresentation reference as the serve=\r\nr&#39;s output representation,\nwithout reading/buffering anything. An optimized=\r\n implementation of the\nRestlet API could even directly move bytes from clie=\r\nnt socket to\nserver socket without consuming JVM memory thanks to Java&#39;s NI=\r\nO.\n\nAnyway, we didn&#39;t find the sharing of common classes between the\nserver=\r\n-side and the client-side of the API to be an issue, it&#39;s even\nthe opposite=\r\n. For this design, we leveraged the notion of REST uniform\ninterface (see o=\r\nur org.restlet.Uniform class) and the generic HTTP\nmessage aspects (entity =\r\nheaders common to both HTTP requests and\nresponses). Just think about repre=\r\nsentations metadata (ETag, media\ntype, encoding, etc.), their are strictly =\r\nthe same.\n\nEven the HTTP specification doesn&#39;t provide two separate definit=\r\nions\nfor requests and responses depending on whether you see the\ncommunicat=\r\nion from the client end or from the server end of the\nconnection, so why re=\r\ndefine them twice at the API level? \n\nBest regards,\nJerome\n\n\n\n \n\n\r\n------=_NextPart_000_0263_01C7512C.78E4F430\r\nContent-Type: text/html;\n\tcharset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.=\r\nw3c.org/TR/1999/REC-html401-19991224/loose.dtd&quot;&gt;\n&lt;HTML&gt;&lt;HEAD&gt;\n&lt;META http-eq=\r\nuiv=3DContent-Type content=3D&quot;text/html; charset=3Diso-8859-1&quot;&gt;&lt;!-- Network=\r\n content --&gt;\n&lt;META content=3D&quot;MSHTML 6.00.2900.3059&quot; name=3DGENERATOR&gt;&lt;/HEA=\r\nD&gt;\n&lt;BODY style=3D&quot;BACKGROUND-COLOR: #ffffff&quot;&gt;\n&lt;DIV dir=3Dltr align=3Dleft&gt;&lt;=\r\nSPAN class=3D906095117-15022007&gt;&lt;FONT face=3DArial \ncolor=3D#0000ff size=3D=\r\n2&gt;Jerome,&lt;/FONT&gt;&lt;/SPAN&gt;&lt;/DIV&gt;\n&lt;DIV dir=3Dltr align=3Dleft&gt;&lt;SPAN class=3D906=\r\n095117-15022007&gt;&lt;FONT face=3DArial \ncolor=3D#0000ff size=3D2&gt;&lt;/FONT&gt;&lt;/SPAN&gt;=\r\n&nbsp;&lt;/DIV&gt;\n&lt;DIV dir=3Dltr align=3Dleft&gt;&lt;SPAN class=3D906095117-15022007&gt;&lt;=\r\nFONT face=3DArial \ncolor=3D#0000ff size=3D2&gt;There&#39;s a huge difference betwe=\r\nen a protocol specification \nsuch as HTTP and an API specification for&nbsp=\r\n;a protocol.&nbsp; HTTP is the \nsame for both client and sender because the=\r\ny both see the same things on the \nwire.&nbsp; An API could be dramatically=\r\n different based upon the needs of \nclients&nbsp;&lt;SPAN class=3D312350802-16=\r\n022007&gt;vs&lt;/SPAN&gt; serv&lt;SPAN \nclass=3D312350802-16022007&gt;ices, and what kind =\r\nof infrastructure&nbsp;is available \nfor use.&nbsp; &lt;/SPAN&gt;I&#39;m not saying J=\r\nSR 311 should have separate APIs for \nclient/server, just pointing out that=\r\n there are scenarios where it is \ndesirable.&nbsp; &lt;/FONT&gt;&lt;/SPAN&gt;&lt;/DIV&gt;\n&lt;DI=\r\nV dir=3Dltr align=3Dleft&gt;&lt;SPAN class=3D906095117-15022007&gt;&lt;FONT face=3DAria=\r\nl \ncolor=3D#0000ff size=3D2&gt;&lt;/FONT&gt;&lt;/SPAN&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV dir=3Dltr align=\r\n=3Dleft&gt;&lt;SPAN class=3D906095117-15022007&gt;&lt;FONT face=3DArial \ncolor=3D#0000f=\r\nf size=3D2&gt;Cheers,&lt;/FONT&gt;&lt;/SPAN&gt;&lt;/DIV&gt;\n&lt;DIV dir=3Dltr align=3Dleft&gt;&lt;SPAN cl=\r\nass=3D906095117-15022007&gt;&lt;FONT face=3DArial \ncolor=3D#0000ff size=3D2&gt;Dave&lt;=\r\n/FONT&gt;&lt;/SPAN&gt;&lt;/DIV&gt;\n&lt;DIV dir=3Dltr align=3Dleft&gt;&lt;FONT face=3DArial color=3D=\r\n#0000ff \nsize=3D2&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;&lt;BR&gt;\n&lt;BLOCKQUOTE \nstyle=3D&quot;PADDING-LEF=\r\nT: 5px; MARGIN-LEFT: 5px; BORDER-LEFT: #0000ff 2px solid; MARGIN-RIGHT: 0px=\r\n&quot;&gt;\n  &lt;DIV class=3DOutlookMessageHeader lang=3Den-us dir=3Dltr align=3Dleft&gt;=\r\n\n  &lt;HR tabIndex=3D-1&gt;\n  &lt;FONT face=3DTahoma size=3D2&gt;&lt;B&gt;From:&lt;/B&gt; rest-disc=\r\nuss@yahoogroups.com \n  [mailto:rest-discuss@yahoogroups.com] &lt;B&gt;On Behalf O=\r\nf &lt;/B&gt;J=E9r=F4me \n  Louvel&lt;BR&gt;&lt;B&gt;Sent:&lt;/B&gt; Thursday, February 15, 2007 7:48=\r\n AM&lt;BR&gt;&lt;B&gt;To:&lt;/B&gt; \n  rest-discuss@yahoogroups.com&lt;BR&gt;&lt;B&gt;Subject:&lt;/B&gt; [rest-=\r\ndiscuss] Re: Another \n  potential problem with the 311 proposal&lt;BR&gt;&lt;/FONT&gt;&lt;=\r\nBR&gt;&lt;/DIV&gt;\n  &lt;DIV&gt;&lt;/DIV&gt;\n  &lt;DIV id=3Dygrp-text&gt;\n  &lt;P&gt;Hi Mark,&lt;BR&gt;&lt;BR&gt;&gt; I =\r\nagree. Moreover, I also think you generally have \n  different design&lt;BR&gt;&gt=\r\n; goals with client and server APIs. For example \n  performance is&lt;BR&gt;&gt; =\r\nnormally a lot more important for servers than clients. \n  Also, a&lt;BR&gt;&gt; =\r\nsimple API might be more desirable on the client than on the \n  server&lt;BR&gt;&=\r\ngt; (again, because of performance)&lt;WBR&gt;. For these reasons it will \n  like=\r\nly do&lt;BR&gt;&gt; more harm than good to try to use server abstractions in a \n =\r\n client API&lt;BR&gt;&gt; or vice-versa.&lt;BR&gt;&lt;BR&gt;I understand your point of view, =\r\nbut \n  we also have to take into account&lt;BR&gt;applications that need high per=\r\nformance \n  for clients too.&lt;BR&gt;Implementating transparent RESTful proxies =\r\nfor \n  non-RESTful&lt;BR&gt;applications is a common use case where you need \n  e=\r\nxcellent&lt;BR&gt;performance, multi-threading on both sides of your application.=\r\n \n  &lt;BR&gt;&lt;BR&gt;FYI, we provide two client HTTP connectors (pluggable and using=\r\n \n  the&lt;BR&gt;same API), one based on JDK&#39;s HttpURLConnection and another base=\r\nd \n  on&lt;BR&gt;Apache HTTP Client library. &lt;BR&gt;&lt;BR&gt;Also, in our case, you can d=\r\nirectly \n  set the client&#39;s output&lt;BR&gt;representation reference as the serve=\r\nr&#39;s output \n  representation,&lt;BR&gt;without reading/buffering anything. An opt=\r\nimized \n  implementation of the&lt;BR&gt;Restlet API could even directly move byt=\r\nes from \n  client socket to&lt;BR&gt;server socket without consuming JVM memory t=\r\nhanks to \n  Java&#39;s NIO.&lt;BR&gt;&lt;BR&gt;Anyway, we didn&#39;t find the sharing of common=\r\n classes \n  between the&lt;BR&gt;server-side and the client-side of the API to be=\r\n an issue, it&#39;s \n  even&lt;BR&gt;the opposite. For this design, we leveraged the =\r\nnotion of REST \n  uniform&lt;BR&gt;interface (see our org.restlet.&lt;WBR&gt;Uniform cl=\r\nass) and the generic \n  HTTP&lt;BR&gt;message aspects (entity headers common to b=\r\noth HTTP requests \n  and&lt;BR&gt;responses). Just think about representations me=\r\ntadata (ETag, \n  media&lt;BR&gt;type, encoding, etc.), their are strictly the sam=\r\ne.&lt;BR&gt;&lt;BR&gt;Even the \n  HTTP specification doesn&#39;t provide two separate defin=\r\nitions&lt;BR&gt;for requests \n  and responses depending on whether you see the&lt;BR=\r\n&gt;communication from the \n  client end or from the server end of the&lt;BR&gt;conn=\r\nection, so why redefine them \n  twice at the API level? &lt;BR&gt;&lt;BR&gt;Best regard=\r\ns,&lt;BR&gt;Jerome&lt;BR&gt;&lt;BR&gt;&lt;/P&gt;&lt;/DIV&gt;&lt;!--End group email --&gt;&lt;/BLOCKQUOTE&gt;&lt;/BODY&gt;&lt;/=\r\nHTML&gt;\n\r\n------=_NextPart_000_0263_01C7512C.78E4F430--\r\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":198897688,"authorName":"Dong Liu","from":"Dong Liu &lt;edongliu@...&gt;","profile":"edonliu","replyTo":"SENDER","senderId":"cgWG8qFVD7ierswFzRIFNsWM4_lpW4Wwgra7t8V1TJOPWdt_2KOlH9NRcmU67LLahB5AtHXMATm6qPtJJUxSCpTqttg","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] RESTful way to pop first item in a queue","postDate":"1281455487","msgId":16259,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEFBTkxrVGltdzBNKzExY3lEaXlLRFJKX0VGaGlOUWNORGFDLXduQXJ4NlJyREBtYWlsLmdtYWlsLmNvbT4=","inReplyToHeader":"PEFBTkxrVGk9NjFoRDV6RVJrdkctdTFUQXp6b0dOMlB3NG5pb2ljNFZMRCtOekBtYWlsLmdtYWlsLmNvbT4=","referencesHeader":"PDEyODEwMzQ3NDguMjkxNy4zMDMuY2FtZWxAYmFja3BhY2s+CTxBQU5Ma1RpPTYxaEQ1ekVSa3ZHLXUxVEF6em9HTjJQdzRuaW9pYzRWTEQrTnpAbWFpbC5nbWFpbC5jb20+"},"prevInTopic":16258,"nextInTopic":16260,"prevInTime":16258,"nextInTime":16260,"topicId":16148,"numMessagesInTopic":46,"msgSnippet":"More details ... ... 2. GET /foo/HEAD does not cache, and returns an {id}. ... and other representation.  Many clients can have this {id}. ... Clients might","rawEmail":"Return-Path: &lt;edongliu@...&gt;\r\nX-Sender: edongliu@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 20450 invoked from network); 10 Aug 2010 15:51:28 -0000\r\nX-Received: from unknown (98.137.34.44)\n  by m6.grp.sp2.yahoo.com with QMQP; 10 Aug 2010 15:51:28 -0000\r\nX-Received: from unknown (HELO mail-vw0-f54.google.com) (209.85.212.54)\n  by mta1.grp.sp2.yahoo.com with SMTP; 10 Aug 2010 15:51:28 -0000\r\nX-Received: by vws7 with SMTP id 7so9192247vws.13\n        for &lt;rest-discuss@yahoogroups.com&gt;; Tue, 10 Aug 2010 08:51:28 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.220.165.69 with SMTP id h5mr522099vcy.270.1281455487915; Tue, \n\t10 Aug 2010 08:51:27 -0700 (PDT)\r\nX-Received: by 10.220.158.212 with HTTP; Tue, 10 Aug 2010 08:51:27 -0700 (PDT)\r\nIn-Reply-To: &lt;AANLkTi=61hD5zERkvG-u1TAzzoGN2Pw4nioic4VLD+Nz@...&gt;\r\nReferences: &lt;1281034748.2917.303.camel@backpack&gt;\n\t&lt;AANLkTi=61hD5zERkvG-u1TAzzoGN2Pw4nioic4VLD+Nz@...&gt;\r\nDate: Tue, 10 Aug 2010 09:51:27 -0600\r\nMessage-ID: &lt;AANLkTimw0M+11cyDiyKDRJ_EFhiNQcNDaC-wnArx6RrD@...&gt;\r\nTo: juergen.brendel@..., rest-discuss@yahoogroups.com\r\nContent-Type: multipart/alternative; boundary=001485e7e84827159e048d7a1b53\r\nFrom: Dong Liu &lt;edongliu@...&gt;\r\nSubject: Re: [rest-discuss] RESTful way to pop first item in a queue\r\nX-Yahoo-Group-Post: member; u=198897688; y=LTahe1oUUKxbTT25QyBKwJLEHvgnoerOnks1rkYVq_cOwQ\r\nX-Yahoo-Profile: edonliu\r\n\r\n\r\n--001485e7e84827159e048d7a1b53\r\nContent-Type: text/plain; charset=windows-1252\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nMore details ...\n\nOn Tue, Aug 10, 2010 at 9:34 AM, Dong Liu &lt;edongliu@gmail=\r\n.com&gt; wrote:\n\n&gt; I think there is difference between a &#39;Restful&#39; solution an=\r\nd a &#39;Restful&#39;\n&gt; HTTP solution.\n&gt;\n&gt; If one has to use HTTP, then the followi=\r\nng are my design\n&gt;\n&gt; 1. There is nothing mapped to GET some url like /foo/{=\r\nid}.\n&gt;\n2. GET /foo/HEAD does not cache, and returns an {id}.\n&gt;\nand other re=\r\npresentation.  Many clients can have this {id}.\n\n&gt; 3. POST /foo/ to push().=\r\n\n&gt; 4. DELETE /foo/{id} to pop(). If {id} is never the HEAD then the request=\r\n\n&gt; fails.\n&gt;\nClients might race in this case, but that is the reality for a =\r\nqueue to\nserver many clients.\n\n&gt;\n&gt; Not sure if it is good to implement 3 an=\r\nd 4 by PATCH.\n&gt;\n&gt; Cheers,\n&gt;\n&gt; Dong\n&gt;\n&gt; On Thu, Aug 5, 2010 at 12:59 PM, Jue=\r\nrgen Brendel &lt;\n&gt; juergen.brendel@...&gt; wrote:\n&gt;\n&gt;&gt;\n&gt;&gt;\n&gt;&gt;\n&gt;&gt; Hello!\n=\r\n&gt;&gt;\n&gt;&gt; Let&#39;s say I have a queue resource: /foo\n&gt;&gt;\n&gt;&gt; I can POST new entries =\r\ninto the queue. I can even refer to individual\n&gt;&gt; entries within the queue:=\r\n /foo/&lt;id&gt;\n&gt;&gt;\n&gt;&gt; But how do I pop the next entry? How do I construct a sing=\r\nle request\n&gt;&gt; that gets me the next/first entry but also removes the entry =\r\nat the same\n&gt;&gt; time?\n&gt;&gt;\n&gt;&gt; Maybe I can implement a special resource /foo/ne=\r\nxt, which always refers\n&gt;&gt; to the next entry in the queue. But clearly, I c=\r\nan&#39;t use GET to pop the\n&gt;&gt; entry, since that would not be idempotent.\n&gt;&gt;\n&gt;&gt;=\r\n The queue has multiple consumers, so the &#39;pop&#39; operation should be\n&gt;&gt; atom=\r\nic. This seems to rule out the possibility of doing a GET to\n&gt;&gt; retrieve th=\r\ne latest element, followed by a DELETE to remove it. Someone\n&gt;&gt; else could =\r\nhave gotten the &#39;latest&#39; element in the meantime, thus\n&gt;&gt; causing the same =\r\nelement to be consumed twice.\n&gt;&gt;\n&gt;&gt; Maybe I can cause a &#39;move&#39;, where a sin=\r\ngle request causes the next\n&gt;&gt; element to be renamed to a unique ID, which =\r\nis then returned to the\n&gt;&gt; client, who then is the only one who has a handl=\r\ne on that object. The\n&gt;&gt; client can then work with the resource. But the qu=\r\nestion now is:\n&gt;&gt;\n&gt;&gt; a) What happens when the client fails before it can de=\r\nlete the resource?\n&gt;&gt; b) What is the best way to &#39;move&#39; an item in that way=\r\n?\n&gt;&gt;\n&gt;&gt; Juergen\n&gt;&gt;\n&gt;&gt; --\n&gt;&gt; Juergen Brendel\n&gt;&gt; http://restx.mulesoft.org\n&gt;&gt;=\r\n\n&gt;&gt;  \n&gt;&gt;\n&gt;\n&gt;\n\r\n--001485e7e84827159e048d7a1b53\r\nContent-Type: text/html; charset=windows-1252\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nMore details ...=A0&lt;br&gt;&lt;br&gt;&lt;div class=3D&quot;gmail_quote&quot;&gt;On Tue, Aug 10, 2010 =\r\nat 9:34 AM, Dong Liu &lt;span dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:edongliu@gmail=\r\n.com&quot;&gt;edongliu@...&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote class=3D&quot;gmai=\r\nl_quote&quot; style=3D&quot;margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left=\r\n:1ex;&quot;&gt;\nI think there is difference between a &#39;Restful&#39; solution an=\r\nd a &#39;Restful&#39; HTTP solution.=A0&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;If one has to us=\r\ne HTTP, then the following are my design =A0&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;1. Th=\r\nere is nothing mapped to GET some url like /foo/{id}.=A0&lt;/div&gt;\n&lt;/blockquote=\r\n&gt;&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;margin:0 0 0 .8ex;border-left:1=\r\npx #ccc solid;padding-left:1ex;&quot;&gt;&lt;div&gt;2. GET /foo/HEAD does not cache, and =\r\nreturns an {id}.=A0&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;and other representation.=A0=A0M=\r\nany clients can have this {id}. =A0&lt;/div&gt;\n&lt;blockquote class=3D&quot;gmail_quote&quot;=\r\n style=3D&quot;margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex;&quot;&gt;&lt;=\r\ndiv&gt;3. POST /foo/ to push().=A0&lt;/div&gt;&lt;div&gt;4. DELETE /foo/{id} to pop(). If =\r\n{id} is never the HEAD then the request fails.=A0&lt;/div&gt;\n&lt;/blockquote&gt;&lt;div&gt;C=\r\nlients might race in this case, but that is the reality for a queue to serv=\r\ner many clients. =A0&lt;/div&gt;&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;margin=\r\n:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex;&quot;&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;=\r\ndiv&gt;Not sure if it is good to implement 3 and 4 by PATCH.=A0&lt;/div&gt;\n&lt;div&gt;&lt;br=\r\n&gt;&lt;/div&gt;&lt;div&gt;Cheers,&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;font color=3D&quot;#888888&quot;&gt;&lt;div&gt;Dong=\r\n=A0&lt;/div&gt;&lt;/font&gt;&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;div class=3D&quot;h5&quot;&gt;&lt;div&gt;&lt;br&gt;&lt;div class=3D&quot;gm=\r\nail_quote&quot;&gt;On Thu, Aug 5, 2010 at 12:59 PM, Juergen Brendel &lt;span dir=3D&quot;lt=\r\nr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:juergen.brendel@...&quot; target=3D&quot;_blank&quot;&gt;ju=\r\nergen.brendel@...&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;\n\n&lt;blockquote class=3D&quot;=\r\ngmail_quote&quot; style=3D&quot;margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-=\r\nleft:1ex&quot;&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;div style=3D&quot;background-color:#fff&quot;&gt;\n&lt;span&gt;=A0&lt;/sp=\r\nan&gt;\n\n\n&lt;div&gt;\n  &lt;div&gt;\n\n\n    &lt;div&gt;\n      \n      \n      &lt;p&gt;&lt;br&gt;\nHello!&lt;br&gt;\n&lt;br&gt;=\r\n\nLet&#39;s say I have a queue resource: /foo&lt;br&gt;\n&lt;br&gt;\nI can POST new entrie=\r\ns into the queue. I can even refer to individual&lt;br&gt;\nentries within the que=\r\nue: /foo/&lt;id&gt;&lt;br&gt;\n&lt;br&gt;\nBut how do I pop the next entry? How do I cons=\r\ntruct a single request&lt;br&gt;\nthat gets me the next/first entry but also remov=\r\nes the entry at the same&lt;br&gt;\ntime?&lt;br&gt;\n&lt;br&gt;\nMaybe I can implement a special=\r\n resource /foo/next, which always refers&lt;br&gt;\nto the next entry in the queue=\r\n. But clearly, I can&#39;t use GET to pop the&lt;br&gt;\nentry, since that would n=\r\not be idempotent.&lt;br&gt;\n&lt;br&gt;\nThe queue has multiple consumers, so the &#39;po=\r\np&#39; operation should be&lt;br&gt;\natomic. This seems to rule out the possibili=\r\nty of doing a GET to&lt;br&gt;\nretrieve the latest element, followed by a DELETE =\r\nto remove it. Someone&lt;br&gt;\nelse could have gotten the &#39;latest&#39; eleme=\r\nnt in the meantime, thus&lt;br&gt;\ncausing the same element to be consumed twice.=\r\n&lt;br&gt;\n&lt;br&gt;\nMaybe I can cause a &#39;move&#39;, where a single request causes=\r\n the next&lt;br&gt;\nelement to be renamed to a unique ID, which is then returned =\r\nto the&lt;br&gt;\nclient, who then is the only one who has a handle on that object=\r\n. The&lt;br&gt;\nclient can then work with the resource. But the question now is:&lt;=\r\nbr&gt;\n&lt;br&gt;\na) What happens when the client fails before it can delete the res=\r\nource?&lt;br&gt;\nb) What is the best way to &#39;move&#39; an item in that way?&lt;b=\r\nr&gt;\n&lt;br&gt;\nJuergen&lt;br&gt;\n&lt;br&gt;\n-- &lt;br&gt;\nJuergen Brendel&lt;br&gt;\n&lt;a href=3D&quot;http://rest=\r\nx.mulesoft.org&quot; target=3D&quot;_blank&quot;&gt;http://restx.mulesoft.org&lt;/a&gt; &lt;br&gt;\n&lt;br&gt;\n&lt;=\r\n/p&gt;\n\n    &lt;/div&gt;\n     \n\n    \n    &lt;div style=3D&quot;color:#fff;min-height:0&quot;&gt;&lt;/di=\r\nv&gt;\n\n\n&lt;/div&gt;\n\n\n\n  \n\n\n\n\n\n\n&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;\n&lt;/div&gt;&lt;/div&gt;&lt;/blockqu=\r\note&gt;&lt;/div&gt;&lt;br&gt;\n\r\n--001485e7e84827159e048d7a1b53--\r\n\n"}}
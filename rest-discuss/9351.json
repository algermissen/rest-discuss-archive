{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"0chcGvcbUdOIRKHICi4Q6aAGTuII0UoKVco_nMNAD-Jdo-J9wOSOmOqjlKyvaBC_qr3nFQgyPIdbilZpvLdCZOapXGx9C2O05EM7RvDMdQ","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: Fun with DELETE","postDate":"1183755566","msgId":9351,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PFc1NTU1MzE3ODgwMTc5MDQxMTgzNzU1NTY2QG1haWwubWFpbHNuYXJlLm5ldD4="},"prevInTopic":9347,"nextInTopic":9352,"prevInTime":9350,"nextInTime":9352,"topicId":8604,"numMessagesInTopic":107,"msgSnippet":"... A resource can map to the empty set, which allows references to be made to a concept before any realization of that concept exists... Resources never","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 6081 invoked from network); 6 Jul 2007 21:00:33 -0000\r\nReceived: from unknown (66.218.66.72)\n  by m55.grp.scd.yahoo.com with QMQP; 6 Jul 2007 21:00:33 -0000\r\nReceived: from unknown (HELO mail.mailsnare.net) (209.236.228.78)\n  by mta14.grp.scd.yahoo.com with SMTP; 6 Jul 2007 21:00:32 -0000\r\nX-Virus-Scanned: by ClamAV at mailsnare.net\r\nX-Message-ID: 749f92e98ac7daa1b40c7093adeba4681e7bd0d5869d272e49d9ebde58f8da29\r\nReceived: from mail.mailsnare.net (unknown [209.236.228.74])\n\tby mail.mailsnare.net (Postfix) with ESMTP id DD4CC78EDE\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Fri,  6 Jul 2007 20:59:26 +0000 (UTC)\r\nTo: rest-discuss@yahoogroups.com\r\nImportance: Normal\r\nSensitivity: Normal\r\nMessage-ID: &lt;W5555317880179041183755566@...&gt;\r\nX-Mailer: Mintersoft EdgeDesk, Build 4.03.0105\r\nDate: Fri, 06 Jul 2007 20:59:26 +0000\r\nOrganization: Bison Systems Corporation\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;utf-8&quot;\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:0:0:0\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nReply-To: eric@...\r\nSubject: Re: Fun with DELETE\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\n&gt;\n&gt;See, that&#39;s the part that seems weird to me: how can you delete \n&gt;something that doesn&#39;t exist? Maybe it would help if you explained (or \n&gt;refreshed my memory) what the distinction is.\n&gt;\n\n&quot;A resource can map to the empty set, which allows references to be made \nto a concept before any realization of that concept exists...&quot;\n\nResources never exist, they&#39;re a conceptual mapping.  Even undefined \nresources have representations -- a 404 error is a representation of \nthe state of the identified resource as being undefined.  IOW, I am \ndisavowing my previous statement that a 404 and a 410 represent the \nsame resource state.  They do not.  An undefined resource still has \nstate when it&#39;s dereferenced, otherwise no 404 representation could \nbe returned for bogus requests.\n\n&quot;Depending on the message control data, a given representation may \nindicate the current state of the requested resource, the desired state \nfor the requested resource, or the value of some other resource, such \nas a representation of the input data within a client&#39;s query form, or a \nrepresentation of some error condition for a response.&quot; (REST)\n\nSo a 404 response to a GET request indicates that the state of the \nidentified resource is &quot;not known to exist&quot;, while a 410 response \nindicates the state of the resource is &quot;known to have existed&quot;.  I am \nusing an HTTP DELETE request to change the state of the resource from \n&quot;exists&quot; to &quot;known to have existed&quot; by manipulating a representation \nof the defined resource.\n\nTo change the state of the resource from &quot;known to have existed&quot; to \n&quot;not known to exist&quot; I send a DELETE requesting the server remove all \nrecollection of the resource having once existed -- the semantics in \nboth cases are &quot;remove&quot;.  The status code of the response to \nsubsequent GET requests, i.e. the representation of resource state, \nhas changed through my manipulation of a representation of the now-\nundefined resource through a generic REST interface.\n\n&gt;\n&gt;I&#39;m also not sure the codes are right, the more I look at them.\n&gt;Doesn&#39;t 410 imply that the resource once existed, where 404 is more\n&gt;vague? If so, then wouldn&#39;t 410 mean &quot;It was definitely here, but all\n&gt;I find now is a zero-byte file&quot; where 404 would mean &quot;I can&#39;t find any\n&gt;trace now, or at least none I&#39;m willing to admit to the likes of you&quot;?\n&gt;\n\nThe 410 response after one DELETE on my server indicates that the \nresource &quot;used to exist&quot;, not that the file is zero bytes -- that \ninformation is opaque to the client.  The zero-byte thing is just my \nimplementation, it certainly doesn&#39;t redefine the 410 response as \nmeaning anything about the status of the source file.  The 410 \nrepresentation is merely a status code informing the client that the \nresource &quot;used to exist&quot;.\n\nThe server could use some other mechanism to mark the mapping of URI \nto source file as &quot;used to exist&quot;, there is no requirement for any \nfile operation to occur on the source file.  In fact, there is no \nrequirement that the state of the resource be changed at all in \nresponse to DELETE.\n\nBut the server must retain some knowledge of the once-existent \nresource in order for a 410 response to even be possible, right?  \nAny way I look at it, a 410 requires a semantic mapping from the \nresource identifier to some sort of source, and that mapping is fair \ngame for a DELETE request.\n\nThe second DELETE is wholly optional for the system administrator to \noverride the default 410 response with a 404 response, by requesting \nthat the conceptual mapping from request URL to 410-response-code-\ninducing source (whatever that source may be, in my case, a zero-\nbyte file) be removed.  The state of the resource changes from \n&quot;known to have existed&quot; (which requires some sort of conceptual \nmapping) to &quot;not known to exist&quot; which requires no conceptual \nmapping.\n\n&quot;It is not necessary to mark all permanently unavailable resources as \n&#39;gone&#39; or to keep the mark for any length of time -- that is left to \nthe discretion of the server owner.&quot; (RFC 2616)\n\nThis implies that a 410 response is &quot;marked&quot; and I assert that such a \nmark is a perfectly valid target for DELETE.\n\n&gt;\n&gt;And re your trashcan parallel: that&#39;s perhaps not a good analogy,\n&gt;since trashcan files are intact in every way except for being flagged\n&gt;as deleteable.\n&gt;\n\nWhich makes my analogy fail why, exactly?  DELETE imposes no \nrequirement on server behavior.  As the server implementer I am free \nto move the source file, delete the source file, &quot;mark&quot; the source \nfile or implement some sort of lookup table bearing no relation to \nthe source file, and I am free to decide whether to use 404, 410 or \nboth over time to indicate a successful DELETE.\n\nExcept for those of us who do not use trashcan, we are all \nintuitively using two-stage deletes which toggle the state of the \ndelete target from &quot;exists&quot; to &quot;used to exist&quot; followed by \n&quot;nonexistent&quot;.  As you point out, there are a variety of ways to \nimplement this on the filesystem level, just as there are a variety \nof ways to implement this on the HTTP level.\n\n&gt;\n&gt;I don&#39;t know if that&#39;s applicable to your situation, but that&#39;s how\n&gt;I&#39;d do a two-step delete (the PUT and DELETE I mentioned initially).\n&gt;\n\nSorry, but if your PUT results in a subsequent GET returning a 404 \nor a 410 response then you have still broken the uniform interface \nconstraint of REST by defining PUT as &quot;move&quot; or &quot;remove&quot; instead of \n&quot;replace&quot;.\n\n-Eric\n\n\n\n\n"}}
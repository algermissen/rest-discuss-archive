{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":93099516,"authorName":"Josh Sled","from":"Josh Sled &lt;jsled@...&gt;","profile":"joshsled","replyTo":"SENDER","senderId":"pNJp6I4h__ikArKIk0clXje39W2o_M8crZeOO-pvhrrojTinfMG3X3Sr1W45NIF9v5xQeCntuzU2B_8bL7bLIaOCCIu9kHp3Yg","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] REST for non-browser-based apps.","postDate":"1098884728","msgId":4637,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDEwOTg4ODQ3MjguMjYzOS42My5jYW1lbEBwaG9lbml4Pg==","inReplyToHeader":"PDAyMDAwMWM0YmMxOCRkZjFiNDVjMCQwMjAwYThjMEBNYXJrRGVza3RvcD4=","referencesHeader":"PDAyMDAwMWM0YmMxOCRkZjFiNDVjMCQwMjAwYThjMEBNYXJrRGVza3RvcD4="},"prevInTopic":4636,"nextInTopic":4639,"prevInTime":4636,"nextInTime":4638,"topicId":4634,"numMessagesInTopic":6,"msgSnippet":"... It s really important to note that REST is an architectural style, not a technology -- so your list is literally apples to oranges. For instance, you could","rawEmail":"Return-Path: &lt;jsled@...&gt;\r\nX-Sender: jsled@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 13664 invoked from network); 27 Oct 2004 13:44:45 -0000\r\nReceived: from unknown (66.218.66.217)\n  by m7.grp.scd.yahoo.com with QMQP; 27 Oct 2004 13:44:45 -0000\r\nReceived: from unknown (HELO phoenix.asynchronous.org) (216.114.142.253)\n  by mta2.grp.scd.yahoo.com with SMTP; 27 Oct 2004 13:44:44 -0000\r\nReceived: (qmail 11848 invoked by uid 1000); 27 Oct 2004 09:45:28 -0400\r\nTo: &quot;R. Mark Volkmann&quot; &lt;mark@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nIn-Reply-To: &lt;020001c4bc18$df1b45c0$0200a8c0@MarkDesktop&gt;\r\nReferences: &lt;020001c4bc18$df1b45c0$0200a8c0@MarkDesktop&gt;\r\nContent-Type: text/plain\r\nContent-Transfer-Encoding: 7bit\r\nOrganization: Asynchronous.org\r\nMessage-Id: &lt;1098884728.2639.63.camel@phoenix&gt;\r\nMime-Version: 1.0\r\nX-Mailer: Ximian Evolution 1.4.5 \r\nDate: Wed, 27 Oct 2004 09:45:28 -0400\r\nX-eGroups-Remote-IP: 216.114.142.253\r\nFrom: Josh Sled &lt;jsled@...&gt;\r\nReply-To: jsled@...\r\nSubject: Re: [rest-discuss] REST for non-browser-based apps.\r\nX-Yahoo-Group-Post: member; u=93099516\r\nX-Yahoo-Profile: joshsled\r\n\r\nOn Wed, 2004-10-27 at 07:34, R. Mark Volkmann wrote:\n\n&gt; What&#39;s the concensus on using REST for implementing non-browser-based, \n&gt; distributed applications? Do you think REST is a reasonable alternative to \n&gt; CORBA, EJB, RMI and SOAP for some/many distributed applications? Of course \n&gt; there are considerations like performance, security and transaction handling \n&gt; to be dealt with. \n\nIt&#39;s really important to note that REST is an architectural style, not a\ntechnology -- so your list is literally apples to oranges.\n\nFor instance, you could do document/literal SOAP with endpoint names\nmapping to domain resources and operation names limited to an HTTP-like\nset [plus the other REST constraints] and still call it REST with a\nclear conscience. ;)\n\nAt the same time, &quot;REST&quot; is often part-and-parcel with HTTP+XML as\nimplementation...\n\n\n&gt; But on the plus side, I really like the simplicity of \n&gt; REST, being able to easily pass any XML and get any XML back ... defined by \n&gt; some type of schema. I&#39;m getting the impression though that most people see \n&gt; this as a fringe use of REST. True?\n\nI believe there are at least 2 levels of REST:\n\n* The historical WWW -- GET for [most] retreival, POST for everything \n  else [including lot of RPC].  This is dominated by HTML [forms], \n  web-browsers and user-intervention.\n\n* HTTP as spec&#39;ed -- 4[+] verbs, resources as such, well-defined \n  resource spaces, &c.  This is a nice ideal, but harder to find in the \n  wild.  This would also fall into the &quot;any uniform interface&quot;, and the \n  actual architectural constraints outlined in Roy&#39;s dissertation.\n\n\nIn addition, a bunch of people have been talking about offshoots such\nas:\n\n* &quot;2-wire&quot; RPC -- &quot;GET&quot; and &quot;SEND&quot;^W^W^W&quot;ProcessMessage&quot; \n  operations; this is nice because it captures one of the most \n  important things about the web: seperating the &quot;safe&quot; and &quot;unsafe&quot; \n  operations.\n\n* &quot;1-wire&quot; RPC -- Just the &quot;process message&quot; or &quot;send document&quot; \n  operation; I have a hard time groking how this one is useful.\n\n\nMy personal feelings about REST for machine/machine communication:\n\n* HTML and the majority of the web is really tailored to human \n  /intervention/ and /interpretation/.\n\n* Machine/machine interaction is alive and well on the web, but \n  hampered [say, by having to screen-scrape content out of HTML];\n  RSS is helping change this, but only uni-directionally...\n\n* Some &quot;simpler&quot; [read: machine-interpretable] format is going to be \n  critical for [semi-]autonomous-machine/machine interaction [maybe \n  RDF]. More important than the format are going to be a set of \n  agreed-to schemata for various things -- including &quot;operations&quot;.\n\n  * Agreeing to -- let alone defining -- semantics is hard.\n  * All &quot;stakeholders&quot; want to be &quot;represented&quot;, which impedes progress.\n  * The most successful efforts here are going to come bottom up, \n    similar to RSS.\n\n* Human-directed machine/machine interaction [i.e.: programming a\n  client application against an XML/HTTP REST server] is both enhanced \n  and hampered by applying REST to the design:\n\n  * Debuggability, hackability and prototypeability is excellent --  \n    really useful for spinning up a new system.  Being able to do \n    things like `GET /files`,\n    `POST /files &lt;file&gt;&lt;name&gt;foo&lt;/name&gt;&lt;/file&gt;` -- either from a       \n    browser or by hand -- is really useful all around.  Being able to \n    script said operations for testing purposes can be good.\n\n  * Developer understandability is helped because everything is a noun \n    and the XML is clear, but hurt because it&#39;s hard for most \n    programmers to reason about system interaction in terms of  \n    resources -- they&#39;re really used to dealing with OO method \n    invocations or RPC.\n\n  * There can be a fair amount of performance loss if you screw up the \n    design.  Say, for instance, you don&#39;t have a single GET that&#39;s \n    appropriate for the 50 resources the client requires.  Now you need \n    to do 50 singleton operations rather than 1 batch operation... :/\n\n\nPlus what Walden said -- get peer + management buyoff before going too\ndeep on a &quot;pure&quot; REST approach.\n\n...jsled\n\n-- \nhttp://asynchronous.org/ - `a=jsled; b=asynchronous.org; echo ${a}@${b}`\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":80219925,"authorName":"John Elliot","from":"John Elliot &lt;jj5@...&gt;","profile":"jj5v1","replyTo":"SENDER","senderId":"fokHeGFvKF2ZWh_cgfVfJRIonC645TJVVhsOsQv39vd17bDCPSzfdATIJ6xvulkucy-ZgSsjQgX2od3bPi9CBQ","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Re: Meaning of stateless","postDate":"1145335024","msgId":5988,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQ0NDQ2Q0YwLjkwMTAzMDhAamo1Lm5ldD4=","inReplyToHeader":"PDExNDUwOTU4OTMuNjk4OC4yNi5jYW1lbEBsb2NhbGhvc3QubG9jYWxkb21haW4+","referencesHeader":"PDQ0M0ZGMzFDLjgwMDAxMDlAdmVpY29uLmNvbT4JIDwzNDNlY2IzZTA2MDQxNDEyMzBnNDFjMTMyMWNuYjJhOTM2Y2NiZjUzZGM3ZEBtYWlsLmdtYWlsLmNvbT4gPDExNDUwOTU4OTMuNjk4OC4yNi5jYW1lbEBsb2NhbGhvc3QubG9jYWxkb21haW4+"},"prevInTopic":5977,"nextInTopic":5989,"prevInTime":5987,"nextInTime":5989,"topicId":5949,"numMessagesInTopic":44,"msgSnippet":"Stateless in terms of REST simply means that there is no sequencing of messages at the transfer protocol layer. That is, each transfer request stands alone","rawEmail":"Return-Path: &lt;jj5@...&gt;\r\nX-Sender: jj5@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 33874 invoked from network); 18 Apr 2006 04:39:58 -0000\r\nReceived: from unknown (66.218.66.172)\n  by m35.grp.scd.yahoo.com with QMQP; 18 Apr 2006 04:39:58 -0000\r\nReceived: from unknown (HELO mail4.tpgi.com.au) (203.12.160.61)\n  by mta4.grp.scd.yahoo.com with SMTP; 18 Apr 2006 04:39:57 -0000\r\nX-TPG-Antivirus: Passed\r\nReceived: from johnny5 (220-245-41-182.static.tpgi.com.au [220.245.41.182])\n\tby mail4.tpgi.com.au (envelope-from jj5@...) (8.13.6/8.13.6) with ESMTP id k3I4dscJ018914\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Tue, 18 Apr 2006 14:39:55 +1000\r\nMessage-ID: &lt;44446CF0.9010308@...&gt;\r\nDate: Tue, 18 Apr 2006 04:37:04 +0000\r\nUser-Agent: Debian Thunderbird 1.0.2 (X11/20051002)\r\nX-Accept-Language: en-us, en\r\nMIME-Version: 1.0\r\nTo: REST Discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nReferences: &lt;443FF31C.8000109@...&gt;\t &lt;343ecb3e0604141230g41c1321cnb2a936ccbf53dc7d@...&gt; &lt;1145095893.6988.26.camel@...&gt;\r\nIn-Reply-To: &lt;1145095893.6988.26.camel@...&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0:0\r\nFrom: John Elliot &lt;jj5@...&gt;\r\nSubject: Re: [rest-discuss] Re: Meaning of stateless\r\nX-Yahoo-Group-Post: member; u=80219925; y=QDUkNkCTdwLDo2dKwkZ3g8NV9ockgBZtbLb-96EAKcA\r\nX-Yahoo-Profile: jj5v1\r\n\r\n\n&#39;Stateless&#39; in terms of REST simply means that there is no &#39;sequencing&#39; \nof messages at the transfer protocol layer. That is, each transfer \nrequest stands alone and is itself capable of delineating the entire \ncontext in which a server will conduct processing of the request. It \nmeans that a server which supports the transfer protocol doesn&#39;t need to \nkeep track of the sequence of messages at that layer.\n\nBeyond that, of course your application state is likely to be varying \nover time. Your application sits &#39;above&#39; the transfer layer, and your \napplication can (and almost certainly will) vary state. Often \napplication state will vary over time, and the only way to &#39;stop time&#39; \nis to hold a pessimistic lock. You *never* want to hold a pessimistic \nlock between HTTP requests, so it&#39;s impossible for you to &#39;stop time&#39; \nfor longer than a single request. You want to avoid &#39;stopping time&#39; when \nyou can, but in order to ensure consistency of data in a single request \nyou may need to hold a lock for a short period during the processing of \na single request. That&#39;s OK, because although resource contention might \naffect your potential for scalability, it does not create a dependency \non the client to remain robust.\n\nThere is a problem with HTTP, and with REST, and that is that the URL \nonly delineates the &#39;object&#39; of the request. The &#39;subject&#39; of the \nrequest is also a noun, but neither HTTP nor REST sufficiently \nacknowledges this.\n\nThe only uniform and universal support for the &#39;subject&#39; of a request \nsurfaced by HTTP is the HTTP-Auth header. Unfortunately, this does not \nallow your application to support sessions. &#39;Sessions&#39; are something \nthat are &#39;bigger&#39; than the transfer layer. A &#39;session&#39; is just a number \nassociated with a set of client initiated state transitions. The only \n&#39;number&#39; which you can use with HTTP-Auth is &#39;username&#39;. That&#39;s no good, \nbecause:\n\n  a) During a &#39;session&#39; (i.e. a set of client initiated state \ntransitions) a discrete client may transition from user &#39;anonymous&#39;, to \n&#39;joe&#39;, to &#39;administrator&#39;, to &#39;anonymous&#39;. HTTP and REST can not \nnatively support the correlation of these varying contexts with a \n&#39;session&#39; context.\n\n  b) A user, &#39;joe&#39;, who wishes to interact with two &#39;instances&#39; of your \napplication can not do so with REST or HTTP (without cookies, or custom \nheaders, each of which are evil because they do not have universal \nsemantics). This is a problem for many types of distributed applications \nwhere *application state* (i.e. not &#39;transfer protocol state&#39;) is \ndependant on &#39;session&#39;. Having the same user working from two different \nclients under the same account is not sufficient.\n\n  c) A user who arrives at a web-site will initially be &#39;anonymous&#39;, yet \ntheir very first request flags the beginning of a session. The very \nfirst thing they do might be to &#39;add item to shopping basket&#39;, and the \nvery next thing they do &#39;login&#39;. &#39;Shopping basket&#39; is an application \nlayer function, and it is perfectly reasonable for a server to maintain \nthis state and associate it with a &#39;session&#39;. Unfortunately, not all \n&#39;anonymous&#39; users can share the same shopping basket, and the transition \nfrom &#39;anonymous&#39; to &#39;joe&#39; must migrate the shopping basket. The shopping \nbasket isn&#39;t associated with the &#39;user&#39;, it&#39;s associated with the &#39;session&#39;.\n\nUsing HTTP-Auth you can say:\n\n  (1) Someone gets a representation of Joe&#39;s bank account.\n  (2) Joe gets a representation of Joe&#39;s bank account.\n  (3) Jim gets a representation of Joe&#39;s bank account.\n\nThe &#39;object&#39; of each of these requests is the noun &quot;Joe&#39;s bank account&quot;. \nThis can be described by a URI: http://www.example.org/account/joe\n\nThe &#39;subject&#39; of each of these requests varies. It is reasonable to \nexpect that (1) will 401. Clearly, if we don&#39;t know who you are, we \ncan&#39;t give you what you&#39;re asking for. (2) will respond with a \nrepresentation of the account perhaps including the words &quot;Your \nAccount&quot;. What happens in (3) depends on business rules, if Jim is the \naccount manager, then the request very well may be authorised, however \nthe representation generated will more likely include the words &quot;Jim&#39;s \nAccount&quot;.\n\nIf you know the &#39;object&#39; and the &#39;subject&#39; of a request, then along with \na single verb you have all of the information necessary to create the \ncontext in which to generate an appropriate response.\n\nHTTP and REST as they stand force application developers to include \nreferentially opaque context in every request because there is no other \nway to support sessions. If you don&#39;t need sessions, that&#39;s because all \nyour application does is serve relatively static and public documents.\n\nIt seems to me pretty clear that the &#39;object&#39; of the request isn&#39;t the \nonly noun that needs to be identified in the uniform request. I think \nRoy made a mistake and was not sufficiently clear about what &#39;stateless&#39; \nmeans in his dissertation, and I think it&#39;s important that there is some \nclear guidance in this area that comes out soon, before everyone starts \ndoing stupid things with HTTP headers and leaving us in an even worse \nsituation than we&#39;re in with cookies. The only &#39;session state&#39; that \nneeds to be maintained by the client is the &#39;session id&#39;, a processing \nserver can &#39;dereference&#39; this during processing to ensure that the \nsession is active, valid, what user it&#39;s for, etc.; in just the same why \nthat a server will &#39;dereference&#39; the request URI in order to correlate \nit with a &#39;resource&#39; the state of which can be returned as the \nrepresentation of the state for that request.\n\nHTTP needs a uniform interface for saying:\n\n  (4) Session 42 gets a representation of Joe&#39;s bank account.\n\nSince cookies are the best we&#39;ve got (and they&#39;ve already been baked) I \nthink it&#39;s important for someone to step up to the plate and admit that \nthis is necessary. It&#39;s the most &#39;uniform&#39; interface we have for this \npurpose at the moment, and it wouldn&#39;t take much to standardise on the \n&#39;name&#39; of the cookie that provided the session key and thus create some \ndegree of universal transparency.\n\nIf people start developing applications which rely on non-standard and \nnon-uniform HTTP headers then we&#39;re going to end up with one very broken \nand very complicated web.\n\n\n\n\n\n\n"}}
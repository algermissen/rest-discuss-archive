{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"nKUL4jafBcOqnROKnbGJMTcQRnwraAGr7LCWWZeFu-Xqkyxrn7PNmQN0mDlMh19aOI3bR_7DT9mNZnfQjFDXj1QKLv6GlEqY_CYk37gBaQ","spamInfo":{"isSpam":false,"reason":"12"},"subject":"REST isn&#39;t hard to learn, it&#39;s just taught wrong.","postDate":"1261369593","msgId":14255,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMDkxMjIwMjEyNjMzLjcxNWNhOTQyLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4="},"prevInTopic":0,"nextInTopic":14256,"prevInTime":14254,"nextInTime":14256,"topicId":14255,"numMessagesInTopic":44,"msgSnippet":"The problem that s been preoccupying my thoughts during the time I spend experimenting with REST, is how to teach it.  I don t think anyone disputes the fact","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 15710 invoked from network); 21 Dec 2009 04:26:38 -0000\r\nX-Received: from unknown (98.137.34.44)\n  by m13.grp.re1.yahoo.com with QMQP; 21 Dec 2009 04:26:38 -0000\r\nX-Received: from unknown (HELO mxout-08.mxes.net) (216.86.168.183)\n  by mta1.grp.sp2.yahoo.com with SMTP; 21 Dec 2009 04:26:38 -0000\r\nX-Received: from bigbison (unknown [65.117.211.162])\n\t(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))\n\t(No client certificate requested)\n\tby smtp.mxes.net (Postfix) with ESMTPSA id AC892509B4\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Sun, 20 Dec 2009 23:26:37 -0500 (EST)\r\nDate: Sun, 20 Dec 2009 21:26:33 -0700\r\nTo: rest-discuss@yahoogroups.com\r\nMessage-Id: &lt;20091220212633.715ca942.eric@...&gt;\r\nOrganization: Bison Systems Corporation\r\nX-Mailer: Sylpheed 2.6.0 (GTK+ 2.10.14; i686-pc-mingw32)\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=US-ASCII\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nSubject: REST isn&#39;t hard to learn, it&#39;s just taught wrong.\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\nThe problem that&#39;s been preoccupying my thoughts during the time I\nspend experimenting with REST, is how to teach it.  I don&#39;t think\nanyone disputes the fact that REST is hard to learn.  But why is that?\nI&#39;ve convinced myself it&#39;s not because the students are morons, but\nthat we, collectively as a community, have failed to teach it\nproperly.  The best evidence of that, is the recent thread asking for\nexamples of good REST systems: It&#39;s infinitely easier to find REST\nimplementations that aren&#39;t, than it is to find good examples (I&#39;ve\nseen REST implemented effectively on Intranets where the client is a\nknown quantity) that we can point to.\n\nWe don&#39;t teach it properly, because we didn&#39;t learn it properly\nourselves.  Besides Roy, who here at any level of REST ability has a\nbackground in software architecture?  Personally, I think it took me so\nmany years to become comfortable with REST because it was my first\nexperience with software development guided by a defined architectural\nstyle.  I basically had to teach myself software architecture, but not\nuntil well after I started fancying myself a REST developer.\n\nWhat I&#39;m saying, is that REST must be taught in terms of applied\narchitecture, instead of by example, before there will ever be enough\ngood examples to point to.  You can&#39;t learn XSLT by reading O&#39;Reilly&#39;s\n&quot;XSLT Cookbook&quot; of examples, yet we try teaching REST by hauling out\nthe good ol&#39; shopping cart every time.  This has obviously failed.\n\nI don&#39;t think it&#39;s necessary for a REST student to understand anything\nabout software architecture (except maybe a few terms), only to follow\nan approach grounded in software architecture.  The wonderful new\ntextbook, &quot;Software Architecture:  Foundations, Theory, and Practice&quot; is\nsomething that should be read by the community, but not for the purpose\nof using that textbook to teach REST.  The textbook uses REST to\nillustrate the principles of software architecture, it doesn&#39;t teach\nREST.  But it can be used to inform us on how to better teach REST.\n\nThe textbook has chapters on Modeling, Visualization, Analysis,\nImplementation, and Deployment and Mobility.  This is the disciplined\napproach that I keep harping on about, of late.\n\nThe Modeling chapter discusses modeling both architectures and\narchitectural styles.  It says nothing about modeling specific to\nREST.  Roy&#39;s thesis uses modeling to illustrate the REST architectural\nstyle.  So the first challenge in teaching REST is to teach how to\nmodel the components, connectors, resources and interfaces for a\nproposed system.  REST constrains the interaction between connectors,\nand these constraints must be part of the model.\n\nThe Visualization chapter explains the separation of modeling and\nvisualization, but says nothing about visualization within the context\nof REST.  The second challenge in teaching REST using a software-\narchitecture-centric approach, is to use the model as a basis for\nvisualizing a proposed system in terms of the Process, Connector and\nData views for REST as described in Roy&#39;s thesis.\n\nThe Analysis chapter also has nothing REST-specific.  It&#39;s fairly self-\nexplanatory, though.  Modeling, Visualization and Analysis are not a\nserial approach, but an iterative process.  This is the stage where, if\nthe Model calls for the Atom media type, despite the lack of URIs at\nthis point, the documents may be written and validated to flesh out the\ndata model for analysis.  How many hardware resources does the model\nrequire?  Does the model need to be adjusted up/down?  The third\nchallenge in teaching REST is, does the model fit the system&#39;s goals?\n\nFinally, we get to Implementation, another chapter with nary a peep\nabout REST.  (I say finally, because the Deployment chapter covers\ntopics that, frankly, anyone pursuing REST probably has hands-on\nexperience with, so I don&#39;t see it as a teaching challenge.)  Yes, this\nis where a URI allocation scheme is finally devised for the modeled,\nvisualized and analyzed resources, and methods implemented so we can\npass data over the wire.  It is iterative with the previous methods --\nselecting off-the-shelf parts may require architectural adjustment due\nto different design assumptions being made in a standard library.\n\nThe textbook defines Implementation as the problem of maintaining a\nmapping between the developed system and its architectural model, and\nfocuses on frameworks as the solution.  It also says, &quot;To imbue\n[desired properties] in the target system, the implementation _must_ be\nderived from its architecture.&quot;  This is the fourth, and most important,\nchallenge in teaching REST.  Is the reason so many systems claim to be\nRESTful, but aren&#39;t, because 99% of developers simply don&#39;t *know* how\nto derive an implementation from an architectural style, because they&#39;ve\nnever been taught?  I don&#39;t think they need to be taught, only given the\ntools to understand how a RESTful implementation is derived -- that\nthese tools are derived from the tenets of software architecture may\nremain hidden behind a generic interface (so to speak).\n\nMy suggestion is to dredge up and dust off ye olde shopping-cart\nexample.  Why do we insist on presenting it by defining it as what\nmethods to apply to what resources of interest to obtain what response\ncode and data, beginning by defining a URI allocation scheme, when we\nknow that URI allocation schemes have (almost) nothing to do with REST,\nand Roy has told us that we should be discussing our resources in terms\nof media types and link relations instead?  At some point, it should be\npresented in terms of Modeling, Visualizing, Analyzing, and\nImplementing in a REST-specific fashion.  I think this may address some\nof the criticism of REST lacking some sort of formal guidelines.\n\nIn brief:  Define resources in terms of standard media types and link\nrelations, saving URI allocation and method selection for the\nimplementation phase.\n\n-Eric\n\n"}}
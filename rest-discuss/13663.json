{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":343278744,"authorName":"Subbu Allamaraju","from":"Subbu Allamaraju &lt;subbu@...&gt;","profile":"sallamar","replyTo":"SENDER","senderId":"VhTLudHfzPrfcJD88D5R24AxAzJ0-ONrxLeqgh2IFK3VbMMne8cl0VuOMcp5S7XPCm8da4k3bFrN90ME_aCul2GzUlhFDp6oaA","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Re: Application state","postDate":"1254627553","msgId":13663,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDJBMzc2NzVGLTM0ODItNDMwNC05NTRFLUYxNUU2MjZGMEEyQ0BzdWJidS5vcmc+","inReplyToHeader":"PGhhOGNjZyttNGM2QGVHcm91cHMuY29tPg==","referencesHeader":"PGhhOGNjZyttNGM2QGVHcm91cHMuY29tPg=="},"prevInTopic":13661,"nextInTopic":13666,"prevInTime":13662,"nextInTime":13664,"topicId":13627,"numMessagesInTopic":37,"msgSnippet":"Thanks Ian. That answers my question. Just to add what you said, it is imperative for the server keep its concepts of state opaque from the client. Subbu","rawEmail":"Return-Path: &lt;subbu@...&gt;\r\nX-Sender: subbu@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 64808 invoked from network); 4 Oct 2009 03:39:24 -0000\r\nX-Received: from unknown (98.137.34.45)\n  by m4.grp.re1.yahoo.com with QMQP; 4 Oct 2009 03:39:24 -0000\r\nX-Received: from unknown (HELO mail-ew0-f216.google.com) (209.85.219.216)\n  by mta2.grp.sp2.yahoo.com with SMTP; 4 Oct 2009 03:39:24 -0000\r\nX-Received: by ewy12 with SMTP id 12so1951413ewy.24\n        for &lt;rest-discuss@yahoogroups.com&gt;; Sat, 03 Oct 2009 20:39:19 -0700 (PDT)\r\nX-Received: by 10.211.159.19 with SMTP id l19mr1577952ebo.43.1254627558922;\n        Sat, 03 Oct 2009 20:39:18 -0700 (PDT)\r\nReturn-Path: &lt;subbu@...&gt;\r\nX-Received: from ?192.168.1.4? (0xbcb09cb5.svgnqu1.dynamic.dsl.tele.dk [188.176.156.181])\n        by mx.google.com with ESMTPS id 10sm954281eyd.2.2009.10.03.20.39.15\n        (version=SSLv3 cipher=RC4-MD5);\n        Sat, 03 Oct 2009 20:39:17 -0700 (PDT)\r\nCc: rest-discuss@yahoogroups.com\r\nMessage-Id: &lt;2A37675F-3482-4304-954E-F15E626F0A2C@...&gt;\r\nTo: Ian &lt;iansrobinson@...&gt;\r\nIn-Reply-To: &lt;ha8ccg+m4c6@...&gt;\r\nContent-Type: text/plain; charset=US-ASCII; format=flowed; delsp=yes\r\nContent-Transfer-Encoding: 7bit\r\nMime-Version: 1.0 (Apple Message framework v936)\r\nDate: Sun, 4 Oct 2009 05:39:13 +0200\r\nReferences: &lt;ha8ccg+m4c6@...&gt;\r\nX-Mailer: Apple Mail (2.936)\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Subbu Allamaraju &lt;subbu@...&gt;\r\nSubject: Re: [rest-discuss] Re: Application state\r\nX-Yahoo-Group-Post: member; u=343278744; y=4h_xts05MVSUf0yJ-X-PlHOcpSfY_A98VrWnh0kDULG4WEk\r\nX-Yahoo-Profile: sallamar\r\n\r\nThanks Ian. That answers my question.\n\nJust to add what you said, it is imperative for the server keep its  \nconcepts of state opaque from the client.\n\nSubbu\n\nOn Oct 3, 2009, at 10:32 PM, Ian wrote:\n\n&gt; Hi Subbu\n&gt;\n&gt; Yes, I think most of this is opaque to clients. Perhaps I implied  \n&gt; otherwise when I suggested clients might &quot;infer&quot; application state  \n&gt; from received representations: I don&#39;t in fact think that&#39;s  \n&gt; necessary of desirable. It&#39;s simpler than that. Clients are  \n&gt; interested in achieving particular goals, and they evaluate received  \n&gt; representations of resource state in light of those goals; that is,  \n&gt; they choose to operate hypermedia controls - links or forms - based  \n&gt; on their understanding of how the control&#39;s semantic context (ie.  \n&gt; link relation value) relates to their current goal. In all this, the  \n&gt; client need not necessarily know it&#39;s participating in a particular  \n&gt; protocol, or be aware of the overall state of the distributed  \n&gt; application.\n&gt;\n&gt; Is that in line with what you meant by this being opaque to the  \n&gt; client?\n&gt;\n&gt; ian\n&gt;\n&gt; --- In rest-discuss@yahoogroups.com, Subbu Allamaraju &lt;subbu@...&gt;  \n&gt; wrote:\n&gt;&gt;\n&gt;&gt; Hi Ian,\n&gt;&gt;\n&gt;&gt; That is an excellent description of state from the server&#39;s point of\n&gt;&gt; view. However, isn&#39;t all this opaque for the client?\n&gt;&gt;\n&gt;&gt; Subbu\n&gt;&gt;\n&gt;&gt; On Oct 3, 2009, at 6:16 PM, Ian wrote:\n&gt;&gt;\n&gt;&gt;&gt; Hi Christian\n&gt;&gt;&gt;\n&gt;&gt;&gt; The state of an order - whether it has zero line items, or five, is\n&gt;&gt;&gt; resource state, not application state. The state of the order as\n&gt;&gt;&gt; held in the http session in your example is resource state, not\n&gt;&gt;&gt; application state.\n&gt;&gt;&gt;\n&gt;&gt;&gt; A simple - perhaps overly simple - ordering protocol might be\n&gt;&gt;&gt; something like: new order created -&gt; adding line items -&gt; order\n&gt;&gt;&gt; completed -&gt; payment received -&gt; order dispatched.\n&gt;&gt;&gt;\n&gt;&gt;&gt; In the observable interactions between client and server, this\n&gt;&gt;&gt; protocol is never visible &quot;as such&quot;: it can only be viewed through\n&gt;&gt;&gt; the lens of resource state.\n&gt;&gt;&gt;\n&gt;&gt;&gt; Over the course of a series of interactions, the &quot;application&quot; (the\n&gt;&gt;&gt; game being played out between the client and the server) will be in\n&gt;&gt;&gt; one or other of these states - as viewed from a &quot;God&#39;s eye&quot; point of\n&gt;&gt;&gt; view. Once the application state has progressed to &quot;order\n&gt;&gt;&gt; completed&quot;, for example, it&#39;s no longer possible to add manipulate\n&gt;&gt;&gt; resources so as to add new line items; it is, however, possible to\n&gt;&gt;&gt; manipulate resources such that the application state transitions to\n&gt;&gt;&gt; &quot;payment received&quot; (the client would do this by submitting a\n&gt;&gt;&gt; representation of a payment, perhaps).\n&gt;&gt;&gt;\n&gt;&gt;&gt; The client and the server cooperate to execute this protocol, but\n&gt;&gt;&gt; they do so by transferring representations of resource state, not\n&gt;&gt;&gt; representations of application state. Application state is never\n&gt;&gt;&gt; represented &quot;as such&quot;; rather, it&#39;s inferred by the client based on\n&gt;&gt;&gt; on current representations of resource state. If the application is\n&gt;&gt;&gt; in the &quot;order completed&quot; state, the representation of the order\n&gt;&gt;&gt; received by the client may very well include a link that has been\n&gt;&gt;&gt; annotated with the link relation value &quot;payment&quot;. This isn&#39;t a\n&gt;&gt;&gt; straightforward representation of application state, however: it&#39;s\n&gt;&gt;&gt; an &quot;invitation&quot; to the client to transfer a representation of a\n&gt;&gt;&gt; payment to this linked resource. As a side-effect of transferring\n&gt;&gt;&gt; this representation, the &quot;application&quot; may transition to &quot;payment\n&gt;&gt;&gt; received&quot;.\n&gt;&gt;&gt;\n&gt;&gt;&gt; What&#39;s important here is that the server is really only interested\n&gt;&gt;&gt; in maintaining resource state, which includes maintaining the\n&gt;&gt;&gt; integrity of the lifecycles of the resources under its control, and\n&gt;&gt;&gt; the invariants that hold between resources (if any). The server\n&gt;&gt;&gt; can&#39;t be sure the client will ever take that step of submitting a\n&gt;&gt;&gt; payment, so why bother holding onto application state? Application\n&gt;&gt;&gt; state is something that can be reconstructed &quot;after the fact&quot;, by a\n&gt;&gt;&gt; client, or omniscient observer, based on the disposition of the\n&gt;&gt;&gt; current set of resource representations.\n&gt;&gt;&gt;\n&gt;&gt;&gt; So the order representation is always a representation of resource\n&gt;&gt;&gt; state. Application state, that &quot;snapshot of the instance of\n&gt;&gt;&gt; execution of a protocol&quot;, can only be inferred or reconstructed from\n&gt;&gt;&gt; resource state.\n&gt;&gt;&gt;\n&gt;&gt;&gt; Hope this is of some help. Apologies if I&#39;ve confused more than\n&gt;&gt;&gt; clarified; double apologies if I&#39;m just talking plain nonsense.\n&gt;&gt;&gt;\n&gt;&gt;&gt; ian\n&gt;&gt;&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt; ------------------------------------\n&gt;\n&gt; Yahoo! Groups Links\n&gt;\n&gt;\n&gt;\n\n\n"}}
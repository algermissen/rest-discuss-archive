{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":69164307,"authorName":"mike amundsen","from":"mike amundsen &lt;mamund@...&gt;","profile":"mamund","replyTo":"SENDER","senderId":"3tlFqxa_gG2bo2m5V6ObCDU7lnAnKf9G0Zi_0NPNDb3boIaTW0vosGZxoLN4EVbPmEB5vYL285W5_LtTkFX98BGcxQ1ISJs","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Resources with read-only and read-write parts","postDate":"1246996131","msgId":13103,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGI1NDhkZjY1MDkwNzA3MTI0OHc1N2U4NWM4MXViZjJkNDYzYWU5NzM2MWVAbWFpbC5nbWFpbC5jb20+","inReplyToHeader":"PDRBNTNBMURELjcwNTA0MDNAc3VyZXR5LmNvbT4=","referencesHeader":"PGgyZ2U2aytvc3VuQGVHcm91cHMuY29tPgkgPDIxNjA2ZGNmMDkwNzAyMDgwMWg1MmFjZWEzMXQzZGIzNmRiOTFiOGFiOTFAbWFpbC5nbWFpbC5jb20+CSA8QUQwRDgzN0YtQzE5RS00NUZFLUE1RjgtRTU3QjRDRTI1QTcwQHN1YmJ1Lm9yZz4JIDwyMTYwNmRjZjA5MDcwNjEwMjhzMWExNWJiZGk2YzY0YjJmMTA0NTQ5NDA0QG1haWwuZ21haWwuY29tPgkgPDRCQjZCQjYyLUQzRTYtNDUzNC05ODgyLUUwQzI0NjlEMDc0NkBzdWJidS5vcmc+CSA8NEE1M0ExREQuNzA1MDQwM0BzdXJldHkuY29tPg=="},"prevInTopic":13102,"nextInTopic":0,"prevInTime":13102,"nextInTime":13104,"topicId":13073,"numMessagesInTopic":20,"msgSnippet":"I worked on one project where the OPTIONS call returned documentation for that URI. This document detailed the methods, accept-types (GET), content-types (POST","rawEmail":"Return-Path: &lt;mca@...&gt;\r\nX-Sender: mca@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 5338 invoked from network); 7 Jul 2009 19:48:53 -0000\r\nX-Received: from unknown (69.147.108.201)\n  by m2.grp.sp2.yahoo.com with QMQP; 7 Jul 2009 19:48:53 -0000\r\nX-Received: from unknown (HELO mail-fx0-f215.google.com) (209.85.220.215)\n  by mta2.grp.re1.yahoo.com with SMTP; 7 Jul 2009 19:48:53 -0000\r\nX-Received: by mail-fx0-f215.google.com with SMTP id 11so4937816fxm.15\n        for &lt;rest-discuss@yahoogroups.com&gt;; Tue, 07 Jul 2009 12:48:53 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.204.53.72 with SMTP id l8mr6145464bkg.171.1246996132897; Tue, \n\t07 Jul 2009 12:48:52 -0700 (PDT)\r\nIn-Reply-To: &lt;4A53A1DD.7050403@...&gt;\r\nReferences: &lt;h2ge6k+osun@...&gt;\n\t &lt;21606dcf0907020801h52acea31t3db36db91b8ab91@...&gt;\n\t &lt;AD0D837F-C19E-45FE-A5F8-E57B4CE25A70@...&gt;\n\t &lt;21606dcf0907061028s1a15bbdi6c64b2f104549404@...&gt;\n\t &lt;4BB6BB62-D3E6-4534-9882-E0C2469D0746@...&gt;\n\t &lt;4A53A1DD.7050403@...&gt;\r\nDate: Tue, 7 Jul 2009 15:48:51 -0400\r\nX-Google-Sender-Auth: 166eb84dc4d2b522\r\nMessage-ID: &lt;b548df650907071248w57e85c81ubf2d463ae97361e@...&gt;\r\nTo: rest-discuss@yahoogroups.com\r\nContent-Type: multipart/alternative; boundary=001636c5b2d789d89c046e22e93a\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: mike amundsen &lt;mamund@...&gt;\r\nSubject: Re: [rest-discuss] Resources with read-only and read-write parts\r\nX-Yahoo-Group-Post: member; u=69164307; y=p608--muiZa_DHtv-5LHJ13nA4O3rauWVL8lLvEImNZ0\r\nX-Yahoo-Profile: mamund\r\n\r\n\r\n--001636c5b2d789d89c046e22e93a\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: 7bit\r\n\r\nI worked on one project where the OPTIONS call returned documentation for\nthat URI. This document detailed the methods, accept-types (GET),\ncontent-types (POST and PUT), and any other details.It was a small system,\nbut the OPTIONS screens took a good deal of effort to keep up. I thought\nsome form of automation of responses to OPTIONS would work, but we never got\naround to doing it.\nInternally I have used some additional headers on the OPTIONS method to help\nkeep track of content-types:\nhttp://www.amundsen.com/blog/archives/716\n&lt;http://www.amundsen.com/blog/archives/716&gt;\nmca\nhttp://amundsen.com/blog/\n\n\n\nOn Tue, Jul 7, 2009 at 15:28, Jim Edwards-Hewitt &lt;jimeh@...&gt; wrote:\n\n&gt;\n&gt;\n&gt; I&#39;ll certainly admit to my thinking being influenced by past schema-driven\n&gt; projects.\n&gt;\n&gt; I suppose I&#39;ve also been thinking of GET/PUT formats being the same as a\n&gt; way of communicating the expected format to the client. (Though obviously\n&gt; that isn&#39;t the case when form-encoded input is accepted.) Is there any\n&gt; standard method or common convention for telling the client what media types\n&gt; and formats are accepted for a PUT request (other than forms)? The HTTP\n&gt; standard seems a bit thin on the subject of PUT media types, compared to\n&gt; GET.\n&gt;\n&gt;   -- Jim\n&gt;\n&gt;\n&gt; Subbu Allamaraju wrote:\n&gt;\n&gt; I agree with the inefficiency (it is an inconvenience, to be accurate)\n&gt; part. That is why, there is no need to require clients to supply the\n&gt; immutable parts. The &quot;supply everything&quot; requirement usually stems from\n&gt; XML-schema driven applications, which is unnecessary.\n&gt;\n&gt; Subbu\n&gt;\n&gt; On Jul 6, 2009, at 10:28 AM, Sam Johnston wrote:\n&gt;\n&gt; On Sun, Jul 5, 2009 at 1:03 AM, Subbu Allamaraju &lt;subbu@...&gt;&lt;subbu@...&gt;wrote:\n&gt;\n&gt; Representations in a request (e.g. PUT or POST) and representations in a\n&gt; response (e.g. GET or a PUT) need not be absolutely the same. HTTP servers\n&gt; are not databases that blindly store the data. Using PUT to update the\n&gt; mutable parts of a resource is perfectly okay. At least, I don&#39;t see\n&gt; anything that breaks HTTP.\n&gt;\n&gt;\n&gt; The way I read the RFC is &quot;*The PUT method requests that the enclosed\n&gt; entity\n&gt; be stored [as is] under the supplied Request-URI*&quot;, which is obvious for\n&gt; &quot;simple&quot; media types like images where anything else doesn&#39;t really make\n&gt; sense. While it does go on to talk about partial updates (mentioning the\n&gt; Content-Range header), PUTting a resource in its entirity knowing that\n&gt; immutable parts will be ignored and/or trigger errors seems neither\n&gt; efficient nor clean to me.\n&gt;\n&gt; Sam\n&gt;\n&gt; On Jul 2, 2009, at 8:01 AM, Sam Johnston wrote:\n&gt;\n&gt;\n&gt;\n&gt;\n&gt; Jim,\n&gt;\n&gt; Typically you would express the overall writeability of a resource via\n&gt; OPTIONS (e.g. if you can only GET it&#39;s read only), but if you&#39;ve got, say,\n&gt; a\n&gt; template driven website and you only want the body to be updated then\n&gt; that&#39;s\n&gt; something different.\n&gt;\n&gt; I would almost certainly NOT be using PUT for this, rather accepting POSTs\n&gt; of just the midifiable data (perhaps in HTML forms or some XML-based\n&gt; format). If you were to use XML then a GET (with the appropriate Accept:\n&gt; header) could return just the parts which are modifiable by the client.\n&gt; Optionally you could add information to the URL about whether the client\n&gt; wants just the writeable elements or the whole lot, or even markup the\n&gt; elements as writable (or not).\n&gt;\n&gt; Hope that helps,\n&gt;\n&gt; Sam\n&gt;\n&gt;\n&gt; On Wed, Jul 1, 2009 at 9:42 PM, Jim Edwards-Hewitt &lt;jimeh@...\n&gt;\n&gt; wrote:\n&gt;\n&gt;\n&gt;\n&gt; Hi, everyone,\n&gt;\n&gt; I&#39;m a newbie here (though not to REST in general), and the list archives\n&gt; have been a great help in clarifying my understanding of a lot of REST\n&gt; concepts and suggesting good design elements. I have one part of my design\n&gt; right now where I&#39;m unsure what a good RESTful approach would be.\n&gt;\n&gt; I have resources that support GET and PUT, but contain some parts that\n&gt; clients are not allowed to modify. (This doesn&#39;t seem like an uncommon\n&gt; case;\n&gt; I would think that navigation links, for example, would typically not be\n&gt; modifiable in a PUT.) So is it better to:\n&gt;\n&gt; 1. Require clients to submit all the read-only parts unmodified in a PUT,\n&gt; and respond with an error code if they are absent or altered?\n&gt; 2. Take advantage of the leniency allowed in a server&#39;s implementation of\n&gt; PUT to ignore the read-only elements (or their absence)?\n&gt; 3. Separate read-only elements into a sub-resource that only supports GET?\n&gt; (This may not be feasible for resources which must be created as a whole.)\n&gt;\n&gt; or something else?\n&gt;\n&gt; Second, there are some elements that are modifiable or not depending on\n&gt; the privileges held by the (authenticated) user. I would think this would\n&gt; be\n&gt; expressed by a difference in the representation returned to the client, but\n&gt;\n&gt; what should that difference be? (My representations are XML documents, if\n&gt; there isn&#39;t a more general solution.)\n&gt;\n&gt; And in a broader sense, I&#39;d like the client to know which elements of the\n&gt; resource the user can modify, for presentation purposes. Is there a\n&gt; generally accepted way to do this, perhaps with form templates or XForms?\n&gt;\n&gt; I&#39;d be interested in any comments or alternative approaches, if I&#39;m just\n&gt; looking at it from the wrong angle.\n&gt;\n&gt; Thanks,\n&gt;\n&gt; -- Jim\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt; \n&gt;\n\r\n--001636c5b2d789d89c046e22e93a\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nI worked on one project where the OPTIONS call returned documentation for t=\r\nhat URI. This document detailed the methods, accept-types (GET), content-ty=\r\npes (POST and PUT), and any other details.It was a small system, but the OP=\r\nTIONS screens took a good deal of effort to keep up. I thought some form of=\r\n automation of responses to OPTIONS would work, but we never got around to =\r\ndoing it.&lt;div&gt;\n&lt;br&gt;&lt;/div&gt;&lt;div&gt;Internally I have used some additional header=\r\ns on the OPTIONS method to help keep track of content-types:&lt;/div&gt;&lt;div&gt;&lt;a h=\r\nref=3D&quot;http://www.amundsen.com/blog/archives/716&quot;&gt;http://www.amundsen.com/b=\r\nlog/archives/716&lt;/a&gt;&lt;/div&gt;\n&lt;div&gt;&lt;a href=3D&quot;http://www.amundsen.com/blog/arc=\r\nhives/716&quot;&gt;&lt;/a&gt;&lt;br clear=3D&quot;all&quot;&gt;mca&lt;br&gt;&lt;a href=3D&quot;http://amundsen.com/blog=\r\n/&quot;&gt;http://amundsen.com/blog/&lt;/a&gt;&lt;br&gt;&lt;br&gt;\n&lt;br&gt;&lt;br&gt;&lt;div class=3D&quot;gmail_quote&quot;=\r\n&gt;On Tue, Jul 7, 2009 at 15:28, Jim Edwards-Hewitt &lt;span dir=3D&quot;ltr&quot;&gt;&lt;&lt;a =\r\nhref=3D&quot;mailto:jimeh@...&quot;&gt;jimeh@...&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;=\r\n&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;margin:0 0 0 .8ex;border-left:1p=\r\nx #ccc solid;padding-left:1ex;&quot;&gt;\n\n\n\n\n\n\n\n        \n\n\n\n  \n  \n\n&lt;div bgcolor=3D&quot;=\r\n#ffffff&quot; text=3D&quot;#000000&quot;&gt;\n\n\n\n\n&lt;br&gt;&lt;br&gt;\n\n\n\n\n\nI&#39;ll certainly admit to my=\r\n thinking being influenced by past\nschema-driven projects.&lt;br&gt;\n&lt;br&gt;\nI suppo=\r\nse I&#39;ve also been thinking of GET/PUT formats being the same as\na way o=\r\nf communicating the expected format to the client. (Though\nobviously that i=\r\nsn&#39;t the case when form-encoded input is accepted.) Is\nthere any standa=\r\nrd method or common convention for telling the client\nwhat media types and =\r\nformats are accepted for a PUT request (other than\nforms)? The HTTP standar=\r\nd seems a bit thin on the subject of PUT media\ntypes, compared to GET.&lt;br&gt;&lt;=\r\nfont color=3D&quot;#888888&quot;&gt;\n&lt;br&gt;\n=A0 -- Jim&lt;/font&gt;&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;div class=3D=\r\n&quot;h5&quot;&gt;&lt;br&gt;\n&lt;br&gt;\nSubbu Allamaraju wrote:\n&lt;blockquote type=3D&quot;cite&quot;&gt;I agree wi=\r\nth the inefficiency (it is an inconvenience, to\nbe accurate) part. That is =\r\nwhy, there is no need to require clients to\nsupply the immutable parts. The=\r\n &quot;supply everything&quot; requirement usually\nstems from XML-schema dr=\r\niven applications, which is unnecessary.\n  &lt;br&gt;\n  &lt;br&gt;\nSubbu\n  &lt;br&gt;\n  &lt;br&gt;\n=\r\nOn Jul 6, 2009, at 10:28 AM, Sam Johnston wrote:\n  &lt;br&gt;\n  &lt;br&gt;\n  &lt;blockquot=\r\ne type=3D&quot;cite&quot;&gt;On Sun, Jul 5, 2009 at 1:03 AM, Subbu\nAllamaraju &lt;a href=3D=\r\n&quot;mailto:subbu@...&quot; target=3D&quot;_blank&quot;&gt;&lt;subbu@...&gt;&lt;/a&gt; wrot=\r\ne:\n    &lt;br&gt;\n    &lt;br&gt;\n    &lt;blockquote type=3D&quot;cite&quot;&gt;Representations in a req=\r\nuest (e.g. PUT or\nPOST) and representations in a\n      &lt;br&gt;\nresponse (e.g. =\r\nGET or a PUT) need not be absolutely the same. HTTP\nservers\n      &lt;br&gt;\nare =\r\nnot databases that blindly store the data. Using PUT to update the\n      &lt;b=\r\nr&gt;\nmutable parts of a resource is perfectly okay. At least, I don&#39;t see=\r\n\n      &lt;br&gt;\nanything that breaks HTTP.\n      &lt;br&gt;\n      &lt;br&gt;\n    &lt;/blockquo=\r\nte&gt;\n    &lt;br&gt;\nThe way I read the RFC is &quot;*The PUT method requests that =\r\nthe enclosed\nentity\n    &lt;br&gt;\nbe stored [as is] under the supplied Request-U=\r\nRI*&quot;, which is obvious\nfor\n    &lt;br&gt;\n&quot;simple&quot; media types lik=\r\ne images where anything else doesn&#39;t really\nmake\n    &lt;br&gt;\nsense. While =\r\nit does go on to talk about partial updates (mentioning\nthe\n    &lt;br&gt;\nConten=\r\nt-Range header), PUTting a resource in its entirity knowing that\n    &lt;br&gt;\ni=\r\nmmutable parts will be ignored and/or trigger errors seems neither\n    &lt;br&gt;=\r\n\nefficient nor clean to me.\n    &lt;br&gt;\n    &lt;br&gt;\nSam\n    &lt;br&gt;\n    &lt;br&gt;\nOn Jul =\r\n2, 2009, at 8:01 AM, Sam Johnston wrote:\n    &lt;br&gt;\n    &lt;blockquote type=3D&quot;c=\r\nite&quot;&gt;&lt;br&gt;\n      &lt;br&gt;\n      &lt;blockquote type=3D&quot;cite&quot;&gt;&lt;br&gt;\nJim,\n        &lt;br&gt;=\r\n\n        &lt;br&gt;\nTypically you would express the overall writeability of a res=\r\nource via\n        &lt;br&gt;\nOPTIONS (e.g. if you can only GET it&#39;s read only=\r\n), but if you&#39;ve got,\nsay, a\n        &lt;br&gt;\ntemplate driven website and y=\r\nou only want the body to be updated then\nthat&#39;s\n        &lt;br&gt;\nsomething =\r\ndifferent.\n        &lt;br&gt;\n        &lt;br&gt;\nI would almost certainly NOT be using =\r\nPUT for this, rather accepting\nPOSTs\n        &lt;br&gt;\nof just the midifiable da=\r\nta (perhaps in HTML forms or some XML-based\n        &lt;br&gt;\nformat). If you we=\r\nre to use XML then a GET (with the appropriate\nAccept:\n        &lt;br&gt;\nheader)=\r\n could return just the parts which are modifiable by the client.\n        &lt;b=\r\nr&gt;\nOptionally you could add information to the URL about whether the\nclient=\r\n\n        &lt;br&gt;\nwants just the writeable elements or the whole lot, or even m=\r\narkup the\n        &lt;br&gt;\nelements as writable (or not).\n        &lt;br&gt;\n        =\r\n&lt;br&gt;\nHope that helps,\n        &lt;br&gt;\n        &lt;br&gt;\nSam\n        &lt;br&gt;\n        &lt;b=\r\nr&gt;\n        &lt;br&gt;\nOn Wed, Jul 1, 2009 at 9:42 PM, Jim Edwards-Hewitt &lt;&lt;a h=\r\nref=3D&quot;mailto:jimeh@...&quot; target=3D&quot;_blank&quot;&gt;jimeh@...&lt;/a&gt;\n    =\r\n    &lt;br&gt;\n        &lt;blockquote type=3D&quot;cite&quot;&gt;wrote:\n          &lt;br&gt;\n        &lt;/=\r\nblockquote&gt;\n        &lt;br&gt;\n        &lt;br&gt;\nHi, everyone,\n        &lt;br&gt;\n        &lt;b=\r\nr&gt;\nI&#39;m a newbie here (though not to REST in general), and the list\narch=\r\nives\n        &lt;br&gt;\nhave been a great help in clarifying my understanding of =\r\na lot of REST\n        &lt;br&gt;\nconcepts and suggesting good design elements. I =\r\nhave one part of my\ndesign\n        &lt;br&gt;\nright now where I&#39;m unsure what=\r\n a good RESTful approach would be.\n        &lt;br&gt;\n        &lt;br&gt;\nI have resourc=\r\nes that support GET and PUT, but contain some parts that\n        &lt;br&gt;\nclien=\r\nts are not allowed to modify. (This doesn&#39;t seem like an uncommon\ncase;=\r\n\n        &lt;br&gt;\nI would think that navigation links, for example, would typic=\r\nally not\nbe\n        &lt;br&gt;\nmodifiable in a PUT.) So is it better to:\n        =\r\n&lt;br&gt;\n        &lt;br&gt;\n1. Require clients to submit all the read-only parts unmo=\r\ndified in a\nPUT,\n        &lt;br&gt;\nand respond with an error code if they are ab=\r\nsent or altered?\n        &lt;br&gt;\n2. Take advantage of the leniency allowed in =\r\na server&#39;s implementation\nof\n        &lt;br&gt;\nPUT to ignore the read-only e=\r\nlements (or their absence)?\n        &lt;br&gt;\n3. Separate read-only elements int=\r\no a sub-resource that only supports\nGET?\n        &lt;br&gt;\n(This may not be feas=\r\nible for resources which must be created as a\nwhole.)\n        &lt;br&gt;\n        =\r\n&lt;br&gt;\nor something else?\n        &lt;br&gt;\n        &lt;br&gt;\nSecond, there are some el=\r\nements that are modifiable or not depending on\n        &lt;br&gt;\nthe privileges =\r\nheld by the (authenticated) user. I would think this\nwould be\n        &lt;br&gt;\n=\r\nexpressed by a difference in the representation returned to the client,\nbut=\r\n\n        &lt;br&gt;\nwhat should that difference be? (My representations are XML d=\r\nocuments,\nif\n        &lt;br&gt;\nthere isn&#39;t a more general solution.)\n       =\r\n &lt;br&gt;\n        &lt;br&gt;\nAnd in a broader sense, I&#39;d like the client to know =\r\nwhich elements of\nthe\n        &lt;br&gt;\nresource the user can modify, for presen=\r\ntation purposes. Is there a\n        &lt;br&gt;\ngenerally accepted way to do this,=\r\n perhaps with form templates or\nXForms?\n        &lt;br&gt;\n        &lt;br&gt;\nI&#39;d b=\r\ne interested in any comments or alternative approaches, if I&#39;m\njust\n   =\r\n     &lt;br&gt;\nlooking at it from the wrong angle.\n        &lt;br&gt;\n        &lt;br&gt;\nTha=\r\nnks,\n        &lt;br&gt;\n        &lt;br&gt;\n-- Jim\n        &lt;br&gt;\n        &lt;br&gt;\n        &lt;br=\r\n&gt;\n        &lt;br&gt;\n        &lt;br&gt;\n\n        &lt;br&gt;\n        &lt;br&gt;\n      &lt;/blockquote&gt;\n=\r\n      &lt;br&gt;\n      &lt;br&gt;\n    &lt;/blockquote&gt;\n  &lt;/blockquote&gt;\n  &lt;br&gt;\n  &lt;br&gt;\n&lt;/blo=\r\nckquote&gt;\n\n\n\n\n\n\n&lt;br&gt;\n\n    \n    \n&lt;br&gt;\n\n\n\n\n&lt;/div&gt;&lt;/div&gt;&lt;div width=3D&quot;1&quot; style=\r\n=3D&quot;color:white;clear:both&quot;&gt;&lt;/div&gt;\n&lt;/div&gt;\n\n&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;\n\r\n--001636c5b2d789d89c046e22e93a--\r\n\n"}}
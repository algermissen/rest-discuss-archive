{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"IOji-uBFEbALq8GAR8pdGIOpeVI4YMFzwqm6xD6GXBA-ko4onT_eCTAjIWSQ2GF_jErUE1bAVRMSxTi6vwcimLI0yPZgHjAQ-H5eDnYjxw","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Rebooting REST","postDate":"1262769874","msgId":14440,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMTAwMTA2MDIyNDM0LmQ4NTRlNDQ5LmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","inReplyToHeader":"PDIwMDkxMjIzMTgxODQ2LjgzODYyMzU2LmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","referencesHeader":"PDIwMDkxMjIzMTgxODQ2LjgzODYyMzU2LmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4="},"prevInTopic":14408,"nextInTopic":14442,"prevInTime":14439,"nextInTime":14441,"topicId":14392,"numMessagesInTopic":13,"msgSnippet":"Watching this was well worth my time: http://www.infoq.com/presentations/Systems-that-Never-Stop-Joe-Armstrong I m integrating Joe s ideas (and those of his","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 19100 invoked from network); 6 Jan 2010 09:25:36 -0000\r\nX-Received: from unknown (98.137.34.45)\n  by m5.grp.sp2.yahoo.com with QMQP; 6 Jan 2010 09:25:36 -0000\r\nX-Received: from unknown (HELO mxout-08.mxes.net) (216.86.168.183)\n  by mta2.grp.sp2.yahoo.com with SMTP; 6 Jan 2010 09:25:36 -0000\r\nX-Received: from bigbison (unknown [65.117.211.162])\n\t(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))\n\t(No client certificate requested)\n\tby smtp.mxes.net (Postfix) with ESMTPSA id 172E9509DB;\n\tWed,  6 Jan 2010 04:25:04 -0500 (EST)\r\nDate: Wed, 6 Jan 2010 02:24:34 -0700\r\nTo: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nMessage-Id: &lt;20100106022434.d854e449.eric@...&gt;\r\nIn-Reply-To: &lt;20091223181846.83862356.eric@...&gt;\r\nReferences: &lt;20091223181846.83862356.eric@...&gt;\r\nOrganization: Bison Systems Corporation\r\nX-Mailer: Sylpheed 2.6.0 (GTK+ 2.10.14; i686-pc-mingw32)\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=US-ASCII\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nSubject: Re: [rest-discuss] Rebooting REST\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\nWatching this was well worth my time:\n\nhttp://www.infoq.com/presentations/Systems-that-Never-Stop-Joe-Armstrong\n\nI&#39;m integrating Joe&#39;s ideas (and those of his source references) into my\napplied REST architecture work. I don&#39;t think in terms of coding,\nparticularly in Erlang.  But, some of Joe&#39;s laws have direct\ncorollaries in REST -- the layered system and self-descriptive\nmessaging constraints come to mind.  Others have direct corollaries in\nmy proposed system architecture, like using ZFS for storage, and Solaris\nZones to isolate system layers executing on the same computer.\n\nREST allows for a system which obeys Joe&#39;s laws for system reliability.\nWhile it specifies the layered system constraint, REST says nothing\nabout isolating those layers for concurrency.  To meet the &quot;software\ndevelopment on the scale of decades&quot; goal of REST, I believe applied\nREST architecture should extend beyond REST per se, and consider other\nrequirements of a long-running system like isolation and concurrency.\n\nJoe&#39;s Stable Storage law is highly pragmatic to the goals of a REST\nsystem, even though REST itself says nothing of storage.  Isn&#39;t the\nnotion of persistent storage something that belongs in an architectural\nmodel of an overall system?  There are certainly plenty of alternatives\nfor implementation.  Just because it isn&#39;t part of REST seems no reason\nto exclude all notion of storage from the Model.  Having a &quot;law&quot; to\nfollow for the long-term development of a storage system, or achieve\nisolation and concurrency of layers, serves exactly the same purpose as\nhaving a &quot;law&quot; to follow (REST) for messaging between connectors.\n\nIsolation and concurrency are addressed by layered system and Zones.\nSelf-descriptive messaging directly addresses what Joe&#39;s saying about\nfailure detection and fault identification -- restricting communication\nto a uniform REST interface eases error detection and debugging.  As to\nerror correction, I agree with fail-early-and-exit, just like a browser\ndoes when the application/xhtml+xml media type is used, but has ill-\nformed XSLT output.  Other media types cause browsers to handle XSLT\noutput as text/html, meaning an error resulting from a syntax error in\nthe HTML output may escape notice for an unacceptable length of time\n(i.e., until something that should have been caught during development\nwinds up being filed as a bug report).\n\nLive Code Upgrade is important to REST also.  Joe&#39;s clearly talking\nabout something else entirely, however REST&#39;s layered system constraint\nmakes it possible to swap out components in a system without affecting\nusers, provided that messaging is stateless.  What Joe&#39;s saying about\nstateless messaging&#39;s importance in OOP/COP directly applies to REST.\nREST also allows client-side code to be changed at any time, due to the\nhypertext constraint.  Changes to a REST system are easy to roll out\nand roll back.  Joe makes an important point that may be restated as,\naltering your server-side code ought to be possible without rebooting\nthe computer (or even a Zone within a computer), as this affects other\nrunning processes.\n\nA REST &quot;system that never stops&quot; is a goal which may be achieved\nindependently of language choice, although I am in favor of functional\nprogramming.  In fact, I see this as a key reason to use XSLT over\nJavascript whenever possible -- immutable data as the basis for\nbrowser-resident code is less likely to crash some random system.\n\nMy point is, the REST architectural style doesn&#39;t address key aspects of\nsystem architecture, like storage.  So how can REST alone be the basis\nfor any applied-software-architecture Implementation?  The Model should\ntherefore address issues like isolation, concurrency and storage based\non the REST-agnostic laws of long-running systems.  These laws clearly\napply to the goals of any system that needs REST in the first place.\n\n-Eric\n\n"}}
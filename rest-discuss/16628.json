{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"9TilNwUcESZvyK7SABodxKFE9-ekQb7Y51iVfFomm4fWi6M7a4rt9SJfPWrKO58u70IRqvnl1jtWk_TTvMbJa8bseIMih4RCFF67RgmXRg","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Re: how REST is explained","postDate":"1284932940","msgId":16628,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMTAwOTE5MTU0OTAwLmI3NTA4NjNkLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","inReplyToHeader":"PGk3NWliOStmZzZnQGVHcm91cHMuY29tPg==","referencesHeader":"PDI5MzQ1MS42NTUwNy5xbUB3ZWIyODMwMy5tYWlsLnVrbC55YWhvby5jb20+CTxpNzVpYjkrZmc2Z0BlR3JvdXBzLmNvbT4="},"prevInTopic":16627,"nextInTopic":16630,"prevInTime":16627,"nextInTime":16629,"topicId":16621,"numMessagesInTopic":10,"msgSnippet":"... This is a reasonable decision for your context, no arguments from me, in fact it s the same approach taken by the Software Architecture: Foundations,","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 43033 invoked from network); 19 Sep 2010 21:49:00 -0000\r\nX-Received: from unknown (66.196.94.106)\n  by m16.grp.re1.yahoo.com with QMQP; 19 Sep 2010 21:49:00 -0000\r\nX-Received: from unknown (HELO mxout-08.mxes.net) (216.86.168.183)\n  by mta2.grp.re1.yahoo.com with SMTP; 19 Sep 2010 21:49:00 -0000\r\nX-Received: from bigbison (unknown [65.117.211.162])\n\t(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))\n\t(No client certificate requested)\n\tby smtp.mxes.net (Postfix) with ESMTPSA id 14716509B3;\n\tSun, 19 Sep 2010 17:48:58 -0400 (EDT)\r\nDate: Sun, 19 Sep 2010 15:49:00 -0600\r\nTo: &quot;William Martinez Pomares&quot; &lt;wmartinez@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nMessage-Id: &lt;20100919154900.b750863d.eric@...&gt;\r\nIn-Reply-To: &lt;i75ib9+fg6g@...&gt;\r\nReferences: &lt;293451.65507.qm@...&gt;\n\t&lt;i75ib9+fg6g@...&gt;\r\nOrganization: Bison Systems Corporation\r\nX-Mailer: Sylpheed 3.0.3 (GTK+ 2.10.14; i686-pc-mingw32)\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=US-ASCII\r\nContent-Transfer-Encoding: 7bit\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nSubject: Re: [rest-discuss] Re: how REST is explained\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\n&quot;William Martinez Pomares&quot; wrote:\n&gt;\n&gt; I work on academia too. But I teach Software Architecture\n&gt; fundamentals.\n&gt; \n&gt; In other words, I use REST as an analytical example. I try not to\n&gt; teach it as a set of rules and constraints.\n&gt; \n\nThis is a reasonable decision for your context, no arguments from me,\nin fact it&#39;s the same approach taken by the &quot;Software Architecture:\nFoundations, Theory and Practice&quot; textbook.\n\nBut, I don&#39;t see how it&#39;s possible to enlighten anyone as to how to\nimplement a REST system for the Web, except by teaching the constraints\n-- which is pragmatism, not dogma.\n\nI use REST as a guideline to inform design decisions -- one of the\nunwritten benefits of the style is simply having such a guideline, and\nI think that&#39;s worth teaching.  The rest of this post is by way of\nexample, to illustrate my point...\n\n----------------------------------\n\nI&#39;ve posted a demo of my efforts to design an integrated wiki/weblog/\nforum system.  The design choice that leads me to REST, is the choice\nto go with a document-oriented distributed hypermedia solution.\n\nREST&#39;s uniform interface constrains me to choose processing models\nwhich best fit my needs from those which are well-known (or define a\nnew one, and start down the road to standardizing it).  I decided that a\nhierarchical collection of Atom Feed and Entry documents fits best.\n\nThis means my smallest unit of data is the Atom Entry.  But, a mainstay\nof my user interface will be the expansion of a displayed summary into\nthe display of the entire post.  This is a user goal, it doesn&#39;t matter\nif the request is synchronous or asynchronous, the request is for an\nAtom Entry document.\n\nIs that the most-efficient solution?  No.  It would be more efficient\nto define a subresource, like so:\n\n/11.atom?xptr=(//content)\n\nBut, what media type do I use for that response?  It&#39;s just a snippet\nof HTML, not an HTML document, so text/html and application/xhtml+xml\nare out, and it obviously isn&#39;t Atom any more.  Leaving me with\napplication/xml... which doesn&#39;t define any of the desired semantics of\nthe payload.\n\nWhen that content is contained within an Atom Entry, it has well-known\nsemantics like, this is the content of an entry with(out) a summary,\nwhich links in to the rest of the system using standard link relations,\nhas various metadata like author, and &lt;div&gt; content defers to the XHTML\nprocessing model.\n\nThis context is lost when the standalone content is assigned a URI,\nmaking that message fail the self-descriptive messaging and hypertext\nconstraints (in the case of my example).  More efficient, sure, but also\nless visible -- &quot;The trade-off, though, is that a uniform interface\ndegrades efficiency, since information is transferred in a standardized\nform rather than one which is specific to an application&#39;s needs.&quot;\n\nThis choice doesn&#39;t have any impact on user-perceived performance.  When\nthe user goal is to expand a summary to reveal the full content, what\nmatters to user-perceived performance is the latency until the request\nbegins to render, not the latency until the request finishes rendering.\nShaving a few bytes off that transfer size should make no more\ndifference to user-perceived performance than the natural variation in\ncontent size from one entry to the next (i.e. none).\n\nLetting the uniform interface constraints inform my design decisions,\nmeans I have to weigh the benefits of serving standalone content against\nthe cost of standardizing such a solution.  In practice, though, it\ndoesn&#39;t save enough bandwidth to outweigh the cost of the added\ncomplexity, let alone the effort involved in standardization.\n\nSo whatever tiny benefits may be derived from going outside the bounds\nof the uniform interface, aren&#39;t worth the tradeoff, and don&#39;t justify\npursuing standardization of some sort of &#39;subatomic&#39; media type.  Thus,\nI&#39;ve chosen to remain within the uniform interface.\n\nThis is exactly the sort of real-world design decision REST is meant to\npragmatically inform, by allowing it to be analyzed against an idealized\nmodel.  It&#39;s up to the developer to determine the benefits and\nconsequences of developing within the uniform interface constraint.\n\nI&#39;ve also defined the following service for my system:\n\n/11.atom?xptr=(//@thr:count)\n\nThe response is an integer, so application/json is a best-fit choice.\nBut, there is no context and no link relations, so even though it may be\nself-descriptive, it fails the hypertext constraint.\n\nHowever, my purpose for doing this is to allow greater cache retention\nwhere the representation includes post count, without impacting the user\nexperience -- no such benefits exist for the standalone content example.\n\nSo the failure to apply the uniform interface constraint here, yields a\nbenefit to my system, but the whole thing is too insignificant to\nwarrant a standardization effort -- leading to my decision not to care\nthat this aspect of my system lies outside the uniform interface.\n\nYet I still find it beneficial to understand that I have this REST\nmismatch in my system, even if I don&#39;t care.  Just like it&#39;s beneficial\nto understand how all HTTP messaging fails to be self-descriptive, even\nthough we don&#39;t care (because there&#39;s nothing for it, as yet).\n\nMy point is, there is pragmatic value in teaching REST by explaining\nhow to apply its constraints in practice.  Not if, like you say, the\ngoal is to use REST as an example of an architectural style for the\npurpose of teaching software architecture -- although it would help to\npoint out that REST is useful as a development guideline rather than\njust as a label (unlike, say, &#39;client-server&#39;) -- but definitely, if the\ngoal is the implementation of a REST system on the Web.\n\n-Eric\n\n"}}
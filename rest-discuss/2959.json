{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":23186829,"authorName":"Paul Prescod","from":"Paul Prescod &lt;paul@...&gt;","profile":"papresco","replyTo":"SENDER","senderId":"VoJ7bRqOj9lY3LPbj4QsZZTRZHpGcavriaMrwEnMvYutj86kfdyVZLyEKGgbow7RfNxZbjml-f73uKcW-4YdbL9RmJJY9g","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Another REST vs. SOAP article","postDate":"1038707802","msgId":2959,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDNERTk2QzVBLjcwNDAxMDVAcHJlc2NvZC5uZXQ+","inReplyToHeader":"PDAwNGEwMWMyOThkMSRkNWEyMTAzMCRkZWM0N2M0MkBkZXV0c2NoODEwMD4=","referencesHeader":"PDAwNGEwMWMyOThkMSRkNWEyMTAzMCRkZWM0N2M0MkBkZXV0c2NoODEwMD4="},"prevInTopic":2957,"nextInTopic":2963,"prevInTime":2958,"nextInTime":2960,"topicId":2908,"numMessagesInTopic":50,"msgSnippet":"... I think I could be convinced that a generic objects model has some advantages over a REST model in some circumstances but I really cannot see _any_","rawEmail":"Return-Path: &lt;paul@...&gt;\r\nX-Sender: paul@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_2_3_0); 1 Dec 2002 01:57:13 -0000\r\nReceived: (qmail 56089 invoked from network); 1 Dec 2002 01:57:12 -0000\r\nReceived: from unknown (66.218.66.217)\n  by m3.grp.scd.yahoo.com with QMQP; 1 Dec 2002 01:57:12 -0000\r\nReceived: from unknown (HELO smtp1.ActiveState.com) (209.17.183.249)\n  by mta2.grp.scd.yahoo.com with SMTP; 1 Dec 2002 01:57:12 -0000\r\nReceived: from smtp3.ActiveState.com (smtp3.ActiveState.com [192.168.3.19])\n\tby smtp1.ActiveState.com (8.12.6/8.12.6) with ESMTP id gB11ui76009214;\n\tSat, 30 Nov 2002 17:56:44 -0800\r\nReceived: from prescod.net (ssh1.ActiveState.com [192.168.3.32])\n\tby smtp3.ActiveState.com (8.11.6/8.11.6) with ESMTP id gB11uhp10433;\n\tSat, 30 Nov 2002 17:56:43 -0800\r\nMessage-ID: &lt;3DE96C5A.7040105@...&gt;\r\nDate: Sat, 30 Nov 2002 17:56:42 -0800\r\nUser-Agent: Mozilla/5.0 (Macintosh; U; PPC Mac OS X; en-US; rv:1.2b) Gecko/20021016\r\nX-Accept-Language: en-us, en\r\nMIME-Version: 1.0\r\nTo: &quot;Toivo &#92;&quot;Deutsch&#92;&quot; Lainevool&quot; &lt;tlainevool@...&gt;,\n   rest-discuss@yahoogroups.com\r\nCc: &quot;&#39;Mark Baker&#39;&quot; &lt;distobj@...&gt;\r\nSubject: Re: [rest-discuss] Another REST vs. SOAP article\r\nReferences: &lt;004a01c298d1$d5a21030$dec47c42@deutsch8100&gt;\r\nIn-Reply-To: &lt;004a01c298d1$d5a21030$dec47c42@deutsch8100&gt;\r\nContent-Type: text/plain; charset=us-ascii; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nFrom: Paul Prescod &lt;paul@...&gt;\r\nX-Yahoo-Group-Post: member; u=23186829\r\nX-Yahoo-Profile: papresco\r\n\r\nToivo &quot;Deutsch&quot; Lainevool wrote:\n\n&gt; I wouldn&#39;t stand up for monolithic services, but I will try to defend\n&gt; the SOA approach a little.  (Keep in mind that I&#39;m not arguing that one\n&gt; of the approaches is &quot;better&quot;, I think both have their appropriate uses.\n&gt; To me there is no clear winner.  When deciding which is better to use in\n&gt; a particular system you have a lot of context to keep in mind.  I&#39;m just\n&gt; trying to get a better handle on some criteria to help me make this\n&gt; decision.)\n\nI think I could be convinced that a &quot;generic objects&quot; model has some \nadvantages over a REST model in some circumstances but I really cannot \nsee _any_ virtue in the service oriented model over the generic objects \nmodel. It seems to me to be just a &quot;dumbed down&quot; version of OOP (where \nobjects have a uniform addressing scheme and can be created and \ndestroyed at runtime). Perhaps that dumbing down has useful sociological \neffects. Clearly SOAP and XML-RPC seem not to have suffered in \npopularity for leaving out the concept of &quot;dynamic objects&quot; but it seems \na serious omission to me.\n\n&gt; One of the hardest things to do when designing networked systems is\n&gt; choosing the right abstractions (e.g. resources or services) at the\n&gt; right level of granularity.  Systems that have abstractions that are \n&gt; too coarse grained end up pushing around a lot of unneeded data across \n&gt; the wire.  If the granularity is too fine, too many messages go back \n&gt; and forth across the network.\n\nI&#39;m not convinced that there is a correspondance between granularity of \naddressing and granularity of messaging. One message could influence \nthousands of addressable objects or thousands of messages could have \nonly a small effect on a single object.\n\n&gt; I don&#39;t think service interfaces need to be &quot;monolithic&quot;.  This just\n&gt; seems like an issue of picking the right abstractions and granularity.\n&gt; To me it seems like picking the right abstractions and granularity \n&gt; would be more difficult with REST that with services.  This is because\n&gt; resources are restricted to the HTTP verbs for interacting with the\n&gt; outside world, where with the service interface you are free to make \n&gt; up any verbs you want.  So if you had a bank account that you were\n&gt; modeling, with a service interface you could do something like:\n\nDespite what I said above, I can see how REST makes it harder to have \nprecise control over the granularity of messaging. You can&#39;t reasonably \nhave a method called &quot;UpdateNThings&quot; in REST, though you could emulate \nit by POSTing an &quot;UpdateNThingsRequest&quot; resource. I would actually \nrather compare SOA to &quot;traditional, arbitrary methods OOP&quot; because the \ndelta between that and SOA is smaller.\n\n&gt; Service: Account\n&gt; \tHas operation: deposit( account_number, amount )\n&gt; \tHas operation: withdrawal( account_number, amount )\n&gt; \tHas operation: calculateInterest( account_number )\n&gt;\n&gt; I wouldn&#39;t call this &quot;combining a bunch of separate things&quot;.  I would\n&gt; say this is grouping a set of related operation together in a cohesive\n&gt; unit.\n\nYou call the service Account but it is really AccountManager in that it \ndoes not represent any particular account. That is nothing like OOP. In \nOOP it would be:\n\nService: AccountManager\n\tHas operation: listAccounts() -&gt; Account\n\tHas operation: findAccount(account_number) -&gt; Account\n\tHas operation: findAccount(branch, customer_id) -&gt; Account\n\tHas operation: findAccounts(customer_name) -&gt; Account[]\n\tHas operation: createAccount(account_number, AccountData) -&gt; Account\n\tHas operation: destroyAccount(account_number)\n\nService: Account\n\tHas operation: deposit(amount)\n\tHas operation: withdraw(amount)\n\tHas operation: calculateInterest()\n\nThis is a proper separation of concerns. Now we do not even have to \nagree upon an account query model to share accounts. Similarly in a Java \nprogram, you don&#39;t have to know how I created an InputStream to use it \nas an InputStream. One library doesn&#39;t need to know the full details of \nanother library&#39;s interface to share objects. It only needs to know the \ninterfaces _of the objects_.\n\nThe mapping to REST is basically:\n\n  listAccounts -&gt; GET /accounts\n  findAccount(s) -&gt; GET /accounts?customer_name=...\n  createAccount -&gt; POST /accounts returns /accounts/some_account\n  destroyAccount -&gt; DELETE /accounts/some_account\n  deposit -&gt; POST /accounts/credits (as per Dierkin)\n  withdraw -&gt; POST (arguably those could be the same method)\n  calculateInterest -&gt; (should this be a client service or embedded in \nthe server business logic???)\n\n&gt; It&#39;s probably because I&#39;ve been using OO for a long time now, and\n&gt; haven&#39;t had nearly as much experience with REST, but it seems easier \n&gt; and more natural to do this the service oriented way.\n\nIf you&#39;re used to OO then I would expect the service oriented way to \nfeel odd to you. A 1970s Lisp or COBOL would totally understand the \nservice oriented interface as a functional interface. The key to OO is \nintegrating the data and the methods into separably addressable objects \nwith polymorphism. REST has that and more traditional web services \ntechniques do not.\n\n  Paul Prescod\n\n\n"}}
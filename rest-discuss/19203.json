{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":546563737,"authorName":"Max Toro","from":"Max Toro &lt;maxtoroq@...&gt;","profile":"maxtoroq","replyTo":"SENDER","senderId":"1bPkwamwbiWiqcMjHdHv1FRkUmkcjCfiaGZmpafy3342gCpPq_TB7EXpMSuzAcTyDxCvEdiIAF91iM1WYfdEZljAEi0","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] URI design, part 2","postDate":"1354378302","msgId":19203,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PENBTk1QazI0d01ReGlFMDNyR3JjUnM1PVMxSmNhYkRnYitOZFU0RVR5WkZzTCt4cnFXUUBtYWlsLmdtYWlsLmNvbT4=","inReplyToHeader":"PDIwMTIxMjAxMDAwODQyLmIyNGY5NGQwLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","referencesHeader":"PENBTk1QazI3MmlTb0UzNFlLUzlBX3BNK2N0ejJvYjg5TS12M2txUGkxRHF1d2dpNkpqZ0BtYWlsLmdtYWlsLmNvbT4JPENGNTUyMDExLUI0MTgtNEFFNC04MEM2LTQzRjk5MTJFQTcyNUBuaWNrc2hhbmtzLmNvbT4JPDIwMTIxMTMwMTQxMjU0LmYzZDU5ZmE4LmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPENBTk1QazI0aHJRN3JYN2FLY3Y4TEh4S1AzQloraU9pVVZYd1lWdDZ2eUFDQTJNc3NfZ0BtYWlsLmdtYWlsLmNvbT4JPDIwMTIxMjAxMDAwODQyLmIyNGY5NGQwLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4="},"prevInTopic":19202,"nextInTopic":19204,"prevInTime":19202,"nextInTime":19204,"topicId":19187,"numMessagesInTopic":28,"msgSnippet":"... To clarify, /orders/1/cancel is used to modify a resource, using POST. A GET request would result in a Method Not Allowed response. This is also explained","rawEmail":"Return-Path: &lt;maxtoroq@...&gt;\r\nX-Sender: maxtoroq@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 25240 invoked from network); 1 Dec 2012 16:11:43 -0000\r\nX-Received: from unknown (98.137.34.45)\n  by m7.grp.sp2.yahoo.com with QMQP; 1 Dec 2012 16:11:43 -0000\r\nX-Received: from unknown (HELO mail-oa0-f50.google.com) (209.85.219.50)\n  by mta2.grp.sp2.yahoo.com with SMTP; 1 Dec 2012 16:11:43 -0000\r\nX-Received: by mail-oa0-f50.google.com with SMTP id n16so1831721oag.23\n        for &lt;rest-discuss@yahoogroups.com&gt;; Sat, 01 Dec 2012 08:11:42 -0800 (PST)\r\nMIME-Version: 1.0\r\nX-Received: by 10.182.194.2 with SMTP id hs2mr376964obc.97.1354378302804; Sat,\n 01 Dec 2012 08:11:42 -0800 (PST)\r\nX-Received: by 10.182.43.228 with HTTP; Sat, 1 Dec 2012 08:11:42 -0800 (PST)\r\nIn-Reply-To: &lt;20121201000842.b24f94d0.eric@...&gt;\r\nReferences: &lt;CANMPk272iSoE34YKS9A_pM+ctz2ob89M-v3kqPi1Dquwgi6Jjg@...&gt;\n\t&lt;CF552011-B418-4AE4-80C6-43F9912EA725@...&gt;\n\t&lt;20121130141254.f3d59fa8.eric@...&gt;\n\t&lt;CANMPk24hrQ7rX7aKcv8LHxKP3BZ+iOiUVXwYVt6vyACA2Mss_g@...&gt;\n\t&lt;20121201000842.b24f94d0.eric@...&gt;\r\nDate: Sat, 1 Dec 2012 13:11:42 -0300\r\nMessage-ID: &lt;CANMPk24wMQxiE03rGrcRs5=S1JcabDgb+NdU4ETyZFsL+xrqWQ@...&gt;\r\nTo: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Max Toro &lt;maxtoroq@...&gt;\r\nSubject: Re: [rest-discuss] URI design, part 2\r\nX-Yahoo-Group-Post: member; u=546563737; y=zAX3pzUopetU5IR6gHSnebV0-Cca-fnoAUWp7Qyc2uAocxE\r\nX-Yahoo-Profile: maxtoroq\r\n\r\n&gt; Well, what are you expecting to GET from /cancel, or are you just using\n&gt; that URL to invoke a procedure? If so, then there are a few places Roy&#39;s\n&gt; thesis admonishes against it in Chapter 6 -- the rest of REST is about\n&gt; positive, rather than negative, reinforcement of the identification of\n&gt; resources constraint. Suggested reading: 6.5.2; 6.2.1, in particular:\n&gt; &quot;REST [defines] a resource to be the semantics of what the author\n&gt; intends to identify.&quot;\n\nTo clarify, /orders/1/cancel is used to modify a resource, using POST.\nA GET request would result in a Method Not Allowed response.\n\nThis is also explained on Subbu&#39;s book, chapter 2.6 &quot;When and How to\nUse Controllers to Operate on Resources&quot;:\n\n&quot;Problem: You want to know how to tackle write operations that involve\nmodifying more than one resource atomically, or whose mapping to PUT\nor DELETE is not obvious. Solution: Designate a controller resource\nfor each distinct operation. Let clients use the HTTP method POST to\nsubmit a request to trigger the operation... If the outcome is the\nmodification of one or more existing resources, return response code\n303 (See Other) with a Location with a URI that clients can use to\nfetch a representation of those modifications.&quot;\n\n&gt; Not the semantics of a method invocation.  What does /cancel identify?\n&gt; Sounds to me like a method of tunneling DELETE through POST which\n&gt; identifies nothing, iow a procedure endpoint, which is characteristic\n&gt; of various styles but not of the REST style.  The hypertext constraint\n&gt; only makes sense if your resources make sense, in that their URLs are\n&gt; identifiers rather than endpoints.\n\nIf I understand correctly, you are saying that if I need to affect a\nresource then I should use the uniform interface on that resource URI,\nand not another URI.\n\n&gt; Which brings us to Chapter 5, and the short answer to your question:\n&gt; &quot;POSTing to /cancel violates the Identification of Resources constraint,\n&gt; and is therefore unRESTful.&quot;  But I&#39;ve found that just giving that\n&gt; answer tends to upset folks who&#39;ve only read Chapter 5, then they get\n&gt; defensive about why can&#39;t they call their API RESTful, accusations of\n&gt; pedantry follow, and threads devolve into general ugliness, heheh...\n\nAfter reading that chapter again I&#39;m not sure my example violates\nanything, but I&#39;d love to get more clarification from you. Is it the\nuse of a verb in the URI? or not using the URI of the resource I&#39;m\ntrying to modify directly?\n--\nMax Toro\n\n\nOn Sat, Dec 1, 2012 at 4:08 AM, Eric J. Bowman &lt;eric@...&gt; wrote:\n&gt; Max Toro wrote:\n&gt;&gt;\n&gt;&gt; What I&#39;d love to get is an answer like: POST /orders/1/cancel is not\n&gt;&gt; REST compliant because chapter x of Fielding&#39;s dissertation explicitly\n&gt;&gt; or implicitly says it&#39;s not allowed or it&#39;s discouraged. After knowing\n&gt;&gt; what is or isn&#39;t REST then I&#39;d love to learn more about the pros and\n&gt;&gt; cons of different architectural and implementation styles.\n&gt;&gt;\n&gt;\n&gt; Well, what are you expecting to GET from /cancel, or are you just using\n&gt; that URL to invoke a procedure? If so, then there are a few places Roy&#39;s\n&gt; thesis admonishes against it in Chapter 6 -- the rest of REST is about\n&gt; positive, rather than negative, reinforcement of the identification of\n&gt; resources constraint. Suggested reading: 6.5.2; 6.2.1, in particular:\n&gt; &quot;REST [defines] a resource to be the semantics of what the author\n&gt; intends to identify.&quot;\n&gt;\n&gt; Not the semantics of a method invocation.  What does /cancel identify?\n&gt; Sounds to me like a method of tunneling DELETE through POST which\n&gt; identifies nothing, iow a procedure endpoint, which is characteristic\n&gt; of various styles but not of the REST style.  The hypertext constraint\n&gt; only makes sense if your resources make sense, in that their URLs are\n&gt; identifiers rather than endpoints.\n&gt;\n&gt; Roy&#39;s thesis really must be considered in its entirety, to understand\n&gt; the uniform interface constraint (of which identification of resources\n&gt; is a sub-constraint).  Chapter 1 introduces the notion of applying\n&gt; design-by-constraint to networked software architecture, as inspired\n&gt; by Eames IIRC.  &quot;A style is a named set of constraints on architectural\n&gt; elements that induces the set of properties desired of the\n&gt; architecture.&quot; (4.3)\n&gt;\n&gt; Chapter 2 defines terminology associated with networked software\n&gt; architecture, which is required for understanding Chapter 3, which lays\n&gt; out a methodology for evaluating various styles and applies this to\n&gt; several examples.  Most importantly, Chapter 3 identifies the\n&gt; constraints associated with various styles, and describes the properties\n&gt; they induce in a system (which may or may not be beneficial or\n&gt; detrimental to the system you&#39;re designing; remember there is no best\n&gt; architecture, only that which is best for your system).  Which is of\n&gt; course required for understanding Chapter 4.\n&gt;\n&gt; Chapter 4 considers the problems raised by the WWW, and suggests that\n&gt; the architecture may be improved by applying design-by-constraint to it,\n&gt; in order to address those problems.  First, by identifying the desirable\n&gt; properties of the early Web, and the constraints responsible for them;\n&gt; next, by extending that architecture by adding additional constraints,\n&gt; resulting in a new hybrid style consisting of aspects of existing\n&gt; styles. Of course, this is required for understanding Chapter 5.\n&gt;\n&gt; &quot;REST provides a set of architectural constraints that, WHEN APPLIED\n&gt; AS A WHOLE, emphasizes scalability of component interactions, generality\n&gt; of interfaces, independent deployment of components, and intermediary\n&gt; components to reduce interaction latency, enforce security, and\n&gt; encapsulate legacy systems.&quot; (4.4)\n&gt;\n&gt; Which brings us to Chapter 5, and the short answer to your question:\n&gt; &quot;POSTing to /cancel violates the Identification of Resources constraint,\n&gt; and is therefore unRESTful.&quot;  But I&#39;ve found that just giving that\n&gt; answer tends to upset folks who&#39;ve only read Chapter 5, then they get\n&gt; defensive about why can&#39;t they call their API RESTful, accusations of\n&gt; pedantry follow, and threads devolve into general ugliness, heheh...\n&gt;\n&gt; My point is, you&#39;ll have a much harder time trying to understand REST\n&gt; by being told bluntly what is and isn&#39;t RESTful, than you will by\n&gt; reading Roy&#39;s thesis in its entirety.  As computer science dissertations\n&gt; go, Roy produced a functional work of art, much as an Eames chair isn&#39;t\n&gt; just a piece of furniture.  Understanding what the constraints are, and\n&gt; where they come from, is vital to understanding how they&#39;re applied to\n&gt; the Web to derive REST, and why they must be implemented as a whole to\n&gt; achieve REST.\n&gt;\n&gt; Only then will it become apparent when they&#39;re being violated, as in\n&gt; the example given of POSTing to an unGETtable /cancel URL.  That level\n&gt; of understanding comes from the bottom up, not from the top down, IMO.\n&gt; Knowing what is or isn&#39;t REST depends on understanding the pros and\n&gt; cons of various architectural styles, because that&#39;s what constraints\n&gt; are, and constraints must be understood before their application to the\n&gt; Web as REST can be understood.\n&gt;\n&gt; More importantly, understanding REST as a style makes one a better\n&gt; architect, because sometimes it&#39;s advantageous to deviate from REST&#39;s\n&gt; constraints.  Which is why I&#39;m always on about how saying something\n&gt; isn&#39;t REST is not a value judgment, just a fact.  Understanding Roy&#39;s\n&gt; thesis allows you to identify the constraints you have applied, and\n&gt; understand that as its own architectural style derived from REST, to\n&gt; use as a guide to developing that system -- but also to understand\n&gt; which desirable properties of REST you&#39;re forfeiting in the bargain.\n&gt;\n&gt; Making informed decisions about which constraints to apply, is making\n&gt; use of REST as a tool for long-term development.  It may not be\n&gt; feasible to apply all the constraints initially, if REST is truly what\n&gt; your system needs.  In which case your system design can account for\n&gt; this, becoming more RESTful over time, instead of painting yourself\n&gt; into a corner where the system needs re-architecting rather than\n&gt; implementing another constraint as an extension.\n&gt;\n&gt; -Eric\n\n"}}
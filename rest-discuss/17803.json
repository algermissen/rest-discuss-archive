{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":352334505,"authorName":"Craig McClanahan","from":"Craig McClanahan &lt;craigmcc@...&gt;","profile":"craig_mcclanahan","replyTo":"SENDER","senderId":"1za1WHGWnLfNSCxB4WzMY--AcDLit2Gcp2VZaBWlkej1D73DSfZDqb6RUbNedNPVWVLJymACjUqBvk1hQOjzrNsGfIClmvJ58IFrWw","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Should a RESTful API expose use cases & view models rather than entities?","postDate":"1317196338","msgId":17803,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PENBTmdrbUxCcll0MkxjcEtNNFVEUHhnVGN0Q1AteENOLW8wek9FYnY1TXRqN1hXRDFBQUBtYWlsLmdtYWlsLmNvbT4=","inReplyToHeader":"PDRFODJDNjUwLjEwNDA1MDBAaGF5d29vZC1hc3NvY2lhdGVzLmNvLnVrPg==","referencesHeader":"PGo1cDdwMytpMmF0QGVHcm91cHMuY29tPgk8Q0FQV184bTVuMk9aWDE4MllYVXIyNS1XajhPVnV4bk4yMjh6MV9aT2Q4N1FpUU54bkxnQG1haWwuZ21haWwuY29tPgk8NEU4MkM2NTAuMTA0MDUwMEBoYXl3b29kLWFzc29jaWF0ZXMuY28udWs+"},"prevInTopic":17802,"nextInTopic":17806,"prevInTime":17802,"nextInTime":17804,"topicId":17795,"numMessagesInTopic":16,"msgSnippet":"A couple of things I keep in mind when designing REST APIs: * For CRUD-based functionality, it is not uncommon for there to be a relatively 1:1 mapping between","rawEmail":"Return-Path: &lt;craigmcc@...&gt;\r\nX-Sender: craigmcc@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 12285 invoked from network); 28 Sep 2011 07:52:20 -0000\r\nX-Received: from unknown (98.137.34.46)\n  by m3.grp.sp2.yahoo.com with QMQP; 28 Sep 2011 07:52:20 -0000\r\nX-Received: from unknown (HELO mail-pz0-f47.google.com) (209.85.210.47)\n  by mta3.grp.sp2.yahoo.com with SMTP; 28 Sep 2011 07:52:19 -0000\r\nX-Received: by pzk4 with SMTP id 4so21252031pzk.6\n        for &lt;rest-discuss@yahoogroups.com&gt;; Wed, 28 Sep 2011 00:52:19 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.68.9.2 with SMTP id v2mr42653433pba.101.1317196339080; Wed, 28\n Sep 2011 00:52:19 -0700 (PDT)\r\nX-Received: by 10.142.163.6 with HTTP; Wed, 28 Sep 2011 00:52:18 -0700 (PDT)\r\nIn-Reply-To: &lt;4E82C650.1040500@...&gt;\r\nReferences: &lt;j5p7p3+i2at@...&gt;\n\t&lt;CAPW_8m5n2OZX182YXUr25-Wj8OVuxnN228z1_ZOd87QiQNxnLg@...&gt;\n\t&lt;4E82C650.1040500@...&gt;\r\nDate: Wed, 28 Sep 2011 00:52:18 -0700\r\nMessage-ID: &lt;CANgkmLBrYt2LcpKM4UDPxgTctCP-xCN-o0zOEbv5Mtj7XWD1AA@...&gt;\r\nTo: dan@...\r\nCc: mike amundsen &lt;mamund@...&gt;, rest-discuss@yahoogroups.com\r\nContent-Type: multipart/alternative; boundary=bcaec5215d95e3ede504adfbabb7\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Craig McClanahan &lt;craigmcc@...&gt;\r\nReply-To: craigmcc@...\r\nSubject: Re: [rest-discuss] Should a RESTful API expose use cases & view\n models rather than entities?\r\nX-Yahoo-Group-Post: member; u=352334505; y=i7NITq9yk1gDtFjM8qxBeo4omyk5Q9wdNvNH7BKPbvSo-w6VK1BtRE5weA\r\nX-Yahoo-Profile: craig_mcclanahan\r\n\r\n\r\n--bcaec5215d95e3ede504adfbabb7\r\nContent-Type: text/plain; charset=windows-1252\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nA couple of things I keep in mind when designing REST APIs:\n\n* For CRUD-bas=\r\ned functionality, it is not uncommon for there to be a\nrelatively 1:1 mappi=\r\nng\n  between available CRUD operations and corresponding web service endpoi=\r\nnts\n(using\n  appropriate HTTP verbs, of course).\n\n* For more complex workfl=\r\nows, like a shopping cart, the REST API should be\ndefined\n  as a state mach=\r\nine (from the client&#39;s viewpoint), which might be totally\ndivorced from\n  t=\r\nhe internal functionality on the server.\n\nRickard&#39;s biggest complaint in th=\r\ne article you reference is that many/most\nAPIs that claim to be RESTful do =\r\nnot actually obey the hypermedia (a.k.a.\nHATEOAS) constraint, and include U=\r\nRIs for the client to use for initiating\nstate changes.  In the shopping ca=\r\nrt case, for example, the representation\nreturned to the user should includ=\r\ne the current state of the cart (to obey\nthe statelessness constraint), *an=\r\nd* a URI for the client to use for\ninitiating a checkout operation.\n\nEven i=\r\nn a simple CRUD application, the notion of hypermedia links is useful.\n As =\r\none example, we (Jive Software) have an API that supports documents that\nca=\r\nn be stored in various containers, and the documents themselves can have\nre=\r\nad-only or read/write permissions for a particular user.  When you\nretrieve=\r\n a document object from our API, you&#39;ll get, among other things, a\nJSON &quot;re=\r\nsources&quot; element with a &quot;self&quot; sub-element, like this:\n\n{\n    ...\n    &quot;reso=\r\nurces&quot; : {\n        &quot;self&quot; : {\n            &quot;ref&quot; : &quot;http://example.com/docum=\r\nents/1234&quot;,\n            &quot;allowed&quot; : [ &quot;GET&quot;, &quot;PUT&quot;, &quot;DELETE&quot; ]\n        }\n  =\r\n      ...\n    }\n    ...\n}\n\nThe fact that &quot;PUT&quot; and &quot;DELETE&quot; are included id=\r\nentifies the fact that the\nrequesting user is entitled to update or delete =\r\nthis document (a user who\nhad only read access would see only the &quot;GET&quot; ver=\r\nb).  Further, a client\ndoesn&#39;t need to know anything about how URIs are com=\r\nposed -- they just look\nup links based on the resources key and treat the U=\r\nRI as an opaque string.\n\nAs the &quot;...&quot; implies, we offer links to a lot of r=\r\nesources related to the\ndocument (such as a way to retrieve comments about =\r\nit, or to &quot;like&quot; it or\n&quot;share&quot; it, as well as the HTML representation of th=\r\nis document for use in a\nbrowser) in the resources element.  The primary co=\r\nupling between the client\nand the server, for a particular representation, =\r\nis that the client needs to\nunderstand the resource keys it needs to perfor=\r\nm its own functionality.\n But, a well-behaved client should also ignore any=\r\n resource keys it does not\nunderstand.  Changes in the set of resource keys=\r\n available, or even in the\nactual URIs, are totally transparent to the clie=\r\nnt, leading to one of the\nother benefits of REST -- you can change the repr=\r\nesentations, and even the\nURI structure of your app, without breaking old c=\r\nlients.\n\nObeying REST constraints is an investment that pays off in evolvab=\r\nility of\nyour application.  This isn&#39;t necessarily valuable in every single=\r\n scenario\n(even in our app&#39;s own HTML/JS/CSS UI, we allow the UI team to de=\r\nsign\ncompletely purpose-driven REST-ish APIs that are not published to exte=\r\nrnal\nclients, and evolve them in backwards-incompatible manners because the=\r\ny\ncontrol both the front end and the back end), but when it is appropriate,=\r\n\nyou gain the benefits pretty much from the first time you do a substantial=\r\n\nevolution of the API, and again every time after that.\n\nCraig McClanahan\n\n=\r\n\n\n\n\nOn Wed, Sep 28, 2011 at 12:01 AM, Dan Haywood\n&lt;dan@haywood-associates.c=\r\no.uk&gt;wrote:\n\n&gt; **\n&gt;\n&gt;\n&gt; Hi Mike,\n&gt; Thanks for the response, makes sense.\n&gt;\n=\r\n&gt; So let me ask, given in the server that I *do* have a domain object\n&gt; gra=\r\nph of entities, and given I&#39;ve invented a mechanism to represent\n&gt; those en=\r\ntities using hypermedia controls (eg represent associations\n&gt; between objec=\r\nts as links between their corresponding representations,\n&gt; allow arbitrary =\r\noperations on objects to be invoked via forms), is there\n&gt; a problem with t=\r\nhis?\n&gt;\n&gt; Your response only seems to require these hypermedia controls, so =\r\nI\n&gt; can&#39;t see that there&#39;d be any objection. Yet there are articles (eg\n&gt; R=\r\nickard Oberg&#39;s javalobby article [1]) that seem to argue otherwise?\n&gt;\n&gt; Dan=\r\n\n&gt;\n&gt; [1] http://java.dzone.com/articles/domain-model-rest-anti-pattern\n&gt;\n&gt;\n=\r\n&gt; On 27/09/2011 21:39, mike amundsen wrote:\n&gt; &gt; To better support evolabili=\r\nty over time, REST-style implementations\n&gt; &gt; rely on the media type as the =\r\nonly &quot;shared understanding&quot; between\n&gt; &gt; client and server. Clients do not r=\r\nely on a list of procedures (RPC),\n&gt; &gt; an object-graph (OO), or a list of f=\r\nixed URIs, etc. in order to make\n&gt; &gt; requests and process results. Clients =\r\nare &quot;bound&quot; not to the object\n&gt; &gt; model, view, etc, but to the media type a=\r\nnd the hypermedia elements\n&gt; &gt; (links and forms, etc.) within that media ty=\r\npe definition.\n&gt; &gt;\n&gt; &gt; This binding to the hypermedia controls within a med=\r\nia type means\n&gt; &gt; changes on the server in the RPC list, object model, URIs=\r\n used to\n&gt; &gt; expose functionality, etc. will have no &quot;breaking effect&quot; on t=\r\nhe\n&gt; &gt; client (since the client only cares about the hypermedia controls\n&gt; =\r\n&gt; themselves). And that means the two parties and independently evolve\n&gt; &gt; =\r\nover time (use new procedure lists, add/remove object models, etc.)\n&gt; &gt; w/o=\r\n running the risk of &quot;breaking&quot; each other (as long as it is the\n&gt; &gt; hyperm=\r\nedia controls that are used as &quot;shared understanding&quot;).\n&gt; &gt;\n&gt; &gt; For this re=\r\nason, what is represented by a response *does* matter, but\n&gt; &gt; not in ways =\r\ntraditionally understood by &quot;local&quot; programming models\n&gt; &gt; (RPC, OO, etc.).=\r\n What is represented is that _state_ of the app, not\n&gt; &gt; the programming st=\r\nyle (OO, etc.) of the server implementation.\n&gt; &gt;\n&gt; &gt; Hopefully that makes s=\r\nome sense&lt;g&gt;.\n&gt; &gt;\n&gt; &gt; mca\n&gt; &gt; http://amundsen.com/blog/\n&gt; &gt; http://twitter.=\r\ncom@mamund\n&gt; &gt; http://mamund.com/foaf.rdf#me\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt; On Mon=\r\n, Sep 26, 2011 at 02:57, danhaywood@...\n&gt; &gt; &lt;dan@haywood-associates.c=\r\no.uk&gt; wrote:\n&gt; &gt;&gt; ... or doesn&#39;t it matter?\n&gt; &gt;&gt;\n&gt; &gt;&gt; The consensus would s=\r\neem to be to for the former (use cases + view\n&gt; models). On the other hand,=\r\n all representations have a media type, the point\n&gt; of which is to allow th=\r\ne client and server to evolve independently. That\n&gt; being the case, why doe=\r\ns it matter what is being represented?\n&gt; &gt;&gt;\n&gt; &gt;&gt; Thanks in advance\n&gt; &gt;&gt; Dan=\r\n\n&gt; &gt;&gt;\n&gt; &gt;&gt;\n&gt; &gt;&gt;\n&gt; &gt;&gt; ------------------------------------\n&gt; &gt;&gt;\n&gt; &gt;&gt; Yahoo! =\r\nGroups Links\n&gt; &gt;&gt;\n&gt; &gt;&gt;\n&gt; &gt;&gt;\n&gt; &gt;&gt;\n&gt;\n&gt; --\n&gt; Dan Haywood\n&gt; consultant, mentor,=\r\n developer, author\n&gt; agile, ddd, oo, java, .net, sybase\n&gt; MA (Oxon), MBCS, =\r\nCITP, CEng\n&gt; mailto:dan@...\n&gt; phone: +44 (0)7961 14428=\r\n6\n&gt; skype: danhaywood\n&gt; twitter: http://twitter.com/dkhaywood\n&gt; blog: http:=\r\n//danhaywood.com\n&gt; web: http://www.haywood-associates.co.uk\n&gt; linkedin: htt=\r\np://uk.linkedin.com/in/dkhaywood\n&gt; open source: http://incubator.apache.org=\r\n/isis\n&gt; book: http://pragprog.com/titles/dhnako\n&gt; sybase: http://sybtrainin=\r\ng.co.uk\n&gt;\n&gt;  \n&gt;\n\r\n--bcaec5215d95e3ede504adfbabb7\r\nContent-Type: text/html; charset=windows-1252\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nA couple of things I keep in mind when designing REST APIs:&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;=\r\ndiv&gt;* For CRUD-based functionality, it is not uncommon for there to be a re=\r\nlatively 1:1 mapping&lt;/div&gt;&lt;div&gt;=A0 between available CRUD operations and co=\r\nrresponding web service endpoints (using&lt;/div&gt;\n&lt;div&gt;=A0 appropriate HTTP ve=\r\nrbs, of course).&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;* For more complex workflows, lik=\r\ne a shopping cart, the REST API should be defined&lt;/div&gt;&lt;div&gt;=A0 as a state =\r\nmachine (from the client&#39;s viewpoint), which might be totally divorced =\r\nfrom&lt;/div&gt;\n&lt;div&gt;=A0 the internal functionality on the server.&lt;/div&gt;&lt;div&gt;&lt;br=\r\n&gt;&lt;/div&gt;&lt;div&gt;Rickard&#39;s biggest complaint in the article you reference is=\r\n that many/most APIs that claim to be RESTful do not actually obey the hype=\r\nrmedia (a.k.a. HATEOAS) constraint, and include URIs for the client to use =\r\nfor initiating state changes. =A0In the shopping cart case, for example, th=\r\ne representation returned to the user should include the current state of t=\r\nhe cart (to obey the statelessness constraint), &lt;b&gt;and&lt;/b&gt;=A0a URI for the =\r\nclient to use for initiating a checkout operation.&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;di=\r\nv&gt;Even in a simple CRUD application, the notion of hypermedia links is usef=\r\nul. =A0As one example, we (Jive Software) have an API that supports documen=\r\nts that can be stored in various containers, and the documents themselves c=\r\nan have read-only or read/write permissions for a particular user. =A0When =\r\nyou retrieve a document object from our API, you&#39;ll get, among other th=\r\nings, a JSON &quot;resources&quot; element with a &quot;self&quot; sub-elem=\r\nent, like this:&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;{&lt;/div&gt;&lt;div&gt;=A0 =A0 ...&lt;/div&gt;&lt;div=\r\n&gt;=A0 =A0 &quot;resources&quot; : {&lt;/div&gt;&lt;div&gt;=A0 =A0 =A0 =A0 &quot;self&quo=\r\nt; : {&lt;/div&gt;&lt;div&gt;=A0 =A0 =A0 =A0 =A0 =A0 &quot;ref&quot; : &quot;&lt;a href=3D=\r\n&quot;http://example.com/documents/1234&quot;&gt;http://example.com/documents/1234&lt;/a&gt;&q=\r\nuot;,&lt;/div&gt;\n&lt;div&gt;=A0 =A0 =A0 =A0 =A0 =A0 &quot;allowed&quot; : [ &quot;GET&=\r\nquot;, &quot;PUT&quot;, &quot;DELETE&quot; ]&lt;/div&gt;&lt;div&gt;=A0 =A0 =A0 =A0 }&lt;/d=\r\niv&gt;&lt;div&gt;=A0 =A0 =A0 =A0 ...&lt;/div&gt;&lt;div&gt;=A0 =A0 }&lt;/div&gt;&lt;div&gt;=A0 =A0 ...&lt;/div&gt;=\r\n&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The fact that &quot;PUT&quot; and &quot;DEL=\r\nETE&quot; are included identifies the fact that the requesting user is enti=\r\ntled to update or delete this document (a user who had only read access wou=\r\nld see only the &quot;GET&quot; verb). =A0Further, a client doesn&#39;t nee=\r\nd to know anything about how URIs are composed -- they just look up links b=\r\nased on the resources key and treat the URI as an opaque string.&lt;/div&gt;\n&lt;div=\r\n&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;As the &quot;...&quot; implies, we offer links to a lot of =\r\nresources related to the document (such as a way to retrieve comments about=\r\n it, or to &quot;like&quot; it or &quot;share&quot; it, as well as the HTML=\r\n representation of this document for use in a browser) in the resources ele=\r\nment. =A0The primary coupling between the client and the server, for a part=\r\nicular representation, is that the client needs to understand the resource =\r\nkeys it needs to perform its own functionality. =A0But, a well-behaved clie=\r\nnt should also ignore any resource keys it does not understand. =A0Changes =\r\nin the set of resource keys available, or even in the actual URIs, are tota=\r\nlly transparent to the client, leading to one of the other benefits of REST=\r\n -- you can change the representations, and even the URI structure of your =\r\napp, without breaking old clients.&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Obeying REST c=\r\nonstraints is an investment that pays off in evolvability of your applicati=\r\non. =A0This isn&#39;t necessarily valuable in every single scenario (even i=\r\nn our app&#39;s own HTML/JS/CSS UI, we allow the UI team to design complete=\r\nly purpose-driven REST-ish APIs that are not published to external clients,=\r\n and evolve them in backwards-incompatible manners because they control bot=\r\nh the front end and the back end), but when it is appropriate, you gain the=\r\n benefits pretty much from the first time you do a substantial evolution of=\r\n the API, and again every time after that.&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Craig =\r\nMcClanahan&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;br&gt;&lt;=\r\ndiv class=3D&quot;gmail_quote&quot;&gt;On Wed, Sep 28, 2011 at 12:01 AM, Dan Haywood &lt;sp=\r\nan dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:dan@...&quot;&gt;dan@hayw=\r\nood-associates.co.uk&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;\n&lt;blockquote class=3D&quot;gmail_q=\r\nuote&quot; style=3D&quot;margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1e=\r\nx;&quot;&gt;\n\n\n&lt;u&gt;&lt;/u&gt;\n\n\n\n\n\n\n\n\n\n\n&lt;div style=3D&quot;background-color:#fff&quot;&gt;\n&lt;span&gt;=A0&lt;/s=\r\npan&gt;\n\n\n&lt;div&gt;\n  &lt;div&gt;\n\n\n    &lt;div&gt;\n      \n      \n      &lt;p&gt;Hi Mike,&lt;br&gt;\nThanks=\r\n for the response, makes sense.&lt;br&gt;\n&lt;br&gt;\nSo let me ask, given in the server=\r\n that I *do* have a domain object &lt;br&gt;\ngraph of entities, and given I&#39;v=\r\ne invented a mechanism to represent &lt;br&gt;\nthose entities using hypermedia co=\r\nntrols (eg represent associations &lt;br&gt;\nbetween objects as links between the=\r\nir corresponding representations, &lt;br&gt;\nallow arbitrary operations on object=\r\ns to be invoked via forms), is there &lt;br&gt;\na problem with this?&lt;br&gt;\n&lt;br&gt;\nYou=\r\nr response only seems to require these hypermedia controls, so I &lt;br&gt;\ncan&#=\r\n39;t see that there&#39;d be any objection.  Yet there are articles (eg &lt;br=\r\n&gt;\nRickard Oberg&#39;s javalobby article [1]) that seem to argue otherwise?&lt;=\r\nbr&gt;\n&lt;br&gt;\nDan&lt;br&gt;\n&lt;br&gt;\n[1] &lt;a href=3D&quot;http://java.dzone.com/articles/domain-=\r\nmodel-rest-anti-pattern&quot; target=3D&quot;_blank&quot;&gt;http://java.dzone.com/articles/d=\r\nomain-model-rest-anti-pattern&lt;/a&gt;&lt;/p&gt;&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;div class=3D&quot;h5&quot;&gt;&lt;br&gt;=\r\n\n&lt;br&gt;\nOn 27/09/2011 21:39, mike amundsen wrote:&lt;br&gt;\n&gt; To better support =\r\nevolability over time, REST-style implementations&lt;br&gt;\n&gt; rely on the medi=\r\na type as the only &quot;shared understanding&quot; between&lt;br&gt;\n&gt; client=\r\n and server. Clients do not rely on a list of procedures (RPC),&lt;br&gt;\n&gt; an=\r\n object-graph (OO), or a list of fixed URIs, etc. in order to make&lt;br&gt;\n&gt;=\r\n requests and process results. Clients are &quot;bound&quot; not to the obj=\r\nect&lt;br&gt;\n&gt; model, view, etc, but to the media type and the hypermedia ele=\r\nments&lt;br&gt;\n&gt; (links and forms, etc.) within that media type definition.&lt;b=\r\nr&gt;\n&gt;&lt;br&gt;\n&gt; This binding to the hypermedia controls within a media typ=\r\ne means&lt;br&gt;\n&gt; changes on the server in the RPC list, object model, URIs =\r\nused to&lt;br&gt;\n&gt; expose functionality, etc. will have no &quot;breaking eff=\r\nect&quot; on the&lt;br&gt;\n&gt; client (since the client only cares about the hyp=\r\nermedia controls&lt;br&gt;\n&gt; themselves). And that means the two parties and i=\r\nndependently evolve&lt;br&gt;\n&gt; over time (use new procedure lists, add/remove=\r\n object models, etc.)&lt;br&gt;\n&gt; w/o running the risk of &quot;breaking&quot;=\r\n each other (as long as it is the&lt;br&gt;\n&gt; hypermedia controls that are use=\r\nd as &quot;shared understanding&quot;).&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; For this reason, =\r\nwhat is represented by a response *does* matter, but&lt;br&gt;\n&gt; not in ways t=\r\nraditionally understood by &quot;local&quot; programming models&lt;br&gt;\n&gt; (R=\r\nPC, OO, etc.). What is represented is that _state_ of the app, not&lt;br&gt;\n&gt;=\r\n the programming style (OO, etc.) of the server implementation.&lt;br&gt;\n&gt;&lt;br=\r\n&gt;\n&gt; Hopefully that makes some sense&lt;g&gt;.&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; mca&lt;br&gt;\n=\r\n&gt; &lt;a href=3D&quot;http://amundsen.com/blog/&quot; target=3D&quot;_blank&quot;&gt;http://amundse=\r\nn.com/blog/&lt;/a&gt;&lt;br&gt;\n&gt; &lt;a href=3D&quot;http://twitter.com@mamund&quot; target=3D&quot;_b=\r\nlank&quot;&gt;http://twitter.com@mamund&lt;/a&gt;&lt;br&gt;\n&gt; &lt;a href=3D&quot;http://mamund.com/f=\r\noaf.rdf#me&quot; target=3D&quot;_blank&quot;&gt;http://mamund.com/foaf.rdf#me&lt;/a&gt;&lt;br&gt;\n&gt;&lt;br=\r\n&gt;\n&gt;&lt;br&gt;\n&gt;&lt;br&gt;\n&gt;&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; On Mon, Sep 26, 2011 at 02:57, &lt;=\r\na href=3D&quot;mailto:danhaywood%40ymail.com&quot; target=3D&quot;_blank&quot;&gt;danhaywood@ymail=\r\n.com&lt;/a&gt;&lt;br&gt;\n&gt; &lt;&lt;a href=3D&quot;mailto:dan%40haywood-associates.co.uk&quot; tar=\r\nget=3D&quot;_blank&quot;&gt;dan@...&lt;/a&gt;&gt;  wrote:&lt;br&gt;\n&gt;&gt; ..=\r\n. or doesn&#39;t it matter?&lt;br&gt;\n&gt;&gt;&lt;br&gt;\n&gt;&gt; The consensus would s=\r\neem to be to for the former (use cases + view models).  On the other hand, =\r\nall representations have a media type, the point of which is to allow the c=\r\nlient and server to evolve independently.  That being the case, why does it=\r\n matter what is being represented?&lt;br&gt;\n\n&gt;&gt;&lt;br&gt;\n&gt;&gt; Thanks in adv=\r\nance&lt;br&gt;\n&gt;&gt; Dan&lt;br&gt;\n&gt;&gt;&lt;br&gt;\n&gt;&gt;&lt;br&gt;\n&gt;&gt;&lt;br&gt;\n&gt;&gt; -=\r\n-----------------------------------&lt;br&gt;\n&gt;&gt;&lt;br&gt;\n&gt;&gt; Yahoo! Groups=\r\n Links&lt;br&gt;\n&gt;&gt;&lt;br&gt;\n&gt;&gt;&lt;br&gt;\n&gt;&gt;&lt;br&gt;\n&gt;&gt;&lt;br&gt;\n&lt;br&gt;&lt;/div&gt;&lt;/=\r\ndiv&gt;\n-- &lt;br&gt;\nDan Haywood&lt;br&gt;\nconsultant, mentor, developer, author&lt;br&gt;\nagil=\r\ne, ddd, oo, java, .net, sybase&lt;br&gt;\nMA (Oxon), MBCS, CITP, CEng&lt;br&gt;\nmailto:&lt;=\r\na href=3D&quot;mailto:dan%40haywood-associates.co.uk&quot; target=3D&quot;_blank&quot;&gt;dan@hayw=\r\nood-associates.co.uk&lt;/a&gt;&lt;br&gt;\nphone: &lt;a href=3D&quot;tel:%2B44%20%280%297961%2014=\r\n4286&quot; value=3D&quot;+447961144286&quot; target=3D&quot;_blank&quot;&gt;+44 (0)7961 144286&lt;/a&gt;&lt;br&gt;\n=\r\nskype: danhaywood&lt;br&gt;\ntwitter: &lt;a href=3D&quot;http://twitter.com/dkhaywood&quot; tar=\r\nget=3D&quot;_blank&quot;&gt;http://twitter.com/dkhaywood&lt;/a&gt;&lt;br&gt;\nblog: &lt;a href=3D&quot;http:/=\r\n/danhaywood.com&quot; target=3D&quot;_blank&quot;&gt;http://danhaywood.com&lt;/a&gt;&lt;br&gt;\nweb: &lt;a hr=\r\nef=3D&quot;http://www.haywood-associates.co.uk&quot; target=3D&quot;_blank&quot;&gt;http://www.hay=\r\nwood-associates.co.uk&lt;/a&gt;&lt;br&gt;\nlinkedin: &lt;a href=3D&quot;http://uk.linkedin.com/i=\r\nn/dkhaywood&quot; target=3D&quot;_blank&quot;&gt;http://uk.linkedin.com/in/dkhaywood&lt;/a&gt;&lt;br&gt;\n=\r\nopen source: &lt;a href=3D&quot;http://incubator.apache.org/isis&quot; target=3D&quot;_blank&quot;=\r\n&gt;http://incubator.apache.org/isis&lt;/a&gt;&lt;br&gt;\nbook: &lt;a href=3D&quot;http://pragprog.=\r\ncom/titles/dhnako&quot; target=3D&quot;_blank&quot;&gt;http://pragprog.com/titles/dhnako&lt;/a&gt;&lt;=\r\nbr&gt;\nsybase: &lt;a href=3D&quot;http://sybtraining.co.uk&quot; target=3D&quot;_blank&quot;&gt;http://s=\r\nybtraining.co.uk&lt;/a&gt;&lt;br&gt;\n&lt;br&gt;\n&lt;p&gt;&lt;/p&gt;\n\n    &lt;/div&gt;\n     \n\n    \n    &lt;div styl=\r\ne=3D&quot;color:#fff;min-height:0&quot;&gt;&lt;/div&gt;\n\n\n&lt;/div&gt;\n\n\n\n  \n\n\n\n\n\n\n&lt;/blockquote&gt;&lt;/di=\r\nv&gt;&lt;br&gt;&lt;/div&gt;\n\r\n--bcaec5215d95e3ede504adfbabb7--\r\n\n"}}
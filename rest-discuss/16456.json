{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"Tg5vMoFXb-8Sw5QGK3Jmhzl_Dq2qLswFBD8AOQ_QjywW8b2Qz2XIBs40O5H5un7BU2fyNRYDRe4SdncGCmCgN5QMxqFH8wInYbV8dJyS7A","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Re: REST, HTTP, Web, Internet [was Atom feed vs. list of orders]","postDate":"1283814462","msgId":16456,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMTAwOTA2MTcwNzQyLjhlM2E2OWM4LmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","inReplyToHeader":"PEFBTkxrVGlrX2QrT3UwWnZHX19QdnBkMkVzMHdTZzZRZWNiNmdmRDZ5eDM1dEBtYWlsLmdtYWlsLmNvbT4=","referencesHeader":"PDIwMTAwOTA0MTQxMzM5LjFkYjI5OWZhLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPGk1djd1bCtwMnNrQGVHcm91cHMuY29tPgk8MjAxMDA5MDUxMjE5MDEuMDdkNmE2M2YuZXJpY0BiaXNvbnN5c3RlbXMubmV0Pgk8QUFOTGtUaT1PX1A1R1cwdzBweXBGYWtmVHR0NjF0WjFlPTc4dkYwc1ZNSHZqQG1haWwuZ21haWwuY29tPgk8MjAxMDA5MDUxNTQ3NDguMTQ3YWNiZjguZXJpY0BiaXNvbnN5c3RlbXMubmV0Pgk8QUFOTGtUaWtfZCtPdTBadkdfX1B2cGQyRXMwd1NnNlFlY2I2Z2ZENnl4MzV0QG1haWwuZ21haWwuY29tPg=="},"prevInTopic":16454,"nextInTopic":16457,"prevInTime":16455,"nextInTime":16457,"topicId":16269,"numMessagesInTopic":139,"msgSnippet":"... Right -- REST defers the specifics to the protocol.  HTTP explicitly defines the IANA registry and discourages unregistered types.  Since no other","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 96980 invoked from network); 6 Sep 2010 23:07:38 -0000\r\nX-Received: from unknown (66.196.94.107)\n  by m12.grp.re1.yahoo.com with QMQP; 6 Sep 2010 23:07:38 -0000\r\nX-Received: from unknown (HELO mxout-08.mxes.net) (216.86.168.183)\n  by mta3.grp.re1.yahoo.com with SMTP; 6 Sep 2010 23:07:38 -0000\r\nX-Received: from bigbison (unknown [65.117.211.162])\n\t(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))\n\t(No client certificate requested)\n\tby smtp.mxes.net (Postfix) with ESMTPSA id 27D52509D9;\n\tMon,  6 Sep 2010 19:07:36 -0400 (EDT)\r\nDate: Mon, 6 Sep 2010 17:07:42 -0600\r\nTo: Mike Kelly &lt;mike@...&gt;\r\nCc: William Martinez Pomares &lt;wmartinez@...&gt;,\n rest-discuss@yahoogroups.com\r\nMessage-Id: &lt;20100906170742.8e3a69c8.eric@...&gt;\r\nIn-Reply-To: &lt;AANLkTik_d+Ou0ZvG__Pvpd2Es0wSg6Qecb6gfD6yx35t@...&gt;\r\nReferences: &lt;20100904141339.1db299fa.eric@...&gt;\n\t&lt;i5v7ul+p2sk@...&gt;\n\t&lt;20100905121901.07d6a63f.eric@...&gt;\n\t&lt;AANLkTi=O_P5GW0w0pypFakfTtt61tZ1e=78vF0sVMHvj@...&gt;\n\t&lt;20100905154748.147acbf8.eric@...&gt;\n\t&lt;AANLkTik_d+Ou0ZvG__Pvpd2Es0wSg6Qecb6gfD6yx35t@...&gt;\r\nOrganization: Bison Systems Corporation\r\nX-Mailer: Sylpheed 3.0.3 (GTK+ 2.10.14; i686-pc-mingw32)\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nSubject: Re: [rest-discuss] Re: REST, HTTP, Web, Internet [was Atom feed vs.\n list of orders]\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\nMike Kelly wrote:\n&gt;\n&gt; &gt; No. =A0REST _requires_ &quot;a shared understanding of d=\r\nata types with\n&gt; &gt; metadata.&quot; =A0If nobody understands your data type then =\r\nthe\n&gt; &gt; constraint is violated, regardless of any other control data that\n&gt;=\r\n &gt; may be present, regardless of protocol.\n&gt; \n&gt; I am aware of that. Unfortu=\r\nnately, that says nothing about the\n&gt; scope/ubiquity of that shared underst=\r\nanding, or how that should be\n&gt; established and controlled over time.\n&gt; \n\nR=\r\night -- REST defers the specifics to the protocol.  HTTP explicitly\ndefines=\r\n the IANA registry and &quot;discourages&quot; unregistered types.  Since\nno other me=\r\nchanism is defined for the Web, REST&#39;s meaning in that\ncontext is clear -- =\r\nyou MUST use some standardized media type that\nexists in the IANA registry,=\r\n otherwise nobody will understand your data\ntype.\n\nUbiquity is neither esta=\r\nblished nor controlled over time -- scalability\nis anarchic, and re-use is =\r\nserendipitous.  If the anal-retentive\nsysadmins out there haven&#39;t explicitl=\r\ny allowed the type you&#39;re using,\nit will at best be ignored.  You can&#39;t con=\r\ntrol them, but you can\ncontrol the ubiquity of the identifiers you choose, =\r\ngiving your traffic\nthe best chance to scale.\n\n&gt;\n&gt; Self-descriptiveness/vis=\r\nibility is a spectrum in which systems land\n&gt; according to many different c=\r\nomponents, one of which is ubiquity\n&gt; and/or standardisation of media types=\r\n.\n&gt; \n\nSelf-descriptiveness is simple.  Any standard pointed to by any\nregis=\r\ntered identifier will do, on the Web, as far as REST is concerned.\nThe fact=\r\n that anybody can follow their nose from the registry to the\nstandard is wh=\r\nat makes for visibility, the ubiquity of the media type\nhas no impact there=\r\n.  HTML is no more visible where messaging is\nconcerned, than a Rand Paul s=\r\ntandard with a registered identifier.\n\n&gt;\n&gt; Suggesting that HTTP messages th=\r\nat contain non-standard media types\n&gt; entirely violate the self-descriptive=\r\nness constraint to a degree that\n&gt; they cannot be considered &quot;RESTful&quot; is r=\r\nidiculous, Eric.\n&gt;\n\nNo, what&#39;s ridiculous is banking on none of the sysadmi=\r\nns whose\nintermediaries your traffic traverses, believing any of the 1,001\n=\r\nreasons to not cache, or even to block, unknown media types.\n\nDon&#39;t separat=\r\ne my point from its context -- what I&#39;m saying applies for\nthe Web.  The on=\r\nly place *anyone* operating an intermediary knows to\nlook in order to figur=\r\ne out what standard it&#39;s associated with, is the\nIANA registry, by definiti=\r\non.  &quot;Visibility&quot; doesn&#39;t mean you can look\nit up on Google, it means _foll=\r\now the spec_.  Saying otherwise is\ntilting at windmills.\n\n&gt;\n&gt; Such messages=\r\n still benefit from a more than significant proportion\n&gt; of existing Web in=\r\nfrastructure such as client and server libraries,\n&gt; as well as the best exa=\r\nmple of intermediate processing of\n&gt; self-descriptive messages; _caching_.\n=\r\n&gt; \n\nYou&#39;re assuming that all intermediaries your traffic traverses are\nmere=\r\nly caches?  What about antivirus gateways, which aren&#39;t limited to\nSMTP tra=\r\nffic anymore?  Or, just a plain old SOCKS gateway in a\ncorporate firewall, =\r\nor any other proxy, not to mention the thriving\nmarket for ISP/corporate ac=\r\ncelerator products which do things like\npredictive DNS lookups and link pre=\r\nfetching?\n\nThe deployed infrastructure of the Web includes all sorts of dev=\r\nices.\nOne thing holds true for *all* of them:  configuration by media type.=\r\n\nSysadmins have been known to block all java or javascript traffic over\nHTT=\r\nP when hardening networks or systems, how can you bank on them\nallowing unk=\r\nnowns when they&#39;re filtering by knowns?  Even if we do\nconfine the discussi=\r\non to caches, why bother caching any but the\nubiquitous types that make up =\r\n99% of your traffic?\n\nSquid, for example, has the configuration directives =\r\nof &#39;req_mime_type&#39;\nand &#39;rep_mime_type&#39; which are definable Access Control L=\r\nists.  I&#39;ve\nnever heard of any intermediary which lacks such a configuratio=\r\nn option.\nYou&#39;re making huge assumptions if you think your opaque-identifie=\r\nr\nresponses are cached, or even allowed to pass.  O&#39;Reilly&#39;s &quot;Squid&quot; book\ne=\r\nven gives an example of blocking unknown types to prevent tunneling.\n\nI&#39;d p=\r\nrefer to follow REST, where I&#39;m banking on the ubiquity of my\nidentifier to=\r\n ensure caching, not the presence of any control data\nwhich intermediaries =\r\nmay never otherwise consider.  I don&#39;t want any\nend-user&#39;s paranoid antivir=\r\nus gateway blocking all outgoing MIME types\nexcept for a few ubiquitous ide=\r\nntifiers on an allow list.  I want to\ntake advantage of the deployed infras=\r\ntructure of accelerators with\npredictive lookahead algorithms for a small n=\r\number of ubiquitous\nidentifiers.  And so on and so forth -- of *course* thi=\r\ns is what REST\nadvocates on the Web, this still shouldn&#39;t be controversial =\r\nat all.\n\n&gt;\n&gt; &gt; REST doesn&#39;t _require_ an HTTP response message\n&gt; &gt; with a p=\r\nayload (or not, considering HEAD) to have _any_ response\n&gt; &gt; headers beside=\r\ns Status, Content-Type, and one or the other of\n&gt; &gt; Content-Length or &#39;Tran=\r\nsfer-Coding: chunked&#39;.\n&gt; \n&gt; Really? Caching is a REST constraint. It is a f=\r\norm of layering that\n&gt; relies on self-descriptiveness of messages.\n&gt; \n\nCare=\r\nful -- there&#39;s no REST constraint being broken by setting certain\nresponses=\r\n to be uncacheable, or excluding cache-control headers.\nGopher doesn&#39;t meet=\r\n this constraint, because Gopher traffic is\ninherently uncacheable.  There&#39;=\r\ns nothing inherently uncacheable about\nHTTP traffic (except for responses t=\r\nhat are explicitly defined as\nuncacheable), allowing the system to decide w=\r\nhat&#39;s best on a resource-\nby-resource basis.  The nature of the deployed ar=\r\nchitecture is that\nsuch traffic may just get cached anyway, the only soluti=\r\non to which is\nto use HTTPS.\n\n&gt;\n&gt; &quot;Cache constraints require that the data =\r\nwithin a response to a\n&gt; request be implicitly or explicitly labeled as cac=\r\nheable or\n&gt; non-cacheable&quot;\n&gt; \n&gt; A lack of cache-control headers is an impli=\r\ncit form of\n&gt; self-descriptiveness, and fulfills a fundamental REST constra=\r\nint. So\n&gt; it is quite important, actually.\n&gt; \n\nThis is a protocol concern, =\r\nnot a REST concern.  I agree with you that\na lack of any cache-control head=\r\ners in an HTTP response is implicitly\nlabeled as uncacheable, and that it v=\r\niolates no REST constraint.  And I\nagree with you that the presence or abse=\r\nnce of cache-control headers is\npart of self-descriptive messaging.  But I =\r\nstill maintain that the most\nimportant aspect of self-descriptive messaging=\r\n on the Web is to use\nregistered identifiers pointing to standardized types=\r\n, because Content-\nType&#39;s value determines whether any intermediary will ev=\r\nen evaluate any\nother headers, with a degree of certainty that just doesn&#39;t=\r\n otherwise\nexist.\n\n&gt;\n&gt; &gt; Gopher also supports self-descriptive messaging by=\r\n using media type\n&gt; &gt; identifiers. =A0This holds true for *any* protocol th=\r\nat has a concept\n&gt; &gt; of resource vs. representation. =A0If the server doesn=\r\n&#39;t specify a\n&gt; &gt; processing model, the entity is *meaningless* no matter ho=\r\nw much\n&gt; &gt; other control data is present, unless clients and intermediaries=\r\n\n&gt; &gt; resort to introspection -- which clearly violates REST.\n&gt; \n&gt; No.. the =\r\nserver *can* specify a processing model - by specifying a\n&gt; custom type ide=\r\nntifier (i.e. non-IANA-registered) in the Content-Type\n&gt; header.\n&gt; \n\nNot wi=\r\nthout violating REST, it can&#39;t, on the Web.  You simply can&#39;t\nbank on any i=\r\nntermediary doing anything predictable where opaque\nidentifiers are concern=\r\ned.  Rejecting unknown identifiers at the\nfirewall is a standard hardening =\r\ntechnique which may be implemented\nusing any HTTP proxy, the most ubiquitou=\r\ns example being Squid.\n\n&gt;\n&gt; Why should an intermediary like a cache or a re=\r\nverse proxy router need\n&gt; to introspect the entity at all?\n&gt; \n\nYou&#39;re appar=\r\nently unfamiliar with the Web accelerator market.  The most\nfamous example,=\r\n which wrought havoc and destruction in its wake and is\nno longer available=\r\n, was the infamous &quot;Google Web Accelerator&quot; product.\nAntivirus gateways wil=\r\nl introspect images of types with known\ncompromises.  The point is, you can=\r\n&#39;t know, but you can play to the\ndeployed architecture by sticking with ubi=\r\nquitous identifiers *because*\nyou can&#39;t know.\n\n&gt;\n&gt; What are these illusive,=\r\n yet apparently invaluable and ubiquitous, web\n&gt; intermediaries that proces=\r\ns the entity body (and therefore *actually\n&gt; rely* on its self-descriptiven=\r\ness)?!\n&gt; \n\nThis Wikipedia page lists a whole bunch of accelerators:\n\nhttp:/=\r\n/en.wikipedia.org/wiki/Web_accelerator\n\nThere&#39;s a list of pricey big-vendor=\r\n alternatives here:\n\nhttp://www.infoworld.com/ifwclassic/weblog//tcdaily/ar=\r\nchives/2008/06/load_balancers.html\n\nF5, Foundry, Juniper, Cisco etc. all pl=\r\nay in this market, and all are\nconfigurable by media type, and why would an=\r\nyone who is spending all\nthat money want to waste their resources caching c=\r\nontent with opaque\nidentifiers at the expense of content with ubiquitous id=\r\nentifiers, when\nthe latter accounts for 99% of traffic?\n\nThat&#39;s quite a dep=\r\nloyed architecture out there, that&#39;s mostly\nconfigured to ignore all but a =\r\nhandful of ubiquitous types.\n\n&gt; \n&gt; The value you are (correctly) attributin=\r\ng to the media type identifier\n&gt; is derived from it&#39;s incorporation to a gi=\r\nven protocol, such as HTTP,\n&gt; for the purposes of negotiating a  representa=\r\ntion - it&#39;s role is as an\n&gt; identifier first and foremost, and it makes ver=\r\ny little difference\n&gt; whether that identifier is opaque or otherwise. This =\r\nis why clients\n&gt; and servers can happily negotiate non-standard media type\n=\r\n&gt; representations via HTTP, as can intermediaries cache them.\n&gt; \n\nBut it ma=\r\nkes all the difference in the world.  The Web&#39;s security\narchitecture is ba=\r\nsed on the IANA registry.  Opaque identifiers are\nmost likely treated just =\r\nlike opaque HTTP methods -- ignored, if not\ntaken for tunneling.  When usin=\r\ng ubiquitous identifiers, the percentage\nof intermediaries *unlikely* to pa=\r\nrticipate in the communication beyond\njust acting as routers, is statistica=\r\nlly insignificant.  When using\nopaque identifiers, the percentage of interm=\r\nediaries *likely* to\nparticipate in the communication beyond just acting as=\r\n routers, is\nlikewise statistically insignificant.\n\nSelf-descriptiveness is=\r\n easily met by using IANA-registered identifiers\npointing to standardized t=\r\nypes.  Roy&#39;s &quot;gray area of increasing\nRESTfulness&quot; is all about the ubiquit=\r\ny of the chosen identifier --\nanarchic scalability and serendipitous re-use=\r\n are achieved by going\nwith the flow of the deployed architecture, on the W=\r\neb.  The only\ncertainty with that deployed architecture, is the use of ubiq=\r\nuitous\nidentifiers will fail to cache on an insignificant number of caches.=\r\n\nNo such certainty exists with opaque identifiers, which don&#39;t even meet\nth=\r\ne self-descriptive messaging constraint which, on the Web, requires\nregiste=\r\nred identifiers pointing to published standards.\n\n-Eric\n\n"}}
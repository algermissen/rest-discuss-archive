{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"5VOwHXLmxlomhFlZ0HxgUTBOnThW3VGPC5xBHHhE2-INoWus4w7MIeKb_HnraBbBuZXZy4LE37FtwdM6NhrbRhz9SfwOPkzOavtM-PRdcw","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] An approach to deleting multiple resources use one  DELETE","postDate":"1237454138","msgId":12263,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMDkwMzE5MDMxNTM4LjU4OWVmN2E2LmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","inReplyToHeader":"PDUwMzdiNmU0MDkwMzE5MDExOGgzOGI4ZjA0ZHk0M2ViMTcxOGEyMGIxMjhjQG1haWwuZ21haWwuY29tPg==","referencesHeader":"PGU3OGJkYmMwMDkwMjI0MDczOHY0ODRkNmU5NGg0NDQ5ZWIwYjY3YTI4ZDJlQG1haWwuZ21haWwuY29tPgk8NTAzN2I2ZTQwOTAzMTgwOTU3ZzcwYzI2ZDU4cTZmY2Q4OWVjYmQyMzBjOTdAbWFpbC5nbWFpbC5jb20+CTwyMDA5MDMxODE1MTkzNi40OTMzOWZlNC5lcmljQGJpc29uc3lzdGVtcy5uZXQ+CTw1MDM3YjZlNDA5MDMxODE0MjVwNjZjYTU3OGV1ZjY1YjM0MDI3Y2RjYjhhZUBtYWlsLmdtYWlsLmNvbT4JPDIwMDkwMzE4MTYzNjAxLjQwNDdkMDZiLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPDUwMzdiNmU0MDkwMzE4MTYzOG41NWFhYzdlMG4zN2QyMmRjM2JjMTRiMTcwQG1haWwuZ21haWwuY29tPgk8MjAwOTAzMTgyMTA1MjcuZmU0MmRhZmUuZXJpY0BiaXNvbnN5c3RlbXMubmV0Pgk8NTAzN2I2ZTQwOTAzMTkwMDQxcjUzNjBlMDhkaWY3MThlMjcwNDkwNDBhOWNAbWFpbC5nbWFpbC5jb20+CTwyMDA5MDMxOTAyMDYwMy4yOTk0MGFlNi5lcmljQGJpc29uc3lzdGVtcy5uZXQ+CTw1MDM3YjZlNDA5MDMxOTAxMThoMzhiOGYwNGR5NDNlYjE3MThhMjBiMTI4Y0BtYWlsLmdtYWlsLmNvbT4="},"prevInTopic":12262,"nextInTopic":12265,"prevInTime":12262,"nextInTime":12264,"topicId":12154,"numMessagesInTopic":112,"msgSnippet":"... Client behavior and server behavior are both opaque to REST.  However, clients and servers are constrained in how they may talk to one another by the","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 61045 invoked from network); 19 Mar 2009 09:15:23 -0000\r\nX-Received: from unknown (69.147.108.200)\n  by 98.137.34.37 with QMQP; 19 Mar 2009 09:15:23 -0000\r\nX-Received: from unknown (HELO mxout-08.mxes.net) (216.86.168.183)\n  by mta1.grp.re1.yahoo.com with SMTP; 19 Mar 2009 09:15:18 -0000\r\nX-Received: from BigBison (unknown [65.117.211.162])\n\t(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))\n\t(No client certificate requested)\n\tby smtp.mxes.net (Postfix) with ESMTPSA id 0D0CAD0B9E;\n\tThu, 19 Mar 2009 05:15:17 -0400 (EDT)\r\nDate: Thu, 19 Mar 2009 03:15:38 -0600\r\nTo: Assaf Arkin &lt;assaf@...&gt;\r\nCc: Dong Liu &lt;edongliu@...&gt;, Rest List &lt;rest-discuss@yahoogroups.com&gt;\r\nMessage-Id: &lt;20090319031538.589ef7a6.eric@...&gt;\r\nIn-Reply-To: &lt;5037b6e40903190118h38b8f04dy43eb1718a20b128c@...&gt;\r\nReferences: &lt;e78bdbc00902240738v484d6e94h4449eb0b67a28d2e@...&gt;\n\t&lt;5037b6e40903180957g70c26d58q6fcd89ecbd230c97@...&gt;\n\t&lt;20090318151936.49339fe4.eric@...&gt;\n\t&lt;5037b6e40903181425p66ca578euf65b34027cdcb8ae@...&gt;\n\t&lt;20090318163601.4047d06b.eric@...&gt;\n\t&lt;5037b6e40903181638n55aac7e0n37d22dc3bc14b170@...&gt;\n\t&lt;20090318210527.fe42dafe.eric@...&gt;\n\t&lt;5037b6e40903190041r5360e08dif718e27049040a9c@...&gt;\n\t&lt;20090319020603.29940ae6.eric@...&gt;\n\t&lt;5037b6e40903190118h38b8f04dy43eb1718a20b128c@...&gt;\r\nOrganization: Bison Systems Corporation\r\nX-Mailer: Sylpheed 2.4.5 (GTK+ 2.10.14; i686-pc-mingw32)\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=US-ASCII\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nSubject: Re: [rest-discuss] An approach to deleting multiple resources use\n one  DELETE\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\nAssaf Arkin wrote:\n\n&gt; \n&gt; I&#39;m not sure where all that client/server dichotomy comes from.\n&gt; \n\nClient behavior and server behavior are both opaque to REST.  However,\nclients and servers are constrained in how they may talk to one another\nby the uniform connector interface.  A server can take multiple actions\nbased on a single request, but a client cannot dictate multiple actions\nto the server by making a single request.\n\nA client can perform multiple actions based on the receipt of one\nresponse, but the server cannot dictate multiple client behaviors\nwithin a response.  For example, a server may redirect a client\nrequest, but it can&#39;t tell the client to also change its request method.\n\nA server may very well send a response which triggers certain scripted\nbehavior on the client, but that isn&#39;t done at the protocol level.  A\nclient may very well send a request which triggers certain scripted\nbehavior on the server, that also isn&#39;t done at the protocol level.\nCommunication between client and server is done at the protocol level,\nby having the client request that a server take one action, limited to\na small number of available methods.  The client never sends\ninstructions to the server in REST.\n\n&gt;\n&gt; In the scenario I proposed the server tells the client how to\n&gt; construct a request that will affect multiple states. For example, a\n&gt; Web email that lets the client delete multiple messages at once by\n&gt; sending a form with one checkbox next to each email.\n&gt; \n\nIf a multiple-delete form is written using Xforms 1.1, then the client\nwill perform discrete DELETE requests against each selected resource,\nand this is perfectly acceptable.  With regular HTML forms, though, the\nmethod is constrained to POST or GET.  So the server is telling the\nclient how to construct a POST request which bypasses the DELETE\nmethod.\n\nThe data sent back to the server takes the form of operating\ninstructions, rather than a request for one specific action to be taken\nagainst one discrete URI.  The uniform interface is not used -- in a\nuniform interface the DELETE method is requested for each URI the\nclient wants to delete.\n\nThe submitted POST in your example resembles what application state?\nCan that application state be retrieved by a GET request?\n\n&gt;\n&gt; I don&#39;t see a client forcing its will on the server, server doing\n&gt; actions not requested by the client, or anything beyond plain HTTP.\n&gt; \n\nSure, it&#39;s HTTP, but HTTP != REST.  In a uniform interface, if the\nclient wants to delete multiple resources, then the client makes a\nDELETE request against each URI to be deleted.  Each request generates\na success/fail response which is visible to intermediaries, allowing\nany caches between the user who requested the delete and the origin\nserver to expire all cached representations of a deleted resource.\nThis is fundamental.\n\nThis cannot happen when special instructions to the server are POSTed\nvia an HTML forms interface.  No intermediary can possibly surmise that\nany deletion has occurred.  POST is borked into meaning deletion\ninstead of its generic-interface meaning of addition.  DELETE has the\ngeneric-interface meaning of deletion, but it isn&#39;t involved in the\ndelete requests at all.\n\nYour comment that the &quot;server isn&#39;t doing any actions not requested by\nthe client&quot; isn&#39;t quite right.  It may look to the user like an HTML\nform allowing deletion, but that isn&#39;t what the client is requesting,\nbecause the request method isn&#39;t DELETE.  So the server is, indeed,\ntaking action (deletion) that has nothing to do with the request method\n(whatever POST means, it doesn&#39;t mean DELETE since that&#39;s its own\nmethod).\n\nSo, yes, deleting resources with some method other than DELETE results\nin an API that does not resemble a uniform interface.  Deleting\nresources using the DELETE method has absolutely no downside, with the\nbenefit of being visible to intermediaries, as envisioned by REST.\n\n-Eric\n\n"}}
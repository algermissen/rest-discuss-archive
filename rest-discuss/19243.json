{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":537489571,"authorName":"Keith Hassen","from":"Keith Hassen &lt;keith.hassen@...&gt;","profile":"erewh0n","replyTo":"SENDER","senderId":"cS1N1NmqpqRkE-hdvV26bPrpJ-hZ3fSGSlRXyArPinV35MjXEZXLppfTGcGejW_yDPGM4gTbBK-oSpsVqFvWhDBhmOa4xTjKr3DWOw","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] API versioning","postDate":"1357619797","msgId":19243,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDlEOTQ1MkIwLUNCNUItNEJGNy04RjE4LUUxMEY2QjVGQTRCNUBnbWFpbC5jb20+","inReplyToHeader":"PDIwMTMwMTA3MjAzNzE5LjViYTNmZGQyLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","referencesHeader":"PGtjZm1jMCthb2lkQGVHcm91cHMuY29tPiA8MjAxMzAxMDcyMDM3MTkuNWJhM2ZkZDIuZXJpY0BiaXNvbnN5c3RlbXMubmV0Pg=="},"prevInTopic":19242,"nextInTopic":19244,"prevInTime":19242,"nextInTime":19244,"topicId":19240,"numMessagesInTopic":13,"msgSnippet":"... Hmm.  I wouldn t say I m using a different language , I m very explicitly using the Content-Type to negotiate the media format (say","rawEmail":"Return-Path: &lt;keith.hassen@...&gt;\r\nX-Sender: keith.hassen@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 40013 invoked from network); 8 Jan 2013 04:36:40 -0000\r\nX-Received: from unknown (98.137.34.44)\n  by m9.grp.sp2.yahoo.com with QMQP; 8 Jan 2013 04:36:40 -0000\r\nX-Received: from unknown (HELO mail-ie0-f170.google.com) (209.85.223.170)\n  by mta1.grp.sp2.yahoo.com with SMTP; 8 Jan 2013 04:36:40 -0000\r\nX-Received: by mail-ie0-f170.google.com with SMTP id k10so8789iea.15\n        for &lt;rest-discuss@yahoogroups.com&gt;; Mon, 07 Jan 2013 20:36:40 -0800 (PST)\r\nX-Received: by 10.50.170.66 with SMTP id ak2mr7825688igc.38.1357619799983;\n        Mon, 07 Jan 2013 20:36:39 -0800 (PST)\r\nReturn-Path: &lt;keith.hassen@...&gt;\r\nX-Received: from [10.99.0.3] (24-246-52-18.cable.teksavvy.com. [24.246.52.18])\n        by mx.google.com with ESMTPS id lu10sm8953733igc.15.2013.01.07.20.36.38\n        (version=TLSv1 cipher=ECDHE-RSA-RC4-SHA bits=128/128);\n        Mon, 07 Jan 2013 20:36:39 -0800 (PST)\r\nContent-Type: text/plain; charset=us-ascii\r\nMime-Version: 1.0 (Apple Message framework v1283)\r\nIn-Reply-To: &lt;20130107203719.5ba3fdd2.eric@...&gt;\r\nDate: Mon, 7 Jan 2013 23:36:37 -0500\r\nContent-Transfer-Encoding: quoted-printable\r\nMessage-Id: &lt;9D9452B0-CB5B-4BF7-8F18-E10F6B5FA4B5@...&gt;\r\nReferences: &lt;kcfmc0+aoid@...&gt; &lt;20130107203719.5ba3fdd2.eric@...&gt;\r\nTo: rest-discuss@yahoogroups.com\r\nX-Mailer: Apple Mail (2.1283)\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Keith Hassen &lt;keith.hassen@...&gt;\r\nSubject: Re: [rest-discuss] API versioning\r\nX-Yahoo-Group-Post: member; u=537489571; y=ccQsuubSAemWAoNASLbvtl-gk4jWV5XKLFLNU9xy_L0fnbNWCO6805twauAjM15l-OF7XUd3s6Wk79A\r\nX-Yahoo-Profile: erewh0n\r\n\r\n&gt; If you&#39;re using a whole different &quot;language&quot; to describe your API each\n&gt; =\r\ntime it changes, you&#39;re missing the point of REST...\n\n\nHmm.  I wouldn&#39;t say=\r\n I&#39;m using a different &quot;language&quot;, I&#39;m very explicitly using the Content-Ty=\r\npe to negotiate the media format (say &quot;vnd.example.com.order+json&quot;).  I can=\r\n imagine a breaking change to the representation of the resource at the URI=\r\n api.example.com/order/[order-id] that can be represented by returning a Co=\r\nntent-Type of &quot;vnd.example.com.order+json;version=3D2&quot; or something similar=\r\n.  Similarly, clients can request that specific version of the resource wit=\r\nh the Accept header set correctly.\n\nThis seems to be a recommended practice=\r\n that I&#39;ve encountered in reading about RESTful implementations.\n\n&gt; Anythin=\r\ng else is up to the user-agent to work out.  This is actually\n&gt; easier for =\r\nm2m than h2m; a v1 m2m client should already ignore any\n&gt; hypertext it does=\r\nn&#39;t understand, rolling out v2 can then re-use any\n&gt; non-deprecated bits of=\r\n the API already present plus the new stuff, and\n&gt; ignore the deprecated st=\r\nuff.  Can&#39;t it?\n\nNot always, at least not in my experience. :)  I have foun=\r\nd that while breaking changes don&#39;t happen often, they *do* happen.  Add to=\r\n this the possibility of different types of API consumers that start off im=\r\nplementing your APIs the same way, but slowly (or rapidly!) diverge over ti=\r\nme.  In some cases new resources (and thus new URIs) will suffice, but in o=\r\nther cases what we are doing is very specifically *evolving* the resource r=\r\nepresentation to accommodate new requirements.\n\n\nOn 2013-01-07, at 10:37 PM=\r\n, Eric J. Bowman wrote:\n\n&gt; &quot;erewh0n&quot; wrote:\n&gt;&gt; \n&gt;&gt; I&#39;m aware of the recomme=\r\nndation to use the content-type header for\n&gt;&gt; specifying version informatio=\r\nn...\n&gt;&gt; \n&gt; \n&gt; If you&#39;re using a whole different &quot;language&quot; to describe your=\r\n API each\n&gt; time it changes, you&#39;re missing the point of REST...\n&gt; \n&gt;&gt; \n&gt;&gt; =\r\nSo for example if we versioned an API with api.example.com/orders/v1\n&gt;&gt; and=\r\n api.example.com/orders/v2, it is straightforward to route requests\n&gt;&gt; for =\r\nv1 to one set of web servers and route requests for v2 to another\n&gt;&gt; set of=\r\n web servers.\n&gt;&gt; \n&gt; \n&gt; Likewise, if you need a whole &#39;nother server farm ea=\r\nch time your API is\n&gt; modified...\n&gt; \n&gt;&gt; \n&gt;&gt; This is also true in-code, wher=\r\ne URI mapping semantics are first-\n&gt;&gt; order concerns for many libraries (e.=\r\ng. using Web API or ServiceStack,\n&gt;&gt; etc, it is straightforward to map URIs=\r\n to controllers or contracts).\n&gt;&gt; \n&gt; \n&gt; Aha!  HTTP frameworks do encourage =\r\nsolving problems at the protocol\n&gt; layer.  What they aren&#39;t much good for, =\r\nunfortunately, is thinking in\n&gt; hypertext.  I don&#39;t want to say there&#39;s no =\r\nversioning in REST, in fact\n&gt; if I PUT an existing image to my server, the =\r\nold image is renamed not\n&gt; removed; there&#39;s a &quot;versioned&quot; API inherent in t=\r\nhis strategy.\n&gt; \n&gt; As to API versioning, do just that, version your hyperte=\r\nxt API -- not\n&gt; your URLs, your conceptual mappings aren&#39;t changing.  Neith=\r\ner should\n&gt; your media type -- I mostly use XHTML to define APIs, that&#39;s as=\r\n detailed\n&gt; a description of the actual API as intermediaries need in order=\r\n to\n&gt; participate in the communication (which they won&#39;t do if you&#39;re just\n=\r\n&gt; &quot;re-labeling&quot; XHTML as custom, versioned media types to conneg around\n&gt; p=\r\nroper hypertext API design).\n&gt; \n&gt; Anything else is up to the user-agent to =\r\nwork out.  This is actually\n&gt; easier for m2m than h2m; a v1 m2m client shou=\r\nld already ignore any\n&gt; hypertext it doesn&#39;t understand, rolling out v2 can=\r\n then re-use any\n&gt; non-deprecated bits of the API already present plus the =\r\nnew stuff, and\n&gt; ignore the deprecated stuff.  Can&#39;t it?\n&gt; \n&gt; -Eric\n\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":201150942,"authorName":"Greg Young","from":"Greg Young &lt;gregoryyoung1@...&gt;","profile":"gumboismadeoffish","replyTo":"SENDER","senderId":"Gqcm6LFeHM4zLLDpAdSbbb81od57LtiT2uRnt8LhwdUe9FPvPAyzyveeK8zNfX1E5xRGXAO2ME4EBe6iUqa-b9fREPsCJgcNrEK-","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Reactive REST","postDate":"1400507674","msgId":19651,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PENBQzlSUXRqNDQydG9NdzVQOEdaVWVSMkwwZnJxcDE1Rmg0PTIyQmtFQV96bi11c0FVd0BtYWlsLmdtYWlsLmNvbT4=","inReplyToHeader":"PDVDMEI3NEJCLTVGRDYtNDZBOC1BMEFGLUJDOERENjg4NDIwM0BnbWFpbC5jb20+","referencesHeader":"PDE0MTU4MTQuNFdXR21uOWNNdUBmdWNoc2lhPgk8NDM3NjcyMTEudGd1TWJqcHJ1aUBmdWNoc2lhPgk8NTM3ODA5QTEuMTA2MDMwN0BiZXJrZWxleS5lZHU+CTwyMDkwNzQ2NS5hT1oyajAzcFRzQGZ1Y2hzaWE+CTw5MDcxNjQxQS0yMzAwLTRENkYtOUY4RC0xRDcxQTk1QkYwNDNAZ21haWwuY29tPgk8NUMwQjc0QkItNUZENi00NkE4LUEwQUYtQkM4REQ2ODg0MjAzQGdtYWlsLmNvbT4="},"prevInTopic":19650,"nextInTopic":19652,"prevInTime":19650,"nextInTime":19652,"topicId":19643,"numMessagesInTopic":14,"msgSnippet":"How does http 2.0 come into play with this with unsolicited pushes? On Mon, May 19, 2014 at 4:49 PM, Philippe Marsteau marsteau@gmail.com[rest-discuss] ... -- ","rawEmail":"Return-Path: &lt;gregoryyoung1@...&gt;\r\nX-Sender: gregoryyoung1@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 40323 invoked by uid 102); 19 May 2014 13:54:35 -0000\r\nX-Received: from unknown (HELO mtaq3.grp.bf1.yahoo.com) (10.193.84.142)\n  by m9.grp.bf1.yahoo.com with SMTP; 19 May 2014 13:54:35 -0000\r\nX-Received: (qmail 20294 invoked from network); 19 May 2014 13:54:35 -0000\r\nX-Received: from unknown (HELO mail-qg0-f44.google.com) (209.85.192.44)\n  by mtaq3.grp.bf1.yahoo.com with SMTP; 19 May 2014 13:54:35 -0000\r\nX-Received: by mail-qg0-f44.google.com with SMTP id i50so8658628qgf.17\n        for &lt;rest-discuss@yahoogroups.com&gt;; Mon, 19 May 2014 06:54:35 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.224.115.135 with SMTP id i7mr46737617qaq.50.1400507675066;\n Mon, 19 May 2014 06:54:35 -0700 (PDT)\r\nX-Received: by 10.140.87.144 with HTTP; Mon, 19 May 2014 06:54:34 -0700 (PDT)\r\nIn-Reply-To: &lt;5C0B74BB-5FD6-46A8-A0AF-BC8DD6884203@...&gt;\r\nReferences: &lt;1415814.4WWGmn9cMu@fuchsia&gt;\n\t&lt;43767211.tguMbjprui@fuchsia&gt;\n\t&lt;537809A1.1060307@...&gt;\n\t&lt;20907465.aOZ2j03pTs@fuchsia&gt;\n\t&lt;9071641A-2300-4D6F-9F8D-1D71A95BF043@...&gt;\n\t&lt;5C0B74BB-5FD6-46A8-A0AF-BC8DD6884203@...&gt;\r\nDate: Mon, 19 May 2014 16:54:34 +0300\r\nMessage-ID: &lt;CAC9RQtj442toMw5P8GZUeR2L0frqp15Fh4=22BkEA_zn-usAUw@...&gt;\r\nTo: Philippe Marsteau &lt;marsteau@...&gt;\r\nCc: Hubert A Le Van Gong &lt;hubertlvg@...&gt;, Michael Schuerig &lt;michael.lists@...&gt;, \n\trest-discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Type: multipart/alternative; boundary=047d7bdcaa8c7a452a04f9c11a31\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nSubject: Re: [rest-discuss] Reactive REST\r\nX-Yahoo-Group-Post: member; u=201150942; y=eWt_Ss2SlU_JP8RPDAAU5Oq5aCnFfO0_e1oW0Ffm9w1zC7ZQ_tKFldcfhh4\r\nX-Yahoo-Profile: gumboismadeoffish\r\nFrom: Greg Young &lt;gregoryyoung1@...&gt;\r\n\r\n\r\n--047d7bdcaa8c7a452a04f9c11a31\r\nContent-Type: text/plain; charset=UTF-8\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nHow does http 2.0 come into play with this with unsolicited pushes?\n\n\nOn Mo=\r\nn, May 19, 2014 at 4:49 PM, Philippe Marsteau\nmarsteau@...[rest-discu=\r\nss]\n&lt;rest-discuss@yahoogroups.com&gt; wrote:\n\n&gt;\n&gt;\n&gt; FWIW, HTTP is an APPLICATI=\r\nON (transfer) protocol and not a TRANPORT\n&gt; protocol. TCP is the transport =\r\nprotocol HTTP uses.\n&gt;\n&gt; I think the benefits of REST architectural style ov=\r\ner Pub/Sub style is the\n&gt; scalability associated to not require servers to =\r\nkeep tracks of clients.\n&gt; The statelessness constraint means a 2nd calls of=\r\n a client\n&gt; shouldn&#39;t/mustn&#39;t assume something on the server following a pr=\r\nevious call,\n&gt; like an HTTP (application) session could be used for on the =\r\nserver).\n&gt; Because of the assessment, you can literally swap one machine wi=\r\nth another\n&gt; (or use true load balancing solutions w/o sharing or distribut=\r\ning caches)\n&gt; without any impacts for the clients open &quot;sessions&quot; (from a c=\r\nlient\n&gt; perspective). To achieve this, any input that a second call needs f=\r\nollowing\n&gt; a first call should be transferred to client after each call (st=\r\nate is\n&gt; transfered to client instead of kept on server).\n&gt;\n&gt; This being sa=\r\nid you certainly can model a pub/sub polling scenario within\n&gt; REST constra=\r\nints. The pushing scenario however do require state on the\n&gt; server that be=\r\nlongs to client. Because the client determines lifecycle of\n&gt; these &quot;push c=\r\nonfig&quot; dynamic resources, eg when to delete it, that data need\n&gt; to be kept=\r\n in sync between machines, and handling* that extra state breaks\n&gt; stateles=\r\nsness of REST (*handling like in auto-expiring subscriptions over\n&gt; time, e=\r\ntc.)\n&gt;\n&gt; The other technical pb of pub/sub over HTTP are firewalls or relat=\r\ned\n&gt; network issues. It is not uncommon that clients have firewalls in plac=\r\ne\n&gt; that let outgoing calls but require IP whitelisting to let calls come i=\r\nn.\n&gt; That further reduces scalability of such model (basically each client =\r\nmust\n&gt; be seen as a server and vice-versa). The clients costs is typically =\r\nhigher\n&gt; than server (clients establish the HTTP connection and close them =\r\nas\n&gt; appropriate for their use cases). This cost is acceptable because you\n=\r\n&gt; usually have many clients for one server. If the server had to pay that\n&gt;=\r\n connection cost (eg to push data), it would be central and all clients\n&gt; w=\r\nould deal with a less responsive server as a result.\n&gt;\n&gt; Finally, pub/sub m=\r\nodel implies a level of trusts normal HTTP app servers\n&gt; do not need to hav=\r\ne. Blindly connecting to any HTTP endpoint opens to\n&gt; security vulnerabilit=\r\nies. The client (subscriber) will typically expect\n&gt; some shared secret or =\r\nkey cert exchange, and the server may not be willing\n&gt; to blindly post data=\r\n to unknown locations.\n&gt;\n&gt; Hope this helps. Interesting discussion. Pub/sub=\r\n scenarios clearly exist\n&gt; and are adapted for some use cases, but I don&#39;t =\r\nthing HTTP transfer\n&gt; protocol is adapted. BTW, Roy&#39;s dissertation did ment=\r\nion Pub/Sub (as well\n&gt; as others) style before describing REST style; refer=\r\n to it to compare the\n&gt; constraints with one another, and why he believed R=\r\nEST style was better\n&gt; suited for scalability.\n&gt;\n&gt; ---\n&gt; Phil\n&gt; On May 19, =\r\n2014 at 2:55:29 AM EDT, Hubert A Le Van Gong\n&gt; hubertlvg@... [rest-di=\r\nscuss] &lt;rest-discuss@yahoogroups.com&gt; wrote:\n&gt;\n&gt;\n&gt;\n&gt; Hi Michael,\n&gt;\n&gt; I don&#39;=\r\nt quite follow why you think a permanent HTTP session is against\n&gt; RESTful =\r\nprinciples. Isn&#39;t the HTTP session management at a different level\n&gt; (trans=\r\nport) than the actual resource management and the stateless\n&gt; principles as=\r\nsociated to it?\n&gt; In the same vein, would you also consider one cannot defi=\r\nne a RESTful\n&gt; service over persistent HTTPS connections for instance?\n&gt;\n&gt;\n=\r\n&gt; Best,\n&gt; Hubert\n&gt;\n&gt;\n&gt; On May 18, 2014, at 8:02 AM, Michael Schuerig michae=\r\nl.lists@...[rest-discuss] &lt;\n&gt; rest-discuss@yahoogroups.com&gt; wrote:\n=\r\n&gt;\n&gt; On Saturday 17 May 2014 18:15:13 Erik Wilde dret@... [rest-\n&gt; =\r\ndiscuss] wrote:\n&gt;\n&gt; &gt; i guess i am having trouble with looking at a connect=\r\nion as a resource\n&gt; &gt; with state (unless you talk about network monitoring =\r\nand management\n&gt; &gt; scenarios, which are an entirely different beast).\n&gt;\n&gt; N=\r\no, a connection isn&#39;t a resource. But keeping a connection open from\n&gt; each=\r\n client to the server puts a strain on the server. Ideally, a\n&gt; RESTful ser=\r\nvice is loaded only &quot;dynamically&quot; in the sense that the\n&gt; (&quot;static&quot;) number=\r\n of clients is irrelevant, what counts is the\n&gt; (&quot;dynamic&quot;) number of reque=\r\nsts per unit of time. My understanding of\n&gt; REST is that this is deliberate=\r\n and very helpful for scalability. Open\n&gt; connections are a strain on a ser=\r\nvice even in the absence of any\n&gt; requests. For one thing, a single server =\r\ncan only manage a limited\n&gt; number of open connections at a time.\n&gt;\n&gt; In RE=\r\nST, at least as far as I understand it(!), state is only supposed\n&gt; to figu=\r\nre as transferred resource state; session state is prohibited.\n&gt;\n&gt; My under=\r\nstanding may be wrong and I&#39;m perfectly willing to tone down the\n&gt; RESTful =\r\nideal for practical purposes. The point I&#39;m trying to make is\n&gt; purely a ma=\r\ntter of classification, ie that I think persistent\n&gt; connections are not RE=\r\nSTful.\n&gt;\n&gt; &gt; but it is entirely possible to envisage that HTTP pull is like=\r\n UPS\n&gt; &gt; ground and free, whereas there may be UPS overnight which costs a =\r\nbit\n&gt; &gt; but is faster. if you do that, you get to specify your identifier, =\r\nand\n&gt; &gt; then (and this is why i call this &quot;reverse REST&quot;) you become the\n&gt; =\r\n&gt; resource to be pushed to, i.e. your resource needs to be known by the\n&gt; &gt;=\r\n event source. there are tons of PubSub approaches out there, only\n&gt; &gt; that=\r\n coming up with one that works robustly and in a scalable at web\n&gt; &gt; scale =\r\nso far hasn&#39;t worked. the main reason is that for pull, sources\n&gt; &gt; don&#39;t n=\r\need to know the consumers, whereas for push that state needs\n&gt; &gt; to be main=\r\ntained, which is expensive.\n&gt;\n&gt; So, is &quot;reverse REST&quot; still RESTful? Yes, t=\r\nhe individual push request\n&gt; from server to client probably qualifies. The =\r\narchitecture as a whole\n&gt; probably doesn&#39;t. As you write, state needs to be=\r\n maintained which\n&gt; hinders scalability.\n&gt;\n&gt; A truly RESTful solution would=\r\n have to do without such state. *I* don&#39;t\n&gt; see how that is possible, but t=\r\nhat&#39;s why I started this discussion.\n&gt;\n&gt; Also, I&#39;d like to repeat that I do=\r\nn&#39;t mean not being RESTful, or not\n&gt; being reactive, as some kind of condem=\r\nnation. Both approaches offer very\n&gt; sensible advice in general, I&#39;m intere=\r\nsted in seeing how well they fit\n&gt; together.\n&gt;\n&gt; [...]\n&gt; &gt; &gt;&gt; a push model.=\r\n there are a variety of push protocols (PuSH, MQTT,\n&gt; &gt; &gt;&gt; APN,\n&gt; &gt; &gt;&gt; C2DM=\r\n, sMAP) out there, but none so far has taken over the world.\n&gt; &gt; &gt;\n&gt; &gt; &gt; I =\r\ndon&#39;t know anything about these models/protocols. Do they work in\n&gt; &gt; &gt; pra=\r\nctice at this time? In particular, if the client is a single-page\n&gt; &gt; &gt; app=\r\nlication running in a browser?\n&gt; &gt;\n&gt; &gt; these are two very different questio=\r\nns. they work very well in\n&gt; &gt; practice, for example across all iOS devices=\r\n (APN), across all\n&gt; &gt; android devices (C2DM), in building automation scena=\r\nrios (sMAP), or\n&gt; &gt; in large sensor network settings (MQTT).\n&gt;\n&gt; OK, I take=\r\n these as existence proofs that push works in practice.\n&gt;\n&gt; &gt; they all come=\r\n with different\n&gt; &gt; design goals and constraints, and it seems that you hav=\r\ne something\n&gt; &gt; specific in mind as well. as long as you don&#39;t better under=\r\nstand the\n&gt; &gt; specific constraints of the scenario you have in mind, pickin=\r\ng a\n&gt; &gt; solution (or writing down the requirements for a new one) probably\n=\r\n&gt; &gt; will be hard.\n&gt;\n&gt; Right now I&#39;m not trying to do anything, I&#39;m first an=\r\nd foremost trying\n&gt; to understand the landscape. As a consequence, my speci=\r\nfic questions\n&gt; keep changing. My starting point was the question &quot;What wou=\r\nld a\n&gt; &#39;reactive&#39; and RESTful web application look like from browser throug=\r\nh\n&gt; app server to database&quot;. Especially when it comes to the communication\n=\r\n&gt; between browser (or rather JavaScript-client) and app server, I don&#39;t\n&gt; s=\r\nee how to reconcile statelessness and event-drivenness.\n&gt;\n&gt; Michael\n&gt;\n&gt; --\n=\r\n&gt; Michael Schuerig\n&gt; mailto:michael@... &lt;michael@...&gt;\n&gt; htt=\r\np://www.schuerig.de/michael/\n&gt;\n&gt;\n&gt;   \n&gt;\n\n\n\n-- \nStudying for the Turing test=\r\n\n\r\n--047d7bdcaa8c7a452a04f9c11a31\r\nContent-Type: text/html; charset=UTF-8\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;div dir=3D&quot;ltr&quot;&gt;How does http 2.0 come into play with this with unsolicite=\r\nd pushes?&lt;/div&gt;&lt;div class=3D&quot;gmail_extra&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;div class=3D&quot;gmail_quote=\r\n&quot;&gt;On Mon, May 19, 2014 at 4:49 PM, Philippe Marsteau &lt;a href=3D&quot;mailto:mars=\r\nteau@...&quot;&gt;marsteau@...&lt;/a&gt; [rest-discuss] &lt;span dir=3D&quot;ltr&quot;&gt;&lt=\r\n;&lt;a href=3D&quot;mailto:rest-discuss@yahoogroups.com&quot; target=3D&quot;_blank&quot;&gt;rest-dis=\r\ncuss@yahoogroups.com&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;\n&lt;blockquote class=3D&quot;gmail_q=\r\nuote&quot; style=3D&quot;margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1e=\r\nx&quot;&gt;\n\n\n&lt;u&gt;&lt;/u&gt;\n\n\n\n\n\n\n\n\n\n \n&lt;div style=3D&quot;background-color:#fff&quot;&gt;\n&lt;span&gt;=C2=A0=\r\n&lt;/span&gt;\n\n\n&lt;div&gt;\n  &lt;div&gt;\n\n\n    &lt;div&gt;\n      \n      \n      &lt;p&gt;FWIW, HTTP is an=\r\n APPLICATION (transfer) protocol and not a TRANPORT protocol. TCP is the tr=\r\nansport protocol HTTP uses.&lt;/p&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I think the benefits of =\r\nREST architectural style over Pub/Sub style is the scalability associated t=\r\no not require servers to keep tracks of clients. The statelessness constrai=\r\nnt means a 2nd calls of a client shouldn&#39;t/mustn&#39;t assume something=\r\n on the server following a previous call, like an HTTP (application) sessio=\r\nn could be used for on the server). Because of the assessment, you can lite=\r\nrally swap one machine with another (or use true load balancing solutions w=\r\n/o sharing or distributing caches) without any impacts for the clients open=\r\n &quot;sessions&quot; (from a client perspective). To achieve this, any inp=\r\nut that a second call needs following a first call should be transferred to=\r\n client after each call (state is transfered to client instead of kept on s=\r\nerver).&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;This being said you certainly can model a=\r\n pub/sub polling scenario within REST constraints. The pushing scenario how=\r\never do require state on the server that belongs to client. Because the cli=\r\nent determines lifecycle of these &quot;push config&quot; dynamic resources=\r\n, eg when to delete it, that data need to be kept in sync between machines,=\r\n and handling* that extra state breaks statelessness of REST (*handling lik=\r\ne in auto-expiring subscriptions over time, etc.)&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div=\r\n&gt;The other technical pb of pub/sub over HTTP are firewalls or related netwo=\r\nrk issues. It is not uncommon that clients have firewalls in place that let=\r\n outgoing calls but require IP whitelisting to let calls come in. That furt=\r\nher reduces scalability of such model (basically each client must be seen a=\r\ns a server and vice-versa). The clients costs is typically higher than serv=\r\ner (clients establish the HTTP connection and close them as appropriate for=\r\n their use cases). This cost is acceptable because you usually have many cl=\r\nients for one server. If the server had to pay that connection cost (eg to =\r\npush data), it would be central and all clients would deal with a less resp=\r\nonsive server as a result.&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Finally, pub/sub model=\r\n implies a level of trusts normal HTTP app servers do not need to have. Bli=\r\nndly connecting to any HTTP endpoint opens to security vulnerabilities. The=\r\n client (subscriber) will typically expect some shared secret or key cert e=\r\nxchange, and the server may not be willing to blindly post data to unknown =\r\nlocations.&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Hope this helps. Interesting discussio=\r\nn. Pub/sub scenarios clearly exist and are adapted for some use cases, but =\r\nI don&#39;t thing HTTP transfer protocol is adapted. BTW, Roy&#39;s dissert=\r\nation did mention Pub/Sub (as well as others) style before describing REST =\r\nstyle; refer to it to compare the constraints with one another, and why he =\r\nbelieved REST style was better suited for scalability.&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;div&gt;=\r\n&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;span&gt;&lt;/span&gt;---&lt;br&gt;Phil&lt;div&gt;&lt;div class=3D&quot;h5&quot;&gt;&lt;span=\r\n&gt;&lt;/span&gt;&lt;div&gt;&lt;div&gt;On May 19, 2014 at 2:55:29 AM EDT, Hubert A Le Van Gong &lt;=\r\na href=3D&quot;mailto:hubertlvg@...&quot; target=3D&quot;_blank&quot;&gt;hubertlvg@...=\r\n&lt;/a&gt; [rest-discuss] &lt;&lt;a href=3D&quot;mailto:rest-discuss@yahoogroups.com&quot; tar=\r\nget=3D&quot;_blank&quot;&gt;rest-discuss@yahoogroups.com&lt;/a&gt;&gt; wrote:&lt;br&gt;\n&lt;blockquote =\r\ntype=3D&quot;cite&quot;&gt;&lt;div&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n&lt;span&gt;=C2=A0&lt;/span&gt;\n\n\n\n    &lt;div&gt;\n      =\r\n \n       \n      &lt;p&gt;Hi Michael,&lt;/p&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I don&#39;t quite fol=\r\nlow why you think a permanent HTTP session is against RESTful principles. I=\r\nsn&#39;t the HTTP session management at a different level (transport) than =\r\nthe actual resource management and the stateless principles associated to i=\r\nt?&lt;/div&gt;\n&lt;div&gt;In the same vein, would you also consider one cannot define a=\r\n RESTful service over persistent HTTPS connections for instance?&lt;/div&gt;&lt;div&gt;=\r\n&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Best,&lt;/div&gt;&lt;div&gt;Hubert&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;d=\r\niv&gt;&lt;br&gt;\n&lt;div&gt;&lt;div&gt;On May 18, 2014, at 8:02 AM, Michael Schuerig &lt;a href=3D&quot;=\r\nmailto:michael.lists@...&quot; target=3D&quot;_blank&quot;&gt;michael.lists@schuerig.=\r\nde&lt;/a&gt; [rest-discuss] &lt;&lt;a href=3D&quot;mailto:rest-discuss@yahoogroups.com&quot; t=\r\narget=3D&quot;_blank&quot;&gt;rest-discuss@yahoogroups.com&lt;/a&gt;&gt; wrote:&lt;/div&gt;\n&lt;br&gt;&lt;blo=\r\nckquote type=3D&quot;cite&quot;&gt;&lt;div style=3D&quot;font-family:Helvetica;font-size:12px;fo=\r\nnt-style:normal;font-variant:normal;font-weight:normal;letter-spacing:norma=\r\nl;text-align:start;text-indent:0px;text-transform:none;white-space:normal&quot;&gt;=\r\n\n&lt;div style=3D&quot;font-size:13px;font-family:Arial,helvetica,clean,sans-serif&quot;=\r\n&gt;&lt;div&gt;&lt;div style=3D&quot;font-family:Georgia&quot;&gt;&lt;p style=3D&quot;margin:0px 0px 1em&quot;&gt;On=\r\n Saturday 17 May 2014 18:15:13 Erik Wilde&lt;span&gt;=C2=A0&lt;/span&gt;&lt;a href=3D&quot;mail=\r\nto:dret@...&quot; style=3D&quot;font-family:Verdana&quot; target=3D&quot;_blank&quot;&gt;dret@=\r\nberkeley.edu&lt;/a&gt;&lt;span&gt;=C2=A0&lt;/span&gt;[rest-&lt;br&gt;\ndiscuss] wrote:&lt;br&gt;&lt;br&gt;&gt; i=\r\n guess i am having trouble with looking at a connection as a resource&lt;br&gt;&g=\r\nt; with state (unless you talk about network monitoring and management&lt;br&gt;&=\r\ngt; scenarios, which are an entirely different beast).&lt;br&gt;\n&lt;br&gt;No, a connec=\r\ntion isn&#39;t a resource. But keeping a connection open from&lt;span&gt;=C2=A0&lt;/=\r\nspan&gt;&lt;br&gt;each client to the server puts a strain on the server. Ideally, a&lt;=\r\nspan&gt;=C2=A0&lt;/span&gt;&lt;br&gt;RESTful service is loaded only &quot;dynamically&quot=\r\n; in the sense that the&lt;span&gt;=C2=A0&lt;/span&gt;&lt;br&gt;\n(&quot;static&quot;) number =\r\nof clients is irrelevant, what counts is the&lt;span&gt;=C2=A0&lt;/span&gt;&lt;br&gt;(&quot;d=\r\nynamic&quot;) number of requests per unit of time. My understanding of&lt;span=\r\n&gt;=C2=A0&lt;/span&gt;&lt;br&gt;REST is that this is deliberate and very helpful for scal=\r\nability. Open&lt;span&gt;=C2=A0&lt;/span&gt;&lt;br&gt;\nconnections are a strain on a service =\r\neven in the absence of any&lt;span&gt;=C2=A0&lt;/span&gt;&lt;br&gt;requests. For one thing, a=\r\n single server can only manage a limited&lt;span&gt;=C2=A0&lt;/span&gt;&lt;br&gt;number of op=\r\nen connections at a time.&lt;br&gt;&lt;br&gt;In REST, at least as far as I understand i=\r\nt(!), state is only supposed&lt;span&gt;=C2=A0&lt;/span&gt;&lt;br&gt;\nto figure as transferre=\r\nd resource state; session state is prohibited.&lt;br&gt;&lt;br&gt;My understanding may =\r\nbe wrong and I&#39;m perfectly willing to tone down the&lt;span&gt;=C2=A0&lt;/span&gt;&lt;=\r\nbr&gt;RESTful ideal for practical purposes. The point I&#39;m trying to make i=\r\ns&lt;span&gt;=C2=A0&lt;/span&gt;&lt;br&gt;\npurely a matter of classification, ie that I think=\r\n persistent&lt;span&gt;=C2=A0&lt;/span&gt;&lt;br&gt;connections are not RESTful.&lt;br&gt;&lt;br&gt;&gt; =\r\nbut it is entirely possible to envisage that HTTP pull is like UPS&lt;br&gt;&gt; =\r\nground and free, whereas there may be UPS overnight which costs a bit&lt;br&gt;\n&=\r\ngt; but is faster. if you do that, you get to specify your identifier, and&lt;=\r\nbr&gt;&gt; then (and this is why i call this &quot;reverse REST&quot;) you bec=\r\nome the&lt;br&gt;&gt; resource to be pushed to, i.e. your resource needs to be kn=\r\nown by the&lt;br&gt;\n&gt; event source. there are tons of PubSub approaches out t=\r\nhere, only&lt;br&gt;&gt; that coming up with one that works robustly and in a sca=\r\nlable at web&lt;br&gt;&gt; scale so far hasn&#39;t worked. the main reason is tha=\r\nt for pull, sources&lt;br&gt;\n&gt; don&#39;t need to know the consumers, whereas =\r\nfor push that state needs&lt;br&gt;&gt; to be maintained, which is expensive.&lt;br&gt;=\r\n&lt;br&gt;So, is &quot;reverse REST&quot; still RESTful? Yes, the individual push=\r\n request&lt;span&gt;=C2=A0&lt;/span&gt;&lt;br&gt;\nfrom server to client probably qualifies. T=\r\nhe architecture as a whole&lt;span&gt;=C2=A0&lt;/span&gt;&lt;br&gt;probably doesn&#39;t. As y=\r\nou write, state needs to be maintained which&lt;span&gt;=C2=A0&lt;/span&gt;&lt;br&gt;hinders =\r\nscalability.&lt;br&gt;&lt;br&gt;A truly RESTful solution would have to do without such =\r\nstate. *I* don&#39;t&lt;span&gt;=C2=A0&lt;/span&gt;&lt;br&gt;\nsee how that is possible, but t=\r\nhat&#39;s why I started this discussion.&lt;br&gt;&lt;br&gt;Also, I&#39;d like to repea=\r\nt that I don&#39;t mean not being RESTful, or not&lt;span&gt;=C2=A0&lt;/span&gt;&lt;br&gt;bei=\r\nng reactive, as some kind of condemnation. Both approaches offer very&lt;span&gt;=\r\n=C2=A0&lt;/span&gt;&lt;br&gt;\nsensible advice in general, I&#39;m interested in seeing =\r\nhow well they fit&lt;span&gt;=C2=A0&lt;/span&gt;&lt;br&gt;together.&lt;br&gt;&lt;br&gt;[...]&lt;br&gt;&gt; &gt;=\r\n&gt; a push model. there are a variety of push protocols (PuSH, MQTT,&lt;br&gt;&g=\r\nt; &gt;&gt; APN,&lt;br&gt;\n&gt; &gt;&gt; C2DM, sMAP) out there, but none so far h=\r\nas taken over the world.&lt;br&gt;&gt; &gt;&lt;span&gt;=C2=A0&lt;/span&gt;&lt;br&gt;&gt; &gt; I don=\r\n&#39;t know anything about these models/protocols. Do they work in&lt;br&gt;&gt; =\r\n&gt; practice at this time? In particular, if the client is a single-page&lt;b=\r\nr&gt;\n&gt; &gt; application running in a browser?&lt;br&gt;&gt;&lt;span&gt;=C2=A0&lt;/span&gt;&lt;b=\r\nr&gt;&gt; these are two very different questions. they work very well in&lt;br&gt;&g=\r\nt; practice, for example across all iOS devices (APN), across all&lt;br&gt;&gt; a=\r\nndroid devices (C2DM), in building automation scenarios (sMAP), or&lt;br&gt;\n&gt;=\r\n in large sensor network settings (MQTT).&lt;span&gt;=C2=A0&lt;/span&gt;&lt;br&gt;&lt;br&gt;OK, I t=\r\nake these as existence proofs that push works in practice.&lt;br&gt;&lt;br&gt;&gt; they=\r\n all come with different&lt;br&gt;&gt; design goals and constraints, and it seems=\r\n that you have something&lt;br&gt;\n&gt; specific in mind as well. as long as you =\r\ndon&#39;t better understand the&lt;br&gt;&gt; specific constraints of the scenari=\r\no you have in mind, picking a&lt;br&gt;&gt; solution (or writing down the require=\r\nments for a new one) probably&lt;br&gt;\n&gt; will be hard.&lt;br&gt;&lt;br&gt;Right now I&#39=\r\n;m not trying to do anything, I&#39;m first and foremost trying&lt;span&gt;=C2=A0=\r\n&lt;/span&gt;&lt;br&gt;to understand the landscape. As a consequence, my specific quest=\r\nions&lt;span&gt;=C2=A0&lt;/span&gt;&lt;br&gt;keep changing. My starting point was the questio=\r\nn &quot;What would a&lt;span&gt;=C2=A0&lt;/span&gt;&lt;br&gt;\n&#39;reactive&#39; and RESTful =\r\nweb application look like from browser through&lt;span&gt;=C2=A0&lt;/span&gt;&lt;br&gt;app se=\r\nrver to database&quot;. Especially when it comes to the communication&lt;span&gt;=\r\n=C2=A0&lt;/span&gt;&lt;br&gt;between browser (or rather JavaScript-client) and app serv=\r\ner, I don&#39;t&lt;span&gt;=C2=A0&lt;/span&gt;&lt;br&gt;\nsee how to reconcile statelessness a=\r\nnd event-drivenness.&lt;br&gt;&lt;br&gt;Michael&lt;br&gt;&lt;br&gt;--&lt;span&gt;=C2=A0&lt;/span&gt;&lt;br&gt;Michael=\r\n Schuerig&lt;br&gt;&lt;a href=3D&quot;mailto:michael@...&quot; style=3D&quot;font-family:Ve=\r\nrdana&quot; target=3D&quot;_blank&quot;&gt;mailto:michael@...&lt;/a&gt;&lt;br&gt;\n&lt;a href=3D&quot;http=\r\n://www.schuerig.de/michael/&quot; style=3D&quot;font-family:Verdana&quot; target=3D&quot;_blank=\r\n&quot;&gt;http://www.schuerig.de/michael/&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/=\r\nblockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;\n\n    &lt;/div&gt;\n      \n\n    \n\n\n\n\n\n\n\n&lt;/div&gt;&lt;/=\r\nblockquote&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;\n\n    &lt;/div&gt;\n     \n\n    \n    &lt;div=\r\n style=3D&quot;color:#fff;min-height:0&quot;&gt;&lt;/div&gt;\n\n\n&lt;/div&gt;\n\n\n\n  \n\n\n\n\n\n\n&lt;/blockquote=\r\n&gt;&lt;/div&gt;&lt;br&gt;&lt;br clear=3D&quot;all&quot;&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;-- &lt;br&gt;&lt;div dir=3D&quot;ltr&quot;&gt;Studyin=\r\ng for the Turing test&lt;/div&gt;\n&lt;/div&gt;\n\r\n--047d7bdcaa8c7a452a04f9c11a31--\r\n\n"}}
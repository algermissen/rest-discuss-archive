{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":319607554,"authorName":"Assaf Arkin","from":"&quot;Assaf Arkin&quot; &lt;assaf@...&gt;","profile":"assafarkin","replyTo":"SENDER","senderId":"Ppf6Pn6MmYJN9ATdL-rjyUH_5RjhJWgbv5lUGExxiJi27GiZOVj6gDrUm1lpjACjt6TVoaUSFrfdvVoyS4Q9qt8ifRk1R96u2w","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] bootstrapping","postDate":"1200794642","msgId":10287,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDUwMzdiNmU0MDgwMTE5MTgwNGk0NzlmN2JkNWcyZmZkMWU1YTViNmRjNThAbWFpbC5nbWFpbC5jb20+","inReplyToHeader":"PDE1MmMwMWM4NWFlNSQxMWU0ZmY1MCQwNzAyYThjMEBHdWlkZXMubG9jYWw+","referencesHeader":"PGZta3M3OCtrMTVrQGVHcm91cHMuY29tPgkgPGM4MjA0NTQzMDgwMTE4MTM1OWoyYzFkMjQwZGxkYTA3ODczMDBlYWI4YmRhQG1haWwuZ21haWwuY29tPgkgPDUwMzdiNmU0MDgwMTE4MTcxN2c3NmFlOTg2YXNhYzk5MDU4OTYwZGE2ZjBlQG1haWwuZ21haWwuY29tPgkgPDE0MzIwMWM4NWEzZSQ4ODM1ODQ2MCQwNzAyYThjMEBHdWlkZXMubG9jYWw+CSA8NTAzN2I2ZTQwODAxMTgxOTA5cDZmYTk2MzYyamM3ODhhZTAyNmVhMzFmYzJAbWFpbC5nbWFpbC5jb20+CSA8MTQ1YzAxYzg1YTVhJDc0MmU3ZmEwJDA3MDJhOGMwQEd1aWRlcy5sb2NhbD4JIDw1MDM3YjZlNDA4MDExODIyMDZxNTZhOWJlNzNtZTBmYzRhMWJlNjI2ZjE2MkBtYWlsLmdtYWlsLmNvbT4JIDwxNDg3MDFjODVhN2UkODU1ZTA2NTAkMDcwMmE4YzBAR3VpZGVzLmxvY2FsPgkgPDUwMzdiNmU0MDgwMTE5MDI1NGozNGMzMThmcjI1MjA5ZDA3ZThjZDRmY2ZAbWFpbC5nbWFpbC5jb20+CSA8MTUyYzAxYzg1YWU1JDExZTRmZjUwJDA3MDJhOGMwQEd1aWRlcy5sb2NhbD4="},"prevInTopic":10286,"nextInTopic":10288,"prevInTime":10286,"nextInTime":10288,"topicId":10201,"numMessagesInTopic":65,"msgSnippet":"... I like both, and I imagine you d be able to do something like: resource task url /tasks/{id} url /tasks/{id}.{format} ... No.  I m saying I have","rawEmail":"Return-Path: &lt;assaf@...&gt;\r\nX-Sender: assaf@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 60058 invoked from network); 20 Jan 2008 02:04:04 -0000\r\nX-Received: from unknown (66.218.67.97)\n  by m55.grp.scd.yahoo.com with QMQP; 20 Jan 2008 02:04:04 -0000\r\nX-Received: from unknown (HELO fg-out-1718.google.com) (72.14.220.159)\n  by mta18.grp.scd.yahoo.com with SMTP; 20 Jan 2008 02:04:03 -0000\r\nX-Received: by fg-out-1718.google.com with SMTP id 22so1545691fge.25\n        for &lt;rest-discuss@yahoogroups.com&gt;; Sat, 19 Jan 2008 18:04:02 -0800 (PST)\r\nX-Received: by 10.86.82.16 with SMTP id f16mr4795566fgb.60.1200794642624;\n        Sat, 19 Jan 2008 18:04:02 -0800 (PST)\r\nX-Received: by 10.86.71.6 with HTTP; Sat, 19 Jan 2008 18:04:02 -0800 (PST)\r\nMessage-ID: &lt;5037b6e40801191804i479f7bd5g2ffd1e5a5b6dc58@...&gt;\r\nDate: Sat, 19 Jan 2008 18:04:02 -0800\r\nTo: &quot;Mike Schinkel&quot; &lt;mikeschinkel@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nIn-Reply-To: &lt;152c01c85ae5$11e4ff50$0702a8c0@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: 7bit\r\nContent-Disposition: inline\r\nReferences: &lt;fmks78+k15k@...&gt;\n\t &lt;c82045430801181359j2c1d240dlda0787300eab8bda@...&gt;\n\t &lt;5037b6e40801181717g76ae986asac99058960da6f0e@...&gt;\n\t &lt;143201c85a3e$88358460$0702a8c0@...&gt;\n\t &lt;5037b6e40801181909p6fa96362jc788ae026ea31fc2@...&gt;\n\t &lt;145c01c85a5a$742e7fa0$0702a8c0@...&gt;\n\t &lt;5037b6e40801182206q56a9be73me0fc4a1be626f162@...&gt;\n\t &lt;148701c85a7e$855e0650$0702a8c0@...&gt;\n\t &lt;5037b6e40801190254j34c318fr25209d07e8cd4fcf@...&gt;\n\t &lt;152c01c85ae5$11e4ff50$0702a8c0@...&gt;\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Assaf Arkin&quot; &lt;assaf@...&gt;\r\nSubject: Re: [rest-discuss] bootstrapping\r\nX-Yahoo-Group-Post: member; u=319607554; y=fdFa024vp8F_PpCqzi5iRchRdMm2iRKWb9LouZr1FRZcC2oPHg\r\nX-Yahoo-Profile: assafarkin\r\n\r\nOn Jan 19, 2008 1:48 PM, Mike Schinkel &lt;mikeschinkel@...&gt; wrote:\n&gt; Personally I really dislike conneg because, like a box of chocolates,  given\n&gt; a URL you never know what someone else you give the link to is gonna get.\n\nI like both, and I imagine you&#39;d be able to do something like:\n\nresource &#39;task&#39;\n  url &#39;/tasks/{id}&#39;\n  url &#39;/tasks/{id}.{format}&#39;\n\n\n&gt; Well if you are saying that your &lt;task&gt; information is wrapped up in an\n&gt; &quot;application/xml&quot; content type and that the caller &quot;just has to know&quot; that\n&gt; its contains a list of tasks with specific structure and semantics than I&#39;ll\n\nNo.  I&#39;m saying I have caller specifically requesting tasks and\nexpecting an XML or JSON representation of that task.  If they didn&#39;t\nknow what to do with a task, why would they request it?\n\n\n&gt; agree with Joe Gregorio [2] that you really need to find an existing\n&gt; mime-type that already supports tasks and use it, or define and register a\n&gt; new mime-type for your task list that fits your needs with a preference\n&gt; towards reusing a specific task-specific mime-type.  A description just does\n&gt; not cover it.\n\nSome people suggested you can also return HTML with microformats, or\nsome other semantic HTML.  That&#39;s a possibility and turns out that\nhandling semantic HTML with CSS selector is not much more complicated\nthan XPath on XML.  So let&#39;s say that&#39;s an alternative content type\nfor some clients.\n\nWould we go and define the application/html+task MIME type?  Is there\na MIME type for blog posts (hAtom)?  What about eBay auctions, and you\ncan bet people are scraping them left and right?\n\n\n&gt; &gt; &gt; Fine.  So why not just use\n&gt; &gt; &quot;{base}/person/{name}/pending/{task}/attachments&quot;\n&gt; &gt; &gt; to return a list of URLs attached?\n&gt; &gt;\n&gt; &gt; The scenario I have here is one of getting all the tasks and\n&gt; &gt; their attachments, so you already have the URL to these\n&gt; &gt; attachments, from the same source that provides the task ID,\n&gt; &gt; so why go to the pain of composing that URL?\n&gt;\n&gt; Maybe my client code got the task list days ago (I&#39;m assuming unique and\n&gt; non-changing {task} ids which you&#39;d scare me if you say they are not.)  Or I\n&gt; might get that URL from another system that traversed the task list for me.\n&gt; There are many use-cases for going directly to a task and/or its attachments\n&gt; so requiring I first get the full list of tasks before I can access a task\n&gt; seems to me to be an undue burden; it uses bandwidth unneccessarily, it\n&gt; inhibits performance, and it adds complexity to development.\n\nEach task has a URL specifically so you can go and retrieve it, you\ndon&#39;t have to lookup a URL you already have.\n\nGoing from task URL to attachments URL requires one of three things:\n\n1.  Query task to find where the attachments are.\n2.  Compose the URL you have using a URL template.\n3.  Decompose the URL you have into parameters, recompose them again\ninto a URL template.\n\nNow, if the resulting URL happens to be {task_url}/attachments, you\ncan easily do #2.  If it doesn&#39;t, you&#39;ll have to follow the more\nlaborious #3.  Attachments is probably not a good specific example to\nshow why #3 is necessary, so let&#39;s talk about task owners.  The URL\nfor a task owner is not  /tasks/{id}/owner, maybe /people/{owner}, or\nmaybe some directory server.\n\n\n&gt; I assert that least coupling is &quot;a&quot; goal, not the &quot;only&quot; goal, and not\n&gt; always a &quot;good&quot; goal.\n&gt;\n&gt; Coupling can be a good thing when it sets forth well-considered constraints.\n&gt; REST over HTTP is currently &quot;coupled&quot; to &quot;GET&quot;, &quot;PUT&quot;, &quot;POST&quot;, and &quot;DELETE&quot;\n&gt; and I think we all agree here that that is a good thing. There is more and\n&gt; more code becoming coupled to the Atom specification and I doubt anyone here\n&gt; would see that as bad either. So coupling when fundamental and\n&gt; well-considered can actually be a very good thing.\n\nNo coupling says the client and server have to be de-coupled except\nfor cross-cutting generic knowledge, which would cover things like\nHTTP, Atom.  Least coupling goes one step further and acknowledges\nsome coupling is desirables -- besides the cross-cutting stuff -- and\nlooks for optimal minimum.  I&#39;m only concerned that it be possible to\ndo least coupling, for any value of least.\n\n\n&gt; &gt; These are thoughts, not conclusions:\n&gt; &gt; - I don&#39;t have (yet) a use case for accessing attachments\n&gt; &gt; directly, but certainly for accessing them from the task, so\n&gt; &gt; maybe link from the task?\n&gt;\n&gt; I want a list of all attachments, regardless of task, in order to be able to\n&gt; archive attachments for space management; there&#39;s a use-case.\n\nHow would you find all the IDs to fit in the template?  Wouldn&#39;t it\njust be easier to look up something like /attachments/updated, sorted\nby update time, and operate on the returned list?\n\n\n&gt; &gt; - If you get a URL it points to the resource, if you get an\n&gt; &gt; ID it&#39;s useless without the template, so one piece of data vs two?\n&gt;\n&gt; I don&#39;t follow.\n\nIf you have a URL, you can always resolve it to that task.  If you\nhave an ID, you can only resolve it to that task if you know where the\ntask manager is, there may be more than one, so a client that stores\nURLs has the added feature that it can operate on more than one.\n\n&gt; &gt; - I can move the attachments to a different service, some\n&gt; &gt; place else, and that composition would require no change to\n&gt; &gt; the client if they always request the URL?\n&gt; &gt; - But not necessarily if they cache them, or if the new\n&gt; &gt; service has incompatible semantics.\n&gt;\n&gt; 301 or proxy\n\nProxy is absolutely out of the question, rewriting rules are very\nhard.  My URL template may be something like:\n  /tasks/{task_id}/attachments/{attach_id}\nThe content management may decide to store them as:\n  /content/{uuid}\n\nI just find it easier to write a generic client that works with either\none by following URLs, so a URL is definitely going to be present.\n\n&gt; &gt; - It&#39;s actually slightly easier to write functional code for\n&gt; &gt; traversing links than composing URLs, which may be a sign\n&gt; &gt; that it&#39;s the better model?\n&gt;\n&gt; Yes, but it is easier for humans to compose URLs than traverse links when\n&gt; the links don&#39;t return HTML as a content type.\n\n1.  curl URL that returns JSON\n2.  find the item you want to follow, double click the URL, Ctrl-C\n3.  curl + Ctrl-V\n\n\nAssaf\n\n&gt;\n&gt; --\n&gt; -Mike Schinkel\n&gt; http://www.mikeschinkel.com/blogs/\n&gt; http://www.welldesignedurls.org\n&gt; http://atlanta-web.org\n&gt;\n&gt; [1] http://www.blinksale.com/api\n&gt; [2] http://bitworking.org/news/193/Do-we-need-WADL\n&gt;\n&gt;\n\n\n\n-- \n-- Assaf\n\nhttp://labnotes.org\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"eHY8SJAqwvUy8mTjh2d6FEzMx1xgAnd7rpeUsPTHjQdIrAXKZ1vUA3vlQqMBjHV63EZdcFXN7M0DtInRozdP4DkhpeN7cFuQQFr3WkgtGw","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: Methods and the uniform interface [was: Re: [rest-discuss] REST  isn&#39;t hard to learn, it&#39;s just taught wrong.","postDate":"1261449400","msgId":14320,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMDkxMjIxMTkzNjQwLjljNjkzYTlhLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","inReplyToHeader":"PDQ5OTg4ODQ0MDkxMjIxMDg1M2k1OTJlNmQ1dTY3ZmI1ZmZmNzk3ZDBmMjRAbWFpbC5nbWFpbC5jb20+","referencesHeader":"PDQ5OTg4ODQ0MDkxMjIxMDYwN3EzMTdlMmQ4aTQ3OWEzNjU2ZjQxMjViZWFAbWFpbC5nbWFpbC5jb20+CTxiNTQ4ZGY2NTA5MTIyMTA3MTl0MzdhODhmNzZ5ZGUxY2JlODdjNjY3NTA1YUBtYWlsLmdtYWlsLmNvbT4JPDQ5OTg4ODQ0MDkxMjIxMDg1M2k1OTJlNmQ1dTY3ZmI1ZmZmNzk3ZDBmMjRAbWFpbC5nbWFpbC5jb20+"},"prevInTopic":14299,"nextInTopic":14329,"prevInTime":14319,"nextInTime":14321,"topicId":14293,"numMessagesInTopic":37,"msgSnippet":"On Mon, 21 Dec 2009 11:53:59 -0500 ... Careful -- DELETE is a protocol-independent generic-interface method, the HTTP implementation of which doesn t","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 49322 invoked from network); 22 Dec 2009 02:36:48 -0000\r\nX-Received: from unknown (98.137.34.44)\n  by m14.grp.re1.yahoo.com with QMQP; 22 Dec 2009 02:36:48 -0000\r\nX-Received: from unknown (HELO mxout-08.mxes.net) (216.86.168.183)\n  by mta1.grp.sp2.yahoo.com with SMTP; 22 Dec 2009 02:36:48 -0000\r\nX-Received: from bigbison (unknown [65.117.211.162])\n\t(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))\n\t(No client certificate requested)\n\tby smtp.mxes.net (Postfix) with ESMTPSA id E6ABF509DB;\n\tMon, 21 Dec 2009 21:36:46 -0500 (EST)\r\nDate: Mon, 21 Dec 2009 19:36:40 -0700\r\nTo: Tim Williams &lt;williamstw@...&gt;\r\nCc: mike amundsen &lt;mamund@...&gt;, berend@...,\n rest-discuss@yahoogroups.com\r\nMessage-Id: &lt;20091221193640.9c693a9a.eric@...&gt;\r\nIn-Reply-To: &lt;499888440912210853i592e6d5u67fb5fff797d0f24@...&gt;\r\nReferences: &lt;499888440912210607q317e2d8i479a3656f4125bea@...&gt;\n\t&lt;b548df650912210719t37a88f76yde1cbe87c667505a@...&gt;\n\t&lt;499888440912210853i592e6d5u67fb5fff797d0f24@...&gt;\r\nOrganization: Bison Systems Corporation\r\nX-Mailer: Sylpheed 2.6.0 (GTK+ 2.10.14; i686-pc-mingw32)\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=US-ASCII\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nSubject: Re: Methods and the uniform interface [was: Re: [rest-discuss] REST\n  isn&#39;t hard to learn, it&#39;s just taught wrong.\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\nOn Mon, 21 Dec 2009 11:53:59 -0500\nTim Williams wrote:\n&gt; \n&gt; My original contention was that &#39;calling DELETE&#39; on some resource\n&gt; (URI) provided by the server, isn&#39;t &#39;going rogue&#39; or violating the\n&gt; uniform interface even if it&#39;s not in the representation.  It may be\n&gt; met with a 405, but since &quot;DELETE&quot; is a part of the uniform interface\n&gt; between components in the system, I don&#39;t see how using it might be\n&gt; considered a violation of it.\n&gt; \n\nCareful -- DELETE is a protocol-independent generic-interface method,\nthe HTTP implementation of which doesn&#39;t automatically result in a\nuniform REST interface.  As with most methods.  My Xforms Atom Protocol\nclient, discussed here:\n\nhttp://tech.groups.yahoo.com/group/rest-discuss/message/14260\n\nDescribes a uniform REST interface, and is in fact the only Atom\nProtocol implementation I&#39;ve seen that doesn&#39;t break the hypertext\nconstraint. However, the addition of PATCH:\n\nhttp://tech.groups.yahoo.com/group/rest-discuss/message/14316\n\nDegrades my API to being a generic HTTP interface, as much as I may\nwish to call it REST.  Oh, it&#39;s architecturally sound and all, but the\nREST style requires that standard media types be used for applying\nmethod semantics, so this is clearly not the REST style, even though\nPATCH is now officially part of the generic-interface-method club.\n\nLet&#39;s take a closer look at PUT. HTTP (and FTP) assigns two different\nsemantics to PUT -- creation and replacement.  But, a REST API must\nmaintain consistent method semantics across all resources. Practically\nspeaking, the uniform interface constraint means your REST API must\nlimit PUT to one use or the other based on media type.\n\n(Media types don&#39;t define method semantics {except in the case of a\nmedia type which introduces a new method}, they describe the applied\nsemantics of existing methods.  This is why a custom media type cannot\napply partial-update semantics to PUT -- that would be redefining\nmethod semantics rather than applying them.)\n\nFor example, Atom Protocol constrains PUT to replacement semantics,\nwhile constraining POST to creation semantics.  Without changing the\nsemantics of the PUT or POST method, the application/atom+xml media\ntype describes the applied semantics of those HTTP methods, with the\ngoal of creating a uniform REST interface.  Any intermediary looking at\nPUT or POST requests with the Atom media type knows the specific\nsemantics of the request, which cannot be known just by looking at the\nprotocol&#39;s generic method semantics.\n\nLet&#39;s say you&#39;ve implemented a standard Atom Protocol system, but now\nyou want to allow PUT to be used with a user-supplied URI to add items\ninto a collection without creating Atom media entries for them.\n\nFirst of all, as with all use of PUT for file-upload applications, and\nas Roy has pointed out, the hypertext constraint is broken.  Second, by\nassigning a second semantic (create) to PUT for all resources _but_\napplication/atom+xml (replace), you have degraded your interface to the\nstatus of generic HTTP.  A uniform REST interface requires that method\nsemantics be identical across all resources in the system, they MUST\nNOT vary by media type or resource &quot;type&quot;.\n\nREST requires self-descriptive messaging.  This means it&#39;s the\ncombination of URI (includes protocol), request method, and *media\ntype* that determines the interface semantics.  Without including a\nmedia type in a PUT request, how is an HTTP intermediary to determine\nwhether the semantics are creation or replacement?  That isn&#39;t very\nself-descriptive.  Whereas, if the media type is application/atom+xml,\nit&#39;s clear to the entire world that the interaction semantics are\nreplacement, not creation, as specified by the media type.\n\nThis brings us back to DELETE, which, believe it or not, also has two\ndifferent semantics in HTTP.  WebDAV extends DELETE to include a\n&#39;Depth&#39; header, in the absence of which all members of a collection are\ndeleted along with the collection.  Otherwise, HTTP DELETE is meant to\nremove a single resource.  There are two paradigms at cross-purpose\nhere, one is Web as Filesystem and the other is Web As It Exists.\n\nSince a Web collection may be a transitory thing, say the top-5 most-\ncommented posts on a weblog, the elimination of all members if it&#39;s\ndeleted to make way for a top-10 list would be undesirable.  Or, the\nresource may literally map to a filesystem, in which case all members\nmust be deleted before a collection may be removed.  Either way is\nsupported in a generic interface.  Only one way or the other is allowed\n(per protocol) in a uniform interface.\n\nAtom Protocol skipped the debate entirely, by deciding to allow DELETE\non collections without defining the semantics.  Feature, or bug?  You\ndecide...  The Atom media type could have opted to define WebDAV\nsemantics to a collection DELETE, in which case transitory Atom\nProtocol collections wouldn&#39;t be practical, or gone the other way and\ndefined it as only removing the collection feed, in which case the\nfolks wanting to do bulk-delete with one request would be unhappy.\n\nSo yes, a REST API must rely on media types to determine the semantics\nof protocol methods.  Using HTTP DELETE on a resource represented only\nas text/html isn&#39;t RESTful now, but it may become so once HTML 5 has\nadded (hopefully at least) PUT and DELETE into the text/html realm, at\nwhich point they can be hypertext-driven. The other solution is to use\nFTP DELETE, since that protocol doesn&#39;t care about media type and won&#39;t\nallow collection-delete.  But this only works if you&#39;re following the\nfilesystem paradigm and don&#39;t care about the hypertext constraint.\n\nYou can&#39;t use FTP DELETE to remove a negotiated resource, since it\nisn&#39;t really there on the filesystem, so you&#39;d have to use HTTP DELETE\n-- but which semantic?  Remove just the negotiated resource, or remove\nall variants first?  Or use MDELETE from WebDAV or FTP?  While there\nare multiple methods and semantics from multiple protocols to achieve\ndeletion, the REST style isn&#39;t free-form, your design choices must be\nencompassed within standard media types.\n\nThe Xforms solution allows any choice to be hypertext-driven, so\ncreating a system using the standard application/xhtml+xml media type\nis my first choice, transformed from some other variant, and presented\nat a negotiated URL. The media type allows any DELETE functionality to\nbe defined in-band for the entire resource, or targeted at some other\nresource, using the hypertext constraint while preserving the uniform\nREST interface (if implemented properly, of course).\n\nIf an Atom entry is one variant in a negotiated resource, and the other\nis HTML, the resource may be deleted outright because the Atom media\ntype specifically allows DELETE to remove the member resource (even\nwithout hypertext), making it only logical to also DELETE the derived\nHTML variant.  Sorry to complicate things by pointing out that you can&#39;t\njust DELETE willy-nilly in REST, but...\n\n-Eric\n\n"}}
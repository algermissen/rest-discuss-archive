{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":289191104,"authorName":"Jan Algermissen","from":"Jan Algermissen &lt;algermissen1971@...&gt;","profile":"algermissen1971","replyTo":"SENDER","senderId":"CggvXLTMo_KXxvRRI6z_v0CW47GUj1ZxSGPMph5XH0r4jSo3Jbd6iwOj1MlxXwyBxfAZLxhVFOiGHih7FETQ7skKhVqbXuJrgu-KWGqAcw4","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Re: Restful Approaches to some Enterprise Integration Problems","postDate":"1278150847","msgId":15784,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDc1QTgzRjNGLTcxMTUtNEZGRi05RTY3LUMzRTgwMTk1MERCNUBtYWMuY29tPg==","inReplyToHeader":"PGkwbXV0bis5dG91QGVHcm91cHMuY29tPg==","referencesHeader":"PGkwbXV0bis5dG91QGVHcm91cHMuY29tPg=="},"prevInTopic":15783,"nextInTopic":15787,"prevInTime":15783,"nextInTime":15785,"topicId":15761,"numMessagesInTopic":45,"msgSnippet":"Hi Bryan, ... The issue is that REST-* suggest that there are problems that need a solution. The problems REST-* addresses can be dealt with by changing the","rawEmail":"Return-Path: &lt;algermissen1971@...&gt;\r\nX-Sender: algermissen1971@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 19779 invoked from network); 3 Jul 2010 09:57:51 -0000\r\nX-Received: from unknown (98.137.34.44)\n  by m2.grp.sp2.yahoo.com with QMQP; 3 Jul 2010 09:57:51 -0000\r\nX-Received: from unknown (HELO asmtpout030.mac.com) (17.148.16.105)\n  by mta1.grp.sp2.yahoo.com with SMTP; 3 Jul 2010 09:57:51 -0000\r\nMIME-version: 1.0\r\nContent-transfer-encoding: 7BIT\r\nContent-type: text/plain; charset=us-ascii\r\nX-Received: from [192.168.2.102] (p549070CB.dip.t-dialin.net [84.144.112.203])\n by asmtp030.mac.com\n (Sun Java(tm) System Messaging Server 6.3-8.01 (built Dec 16 2008; 32bit))\n with ESMTPSA id &lt;0L4Z002GU7I8AD40@...&gt; for\n rest-discuss@yahoogroups.com; Sat, 03 Jul 2010 02:54:12 -0700 (PDT)\r\nX-Proofpoint-Spam-Details: rule=notspam policy=default score=0 spamscore=0\n ipscore=0 phishscore=0 bulkscore=0 adultscore=0 classifier=spam adjust=0\n reason=mlx engine=6.0.2-1004200000 definitions=main-1007030019\r\nX-Proofpoint-Virus-Version: vendor=fsecure\n engine=1.12.8161:2.4.5,1.2.40,4.0.166\n definitions=2010-07-02_03:2010-02-06,2010-07-02,2010-07-03 signatures=0\r\nIn-reply-to: &lt;i0mutn+9tou@...&gt;\r\nDate: Sat, 03 Jul 2010 11:54:07 +0200\r\nCc: rest-discuss@yahoogroups.com\r\nMessage-id: &lt;75A83F3F-7115-4FFF-9E67-C3E801950DB5@...&gt;\r\nReferences: &lt;i0mutn+9tou@...&gt;\r\nTo: bryan_w_taylor &lt;bryan_w_taylor@...&gt;\r\nX-Mailer: Apple Mail (2.1078)\r\nFrom: Jan Algermissen &lt;algermissen1971@...&gt;\r\nSubject: Re: [rest-discuss] Re: Restful Approaches to some Enterprise\n Integration Problems\r\nX-Yahoo-Group-Post: member; u=289191104; y=hlT3yaWMlDW0F2-J4zs7DhaP9lPL0sDHI7XnSGa4e_-z-RD-oXdcWg8E\r\nX-Yahoo-Profile: algermissen1971\r\n\r\nHi Bryan,\n\n\nOn Jul 2, 2010, at 11:37 PM, bryan_w_taylor wrote:\n\n&gt; \n&gt; I have trouble seeing this. On it&#39;s face, the JBoss efforts looks like an attempt to solve several problems in what appears to be a sincere attempt to be RESTful.\n\nThe issue is that REST-* suggest that there are problems that need a solution. The problems REST-* addresses can be dealt with by changing the mind set. Enterprise IT need not be any more complex than the Web is. Unfortunetely the thinking seems to persist that enterprise IT is somwhat for the tough guys why Web is for the &#39;HTML developer&#39;. Tough guys want tough problems :-)\n\n\n&gt; It appears many believe it is a failed attempt, so I guess I want to know if there are other competing attempts that get it right.\n\nAgain: nothing to get right. HTTP already covers everything. All you need is media types for your problem at hand.\n\n&gt;&gt; \n&gt; \n&gt; I can see this: isolation, the I in ACID, is inherently a form of conversational state. This raises the question, can I have ACD and be RESTful? If I relax C to eventual consistency (E), I think I see how I can have AED in a RESTful setting by submitting batch requests, persisting them on arrival, and using guaranteed delivery to all affected servers.\n\nHmm - do you have an example of whatyou are trying to solve?\n\n\n&gt; \n&gt;&gt;&gt; - Message queues are a common integration technique for non-REST architectures.\n&gt;&gt;&gt; \n&gt;&gt; \n&gt;&gt; Yes, because they violate the hypermedia contraint (would need to check which else).\n&gt; \n&gt; This isn&#39;t obvious to me, so I&#39;m going to ask you to elaborate if you don&#39;t mind.\n\nThe client must learn at runtime what to do next rom received representations. Whith MQs the client needs to know which queue to send stuff to and when. That is design time coupling. (I&#39;ll try to refer to the dis the next days - need to think about it a little).\n\n&gt;&gt; EST is such a style (surprise, surprise :-) through and through. REST has been designed to deal with integration problems (complexity and change).\n&gt; \n&gt; I don&#39;t follow this argument. Every architectural style used to solve integration problems makes a claim to have been designed to deal with integration problems. Certainly MQ protocols do this.\n\nI am not sure that MQs are an architectural style in the Perry/Wolf,Garlan/Shaw/Fielding sense. For me it is just a transport mechanism. To get on the same page: which of the styles Roy mentions is similar to MQs?\n\nOr else: what are the constraints MQs impose on components, connectors and data elements? And what are the system properties induced?\n\n(I am mostly trying to make you think along the lines of Roy&#39;s dis here, not trying to be difficult).\n\n&gt; \n&gt;&gt; Interestingly, no OO-based pattern (especially not the service pattern) out there attempts to constrain the connectors of components. That is why all these attempts (e.g. SOA) are essentially meaningless when it comes to reducing integration complexity. IOW, they cannot guarrantee reduced complexity and good evolvability - REST does because it limits the variation of the component interface (to be uniform).\n&gt; \n&gt; SOA and REST are orthogonal architectural styles.\n\nSOA is not an architectural style...because it imposes no constraints on components, connectors and data elements. IOW: SOA does not induce any properties into an architectire. For example, Applying SOA does not guarantee scalability because SOA does not constrain servers to be stateless.\n\n\n&gt; SOA mandates loose coupling, abstration, reusability, autonomy, statelessnes, discoverability, and composability, and does so in a way relies on service contracts to enforce governance.\n\nNone of those are constraints in the software architecture sense. None of those are testable either. The problem is that they are not testable either.\n\n(No insult intended) \n\nExample: SOA mandates loose coupling. So what? When do I know I achieved it? And, BTW, what does it mean, exactly?\n\n\n&gt; Each of these principles has benefits for integration in an enterprise setting, which is why nearly every enterprise adopts them.\n\nOh? Most of the enterprises I have seen did almost everything to violate any of the above :-) Partly because people did not have the skills and partly because they all relate to long term benefits that often the next CIO will harvest :-)\n\n\n&gt; REST adds other constraints (uniform interface, HATEOAS) and overlaps with a few of the above (statelessness).\n\nBy &#39;statelessness&#39; you mean &#39;stateless server&#39;?\n\n&gt; These also provide benefits for integration. My view is that if we adopt an architecture within intersection of the two styles, the result will be good.\n\nSome questions:\n\n- why do we need anything else than REST? What is th eneed for intersecting?\n- why would the result be good?\n\n- If you intersect REST with another style you presumably remove constraints of REST (those that are not in the intersection). If you do this, you&#39;ll have to analyse which of the properties induced by REST you loose. What I am trying to emphasize is that the set of constraints is coordinated and that it is this set that forms the style. You cannot arbitrarily remove constraints or juggle them around as you see fit.\n\n\n\n&gt; \n&gt;&gt;&gt; It may be that a distributed transaction pattern must must violate one of the RESTful architecure principles, but this is far from obvious.\n&gt;&gt; \n&gt;&gt; It requires understanding of REST, yes. OTH, most of the problems people have (at least I did) is due to the fact that &#39;they&#39; lack proper knowledge of software architecture in general (See Perry&Wolf, Garlan&Shaw, Taylor&Medvidovic and the first half of Roy&#39;s dissertation). If you started with that knowledge already - understanding REST would be pretty quick as would be understanding the rationale behind the mentioned constraint violation. (Personally the journey took me about 8 years and I keep having epiphanies :-)\n&gt; \n&gt; If the goal is to reduce integration complexity, solutions that require 8 years to understand before they are useful fail.\n\nSee my comment on solid knowledge of the disziplin of software architecture. *That* took so long but should actually be required knowledge of any software architect. Interestingly, very few people even know what that it makes sense to design on the basis of principles.\n\n\n&gt; Hopefully, 80%, 95%, or 99% understanding is enough to solve most problems, and I hope these levels of understanding can be obtained in shorter timeframes.\n\nDanger is: you get half-baked solutions. \n\n&gt; \n&gt;&gt;&gt; Maybe this is some deep corollary of the CAP theory or something. Or perhaps not.\n&gt;&gt;&gt; \n&gt;&gt;&gt; The corresponding statement about message queues seems baffling. These solve a harder problem than guaranteed delivery. Queues solve guaranteed delivery to exactly one consumer among competing consumers with some fairness guarantees.\n&gt;&gt; \n&gt;&gt; Well, that is a layer 4 issue (transport). What do MQs do in terms of reducing integration complexity or making a system more easily changeable? All the latter is a layer 7 issue.\n&gt; \n&gt; Let me explain my language. As I use the term, delivery is a layer 7 issue: a message is delivered when the receiving application says it is delivered subject to any desired application-level conditions.\n\nLayer 7 is the application layer. placeOrder(), getStockQuote(), fileComplaint(), startEgine() are all layer 7 semantics. Delivery is *transport* (layer 4).\n\nOne of the keys to understanding REST is to understand that REST constrains layer 7 to be uniform. HTTP&#39;s GET, POST, PUT, DELETE are at the same level as getStockQuote() or placeOrder(). HTTP is an application layer protocol.\n\n\n&gt; EG: this could involve the successful completion of any long running operation. Message arrival is the corresponding layer 4 concept. Clearly arrival is a prerequisite for delivery. For example, the taxi must arrive, but the customer is &quot;delivered&quot; to the taxi when a contract is formed that may involve an out of band negotiation and acceptance by both parties.\n&gt; \n&gt; As to the benefits of messaging generally, this is all explained well in Hophe and Woolf&#39;s book Enterprise Integration Patterns.\n\nCan you point me to the section that relates to your paragraph above? I am a bit troubled understanding it (for a lack of context on my part).\n\n&gt; \n&gt;&gt;&gt; How would I implement a RESTful way to have airport passengers acquire taxi transportation at the airport in a fair way?\n&gt; \n&gt; I shouldn&#39;t have asked this question in this thread, as the merits of queues are off topic to what I asked. I&#39;ll open another thread and re-ask my question.\n\n\nOk.\n\nJan\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":511039257,"authorName":"Mike Kelly","from":"Mike Kelly &lt;mikekelly321@...&gt;","profile":"mikekelly8762348","replyTo":"SENDER","senderId":"ALATg8OkCkE4jof67D1XKvsrOke3u7AUKX7Y6FbEPN62G9mKDBYwj-DEPZJmVc4_2r4qx196EWQhpqub5eIcuUnXqvCwK-kFMpw","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] RESTful Reference Collections and Queues?","postDate":"1327408512","msgId":18490,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PENBTnFpWkpadktOZjdoeE9HQlNKb0VFQUNUTXp5Y0dieXRrRkE2QTl2cjVQQ0VUVkxnZ0BtYWlsLmdtYWlsLmNvbT4=","inReplyToHeader":"PENBQjIzK2l4TVpOPXg2WFpFMDIrMDZqUWU0Q0g9cGJMZUhfZ0M3eS1ENkVrWGR3OV92Z0BtYWlsLmdtYWlsLmNvbT4=","referencesHeader":"PENBQjIzK2l4TVpOPXg2WFpFMDIrMDZqUWU0Q0g9cGJMZUhfZ0M3eS1ENkVrWGR3OV92Z0BtYWlsLmdtYWlsLmNvbT4="},"prevInTopic":18489,"nextInTopic":18491,"prevInTime":18489,"nextInTime":18491,"topicId":18489,"numMessagesInTopic":12,"msgSnippet":"... You can model both with PUT, where an omission/change-of-order by the client implies the relationships have been removed/altered. It s also possible to","rawEmail":"Return-Path: &lt;mikekelly321@...&gt;\r\nX-Sender: mikekelly321@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 68083 invoked from network); 24 Jan 2012 12:35:14 -0000\r\nX-Received: from unknown (98.137.35.162)\n  by m13.grp.sp2.yahoo.com with QMQP; 24 Jan 2012 12:35:14 -0000\r\nX-Received: from unknown (HELO mail-tul01m020-f178.google.com) (209.85.214.178)\n  by mta6.grp.sp2.yahoo.com with SMTP; 24 Jan 2012 12:35:14 -0000\r\nX-Received: by obbwc7 with SMTP id wc7so5616319obb.23\n        for &lt;rest-discuss@yahoogroups.com&gt;; Tue, 24 Jan 2012 04:35:12 -0800 (PST)\r\nMIME-Version: 1.0\r\nX-Received: by 10.182.147.106 with SMTP id tj10mr11682563obb.12.1327408512830;\n Tue, 24 Jan 2012 04:35:12 -0800 (PST)\r\nX-Received: by 10.60.22.129 with HTTP; Tue, 24 Jan 2012 04:35:12 -0800 (PST)\r\nIn-Reply-To: &lt;CAB23+ixMZN=x6XZE02+06jQe4CH=pbLeH_gC7y-D6EkXdw9_vg@...&gt;\r\nReferences: &lt;CAB23+ixMZN=x6XZE02+06jQe4CH=pbLeH_gC7y-D6EkXdw9_vg@...&gt;\r\nDate: Tue, 24 Jan 2012 12:35:12 +0000\r\nMessage-ID: &lt;CANqiZJZvKNf7hxOGBSJoEEACTMzycGbytkFA6A9vr5PCETVLgg@...&gt;\r\nTo: Jim Purbrick &lt;jimpurbrick@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nContent-Type: multipart/alternative; boundary=f46d04446c57e10cb404b74560ca\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Mike Kelly &lt;mikekelly321@...&gt;\r\nSubject: Re: [rest-discuss] RESTful Reference Collections and Queues?\r\nX-Yahoo-Group-Post: member; u=511039257; y=VNl0ISwuE4AsD7t6M5RIunfKirEYRcXPu5kCDphAxAhmU3icbD1yv0CzD7ZPbuy5YB_tkOIiCMwQeqQ\r\nX-Yahoo-Profile: mikekelly8762348\r\n\r\n\r\n--f46d04446c57e10cb404b74560ca\r\nContent-Type: text/plain; charset=ISO-8859-1\r\n\r\nOn Tue, Jan 24, 2012 at 12:10 PM, Jim Purbrick &lt;jimpurbrick@...&gt;wrote:\n\n&gt; **\n&gt;\n&gt;\n&gt; The API I&#39;m building seems to need several types of collections and I\n&gt; think I&#39;ve identified at least 3:\n&gt;\n&gt; 1) Collections of all the resource of a type (for example all the\n&gt; users) where new resource can be created, destroyed and updated. This\n&gt; seems to be the canonical RESTful collection where POST to the\n&gt; collection URI creates the new resource and then PUT and DELETE to the\n&gt; resource URI updates and destroys it.\n&gt;\n&gt; 2) Collections that represent relationships between resources (for\n&gt; example the friends of a user). New relationships between resources\n&gt; can be created with POST, but it&#39;s not clear how they should be\n&gt; removed as the target resource should still exist, just no longer be\n&gt; referenced.\n&gt;\n&gt; 3) Collections that represent queues of references (for example a TODO\n&gt; list for a user). This is more complicated as the collection is\n&gt; ordered and so elements in arbitrary positions need to be added or\n&gt; removed and again the target resources should not be deleted.\n&gt;\n&gt; If anyone could point me to nice patterns for implementing 2 and 3 I&#39;d\n&gt; be very grateful.\n&gt;\n&gt;\nYou can model both with PUT, where an omission/change-of-order by the\nclient implies the relationships have been removed/altered.\n\nIt&#39;s also possible to model the membership as a resource in its own right,\nwhich presents something to clients which they can DELETE. Representing\nthis is easy if you have a quality hypermedia type e.g: here&#39;s how you\ncould represent a person and their friendships using application/hal+xml :\n\n&gt; GET /person/bob\n\n&lt; 200 OK\n&lt; Content-Type: application/hal+xml\n&lt; ....\n\n&lt;resource href=&quot;/person/bob&quot;&gt;\n  &lt;name&gt;Bob&lt;/name&gt;\n  &lt;age&gt;40&lt;/age&gt;\n  &lt;resource rel=&quot;friendship&quot; href=&quot;/person/bob/friendship/23675&quot;&gt;\n    &lt;link rel=&quot;person&quot; href=&quot;/person/dave&quot; /&gt;\n  &lt;/resource&gt;\n  &lt;resource rel=&quot;friendship&quot; href=&quot;/person/bob/friendship/87612&quot;&gt;\n    &lt;link rel=&quot;person&quot; href=&quot;/person/jane&quot; /&gt;\n  &lt;/resource&gt;\n&lt;/resource&gt;\n\nWith the above clients now have the URI where they can DELETE (or update)\nfriendships individually as required.\n\nCheers,\nMike\n\r\n--f46d04446c57e10cb404b74560ca\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;br&gt;&lt;br&gt;&lt;div class=3D&quot;gmail_quote&quot;&gt;On Tue, Jan 24, 2012 at 12:10 PM, Jim Pu=\r\nrbrick &lt;span dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:jimpurbrick@...&quot;&gt;jimpu=\r\nrbrick@...&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote class=3D&quot;gmail_quote&quot;=\r\n style=3D&quot;margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex&quot;&gt;\n\n=\r\n\n\n&lt;u&gt;&lt;/u&gt;\n\n\n\n\n\n\n\n\n\n\n&lt;div style&gt;\n&lt;span&gt;=A0&lt;/span&gt;\n\n\n&lt;div&gt;\n  &lt;div&gt;\n\n\n    &lt;div=\r\n&gt;\n      \n      \n      &lt;p&gt;The API I&#39;m building seems to need several typ=\r\nes of collections and I&lt;br&gt;\nthink I&#39;ve identified at least 3:&lt;br&gt;\n&lt;br&gt;\n=\r\n1) Collections of all the resource of a type (for example all the&lt;br&gt;\nusers=\r\n) where new resource can be created, destroyed and updated. This&lt;br&gt;\nseems =\r\nto be the canonical RESTful collection where POST to the&lt;br&gt;\ncollection URI=\r\n creates the new resource and then PUT and DELETE to the&lt;br&gt;\nresource URI u=\r\npdates and destroys it.&lt;br&gt;\n&lt;br&gt;\n2) Collections that represent relationship=\r\ns between resources (for&lt;br&gt;\nexample the friends of a user). New relationsh=\r\nips between resources&lt;br&gt;\ncan be created with POST, but it&#39;s not clear =\r\nhow they should be&lt;br&gt;\nremoved as the target resource should still exist, j=\r\nust no longer be&lt;br&gt;\nreferenced.&lt;br&gt;\n&lt;br&gt;\n3) Collections that represent que=\r\nues of references (for example a TODO&lt;br&gt;\nlist for a user). This is more co=\r\nmplicated as the collection is&lt;br&gt;\nordered and so elements in arbitrary pos=\r\nitions need to be added or&lt;br&gt;\nremoved and again the target resources shoul=\r\nd not be deleted.&lt;br&gt;\n&lt;br&gt;\nIf anyone could point me to nice patterns for im=\r\nplementing 2 and 3 I&#39;d&lt;br&gt;\nbe very grateful.&lt;br&gt;\n&lt;br&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/=\r\ndiv&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;You can model both with PUT, whe=\r\nre an omission/change-of-order by the client implies the relationships have=\r\n been removed/altered.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;\nIt&#39;s also possible to =\r\nmodel the membership as a resource in its own right, which presents somethi=\r\nng to clients which they can DELETE. Representing this is easy if you have =\r\na quality hypermedia type e.g: here&#39;s how you could represent a person =\r\nand their friendships using application/hal+xml :&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div=\r\n&gt;&gt; GET /person/bob&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt; 200 OK&lt;/div&gt;&lt;div&gt;&lt; C=\r\nontent-Type: application/hal+xml&lt;/div&gt;&lt;div&gt;&lt; ....&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;d=\r\niv&gt;&lt;resource href=3D&quot;/person/bob&quot;&gt;&lt;/div&gt;\n&lt;div&gt;=A0 &lt;name&=\r\ngt;Bob&lt;/name&gt;&lt;/div&gt;&lt;div&gt;=A0 &lt;age&gt;40&lt;/age&gt;&lt;/div&gt;&lt;div&gt;=A0 &=\r\nlt;resource rel=3D&quot;friendship&quot; href=3D&quot;/person/bob/friendshi=\r\np/23675&quot;&gt;&lt;/div&gt;&lt;div&gt;=A0 =A0 &lt;link rel=3D&quot;person&quot; href=\r\n=3D&quot;/person/dave&quot; /&gt;&lt;/div&gt;\n&lt;div&gt;=A0 &lt;/resource&gt;&lt;/div&gt;&lt;di=\r\nv&gt;&lt;div&gt;=A0 &lt;resource rel=3D&quot;friendship&quot; href=3D&quot;/person/b=\r\nob/friendship/87612&quot;&gt;&lt;/div&gt;&lt;div&gt;=A0 =A0 &lt;link rel=3D&quot;person=\r\n&quot; href=3D&quot;/person/jane&quot; /&gt;&lt;/div&gt;&lt;div&gt;\n=A0 &lt;/resource&g=\r\nt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;/resource&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Wi=\r\nth the above clients now have the URI where they can DELETE (or update) fri=\r\nendships individually as required.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;\n&lt;div&gt;Cheers,&lt;/div&gt;&lt;=\r\ndiv&gt;Mike&lt;/div&gt;&lt;/div&gt;\n\r\n--f46d04446c57e10cb404b74560ca--\r\n\n"}}
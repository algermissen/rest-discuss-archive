{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":152748254,"authorName":"wiki1000","from":"&quot;wiki1000&quot; &lt;wiki1000@...&gt;","profile":"wiki1000","replyTo":"SENDER","senderId":"yPtzCd-to4YnHGMk2guboSnCtTsJPtLtJQYmEGCFQi7Ol8hZsN1wfB-LWoLh6gxOVhSp5h0gaiRp2Io_5_3fG9zkp_JdhQ","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: sharing my banking data","postDate":"1057477541","msgId":3758,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGJlOGszNStiY2phQGVHcm91cHMuY29tPg==","inReplyToHeader":"PDAwMTMwMWMzNDM3NCRmM2UyYTRkMCRhMDAwYThjMEBTZWFpcnRoQTMxPg=="},"prevInTopic":3757,"nextInTopic":3760,"prevInTime":3757,"nextInTime":3759,"topicId":3749,"numMessagesInTopic":8,"msgSnippet":"... for the ... Could you elaborate that ? you mean that you hide all uris of your sessions with generated keys inserted in each uri and only known by which","rawEmail":"Return-Path: &lt;wiki1000@...&gt;\r\nX-Sender: wiki1000@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 40598 invoked from network); 6 Jul 2003 07:45:41 -0000\r\nReceived: from unknown (66.218.66.218)\n  by m7.grp.scd.yahoo.com with QMQP; 6 Jul 2003 07:45:41 -0000\r\nReceived: from unknown (HELO n38.grp.scd.yahoo.com) (66.218.66.106)\n  by mta3.grp.scd.yahoo.com with SMTP; 6 Jul 2003 07:45:41 -0000\r\nReceived: from [66.218.67.181] by n38.grp.scd.yahoo.com with NNFMP; 06 Jul 2003 07:45:41 -0000\r\nDate: Sun, 06 Jul 2003 07:45:41 -0000\r\nTo: rest-discuss@yahoogroups.com\r\nSubject: Re: sharing my banking data\r\nMessage-ID: &lt;be8k35+bcja@...&gt;\r\nIn-Reply-To: &lt;001301c34374$f3e2a4d0$a000a8c0@SeairthA31&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Length: 7922\r\nX-Mailer: Yahoo Groups Message Poster\r\nFrom: &quot;wiki1000&quot; &lt;wiki1000@...&gt;\r\nX-Yahoo-Group-Post: member; u=152748254\r\nX-Yahoo-Profile: wiki1000\r\n\r\n--- In rest-discuss@yahoogroups.com, &quot;Seairth Jacobs&quot; &lt;seairth@s...&gt;\nwrote:\n&gt; From: &quot;x y&quot; &lt;wiki1000@y...&gt;\n&gt; &gt;\n&gt; &gt; --- Seairth Jacobs &lt;seairth@s...&gt; wrote:\n&gt; &gt; &gt;\n&gt; &gt; &gt; *sigh* sorry.  This is a mistake.  Originally, Steps\n&gt; &gt; &gt; 1 returned a web form\n&gt; &gt; &gt; and Step 2 was a POST that created the URI.  I\n&gt; &gt; &gt; changed it to HTTP Auth to\n&gt; &gt; &gt; avoid limiting the scope of the example to HTML.  I\n&gt; &gt; &gt; failed to re-read what I\n&gt; &gt; &gt; changed it to, and therefore didn&#39;t catch that I was\n&gt; &gt; &gt; returning a 201 in\n&gt; &gt; &gt; response to a GET.  So... let&#39;s go back and change\n&gt; &gt; &gt; that somewhat:\n&gt; &gt; &gt;\n&gt; &gt; &gt; 1) I POST my credentials to http://my.bank/access,\n&gt; &gt; &gt; be this from a web form,\n&gt; &gt; &gt; some proprietary xml, etc.  The server authenticates\n&gt; &gt; &gt; me and returns a 201\n&gt; &gt; &gt; with a Location of http://my.bank/access/12345.\n&gt; &gt; &gt; (note: the html form could\n&gt; &gt; &gt; be retrieved with a GET to http://my.bank/access.)\n&gt; &gt;\n&gt; &gt; You miss my point, sorry.\n&gt; &gt; I wanted to say that your initial URI is just a &quot;place\n&gt; &gt; holder&quot; for a modal interaction.\n&gt; &gt; In fact, according to what you enter as a user id,\n&gt; &gt; you will get different resources.\n&gt; &gt;\n&gt; &gt; I was suggesting\n&gt; &gt; to directly enter a personalized URI containing\n&gt; &gt; you login name in it, like:\n&gt; &gt;\n&gt; &gt; http://my.bank/private/sj\n&gt; \n&gt; That&#39;s fine, if you are going to use something like HTTP Auth the entire\n&gt; time.  My example was attempting to avoid use of HTTP Auth (except\nfor the\n&gt; initial authentication).\n\nCould you elaborate that ? you mean that you &quot;hide&quot; all uris of your \nsessions with generated keys inserted in each uri and only known by\nwhich receive them ?\n\n&gt; &gt; &gt; &gt; &gt; The e-mailed URL would have a limited time limit\n&gt; &gt; &gt; such as 30 minutes,\n&gt; &gt; &gt; &gt; after\n&gt; &gt; &gt; &gt; &gt; which, the link will only return a 404 response\n&gt; &gt; &gt; or some such.\n&gt; &gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; In my mind, this create a state inside the server\n&gt; &gt; &gt; (a timer). This is\n&gt; &gt; &gt; &gt; bad isn&#39;t it ?\n&gt; &gt; &gt;\n&gt; &gt; &gt; The timer is not part of the client state.  It&#39;s\n&gt; &gt; &gt; part of the resource state.\n&gt; &gt; &gt; It&#39;s the client state that the server is not suppose\n&gt; &gt; &gt; to be maintaining.\n&gt; &gt; &gt;\n&gt; &gt; Yes, but such a timer is a dynamic, in memory\n&gt; &gt; resource, which is very difficult to implement in a\n&gt; &gt; scalable way. It suppose a kind of daemon attached to\n&gt; &gt; the resource.\n&gt; &gt;\n&gt; &gt; Imagine a farm of timers managing the state of hundred\n&gt; &gt; such resources...\n&gt; \n&gt; I don&#39;t see why you need timers.  Store an expiration timestamp in the\n&gt; resource.  On access the the URL, the timestamp is checked.  If expired,\n&gt; return the appropriate 4xx response.  This method should scale fine.\n Also,\n&gt; caching would not be an issue because if SSL is being used, nothing is\n&gt; cached anyhow.\n\nyou are right. This suppose however additional data stored with each\nresource and SSL used with all uris. This would be server SSL however.\n\nNote that SSL is perhaps not \nthe whole story. Data could be encrypted at the application level with\na key only known by the identified recipient. This would allow caching...\n&gt; \n&gt; &gt; &gt; By the way, the reason I created the URI instead of\n&gt; &gt; &gt; using HTTP Auth (or a\n&gt; &gt; &gt; cookie or whatever) at all times was partly due to\n&gt; &gt; &gt; Tyler and his crazy\n&gt; &gt; &gt; capabilities-based security model.  :)  I am not\n&gt; &gt; &gt; sure if I am doing it\n&gt; &gt; &gt; right, but the basic idea here was that the bank\n&gt; &gt; &gt; issued a URI\n&gt; &gt; &gt; (http://my.bank/access/12345) with a defined set of\n&gt; &gt; &gt; capabilities (the\n&gt; &gt; &gt; &quot;contract&quot;).  I could do anything that&#39;s defined,\n&gt; &gt; &gt; nothing more.  On top of\n&gt; &gt; &gt; that, when I want to share part of my access, I ask\n&gt; &gt; &gt; the bank for another\n&gt; &gt; &gt; capability URI (http://my.bank/proxy-access/56789)\n&gt; &gt; &gt; for that particular bit.\n&gt; &gt; &gt; Like the first URI, use is limited to what is\n&gt; &gt; &gt; defined.  This also means that\n&gt; &gt; &gt; I do not have to get my accountant set up with a\n&gt; &gt; &gt; separate password, flip a\n&gt; &gt; &gt; potentially large set of switches to set the\n&gt; &gt; &gt; security context, etc. just to\n&gt; &gt; &gt; give access.\n&gt; &gt;\n&gt; &gt; This is the point: what you want to do is to share\n&gt; &gt; personalized resources without pain.\n&gt; &gt;\n&gt; &gt; However, your solution implies the generation of a\n&gt; &gt; fake URI which has universal validity during its life\n&gt; &gt; time. This is not really secure...\n&gt; \n&gt; First, the URI is not fake.  It is a fully functional, legitimate URI.\n&gt; Second, I do not see why this method isn&#39;t secure.  It is every bit as\n&gt; secure as any of the traditional methods (cookies, HTTP Basic Auth,\netc).\n&gt; The security is provided by the SSL, not the format of the URI. \nAbout the\n&gt; only thing I can think of is the possibility of someone looking over\nyour\n&gt; shoulder and writing down the URI.\n\nThats true again. But as far as I understand, security is mainly\nprovided by the fact that the uri cannot be guessed. \n\n&gt; &gt; Of course, this is a somewhat weak\n&gt; &gt; &gt; example, since most people\n&gt; &gt; &gt; would likely just copy-n-paste the screen and e-mail\n&gt; &gt; &gt; it instead of go\n&gt; &gt; &gt; through all of this effort.  But in a more complex\n&gt; &gt; &gt; situation, I see how this\n&gt; &gt; &gt; approach could work well (I think).\n&gt; &gt; &gt;\n&gt; &gt;\n&gt; &gt; I aggree, this is not top notch security. Thats why\n&gt; &gt; it is necessary to impose to the accountant to\n&gt; &gt; authenticate himself before reading a shared URI.\n&gt; \n&gt; So would the mean that the accountant would have to get an access\naccount\n&gt; set up with my bank?  Somehow, I doubt that banks are going to want\nto take\n&gt; the time to set up all of these accounts just so I can share views of my\n&gt; transactions with my accountant, my lawyer, or the service rep on\nthe other\n&gt; end of the phone who refuses to believe that they overcharged me. \nNot only\n&gt; that, it means that my accountant would have to maintain accounts\nwith all\n&gt; of the banks, stock brokers, etc. that her clients use.  What a pain!  \n\nYes but a bank has infrastructures to allocate accounts, and I\npersonaly doubt that they will let anonymous users GET sensitive\ninformation only protected by the obscurity of an identifier...\n\n\n&gt; As\n&gt; long at the generated URI is securely given to the intended recipient, I\n&gt; don&#39;t see where the security issue is.  It would certainly be much\neasier\n&gt; for my accountant to get a single encryption certificate with which\nI could\n&gt; securely sender her an e-mail.\n\nThis is person-to-person encryption, precisely the case where using a\ncentral authority (here the bank, for data related to the bank) is\nvery useful. \n\n&gt; \n&gt; &gt; Encoding the &quot;needed roles&quot; in the URI allow a very\n&gt; &gt; efficient check : the access control has simply to get\n&gt; &gt; the available user roles from the authenticated user\n&gt; &gt; profile, and then check that there is one which match\n&gt; &gt; the &quot;role part&quot; of the presented URI. This trick avoid\n&gt; &gt; to store a map resource-&gt;role in the server.\n&gt; \n&gt; I will have to defer to Tyler on this one.  As I understand it,\nrole-based\n&gt; security is more prone to security holes than is capability-based\nsecurity.\n&gt; However, I come from the practice of a role-based model (good ol&#39; MS\n&gt; Windows) and am still learning the capability-based model, so my\nexperience\n&gt; is quite limited.\n\nAs far as I understand, it seems that encoding a &quot;right&quot; in the URI is\nprecisely which makes it a capability. You have in the same piece of\ninformation (the URI) the address of the resource and the required\nright to access it. My sharing example seems to be what capability\nguys want: the ability to build dedicated handles on the same resource\nwithout modifying it. Since it is Restful to have different URIs on\nthe same resource, it seems ok. \n\nWhat you do seems also to be a kind of capability based system in the\nsame aspect. My problem is that i dont like URIs with generated\nnumbers in them. What do experts think ? \n\n&gt; AND I am perfectly willing to admit that this whole thing could be very\n&gt; unRESTful.  That&#39;s why I&#39;m putting it out there ...\n&gt; \n&gt; Seairth\n\nYes I am piggybacking  on your idea, but for the same reasons. Anyway\nits a lot of fun and it is very interesting, thanks. \n\n\n"}}
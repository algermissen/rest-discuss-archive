{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":210009313,"authorName":"Glenn Block","from":"Glenn Block &lt;glenn.block@...&gt;","profile":"glenn_block","replyTo":"SENDER","senderId":"QfqtrwLkMUZ1E9Yj7GyCl94VxBuxgg-IgiKWhpbpgwl0WPkGMi8dadGGP4X_Z7acVkab2FtNMQBx_X7aUHCSZ8dKhz25iLbBe0E","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Re: Restful Approaches to some Enterprise \tIntegration Problems","postDate":"1278568362","msgId":15810,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEFBTkxrVGlua1NtbW9yUm9zMWsyYlpGN1pZZlAwU0d2Rkw3NXcwTHJTYXN1c0BtYWlsLmdtYWlsLmNvbT4=","inReplyToHeader":"PDA2MUM2MzJBLUREQjctNERFMy1CMjBELUU4MUY2NzcyMUMwOEBnYml2LmNvbT4=","referencesHeader":"PGkwdWxraCtsdnI5QGVHcm91cHMuY29tPgk8MDYxQzYzMkEtRERCNy00REUzLUIyMEQtRTgxRjY3NzIxQzA4QGdiaXYuY29tPg=="},"prevInTopic":15809,"nextInTopic":15811,"prevInTime":15809,"nextInTime":15811,"topicId":15761,"numMessagesInTopic":45,"msgSnippet":"Hi Roy Any thoughs on HTML5 Web Sockets wrt REST? Would it be viable to have a REST resources that can communicate changes (events) through web sockets? Or ","rawEmail":"Return-Path: &lt;glenn.block@...&gt;\r\nX-Sender: glenn.block@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 18048 invoked from network); 8 Jul 2010 05:52:45 -0000\r\nX-Received: from unknown (98.137.34.45)\n  by m3.grp.sp2.yahoo.com with QMQP; 8 Jul 2010 05:52:45 -0000\r\nX-Received: from unknown (HELO mail-vw0-f43.google.com) (209.85.212.43)\n  by mta2.grp.sp2.yahoo.com with SMTP; 8 Jul 2010 05:52:44 -0000\r\nX-Received: by vws4 with SMTP id 4so865562vws.2\n        for &lt;rest-discuss@yahoogroups.com&gt;; Wed, 07 Jul 2010 22:52:43 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.229.221.142 with SMTP id ic14mr4532819qcb.222.1278568363678; \n\tWed, 07 Jul 2010 22:52:43 -0700 (PDT)\r\nX-Received: by 10.229.219.85 with HTTP; Wed, 7 Jul 2010 22:52:42 -0700 (PDT)\r\nIn-Reply-To: &lt;061C632A-DDB7-4DE3-B20D-E81F67721C08@...&gt;\r\nReferences: &lt;i0ulkh+lvr9@...&gt;\n\t&lt;061C632A-DDB7-4DE3-B20D-E81F67721C08@...&gt;\r\nDate: Wed, 7 Jul 2010 22:52:42 -0700\r\nMessage-ID: &lt;AANLkTinkSmmorRos1k2bZF7ZYfP0SGvFL75w0LrSasus@...&gt;\r\nTo: &quot;Roy T.Fielding&quot; &lt;fielding@...&gt;\r\nCc: bryan_w_taylor &lt;bryan_w_taylor@...&gt;, rest-discuss@yahoogroups.com\r\nContent-Type: multipart/alternative; boundary=0016362835fa235ef6048ad9e505\r\nFrom: Glenn Block &lt;glenn.block@...&gt;\r\nSubject: Re: [rest-discuss] Re: Restful Approaches to some Enterprise \n\tIntegration Problems\r\nX-Yahoo-Group-Post: member; u=210009313; y=fPQVXjnQBOm9fprghBctMgm80OsOfCtLGiVrr5InnRGWW524GRs\r\nX-Yahoo-Profile: glenn_block\r\n\r\n\r\n--0016362835fa235ef6048ad9e505\r\nContent-Type: text/plain; charset=windows-1252\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nHi Roy\n\nAny thoughs on HTML5 Web Sockets wrt REST? Would it be viable to ha=\r\nve a REST\nresources that can communicate changes (events) through web socke=\r\nts? Or\nwould you say that it is orthagonal?\n\nThanks\nGlenn\n\nOn Wed, Jul 7, 2=\r\n010 at 8:25 PM, Roy T.Fielding &lt;fielding@...&gt; wrote:\n\n&gt;\n&gt;\n&gt; On Jul 6, =\r\n2010, at 12:22 AM, bryan_w_taylor wrote:\n&gt; &gt; --- In rest-discuss@yahoogroup=\r\ns.com &lt;rest-discuss%40yahoogroups.com&gt;,\n&gt; &quot;Roy T. Fielding&quot; &lt;fielding@...&gt; =\r\nwrote:\n&gt; &gt;\n&gt; &gt; &gt; &gt; Specifically, we are trying to find RESTful solutions to=\r\n:\n&gt; &gt; &gt; &gt;\n&gt; &gt; &gt; &gt; 1) Guaranteed Delivery - we need a paradigm to follow so =\r\nthat one\n&gt; service can transfer a sequence of resource representations to a=\r\nnother\n&gt; reliably even though both services and the network suffer temporar=\r\ny\n&gt; unreliability\n&gt; &gt; &gt;\n&gt; &gt; &gt; That doesn&#39;t sound like a problem encountered=\r\n by RESTful\n&gt; &gt; &gt; architectures. Reliable upload of multiple files can be\n&gt;=\r\n &gt; &gt; performed using a single zip file, but the assumption being made\n&gt; &gt; &gt;=\r\n here is that the client has a shared understanding of what the\n&gt; &gt; &gt; serve=\r\nr is intending to do with those files. That&#39;s coupling.\n&gt; &gt;\n&gt; &gt; I don&#39;t fol=\r\nlow. Several people have given good simple answers saying to\n&gt; use the idem=\r\npotent nature of PUT (or fake it with POST) until a GET of the\n&gt; resource s=\r\nucceeds or add an HTTP header of If-None-Match: * and repeat the\n&gt; PUT unti=\r\nl you get a 412 Precondition Failed response, so I thought this was\n&gt; a sla=\r\nm dunk.\n&gt;\n&gt; I guess it depends on how you define guaranteed delivery. You c=\r\nan\n&gt; certainly do such things with HTTP, but doing CRUD ops via HTTP does\n&gt;=\r\n not automatically make it a RESTful paradigm.\n&gt;\n&gt;\n&gt; &gt; But that answers &quot;ho=\r\nw&quot; and I think you are getting at &quot;why&quot;. I&#39;m\n&gt; imagining that we have two s=\r\nervers A and B, where A plays the role of the\n&gt; client in the interaction. =\r\nEvents happen on server A and server B must\n&gt; receive some representation r=\r\nelated to each event or unacceptable business\n&gt; consequences occur.\n&gt;\n&gt; Ah,=\r\n typical event-based integration. That&#39;s a good architectural\n&gt; style for s=\r\nome applications. Why use REST to do that?\n&gt;\n&gt;\n&gt; &gt; Why can&#39;t we merge the f=\r\nunctionality of server A and B? Lots of reasons:\n&gt; Security, regulatory com=\r\npliance, use of 3rd party systems, organizational\n&gt; boundaries and/or polit=\r\nics are a few. The way a company manages it&#39;s systems\n&gt; engineering work is=\r\n to partition business functionality into pieces, give\n&gt; ownership of each =\r\npiece to a team, and align physical resources like servers\n&gt; to those teams=\r\n. If this imposes constraints not found in RESTful systems,\n&gt; then I have n=\r\no choice but to deal with those.\n&gt;\n&gt; Yes, but the RESTful solution is not t=\r\no pretend that REST is an\n&gt; event-based integration style. What you want to=\r\n do with REST is\n&gt; re-architect the system into more isolated parts that ar=\r\ne event-based\n&gt; (usually a very small communication subsystem) and the rema=\r\ninder\n&gt; as a layered information system. The reason to do this, presumably,=\r\n\n&gt; is to expose the RESTful interface to consumers instead of exposing\n&gt; th=\r\ne much more complex (and brittle) event interface.\n&gt;\n&gt; For example, CQ5 has=\r\n a content repository based on the JCR\n&gt; interface, which includes both obs=\r\nervation (change event notifiers)\n&gt; and RESTful interaction. The observatio=\r\nn is behind the resource\n&gt; interface, so the fact that it isn&#39;t RESTful its=\r\nelf does not\n&gt; interfere with the multi-organizational, long-lived applicat=\r\nions\n&gt; that might only use the Web interface.\n&gt;\n&gt;\n&gt; &gt; &gt; Applications like t=\r\nhat are usually accomplished via code-on-demand.\n&gt; &gt; &gt; The problem you will=\r\n run into here is implementation issues\n&gt; &gt; &gt; regarding current browsers, n=\r\not architectural issues and\n&gt; &gt; &gt; certainly not a style issue. Most such to=\r\nols are developed\n&gt; &gt; &gt; as browser extensions or app-specific clients, most=\r\nly because\n&gt; &gt; &gt; they need unfettered access to the filesystem and because\n=\r\n&gt; &gt; &gt; browsers (for some unknown reason) don&#39;t include integrity checks\n&gt; &gt;=\r\n &gt; in normal file uploads.\n&gt; &gt;\n&gt; &gt; I expect the clients of most of our serv=\r\nices would count as &quot;app specific\n&gt; clients&quot;. These might be our other serv=\r\nices, our app servers that host user\n&gt; interfaces, or sometimes we will all=\r\now external business entities\n&gt; (customers, partners, suppliers, etc...) to=\r\n write such apps directly. I\n&gt; don&#39;t mind going beyond browser limitations.=\r\n\n&gt; &gt;\n&gt; &gt; &gt; &gt; 2) Distributed Transactions - we need a paradigm to allow stat=\r\ne\n&gt; changes on multiple services to happen so that the changes succeed or f=\r\nail\n&gt; as a unit\n&gt; &gt; &gt;\n&gt; &gt; &gt; Again, not a characteristic of RESTful architec=\r\ntures. If the\n&gt; &gt; &gt; client knows the transaction is distributed, you have f=\r\nailed.\n&gt; &gt; &gt; There are lots of ways to solve this kind of problem on the\n&gt; =\r\n&gt; &gt; back-end of services interfaces, behind the resource abstraction,\n&gt; &gt; &gt;=\r\n but none of those are relevant to the REST architectural style\n&gt; &gt; &gt; that =\r\nmight apply on the front-end of the service interface.\n&gt; &gt;\n&gt; &gt; This one I a=\r\nccept doesn&#39;t fit in a RESTful solution, and in other posts\n&gt; in this threa=\r\nd, we are exploring several of other ways you mention.\n&gt; &gt;\n&gt; &gt; &gt; &gt; 3) Long =\r\nrunning operations - we need asynchronous invocations between\n&gt; services an=\r\nd a mechanism for the invoking service to find out when the\n&gt; invoked servi=\r\nce is done given that this work may take indefinitely long\n&gt; &gt; &gt;\n&gt; &gt; &gt; Any =\r\nresource can behave as a long-running service. Just program it that\n&gt; way.\n=\r\n&gt; &gt;\n&gt; &gt; Right, the question is how, exactly. Good solutions have been poste=\r\nd in\n&gt; this thread for this. Subbu&#39;s RESTful Web Services Cookbook solves t=\r\nhis in\n&gt; examples 1.10 and 1.11. I think this was another slam dunk.\n&gt; &gt;\n&gt; =\r\n&gt; I&#39;m curious what you think about using so called &quot;web hooks&quot; for this\n&gt; k=\r\nind of thing. Would you consider this a violation of the client-server\n&gt; co=\r\nnstraint?\n&gt;\n&gt; No, web hooks is just someone&#39;s marketing term for registerin=\r\ng\n&gt; notifications. The components that act on them are still either\n&gt; clien=\r\nts or servers during the communication (i.e., they are not\n&gt; trying to do b=\r\noth at the same time and functionality is still\n&gt; split across components).=\r\n This is not a new concept. E.g.,\n&gt;\n&gt; http://www.xent.com/FoRK-archive/apr9=\r\n8/0445.html\n&gt;\n&gt; http://www.xent.com/FoRK-archive/august98/0307.html\n&gt;\n&gt;\n&gt; &gt;=\r\n &gt; &gt; 4) Workflow Orchestration - we would like to have orchestration\n&gt; serv=\r\nices that define business processes via standardized representations (eg\n&gt; =\r\nBPMN), then execute instances of those processes and build up an process\n&gt; =\r\ninstance execution data resource by interacting with other RESTful resource=\r\ns\n&gt; using message exchange patterns that could specify the above behaviors.=\r\n\n&gt; &gt; &gt;\n&gt; &gt; &gt; That is a system, not an integration problem. If you want to\n&gt;=\r\n &gt; &gt; solve it, buy a full-featured WCM system like Day&#39;s CQ5.\n&gt; &gt; &gt;\n&gt; &gt; &gt; h=\r\nttp://www.day.com/day/en/products/web_content_management.html\n&gt; &gt; &gt;\n&gt; &gt; &gt; (=\r\nsorry, I don&#39;t have a way to answer that one without sounding\n&gt; &gt; &gt; like a =\r\nsales plug -- it is, after all, why I work for a WCM vendor).\n&gt; &gt;\n&gt; &gt; No ne=\r\ned to apologize for pointing me to a product that might be useful\n&gt; for us.=\r\n I&#39;ve been in several sales presentations in the last couple weeks\n&gt; with d=\r\nifferent vendors who have big fancy workflow engines. They all want to\n&gt; ta=\r\nlk about WS-BPEL and orchestrating our SOAP endpoints. I enjoy the look of\n=\r\n&gt; confusion when I mention that we are considering not allowing any new\n&gt; s=\r\nervices to be created using SOAP. That seems to get their attention. They\n&gt;=\r\n say &quot;what will you do instead?&quot; and I say use HTTP and they say &quot;huh?&quot;.\n&gt;\n=\r\n&gt; As much as I like doing things in HTTP, there are many closed systems\n&gt; t=\r\nhat are better implemented in an efficient RPC syntax or a wire\n&gt; protocol =\r\nspecifically designed for message queues. Use whatever\n&gt; works best for the=\r\n specific architecture behind the resource interface\n&gt; and then apply REST =\r\nas the external facade to support large-scale\n&gt; integration and reusability=\r\n of the information produced/consumed.\n&gt;\n&gt; Note, however, that SOAP is fair=\r\nly unique for being the least efficient\n&gt; way of doing anything. That&#39;s wha=\r\nt happens when core protocol design\n&gt; is driven by marketing.\n&gt;\n&gt; ....Roy\n&gt;=\r\n\n&gt;  \n&gt;\n\r\n--0016362835fa235ef6048ad9e505\r\nContent-Type: text/html; charset=windows-1252\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;div&gt;Hi Roy&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;Any thoughs on HTML5 Web Sockets wrt =\r\nREST? Would it be viable to have a REST resources that can communicate chan=\r\nges (events) through web sockets? Or would you say that it is orthagonal?&lt;/=\r\ndiv&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;Thanks&lt;br&gt;Glenn&lt;br&gt;&lt;br&gt;&lt;/div&gt;\n&lt;div class=3D&quot;gmail_=\r\nquote&quot;&gt;On Wed, Jul 7, 2010 at 8:25 PM, Roy T.Fielding &lt;span dir=3D&quot;ltr&quot;&gt;&lt=\r\n;&lt;a href=3D&quot;mailto:fielding@...&quot;&gt;fielding@...&lt;/a&gt;&gt;&lt;/span&gt; wrot=\r\ne:&lt;br&gt;\n&lt;blockquote style=3D&quot;BORDER-LEFT: #ccc 1px solid; MARGIN: 0px 0px 0p=\r\nx 0.8ex; PADDING-LEFT: 1ex&quot; class=3D&quot;gmail_quote&quot;&gt;\n&lt;div style=3D&quot;BACKGROUND=\r\n-COLOR: #fff&quot;&gt;&lt;span&gt;=A0&lt;/span&gt; \n&lt;div&gt;\n&lt;div&gt;\n&lt;div&gt;\n&lt;p&gt;\n&lt;div class=3D&quot;im&quot;&gt;On =\r\nJul 6, 2010, at 12:22 AM, bryan_w_taylor wrote:&lt;br&gt;&gt; --- In &lt;a href=3D&quot;m=\r\nailto:rest-discuss%40yahoogroups.com&quot; target=3D&quot;_blank&quot;&gt;rest-discuss@yahoog=\r\nroups.com&lt;/a&gt;, &quot;Roy T. Fielding&quot; &lt;fielding@...&gt; wrote:&lt;br&gt;\n=\r\n&gt; &lt;br&gt;&gt; &gt; &gt; Specifically, we are trying to find RESTful solutio=\r\nns to:&lt;br&gt;&gt; &gt; &gt; &lt;br&gt;&gt; &gt; &gt; 1) Guaranteed Delivery - we nee=\r\nd a paradigm to follow so that one service can transfer a sequence of resou=\r\nrce representations to another reliably even though both services and the n=\r\network suffer temporary unreliability&lt;br&gt;\n&gt; &gt; &lt;br&gt;&gt; &gt; That does=\r\nn&#39;t sound like a problem encountered by RESTful&lt;br&gt;&gt; &gt; architectu=\r\nres. Reliable upload of multiple files can be&lt;br&gt;&gt; &gt; performed using =\r\na single zip file, but the assumption being made&lt;br&gt;\n&gt; &gt; here is that=\r\n the client has a shared understanding of what the&lt;br&gt;&gt; &gt; server is i=\r\nntending to do with those files. That&#39;s coupling.&lt;br&gt;&gt; &lt;br&gt;&gt; I do=\r\nn&#39;t follow. Several people have given good simple answers saying to use=\r\n the idempotent nature of PUT (or fake it with POST) until a GET of the res=\r\nource succeeds or add an HTTP header of If-None-Match: * and repeat the PUT=\r\n until you get a 412 Precondition Failed response, so I thought this was a =\r\nslam dunk.&lt;br&gt;\n&lt;br&gt;&lt;/div&gt;I guess it depends on how you define guaranteed de=\r\nlivery. You can&lt;br&gt;certainly do such things with HTTP, but doing CRUD ops v=\r\nia HTTP does&lt;br&gt;not automatically make it a RESTful paradigm. \n&lt;div class=\r\n=3D&quot;im&quot;&gt;&lt;br&gt;&lt;br&gt;&gt; But that answers &quot;how&quot; and I think you are g=\r\netting at &quot;why&quot;. I&#39;m imagining that we have two servers A and=\r\n B, where A plays the role of the client in the interaction. Events happen =\r\non server A and server B must receive some representation related to each e=\r\nvent or unacceptable business consequences occur.&lt;br&gt;\n&lt;br&gt;&lt;/div&gt;Ah, typical=\r\n event-based integration. That&#39;s a good architectural&lt;br&gt;style for some=\r\n applications. Why use REST to do that? \n&lt;div class=3D&quot;im&quot;&gt;&lt;br&gt;&lt;br&gt;&gt; Why=\r\n can&#39;t we merge the functionality of server A and B? Lots of reasons: S=\r\necurity, regulatory compliance, use of 3rd party systems, organizational bo=\r\nundaries and/or politics are a few. The way a company manages it&#39;s syst=\r\nems engineering work is to partition business functionality into pieces, gi=\r\nve ownership of each piece to a team, and align physical resources like ser=\r\nvers to those teams. If this imposes constraints not found in RESTful syste=\r\nms, then I have no choice but to deal with those. &lt;br&gt;\n&lt;br&gt;&lt;/div&gt;Yes, but t=\r\nhe RESTful solution is not to pretend that REST is an&lt;br&gt;event-based integr=\r\nation style. What you want to do with REST is&lt;br&gt;re-architect the system in=\r\nto more isolated parts that are event-based&lt;br&gt;(usually a very small commun=\r\nication subsystem) and the remainder&lt;br&gt;\nas a layered information system. T=\r\nhe reason to do this, presumably,&lt;br&gt;is to expose the RESTful interface to =\r\nconsumers instead of exposing&lt;br&gt;the much more complex (and brittle) event =\r\ninterface.&lt;br&gt;&lt;br&gt;For example, CQ5 has a content repository based on the JC=\r\nR&lt;br&gt;\ninterface, which includes both observation (change event notifiers)&lt;b=\r\nr&gt;and RESTful interaction. The observation is behind the resource&lt;br&gt;interf=\r\nace, so the fact that it isn&#39;t RESTful itself does not&lt;br&gt;interfere wit=\r\nh the multi-organizational, long-lived applications&lt;br&gt;\nthat might only use=\r\n the Web interface. \n&lt;div class=3D&quot;im&quot;&gt;&lt;br&gt;&lt;br&gt;&gt; &gt; Applications like =\r\nthat are usually accomplished via code-on-demand.&lt;br&gt;&gt; &gt; The problem =\r\nyou will run into here is implementation issues&lt;br&gt;&gt; &gt; regarding curr=\r\nent browsers, not architectural issues and&lt;br&gt;\n&gt; &gt; certainly not a st=\r\nyle issue. Most such tools are developed&lt;br&gt;&gt; &gt; as browser extensions=\r\n or app-specific clients, mostly because&lt;br&gt;&gt; &gt; they need unfettered =\r\naccess to the filesystem and because&lt;br&gt;&gt; &gt; browsers (for some unknow=\r\nn reason) don&#39;t include integrity checks&lt;br&gt;\n&gt; &gt; in normal file u=\r\nploads.&lt;br&gt;&gt; &lt;br&gt;&gt; I expect the clients of most of our services would=\r\n count as &quot;app specific clients&quot;. These might be our other servic=\r\nes, our app servers that host user interfaces, or sometimes we will allow e=\r\nxternal business entities (customers, partners, suppliers, etc...) to write=\r\n such apps directly. I don&#39;t mind going beyond browser limitations. &lt;br=\r\n&gt;\n&gt; &lt;br&gt;&gt; &gt; &gt; 2) Distributed Transactions - we need a paradigm =\r\nto allow state changes on multiple services to happen so that the changes s=\r\nucceed or fail as a unit&lt;br&gt;&gt; &gt; &lt;br&gt;&gt; &gt; Again, not a characteri=\r\nstic of RESTful architectures. If the&lt;br&gt;\n&gt; &gt; client knows the transa=\r\nction is distributed, you have failed.&lt;br&gt;&gt; &gt; There are lots of ways =\r\nto solve this kind of problem on the&lt;br&gt;&gt; &gt; back-end of services inte=\r\nrfaces, behind the resource abstraction,&lt;br&gt;\n&gt; &gt; but none of those ar=\r\ne relevant to the REST architectural style&lt;br&gt;&gt; &gt; that might apply on=\r\n the front-end of the service interface.&lt;br&gt;&gt; &lt;br&gt;&gt; This one I accept=\r\n doesn&#39;t fit in a RESTful solution, and in other posts in this thread, =\r\nwe are exploring several of other ways you mention.&lt;br&gt;\n&gt; &lt;br&gt;&gt; &gt; =\r\n&gt; 3) Long running operations - we need asynchronous invocations between =\r\nservices and a mechanism for the invoking service to find out when the invo=\r\nked service is done given that this work may take indefinitely long&lt;br&gt;\n&gt=\r\n; &gt; &lt;br&gt;&gt; &gt; Any resource can behave as a long-running service. Jus=\r\nt program it that way.&lt;br&gt;&gt; &lt;br&gt;&gt; Right, the question is how, exactly=\r\n. Good solutions have been posted in this thread for this. Subbu&#39;s REST=\r\nful Web Services Cookbook solves this in examples 1.10 and 1.11. I think th=\r\nis was another slam dunk.&lt;br&gt;\n&gt; &lt;br&gt;&gt; I&#39;m curious what you think =\r\nabout using so called &quot;web hooks&quot; for this kind of thing. Would y=\r\nou consider this a violation of the client-server constraint? &lt;br&gt;&lt;br&gt;&lt;/div=\r\n&gt;No, web hooks is just someone&#39;s marketing term for registering&lt;br&gt;\nnot=\r\nifications. The components that act on them are still either&lt;br&gt;clients or =\r\nservers during the communication (i.e., they are not&lt;br&gt;trying to do both a=\r\nt the same time and functionality is still&lt;br&gt;split across components). Thi=\r\ns is not a new concept. E.g.,&lt;br&gt;\n&lt;br&gt;&lt;a href=3D&quot;http://www.xent.com/FoRK-a=\r\nrchive/apr98/0445.html&quot; target=3D&quot;_blank&quot;&gt;http://www.xent.com/FoRK-archive/=\r\napr98/0445.html&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;a href=3D&quot;http://www.xent.com/FoRK-archive/augu=\r\nst98/0307.html&quot; target=3D&quot;_blank&quot;&gt;http://www.xent.com/FoRK-archive/august98=\r\n/0307.html&lt;/a&gt; \n&lt;div class=3D&quot;im&quot;&gt;&lt;br&gt;&lt;br&gt;&gt; &gt; &gt; 4) Workflow Orches=\r\ntration - we would like to have orchestration services that define business=\r\n processes via standardized representations (eg BPMN), then execute instanc=\r\nes of those processes and build up an process instance execution data resou=\r\nrce by interacting with other RESTful resources using message exchange patt=\r\nerns that could specify the above behaviors.&lt;br&gt;\n&gt; &gt; &lt;br&gt;&gt; &gt; Th=\r\nat is a system, not an integration problem. If you want to&lt;br&gt;&gt; &gt; sol=\r\nve it, buy a full-featured WCM system like Day&#39;s CQ5.&lt;br&gt;&gt; &gt; &lt;br&gt;=\r\n&gt; &gt; &lt;a href=3D&quot;http://www.day.com/day/en/products/web_content_managem=\r\nent.html&quot; target=3D&quot;_blank&quot;&gt;http://www.day.com/day/en/products/web_content_=\r\nmanagement.html&lt;/a&gt;&lt;br&gt;\n&gt; &gt; &lt;br&gt;&gt; &gt; (sorry, I don&#39;t have a =\r\nway to answer that one without sounding&lt;br&gt;&gt; &gt; like a sales plug -- i=\r\nt is, after all, why I work for a WCM vendor).&lt;br&gt;&gt; &lt;br&gt;&gt; No need to =\r\napologize for pointing me to a product that might be useful for us. I&#39;v=\r\ne been in several sales presentations in the last couple weeks with differe=\r\nnt vendors who have big fancy workflow engines. They all want to talk about=\r\n WS-BPEL and orchestrating our SOAP endpoints. I enjoy the look of confusio=\r\nn when I mention that we are considering not allowing any new services to b=\r\ne created using SOAP. That seems to get their attention. They say &quot;wha=\r\nt will you do instead?&quot; and I say use HTTP and they say &quot;huh?&quo=\r\nt;. &lt;br&gt;\n&lt;br&gt;&lt;/div&gt;As much as I like doing things in HTTP, there are many c=\r\nlosed systems&lt;br&gt;that are better implemented in an efficient RPC syntax or =\r\na wire&lt;br&gt;protocol specifically designed for message queues. Use whatever&lt;b=\r\nr&gt;works best for the specific architecture behind the resource interface&lt;br=\r\n&gt;\nand then apply REST as the external facade to support large-scale&lt;br&gt;inte=\r\ngration and reusability of the information produced/consumed.&lt;br&gt;&lt;br&gt;Note, =\r\nhowever, that SOAP is fairly unique for being the least efficient&lt;br&gt;way of=\r\n doing anything. That&#39;s what happens when core protocol design&lt;br&gt;\nis d=\r\nriven by marketing.&lt;br&gt;&lt;br&gt;....Roy&lt;br&gt;&lt;br&gt;\n&lt;p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div style=3D&quot;=\r\nMIN-HEIGHT: 0px; COLOR: #fff&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;\n\r\n--0016362835fa235ef6048ad9e505--\r\n\n"}}
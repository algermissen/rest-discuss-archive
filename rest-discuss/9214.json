{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":40455398,"authorName":"Julian Reschke","from":"Julian Reschke &lt;julian.reschke@...&gt;","profile":"JulianReschke","replyTo":"SENDER","senderId":"e3_ZIza0yxtXD-BT55ElgVHNn0YdjhlH04B8QwcyBiN9Ppvf0xbBrfxQEsoTVp9F4mmY52Eki6Gghf6YJ-5hmaIoJAe-e8_yz5APiZQ","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] On resource modeling, intermediaries and deployment","postDate":"1182676342","msgId":9214,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQ2N0UzNTc2LjcwNzAxMDVAZ214LmRlPg==","inReplyToHeader":"PDkzNmExMjU2MDcwNjIyMTMwM282ZjM1MTBmMG84MDY0OTU4NjE4NTNmZkBtYWlsLmdtYWlsLmNvbT4=","referencesHeader":"PDkzNmExMjU2MDcwNjIyMTMwM282ZjM1MTBmMG84MDY0OTU4NjE4NTNmZkBtYWlsLmdtYWlsLmNvbT4="},"prevInTopic":9201,"nextInTopic":9246,"prevInTime":9213,"nextInTime":9215,"topicId":9196,"numMessagesInTopic":8,"msgSnippet":"... I think cache optimizations by PUT and DELETE are overrated. A cache can (and SHOULD) note that the things identified by the Request-URI are stale, but","rawEmail":"Return-Path: &lt;julian.reschke@...&gt;\r\nX-Sender: julian.reschke@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 86182 invoked from network); 24 Jun 2007 09:12:26 -0000\r\nReceived: from unknown (66.218.66.68)\n  by m51.grp.scd.yahoo.com with QMQP; 24 Jun 2007 09:12:26 -0000\r\nReceived: from unknown (HELO mail.gmx.net) (213.165.64.20)\n  by mta11.grp.scd.yahoo.com with SMTP; 24 Jun 2007 09:12:26 -0000\r\nReceived: (qmail invoked by alias); 24 Jun 2007 09:12:24 -0000\r\nReceived: from p508F88C2.dip0.t-ipconnect.de (EHLO [192.168.178.22]) [80.143.136.194]\n  by mail.gmx.net (mp032) with SMTP; 24 Jun 2007 11:12:24 +0200\r\nX-Authenticated: #1915285\r\nX-Provags-ID: V01U2FsdGVkX18c6X4ttxUcSWdkW1KTGopYYLdNh9QFSGv6Ny7t3+\n\tsvaYoQXvbuszBq\r\nMessage-ID: &lt;467E3576.7070105@...&gt;\r\nDate: Sun, 24 Jun 2007 11:12:22 +0200\r\nUser-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; de; rv:1.8.0.4) Gecko/20060516 Thunderbird/1.5.0.4 Mnenhy/0.7.4.666\r\nMIME-Version: 1.0\r\nTo: Koranteng Ofosu-Amaah &lt;amaah@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nReferences: &lt;936a12560706221303o6f3510f0o806495861853ff@...&gt;\r\nIn-Reply-To: &lt;936a12560706221303o6f3510f0o806495861853ff@...&gt;\r\nContent-Type: text/plain; charset=windows-1252; format=flowed\r\nContent-Transfer-Encoding: 8bit\r\nX-Y-GMX-Trusted: 0\r\nX-eGroups-Msg-Info: 1:0:0:0\r\nFrom: Julian Reschke &lt;julian.reschke@...&gt;\r\nSubject: Re: [rest-discuss] On resource modeling, intermediaries and deployment\r\nX-Yahoo-Group-Post: member; u=40455398; y=WNwK-JJeMI8eYvVZo9FNBo--ZGQXAd7b5CAy2DIGEC3UBhiU8V454A\r\nX-Yahoo-Profile: JulianReschke\r\n\r\nKoranteng Ofosu-Amaah wrote:\n&gt; ...\n&gt; 1. intermediaries handle the major HTTP verbs well\n&gt; (GET/POST/PUT/ DELETE are well understood), even as on this list people\n&gt; continue to eternally debate their semantics. however he also points\n&gt; out that not all of the caching intermediaries are taking full\n&gt; advantage of the idempotency of PUT and DELETE for further\n&gt; optimizations. A competitive advantage for those with an itch to\n&gt; scratch\n&gt; ...\n\nI think cache optimizations by PUT and DELETE are overrated. A cache can \n(and SHOULD) note that the things identified by the Request-URI are \nstale, but that&#39;s really it. Furthermore, the optimization in general \nwill only affect the single cache the request went through.\n\n&gt; 2. newer verbs such as those introduced by WebDAV are poorly\n&gt; supported, if at all.\n\nMark wrote:\n\n&quot;GET, HEAD, POST, PUT, DELETE, OPTIONS, and TRACE all seemed to work OK, \nbut quite a few caches had problems with extension HTTP methods. If \nyouï¿½re using non-standard HTTP methods (or even some of the more \nesoteric WebDAV methods; there are a lot of them), beware.&quot;\n\nSo I&#39;m not sure what &quot;poorly&quot; supported means here. In general, a cache \nonly needs to understand the message transmission rules of HTTP to \nsupport *any* method. It would be nice to know what the problems Mark \nsaw were, though.\n\n&gt; Which leads me to extensibility. ..\n&gt; \n&gt; Traditionally the HTTP/REST take on extensibility has been\n&gt; \n&gt; 1. new verbs (as WebDAV added to HTTP)\n&gt; 2. additional HTTP headers (I see lots X-* custom headers in many\n&gt; applications, Google&#39;s custom cache control headers are a case in\n&gt; point)\n&gt; 3. code-on-demand\n&gt; 4. URIs - minting new uris (which can probably be coalesced with the \n&gt; next point)\n&gt; 5. hypermedia as the engine of application state\n&gt; \n&gt; That last is the crucial one in defining the line on extensibility,\n&gt; namely REST seems to place the onus on the evolving set of hypermedia\n&gt; standards that are exchanged.\n&gt; \n&gt; Have we come to a point were extensibility in REST is now de-facto\n&gt; limited to points 2 to 5? And has deployment experience on the web now\n&gt; limited the degrees of freedom available to designers?\n\nMy experience with developing (and supporting) the HTTP server and \nclient stack in one of SAP&#39;s portal products for many years says that \nnew methods do not cause major problems. That may be influenced by the \nfact that most *authoring* goes over HTTPS, and thus caches won&#39;t be \nable to do any harm.\n\n&gt; ...\n&gt; I&#39;d like to tie this in to the discussion around Microsoft&#39;s WEB3S\n&gt; [4], its resource model and the proposal of a new HTTP verb: UPDATE.\n&gt; \n&gt; The thing that ultimately resonates is not the catchy headlines that\n&gt; appear to bait to some [4], nor indeed is it the discussion about the\n&gt; resource model, schemas, hierarchies and the like [5]. I would suggest\n&gt; that the main sticking point and perhaps the sharpest criticism is the\n&gt; introduction of a new verb.\n&gt; \n&gt; Now I like verbs myself, And while I wouldn&#39;t have modeled things the\n&gt; way Yaron and company did, I don&#39;t see particularly see what&#39;s wrong\n&gt; with a new verb. That shouldn&#39;t be the onerous burden. In practice,\n&gt; however, it looks, per Mark, like that will be the limiting factor for\n&gt; adoption of their new RESTful protocol.\n&gt; ...\n\nI don&#39;t think is true.\n\nFor instance, judging from the market share, a big majority of browsers \nsupports arbitrary HTTP methods in XmlHttpRequest (Firefox, IE6 + \nActiveX-XHR, IE7 + ActiveX-XHR). As far as I can tell, only Safari, \nOpera and the new native XHR support in IE7 have problems, and I have \nmade sure that Yaron is aware of that :-).\n\n&gt; Might this be another argument to shy away from new HTTP methods and\n&gt; instead seek to model resources with the well known and understood\n&gt; semantics of our four horsemen of the web? Perhaps we&#39;ll find that the\n&gt; collections and entries of Atompub will be good enough for a large\n&gt; subset. I hope, and I wonder at the same time.\n\nI sympathize with those who dislike &quot;arbitrary&quot; new methods. In general \nI would argue that a new method should be usable to a wide range of \nscenarios. For instance:\n\nMKCOL, COPY, MOVE (RFC2518): if a server implements a hierarchical \nnamespace and wants to enable a client to manipulate it, this seems to \nbe sufficiently generic, well understood and simple to implement.\n\nVERSION-CONTROL, CHECKIN, CHECKOUT (RFC3253): similarly for in-place \nversion control.\n\n...however...:\n\nMKCALENDAR (RFC4791): here&#39;s a verb used for a single use case; creating \na collection with a specific constraint. Adding a new method for each of \nthese will cause the introduction of many new methods that essentially \ndo the same thing, and only differ in the name. Proof: MKADDRESSBOOKBOOK \n(&lt;http://tools.ietf.org/html/draft-daboo-carddav-02#section-6.3.1&gt;).\n\nThe right thing here would have been an extension to MKCOL, supporting \nall these special cases.\n\n&gt; ...\n\nBest regards, Julian\n\n"}}
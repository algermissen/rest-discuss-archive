{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":128506202,"authorName":"Dave Kuhlman","from":"Dave Kuhlman &lt;dkuhlman@...&gt;","profile":"dkuhlman1001","replyTo":"SENDER","senderId":"UzHDpMPd54462626H1fWfaANGEk1NsUSNrV2kgDBFtfHdKgIrUzfMJ-9-E1elkyXQnJO9Fs3XMl9ajRJM7bJiJGrOb4w831mqaql7cLy","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Discussing REST","postDate":"1049323533","msgId":3509,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMDMwNDAyMTQ0NTMyLkE4OTY4M0BjdXR0ZXIucmV4eC5jb20+","inReplyToHeader":"PGI2Ymk2aCRlbnIkMUBwYXByaWthLnJwLmxhbj47IGZyb20gcmVzdC1kaXNjdXNzQGxpc3RnYXRlLnNlbWFudGljby5jb20gb24gVHVlLCBBcHIgMDEsIDIwMDMgYXQgMDk6MjE6MzdBTSArMDEwMA==","referencesHeader":"PHNlbWFudGljby5tYWlsLnJlc3QtZGlzY3Vzcy8yMDAzMDMzMTE3MDIuNDk2NTEuZHVuY2FuQG1jbGluay5pdD4gPGI2Ymk2aCRlbnIkMUBwYXByaWthLnJwLmxhbj4="},"prevInTopic":3508,"nextInTopic":3510,"prevInTime":3508,"nextInTime":3510,"topicId":3505,"numMessagesInTopic":6,"msgSnippet":"Below is a conversation I ve had about how to do REST-ful Web applications.  I d appreciate any comments that you think might save me from ending up in the","rawEmail":"Return-Path: &lt;dkuhlman@...&gt;\r\nX-Sender: dkuhlman@...\r\nX-Apparently-To: rest-discuss@...\r\nReceived: (EGP: mail-8_2_6_5); 2 Apr 2003 22:45:21 -0000\r\nReceived: (qmail 6303 invoked from network); 2 Apr 2003 22:45:21 -0000\r\nReceived: from unknown (66.218.66.217)\n  by m14.grp.scd.yahoo.com with QMQP; 2 Apr 2003 22:45:21 -0000\r\nReceived: from unknown (HELO cutter.rexx.com) (207.167.89.8)\n  by mta2.grp.scd.yahoo.com with SMTP; 2 Apr 2003 22:45:20 -0000\r\nReceived: (from dkuhlman@localhost)\n\tby cutter.rexx.com (8.11.1/8.9.3) id h32MjXm89744\n\tfor rest-discuss@...; Wed, 2 Apr 2003 14:45:33 -0800 (PST)\n\t(envelope-from dkuhlman)\r\nDate: Wed, 2 Apr 2003 14:45:33 -0800\r\nTo: rest-discuss@yahoogroups.com\r\nSubject: Discussing REST\r\nMessage-ID: &lt;20030402144532.A89683@...&gt;\r\nReferences: &lt;semantico.mail.rest-discuss/200303311702.49651.duncan@...&gt; &lt;b6bi6h$enr$1@...&gt;\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=us-ascii\r\nContent-Disposition: inline\r\nUser-Agent: Mutt/1.2.4i\r\nIn-Reply-To: &lt;b6bi6h$enr$1@...&gt;; from rest-discuss@... on Tue, Apr 01, 2003 at 09:21:37AM +0100\r\nFrom: Dave Kuhlman &lt;dkuhlman@...&gt;\r\nX-Yahoo-Group-Post: member; u=128506202\r\nX-Yahoo-Profile: dkuhlman1001\r\n\r\nBelow is a conversation I&#39;ve had about how to do REST-ful Web\napplications.  I&#39;d appreciate any comments that you think might\nsave me from ending up in the non-REST-ful gutter.\n\n  - Dave\n\nOn Mon, Mar 31, 2003 at 11:35:36AM -0700, VanL wrote:\n&gt; Dave Kuhlman wrote:\n&gt; \n\n[snip]\n\n&gt; &gt;If you have more questions, please let me know.\n&gt; &gt;\n&gt; Since you invite questions, I do have a few.  I just read all of the \n&gt; above, as well as a considerable portion of the REST wiki.  I picked up \n&gt; some valuable insights, but I am not sure how some of my application \n&gt; could be implemented in a REST-ful way.  I would appreciate your insight \n&gt; about REST and how it solves (or doesn&#39;t solve) the problem below.\n&gt; \n&gt; For example: a billing application that is implemented as a &quot;wizard&quot; -- \n&gt; a multi-page form, where each step in the process depends on the \n&gt; successful performance of previous steps. It also has the following \n&gt; constraints:\n&gt; - Because the completion of the wizard has side-effects (e.g., the \n&gt; billing of a credit card), that final action must not take place unless \n&gt; all previous portions of the wizard have been completed in the same \n&gt; session.  As a corollary, the final action must not take place unless \n&gt; all previous steps have been completed.\n&gt; - The application must be able to tell what sections of the wizard have \n&gt; been completed successfully, and save that information somehow for the \n&gt; completion of the wizard.  Even if someone bookmarks a page in the \n&gt; middle of the form and sends that URL to another person, the application \n&gt; must sense that a new session has started and transition back to the \n&gt; start stage.\n&gt; \n&gt; You probably know the type of application that I am referring to... \n&gt; almost every online shop has something like it.  However, I cannot even \n&gt; think of a way to even define the application in a stateless (or at \n&gt; least idempotent) fashion.\n&gt; \n&gt; Do you have a solution to this problem?\n\nVan -\n\nInteresting problem.  And, a very realistic one, too.  Here are\nsome attempts at answers, but keep in mind that I am not a REST\nexpert.\n\nFirst, I believe the claims about REST being state-less are very\nmisleading.  After all, the &quot;S&quot; in &quot;REST&quot; stands for &quot;state&quot;.  The\nserver is state-less, but REST applications can have state.  It&#39;s\njust that maintaining state is the responsibility of the client,\nnot the server.  Another way to say this is to say that the server\nmaintains no session information.\n\nIn the FSM/REST model that I use, state/session information is\nreturned from the server to the client in an XML document.  In the\nsubsequent request, the client returns this XML document to the\nserver.  So, state information is passed back and forth between\nserver and client.\n\nI think you can see that the billing information could be passed\nback and forth between the server and client (perhaps in an XML\ndocument) until it is complete, error free, contains a valid credit\ncard number, etc.\n\nSecond, if as a requirement you are determined to keep the part of\nthe problem about a multi-part form and a multi-step process, then\nsomething like the above, where state/session information is passed\nback and forth between the client and server or even the FSM/REST\nmodel I describe might be a solution.\n\nBut, third, let&#39;s leave the FSM/REST stuff aside, since that&#39;s a\nlittle bit too much my own favorite solution. So, having said all\nthat, I believe that a serious REST developer might try to\nre-design your application.  Again, I&#39;m not a REST expert, but let\nme try.  In your billing application, we&#39;d define a resource,\nperhaps called &quot;Current billing request&quot;.  This resource might be\nstored as a set of records in an relational database on the server. \nOnce this resource has been created for a client, a URI for it\nwould be returned to the client.  The client could then request,\nedit, and POST to this resource as many times as desired.  The\nclient does this by using the URI to request this resource and then\nPOST-ing changes against it.  At any time in this process, the\nclient can attempt to submit or attempt to complete the billing\nrequest. It is the responsibility of the server to only perform\nthis action if the billing information is complete, free from\nerrors, etc.  Once it has been submitted successfully, the server\nremoves the &quot;Current billing request&quot; resource, creates a\n&quot;Submitted billing&quot; resource, and returns a URI to the client for\nthat new resource.\n\nI think what we have done in this re-design, is to take what we\nmight have called state, and turned it into a (temporary?)\nresource.\n\nA few additional comments -- It might be the case that there is a\nrequirement that the implementation follow an existing business\nprocess (BP) closely.  The type of redesign work I&#39;ve suggested\nmight, therefore, be objectionable.  I can especially imagine this\nrequirement if the BP is very complex, in which case a business\nanalyst might want, for example, to be able to check the\nimplementation for correctness by comparing it to the (back-end)\nBP.  Well, my work with FSMs and REST is an attempt to address that\nissue.  FSM/REST is an attempt to enable developers to expose\ncomplex processes as REST-ful Web applications, just as long as the\nBP can be modeled as an FSM, which, I suppose, might require some\nre-design work itself (sigh).\n\nAnd, going back and trying to get more into the spirit of your\nexample application with its multi-part process and multi-part\nform: perhaps each part of the multi-part form could be a separate\nresource which the client could retrieve and post updates to.  At\nthe bottom of each page returned to the client is the URI of the\nnext part/page of the form to be edited and POST-ed.  And, there\nwould also be a URI that the client could request in order to\nsubmit the billing.  Again, it is up to the server app to check\nthese resources for errors and completeness before submitting the\nrequest to the credit card company.\n\nDid I get anywhere close to a solution to your problem?\n\nThanks for the provocative example.\n\nI&#39;d like to post your example problem/application and my reply to\nthe REST email list.  (http://groups.yahoo.com/group/rest-discuss/)\nWould that be OK?  Maybe someone there will have better ideas than\nmine.  It&#39;s certainly a problem that we&#39;d need a good solution too\nif REST is going to be taken seriously.\n\n  - Dave\n\n# =================================================================\n\nOn Mon, Mar 31, 2003 at 09:26:14PM -0700, VanL wrote:\n&gt; Dave Kuhlman wrote:\n&gt; \n&gt; &gt;Did I get anywhere close to a solution to your problem?\n&gt; &gt;\n&gt; I&#39;m not sure, I have to think about it.  Right off had, there are some \n&gt; issues that come to mind:\n&gt; \n&gt; 1. Never trust the client.  I know that you can cryptographically sign \n&gt; the encoded state, and check signatures, but I worry that embedding the \n&gt; state in the request opens up Pandora&#39;s box a little too much.\n\nOne way to respond to this is to ask:  Does this kind of design\nenable the the server to be careful enough?  Does it enable the\nserver to perform checks that make the application safe?  I think\nit does.  But, that does place burden on the developer of the\nserver application, and I agree that you&#39;re justified in being\nconcerned about that.\n\n&gt; \n&gt; 2. The additional encoding-decoding of state is additional overhead that \n&gt; would not be required, should the state be kept server-side.\n\nThe alternative, maintaining session information on the server\nrequires cycles and storage, too.\n\nAnd, unless your session requirements are simple, session\nmanagement takes human (development) cycles as well.  A company I\nused to work for developed a tool where we had to worry about when\nsessions expired, about enabling customers to control the\nexpiration of sessions, about whether sessions could be maliciously\ncaptured from another machine, etc.\n\n&gt; \n&gt; 3. In the design you mention, the URI does not completely embody the \n&gt; state of the app - it is a combination of URI+embedded/encoded state.  \n&gt; I&#39;m not sure that this is a problem, but if (my admittedly poor) \n&gt; understanding of the REST rules is correct, it is a violation.\n\nLet me try to clarify what this design does, then we can decide\nwhether it is consistent with or violates REST:\n\n  1. The client has a URI that identifies a resource.\n\n  2. The client makes requests to the URI and with the request the\n    client submits input items (possibly some state information). \n    In the design I&#39;ve suggested, the input is in an XML document\n    that is POST-ed with the request.\n\n  3. The server may be &quot;building&quot; resources as the client makes\n    requests.  For example, the server may be building a client\n    record or a billing record.\n\nSo, let&#39;s ask: In what way does this violate REST?\n\nPosting data to a URI is consistent with REST.\n\nUpdating a back-end resource from posted data is consistent with\nREST.  Although, I&#39;ll admit that the idempotent requirement\nmystifies me.\n\nAnd, returning content as a result of a request is consistent with\nREST.\n\nBut, I&#39;ll admit that the whole idea of state and doing FSM in a\nREST-ful style is questionable.  Perhaps it pushes the REST\nenvelope.\n\n&gt; \n&gt; I brought up this billing app, but the problem is much more general -- I \n&gt; think that any app that undertakes an action that has side-effects is \n&gt; going to encounter this sort of issue.\n\nLooks like the essential requirements for the problem are:\n\n  1. The application is a multi-step process.  Filling out a\n    multi-part form (as in your billing application) is a specific\n    problem, but the problem is more general.\n\n  2. Individual steps in the application have side-effects.  What&#39;s\n    more, these side-effects may have consequences for subsequenct\n    steps.  In particular, a subsequent step may need to be blocked\n    (or performed differently) depending on the side-effect from a\n    previous step.\n\nAs I&#39;ve tried to describe, I believe that these can be done in a\n(mostly) REST-ful way.  And, my goal is to do it as REST-fully as\npossible.  Perhaps REST purists would object.\n\nAnd, thanks for getting me to think about these things.  I&#39;m going\nto go back and review the way in which I&#39;m doing FSM/REST to see if\nI can use some of your ideas and comments (and my replies) to\nimprove it, possibly making it more REST-ful.\n\n  - Dave\n\n# =================================================================\n\nOn Tue, Apr 01, 2003 at 11:11:20AM -0700, VanL wrote:\n&gt; Dave,\n&gt; \n&gt; One final note.  In his thesis, Roy Fielding attacks cookies as \n&gt; particularly breaking REST principles.  However, in the redesign that \n&gt; you proposed, you note that the state is passed back and forth between \n&gt; the two actors as an XML page.  How is that different in design or \n&gt; intent than a cookie that gets &#39;passed back and forth&#39; representing state? \n\nI just read the section of the thesis complaining about cookies\n(&quot;6.3.4.2 Cookies&quot;).  I don&#39;t understand it too well, myself, but I\ndon&#39;t think it should be taken as objecting to sending content back\nand forth between server and client.  That, after all, is what HTTP\nwas intended for.  Fielding&#39;s objections to cookies seem to have to\ndo with (1) they are hidden/opaque; (2) once set, they apply to all\nfuture request to the same site; and (3) that they cause security\nproblems.\n\nOne comment from that section:\n\n    &quot;The same functionality should have been accomplished via anonymous\n    authentication and true client-side state.&quot;\n\nseems to indicate that what I&#39;m suggesting *is* the right way,\nspecifically, asking the client to maintain and return state\ninformation.  But, I&#39;d better try to find out what *true*\nclient-side state is.\n\n&gt; \n&gt; XML exchange\n&gt; Client  sends to server XML document, representing state\n&gt; \n&gt; Cookie\n&gt; Client sends to server XML+Cookie, representing state\n&gt; \n&gt; Once again, I&#39;m just not sure how the principles work.\n\nYou are right.  Cookies and (XML) content are analogous, but\ndifferent.  Cookies seem hidden (opaque).  I&#39;m in favor of\nexchanging explicit content.\n\n&gt; \n&gt; Finally, it seems to me that there is a lot of overlap between the ideas \n&gt; of functional language design and REST web app design.  The governing \n&gt; principle in both cases seems to be that the state is both passed into \n&gt; returned from the function (URI), and that there are no side-effects.  \n&gt; Thus, pass in the same state+input, you get the same result -- always.  \n&gt; In functional languages, you need to explicitly pass in the state of the \n&gt; application, if any state changes are required.  Without a mechanism \n&gt; like cookies, though, (or XML transfer, see note above) how do you pass \n&gt; in the necessary state to accomplish the change?  Finally, as I noted in \n&gt; my last email, how do you deal with the side-effects that may occur \n&gt; because of outside interactions?\n&gt; \n&gt; What makes web apps particularly hard is that every state that you make \n&gt; URI-accessible, you have to make a posibble starting state as well.  I \n&gt; think this is the strongest of the RPCer&#39;s arguments: by having a single \n&gt; entrance point (URI), you get much better control over the execution of \n&gt; the app.\n\nYou might want to notice that in the FSM/REST model I&#39;m suggesting,\nthere is a single URI for the entire FSM (but, the state changes).\n\n  - Dave\n\n# =================================================================\n\n\n\n\n\n-- \nDave Kuhlman\ndkuhlman@...\nhttp://www.rexx.com/~dkuhlman\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":331949899,"authorName":"Sebastien Lambla","from":"&quot;Sebastien Lambla&quot; &lt;seb@...&gt;","profile":"serialseb","replyTo":"SENDER","senderId":"dpzDH7Mi-3UvMoaKhEIOwkcRoazBXkzK_CESKUHxuL_tWXRxl_CyDH2dLzp62jUwPQk5akavVRz7_HOlWtzIqOVunYVv_puIeL4bFao","spamInfo":{"isSpam":false,"reason":"12"},"subject":"RE: [rest-discuss] Media Type Version Negotiation","postDate":"1252966786","msgId":13247,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEJMVTEwMi1EUzRFMjIyNEFEMTFENDBDNENBNUI5RUI1RTQwQHBoeC5nYmw+","inReplyToHeader":"PDQ5OTg4ODQ0MDkwOTE0MTE1OW4yZDcxYTkxN2kxNjk4MTA1YzAzZDM3NTdmQG1haWwuZ21haWwuY29tPg==","referencesHeader":"PDQ5OTg4ODQ0MDkwOTEwMjAwNHI3MDIwNjA4M3FkNzU0ODg5YWU1NzhmNDRjQG1haWwuZ21haWwuY29tPgkgPDdFMjM0RTQ2LTU3QjQtNDEzMy1CRTQ4LTE2REQ0NTBFOTdEMkBtYWMuY29tPgkgPEJMVTEwMi1EUzFGRTU4MjQ5M0MyRjFGNUE1M0ExREI1RTcwQHBoeC5nYmw+CSA8NDk5ODg4NDQwOTA5MTEwNTU0aDZiZGE2YzM2dmJkMGNhNTVmM2NiYWViMGFAbWFpbC5nbWFpbC5jb20+CSA8QkxVMTAyLURTM0RENzFGRTkxNkE1MERBQkUxRDdEQjVFNzBAcGh4LmdibD4gPDQ5OTg4ODQ0MDkwOTE0MTE1OW4yZDcxYTkxN2kxNjk4MTA1YzAzZDM3NTdmQG1haWwuZ21haWwuY29tPg=="},"prevInTopic":13246,"nextInTopic":13248,"prevInTime":13246,"nextInTime":13248,"topicId":13218,"numMessagesInTopic":43,"msgSnippet":"... Well, this example is flawed by definition. If you don t start enforcing serialization rules about the number of elements that can appear, you would just","rawEmail":"Return-Path: &lt;seb@...&gt;\r\nX-Sender: seb@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 42231 invoked from network); 14 Sep 2009 22:20:16 -0000\r\nX-Received: from unknown (69.147.108.201)\n  by m5.grp.re1.yahoo.com with QMQP; 14 Sep 2009 22:20:16 -0000\r\nX-Received: from unknown (HELO blu0-omc2-s11.blu0.hotmail.com) (65.55.111.86)\n  by mta2.grp.re1.yahoo.com with SMTP; 14 Sep 2009 22:20:16 -0000\r\nX-Received: from BLU102-DS4 ([65.55.111.73]) by blu0-omc2-s11.blu0.hotmail.com with Microsoft SMTPSVC(6.0.3790.3959);\n\t Mon, 14 Sep 2009 15:19:46 -0700\r\nX-Originating-Email: [seb@...]\r\nMessage-ID: &lt;BLU102-DS4E2224AD11D40C4CA5B9EB5E40@...&gt;\r\nReturn-Path: seb@...\r\nTo: &quot;&#39;Tim Williams&#39;&quot; &lt;williamstw@...&gt;,\n\t&lt;rest-discuss@yahoogroups.com&gt;\r\nReferences: &lt;499888440909102004r70206083qd754889ae578f44c@...&gt;\t &lt;7E234E46-57B4-4133-BE48-16DD450E97D2@...&gt;\t &lt;BLU102-DS1FE582493C2F1F5A53A1DB5E70@...&gt;\t &lt;499888440909110554h6bda6c36vbd0ca55f3cbaeb0a@...&gt;\t &lt;BLU102-DS3DD71FE916A50DABE1D7DB5E70@...&gt; &lt;499888440909141159n2d71a917i1698105c03d3757f@...&gt;\r\nIn-Reply-To: &lt;499888440909141159n2d71a917i1698105c03d3757f@...&gt;\r\nDate: Mon, 14 Sep 2009 23:19:46 +0100\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;us-ascii&quot;\r\nContent-Transfer-Encoding: 7bit\r\nX-Mailer: Microsoft Office Outlook 12.0\r\nThread-Index: Aco1bYYKUlM45Kg8ROKJrh9on1WC6wAGetSQ\r\nContent-Language: en-gb\r\nX-OriginalArrivalTime: 14 Sep 2009 22:19:46.0811 (UTC) FILETIME=[77AD2CB0:01CA3589]\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Sebastien Lambla&quot; &lt;seb@...&gt;\r\nSubject: RE: [rest-discuss] Media Type Version Negotiation\r\nX-Yahoo-Group-Post: member; u=331949899; y=85KVZDkDQ3gByCLVhlc8JDyS4khHFam9b70gCvzP7SAL8mx7\r\nX-Yahoo-Profile: serialseb\r\n\r\n&gt; If I&#39;m understanding your\n&gt; approach - co-mingle different version-representations in the same\n&gt; &quot;document&quot; and put them in their own namespace - you&#39;re still\n&gt; &quot;versioning&quot;, you&#39;re just relegating that duty to a namespace?\n&gt; Something like,\n&gt; \n&gt; &lt;document&gt;\n&gt;   &lt;author xmlns=&quot;http://example.org/doc/v1.0&quot;&gt;Thomas Jefferson&lt;/author&gt;\n&gt;   &lt;authors xmlns=&quot;http://example.org/doc/v2.0&quot;&gt;\n&gt;       &lt;author&gt;Thomas Jefferson&lt;/author&gt;\n&gt;   &lt;/authors&gt;\n&gt; &lt;document&gt;\n\nWell, this example is flawed by definition. If you don&#39;t start enforcing\nserialization rules about the number of elements that can appear, you would\njust add a second &lt;author&gt; tag.\n\nBut let&#39;s assume for a moment what this specific example would lead us to.\n\nClient understands the v1 extension, and is released at the same time as a\nserver understanding v1. Everything is nice and rosey.\n\nNow business requirements suddenly change, and you need to support multiple\nauthors on a document. You update server v2 to look for multiple authors.\nThe server can now emit the following:\n\n&lt;document&gt;\n   &lt;author xmlns=&quot;http://example.org/doc/v1.0&quot;&gt;Thomas Jefferson&lt;/author&gt;\n   &lt;author xmlns=&quot;http://example.org/doc/v1.0&quot;&gt;Benjamin Franklin&lt;/author&gt;\n&lt;/document&gt;\n\nNow your v2 client can happily send and display multiple authors, and your\nv2 server can certainly understand those.\n\nWhat do you do with your v1 client?\n\nIn an example where you create a new schema altogether, you already admit\nthat clients in version 1 will by definition continue receiving only one\ndocument author.\n\nNow let&#39;s assume that you have, when documenting your media type, stated\nthat the document author shall be represented by the first &lt;author&gt; tag\nfound in the document, and nothing else.\n\nV1 client receives v2 media type, see first occurrence of the tag, modifies\nit and sends it back to the server. You can either recover from the\nassumption the v1 client made, that there is only one author, or you can&#39;t.\nIf you can&#39;t, supporting two versions for media types won&#39;t help you. If you\ncan, either solutions will work equally well. One of them will be long\nrunning, the other one will be short lived.\n\nI think those goals require a bit more care than simply slapping an object\ninto an xml serialzier and expect the world to suddenly fall into place, but\nevolving a media type in such a way ensures that you don&#39;t end up with 20\nversions of the same media type. This will help your media type live long\nenough to be useful beyond the one scenario it was designed to cover,\nfulfilling the design for serendipity and economy of scale that I see as the\nbenefits of a ReST architecture.\n\nIn other words, if the view of the world of client v1 is incompatible with\nwhat server v2 can do, creating a new media type is useless, because you\nhave no recovery model and won&#39;t be able to still support both versions. If\nthey are compatible, decentralized extensibility can solve the problem\nwithout imposing a new schema all the time.\n\nSeb\n\n\n"}}
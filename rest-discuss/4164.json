{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":154469508,"authorName":"Justin Sampson","from":"&quot;Justin Sampson&quot; &lt;justin.sampson@...&gt;","profile":"justin_t_sampson","replyTo":"SENDER","senderId":"5p_NAP5Hutj-9AfeRuKh-xAOBCbhgGpQdlKgowM5fqviCYnusbIubMFl8gsXn9YbUZlgOmqPHddvWARdHjFTAdHLqGwLnN68tJFsFMkdptgNADxFCHqZP2YD","spamInfo":{"isSpam":false,"reason":"0"},"subject":"RE: [rest-discuss] REST Transaction Process","postDate":"1076564398","msgId":4164,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDNCQjNGOTNDODBCOTA1NEQ4NTM2RDUxQTNENzEzMDEzMEVBMzJBQG1haWwtMDEuc3Bva2Vzb2Z0d2FyZS5jb20+"},"prevInTopic":4163,"nextInTopic":4165,"prevInTime":4163,"nextInTime":4165,"topicId":4141,"numMessagesInTopic":67,"msgSnippet":"... 1. Can you describe some applications where distributed transactions were appropriate, and how REST was or would have been appropriate for communicating","rawEmail":"Return-Path: &lt;Justin.Sampson@...&gt;\r\nX-Sender: Justin.Sampson@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 18591 invoked from network); 12 Feb 2004 05:40:16 -0000\r\nReceived: from unknown (66.218.66.218)\n  by m15.grp.scd.yahoo.com with QMQP; 12 Feb 2004 05:40:16 -0000\r\nReceived: from unknown (HELO mail-01.spokesoftware.com) (209.213.222.38)\n  by mta3.grp.scd.yahoo.com with SMTP; 12 Feb 2004 05:40:16 -0000\r\nContent-Class: urn:content-classes:message\r\nMIME-Version: 1.0\r\nContent-Type: text/plain;\n\tcharset=&quot;us-ascii&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\nX-MimeOLE: Produced By Microsoft Exchange V6.0.6470.0\r\nDate: Wed, 11 Feb 2004 21:39:58 -0800\r\nMessage-ID: &lt;3BB3F93C80B9054D8536D51A3D7130130EA32A@...&gt;\r\nX-MS-Has-Attach: \r\nX-MS-TNEF-Correlator: \r\nThread-Topic: [rest-discuss] REST Transaction Process\r\nthread-index: AcPxHGrb2uVwUEKVTxKepNw6yDKi/QACAZ/A\r\nTo: &lt;rest-discuss@yahoogroups.com&gt;\r\nX-eGroups-Remote-IP: 209.213.222.38\r\nFrom: &quot;Justin Sampson&quot; &lt;justin.sampson@...&gt;\r\nSubject: RE: [rest-discuss] REST Transaction Process\r\nX-Yahoo-Group-Post: member; u=154469508\r\nX-Yahoo-Profile: justin_t_sampson\r\n\r\nWalden Mathews wrote:\n\n&gt; &gt; I usually just insist on exactly one transaction=\r\n per HTTP\n&gt; &gt; request for exactly that reason.\n&gt;\n&gt; Can you implement distri=\r\nbuted transactions like that?\n\n1. Can you describe some applications where =\r\ndistributed\ntransactions were appropriate, and how REST was or would have\nb=\r\neen appropriate for communicating among the various systems?\n\nThe inherent =\r\nstatefulness of distributed transactions seems at\nodds with the inherent st=\r\natelessness of REST and HTTP, so I&#39;m\nreally curious why there&#39;s interest in=\r\n getting them to work\ntogether.\n\n2. As long as the dependencies are fairly =\r\ndecoupled, interactions\nbetween transactional systems can be broken into a =\r\nsequence of\npartial transactions. For example, if in the course of a\ntransa=\r\nction on my local system an email is to be sent out through\nan external tra=\r\nnsactional email transport, I can (a) commit the\nmessage locally with a &quot;to=\r\n be sent&quot; flag, (b) outside of that\nfirst transaction, pick up the message =\r\nand send it to the\nexternal system, (c) commit another transaction locally =\r\nto change\nthe flag to &quot;was sent&quot;. If anything fails it can be retried or\not=\r\nherwise dealt with locally, and the message can be assigned a\nglobally uniq=\r\nue identifier at the start to prevent it being\naccidentally sent twice. The=\r\n original transaction is committed\nwithout the knowledge of whether the ext=\r\nernal transaction will be\nsuccessful, but the constraints and behavior of t=\r\nhe sytem are\ndesigned with that in mind so that still nothing is lost and t=\r\nhe\nwhole deal is safe in the transactional sense (no lost data, no\ninconsis=\r\ntent data).\n\nIf the dependencies are not particularly decoupled, then, agai=\r\nn,\nREST doesn&#39;t seem appropriate anyway. Can you give an example to\nthe con=\r\ntrary?\n\nJustin\n\n"}}
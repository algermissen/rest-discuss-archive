{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"zhDTq6CVj9b2LRjITFgt81zpOFJYJKtwLWj3nXQs915cCEeaKMIJRd-TULXl4goc1ajrlBPStDr7BvhAGAqJEf1vhvprX8317rMtF1TaIg","spamInfo":{"isSpam":false,"reason":"6"},"subject":"Re: [rest-discuss] RESTful order-status API (was: URI design, part 2)","postDate":"1354309003","msgId":19192,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMTIxMTMwMTM1NjQzLmM2NjM5NzhkLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","inReplyToHeader":"PDUwQjhGRUM2LjUwODAwMDZAYmVya2VsZXkuZWR1Pg==","referencesHeader":"PENBTk1QazI3MmlTb0UzNFlLUzlBX3BNK2N0ejJvYjg5TS12M2txUGkxRHF1d2dpNkpqZ0BtYWlsLmdtYWlsLmNvbT4JPENGNTUyMDExLUI0MTgtNEFFNC04MEM2LTQzRjk5MTJFQTcyNUBuaWNrc2hhbmtzLmNvbT4JPDJFMEY2QjJFLUZCREEtNEQzOC04QTBDLUM4OUMwMTQ5NDlCNkBub3Jkc2MuY29tPgk8NTBCOEZFQzYuNTA4MDAwNkBiZXJrZWxleS5lZHU+"},"prevInTopic":19191,"nextInTopic":19193,"prevInTime":19191,"nextInTime":19193,"topicId":19187,"numMessagesInTopic":28,"msgSnippet":"+1 to the other answers you ve gotten.  Except... REST is about optimizing the hell out of GET.  The hypertext containing the PUT control is one place to GET","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 15990 invoked from network); 30 Nov 2012 20:57:03 -0000\r\nX-Received: from unknown (98.137.35.161)\n  by m1.grp.sp2.yahoo.com with QMQP; 30 Nov 2012 20:57:03 -0000\r\nX-Received: from unknown (HELO mxout-08.mxes.net) (216.86.168.183)\n  by mta5.grp.sp2.yahoo.com with SMTP; 30 Nov 2012 20:57:03 -0000\r\nX-Received: from bigbison (unknown [65.117.211.162])\n\t(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))\n\t(No client certificate requested)\n\tby smtp.mxes.net (Postfix) with ESMTPSA id 4676C509B7;\n\tFri, 30 Nov 2012 15:57:01 -0500 (EST)\r\nDate: Fri, 30 Nov 2012 13:56:43 -0700\r\nTo: Erik Wilde &lt;dret@...&gt;\r\nCc: Jan Algermissen &lt;jan.algermissen@...&gt;, Nicholas Shanks\n &lt;nickshanks@...&gt;, rest-discuss@yahoogroups.com, Max Toro\n &lt;maxtoroq@...&gt;\r\nMessage-Id: &lt;20121130135643.c663978d.eric@...&gt;\r\nIn-Reply-To: &lt;50B8FEC6.5080006@...&gt;\r\nReferences: &lt;CANMPk272iSoE34YKS9A_pM+ctz2ob89M-v3kqPi1Dquwgi6Jjg@...&gt;\n\t&lt;CF552011-B418-4AE4-80C6-43F9912EA725@...&gt;\n\t&lt;2E0F6B2E-FBDA-4D38-8A0C-C89C014949B6@...&gt;\n\t&lt;50B8FEC6.5080006@...&gt;\r\nOrganization: Bison Systems Corporation\r\nX-Mailer: Sylpheed 3.1.1 (GTK+ 2.10.14; i686-pc-mingw32)\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=UTF-8\r\nContent-Transfer-Encoding: 8bit\r\nX-eGroups-Msg-Info: 1:6:0:0:0\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nSubject: Re: [rest-discuss] RESTful order-status API (was: URI design, part\n 2)\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\n+1 to the other answers you&#39;ve gotten.  Except...\n\nREST is about optimizing the hell out of GET.  The hypertext containing\nthe PUT control is one place to GET the order status.  But, why cache-\nexpire the entire record when only one string is changed, multiple times\nafter the order is placed and becomes static?  A RESTful order-status\nAPI should separate the dynamic aspects of order processing from the\nstatic, as sub-resources, and manipulate *those* to alter a dynamic\nrepresentation of the static order.  This becomes especially efficient\nwhen, say, a CC is rejected and the customer needs to enter another one.\n\nConsider PUT /orders/1/status with strings like placed, processing,\npending, and the tracking # from the shipper -- I&#39;d even consider\napplication/xml and application/json acceptable media types for a\nsnippet like this, of course not for the hypertext control defining the\nPUT.  I&#39;d never PUT &#39;canceled&#39;, I&#39;d use DELETE as Jan described, which\nwould trigger a reshelving-fee transaction, with /status returning\nreshelving on 200 OK, before /orders/1* return 410 Gone, indicating the\ntransaction has been fully reversed including by the inventory system.\n\nUsing code-on-demand to fill in the current status on the PUT control\nexposes a status API which may be utilized many different ways (push,\npoll, etc.), allowing for serendipitous re-use.  The downside of being\nan additional round-trip is mitigated by using compression such that the\n/status 200 OK response fits in one IP packet.  Note that XForms may be\nused to make this code declarative, avoiding the optional constraint.\n\nThis thread isn&#39;t about URI design at all, in fact it&#39;s irrelevant to\nthis discussion about hypertext-driven application state, as is method\nselection. Also RESTful: /CRMapp?order=1&query=status on GET, and\n/CRMapp?order=1&status=canceled on POST using application/x-www-form-\nurlencoded, if we assume the hypertext constraint is met, which is what\nthis thread is really about.\n\nThen we can discuss the pros and cons of various media types which can\nimplement a RESTful status API, regardless of how the shopping cart is\nimplemented.  If you&#39;re working with making a legacy system more\nRESTful over time, you may want HTML 4, JS and POST.  If this is\ngreenfield, you may consider XForms w/ PUT and DELETE.  Or, use HTML 5\nif this is a Web system, not sure where it is regarding PUT/DELETE, but\nit really doesn&#39;t matter...\n\nThe key is the architectural consideration of using subresources for\ndynamic elements like order status, allowing the order itself to become\nsticky in the client-side cache, while also allowing manipulation of\nthat resource to occur in one-IP-packet round-trips.  Optimizing\nPUT/POST/PATCH doesn&#39;t amount to much in the grand scheme of things,\nwhat counts is optimizing GET by making static all those bytes which\nmake up the order being processed, and manipulating its subresources.\n\nThe hypertext interface doesn&#39;t even have to reflect the strings\nin /status, it could be a graphical progress bar followed by e-mailing\nthe tracking number (instead of, or in addition to, displaying it).  Or,\nthe strings in /status 200 OK could be numerals, whose semantics are\nconveyed by the PUT control or other hypertext conveying order status.\n\nAlways remember REST is an architectural style, not implementation\nguidelines.  If you take one thing from it, it should be &quot;optimize GET\nto maximize caching.&quot;  Then, any implementation mistakes you make are\ncorrectable down the line, instead of coming here and being told to go\nback to the drawing board -- iow, if you&#39;ve separated static from\ndynamic as an architectural pattern, then we can make changes to URIs\nand methods based on what media types are most appropriate for your\napplication, because that&#39;ll be bikeshedding if you get your resources\nright.\n\nI prefer developing REST systems in XForms, makes it easy to separate\nstatic from dynamic in declarative code, to get a handle on what your\nresources *are* and how they relate to one another.  I call this\nhypertext-constraint-centric development.  The result is a hypertext API\nwhich may then be implemented any way it needs to be, letting the\nimplementation requirements dictate the system&#39;s ultimate hypertext, URI\nallocation scheme, and media types if (most likely) XForms isn&#39;t\nappropriate.  I may hate my HTML 4 implementations&#39; URIs and methods,\nbut the underlying systems are implicitly RESTful and thus easy to\nupgrade over time, as new hypertext technology emerges and matures.\n\n-Eric\n\nOn Fri, 30 Nov 2012 10:45:26 -0800\nErik Wilde &lt;dret@...&gt; wrote:\n\n&gt; +1 on this, it probably would be a good mapping of domain\n&gt; interactions to HTTP verbs.\n&gt; \n&gt; On 2012-11-30 10:43 , Jan Algermissen wrote:\n&gt; &gt;\n&gt; &gt; On Nov 30, 2012, at 7:08 PM, Nicholas Shanks\n&gt; &gt; &lt;nickshanks@...&gt; wrote:\n&gt; &gt;\n&gt; &gt;&gt; On 30 Nov 2012, at 13:15, Max Toro wrote:\n&gt; &gt;&gt;\n&gt; &gt;&gt;&gt; Thanks for your answers, it&#39;s pretty much what I had in mind.\n&gt; &gt;&gt;&gt;\n&gt; &gt;&gt;&gt; I want to discuss a second example:\n&gt; &gt;&gt;&gt;\n&gt; &gt;&gt;&gt; a)\n&gt; &gt;&gt;&gt; POST /orders/1/cancel\n&gt; &gt;&gt;&gt;\n&gt; &gt;&gt;&gt; vs.\n&gt; &gt;&gt;&gt;\n&gt; &gt;&gt;&gt; b)\n&gt; &gt;&gt;&gt; PATCH /orders/1\n&gt; &gt;&gt;&gt;\n&gt; &gt;&gt;&gt; canceled=true\n&gt; &gt;&gt;&gt;\n&gt; &gt;&gt;&gt;\n&gt; &gt;&gt;&gt; Does REST say anything in favor or against these two designs?\n&gt; &gt;&gt;\n&gt; &gt;&gt; REST says &quot;Do &#39;b&#39;, never &#39;a&#39;.&quot; Sorry!\n&gt; &gt;\n&gt; &gt; Yes, right.\n&gt; &gt;\n&gt; &gt; If it suits your use cases, consider:\n&gt; &gt;\n&gt; &gt; DELETE /orders/1\n&gt; &gt;\n&gt; &gt; Which might well result in the order being moved to a\n&gt; &gt; cancled-orders collection. IOW, it need not be erased entirely.\n&gt; &gt;\n&gt; &gt; Jan\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;&gt; The simple rule is URIs are for nouns, HTTP methods are for verbs.\n&gt; &gt;&gt;\n&gt; &gt;&gt; You could get away with this though:\n&gt; &gt;&gt;\n&gt; &gt;&gt; POST /orders/1\n&gt; &gt;&gt; cancelled=true\n&gt; &gt;&gt;\n&gt; &gt;&gt; Originally, POST was intended to mean &quot;post a reply&quot; the same as\n&gt; &gt;&gt; it&#39;s NNTP namesake/predecessor. Now, though, the authors of HTTP\n&gt; &gt;&gt; concede that it&#39;s modern meaning is &quot;Hey, server, use these data\n&gt; &gt;&gt; (request body) to perform some action to this resource (uri)&quot;\n&gt; &gt;&gt;\n&gt; &gt;&gt; As such, by POSTing to /orders/1 you are at least getting the\n&gt; &gt;&gt; resource part of the API right, even if you are lacking the\n&gt; &gt;&gt; semantics of a PATCH request.\n&gt; &gt;&gt;\n&gt; &gt;&gt;&gt; Personally, I would never do &#39;b&#39; because it&#39;s simply hard to\n&gt; &gt;&gt;&gt; implement with the tools I use. Also, isn&#39;t it a case of\n&gt; &gt;&gt;&gt; tunneling? &#39;Cancel&#39; is an action that does more than simply\n&gt; &gt;&gt;&gt; update a resource.\n&gt; &gt;&gt;\n&gt; &gt;&gt;\n&gt; &gt;&gt; I wouldn&#39;t call it tunnelling, tunnelling would be something like:\n&gt; &gt;&gt;\n&gt; &gt;&gt; POST /orders/1\n&gt; &gt;&gt;\n&gt; &gt;&gt; _method_override=&quot;DELETE&quot;    // could also be custom HTTP header\n&gt; &gt;&gt;\n&gt; &gt;&gt; If the &quot;cancel&quot; action is just updating a resource state, rather\n&gt; &gt;&gt; then, say, DELETEing the resource, then you could even do\n&gt; &gt;&gt; something like:\n&gt; &gt;&gt;\n&gt; &gt;&gt; PUT /orders/1/cancelled\n&gt; &gt;&gt; true\n&gt; &gt;&gt;\n&gt; &gt;&gt; (again, use POST if you can&#39;t PUT)\n&gt; &gt;&gt;\n&gt; &gt;&gt; and correspondingly:\n&gt; &gt;&gt;\n&gt; &gt;&gt; GET /orders/1/cancelled\n&gt; &gt;&gt;\n&gt; &gt;&gt; =&gt; &quot;true&quot;\n&gt; &gt;&gt;\n&gt; &gt;&gt; GET /orders/2/cancelled\n&gt; &gt;&gt;\n&gt; &gt;&gt; =&gt; &quot;false&quot;\n&gt; &gt;&gt;\n&gt; &gt;&gt; (or 1/0, yes/no, … however you wish to represent it)\n&gt; &gt;&gt;\n&gt; &gt;&gt;\n&gt; &gt;&gt; For reference, stackoverflow.com is a good place to go with these\n&gt; &gt;&gt; sorts of questions. Many have already been asked in various forms,\n&gt; &gt;&gt; you&#39;ll find the answers already provided.\n&gt; &gt;&gt;\n&gt; &gt;&gt; — Nicholas.\n&gt; &gt;&gt;\n&gt; &gt;&gt;\n&gt; &gt;&gt; ------------------------------------\n&gt; &gt;&gt;\n&gt; &gt;&gt; Yahoo! Groups Links\n&gt; &gt;&gt;\n&gt; &gt;&gt;\n&gt; &gt;&gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt; ------------------------------------\n&gt; &gt;\n&gt; &gt; Yahoo! Groups Links\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; \n&gt; -- \n&gt; erik wilde | mailto:dret@...  -  tel:+1-510-2061079 |\n&gt;             | UC Berkeley  -  School of Information (ISchool) |\n&gt;             | http://dret.net/netdret http://twitter.com/dret |\n\n"}}
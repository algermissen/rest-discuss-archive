{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":10229189,"authorName":"Andrzej Jan Taramina","from":"&quot;Andrzej Jan Taramina&quot; &lt;andrzej@...&gt;","profile":"ataramina","replyTo":"SENDER","senderId":"mljJ0Mr1E4iXI6hy48FIIs-tqCtZGnuE_CzJ1N0vAFERnynyZH52H8K6Xtk5Z5dWq1c2PqYk7Br6xhsfDfh3Q3qmN7gbomcNj-7fArEbF3Ocu1c","spamInfo":{"isSpam":false,"reason":"3"},"subject":"Cookies as alternative authentication tokens?","postDate":"1200423453","msgId":10198,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQ3OENCQkNELjEyMjU4LjE4RDFCRjkyQGFuZHJ6ZWouY2hhZXJvbi5jb20+"},"prevInTopic":0,"nextInTopic":10199,"prevInTime":10197,"nextInTime":10199,"topicId":10198,"numMessagesInTopic":3,"msgSnippet":"It s not uncommon to use client-side certificates, in conjunction with SSL (HTTPS) connections for authentication purposes, especially in 2-factor scenarios","rawEmail":"Return-Path: &lt;andrzej@...&gt;\r\nX-Sender: andrzej@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 77910 invoked from network); 15 Jan 2008 18:57:45 -0000\r\nX-Received: from unknown (66.218.67.95)\n  by m48.grp.scd.yahoo.com with QMQP; 15 Jan 2008 18:57:45 -0000\r\nX-Received: from unknown (HELO smtp1.xplornet.com) (207.179.143.253)\n  by mta16.grp.scd.yahoo.com with SMTP; 15 Jan 2008 18:57:45 -0000\r\nX-Received: from [192.168.0.5] ([67.201.169.168])\n\t(authenticated bits=0)\n\tby smtp1.xplornet.com (8.13.8/8.13.8) with ESMTP id m0FIvX8M021032\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Tue, 15 Jan 2008 14:57:39 -0400\r\nOrganization: Chaeron Corporation\r\nTo: rest-discuss@yahoogroups.com\r\nDate: Tue, 15 Jan 2008 13:57:33 -0500\r\nMIME-Version: 1.0\r\nMessage-ID: &lt;478CBBCD.12258.18D1BF92@...&gt;\r\nPriority: normal\r\nX-mailer: Pegasus Mail for Windows (4.41)\r\nContent-type: text/plain; charset=US-ASCII\r\nContent-transfer-encoding: 7BIT\r\nContent-description: Mail message body\r\nX-eGroups-Msg-Info: 2:3:4:0:0\r\nFrom: &quot;Andrzej Jan Taramina&quot; &lt;andrzej@...&gt;\r\nReply-To: andrzej@...\r\nSubject: Cookies as alternative authentication tokens?\r\nX-Yahoo-Group-Post: member; u=10229189; y=b1akS6_UqBXm77B1CH2Vut7eFsd-_O72oitIkUfJo6w3iuKa\r\nX-Yahoo-Profile: ataramina\r\n\r\nIt&#39;s not uncommon to use client-side certificates, in conjunction with SSL \n(HTTPS) connections for authentication purposes, especially in 2-factor \nscenarios where you still need to log in using other credentials (eg. \nuserid/pswd), but where you can&#39;t even establish an SSL connection unless you \npossess a known/valid client certificate.\n\nHowever, there is a problem currently in that Safari on the iPhone doesn&#39;t \nsupport client side certificates, so that approach is a non-starter at the \nmoment.\n\n&lt;aside&gt;\n   Let&#39;s not get into a discussion of the merits/problems of iPhones...that \n   is not the point of my post\n&lt;/aside&gt;\n\nI was thinking that cookies could possibly be used for this purpose in the \nfollowing way:\n\n1) Expose a different HTTPS URL specifically for iPhones.  If the iPhone \ntries to access the more generic non-iPhone URL, they will be precluded from \ngetting in, not having a client cert.  \n\n2) Using SSL (eg. HTTPS), when the iPhone user hits the iPhone-specific URL, \nthe server side will check for the existence of a user-specific iPhone token, \nstored in a cookie.  The cookie will be set to only return to the server&#39;s \ndomain and to only be returned over an SSL connection, thus ensuring \nconfidentiality/security of the &quot;token&quot;. If the max size of the cookie is \nsufficient (4k), you could actually use a client cert as the &quot;token&quot; stored \nin the cookie.  Size of the cookie might be an issue, since it would be \ntransmitted for all pages/accesses so that might be a consideration.\n\n3) If the user does not present this special cookie, they are denied\naccess. If they do provide the cookie, then they still have to perform the\nuserid/pswd login, providing the 2nd factor login, again preventing anyone\nthat gets access to the iPhone device from logging in.  This could be done in \na single step of course, where the client sends the cookie plus the \nuserid/pswd credentials in one transmission.\n\n4) The crux of it is how does the cookie get in the iPhone Safari browser in \nthe first place? You set up a 3rd authentication HTTPS URL, using the same \ndomain name though,  on the server, that uses a different, one-time assigned \nuserid/pswd to log in.  When the user logs in, the special iPhone cookie is \nset into their browser.  By making this special login a one-time only, means \nthat the only way a user gets the cookie is if an administrator sets them up \nwith a 1-time login to do this, and also presumes some sort of out of band \nprocess to verify the identity of the user requesting the setup.  The cookie \nwould be generated in the same domain and would be flagged as only being \nallowed to be transmitted back to the originating server over an SSL \nconnection (part of the cookie HTTP spec lets you do this, AFAIK). In most \ncases, you could pre-load the cookie onto iPhones that were being supplied \nbefore providing them to the user.  \n\nIf someone gets access to the physical device, then of course they could get \na copy of the cookie, but then they would still have to know the userid/pswd, \nhence the desireability of the 2-factor approach.  But the same would apply \nif you were using a device/browser that supports client-side certs. If you \ncan get access to that browser, then you can get the cert.  So it seems to \nme, within these constraints, that the cookie-based approach resembles the \nclient-side cert approach.\n\nGiven that the application sticks to REST principles, the cookie will not \nstore any application state at any time.  It&#39;s only use is as an \nauthentication token, which sounds like fair game to me.\n\nI&#39;m hoping the RESTafarian community can provide some commentary on whether \nthis &quot;cookie over SSL&quot; approach is sufficiently secure to be considered \nusable for 2-factor authentication?  \n\nAny/all advice/observations/thoughts will be very much appreciated.\n\nMany thanks....\n\n\nAndrzej Jan Taramina\nChaeron Corporation: Enterprise System Solutions\nhttp://www.chaeron.com\n\n\n"}}
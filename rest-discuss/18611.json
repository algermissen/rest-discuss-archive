{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":401876259,"authorName":"Will Hartung","from":"Will Hartung &lt;willh@...&gt;","profile":"gaminginparis","replyTo":"SENDER","senderId":"I4QrpLangf2Gd5TKk8JWza3KkxhMM_-9N8Ap9zQlnuhgxMs4FgWEZeIfkpT-3wkxRp2Me64BGH7R-hsl5yleJMvYZAiSxn8ZSg","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Re: Does the client contribute to the RESTfulness of an application?","postDate":"1331222777","msgId":18611,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PENBQTJpRGlETjJzbVc4ZEwtaXB5QkRpU0ZfWlI4dDl4bkxtZkt4eHVkdFAwRzN6NTl3Z0BtYWlsLmdtYWlsLmNvbT4=","inReplyToHeader":"PGpqYWtoMCs1anRnQGVHcm91cHMuY29tPg==","referencesHeader":"PENBTnFpWkpZLStkaVN2ZUNlNFZUSzkrbmF4bjJNZGZycWoxaVd2dnlNMUM0a0hrazMwd0BtYWlsLmdtYWlsLmNvbT4JPGpqYWtoMCs1anRnQGVHcm91cHMuY29tPg=="},"prevInTopic":18610,"nextInTopic":18612,"prevInTime":18610,"nextInTime":18612,"topicId":18602,"numMessagesInTopic":50,"msgSnippet":"As Mike says, and part of generic matra REST for me is that a bad client does not invalidate a good REST design. By the nature of REST, many of the aspects of","rawEmail":"Return-Path: &lt;willh@...&gt;\r\nX-Sender: willh@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 11379 invoked from network); 8 Mar 2012 16:06:18 -0000\r\nX-Received: from unknown (98.137.34.44)\n  by m14.grp.sp2.yahoo.com with QMQP; 8 Mar 2012 16:06:18 -0000\r\nX-Received: from unknown (HELO mail-qy0-f169.google.com) (209.85.216.169)\n  by mta1.grp.sp2.yahoo.com with SMTP; 8 Mar 2012 16:06:18 -0000\r\nX-Received: by qcsd16 with SMTP id d16so575409qcs.0\n        for &lt;rest-discuss@yahoogroups.com&gt;; Thu, 08 Mar 2012 08:06:18 -0800 (PST)\r\nX-Received: by 10.229.76.195 with SMTP id d3mr1281281qck.40.1331222778091;\n        Thu, 08 Mar 2012 08:06:18 -0800 (PST)\r\nMIME-Version: 1.0\r\nX-Received: by 10.229.76.195 with SMTP id d3mr1281278qck.40.1331222778009; Thu,\n 08 Mar 2012 08:06:18 -0800 (PST)\r\nX-Received: by 10.229.162.17 with HTTP; Thu, 8 Mar 2012 08:06:17 -0800 (PST)\r\nIn-Reply-To: &lt;jjakh0+5jtg@...&gt;\r\nReferences: &lt;CANqiZJY-+diSveCe4VTK9+naxn2Mdfrqj1iWvvyM1C4kHkk30w@...&gt;\n\t&lt;jjakh0+5jtg@...&gt;\r\nDate: Thu, 8 Mar 2012 08:06:17 -0800\r\nMessage-ID: &lt;CAA2iDiDN2smW8dL-ipyBDiSF_ZR8t9xnLmfKxxudtP0G3z59wg@...&gt;\r\nTo: William Martinez Pomares &lt;wmartinez@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nContent-Type: multipart/alternative; boundary=00235429e2dcccda3104babd746c\r\nX-Gm-Message-State: ALoCoQkHkOBy74IHqmPQxmInG2eKc1yXmv4gj7YGlAfXBUxwMXgv/uv7C91fbv434xljBFkOQoAP+sctl/2jQmvGYTddNmCoE+SSy04yTCcDIScDRc3n5Tc=\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Will Hartung &lt;willh@...&gt;\r\nSubject: Re: [rest-discuss] Re: Does the client contribute to the RESTfulness\n of an application?\r\nX-Yahoo-Group-Post: member; u=401876259; y=2HkH5s83TS4lKOM2d0hLoLYXz3FIFEv0km2sBjsphWcJWycYPNkMIw\r\nX-Yahoo-Profile: gaminginparis\r\n\r\n\r\n--00235429e2dcccda3104babd746c\r\nContent-Type: text/plain; charset=ISO-8859-1\r\n\r\nAs Mike says, and part of generic matra REST for me is that a bad client\ndoes not invalidate a good REST design. By the nature of REST, many of the\naspects of the architecture are in fact designed to benefit the client. And\nother aspects simply cannot be counted on by the server in the wild anyway.\n\nThe HATEOS is a client advantage. If a client cares about the robustness of\ntheir implementation, they will leverage HATEOS in order to help keep their\nsystems running without interruption. Many applications that offer HATEOS,\ndon&#39;t per se take advantage of it right off as it&#39;s mostly a future\nproofing mechanism. You have simple apps on a single machine with a few,\nsolid services that will &quot;never change&quot; vs an app that is an aggressive\nuser of HATEOS, and pretty much forces a client to leverage as well (i.e.\nno URL will ever be the same kind of thing). Those are opposite extremes.\nMost fall in the former sense, they&#39;re just easier to design and manage\nunless you have a very compelling reason to do otherwise.\n\nSo, you can see how a &quot;dumb&quot; client can easily get by with the first type\nof application, but fail miserably with the latter.\n\nCaches are another important aspect of the architecture that the system may\nor may not be able to leverage. If your system implements their own caches,\nthen you can expect to see a benefit and plan around it. At this point a\nbad client (i.e. one the completely ignores the caching constraints) can\nput an excessive load on your core system. They&#39;re still a REST client, in\nfact they can be an external cache themselves (perhaps a badly configured\none).\n\nNow, if you&#39;re not providing you own caching layer, and effectively hoping\nto leverage external caches, then you have no room to complain when you get\nseveral clients that perhaps ignore the caching aspect. When you&#39;re relying\non external systems that you have no control over, you&#39;re on the borderline\nof &quot;serendipitous reuse&quot;. The bright side of SU is the new value it can\nprovide, the down side is the &quot;serendipitous&quot; part.\n\nAnd finally, you can address the serendipitous reuse aspect. That too, is a\nbenefit of the client. It lets someone use the data in ways not envisioned\nby the application designers. Thus providing added value to the client\nWhether it&#39;s added value to the application is a different issue (maybe you\ndidn&#39;t want or plan for all of this new traffic, then again maybe you&#39;re\nexcited to be offering new value that you didn&#39;t have to code and design).\n\nSo, yes, it takes good corporation between the clients and the servers to\nget the highest level of benefits from the architecture, but the simple\ntruth is much of the design is really there for the clients in the first\nplace and they&#39;re only hurting themselves in the long run by not playing\nalong.\n\nRegards,\n\nWill Hartung\n(willh@...)\n\n-- \nCONFIDENTIALITY NOTICE: The information contained in this electronic \ntransmission may be confidential. If you are not an intended recipient, be \naware that any disclosure, copying, distribution or use of the information \ncontained in this transmission is prohibited and may be unlawful. If you \nhave received this transmission in error, please notify us by email reply \nand then erase it from your computer system.\n\r\n--00235429e2dcccda3104babd746c\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nAs Mike says, and part of generic matra REST for me is that a bad client do=\r\nes not invalidate a good REST design. By the nature of REST, many of the as=\r\npects of the architecture are in fact designed to benefit the client. And o=\r\nther aspects simply cannot be counted on by the server in the wild anyway.&lt;=\r\ndiv&gt;\n&lt;br&gt;&lt;/div&gt;&lt;div&gt;The HATEOS is a client advantage. If a client cares abo=\r\nut the robustness of their implementation, they will leverage HATEOS in ord=\r\ner to help keep their systems running without interruption. Many applicatio=\r\nns that offer HATEOS, don&#39;t per se take advantage of it right off as it=\r\n&#39;s mostly a future proofing mechanism. You have simple apps on a single=\r\n machine with a few, solid services that will &quot;never change&quot; vs a=\r\nn app that is an aggressive user of HATEOS, and pretty much forces a client=\r\n to leverage as well (i.e. no URL will ever be the same kind of thing). Tho=\r\nse are opposite extremes. Most fall in the former sense, they&#39;re just e=\r\nasier to design and manage unless you have a very compelling reason to do o=\r\ntherwise.=A0&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;So, you can see how a &quot;dumb&quo=\r\nt; client can easily get by with the first type of application, but fail mi=\r\nserably with the latter.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Caches are another import=\r\nant aspect of the architecture that the system may or may not be able to le=\r\nverage. If your system implements their own caches, then you can expect to =\r\nsee a benefit and plan around it. At this point a bad client (i.e. one the =\r\ncompletely ignores the caching constraints) can put an excessive load on yo=\r\nur core system. They&#39;re still a REST client, in fact they can be an ext=\r\nernal cache themselves (perhaps a badly configured one).&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/d=\r\niv&gt;&lt;div&gt;Now, if you&#39;re not providing you own caching layer, and effecti=\r\nvely hoping to leverage external caches, then you have no room to complain =\r\nwhen you get several clients that perhaps ignore the caching aspect. When y=\r\nou&#39;re relying on external systems that you have no control over, you&#3=\r\n9;re on the borderline of &quot;serendipitous reuse&quot;. The bright side =\r\nof SU is the new value it can provide, the down side is the &quot;serendipi=\r\ntous&quot; part.&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;And finally, you can address the=\r\n serendipitous reuse aspect. That too, is a benefit of the client. It lets =\r\nsomeone use the data in ways not envisioned by the application designers. T=\r\nhus providing added value to the client Whether it&#39;s added value to the=\r\n application is a different issue (maybe you didn&#39;t want or plan for al=\r\nl of this new traffic, then again maybe you&#39;re excited to be offering n=\r\new value that you didn&#39;t have to code and design).&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div=\r\n&gt;&lt;div&gt;So, yes, it takes good corporation between the clients and the server=\r\ns to get the highest level of benefits from the architecture, but the simpl=\r\ne truth is much of the design is really there for the clients in the first =\r\nplace and they&#39;re only hurting themselves in the long run by not playin=\r\ng along.&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Regards,&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Will H=\r\nartung&lt;/div&gt;&lt;div&gt;(&lt;a href=3D&quot;mailto:willh@...&quot;&gt;willh@...=\r\nm&lt;/a&gt;)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;\n\n&lt;br&gt;\n&lt;span&gt;&lt;font face=3D&quot;Arial&quot; size=3D&quot;1&quot;&gt;CON=\r\nFIDENTIALITY NOTICE: The information contained in this electronic transmiss=\r\nion may be confidential. If you are not an intended recipient, be aware tha=\r\nt any disclosure, copying, distribution or use of the information contained=\r\n in this transmission is prohibited and may be unlawful. If you have receiv=\r\ned this transmission in error, please notify us by email reply and then era=\r\nse it from your computer system.&lt;/font&gt;&lt;/span&gt;\r\n--00235429e2dcccda3104babd746c--\r\n\n"}}
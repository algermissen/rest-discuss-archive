{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":364579677,"authorName":"Mike Kelly","from":"Mike Kelly &lt;mike@...&gt;","profile":"pleb1985","replyTo":"SENDER","senderId":"B5cQdQ2vcGuAwDNGTEFGx2S74RCCBEW-E5zIjRTKaCKubeJuMCqq8VykBUh9LRsn4I5Zoyi0B2Iyr4ynE790Fmv8qdllfQ","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Determining which Media type for post/put","postDate":"1275647488","msgId":15534,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEFBTkxrVGlrTURTRG9ab3hXTzZVTHM2ZURxN0FycHZhZjFMa2RfLUVaVEYyV0BtYWlsLmdtYWlsLmNvbT4=","inReplyToHeader":"PDIwMTAwNjAzMTQxMjA4LmUwMjY5ODdkLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","referencesHeader":"PEFBTkxrVGlsazJZWnJnY2U5M3dYcDlFSjRHZnBpckxlUVZ2bUowSnhjeFBZSEBtYWlsLmdtYWlsLmNvbT4JPEFBTkxrVGltTzROM0ZTeDg5bjR2Sm43RkpsMzJYaC1ERnNZUl93dG5Pd3VYdUBtYWlsLmdtYWlsLmNvbT4JPDNEREQwQkU2NTU4NjlENEVBNTA2NjUyQjM4MDNBRUY2MTU2RDlFNkNAUFJJU00uY2FmZmVpbmUtaXQubmV0Pgk8QUFOTGtUaW5Hc3JWaUdXSUJTWElmd3YxeTY1dDRNbTEyRW1PcXNnNTlONmUyQG1haWwuZ21haWwuY29tPgk8MjAxMDA2MDExMDUxNTEuZTYzZjgyMmEuZXJpY0BiaXNvbnN5c3RlbXMubmV0Pgk8QUFOTGtUaWxIU3RDNWNpU0N5MHg5ZFFmRUJsdHluVld5ZEdLblZlbjZaYm1KQG1haWwuZ21haWwuY29tPgk8MjAxMDA2MDExNzU2NDEuZjZhY2FhMjguZXJpY0BiaXNvbnN5c3RlbXMubmV0Pgk8QUFOTGtUaW5kdzJsN0tDcUpkelh2OU8yLUdGMUtfamM3d1FjanBrbmhIZm5oQG1haWwuZ21haWwuY29tPgk8MjAxMDA2MDMwNTE1MDkuYjUxOWI4ZWIuZXJpY0BiaXNvbnN5c3RlbXMubmV0Pgk8QUFOTGtUaWtrdmZpaGFkMWxVcVNkTmktOFozanppVy0wYjNIUTJTQXNqV2xRQG1haWwuZ21haWwuY29tPgk8MjAxMDA2MDMxNDEyMDguZTAyNjk4N2QuZXJpY0BiaXNvbnN5c3RlbXMubmV0Pg=="},"prevInTopic":15533,"nextInTopic":15535,"prevInTime":15533,"nextInTime":15535,"topicId":15466,"numMessagesInTopic":82,"msgSnippet":"... Gateway intermediaries/caches within the same organisational domain as the origin server do not have to be dumb . I take it you are not a fan of, say,","rawEmail":"Return-Path: &lt;mike@...&gt;\r\nX-Sender: mike@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 83307 invoked from network); 4 Jun 2010 10:31:30 -0000\r\nX-Received: from unknown (98.137.34.44)\n  by m1.grp.sp2.yahoo.com with QMQP; 4 Jun 2010 10:31:30 -0000\r\nX-Received: from unknown (HELO moutng.kundenserver.de) (212.227.17.9)\n  by mta1.grp.sp2.yahoo.com with SMTP; 4 Jun 2010 10:31:30 -0000\r\nX-Received: from mail-fx0-f46.google.com (mail-fx0-f46.google.com [209.85.161.46])\n\tby mrelayeu.kundenserver.de (node=mreu0) with ESMTP (Nemesis)\n\tid 0MNyIR-1ONV8746fr-007I8y; Fri, 04 Jun 2010 12:31:29 +0200\r\nX-Received: by fxm8 with SMTP id 8so750109fxm.33\n        for &lt;rest-discuss@yahoogroups.com&gt;; Fri, 04 Jun 2010 03:31:28 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.239.187.137 with SMTP id l9mr806857hbh.169.1275647488647; Fri, \n\t04 Jun 2010 03:31:28 -0700 (PDT)\r\nX-Received: by 10.239.180.136 with HTTP; Fri, 4 Jun 2010 03:31:28 -0700 (PDT)\r\nIn-Reply-To: &lt;20100603141208.e026987d.eric@...&gt;\r\nReferences: &lt;AANLkTilk2YZrgce93wXp9EJ4GfpirLeQVvmJ0JxcxPYH@...&gt;\n\t&lt;AANLkTimO4N3FSx89n4vJn7FJl32Xh-DFsYR_wtnOwuXu@...&gt;\n\t&lt;3DDD0BE655869D4EA506652B3803AEF6156D9E6C@...-it.net&gt;\n\t&lt;AANLkTinGsrViGWIBSXIfwv1y65t4Mm12EmOqsg59N6e2@...&gt;\n\t&lt;20100601105151.e63f822a.eric@...&gt;\n\t&lt;AANLkTilHStC5ciSCy0x9dQfEBltynVWydGKnVen6ZbmJ@...&gt;\n\t&lt;20100601175641.f6acaa28.eric@...&gt;\n\t&lt;AANLkTindw2l7KCqJdzXv9O2-GF1K_jc7wQcjpknhHfnh@...&gt;\n\t&lt;20100603051509.b519b8eb.eric@...&gt;\n\t&lt;AANLkTikkvfihad1lUqSdNi-8Z3jziW-0b3HQ2SAsjWlQ@...&gt;\n\t&lt;20100603141208.e026987d.eric@...&gt;\r\nDate: Fri, 4 Jun 2010 11:31:28 +0100\r\nMessage-ID: &lt;AANLkTikMDSDoZoxWO6ULs6eDq7Arpvaf1Lkd_-EZTF2W@...&gt;\r\nTo: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nCc: Sebastien Lambla &lt;seb@...&gt;, mike amundsen &lt;mamund@...&gt;, \n\tGlenn Block &lt;glenn.block@...&gt;, \n\t&quot;rest-discuss@yahoogroups.com&quot; &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Type: multipart/alternative; boundary=0016e654fe606b62a2048831d351\r\nX-Provags-ID: V01U2FsdGVkX1/kTsiHmA3U34ziPKhCZ1GRSeeGt7QyCD3X4k2\n +eIGp1wGt1Ppnd+fVydEi4nZb5eN0Qj4F+2Mb+SK4KWNQDFbAR\n Od4kT5mo79m0qNoiZUK2mW9jq6PJvbJ\r\nFrom: Mike Kelly &lt;mike@...&gt;\r\nSubject: Re: [rest-discuss] Determining which Media type for post/put\r\nX-Yahoo-Group-Post: member; u=364579677; y=hxlyalJEKCCKmr-9BVjEwT9m4CQlqKBGwclBpCPt5NeHLeE\r\nX-Yahoo-Profile: pleb1985\r\n\r\n\r\n--0016e654fe606b62a2048831d351\r\nContent-Type: text/plain; charset=ISO-8859-1\r\n\r\nOn Thu, Jun 3, 2010 at 9:12 PM, Eric J. Bowman &lt;eric@...&gt;wrote:\n\n&gt;\n&gt; When the origin server changes its behavior, caches change their\n&gt; behavior to match, without needing any knowledge (and definitely\n&gt; without being able to make any assertions about anything, there&#39;s no\n&gt; guarantee on the Web that you&#39;ll get fresh data) of the system the\n&gt; origin server implements to manage its resources.  This is dumb caching,\n&gt; and it&#39;s proven to scale; why replace it with smart caching, the\n&gt; coupling of which can&#39;t possibly scale?  REST is all about leveraging\n&gt; scalable, dumb caching.\n&gt;\n\nGateway intermediaries/caches within the same organisational domain as the\norigin server do not have to be &#39;dumb&#39;.\n\nI take it you are not a fan of, say, cache channels then?\n\n\n\n&gt;\n&gt; These dependencies you speak of aren&#39;t invisible, they&#39;re phantoms.\n&gt;\n\n\nOk Eric, if you say so.\n\n\n&gt;\n&gt; &gt;\n&gt; &gt; What does PUT /sales-order/123 do to the html/pdf resources from a\n&gt; &gt; cache&#39;s point of view, does it invalidate them? It probably should,\n&gt; &gt; that&#39;s a pretty useful behavior to be able to rely on.\n&gt; &gt;\n&gt;\n&gt; First, a cache invalidates only that resource involved in the PUT\n&gt; transaction -- it probably shouldn&#39;t behave any other way since that\n&gt; would defeat the entire purpose of REST and be some other, totally\n&gt; unproven, theoretical architecture bearing no resemblance to the\n&gt; real-world Web of today.\n&gt;\n\nAre you sure about that? I don&#39;t think REST has anything to say here,\nprovided the mechanism is part of the system&#39;s uniform interface it doesn&#39;t\nviolate any REST constraints.\n\nDon&#39;t take it from me, HTTP does this anyway:\n\nhttp://tools.ietf.org/html/draft-ietf-httpbis-p6-cache-06#section-2.5\n\n   The following HTTP methods MUST cause a cache to invalidate the\n   Request-URI *as well as the Location and Content-Location headers* (if\n   present):\n\n   o  PUT\n\n   o  DELETE\n\n   o  POST\n\n\n\n\n&gt;\n&gt; Second, this is one of many uses of the &#39;must-revalidate&#39; directive.  I\n&gt; serve HTML representations of Atom resources (if you will) to browsers,\n&gt; but the mechanism whereby content is posted is based on Atom Protocol.\n&gt; Obviously, updating the Atom resources updates the negotiated resources,\n&gt; but the way REST architecture works is that I include &#39;must-revalidate&#39;\n&gt; on negotiated variants such that they cache-validate properly.\n&gt;\n&gt; Granted, this results in overhead, but then again the overall bandwidth\n&gt; saved dwarfs the bandwidth consumed by &#39;must-revalidate&#39; traffic (sub-\n&gt; 1K/hit 304 traffic I can serve all day) and renders the fact that caches\n&gt; can&#39;t expire negotiated resources properly without it, moot.\n&gt;\n\nIf we&#39;re talking about gateway caches, who&#39;s primary purpose is to *reduce\ndemands on origin servers* - hitting the origin server to validate every\nrequest doesn&#39;t actually achieve much. There&#39;s different types and levels of\ncaching, all aimed at solving different problems.\n\n\n&gt;\n&gt; Optimizing PUT to begin with isn&#39;t really worthwile though, as REST\n&gt; emphasizes optimizing the hell out of GET because that&#39;s over 99% of a\n&gt; real-world system&#39;s traffic.  I care more about having those variants\n&gt; cache properly than I do about having intermediaries synchronously\n&gt; expire them when one changes -- the coupling required for such a system\n&gt; would go against fundamental REST architecture -- for the sake of what,\n&gt; you have failed to explain.\n&gt;\n\nMy research on gateway cache invalidation provides analysis of caching\nmechanisms by way of explanation, I&#39;ve already created a thread on this list\nabout it you can contribute to if you disagree or you can comment on the\nblog post. Given the high degree of threat you feel my perspective poses to\nthe community, I think you have a duty to sort this out in order to prevent\nme poisoning any more minds with improper thoughts. Perhaps you could hold\nconfession for anyone that has already moved to the dark side?\n\n\n&gt;\n&gt; Some caches, certainly not widely-enough deployed to have an appreciable\n&gt; impact, will in fact use an internal identifier and store variants even\n&gt; without Content-Location headers.\n\n\nSo what you&#39;re saying is that the HTTP does actually support it, but it&#39;s\ngenerally not implemented properly?\n\nThat&#39;s an interesting observation, but it&#39;s circular justification to use\nthat as an argument for preventing the behaviour from occuring . Maybe the\nfact it&#39;s &quot;not allowed&quot; is the very reason no caches implement it properly?\n\nIf the accept header was not intended to be context specific and only\nintended as a &#39;static&#39; description of UA preferences, why do\nbrowsers amend the accept header for script and style element hyperlinks?\n\nIf @type was changed to amend the accept header - what do\nyou envisage breaking? How would this prevent your approach from working?\n\nCheers,\nMike\n\r\n--0016e654fe606b62a2048831d351\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;br&gt;&lt;br&gt;&lt;div class=3D&quot;gmail_quote&quot;&gt;On Thu, Jun 3, 2010 at 9:12 PM, Eric J. =\r\nBowman &lt;span dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:eric@...&quot;&gt;eric@=\r\nbisonsystems.net&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote class=3D&quot;gmail_quote&quot;=\r\n style=3D&quot;margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex;&quot;&gt;\n=\r\n&lt;div class=3D&quot;im&quot;&gt;&lt;br&gt;&lt;/div&gt;\nWhen the origin server changes its behavior, c=\r\naches change their&lt;br&gt;\nbehavior to match, without needing any knowledge (an=\r\nd definitely&lt;br&gt;\nwithout being able to make any assertions about anything, =\r\nthere&#39;s no&lt;br&gt;\nguarantee on the Web that you&#39;ll get fresh data) of =\r\nthe system the&lt;br&gt;\norigin server implements to manage its resources. =A0Thi=\r\ns is dumb caching,&lt;br&gt;\nand it&#39;s proven to scale; why replace it with sm=\r\nart caching, the&lt;br&gt;\ncoupling of which can&#39;t possibly scale? =A0REST is=\r\n all about leveraging&lt;br&gt;\nscalable, dumb caching.&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;=\r\n&lt;/div&gt;&lt;div&gt;Gateway intermediaries/caches within the same organisational dom=\r\nain as the origin server do not have to be &#39;dumb&#39;.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/=\r\ndiv&gt;&lt;div&gt;I take it you are not a fan of, say, cache channels then?&lt;/div&gt;\n&lt;d=\r\niv&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;=A0&lt;/div&gt;&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;margi=\r\nn:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex;&quot;&gt;\n&lt;br&gt;\nThese depe=\r\nndencies you speak of aren&#39;t invisible, they&#39;re phantoms.&lt;br&gt;&lt;/bloc=\r\nkquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Ok Eric, if you say so.&lt;/div&gt;&lt;div=\r\n&gt;=A0&lt;/div&gt;&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;margin:0 0 0 .8ex;bord=\r\ner-left:1px #ccc solid;padding-left:1ex;&quot;&gt;\n\n&lt;div class=3D&quot;im&quot;&gt;&lt;br&gt;\n&gt;&lt;br&gt;=\r\n\n&gt; What does PUT /sales-order/123 do to the html/pdf resources from a&lt;br=\r\n&gt;\n&gt; cache&#39;s point of view, does it invalidate them? It probably shou=\r\nld,&lt;br&gt;\n&gt; that&#39;s a pretty useful behavior to be able to rely on.&lt;br&gt;=\r\n\n&gt;&lt;br&gt;\n&lt;br&gt;\n&lt;/div&gt;First, a cache invalidates only that resource involved=\r\n in the PUT&lt;br&gt;\ntransaction -- it probably shouldn&#39;t behave any other w=\r\nay since that&lt;br&gt;\nwould defeat the entire purpose of REST and be some other=\r\n, totally&lt;br&gt;\nunproven, theoretical architecture bearing no resemblance to =\r\nthe&lt;br&gt;\nreal-world Web of today.&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Are yo=\r\nu sure about that?=A0I don&#39;t think REST has anything to say here, provi=\r\nded the mechanism is part of the system&#39;s uniform interface it doesn&#3=\r\n9;t violate any REST constraints.&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Don&#39;t take =\r\nit from me, HTTP does this anyway:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;a href=3D&quot;http=\r\n://tools.ietf.org/html/draft-ietf-httpbis-p6-cache-06#section-2.5&quot;&gt;http://t=\r\nools.ietf.org/html/draft-ietf-httpbis-p6-cache-06#section-2.5&lt;/a&gt;&lt;/div&gt;\n&lt;di=\r\nv&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=3D&quot;Apple-style-span&quot; style=3D&quot;font-family: &#3=\r\n9;Times New Roman&#39;; font-size: 16px; &quot;&gt;&lt;pre class=3D&quot;newpage&quot; style=3D&quot;=\r\nfont-size: 1em; margin-top: 0px; margin-bottom: 0px; page-break-before: alw=\r\nays; &quot;&gt;\n   The following HTTP methods MUST cause a cache to invalidate the\n=\r\n   Request-URI &lt;b&gt;as well as the Location and Content-Location headers&lt;/b&gt; =\r\n(if\n   present):\n\n   o  PUT\n\n   o  DELETE\n\n   o  POST&lt;/pre&gt;&lt;pre class=3D&quot;ne=\r\nwpage&quot; style=3D&quot;font-size: 1em; margin-top: 0px; margin-bottom: 0px; page-b=\r\nreak-before: always; &quot;&gt;&lt;br&gt;&lt;/pre&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;=A0&lt;/div&gt;&lt;blockquote cla=\r\nss=3D&quot;gmail_quote&quot; style=3D&quot;margin:0 0 0 .8ex;border-left:1px #ccc solid;pa=\r\ndding-left:1ex;&quot;&gt;\n\n&lt;br&gt;\nSecond, this is one of many uses of the &#39;must-r=\r\nevalidate&#39; directive. =A0I&lt;br&gt;\nserve HTML representations of Atom resou=\r\nrces (if you will) to browsers,&lt;br&gt;\nbut the mechanism whereby content is po=\r\nsted is based on Atom Protocol.&lt;br&gt;\nObviously, updating the Atom resources =\r\nupdates the negotiated resources,&lt;br&gt;\nbut the way REST architecture works i=\r\ns that I include &#39;must-revalidate&#39;&lt;br&gt;\non negotiated variants such =\r\nthat they cache-validate properly.&lt;br&gt;\n&lt;br&gt;\nGranted, this results in overhe=\r\nad, but then again the overall bandwidth&lt;br&gt;\nsaved dwarfs the bandwidth con=\r\nsumed by &#39;must-revalidate&#39; traffic (sub-&lt;br&gt;\n1K/hit 304 traffic I c=\r\nan serve all day) and renders the fact that caches&lt;br&gt;\ncan&#39;t expire neg=\r\notiated resources properly without it, moot.&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div=\r\n&gt;&lt;div&gt;If we&#39;re talking about gateway caches, who&#39;s primary purpose =\r\nis to *reduce demands on origin servers* - hitting the origin server to val=\r\nidate every request doesn&#39;t actually achieve much. There&#39;s differen=\r\nt types and levels of caching, all aimed at solving different problems.&lt;/di=\r\nv&gt;\n&lt;div&gt;=A0&lt;/div&gt;&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;margin:0 0 0 .8=\r\nex;border-left:1px #ccc solid;padding-left:1ex;&quot;&gt;\n&lt;br&gt;\nOptimizing PUT to be=\r\ngin with isn&#39;t really worthwile though, as REST&lt;br&gt;\nemphasizes optimizi=\r\nng the hell out of GET because that&#39;s over 99% of a&lt;br&gt;\nreal-world syst=\r\nem&#39;s traffic. =A0I care more about having those variants&lt;br&gt;\ncache prop=\r\nerly than I do about having intermediaries synchronously&lt;br&gt;\nexpire them wh=\r\nen one changes -- the coupling required for such a system&lt;br&gt;\nwould go agai=\r\nnst fundamental REST architecture -- for the sake of what,&lt;br&gt;\nyou have fai=\r\nled to explain.&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;My research on gateway =\r\ncache invalidation provides analysis of caching mechanisms by way of explan=\r\nation, I&#39;ve already created a thread on this list about it you can cont=\r\nribute to if you disagree or you can comment on the blog post.=A0Given the =\r\nhigh degree of threat you feel my perspective poses to the community, I thi=\r\nnk you have a duty to sort this out in order=A0to prevent me poisoning any =\r\nmore minds with improper thoughts. Perhaps you could hold confession for an=\r\nyone that has already moved to the dark side?=A0&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;&lt;block=\r\nquote class=3D&quot;gmail_quote&quot; style=3D&quot;margin:0 0 0 .8ex;border-left:1px #ccc=\r\n solid;padding-left:1ex;&quot;&gt;\n&lt;div class=3D&quot;im&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;blockq=\r\nuote class=3D&quot;gmail_quote&quot; style=3D&quot;margin:0 0 0 .8ex;border-left:1px #ccc =\r\nsolid;padding-left:1ex;&quot;&gt;\nSome caches, certainly not widely-enough deployed=\r\n to have an appreciable&lt;br&gt;\nimpact, will in fact use an internal identifier=\r\n and store variants even&lt;br&gt;\nwithout Content-Location headers.&lt;/blockquote&gt;=\r\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;So what you&#39;re saying is that the HTTP does actuall=\r\ny support it, but it&#39;s generally not implemented properly?&lt;/div&gt;&lt;div&gt;&lt;b=\r\nr&gt;&lt;/div&gt;&lt;div&gt;That&#39;s an interesting observation, but it&#39;s circular j=\r\nustification to use that as an argument for preventing the behaviour from o=\r\nccuring . Maybe the fact it&#39;s &quot;not allowed&quot; is the very reaso=\r\nn no caches implement it properly?&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;If the accept =\r\nheader was not intended to be context specific and only intended as a &#39;=\r\nstatic&#39; description of UA preferences, why do browsers=A0amend=A0the ac=\r\ncept header for script and style element=A0hyperlinks?&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div=\r\n&gt;&lt;div&gt;If @type was changed to=A0amend=A0the accept header - what do you=A0e=\r\nnvisage=A0breaking? How would this prevent your approach from working?&lt;/div=\r\n&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Cheers,&lt;/div&gt;&lt;div&gt;Mike&lt;/div&gt;&lt;/div&gt;\n\r\n--0016e654fe606b62a2048831d351--\r\n\n"}}
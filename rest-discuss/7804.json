{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":184797058,"authorName":"Benjamin Carlyle","from":"Benjamin Carlyle &lt;benjamincarlyle@...&gt;","profile":"fuzzybsc","replyTo":"SENDER","senderId":"Nj8Hoxi1ulgKAlzK1zRdFt--8uVVZtpbRsQQTdh9pTPDnr2DOx_efa1oURnMh0PKoQVK1Wo0g5eWPXozZcnxJaugtf_d2nyYyxnPmW02APm-Zg1GEPkRNc8","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] POST at most once","postDate":"1170554410","msgId":7804,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDExNzA1NTQ0MTAuNTMwMi42OC5jYW1lbEBsb2NhbGhvc3QubG9jYWxkb21haW4+","inReplyToHeader":"PDlCNTdCQkM4LTJCMzYtNDI3Ny1CQkFCLUNENzdBOEUzRkU5MkBtbm90Lm5ldD4=","referencesHeader":"PDExNjkyOTc0NjUuNTEzMC41NS5jYW1lbEBsb2NhbGhvc3QubG9jYWxkb21haW4+CSA8NDVCMjc0NDIuMzAzMDAwM0BkZWhvcmEubmV0PgkgPDExNjk4NzU5NzUuNTM2My40Mi5jYW1lbEBsb2NhbGhvc3QubG9jYWxkb21haW4+CSA8OUI1N0JCQzgtMkIzNi00Mjc3LUJCQUItQ0Q3N0E4RTNGRTkyQG1ub3QubmV0Pg=="},"prevInTopic":7749,"nextInTopic":7805,"prevInTime":7803,"nextInTime":7805,"topicId":7646,"numMessagesInTopic":40,"msgSnippet":"... ... Well, let s start with a base problem statement: I have some state that I want to append to a resource. The right method according to HTTP is POST, but","rawEmail":"Return-Path: &lt;benjamincarlyle@...&gt;\r\nX-Sender: benjamincarlyle@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 48269 invoked from network); 4 Feb 2007 02:01:33 -0000\r\nReceived: from unknown (66.218.66.217)\n  by m36.grp.scd.yahoo.com with QMQP; 4 Feb 2007 02:01:33 -0000\r\nReceived: from unknown (HELO mail04.syd.optusnet.com.au) (211.29.132.185)\n  by mta2.grp.scd.yahoo.com with SMTP; 4 Feb 2007 02:01:32 -0000\r\nReceived: from c210-49-93-69.rochd2.qld.optusnet.com.au (c210-49-93-69.rochd2.qld.optusnet.com.au [210.49.93.69])\n\tby mail04.syd.optusnet.com.au (8.13.1/8.13.1) with ESMTP id l1420A42015254;\n\tSun, 4 Feb 2007 13:00:12 +1100\r\nTo: Mark Nottingham &lt;mnot@...&gt;\r\nCc: Bill de hOra &lt;bill@...&gt;,\n        REST Discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nIn-Reply-To: &lt;9B57BBC8-2B36-4277-BBAB-CD77A8E3FE92@...&gt;\r\nReferences: &lt;1169297465.5130.55.camel@...&gt;\n\t &lt;45B27442.3030003@...&gt;\n\t &lt;1169875975.5363.42.camel@...&gt;\n\t &lt;9B57BBC8-2B36-4277-BBAB-CD77A8E3FE92@...&gt;\r\nContent-Type: text/plain\r\nDate: Sun, 04 Feb 2007 12:00:10 +1000\r\nMessage-Id: &lt;1170554410.5302.68.camel@...&gt;\r\nMime-Version: 1.0\r\nX-Mailer: Evolution 2.6.3 \r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:0:0:0\r\nFrom: Benjamin Carlyle &lt;benjamincarlyle@...&gt;\r\nSubject: Re: [rest-discuss] POST at most once\r\nX-Yahoo-Group-Post: member; u=184797058; y=Mn45hbaRV-vSr9l6zLDbQt2MigC74UVleDEWSCPvhRARYRU\r\nX-Yahoo-Profile: fuzzybsc\r\n\r\nOn Sun, 2007-01-28 at 12:40 +1100, Mark Nottingham wrote:\n&gt; On 2007/01/27, at 4:32 PM, Benjamin Carlyle wrote:\n&gt; &gt; On Sat, 2007-01-20 at 19:57 +0000, Bill de hOra wrote:\n&gt; &gt;&gt; Start here:\n&gt; &gt;&gt; http://www.mnot.net/drafts/draft-nottingham-http-poe-00.txt\n&gt; &gt;&gt; http://www.dehora.net/doc/httplr/draft-httplr-01.html\n&gt; &gt; Problems with POE:\n&gt; &gt; * The specification does not cover how the POE resource is created.\n&gt; That&#39;s intentional :)\n&gt; &gt; Presumably, it is through a POST which could lead to a chicken and\n&gt; egg\n&gt; &gt; situation.\n&gt; Sending a POST to get the form is one way, but not the only.\n&gt; \n&gt; Another would be to use GET, and assure that the response isn&#39;t \n&gt; cacheable; there are a number of ways to assure that the links you&#39;ve \n&gt; given out don&#39;t collide without keeping a list of them, the easiest \n&gt; involving timestamps (along with some other information) or GUIDs.\n...\n\nWell, let&#39;s start with a base problem statement:\n\nI have some state that I want to append to a resource. The right method\naccording to HTTP is POST, but if I don&#39;t get a response to my POST I\ndon&#39;t know whether or not to retry.\n\nSo here are the strategies I can think of seeing so far:\n1. Have the user observe some property of the system to determine\nwhether to retry themselves. In SCADA this might be to observe a change\nin voltage before deciding whether or not to retry a circuit-breaker\ntrip. This can be automated as another SCADA concept: &quot;Target state\nmonitoring&quot;. Regardless of the reponse we recieved, did the resource\nactually reach the state we intended?\n\n2. Select and execute. This is another SCADA idea. You first prime the\nresource for operation. Only primed resources can have an operation\nperfomed on them, and they automatically unprime when that operation\ntakes place.\n\n3. Create a channel to operate through. The channel is designed to block\nduplicate requests in a way that the client can be sure means their\nrequest went through. Both HTTPLR and POE roughly follow this approach,\nI think.\n\n4. Always model the append as the creation of a new resource. Make the\ncreation of the resource (like the creation of the channel) a safe\noperation that consumes a little server-side state but otherwise as no\noperational effect. Once the resource has been created at least once,\nPUT the data you would have POSTed as many times as necessary to be sure\nit has gone through.\n\n5. Do TCP-like sequence numbering at the message level\n\nI think the channel concept and the new resource concepts have similar\ncharacteristics. The channel concept would seem to perform better\nwhenever we don&#39;t want to create new resource for the created state, and\nmay also handle channel teardown more gracefully. I think the new\nresource approach is conceptually simpler, at least on the face of it.\nInstead of a channel concept we just have the concept of the new\nresource whose creation you requested.\n\nPOE tries to solve the problem of how to interact with the channel, and\nleaves the channel creation process up to the implementation. Perhaps\nthis is a good thing. However you&#39;ll still need to deal with any new\nresource you have created through a POST to the channel. Hrmmm... let&#39;s\nwrite some pseudo-code:\n\nChannel approach:\ntry\n{\n    getChannel:\n    channel = RequestChannel(using POST or uncachable GET);\n}\ncatch (NoResponse)\n{\n    // old school psedo-code :)\n    GOTO getChannel;\n}\ncatch (...)\n{\n    // handle failure - request not processed, can resubmit\n}\n\ntry\n{\n    sendPOST:\n    resource = channel.POST(my content);\n    // save resource url away for later use, if any\n}\ncatch (NoResponse)\n{\n    GOTO sendPOST;\n}\ncatch (...)\n{\n    // failed, may be able to tell whether or not request was\n    // procssed if we only sent once\n}\n\nNew Resource approach:\ntry\n{\n    getResource:\n    resource = RequestResource(using POST or uncachable GET);\n}\ncatch (NoResponse)\n{\n    GOTO getResource;\n}\ncatch (...)\n{\n    // handle failure - data not submitted, can resubmit\n}\n\ntry\n{\n    sendPUT:\n    resource.PUT(my content);\n}\ncatch (NoResponse)\n{\n    GOTO sendPUT;\n}\ncatch (...)\n{\n    // failed, may be able to tell whether or not request was\n    // procssed if we only sent once. Can resubmit.\n}\n\nThe main problems with both cases are where the channel or new resource\ncould time out before the client gives up on things. In a client-server\nrelationship the client is responsible for pushing the sequence through\nto completion, and the server is just responsible for reasonably\nfulfilling client requests.\n\nIf the server reclaims its channel or resource state leading to a failed\nPUT, it isn&#39;t going to be possible to restart the request sequence\nwithout risking duplicate sumbission again. The channel approach offers\nan optimisation of allowing the client to DELETE the channel to free up\nresources. This may mean that servers need to reap potentially-leaked\nresources less agressively.\n\nThe resource-based approach also introduces a problem by aliasing the\nchannel and created resource. If the created resource has a short\nlifetime, it may be equivalent to an early timeout for client purposes.\nSay the resource&#39;s PUT succeeds, but the response associated with this\nis lost. When the next PUT comes in it gets a 404. Was the data\nsubmitted or not? Should the request to submit (say) an atom entry\nprocessed, or should it be retried?\n\n&gt; I don&#39;t see how sending a POST to get the POE link leads to a\n&gt; chicken- \n&gt; and-egg problem, unless you also need the &quot;get the form&quot; operation \n&gt; (which really should be a GET) to be reliable as well. Even if you \n&gt; did, you can always bootstrap it with one that isn&#39;t required to be \n&gt; reliable.\n\nI see your point. I think your approach is more similar to HTTPLR than I\noriginally surmised.\n\nOn Sat, 2007-01-27 at 15:28 +0000, Bill de hOra wrote: \n&gt; Benjamin Carlyle wrote:\n&gt; In light of this I prefer the\n&gt; &gt; channel concept to simply be replaced by the concept of a created\n&gt; &gt; resource.\n&gt; Maybe. Where you&#39;re worried about the reality of timeouts, I&#39;m\n&gt; worried \n&gt; about the reality of HTTPLR acting as a gateway for MOMs.\n\nSo you would write your problem statement differently:\nI have a message that I want to transmit to a likely unRESTful remote\nsystem using a POST request. I don&#39;t want it to recieve the message\ntwice.\n\n&gt; &gt; * I think there is some danger that the message could be read to be\n&gt; a\n&gt; &gt; whole HTTP request or SOAP request or other request that needs to be\n&gt; &gt; delivered. That interpretation doesn&#39;t smell right to me, and I\n&gt; think\n&gt; &gt; that any suggestion of message transfer should be explicitly avoided\n&gt; in\n&gt; &gt; favour of state transfer.\n&gt; Again, maybe. Did you see any testable/operational consequences?\n\nOnly that it may lead to a more complex system that might muddy the\nwaters a little. I think the different problem statements may infer\ndifferent solution spaces... however I&#39;m not completely sure of this\nline of thought as yet.\n\nBenjamin.\n\n\n\n"}}
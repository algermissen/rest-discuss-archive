{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":548634940,"authorName":"Jonathan Ballard","from":"Jonathan Ballard &lt;dzonatas@...&gt;","replyTo":"SENDER","senderId":"NBJzzl2KkkDy102HBhmLwYkbcw4cjTcP2OIc5DeQfRQ9aefxfu3Gkl8XTN7HGbm3FNYgg4Z9XiNrIUPvyPYCmNo1wVgf9_m2PaP1YA","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] the meaning of stateless","postDate":"1366496864","msgId":19316,"canDelete":false,"contentTrasformed":false,"systemMessage":true,"headers":{"messageIdInHeader":"PENBQVBBSy02NEpXU2pTSkQ2NWJ3c2d4ZU9yNFFmcFFmdkhmb0ZQOGRodGtDVERHb2ZaZ0BtYWlsLmdtYWlsLmNvbT4=","inReplyToHeader":"PENBR1ZiWEw2X09IT2hPVFMwa2YwU0tjV0EtPXpLWWJLTFFXVldmQm9US09tZzd2WHhFQUBtYWlsLmdtYWlsLmNvbT4=","referencesHeader":"PENBR1ZiWEw2X09IT2hPVFMwa2YwU0tjV0EtPXpLWWJLTFFXVldmQm9US09tZzd2WHhFQUBtYWlsLmdtYWlsLmNvbT4="},"prevInTopic":19315,"nextInTopic":19317,"prevInTime":19315,"nextInTime":19317,"topicId":19309,"numMessagesInTopic":86,"msgSnippet":"HTTPS is not stateless because, simply, that expects credentials, session data, metadata, and or any secure transport layer. Dynamic resources are useful for","rawEmail":"Return-Path: &lt;dzonatas@...&gt;\r\nReceived: (qmail 29451 invoked from network); 22 Apr 2013 01:21:28 -0000\r\nReceived: from unknown (10.193.84.151)\n  by m8.grp.bf1.yahoo.com with QMQP; 22 Apr 2013 01:21:28 -0000\r\nReceived: from unknown (HELO ng15-ip2.bullet.mail.bf1.yahoo.com) (98.139.165.128)\n  by mta5.grp.bf1.yahoo.com with SMTP; 22 Apr 2013 01:21:28 -0000\r\nDKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=yahoogroups.com; s=echoe; t=1366593688; bh=g5jNKr74qhT8+EUpTeLbBJpe4sQ6hrzN8k0bwmF51v8=; h=Received:Received:X-Sender:X-Apparently-To:X-Received:X-Received:X-Received:X-Received:MIME-Version:X-Received:X-Received:In-Reply-To:References:Date:Message-ID:To:Cc:Content-Type:X-Originating-IP:X-eGroups-Msg-Info:From:Subject:X-Yahoo-Group-Post:X-YGroups-SubInfo:Sender:X-Yahoo-Newman-Property:X-eGroups-Approved-By:X-eGroups-Auth; b=xGe9KkYOeJX3+Xo4eVtZpa/gRf4+K+Nt9eILJrom8neENYMOj0sXDL5lcTlEhYQPrF0sxliS4SA/yYDQSR3/e2q3lpx4UYEpn7tK+bYu0ODy9TidUjLlC0ekipvQEuJf/FV/51CIfCfd4TaAXOR+p9AgpHobYwcPAmPnlVvsqMg=\r\nReceived: from [98.139.164.122] by ng15.bullet.mail.bf1.yahoo.com with NNFMP; 22 Apr 2013 01:21:28 -0000\r\nReceived: from [10.193.94.44] by tg3.bullet.mail.bf1.yahoo.com with NNFMP; 22 Apr 2013 01:21:28 -0000\r\nX-Sender: dzonatas@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 88703 invoked from network); 20 Apr 2013 22:27:45 -0000\r\nX-Received: from unknown (10.193.84.151)\n  by m12.grp.bf1.yahoo.com with QMQP; 20 Apr 2013 22:27:45 -0000\r\nX-Received: from unknown (HELO mail-pd0-f182.google.com) (209.85.192.182)\n  by mta5.grp.bf1.yahoo.com with SMTP; 20 Apr 2013 22:27:45 -0000\r\nX-Received: by mail-pd0-f182.google.com with SMTP id 3so2845130pdj.27\n        for &lt;rest-discuss@yahoogroups.com&gt;; Sat, 20 Apr 2013 15:27:45 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.66.6.231 with SMTP id e7mr5325928paa.218.1366496865050; Sat,\n 20 Apr 2013 15:27:45 -0700 (PDT)\r\nX-Received: by 10.66.12.101 with HTTP; Sat, 20 Apr 2013 15:27:44 -0700 (PDT)\r\nIn-Reply-To: &lt;CAGVbXL6_OHOhOTS0kf0SKcWA-=zKYbKLQWVWfBoTKOmg7vXxEA@...&gt;\r\nReferences: &lt;CAGVbXL6_OHOhOTS0kf0SKcWA-=zKYbKLQWVWfBoTKOmg7vXxEA@...&gt;\r\nDate: Sat, 20 Apr 2013 15:27:44 -0700\r\nMessage-ID: &lt;CAAPAK-64JWSjSJD65bwsgxeOr4QfpQfvHfoFP8dhtkCTDGofZg@...&gt;\r\nTo: Brian Craft &lt;craft.brian@...&gt;\r\nCc: REST Discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Type: multipart/alternative; boundary=bcaec5314b273a654404dad2587d\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Jonathan Ballard &lt;dzonatas@...&gt;\r\nSubject: Re: [rest-discuss] the meaning of stateless\r\nX-Yahoo-Group-Post: member; u=548634940\r\nX-Yahoo-Newman-Property: groups-system\r\nX-eGroups-Approved-By: gonga_thrash &lt;distobj@...&gt; via web; 22 Apr 2013 01:21:28 -0000\r\n\r\n\r\n--bcaec5314b273a654404dad2587d\r\nContent-Type: text/plain; charset=windows-1252\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nHTTPS is not stateless because, simply, that expects credentials, session\nd=\r\nata, metadata, and or any secure transport layer.\n\nDynamic resources are us=\r\neful for stateless HTTP with less round-trips.\nSimply again, the POST could=\r\n create the resource and redirect response\ninstead of store session cookies=\r\n. These are useful in contrast for further\nPOST, GET, PUT, and DELETE metho=\r\nds.\n\nAlso note that ReST does not need to be directly implemented on top of=\r\n\nHTTP. Queue analysis may further optimize round trips before transport.\n\n\n=\r\n\nOn Sat, Apr 20, 2013 at 7:33 AM, Brian Craft &lt;craft.brian@...&gt; wrote=\r\n:\n\n&gt; **\n&gt;\n&gt;\n&gt; I don&#39;t understand how the word &quot;stateless&quot; is being used in =\r\nREST.\n&gt; Obviously POST and PUT create state on the server. Obviously, reque=\r\nsts\n&gt; after a state change depend on that state change (e.g. by using a URL=\r\n that\n&gt; was not valid before the state change).\n&gt;\n&gt; I can almost live with =\r\nthis usage of &quot;stateless&quot; for persistent objects\n&gt; stored on the server, be=\r\ncause it can be thought of as not being &quot;session\n&gt; state&quot;: it lasts longer =\r\nthan a session. But in any moderately complex web\n&gt; app, if you try to desi=\r\ngn a REST API you will quickly hit GET size limits\n&gt; when doing complex que=\r\nries. And then the suggestion is to do something like\n&gt; POST the query para=\r\nmeters, returning a Location header for a &quot;query&quot; object\n&gt; that can be fetc=\r\nhed with GET. How is that not storing session data on the\n&gt; server? How is =\r\nthat different from non-REST solutions?\n&gt;\n&gt; There are three obvious differe=\r\nnces between POSTing a query and just\n&gt; generically using POST instead of G=\r\nET. POSTing a query requires two\n&gt; round-trips to the server, bad for laten=\r\ncy. POSTing a query and using a\n&gt; Location header limits the response to th=\r\ne creation of a single object,\n&gt; which is fine for 1990&#39;s full-page-load de=\r\nsign, but is unrealistic for any\n&gt; moderately complex ajax app, where an AP=\r\nI call will result in the creation\n&gt; of multiple objects (e.g. creating rel=\r\nated images). And POSTing a query\n&gt; requires the tracking of large numbers =\r\nof transient &quot;query&quot; objects, hugely\n&gt; complicating both client and server,=\r\n the very thing REST is supposed to\n&gt; avoid.\n&gt;\n&gt; Perhaps to clarify what is=\r\n meant in REST by &quot;stateless&quot; someone could give\n&gt; examples of things that =\r\n*aren&#39;t* &quot;stateless&quot;, and contrast them to REST.\n&gt;\n&gt;  \n&gt;\n\r\n--bcaec5314b273a654404dad2587d\r\nContent-Type: text/html; charset=windows-1252\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;div dir=3D&quot;ltr&quot;&gt;HTTPS is not stateless because, simply, that expects=A0cre=\r\ndentials, session data, metadata, and or any secure transport=A0layer.&lt;div&gt;=\r\n&lt;br&gt;&lt;/div&gt;&lt;div style&gt;Dynamic resources are useful for stateless HTTP with l=\r\ness round-trips. Simply again, the POST could create the resource and redir=\r\nect response instead of store session cookies. These are useful in contrast=\r\n for further POST, GET, PUT, and DELETE methods.&lt;/div&gt;\n&lt;div style&gt;&lt;br&gt;&lt;/div=\r\n&gt;&lt;div style&gt;Also note that ReST does not need to be directly implemented on=\r\n top of HTTP. Queue analysis may further optimize round trips before transp=\r\nort.&lt;/div&gt;&lt;div style&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=3D&quot;gmail_extra&quot;&gt;\n&lt;br&gt;&lt;br&gt;&lt;d=\r\niv class=3D&quot;gmail_quote&quot;&gt;On Sat, Apr 20, 2013 at 7:33 AM, Brian Craft &lt;span=\r\n dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:craft.brian@...&quot; target=3D&quot;_blank&quot;=\r\n&gt;craft.brian@...&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote class=3D&quot;gmail_=\r\nquote&quot; style=3D&quot;margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1=\r\nex&quot;&gt;\n\n\n\n&lt;u&gt;&lt;/u&gt;\n\n\n\n\n\n\n\n\n\n\n&lt;div style&gt;\n&lt;span&gt;=A0&lt;/span&gt;\n\n\n&lt;div&gt;\n  &lt;div&gt;\n\n\n  =\r\n  &lt;div&gt;\n      \n      \n      &lt;p&gt;&lt;/p&gt;&lt;div dir=3D&quot;ltr&quot;&gt;&lt;span style=3D&quot;font-fam=\r\nily:arial,sans-serif;font-size:12.727272033691406px&quot;&gt;I don&#39;t understand=\r\n how the word &quot;stateless&quot; is being used in REST. Obviously POST a=\r\nnd PUT create state on the server. Obviously, requests after a state change=\r\n depend on that state change (e.g. by using a URL that was not valid before=\r\n the state change).&lt;/span&gt;&lt;div style=3D&quot;font-family:arial,sans-serif;font-s=\r\nize:12.727272033691406px&quot;&gt;\n\n&lt;br&gt;&lt;/div&gt;&lt;div style=3D&quot;font-family:arial,sans-=\r\nserif;font-size:12.727272033691406px&quot;&gt;I can almost live with this usage of =\r\n&quot;stateless&quot; for persistent objects stored on the server, because =\r\nit can be thought of as not being &quot;session state&quot;: it lasts longe=\r\nr than a session. But in any moderately complex web app, if you try to desi=\r\ngn a REST API you will quickly hit GET size limits when doing complex queri=\r\nes. And then the suggestion is to do something like POST the query paramete=\r\nrs, returning a Location header for a &quot;query&quot; object that can be =\r\nfetched with GET. How is that not storing session data on the server? How i=\r\ns that different from non-REST solutions?&lt;/div&gt;\n\n&lt;div style=3D&quot;font-family:=\r\narial,sans-serif;font-size:12.727272033691406px&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=3D&quot;fo=\r\nnt-family:arial,sans-serif;font-size:12.727272033691406px&quot;&gt;There are three =\r\nobvious differences between POSTing a query and just generically using POST=\r\n instead of GET. POSTing a query requires two round-trips to the server, ba=\r\nd for latency. POSTing a query and using a Location header limits the respo=\r\nnse to the creation of a single object, which is fine for 1990&#39;s full-p=\r\nage-load design, but is unrealistic for any moderately complex ajax app, wh=\r\nere an API call will result in the creation of multiple objects (e.g. creat=\r\ning related images). And POSTing a query requires the tracking of large num=\r\nbers of transient &quot;query&quot; objects, hugely complicating both clien=\r\nt and server, the very thing REST is supposed to avoid.&lt;/div&gt;\n\n&lt;div style=\r\n=3D&quot;font-family:arial,sans-serif;font-size:12.727272033691406px&quot;&gt;&lt;br&gt;&lt;/div&gt;=\r\n&lt;div style=3D&quot;font-family:arial,sans-serif;font-size:12.727272033691406px&quot;&gt;=\r\nPerhaps to clarify what is meant in REST by &quot;stateless&quot; someone c=\r\nould give examples of things that *aren&#39;t* &quot;stateless&quot;, and c=\r\nontrast them to REST.&lt;/div&gt;\n\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n    &lt;/div&gt;\n     \n\n    \n    &lt;di=\r\nv style=3D&quot;color:#fff;min-height:0&quot;&gt;&lt;/div&gt;\n\n\n&lt;/div&gt;\n\n\n\n  \n\n\n\n\n\n\n&lt;/blockquot=\r\ne&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;\n\r\n--bcaec5314b273a654404dad2587d--\r\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":87126421,"authorName":"Marc Portier","from":"Marc Portier &lt;mpo@...&gt;","profile":"portiermarc","replyTo":"SENDER","senderId":"_N10LA4Mv2doAdfubiryOSsh7m-wPqCHc9f8FrSXl24lbXuLBKok-PccEPAxHuRPiIqNucfgW9gDbgGccNKxgFAxcAqm8BN6__U","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Re: Partial PUT debate","postDate":"1289472328","msgId":16878,"canDelete":false,"contentTrasformed":false,"systemMessage":true,"headers":{"messageIdInHeader":"PDRDREJDOTQ4LjcwMDAwMDdAb3V0ZXJ0aG91Z2h0Lm9yZz4=","inReplyToHeader":"PEFBTkxrVGlrOHd4Tk9XX3ZOVDgzOE1IbnlTUF9TUlh6c1ZCNytTK2l2czMrU0BtYWlsLmdtYWlsLmNvbT4=","referencesHeader":"PGliYnExcCtzYW5mQGVHcm91cHMuY29tPgk8NENEQTYwRjMuODAzMDUwNkBnbXguZGU+CTxBQU5Ma1RpbkQ4UDMwdnNRRWhleTF5dDBBa1JHdy0tRVk9aUFzcnhQcDM0cFdAbWFpbC5nbWFpbC5jb20+CTw0Q0RBOTIxMi45MDgwMjA3QHdlYnIzLm9yZz4JPEFBTkxrVGk9V3ZQTVliWlhvUlZIa1hpcWlueHFYZmF3a2M5dTdiRXFIQUE4V0BtYWlsLmdtYWlsLmNvbT4JPEFBTkxrVGltYjBEQmk0ajBadU5Ic2M9QVR6WUxiNnYtNHQ3Vzd1MzZxQWhvZkBtYWlsLmdtYWlsLmNvbT4gPEFBTkxrVGlrOHd4Tk9XX3ZOVDgzOE1IbnlTUF9TUlh6c1ZCNytTK2l2czMrU0BtYWlsLmdtYWlsLmNvbT4="},"prevInTopic":16877,"nextInTopic":16879,"prevInTime":16877,"nextInTime":16879,"topicId":16839,"numMessagesInTopic":40,"msgSnippet":"... I would think not a portion of the body but the entire body: the contract that this server takes in supporting partial update is that it offers the client","rawEmail":"Return-Path: &lt;mpo@...&gt;\r\nReceived: (qmail 73960 invoked from network); 11 Nov 2010 12:33:30 -0000\r\nReceived: from unknown (98.137.34.44)\n  by m3.grp.sp2.yahoo.com with QMQP; 11 Nov 2010 12:33:30 -0000\r\nReceived: from unknown (HELO n42b.bullet.mail.sp1.yahoo.com) (66.163.168.156)\n  by mta1.grp.sp2.yahoo.com with SMTP; 11 Nov 2010 12:33:30 -0000\r\nDKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=yahoogroups.com; s=lima; t=1289478810; bh=JJAVWVwBlgfqHS1398DyVMWDNWNocgMIWQK/7wflx6M=; h=Received:Received:X-Sender:X-Apparently-To:X-Received:X-Received:X-Received:X-Received:X-Received:X-Received:Message-ID:Date:Organization:User-Agent:MIME-Version:To:References:In-Reply-To:Content-Type:Content-Transfer-Encoding:X-Originating-IP:From:Subject:X-Yahoo-Group-Post:X-Yahoo-Profile:X-YGroups-SubInfo:Sender:X-Yahoo-Newman-Property:X-eGroups-Approved-By:X-eGroups-Auth; b=RteMy54WHF8iNaZhLlZ+WnRmqiXuD7HHMIrLPy9GLNa3Mu4vp0iUBYzblHWgqmIw4FuRQ6g+BeS0X3B7E6QYzCzfovj63dT7rxlyb9YgMMKT1exGyfKhZlWrLoZ+r1t8\r\nReceived: from [69.147.65.171] by n42.bullet.mail.sp1.yahoo.com with NNFMP; 11 Nov 2010 12:33:30 -0000\r\nReceived: from [98.137.34.35] by t13.bullet.mail.sp1.yahoo.com with NNFMP; 11 Nov 2010 12:33:30 -0000\r\nX-Sender: mpo@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 35710 invoked from network); 11 Nov 2010 10:45:32 -0000\r\nX-Received: from unknown (66.196.94.105)\n  by m10.grp.re1.yahoo.com with QMQP; 11 Nov 2010 10:45:32 -0000\r\nX-Received: from unknown (HELO mail-wy0-f172.google.com) (74.125.82.172)\n  by mta1.grp.re1.yahoo.com with SMTP; 11 Nov 2010 10:45:32 -0000\r\nX-Received: by wyb35 with SMTP id 35so641747wyb.17\n        for &lt;rest-discuss@yahoogroups.com&gt;; Thu, 11 Nov 2010 02:45:32 -0800 (PST)\r\nX-Received: by 10.216.154.206 with SMTP id h56mr547380wek.111.1289472331653;\n        Thu, 11 Nov 2010 02:45:31 -0800 (PST)\r\nX-Received: from [192.168.124.182] (195-144-080-096.dyn.adsl.xs4all.be [195.144.80.96])\n        by mx.google.com with ESMTPS id l51sm1176249wer.26.2010.11.11.02.45.30\n        (version=TLSv1/SSLv3 cipher=RC4-MD5);\n        Thu, 11 Nov 2010 02:45:30 -0800 (PST)\r\nMessage-ID: &lt;4CDBC948.7000007@...&gt;\r\nDate: Thu, 11 Nov 2010 11:45:28 +0100\r\nOrganization: Outerthought\r\nUser-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.2.12) Gecko/20101027 Lightning/1.0b2 Thunderbird/3.1.6\r\nMIME-Version: 1.0\r\nTo: rest-discuss@yahoogroups.com\r\nReferences: &lt;ibbq1p+sanf@...&gt;\t&lt;4CDA60F3.8030506@...&gt;\t&lt;AANLkTinD8P30vsQEhey1yt0AkRGw--EY=iAsrxPp34pW@...&gt;\t&lt;4CDA9212.9080207@...&gt;\t&lt;AANLkTi=WvPMYbZXoRVHkXiqinxqXfawkc9u7bEqHAA8W@...&gt;\t&lt;AANLkTimb0DBi4j0ZuNHsc=ATzYLb6v-4t7W7u36qAhof@...&gt; &lt;AANLkTik8wxNOW_vNT838MHnySP_SRXzsVB7+S+ivs3+S@...&gt;\r\nIn-Reply-To: &lt;AANLkTik8wxNOW_vNT838MHnySP_SRXzsVB7+S+ivs3+S@...&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nFrom: Marc Portier &lt;mpo@...&gt;\r\nSubject: Re: [rest-discuss] Re: Partial PUT debate\r\nX-Yahoo-Group-Post: member; u=87126421; y=CSwQvzdIaSFSpuSXUonCi3nCp7tVLI565if06GVZmDZZ8qRxU-s\r\nX-Yahoo-Profile: portiermarc\r\nX-Yahoo-Newman-Property: groups-system\r\nX-eGroups-Approved-By: gonga_thrash &lt;distobj@...&gt; via web; 11 Nov 2010 12:33:29 -0000\r\n\r\n\n\nOn 11/10/2010 07:34 PM, Andrew Wahbe wrote:\n&gt;\n&gt;\n&gt;\n&gt;\n&gt; On Wed, Nov 10, 2010 at 11:35 AM, Mike Kelly &lt;mike@...\n&gt; &lt;mailto:mike@...&gt;&gt; wrote:\n&gt;\n&gt;     On Wed, Nov 10, 2010 at 3:08 PM, Andrew Wahbe\n&gt;     &lt;andrew.wahbe@... &lt;mailto:andrew.wahbe@...&gt;&gt; wrote:\n&gt;      &gt; On Wed, Nov 10, 2010 at 7:37 AM, Nathan &lt;nathan@...\n&gt;     &lt;mailto:nathan@...&gt;&gt; wrote:\n&gt;      &gt;&gt;\n&gt;      &gt;&gt; Mike Kelly wrote:\n&gt;      &gt;&gt;&gt;\n&gt;      &gt;&gt;&gt; On Wed, Nov 10, 2010 at 9:08 AM, Julian Reschke\n&gt;     &lt;julian.reschke@... &lt;mailto:julian.reschke@...&gt;&gt;\n&gt;      &gt;&gt;&gt; wrote:\n&gt;      &gt;&gt;&gt;&gt;\n&gt;      &gt;&gt;&gt;&gt; Right. The important part is that the state of the resource\n&gt;     after the\n&gt;      &gt;&gt;&gt;&gt; PUT does only depend on the payload, not the previous state.\n&gt;      &gt;&gt;&gt;\n&gt;      &gt;&gt;&gt; Why is that important?\n&gt;      &gt;&gt;\n&gt;      &gt;&gt; It&#39;s the difference between saying &quot;this is the state of the\n&gt;     resource&quot; and\n&gt;      &gt;&gt; &quot;apply this to the resource to create a new state&quot;..\n&gt;      &gt;&gt;\n&gt;      &gt;&gt; or, Sn=Mn (state = message) vs -&gt; given the time t, a previous\n&gt;     state Sn-1,\n&gt;      &gt;&gt; and a message Mn we process Mn,Sn-1,t with a set of Rules in\n&gt;     order to\n&gt;      &gt;&gt; conclude Sn (the state of our resource)\n&gt;      &gt;&gt;\n&gt;      &gt;&gt; So, PUT and DELETE are the first case, PATCH and POST are the\n&gt;     second.\n&gt;      &gt;&gt;\n&gt;      &gt;&gt; Perhaps more easily said, PUT replaces the previous state, with no\n&gt;      &gt;&gt; consideration for it.\n&gt;      &gt;\n&gt;      &gt; Right, or Sn could be a function of the message: Sn = f(Mn)\n&gt;      &gt; If the state is a function of the message that depends on the\n&gt;     previous\n&gt;      &gt; state, e.g. f(Mn) = Mn+Sn-1 then the operation is not idempotent as\n&gt;      &gt; this generally requires that if Mi = Mj then Si=Sj.\n&gt;      &gt; So if the state is a function of the previous state, you can&#39;t\n&gt;     repeat the\n&gt;      &gt; operation an arbitrary number of times (e.g. retries on response\n&gt;     timeout)\n&gt;      &gt; and know that each invocation leaves the resource in the same state.\n&gt;\n&gt;     A partial PUT could leave just a specific portion of the resource in\n&gt;     the same state. Yes, the resultant overall state of the resource would\n&gt;     depend on previous state but isn&#39;t the partial PUT request idempotent\n&gt;     in its intent?\n&gt;\n&gt;     I think I understand PUT as per it&#39;s specification, the question was\n&gt;     aimed to understand why it needs to be defined that way in the first\n&gt;     place.\n&gt;\n&gt;     Put another way; What sort of mechanisms rely on partial PUT being\n&gt;     prevented?\n&gt;\n&gt;     Cheers,\n&gt;     Mike\n&gt;\n&gt;\n&gt; Ok, I understand your question a bit better now.\n&gt; To me a key issue is that you seem to be addressing a specific\n&gt; sub-resource (the part of the resource updated by the PUT) but this\n&gt; addressing is not done in the URI. I&#39;d have to assume you are using a\n&gt; portion of the body (implicitly or explicitly) to address the piece of\n&gt; the resource that gets updated.\n\nI would think not a portion of the body but the entire body: the \ncontract that this server takes in supporting partial update is that it \noffers the client the opportunity to only transfer that portion of the \nresource-state it wants to change (or very pragmatically only the \nportion it cares about)\n\n- or even &quot;knows&quot; about in case of security filtering\n\n- or is &#39;capable&#39; of updating in case it choose to use some \nformat/media-type that is not capable to transfer all subtleties of the \nresource&#39;s members\n\nSo really: I don&#39;t see a hidden &#39;address&#39;, only the agreement that the \nrepresentation in the body can be &#39;sparse&#39;  (after all: the message-body \nfor any method just holds a representation, never the resource itself :) )\n\n&gt; If you take the example to its extreme you could just execute all PUT\n&gt; operations on the &quot;/&quot; resource and identify the sub-path in the body.\n&gt;\n\nvery extreme, and nobody is suggesting that, right?\n\n&gt; I see a few negatives (in addition to Jan&#39;s points):\n&gt; - you are hurting visibility by moving addressing out of the URI\n\ndon&#39;t agree: there is no sub-resource IMHO, just a sparse representation \nof the resource state\n\n&gt; - you can&#39;t use etags and conditional requests to control updates these\n&gt; specific portions you are updating, just to the &quot;parent&quot; resource\n\non the contrary: in cases where this is important, the usage of etags \nand conditionals would allow to guarantee that the partial PUT is only \napplied if the resource wasn&#39;t changed yet.\n\nso in fact the conditional part in this case completes the sparse-ness \nof the passed sparse-representation\n\n&gt; - while things seem fine from the perspective of repeating a single\n&gt; operation multiple times, you don&#39;t have the same properties for\n&gt; non-conditional interleaved PUTs from multiple writers. Here, the state\n\nas mentioned above: etags and conditionals can make it do what you want \nhere I think, in the end you get some semantics about the parts not in \nthe put-representation saying: &quot;IF you&#39;re still in the same state I just \nGOT, then I&#39;m sure that changing only the fields I&#39;m passing you will \nbring the resource in the expected state&quot;\n\nand for apps that don&#39;t need these checks the parts not mentioned in the \nput-body can be considered as &quot;don&#39;t care&quot;\n\n(update-counters, update-timestamps would be typical examples here, but \non the correct level of abstraction system-data, meta-data all just is \ndata, no?)\n\nAll in all: the server still has the right to interpret, partially \nignore, additionally decorate whatever you&#39;ve PUT to update the \n&#39;resource state&#39; (it might even have an effect on resources not \naddressed in this put)\n\n&gt; of the resource is not the state specified by the last successful PUT\n&gt; (as is usually the case). That is quite a significant difference in some\n&gt; apps I would think.\n&gt;\n\nI agree. However you correctly mention apps, not user-agents (or \nintermediaries): those should not make any assumptions on the result of \nGET just because they just completed a successful PUT, right?\n\nLooking at it from that angle I don&#39;t think the partial put violates the \nHTTP contracts, and also keeps playing nice with the REST principles.\n\n\nStill, the length of this debate surely shows there is a fair amount of \n&#39;uncommon&#39; about this and we might argue that we&#39;re violating some \n&quot;principle of least surprise&quot;.  Reversing the argument it would only \nshow we&#39;re maybe getting into some habits that are just not generic \nenough to cover all subtleties of all needs of all apps out there. Time \nto widen our horizon?\n\nBeing uncommon every app encountering and solving this need for partial \nupdates should well-document contracts and behaviour and taken approach.\n\nAppart from that advice, I would be so liberal as to leave it up to the \nspecific app designers to decide what is the &#39;least surprise&#39; among the \nvarious solutions one can take. Some considerations along that path.\n\nOh, I&#39;m not aiming to be complete or unbiased ;)\n\n\n1/ PATCH\n   + separate semantics and clear indication of partial update behaviour\n   - method itself is a surprise (not in the standard set of methods)\n   - dev-tool-pragmatics: also harder for finding test and framework \ngoodies to help you with it\n   - you might argue that there are enough other solutions not to resort \nto these exotics (or be backed by mighty Google in doing it still)\n\n\n2/ PUT\n   + obviously communicates the idempotent properties and the fact that \nyou are updating\n   + clear resource addressing (assuming we agree there are no subresources)\n   + optionally reuse conditionals\n   + obvious reuse of what is common for clients that (for whatever \nreason) only GET partial representations in the first place\n   - requires some representation description\n     * explaining the sparseness usage\n     * providing some mechanism to actively delete properties/members\n   +/- might push your users into learning about etag/conditionals\n   - gets you into long winding debates like this one\n\n\n3/ POST\n   + clear warning that you are in &#39;make no assumptions zone&#39;: read the \ndocs carefully\n   - not clear from a mile that it really is about a simple idempotent \nPUT though\n   - suprise for clients that don&#39;t know about &#39;other resource \nproperties then the ones they received&#39;: why no PUT in this case\n   +/- safe bet, avoids the debate\n   - survive the mock of the REST-zealots for not supporting PUT :)\n\n\njust my 2c,\n-marc=\n\n"}}
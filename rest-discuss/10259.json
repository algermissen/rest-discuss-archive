{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":319607554,"authorName":"Assaf Arkin","from":"&quot;Assaf Arkin&quot; &lt;assaf@...&gt;","profile":"assafarkin","replyTo":"SENDER","senderId":"_z2vijSdGmkYPcClIWPrkG1jXMlIRn9kqeBWYn1KJzRLTfNcC38ODsSBnXw5_pXNrXmW7x1SPDh_8vgNP1IYkz846rtCbhQ7Kg","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] bootstrapping","postDate":"1200649478","msgId":10259,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDUwMzdiNmU0MDgwMTE4MDE0NGoyMGVkMGYzZmliZjZmZTIwNWI1OTFkMmNiQG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PDEyNTEwMWM4NTlhNiQ0MGFhODdhMCQwNzAyYThjMEBHdWlkZXMubG9jYWw+","referencesHeader":"PGZta3M3OCtrMTVrQGVHcm91cHMuY29tPgkgPDUwMzdiNmU0MDgwMTE2MTA0OHE0MGViYWQ4NGkzOGY3YzhhMmQ5MmU3MDA1QG1haWwuZ21haWwuY29tPgkgPDBmM2UwMWM4NTg3ZiQ5ZDhhY2Y3MCQwNzAyYThjMEBHdWlkZXMubG9jYWw+CSA8NTAzN2I2ZTQwODAxMTYyMjM5Zzc3N2I0NjdkcTY0YjEzNzMzMDAwOTg4YWNAbWFpbC5nbWFpbC5jb20+CSA8MTA1NDAxYzg1OGU3JDQ4ZmNiNWYwJDA3MDJhOGMwQEd1aWRlcy5sb2NhbD4JIDw1MDM3YjZlNDA4MDExNzE5MTdoMmQzNmU0ODBuNzYwMzc2NTk4NWQwYzc1NkBtYWlsLmdtYWlsLmNvbT4JIDwxMjUxMDFjODU5YTYkNDBhYTg3YTAkMDcwMmE4YzBAR3VpZGVzLmxvY2FsPg=="},"prevInTopic":10258,"nextInTopic":10260,"prevInTime":10258,"nextInTime":10260,"topicId":10201,"numMessagesInTopic":65,"msgSnippet":"... I m only differentiate people based on skills.  I bet you ll find as many non-programmer teens pulling and tweaking JavaScript code for use in their online","rawEmail":"Return-Path: &lt;assaf@...&gt;\r\nX-Sender: assaf@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 62541 invoked from network); 18 Jan 2008 09:44:40 -0000\r\nX-Received: from unknown (66.218.67.94)\n  by m54.grp.scd.yahoo.com with QMQP; 18 Jan 2008 09:44:40 -0000\r\nX-Received: from unknown (HELO fg-out-1718.google.com) (72.14.220.155)\n  by mta15.grp.scd.yahoo.com with SMTP; 18 Jan 2008 09:44:39 -0000\r\nX-Received: by fg-out-1718.google.com with SMTP id 22so1540150fge.19\n        for &lt;rest-discuss@yahoogroups.com&gt;; Fri, 18 Jan 2008 01:44:38 -0800 (PST)\r\nX-Received: by 10.86.77.5 with SMTP id z5mr2873301fga.77.1200649478667;\n        Fri, 18 Jan 2008 01:44:38 -0800 (PST)\r\nX-Received: by 10.86.71.6 with HTTP; Fri, 18 Jan 2008 01:44:38 -0800 (PST)\r\nMessage-ID: &lt;5037b6e40801180144j20ed0f3fibf6fe205b591d2cb@...&gt;\r\nDate: Fri, 18 Jan 2008 01:44:38 -0800\r\nTo: &quot;Mike Schinkel&quot; &lt;mikeschinkel@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nIn-Reply-To: &lt;125101c859a6$40aa87a0$0702a8c0@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: 7bit\r\nContent-Disposition: inline\r\nReferences: &lt;fmks78+k15k@...&gt;\n\t &lt;5037b6e40801161048q40ebad84i38f7c8a2d92e7005@...&gt;\n\t &lt;0f3e01c8587f$9d8acf70$0702a8c0@...&gt;\n\t &lt;5037b6e40801162239g777b467dq64b13733000988ac@...&gt;\n\t &lt;105401c858e7$48fcb5f0$0702a8c0@...&gt;\n\t &lt;5037b6e40801171917h2d36e480n7603765985d0c756@...&gt;\n\t &lt;125101c859a6$40aa87a0$0702a8c0@...&gt;\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Assaf Arkin&quot; &lt;assaf@...&gt;\r\nSubject: Re: [rest-discuss] bootstrapping\r\nX-Yahoo-Group-Post: member; u=319607554; y=YZnkrYuZmlYPB3-v7Cg13V6OTwx-ZA9TM-BHrFVTQ5Gk0HZ3eg\r\nX-Yahoo-Profile: assafarkin\r\n\r\nOn Jan 17, 2008 11:46 PM, Mike Schinkel &lt;mikeschinkel@...&gt; wrote:\n&gt; You are very much making my point. Those people you refer to are still\n&gt; professional developers, even those working on order fulfillment or\n&gt; inventory management; they are *not* the people to whom I was referring to.\n&gt; The people I was referring to have titles like &quot;marketing manager&quot;,\n&gt; &quot;warehouse supervisor&quot;, &quot;creative director&quot;, &quot;executive assistant&quot;, and so\n&gt; on.  They are business people who only program because they discover that\n&gt; they can.  But they only discover that which it is (almost accidentally)\n&gt; discoverable.\n\nI&#39;m only differentiate people based on skills.  I bet you&#39;ll find as\nmany non-programmer teens pulling and tweaking JavaScript code for use\nin their online profiles, as 9-5 programmers that are scared of\ntouching JavaScript.  I do, however, would like to keep the required\nskills to the minimum, that way more people can get the job done.\n\nTo remove doubt, I am looking for solutions that require the least\ncognitive load, but I&#39;m not measuring it by initial approach only, but\nover the lifetime.\n\n&gt; Occupational Programmers don&#39;t need a spec, they don&#39;t even think in those\n&gt; terms.  They instead need to be slapped in the face with the fact that\n&gt; something is possible before they even consider it because they otherwise\n&gt; assume it is not.\n\nWhich is exactly what a spec does.  A spec tells you what&#39;s available\nand how to use it.  Don&#39;t confuse that with the cryptic, over-generic,\nformal style we employ in various working groups, that&#39;s particularly\nappealing to a small set of people.  Specs can take many forms,\nideally one that&#39;s readable to a lot of people.\n\n&gt; &gt; The problem with WSDL, and from what I&#39;ve seen also WADL, is\n&gt; &gt; that neither one provides a map.\n&gt;\n&gt; WSDL and WADL are two orders of magnitude more complexity than any\n&gt; occupational programmer will ever attempt.\n\nThe WS-* people will beg to differ, a lot of companies are pursing\nexactly that market with visual tools that alleviate the cognitive\nworkload and designed to appeal to people who can&#39;t program their way\nout of a for loop.\n\nWe can argue whether or not they&#39;re doing a good job, or have they\ngone too far to keep it usable, but a lot of energy was spent exactly\nto create tools for that target audience.\n\n\n&gt; Just to clarify, are you saying that you think everything that a web service\n&gt; might provide can be converted into a pre-known finite list?\n\nIf that wasn&#39;t possible, I wouldn&#39;t be able to implement it using a\nturing-complete language.\n\n&gt; &gt; The inbetween case is putting something up with intent that\n&gt; &gt; it be a sign, but possibility to be used as a map.  If it&#39;s\n&gt; &gt; possible it will happen, much more than developers reading\n&gt; &gt; the manual.  So rather than hoping things will happen in a\n&gt; &gt; particular way, I say commit to them. Make something a\n&gt; &gt; map or a sign, and only available in one form.\n&gt;\n&gt; That&#39;s a very idealistic approach that unfortunately doesn&#39;t work in many\n&gt; real-world scenarios.  An example of an accidental programmer is a blogger\n&gt; who has no clue how to write a program, would never in a million years\n&gt; describe themselves as a programmer, but who wants to include a chart in\n&gt; their blog post. Using Google&#39;s Chart API anyone that has the skill to blog\n&gt; can learn how to include a Google Chart in their post.  Using your\n&gt; &quot;commitment&quot; approach, they never will.\n\nIn my analogy, a map would be exactly what Google is doing with their Chart API.\n\nTo backtrack for a second, the three options listed for this discussion were:\n1.  Give developers a URL template they can write their client against.\n2.  Have the service return a URL template from a known URL (maybe in\nresponse to OPTIONS).\n3.  Have a resource that can resolve a name to a URL.\n\n#1 and #2 are maps in the analogy, #1 in the form of a spec, #2 served\ndynamically.  #3 are posts.  What I&#39;m saying is, commit to #1 and/or\n#3, ignore #2.\n\nGoogle Chart API made its decision and went with #1.  If you look at\nother widgets on the Web, you&#39;ll notice a lot of do #1 and/or #3,\ntelling you how to construct a URL to get the desired results, or\ngiving you a way to resolve to a URL.  What I&#39;ve yet to see them do\nsuccessfully is offer a resource that serves meta-data from which a\nclient can decide how to construct a URL (although some do it\ninternally).\n\n&gt; Techniques used to deal with small scale can and are often the wrong ones to\n&gt; use when dealing with large scale, and vice-versa.  Services published\n&gt; internally need to be more agile because requirements are always changing\n&gt; and more complex because internal business requirements demand complexity.\n\nI disagree on two points.  One, that requirements on the Web are\nstatic, it&#39;s a cut-throat landscape and service are always competing\nto retain and acquire users.  Ever considered switching from GMail\nback to HotMail?\n\nTwo, that the best way to write internal services is to assume an\naudience of one.  It&#39;s true that often the audience is exactly one,\nbut that&#39;s also true on the Web.  But if you have to pick one\nmethodology, start with N, that will help you develop services that\ncan be reused, and just like the Web, some would be more popular than\nothers and you don&#39;t always know in advance.\n\nMy experience in the corporate world is that it&#39;s a crap shoot, just\nlike the Web, and any attempt to plan for audience size gets foiled by\nreality.\n\n-- Assaf\nhttp://labnotes.org\n\n\n&gt; Externally published services need to be must more well-considered because\n&gt; the biggest cost is in the marketing that gets others to initially write\n&gt; programs to interface with it. Thus externally published services demand a\n&gt; higher level of maturity from the start, the quantity of such interfaces by\n&gt; nature is much smaller than the number of internally published interfaces,\n&gt; and minimizing cost of each adoptee is important.  So the rules that should\n&gt; apply are very, very different.\n&gt;\n&gt; For internal use I would absolutely recommend full HATEOAS with one\n&gt; entry-point URL and accept the added programming overhead required to\n&gt; support that.  For the externally published interface, I personally think\n&gt; that it is better to put great effort into a good design and then both\n&gt; publish the direct URL interface and commit to supporting that URL interface\n&gt; long term, at least for simple single GET operations because it costs much\n&gt; less to get someone to adoption a direct URL interface.  I know my\n&gt; preference violates REST&#39;s HATEOAS but that&#39;s my opinion based on what I\n&gt; view to be the most pragmatic and realistic approach.\n&gt;\n&gt; The irony is that if I followed your approach of &quot;implementing internal\n&gt; services as if it would be published on the open web&quot;, I&#39;d forego HATEOAS\n&gt; for internal use, hardcode URL interfaces in clients, and put a lot more\n&gt; time and energy into defining and publishing those internal interfaces which\n&gt; would result in taking too long and causing my project to either be late or\n&gt; over budget. The irony is to follow your approach I wouldn&#39;t use the\n&gt; techniques you advocate!\n&gt;\n&gt; --\n&gt;\n&gt; -Mike Schinkel\n&gt; http://www.mikeschinkel.com/blogs/\n&gt; http://www.welldesignedurls.org\n&gt; http://atlanta-web.org\n&gt;\n&gt;\n\n"}}
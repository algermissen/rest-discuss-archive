{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":414716752,"authorName":"Kristian Nordal","from":"Kristian Nordal &lt;kristian.nordal@...&gt;","profile":"kristian.nordal","replyTo":"SENDER","senderId":"Jq4FaDu6YnJTiRoCnqcY9tzj5rZYL4VNlojeG6lDe6tzHj7AG8rVU2a32Nie0lVaJGoWcpkxAOFFUXCUobuLOVAsturqCvNEyQmY6S7uGmzTHA","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Re: Application state","postDate":"1254684731","msgId":13672,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDUxMTU4QzRCLUU3RDktNDYzMC1CMTZGLTQyMDlDQUMwRTA3QUBnbWFpbC5jb20+","inReplyToHeader":"PGhhN3RkOCszMW1qQGVHcm91cHMuY29tPg==","referencesHeader":"PGhhN3RkOCszMW1qQGVHcm91cHMuY29tPg=="},"prevInTopic":13671,"nextInTopic":13675,"prevInTime":13671,"nextInTime":13673,"topicId":13627,"numMessagesInTopic":37,"msgSnippet":"Hi Ian, Thanks for this great description, it helped a lot. -- Thanks, Kristian","rawEmail":"Return-Path: &lt;kristian.nordal@...&gt;\r\nX-Sender: kristian.nordal@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 93377 invoked from network); 4 Oct 2009 19:32:19 -0000\r\nX-Received: from unknown (98.137.34.44)\n  by m5.grp.sp2.yahoo.com with QMQP; 4 Oct 2009 19:32:19 -0000\r\nX-Received: from unknown (HELO mail-ew0-f216.google.com) (209.85.219.216)\n  by mta1.grp.sp2.yahoo.com with SMTP; 4 Oct 2009 19:32:19 -0000\r\nX-Received: by ewy12 with SMTP id 12so2290288ewy.24\n        for &lt;rest-discuss@yahoogroups.com&gt;; Sun, 04 Oct 2009 12:32:15 -0700 (PDT)\r\nX-Received: by 10.210.7.24 with SMTP id 24mr6065785ebg.48.1254684734741;\n        Sun, 04 Oct 2009 12:32:14 -0700 (PDT)\r\nReturn-Path: &lt;kristian.nordal@...&gt;\r\nX-Received: from ?10.0.1.2? (cm-84.208.102.253.getinternet.no [84.208.102.253])\n        by mx.google.com with ESMTPS id 5sm281100eyh.8.2009.10.04.12.32.12\n        (version=TLSv1/SSLv3 cipher=RC4-MD5);\n        Sun, 04 Oct 2009 12:32:13 -0700 (PDT)\r\nCc: rest-discuss@yahoogroups.com\r\nMessage-Id: &lt;51158C4B-E7D9-4630-B16F-4209CAC0E07A@...&gt;\r\nTo: &quot;Ian&quot; &lt;iansrobinson@...&gt;\r\nIn-Reply-To: &lt;ha7td8+31mj@...&gt;\r\nContent-Type: text/plain; charset=US-ASCII; format=flowed; delsp=yes\r\nContent-Transfer-Encoding: 7bit\r\nMime-Version: 1.0 (Apple Message framework v936)\r\nDate: Sun, 4 Oct 2009 21:32:11 +0200\r\nReferences: &lt;ha7td8+31mj@...&gt;\r\nX-Mailer: Apple Mail (2.936)\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Kristian Nordal &lt;kristian.nordal@...&gt;\r\nSubject: Re: [rest-discuss] Re: Application state\r\nX-Yahoo-Group-Post: member; u=414716752; y=gHs_96mNvJOsBxC2WXwueA9aLhQYwFruj1SoByW40XCHkwgsfmsljpU_\r\nX-Yahoo-Profile: kristian.nordal\r\n\r\nHi Ian,\n\nThanks for this great description, it helped a lot.\n\n--\nThanks,\nKristian\n\n\nOn Oct 3, 2009, at 6:16 PM, Ian wrote:\n\n&gt; Hi Christian\n&gt;\n&gt; The state of an order - whether it has zero line items, or five, is  \n&gt; resource state, not application state. The state of the order as  \n&gt; held in the http session in your example is resource state, not  \n&gt; application state.\n&gt;\n&gt; A simple - perhaps overly simple - ordering protocol might be  \n&gt; something like: new order created -&gt; adding line items -&gt; order  \n&gt; completed -&gt; payment received -&gt; order dispatched.\n&gt;\n&gt; In the observable interactions between client and server, this  \n&gt; protocol is never visible &quot;as such&quot;: it can only be viewed through  \n&gt; the lens of resource state.\n&gt;\n&gt; Over the course of a series of interactions, the &quot;application&quot; (the  \n&gt; game being played out between the client and the server) will be in  \n&gt; one or other of these states - as viewed from a &quot;God&#39;s eye&quot; point of  \n&gt; view. Once the application state has progressed to &quot;order  \n&gt; completed&quot;, for example, it&#39;s no longer possible to add manipulate  \n&gt; resources so as to add new line items; it is, however, possible to  \n&gt; manipulate resources such that the application state transitions to  \n&gt; &quot;payment received&quot; (the client would do this by submitting a  \n&gt; representation of a payment, perhaps).\n&gt;\n&gt; The client and the server cooperate to execute this protocol, but  \n&gt; they do so by transferring representations of resource state, not  \n&gt; representations of application state. Application state is never  \n&gt; represented &quot;as such&quot;; rather, it&#39;s inferred by the client based on  \n&gt; on current representations of resource state. If the application is  \n&gt; in the &quot;order completed&quot; state, the representation of the order  \n&gt; received by the client may very well include a link that has been  \n&gt; annotated with the link relation value &quot;payment&quot;. This isn&#39;t a  \n&gt; straightforward representation of application state, however: it&#39;s  \n&gt; an &quot;invitation&quot; to the client to transfer a representation of a  \n&gt; payment to this linked resource. As a side-effect of transferring  \n&gt; this representation, the &quot;application&quot; may transition to &quot;payment  \n&gt; received&quot;.\n&gt;\n&gt; What&#39;s important here is that the server is really only interested  \n&gt; in maintaining resource state, which includes maintaining the  \n&gt; integrity of the lifecycles of the resources under its control, and  \n&gt; the invariants that hold between resources (if any). The server  \n&gt; can&#39;t be sure the client will ever take that step of submitting a  \n&gt; payment, so why bother holding onto application state? Application  \n&gt; state is something that can be reconstructed &quot;after the fact&quot;, by a  \n&gt; client, or omniscient observer, based on the disposition of the  \n&gt; current set of resource representations.\n&gt;\n&gt; So the order representation is always a representation of resource  \n&gt; state. Application state, that &quot;snapshot of the instance of  \n&gt; execution of a protocol&quot;, can only be inferred or reconstructed from  \n&gt; resource state.\n&gt;\n&gt; Hope this is of some help. Apologies if I&#39;ve confused more than  \n&gt; clarified; double apologies if I&#39;m just talking plain nonsense.\n&gt;\n&gt; ian\n&gt;\n&gt; --- In rest-discuss@yahoogroups.com, Kristian Nordal  \n&gt; &lt;kristian.nordal@...&gt; wrote:\n&gt;&gt;\n&gt;&gt;\n&gt;&gt; On Oct 2, 2009, at 10:55 PM, Ian wrote:\n&gt;&gt;\n&gt;&gt;&gt;\n&gt;&gt;&gt;\n&gt;&gt;&gt; --- In rest-discuss@yahoogroups.com, Mark Baker &lt;distobj@&gt; wrote:\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; On Fri, Oct 2, 2009 at 4:56 AM, Kristian Nordal\n&gt;&gt;&gt;&gt; &lt;kristian.nordal@&gt; wrote:\n&gt;&gt;&gt;&gt;&gt; I&#39;m also struggling with the difference between application state\n&gt;&gt;&gt;&gt;&gt; and\n&gt;&gt;&gt;&gt;&gt; server state (which I assume is the same as &quot;resource state&quot;). Can\n&gt;&gt;&gt;&gt;&gt; someone point me to a good definition of &quot;application state&quot;?\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; It&#39;s literally the *state* of the *application*.  If you&#39;re looking\n&gt;&gt;&gt;&gt; at\n&gt;&gt;&gt;&gt; your bank balance, that&#39;s a different state than if you were\n&gt;&gt;&gt;&gt; preparing\n&gt;&gt;&gt;&gt; to submit a bill payment, and once you&#39;ve submitted the payment,\n&gt;&gt;&gt;&gt; you&#39;re in yet another state in the application state machine.\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; Mark.\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;\n&gt;&gt;&gt; Just to add to Mark&#39;s definition, and put it in the context of\n&gt;&gt;&gt; &quot;application&quot; and &quot;application protocol&quot;: if we think of an\n&gt;&gt;&gt; application as being computer behavior that achieves a particular\n&gt;&gt;&gt; goal, we can describe an application protocol as the specification\n&gt;&gt;&gt; of the legitimate interactions necessary to realize that behavior,\n&gt;&gt;&gt; and application state as a snapshot of the instance of execution of\n&gt;&gt;&gt; an application protocol.\n&gt;&gt;\n&gt;&gt; Thanks for the definitions. I&#39;m still a bit confused though, so I&#39;m\n&gt;&gt; going to try to use an example:\n&gt;&gt;\n&gt;&gt; Let&#39;s say we have an client/ua that is filling out an order (order +\n&gt;&gt; line items). In a traditional web application, the order would be in\n&gt;&gt; the http session, and we would add/remove line items to that order,\n&gt;&gt; and finally place the order. In that case I clearly see that we are\n&gt;&gt; talking about application state that is placed on the server. The\n&gt;&gt; server keeps track of it, and it&#39;s literally the state of the client/\n&gt;&gt; application.\n&gt;&gt;\n&gt;&gt; But if we were to store and address the order like any other  \n&gt;&gt; resource,\n&gt;&gt; would that change the nature of the state? It would simply be another\n&gt;&gt; way of storing the same state, but nevertheless it would be\n&gt;&gt; &quot;resources&quot; with the same properties induced by the stateless\n&gt;&gt; constraint (visibility, reliability, and salability) - given that  \n&gt;&gt; they\n&gt;&gt; were stored in the a way that make that possible. To me, this looks\n&gt;&gt; like exactly the same kind of state (application state), simply  \n&gt;&gt; stored/\n&gt;&gt; modeled differently. But in that case I don&#39;t see how or if it\n&gt;&gt; violates the stateless constraint.\n&gt;&gt;\n&gt;&gt; Would you say that the order in this example is always a &quot;snapshot of\n&gt;&gt; the instance execution of an application protocol&quot;, and that it will\n&gt;&gt; always be application state - no matter how it&#39;s modeled? And by\n&gt;&gt; placing it on the server it would be in violation of the REST\n&gt;&gt; principles, even though the stateless constraint is dealt with?\n&gt;&gt;\n&gt;&gt; --\n&gt;&gt; Thanks,\n&gt;&gt; Kristian\n&gt;&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt; ------------------------------------\n&gt;\n&gt; Yahoo! Groups Links\n&gt;\n&gt;\n&gt;\n\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":341233558,"authorName":"Tim Williams","from":"Tim Williams &lt;williamstw@...&gt;","profile":"quwiltw","replyTo":"SENDER","senderId":"5lym3kkVVOudF5a6px_hZOHHLO_qQMSfcYli6iTJrikktcLsBgUH24kGeb9OU6zGS2kAF0mlACAUOmNaZrxPASzTfyrP60Y70Dc","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] REST isn&#39;t hard to learn, it&#39;s just taught wrong.","postDate":"1261405475","msgId":14294,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQ5OTg4ODQ0MDkxMjIxMDYyNGczNTIzMGQ1ZGplODMzNjhjMzRhYzNmMWY4QG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PDIwMDkxMjIwMjEyNjMzLjcxNWNhOTQyLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","referencesHeader":"PDIwMDkxMjIwMjEyNjMzLjcxNWNhOTQyLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4="},"prevInTopic":14263,"nextInTopic":14300,"prevInTime":14293,"nextInTime":14295,"topicId":14255,"numMessagesInTopic":44,"msgSnippet":"... I think the struggle in communicating REST has been that people jump to chapter 5.  Or, people teaching it, start with chapter 5.   Chapter 5 reasonably","rawEmail":"Return-Path: &lt;williamstw@...&gt;\r\nX-Sender: williamstw@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 73488 invoked from network); 21 Dec 2009 14:24:37 -0000\r\nX-Received: from unknown (98.137.34.45)\n  by m2.grp.sp2.yahoo.com with QMQP; 21 Dec 2009 14:24:36 -0000\r\nX-Received: from unknown (HELO mail-yx0-f174.google.com) (209.85.210.174)\n  by mta2.grp.sp2.yahoo.com with SMTP; 21 Dec 2009 14:24:36 -0000\r\nX-Received: by mail-yx0-f174.google.com with SMTP id 4so4593136yxe.32\n        for &lt;rest-discuss@yahoogroups.com&gt;; Mon, 21 Dec 2009 06:24:36 -0800 (PST)\r\nMIME-Version: 1.0\r\nX-Received: by 10.150.174.10 with SMTP id w10mr11169941ybe.259.1261405475290; \n\tMon, 21 Dec 2009 06:24:35 -0800 (PST)\r\nIn-Reply-To: &lt;20091220212633.715ca942.eric@...&gt;\r\nReferences: &lt;20091220212633.715ca942.eric@...&gt;\r\nDate: Mon, 21 Dec 2009 09:24:35 -0500\r\nMessage-ID: &lt;499888440912210624g35230d5dje83368c34ac3f1f8@...&gt;\r\nTo: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Tim Williams &lt;williamstw@...&gt;\r\nSubject: Re: [rest-discuss] REST isn&#39;t hard to learn, it&#39;s just taught wrong.\r\nX-Yahoo-Group-Post: member; u=341233558; y=DIYdgee7qztxTK37wMX-TKB-Nq-XvExUBA98g-kJT_8tzQ\r\nX-Yahoo-Profile: quwiltw\r\n\r\nOn Sun, Dec 20, 2009 at 11:26 PM, Eric J. Bowman &lt;eric@...&gt; wr=\r\note:\n&gt; The problem that&#39;s been preoccupying my thoughts during the time I\n&gt;=\r\n spend experimenting with REST, is how to teach it. =A0I don&#39;t think\n&gt; anyo=\r\nne disputes the fact that REST is hard to learn. =A0But why is that?\n&gt; I&#39;ve=\r\n convinced myself it&#39;s not because the students are morons, but\n&gt; that we, =\r\ncollectively as a community, have failed to teach it\n&gt; properly. =A0The bes=\r\nt evidence of that, is the recent thread asking for\n&gt; examples of good REST=\r\n systems: It&#39;s infinitely easier to find REST\n&gt; implementations that aren&#39;t=\r\n, than it is to find good examples (I&#39;ve\n&gt; seen REST implemented effectivel=\r\ny on Intranets where the client is a\n&gt; known quantity) that we can point to=\r\n.\n&gt;\n&gt; We don&#39;t teach it properly, because we didn&#39;t learn it properly\n&gt; our=\r\nselves. =A0Besides Roy, who here at any level of REST ability has a\n&gt; backg=\r\nround in software architecture? =A0Personally, I think it took me so\n&gt; many=\r\n years to become comfortable with REST because it was my first\n&gt; experience=\r\n with software development guided by a defined architectural\n&gt; style. =A0I =\r\nbasically had to teach myself software architecture, but not\n&gt; until well a=\r\nfter I started fancying myself a REST developer.\n&gt;\n&gt; What I&#39;m saying, is th=\r\nat REST must be taught in terms of applied\n&gt; architecture, instead of by ex=\r\nample, before there will ever be enough\n&gt; good examples to point to. =A0You=\r\n can&#39;t learn XSLT by reading O&#39;Reilly&#39;s\n&gt; &quot;XSLT Cookbook&quot; of examples, yet =\r\nwe try teaching REST by hauling out\n&gt; the good ol&#39; shopping cart every time=\r\n. =A0This has obviously failed.\n&gt;\n&gt; I don&#39;t think it&#39;s necessary for a REST=\r\n student to understand anything\n&gt; about software architecture (except maybe=\r\n a few terms), only to follow\n&gt; an approach grounded in software architectu=\r\nre. =A0The wonderful new\n&gt; textbook, &quot;Software Architecture: =A0Foundations=\r\n, Theory, and Practice&quot; is\n&gt; something that should be read by the community=\r\n, but not for the purpose\n&gt; of using that textbook to teach REST. =A0The te=\r\nxtbook uses REST to\n&gt; illustrate the principles of software architecture, i=\r\nt doesn&#39;t teach\n&gt; REST. =A0But it can be used to inform us on how to better=\r\n teach REST.\n&gt;\n&gt; The textbook has chapters on Modeling, Visualization, Anal=\r\nysis,\n&gt; Implementation, and Deployment and Mobility. =A0This is the discipl=\r\nined\n&gt; approach that I keep harping on about, of late.\n&gt;\n&gt; The Modeling cha=\r\npter discusses modeling both architectures and\n&gt; architectural styles. =A0I=\r\nt says nothing about modeling specific to\n&gt; REST. =A0Roy&#39;s thesis uses mode=\r\nling to illustrate the REST architectural\n&gt; style. =A0So the first challeng=\r\ne in teaching REST is to teach how to\n&gt; model the components, connectors, r=\r\nesources and interfaces for a\n&gt; proposed system. =A0REST constrains the int=\r\neraction between connectors,\n&gt; and these constraints must be part of the mo=\r\ndel.\n&gt;\n&gt; The Visualization chapter explains the separation of modeling and\n=\r\n&gt; visualization, but says nothing about visualization within the context\n&gt; =\r\nof REST. =A0The second challenge in teaching REST using a software-\n&gt; archi=\r\ntecture-centric approach, is to use the model as a basis for\n&gt; visualizing =\r\na proposed system in terms of the Process, Connector and\n&gt; Data views for R=\r\nEST as described in Roy&#39;s thesis.\n&gt;\n&gt; The Analysis chapter also has nothing=\r\n REST-specific. =A0It&#39;s fairly self-\n&gt; explanatory, though. =A0Modeling, Vi=\r\nsualization and Analysis are not a\n&gt; serial approach, but an iterative proc=\r\ness. =A0This is the stage where, if\n&gt; the Model calls for the Atom media ty=\r\npe, despite the lack of URIs at\n&gt; this point, the documents may be written =\r\nand validated to flesh out the\n&gt; data model for analysis. =A0How many hardw=\r\nare resources does the model\n&gt; require? =A0Does the model need to be adjust=\r\ned up/down? =A0The third\n&gt; challenge in teaching REST is, does the model fi=\r\nt the system&#39;s goals?\n&gt;\n&gt; Finally, we get to Implementation, another chapte=\r\nr with nary a peep\n&gt; about REST. =A0(I say finally, because the Deployment =\r\nchapter covers\n&gt; topics that, frankly, anyone pursuing REST probably has ha=\r\nnds-on\n&gt; experience with, so I don&#39;t see it as a teaching challenge.) =A0Ye=\r\ns, this\n&gt; is where a URI allocation scheme is finally devised for the model=\r\ned,\n&gt; visualized and analyzed resources, and methods implemented so we can\n=\r\n&gt; pass data over the wire. =A0It is iterative with the previous methods --\n=\r\n&gt; selecting off-the-shelf parts may require architectural adjustment due\n&gt; =\r\nto different design assumptions being made in a standard library.\n&gt;\n&gt; The t=\r\nextbook defines Implementation as the problem of maintaining a\n&gt; mapping be=\r\ntween the developed system and its architectural model, and\n&gt; focuses on fr=\r\nameworks as the solution. =A0It also says, &quot;To imbue\n&gt; [desired properties]=\r\n in the target system, the implementation _must_ be\n&gt; derived from its arch=\r\nitecture.&quot; =A0This is the fourth, and most important,\n&gt; challenge in teachi=\r\nng REST. =A0Is the reason so many systems claim to be\n&gt; RESTful, but aren&#39;t=\r\n, because 99% of developers simply don&#39;t *know* how\n&gt; to derive an implemen=\r\ntation from an architectural style, because they&#39;ve\n&gt; never been taught? =\r\n=A0I don&#39;t think they need to be taught, only given the\n&gt; tools to understa=\r\nnd how a RESTful implementation is derived -- that\n&gt; these tools are derive=\r\nd from the tenets of software architecture may\n&gt; remain hidden behind a gen=\r\neric interface (so to speak).\n&gt;\n&gt; My suggestion is to dredge up and dust of=\r\nf ye olde shopping-cart\n&gt; example. =A0Why do we insist on presenting it by =\r\ndefining it as what\n&gt; methods to apply to what resources of interest to obt=\r\nain what response\n&gt; code and data, beginning by defining a URI allocation s=\r\ncheme, when we\n&gt; know that URI allocation schemes have (almost) nothing to =\r\ndo with REST,\n&gt; and Roy has told us that we should be discussing our resour=\r\nces in terms\n&gt; of media types and link relations instead? =A0At some point,=\r\n it should be\n&gt; presented in terms of Modeling, Visualizing, Analyzing, and=\r\n\n&gt; Implementing in a REST-specific fashion. =A0I think this may address som=\r\ne\n&gt; of the criticism of REST lacking some sort of formal guidelines.\n&gt;\n&gt; In=\r\n brief: =A0Define resources in terms of standard media types and link\n&gt; rel=\r\nations, saving URI allocation and method selection for the\n&gt; implementation=\r\n phase.\n\nI think the struggle in communicating REST has been that people ju=\r\nmp\nto chapter 5.  Or, people teaching it, start with chapter 5.   Chapter\n5=\r\n reasonably assumes the knowledge of the previous 4 and so jumping\nstraight=\r\n into it without appreciating its foundation will inevitably\nlead to a perv=\r\nerted understanding.   I think one way to address this\nis to start explaini=\r\nng the framework as a precursor to REST - in the\nend they must know this an=\r\nyway or else how will they know about adding\nnew constraints and such.  Of =\r\ncourse, explaining software architecture\nis hard because of preconceived no=\r\ntions and loaded vocabularies - I\nposted about this to the list(can&#39;t find =\r\nit) some time ago and\nreposted it here[1].\n\n--tim\n\n[1] - http://williamstw.=\r\nblogspot.com/2009/11/architectural-styles-constraints.html\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":403399802,"authorName":"Benjamin Carlyle","from":"Benjamin Carlyle &lt;benjamincarlyle@...&gt;","profile":"fuzzybsc","replyTo":"SENDER","senderId":"kNeIOdf3YGz3ZhzkYcJRCPuhbaFWZltEcKeU4gzu22HkFQiORJwhMSfNeAeRbS2fa0T2FuV5L4o-LQx94JKZi3HM4wWl3EoCLj7KNZrC28goX4dSM2FOBtJxJw","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] RESTful vs. unRESTful: session IDs and \tauthenticaiton","postDate":"1250058889","msgId":13178,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDU0NDhjZmQ5MDkwODExMjMzNHU2YjNhYzcxMXJjOWJmMmY5MWNiNGFhMWQ4QG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PGViMjA4Y2FjMDkwODEwMjA1M3gyMGUzM2VjZG82NzkwMzBlMzBlMjczMTBiQG1haWwuZ21haWwuY29tPg==","referencesHeader":"PGgwcmZrbCtnNGlwQGVHcm91cHMuY29tPgkgPGViMjA4Y2FjMDkwODEwMjA1M3gyMGUzM2VjZG82NzkwMzBlMzBlMjczMTBiQG1haWwuZ21haWwuY29tPg=="},"prevInTopic":13176,"nextInTopic":0,"prevInTime":13177,"nextInTime":13179,"topicId":12870,"numMessagesInTopic":10,"msgSnippet":"... The answer is fairly simple: A client in REST architecture can either be at rest or transition between rest states. When the client is at rest it places","rawEmail":"Return-Path: &lt;fuzzybsc@...&gt;\r\nX-Sender: fuzzybsc@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 50376 invoked from network); 12 Aug 2009 06:35:51 -0000\r\nX-Received: from unknown (69.147.108.202)\n  by m6.grp.re1.yahoo.com with QMQP; 12 Aug 2009 06:35:51 -0000\r\nX-Received: from unknown (HELO mail-fx0-f226.google.com) (209.85.220.226)\n  by mta3.grp.re1.yahoo.com with SMTP; 12 Aug 2009 06:35:51 -0000\r\nX-Received: by fxm26 with SMTP id 26so1847231fxm.18\n        for &lt;rest-discuss@yahoogroups.com&gt;; Tue, 11 Aug 2009 23:34:50 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.204.124.10 with SMTP id s10mr738008bkr.213.1250058889935; Tue, \n\t11 Aug 2009 23:34:49 -0700 (PDT)\r\nIn-Reply-To: &lt;eb208cac0908102053x20e33ecdo679030e30e27310b@...&gt;\r\nReferences: &lt;h0rfkl+g4ip@...&gt;\n\t &lt;eb208cac0908102053x20e33ecdo679030e30e27310b@...&gt;\r\nDate: Wed, 12 Aug 2009 16:34:49 +1000\r\nX-Google-Sender-Auth: 86a44c0643cd2953\r\nMessage-ID: &lt;5448cfd90908112334u6b3ac711rc9bf2f91cb4aa1d8@...&gt;\r\nTo: object01 &lt;object01@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nContent-Type: text/plain; charset=UTF-8\r\nContent-Transfer-Encoding: quoted-printable\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Benjamin Carlyle &lt;benjamincarlyle@...&gt;\r\nSubject: Re: [rest-discuss] RESTful vs. unRESTful: session IDs and \n\tauthenticaiton\r\nX-Yahoo-Group-Post: member; u=403399802; y=IVSB93sjBav54chfFhbs-rNcwAenhWmsvmnBbD6S8fqBy_A\r\nX-Yahoo-Profile: fuzzybsc\r\n\r\n--- In rest-discuss@yahoogroups.com, &quot;object01&quot; &lt;object01@...&gt; wrote:\n&gt; I&#39;v=\r\ne seen it said over and over again that passing session IDs (typically in a=\r\n cookie) is generally considered unRESTful.  I&#39;ve also seen it said over an=\r\nd over again that passing credentials along with every request is considere=\r\nd very RESTful.\n&gt;\n&gt; The reasonings are unclear to me, though.  Considering =\r\nthe &quot;statelessness&quot; principle of REST, if I think of a RESTful architecture=\r\n as one in which every request passes all the information needed for the se=\r\nrver to fulfill the request, then I don&#39;t see how passing session IDs (for =\r\ninstance) in requests violates that principle.\n\nThe answer is fairly simple=\r\n:\n\nA client in REST architecture can either be &quot;at rest&quot; or transition\nbetw=\r\neen rest states. When the client is at rest it places no demands\non the net=\r\nwork or on servers. The client transitions from one rest\nstate to another b=\r\ny issuing a series of requests. When the requests\nhave all come back, the c=\r\nlient is at rest again. This produces a\nsimple, scalable architecture where=\r\n servers don&#39;t have to remember\nanything about clients between requests.\n\nT=\r\nhe statelessness constraint specifically allows servers to process\none requ=\r\nest at a time, at a rate they can handle, without needing to\nconsume memory=\r\n or space in a session database. Additionally,\nindividual servers within lo=\r\nad-balanced or highly-available clusters\nare able to fail, shut down, be pu=\r\nrged, be upgraded, etc without\ninterrupting the client session. The next re=\r\nquest is simply handle by\nanother server, and there is no session state tha=\r\nt needs to be\nsynchronised between servers to make this happen.\n\nStatelessn=\r\ness also has impacts on intermediaries. Because all required\ninformation is=\r\n present in requests, caches and security proxies are\nmore able to interpre=\r\nt and modify messages that pass through them.\n\nStatelessness provides simpl=\r\nicity, visibility, scalability, and\nreliability properties within the archi=\r\ntecture.\n\nHowever.\n\nAuthentication is tricky business, which often by neces=\r\nsity requires\nmultiple passes. Message-based security is possible with sign=\r\natures\nand encryption, but these are open to man-in-the-middle attacks etc.=\r\n\nAuthentication often breaches the statelessness constraint, and in my\nview=\r\n this is not necessarily a problem in practice.\n\nStateful authentication do=\r\nes not particularly affect visibility, as\nthe message can still be understo=\r\nod by intermediaries. It does impact\nscalability, and that has to be carefu=\r\nlly considered. Reliability may\nbe impacted, but often this can be handled =\r\nby automatically\nreinstating the security session in the case of a failed s=\r\nerver.\nSimplicity is impacted if requests have to be directed to the same\ns=\r\nerver each time, but this can often be contained to a specialised\nauthentic=\r\nation service in the back-end.\n\nIf session state is limited to authenticati=\r\non sessions only, I don&#39;t\nsee a fundamental problem in most practical cases=\r\n. Scalability is\nagain the biggest risk area. If automatic recovery of sess=\r\nions is\npossible, this could even be resolved to some extent by allowing\nse=\r\nrvers to aggressively shed authentication sessions if space is\nlimited. Thi=\r\ns then becomes something of a trade-off on the server side\nbetween the proc=\r\nessing required to initiate a session and authenticate\na single message and=\r\n the space required to keep old sessions active.\n\nMore here[1].\n\nBenjamin\n[=\r\n1] http://soundadvice.id.au/blog/2009/06/13/#stateless\n\n"}}
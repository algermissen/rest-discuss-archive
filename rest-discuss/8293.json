{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":88294102,"authorName":"John Panzer","from":"John Panzer &lt;jpanzer@...&gt;","profile":"zwyrthrop","replyTo":"SENDER","senderId":"C6qRsqgH-A0QH5_Uzezqnsyfvl7cIFnmVkC04CQrQWrwRv7sG8wTE5Yc1CJx1kMld12sqcSyFEjTMcRdG0hHjeXU0yM","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Comments on token based authentication for REST service","postDate":"1178226866","msgId":8293,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQ2M0E1MEIyLjcwOTAzMDdAYW9sLm5ldD4="},"prevInTopic":0,"nextInTopic":0,"prevInTime":8292,"nextInTime":8294,"topicId":8293,"numMessagesInTopic":1,"msgSnippet":"All, I m looking to see how best to implement REST-compatible authentication/authorization that works with AOL s OpenAuth service. The service provides ways","rawEmail":"Return-Path: &lt;jpanzer@...&gt;\r\nX-Sender: jpanzer@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 16384 invoked from network); 3 May 2007 21:14:40 -0000\r\nReceived: from unknown (66.218.67.33)\n  by m51.grp.scd.yahoo.com with QMQP; 3 May 2007 21:14:40 -0000\r\nReceived: from unknown (HELO mcom.com) (64.236.137.25)\n  by mta7.grp.scd.yahoo.com with SMTP; 3 May 2007 21:14:40 -0000\r\nReceived: from areophany.nscp.aoltw.net (areophany.nscp.aoltw.net [10.169.155.201])\n\tby mcom.com (8.10.0/8.10.0) with ESMTP id l43LERW11136;\n\tThu, 3 May 2007 14:14:27 -0700 (PDT)\r\nReceived: from localhost (localhost [127.0.0.1])\n\tby areophany.nscp.aoltw.net (Postfix) with ESMTP id B413C1AEA0D;\n\tThu,  3 May 2007 14:14:27 -0700 (PDT)\r\nReceived: from areophany.nscp.aoltw.net ([127.0.0.1])\n by localhost (localhost [127.0.0.1]) (amavisd-new, port 10024) with ESMTP\n id 00095-04; Thu,  3 May 2007 14:14:26 -0700 (PDT)\r\nReceived: from [10.169.155.201] (areophany.nscp.aoltw.net [10.169.155.201])\n\tby areophany.nscp.aoltw.net (Postfix) with ESMTP id CE6FE1AE9F9;\n\tThu,  3 May 2007 14:14:26 -0700 (PDT)\r\nMessage-ID: &lt;463A50B2.7090307@...&gt;\r\nDate: Thu, 03 May 2007 14:14:26 -0700\r\nUser-Agent: Thunderbird 1.5.0.7 (Macintosh/20060909)\r\nMIME-Version: 1.0\r\nTo: rest-discuss@yahoogroups.com\r\nContent-Type: multipart/alternative;\n boundary=&quot;------------010709080109020407050701&quot;\r\nX-Spam-Status: No, hits=-1.138 tagged_above=-999 required=5 tests=ALL_TRUSTED,\n AWL, HTML_20_30, HTML_MESSAGE\r\nX-Spam-Level: \r\nX-eGroups-Msg-Info: 1:0:0:0\r\nFrom: John Panzer &lt;jpanzer@...&gt;\r\nSubject: Comments on token based authentication for REST service\r\nX-Yahoo-Group-Post: member; u=88294102; y=-3Z_inqy6iI3zaZYPsyDwMCsEAGXdhNoK61WP6u-H_zo5MBP\r\nX-Yahoo-Profile: zwyrthrop\r\n\r\n\r\n--------------010709080109020407050701\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\n\r\nAll,\n\nI&#39;m looking to see how best to implement REST-compatible \nauthentication/authorization that works with AOL&#39;s OpenAuth service.  \nThe service provides ways for users to authenticate themselves and to \ngrant permissions to services to do things such as read buddy lists on \nbehalf of a user.  These permissions are encapsulated in a portable \ntoken which can be passed around.\n\nThus, the primary requirements are to get clients to pass a token (which \ncombines authentication and authorization) when attempting a method \nagainst a resource; and to signal auth(.*) failures in a reasonable way.\n\nWindows Live and GData both implement custom WWW-Authenticate: header \nschemes, and unfortunately they don&#39;t follow exactly the same pattern, \nor I&#39;d just copy it.  So here&#39;s my current thoughts:\n\n(1) Clients provide an Authorization: header if they have a token.  The \nformat is:\n\nAuthorization: OpenAuth token=&quot;...&quot;\n\nwhere ... indicates base64-encoded token data (an opaque string for \npurposes of this discussion).\n\n(2) When there is a problem, or the Authorization: header is missing, a \n401 response is returned with a WWW-Authenticate: header.\n\n401 Need user consent\n...\nWWW-Authenticate: OpenAuth realm=&quot;AOL&quot;, fault=&quot;NeedConsent&quot;, \nurl=&quot;http://my.screenname.aol.com/blah?a=boof&b=zed&....&quot;\n\nwhere the status code contains a human readable message, and the \nWWW-Authenticate OpenAuth header contains the precise fault code, one of \n{NeedToken, NeedConsent, ExpiredToken}.  If present, the url parameter \ngives the URL of an HTML page which can be presented to the end user to \nmitigate the problem according to certain criteria documented \nelsewhere.  For example it can point to a permissions page which lets \nthe user grant permission to a service to perform a POST.  More likely \nit would point to a login page.\n\nCritiques are welcomed.\n\nThanks,\n-- \nAbstractioneer &lt;http://feeds.feedburner.com/aol/SzHO&gt;John Panzer\nSystem Architect\nhttp://abstractioneer.org\n\r\n--------------010709080109020407050701\r\nContent-Type: multipart/related;\n boundary=&quot;------------070002070506070705040501&quot;\r\n\r\n\r\n--------------070002070506070705040501\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: 7bit\r\n\r\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;meta content=&quot;text/html;charset=ISO-8859-1&quot; http-equiv=&quot;Content-Type&quot;&gt;\n&lt;/head&gt;\n&lt;body bgcolor=&quot;#ffffff&quot; text=&quot;#000000&quot;&gt;\nAll,&lt;br&gt;\n&lt;br&gt;\nI&#39;m looking to see how best to implement REST-compatible\nauthentication/authorization that works with AOL&#39;s OpenAuth service.&nbsp;\nThe service provides ways for users to authenticate themselves and to\ngrant permissions to services to do things such as read buddy lists on\nbehalf of a user.&nbsp; These permissions are encapsulated in a portable\ntoken which can be passed around.&lt;br&gt;\n&lt;br&gt;\nThus, the primary requirements are to get clients to pass a token\n(which combines authentication and authorization) when attempting a\nmethod against a resource; and to signal auth(.*) failures in a\nreasonable way.&lt;br&gt;\n&lt;br&gt;\nWindows Live and GData both implement custom WWW-Authenticate: header\nschemes, and unfortunately they don&#39;t follow exactly the same pattern,\nor I&#39;d just copy it.&nbsp; So here&#39;s my current thoughts:&lt;br&gt;\n&lt;br&gt;\n(1) Clients provide an Authorization: header if they have a token.&nbsp; The\nformat is:&lt;br&gt;\n&lt;br&gt;\nAuthorization: OpenAuth token=&quot;...&quot;&lt;br&gt;\n&lt;br&gt;\nwhere ... indicates base64-encoded token data (an opaque string for\npurposes of this discussion).&lt;br&gt;\n&lt;br&gt;\n(2) When there is a problem, or the Authorization: header is missing, a\n401 response is returned with a WWW-Authenticate: header.&lt;br&gt;\n&lt;br&gt;\n401 Need user consent&lt;br&gt;\n...&lt;br&gt;\nWWW-Authenticate: OpenAuth realm=&quot;AOL&quot;, fault=&quot;NeedConsent&quot;,\nurl=&lt;a class=&quot;moz-txt-link-rfc2396E&quot; href=&quot;http://my.screenname.aol.com/blah?a=boof&b=zed&....&quot;&gt;&quot;http://my.screenname.aol.com/blah?a=boof&amp;b=zed&amp;....&quot;&lt;/a&gt;&lt;br&gt;\n&lt;br&gt;\nwhere the status code contains a human readable message, and the\nWWW-Authenticate OpenAuth header contains the precise fault code, one\nof {NeedToken, NeedConsent, ExpiredToken}.&nbsp; If present, the url\nparameter gives the URL of an HTML page which can be presented to the\nend user to mitigate the problem according to certain criteria\ndocumented elsewhere.&nbsp; For example it can point to a permissions page\nwhich lets the user grant permission to a service to perform a POST.&nbsp;\nMore likely it would point to a login page.&lt;br&gt;\n&lt;br&gt;\nCritiques are welcomed.&lt;br&gt;\n&lt;br&gt;\nThanks,&lt;br&gt;\n&lt;div class=&quot;moz-signature&quot;&gt;-- &lt;br&gt;\n&lt;a href=&quot;http://feeds.feedburner.com/aol/SzHO&quot;&gt;&lt;img\n src=&quot;cid:part1.00090401.05070808@...&quot;\n style=&quot;border: 0pt none ; float: right;&quot; alt=&quot;Abstractioneer&quot;&gt;&lt;/a&gt;John\nPanzer&lt;br&gt;\nSystem Architect&lt;br&gt;\n&lt;a class=&quot;moz-txt-link-freetext&quot; href=&quot;http://abstractioneer.org&quot;&gt;http://abstractioneer.org&lt;/a&gt;&lt;br&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\r\n--------------070002070506070705040501\r\nContent-Type: image/gif;\n name=&quot;SzHO.gif&quot;\r\nContent-ID: &lt;part1.00090401.05070808@...&gt;\r\nContent-Disposition: inline;\n filename=&quot;SzHO.gif&quot;\r\n\r\n[ Attachment content not displayed ]\r\n--------------070002070506070705040501--\r\n\n\r\n--------------010709080109020407050701--\r\n\n"}}
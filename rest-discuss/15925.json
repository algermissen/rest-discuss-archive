{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":352334505,"authorName":"Craig McClanahan","from":"Craig McClanahan &lt;craigmcc@...&gt;","profile":"craig_mcclanahan","replyTo":"SENDER","senderId":"8DPSDNj6OthqkPOubPcYqTybIDoeaDHgU7CcT8cxNeO3t8GRbr6G6SAdPFqjvNFOuHa-6fsw821UpKh6MU7rahvMBZizZavftICXAA","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] PUT for create","postDate":"1279734692","msgId":15925,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEFBTkxrVGlscFN4SFRET3FLaGw2cjJ3eUw0ZHBCY3ZSN2dRQThRekFoUDZYeEBtYWlsLmdtYWlsLmNvbT4=","inReplyToHeader":"PDY1MDUzNy45MTY4OC5xbUB3ZWIxMTA3MTIubWFpbC5ncTEueWFob28uY29tPg==","referencesHeader":"PDY1MDUzNy45MTY4OC5xbUB3ZWIxMTA3MTIubWFpbC5ncTEueWFob28uY29tPg=="},"prevInTopic":15924,"nextInTopic":15926,"prevInTime":15924,"nextInTime":15926,"topicId":15924,"numMessagesInTopic":14,"msgSnippet":"... is exactly what you want.  Consider uploading an image to a photo sharing site -- you (the client) might very much care what the ultimate filename is, and","rawEmail":"Return-Path: &lt;craigmcc@...&gt;\r\nX-Sender: craigmcc@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 65034 invoked from network); 21 Jul 2010 17:51:42 -0000\r\nX-Received: from unknown (66.196.94.105)\n  by m1.grp.sp2.yahoo.com with QMQP; 21 Jul 2010 17:51:42 -0000\r\nX-Received: from unknown (HELO mail-pw0-f45.google.com) (209.85.160.45)\n  by mta1.grp.re1.yahoo.com with SMTP; 21 Jul 2010 17:51:42 -0000\r\nX-Received: by pwi2 with SMTP id 2so7141006pwi.18\n        for &lt;rest-discuss@yahoogroups.com&gt;; Wed, 21 Jul 2010 10:51:32 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.142.223.14 with SMTP id v14mr602581wfg.238.1279734692402; Wed, \n\t21 Jul 2010 10:51:32 -0700 (PDT)\r\nX-Received: by 10.142.161.4 with HTTP; Wed, 21 Jul 2010 10:51:32 -0700 (PDT)\r\nIn-Reply-To: &lt;650537.91688.qm@...&gt;\r\nReferences: &lt;650537.91688.qm@...&gt;\r\nDate: Wed, 21 Jul 2010 10:51:32 -0700\r\nMessage-ID: &lt;AANLkTilpSxHTDOqKhl6r2wyL4dpBcvR7gQA8QzAhP6Xx@...&gt;\r\nTo: Bryan Taylor &lt;bryan_w_taylor@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nContent-Type: multipart/alternative; boundary=000e0cd2579abf5907048be973ff\r\nFrom: Craig McClanahan &lt;craigmcc@...&gt;\r\nReply-To: craigmcc@...\r\nSubject: Re: [rest-discuss] PUT for create\r\nX-Yahoo-Group-Post: member; u=352334505; y=xIO4DxIsPIEkntT06Dp02WHYoYvHo4jZPcApI3BUnM4cq5pcrqsOQ2Dbzg\r\nX-Yahoo-Profile: craig_mcclanahan\r\n\r\n\r\n--000e0cd2579abf5907048be973ff\r\nContent-Type: text/plain; charset=ISO-8859-1\r\n\r\nOn Wed, Jul 21, 2010 at 10:25 AM, Bryan Taylor &lt;bryan_w_taylor@...&gt;wrote:\n\n&gt;\n&gt;\n&gt; I&#39;ve been discussing PUT for create with some coworkers. This is certainly\n&gt; valid\n&gt; HTTP, but I&#39;m wondering if people consider it RESTful. It seems to me that\n&gt; giving the client control over part of the URI requires them to understand\n&gt; how\n&gt; resources are organized and forces them to construct URIs as non-opaque\n&gt; strings.\n&gt; So I wonder if this conflicts with HATEOAS. It potentially also puts a\n&gt; burden on\n&gt; the client to avoid namespace collisions, so that it must adopt some\n&gt; uniqueness\n&gt; logic which again requires application state that seems problematic.\n&gt;\n&gt; While &quot;client control over part of the URI&quot; can be a problem, sometimes it\nis exactly what you want.  Consider uploading an image to a photo sharing\nsite -- you (the client) might very much care what the ultimate filename is,\nand probably also what folder it gets put in.\n\nI would tend to think more about the difference in idempotency (if the same\nrequest gets submitted twice, say because the client didn&#39;t hear the initial\nresponse for some reason, do two things get created or just one?) between\nPUT and POST.  In the case of PUT, its up the  server to do the right thing,\nwhereas the fact that POST is not idempotent shifts that responsibility to\nthe client.\n\nThat all being said, thinking back over all the web services I have built\nover the last few years, POST is used for creating new resources in nearly\nevery case.\n\nCraig\n\r\n--000e0cd2579abf5907048be973ff\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;br&gt;&lt;br&gt;&lt;div class=3D&quot;gmail_quote&quot;&gt;On Wed, Jul 21, 2010 at 10:25 AM, Bryan =\r\nTaylor &lt;span dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:bryan_w_taylor@...&quot;&gt;br=\r\nyan_w_taylor@...&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote class=3D&quot;gmail_=\r\nquote&quot; style=3D&quot;border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt =\r\n0pt 0.8ex; padding-left: 1ex;&quot;&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;div style=3D&quot;background-colo=\r\nr: rgb(255, 255, 255);&quot;&gt;\n&lt;span&gt;=A0&lt;/span&gt;\n\n\n&lt;div&gt;\n  &lt;div&gt;\n\n\n    &lt;div&gt;\n     =\r\n \n      \n      &lt;p&gt;I&#39;ve been discussing PUT for create with some coworke=\r\nrs. This is certainly valid &lt;br&gt;\nHTTP, but I&#39;m wondering if people cons=\r\nider it RESTful. It seems to me that &lt;br&gt;\ngiving the client control over pa=\r\nrt of the URI requires them to understand how &lt;br&gt;\nresources are organized =\r\nand forces them to construct URIs as non-opaque strings. &lt;br&gt;\nSo I wonder i=\r\nf this conflicts with HATEOAS. It potentially also puts a burden on &lt;br&gt;\nth=\r\ne client to avoid namespace collisions, so that it must adopt some uniquene=\r\nss &lt;br&gt;\nlogic which again requires application state that seems problematic=\r\n.&lt;br&gt;\n&lt;br&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;While &quot;client =\r\ncontrol over part of the URI&quot; can be a problem, sometimes it is exactl=\r\ny what you want.=A0 Consider uploading an image to a photo sharing site -- =\r\nyou (the client) might very much care what the ultimate filename is, and pr=\r\nobably also what folder it gets put in.&lt;br&gt;\n&lt;br&gt;I would tend to think more =\r\nabout the difference in idempotency (if the same request gets submitted twi=\r\nce, say because the client didn&#39;t hear the initial response for some re=\r\nason, do two things get created or just one?) between PUT and POST.=A0 In t=\r\nhe case of PUT, its up the=A0 server to do the right thing, whereas the fac=\r\nt that POST is not idempotent shifts that responsibility to the client.&lt;br&gt;=\r\n\n&lt;br&gt;That all being said, thinking back over all the web services I have bu=\r\nilt over the last few years, POST is used for creating new resources in nea=\r\nrly every case.&lt;br&gt;&lt;br&gt;Craig&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;\n\r\n--000e0cd2579abf5907048be973ff--\r\n\n"}}
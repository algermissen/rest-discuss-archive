{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":23186829,"authorName":"Paul Prescod","from":"Paul Prescod &lt;paul@...&gt;","replyTo":"SENDER","senderId":"1Fs0Hjd5TfE53ngUfu59U5B69Vu0IhYbG8bauSRH4lH1nDgh5efEUiUEMqw20_f5pcwrsfC18ob0PRNRAxVZCLTt1RUizg","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: Teaching Paul about Filesystems ;-) was re: Opacity Reconsidered","postDate":"1015524751","msgId":926,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDNDODdBRDhGLjEzQ0RENDE0QHByZXNjb2QubmV0Pg==","referencesHeader":"PDNDODY5ODNGLjFDRkIxN0VBQGp1bXAubmV0PiA8M0M4NjlGMDQuNEJBNDk1MzRAcHJlc2NvZC5uZXQ+IDwzQzg2QTZDQy5CM0M3OUE1MUBqdW1wLm5ldD4gPDNDODZBQjA3LjhFRjlDNDMxQHByZXNjb2QubmV0PiA8M0M4NkFFMTUuNTEzRTA0MjJAanVtcC5uZXQ+IDwzQzg2QjJERC5ENERCMUYwOEBwcmVzY29kLm5ldD4gPDNDODZDQkM3LjUyQjU3RTM0QGp1bXAubmV0PiA8M0M4NkQxNEEuOEQwRkE5RTdAcHJlc2NvZC5uZXQ+IDwzQzg2REQ4RC5ENDQwOEI3NUBqdW1wLm5ldD4gPDNDODZFODIyLkI5MDM0NjJAcHJlc2NvZC5uZXQ+IDwzQzg3MEJBNy45Q0M5QjZCMUBqdW1wLm5ldD4="},"prevInTopic":903,"nextInTopic":930,"prevInTime":925,"nextInTime":927,"topicId":903,"numMessagesInTopic":24,"msgSnippet":"... Well, go do the research! I have not run into any problems that name transparency would help me to solve. The examples you ve presented have been trivially","rawEmail":"Return-Path: &lt;paul@...&gt;\r\nX-Sender: paul@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: unknown); 7 Mar 2002 23:47:32 -0000\r\nReceived: (qmail 98003 invoked from network); 7 Mar 2002 18:15:20 -0000\r\nReceived: from unknown (216.115.97.167)\n  by m6.grp.snv.yahoo.com with QMQP; 7 Mar 2002 18:15:20 -0000\r\nReceived: from unknown (HELO smtp1.ActiveState.com) (209.17.183.249)\n  by mta1.grp.snv.yahoo.com with SMTP; 7 Mar 2002 18:15:20 -0000\r\nReceived: from smtp3.ActiveState.com (smtp3.ActiveState.com [192.168.3.19])\n\tby smtp1.ActiveState.com (8.11.6/8.11.6) with ESMTP id g27IFEb09805\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Thu, 7 Mar 2002 10:15:14 -0800\r\nReceived: from prescod.net (ssh1.ActiveState.com [192.168.3.32])\n\tby smtp3.ActiveState.com (8.11.6/8.11.6) with ESMTP id g27IFCL24084\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Thu, 7 Mar 2002 10:15:12 -0800\r\nMessage-ID: &lt;3C87AD8F.13CDD414@...&gt;\r\nDate: Thu, 07 Mar 2002 10:12:31 -0800\r\nX-Mailer: Mozilla 4.76 [en] (Windows NT 5.0; U)\r\nX-Accept-Language: en\r\nMIME-Version: 1.0\r\nTo: rest-discuss@yahoogroups.com\r\nSubject: Re: Teaching Paul about Filesystems ;-) was re: Opacity Reconsidered\r\nReferences: &lt;3C86983F.1CFB17EA@...&gt; &lt;3C869F04.4BA49534@...&gt; &lt;3C86A6CC.B3C79A51@...&gt; &lt;3C86AB07.8EF9C431@...&gt; &lt;3C86AE15.513E0422@...&gt; &lt;3C86B2DD.D4DB1F08@...&gt; &lt;3C86CBC7.52B57E34@...&gt; &lt;3C86D14A.8D0FA9E7@...&gt; &lt;3C86DD8D.D4408B75@...&gt; &lt;3C86E822.B903462@...&gt; &lt;3C870BA7.9CC9B6B1@...&gt;\r\nContent-Type: text/plain; charset=us-ascii\r\nContent-Transfer-Encoding: 7bit\r\nX-Filtered-By: PerlMx makes it fast and easy.  See http://www.ActiveState.com/Products/PerlMx/Header\r\nFrom: Paul Prescod &lt;paul@...&gt;\r\nX-Yahoo-Group-Post: member; u=23186829\r\n\r\nJeff Bone wrote:\n&gt; \n&gt;...\n&gt; \n&gt; Well, there&#39;s no reason to believe that the benefits or small, large, or otherwise in the\n&gt; absence of a more detailed investigation of relaxing the opacity axiom.  But without such an\n&gt; investigation --- substituting dogma for research --- one can&#39;t really speak authoritatively\n&gt; about such things.  \n\nWell, go do the research! I have not run into any problems that name\ntransparency would help me to solve. The examples you&#39;ve presented have\nbeen trivially solvable with hypertext, using existing techniques.  You\nadmit that making name-based navigation work as well as hypertext\nnavigation would require a bunch of new standards, so I think you need\nto demonstrate that there is some payoff for that effort. Here are the\nadvantages I&#39;ve heard you cite:\n\n 1. Guessability for humans -- nobody disputes the value of this. But\nthe authoritative way to navigate for humans must be hypertext. i.e.\nI&#39;ll kick your ass if you build a site with a /search but no search\nbutton. On the other hand, having a search button that goes to\nwww.google.com rather than /search seems acceptable to me. So you may\ncreate URIs that are readable but you should ACT as if they are opaque.\n\n 2. Guessability for computers -- the only way you could make things\nguessable for computers is to invent this &quot;generative grammar&quot; thing.\nFirst, we already have most of that in HTML forms and XForms. Second,\nguessability is never as good as certainty and certainty can be provided\nmore easily through hypertext. You say: &quot;A program armed with a grammar\nfor constructing resource names from hierarchical components and a\nfurther declarative description of the semantics of each part ---\npotentially in RDF --- could similarly &#39;discover&#39; information in a sort\nof gestalt rather than deductive fashion.&quot; You do not demonstrate why\nthis is better. By the way, note that in Unix it is common to &quot;discover&quot;\nnew files by going to a directory and getting a listing. Getting a\nlisting in HTTP is doing a GET and parsing the XML. Unix programs do not\ndiscover the list of new processes by poking at /proc/random_number.\nRather they do an LS and *parse the result* (semantically...of course\nthis is not precisely what happens in C programs).\n\n3. As a resource modeling tool -- if you treat this as similar to 1., I\nhave no problem with it. Make meaningful names for communication among\nhumans and then write software that treats the names as meaningless.\n\n&gt; ... It seems to me that the Opacity Axiom is overstated and overapplied, and\n&gt; I&#39;ve documented some few of the many reasons why embedding information in names is in fact\n&gt; useful, not anathema as the dogma states.\n\nNobody, anywhere, would say that it is bad to embed information names.\nThe problem is making names the canonical source for information.\n\n&gt; As for the horrors of new schema languages, conventions, and interface definition systems...\n&gt; WRDL?  I rest my case.  If you&#39;re going to argue, you should at least try not to argue with\n&gt; yourself. ;-)  (Sometimes, that&#39;s hard --- trust me, I know. ;-)\n\nWRDL is based on the notion that the hypertext is the definitive means\nfor navigating between components. If we made names the definitive means\nthen your new language would probably be a appropriate. But as I\nunderstand it, what you are arguing is that we should have both. Names\nshould be the definitive in some circumstances and hypertext in others.\nThat means we need both WRDL (or something like it) and a generative\ngrammar language. We need both WRDL&#39;s notion of a resource type and your\nnotion of a URI interface type. Until I hear some compelling advantages\nfor having two different, parallel authoritative navigation mechanisms,\nI&#39;d rather apply Occam&#39;s razor.\n\n&gt;...\n&gt; (b)  The &quot;standardization&quot; issue is also a red herring, as I&#39;ve already illustrated.  It\n&gt; hardly matters whether what&#39;s being &quot;standardized&quot; (let&#39;s be more clear, specified by any and\n&gt; all who want to specify such things, independent of any central authority) is N3 notation for\n&gt; ontologies of resources or some other mechanism for specifying generative grammars for names\n&gt; and information organizational conventions.\n\nLet&#39;s be 100% clear about how we each see things working. \n\nMy model: Somebody gives me a URI, like\n&quot;www.foobar.com/blahservice.xml&quot;. I expect my software to be able to\nlook at that XML document and see if it is in a vocabulary it knows\n(probably through an XML namespace or doctype). If it is, I expect it to\nbe able to follow all links and access the complete service through\nhyperlinks. It may have a WRDL that describes the service or it may just\nrun with no validation. If it isn&#39;t a vocabulary I&#39;ve ever heard of then\nin theory I may one day be able to use RDF to figure out the semantics\nof the service (okay, I doubt it, but the semantic web people seem to\nbelieve it so I&#39;ll mention it). \n\nNow what do YOU propose? I look at the URI document and then I take its\nname and tack on a /jeffsnamingconventions or a /paulsnamingconventions\nor a /mikesnamingconventions, etc., etc. until I get a &quot;hit&quot;? When I\nfind a hit I know what generative grammar it is using and I construct\nother names based on the base name?\n\n&gt;...\n&gt; Well, you are in essence asserting that all attempts to embed semantics and use meaningful\n&gt; names to structure systems of resources --- including such incredibly powerful and yet\n&gt; incredibly misunderstood efforts like Plan 9 --- is poor software design.  \n\nThe value of namespaces as organizational tools depends heavily on the \n\na) flexibility of the namespaces, \nb) the ease or difficulty of constructing new namespaces, \nc) the introspection tools availble for navigating namespaces, \nd) the ease of having adjacent names stand for things on physically\ndistant devices \ne) the extent to which the user will use namespaces as a navigation\nmechanism\nf) the extent to which it is important to decentralize namespace\nstandardization\n\netc.\n\nPlan 9:\n\na) It has *per process* namespaces, so you can&#39;t get much more flexible\nthen that. \nb) Obviously constructing namespaces in Plan 9 is very cheap since it\ncan be done in user space\nc) plan 9, like every operating system, has an &quot;ls&quot; command. It returns\na document with name-value pairs where the values can be pointers\nelsewhere. The web has GET. It returns hypertext which typically embeds\nname-value pairs where the values can be pointers elsewhere\nd) plan 9 namespaces are &quot;client-side&quot; (i.e. in the process) so two\nseemingly adjacent things can be arbitrarily far apart in physical space\nwith no runtime expense\ne) In unix-like systems, namespace navigation is a primary tool for\nnavigating information. Hyperlinks are not a first-class concept.\nf) in plan 9, &quot;Although there is no global name space, for a process to\nfunction sensibly the local name spaces must adhere to global\nconventions&quot; This is okay when you are designing an operating system,\nbecause you already expect people to &quot;port&quot; their software to your OS. I\ndon&#39;t want to &quot;port&quot; applications from one web site to another.\n\nIn plan 9, &quot;the command \n\ncat /proc/*/status\n\nis a crude form of the ps command; the actual ps merely reformats the\ndata so obtained.&quot;\n\nNote that the cat command does not use some form of generative grammar.\nRather the command line processor parses the logical output of an &quot;ls&quot;\non /proc and then works with those files. The command is almost legal\nXPath syntax although the semantically equivalent XPath would look more\nlike:\n\nhttp://www.machine.com/processes#xprt(document(//proc/status))\n\n(if we presume that status&#39;s live in a separate document rather than the\nsame one)\n\n&gt; ... You make this\n&gt; assertion with very little backup, and contrary to the prevailing opinion of some of the\n&gt; world&#39;s most influential computer scientists.\n\nOnce again you&#39;re shifting around. I&#39;m talking about good application\ndesign in a system with the constaints of the Web or (to some extent)\nCIFS/SMB. Plan 9 is a totally different world because Plan 9 is an\n*operating system* not just a file system and it manages many things in\nthe kernel that we cannot do on the Web. Yes, if we could push namespace\nmerging onto the client side on the Web then of course that would be a\nvery powerful tool. In fact, hypertext is all we can transmit to the\nclient side so in essence we do namespace merging using hypertext.\n\n\n&gt;...\n&gt; It does nothing of the sort.  It poses an abstract organization of resources in a\n&gt; quasi-hierarchical namespace.  It doesn&#39;t at all necessarily assume that the breakdown by\n&gt; years is the only possible naming structure (others might simultaneously exist) or that the\n&gt; objects are going to &quot;reside on the same disk.&quot;  (Check out NTDFS, AT&T 3DFS, Sun&#39;s\n&gt; Translucent File System, the FiST stackable filesystem toolkit, and other filesystems to see\n&gt; why you&#39;re wrong in your presumption.)  It might be a bad software design if those\n&gt; presumptions were true, but the fact that you make those presumptions simply illustrates a\n&gt; lack of understanding of the flexibility and utility of the filesystem namespace in many\n&gt; modern filesystems.\n\nThat only works because you have *kernel support* for making namespaces\nlook very different than physical layout. The web *has no such thing*. I\ncan&#39;t have a file &quot;appear to be&quot; on one machine for one user and on\nanother machine for another user without considerable runtime expense\nand complexity.\n\n&gt; &gt; I already have\n&gt; &gt; this problem when I want to move my massive trash folder to a different\n&gt; &gt; disk than the other mail messages.\n&gt; \n&gt; Yes, no doubt, this is a huge problem.  Most workday local filesystems couple the namespace to\n&gt; the underlying storage space in unpleasantly tight ways.  This is one of the problems we&#39;re\n&gt; addressing at Deepfile.\n\nOnce you address it on the Web we&#39;ll be able to use namespaces as an\norganizational tool on the Web.\n\n Paul Prescod\n\n"}}
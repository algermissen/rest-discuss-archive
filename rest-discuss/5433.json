{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":210284534,"authorName":"Paul James","from":"Paul James &lt;yahoogroups@...&gt;","profile":"p4u1j4m3s","replyTo":"SENDER","senderId":"y-alKECTkT2Wj-yfhKENa1qftteSJMStI-7vI2UxlYgYg062PFMzrCSYmYOTw71Am2k1HohXuINm1bLxRKaUBHOM3VGcVzjm6JI","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Best practices for crippled HTTP clients?","postDate":"1131405268","msgId":5433,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQzNkZERkQ0LjcwMzA3MDJAcGVlai5jby51az4=","inReplyToHeader":"PDQzNkJBQUMzLjcwNzA5MDFAeWFob28taW5jLmNvbT4=","referencesHeader":"PDQzNkJBQUMzLjcwNzA5MDFAeWFob28taW5jLmNvbT4="},"prevInTopic":5428,"nextInTopic":5434,"prevInTime":5432,"nextInTime":5434,"topicId":5409,"numMessagesInTopic":23,"msgSnippet":"Hi Ryan et all, ... Here s my two pence on the issue of POST(a), PUT and DELETE tunnelling through POST(p) browser issue. First lets separate our resources","rawEmail":"Return-Path: &lt;yahoogroups@...&gt;\r\nX-Sender: yahoogroups@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 49798 invoked from network); 7 Nov 2005 23:13:13 -0000\r\nReceived: from unknown (66.218.66.218)\n  by m29.grp.scd.yahoo.com with QMQP; 7 Nov 2005 23:13:13 -0000\r\nReceived: from unknown (HELO smtp-node3.griffin.com) (217.79.96.167)\n  by mta3.grp.scd.yahoo.com with SMTP; 7 Nov 2005 23:13:13 -0000\r\nReceived: from [192.168.0.4] (82-151-250-39.griffin.managedbroadband.co.uk [82.151.250.39])\n\tby smtp-node3.griffin.com (Postfix) with ESMTP id DB03EA7C2E7\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Mon,  7 Nov 2005 22:58:26 +0000 (GMT)\r\nMessage-ID: &lt;436FDFD4.7030702@...&gt;\r\nDate: Mon, 07 Nov 2005 23:14:28 +0000\r\nUser-Agent: Debian Thunderbird 1.0.2 (X11/20050602)\r\nX-Accept-Language: en-us, en\r\nMIME-Version: 1.0\r\nTo: REST Discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nReferences: &lt;436BAAC3.7070901@...&gt;\r\nIn-Reply-To: &lt;436BAAC3.7070901@...&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0:0\r\nFrom: Paul James &lt;yahoogroups@...&gt;\r\nSubject: Re: [rest-discuss] Best practices for crippled HTTP clients?\r\nX-Yahoo-Group-Post: member; u=210284534; y=Ttigsn3y6yy_ufpfWtzA8mp3SBn1iiHS2y_ngI-NJ_KFEK6r\r\nX-Yahoo-Profile: p4u1j4m3s\r\n\r\nHi Ryan et all,\n\nRyan Shaw wrote:\n\n&gt; Hello,\n&gt;\n&gt; Are there any best practices for designing REST services which are\n&gt; usable by web clients that do not support HTTP methods other than GET\n&gt; and POST? Ideally I would like to have a &quot;proper&quot; API using the full set\n&gt; of HTTP methods, with some &quot;transitional&quot; interfaces to support clients\n&gt; (like Flash) that currently cannot PUT or DELETE.\n&gt;\n&gt; Thanks,\n&gt; Ryan\n\nHere&#39;s my two pence on the issue of POST(a), PUT and DELETE tunnelling \nthrough POST(p) browser issue.\n\nFirst lets separate our resources into two types, data resources and \napplication resources. Data resources represent the model of our \napplication and respond to GET, POST(a), PUT and DELETE in a RESTful \nmanner. Application resources are our  forms.\n\nSo to update one of our application resources, we can PUT a \nrepresentation directly to the resource using our rich client or machine \nautomation. But then with a browser, we can GET our &quot;update our model&quot; \nform that POSTs a request to update the model resource, our application \nresource (form) validates the request and does a PUT on our model resource.\n\nSome might say that this is tunnelling a PUT through a POST request, but \nPOST(p) is supposed to be open ended and mean &quot;process this&quot;, I think \nit&#39;s fair game for an application resource to manipulate a data resource \nvia POST (as long as the request doesn&#39;t change the application resource \nitself).\n\nPaul.\n\n"}}
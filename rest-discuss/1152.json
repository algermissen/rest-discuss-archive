{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":23186829,"authorName":"Paul Prescod","from":"Paul Prescod &lt;paul@...&gt;","replyTo":"SENDER","senderId":"M60yGw-me4N2rY-OL-YDVpl_WszMXlu6Qye3JToDiTLHZxc02W_Wr57767pOAeTs6jHltqwT9vm0OyqMhCVfJQeP5NrHeg","spamInfo":{"isSpam":false,"reason":"0"},"subject":"GoogleAPI is Rest?","postDate":"1020209816","msgId":1152,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDNDQ0YyQTk4LjIwOTVFMEMxQHByZXNjb2QubmV0Pg=="},"prevInTopic":0,"nextInTopic":1154,"prevInTime":1151,"nextInTime":1153,"topicId":1152,"numMessagesInTopic":24,"msgSnippet":"... http://radio.weblogs.com/0101679/2002/04/28.html#a414 I think that most REST fans would agree this far. You *could* architect a system according to these","rawEmail":"Return-Path: &lt;paul@...&gt;\r\nX-Sender: paul@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_0_3_1); 30 Apr 2002 23:36:00 -0000\r\nReceived: (qmail 83637 invoked from network); 30 Apr 2002 23:36:00 -0000\r\nReceived: from unknown (66.218.66.216)\n  by m1.grp.scd.yahoo.com with QMQP; 30 Apr 2002 23:36:00 -0000\r\nReceived: from unknown (HELO smtp1.ActiveState.com) (209.17.183.249)\n  by mta1.grp.scd.yahoo.com with SMTP; 30 Apr 2002 23:36:00 -0000\r\nReceived: from smtp3.ActiveState.com (smtp3.ActiveState.com [192.168.3.19])\n\tby smtp1.ActiveState.com (8.11.6/8.11.6) with ESMTP id g3UNZq210407;\n\tTue, 30 Apr 2002 16:35:52 -0700\r\nReceived: from prescod.net (ssh1.ActiveState.com [192.168.3.32])\n\tby smtp3.ActiveState.com (8.11.6/8.11.6) with ESMTP id g3UNZqe14531;\n\tTue, 30 Apr 2002 16:35:52 -0700\r\nMessage-ID: &lt;3CCF2A98.2095E0C1@...&gt;\r\nDate: Tue, 30 Apr 2002 16:36:56 -0700\r\nX-Mailer: Mozilla 4.76 [en] (Windows NT 5.0; U)\r\nX-Accept-Language: en\r\nMIME-Version: 1.0\r\nTo: Sam Ruby &lt;rubys@...&gt;,\n   &quot;rest-discuss@yahoogroups.com&quot; &lt;rest-discuss@yahoogroups.com&gt;\r\nSubject: GoogleAPI is Rest?\r\nContent-Type: text/plain; charset=us-ascii\r\nContent-Transfer-Encoding: 7bit\r\nX-Filtered-By: PerlMx makes it fast and easy.  See http://www.ActiveState.com/Products/PerlMx/Header\r\nFrom: Paul Prescod &lt;paul@...&gt;\r\nX-Yahoo-Group-Post: member; u=23186829\r\n\r\nSam says:\n&gt; I&#39;ve been doing some reading on REST.  I&#39;m not convinced that REST \n&gt; dictates GET.  Here are three quotes from Roy Fielding, the \n&gt; &quot;inventor&quot; of REST:\n&gt; \n&gt; REST is an architectural style -- it does not dictate protocol syntax. \n&gt; There&#39;s no basis for &quot;everything must use GET&quot; in Web architecture. \n&gt; there is a trade-off between GET and POST that usually involves the \n&gt; size of the parameter content.\n&gt; \n&gt; I&#39;m now convinced that one can architect a system in accordance \n&gt; to the principles of REST and then implement that system using \n&gt; RPC style, HTTP transport, POST binding, SOAP.  \nhttp://radio.weblogs.com/0101679/2002/04/28.html#a414\n\nI think that most REST fans would agree this far. You *could* architect\na system according to these principles. After all, SOAP is just a\nsyntax. But if the relevant specifications do not encourage or require\nthis, then you will have no interoperability with someone else who\nhappens also to have read Roy&#39;s thesis but, for instance, to have called\nhis &quot;GET&quot; method &quot;fetch&quot; and his &quot;PUT&quot; method &quot;chuck.&quot; And furthermore,\nthe WAY you say &quot;where to get from&quot; and &quot;where to put to&quot; will be\nnon-standard: SOAP does not encourage nor require you to use URIs as\nresource identifiers.\n\nHTTP is a *standard* way of doing REST over the Internet. Now of course\nwe could reinvent REST-on-the-Internet in SOAP syntax two layers above\nHTTP but it seems a little bit ridiculous to me. A better strategy is to\nuse SOAP as an extension to HTTP that adds the features HTTP lacks.\n\n&gt; ... In fact, I&#39;ll go \n&gt; further and state that the GoogleSearch is an instance of this.\n\nI disagree. Here are the four principle ideas of REST:\n\n1. identification of resources; \n\nGoogle does not identify resources explicitly. I had to infer that every\nmethod/parameter combination was a resource. Then I built a layer that\nidentified each of those URIs through the Web&#39;s addressing mode: URIs.\n\n2. manipulation of resources through representations;\n\nSOAP has no concept of either resources or representations and the\nGoogle API certainly did not add them!\n\n3. self-descriptive messages; \n\nOkay, I&#39;ll concede this: SOAP may be ugly but its not quite binary!\nStill on a scale of 1 to 10, the HTTP version wins! But more important,\nthe HTTP version is self-descriptive to *any HTTP intermediary*\nincluding a cache or proxy. The SOAP version is self-descriptive only to\nintermediaries trained to expect the particular method names.\n\n4. and, hypermedia as the engine of application state\n\nIn order to shorten the article, I left out a couple of paragraphs with\nexamples of ways that Google *could* have used hypertext as the engine\nof application state.\n\n&quot;For instance, imagine if the search API returned a URI to the cached\npage, just as it does in the HTML version of Google. I could declare in\nWRDL (as opposed to WSDL) that the cachedPage element of searchResult\nresources points to a document of type text/html. I could also define a\nresource type for Google &quot;directory catalogs&quot;, then I could declare\nstrong types (XML namespaces or schemas) for the links from search\nresults to the directory catalogs and back. WRDL is designed (okay,\nbeing designed) to mirror the structure of the Web, rather than impose a\ncomponent-oriented view on top of it.&quot;\n\nIt would be great to have bidirectional links from the Google XML\nrepository to the Open Directory XML repository! It would take much more\neffort to do the thing with SOAP and it would not scale as well to\nseveral directory services (with potentially varying APIs) and several\nsearch engines (with potentially varying APIs).\n\nI&#39;ve documented the technical weaknesses of the Google solution. In\nparticular, nothing is addressable and that makes it incompatible with\nany tool that can only work with addressable information. The ones I\nhappened to mention will probably elicit a yawn from the SOAP crowd\n(XSLT -- so 1999) but the more important point is that any other web\nservice that wants to interoperate with Google will have to explicitly\nhard-code those three methods instead of &quot;just knowing&quot; that a URI is\nsufficient to get information out.\n\nI didn&#39;t mention REST in the article because I think that we make more\nprogress when we approach from a concrete technical point of view. Plus,\nI suspect Roy is getting sick of the REST hype.\n\n Paul Prescod\n\n"}}
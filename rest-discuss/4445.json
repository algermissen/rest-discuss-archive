{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":1070305,"authorName":"David Orchard","from":"&quot;David Orchard&quot; &lt;orchard@...&gt;","profile":"dorchard100","replyTo":"SENDER","senderId":"wQlPc66IqUvbNER3jDZbT85Ab3vsXsNNCAeo5oGi4dEiv9Ki7KQwV6ozgDzZQNVqhLhNnP0yrrY1ZKUwUE2vtvnW8xKpLZZle2vfG4nhKFFQ0g","spamInfo":{"isSpam":false,"reason":"0"},"subject":"RE: [rest-discuss] Identifiers: higher precedence than other fields?","postDate":"1086910705","msgId":4445,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDMyRDU4NDVBNzQ1QkZCNDI5Q0JEQkFEQTU3Q0Q0MUFGMDgyN0ExRjhAdXNzamV4MDEuYW1lci5iZWEuY29tPg=="},"prevInTopic":4444,"nextInTopic":4446,"prevInTime":4444,"nextInTime":4446,"topicId":4433,"numMessagesInTopic":18,"msgSnippet":"Well, there s a few fatal flaw in your example.  XML ids can t contain / characters.  The ID production follows the rules of name in XML 1.0.  I d looked","rawEmail":"Return-Path: &lt;dorchard@...&gt;\r\nX-Sender: dorchard@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 24280 invoked from network); 10 Jun 2004 23:38:26 -0000\r\nReceived: from unknown (66.218.66.166)\n  by m11.grp.scd.yahoo.com with QMQP; 10 Jun 2004 23:38:26 -0000\r\nReceived: from unknown (HELO ussjmh01.bea.com) (63.96.162.5)\n  by mta5.grp.scd.yahoo.com with SMTP; 10 Jun 2004 23:38:26 -0000\r\nReceived: from ussjfe01.amer.bea.com (ussjfe01.bea.com [172.16.120.53])\n\tby ussjmh01.bea.com (Switch-3.0.5/Switch-3.0.0) with ESMTP id i5ANcQ8F011115\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Thu, 10 Jun 2004 16:38:26 -0700\r\nReceived: from ussjex01.amer.bea.com ([172.16.120.50]) by ussjfe01.amer.bea.com with Microsoft SMTPSVC(5.0.2195.6713);\n\t Thu, 10 Jun 2004 16:38:26 -0700\r\nX-MimeOLE: Produced By Microsoft Exchange V6.0.6487.1\r\ncontent-class: urn:content-classes:message\r\nMIME-Version: 1.0\r\nContent-Type: multipart/alternative;\n\tboundary=&quot;----_=_NextPart_001_01C44F44.0682E77C&quot;\r\nDate: Thu, 10 Jun 2004 16:38:25 -0700\r\nMessage-ID: &lt;32D5845A745BFB429CBDBADA57CD41AF0827A1F8@...&gt;\r\nX-MS-Has-Attach: \r\nX-MS-TNEF-Correlator: \r\nThread-Topic: [rest-discuss] Identifiers: higher precedence than other fields?\r\nThread-Index: AcRPQ45yHIPup5zQQkC7gtrNxeSwQA==\r\nTo: &quot;rest-discuss&quot; &lt;rest-discuss@yahoogroups.com&gt;\r\nX-OriginalArrivalTime: 10 Jun 2004 23:38:26.0212 (UTC) FILETIME=[06B51E40:01C44F44]\r\nX-eGroups-Remote-IP: 63.96.162.5\r\nX-eGroups-From: &quot;David Orchard&quot; &lt;dorchard@...&gt;\r\nFrom: &quot;David Orchard&quot; &lt;orchard@...&gt;\r\nSubject: RE: [rest-discuss] Identifiers: higher precedence than other fields?\r\nX-Yahoo-Group-Post: member; u=1070305\r\nX-Yahoo-Profile: dorchard100\r\n\r\n\r\n------_=_NextPart_001_01C44F44.0682E77C\r\nContent-Type: text/plain;\n\tcharset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nWell, there&#39;s a few fatal flaw in your example.  XML ids can&#39;t contain &quot;/&quot; =\r\ncharacters.  The ID production follows the rules of &quot;name&quot; in XML 1.0.  I&#39;d=\r\n looked into this when trying to work on making media types full features x=\r\nml schema types.  \n \nI believe that the ways that REST would use for assign=\r\ning URIs to resources are not compatible with the ways that XML would assig=\r\nn IDs to be combined with base URIs.  :-(\n \nSecondly, URIs are typically ge=\r\nnerated from IDs by concatentating with a &quot;#&quot;, though the XPointer bare nam=\r\nes syntax isn&#39;t standard for XML media types.\n \nNow what you suggest could =\r\nbe done for an &quot;href&quot; attribute.\n \nCheers,\nDave\n \n -----Original Message---=\r\n--\nFrom: Donald Strong [mailto:dstrong@...]\nSent: Monday, J=\r\nune 07, 2004 9:22 PM\nTo: rest-discuss\nSubject: Re: [rest-discuss] Identifie=\r\nrs: higher precedence than other fields?\n\n\n\n\nHi David,\n\nHere is my two cent=\r\ns.\nIf the following speel does not directly address the issues that concern=\r\n you\nthen consider this as some ideas that I am airing using your problem a=\r\ns an\nexample.\n\nI think there are a couple of issues here and it may help to=\r\n separate them.\n\n1. For any particular artist you want to retrieve:\n      -=\r\n name\n      - eye color\n      - style\n      - web site\n      - everything (=\r\nie. all of the above)\n\n   This is a set of information that you wish to be =\r\nable to address\n   individually or collectively.\n\n2. You want to run querie=\r\ns on the set of artists:\n      - artists with green eyes\n      - rap singer=\r\ns\n\n3. You want to have arbitraty lists of artists:\n      - artists I like\n =\r\n     - artists currently on tour\n\nOK, so that&#39;s not what you want but it wi=\r\nll do to demonstrate the following\npoints.\n\na) It doesn&#39;t matter how you re=\r\nference your artists as the url is opaque.\n   Consequently you can keep it =\r\nsimple.\n        GET /artist/LisaSimpson\n\n   The URI could be /artist/123456=\r\n78. The ONLY difference between this and\n   /artist/LisaSimpson is that the=\r\n latter is easier for a human to remember.\n\n   This might return some xml l=\r\nike this:\n\n    &lt;artist&gt;\n        &lt;name      id=3D&quot;/artist/LisaSimpson/name&quot;&gt;=\r\nLisa Simpson&lt;/name&gt;\n        &lt;eye-color id=3D&quot;./eye-color&quot;&gt;Green&lt;/eye-color&gt;=\r\n\n        &lt;style     id=3D&quot;LisaSimpson/style&quot;&gt;Blues&lt;/style&gt;\n        &lt;web-sit=\r\ne  id=3D&quot;./web-site&quot;\nhref=3D&quot; http://www.thesimpsons.com/lisa-simpson&quot; /&gt;\n =\r\n   &lt;/artist&gt;\n\n   I have mixed various forms of relative URI for demonstrati=\r\non purposes.\nWhich one\n   you use doesn&#39;t really matter but you would proba=\r\nbly choose one and stick\nwith it.\n\nb)  Each property within the artist reco=\r\nrd has its own relative URI which\nyou can dereference.\n    This means that =\r\nthe User Agent does not manufacture URIs. They are\nalways provided by\n    t=\r\nhe Origin Server.\n\n    The relative URI id=3D&quot;./eye-color&quot;&quot; resolves to:\n  =\r\n       GET /artist/LisaSimpson/eye-color\n\n    This might return the followi=\r\nng xml:\n\n    &lt;eye-color artist=3D&quot;..&quot;&gt;Blue&lt;/eye-color&gt;\n\n    Note that it is=\r\n possible to get back to the artist from here. I&#39;m not\nsuggesting that you\n=\r\n    have to do that, just pointing out that it is possible.\n\nc)  The entry =\r\ncan be created using a HTTP POST to the artist uri.\n\n      POST /artist\n\n  =\r\n    &lt;artist&gt;\n          &lt;name&gt;Bart Simpson&lt;/name&gt;\n          &lt;eye-color&gt;Blue&lt;=\r\n/eye-color&gt;\n          &lt;style&gt;Rap&lt;/style&gt;\n          &lt;web-site&gt; http://www.th=\r\nesimpsons.com/bart-simpson&lt;/web-site&gt;\n      &lt;/artist&gt;\n\n    The same could b=\r\ne done using HTML form encoding.\n\n    The artist can be deleted like this.\n=\r\n\n    DELETE /artist/BartSimpson\n\nd)  You can query on existing attributes o=\r\nf the artist.\n\n    GET /artist?eye-color=3DBlue\n\n    &lt;artistlist&gt;\n        &lt;=\r\nartistref href=3D&quot;/artist/LisaSimpson&quot;&gt;Lisa Simpson&lt;/artistref&gt;\n        &lt;ar=\r\ntistref href=3D&quot;/artist/Madonna&quot;&gt;Madonna&lt;/artistref&gt;\n    &lt;/artistlist&gt;\n\n   =\r\n GET /artist?name=3DLisa%20Simpson\n\n    &lt;artistlist&gt;\n        &lt;artistref hre=\r\nf=3D&quot;/artist/LisaSimpson&quot;&gt;Lisa Simpson&lt;/artistref&gt;\n    &lt;/artistlist&gt;\n\n    T=\r\nhese queries can be generated by an HTML Form. The query part\n    of a URL =\r\nis not opaque to the User Agent. The client is expected\n    to provide quer=\r\ny parameters for use in searches.\n\n    Note that the http path, before the =\r\nquery, is still opaque.\n    It could be /artist or /search or /cgi-bin/arti=\r\nstquery.cgi.\n    However, I believe that the prefered restful practice is t=\r\no direct\n    the query to the collection URL, /artist in this case, and map=\r\n this\n    to the search utility, typically by an entry in the htaccess file=\r\n.\n\ne)  You can have arbitrary lists of artists.\n\n    GET /artistlists/my-fa=\r\nvorites\n\n    &lt;artistlist title=3D&quot;My favorite artists&quot;&gt;\n        &lt;artistref =\r\nid=3D&quot;./LisaSimpson&quot; href=3D&quot;/artist/LisaSimpson&quot;&gt;Lisa\nSimpson&lt;/artistref&gt;\n=\r\n        &lt;artistref id=3D&quot;./BartSimpson&quot; href=3D&quot;/artist/BartSimpson&quot;&gt;Bart\nS=\r\nimpson&lt;/artistref&gt;\n    &lt;/artistlist&gt;\n\n    Note that each item in the list h=\r\nas its own URI.\n\n    An entry in this list can be deleted like this:\n\n    D=\r\nELETE /artistlists/my-favorites/BartSimpson\n\n    An entry can be added to t=\r\nhis list like this:\n\n    POST /artistlists/my-favorites\n\n    &lt;artistref hre=\r\nf&quot;/artist/BartSimpson&quot;&gt;Bart Simpson&lt;/artistref&gt;\n\n\nPoints of note\n----------=\r\n----\n\n1.  URIs are always generated by the origin server.\n\n2.  The client o=\r\nnly calculates a URI in two circumstances:\n     a) it converts relative URI=\r\ns, generated by the origin server,\n        into absolute URIs\n     b) it ma=\r\ny add query parameters to the end of a search\n        URI provided by the o=\r\nrigin server.\n\n3.  All xml elements that can be addressed individually are =\r\nprovided\n    with a relative URI by the origin server.\n\nI think this approa=\r\nch is restful, but I have thought that before and been\nwrong.\nI have not se=\r\nen it suggested before, however, I have not trolled the archive\nso I\ncannot=\r\n be certain.\n\nAlthough I have not attempted it, it should be possible to pr=\r\nocess all the\nxml above into HTML using a suitable transform or style sheet=\r\n.\n\nI hope you find this interesting and maybe even helpful.\nRegards\nDonald.=\r\n\n\n&gt; -----Original Message-----\n&gt; From: David Orchard [mailto:orchard@pacifi=\r\ncspirit.com]\n&gt; Sent: Thursday, 3 June 2004 9:33 AM\n&gt; To: rest-discuss@yahoo=\r\ngroups.com\n&gt; Subject: [rest-discuss] Identifiers: higher precedence than ot=\r\nher\n&gt; fields?\n&gt;\n&gt;\n&gt; I was further thinking about modeling of identifiers in=\r\n xml\n&gt; versus URIs and the use of them in relation to other fields for\n&gt; qu=\r\neries.  It seems that any XML identifier is problematic to\n&gt; algorithmicall=\r\ny map to a URI.\n&gt;\n&gt; My scenario: I have an Artist List structure containing=\r\n Artist\n&gt; structures with a Name and an uri reference, ie\n&gt; &lt;ArtistList&gt;&lt;Ar=\r\ntist&gt;&lt;Name&gt;Thievery\n&gt; Corp&lt;/Name&gt;&lt;URI&gt; http://www.eslmusic.com/artists/thie=\r\nvery.html&lt;/URI\n&gt; &gt;&lt;/Artist&gt;&lt;/ArtistList&gt;\n&gt;\n&gt; I want to support getting the =\r\nentire Artist information, or just\n&gt; a single field.  We earlier said that =\r\nmaking the Artist\n&gt; identifier hierarchical is a Good Thing.  This would lo=\r\nok like:\n&gt;\n&gt; GET /ArtistList/Artist/id/xyz.\n&gt;\n&gt; But in my xml data structur=\r\ne, I specified that the Name structure\n&gt; uniquely identifies the band in my=\r\n database.  I end up having 2\n&gt; primary keys: one if I use URIs, and anothe=\r\nr if I were to do an\n&gt; XML based query.  If I used the Name as the key, the=\r\n URI looks more like\n&gt;\n&gt; ./Artist/Name/Thievery%20Corp\n&gt;\n&gt; If I then want t=\r\no get the value of the URI field where the\n&gt; Artist=3DThievery Corp, my que=\r\nry might look something like:\n&gt;\n&gt; GET /ArtistList/Artist/Name/Thievery%20Co=\r\nrp/URI\n&gt; or\n&gt; GET /ArtistList/Artist/Name/Thievery%20Corp?field=3DURI\n&gt;\n&gt; I=\r\n prefer the former because the URI field is hierarchical within\n&gt; the Artis=\r\nt structure, it&#39;s just that the darned Name messes up\n&gt; the hierarchy.  I d=\r\non&#39;t want to use client side identifiers, ie\n&gt; fragment ids such as Artist#=\r\nThieveryCorp or even\n&gt; Artist/Name/Thievery%20Corp#thievery%20CorpURI\n&gt;\n&gt; S=\r\no I then thought in cases where the field being requested was at\n&gt; the same=\r\n or lower level than the identifier, I could use the path\n&gt; component to sp=\r\necify the Artist, as in\n&gt;\n&gt; GET /ArtistList/Artist;Name=3DThievery%20Corp/U=\r\nRI\n&gt;\n&gt; Which I&#39;d interpret as for the Artist who&#39;s name field is\n&gt; thievery=\r\n corp, get the URI field.  I wonder if this is a good way\n&gt; of modelling th=\r\ne query?\n&gt;\n&gt; I think you should now have the rough gist of the way that I&#39;m=\r\n\n&gt; thinking about binding xml structures to URIs, and this has led\n&gt; to som=\r\ne questions:\n&gt;\n&gt; 1. What is the best design, or even the trade-offs to be m=\r\nade\n&gt; across designs, when binding xml identifiers to URIs\n&gt;\n&gt; 2. How shoul=\r\nd requests for a &quot;secondary resource&quot; in a component\n&gt; be expressed when th=\r\ne secondary resource is at the same level in\n&gt; the xml hierarchy as the xml=\r\n identifier.\n&gt;\n&gt; I wasn&#39;t quite sure which way Roy was saying is the best w=\r\nay\n&gt; given the different examples of\nhttp://example.com/quotes/${exchange}/=\r\n${symbol} and  /Artist/id/12345678.\nThat is, whether the URI for the resour=\r\nce is parameterizable and thus\ngenerated by a client, or whether the identi=\r\nfier is opaque and the client\nhas to do a 2nd pass to get it.  It seems lik=\r\ne there&#39;s an important point\nabout naming of resources, which is that maybe=\r\n the xml way of identifying\nresources doesn&#39;t work well with the Web.\n\nThan=\r\nks again for all your time,\nDave\n\n\n\nYahoo! Groups Sponsor\t\n\nADVERTISEMENT\n =\r\n&lt;http://rd.yahoo.com/SIG=3D129lpamd6/M=3D298184.5022502.6152625.3001176/D=\r\n=3Dgroups/S=3D1705701014:HM/EXP=3D1086754970/A=3D2164330/R=3D0/SIG=3D11eamf=\r\n8g4/*http://www.netflix.com/Default?mqso=3D60183350&gt; click here\t\n  &lt;http://=\r\nus.adserver.yahoo.com/l?M=3D298184.5022502.6152625.3001176/D=3Dgroups/S=3D:=\r\nHM/A=3D2164330/rand=3D147225804&gt; \t\n\n\n  _____  \n\nYahoo! Groups Links\n\n\n*\tTo =\r\nvisit your group on the web, go to:\nhttp://groups.yahoo.com/group/rest-disc=\r\nuss/\n  \n\n*\tTo unsubscribe from this group, send an email to:\nrest-discuss-u=\r\nnsubscribe@yahoogroups.com &lt;mailto:rest-discuss-unsubscribe@yahoogroups.com=\r\n?subject=3DUnsubscribe&gt; \n  \n\n*\tYour use of Yahoo! Groups is subject to the =\r\nYahoo! Terms of Service &lt;http://docs.yahoo.com/info/terms/&gt; . \n\n\n\r\n------_=_NextPart_001_01C44F44.0682E77C\r\nContent-Type: text/html;\n\tcharset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot;&gt;\n&lt;HTML&gt;&lt;HEAD&gt;=\r\n\n&lt;META HTTP-EQUIV=3D&quot;Content-Type&quot; CONTENT=3D&quot;text/html; charset=3Diso-8859=\r\n-1&quot;&gt;\n\n\n&lt;META content=3D&quot;MSHTML 6.00.2800.1400&quot; name=3DGENERATOR&gt;&lt;/HEAD&gt;\n&lt;BO=\r\nDY&gt;\n&lt;DIV&gt;&lt;SPAN class=3D312480417-08062004&gt;&lt;FONT face=3DArial color=3D#0000f=\r\nf size=3D2&gt;Well, \nthere&#39;s a few&nbsp;fatal flaw in your example.&nbsp; XML =\r\nids can&#39;t contain &quot;/&quot; \ncharacters.&nbsp; The ID production follows the rule=\r\ns of &quot;name&quot; in XML \n1.0.&nbsp; I&#39;d looked into this when trying to work on =\r\nmaking media types full \nfeatures xml schema types.&nbsp; &lt;/FONT&gt;&lt;/SPAN&gt;&lt;/D=\r\nIV&gt;\n&lt;DIV&gt;&lt;SPAN class=3D312480417-08062004&gt;&lt;FONT face=3DArial color=3D#0000f=\r\nf \nsize=3D2&gt;&lt;/FONT&gt;&lt;/SPAN&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;SPAN class=3D312480417-0806200=\r\n4&gt;&lt;FONT face=3DArial color=3D#0000ff size=3D2&gt;I \nbelieve that the ways that=\r\n REST would use for assigning URIs to resources are \nnot compatible with th=\r\ne ways that XML would assign IDs to be combined with base \nURIs.&nbsp; :-(&lt;=\r\n/FONT&gt;&lt;/SPAN&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;SPAN class=3D312480417-08062004&gt;&lt;FONT face=3DAria=\r\nl color=3D#0000ff \nsize=3D2&gt;&lt;/FONT&gt;&lt;/SPAN&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;SPAN class=3D3=\r\n12480417-08062004&gt;&lt;FONT face=3DArial color=3D#0000ff \nsize=3D2&gt;Secondly,&nb=\r\nsp;URIs are typically generated from&nbsp;IDs by \nconcatentating with a&nbs=\r\np;&quot;#&quot;, though the XPointer bare names syntax isn&#39;t \nstandard for XML media =\r\ntypes.&lt;/FONT&gt;&lt;/SPAN&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;SPAN class=3D312480417-08062004&gt;&lt;FONT face=\r\n=3DArial color=3D#0000ff \nsize=3D2&gt;&lt;/FONT&gt;&lt;/SPAN&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;SPAN cl=\r\nass=3D312480417-08062004&gt;&lt;FONT face=3DArial color=3D#0000ff \nsize=3D2&gt;Now&n=\r\nbsp;what you suggest could be done for an &quot;href&quot; \nattribute.&lt;/FONT&gt;&lt;/SPAN&gt;&lt;=\r\n/DIV&gt;\n&lt;DIV&gt;&lt;SPAN class=3D312480417-08062004&gt;&lt;FONT face=3DArial color=3D#000=\r\n0ff \nsize=3D2&gt;&lt;/FONT&gt;&lt;/SPAN&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;SPAN class=3D312480417-08062=\r\n004&gt;&lt;FONT face=3DArial color=3D#0000ff \nsize=3D2&gt;Cheers,&lt;/FONT&gt;&lt;/SPAN&gt;&lt;/DIV=\r\n&gt;\n&lt;DIV&gt;&lt;SPAN class=3D312480417-08062004&gt;&lt;FONT face=3DArial color=3D#0000ff =\r\n\nsize=3D2&gt;Dave&lt;/FONT&gt;&lt;/SPAN&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;SPAN class=3D312480417-08062004&gt;&lt;/=\r\nSPAN&gt;&lt;FONT face=3DTahoma&gt;&lt;FONT size=3D2&gt;&lt;SPAN \nclass=3D312480417-08062004&gt;&lt;=\r\nFONT face=3DArial \ncolor=3D#0000ff&gt;&lt;/FONT&gt;&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;=\r\n\n&lt;DIV&gt;&lt;FONT face=3DTahoma&gt;&lt;FONT size=3D2&gt;&lt;SPAN \nclass=3D312480417-08062004&gt;=\r\n&nbsp;&lt;/SPAN&gt;-----Original Message-----&lt;BR&gt;&lt;B&gt;From:&lt;/B&gt; \nDonald Strong [mai=\r\nlto:dstrong@...]&lt;BR&gt;&lt;B&gt;Sent:&lt;/B&gt; Monday, June \n07, 2004 9:2=\r\n2 PM&lt;BR&gt;&lt;B&gt;To:&lt;/B&gt; rest-discuss&lt;BR&gt;&lt;B&gt;Subject:&lt;/B&gt; Re: \n[rest-discuss] Iden=\r\ntifiers: higher precedence than other \nfields?&lt;BR&gt;&lt;BR&gt;&lt;/DIV&gt;&lt;/FONT&gt;&lt;/FONT&gt;\n=\r\n&lt;BLOCKQUOTE \nstyle=3D&quot;PADDING-LEFT: 5px; MARGIN-LEFT: 5px; BORDER-LEFT: #00=\r\n00ff 2px solid&quot;&gt;&lt;TT&gt;&lt;BR&gt;Hi \n  David,&lt;BR&gt;&lt;BR&gt;Here is my two cents.&lt;BR&gt;If the=\r\n following speel does not \n  directly address the issues that concern you&lt;B=\r\nR&gt;then consider this as some \n  ideas that I am airing using your problem a=\r\ns an&lt;BR&gt;example.&lt;BR&gt;&lt;BR&gt;I think \n  there are a couple of issues here and it=\r\n may help to separate them.&lt;BR&gt;&lt;BR&gt;1. \n  For any particular artist you want=\r\n to \n  retrieve:&lt;BR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - \n  name&lt;BR&gt;&nbsp;&nbsp=\r\n;&nbsp;&nbsp;&nbsp; - eye \n  color&lt;BR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - \n  s=\r\ntyle&lt;BR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - web \n  site&lt;BR&gt;&nbsp;&nbsp;&nbsp;&=\r\nnbsp;&nbsp; - everything (ie. all of the \n  above)&lt;BR&gt;&lt;BR&gt;&nbsp;&nbsp; This=\r\n is a set of information that you wish to be \n  able to address&lt;BR&gt;&nbsp;&n=\r\nbsp; individually or collectively.&lt;BR&gt;&lt;BR&gt;2. You \n  want to run queries on =\r\nthe set of artists:&lt;BR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - \n  artists with gre=\r\nen eyes&lt;BR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - rap \n  singers&lt;BR&gt;&lt;BR&gt;3. You wa=\r\nnt to have arbitraty lists of \n  artists:&lt;BR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=\r\n - artists I \n  like&lt;BR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - artists currently =\r\non tour&lt;BR&gt;&lt;BR&gt;OK, \n  so that&#39;s not what you want but it will do to demonst=\r\nrate the \n  following&lt;BR&gt;points.&lt;BR&gt;&lt;BR&gt;a) It doesn&#39;t matter how you refere=\r\nnce your \n  artists as the url is opaque.&lt;BR&gt;&nbsp;&nbsp; Consequently you =\r\ncan keep it \n  simple.&lt;BR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GET \n =\r\n /artist/LisaSimpson&lt;BR&gt;&lt;BR&gt;&nbsp;&nbsp; The URI could be /artist/12345678.=\r\n The \n  ONLY difference between this and&lt;BR&gt;&nbsp;&nbsp; /artist/LisaSimpso=\r\nn is that \n  the latter is easier for a human to remember.&lt;BR&gt;&lt;BR&gt;&nbsp;&nb=\r\nsp; This might \n  return some xml like this:&lt;BR&gt;&lt;BR&gt;&nbsp;&nbsp;&nbsp; \n  &=\r\nlt;artist&gt;&lt;BR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n  &lt;name&nbs=\r\np;&nbsp;&nbsp;&nbsp;&nbsp; id=3D&quot;/artist/LisaSimpson/name&quot;&gt;Lisa \n  Simps=\r\non&lt;/name&gt;&lt;BR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n  &lt;eye-co=\r\nlor \n  id=3D&quot;./eye-color&quot;&gt;Green&lt;/eye-color&gt;&lt;BR&gt;&nbsp;&nbsp;&nbsp;&=\r\nnbsp;&nbsp;&nbsp;&nbsp; \n  &lt;style&nbsp;&nbsp;&nbsp;&nbsp; \n  id=3D&quot;LisaS=\r\nimpson/style&quot;&gt;Blues&lt;/style&gt;&lt;BR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=\r\n;&nbsp; \n  &lt;web-site&nbsp; id=3D&quot;./web-site&quot;&lt;BR&gt;href=3D&quot;&lt;A \n  href=3D&quot;ht=\r\ntp://www.thesimpsons.com/lisa-simpson&quot;&gt;http://www.thesimpsons.com/lisa-simp=\r\nson&lt;/A&gt;&quot; \n  /&gt;&lt;BR&gt;&nbsp;&nbsp;&nbsp; &lt;/artist&gt;&lt;BR&gt;&lt;BR&gt;&nbsp;&nbsp;=\r\n I have mixed \n  various forms of relative URI for demonstration purposes.&lt;=\r\nBR&gt;Which \n  one&lt;BR&gt;&nbsp;&nbsp; you use doesn&#39;t really matter but you would=\r\n probably \n  choose one and stick&lt;BR&gt;with it.&lt;BR&gt;&lt;BR&gt;b)&nbsp; Each property=\r\n within the \n  artist record has its own relative URI which&lt;BR&gt;you can \n  d=\r\nereference.&lt;BR&gt;&nbsp;&nbsp;&nbsp; This means that the User Agent does not \n=\r\n  manufacture URIs. They are&lt;BR&gt;always provided by&lt;BR&gt;&nbsp;&nbsp;&nbsp; th=\r\ne \n  Origin Server.&lt;BR&gt;&lt;BR&gt;&nbsp;&nbsp;&nbsp; The relative URI id=3D&quot;./eye-=\r\ncolor&quot;&quot; \n  resolves to:&lt;BR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=\r\n GET \n  /artist/LisaSimpson/eye-color&lt;BR&gt;&lt;BR&gt;&nbsp;&nbsp;&nbsp; This might =\r\nreturn the \n  following xml:&lt;BR&gt;&lt;BR&gt;&nbsp;&nbsp;&nbsp; &lt;eye-color \n  art=\r\nist=3D&quot;..&quot;&gt;Blue&lt;/eye-color&gt;&lt;BR&gt;&lt;BR&gt;&nbsp;&nbsp;&nbsp; Note that it=\r\n \n  is possible to get back to the artist from here. I&#39;m not&lt;BR&gt;suggesting =\r\nthat \n  you&lt;BR&gt;&nbsp;&nbsp;&nbsp; have to do that, just pointing out that i=\r\nt is \n  possible.&lt;BR&gt;&lt;BR&gt;c)&nbsp; The entry can be created using a HTTP POS=\r\nT to the \n  artist uri.&lt;BR&gt;&lt;BR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; POST \n  /arti=\r\nst&lt;BR&gt;&lt;BR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n  &lt;artist&gt;&lt;BR&gt;&nbsp;&nbsp;&=\r\nnbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n  &lt;name&gt;Bart \n  Simpson&lt=\r\n;/name&gt;&lt;BR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n  &lt=\r\n;eye-color&gt;Blue&lt;/eye-color&gt;&lt;BR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=\r\n;&nbsp;&nbsp;&nbsp; \n  &lt;style&gt;Rap&lt;/style&gt;&lt;BR&gt;&nbsp;&nbsp;&nbsp;=\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n  &lt;web-site&gt;&lt;A \n  href=3D&quot;http:=\r\n//www.thesimpsons.com/bart-simpson&quot;&gt;http://www.thesimpsons.com/bart-simpson=\r\n&lt;/A&gt;&lt;/web-site&gt;&lt;BR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n  &lt;/artist&gt;&lt;=\r\nBR&gt;&lt;BR&gt;&nbsp;&nbsp;&nbsp; The same could be done using HTML \n  form encodin=\r\ng.&lt;BR&gt;&lt;BR&gt;&nbsp;&nbsp;&nbsp; The artist can be deleted like \n  this.&lt;BR&gt;&lt;BR=\r\n&gt;&nbsp;&nbsp;&nbsp; DELETE /artist/BartSimpson&lt;BR&gt;&lt;BR&gt;d)&nbsp; You \n  can q=\r\nuery on existing attributes of the artist.&lt;BR&gt;&lt;BR&gt;&nbsp;&nbsp;&nbsp; GET \n =\r\n /artist?eye-color=3DBlue&lt;BR&gt;&lt;BR&gt;&nbsp;&nbsp;&nbsp; \n  &lt;artistlist&gt;&lt;B=\r\nR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;artistref \n  href=3D&quot;/arti=\r\nst/LisaSimpson&quot;&gt;Lisa \n  Simpson&lt;/artistref&gt;&lt;BR&gt;&nbsp;&nbsp;&nbsp;&=\r\nnbsp;&nbsp;&nbsp;&nbsp; \n  &lt;artistref \n  href=3D&quot;/artist/Madonna&quot;&gt;Mad=\r\nonna&lt;/artistref&gt;&lt;BR&gt;&nbsp;&nbsp;&nbsp; \n  &lt;/artistlist&gt;&lt;BR&gt;&lt;BR&gt;=\r\n&nbsp;&nbsp;&nbsp; GET \n  /artist?name=3DLisa%20Simpson&lt;BR&gt;&lt;BR&gt;&nbsp;&nbsp;=\r\n&nbsp; \n  &lt;artistlist&gt;&lt;BR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =\r\n&lt;artistref \n  href=3D&quot;/artist/LisaSimpson&quot;&gt;Lisa \n  Simpson&lt;/artist=\r\nref&gt;&lt;BR&gt;&nbsp;&nbsp;&nbsp; \n  &lt;/artistlist&gt;&lt;BR&gt;&lt;BR&gt;&nbsp;&nbsp;&nb=\r\nsp; These queries can be generated \n  by an HTML Form. The query part&lt;BR&gt;&n=\r\nbsp;&nbsp;&nbsp; of a URL is not opaque \n  to the User Agent. The client is=\r\n expected&lt;BR&gt;&nbsp;&nbsp;&nbsp; to provide \n  query parameters for use in s=\r\nearches.&lt;BR&gt;&lt;BR&gt;&nbsp;&nbsp;&nbsp; Note that the \n  http path, before the q=\r\nuery, is still opaque.&lt;BR&gt;&nbsp;&nbsp;&nbsp; It could \n  be /artist or /sea=\r\nrch or /cgi-bin/artistquery.cgi.&lt;BR&gt;&nbsp;&nbsp;&nbsp; \n  However, I believ=\r\ne that the prefered restful practice is to \n  direct&lt;BR&gt;&nbsp;&nbsp;&nbsp; =\r\nthe query to the collection URL, /artist in this \n  case, and map this&lt;BR&gt;&=\r\nnbsp;&nbsp;&nbsp; to the search utility, typically by \n  an entry in the ht=\r\naccess file.&lt;BR&gt;&lt;BR&gt;e)&nbsp; You can have arbitrary lists of \n  artists.&lt;BR=\r\n&gt;&lt;BR&gt;&nbsp;&nbsp;&nbsp; GET \n  /artistlists/my-favorites&lt;BR&gt;&lt;BR&gt;&nbsp;&nbsp=\r\n;&nbsp; &lt;artistlist title=3D&quot;My \n  favorite artists&quot;&gt;&lt;BR&gt;&nbsp;&nbsp;=\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n  &lt;artistref id=3D&quot;./LisaSimpson&quot; \n  hre=\r\nf=3D&quot;/artist/LisaSimpson&quot;&gt;Lisa&lt;BR&gt;Simpson&lt;/artistref&gt;&lt;BR&gt;&nbsp;&nb=\r\nsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n  &lt;artistref id=3D&quot;./BartSimpson&quot; \n  =\r\nhref=3D&quot;/artist/BartSimpson&quot;&gt;Bart&lt;BR&gt;Simpson&lt;/artistref&gt;&lt;BR&gt;&nbsp;=\r\n&nbsp;&nbsp; \n  &lt;/artistlist&gt;&lt;BR&gt;&lt;BR&gt;&nbsp;&nbsp;&nbsp; Note that eac=\r\nh item in the list \n  has its own URI.&lt;BR&gt;&lt;BR&gt;&nbsp;&nbsp;&nbsp; An entry i=\r\nn this list can be \n  deleted like this:&lt;BR&gt;&lt;BR&gt;&nbsp;&nbsp;&nbsp; DELETE \n=\r\n  /artistlists/my-favorites/BartSimpson&lt;BR&gt;&lt;BR&gt;&nbsp;&nbsp;&nbsp; An entry =\r\ncan \n  be added to this list like this:&lt;BR&gt;&lt;BR&gt;&nbsp;&nbsp;&nbsp; POST \n  /=\r\nartistlists/my-favorites&lt;BR&gt;&lt;BR&gt;&nbsp;&nbsp;&nbsp; &lt;artistref \n  href&quot;/a=\r\nrtist/BartSimpson&quot;&gt;Bart Simpson&lt;/artistref&gt;&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;Points \n  o=\r\nf note&lt;BR&gt;--------------&lt;BR&gt;&lt;BR&gt;1.&nbsp; URIs are always generated by the \n=\r\n  origin server.&lt;BR&gt;&lt;BR&gt;2.&nbsp; The client only calculates a URI in two \n =\r\n circumstances:&lt;BR&gt;&nbsp;&nbsp;&nbsp;&nbsp; a) it converts relative URIs, \n=\r\n  generated by the origin server,&lt;BR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=\r\nbsp; \n  into absolute URIs&lt;BR&gt;&nbsp;&nbsp;&nbsp;&nbsp; b) it may add query =\r\nparameters \n  to the end of a search&lt;BR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=\r\n;&nbsp; URI \n  provided by the origin server.&lt;BR&gt;&lt;BR&gt;3.&nbsp; All xml eleme=\r\nnts that can be \n  addressed individually are provided&lt;BR&gt;&nbsp;&nbsp;&nbsp=\r\n; with a relative URI \n  by the origin server.&lt;BR&gt;&lt;BR&gt;I think this approach=\r\n is restful, but I have \n  thought that before and been&lt;BR&gt;wrong.&lt;BR&gt;I have=\r\n not seen it suggested before, \n  however, I have not trolled the archive&lt;B=\r\nR&gt;so I&lt;BR&gt;cannot be \n  certain.&lt;BR&gt;&lt;BR&gt;Although I have not attempted it, it=\r\n should be possible to \n  process all the&lt;BR&gt;xml above into HTML using a su=\r\nitable transform or style \n  sheet.&lt;BR&gt;&lt;BR&gt;I hope you find this interesting=\r\n and maybe even \n  helpful.&lt;BR&gt;Regards&lt;BR&gt;Donald.&lt;BR&gt;&lt;BR&gt;&gt; -----Original=\r\n Message-----&lt;BR&gt;&gt; \n  From: David Orchard [mailto:orchard@pacificspirit.=\r\ncom]&lt;BR&gt;&gt; Sent: Thursday, \n  3 June 2004 9:33 AM&lt;BR&gt;&gt; To: rest-discus=\r\ns@yahoogroups.com&lt;BR&gt;&gt; Subject: \n  [rest-discuss] Identifiers: higher pr=\r\necedence than other&lt;BR&gt;&gt; \n  fields?&lt;BR&gt;&gt;&lt;BR&gt;&gt;&lt;BR&gt;&gt; I was furthe=\r\nr thinking about modeling of \n  identifiers in xml&lt;BR&gt;&gt; versus URIs and =\r\nthe use of them in relation to \n  other fields for&lt;BR&gt;&gt; queries.&nbsp; I=\r\nt seems that any XML identifier is \n  problematic to&lt;BR&gt;&gt; algorithmicall=\r\ny map to a URI.&lt;BR&gt;&gt;&lt;BR&gt;&gt; My \n  scenario: I have an Artist List struc=\r\nture containing Artist&lt;BR&gt;&gt; structures \n  with a Name and an uri referen=\r\nce, ie&lt;BR&gt;&gt; \n  &lt;ArtistList&gt;&lt;Artist&gt;&lt;Name&gt;Thievery&lt;BR&gt;&=\r\ngt; \n  Corp&lt;/Name&gt;&lt;URI&gt;&lt;A \n  href=3D&quot;http://www.eslmusic.com/ar=\r\ntists/thievery.html&quot;&gt;http://www.eslmusic.com/artists/thievery.html&lt;/A&gt;&lt;/=\r\nURI&lt;BR&gt;&gt; \n  &gt;&lt;/Artist&gt;&lt;/ArtistList&gt;&lt;BR&gt;&gt;&lt;BR&gt;&gt; I wan=\r\nt to support \n  getting the entire Artist information, or just&lt;BR&gt;&gt; a si=\r\nngle field.&nbsp; \n  We earlier said that making the Artist&lt;BR&gt;&gt; identif=\r\nier hierarchical is a \n  Good Thing.&nbsp; This would look like:&lt;BR&gt;&gt;&lt;BR=\r\n&gt;&gt; GET \n  /ArtistList/Artist/id/xyz.&lt;BR&gt;&gt;&lt;BR&gt;&gt; But in my xml data =\r\nstructure, I \n  specified that the Name structure&lt;BR&gt;&gt; uniquely identifi=\r\nes the band in my \n  database.&nbsp; I end up having 2&lt;BR&gt;&gt; primary keys=\r\n: one if I use URIs, and \n  another if I were to do an&lt;BR&gt;&gt; XML based qu=\r\nery.&nbsp; If I used the Name \n  as the key, the URI looks more like&lt;BR&gt;&gt=\r\n;&lt;BR&gt;&gt; \n  ./Artist/Name/Thievery%20Corp&lt;BR&gt;&gt;&lt;BR&gt;&gt; If I then want t=\r\no get the value \n  of the URI field where the&lt;BR&gt;&gt; Artist=3DThievery Cor=\r\np, my query might look \n  something like:&lt;BR&gt;&gt;&lt;BR&gt;&gt; GET \n  /ArtistLis=\r\nt/Artist/Name/Thievery%20Corp/URI&lt;BR&gt;&gt; or&lt;BR&gt;&gt; GET \n  /ArtistList/Art=\r\nist/Name/Thievery%20Corp?field=3DURI&lt;BR&gt;&gt;&lt;BR&gt;&gt; I prefer the \n  former=\r\n because the URI field is hierarchical within&lt;BR&gt;&gt; the Artist \n  structu=\r\nre, it&#39;s just that the darned Name messes up&lt;BR&gt;&gt; the \n  hierarchy.&nbsp=\r\n; I don&#39;t want to use client side identifiers, ie&lt;BR&gt;&gt; \n  fragment ids s=\r\nuch as Artist#ThieveryCorp or even&lt;BR&gt;&gt; \n  Artist/Name/Thievery%20Corp#t=\r\nhievery%20CorpURI&lt;BR&gt;&gt;&lt;BR&gt;&gt; So I then \n  thought in cases where the f=\r\nield being requested was at&lt;BR&gt;&gt; the same or \n  lower level than the ide=\r\nntifier, I could use the path&lt;BR&gt;&gt; component to \n  specify the Artist, a=\r\ns in&lt;BR&gt;&gt;&lt;BR&gt;&gt; GET \n  /ArtistList/Artist;Name=3DThievery%20Corp/URI&lt;B=\r\nR&gt;&gt;&lt;BR&gt;&gt; Which I&#39;d \n  interpret as for the Artist who&#39;s name field is=\r\n&lt;BR&gt;&gt; thievery corp, get the \n  URI field.&nbsp; I wonder if this is a g=\r\nood way&lt;BR&gt;&gt; of modelling the \n  query?&lt;BR&gt;&gt;&lt;BR&gt;&gt; I think you shou=\r\nld now have the rough gist of the way \n  that I&#39;m&lt;BR&gt;&gt; thinking about bi=\r\nnding xml structures to URIs, and this has \n  led&lt;BR&gt;&gt; to some questions=\r\n:&lt;BR&gt;&gt;&lt;BR&gt;&gt; 1. What is the best design, or \n  even the trade-offs to =\r\nbe made&lt;BR&gt;&gt; across designs, when binding xml \n  identifiers to URIs&lt;BR&gt;=\r\n&gt;&lt;BR&gt;&gt; 2. How should requests for a &quot;secondary \n  resource&quot; in a comp=\r\nonent&lt;BR&gt;&gt; be expressed when the secondary resource is \n  at the same le=\r\nvel in&lt;BR&gt;&gt; the xml hierarchy as the xml \n  identifier.&lt;BR&gt;&gt;&lt;BR&gt;&gt; =\r\nI wasn&#39;t quite sure which way Roy was saying is \n  the best way&lt;BR&gt;&gt; giv=\r\nen the different examples of&lt;BR&gt;&lt;A \n  href=3D&quot;http://example.com/quotes/${e=\r\nxchange}/${symbol}&quot;&gt;http://example.com/quotes/${exchange}/${symbol}&lt;/A&gt; \n  =\r\nand&nbsp; /Artist/id/12345678.&lt;BR&gt;That is, whether the URI for the resource=\r\n is \n  parameterizable and thus&lt;BR&gt;generated by a client, or whether the id=\r\nentifier \n  is opaque and the client&lt;BR&gt;has to do a 2nd pass to get it.&nbs=\r\np; It seems \n  like there&#39;s an important point&lt;BR&gt;about naming of resources=\r\n, which is that \n  maybe the xml way of identifying&lt;BR&gt;resources doesn&#39;t wo=\r\nrk well with the \n  Web.&lt;BR&gt;&lt;BR&gt;Thanks again for all your time,&lt;BR&gt;Dave&lt;BR&gt;=\r\n&lt;BR&gt;&lt;/TT&gt;&lt;BR&gt;&lt;/BODY&gt;&lt;/HTML&gt;\n\r\n------_=_NextPart_001_01C44F44.0682E77C--\r\n\n"}}
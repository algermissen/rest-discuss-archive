{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":80827773,"authorName":"Seairth Jacobs","from":"&quot;Seairth Jacobs&quot; &lt;seairth@...&gt;","profile":"seairthjacobs","replyTo":"SENDER","senderId":"8bz_8sq0v9QEH6qZZDPB8Or8Rh5PdeFQnjIk2PsiFf3nz5LDSNF4sIF_vm8qmCJwEk39_ljWRvQuftPKqxIQX1vMPk3mzmCKM9dKwT0","spamInfo":{"isSpam":false,"reason":"0"},"subject":"REST without PUT and other things...","postDate":"1032030066","msgId":2548,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDAwMTYwMWMyNWMyMSQxNGViNWI0MCRhMDAwYThjMEBzZWFpcnRobGFwdG9wPg=="},"prevInTopic":0,"nextInTopic":2549,"prevInTime":2547,"nextInTime":2549,"topicId":2548,"numMessagesInTopic":6,"msgSnippet":"In a recent post [1], I was asking about performing resource creation with POST only.  My conclusion has been that this is a good thing.  What s more, as I was","rawEmail":"Return-Path: &lt;seairth@...&gt;\r\nX-Sender: seairth@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_1_1_3); 14 Sep 2002 19:00:23 -0000\r\nReceived: (qmail 44823 invoked from network); 14 Sep 2002 19:00:23 -0000\r\nReceived: from unknown (66.218.66.216)\n  by m10.grp.scd.yahoo.com with QMQP; 14 Sep 2002 19:00:23 -0000\r\nReceived: from unknown (HELO mail.bbglobex.com) (208.251.163.4)\n  by mta1.grp.scd.yahoo.com with SMTP; 14 Sep 2002 19:00:23 -0000\r\nReceived: from seairthlaptop [68.10.252.24] by mail.bbglobex.com with ESMTP\n  (SMTPD32-7.12) id A61E8EFD0142; Sat, 14 Sep 2002 14:55:26 -0400\r\nMessage-ID: &lt;001601c25c21$14eb5b40$a000a8c0@seairthlaptop&gt;\r\nTo: &quot;rest-discuss&quot; &lt;rest-discuss@yahoogroups.com&gt;\r\nSubject: REST without PUT and other things...\r\nDate: Sat, 14 Sep 2002 15:01:06 -0400\r\nMIME-Version: 1.0\r\nContent-Type: text/plain;\n\tcharset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: 7bit\r\nX-Priority: 3\r\nX-MSMail-Priority: Normal\r\nX-Mailer: Microsoft Outlook Express 6.00.2800.1106\r\nX-MimeOLE: Produced By Microsoft MimeOLE V6.00.2800.1106\r\nFrom: &quot;Seairth Jacobs&quot; &lt;seairth@...&gt;\r\nX-Yahoo-Group-Post: member; u=80827773\r\nX-Yahoo-Profile: seairthjacobs\r\n\r\nIn a recent post [1], I was asking about performing resource creation with\nPOST only.  My conclusion has been that this is a good thing.  What&#39;s more,\nas I was falling asleep last night, additional thoughts occurred to me that\nI now feel the need to share with the list.  Tell me what you think...\n\n\nI contend that PUT does not fit well with the REST model.  First, there is\nthe issue of resource creation.  PUT is allowed to submit a &quot;non-existing&quot;\nrequest-URI as if it did exist.  This request-URI has no identity whatsoever\n(not even with the request-entity that will become the new resource).  From\nmy ever-evolving understanding of REST, allowing the usage of URIs in this\nmanner is just plain wrong.  I absolutely agree with this regardless of\nREST.  As I recently mentioned [1], I feel that using POST to create all\nresources is just as effective and keeps the URI rules simple.\n\nSecond, there is the issue of resource update.  PUT is designed to only\nreplace an entire resource.  It is not capable of updating only a part of\nthe resource.  Not only is this very limited in terms of functionality, but\nPOST can do the same thing!  So, why have a separate PUT verb when POST\nwould work as well?  I can&#39;t think of a single good reason.\n\nSuppose, when working within the REST model, we were to entirely ignore PUT.\nWhen using HTTP, the only verbs that would be recognized would be:\n\n    GET : safe, idempotent retrieval of an existing resource\n    POST: update of existing resource / creation of new resource.\n    DELETE: deletion of existing resource.\n\nGET is a no-brainer here.  We all pretty much agree how it should and show\nnot be used.\n\nPOST is now taking on the responsibility that PUT provided (not any more\nthan it does now, really).  To clarify POST &quot;new&quot;\nresponsibilities/capabilities:\n\n1) POST may request the creation of a new resource.  If you want POST to act\nlike PUT, all you need to do is pass the URI that you would like to have the\nnew resource located at.  This could be done in the request-entity, but I\nsuggest instead using the &quot;Location:&quot; header (yes, I know it&#39;s a response\nheader in the spec [2:14.30]).  This would allow a POST like the following:\n\n    POST existing-URI-path\n    Location: new-URI\n\n    &lt;entity&gt;\n\nThe server would be able to use the request-URI to appropriately act upon\nthe request, and it may then choose to honor the requested Location or not\njust as it would with a PUT&#39;s request-URI. The difference here is that the\nrequest-URI must *always* exist, which is not the case for PUT.\n\n2) POST may request that a resource be updated.  This could be done in a\ncouple different ways:\n    a) The request-URI is a resource responsible for updating other\nresources, where the resource knows enough context from the request to\nupdate the appropriate resource.  This could include the use of the Location\nrequest header as well.\n    b) The request-URI is the resource that is to be updated.  This\nparticular method is most like PUT.  However, unlike PUT it would still be\npossible for the resource to be partially updated in this case.\n\n\n\nDELETE still works like it does now.  However, it should be noted that usage\nof DELETE doesn&#39;t necessarily delete the actual resource.  It definitely\ninvalidates the relationship between the request-URI and it&#39;s currently\nassociated resource (thereby making *appear* as if the resource is deleted\nto the client), but whether the actual resource goes entirely away is up to\nthe server only.  I am of the mind that DELETE should return the following:\n\n200,202,204: If the URI was valid and the request is accepted (as stated in\nthe spec [2:9.7]).\n404: If the URI is invalid and the server does not know if it used to point\nat a resource.\n410: If the URI is invalid and the server knows that it used to point at a\nresource.\n\nThis does mean that DELETE would not be strictly idempotent, but the client\ncould still act as if it were (i.e. treat all responses as the same as 200).\n\n\n\nPart of the reason for suggesting that PUT should be depricated when working\nin the REST model is due to the REST model itself.  REST specifically talks\nof simple, uniform interfaces.  As is evident from threads on this list,\nhaving both a PUT and a POST is not a simple, uniform interface.  As I see\nit, within the context of REST, POST is necessary, while PUT is optional.\nGetting rid of PUT provides a simple, uniform interface as REST mentions.\n\nAn objection that I have seen in recent posts that will undoubtedly be\nbrought back up due to my usage of POST above is the ability to POST an\nupdate to the resource directly.  To some, this may be considered a\nviolation of the proper use of POST, where the request-entity is considered\nto be subordinate to the resource.  To me, I see no conflict here.  Take the\ndirectory-file example mentioned in the spec [2:9.5].  If you were to POST a\n&quot;file&quot; to a &quot;directory&quot;, this would also update the directory itself (since\nthe file is part of the directory resource).  Any resource update could be\nviewed within the same light (update of a subordinate is update of itself as\nwell).  And I don&#39;t see anything in the HTTP spec that says a subordinate\nmust be accessible independently of the parent resource.\n\nAlso, some (or maybe all) of you may be disagreeing with my usage of\n&quot;Location&quot; above.  However, this makes perfect sense to me.  Usage of\nLocation in a POST request allows all of the functionality of PUT without\nhaving to embed any additional data in the request-entity itself.  Further,\nby use Location instead of the request-URI to indicate a new URI, we ensure\nthat only existing URIs may be used for a request-URI.  This also adresses\nthe ability for a client to be able to construct URIs.  A client could\nconstruct a new string that will become a URI and place it in the Location\nheader.  The server could then act on it independent of the actual\nrequest-URI.  Therefore, the request-URI still stays opaque without losing\nany capabilities from the client&#39;s POV.\n\n\n[1] http://groups.yahoo.com/group/rest-discuss/message/2543\n[2] http://www.ietf.org/rfc/rfc2616.txt\n\n\n---\nSeairth Jacobs\nseairth@...\n\n\n"}}
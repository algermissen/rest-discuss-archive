{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":230545179,"authorName":"Ryan Shaw","from":"Ryan Shaw &lt;rshaw@...&gt;","profile":"ryan_b_shaw","replyTo":"SENDER","senderId":"bkb5iKE9AFNwVp8Rko-AHKdMjo7g04A9ffarZ297Gt7CUgAT7SGVE-mtwE46hU8b3qMHEIRj8JySxYFc-uQIM_03IE79fA","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Best practices for crippled HTTP clients?","postDate":"1131406974","msgId":5436,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQzNkZFNjdFLjQwOTA4MDhAeWFob28taW5jLmNvbT4=","inReplyToHeader":"PDQzNkZERkQ0LjcwMzA3MDJAcGVlai5jby51az4=","referencesHeader":"PDQzNkJBQUMzLjcwNzA5MDFAeWFob28taW5jLmNvbT4gPDQzNkZERkQ0LjcwMzA3MDJAcGVlai5jby51az4="},"prevInTopic":5434,"nextInTopic":5440,"prevInTime":5435,"nextInTime":5437,"topicId":5409,"numMessagesInTopic":23,"msgSnippet":"... Is this POST(a) and POST(p) terminology something you re using for illustrative purposes in this email, or is this a more widely known distinction? Cheers,","rawEmail":"Return-Path: &lt;rshaw@...&gt;\r\nX-Sender: rshaw@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 86012 invoked from network); 7 Nov 2005 23:43:42 -0000\r\nReceived: from unknown (66.218.66.167)\n  by m32.grp.scd.yahoo.com with QMQP; 7 Nov 2005 23:43:42 -0000\r\nReceived: from unknown (HELO herald.sims.berkeley.edu) (128.32.226.90)\n  by mta6.grp.scd.yahoo.com with SMTP; 7 Nov 2005 23:43:42 -0000\r\nReceived: from irony.sims.berkeley.edu (irony.sims.berkeley.edu [128.32.226.49])\n\tby herald.sims.berkeley.edu (8.13.1/8.13.1) with ESMTP id jA7NhLhw005042;\n\tMon, 7 Nov 2005 15:43:21 -0800 (PST)\r\nReceived: from [10.24.16.79] ([203.125.28.114])\n\t(authenticated bits=0)\n\tby irony.sims.berkeley.edu (8.13.1/8.13.1) with ESMTP id jA7NgtLh017114\n\t(version=TLSv1/SSLv3 cipher=RC4-MD5 bits=128 verify=NOT);\n\tMon, 7 Nov 2005 15:43:00 -0800 (PST)\r\nMessage-ID: &lt;436FE67E.4090808@...&gt;\r\nDate: Tue, 08 Nov 2005 07:42:54 +0800\r\nUser-Agent: Thunderbird 1.5 (Windows/20051025)\r\nMIME-Version: 1.0\r\nTo: Paul James &lt;yahoogroups@...&gt;\r\nCc: REST Discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nReferences: &lt;436BAAC3.7070901@...&gt; &lt;436FDFD4.7030702@...&gt;\r\nIn-Reply-To: &lt;436FDFD4.7030702@...&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-Scanned-By: MIMEDefang 2.44\r\nX-eGroups-Msg-Info: 1:12:0:0\r\nFrom: Ryan Shaw &lt;rshaw@...&gt;\r\nSubject: Re: [rest-discuss] Best practices for crippled HTTP clients?\r\nX-Yahoo-Group-Post: member; u=230545179; y=DyErZdqsdkp70_T8mqaT46ZoXXAmC6vnw4KD7EEC0B6P9D3-Huw\r\nX-Yahoo-Profile: ryan_b_shaw\r\n\r\nPaul James wrote:\n\n&gt; Ryan Shaw wrote:\n&gt;\n&gt;&gt; Are there any best practices for designing REST services which are\n&gt;&gt; usable by web clients that do not support HTTP methods other than GET\n&gt;&gt; and POST? Ideally I would like to have a &quot;proper&quot; API using the full set\n&gt;&gt; of HTTP methods, with some &quot;transitional&quot; interfaces to support clients\n&gt;&gt; (like Flash) that currently cannot PUT or DELETE.\n&gt;&gt;\n&gt;&gt; Thanks,\n&gt;&gt; Ryan\n&gt; \n&gt; Here&#39;s my two pence on the issue of POST(a), PUT and DELETE tunnelling \n&gt; through POST(p) browser issue.\n&gt; \n&gt; First lets separate our resources into two types, data resources and \n&gt; application resources. Data resources represent the model of our \n&gt; application and respond to GET, POST(a), PUT and DELETE in a RESTful \n&gt; manner. Application resources are our  forms.\n&gt; \n&gt; So to update one of our application resources, we can PUT a \n&gt; representation directly to the resource using our rich client or machine \n&gt; automation. But then with a browser, we can GET our &quot;update our model&quot; \n&gt; form that POSTs a request to update the model resource, our application \n&gt; resource (form) validates the request and does a PUT on our model resource.\n&gt; \n&gt; Some might say that this is tunnelling a PUT through a POST request, but \n&gt; POST(p) is supposed to be open ended and mean &quot;process this&quot;, I think \n&gt; it&#39;s fair game for an application resource to manipulate a data resource \n&gt; via POST (as long as the request doesn&#39;t change the application resource \n&gt; itself).\n\nIs this POST(a) and POST(p) terminology something you&#39;re using for \nillustrative purposes in this email, or is this a more widely known \ndistinction?\n\nCheers,\nRyan\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":352334505,"authorName":"Craig McClanahan","from":"Craig McClanahan &lt;craigmcc@...&gt;","profile":"craig_mcclanahan","replyTo":"SENDER","senderId":"kXQ8FkT33ARTKFr5GAI3BIksUKsTVfg7EhA3UpPtPgaaTEFH1e8ymHJndxMBhSUxBMVQ0RAFr2dZyQXCStW3aC98RGa4Xrb4CmBO9g","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Re: Thoughts about URLs for a REST driven website","postDate":"1267847063","msgId":15007,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGY4YjM5YWNlMTAwMzA1MTk0NHY0YjJjZmQxYnM1OTIwY2M0OTFlM2Y3NTJkQG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PGI1NDhkZjY1MTAwMzA1MTgwNHA3MTdkZTUwZXg2NjdlYmM4ZDZjYmFmMDhiQG1haWwuZ21haWwuY29tPg==","referencesHeader":"PGY4YjM5YWNlMTAwMzA1MDg0OHc1MTYzNjU2OHlkMjIxMzg5YWRkN2NkZTRkQG1haWwuZ21haWwuY29tPgkgPDk2NTYwMS40MDQxLnFtQHdlYjU1OTA4Lm1haWwucmUzLnlhaG9vLmNvbT4JIDxiNTQ4ZGY2NTEwMDMwNTE4MDRwNzE3ZGU1MGV4NjY3ZWJjOGQ2Y2JhZjA4YkBtYWlsLmdtYWlsLmNvbT4="},"prevInTopic":15006,"nextInTopic":15008,"prevInTime":15006,"nextInTime":15008,"topicId":14978,"numMessagesInTopic":41,"msgSnippet":"... particular user, but that doesn t cover Kevin s use case where /orders/{id} is valid for both of us, but we should not be able to see each other s","rawEmail":"Return-Path: &lt;craigmcc@...&gt;\r\nX-Sender: craigmcc@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 11396 invoked from network); 6 Mar 2010 03:50:59 -0000\r\nX-Received: from unknown (66.196.94.107)\n  by m1.grp.sp2.yahoo.com with QMQP; 6 Mar 2010 03:50:59 -0000\r\nX-Received: from unknown (HELO mail-pv0-f169.google.com) (74.125.83.169)\n  by mta3.grp.re1.yahoo.com with SMTP; 6 Mar 2010 03:50:59 -0000\r\nX-Received: by pvh11 with SMTP id 11so1257615pvh.28\n        for &lt;rest-discuss@yahoogroups.com&gt;; Fri, 05 Mar 2010 19:50:13 -0800 (PST)\r\nMIME-Version: 1.0\r\nX-Received: by 10.142.210.17 with SMTP id i17mr1225063wfg.146.1267847063309; \n\tFri, 05 Mar 2010 19:44:23 -0800 (PST)\r\nIn-Reply-To: &lt;b548df651003051804p717de50ex667ebc8d6cbaf08b@...&gt;\r\nReferences: &lt;f8b39ace1003050848w51636568yd221389add7cde4d@...&gt;\n\t &lt;965601.4041.qm@...&gt;\n\t &lt;b548df651003051804p717de50ex667ebc8d6cbaf08b@...&gt;\r\nDate: Fri, 5 Mar 2010 19:44:23 -0800\r\nMessage-ID: &lt;f8b39ace1003051944v4b2cfd1bs5920cc491e3f752d@...&gt;\r\nTo: mike amundsen &lt;mamund@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nContent-Type: multipart/alternative; boundary=000e0cd32ed6d69332048119a507\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Craig McClanahan &lt;craigmcc@...&gt;\r\nReply-To: craigmcc@...\r\nSubject: Re: [rest-discuss] Re: Thoughts about URLs for a REST driven website\r\nX-Yahoo-Group-Post: member; u=352334505; y=TfkJzQPo54butAkShljpTybITbw81wrzaPgnYxAUy7W02z9orBajpdpqCw\r\nX-Yahoo-Profile: craig_mcclanahan\r\n\r\n\r\n--000e0cd32ed6d69332048119a507\r\nContent-Type: text/plain; charset=ISO-8859-1\r\n\r\nOn Fri, Mar 5, 2010 at 6:04 PM, mike amundsen &lt;mamund@...&gt; wrote:\n\n&gt;\n&gt;\n&gt; It sounds like you are asking about how to handle authorization (not\n&gt; authentication). If so, that&#39;s not really a REST issue, but an\n&gt; implementation detail for HTTP apps.\n&gt;\n&gt; In my HTTP applications I refer to a list of URIs (or regexp-based URI\n&gt; templates) plus a list of HTTP methods for each authenticated user; storage\n&gt; and representation can vary to taste. Consider a user-centered\n&gt; representation of an application&#39;s access control list for a user:\n&gt;\n&gt; &lt;user id=&quot;mamund&quot;&gt;\n&gt;   &lt;acl href=&quot;/(.*)&quot; methods=&quot;GET,HEAD,OPTIONS&quot; /&gt; &lt;!-- default access --&gt;\n&gt;   &lt;acl href=&quot;/admin/(.*)&quot; methods=&quot;!&quot;/&gt; &lt;!-- deny all methods --&gt;\n&gt;   &lt;acl href=&quot;/mamund/(.*)&quot; methods=&quot;*&quot;/&gt; &lt;!-- allow all methods --&gt;\n&gt; &lt;/user&gt;\n&gt;\n&gt; All that is left is to compare the incoming request&#39;s METHOD + URI against\n&gt; the above list. Any access failures result in a &quot;403 Forbidden&quot; response.\n&gt;\n&gt; This approach works if a URL template is either valid or not for a\nparticular user, but that doesn&#39;t cover Kevin&#39;s use case where\n&quot;/orders/{id}&quot; is valid for both of us, but we should not be able to see\neach other&#39;s orders.\n\nAs you mentioned, this is not a REST issue at all, because exactly the same\nscenario applies to a traditional webapp where a crafty user might try to\nhand modify the URL that displays an order&#39;s content, plugging in someone\nelse&#39;s orderid to see if the system will let him see it.  A properly\ndesigned webapp should not; neither should a web service.\n\nThere&#39;s lots of ways to implement this in the back end.  At Jive, for\nexample, we have a low level DAO that handles the database calls with no\nauthorization (could be JPA or Hibernate or whatever), and a higher level\n&quot;manager&quot; that checks whether the authenticated user has access to the the\nrequested data.  This is what all of the other business logic in the\napplication calls -- the DAO is *only* used by the corresponding manager.\n\nThe rules for determining authorized access are necessarily domain specific,\nbut for the use case being described it&#39;s pretty simple -- if the\nauthenticated user owns the requested order, the data should be returned;\notherwise it should not.\n\nAnd you should use exactly the same logic behind a REST service and a\ncorresponding webapp that supports HTML based access to the same data.\n\nCraig\n\nPS:  Kevin, if you&#39;re really willing to give me your security token and your\nidentity, as well as the URL for your order, give me a second to set up a\nlittle HTML form so you can give me your banking login credentials too :-).\n\r\n--000e0cd32ed6d69332048119a507\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;br&gt;&lt;br&gt;\n&lt;div class=3D&quot;gmail_quote&quot;&gt;On Fri, Mar 5, 2010 at 6:04 PM, mike am=\r\nundsen &lt;span dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:mamund@...&quot;&gt;mamund@yah=\r\noo.com&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;\n&lt;blockquote style=3D&quot;BORDER-LEFT: #ccc 1px=\r\n solid; MARGIN: 0px 0px 0px 0.8ex; PADDING-LEFT: 1ex&quot; class=3D&quot;gmail_quote&quot;=\r\n&gt;\n&lt;div style=3D&quot;BACKGROUND-COLOR: #fff&quot;&gt;&lt;span&gt;=A0&lt;/span&gt; \n&lt;div&gt;\n&lt;div&gt;\n&lt;div&gt;=\r\n\n&lt;p&gt;It sounds like you are asking about how to handle authorization (not au=\r\nthentication). If so, that&#39;s not really a REST issue, but an implementa=\r\ntion detail for HTTP apps.=A0 \n&lt;div&gt;&lt;br&gt;&lt;/div&gt;\n&lt;div&gt;In my HTTP applications=\r\n I refer to a list of URIs (or regexp-based URI templates) plus a list of H=\r\nTTP methods for each authenticated user; storage and representation can var=\r\ny to taste. Consider a user-centered representation of an application&#39;s=\r\n access control list for a user:&lt;/div&gt;\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;\n&lt;div&gt;&lt;user id=3D=\r\n&quot;mamund&quot;&gt;&lt;/div&gt;\n&lt;div&gt;=A0=A0&lt;acl href=3D&quot;/(.*)&quot; me=\r\nthods=3D&quot;GET,HEAD,OPTIONS&quot; /&gt; &lt;!-- default access --&gt;&lt;/d=\r\niv&gt;\n&lt;div&gt;=A0=A0&lt;acl href=3D&quot;/admin/(.*)&quot; methods=3D&quot;!&quo=\r\nt;/&gt; &lt;!-- deny all methods --&gt;&lt;/div&gt;\n&lt;div&gt;=A0=A0&lt;acl href=3D&qu=\r\not;/mamund/(.*)&quot; methods=3D&quot;*&quot;/&gt; &lt;!-- allow all method=\r\ns --&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/user&gt;&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;\n&lt;div&gt;All that is le=\r\nft is to compare the incoming request&#39;s METHOD + URI against the above =\r\nlist. Any access=A0failures result in a &quot;403 Forbidden&quot; response.=\r\n&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;\n&lt;div&gt;This a=\r\npproach works if a URL template is either valid or not for a particular use=\r\nr, but that doesn&#39;t cover Kevin&#39;s use case where &quot;/orders/{id}=\r\n&quot; is valid for both of us, but we should not be able to see each other=\r\n&#39;s orders.&lt;/div&gt;\n\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;As you mentioned, this is not a R=\r\nEST issue at all, because exactly the same scenario applies to a traditiona=\r\nl webapp where a crafty user might try to hand modify the URL that displays=\r\n an order&#39;s content, plugging in someone else&#39;s orderid to see if t=\r\nhe system will let him see it.=A0 A properly designed webapp should not; ne=\r\nither should a web service.&lt;/div&gt;\n\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;There&#39;s lots of =\r\nways to implement this in the back end.=A0 At Jive, for example, we have a =\r\nlow level DAO that handles the database calls with no authorization (could =\r\nbe JPA or Hibernate or whatever), and a higher level &quot;manager&quot; th=\r\nat checks whether the authenticated user has access to the the requested da=\r\nta.=A0 This is what all of the other business logic in the application call=\r\ns -- the DAO is *only* used by the corresponding manager.&lt;/div&gt;\n\n&lt;div&gt;=A0&lt;/=\r\ndiv&gt;\n&lt;div&gt;The rules for determining=A0authorized access=A0are necessarily d=\r\nomain specific, but for the use case being described it&#39;s pretty simple=\r\n -- if the authenticated user owns the requested order, the data should be =\r\nreturned; otherwise it should not.&lt;/div&gt;\n\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;And you=A0sho=\r\nuld use exactly the same logic behind a REST service and a corresponding we=\r\nbapp that supports HTML based access to the same data.&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;=\r\n\n&lt;div&gt;Craig&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;PS:=A0 Kevin, if you&#39;re really wi=\r\nlling to give me your security token and your identity, as well as the URL =\r\nfor your order, give me a second to set up a little HTML form so you can gi=\r\nve me your banking login credentials too :-). &lt;/div&gt;\n\n&lt;div&gt;=A0&lt;/div&gt;&lt;/div&gt;\n\r\n--000e0cd32ed6d69332048119a507--\r\n\n"}}
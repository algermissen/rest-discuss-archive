{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":80827773,"authorName":"Seairth Jacobs","from":"&quot;Seairth Jacobs&quot; &lt;seairth@...&gt;","profile":"seairthjacobs","replyTo":"SENDER","senderId":"8LIZbgG-sVGJ8r-P1dptTvfgqA7qEjpNMjDwVtZpwCLYHjCeosJEbb-IqKSuTcrBaOXkZKJG3wtceGNbuBxepjb4igCdp9JOQOtmjHA","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Beating my head against the &quot;session management&quot; wall","postDate":"1030370766","msgId":2222,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDAwMTAwMWMyNGQwOSRiOGFmNWQyMCQ2NDAwYThjMEBzZWFpcnRobGFwdG9wPg==","referencesHeader":"PDAwMDkwMWMyNGNhYSRjNTRhYTUzMCQ2NDAwYThjMEBzZWFpcnRobGFwdG9wPiA8MDEzZTAxYzI0Y2MyJGY1MzkzYTUwJDI2MGJhOGMwQG1ub3RsYXB0b3A+"},"prevInTopic":2218,"nextInTopic":2228,"prevInTime":2221,"nextInTime":2223,"topicId":2217,"numMessagesInTopic":13,"msgSnippet":"That wasn t helpful at all (with apologies :)).  If there is no session means to say that you get rid of the concept of sessions when using the REST model,","rawEmail":"Return-Path: &lt;seairth@...&gt;\r\nX-Sender: seairth@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_1_0_1); 26 Aug 2002 14:05:55 -0000\r\nReceived: (qmail 81801 invoked from network); 26 Aug 2002 14:05:24 -0000\r\nReceived: from unknown (66.218.66.217)\n  by m2.grp.scd.yahoo.com with QMQP; 26 Aug 2002 14:05:24 -0000\r\nReceived: from unknown (HELO mail.bbglobex.com) (208.251.163.4)\n  by mta2.grp.scd.yahoo.com with SMTP; 26 Aug 2002 14:05:24 -0000\r\nReceived: from seairthlaptop [68.10.252.58] by mail.bbglobex.com with ESMTP\n  (SMTPD32-7.12) id A4B512C00C0; Mon, 26 Aug 2002 10:01:25 -0400\r\nMessage-ID: &lt;001001c24d09$b8af5d20$6400a8c0@seairthlaptop&gt;\r\nTo: &quot;rest-discuss&quot; &lt;rest-discuss@yahoogroups.com&gt;\r\nReferences: &lt;000901c24caa$c54aa530$6400a8c0@seairthlaptop&gt; &lt;013e01c24cc2$f5393a50$260ba8c0@mnotlaptop&gt;\r\nSubject: Re: [rest-discuss] Beating my head against the &quot;session management&quot; wall\r\nDate: Mon, 26 Aug 2002 10:06:06 -0400\r\nMIME-Version: 1.0\r\nContent-Type: text/plain;\n\tcharset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: 7bit\r\nX-Priority: 3\r\nX-MSMail-Priority: Normal\r\nX-Mailer: Microsoft Outlook Express 6.00.2600.0000\r\nX-MimeOLE: Produced By Microsoft MimeOLE V6.00.2600.0000\r\nFrom: &quot;Seairth Jacobs&quot; &lt;seairth@...&gt;\r\nX-Yahoo-Group-Post: member; u=80827773\r\nX-Yahoo-Profile: seairthjacobs\r\n\r\nThat wasn&#39;t helpful at all (with apologies :)).  If &quot;there is no session&quot;\nmeans to say that you get rid of the concept of sessions when using the REST\nmodel, then I honestly do not see how REST could be successfully applied to\nthe majority of existing web applications today.  Further, if anyone\nconsiders HTTP authentication to not be a session-handling method (though I\nknow you didn&#39;t say this), I strongly disagree.\n\nAnd what do you mean by the second quote?\n\n\nIf these quotes are the answers to my session-handling issues, then I\nobviously have a gross misunderstanding about how REST is meant to work...\n\n---\nSeairth Jacobs\nseairth@...\n\n\n----- Original Message -----\nFrom: &quot;Mark Nottingham&quot; &lt;mnot@...&gt;\n\n&gt; This may be helpful:\n&gt;\n&gt;   &quot;There is no session&quot;\n&gt;\n&gt; and\n&gt;\n&gt;   &quot;You&#39;ll come to realize, as I did, that there&#39;s a difference between\n&gt; knowing the resource and representing the resource.&quot;\n&gt;\n&gt; (with apologies)\n&gt;\n&gt;\n&gt;\n&gt; ----- Original Message -----\n&gt; From: &quot;Seairth Jacobs&quot; &lt;seairth@...&gt;\n&gt; To: &quot;rest-discuss&quot; &lt;rest-discuss@yahoogroups.com&gt;\n&gt; Sent: Sunday, August 25, 2002 7:46 PM\n&gt; Subject: [rest-discuss] Beating my head against the &quot;session management&quot;\n&gt; wall\n&gt;\n&gt;\n&gt; &gt; *sigh*  Do you ever have the feeling that the solutions set before you\n&gt; are\n&gt; &gt; all not-quite-good-enough, each in their own way?  Currently, this is\n&gt; how I\n&gt; &gt; am feeling about session management when it comes to REST...\n&gt; &gt;\n&gt; &gt; Known options:\n&gt; &gt;\n&gt; &gt; 1) HTTP Authentication:  This is a simple, non-intrusive solution.\n&gt; However,\n&gt; &gt; &quot;basic&quot; is insecure and &quot;digest&quot; is not consistently implemented.\n&gt; &gt;\n&gt; &gt; 2) Generating your own &quot;session id&quot;.  This has the problem that you must\n&gt; &gt; provide an &quot;intrusive&quot; login screen/process.  Further, you then need to\n&gt; &gt; continue tracking the session id.  With this, there are two techniques\n&gt; &gt; (well, three sorta):\n&gt; &gt;\n&gt; &gt;     a) Session Cookie:  If done properly, this is effectively no\n&gt; different\n&gt; &gt; than http authentication in the sense that the browser is sending an\n&gt; &gt; &quot;authenticating&quot; identifier with each request.  Session cookies are\n&gt; somewhat\n&gt; &gt; nicer than http authentication in that they are potentially more secure\n&gt; (if\n&gt; &gt; done correctly) and that it is easier for the server to handle them\n&gt; (e.g.\n&gt; &gt; deleting them, updating them, etc.).  The major down side is that\n&gt; current\n&gt; &gt; browsers allow the users to reject session cookies.\n&gt; &gt;\n&gt; &gt;     b) Query String:  This one, from a REST POV, seems like a really bad\n&gt; &gt; technique.  This effectively creates non-permanent unique URL spaces for\n&gt; &gt; each user session.  Further, the session id may not actually be related\n&gt; to\n&gt; &gt; the resource that the URL (with the query string) is pointing to.\n&gt; However,\n&gt; &gt; the good thing about query strings is that, short of a user typing an\n&gt; &gt; address into the browser or using a stored link, the server has control\n&gt; over\n&gt; &gt; them and the user does not have the ability to reject them.\n&gt; &gt;\n&gt; &gt;     c) Hidden Field: if you are not using the QueryString method and are\n&gt; &gt; have a form, you could put the session id in a hidden field.  However,\n&gt; you\n&gt; &gt; are then limited to using only the POST method.  Otherwise, the browser\n&gt; will\n&gt; &gt; generate a URL with your hidden field showing up in a QueryString.  But,\n&gt; if\n&gt; &gt; the request is guaranteed to be idempotent, then it is my understanding\n&gt; that\n&gt; &gt; the GET method should be used, not POST.\n&gt; &gt;\n&gt; &gt;\n&gt; &gt; Now, I know that all of the above methods (with the possible exception\n&gt; of\n&gt; &gt; digest authentication, if done correctly and at a certain cost) still\n&gt; allows\n&gt; &gt; someone to sniff the connection and get enough information to\n&gt; potentially\n&gt; &gt; mimic the session.  This could all be taken care of using SSL (at which\n&gt; &gt; point, even basic authentication is secure), but that seems to be adding\n&gt; a\n&gt; &gt; lot of overhead.  When I only need to authenticate the request, not\n&gt; secure\n&gt; &gt; the response, this seems like overkill (and it can be expensive too).\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt; Frankly, I think I am leaning towards session cookies at this point.\n&gt; Since\n&gt; &gt; the site will primarily be for web developers, I am hoping that they at\n&gt; &gt; least accept session cookies.  I would have liked to go the HTTP\n&gt; &gt; authentication route, but it just seems to unsecure for my taste\n&gt; &gt; (considering the fact that I am not using SSL).  If anyone out there can\n&gt; &gt; convince my why I should not follow this route, esp. as far as REST is\n&gt; &gt; concerned, please say so.  I really would like to be convinced of\n&gt; another\n&gt; &gt; method.\n&gt; &gt;\n&gt; &gt;\n&gt; &gt; IN THE MEANTIME....\n&gt; &gt;\n&gt; &gt; I have been thinking of this dilemma (the one above).  And I have an\n&gt; idea.\n&gt; &gt; I am wondering whether the idea would work well with the REST model or\n&gt; not.\n&gt; &gt; If it would, I would like to get a group of people together to formalize\n&gt; it\n&gt; &gt; and get it submitted to the right people.\n&gt; &gt;\n&gt; &gt; What I propose is that web browsers should support a new HTTP header\n&gt; called\n&gt; &gt; &quot;session-id&quot;.  This header would conform to the following rules:\n&gt; &gt;\n&gt; &gt; 1) The header works sort of like a session cookie.  When the header is\n&gt; sent\n&gt; &gt; to the browser, you can specify the domain and path (http authentication\n&gt; &gt; realm?) and an expiration timestamp.  The timestamp only ensures that\n&gt; the\n&gt; &gt; header will stop being sent back to the server if the browser is not\n&gt; closed\n&gt; &gt; by that point.  Just like current cookies, setting the timestamp to the\n&gt; past\n&gt; &gt; will cause the session-id header to become immediately stale.\n&gt; &gt;\n&gt; &gt; 2) THE USER MAY NOT REJECT THE HEADER.  Browsers that allow optional\n&gt; &gt; rejection will be considered NON-STANDARDS-COMPLIANT.  Proxies SHOULD\n&gt; NOT\n&gt; &gt; REJECT THE HEADER.  I would prefer to make this MAY NOT, but I doubt it\n&gt; &gt; would stick.  What are proxies allowed to do with the www-authenticate\n&gt; &gt; header?\n&gt; &gt;\n&gt; &gt; 3) the www-authenticate and session-id headers are mutually exclusive.\n&gt; In\n&gt; &gt; other words, if a browser receives a session-id header which matches the\n&gt; &gt; existing realm, the browser dumps the www-authenticate response and uses\n&gt; &gt; session-id instead.  This allows the http authentication methods to\n&gt; still be\n&gt; &gt; used, but also allows the request headers to be replaced with something\n&gt; that\n&gt; &gt; is more controllable by the server.\n&gt; &gt;\n&gt; &gt;\n&gt; &gt; Though I know that more thought needs to be put into the idea, I feel it\n&gt; &gt; would provide the consistency of basic authentication, the flexibility\n&gt; and\n&gt; &gt; overhead of cookies, and the security of digest authentication.  Note\n&gt; that\n&gt; &gt; it is not even necessary to use HTML forms, since http authentication\n&gt; could\n&gt; &gt; be used as the first step then replaced as in #3 above.  However, if one\n&gt; &gt; *really* wants the nice look, they could do that as well.\n&gt; &gt;\n&gt; &gt; So, what do you all think?  Would this interfere with the REST model?\n&gt; &gt;\n&gt; &gt; ---\n&gt; &gt; Seairth Jacobs\n&gt; &gt; seairth@...\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt; To unsubscribe from this group, send an email to:\n&gt; &gt; rest-discuss-unsubscribe@yahoogroups.com\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt; Your use of Yahoo! Groups is subject to\n&gt; http://docs.yahoo.com/info/terms/\n&gt; &gt;\n&gt; &gt;\n&gt;\n&gt;\n&gt;\n&gt; To unsubscribe from this group, send an email to:\n&gt; rest-discuss-unsubscribe@yahoogroups.com\n&gt;\n&gt;\n&gt;\n&gt; Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/\n&gt;\n&gt;\n&gt;\n\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":80827773,"authorName":"Seairth Jacobs","from":"&quot;Seairth Jacobs&quot; &lt;seairth@...&gt;","profile":"seairthjacobs","replyTo":"SENDER","senderId":"BQduyW6O7_tpAkRQun0Zomtoxv9ex7GqvjcDgqv-7QBg1JOEfEMjhBn07n72z5TeLNMJZgwQB_WsJAhEm2LJskpf3uPhCbXdPyoB7BI","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Rediscovering Web Architecture  from first principles","postDate":"1031975166","msgId":2543,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDAwZmYwMWMyNWJhMSQ0MWRmOTgzMCRhMDAwYThjMEBzZWFpcnRobGFwdG9wPg==","referencesHeader":"PDNEODBEN0EwLjcwMTAwMDBAcHJlc2NvZC5uZXQ+"},"prevInTopic":2542,"nextInTopic":2544,"prevInTime":2542,"nextInTime":2544,"topicId":2540,"numMessagesInTopic":7,"msgSnippet":"First, excellent summary.  There wasn t a single thing I found to disagree with.  :~) Second, you indicate something towards the end of the post that, if I ","rawEmail":"Return-Path: &lt;seairth@...&gt;\r\nX-Sender: seairth@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_1_1_3); 14 Sep 2002 03:45:27 -0000\r\nReceived: (qmail 36715 invoked from network); 14 Sep 2002 03:45:27 -0000\r\nReceived: from unknown (66.218.66.218)\n  by m11.grp.scd.yahoo.com with QMQP; 14 Sep 2002 03:45:27 -0000\r\nReceived: from unknown (HELO mail.bbglobex.com) (208.251.163.4)\n  by mta3.grp.scd.yahoo.com with SMTP; 14 Sep 2002 03:45:27 -0000\r\nReceived: from seairthlaptop [68.10.252.24] by mail.bbglobex.com with ESMTP\n  (SMTPD32-7.12) id AFAE5AE800D2; Fri, 13 Sep 2002 23:40:30 -0400\r\nMessage-ID: &lt;00ff01c25ba1$41df9830$a000a8c0@seairthlaptop&gt;\r\nTo: &quot;rest-discuss&quot; &lt;rest-discuss@yahoogroups.com&gt;\r\nReferences: &lt;3D80D7A0.7010000@...&gt;\r\nSubject: Re: [rest-discuss] Rediscovering Web Architecture  from first principles\r\nDate: Fri, 13 Sep 2002 23:46:06 -0400\r\nMIME-Version: 1.0\r\nContent-Type: text/plain;\n\tcharset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: 7bit\r\nX-Priority: 3\r\nX-MSMail-Priority: Normal\r\nX-Mailer: Microsoft Outlook Express 6.00.2800.1106\r\nX-MimeOLE: Produced By Microsoft MimeOLE V6.00.2800.1106\r\nFrom: &quot;Seairth Jacobs&quot; &lt;seairth@...&gt;\r\nX-Yahoo-Group-Post: member; u=80827773\r\nX-Yahoo-Profile: seairthjacobs\r\n\r\nFirst, excellent summary.  There wasn&#39;t a single thing I found to disagree\nwith.  :~)\n\nSecond, you indicate something towards the end of the post that, if I\nunderstand you correctly, mirrors a thought I have been having lately...\n\nFrom: &quot;Paul Prescod&quot; &lt;paul@...&gt;\n&gt;\n&gt; [deleted]\n&gt;\n&gt;    = Resource construction and mutation =\n&gt;\n&gt; [deleted]\n&gt;\n&gt; POST can handle any operation which changes client-side state in a\n&gt; manner that would be inappropriate for GET. But there are two operations\n&gt; that have pretty clear semantics that can be separated out from the mass\n&gt; of POST-based actions. Sometimes you have a URI and you want to\n&gt; overwrite its content. For instance you load a document into your word\n&gt; processor, make a few changes and want to save it back. Or you are\n&gt; maintaining a stock quote service and it is your job to udpdate the\n&gt; quotes as the most recently quoted price change. PUT allows these. The\n&gt; other operation is DELETE for destroying resources (i.e. making them\n&gt; into 404s).\n\nYou mention using PUT to update a resource, but not to create one.  In fact,\nthe only mention of creating a resource is by the use of POST.  However, the\nHTTP specs state the ability to create a resource with PUT.  But I am\nbeginning to wonder if the use of PUT in this manner is less RESTful.  I see\ntwo scenarios when using POST and PUT, the first being the way HTTP allows\nand the second being the artificially contstrained (but still perfectly\nlegal) way that I am beginning to lean towards.\n\nStandard HTTP Usage of POST and PUT:\n\n1) POST:\n    a) Request URI points to an existing resource that will be mutated by\nthe contents of the request entity.\n    b) Request URI points to an existing resource that will use the contents\nof the request entity to create a new resource.\n2) PUT:\n    a) Request URI points to an existing resource that will be entirely\nreplaced by the contents of the request entity (at least from the client&#39;s\nperspective).\n    b) Request URI does not point to an existing resource, in which case the\nserver creates a new resource from the request entity that is pointed to by\nthe request URI.\n\n\nConstrained Usage of POST and PUT:\n\n1) POST:\n    a) Request URI points to an existing resource that will be mutated by\nthe contents of the request entity.\n    b) Request URI points to an existing resource that will use the contents\nof the request entity to create a new resource.  This is the *only* method\nto create a new resource.  If the client wants the new resource to be\ncreated with a specific URI associated with it, this can be passed in the\nentity itself (though I wonder about using the Location header in the\nrequest).\n2) PUT:\n    a) Request URI points to an existing resource that will be entirely\nreplace by the contents of the request entity (at least from the client&#39;s\nperspective).\n    b) There is no option (b).  PUT is never used to create a new resource.\n\n\nAnd here is why I am taking this view:  Using PUT to create a resource with\na request URI just doesn&#39;t make sense.  In all other verbs (GET, POST, and\nDELETE), the URI must be valid and point to a resource.  This makes sense.\nYou are accessing a resource and you need a valid identifier to do it.  But\nfor PUT, this is only required part of the time.  In some cases, you can use\nPUT with an *invalid* URI (i.e. does not identify a resource) as if it were\nvalid.  By using the constrained view, resources can still be created while\nsimplifying the rules about URI usage at the same time.\n\nSo, is this a view you were expressing?  Is this view more consistant with\nREST (simplified interface)?  Or is this just a personal preference and not\nany more or less RESTful than the &quot;traditional&quot; usage of the verbs?\n\n---\nSeairth Jacobs\nseairth@...\n\n\n"}}
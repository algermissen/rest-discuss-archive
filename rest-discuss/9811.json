{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":145532415,"authorName":"Stefan Tilkov","from":"Stefan Tilkov &lt;stefan.tilkov@...&gt;","profile":"stilkov","replyTo":"SENDER","senderId":"EOxgbBfugaooDiZrIZ8KpB-8h3XWhPe1iyDRm85Nwhs4fkErfle35Bf203QqJehwm_CLn0oIYobXlIhIf5-5dEqP_bhgNdHMUGzdbtx0","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Questions regarding REST","postDate":"1194947667","msgId":9811,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDZBQjhDREM3LURDRUItNDM0RS05RDhDLUFDNTk3MDI5MDQzNkBpbm5vcS5jb20+","inReplyToHeader":"PGY1ZjVlMDczMDcxMTEyMTUzM3IzZWU4MTFkN282MjRjYWJlY2U2MTc0YWIyQG1haWwuZ21haWwuY29tPg==","referencesHeader":"PGY1ZjVlMDczMDcxMTA5MTUyN3IxMTcyZDExOXg3MmRmNmY3N2IxOWJmYzZhQG1haWwuZ21haWwuY29tPiA8REJBRDMzQTUtNTA1Qy00QzU1LTkzRjItNjc0RUFBMjhCOTZDQGlubm9xLmNvbT4gPGY1ZjVlMDczMDcxMTEyMTUzM3IzZWU4MTFkN282MjRjYWJlY2U2MTc0YWIyQG1haWwuZ21haWwuY29tPg=="},"prevInTopic":9810,"nextInTopic":9816,"prevInTime":9810,"nextInTime":9812,"topicId":9804,"numMessagesInTopic":13,"msgSnippet":"... After a quick read, I think you have understood it correctly. Maybe I m missing something, but I ve never seen this alternative before, and I can t","rawEmail":"Return-Path: &lt;stefan.tilkov@...&gt;\r\nX-Sender: stefan.tilkov@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 44807 invoked from network); 13 Nov 2007 09:57:02 -0000\r\nX-Received: from unknown (66.218.67.95)\n  by m55.grp.scd.yahoo.com with QMQP; 13 Nov 2007 09:57:02 -0000\r\nX-Received: from unknown (HELO notes.innoq.org) (217.160.213.102)\n  by mta16.grp.scd.yahoo.com with SMTP; 13 Nov 2007 09:57:02 -0000\r\nX-Received: from [10.0.1.3] ([89.245.28.199])\n          by notes.innoq.org (Lotus Domino Release 7.0)\n          with ESMTP id 2007111310570069-464 ;\n          Tue, 13 Nov 2007 10:57:00 +0100 \r\nMessage-Id: &lt;6AB8CDC7-DCEB-434E-9D8C-AC5970290436@...&gt;\r\nTo: REST Discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nIn-Reply-To: &lt;f5f5e0730711121533r3ee811d7o624cabece6174ab2@...&gt;\r\nMime-Version: 1.0 (Apple Message framework v912)\r\nDate: Tue, 13 Nov 2007 10:54:27 +0100\r\nReferences: &lt;f5f5e0730711091527r1172d119x72df6f77b19bfc6a@...&gt; &lt;DBAD33A5-505C-4C55-93F2-674EAA28B96C@...&gt; &lt;f5f5e0730711121533r3ee811d7o624cabece6174ab2@...&gt;\r\nX-Mailer: Apple Mail (2.912)\r\nX-MIMETrack: Itemize by SMTP Server on notes/innoQ(Release 7.0|August 18, 2005) at 11/13/2007\n 10:57:00,\n\tSerialize by Router on notes/innoQ(Release 7.0|August 18, 2005) at 11/13/2007\n 10:57:02,\n\tSerialize complete at 11/13/2007 10:57:02\r\nContent-Transfer-Encoding: 7bit\r\nContent-Type: text/plain; charset=US-ASCII; format=flowed; delsp=yes\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Stefan Tilkov &lt;stefan.tilkov@...&gt;\r\nSubject: Re: [rest-discuss] Questions regarding REST\r\nX-Yahoo-Group-Post: member; u=145532415; y=vBi3mYrhQt8tOTpMk54UlCJGN2Bw7DQK5CSgobnq6emAQA\r\nX-Yahoo-Profile: stilkov\r\n\r\nOn Nov 13, 2007, at 12:33 AM, Rajith Attapattu wrote:\n&gt; On Nov 12, 2007 2:26 AM, Stefan Tilkov &lt;stefan.tilkov@... &gt;  \n&gt; wrote:\n&gt; &gt;\n&gt; &gt;\n&gt; &gt; On Nov 10, 2007, at 12:27 AM, Rajith Attapattu wrote:\n&gt; &gt;\n&gt; &gt; &gt;\n&gt; &gt; &gt; Now what some folks suggest is that when you do a PUT http://abc.com/customer/1235/basket/\n&gt; &gt; &gt; (where the body contains a document that describes the items and\n&gt; &gt; &gt; quantities to add), you service that request and then you return a\n&gt; &gt; &gt; URL with the state encoded.\n&gt; &gt;\n&gt; &gt; That is an exceptionally weird design that I&#39;ve never seen suggested\n&gt; &gt; yet.\n&gt; &gt;\n&gt;\n&gt; I just read it on the following document.\n&gt; http://simplewebservices.org/index.php?title=Shopping\n&gt; (It maybe that I have misunderstood it.)\n&gt;\n&gt;\n\nAfter a quick read, I think you have understood it correctly. Maybe  \nI&#39;m missing something, but I&#39;ve never seen this alternative before,  \nand I can&#39;t convince myself to like it. (In case others haven&#39;t read  \nthis page: it suggests encoding information such as &quot;# of items of  \nproduct 1: 3, # of items of product 2: 5&quot; in a string and append it to  \nthe URI so that it itself carries the state.)\n\n&gt; &gt; &gt; 2) Most people do RPC over HTTP\n&gt; &gt;\n&gt; &gt; Hm, I think I disagree, but even if it were true - so what?\n&gt; Sorry I should have been more specific. What I meant to say was that\n&gt; most REST examples given by folks looks more RPC over HTTP than REST.\n&gt; It look like I got distracted while typing that question and didn&#39;t\n&gt; end up typing what I really wanted.\n&gt; Sorry about that.\n&gt;\n&gt;\n\nMaybe we&#39;re looking at different examples -- I always found most of  \nthe examples given by REST folks quite RESTful :-)\nHave you seen Joe&#39;s articles on the topic?\n\nhttp://www.xml.com/pub/au/225\n\n&gt; &gt;\n&gt; &gt; &gt; (Ex. some of the examples given in JSR 311 looks more RPC and not\n&gt; &gt; &gt; RESTful)\n&gt; &gt;\n&gt; &gt; Could you be more specific? Which examples?\n&gt; Stefan look at the calculator sample in the following url.\n&gt; http://developers.sun.com/docs/web/swdp/r2/tutorial/doc/p36.html\n&gt;\n&gt; To me it looks very RPC like.\n&gt;\n&gt;\n\nThat&#39;s the same one as the one we discussed below -- I believe it&#39;s  \nactually RESTful, although not a good example. In all fairness, I  \nthink in this case it&#39;s not used as an example for REST, but rather as  \nan example of how to use the API.\n\n&gt; &gt;\n&gt; &gt;\n&gt; &gt; &gt;\n&gt; &gt; &gt; What constraints in general does RPC/HTTP violate?\n&gt; &gt;\n&gt; &gt; Nearly all of them, but it of course depends on the particular RPC-\n&gt; &gt; style HTTP usage we&#39;re talking about. Often URLs are not used to\n&gt; &gt; identify resources, communication is stateful, the interface is not\n&gt; &gt; uniform, hypermedia is not used, and the meaning of the verbs is\n&gt; &gt; violated.\n&gt;\n&gt; So as a general rule, if a URL is used to identify an action\n&gt; (operation) instead of a resource then we can say it is not RESTful?\n&gt;\n\nYes and no. It should make you suspicious, but it might be  \naccidentally RESTful: if you just ignore the characters in the URI,  \ncould one argue that a resource is identified?\n\nSee http://www.markbaker.ca/blog//2005/04/14 (Mark&#39;s blog seems to be  \ndown (?), search Google for &quot;accidentally RESTful&quot;)\n\n&gt;\n&gt; This also seem to affect the uniform interface constraint as now u\n&gt; have different operations defined instead of the standard interface.\n&gt;\n&gt;\n\nYes, this may be the case if the &quot;operation&quot; in the URL is  \nincompatible with the HTTP verb used (example: GET http://example.com/1234/operation=delete)\n&gt; &gt; &gt; Consider the following examples\n&gt; &gt; &gt;\n&gt; &gt; &gt; doAddition(int x, int y) - POST http://abc.com/doAdittion/ (body\n&gt; &gt; &gt; contains x & y)\n&gt; &gt; &gt; this simply does an addition, but it is stateless. However  \n&gt; intuition\n&gt; &gt; &gt; tells me it&#39;s not RESTful.\n&gt; &gt; &gt; Why is that?? What have I misunderstood here?\n&gt; &gt;\n&gt; &gt; It seems perfectly RESTful to me - there doesn&#39;t seem to be any\n&gt; &gt; reasonable resource state. The URL smells of RPC, but it&#39;s just a\n&gt; &gt; string from a REST perspective. I&#39;d feel a little better if it  \n&gt; were /\n&gt; &gt; addition instead of /doAddition.\n&gt;\n&gt; Stefan, doesn&#39;t the URL identify an action, instead of a resource? or\n&gt; have I misunderstood this completely?\n&gt; Even if we use /addition the url seems to refer to an action.\n&gt;\n\nIt&#39;s just characters and words ... they don&#39;t matter from a REST  \nperspective. More philosophically, if I change the word to &quot;sum&quot;, e.g.\n\nhttp://example.com/sum?summand1=2&summand2=2\n\nwhy is this (&quot;the sum of 2 and 2&quot;) not not a resource?\n&gt;\n&gt; Doesn&#39;t the /xxx/addition/ imply that it refers to a heirarchy of  \n&gt; resources?\n&gt;\n\nNo, I could have written the above as\n\nhttp://example.com/sum/2/2\n\nwithout changing anything from a RESTful perspective. It may be  \nunusual, but it&#39;s not &quot;wrong&quot;.\n&gt;\n&gt; To me it looks very RPCish.\n&gt;\n&gt; &gt; In fact, I&#39;d even consider using GET\n&gt; &gt; as the operation is both safe and idempotent.\n&gt;\n&gt; The operation is always safe and idempotent irrespective of whether we\n&gt; use GET or POST.\n&gt;\n\nYes, which is why GET is a better choice.\n&gt;\n&gt; Bcos no matter how many times I invoke it, all it does is compute x  \n&gt; + y.\n&gt; So as long as u use the same x and y value, the computation will\n&gt; always return the same result.\n&gt;\n\nWhich aligns nicely with HTTP GET&#39;s caching support.\n\n&gt; &gt; Which is OK - the constraint says to avoid communication state, not\n&gt; &gt; resource state.\n&gt; Stefan, for a shopping cart resource, what is communication state and\n&gt; what is resource state?\n&gt;\n\nThat&#39;s your design decision.\n\n&gt;\n&gt; What if I persist my cart after every add/delete/update of my cart to\n&gt; the database instead of carrying it in my session?\n&gt;\n\nThen it would typically become resource state. In fact, this is my  \nfavorite approach to implementing a shopping cart - I have often  \nwanted to be able to send a link to my shopping cart to a colleague or  \nfriend to take a look at it, but couldn&#39;t because it was built using  \nsome idiotic session approach.\n\nConsidering that in &quot;enterprisey&quot; setups, products such as an  \napplication server cluster persist state to the database anyway, I  \ndon&#39;t see any wastefulness in this, either.\n\n&gt; &gt; &gt;\n&gt; &gt; &gt; Now if the server crashes after processing but before sending the\n&gt; &gt; &gt; response, or if the client crashes before getting the response,  \n&gt; the\n&gt; &gt; &gt; client will retry again.\n&gt; &gt; &gt; Now POST is not idempotent and each retry will keep on adding  \n&gt; money.\n&gt; &gt; &gt;\n&gt; &gt; &gt; Is this a category of applications that REST is not suitable  \n&gt; for? or\n&gt; &gt; &gt; else what is the correct form to use when building such  \n&gt; application\n&gt; &gt; &gt; in a RESTful way.\n&gt; &gt;\n&gt; &gt; You either switch to PUT or make POST idempotent. See Joe Gregorio&#39;s\n&gt; Hmm this means the client keeps sending it multiple times, but it\n&gt; would be nice (as Roy pointed out) if the server can tell the client\n&gt; to refresh it&#39;s state.\n&gt;\n&gt; Roy provided a nice solution by including a request number.\n&gt; But how can you do it in a standard way with different clients\n&gt; simillar to how WS-RM works.\n&gt;\n\nYou currently can&#39;t since there is no accepted standardized way for  \nreliable POST. Is there a need for one? I&#39;m not sure -- maybe some  \nthings should be left to the application, not everything needs to be  \nstandardized. Then again, the same was true for dealing with  \ncollections -- now we have a standard (with Atom and AtomPub).\n\n&gt;\n&gt; Aren&#39;t you kind of building your own little protocol to handle the\n&gt; requests in a relaible way by addition a request (or sequence number)\n&gt; ?\n&gt;\n\n\nYes.\n&gt; &gt; &gt; b) SSL is only point-to-point, so if you have to go through  \n&gt; multiple\n&gt; &gt; &gt; intermediaries, how would you ensure privacy, non  \n&gt; repudiation ..etc ?\n&gt; &gt;\n&gt; &gt; You can of course use XML Encryption and Digital Signature with\n&gt; &gt; RESTful HTTP, but that applies only if you&#39;re using XML. If SSL\n&gt; &gt; doesn&#39;t suit your needs, you may have a problem.\n&gt;\n&gt; I know that you could use XML Encryption and Digital Signature ..etc,\n&gt; but how do I do that in a standard way like what WS-* does?\n&gt; (I am not advocating WS-* or trying to start the whole REST vs WS-*\n&gt; debate here. I like to understand how these concerns are addressed)\n&gt; In other words how can I do so in an interoperable way when I deal\n&gt; with different clients? How can I let them know my policies ?\n&gt;\n&gt;\n\nYou can&#39;t. As to the need for standardization, see above.\n\nStefan\n--\nStefan Tilkov, http://www.innoq.com/blog/st/\n\n\n"}}
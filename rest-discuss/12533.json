{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":197516892,"authorName":"Anand Ramanathan","from":"Anand Ramanathan &lt;rcanand@...&gt;","profile":"rcanand","replyTo":"SENDER","senderId":"u0EjrvmLH2VtT2_4jGTOk_c71_oaBpzJPfOt6SAlEl6wxObduK-9sUhAMq28IJgaJ4K_JWkB9XdzwUtCViswzhxzTuv9HJp74-gr","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] MVC style REST scenarios","postDate":"1241214281","msgId":12533,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGQxMDQ5NWFhMDkwNTAxMTQ0NHMxMjUxYjU1NW5kNGUwNmYwZmNjNGI0YWRhQG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PDgxNThhZDc1MDkwNTAxMTMxNHE1OTM1YWY2M2djNmZmODVjOWIzMDEzY2I5QG1haWwuZ21haWwuY29tPg==","referencesHeader":"PGd0ZmhxbStjdGhlQGVHcm91cHMuY29tPiA8ODE1OGFkNzUwOTA1MDExMzE0cTU5MzVhZjYzZ2M2ZmY4NWM5YjMwMTNjYjlAbWFpbC5nbWFpbC5jb20+"},"prevInTopic":12530,"nextInTopic":12551,"prevInTime":12532,"nextInTime":12534,"topicId":12529,"numMessagesInTopic":8,"msgSnippet":"Thanks, Peter. That was very useful. Is your API built with this model public? It would be  useful to play with it to get a first hand experience. Thanks much ","rawEmail":"Return-Path: &lt;rcanand@...&gt;\r\nX-Sender: rcanand@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 84370 invoked from network); 1 May 2009 21:45:19 -0000\r\nX-Received: from unknown (98.137.34.44)\n  by m3.grp.sp2.yahoo.com with QMQP; 1 May 2009 21:45:19 -0000\r\nX-Received: from unknown (HELO yx-out-1718.google.com) (74.125.44.156)\n  by mta1.grp.sp2.yahoo.com with SMTP; 1 May 2009 21:45:19 -0000\r\nX-Received: by yx-out-1718.google.com with SMTP id 3so1700100yxi.76\n        for &lt;rest-discuss@yahoogroups.com&gt;; Fri, 01 May 2009 14:44:57 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.151.72.13 with SMTP id z13mr6383643ybk.170.1241214296079; Fri, \n\t01 May 2009 14:44:56 -0700 (PDT)\r\nIn-Reply-To: &lt;8158ad750905011314q5935af63gc6ff85c9b3013cb9@...&gt;\r\nReferences: &lt;gtfhqm+cthe@...&gt; &lt;8158ad750905011314q5935af63gc6ff85c9b3013cb9@...&gt;\r\nDate: Fri, 1 May 2009 14:44:41 -0700\r\nMessage-ID: &lt;d10495aa0905011444s1251b555nd4e06f0fcc4b4ada@...&gt;\r\nTo: Peter Keane &lt;pkeane@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Anand Ramanathan &lt;rcanand@...&gt;\r\nSubject: Re: [rest-discuss] MVC style REST scenarios\r\nX-Yahoo-Group-Post: member; u=197516892; y=PeeQIf9WIoYBosXCDI6QYrtuZiTQJf8kGJI8OQuYb7_Rdw\r\nX-Yahoo-Profile: rcanand\r\n\r\nThanks, Peter.\n\nThat was very useful. Is your API built with this model pub=\r\nlic? It\nwould be  useful to play with it to get a first hand experience.\n\nT=\r\nhanks much\nAnand\n\nOn Fri, May 1, 2009 at 1:14 PM, Peter Keane &lt;pkeane@mail.=\r\nutexas.edu&gt; wrote:\n&gt; On Fri, May 1, 2009 at 2:16 PM, rcanand &lt;rcanand@gmail=\r\n.com&gt; wrote:\n&gt;&gt;\n&gt;&gt;\n&gt;&gt; Hi,\n&gt;&gt;\n&gt;&gt; Can anyone share their experiences with des=\r\nigning REST APIs using MVC style\n&gt;&gt; frameworks (such as Rails, Django,PHP M=\r\nVC, etc.)?\n&gt;&gt;\n&gt;&gt; There seem to be two ways to design such APIs when accompa=\r\nnied with UI -\n&gt;&gt; 1) APIs and UIs in separate spaces (having a separate URI=\r\n path for API\n&gt;&gt; versus UI for the same resource)\n&gt;&gt; 2) Same URI for each r=\r\nesource, but using some form of content negotiation to\n&gt;&gt; return UI formats=\r\n like html or API formats like XML.\n&gt;&gt;\n&gt;&gt; Do you have any thoughts on the a=\r\ndvantages and disadvantages of using either\n&gt;&gt; approach?\n&gt;&gt;\n&gt;\n&gt; Hi Anand-\n&gt;=\r\n\n&gt; I went back and forth on this very thing, and ultimately decide to mix\n&gt;=\r\n everything together. The URI path only supplies the &quot;model&quot; (actually\n&gt; co=\r\nntroller, but those generally map to domain models), and the\n&gt; controller i=\r\ntself dispatches on method (GET,PUT,POST,DELETE), resource\n&gt; (we use URI re=\r\ngex-based routing w/ in each controller) and format.\n&gt; Formats are specifie=\r\nd by extension (.json,.html,.atom).\n&gt;\n&gt; So the &quot;widgets&quot; controller has a r=\r\nouting map:\n&gt;\n&gt; $routes =3D array(\n&gt; =A0 =A0 &#39;/&#39; =3D&gt; &#39;widgets&#39;, =A0 =A0 =\r\n=A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0// http://myapp/widgets\n&gt; =A0 =A0 &#39;/{wid=\r\nget_id}&#39; =3D&gt; &#39;widget&#39; =A0 =A0 =A0 =A0// http://myapp/widget/23\n&gt; =A0);\n&gt;\n&gt;=\r\n And defines functions by a convention: {method}{resource}{format} for exam=\r\nple:\n&gt;\n&gt; function getWidgetJson($request) {\n&gt;\n&gt; }\n&gt;\n&gt; function putWidgetAto=\r\nm($request) {\n&gt; =A0 =A0 =A0 =A0 =A0 =A0 $widget_id =3D $request-&gt;get(&#39;widge=\r\nt_id&#39;);\n&gt; =A0 =A0 =A0 =A0 =A0 =A0etc....\n&gt; }\n&gt;\n&gt; function getWidgetsHtml($r=\r\nequest) {\n&gt; =A0 =A0 =A0 =A0 =A0create HTML displayin list of widgets\n&gt; }\n&gt;\n=\r\n&gt; function postToWidgets($request) {\n&gt; =A0 =A0 =A0 =A0 =A0 $posted =3D $req=\r\nuest-&gt;getBody();\n&gt; =A0 =A0 =A0 =A0 =A0 $mime_type =3D $request-&gt;getMediaTyp=\r\ne();\n&gt; =A0 =A0 =A0 =A0 =A0 dispatch here based on mime_type of posted resou=\r\nrce (usually atom)\n&gt; =A0 =A0 =A0 =A0 =A0 etc....\n&gt; }\n&gt;\n&gt; I have found this =\r\norganizational structure to work well. =A0The main\n&gt; problem (which I did n=\r\not show here) is the need to define\n&gt; authentication type either per handle=\r\nr or (as is usuallly the case)\n&gt; per method. =A0We use three auth types: =\r\n=A0HTTP basic, a cookie-based\n&gt; Auth, and no auth. =A0Other than that, it w=\r\norks well.\n&gt;\n&gt; --peter keane\n&gt;\n&gt;\n&gt;\n&gt;&gt; Thanks\n&gt;&gt; Anand\n&gt;&gt;\n&gt;&gt; \n&gt;\n\n"}}
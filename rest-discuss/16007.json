{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"4M_xRsdhQPm5ChkfnWPQ7VIpanDACf9B8rXYkI6MvrLE8lrOKMJWWCd15kG32pugNOJIQp9SmoVI7u9b5xTp1Tz4y1GCutiBVp7d1ktWRQ","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Re: An example paleo-REST application w/ m2m","postDate":"1280340940","msgId":16007,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMTAwNzI4MTIxNTQwLmFjYTAzZDk3LmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","inReplyToHeader":"PGkycGxvOCs0ZDQwQGVHcm91cHMuY29tPg==","referencesHeader":"PDIwMTAwNzI0MjM1NjE4LmFkYjA2MzMzLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPGkycGxvOCs0ZDQwQGVHcm91cHMuY29tPg=="},"prevInTopic":16006,"nextInTopic":0,"prevInTime":16006,"nextInTime":16008,"topicId":15977,"numMessagesInTopic":20,"msgSnippet":"Rats, I meant to title this thread A *simple* paleo-REST app... and stress that simplicity wins out over REST every time.  I did not intend to start a debate","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 7471 invoked from network); 28 Jul 2010 18:16:16 -0000\r\nX-Received: from unknown (98.137.34.45)\n  by m1.grp.sp2.yahoo.com with QMQP; 28 Jul 2010 18:16:16 -0000\r\nX-Received: from unknown (HELO mxout-08.mxes.net) (216.86.168.183)\n  by mta2.grp.sp2.yahoo.com with SMTP; 28 Jul 2010 18:16:15 -0000\r\nX-Received: from bigbison (unknown [65.117.211.162])\n\t(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))\n\t(No client certificate requested)\n\tby smtp.mxes.net (Postfix) with ESMTPSA id 3D9CB509B4;\n\tWed, 28 Jul 2010 14:16:13 -0400 (EDT)\r\nDate: Wed, 28 Jul 2010 12:15:40 -0600\r\nTo: &quot;Duncan&quot; &lt;rest-discuss@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nMessage-Id: &lt;20100728121540.aca03d97.eric@...&gt;\r\nIn-Reply-To: &lt;i2plo8+4d40@...&gt;\r\nReferences: &lt;20100724235618.adb06333.eric@...&gt;\n\t&lt;i2plo8+4d40@...&gt;\r\nOrganization: Bison Systems Corporation\r\nX-Mailer: Sylpheed 3.0.3 (GTK+ 2.10.14; i686-pc-mingw32)\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=US-ASCII\r\nContent-Transfer-Encoding: 7bit\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nSubject: Re: [rest-discuss] Re: An example paleo-REST application w/ m2m\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\nRats, I meant to title this thread &quot;A *simple* paleo-REST app...&quot; and\nstress that simplicity wins out over REST every time.  I did not intend\nto start a debate about RESTful reliable messaging, or even reliable\nHTTP messaging.  I meant to use the simplest automated m2m process I&#39;ve\never encountered, and the solution to it, as an argument against *any* \nadditional complexity, RESTful or not.\n\nThe pizza parlor is long gone, perhaps their marketing was ahead of its\ntime, the product wasn&#39;t bad.  If it were still around, I&#39;d have no\nreason to change the system, except to allow more complex orders with a\nmore complex, Javascript-driven form.  Where&#39;s the cost benefit of\ntaking any time to change the cheapest possible functional solution to\nthe problem?  Which system could you or would you build for the $250 I\ngot paid, plus $10/month to host and maintain (in addition to their\nmodem account)?\n\n&quot;Duncan&quot; wrote:\n&gt; \n&gt; Benefit: your state is now visible; you&#39;ve got an Order Resource and\n&gt; an Orders List Resource.\n&gt; \n\nDrawback:  now I have those resources.  :-(\n\nMy system is (was) simple.  The initial application state is an HTML\nrepresentation of an order-form resource.  The state transition the\ncustomer chooses, GETs a representation of the customer&#39;s desired state\nof the order-form resource (not a form, except for the confirm/cancel\nbuttons), so the browser uses application/x-www-urlencoded to tack a\nquery string onto the initial URI.  The server calculates the total\ncharge w/ tax.\n\nConfirming the order is the same query URL, except POST not GET.  The\nresponse is a 200 OK with a message body telling the user to expect\nconfirmation when the kitchen receives the order (a process you didn&#39;t\nexplain in your counter-example).  Note that the URL doesn&#39;t change --\nwhat happens is the state of the resource (the customer&#39;s desired order\nhas its own, bookmarkable URL) has temporarily changed to &quot;order\nreceived&quot;.\n\n(The response is not 201 Created, because nothing is created.  This is\nthe point where your solution gets vastly more complicated than mine,\nso no, I don&#39;t think I picked a bad example... :-)\n\nFor this transaction, I don&#39;t care that HTTP is unreliable -- if the\ncustomer doesn&#39;t see the confirmation, the form may be re-submitted.  I\ncan even bookmark &#39;large pepperoni double cheese&#39; for my home address,\nthen I can skip the form and just hit &#39;confirm order&#39;.  But, the\ncustomer does need to be reliably informed that the kitchen got the\norder from the website.\n\nThe connection between the kitchen and the website is even less\nreliable than HTTP.  The need is for a hands-free workflow of checking\nfor new orders, printing them, and sending confirmation that the\ncustomer&#39;s pizza is being made.  But the system must recover without\nneeding the help of any consultants, if the network goes offline (the\nmodem&#39;s phone line gets unplugged to use the fax machine), or the OS\ncrashes.\n\nA script executes on startup which checks a POP3 mailbox, retrieves and\nprints messages, and sends an automated response to each reply-to\naddress.  That&#39;s simple.  It all gets much more complicated, and I fail\nto see the cost benefit, when we start talking about installing httpd\nfor the pizza parlor&#39;s computer, or adding Atom into this mix.  Same\nwith the server -- a Perl script which drops an e-mail into a POP3 box\nis simple.\n\nI suppose we could create order resources, that way the kitchen can\npull something in, and that action can trigger the server to change\nsome other resource state, which the customer can then access and\nreload until they see their order is queued in the kitchen.  In which\ncase, sure, Atom&#39;s a good way to go.  But the whole idea of creating a\nWeb Service to solve this problem, still seems really really heavy.\n\nNow that we&#39;ve created all those resources you&#39;re suggesting, we need to\nhave some sort of process that goes through and removes them after some\nperiod of time has passed, or have the workflow in the kitchen include\nsomething beyond passive printing of e-mail, otherwise we&#39;re archiving\nevery order placed on the server.\n\nI figured the pizza parlor wanted a record, but it seemed much more\ncost-effective to make that an e-mail record that they can worry about\narchiving, instead of creating another API so they can access that on\nthis website of ever-increasing complexity there&#39;s no way they&#39;d have\nbeen able to afford to build, let alone operate...\n\nNope, you&#39;ve not convinced me that REST wins out here over the robust\nsimplicity of e-mail.  Especially when I consider that I created a\nREST system where it needed to be a REST system.  Had the parlor\nsucceeded and gone national, their Web app would have scaled with them,\ninstead of becoming a money-pit consultant trough.  As it was, I built\nthem a REST app for $250.\n\nREST&#39;s scaling benefit is that it can scale small, too.  You can&#39;t even\ncover the cost of tooling up to build an SOA solution to this problem,\nfor the amount I was paid (all of it profit since I only used a text\neditor to create it) to build this REST system.  So I don&#39;t like the\nidea of REST evolving in an SOA-inspired direction, I think it will\nfall right into the same trap of not scaling small.\n\n-Eric\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":40455398,"authorName":"Julian Reschke","from":"Julian Reschke &lt;julian.reschke@...&gt;","profile":"JulianReschke","replyTo":"SENDER","senderId":"MkKN_YO6gMM9Xt9GCQPkKTB_vtNXxeMMwZNsBhPJg_olw1HlgRdWCL6H58gyyZg5-akIlW6FRuW4IQHWIOi3HvBvrOi8rQ-uKPA2S8k","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Capturing intent when creating/modifying/removing resources","postDate":"1258966058","msgId":14045,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDRCMEE0QzJBLjEwMTA0MDBAZ214LmRlPg==","inReplyToHeader":"PDg2NTZFOTUzLTJGMTItNDlCMS1CNjlCLUY3QTk0MDVCOTFFNkBtYWMuY29tPg==","referencesHeader":"PDU3ZTdlMDQ5MDkxMTE5MTYwN3Q2OWViNmZlOGo0YmExYTFiNmViZjUzOWYxQG1haWwuZ21haWwuY29tPiA8ODY1NkU5NTMtMkYxMi00OUIxLUI2OUItRjdBOTQwNUI5MUU2QG1hYy5jb20+"},"prevInTopic":14044,"nextInTopic":14048,"prevInTime":14044,"nextInTime":14046,"topicId":14040,"numMessagesInTopic":6,"msgSnippet":"... In WebDAV Versioning (RFC 3253): make the resource version-controlled, perform (1) CHECKOUT, (2) PUT, (3) PROPPATCH DAV:comment, then (4) CHECKIN. ","rawEmail":"Return-Path: &lt;julian.reschke@...&gt;\r\nX-Sender: julian.reschke@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 79996 invoked from network); 23 Nov 2009 08:48:12 -0000\r\nX-Received: from unknown (66.196.94.105)\n  by m1.grp.sp2.yahoo.com with QMQP; 23 Nov 2009 08:48:12 -0000\r\nX-Received: from unknown (HELO mail.gmx.net) (213.165.64.20)\n  by mta1.grp.re1.yahoo.com with SMTP; 23 Nov 2009 08:48:12 -0000\r\nX-Received: (qmail invoked by alias); 23 Nov 2009 08:47:46 -0000\r\nX-Received: from p508FFD73.dip.t-dialin.net (EHLO [192.168.178.33]) [80.143.253.115]\n  by mail.gmx.net (mp009) with SMTP; 23 Nov 2009 09:47:46 +0100\r\nX-Authenticated: #1915285\r\nX-Provags-ID: V01U2FsdGVkX1+qPVJ0Ob+qeZbP/2g231pCNES9jC0Cx0brTSkDMd\n\tpU58t07ulgHh4v\r\nMessage-ID: &lt;4B0A4C2A.1010400@...&gt;\r\nDate: Mon, 23 Nov 2009 09:47:38 +0100\r\nUser-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; de; rv:1.8.0.4) Gecko/20060516 Thunderbird/1.5.0.4 Mnenhy/0.7.4.666\r\nMIME-Version: 1.0\r\nTo: Jan Algermissen &lt;algermissen1971@...&gt;\r\nCc: Richard Wallace &lt;rwallace@...&gt;, \n rest-discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nReferences: &lt;57e7e0490911191607t69eb6fe8j4ba1a1b6ebf539f1@...&gt; &lt;8656E953-2F12-49B1-B69B-F7A9405B91E6@...&gt;\r\nIn-Reply-To: &lt;8656E953-2F12-49B1-B69B-F7A9405B91E6@...&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-Y-GMX-Trusted: 0\r\nX-FuHaFi: 0.53\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Julian Reschke &lt;julian.reschke@...&gt;\r\nSubject: Re: [rest-discuss] Capturing intent when creating/modifying/removing\n resources\r\nX-Yahoo-Group-Post: member; u=40455398; y=wj_J6bgSZT52ovltjKwR74Ss_65rRBtvMpemFzqR2ougHa0M0Fvsng\r\nX-Yahoo-Profile: JulianReschke\r\n\r\nJan Algermissen wrote:\n&gt;  \n&gt; \n&gt; Richard,\n&gt; \n&gt; On Nov 20, 2009, at 1:07 AM, Richard Wallace wrote:\n&gt; \n&gt;  &gt; A question that I&#39;m struggling with right now is how to capture intent\n&gt;  &gt; when you are creating/modifying/ removing a resource. Take a simple\n&gt;  &gt; example of a customer resource with one or more address sub-resources.\n&gt;  &gt; We can POST an address representation to the customer resource, PUT on\n&gt;  &gt; the individual address resources to modify them or DELETE an address\n&gt;  &gt; resource altogether. In a particular situations, it may be important\n&gt;  &gt; to later be able to say why that address was created or why was it\n&gt;  &gt; modified. For instance, you may want to find out all the customers\n&gt;  &gt; that have moved 10 miles away and are still regular customers. But if\n&gt;  &gt; you did a simple PUT on the address you won&#39;t know why it was changed\n&gt;  &gt; - the person might have moved or the previous address might have been\n&gt;  &gt; incorrect.\n&gt; \n&gt; If you want to capture that information, it should be part of the\n&gt; representation you send and not be part of the request meta data. It\n&gt; is domain semantics and not protocol semantics, IMHO.\n&gt; \n&gt; I agree that it seems a bit misplaced in the payload of a PUT (though\n&gt; if the information was part of the e.g. address itself, why not?). You\n&gt; might consider using PATCH and make the update comment part of your\n&gt; diff format or you could use POST in combination woth 303, e.g.\n&gt; \n&gt; POST /customer/addresses\n&gt; \n&gt; &lt;addressChange&gt;\n&gt; &lt;address&gt;... &lt;/address&gt;\n&gt; &lt;reason&gt;.... &lt;/reason&gt;\n&gt; &lt;/addressChange&gt;\n&gt; \n&gt;  &gt;\n&gt;  &gt; The only way I can think of to handle sending this piece of metadata\n&gt;  &gt; when performing the operation is to include a custom HTTP header, like\n&gt;  &gt; X-Reason or something similar that might be assigned specific codes.\n&gt;  &gt; It doesn&#39;t seem like it makes sense to put it in the body of the PUT\n&gt;  &gt; because it&#39;s not a part of the resource you are\n&gt;  &gt; creating/changing/ deleting. Has anybody come across something like\n&gt;  &gt; this in the past?\n&gt; \n&gt; This seems very well known from revision control system updates, e.g.\n&gt; cvs commit MyClass.cpp -m &#39;fixed bug foo&#39;\n&gt; \n&gt; Maybe WebDAV provides something of this sort already??\n&gt; ...\n\nIn WebDAV Versioning (RFC 3253): make the resource version-controlled, \nperform (1) CHECKOUT, (2) PUT, (3) PROPPATCH DAV:comment, then (4) CHECKIN.\n\n(DAV:comment is a live property used to supply a checkin comment; see \n&lt;http://greenbytes.de/tech/webdav/rfc3253.html#rfc.section.3.1.1&gt;).\n\nBR, Julian\n\n"}}
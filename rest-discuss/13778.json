{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":93099516,"authorName":"Josh Sled","from":"Josh Sled &lt;jsled@...&gt;","profile":"joshsled","replyTo":"SENDER","senderId":"X-LLxOZCDHdG9IuhaNhcuODzTYIr0ASc_60iR03Kwrfdp9_tcJfJd2p-0fi9KX-U9fTF7hsE_9movNUbWFJpiR6cantrhyvuww","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Generic REST client","postDate":"1255131879","msgId":13778,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDg3aXFlb3l2eDQuZnNmQHBob2VuaXguYXN5bmNocm9ub3VzLm9yZz4=","inReplyToHeader":"PDk2RDQwQkQyLUJFNjQtNDcwQi04NTFDLUU4MDgwMDc1MjNBMEBnbWFpbC5jb20+IChKYW4gVmluY2VudCdzIG1lc3NhZ2Ugb2YgIlNhdFwsIDEwIE9jdCAyMDA5IDA3XDoyMVw6MTkgKzA4MDAiKQ==","referencesHeader":"PDk2RDQwQkQyLUJFNjQtNDcwQi04NTFDLUU4MDgwMDc1MjNBMEBnbWFpbC5jb20+"},"prevInTopic":13777,"nextInTopic":13779,"prevInTime":13777,"nextInTime":13779,"topicId":13776,"numMessagesInTopic":48,"msgSnippet":"... I ve not seen a good higher-level HTTP framework that would: - interpret an out-of-band description of a RESTful web service to produce high-level","rawEmail":"Return-Path: &lt;jsled@...&gt;\r\nX-Sender: jsled@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 73248 invoked from network); 9 Oct 2009 23:44:35 -0000\r\nX-Received: from unknown (98.137.34.45)\n  by m2.grp.re1.yahoo.com with QMQP; 9 Oct 2009 23:44:35 -0000\r\nX-Received: from unknown (HELO blingymail-a3.g.dreamhost.com) (208.113.200.5)\n  by mta2.grp.sp2.yahoo.com with SMTP; 9 Oct 2009 23:44:35 -0000\r\nX-Received: from localhost (c-75-69-71-37.hsd1.vt.comcast.net [75.69.71.37])\n\t(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))\n\t(No client certificate requested)\n\tby blingymail-a3.g.dreamhost.com (Postfix) with ESMTP id 63E8D14D6DC;\n\tFri,  9 Oct 2009 16:44:34 -0700 (PDT)\r\nTo: rest-discuss@yahoogroups.com\r\nCc: Jan Vincent &lt;jvliwanag@...&gt;\r\nReferences: &lt;96D40BD2-BE64-470B-851C-E808007523A0@...&gt;\r\nDate: Fri, 09 Oct 2009 19:44:39 -0400\r\nIn-Reply-To: &lt;96D40BD2-BE64-470B-851C-E808007523A0@...&gt; (Jan Vincent&#39;s message of &quot;Sat&#92;, 10 Oct 2009 07&#92;:21&#92;:19 +0800&quot;)\r\nMessage-ID: &lt;87iqeoyvx4.fsf@...&gt;\r\nUser-Agent: Gnus/5.11 (Gnus v5.11) Emacs/22.3 (gnu/linux)\r\nMIME-Version: 1.0\r\nContent-Type: multipart/signed; boundary=&quot;=-=-=&quot;;\n\tmicalg=pgp-sha1; protocol=&quot;application/pgp-signature&quot;\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Josh Sled &lt;jsled@...&gt;\r\nSubject: Re: [rest-discuss] Generic REST client\r\nX-Yahoo-Group-Post: member; u=93099516; y=era8xCH6KFBGa3NJTV5JAmC-ZLeB3rZL5-gEun6W-mrrYXs\r\nX-Yahoo-Profile: joshsled\r\n\r\n\r\n--=-=-=\r\nContent-Type: text/plain; charset=utf-8\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nJan Vincent &lt;jvliwanag@...&gt; writes:\n&gt; I know one may simply use some =\r\nHTTP client and work\n&gt; from there. However, I tend to see this practice as =\r\nbeing quite\n&gt; tedious. \n\nI&#39;ve not seen a good higher-level HTTP framework t=\r\nhat would:\n\n- interpret an out-of-band description of a RESTful web service=\r\n to\n  produce high-level forms/state-machine stubs that can be coded to in\n=\r\n  the implementation language.\n\n  - integrating that with run-time in-band =\r\nconditional-GET of previous\n    responses, response codes, &c.\n\n- supports =\r\nthe more interesting HTTP response codes like\n\n  - 202 + maybe polling some=\r\n &lt;handwave&gt;url in the repsonse to check\n    final creation state&lt;/&gt;\n\n  - 20=\r\n4, 205, 206\n\n  - 3xx redirection codes with stateful recoding of temp/perm\n=\r\n    redirects.\n\n  - 503 + retry-after info.\n\n- Supports cache control, in c=\r\nombination with the above.\n\n\nI&#39;d imagine such a framework to:\n\na/ again, us=\r\ne some description language that identifies the *potential*\nresource-/media=\r\n-types, state-space, and forms a-priori without having to\nactively traverse=\r\n every class of link on the site, but=E2=80=A6\n\nb/ would require the active=\r\n traversal of links to function, ensuring\nthat the runtime binding of the r=\r\nesources is the same as the build-time\nbinding (withing epsilon of versioni=\r\nng);\n\nc/ as such, would always start at a safe entry point (e.g., &#39;/&#39;) for =\r\na\nresource-space, with conditional requests to validate any previous\n(cache=\r\nd) assumptions about the site are still valid.\n\n\nI&#39;ve built a couple of ad-=\r\nhoc things that use something like Apache\nHTTPClient, but they&#39;re usually j=\r\nust my application code using\nHTTPClient to do some specific thing, not a g=\r\neneric solution one level\nremoved from that.\n\n-- \n...jsled\nhttp://asynchron=\r\nous.org/ - a=3Djsled; b=3Dasynchronous.org; echo ${a}@${b}\n\r\n--=-=-=\r\nContent-Type: application/pgp-signature\r\n\r\n[ Attachment content not displayed ]\r\n--=-=-=--\r\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":272793929,"authorName":"Kevin Duffey","from":"Kevin Duffey &lt;andjarnic@...&gt;","profile":"andjarnic","replyTo":"SENDER","senderId":"mD__oHoqitLq3cMSQs2YzwZ1zxYOFXYowD22FiYBMCWyJF6sK1VqFBwJmdG0zNIWKtynajr7pKKXS-3pQVNlHZBfdboMmf9Gzw","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] HTTP request and &quot;type safety&quot;","postDate":"1268456235","msgId":15033,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDU2NDE2MC43MDY3Ny5xbUB3ZWI1NTkwNi5tYWlsLnJlMy55YWhvby5jb20+","inReplyToHeader":"PEFFOEQ1ODRBLTA1RjUtNDAzOC1CODdGLUZEMEU0QTZERjA5QUBnYml2LmNvbT4="},"prevInTopic":15032,"nextInTopic":15035,"prevInTime":15032,"nextInTime":15034,"topicId":15020,"numMessagesInTopic":18,"msgSnippet":"I am confused a bit about this. I was just thinking this today. If I provide a single URI point of entry, and an OPTION or GET request is sent, it returns some","rawEmail":"Return-Path: &lt;andjarnic@...&gt;\r\nX-Sender: andjarnic@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 32566 invoked from network); 13 Mar 2010 04:57:21 -0000\r\nX-Received: from unknown (98.137.34.46)\n  by m2.grp.sp2.yahoo.com with QMQP; 13 Mar 2010 04:57:21 -0000\r\nX-Received: from unknown (HELO n14.bullet.mail.mud.yahoo.com) (68.142.206.41)\n  by mta3.grp.sp2.yahoo.com with SMTP; 13 Mar 2010 04:57:20 -0000\r\nX-Received: from [68.142.194.243] by n14.bullet.mail.mud.yahoo.com with NNFMP; 13 Mar 2010 04:57:16 -0000\r\nX-Received: from [68.142.237.88] by t1.bullet.mud.yahoo.com with NNFMP; 13 Mar 2010 04:57:15 -0000\r\nX-Received: from [216.252.111.168] by t4.bullet.re3.yahoo.com with NNFMP; 13 Mar 2010 04:57:15 -0000\r\nX-Received: from [127.0.0.1] by omp103.mail.re3.yahoo.com with NNFMP; 13 Mar 2010 04:57:15 -0000\r\nX-Yahoo-Newman-Property: ymail-3\r\nX-Yahoo-Newman-Id: 699777.33471.bm@...\r\nX-Received: (qmail 72682 invoked by uid 60001); 13 Mar 2010 04:57:15 -0000\r\nMessage-ID: &lt;564160.70677.qm@...&gt;\r\nX-YMail-OSG: YbBADLsVM1n2NXCWLCBrzaNjNEyUCBCXy1tON7eSaDO_KAC\n hAiq2HBZxv4p.jltC0k48QTxtAT3Y906NNPwIQsvNMA.ao_q1ikwAz7.rFhf\n rDU0C7Pgdylx3lvNPcrK3rTXAVoszWiHt44G1LVXeURb7K.8UZHxDiit8Sln\n W3VHly73hJAECQQBY96JJadZzhXw8tKiHoyv1pimltMPm9H9iK0Z10n1PiS4\n luzc-\r\nX-Received: from [99.22.138.61] by web55906.mail.re3.yahoo.com via HTTP; Fri, 12 Mar 2010 20:57:15 PST\r\nX-Mailer: YahooMailClassic/9.2.12 YahooMailWebService/0.8.100.260964\r\nDate: Fri, 12 Mar 2010 20:57:15 -0800 (PST)\r\nTo: rest-discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nIn-Reply-To: &lt;AE8D584A-05F5-4038-B87F-FD0E4A6DF09A@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: multipart/alternative; boundary=&quot;0-909634193-1268456235=:70677&quot;\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Kevin Duffey &lt;andjarnic@...&gt;\r\nSubject: Re: [rest-discuss] HTTP request and &quot;type safety&quot;\r\nX-Yahoo-Group-Post: member; u=272793929; y=1i6Cs-vktvnqYPs9WNc3mtXORUI_oDGuOxKJMSsuQ11AaMzP\r\nX-Yahoo-Profile: andjarnic\r\n\r\n\r\n--0-909634193-1268456235=:70677\r\nContent-Type: text/plain; charset=us-ascii\r\n\r\n\nI am confused a bit about this. I was just thinking this today. If I provide a single URI point of entry, and an OPTION or GET request is sent, it returns some relevant links that can be called based on the state of the resource. Now, to get those links, I have to first access the point of entry URI. What happens if say a bot program (or even a client developer) decides to cache/save these URIs that return. Then at some point later, call those URIs directly instead of the point of entry URI first to get those URIs back. They could even navigate some links for a while, then save the various URIs deeper down. Later, call those directly.\n\nMy confusion of this is because the server side is stateless. It retains no state. So how can I validate a URI that a client/bot saved from some previous use, to make sure it&#39;s valid at the time of call? I have no state on the server side that says &quot;this URI is being called BEFORE the URI that returns this URI was called.. it&#39;s a bad call&quot;. So I am unsure as to how to validate every single URI call to make sure it was called at a time when it should be called, and not just randomly out of order. I suppse we can use some sort of timestamp on every single URI that goes back, not sure entirely how that would work at this point, but I suppose the server would check this value when it came back in to the current server time stamp and make sure it&#39;s within so many minutes of when it was issued. But a smart client developer/bot could possibly figure that out, and update this value before making the request, and since the server keeps no state, if the modified\n timestamp is within the right time of the server, it would void that route of validating a URI.\n\n\n\n\n&gt; All that is very well in a perfect world, but what if the client is of a malicious nature, and it&#39;s nature lead him to overcome what the server provides, by issuing a request that he may learned from introspection of another application state?\n\n\n\nHow is that relevant to type safety?  The only difference between\n\na strongly typed distributed system and a weakly typed distributed\n\nsystem is that the former gives the attacker one more thing to lie\n\nabout.\n\n\n\nThe input has to be validated no matter how or where it has been defined.\n\n\n\n\n \n\n\n\n  \n\n\n\n\n\n\n      \r\n--0-909634193-1268456235=:70677\r\nContent-Type: text/html; charset=us-ascii\r\n\r\n&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;0&quot; &gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; style=&quot;font: inherit;&quot;&gt;&lt;br&gt;I am confused a bit about this. I was just thinking this today. If I provide a single URI point of entry, and an OPTION or GET request is sent, it returns some relevant links that can be called based on the state of the resource. Now, to get those links, I have to first access the point of entry URI. What happens if say a bot program (or even a client developer) decides to cache/save these URIs that return. Then at some point later, call those URIs directly instead of the point of entry URI first to get those URIs back. They could even navigate some links for a while, then save the various URIs deeper down. Later, call those directly.&lt;br&gt;&lt;br&gt;My confusion of this is because the server side is stateless. It retains no state. So how can I validate a URI that a client/bot saved from some previous use, to make sure it&#39;s valid at the time of call? I have no state\n on the server side that says &quot;this URI is being called BEFORE the URI that returns this URI was called.. it&#39;s a bad call&quot;. So I am unsure as to how to validate every single URI call to make sure it was called at a time when it should be called, and not just randomly out of order. I suppse we can use some sort of timestamp on every single URI that goes back, not sure entirely how that would work at this point, but I suppose the server would check this value when it came back in to the current server time stamp and make sure it&#39;s within so many minutes of when it was issued. But a smart client developer/bot could possibly figure that out, and update this value before making the request, and since the server keeps no state, if the modified timestamp is within the right time of the server, it would void that route of validating a URI.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;blockquote style=&quot;border-left: 2px solid rgb(16, 16, 255); margin-left: 5px; padding-left: 5px;&quot;&gt;&lt;div\n id=&quot;yiv315247000&quot;&gt;&lt;div id=&quot;ygrp-mlmsg&quot; style=&quot;&quot;&gt;&lt;div id=&quot;ygrp-msg&quot; style=&quot;&quot;&gt;&lt;div id=&quot;ygrp-text&quot;&gt;&lt;p&gt;&gt; All that is very well in a perfect world, but what if the client is of a malicious nature, and it&#39;s nature lead him to overcome what the server provides, by issuing a request that he may learned from introspection of another application state?&lt;br&gt;\n&lt;br&gt;\nHow is that relevant to type safety?  The only difference between&lt;br&gt;\na strongly typed distributed system and a weakly typed distributed&lt;br&gt;\nsystem is that the former gives the attacker one more thing to lie&lt;br&gt;\nabout.&lt;br&gt;\n&lt;br&gt;\nThe input has to be validated no matter how or where it has been defined.&lt;br&gt;\n&lt;br&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n\n \n\n\n&lt;/div&gt;&lt;/blockquote&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;br&gt;\n\n      \r\n--0-909634193-1268456235=:70677--\r\n\n"}}
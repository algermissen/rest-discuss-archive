{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":352334505,"authorName":"Craig McClanahan","from":"Craig McClanahan &lt;craigmcc@...&gt;","profile":"craig_mcclanahan","replyTo":"SENDER","senderId":"5nuAP0Te-MyibLsPAEX8FHdI4Chok6aWkWO2-FDHNBmA93ZDMtnmszcWcMfGhPCKyCF7l1HY1I0rhUwKoQ25-8MeJ-VCVeShjuK_tw","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Why HATEOAS?","postDate":"1238607932","msgId":12373,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGY4YjM5YWNlMDkwNDAxMTA0NXY2NmRmMzkwOXBiYjMwNDBlZmZhMjk5MjJkQG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PDQ5RDM2RUJELjcwNDAyMDBAcmVkaGF0LmNvbT4=","referencesHeader":"PDU1YzYwZTM3MDkwMzMxMTcwMXg0YWRhYzAyZG8zNjliNWQ4NjE3MDBmNmU2QG1haWwuZ21haWwuY29tPgkgPGY4YjM5YWNlMDkwMzMxMTc1OWwzY2JjZGFmNWoyZDkwZWU5NzJhMjJmNGFiQG1haWwuZ21haWwuY29tPgkgPDQ5RDM2RUJELjcwNDAyMDBAcmVkaGF0LmNvbT4="},"prevInTopic":12372,"nextInTopic":12374,"prevInTime":12372,"nextInTime":12374,"topicId":12357,"numMessagesInTopic":27,"msgSnippet":"... The snarky answer would be what schema?  we don t need no stinkin schema :-). If you are using XML message formats, though, schemas are pretty useful","rawEmail":"Return-Path: &lt;craigmcc@...&gt;\r\nX-Sender: craigmcc@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 61248 invoked from network); 1 Apr 2009 17:45:50 -0000\r\nX-Received: from unknown (69.147.108.200)\n  by m7.grp.re1.yahoo.com with QMQP; 1 Apr 2009 17:45:50 -0000\r\nX-Received: from unknown (HELO qw-out-2122.google.com) (74.125.92.25)\n  by mta1.grp.re1.yahoo.com with SMTP; 1 Apr 2009 17:45:49 -0000\r\nX-Received: by qw-out-2122.google.com with SMTP id 8so118434qwh.39\n        for &lt;rest-discuss@yahoogroups.com&gt;; Wed, 01 Apr 2009 10:45:32 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.220.86.203 with SMTP id t11mr3746188vcl.108.1238607932535; \n\tWed, 01 Apr 2009 10:45:32 -0700 (PDT)\r\nIn-Reply-To: &lt;49D36EBD.7040200@...&gt;\r\nReferences: &lt;55c60e370903311701x4adac02do369b5d861700f6e6@...&gt;\n\t &lt;f8b39ace0903311759l3cbcdaf5j2d90ee972a22f4ab@...&gt;\n\t &lt;49D36EBD.7040200@...&gt;\r\nDate: Wed, 1 Apr 2009 10:45:32 -0700\r\nMessage-ID: &lt;f8b39ace0904011045v66df3909pbb3040effa29922d@...&gt;\r\nTo: Bill Burke &lt;bburke@...&gt;\r\nCc: Solomon Duskis &lt;sduskis@...&gt;, Rest List &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Craig McClanahan &lt;craigmcc@...&gt;\r\nReply-To: craigmcc@...\r\nSubject: Re: [rest-discuss] Why HATEOAS?\r\nX-Yahoo-Group-Post: member; u=352334505; y=3yG_hHPzf8Ar8Z--q4r7emvTJ0Ob3TP9MozhvhhKTSjgJ1K4Rm7y7VQZLw\r\nX-Yahoo-Profile: craig_mcclanahan\r\n\r\nOn Wed, Apr 1, 2009 at 6:40 AM, Bill Burke &lt;bburke@...&gt; wrote:\n&gt; Cra=\r\nig McClanahan wrote:\n&gt;&gt;\n&gt;&gt; * FINE GRAINED EVOLUTION WITHOUT (NECESSARILY) B=\r\nREAKING OLD CLIENTS.\n&gt;&gt; At any given time, the client of any REST API is go=\r\ning to be\n&gt;&gt; programmed with *some* assumptions\n&gt;&gt; about what the system ca=\r\nn do. But, if you document a restriction to\n&gt;&gt; &quot;pay attention to only those=\r\n\n&gt;&gt; aspects of the representation that you know about&quot;, plus a server\n&gt;&gt; si=\r\nde discipline to add things later\n&gt;&gt; that don&#39;t disrupt previous behavior, =\r\nyou can evolve APIs fairly\n&gt;&gt; quickly without breaking all clients,\n&gt;&gt; or h=\r\naving to support multiple versions of the API simultaneously on\n&gt;&gt; your ser=\r\nver. You don&#39;t have to\n&gt;&gt; wait years for serendipity benefits :-). Especial=\r\nly compared to\n&gt;&gt; something like SOAP where the\n&gt;&gt; syntax of your represent=\r\nations is versioned (in the WSDL), so you\n&gt;&gt; have to mess with the clients\n=\r\n&gt;&gt; on every single change.\n&gt;&gt;\n&gt;\n&gt; How would you initially define and then e=\r\nvolve your XML schema in such an\n&gt; environment? =A0I know Atom allows arbit=\r\nrary attributes and elements in its\n&gt; schema so that it can easily evolve o=\r\nr allow custom data to be appended.\n&gt; =A0What about validation though? =A0T=\r\noo bad XML schema isn&#39;t polymorphic.\n\nThe snarky answer would be &quot;what sche=\r\nma?  we don&#39;t need no stinkin&#39; schema&quot; :-).\n\nIf you are using XML message f=\r\normats, though, schemas are pretty\nuseful ... not just for validation, but =\r\nalso for code generation of\nclient and server side stubs (such as with Java=\r\n&#39;s JAXB).  The\nsituation I would focus on is a client that is programmed to=\r\n handle\nversion &quot;M&quot; of the schema, and you want to update it for version &quot;N=\r\n&quot;.\nIf you can limit yourself to the following changes:\n\n* Any new elements =\r\nmust be optional (minOccurs=3D&quot;0&quot;)\n\n* No existing required elements can be =\r\nmodified to be optional\n\n* Server side processing accepts this representati=\r\non and takes the\nmissing optional element\n  from an old client (who obvious=\r\nly won&#39;t be sending it) to have the\nsame semantic meaning\n  as &quot;assume a de=\r\nfault value&quot;.\n\nIf you can do this, and if you&#39;re willing to *not* embed a v=\r\nersion\nnumber in your schema identifier (which is probably too radical for\n=\r\nmany people -- hence your quite accurate complaints about\npolymorphism), yo=\r\nu can cover a pretty surprising percentage of the\ntypical evolution scenari=\r\nos that I have seen.\n\nOn the other hand, there are going to be some kinds o=\r\nf changes where\nthis doesn&#39;t work.  But embedding links in the HATEOAS mann=\r\ner can\nstill help you.  If the server knows what version the client is\nprog=\r\nrammed for (in the Sun Cloud API, we allow but do not require the\nclient ot=\r\n specify this in an HTTP header), it can send back different\nURIs (to repre=\r\nsentations based on different versions of the schema).\nThe server has to be=\r\n willing to support both, but you can deal with\nthat on the server end in a=\r\n bunch of different ways (server pool &quot;A&quot;\nsupports version &quot;M&quot; and server p=\r\nool &quot;B&quot; serves version &quot;N&quot;, or write\nserver code that understands both form=\r\nats, or ...) without the client\nhaving to worry about changing their URI ge=\r\nneration logic to match the\n(often changed) rules for version &quot;N&quot;.\n\n&gt;\n&gt; Ano=\r\nther thought I had on HATEOAS was, what about making the links a part of\n&gt; =\r\nyour schema? =A0i.e. specifying in your schema the exact relationships and\n=\r\n&gt; types (but not URIs) that will be made available. =A0If you combine this =\r\nwith\n&gt; HTTP content negotiation, the client can guarantee a specific versio=\r\nn of its\n&gt; conversation or business process. =A0It also allows the server t=\r\no tell the\n&gt; client it doesn&#39;t support that type of interaction anymore.\n\nA=\r\ntom goes towards this direction with the &lt;link&gt; element (which I\nwould eval=\r\nuate as a candidate representation of relationships any time\nI was looking =\r\nat an XML representation, simply because it is pretty\nfamiliar to people), =\r\nwhere you can optionally specify things like the\nmedia type of the response=\r\n you can expect.  But doesn&#39;t the OPTIONS\ncommand tell you what verbs a par=\r\nticular URI supports?\n\nCraig\n\n\n&gt;\n&gt; BTW, thanks a lot for the explanation. =\r\n=A0This will help me greatly when\n&gt; explaining HATEOAS to colleagues, users=\r\n, and customers.\n&gt;\n&gt; --\n&gt; Bill Burke\n&gt; JBoss, a division of Red Hat\n&gt; http:=\r\n//bill.burkecentral.com\n&gt;\n\n"}}
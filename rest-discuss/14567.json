{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":69164307,"authorName":"mike amundsen","from":"mike amundsen &lt;mamund@...&gt;","profile":"mamund","replyTo":"SENDER","senderId":"GKwIvI1oaS1xoxhOp0C3imNJTFtKIwEiM6IGPrS4TEoRuEKV1Bds0QR3Zb62H3c7wBzNEXY0Yh3uWtHFeRz-JmkBj45jCdw","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] How can a framework/library encourage REST-ful \tdevelopment?","postDate":"1263592111","msgId":14567,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGI1NDhkZjY1MTAwMTE1MTM0OGw1MmViN2Q4OXY2N2JjZGViNmM5MTczYWNkQG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PDgxNThhZDc1MTAwMTE1MTMzM2lkOTE5NDZjcmE0MzNhMTUxNGExMjY1YjVAbWFpbC5nbWFpbC5jb20+","referencesHeader":"PGI1NDhkZjY1MTAwMTE1MTIyN3I2ZmNmMjI0NGsxY2ViZDIyYTI0M2QwMTg0QG1haWwuZ21haWwuY29tPgkgPDgxNThhZDc1MTAwMTE1MTMzM2lkOTE5NDZjcmE0MzNhMTUxNGExMjY1YjVAbWFpbC5nbWFpbC5jb20+"},"prevInTopic":14566,"nextInTopic":14568,"prevInTime":14566,"nextInTime":14568,"topicId":14561,"numMessagesInTopic":28,"msgSnippet":" You might check out this post from Erik Wilde:  yep, i commented there already. The list of features you provide are pretty close to those","rawEmail":"Return-Path: &lt;mca@...&gt;\r\nX-Sender: mca@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 80480 invoked from network); 15 Jan 2010 21:48:33 -0000\r\nX-Received: from unknown (98.137.34.45)\n  by m12.grp.re1.yahoo.com with QMQP; 15 Jan 2010 21:48:33 -0000\r\nX-Received: from unknown (HELO mail-fx0-f222.google.com) (209.85.220.222)\n  by mta2.grp.sp2.yahoo.com with SMTP; 15 Jan 2010 21:48:32 -0000\r\nX-Received: by fxm22 with SMTP id 22so737672fxm.2\n        for &lt;rest-discuss@yahoogroups.com&gt;; Fri, 15 Jan 2010 13:48:32 -0800 (PST)\r\nMIME-Version: 1.0\r\nX-Received: by 10.223.57.66 with SMTP id b2mr3337435fah.33.1263592111839; Fri, \n\t15 Jan 2010 13:48:31 -0800 (PST)\r\nIn-Reply-To: &lt;8158ad751001151333id91946cra433a1514a1265b5@...&gt;\r\nReferences: &lt;b548df651001151227r6fcf2244k1cebd22a243d0184@...&gt;\n\t &lt;8158ad751001151333id91946cra433a1514a1265b5@...&gt;\r\nDate: Fri, 15 Jan 2010 16:48:31 -0500\r\nX-Google-Sender-Auth: 20b6cbce03eb6e28\r\nMessage-ID: &lt;b548df651001151348l52eb7d89v67bcdeb6c9173acd@...&gt;\r\nTo: Peter Keane &lt;pkeane@...&gt;\r\nCc: rest-discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Type: multipart/alternative; boundary=001517473434f79a94047d3af62f\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: mike amundsen &lt;mamund@...&gt;\r\nSubject: Re: [rest-discuss] How can a framework/library encourage REST-ful \n\tdevelopment?\r\nX-Yahoo-Group-Post: member; u=69164307; y=vlOMxp2ET5QcgEU3cLU740U3zwIMtqmFp6fTNxHCB3Zh\r\nX-Yahoo-Profile: mamund\r\n\r\n\r\n--001517473434f79a94047d3af62f\r\nContent-Type: text/plain; charset=windows-1252\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;snip&gt;\nYou might check out this post from Erik Wilde:\n&lt;/snip&gt;\nyep, i commen=\r\nted there already.\n\nThe list of features you provide are pretty close to th=\r\nose mentioned in a\nfew threads here and on the web.   Seems that many of th=\r\nese lists focus on\nthe day-to-day details of working with HTTP and being RE=\r\nST-ful along the\nway. That&#39;s cool.\n\nI need to do more thinking about _why_ =\r\nthese are listed in the context of\nREST and what, if anything can be said a=\r\nbout the style itself apart from the\nprotocol in use. I&#39;ve found a handful =\r\nof papers on matching software\narchitecture to programming, but nothing yet=\r\n on _network_ architecture and\nprogramming. I&#39;m still digging.\n\nmca\nhttp://=\r\namundsen.com/blog/\n\n\n\nOn Fri, Jan 15, 2010 at 16:33, Peter Keane &lt;pkeane@ma=\r\nil.utexas.edu&gt; wrote:\n\n&gt; You might check out this post from Erik Wilde:\n&gt;\n&gt;=\r\n\n&gt; http://dret.typepad.com/dretblog/2009/05/rest-programming-toolbox-requir=\r\nements.html\n&gt;\n&gt; For me, the bare minimum includes:\n&gt;\n&gt; - support for GET,PU=\r\nT,POST, DELETE http methods (at least ... HEAD, OPTIONS\n&gt; nice, too).\n&gt; - f=\r\nor GET requests, I want to know what media type is preferred\n&gt; (combination=\r\n of looking at Accept header and/or file extension, etc.)\n&gt; - for PUT/POST =\r\nI want to be able to quickly and easily now the incoming\n&gt; Content-type\n&gt; -=\r\n an easy way to parse the requested URL (w/ regex or named sections, etc.)\n=\r\n&gt; - the ability to dispatch to a handler function by any combination of the=\r\n\n&gt; above\n&gt; - tools for creating representations in the most common media ty=\r\npes: HTML\n&gt; (a template language), JSON, Atom, RDF, etc. and serving the pr=\r\noper one\n&gt; based on requested type.\n&gt;\n&gt; In PHP, I don&#39;t think there is an o=\r\nbvious option (we&#39;ve built our own\n&gt; RESTful classes for Zend Framework: ht=\r\ntp://github.com/pkeane/cola-zend),\n&gt; what I know of RoR seems to meet crite=\r\nria, Django seems pretty nicely\n&gt; RESTful, as does the Google App Engine &quot;W=\r\nebApp.&quot;\n&gt;\n&gt; --peter\n&gt;\n&gt; On Fri, Jan 15, 2010 at 2:27 PM, mike amundsen &lt;mam=\r\nund@...&gt; wrote:\n&gt;\n&gt;&gt;\n&gt;&gt;\n&gt;&gt; Recently, I&#39;ve been thinking about how a c=\r\noding framework or library\n&gt;&gt; can influence the way developers implement ap=\r\nplications. What would a\n&gt;&gt; coding environment look like if it was meant to=\r\n encourage results that\n&gt;&gt; followed a particular _architectural_ style (not=\r\n programming style).\n&gt;&gt;\n&gt;&gt; IOW, is there a way to craft a framework that co=\r\nnstrains developers in\n&gt;&gt; ways that results in a REST-ful implementation of=\r\n the application?\n&gt;&gt;\n&gt;&gt; I did some digging, but have yet to find any writin=\r\ng on this topic.\n&gt;&gt;\n&gt;&gt; Here are some &quot;off-the-top-of-my-head&quot; items:\n&gt;&gt;\n&gt;&gt; =\r\nFor example, a framework might exhibit these REST-like traits:\n&gt;&gt; - there i=\r\ns a clear separation of concerns between resource\n&gt;&gt; identifiers, resources=\r\n, and representations\n&gt;&gt; - developers must define a resource as the public =\r\napplication interface\n&gt;&gt; - the Uniform Interface is enforced (e.g. those me=\r\nthods are the only\n&gt;&gt; public members exposed for a resource)\n&gt;&gt; - developer=\r\ns must always associate one or more representation formats\n&gt;&gt; with a resour=\r\nce and/or resource method before the implementation is\n&gt;&gt; valid\n&gt;&gt; - there =\r\nis no way to define and use server-side session state objects\n&gt;&gt;\n&gt;&gt; Some HT=\r\nTP-specific traits might be:\n&gt;&gt; - support for content negotiation is &quot;baked=\r\n-in&quot;\n&gt;&gt; - support for conditional requests is &quot;baked-in&quot; and automatic\n&gt;&gt; -=\r\n RPC-like implementation patterns (e.g. gateway URIs) are somehow\n&gt;&gt; diffic=\r\nult to implement or are flagged as invalid\n&gt;&gt;\n&gt;&gt; Any comments? Is this line=\r\n of thinking pure folly? old hat? already\n&gt;&gt; resolved sufficiently?\n&gt;&gt;\n&gt;&gt; m=\r\nca\n&gt;&gt; http://amundsen.com/blog/\n&gt;&gt;  \n&gt;&gt;\n&gt;\n&gt;\n\r\n--001517473434f79a94047d3af62f\r\nContent-Type: text/html; charset=windows-1252\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;snip&gt;&lt;div&gt;You might check out this post from Erik Wilde:&lt;br&gt;&lt;/sni=\r\np&gt;&lt;/div&gt;&lt;div&gt;yep, i commented there already.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Th=\r\ne list of features you provide are pretty close to those mentioned in a few=\r\n threads here and on the web. =A0 Seems that many of these lists focus on t=\r\nhe day-to-day details of working with HTTP and being REST-ful along the way=\r\n. That&#39;s cool.&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I need to do more thinking abo=\r\nut _why_ these are listed in the context of REST and what, if anything can =\r\nbe said about the style itself apart from the protocol in use. I&#39;ve fou=\r\nnd a handful of papers on matching software architecture to programming, bu=\r\nt nothing yet on _network_ architecture and programming. I&#39;m still digg=\r\ning.&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;mca&lt;br&gt;&lt;a href=3D&quot;http://amundsen.com/blog/&quot;=\r\n&gt;http://amundsen.com/blog/&lt;/a&gt;&lt;br&gt;&lt;br&gt;\n&lt;br&gt;&lt;br&gt;&lt;div class=3D&quot;gmail_quote&quot;&gt;O=\r\nn Fri, Jan 15, 2010 at 16:33, Peter Keane &lt;span dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;=\r\nmailto:pkeane@...&quot;&gt;pkeane@...&lt;/a&gt;&gt;&lt;/span&gt; wrote:=\r\n&lt;br&gt;&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;margin:0 0 0 .8ex;border-lef=\r\nt:1px #ccc solid;padding-left:1ex;&quot;&gt;\nYou might check out this post from Eri=\r\nk Wilde:&lt;br&gt;&lt;br&gt;&lt;a href=3D&quot;http://dret.typepad.com/dretblog/2009/05/rest-pr=\r\nogramming-toolbox-requirements.html&quot; target=3D&quot;_blank&quot;&gt;http://dret.typepad.=\r\ncom/dretblog/2009/05/rest-programming-toolbox-requirements.html&lt;/a&gt;&lt;br&gt;\n\n&lt;b=\r\nr&gt;For me, the bare minimum includes:&lt;br&gt;&lt;br&gt;- support for GET,PUT,POST, DEL=\r\nETE http methods (at least ... HEAD, OPTIONS nice, too).&lt;br&gt;- for GET reque=\r\nsts, I want to know what media type is preferred (combination of looking at=\r\n Accept header and/or file extension, etc.)&lt;br&gt;\n\n- for PUT/POST I want to b=\r\ne able to quickly and easily now the incoming Content-type &lt;br&gt;- an easy wa=\r\ny to parse the requested URL (w/ regex or named sections, etc.)&lt;br&gt;- the ab=\r\nility to dispatch to a handler function by any combination of the above&lt;br&gt;=\r\n\n\n- tools for creating representations in the most common media types: HTML=\r\n (a template language), JSON, Atom, RDF, etc. and serving the proper one ba=\r\nsed on requested type.&lt;br&gt;&lt;br&gt;In PHP, I don&#39;t think there is an obvious=\r\n option (we&#39;ve built our own RESTful classes for Zend Framework: &lt;a hre=\r\nf=3D&quot;http://github.com/pkeane/cola-zend&quot; target=3D&quot;_blank&quot;&gt;http://github.co=\r\nm/pkeane/cola-zend&lt;/a&gt;), what I know of RoR seems to meet criteria, Django =\r\nseems pretty nicely RESTful, as does the Google App Engine &quot;WebApp.&qu=\r\not;&lt;br&gt;\n\n&lt;br&gt;--peter&lt;br&gt;&lt;br&gt;&lt;div class=3D&quot;gmail_quote&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;div=\r\n class=3D&quot;h5&quot;&gt;On Fri, Jan 15, 2010 at 2:27 PM, mike amundsen &lt;span dir=3D&quot;l=\r\ntr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:mamund@...&quot; target=3D&quot;_blank&quot;&gt;mamund@yahoo.=\r\ncom&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;\n&lt;/div&gt;&lt;/div&gt;&lt;blockquote class=3D&quot;gmail_quote&quot;=\r\n style=3D&quot;border-left:1px solid rgb(204, 204, 204);margin:0pt 0pt 0pt 0.8ex=\r\n;padding-left:1ex&quot;&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;div style=3D&quot;background-color:rgb(255, 2=\r\n55, 255)&quot;&gt;\n&lt;span&gt;=A0&lt;/span&gt;\n\n\n&lt;div&gt;\n  &lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;div class=3D&quot;h5=\r\n&quot;&gt;\n\n\n    &lt;div&gt;\n      \n      \n      &lt;p&gt;Recently, I&#39;ve been thinking abou=\r\nt how a coding framework or library&lt;br&gt;\ncan influence the way developers im=\r\nplement applications. What would a&lt;br&gt;\ncoding environment look like if it w=\r\nas meant to encourage results that&lt;br&gt;\nfollowed a particular _architectural=\r\n_ style (not programming style).&lt;br&gt;\n&lt;br&gt;\nIOW, is there a way to craft a fr=\r\namework that constrains developers in&lt;br&gt;\nways that results in a REST-ful i=\r\nmplementation of the application?&lt;br&gt;\n&lt;br&gt;\nI did some digging, but have yet=\r\n to find any writing on this topic.&lt;br&gt;\n&lt;br&gt;\nHere are some &quot;off-the-to=\r\np-of-my-head&quot; items:&lt;br&gt;\n&lt;br&gt;\nFor example, a framework might exhibit t=\r\nhese REST-like traits:&lt;br&gt;\n- there is a clear separation of concerns betwee=\r\nn resource&lt;br&gt;\nidentifiers, resources, and representations&lt;br&gt;\n- developers=\r\n must define a resource as the public application interface&lt;br&gt;\n- the Unifo=\r\nrm Interface is enforced (e.g. those methods are the only&lt;br&gt;\npublic member=\r\ns exposed for a resource)&lt;br&gt;\n- developers must always associate one or mor=\r\ne representation formats&lt;br&gt;\nwith a resource and/or resource method before =\r\nthe implementation is&lt;br&gt;\nvalid&lt;br&gt;\n- there is no way to define and use ser=\r\nver-side session state objects&lt;br&gt;\n&lt;br&gt;\nSome HTTP-specific traits might be:=\r\n&lt;br&gt;\n- support for content negotiation is &quot;baked-in&quot;&lt;br&gt;\n- suppor=\r\nt for conditional requests is &quot;baked-in&quot; and automatic&lt;br&gt;\n- RPC-=\r\nlike implementation patterns (e.g. gateway URIs) are somehow&lt;br&gt;\ndifficult =\r\nto implement or are flagged as invalid&lt;br&gt;\n&lt;br&gt;\nAny comments? Is this line =\r\nof thinking pure folly? old hat? already&lt;br&gt;\nresolved sufficiently?&lt;br&gt;\n&lt;br=\r\n&gt;\nmca&lt;br&gt;\n&lt;a href=3D&quot;http://amundsen.com/blog/&quot; target=3D&quot;_blank&quot;&gt;http://am=\r\nundsen.com/blog/&lt;/a&gt;&lt;br&gt;\n&lt;/p&gt;\n\n    &lt;/div&gt;\n     \n\n    \n    &lt;/div&gt;&lt;/div&gt;&lt;div =\r\nstyle=3D&quot;color:rgb(255, 255, 255);min-height:0pt&quot;&gt;&lt;/div&gt;\n\n\n&lt;/div&gt;\n\n\n\n  \n\n\n\n=\r\n\n\n\n&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;\n&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;\n\r\n--001517473434f79a94047d3af62f--\r\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":11652427,"authorName":"pkeane","from":"pkeane &lt;pkeane@...&gt;","profile":"pkeane_littlehat","replyTo":"SENDER","senderId":"GuIe7yykU_Ny3cQXDCvptwJYQcTZcuYxmbYjbxAO0Tx2nTitCHJIXqYHkvDM4S1PGWepcC3kPTcpd9kagIovmQNj8VZmnA","spamInfo":{"isSpam":false,"reason":"12"},"subject":"more on cookies & authentication","postDate":"1196232133","msgId":9880,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGFscGluZS5MTlguMC45OTk5LjA3MTEyODAwMjEzMjAuMTUxMjJAaGFycG8ubGFpdHMudXRleGFzLmVkdT4="},"prevInTopic":0,"nextInTopic":9881,"prevInTime":9879,"nextInTime":9881,"topicId":9880,"numMessagesInTopic":3,"msgSnippet":"Hi All- In refactoring a digital library application to hue closer to RESTful architectural principles, I settled on this approach to athentication (I don t","rawEmail":"Return-Path: &lt;pkeane@...&gt;\r\nX-Sender: pkeane@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 34254 invoked from network); 28 Nov 2007 06:42:14 -0000\r\nX-Received: from unknown (66.218.67.97)\n  by m43.grp.scd.yahoo.com with QMQP; 28 Nov 2007 06:42:14 -0000\r\nX-Received: from unknown (HELO harpo.laits.utexas.edu) (128.83.27.7)\n  by mta18.grp.scd.yahoo.com with SMTP; 28 Nov 2007 06:42:13 -0000\r\nX-Received: by harpo.laits.utexas.edu (Postfix, from userid 1000)\n\tid 2EDF53E0090; Wed, 28 Nov 2007 00:42:13 -0600 (CST)\r\nX-Received: from localhost (localhost [127.0.0.1])\n\tby harpo.laits.utexas.edu (Postfix) with ESMTP id 2BFFF3E008F\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Wed, 28 Nov 2007 00:42:13 -0600 (CST)\r\nDate: Wed, 28 Nov 2007 00:42:13 -0600 (CST)\r\nX-X-Sender: pkeane@...\r\nTo: rest-discuss@yahoogroups.com\r\nMessage-ID: &lt;alpine.LNX.0.9999.0711280021320.15122@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: TEXT/PLAIN; format=flowed; charset=US-ASCII\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: pkeane &lt;pkeane@...&gt;\r\nSubject: more on cookies & authentication\r\nX-Yahoo-Group-Post: member; u=11652427; y=R1aUlSJTLiJIEFsyYsi-SfEYdMV59zuz3a8sz7MVyHeELBBGwmKBSV1IQA\r\nX-Yahoo-Profile: pkeane_littlehat\r\n\r\nHi All-\n\nIn refactoring a digital library application to hue closer to RESTful \narchitectural principles, I settled on this approach to athentication (I \ndon&#39;t mean to suggest this is completely RESTful, rather it&#39;s as close as \nI could practically get in the authentication bit).\n\n1. Any resource identified by a URL that does NOT inlude a user_id is \naccessible by ANY user and is always the EXACT same representation (thus \ncacheable). (Note that personalization is necessary and I&#39;ll address that \nbelow).\n\n2. Users have their own user collections and slideshows and these are \naddressed by a URL which includes the user_id -- these resources are thus \nnaturally &#39;personal&#39;, i.e. intended for and accessible by that user only\n\n3. Anonymous users can&#39;t do much other than see a list of collections \navailable (these are not user collections, but rather, top level, e.g. \n&quot;Art & Art History Collection&quot;) so they need to log in. Note: Berend&#39;s \nidea for anonymous yet trackable users might be perfect here.\n\n4. Upon login , the server sets two cookies: DASE_USER which simply \ncontains the user&#39;s user_id and DASE_AUTH which contains an encrypted \nstring which the server will be able to decode to extract the user_id. \n(Security note -- vulnerable to replay attacks, but there are a few ways \nthose dangers might be mitigated & besides, pretty good security is what \nwe are after)\n\n5. As a logged in user uses the site they always have a menu of their \n&#39;user collections & slideshows&#39; available in a menu.  This is where we use \nthe two cookies: on every request to a non user-specific page, a second \nXMLHTTPRequest is made to grab a json data structure of all of the user&#39;s \npersonal data.  The url that XHR uses to make the request includes, of \ncourse, the user_id which it got from that plain text cookie.  Before the \nserver sends back the data, it decrypts the secure cookie to make sure \nthat the user_id in the URL matches the user_id in the secure cookie. \nAfter obtaining the json data from the server, the page inserts the user \ndata into the dom tree and thus the page is personalized (this is just \nwhat Aristotle described a few messages back).\n\n6. While accessing &#39;personal&#39; pages (user_id is in URL) all requests \nauthenticate by comparing the url user_id to the secure cookie user_id.\n\n7. But personalized interactions on a non-personalized page (i.e.&#39;add to \ncart&#39;/&#39;remove from cart&#39; link by each thumbnail in a search results page) \nare all done by way of XHR hijacking the link click and sending the \nappropriate http request (POST or DELETE) with a URL that includes the \nuser_id (note: &#39;cart&#39; is just a specialized case of a user collection).\n\nIt&#39;s actually a pretty simple approach and has been not too difficult to \nimplement.  If anyone has suggestions for a better/simpler and/or more \nRESTful approach, I would love to hear them.\n\nThe project (built w/ PHP5/(MySQL|PostgreSQL|SQLite|XML) will be released \nas open source software with a target audience of higher ed folks (it&#39;s \nbeing developed at the University of Texas at Austin), so simplicity of \ndesign is critical.  I need it to be as simple to \ninstall/hack/maintain/extend as Wordpress.  Scalabilty is also important \nand my initial benchmarking (leveraging extensive application-side \nfile-based caching -- thanks REST!) show marked gains over the previous \narchitecture in that regard.\n\nPeter Keane\ndaseproject.org\n\n"}}
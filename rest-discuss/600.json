{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":72037691,"authorName":"S. Alexander Jacobson","from":"&quot;S. Alexander Jacobson&quot; &lt;shop2it@...&gt;","profile":"shop2it","replyTo":"SENDER","senderId":"reaE47POn1g70qlcEEnlBZH3VxuOQ4IyNm9hQ3pAI0zdy-7jH57_wpSVfJRfCBmdhJH4Tdpb7VlPxhuRCTIkn6uMrfY5CMYF43sP42V-ZbAgew","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] HttpEvents as currently contemplated are extraneous?","postDate":"1012689695","msgId":600,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PFBpbmUuV05ULjQuNDMuMDIwMjAyMTAxOTQ0MC4xNTU2LTEwMDAwMEBnYW5kb2xwaC5BU0dBUkQuam1zPg==","inReplyToHeader":"PDNDNUI1MDYxLjM2OTNCNDJAanVtcC5uZXQ+"},"prevInTopic":598,"nextInTopic":601,"prevInTime":599,"nextInTime":601,"topicId":591,"numMessagesInTopic":16,"msgSnippet":"I think we are converging on your (1), state- change-notification/cache-invalidation.  I also am beginning to think that this whole discussion is extraneous;","rawEmail":"Return-Path: &lt;alex@...&gt;\r\nX-Sender: alex@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_0_1_3); 2 Feb 2002 22:40:15 -0000\r\nReceived: (qmail 66713 invoked from network); 2 Feb 2002 22:40:15 -0000\r\nReceived: from unknown (216.115.97.172)\n  by m4.grp.snv.yahoo.com with QMQP; 2 Feb 2002 22:40:15 -0000\r\nReceived: from unknown (HELO mail.vo.com) (208.36.81.99)\n  by mta2.grp.snv.yahoo.com with SMTP; 2 Feb 2002 22:40:14 -0000\r\nReceived: from gandolph.ASGARD.jms (alexhome2 [66.108.152.69])\n\tby mail.vo.com (8.12.1/8.12.1) with ESMTP id g12Me6Fv025831\n\t(version=TLSv1/SSLv3 cipher=RC4-MD5 bits=128 verify=NO);\n\tSat, 2 Feb 2002 17:40:10 -0500\r\nDate: Sat, 2 Feb 2002 17:41:35 -0500 (Eastern Standard Time)\r\nTo: Jeff Bone &lt;jbone@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nSubject: Re: [rest-discuss] HttpEvents as currently contemplated are extraneous?\r\nIn-Reply-To: &lt;3C5B5061.3693B42@...&gt;\r\nMessage-ID: &lt;Pine.WNT.4.43.0202021019440.1556-100000@...&gt;\r\nX-X-Sender: alex@...\r\nMIME-Version: 1.0\r\nContent-Type: TEXT/PLAIN; charset=US-ASCII\r\nX-eGroups-From: &quot;S. Alexander Jacobson&quot; &lt;alex@...&gt;\r\nFrom: &quot;S. Alexander Jacobson&quot; &lt;shop2it@...&gt;\r\nX-Yahoo-Group-Post: member; u=72037691\r\nX-Yahoo-Profile: shop2it\r\n\r\nI think we are converging on your (1), state-\nchange-notification/cache-invalidation.  I also\nam beginning to think that this whole discussion\nis extraneous; that people who want\nnotification should just use persistent GET.\n\nThe main argument against persistent GET for\nnotification is that clients and servers are\nforced to hold open potentially large numbers of\nTCP connections (and this is expensive).\n\nHowever:\n1. There is no evidence that open TCP connections\nreally consume that many more resources than\nsubscriptions.  The only difference is that\nOSs typically don&#39;t allow TPC connections to be\nstored on disk, but I don&#39;t think that is\nsomething we need be concerned with.  (I could\nimagine unused connections being swapped to\nvirtual memory (or people can just buy more\nmemory).\n\n2. Holding open a persistent GET consumes less\nbandwidth than establishing two HTTP connections\nand sending NOTIFY in one reuest and a repeat of\nthe actual content in the other.\n\n3. Persistent GET is much more in the spirit of\nHTTP than asynchronous notifications.\n\nI think, unless you can make a good argument\nagainst Persistent GET, there is no real need\nfor the HttpEvents spec.\n\nThat being said, it might be useful to establish a\nstandard format for this Persistent GET for cache\ninvalidation or for replication or for security\nmonitoring, but I don&#39;t see any value in\nHttpEvents that persistent GET does not\nbetter provide.\n\n-Alex-\n\n\n\n\nOn Fri, 1 Feb 2002, Jeff Bone wrote:\n\n&gt;\n&gt; So just finished an afternoon reread of Ari Luotonen&#39;s book,\n&gt; hadn&#39;t looked at it in a couple of years;  also some material\n&gt; online.  I&#39;ve *almost* convinced myself that HttpEvents as we are\n&gt; currently discussing them are mostly extraneous.  I&#39;m going to\n&gt; say some things about my understanding of the current very rough\n&gt; but gradually converging consensus, then lay out the strawman for\n&gt; why this approach is unnecessary.  It&#39;s a straw man, whack away.\n&gt;\n&gt; CURRENT CONSENSUS:  An HttpEvents protocol could be any one of or\n&gt; combination of things.  It might be (1) simply a state-change\n&gt; notification protocol, (2) a push-based state replication\n&gt; protocol, or (3) a subscription / listener management protocol.\n&gt; It appears that we are generally converging on (1), viewing (2)\n&gt; as either an optimization or application-specific or both, and\n&gt; (3) as interesting but somewhat out-of-scope for this spec.  (We\n&gt; are talking about reifying subscribers and subscriptions, but\n&gt; pushing out &quot;listener management&quot; etc.)\n&gt;\n&gt; Is that about right?\n&gt;\n&gt; If so, then we may be spinning our wheels somewhat; various folks\n&gt; did a fair bit of work on NOTIFY back in the early days [1] in\n&gt; the context of proxy cache notification and in the course of the\n&gt; HTTP-NG discussions.  Not sure what the current state of NOTIFY\n&gt; is;  did it ever go anywhere?  I apologize if there&#39;s an obvious\n&gt; answer to this, as my own &quot;cache&quot; of HTTP caching-related\n&gt; information is a bit stale.  No mention of NOTIFY / this draft in\n&gt; Ari&#39;s 1998 book, and very little I can find via Google.\n&gt;\n&gt; BUT...\n&gt;\n&gt; [1] describes a protocol extension (with a &quot;new&quot; method, NOTIFY)\n&gt; that solves (1) in a very HTTPish way.  It doesn&#39;t reify\n&gt; subscriptions, but it doesn&#39;t have to --- it appears that\n&gt; subscriptions are at-most-once commitments to notify the\n&gt; subscriber that the state of a resource has changed, for the\n&gt; purpose of cache invalidation.  Renewal of the subscription\n&gt; appears to happen incrementally --- the subscription &quot;expires&quot;\n&gt; after the first notification, and is &quot;renewed&quot; on the subsequent\n&gt; GET (if any) that happens to refresh the cache after the\n&gt; notification is received.\n&gt;\n&gt; The more I think about this, the more elegant it seems.\n&gt;\n&gt; Here&#39;s how this protocol could be used to accomplish (1):\n&gt;\n&gt; CLIENT -&gt; SERVER\n&gt; ----------------------\n&gt; GET /foo HTTP/1.1\n&gt; Accept: text/html\n&gt; Proxy-Features: my.host.com; notify\n&gt;\n&gt; (Note that we&#39;re &quot;pretending&quot; to be our own proxy server cache.\n&gt; We&#39;re requesting notification of state change on the resource if\n&gt; it&#39;s available.)\n&gt;\n&gt; SERVER -&gt; CLIENT\n&gt; ---------------------\n&gt; 201 OK\n&gt; Cache-Control: notify\n&gt; Content-Type: text/html\n&gt;\n&gt; ...text...\n&gt;\n&gt; (The SERVER responds and says, among other things, that it is\n&gt; willing to notify (via the Cache-Control directive) the CLIENT\n&gt; at-most-once (?) that the resource has changed by possibly\n&gt; emitting a NOTIFY for that resource to the CLIENT at some later\n&gt; date.)\n&gt;\n&gt; Later on, when /foo changes, the SERVER initiates a connection\n&gt; back to CLIENT (the machine specified in Proxy-Features:, i.e.\n&gt; my.host.com) and sends notification that the state change\n&gt; occurred / the cached copy (if any) has expired:\n&gt;\n&gt; SERVER -&gt; CLIENT\n&gt; ---------------------\n&gt; NOTIFY /foo HTTP/1.1\n&gt;\n&gt; (Presumably the fully-qualified URI is somehow reconstructed from\n&gt; TCP connection data.  This is gross and unworkable, so I would\n&gt; assume that instead NOTIFY is required to provide a\n&gt; fully-qualified URI.)\n&gt;\n&gt; The client CLIENT proceed to refresh its cache via a GET.  At\n&gt; this point, the SERVER is presumably allowed to stop sending\n&gt; further notifications;  in order to receive the next\n&gt; notification, the client parameterizes the GET so that it looks\n&gt; just like the first one.  This cycle repeats, ad infinitum, as\n&gt; long as the CLIENT is interested in being updated about state\n&gt; changes on SERVER/foo:\n&gt;\n&gt; CLIENT -&gt; SERVER\n&gt; ----------------------\n&gt; GET /foo HTTP/1.1\n&gt; Accept: text/html\n&gt; Proxy-Features: my.host.com; notify\n&gt;\n&gt; ...lather, rinse, repeat...\n&gt;\n&gt; DISCUSSION\n&gt; --------------\n&gt;\n&gt; PROS:  This seems generally workable.  It avoids issues with\n&gt; management of subscriptions, etc. by its at-most-once\n&gt; notification semantics.  (It&#39;s at-most-once in that notifications\n&gt; aren&#39;t guaranteed;  the origin server may provide data to feed\n&gt; cache age and freshness calculations, and the client / proxy must\n&gt; use its own heuristics to determine whether to trust a cached\n&gt; object in the absense of a notification.)  The net effect is the\n&gt; same as (1) in that clients receive state change notifications\n&gt; for particular objects.  *** It also partially addresses Lucas&#39;\n&gt; concern about state-leakage, in much the same manner that Lucas\n&gt; suggested;  a notification client need only support the NOTIFY\n&gt; method.  Responses to NOTIFY aren&#39;t described, but presumably a\n&gt; reasonable set of responses could be specified so that extra\n&gt; state isn&#39;t leaked in response to a NOTIFY. ***  It also, as Alex\n&gt; notes, avoids complications with overloading the semantics of\n&gt; i.e. POST.\n&gt;\n&gt; CONS:  As noted in [1], any point-to-point notification protocol\n&gt; suffers when there are a large number of parties interested in\n&gt; receiving notifications;  the draft explicitly states that\n&gt; &quot;clients should not attempt to use this facility as a matter of\n&gt; course&quot; for that reason.  IMO, we&#39;re no better or worse off in\n&gt; this regard with either [1] or HttpEvents as contemplated.  There\n&gt; are some problems with this draft, such as the lack of fully\n&gt; qualifying the URI in the NOTIFY message --- how does the\n&gt; notification client know what the notification relates to?  Also,\n&gt; the terminology is very proxy specific.  It doesn&#39;t reify the\n&gt; notion of a subscription, but given a one-shot semantics I&#39;m not\n&gt; sure this is necessary or even desirable. (!) :-/\n&gt;\n&gt; TANGENTIAL ISSUES\n&gt; ------------------------\n&gt;\n&gt; Most of the notification application scenarios I&#39;ve been\n&gt; contemplating are actually made simpler by simply recasting them\n&gt; in terms of proxy cache invalidation and assuming something like\n&gt; the above.  This does *not* specify any state replication /\n&gt; update by piggybacking the NOTIFY, nor does it address the issue\n&gt; of fan-out.  It also doesn&#39;t address the issue of proxy fan-out,\n&gt; where a *request* to an intermediary needs to be fanned out to\n&gt; multiple origin servers, but that&#39;s a completely different topic\n&gt; and scenario.\n&gt;\n&gt;\n&gt;\n&gt;\n&gt; [1]  http://www.w3.org/TR/WD-proxy\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n\n___________________________________________________________________\nS. Alexander Jacobson                   i2x Media\n1-212-787-1914 voice                    1-603-288-1280 fax\n\n\n\n\n"}}
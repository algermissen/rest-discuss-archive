{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"yyS6GdR0aMYIdaGd-gJC22Tw4qBF4p2egM39MzYjpGmwhH2oHtTSCoSCprcfFiGt3OpQLwI_RzNtwX5MC1xHtzXfzo9-celvMvkXQO1cyw","spamInfo":{"isSpam":false,"reason":"3"},"subject":"RE: [rest-discuss] REST design question","postDate":"1163478416","msgId":6953,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PFc3MjY3MzI5ODEzMTIzMDgxMTYzNDc4NDE2QG1haWwubWFpbHNuYXJlLm5ldD4="},"prevInTopic":6950,"nextInTopic":6957,"prevInTime":6952,"nextInTime":6954,"topicId":6804,"numMessagesInTopic":134,"msgSnippet":"... Sorry, my wording is a bit confusing.  The ambiguous semantics of submit in this context don t help.  When I said have people submit their feed URLs I","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 48383 invoked from network); 14 Nov 2006 04:27:23 -0000\r\nReceived: from unknown (66.218.67.34)\n  by m28.grp.scd.yahoo.com with QMQP; 14 Nov 2006 04:27:23 -0000\r\nReceived: from unknown (HELO mail.mailsnare.net) (206.246.200.187)\n  by mta8.grp.scd.yahoo.com with SMTP; 14 Nov 2006 04:27:22 -0000\r\nReceived: from mail.mailsnare.net (v167.mailsnare.net [206.246.200.167])\n\tby mail.mailsnare.net (Postfix) with ESMTP id AA21F2D048;\n\tTue, 14 Nov 2006 04:26:56 +0000 (UTC)\r\nTo: &quot;Mike Schinkel&quot; &lt;mikeschinkel@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nImportance: Normal\r\nSensitivity: Normal\r\nMessage-ID: &lt;W7267329813123081163478416@...&gt;\r\nX-Mailer: Mintersoft EdgeDesk, Build 4.03.0105\r\nDate: Tue, 14 Nov 2006 04:26:56 +0000\r\nOrganization: Bison Systems Corporation\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;us-ascii&quot;\r\nContent-Transfer-Encoding: 7bit\r\nX-Virus-Scanned: by ClamAV at mailsnare.net\r\nX-eGroups-Msg-Info: 2:3:4:0\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nReply-To: eric@...\r\nSubject: RE: [rest-discuss] REST design question\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\n&gt;\n&gt;&gt;&gt; What Technorati should do, is have people submit their feed URLs, \n&gt;&gt;&gt; then do a HEAD request or a conditional GET to determine if any \n&gt;&gt;&gt; changes have been made.\n&gt; (...)\n&gt;Is that not submitting my URL?  I&#39;m confused still.\n&gt;\n&gt;&gt;&gt; Another way, is to make a URI for each subscriber to PUT a new \n&gt;&gt;&gt; &lt;updated&gt; value to.  \n&gt;\n\nSorry, my wording is a bit confusing.  The ambiguous semantics of &quot;submit&quot; in \nthis context don&#39;t help.  When I said &quot;have people submit their feed URLs&quot; \nI did not mean to imply that doesn&#39;t already happen.  The point I was making \nis that the feed URL is more or less constant, so what is the point of \nsubmitting it every time you post to or edit your weblog?\n\nIn the REST example I&#39;m describing here (I&#39;ll call it Technoresti), when the \nuser subscribes, they set up (using an HTML form) their account and &quot;submit&quot; \ntheir feed URL or URLs once, with the ability to make changes later.  They \nare assigned an URL like http://technoresti.com/users/{username} which \nidentifies a resource containing an arbitrary XML snippet like so:\n\n&lt;ul&gt;\n   &lt;li&gt;\n      &lt;a title=&#39;{feed title}&#39;\n         href=&#39;{feed URL}&#39;\n         type=&#39;application/atom+xml&#39;\n         charset=&#39;utf-8&#39;&gt;\n         &lt;updated&gt;2006-11-13T19:24:05-06:00&lt;/updated&gt;\n      &lt;/a&gt;\n   &lt;/li&gt;\n&lt;/ul&gt;\n\nInstead of making an XML-RPC POST to Technorati, WordPress (etc.) could just \nas easily make a REST PUT to Technoresti.\n\n&gt;\n&gt;An updated value of what?  The content in my RSS feed?\n&gt;\n\nYour feed should get a new timestamp whenever it&#39;s updated with new content.  \nThe value of that timestamp may be PUT to the user&#39;s URL to change the value \nin &lt;updated&gt; concurrently with your feed&#39;s timestamp being updated.  \nActually, as you&#39;ll see, REST allows the timestamp in the PUT to be an \narbitrary static value, i.e. &quot;1999-12-31T24:59:59Z&quot;, not that it&#39;s good \npractice to do so.\n\n&gt;\n&gt;If yes, then that\n&gt;puts the responsibility for correctness on the blog owner whereas Technorati\n&gt;would wants to improve the chances of it being done correctly.  Does that\n&gt;mean in REST the client is given responsibility for data quality?\n&gt;\n\nREST is not concerned with application logic, only information architecture.  \nThere is no constraint in REST regarding data quality, so no of course you \ncan&#39;t jump to any general conclusions about REST based on the implementation \nspecifics of this example.\n\nWhat improved chance of correctness is there from the RPC ping?  In both \nTechnorati and Technoresti, the subscriber makes a claim which may deploy a \nspider.  Technoresti would have an easier time filtering out DoS attacks than \nTechnorati by implementing access control on the assigned /{username} URL, \nwhereas Technorati uses one URL for everybody to POST to.\n\nTechnoresti would have a far better chance of being &quot;done correctly,&quot; since \nthere&#39;s no timestamp in the XML-RPC ping other than the POST submission \ntime.  Technoresti would allow batch updates of multiple weblogs with one \nPUT, on a once-per-day for all weblogs schedule, instead of once per post.  \nThe spidering would be smarter with reliable timestamps to use as a baseline \nwhich the application logic can refer to.\n\n&gt;\n&gt;&gt;&gt; The Technorati ping isn&#39;t really manipulating a resource using \n&gt;&gt;&gt; POST, it&#39;s submitting program logic to an endpoint.  The payload \n&gt;&gt;&gt; is not a representation of any resource (try to GET that URL).  \n&gt;\n&gt;GET which URL?  The Technorati URL, or the one I pass to Techorati (I assume\n&gt;the former?)  If the former, does that mean all resources must return a\n&gt;represenation for GET?  Are there no &quot;write-only&quot; semantics in REST?\n&gt;\n\nAgain, you can no more infer what REST is by looking at an example than you \ncan create an example which implements REST.  The source for what \nconstraints are in REST is Dr. Fielding&#39;s dissertation, and a quick glance at \nRFC 2616 will suggest the answer with &quot;405 Method Not Allowed&quot;.\n\nThe difference here is, with an RPC endpoint no dereferenceable \nrepresentation may be retrieved with a GET because none exists.  With the \nREST resource I describe, GET could easily be constrained to only those users \nwho are allowed to PUT.\n\nAs to a write-only constraint, yes one could implement such in a REST-derived \nsystem.  But it does bring up a good question:  If GET is disallowed, must \nPUT also be disallowed?  Restricting a resource to the HEAD, POST and DELETE \nmethods doesn&#39;t raise any red flags with me, though, and that&#39;s write-only.\n\nThere is a difference between a web resource, and a REST resource.  The \nTechnorati URL I refer to appears to have the GET method firewalled.  A REST \nresource must have a URI, but a URI does not necessarily identify a REST \nresource.  With an RPC endpoint, the POSTed data is never a representation of \nany resource with a URI.  But, since an RPC endpoint has an URL, it is a web \nresource.\n\n&gt;\n&gt;&gt;&gt; It&#39;s &quot;Call method weblogUpdates.ping with the following parameters.&quot;  \n&gt;&gt;&gt; A remote procedure call involves the transfer of a state transition \n&gt;&gt;&gt; request, not a representation of a resource.\n&gt;\n&gt;Okay, at least that part&#39;s now understandable.  But since you mentioned it,\n&gt;other than it not being RESTful, what&#39;s the downside of doing it this way?\n&gt;\n\nWhat not being RESTful means to me, is wasting a lot of bandwidth and CPU \nunnecessarily.  Converting Technorati to Technoresti, if I may hazard a \nguess, could decrease bandwidth requirements by as much as 90% -- similar to \nthe gains achievable by distributing large multimedia files via BitTorrent \n(I do wonder if the BT protocol is RESTful, but I haven&#39;t torn into it).\n\n&gt;\n&gt;That sounds a lot like a database trigger.  So it is RESTful to update a\n&gt;second resource when you PUT to a first one?\n&gt;\n\nOf course.  It&#39;s RESTful to do whatever it takes to make the entire \napplication represent the newly-transferred state.  This is handled by the \napplication logic -- REST does not care how, so long as it&#39;s done.  In other \nwords, if a user changes their handle on a web forum where they have tens of \nthousands of posts, that one change potentially updates tens of thousands of \nresources.  Forum apps all work that way now, but that doesn&#39;t make a single \none of &#39;em RESTful.\n\nThe timestamp PUT to the &lt;updated&gt; tag in this example could be anything at \nall, it&#39;s really just a hint.  The action of making a PUT which changes the \n&lt;updated&gt; value from what it was before, can trigger the server application \nto make a HEAD or conditional GET request to the resource feed.  For all I \nknow this is how Technorati does it already.\n\nThe Last-Modified HTTP header for the resource (the feed) has either changed \nsince it was last spidered, or it hasn&#39;t.  If it hasn&#39;t then the PUT request \nis refused with a response code of 406 Not Acceptable.  If it has changed, \nTechnoresti can schedule a spidering, and change the &lt;updated&gt; value it has \non file for that resource.\n\nWhich brings us to the issue of authoritative metadata.  Technoresti would \nalways use the Last-Modified HTTP header&#39;s value as the new &lt;updated&gt; value, \nnot that which was PUT by the client.  So unless the value is an exact match \nwith what&#39;s already there, it triggers the application logic, which in turn \nignores the value.\n\n-Eric\n\n\n\n\n"}}
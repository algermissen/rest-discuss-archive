{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":228155998,"authorName":"Mike Schinkel","from":"&quot;Mike Schinkel&quot; &lt;mikeschinkel@...&gt;","profile":"mikeschinkel","replyTo":"SENDER","senderId":"63Y1d6lpyUUrreUiK6YTDoLhYrnDyVQz2VtW7o7dSXTR_OHefdkvKLXgcpVEZ6iAkcWZecBbAV35CCZeudhMqjpTFcsE70XCd4NcQcLdSA","spamInfo":{"isSpam":false,"reason":"12"},"subject":"RE: [rest-discuss] bootstrapping","postDate":"1200660251","msgId":10261,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDEyYzgwMWM4NTljZiRkODQzOTgzMCQwNzAyYThjMEBHdWlkZXMubG9jYWw+","inReplyToHeader":"PDUwMzdiNmU0MDgwMTE4MDE0NGoyMGVkMGYzZmliZjZmZTIwNWI1OTFkMmNiQG1haWwuZ21haWwuY29tPg==","referencesHeader":"PGZta3M3OCtrMTVrQGVHcm91cHMuY29tPiA8NTAzN2I2ZTQwODAxMTYxMDQ4cTQwZWJhZDg0aTM4ZjdjOGEyZDkyZTcwMDVAbWFpbC5nbWFpbC5jb20+IDwwZjNlMDFjODU4N2YkOWQ4YWNmNzAkMDcwMmE4YzBAR3VpZGVzLmxvY2FsPiA8NTAzN2I2ZTQwODAxMTYyMjM5Zzc3N2I0NjdkcTY0YjEzNzMzMDAwOTg4YWNAbWFpbC5nbWFpbC5jb20+IDwxMDU0MDFjODU4ZTckNDhmY2I1ZjAkMDcwMmE4YzBAR3VpZGVzLmxvY2FsPiA8NTAzN2I2ZTQwODAxMTcxOTE3aDJkMzZlNDgwbjc2MDM3NjU5ODVkMGM3NTZAbWFpbC5nbWFpbC5jb20+IDwxMjUxMDFjODU5YTYkNDBhYTg3YTAkMDcwMmE4YzBAR3VpZGVzLmxvY2FsPiA8NTAzN2I2ZTQwODAxMTgwMTQ0ajIwZWQwZjNmaWJmNmZlMjA1YjU5MWQyY2JAbWFpbC5nbWFpbC5jb20+"},"prevInTopic":10260,"nextInTopic":10267,"prevInTime":10260,"nextInTime":10262,"topicId":10201,"numMessagesInTopic":65,"msgSnippet":"... Again, your approach works for professional programmers, but not those whose job isn t a programmer. If those people don t realize they can be immediately","rawEmail":"Return-Path: &lt;mikeschinkel@...&gt;\r\nX-Sender: mikeschinkel@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 9415 invoked from network); 18 Jan 2008 12:44:25 -0000\r\nX-Received: from unknown (66.218.67.96)\n  by m42.grp.scd.yahoo.com with QMQP; 18 Jan 2008 12:44:25 -0000\r\nX-Received: from unknown (HELO hs-out-2122.google.com) (64.233.178.243)\n  by mta17.grp.scd.yahoo.com with SMTP; 18 Jan 2008 12:44:25 -0000\r\nX-Received: by hs-out-2122.google.com with SMTP id z77so1148649hsz.14\n        for &lt;rest-discuss@yahoogroups.com&gt;; Fri, 18 Jan 2008 04:44:24 -0800 (PST)\r\nX-Received: by 10.142.84.3 with SMTP id h3mr1958431wfb.113.1200660263289;\n        Fri, 18 Jan 2008 04:44:23 -0800 (PST)\r\nReturn-Path: &lt;mikeschinkel@...&gt;\r\nX-Received: from desktop ( [69.94.221.21])\n        by mx.google.com with ESMTPS id g9sm5464491wra.6.2008.01.18.04.44.19\n        (version=SSLv3 cipher=RC4-MD5);\n        Fri, 18 Jan 2008 04:44:20 -0800 (PST)\r\nTo: &quot;&#39;Assaf Arkin&#39;&quot; &lt;assaf@...&gt;\r\nCc: &lt;rest-discuss@yahoogroups.com&gt;\r\nReferences: &lt;fmks78+k15k@...&gt; &lt;5037b6e40801161048q40ebad84i38f7c8a2d92e7005@...&gt; &lt;0f3e01c8587f$9d8acf70$0702a8c0@...&gt; &lt;5037b6e40801162239g777b467dq64b13733000988ac@...&gt; &lt;105401c858e7$48fcb5f0$0702a8c0@...&gt; &lt;5037b6e40801171917h2d36e480n7603765985d0c756@...&gt; &lt;125101c859a6$40aa87a0$0702a8c0@...&gt; &lt;5037b6e40801180144j20ed0f3fibf6fe205b591d2cb@...&gt;\r\nDate: Fri, 18 Jan 2008 07:44:11 -0500\r\nKeywords: Archived\r\nMessage-ID: &lt;12c801c859cf$d8439830$0702a8c0@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain;\n\tcharset=&quot;us-ascii&quot;\r\nContent-Transfer-Encoding: 7bit\r\nX-Mailer: Microsoft Office Outlook 11\r\nX-MimeOLE: Produced By Microsoft MimeOLE V6.00.2900.3198\r\nthread-index: AchZtr4zK8vC76zbQniU39anaeUIEAADO8OQ\r\nIn-Reply-To: &lt;5037b6e40801180144j20ed0f3fibf6fe205b591d2cb@...&gt;\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Mike Schinkel&quot; &lt;mikeschinkel@...&gt;\r\nSubject: RE: [rest-discuss] bootstrapping\r\nX-Yahoo-Group-Post: member; u=228155998; y=by88SCqRp0CcS9UJE-qfOHWdUoEfj-I7E-sl44KY7XZ_h_v6lxSc\r\nX-Yahoo-Profile: mikeschinkel\r\n\r\nAssaf Arkin wrote:\n&gt; I&#39;m only differentiate people based on skills.  I bet you&#39;ll \n&gt; find as many non-programmer teens pulling and tweaking \n&gt; JavaScript code for use in their online profiles, as 9-5 \n&gt; programmers that are scared of touching JavaScript.  I do, \n&gt; however, would like to keep the required skills to the \n&gt; minimum, that way more people can get the job done.\n&gt; \n&gt; To remove doubt, I am looking for solutions that require the \n&gt; least cognitive load, but I&#39;m not measuring it by initial \n&gt; approach only, but over the lifetime.\n\nAgain, your approach works for professional programmers, but not those whose\njob isn&#39;t a programmer. If those people don&#39;t realize they can be\nimmediately productive with a web service, they don&#39;t ever even try to use\nit. When the initial approach is too high a bar to reach, the alternate is\nnever. You continue to advocate for the professional approach without\nacknowledging the occupational alternate of never. You know the old say\n&quot;Better late than never?&quot;  When in this case it is &quot;Better to have a\nless-than-optimal solution than to have no solution at all.&quot;  If you are\ngoing to argue the position, at least argue that you believe they are better\noff never developing something than developing something that doesn&#39;t\nachieve your standards because that&#39;s the dichotomy.\n\nYour knowledge and skill is obviously making it nearly impossible for you to\nrecognize what it is like not to have your knowledge and skill (that&#39;s not a\ncriticism, it&#39;s well-documented human psychology.)\n\n&gt; &gt; Occupational Programmers don&#39;t need a spec, they don&#39;t even \n&gt; think in \n&gt; &gt; those terms.  They instead need to be slapped in the face with the \n&gt; &gt; fact that something is possible before they even consider \n&gt; it because \n&gt; &gt; they otherwise assume it is not.\n&gt; \n&gt; Which is exactly what a spec does.  A spec tells you what&#39;s \n&gt; available and how to use it.  Don&#39;t confuse that with the \n&gt; cryptic, over-generic, formal style we employ in various \n&gt; working groups, that&#39;s particularly appealing to a small set \n&gt; of people.  Specs can take many forms, ideally one that&#39;s \n&gt; readable to a lot of people.\n\nYou are manipulating my metaphor to be used in a manner which was not how I\nintended. My reference to being slapped in the face was not to slap with the\nset of rules but instead to slap them in the face with what&#39;s possible. And\nwhen someone assumes things are not possible by default they don&#39;t go\nlooking for specs no matter how readable they are.  OTOH, if they were\nbrowsing the web and discovered the Google Chart API by accident, for\nexample, they might just have an &quot;Aha!&quot; moment and realize they *can* use it\nto implement something.  But if they have to first read a spec, it ain&#39;t\ngonna happen, or at least not nearly as often.\n\n&gt; &gt; &gt; The problem with WSDL, and from what I&#39;ve seen also WADL, is that \n&gt; &gt; &gt; neither one provides a map.\n&gt; &gt;\n&gt; &gt; WSDL and WADL are two orders of magnitude more complexity than any \n&gt; &gt; occupational programmer will ever attempt.\n&gt; \n&gt; The WS-* people will beg to differ, a lot of companies are \n&gt; pursing exactly that market with visual tools that alleviate \n&gt; the cognitive workload and designed to appeal to people who \n&gt; can&#39;t program their way out of a for loop.\n\nJeesh!  Those tools you mention are for *Professional programmers*, not\npeople whose job titles do not contain the words &quot;Programmer&quot; or &quot;Developer&quot;\nbut who could gain benefit in their job from being able to easily interact\nwith REST-based services; mashups for example.  You tell those people they\nare programmers and they will scoff at you, many feeling somewhat offended,\nbut those same people need to do some of the same work that programmers need\nto do.\n\nAnd to believe that non-professional programmers (and their managers) will\nevery have a clue about WS-*, well I&#39;ve got some land to sell you if you\nthink so.\n\n&gt; We can argue whether or not they&#39;re doing a good job, or have \n&gt; they gone too far to keep it usable, but a lot of energy was \n&gt; spent exactly to create tools for that target audience.\n\nThe target audience you speak of is much more involved in programming than\nthe ones I speak of.  The ones I speak of can, at best, use something like\nYahoo Pipes which, as far as I know, doesn&#39;t provide the functionality\nneeded to support a pure HATEOAS model.\n\nListen, you are so advanced compared to the group I&#39;d like to see empowered\nit seems you can&#39;t grasp their challenges. In essense what I&#39;m saying is\nthat given the widely deployed state of what I call the &quot;universal tool set&quot;\n(i.e. the browser) and the fact there is no standard way to interoperate\nwith HATEOAS then designing external public services that require HATEOAS\npresents far too great a barrier to adoption and that&#39;s why it&#39;s currently a\nmuch better idea (IMO) to publish URL interfaces for externally published\nweb services than to follow the HATEOAS with a single &quot;entry point&quot; URL,\nwhich is the purist HATEOAS model you are advocating (at least that&#39;s what\nI&#39;ve taken from your emails.)\n\nAnd let me make this point.  *I* am the one defining the group that *I* want\nto empower; so it&#39;s a bit presumptuous to debate my definition and redefine\nthem for me.  Please stop trying to redefine them and at least give me the\ncourtesy to accept that the ones I want to empower have no more skills than\nthat which I have assigned to them. Instead, if you must debate, please\ndebate how to address the group, or even argue that they shouldn&#39;t be\naddressed, but please don&#39;t try to redefine because, being the group I\ndefined, they are by definition what I defined them to be.\n\nWant to solve the problem?  Don&#39;t argue that people who struggle to learn\nhow to form valid HTML should be able to implement the interdirection model\nof HATEOAS because your debating it won&#39;t make it so.  Instead, work to\ndevelop a standard model for said interaction so that sooner than later than\nstandard model of interaction can become built into browsers and the class\nof people I refer to can effectively discover web services that use HATEOAS\nand so that open-source libraries can be implemented to make calling\nservices that comply with HATEOAS brain-dead easy.\n\n&gt; &gt; Just to clarify, are you saying that you think everything \n&gt; &gt; that a web service might provide can be converted into a \n&gt; &gt; pre-known finite list?\n&gt; If that wasn&#39;t possible, I wouldn&#39;t be able to implement it \n&gt; using a turing-complete language.\n\nThen tell me how you would implement today&#39;s airline flight arrival times as\na pre-defined finite list on the server?\n\n&gt; In my analogy, a map would be exactly what Google is doing \n&gt; with their Chart API.\n&gt; \n&gt; To backtrack for a second, the three options listed for this \n&gt; discussion were:\n&gt; 1.  Give developers a URL template they can write their \n&gt; client against.\n&gt; 2.  Have the service return a URL template from a known URL \n&gt; (maybe in response to OPTIONS).\n&gt; 3.  Have a resource that can resolve a name to a URL.\n&gt; \n&gt; #1 and #2 are maps in the analogy, #1 in the form of a spec, \n&gt; #2 served dynamically.  #3 are posts.  What I&#39;m saying is, \n&gt; commit to #1 and/or #3, ignore #2.\n&gt; \n&gt; Google Chart API made its decision and went with #1.  If you \n&gt; look at other widgets on the Web, you&#39;ll notice a lot of do \n&gt; #1 and/or #3, telling you how to construct a URL to get the \n&gt; desired results, or giving you a way to resolve to a URL.  \n&gt; What I&#39;ve yet to see them do successfully is offer a resource \n&gt; that serves meta-data from which a client can decide how to \n&gt; construct a URL (although some do it internally).\n\nEither I&#39;ve been completely misinterpretting your comments or you&#39;ve been\nchanging your argument because #2 is what I&#39;ve been arguing against for\nexternally published APIs and #2 violates the pure HATEOAS model.  I would\nespecially argue against using #2 in contexts where &quot;accidental&quot; programmers\nmight be using them like Google&#39;s Chart API.  BTW, I think I&#39;ll use\n&quot;accidental programmers&quot; from now on because that would capture the essense\nof a blogger who is not a programmer but programs without  realizing it.\n\n&gt; I disagree on two points.  One, that requirements on the Web \n&gt; are static, it&#39;s a cut-throat landscape and service are \n&gt; always competing to retain and acquire users.  Ever \n&gt; considered switching from GMail back to HotMail?\n\nYou put words in my mouth; I never said that the web requirements were\nstatic.  However I am guilty of is not explaining myself well enough.  When\npeople are developing an app they learn as you go along. And since (at least\ncurrently) internal interfaces are published many times more frequently than\nexternally interfaces the chances that an internal API will be published\nthat has not yet been fully fleshed-out is much greater for internal\ninterfaces than external interfaces.\n\nTo prove my theorem, let&#39;s look at Programmable Web&#39;s list of externally\npublished APIs: 603 as of this moment [1].  Since I&#39;m sure they don&#39;t have\nthem all, let&#39;s multiple that number by 3 and round up to the nearest 1000.\nThat gives us 2000 published web APIs.  No, looking just within Fortune 1000\ncompanies, each of them would need only publish 3 interfaces internally, on\naverage, to prove that they are more APIs published internally than\nexternally. Would you be willing to wager that the average is lower than 3\nper Fortune 1000?  Now, add in all the other companies and I think it&#39;s\nplain to see that we probably have 3 or 4 orders of magnitude more internal\nAPIs hence the chance that those internal APIs will need to change is much\ngreater than the chance that external APIs will need to change.\n\n&gt; Two, that the best way to write internal services is to \n&gt; assume an audience of one.  \n&gt; It&#39;s true that often the audience \n&gt; is exactly one, but that&#39;s also true on the Web.  \n\nYou state both of those claims without giving any support for their\npotential validity.  Maybe it is a best practice that I&#39;m not aware of, but\nit doesn&#39;t sound like one that I&#39;d believe on face value.\n\n&gt; But if you \n&gt; have to pick one methodology, start with N, \n\n&quot;N&quot;?\n\n&gt; that will help \n&gt; you develop services that can be reused, and just like the \n&gt; Web, some would be more popular than others and you don&#39;t \n&gt; always know in advance.\n\nEven if I accepted the claims you didn&#39;t provide support for, you completely\nlost me with that. And also, what does unknown future popularity have to do\nwith it?\n\n&gt; My experience in the corporate world is that it&#39;s a crap \n&gt; shoot, just like the Web, and any attempt to plan for \n&gt; audience size gets foiled by reality.\n\nYou once again misunderstand my point.  I wasn&#39;t claiming a future audience\nsize, but instead that for internal services there is a set of potential\nusers (call it &quot;pu(i)&quot;) and for external services there is a set of\npotential users (call it &quot;pu(e)&quot;) where in almost all cases worth evaluating\n&quot;pu(i) &lt; pu(e)&quot;.  That was the important point, not the number of users that\nmight or might not use it.  \n\nBut actually, the more important point was not the number of potential users\nbut instead the number of potential URL interfaces that would be deployed\ninternally at substandard level of architecture design (&quot;id(i)&quot;) would be\nmuch greater than the number of potential interfaces that would be deployed\nexternally at substandard level of architecture design (&quot;id(e)&quot;) such that\n&quot;id(i) &gt;&gt; id(e)&quot;. What&#39;s more, developers can deploy internal interfaces but\nit generally take marketing getting involved to deploy external interfaces\nhence there is a much higher level of internal due diligence done for\nexternal services because poorly designed external services would see much\nbrighter negative light on the technical team than poorly designed internal\nservices, the latter which might not even get noticed by the higher-ups. And\nTHOSE REASONS are why using HATEOAS is so much more critical for internally\ndeployed systems than externally published systems because the chances are\nmuch greater that an internal URL interface will need to be changed (i.e.\nmored to a different server, for example) than externally published URL\ninterfaces.\n\nAnd if you still choose to disagree with that, do so by finding me several\nexternally published REST-based URL interfaces from companies still in\nbusiness since they published their REST-based URL interface that have had\nto be changed and that have caused disruption. Hell, find me just one. (P.S.\nSOAP interfaces don&#39;t count; we all know how screwed up SOAP has been.)\n\n-- \n-Mike Schinkel\nhttp://www.mikeschinkel.com/blogs/\nhttp://www.welldesignedurls.org\nhttp://atlanta-web.org \n\n\n[1] http://programmableweb.com/apis\n\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":247372455,"authorName":"Christian Jensen","from":"Christian Jensen &lt;christianj@...&gt;","profile":"cjensen2k","replyTo":"SENDER","senderId":"ebpaTauKSWpQo821gO96p6uJGbpInsKo2omIUXkdYNacs1pWsupDZHDIS08rICCafbZjVKQ0bCv5EOEy6qrlA-jubV9WgQtOvCw0gQ5gkoNNmg","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Correct REST principles","postDate":"1133512737","msgId":5571,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQzOTAwODIxLjYwMjAzMDFAamVuc2VuYm94LmNvbT4=","inReplyToHeader":"PE9GRkVFNjk3RTEuQTBERDhDREEtT05DQTI1NzBDQi4wMDIyQjE3Ni1DQTI1NzBDQi4wMDI0RjE3NUBuYXRpb25hbC5jb20uYXU+","referencesHeader":"PE9GRkVFNjk3RTEuQTBERDhDREEtT05DQTI1NzBDQi4wMDIyQjE3Ni1DQTI1NzBDQi4wMDI0RjE3NUBuYXRpb25hbC5jb20uYXU+"},"prevInTopic":5570,"nextInTopic":5572,"prevInTime":5570,"nextInTime":5572,"topicId":5564,"numMessagesInTopic":11,"msgSnippet":"First off - just for kicks I clicked the URL :) pretty funny. REST performed by JSON, HTTP Authentication tied to PHP - that is my target. JSON is clean and","rawEmail":"Return-Path: &lt;christianj@...&gt;\r\nX-Sender: christianj@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 72442 invoked from network); 2 Dec 2005 08:39:21 -0000\r\nReceived: from unknown (66.218.66.217)\n  by m31.grp.scd.yahoo.com with QMQP; 2 Dec 2005 08:39:21 -0000\r\nReceived: from unknown (HELO corporate.implicit.implicitnetworks.com) (71.36.44.225)\n  by mta2.grp.scd.yahoo.com with SMTP; 2 Dec 2005 08:39:20 -0000\r\nReceived: from [192.168.100.20] ([192.168.100.20]) by corporate.implicit.implicitnetworks.com with Microsoft SMTPSVC(6.0.3790.1830);\n\t Fri, 2 Dec 2005 00:38:57 -0800\r\nMessage-ID: &lt;43900821.6020301@...&gt;\r\nDate: Fri, 02 Dec 2005 00:38:57 -0800\r\nUser-Agent: Mozilla Thunderbird 1.0.7 (Windows/20050923)\r\nX-Accept-Language: en-us, en\r\nMIME-Version: 1.0\r\nTo: Donald_Strong@...\r\nCc: &quot;Costello, Roger L.&quot; &lt;costello@...&gt;, \n rest-discuss@yahoogroups.com\r\nReferences: &lt;OFFEE697E1.A0DD8CDA-ONCA2570CB.0022B176-CA2570CB.0024F175@...&gt;\r\nIn-Reply-To: &lt;OFFEE697E1.A0DD8CDA-ONCA2570CB.0022B176-CA2570CB.0024F175@...&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nReturn-Path: christianj@...\r\nX-OriginalArrivalTime: 02 Dec 2005 08:38:57.0735 (UTC) FILETIME=[D60E0D70:01C5F71B]\r\nX-eGroups-Msg-Info: 1:12:0:0\r\nFrom: Christian Jensen &lt;christianj@...&gt;\r\nSubject: Re: [rest-discuss] Correct REST principles\r\nX-Yahoo-Group-Post: member; u=247372455; y=Pksgx8k9gJh7L3AuUyFp4KlQvK-xEKGJN45IAsyvR6a4IU94\r\nX-Yahoo-Profile: cjensen2k\r\n\r\nFirst off - just for kicks I clicked the URL :) pretty funny.\n\nREST performed by JSON, HTTP Authentication tied to PHP - that is my target.\n\nJSON is clean and lightweight as well as HTTP Authentication, the PHP \nside of things is clean and moderately lightweight.\n\nThe part I am having a tiny struggle with is the representation of the \nURI that is passed to PHP. The nodes between the slashes are to indicate \nthe hierachy and need to be easily parsed, in the same general feeling \nthat JSON is virtually a native parsing.\n\nI would love to simply explode() the path, send the entire array down \ninto the top of a handler and any sub processing handle within, \nreturning a final datastream (RDF, JSON, XML etc.)\n\nSuch as this:\n\nhttp://acme.com/universe/milkyway/sol/earth/lat=90.0;long=12.0/30000\n\nbecomes (sparing the quotes):\n\n$exploded_array = [universe, milkyway, sol, earth, lat=90.0;long=12.0, \n30000]\n\nInstead of plucking out each value and sending off to a function, I am \nthinking that I might do:\n\n&lt;?\n\nrequire_once(&#39;inc.functions.php&#39;);\n\n$exploded_array = $_SERVER[&#39;REQUEST_URI&#39;];\n\n$scheme = &#39;http://&#39;; // normally build this from parse_url\n$host = &#39;acme.com&#39;;\n$base = Array();\n$result = process($exploded_array, $scheme, $host, $base)\n\nheader(&#39;Content-Type: &#39; . $result[&#39;mime&#39;]);\nprint $result[&#39;data&#39;];\n?&gt;\n\nThe &quot;process&quot; function would simply take off the first item off the \narray and pass the remaining to another function. If there were no other \narray elements (it is the target of the URI), then it would go ahead and \nreturn the appropriate mime type and data to be sent back to the requester.\n\nfunction process($array, $scheme, $host, $base) {\n    $this_item = array_shift($array);\n    $base = array_push($this_item);\n    if(count($array)) {\n       switch($this_item) {\n            case &#39;universe&#39;:\n                processGalaxy($array, $scheme, $host, $base);\n            case &#39;omniverse&#39;:\n                processOtherUniverseType($array, $scheme, $host, $base);\n            default:\n                throw new Exception(&#39;The specified Alternate Universe is \nnot supported&#39;);\n       }\n    } else {\n       $galaxies = Array();\n\n       $temp = Array();\n       $temp[&#39;display&#39;] = &#39;Milkyway&#39;;\n       $temp[&#39;xlink&#39;] = glue_url($scheme, $host, $base, &#39;milkyway&#39;);\n       $galaxies[] = $temp;\n\n       $temp = Array();\n       $temp[&#39;display&#39;] = &#39;Whirlpool (M51)&#39;;\n       $temp[&#39;xlink&#39;] = glue_url($scheme, $host, $base, &#39;M51&#39;);\n       $galaxies[] = $temp;\n\n       return Array(;\n    }\n}\n\nBased on your example, the latitude and longitude would be double \nparsed, first to split at the &#39;;&#39; and then on the &#39;=&#39;. After some \nthough, all that specific parsing is not necessary and does not allow \nany sort of nesting beyond one level, more tokens would have to be \nspecified per level. Consider this, there is no latitude or longitude \ndesignation at all, rather, use URL encoding to nest further processing, \nsuch as this: 90.0%2F12.0, this would allow the next function to simply \nURL Decode it and determine what it needs to do with it, further nesting \ncould be achieved by url encoding an already URL encoded string, at each \nstep in the processing it would naturally unravel.\n\nIt may even be worthwhile to simply urlencode JSON data for any given \nnode, that way a full datastructure could be passed if necessary, ableit \nmaking the URL super long :)\n\nThe ultimate goal of all this is to remove the dang ? and & monikers. \nThose routinely cause issues with Proxy servers, which we want to \nmaximize the use of. Without sessions and without having to worry about \nthe data chaning under our nose because the data point should either be \nstatic or have the &#39;if modified since&#39; flags enabled. This in its very \nnature means that the PHP will have to respond appropirately to HEAD \nrequests.\n\nThat is all for now :)\n\nChristian\n\nDonald_Strong@... wrote:\n\n&gt; Hi Roger and Christian,\n&gt;\n&gt; &gt; If we agree that the sole purpose of a URL is to identify a resource,\n&gt; &gt; then I cannot see why a person would ever use query strings.\n&gt; &gt;  If information needs to be passed to the resource, then you must\n&gt; &gt; ask &quot;why?&quot;  Are you wishing to update a resource?  If so, then you\n&gt; &gt; should POST the information to the resource (and the resource is\n&gt; &gt; identified using a logical URL without any query strings).\n&gt;\n&gt; A query URL (ie. a URL that contains a query path) is useful in a\n&gt; web service for the same reason it is useful in HTML; It allows the\n&gt; User Agent to construct a URL according to a specification provided by\n&gt; the Origin Server. The User Agent can then GET the representation\n&gt; with a high expectation that the URL will be understood and accepted.\n&gt;\n&gt; I have likened this, in the past, to asking a question of the resource.\n&gt; This makes sense if the resource that provided the form (input\n&gt; specification)\n&gt; is the same one the form is submitted to, eg.\n&gt;\n&gt; GET http://acme.com/aircraft\n&gt;\n&gt; &lt;form action=&quot;/aircraft&quot;&gt;\n&gt;       &lt;input type=&quot;text&quot; name=&quot;manufacturer&quot;/&gt;\n&gt;       &lt;input type=&quot;text&quot; name=&quot;pax_capacity&quot;/&gt;\n&gt; &lt;/form&gt;\n&gt;\n&gt; GET http://acme.com/aircraft?manufacturer=Boeing&pax_capacity=300 \n&gt; &lt;http://acme.com/aircraft?manufacturer=Boeing&pax_capacity=300&gt;\n&gt;\n&gt;\n&gt; &gt; But I propose the following: http://[host &lt;http://%5Bhost&gt;\n&gt; ]///[universe]/[galaxy]/[system]/[planet]/90.0%2012.0\n&gt;\n&gt; I have also suggested using segment parameters in the past.\n&gt;\n&gt; http://acme.com/universe/milkyway/sol/earth/lat=90.0;long=12.0/30000\n&gt;\n&gt; This has the advantage that more segments can be used after the params.\n&gt; In this case I have specified a height or 30000 feet.\n&gt;\n&gt; Donald.\n&gt;\n&gt;\n&gt; ------------------------------------------------------------------------\n&gt; YAHOO! GROUPS LINKS\n&gt;\n&gt;     *  Visit your group &quot;rest-discuss\n&gt;       &lt;http://groups.yahoo.com/group/rest-discuss&gt;&quot; on the web.\n&gt;        \n&gt;     *  To unsubscribe from this group, send an email to:\n&gt;        rest-discuss-unsubscribe@yahoogroups.com\n&gt;       &lt;mailto:rest-discuss-unsubscribe@yahoogroups.com?subject=Unsubscribe&gt;\n&gt;        \n&gt;     *  Your use of Yahoo! Groups is subject to the Yahoo! Terms of\n&gt;       Service &lt;http://docs.yahoo.com/info/terms/&gt;.\n&gt;\n&gt;\n&gt; ------------------------------------------------------------------------\n&gt;\n\n"}}
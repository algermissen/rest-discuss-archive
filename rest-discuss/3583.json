{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":131511758,"authorName":"Roy T. Fielding","from":"&quot;Roy T. Fielding&quot; &lt;fielding@...&gt;","profile":"roy_fielding","replyTo":"SENDER","senderId":"HZSNZB5MsqdCJH1uwDqJ8wE3x6OHfdYGyjQD6ABP7ZhXIuwOZrTwHeTCG6WO1odjZmsvtB2Oeb1ABpsnxVoLSHtrxcsl7NWuv_ro2bFr","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] REST, HTTP, Sessions and Cookies","postDate":"1050464160","msgId":3583,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDhBOTJGNDlCLTZGQkMtMTFENy04MzFFLTAwMDM5Mzc1MzkzNkBhcGFjaGUub3JnPg==","inReplyToHeader":"PDIwMDMwNDEyMjMzODE5LkY1MDIxQHd3dy5tYXJrYmFrZXIuY2E+"},"prevInTopic":3580,"nextInTopic":3590,"prevInTime":3582,"nextInTime":3584,"topicId":3549,"numMessagesInTopic":30,"msgSnippet":"... That concept tends to be a little confusing, partly because HTTP, like many network protocols, has a notion of stateless interactions that only refers to","rawEmail":"Return-Path: &lt;fielding@...&gt;\r\nX-Sender: fielding@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_2_6_5); 16 Apr 2003 03:34:12 -0000\r\nReceived: (qmail 57180 invoked from network); 16 Apr 2003 03:34:11 -0000\r\nReceived: from unknown (66.218.66.217)\n  by m11.grp.scd.yahoo.com with QMQP; 16 Apr 2003 03:34:11 -0000\r\nReceived: from unknown (HELO mac.wakasoft.com) (64.60.92.50)\n  by mta2.grp.scd.yahoo.com with SMTP; 16 Apr 2003 03:34:11 -0000\r\nReceived: from apache.org (localhost [127.0.0.1])\n\tby mac.wakasoft.com (8.12.8/8.12.8) with ESMTP id h3G3a0dl003876;\n\tTue, 15 Apr 2003 20:36:00 -0700 (PDT)\r\nDate: Tue, 15 Apr 2003 20:36:00 -0700\r\nSubject: Re: [rest-discuss] REST, HTTP, Sessions and Cookies\r\nContent-Type: text/plain; charset=US-ASCII; format=flowed\r\nMime-Version: 1.0 (Apple Message framework v551)\r\nCc: rest-discuss@yahoogroups.com\r\nTo: Mark Baker &lt;distobj@...&gt;\r\nIn-Reply-To: &lt;20030412233819.F5021@...&gt;\r\nMessage-Id: &lt;8A92F49B-6FBC-11D7-831E-000393753936@...&gt;\r\nContent-Transfer-Encoding: 7bit\r\nX-Mailer: Apple Mail (2.551)\r\nFrom: &quot;Roy T. Fielding&quot; &lt;fielding@...&gt;\r\nX-Yahoo-Group-Post: member; u=131511758\r\nX-Yahoo-Profile: roy_fielding\r\n\r\n&gt; Any application of cookies breaks REST, because they are by definition\n&gt; stateful, and all REST interactions are stateless.  That doesn&#39;t mean\n&gt; they don&#39;t have their uses, of course.  But there other ways of doing\n&gt; &quot;sessions&quot; statelessly, and doing them statefully is not REST.\n\nThat concept tends to be a little confusing, partly because HTTP,\nlike many network protocols, has a notion of stateless interactions\nthat only refers to having all of the information needed to\nunderstand each request inside the request or defined by universal\nstandard.  REST goes further and constrains application state\n(not resource state) to be held on the client.  It is hard to\ndescribe without further defining what &quot;application&quot; means, but\nwe can think of it as the context between user agent requests:\nthe server cannot be aware of any such context and still be REST.\n\nThis is also what allows individual pages to be bookmarked and\nshared with others, but that&#39;s a longer story.\n\nThe purpose of statelessness is to prevent partial failures and\nallow for substrate independence (e.g., load-balanced gateways\nmanaging the traffic for many servers).  Cookies don&#39;t\nnecessarily break that because they are inside the request,\nunless developers make the mistake of defining the cookie such\nthat it varies by gateway.\n\nMost of the problems with cookies are due to breaking visibility,\nwhich impacts caching and the hypertext application engine, but\neven worse is its use for authentication, as evidenced by the\ncross-site-scripting security holes in sites that use it.\nIt ends up being a weird trade-off of security versus efficiency.\n\nUsing cookies is more efficient than authentication because the\nserver (and intermediaries) will simply ignore cookies for the\nvast majority of URI (e.g., inline images).  That allows everything\nexcept the pages that set cookies to be cacheable, and those are\ntypically non-cacheable pages in any case.  However, using cookies\nin that fashion means the server is relying on security by obscurity\nto associate the client&#39;s stored cookie with the application state\n(attackers ability to guess the cookie or obtain it illegitimately\nvia XSS).  Likewise, keeping state in the cookie means that the\nURIs can be independent of the user state, but doing that messes-up\nthe client&#39;s understanding of state as presented by the hypertext\nengine: it breaks the &quot;back&quot; button.\n\nUnfortunately, cookies were not presented for discussion by the\ncommunity until after they had been deployed and announced as one\nof Netscape&#39;s infamous &quot;extensions&quot;.  If they had, then it is more\nlikely that HTML would have been extended to indicate selectable\nitems, and browsers could then have developed a client-side\nmarket basket that is more reliable and subject to a fancier UI.\nDoing that now is simply a chicken-and-egg problem: browers won&#39;t\nbother til there is user demand for the feature, and sites won&#39;t\noffer it as an option until browsers implement it consistently.\nJava was supposed to solve that problem, but Sun screwed that up.\n\nCookies that simply store a reference to server-maintained state\ndo violate REST&#39;s constraint on state being stored on the client,\nrather than the server, for scalability.  The effect of violating\nthat constraint can be seen on any site that uses client-sessions\non the back-end, such as is common in J2SE.  Such sites are usually\nseveral orders of magnitude less scalable than REST-based\napplications, but some folks still prefer it for &quot;personalization&quot;.\nMy experience has been that this is the number one cause of failed\nwebsite applications: reliance on server-side sessions.\n\nBTW, &quot;personalization&quot; can be defined as deliberately trading off\nscalability for customized content.  The advertising folks who took\nover the Web design space in 1996 claimed that this was a necessity,\noften making it a core component of third-party &quot;evaluations&quot; of\nwebsite usability, but if you actually go and talk to the customers\nusing those sites you will find that they hate it with a passion.\nAmazon is the only site that did it well, and it continues to cost\nthem a fortune in back-end costs.\n\n....Roy\n\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"ooKDKh9L40DWOGMywHCD8yx7X96oAwKfYXzRRJu07Y8hoo4gJIUbYhIGAmPzJUB9ZqTvT-JMvKFccewwgGB6Fn9zFncxU4zu3f-yQB_aaA","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Re: WADL as an hypertext","postDate":"1279653402","msgId":15906,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMTAwNzIwMTMxNjQyLmEwNDg4ZGUyLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","inReplyToHeader":"PEFBTkxrVGltY193WmVINFFCV0l3by1LMmRIRlBqNm5tZmlZei1kMGxsRHpLUEBtYWlsLmdtYWlsLmNvbT4=","referencesHeader":"PEFBTkxrVGltcDhoalZmLUNBS1VQRTRfOUZHUWJqb3BxaVhpMXF3aFBlSkN5dkBtYWlsLmdtYWlsLmNvbT4JPGkyNDY3NytqcWhwQGVHcm91cHMuY29tPgk8QUFOTGtUaW10VWwtMmY5LU9oT1RhZXkySUZtOFAxdGhobzlYVjhWU2xVTDlBQG1haWwuZ21haWwuY29tPgk8MjAxMDA3MjAwOTE1MDAuYzY0ZTE2MWMuZXJpY0BiaXNvbnN5c3RlbXMubmV0Pgk8QUFOTGtUaW1jX3daZUg0UUJXSXdvLUsyZEhGUGo2bm1maVl6LWQwbGxEektQQG1haWwuZ21haWwuY29tPg=="},"prevInTopic":15903,"nextInTopic":15915,"prevInTime":15905,"nextInTime":15907,"topicId":15848,"numMessagesInTopic":79,"msgSnippet":"... That isn t what I said.  While there are legitimate cases for new media types to evolve, 99.9% of custom media types aren t.  Atom and Atom Protocol filled","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 52935 invoked from network); 20 Jul 2010 19:17:02 -0000\r\nX-Received: from unknown (98.137.34.44)\n  by m14.grp.re1.yahoo.com with QMQP; 20 Jul 2010 19:17:02 -0000\r\nX-Received: from unknown (HELO mxout-08.mxes.net) (216.86.168.183)\n  by mta1.grp.sp2.yahoo.com with SMTP; 20 Jul 2010 19:17:01 -0000\r\nX-Received: from bigbison (unknown [65.117.211.162])\n\t(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))\n\t(No client certificate requested)\n\tby smtp.mxes.net (Postfix) with ESMTPSA id C50CD509DC;\n\tTue, 20 Jul 2010 15:17:00 -0400 (EDT)\r\nDate: Tue, 20 Jul 2010 13:16:42 -0600\r\nTo: Giacomo Tesio &lt;giacomo@...&gt;\r\nCc: William Martinez Pomares &lt;wmartinez@...&gt;,\n rest-discuss@yahoogroups.com\r\nMessage-Id: &lt;20100720131642.a0488de2.eric@...&gt;\r\nIn-Reply-To: &lt;AANLkTimc_wZeH4QBWIwo-K2dHFPj6nmfiYz-d0llDzKP@...&gt;\r\nReferences: &lt;AANLkTimp8hjVf-CAKUPE4_9FGQbjopqiXi1qwhPeJCyv@...&gt;\n\t&lt;i24677+jqhp@...&gt;\n\t&lt;AANLkTimtUl-2f9-OhOTaey2IFm8P1thho9XV8VSlUL9A@...&gt;\n\t&lt;20100720091500.c64e161c.eric@...&gt;\n\t&lt;AANLkTimc_wZeH4QBWIwo-K2dHFPj6nmfiYz-d0llDzKP@...&gt;\r\nOrganization: Bison Systems Corporation\r\nX-Mailer: Sylpheed 3.0.3 (GTK+ 2.10.14; i686-pc-mingw32)\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=US-ASCII\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nSubject: Re: [rest-discuss] Re: WADL as an hypertext\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\nGiacomo Tesio wrote:\n&gt; \n&gt; Saying that only standard media types can be used in a RESTful styled\n&gt; application mean that there are a huge number of domains not suitable\n&gt; to be implemented with such style (everywhere there&#39;s no standard\n&gt; mimetype yet).\n&gt; \n\nThat isn&#39;t what I said.  While there are legitimate cases for new media\ntypes to evolve, 99.9% of custom media types aren&#39;t.  Atom and Atom\nProtocol filled a need that was unmet in existing media types, like the\nnotion of collections and members.  The need was so pressing, that the\nmedia types created became ubiquitous before they were even finalized.\n\nThe problem is this:  Obviously, a single media type defeats the\npurpose of self-descriptive messaging; just as obvious is the fact that\ntoo great a proliferation of media types defeats the purpose of self-\ndescriptive messaging.  The disagreement lies with how many media types\nconstitutes &quot;just right,&quot; with me favoring a very low number.\n\nSome argue for creating new media types willy-nilly, but it is my\nbelief that of the innumerable media types which stand to be created in\nthe next decade, only one or two (if that) will become ubiquitous.  The\nubiquitous media types which already exist may be combined in so many\nways that there just aren&#39;t any really big holes left (like the one\nAtom filled).\n\n&gt;\n&gt; And BTW I could provide (and obviously link) a simple xslt could\n&gt; translate my custom x-cargo+xml mime to html.\n&gt; But it seem to me quite reductive to allow only HTML documents to\n&gt; reppresent resources.\n&gt; \n\nThat isn&#39;t what I said, either.  Of course you can use XSLT to\ntransform a backend data format into frontend HTML.  But that also\nholds true if your media type is application/xml.  Or Atom containing\nHTML markup.  If you have a collection of containers holding cargo,\nthen HTML&#39;s &lt;li&gt; indicates an item in a collection, while Atom&#39;s\n&lt;entry&gt; indicates a container, while &lt;feed&gt; lists the containers in a\nvessel&#39;s manifest.\n\nThe semantics of collection/member, at the document level and at the\nprotocol level, are evident from the media types used in support of\nwhatever media type (typically HTML) drives the hypertext application.\nCommon out-of-band knowledge (ubiquitous methods, media types and link\nrelations) explains linking and interaction.\n\nAll those aspects of presenting an interface to a user over the Web,\nhave already been worked out (or are being worked out) in HTML.  So\nHTML is truly the language of choice for REST APIs, not something which\nshould be so easily dismissed upon project inception (as most REST\nprojects do, with the result being most REST projects, aren&#39;t).\n\n&gt; \n&gt; Knowing that AtomPub is REST by design is not enought.\n&gt; \n\nI&#39;ve also never said that; just the opposite in fact.\n\n&gt;\n&gt; I&#39;m tring to understand wherther and why the RESTful style REQUIRES\n&gt; such out of bound / common / standard knowledge.\n&gt; \n\nREST requires that all out-of-band information be encapsulated by \nmedia type definitions.  In order to truly achieve REST&#39;s benefits, a\nsystem&#39;s out-of-band knowledge must be common knowledge, not\nproprietary knowledge.  Thus, REST APIs leverage the ubiquity of\nubiquitous media types -- the self-descriptive messaging constraint.\n\n&gt; \n&gt; Why you sould not be able to PUT or DELETE a video mime typed\n&gt; resource?\n&gt; \n\nWho said you couldn&#39;t?  ;-)  All I know from looking at an HTML media\ntype, is that GET and POST are commonly understood.  However, some\nclients may understand extensions to the media type -- Xforms, HTML 5\netc. which define the use of PUT and DELETE for the HTML media types.\n\nAs I&#39;ve explained here many times before, you can&#39;t just declare that\nDELETE is allowed on a resource and call it REST.  A hypertext API may\npresent a list of resources, and instruct a client how to call the\nDELETE method of one or more of those resources.\n\nThat deletion form is what REST is all about, not some IDL (like WADL)\nlisting DELETE as an allowable method to call on a resource.  You have\none application state, a list of resources.  The user agent presents\nthis to the user with a delete button -- this form is presenting the\nuser with a choice of transitions to the next application state (the\nlist of resources, minus those the user wanted removed).\n\nWhen the user decides to remove a resource by highlighting it in a\nselection list and clicking a delete button, the hypertext instructs\nthe client what URI to call and what method to use -- most likely\nDELETE, but DELETE may be tunneled over POST.  WADL just informs a user\nagent that a resource is deletable, it doesn&#39;t provide instructions to\na user agent about *how* to delete resources.\n\nSo yeah, WADL&#39;s hypertext, but something&#39;s being hypertext doesn&#39;t make\nit suitable for driving a REST API -- it can serve a supporting role,\njust not take the lead.\n\n&gt; \n&gt; Which operation you could actually do could depend on the OPTIONS\n&gt; provided by the resource itself, but the wadl file could also tell\n&gt; the client such information exactly as an html file.\n&gt; \n\nI didn&#39;t realize there was a media type for WADL whose description says\nanything about how to render the document into a choice of state\ntransitions the user can select from.  ;-)\n\nIt is not REST to do an OPTIONS request, see Allow: DELETE (or some\nother notation like an IDL), then call the DELETE method of the\nresource.  The out-of-band knowledge needed to make a client behave\nthis way, isn&#39;t encompassed in a media type description, and isn&#39;t\nbeing driven by hypertext, so it wouldn&#39;t be REST.\n\n&gt; \n&gt; On the other hand, it seem to me that you are equating HTML with REST\n&gt; (or at least with &quot;HyperText&quot;).\n&gt; \n\nNot at all.  But it is true, that there are very few media types which\nsuffice to drive a hypertext API -- &#39;application/xml&#39; is not one of\nthem, &#39;application/svg+xml&#39; is.\n\n&gt; \n&gt; But as far as I can see, there&#39;s no argument (concrete or theoretical)\n&gt; against it&#39;s proper use as an hypertext representation.\n&gt; \n\nI&#39;ve made several of each.  Accessibility is a very concrete argument\nagainst using WADL as the hypertext to drive an API.  If you can make\nWADL emulate HTML, it would still lack all the accessibility hooks that\nmake it possible for other media types to interoperate with alternative\ninput/output methods/devices.  Transforming WADL into HTML makes more\nsense, because you get all the value-adds like accessibility.\n\nSee, the work of presenting a user interface in a browser has already\nbeen done -- you just need to leverage it.  Instead of reinventing the\ncapabilities of HTML for another media type, choose the media type with\nthe capabilities you need.  If the capabilities you need are to present\na user interface over the Web, then why would you consider anything\n*but* HTML to drive your API?\n\n&gt;\n&gt; Moreover I still can&#39;t understand if home made mime violate RESTful\n&gt; constraints or not.\n&gt; \n\nIt isn&#39;t a yes-or-no question.  If, like application/atom+xml, it meets\na pressing universal need and will likely be adopted far and wide over\ntime, then go ahead.  This application/cargo+xml that you propose,\ndoesn&#39;t offer any advantage over application/xml with a schema, and\nrelies on re-inventing several wheels -- giving it no hope of ever\nbecoming ubiquitous.  The resulting system, being based on a proprietary\nmedia type with insignificant adoption, can&#39;t be considered REST -- a\nmedia type nobody&#39;s ever heard of doesn&#39;t make a message self-\ndescriptive, using ubiquitous media types does.\n\n&gt; \n&gt; It&#39;s clear that representing any resource as HTML (or, when\n&gt; appropriate, Atom) is good.\n&gt; I just do not understand why an xml representation would be wrong as\n&gt; far as the client is able to handle it (may be with the help of code\n&gt; on demand).\n&gt; \n\nWhat you should be doing, is developing an API that interoperates with\nthe deployed Web as much as possible.  Yeah, you can make a browser\nunderstand a custom media type, but can an intermediary pre-fetch\nanything, like they can with a GET form in HTML?  The reason such\nintermediaries work, is due to the ubiquity of the media type.\n\nSo if you want to leverage the serendipitous re-use and scaling of the\nREST style, it&#39;s counter-productive to start by selecting or creating a\nmedia type nobody has ever heard of.  Why not create a hypertext API\nthat allows intermediaries to prefetch?  No cost to you, and better\nuser-perceived performance, provided you stick with ubiquitous media\ntypes.\n\n-Eric\n\n"}}
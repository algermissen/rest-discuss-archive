{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":4981751,"authorName":"Mark Nottingham","from":"Mark Nottingham &lt;mnot@...&gt;","profile":"mnotting","replyTo":"SENDER","senderId":"1xUGj-SPbd3TXlnIs7SQ6BuNPCblmgDmDRYSC-A23DexLoXbAzoO6VnSni138r9Tjzn7Ztp5fgaVtQSXjoFKhXGu8EaMDg","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] POST at most once","postDate":"1198308263","msgId":10052,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEI5RUZBRUIzLUQ2REEtNEU1Qi05RDk2LTQ2NzEwNTc4QUM5RUBtbm90Lm5ldD4=","inReplyToHeader":"PDExNzA4ODExODMuNTY0Ni4zNy5jYW1lbEBsb2NhbGhvc3QubG9jYWxkb21haW4+","referencesHeader":"PDExNjkyOTc0NjUuNTEzMC41NS5jYW1lbEBsb2NhbGhvc3QubG9jYWxkb21haW4+IDw0NUIyNzQ0Mi4zMDMwMDAzQGRlaG9yYS5uZXQ+IDwxMTY5ODc1OTc1LjUzNjMuNDIuY2FtZWxAbG9jYWxob3N0LmxvY2FsZG9tYWluPiA8OUI1N0JCQzgtMkIzNi00Mjc3LUJCQUItQ0Q3N0E4RTNGRTkyQG1ub3QubmV0PiA8MTE3MDU1NDQxMC41MzAyLjY4LmNhbWVsQGxvY2FsaG9zdC5sb2NhbGRvbWFpbj4gPGM3MGJjODVkMDcwMjAzMjAyNG01ZTY0YWM3Y204NmYzYzBlMDhiYTQ4NWJlQG1haWwuZ21haWwuY29tPiA8MTE3MDg4MTE4My41NjQ2LjM3LmNhbWVsQGxvY2FsaG9zdC5sb2NhbGRvbWFpbj4="},"prevInTopic":8073,"nextInTopic":0,"prevInTime":10051,"nextInTime":10053,"topicId":7646,"numMessagesInTopic":40,"msgSnippet":"So, did this go anywhere afterwards? I like this. I think the differences between it an POE et al are going to come down to operational considerations. E.g.,","rawEmail":"Return-Path: &lt;mnot@...&gt;\r\nX-Sender: mnot@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 1992 invoked from network); 22 Dec 2007 07:24:38 -0000\r\nX-Received: from unknown (66.218.67.94)\n  by m47.grp.scd.yahoo.com with QMQP; 22 Dec 2007 07:24:38 -0000\r\nX-Received: from unknown (HELO mxout-03.mxes.net) (216.86.168.178)\n  by mta15.grp.scd.yahoo.com with SMTP; 22 Dec 2007 07:24:37 -0000\r\nX-Received: from [192.168.1.110] (unknown [121.44.175.237])\n\t(using TLSv1 with cipher AES128-SHA (128/128 bits))\n\t(No client certificate requested)\n\tby smtp.mxes.net (Postfix) with ESMTP id D161023E4A2;\n\tSat, 22 Dec 2007 02:24:34 -0500 (EST)\r\nCc: Mark Baker &lt;distobj@...&gt;,\n Bill de hOra &lt;bill@...&gt;,\n REST Discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nMessage-Id: &lt;B9EFAEB3-D6DA-4E5B-9D96-46710578AC9E@...&gt;\r\nTo: Benjamin Carlyle &lt;benjamincarlyle@...&gt;\r\nIn-Reply-To: &lt;1170881183.5646.37.camel@...&gt;\r\nContent-Type: text/plain; charset=US-ASCII; format=flowed; delsp=yes\r\nContent-Transfer-Encoding: 7bit\r\nMime-Version: 1.0 (Apple Message framework v915)\r\nDate: Sat, 22 Dec 2007 18:24:23 +1100\r\nReferences: &lt;1169297465.5130.55.camel@...&gt; &lt;45B27442.3030003@...&gt; &lt;1169875975.5363.42.camel@...&gt; &lt;9B57BBC8-2B36-4277-BBAB-CD77A8E3FE92@...&gt; &lt;1170554410.5302.68.camel@...&gt; &lt;c70bc85d0702032024m5e64ac7cm86f3c0e08ba485be@...&gt; &lt;1170881183.5646.37.camel@...&gt;\r\nX-Mailer: Apple Mail (2.915)\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Mark Nottingham &lt;mnot@...&gt;\r\nSubject: Re: [rest-discuss] POST at most once\r\nX-Yahoo-Group-Post: member; u=4981751; y=dwWXkjb9aMIYchLFblTOsaA1F5S0nlfAKDrVh7-VAP-ZzhI\r\nX-Yahoo-Profile: mnotting\r\n\r\nSo, did this go anywhere afterwards?\n\nI like this. I think the differences between it an POE et al are going  \nto come down to operational considerations. E.g., POE requires the  \nserver to mint a lot of new URIs, whereas this doesn&#39;t. POE is  \nbackwards-compatible with existing forms, this isn&#39;t as much (or at  \nleast, browser forms will default to a state where requests can be  \nrepeated).\n\nSo, if I were trying to make a Web site have at-most-once semantics  \nfor POSTs, I&#39;d probably use POE.\n\nHowever, if I were using HTTP for integrating services, and I could  \nspecify client support for extensions, I&#39;d probably choose this.\n\nMake sense?\n\nOTOH, if you were willing to do some JS form.submit() magic, I imagine  \nyou could make this approach work with HTML pretty seamlessly...\n\n\n\nOn 08/02/2007, at 7:46 AM, Benjamin Carlyle wrote:\n\n&gt; On Sat, 2007-02-03 at 23:24 -0500, Mark Baker wrote:\n&gt;&gt; On 2/3/07, Benjamin Carlyle &lt;benjamincarlyle@...&gt; wrote:\n&gt;&gt;&gt; So here are the strategies I can think of seeing so far:\n&gt;&gt;&gt; 1. Have the user observe some property of the system to determine\n&gt;&gt;&gt; whether to retry themselves. In SCADA this might be to observe a\n&gt;&gt; change\n&gt;&gt;&gt; in voltage before deciding whether or not to retry a circuit-breaker\n&gt;&gt;&gt; trip. This can be automated as another SCADA concept: &quot;Target state\n&gt;&gt;&gt; monitoring&quot;. Regardless of the reponse we recieved, did the resource\n&gt;&gt;&gt; actually reach the state we intended?\n&gt;&gt; A technique I&#39;ve used once was to have the client send an HTTP header\n&gt;&gt; in the POST request which played a role sort of like a client-side\n&gt;&gt; etag with respect to the request body. The server, upon receiving the\n&gt;&gt; message and updating the state of the resource, would return another\n&gt;&gt; header containing a hash of the last days worth of tags (which wasn&#39;t\n&gt;&gt; many) on GET requests to that resource so that it could check if  \n&gt;&gt; *its*\n&gt;&gt; update was applied.\n&gt;\n&gt; I&#39;m starting to like this approach. Let me have a go at rephrasing  \n&gt; it as\n&gt; a concrete proposal:\n&gt;\n&gt; Problem statement: (same as before)\n&gt; I have some state that I want to append to a resource. The right  \n&gt; method\n&gt; according to HTTP is POST, but if I don&#39;t get a response to my POST I\n&gt; don&#39;t know whether or not to retry.\n&gt;\n&gt; Client algorithm:\n&gt; ...\n&gt; guid = generateGloballyUniqueID();\n&gt; request.addHeader(&quot;Client-Etag&quot;,guid);\n&gt; try\n&gt; {\n&gt; retryPOST:\n&gt;    startOrResetTimer(reasonable digest retention period, eg 2min);\n&gt;    factory.POST(request);\n&gt; }\n&gt; catch (NoResponse) // aka GatewayTimeout\n&gt; {\n&gt;    etagDigest = factory.GET();\n&gt;    if (guid in etagDigest)\n&gt;    {\n&gt;        // Nothing to be done. The POST was successful.\n&gt;    }\n&gt;    else\n&gt;    {\n&gt;        // One of two possibilities exist. Either,\n&gt;        // * our POST didn&#39;t arrive, or\n&gt;        // * our etag has cycled out of the digest\n&gt;        // We try to ensure that the latter doesn&#39;t\n&gt;        // happen by giving up after a reasonable\n&gt;        // period.\n&gt;        goto retryPOST;\n&gt;    }\n&gt; }\n&gt; catch (RetentionPeriodTimeout)\n&gt; {\n&gt;    // It is still possible that our etag would be in\n&gt;    // the digest at this point, so we could do a final\n&gt;    // GET. If we are in the digest, there is no problem.\n&gt;    // If we are not in the digest we can no longer assume\n&gt;    // that it is because our request didn&#39;t happen.\n&gt;    // Our request might have simply cycled out.\n&gt; }\n&gt; catch (...)\n&gt; {\n&gt;    // Normal error handling\n&gt; }\n&gt;\n&gt; Server constraints:\n&gt; * Client etags are stored in the factory as a digest of recent POST\n&gt; requests for a reasonable amount of time\n&gt; * Only successful requests have their etag stored in the digest, so\n&gt; clients can still retry failed requests. Success would generally mean\n&gt; that state was successfully appended to the server, though there may  \n&gt; be\n&gt; some corner cases.\n&gt;\n&gt; Possible efficiency improvements:\n&gt; * A URI template might allow the client to query for their specific\n&gt; etag, but a protocol would have to be developed for this. Perhaps\n&gt; instead of a digest, the factory could return this template. That  \n&gt; would\n&gt; also potentially deal with security issues arising from guids leaking\n&gt; from one client to another.\n&gt;\n&gt; Pros/Cons:\n&gt; * In the normal case where the POST does not time out there is very\n&gt; little extra communications overhead\n&gt; * The server has to store the state of recent successful requests  \n&gt; for a\n&gt; period rather than the state of requests that did not go ahead. ie we\n&gt; trade less communications overhead for more server state overhead. On\n&gt; the other hand, this server state overhead should be proportional to  \n&gt; the\n&gt; amount of state the server allowed to be appended to itself as part of\n&gt; the POST. It doesn&#39;t change the fundamental server-side state  \n&gt; picture...\n&gt; just changes the constant.\n&gt;\n&gt; Cautions\n&gt; * Under extreme conditions there could still be a race condition  \n&gt; between\n&gt; a POST arriving at the server and a GET request being issued to the\n&gt; factory or template-derived url. This shouldn&#39;t really happen if the\n&gt; client gives up on the POST under reasonable conditions. Those might\n&gt; include &quot;40s has passed&quot;, or &quot;I&#39;m using TCP/IP keepalive while  \n&gt; requests\n&gt; are outstanding to monitor our shared communication state, and the HA\n&gt; cluster member I was talking to appears to have been replaced by its\n&gt; backup, killing my connection&quot;. The final case of &quot;I&#39;m using TCP/IP\n&gt; keepalive while requests are outstanding, and it simply timed out  \n&gt; due to\n&gt; network conditions&quot; could still be a problem.\n&gt;\n&gt; Benjamin\n&gt;\n\n\n--\nMark Nottingham     http://www.mnot.net/\n\n\n"}}
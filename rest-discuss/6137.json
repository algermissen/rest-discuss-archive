{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":184797058,"authorName":"Benjamin Carlyle","from":"Benjamin Carlyle &lt;benjamincarlyle@...&gt;","profile":"fuzzybsc","replyTo":"SENDER","senderId":"Jp-mh33qiiv_2kRzcbV0c3Gpiuxm7A6dKHZ_LjYU5SwlqeZHW_qWRBwynhzkaZ_-Mz5QdVUXz-Vj2KM59XqvoEY6R7PYOTAk8zFmvxR0hLSDSsi3c558Ofs","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Resource personalisation: Was: [rest-discuss] Cacheability example","postDate":"1145770522","msgId":6137,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDExNDU3NzA1MjIuNzMwMy40MS5jYW1lbEBsb2NhbGhvc3QubG9jYWxkb21haW4+","inReplyToHeader":"PDQ0NEE1NTYyLjEwODA3MDdAamo1Lm5ldD4=","referencesHeader":"PEJBWTEwMS1EQVY5NURFOERDQTY3ODg4NzdFMTAzMjdEOEI4MEBwaHguZ2JsPgkgPDQ0NEE1NTYyLjEwODA3MDdAamo1Lm5ldD4="},"prevInTopic":6125,"nextInTopic":6152,"prevInTime":6136,"nextInTime":6138,"topicId":6046,"numMessagesInTopic":33,"msgSnippet":"... REST is an architectural style that is focused on a single trust domain. REST s approach to scalability is based around many people accessing a single","rawEmail":"Return-Path: &lt;benjamincarlyle@...&gt;\r\nX-Sender: benjamincarlyle@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 54605 invoked from network); 23 Apr 2006 05:35:27 -0000\r\nReceived: from unknown (66.218.67.33)\n  by m35.grp.scd.yahoo.com with QMQP; 23 Apr 2006 05:35:27 -0000\r\nReceived: from unknown (HELO mail05.syd.optusnet.com.au) (211.29.132.186)\n  by mta7.grp.scd.yahoo.com with SMTP; 23 Apr 2006 05:35:27 -0000\r\nReceived: from c210-49-79-46.rochd2.qld.optusnet.com.au (c210-49-79-46.rochd2.qld.optusnet.com.au [210.49.79.46])\n\tby mail05.syd.optusnet.com.au (8.12.11/8.12.11) with ESMTP id k3N5ZMUJ012751;\n\tSun, 23 Apr 2006 15:35:23 +1000\r\nTo: John Elliot &lt;jj5@...&gt;\r\nCc: REST Discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nIn-Reply-To: &lt;444A5562.1080707@...&gt;\r\nReferences: &lt;BAY101-DAV95DE8DCA6788877E10327D8B80@...&gt;\n\t &lt;444A5562.1080707@...&gt;\r\nContent-Type: text/plain\r\nDate: Sun, 23 Apr 2006 15:35:22 +1000\r\nMessage-Id: &lt;1145770522.7303.41.camel@...&gt;\r\nMime-Version: 1.0\r\nX-Mailer: Evolution 2.4.2.1 \r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0:0\r\nFrom: Benjamin Carlyle &lt;benjamincarlyle@...&gt;\r\nSubject: Resource personalisation: Was: [rest-discuss] Cacheability example\r\nX-Yahoo-Group-Post: member; u=184797058; y=LCawtW3aYywGrAlOKS2Vwl97-w72aWM7MBMnTPq6snGO_gE\r\nX-Yahoo-Profile: fuzzybsc\r\n\r\nOn Sat, 2006-04-22 at 16:10 +0000, John Elliot wrote:\n&gt; Mike Dierken wrote:\n&gt; &gt;&gt;I still don&#39;t understand what argument you&#39;ve presented \n&gt; &gt;&gt;against this [1] which makes this [2] a good idea.\n&gt; &gt;&gt;[1] Session 63e7e7 GETs /games/chess\n&gt; &gt;&gt;[2] GET /games/chess/63e7e7\n&gt; &gt; Would you be interested in a use case where you send an invitation to\n&gt; &gt; another party to join the session &quot;63e7e7&quot;?\n&gt; Session 63e7e7 belongs to User 23 playing Game 37.\n&gt; You wouldn&#39;t invite someone to your &#39;session&#39;. You might invite them to \n&gt; your game.\n&gt; Also, let&#39;s say it&#39;s a card game (rather than chess). The representation \n&gt; of the game will vary by user, or else I&#39;d be able to see your cards.\n\nREST is an architectural style that is focused on a single trust domain.\nREST&#39;s approach to scalability is based around many people accessing a\nsingle resource or set of resources. The resources are ones that all\nusers are permitted to see. I think your concerns focus around two\nareas:\n\n1) Multiple trust domains, and\n2) Personalisation of a shared trust domain\n\nREST&#39;s approach to bookmarking is beneficial within a single trust\ndomain. It is more convenient to have multiple URLs for my different\nbank accounts than to have a single URL. Using a session to provide\ncontext for which account I am looking on is harmful to the web\nexperience. It prevents me from keeping useful bookmarks to online\nmaterials that I have credentials to access.\n\nI think you acknowledge this, and that your concept of a session is not\none of &quot;this user is looking at that bank account statment&quot; combined\nwith &quot;bank url&quot;, but one of &quot;this user&quot; combined with a url for &quot;that\nbank account statement url&quot;. I think your concept of &quot;session&quot; is really\n&quot;anonymous user id&quot;, eqivalent to &quot;regular user id&quot; but made up on the\nspot by the server.\n\nSo how do we go about resource personalisation? Many resources require\nnone. I can go to Roy&#39;s thesis, and I&#39;ll get the same content as\neveryone else who has the same accept headers. In these cases I can be\nanonymous statelessly. The session concept I think you are talking about\nis one of stateful anonymity or even non-anonymous statefulness. I\nconnect to amazon.com to look at an item, and they want to tell me what\nelse I should consider buying. I connect to technorati, and it offers me\noptions to manage my account.\n\nThese services could not offer me personalised links or options without\nknowing who I am, but this means they serve different pages to different\nindividuals. In both of these cases they essentially skip shared caching\nbetween individuals in order to offer personalisation services.\n\nUnfortunately, that is what personalisation is about. You can offer it\nin several ways, but it always amounts to the same thing for caching. A\nparticular user is always going to have to download something special,\neven though their neighbour has already downloaded their own version.\nThe different versions effectively make for different resources, but\nassigning them different urls does not really change the caching\nproblem. It even adds new ones.\n\nInstead of looking up &lt;http://www.technorati.com/&gt;, I could have been\nforce to look up &lt;http://www.technorati.com/?user=fuzzyBSc&gt;. This would\nhave allowed other people to get cached representations of the fuzzyBSc\nversion of this resource, but they don&#39;t want it and may not be\nauthorised to get it. It would have allowed me log in from a different\nmachine and get shared caching, however the benefit to the technorati\nservers is likely to be minimal and the likelyhood that my two machines\nwould share a cache is probably pretty small anyway.\n\nThe biggest downside of including this identity information in the url\nwhen it is only going to be used for personalisation is that I cannot\neasily send this url off to a friend. They would get my version instead\nof theirs, and may not even be authorised to do so. It is really a\nperversion of the URI system.\n\nEven so, including user information in a resource is sometimes very\nmeaningful. The bank account example from earlier in this thread is\nprobably a good one, though not a real-world one.\nhttp://bank.example.com/fuzzyBSc/main may be a real bank account\nidentifier, in which case the username is necessary context. On the\nother hand, the real identifier is probably a bank-wide unique\n&quot;12341234&quot; so my name really isn&#39;t required. Names are required wherever\nan identifier would be ambigous otherwise.\n\nSo what is the most RESTful solution to this non-RESTful problem domain?\n\nI think that the closest you&#39;ll get to following the REST style for web\nsite personalisation is this:\n1) Don&#39;t pollute the URI space with unnecessary user identifiers\n2) Use cookies or HTTP authentication to identifer the user for\npersonalisation purposes\n3) Use non-personalised static documents as much as possible: Use css\nthat isn&#39;t personalised. Consider using client-side inclusion support\nwith tools such as javascript to combine the personalised and\nnon-personlised elements of pages.\n\nThe more you can achieve (3), the more benefits of REST you can still\nobtain for your application. Possibly the optimum way of achieving (3)\nis to provide a static non-personalised version of your document at the\nurl, but include hooks within the document that will fetch and include\npersonalised data if and only if the client browser supports javascript.\n\nBenjamin.\n\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":272793929,"authorName":"Kevin Duffey","from":"Kevin Duffey &lt;andjarnic@...&gt;","profile":"andjarnic","replyTo":"SENDER","senderId":"vo6SPNzxE0k6Mbu4tGMRCrD8v2fXZEZMOlnghMuS8ERq4iKlktyedMGX_E22DHZxPknqTqRTaGvEYG0eYIxMMbRebccy4jyKEQ","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Hypermedia controls","postDate":"1269579520","msgId":15080,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQ2OTk5NC4yNzQ4LnFtQHdlYjU1OTAyLm1haWwucmUzLnlhaG9vLmNvbT4=","inReplyToHeader":"PDcxOEQ1QTY1LTA0RTktNDQxMi1CMzEwLURCQTE4MDZDQzY4N0BtYWMuY29tPg=="},"prevInTopic":15078,"nextInTopic":15081,"prevInTime":15079,"nextInTime":15081,"topicId":15049,"numMessagesInTopic":27,"msgSnippet":"Hi Jan, ... Ok, can you elaborate on what I am doing that may be construed as too complicated? ... should explain things pretty well. Well, maybe it s just","rawEmail":"Return-Path: &lt;andjarnic@...&gt;\r\nX-Sender: andjarnic@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 8211 invoked from network); 26 Mar 2010 04:58:41 -0000\r\nX-Received: from unknown (66.196.94.107)\n  by m1.grp.sp2.yahoo.com with QMQP; 26 Mar 2010 04:58:41 -0000\r\nX-Received: from unknown (HELO n19.bullet.mail.mud.yahoo.com) (68.142.206.146)\n  by mta3.grp.re1.yahoo.com with SMTP; 26 Mar 2010 04:58:41 -0000\r\nX-Received: from [68.142.200.221] by n19.bullet.mail.mud.yahoo.com with NNFMP; 26 Mar 2010 04:58:41 -0000\r\nX-Received: from [66.196.114.22] by t9.bullet.mud.yahoo.com with NNFMP; 26 Mar 2010 04:58:40 -0000\r\nX-Received: from [127.0.0.1] by omp309.mail.re3.yahoo.com with NNFMP; 26 Mar 2010 04:58:40 -0000\r\nX-Yahoo-Newman-Property: ymail-3\r\nX-Yahoo-Newman-Id: 667439.69212.bm@...\r\nX-Received: (qmail 3562 invoked by uid 60001); 26 Mar 2010 04:58:40 -0000\r\nMessage-ID: &lt;469994.2748.qm@...&gt;\r\nX-YMail-OSG: tNz47gIVM1nZ5Sk2TTsvnw_LFZj5khJYvkUdqtwLCuXfYn9\n 4f0dHOGlvU5CHuI4sCnzlik.FAJPMRTYKMfwokJADCSfSVRCD3TTZrLPwxwQ\n bmhRcIIuShsQMIQLQSEFWamJNLMRHlSF2_Ah09OgtIJ.1Hu55W9KpN4Hj6bu\n 3vdGscPTG1k3Oc0BV1A.Pjp9toopFPaFpo5H2V1DqGefUkRpWmzYBecH18gI\n UxLTpD72YRyYtr6ZHySfR_eRrCpZ2lMWgemCIyh0-\r\nX-Received: from [192.18.101.5] by web55902.mail.re3.yahoo.com via HTTP; Thu, 25 Mar 2010 21:58:40 PDT\r\nX-Mailer: YahooMailClassic/10.0.8 YahooMailWebService/0.8.100.260964\r\nDate: Thu, 25 Mar 2010 21:58:40 -0700 (PDT)\r\nTo: REST Discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nIn-Reply-To: &lt;718D5A65-04E9-4412-B310-DBA1806CC687@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: multipart/alternative; boundary=&quot;0-949369080-1269579520=:2748&quot;\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Kevin Duffey &lt;andjarnic@...&gt;\r\nSubject: Re: [rest-discuss] Hypermedia controls\r\nX-Yahoo-Group-Post: member; u=272793929; y=QRuVQkHl5-beIQTMQ8bCm08uzkfy16pfKyU24XsZHJmPJkdz\r\nX-Yahoo-Profile: andjarnic\r\n\r\n\r\n--0-949369080-1269579520=:2748\r\nContent-Type: text/plain; charset=us-ascii\r\n\r\nHi Jan,\n\n&gt;Did not say it was incorrect - I only said that you seem to think in too complicated terms.\n\nOk, can you elaborate on what I am doing that may be construed as too complicated?\n\n\n&gt;What about OpenSearch description and Atom Service documents? These \nshould &gt;explain things pretty well.\n\nWell, maybe it&#39;s just me, but the OpenSearch doc is not easy to read for me. I found a few documents, but they aren&#39;t really explaining it to my understanding I guess. I&#39;ve read specs/docs before, but the OpenSearch, unless I am looking at the wrong one, just doesn&#39;t give me the info I am seeking to understand this.\n\n&gt;That is because at least I do not really understand what you are looking\n for. What do &gt;you mean by &quot;what media type to use when using the \nresource&quot;, for example.\n\nI thought I said... I&#39;ll try again. But the atom-pub examples I&#39;ve seen seem to also return the media type to use. What I mean is.. if I make a GET call to the initial URL (first time client using the API), I am going to get various URLs back to different services available to me (the client) at that time. That initial call has no resource state yet..it&#39;s more of a discovery call to the published API service to figure out what is possible.. what resources are available to be called. Each of the URLs I return in the &lt;link..&gt; elements provides the href URL to the service, the rel tag which I don&#39;t honestly know what good it does in this specific first call/response, and the type= which is the media type a client will use to specify the Content-Type when making a request to that service. That is what I mean by my &lt;link&gt; elements returning a type. IT lets the client know &quot;this is the media type you must use for this resource URL&quot;. It would also be the one\n set on the Accept header. I don&#39;t know if an accompanying document for the API SDK like the OpenSearch Document shows, might explain that if the type is &quot;application/vnd.package.someService+xml&quot; that it ALSO can return generic application/xml if specified as the Accept header.\n\nWhat I meant by my above statement is that some examples I&#39;ve seen do NOT return the media type in the &lt;link&gt; element in a response. So, if I were to get back a response that had 8 &lt;link&gt; elements, each to different resources (like search, history, etc), how would I know what to set the Content-Type header to for each of those IF the &lt;link&gt; elements for those resources did not say &quot;for search using application/vnd....search+xml and for history using application/vnd...history+xml&quot;? Without the link elements telling me the type, I would not know what media type to use short of a generic application/xml type. Is that more clear?\n\n\n&gt;Which Content-Type? Do you mean the Accept header? Clients should \nput in there &gt;those types they understand and that they think make sense \nfor the given request (use &gt;Firebug to trace what FireFox is doing as an \nexample).\n\nI don&#39;t understand this? How would a client know to use the application/vnd.package.search+xml media type for Content-Type header (and Accept header) for a link with href=&quot;http://www.service.com/search&quot;? Nothing in the URL tells me that the media type should be set unless I am to just arbitrarily pull the last word off the end of the URL path and append that to application/vnd... and hope for the best. \n\n&gt;&gt; If my response returns five different resources that a \nmachine/client can use, and I &gt;&gt;don&#39;t specify media types that are to be \nset to use those resources, they can&#39;t just &gt;&gt;know it.\n\n&gt;So what? The\n type attributes are only hints anyway, not guarantees.\n\nHuh? What do you mean they are not guarantees? If a link element says type=&quot;application/vnd.package.serviceName+xml&quot;, why would I not use it.. or why would it only be a hint? What else might it be if it&#39;s not what it specifies?\n\n&gt;&gt; There has to be a way a machine could discover the right media type to use with no &gt;&gt;prior info on the resource.\n\n&gt;It is simple: use those you understand. You will only find out when the \nrequest is made &gt;which type you actually got.\n\nHuh? So wait.. I make the initial entry call to the public service URL. I get back a response with some number of &lt;link&gt; elements, each to a different service, specifying a type=&quot;&quot; with specific media type to use for that service. It sounds like what you are saying is, if there is no type=&quot;&quot; with it, just make a call to it, and it will return back in the Content-Type of the response the media type. So then use that. Is that right?\n\nI don&#39;t quite understand tho.. what call am I making to the service? If for example I get back a service named xxyyzz, I set up my request with that URL, I don&#39;t know the media type, so I dont&#39; set Content-Type or Accept headers, because I simply don&#39;t know yet. I can&#39;t possibly know or guess at this point that the media type on the server side is set to handle application/vnd.package.xxyyzz+xml. So when I make a request to the service, it&#39;s going to return back with a media type not supported. As I use Jersey on the server side, Jersey wont even get to my service methods that would fill out the response headers properly.. so I wont get back a response with the Content-Type header indicating to me the right media type to use either. So I am no better off. Hence, I am confused short of a link element specifying the media type to use, how you figure it out by just discovering it.. no document, no prior knowledge. How can a machine/bot figure it out?\n\n&gt;AtomPub service doc, opensearch description doc.... But any other bookmarkable enry &gt;state is fine, too. You can use Amazon even if the first interaction is a product page and &gt;not the home page, eh?\n\nI don&#39;t know that a web page like amazon is a good example. All the links are using the same media type throughout. In the case of a RESTful API that has more than one service, each service is mapped to a specific media type, it&#39;s a bit different to me than a web page with &lt;a href..&gt; links all throughout. I know what you mean by first page is product not home. That is.. if at a later time a client uses a cached URL to a service, not one form the initial API URL, that it should work the same. Agreed. I get that. It fits the cache-able restraint. I planned on every single &lt;link&gt; element throughout my entire API to always return the type=&quot;&quot; so that whether its a link resource from the initial public API URL, or a cached link that was called months later, it will respond with the &lt;links&gt; elements with type=&quot;&quot; in them so that service calls can be made from that point. \n\n&gt;Design you media types so that a client can persue its goals from any \npossible entry &gt;point. Amazon for example tells you where you can search \non *every* page, not just the &gt;home page. So you need not go back to the \nhome page to enter a new search.\n\nyes, again.. cached URLs can be entry points later on so need to provide the right info in responses to continue from. I get this. You say &quot;design your media types...&quot; I don&#39;t quite know what you mean by that. I think you know Java/Jersey and how you set up a path to a service, and for get/put/delete/post/options, etc you use the annotations on the java methods and so forth. Each service I provide as part of my API would have each method for that service returning with response header of Content-Type set for the media type of that service. I don&#39;t understand tho what you mean by design your media types. I assumed that setting the media types this one on the service methods was the design. Responding with the right media type set is also correct as far as I know. So am I missing something?\n\nThanks Jan.\n\n\n\n\n\n\n      \r\n--0-949369080-1269579520=:2748\r\nContent-Type: text/html; charset=us-ascii\r\n\r\n&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;0&quot; &gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; style=&quot;font: inherit;&quot;&gt;Hi Jan,&lt;br&gt;&lt;br&gt;&gt;Did not say it was incorrect - I only said that you seem to think in too complicated terms.&lt;br&gt;&lt;br&gt;Ok, can you elaborate on what I am doing that may be construed as too complicated?&lt;br&gt;&lt;br&gt;&lt;br&gt;&gt;What about OpenSearch description and Atom Service documents? These \nshould &gt;explain things pretty well.&lt;br&gt;&lt;br&gt;Well, maybe it&#39;s just me, but the OpenSearch doc is not easy to read for me. I found a few documents, but they aren&#39;t really explaining it to my understanding I guess. I&#39;ve read specs/docs before, but the OpenSearch, unless I am looking at the wrong one, just doesn&#39;t give me the info I am seeking to understand this.&lt;br&gt;&lt;br&gt;&gt;That is because at least I do not really understand what you are looking\n for. What do &gt;you mean by &quot;what media type to use when using the \nresource&quot;, for example.&lt;br&gt;&lt;br&gt;I thought I said... I&#39;ll try again. But the atom-pub examples I&#39;ve seen seem to also return the media type to use. What I mean is.. if I make a GET call to the initial URL (first time client using the API), I am going to get various URLs back to different services available to me (the client) at that time. That initial call has no resource state yet..it&#39;s more of a discovery call to the published API service to figure out what is possible.. what resources are available to be called. Each of the URLs I return in the &lt;link..&gt; elements provides the href URL to the service, the rel tag which I don&#39;t honestly know what good it does in this specific first call/response, and the type= which is the media type a client will use to specify the Content-Type when making a request to that service. That is what I mean by my &lt;link&gt; elements returning a type. IT lets the client know &quot;this is the media type you must use for this\n resource URL&quot;. It would also be the one set on the Accept header. I don&#39;t know if an accompanying document for the API SDK like the OpenSearch Document shows, might explain that if the type is &quot;application/vnd.package.someService+xml&quot; that it ALSO can return generic application/xml if specified as the Accept header.&lt;br&gt;&lt;br&gt;What I meant by my above statement is that some examples I&#39;ve seen do NOT return the media type in the &lt;link&gt; element in a response. So, if I were to get back a response that had 8 &lt;link&gt; elements, each to different resources (like search, history, etc), how would I know what to set the Content-Type header to for each of those IF the &lt;link&gt; elements for those resources did not say &quot;for search using application/vnd....search+xml and for history using application/vnd...history+xml&quot;? Without the link elements telling me the type, I would not know what media type to use short of a generic application/xml type. Is that\n more clear?&lt;br&gt;&lt;br&gt;&lt;br&gt;&gt;Which Content-Type? Do you mean the Accept header? Clients should \nput in there &gt;those types they understand and that they think make sense \nfor the given request (use &gt;Firebug to trace what FireFox is doing as an \nexample).&lt;br&gt;&lt;br&gt;I don&#39;t understand this? How would a client know to use the application/vnd.package.search+xml media type for Content-Type header (and Accept header) for a link with href=&quot;http://www.service.com/search&quot;? Nothing in the URL tells me that the media type should be set unless I am to just arbitrarily pull the last word off the end of the URL path and append that to application/vnd... and hope for the best. &lt;br&gt;&lt;br&gt;&gt;&gt; If my response returns five different resources that a \nmachine/client can use, and I &gt;&gt;don&#39;t specify media types that are to be \nset to use those resources, they can&#39;t just &gt;&gt;know it.&lt;br&gt;&lt;br&gt;&gt;So what? The\n type attributes are only hints anyway, not guarantees.&lt;br&gt;&lt;br&gt;Huh? What do you mean they are not guarantees? If a link element says type=&quot;application/vnd.package.serviceName+xml&quot;, why would I not use it.. or why would it only be a hint? What else might it be if it&#39;s not what it specifies?&lt;br&gt;&lt;br&gt;&gt;&gt; There has to be a way a machine could discover the right media type to use with no &gt;&gt;prior info on the resource.&lt;br&gt;&lt;br&gt;&gt;It is simple: use those you understand. You will only find out when the \nrequest is made &gt;which type you actually got.&lt;br&gt;&lt;br&gt;Huh? So wait.. I make the initial entry call to the public service URL. I get back a response with some number of &lt;link&gt; elements, each to a different service, specifying a type=&quot;&quot; with specific media type to use for that service. It sounds like what you are saying is, if there is no type=&quot;&quot; with it, just make a call to it, and it will return back in the Content-Type of the response the media type. So then use that. Is that right?&lt;br&gt;&lt;br&gt;I don&#39;t quite understand tho.. what call am I making to the service? If for example I get back a service named xxyyzz, I set up my request with that URL, I don&#39;t know the media type, so I dont&#39; set Content-Type or Accept headers, because I simply don&#39;t know yet. I can&#39;t possibly know or guess at this point that the media type on the server side is set to handle application/vnd.package.xxyyzz+xml. So when I make a request to the service, it&#39;s going to return\n back with a media type not supported. As I use Jersey on the server side, Jersey wont even get to my service methods that would fill out the response headers properly.. so I wont get back a response with the Content-Type header indicating to me the right media type to use either. So I am no better off. Hence, I am confused short of a link element specifying the media type to use, how you figure it out by just discovering it.. no document, no prior knowledge. How can a machine/bot figure it out?&lt;br&gt;&lt;br&gt;&gt;AtomPub service doc, opensearch description doc.... But any other bookmarkable enry &gt;state is fine, too. You can use Amazon even if the first interaction is a product page and &gt;not the home page, eh?&lt;br&gt;&lt;br&gt;I don&#39;t know that a web page like amazon is a good example. All the links are using the same media type throughout. In the case of a RESTful API that has more than one service, each service is mapped to a specific media type, it&#39;s a bit\n different to me than a web page with &lt;a href..&gt; links all throughout. I know what you mean by first page is product not home. That is.. if at a later time a client uses a cached URL to a service, not one form the initial API URL, that it should work the same. Agreed. I get that. It fits the cache-able restraint. I planned on every single &lt;link&gt; element throughout my entire API to always return the type=&quot;&quot; so that whether its a link resource from the initial public API URL, or a cached link that was called months later, it will respond with the &lt;links&gt; elements with type=&quot;&quot; in them so that service calls can be made from that point. &lt;br&gt;&lt;br&gt;&gt;Design you media types so that a client can persue its goals from any \npossible entry &gt;point. Amazon for example tells you where you can search \non *every* page, not just the &gt;home page. So you need not go back to the \nhome page to enter a new search.&lt;br&gt;&lt;br&gt;yes, again.. cached URLs can be entry points later on so need to provide the right info in responses to continue from. I get this. You say &quot;design your media types...&quot; I don&#39;t quite know what you mean by that. I think you know Java/Jersey and how you set up a path to a service, and for get/put/delete/post/options, etc you use the annotations on the java methods and so forth. Each service I provide as part of my API would have each method for that service returning with response header of Content-Type set for the media type of that service. I don&#39;t understand tho what you mean by design your media types. I assumed that setting the media types this one on the service methods was the design. Responding with the right media type set is also correct as far as I know. So am I missing something?&lt;br&gt;&lt;br&gt;Thanks Jan.&lt;br&gt;&lt;br&gt;&lt;div class=&quot;plainMail&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;br&gt;\n\n      \r\n--0-949369080-1269579520=:2748--\r\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":410189866,"authorName":"Vitaly Stakhov","from":"Vitaly Stakhov &lt;vitaly.st@...&gt;","profile":"vitaly.stakhov","replyTo":"SENDER","senderId":"svZOF27O0j2rdYFEqLemGCtOpJ3V2uYdC6c9PdEwJkTBz7sROBja9P9mLcsOHC4964Khpgrjdct5qsGpHhUX4VP1Hl1Zhuc342ss","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: Building a web app/api","postDate":"1333470771","msgId":18714,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PENBUFNDcXQ1UU9Xa3ZVdUJiaEhuV1M4N2EtUFlEbi1zYlFpbl9WOUNTWkNVVFcrVnBmd0BtYWlsLmdtYWlsLmNvbT4=","inReplyToHeader":"PENBUFNDcXQ1U1U9VXY3ZjlnT3ZoVzJVeDRzNmFKT2E9ZHl2bnluVnhDVlREUnFWVGpId0BtYWlsLmdtYWlsLmNvbT4=","referencesHeader":"PENBUFNDcXQ1U1U9VXY3ZjlnT3ZoVzJVeDRzNmFKT2E9ZHl2bnluVnhDVlREUnFWVGpId0BtYWlsLmdtYWlsLmNvbT4="},"prevInTopic":18695,"nextInTopic":0,"prevInTime":18713,"nextInTime":18715,"topicId":18694,"numMessagesInTopic":3,"msgSnippet":"OK, after thinking about it I came to conclusion that my original thought to distinguish api requests from UI requests and therefore returning different links","rawEmail":"Return-Path: &lt;vitaly.st@...&gt;\r\nX-Sender: vitaly.st@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 10030 invoked from network); 3 Apr 2012 16:33:08 -0000\r\nX-Received: from unknown (98.137.35.161)\n  by m8.grp.sp2.yahoo.com with QMQP; 3 Apr 2012 16:33:08 -0000\r\nX-Received: from unknown (HELO mail-wg0-f46.google.com) (74.125.82.46)\n  by mta5.grp.sp2.yahoo.com with SMTP; 3 Apr 2012 16:33:07 -0000\r\nX-Received: by wgbdq11 with SMTP id dq11so4020371wgb.15\n        for &lt;rest-discuss@yahoogroups.com&gt;; Tue, 03 Apr 2012 09:32:51 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.180.86.132 with SMTP id p4mr37954044wiz.15.1333470771875; Tue,\n 03 Apr 2012 09:32:51 -0700 (PDT)\r\nX-Received: by 10.223.74.141 with HTTP; Tue, 3 Apr 2012 09:32:51 -0700 (PDT)\r\nIn-Reply-To: &lt;CAPSCqt5SU=Uv7f9gOvhW2Ux4s6aJOa=dyvnynVxCVTDRqVTjHw@...&gt;\r\nReferences: &lt;CAPSCqt5SU=Uv7f9gOvhW2Ux4s6aJOa=dyvnynVxCVTDRqVTjHw@...&gt;\r\nDate: Tue, 3 Apr 2012 19:32:51 +0300\r\nMessage-ID: &lt;CAPSCqt5QOWkvUuBbhHnWS87a-PYDn-sbQin_V9CSZCUTW+Vpfw@...&gt;\r\nTo: rest-discuss@yahoogroups.com\r\nContent-Type: multipart/alternative; boundary=f46d044286d2ad10c404bcc8db46\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Vitaly Stakhov &lt;vitaly.st@...&gt;\r\nSubject: Re: Building a web app/api\r\nX-Yahoo-Group-Post: member; u=410189866; y=7fddUyAXjDNNMiiGUWnm8yeQGXeVvpXYTzpSQ89Z2S-egJSZHwNORYc\r\nX-Yahoo-Profile: vitaly.stakhov\r\n\r\n\r\n--f46d044286d2ad10c404bcc8db46\r\nContent-Type: text/plain; charset=ISO-8859-1\r\n\r\nOK, after thinking about it I came to conclusion that my original thought\nto distinguish api requests from UI requests and therefore returning\ndifferent links in responses based on the requested media type was kinda\nwrong. That decision should be based on how clients identify themselves to\nthe service. That way UI and API responses will be returned by exactly the\nsame code base, which is the goal.\n\nWith respect to implementation, most web frameworks support additional\nrouting features based on get/post/put/delete if not out of the box than\nwith some oss help.\n\nOn 2 April 2012 22:07, Vitaly Stakhov &lt;vitaly.st@...&gt; wrote:\n\n&gt; I&#39;m about to build a web app that should expose its functionality via API\n&gt; and I&#39;m trying to find the most effective way to do that and would like to\n&gt; hear your thoughts on the topic.\n&gt; The functionality of the &#39;website&#39; and the API intersect, with API having\n&gt; additional features that should not be available from the website (from\n&gt; browser). A traditional approach to building such systems seems to be\n&gt; building a website and an API as two separate projects, probably even using\n&gt; different technologies. That seems ineffective as there are 2 places\n&gt; (website and api) which have to invoke the same business logic with all the\n&gt; joys as a result. For example, adding a feature that should be exposed in\n&gt; both requires adding it to 2 places. Basically you should always think\n&gt; about keeping your website and API in sync. Not fun.\n&gt;\n&gt; And I don&#39;t want to have browsers and machine clients to work with the\n&gt; same html as it can easily become too verbose.\n&gt;\n&gt; Another way is to have the same set of resources that a browser and\n&gt; programmatic clients communicate with and use content negotiation to either\n&gt; return text/html (for browser) or application/vnd.whatever+json (for\n&gt; programmatic clients). With this approach only the code that converts\n&gt; resource objects to representations have to differ. I have a couple of\n&gt; concerns with this approach as well:\n&gt;\n&gt;    1. There are features that should be available via api only, meaning\n&gt;    html representations may not have the same links available in json for the\n&gt;    specific resource. I&#39;m not sure this is correct as depending on which media\n&gt;    type the client asks it may get completely different features. Feels kinda\n&gt;    wrong, but is it?\n&gt;    2. Earlier or later the two media types will start to diverge,\n&gt;    specifically when we have to take care about evolvability of the &#39;machine&#39;\n&gt;    media type, while that is not a concern for &#39;humans&#39; html. And here we go\n&gt;    again  having to have different links between html and json representations.\n&gt;    3. Browsers do only GET and POST. But that can be pretty easily\n&gt;    overridden by X-HTTP-Method-Override to do PUT and DELETE.\n&gt;\n&gt; What are your overall thoughts and experience on the topic?\n&gt;\n&gt; Thanks,\n&gt; Vitaly\n&gt;\n\n\n\n-- \nCheers,\nVitaly\n\r\n--f46d044286d2ad10c404bcc8db46\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nOK, after thinking about it I came to conclusion that my original thought t=\r\no distinguish api requests from UI requests and therefore returning differe=\r\nnt links in responses based on the requested media type was kinda wrong. Th=\r\nat decision should be based on how clients identify themselves to the servi=\r\nce. That way UI and API responses will be returned by exactly the same code=\r\n base, which is the goal.&lt;div&gt;\n&lt;br&gt;&lt;/div&gt;&lt;div&gt;With respect to implementatio=\r\nn, most web frameworks support additional routing features based on get/pos=\r\nt/put/delete if not out of the box than with some oss help.&lt;br&gt;&lt;br&gt;&lt;div cla=\r\nss=3D&quot;gmail_quote&quot;&gt;On 2 April 2012 22:07, Vitaly Stakhov &lt;span dir=3D&quot;ltr&quot;&gt;=\r\n&lt;&lt;a href=3D&quot;mailto:vitaly.st@...&quot;&gt;vitaly.st@...&lt;/a&gt;&gt;&lt;/spa=\r\nn&gt; wrote:&lt;br&gt;\n&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;margin:0 0 0 .8ex;=\r\nborder-left:1px #ccc solid;padding-left:1ex&quot;&gt;&lt;div style=3D&quot;text-align:left&quot;=\r\n&gt;I&#39;m about to build a web app that should expose its functionality via =\r\nAPI and I&#39;m trying to find the most effective way to do that and would =\r\nlike to hear your thoughts on the topic.&lt;/div&gt;\n\n&lt;div style=3D&quot;text-align:le=\r\nft&quot;&gt;The functionality of the &#39;website&#39; and the API intersect, with =\r\nAPI having additional features that should not be available from the websit=\r\ne (from browser). A traditional approach to building such systems seems to =\r\nbe building a website and an API as two separate projects, probably even us=\r\ning different technologies. That seems ineffective as there are 2 places (w=\r\nebsite and api) which have to invoke the same business logic with all the j=\r\noys as a result. For example, adding a feature that should be exposed in bo=\r\nth requires adding it to 2 places. Basically you should always think about =\r\nkeeping your website and API in sync. Not fun.&lt;/div&gt;\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;=\r\ndiv&gt;And I don&#39;t want to have browsers and machine clients to work with =\r\nthe same html as it can easily become too verbose.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/di=\r\nv&gt;&lt;div&gt;Another way is to have the same set of resources that a browser and =\r\nprogrammatic clients communicate with and use content negotiation to either=\r\n return text/html (for browser) or application/vnd.whatever+json (for progr=\r\nammatic clients). With this approach only the code that converts resource o=\r\nbjects to representations have to differ. I have a couple of concerns with =\r\nthis approach as well:&lt;/div&gt;\n\n&lt;div&gt;&lt;ol&gt;&lt;li&gt;There are features that should b=\r\ne available via api only, meaning html representations may not have the sam=\r\ne links available in json for the specific resource. I&#39;m not sure this =\r\nis correct as depending on which media type the client asks it may get comp=\r\nletely different features. Feels kinda wrong, but is it?&lt;/li&gt;\n\n&lt;li&gt;Earlier =\r\nor later the two media types will start to diverge, specifically when we ha=\r\nve to take care about evolvability of the &#39;machine&#39; media type, whi=\r\nle that is not a concern for &#39;humans&#39; html. And here we go again =\r\n=A0having to have different links between html and json representations.&lt;/l=\r\ni&gt;\n\n&lt;li&gt;Browsers do only GET and POST. But that can be pretty easily overri=\r\ndden by X-HTTP-Method-Override to do PUT and DELETE.&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;What are=\r\n your overall thoughts and experience on the topic?&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/d=\r\niv&gt;\n\n&lt;div&gt;Thanks,&lt;/div&gt;&lt;div&gt;Vitaly&lt;/div&gt;\n&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;br clear=\r\n=3D&quot;all&quot;&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;-- &lt;br&gt;Cheers,&lt;div&gt;Vitaly&lt;/div&gt;&lt;br&gt;\n&lt;/div&gt;\n\r\n--f46d044286d2ad10c404bcc8db46--\r\n\n"}}
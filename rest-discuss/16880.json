{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":221173245,"authorName":"Andrew Wahbe","from":"Andrew Wahbe &lt;andrew.wahbe@...&gt;","profile":"wahbedahbe","replyTo":"SENDER","senderId":"XwDRy6iLMf_r_Byt3VAK58BB3UF4prtQWYN5nPRVpK9tWarCRqZ3GZ0t3FYs3rxx0fBumFGkLZVvYFgU87msB6vlaBf75S1HWSW-ZA","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Re: Partial PUT debate","postDate":"1289488420","msgId":16880,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEFBTkxrVGltUFJqdGkxQTk4UmlkPVlZZF9rUkNHPUtDbm95cCtjaSstWHg4WkBtYWlsLmdtYWlsLmNvbT4=","inReplyToHeader":"PEFBTkxrVGk9cnBNOT1tM2c9eEd6amN5ZTZKUG1CeW9mdXVnY20zN0JrMUNPR0BtYWlsLmdtYWlsLmNvbT4=","referencesHeader":"PGliYnExcCtzYW5mQGVHcm91cHMuY29tPgk8NENEQTYwRjMuODAzMDUwNkBnbXguZGU+CTxBQU5Ma1RpbkQ4UDMwdnNRRWhleTF5dDBBa1JHdy0tRVk9aUFzcnhQcDM0cFdAbWFpbC5nbWFpbC5jb20+CTw0Q0RBOTIxMi45MDgwMjA3QHdlYnIzLm9yZz4JPEFBTkxrVGk9V3ZQTVliWlhvUlZIa1hpcWlueHFYZmF3a2M5dTdiRXFIQUE4V0BtYWlsLmdtYWlsLmNvbT4JPEFBTkxrVGltYjBEQmk0ajBadU5Ic2M9QVR6WUxiNnYtNHQ3Vzd1MzZxQWhvZkBtYWlsLmdtYWlsLmNvbT4JPEFBTkxrVGlrOHd4Tk9XX3ZOVDgzOE1IbnlTUF9TUlh6c1ZCNytTK2l2czMrU0BtYWlsLmdtYWlsLmNvbT4JPEFBTkxrVGluUjZqeFBNaU5ZUEdUWDBhWlpQSjRNWldYY0F1MjhSWjdUdEtvTkBtYWlsLmdtYWlsLmNvbT4JPEQyMTIzNTQ0LTM5RjYtNEQwMC04N0RDLTA0RDQwRTFBQzEzQUBtYWMuY29tPgk8QUFOTGtUaT1ycE05PW0zZz14R3pqY3llNkpQbUJ5b2Z1dWdjbTM3QmsxQ09HQG1haWwuZ21haWwuY29tPg=="},"prevInTopic":16879,"nextInTopic":16881,"prevInTime":16879,"nextInTime":16881,"topicId":16839,"numMessagesInTopic":40,"msgSnippet":"... I think the trick is that it s not just a partial PUT -- a non-idempotent partial PUT is not allowed right? (Just want to make sure we are not debating","rawEmail":"Return-Path: &lt;andrew.wahbe@...&gt;\r\nX-Sender: andrew.wahbe@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 13769 invoked from network); 11 Nov 2010 15:13:41 -0000\r\nX-Received: from unknown (66.196.94.107)\n  by m12.grp.re1.yahoo.com with QMQP; 11 Nov 2010 15:13:41 -0000\r\nX-Received: from unknown (HELO mail-bw0-f44.google.com) (209.85.214.44)\n  by mta3.grp.re1.yahoo.com with SMTP; 11 Nov 2010 15:13:41 -0000\r\nX-Received: by bwz12 with SMTP id 12so2034733bwz.3\n        for &lt;rest-discuss@yahoogroups.com&gt;; Thu, 11 Nov 2010 07:13:40 -0800 (PST)\r\nMIME-Version: 1.0\r\nX-Received: by 10.204.129.210 with SMTP id p18mr1507241bks.85.1289488420436;\n Thu, 11 Nov 2010 07:13:40 -0800 (PST)\r\nX-Received: by 10.204.118.66 with HTTP; Thu, 11 Nov 2010 07:13:40 -0800 (PST)\r\nIn-Reply-To: &lt;AANLkTi=rpM9=m3g=xGzjcye6JPmByofuugcm37Bk1COG@...&gt;\r\nReferences: &lt;ibbq1p+sanf@...&gt;\n\t&lt;4CDA60F3.8030506@...&gt;\n\t&lt;AANLkTinD8P30vsQEhey1yt0AkRGw--EY=iAsrxPp34pW@...&gt;\n\t&lt;4CDA9212.9080207@...&gt;\n\t&lt;AANLkTi=WvPMYbZXoRVHkXiqinxqXfawkc9u7bEqHAA8W@...&gt;\n\t&lt;AANLkTimb0DBi4j0ZuNHsc=ATzYLb6v-4t7W7u36qAhof@...&gt;\n\t&lt;AANLkTik8wxNOW_vNT838MHnySP_SRXzsVB7+S+ivs3+S@...&gt;\n\t&lt;AANLkTinR6jxPMiNYPGTX0aZZPJ4MZWXcAu28RZ7TtKoN@...&gt;\n\t&lt;D2123544-39F6-4D00-87DC-04D40E1AC13A@...&gt;\n\t&lt;AANLkTi=rpM9=m3g=xGzjcye6JPmByofuugcm37Bk1COG@...&gt;\r\nDate: Thu, 11 Nov 2010 10:13:40 -0500\r\nMessage-ID: &lt;AANLkTimPRjti1A98Rid=YYd_kRCG=KCnoyp+ci+-Xx8Z@...&gt;\r\nTo: Mike Kelly &lt;mike@...&gt;\r\nCc: Jan Algermissen &lt;algermissen1971@...&gt;, nathan@..., \n\tJulian Reschke &lt;julian.reschke@...&gt;, rest-discuss@yahoogroups.com\r\nContent-Type: multipart/alternative; boundary=00151747bcb43dfbc80494c86b01\r\nFrom: Andrew Wahbe &lt;andrew.wahbe@...&gt;\r\nSubject: Re: [rest-discuss] Re: Partial PUT debate\r\nX-Yahoo-Group-Post: member; u=221173245; y=Av7ANt3phw8gmY2cZ_yuKf4fMJZCZ6FwJ4KgIiz8LGOIBOlscw\r\nX-Yahoo-Profile: wahbedahbe\r\n\r\n\r\n--00151747bcb43dfbc80494c86b01\r\nContent-Type: text/plain; charset=ISO-8859-1\r\n\r\nOn Thu, Nov 11, 2010 at 4:45 AM, Mike Kelly &lt;mike@...&gt; wrote:\n\n&gt; On Wed, Nov 10, 2010 at 9:21 PM, Jan Algermissen\n&gt; &lt;algermissen1971@...&gt; wrote:\n&gt; &gt;\n&gt; &gt; On Nov 10, 2010, at 8:30 PM, Mike Kelly wrote:\n&gt; &gt;\n&gt; &gt;&gt;\n&gt; &gt;&gt; This stuff about self-descriptiveness and visibility is fine, but not\n&gt; &gt;&gt; really convincing unless there&#39;s some practical examples of how the\n&gt; &gt;&gt; greater visibility of complete PUT can actually be used for layering.\n&gt; &gt;\n&gt; &gt; Caches can invalidate upon successful responses to PATCH and PUT, not so\n&gt; for POST. (POST&#39;s visibility is zero).\n&gt; &gt;\n&gt;\n&gt; That&#39;s actually not true\n&gt;\n&gt; http://tools.ietf.org/html/draft-ietf-httpbis-p6-cache-12#section-2.5\n&gt;\n&gt; Anyway; the same invalidation behavior would occur for successful\n&gt; partial PUT requests, so how is this relevant to the partial vs.\n&gt; complete PUT discussion we&#39;re having?\n&gt;\n&gt; &gt;&gt;\n&gt; &gt;&gt; e.g. an example of a cache that uses the body of a successful PUT\n&gt; &gt;&gt; request to respond to subsequent GET requests.\n&gt; &gt;\n&gt; &gt; NO, that is not allowed by the definition of PUT. Caches can invalidate\n&gt; for the request URI though.\n&gt; &gt;\n&gt; &gt; (You can use a Content-Location header to enable the PUT response to be\n&gt; cacheable, though. IIRC)\n&gt; &gt;\n&gt;\n&gt; I was proposing that as a potential example of how greater visibility\n&gt; of a &#39;complete PUT&#39; _request_ body might be used for layering, and\n&gt; would support your inital point about self-descriptiveness. The fact\n&gt; it is not allowed by definition supports my position that preventing\n&gt; partial PUT actually achieves nothing, since the extra visibility of\n&gt; enforcing complete PUT across the web is not useful in practice.\n&gt;\n&gt; Cheers,\n&gt; Mike\n&gt;\n\nI think the trick is that it&#39;s not just a &quot;partial PUT&quot; -- a non-idempotent\npartial PUT is not allowed right? (Just want to make sure we are not\ndebating that) So that leaves &quot;idempotent partial PUT&quot; correct?\n\nI think it is worth considering what &quot;idempotent partial PUTs&quot; are -- ie. it\nis a subset of all partial PUTs. I think that subset might have some\nspecific properties. Unless I&#39;m missing something a PUT of this nature\nalways operates on a specific reference-able subdocument (there may be\nbetter terminology for this out there -- if so please point it out!) -- by\nthis I mean that the request body of the PUT provides new contents for a\nspecific subset of resource state that can be always be identified as the\nresource&#39;s state changes. This subset must be commonly understood by both\nthe client and server or requests couldn&#39;t be properly processed. How is the\nsubset identified? As this is &quot;partial&quot; it means it not identified by the\nURI -- the subset must be identified by the request body (explicitly or\nimplicitly) right?\n\nI think this really means you have a resource that has no URI.\n\nDoes REST disallow this? No. Does the world fall apart? No. But you can&#39;t\ntake advantage of some good features of REST/HTTP -- you can&#39;t GET the\nresource (just the parent document), you can&#39;t use etags on that resource\n(just the parent document), etc.\n\nIf you don&#39;t care about these things, then you don&#39;t and I suppose this\ndoesn&#39;t disallow the idempotent partial PUT. These are just advantages.\n\nI really think that they guarantees provided by PUT change dramatically with\na partial PUT though. As stated before, the state of the resource is no\nlonger determined by the last successful PUT. What does this break? Hard to\nsay -- I&#39;m not aware of any intermediary infrastructure out there that\nreally leverages the properties of PUT/DELETE at all so it&#39;s hard for me to\npoint out how changing the properties of PUT breaks existing infrastructure.\n(This is also why I tend not to bother with PUT/DELETE too much -- I think\nthey&#39;re a bit over-emphasized in REST circles.)\n\nBut I can make something up: with &quot;complete PUT&quot; you could implement a\ngeneric HTTP gateway that caches modification requests (PUT/DELETE) to\norigin servers when they are down, returning a 202 to the client. If a\nserver was down you just need to hold on to the last PUT/DELETE to any URI\nand then re-issue the last PUT when the server comes back up. With partial\nPUT you&#39;d have to hold on to the full series of requests -- but of course\nbecause of the lack of visibility the gateway doesn&#39;t know that these are\npartial PUTs and only holds on to the last one -- things then break.\n\nMaybe this gateway is a dumb idea -- dunno, I haven&#39;t thought about it\nenough. But perhaps some variation of this example makes sense. The problem\nis that if you violate the guarantees of the protocol, things that work\ntoday might break tomorrow when some new infrastructure is added to your\nsystem. The fact that you aren&#39;t sure how the properties guaranteed by the\nprotocol are or will be used in practice should make you more, not less,\nworried about violating them.\n\nRegards,\n\nAndrew\n\r\n--00151747bcb43dfbc80494c86b01\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;br&gt;&lt;br&gt;&lt;div class=3D&quot;gmail_quote&quot;&gt;On Thu, Nov 11, 2010 at 4:45 AM, Mike Ke=\r\nlly &lt;span dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:mike@...&quot;&gt;mike@mykanj=\r\no.co.uk&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D=\r\n&quot;margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex;&quot;&gt;\n&lt;div clas=\r\ns=3D&quot;im&quot;&gt;On Wed, Nov 10, 2010 at 9:21 PM, Jan Algermissen&lt;br&gt;\n&lt;&lt;a href=\r\n=3D&quot;mailto:algermissen1971@...&quot;&gt;algermissen1971@...&lt;/a&gt;&gt; wrote:&lt;=\r\nbr&gt;\n&gt;&lt;br&gt;\n&gt; On Nov 10, 2010, at 8:30 PM, Mike Kelly wrote:&lt;br&gt;\n&gt;&lt;b=\r\nr&gt;\n&gt;&gt;&lt;br&gt;\n&gt;&gt; This stuff about self-descriptiveness and visibili=\r\nty is fine, but not&lt;br&gt;\n&gt;&gt; really convincing unless there&#39;s some =\r\npractical examples of how the&lt;br&gt;\n&gt;&gt; greater visibility of complete P=\r\nUT can actually be used for layering.&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; Caches can invalida=\r\nte upon successful responses to PATCH and PUT, not so for POST. (POST&#39;s=\r\n visibility is zero).&lt;br&gt;\n&gt;&lt;br&gt;\n&lt;br&gt;\n&lt;/div&gt;That&#39;s actually not true&lt;=\r\nbr&gt;\n&lt;br&gt;\n&lt;a href=3D&quot;http://tools.ietf.org/html/draft-ietf-httpbis-p6-cache-=\r\n12#section-2.5&quot; target=3D&quot;_blank&quot;&gt;http://tools.ietf.org/html/draft-ietf-htt=\r\npbis-p6-cache-12#section-2.5&lt;/a&gt;&lt;br&gt;\n&lt;br&gt;\nAnyway; the same invalidation beh=\r\navior would occur for successful&lt;br&gt;\npartial PUT requests, so how is this r=\r\nelevant to the partial vs.&lt;br&gt;\ncomplete PUT discussion we&#39;re having?&lt;br=\r\n&gt;\n&lt;div class=3D&quot;im&quot;&gt;&lt;br&gt;\n&gt;&gt;&lt;br&gt;\n&gt;&gt; e.g. an example of a cache t=\r\nhat uses the body of a successful PUT&lt;br&gt;\n&gt;&gt; request to respond to su=\r\nbsequent GET requests.&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; NO, that is not allowed by the def=\r\ninition of PUT. Caches can invalidate for the request URI though.&lt;br&gt;\n&gt;&lt;=\r\nbr&gt;\n&gt; (You can use a Content-Location header to enable the PUT response =\r\nto be cacheable, though. IIRC)&lt;br&gt;\n&gt;&lt;br&gt;\n&lt;br&gt;\n&lt;/div&gt;I was proposing that=\r\n as a potential example of how greater visibility&lt;br&gt;\nof a &#39;complete PU=\r\nT&#39; _request_ body might be used for layering, and&lt;br&gt;\nwould support you=\r\nr inital point about self-descriptiveness. The fact&lt;br&gt;\nit is not allowed b=\r\ny definition supports my position that preventing&lt;br&gt;\npartial PUT actually =\r\nachieves nothing, since the extra visibility of&lt;br&gt;\nenforcing complete PUT =\r\nacross the web is not useful in practice.&lt;br&gt;\n&lt;br&gt;\nCheers,&lt;br&gt;\n&lt;font color=\r\n=3D&quot;#888888&quot;&gt;Mike&lt;br&gt;\n&lt;/font&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;I think the trick is th=\r\nat it&#39;s not just a &quot;partial PUT&quot; -- a non-idempotent partial =\r\nPUT is not allowed right? (Just want to make sure we are not debating that)=\r\n So that leaves &quot;idempotent partial PUT&quot; correct?&lt;div&gt;\n&lt;br&gt;&lt;/div&gt;=\r\n&lt;div&gt;I think it is worth considering what &quot;idempotent partial PUTs&quo=\r\nt; are -- ie. it is a subset of all partial PUTs. I think that subset might=\r\n have some specific properties. Unless I&#39;m missing something a PUT of t=\r\nhis nature always operates on a specific=A0reference-able=A0subdocument (th=\r\nere may be better terminology for this out there -- if so please point it o=\r\nut!) -- by this I mean that the request body of the PUT provides new conten=\r\nts for a specific subset of resource state that can be always be identified=\r\n as the resource&#39;s state changes. This subset must be commonly understo=\r\nod by both the client and server or requests couldn&#39;t be properly proce=\r\nssed. How is the subset identified? As this is &quot;partial&quot; it means=\r\n it not identified by the URI -- the subset must be identified by the reque=\r\nst body (explicitly or implicitly) right?=A0&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I th=\r\nink this really means you have a resource that has no URI.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/=\r\ndiv&gt;&lt;div&gt;Does REST disallow this? No. Does the world fall apart? No. But yo=\r\nu can&#39;t take advantage of some good features of REST/HTTP -- you can&#3=\r\n9;t GET the resource (just the parent document), you can&#39;t use etags on=\r\n that resource (just the parent document), etc.&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I=\r\nf you don&#39;t care about these things, then you don&#39;t and I suppose t=\r\nhis doesn&#39;t disallow the idempotent partial PUT. These are just advanta=\r\nges.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I really think that they guarantees provided =\r\nby PUT change dramatically with a partial PUT though. As stated before, the=\r\n state of the resource is no longer determined by the last successful PUT. =\r\nWhat does this break? Hard to say -- I&#39;m not aware of any intermediary =\r\ninfrastructure out there that really leverages the properties of PUT/DELETE=\r\n at all so it&#39;s hard for me to point out how changing the properties of=\r\n PUT breaks existing infrastructure. (This is also why I tend not to bother=\r\n with PUT/DELETE too much -- I think they&#39;re a bit over-emphasized in R=\r\nEST circles.)&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;But I can make something up: with &=\r\nquot;complete PUT&quot; you could implement a generic HTTP gateway that cac=\r\nhes modification requests (PUT/DELETE) to origin servers when they are down=\r\n, returning a 202 to the client. If a server was down you just need to hold=\r\n on to the last PUT/DELETE to any URI and then re-issue the last PUT when t=\r\nhe server comes back up. With partial PUT you&#39;d have to hold on to the =\r\nfull series of requests -- but of course because of the lack of visibility =\r\nthe gateway doesn&#39;t know that these are partial PUTs and only holds on =\r\nto the last one -- things then break.&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Maybe this =\r\ngateway is a dumb idea -- dunno, I haven&#39;t thought about it enough. But=\r\n perhaps some variation of this example makes sense. The problem is that if=\r\n you violate the guarantees of the protocol, things that work today might b=\r\nreak tomorrow when some new infrastructure is added to your system. The fac=\r\nt that you aren&#39;t sure how the properties guaranteed by the protocol ar=\r\ne or will be used in practice should make you more, not less, worried about=\r\n violating them.&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Regards,&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;di=\r\nv&gt;Andrew&lt;br clear=3D&quot;all&quot;&gt;&lt;br&gt;\n&lt;/div&gt;\n\r\n--00151747bcb43dfbc80494c86b01--\r\n\n"}}
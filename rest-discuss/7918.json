{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":3702469,"authorName":"Nic James Ferrier","from":"Nic James Ferrier &lt;nferrier@...&gt;","profile":"nferrier_tapsellferrier","replyTo":"SENDER","senderId":"y4rfuHW_66sMr7FKi_WAKNF9_rN3p7rNxrsdE3eIe2XAQmBdBM_kBqMk14XK7pjtfOojg7lPVddWOHPc7Txje_RgOPS0Pez-x49Eg94S1SfTtcqlF1mvhg","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: qualitative benchmarking","postDate":"1171835115","msgId":7918,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDg3dHp4ajJsOTAuZnNmQHRhcHNlbGxmZXJyaWVyLmNvLnVrPg==","inReplyToHeader":"PDExNzE4MzE1NDMuNjkyOC4yNi5jYW1lbEBsb2NhbGhvc3QubG9jYWxkb21haW4+IChCZW5qYW1pbiBDYXJseWxlJ3MgbWVzc2FnZSBvZiAiTW9uXCwgMTkgRmViIDIwMDcgMDZcOjQ1XDo0MyArMTAwMCIp","referencesHeader":"PDQ1RDMyMzE5LjQwNTA2MDNAbWV0YWxhYi51bmMuZWR1Pgk8N0IzNTlGMjgtMEJEMy00ODRGLThCMzgtQzk3QTM0RDdDOEY0QHdoYXRmZXR0bGUuY29tPgk8ODczYjU4bnp3Zi5mc2ZfLV9AdGFwc2VsbGZlcnJpZXIuY28udWs+CTwxMTcxODMxNTQzLjY5MjguMjYuY2FtZWxAbG9jYWxob3N0LmxvY2FsZG9tYWluPg=="},"prevInTopic":7915,"nextInTopic":0,"prevInTime":7917,"nextInTime":7919,"topicId":7830,"numMessagesInTopic":53,"msgSnippet":"Thanks for this. It s a fantastic list! ... Surely this doesn t need to be tested? An application is not non-RESTfull if it doesn t implement a method that we","rawEmail":"Return-Path: &lt;nferrier@...&gt;\r\nX-Sender: nferrier@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 81435 invoked from network); 18 Feb 2007 21:56:11 -0000\r\nReceived: from unknown (66.218.67.33)\n  by m37.grp.scd.yahoo.com with QMQP; 18 Feb 2007 21:56:11 -0000\r\nReceived: from unknown (HELO owls-house.tapsellferrier.co.uk) (81.187.188.218)\n  by mta7.grp.scd.yahoo.com with SMTP; 18 Feb 2007 21:56:10 -0000\r\nReceived: from nicferrier.tapsellferrier.co.uk ([172.31.50.1] helo=localhost)\n\tby owls-house.tapsellferrier.co.uk with esmtp (Exim 4.60 #1 (Debian))\n\tid 1HItr6-00019Z-F8; Sun, 18 Feb 2007 21:46:00 +0000\r\nReceived: from nferrier by localhost with local (Exim 4.50)\n\tid 1HItqO-0002k5-1y; Sun, 18 Feb 2007 21:45:16 +0000\r\nTo: Benjamin Carlyle &lt;benjamincarlyle@...&gt;\r\nCc: Paul Downey &lt;paul.downey@...&gt;,\n\t  Elliotte Harold &lt;elharo@...&gt;,\n\t  REST Discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nReferences: &lt;45D32319.4050603@...&gt;\n\t&lt;7B359F28-0BD3-484F-8B38-C97A34D7C8F4@...&gt;\n\t&lt;873b58nzwf.fsf_-_@...&gt;\n\t&lt;1171831543.6928.26.camel@...&gt;\r\nDate: Sun, 18 Feb 2007 21:45:15 +0000\r\nIn-Reply-To: &lt;1171831543.6928.26.camel@...&gt; (Benjamin Carlyle&#39;s message of &quot;Mon&#92;, 19 Feb 2007 06&#92;:45&#92;:43 +1000&quot;)\r\nMessage-ID: &lt;87tzxj2l90.fsf@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=us-ascii\r\nX-eGroups-Msg-Info: 1:0:0:0\r\nFrom: Nic James Ferrier &lt;nferrier@...&gt;\r\nSubject: Re: qualitative benchmarking\r\nX-Yahoo-Group-Post: member; u=3702469; y=WLpgXDlS7Frtp06xWl0i8qBgfUfnteUEYmkWJHTVxuJ7_kcgv2xceNiKtPUQEUC20-8\r\nX-Yahoo-Profile: nferrier_tapsellferrier\r\n\r\nThanks for this. It&#39;s a fantastic list!\n\n\nBenjamin Carlyle &lt;benjamincarlyle@...&gt; writes:\n\n&gt; * Every resource should implement as many of the architecture&#39;s\n&gt; interaction patterns as makes sense. eg GET, PUT, POST, DELETE,\n&gt; HEAD.\n\nSurely this doesn&#39;t need to be tested? An application is not\nnon-RESTfull if it doesn&#39;t implement a method that we may think it\nshould. That is subjective.\n\n\n&gt; * Content types should\n&gt; ** Be free from verbs (except for code-on-demand), representing pure\n&gt; data.\n&gt; ** Encode similar data schemas into the same document type\n&gt; ** Be standard wherever possible\n&gt; ** Include standard documents as sub-documents wherever appropriate\n&gt; ** Extend standard document types through subclassing when variation is\n&gt; required\n&gt; ** Invent new document types when nothing out there is a good fit\n\nAll of these seem testable to me.\n\n\n&gt; Evolvability:\n&gt; * Components should ignore features of a document they do not understand\n&gt; * Components should avoid wildcard matches in parsing that might lead\n&gt; them to interpret a feature they do not understand as if it were one\n&gt; they do understand\n&gt; * Components should not alter their processing depending on a version\n&gt; number found in a document\n&gt; * If incompatible changes occur to a document type, it should normally\n&gt; be given a new document type identifier\n&gt; * Components should continue to support legacy features and interface\n&gt; until such time as it is known that they are no longer in use\n\nMost of these look like client side things. It has just occured to me\nthat automated client testing looks very difficult.\n\n\n&gt; Horizontal scalability:\n&gt; * When a server does stores state due to client requests, that state is\n&gt; either:\n&gt; ** Hidden from view, or\n&gt; ** Made visible as a resource that can be further retrieved and\n&gt; manipulated\n&gt; * Server-side state storage should be avoided when no money is changing\n&gt; hands to support this storage. This can be said for sessions, pub/sub,\n&gt; and other times when the server stores state either temporarily or\n&gt; perminently. Paying for bandwidth almost involves funny money, but\n&gt; storage can really cost you. It hurts horizontal scalability, increases\n&gt; complexity, and generally makes life hard. That said, most services need\n&gt; to store some state. Just don&#39;t to any more than you have to.\n\nI think this boils down to a question of not doing cookies or URL\nrewriting?\n\n\n-- \nNic Ferrier\nhttp://www.tapsellferrier.co.uk   for all your tapsell ferrier needs\n\n"}}
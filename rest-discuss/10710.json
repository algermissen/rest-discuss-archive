{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":331949899,"authorName":"Sebastien Lambla","from":"&quot;Sebastien Lambla&quot; &lt;seb@...&gt;","profile":"serialseb","replyTo":"SENDER","senderId":"T7cfaXOFp6TIYcDELmPi0yuAFU2uze_8zfWZ7O59zZVSzq1S_zE73czRAh0hNHNIFjqHDXGhoN8WmyhqZthEFPG6FaTAPyyR7FWC4_c","spamInfo":{"isSpam":false,"reason":"12"},"subject":"RE: [rest-discuss] Updating metadata of multiple resources","postDate":"1209861568","msgId":10710,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEJMVTEwMi1EUzZBRDdFOTczRURFOTIzNkI4RDJCQ0I1RDQwQHBoeC5nYmw+","inReplyToHeader":"PDljMzRjNzJlMDgwNTAzMTQ0MG02NTg1N2QxZXZjZmJjZGYxNGY5Yzc3ZjllQG1haWwuZ21haWwuY29tPg==","referencesHeader":"PDFiZGVkZDdhMDgwNTAyMTM1Nm8zMDRhMGY4ZGsxYjNhMDNhZTNhMzBiY2FmQG1haWwuZ21haWwuY29tPgkgPEJMVTEwMi1EUzRBQjU4MDdDRDBBQkM1Q0FBODQzN0I1RDUwQHBoeC5nYmw+CSA8OWMzNGM3MmUwODA1MDMwOTU0ajc5OGMxMDRuYTJlMzFlZTVhN2Q0OTE4ZUBtYWlsLmdtYWlsLmNvbT4JIDxCTFUxMDItRFMyRjFDNEZEMjczMTYzMzUyRkQzOTZCNUQ1MEBwaHguZ2JsPiA8OWMzNGM3MmUwODA1MDMxNDQwbTY1ODU3ZDFldmNmYmNkZjE0ZjljNzdmOWVAbWFpbC5nbWFpbC5jb20+"},"prevInTopic":10709,"nextInTopic":10711,"prevInTime":10709,"nextInTime":10711,"topicId":10697,"numMessagesInTopic":19,"msgSnippet":"... This is where I think we differ: I believe infrastructure issues should be dealt at the infrastructure level, not pushed at the app level. By defining your","rawEmail":"Return-Path: &lt;seb@...&gt;\r\nX-Sender: seb@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 2889 invoked from network); 4 May 2008 00:39:45 -0000\r\nX-Received: from unknown (66.218.67.95)\n  by m46.grp.scd.yahoo.com with QMQP; 4 May 2008 00:39:45 -0000\r\nX-Received: from unknown (HELO blu0-omc4-s24.blu0.hotmail.com) (65.55.111.163)\n  by mta16.grp.scd.yahoo.com with SMTP; 4 May 2008 00:39:45 -0000\r\nX-Received: from BLU102-DS6 ([65.55.111.137]) by blu0-omc4-s24.blu0.hotmail.com with Microsoft SMTPSVC(6.0.3790.3959);\n\t Sat, 3 May 2008 17:39:44 -0700\r\nX-Originating-Email: [seb@...]\r\nMessage-ID: &lt;BLU102-DS6AD7E973EDE9236B8D2BCB5D40@...&gt;\r\nReturn-Path: seb@...\r\nTo: &lt;rest-discuss@yahoogroups.com&gt;\r\nReferences: &lt;1bdedd7a0805021356o304a0f8dk1b3a03ae3a30bcaf@...&gt;\t &lt;BLU102-DS4AB5807CD0ABC5CAA8437B5D50@...&gt;\t &lt;9c34c72e0805030954j798c104na2e31ee5a7d4918e@...&gt;\t &lt;BLU102-DS2F1C4FD273163352FD396B5D50@...&gt; &lt;9c34c72e0805031440m65857d1evcfbcdf14f9c77f9e@...&gt;\r\nIn-Reply-To: &lt;9c34c72e0805031440m65857d1evcfbcdf14f9c77f9e@...&gt;\r\nDate: Sun, 4 May 2008 01:39:28 +0100\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;us-ascii&quot;\r\nContent-Transfer-Encoding: 7bit\r\nX-Mailer: Microsoft Office Outlook 12.0\r\nThread-Index: AcitZle3ntuFVQ9oQc695fWJN7MTagAAJDSg\r\nContent-Language: en-gb\r\nX-OriginalArrivalTime: 04 May 2008 00:39:44.0531 (UTC) FILETIME=[58FA4E30:01C8AD7F]\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Sebastien Lambla&quot; &lt;seb@...&gt;\r\nSubject: RE: [rest-discuss] Updating metadata of multiple resources\r\nX-Yahoo-Group-Post: member; u=331949899; y=Y7sL2j0hCW1KVgb1imW6HstXZAeuOim-FZeMQr0V05x8QGXI\r\nX-Yahoo-Profile: serialseb\r\n\r\n&gt; Let&#39;s get specific.  If you&#39;re going to implement my method, you need\n&gt; a new media type.  Here&#39;s one possible implementation.  Call it\n&gt; &quot;text/html-with-javascript-links&quot;. \n\n\nThis is where I think we differ: I believe infrastructure issues should be\ndealt at the infrastructure level, not pushed at the app level. By defining\nyour javascript / html, you are rest, no doubt about it. But you do not\nsolve the problem of sending a whole bunch of requests that you would like\nsee processed in one block.\n\nWhat is not provided in either solutions is to decide the behaviour on\nfailure: Updating on resources 1,2,3 would may fail for resource 2. What\nhappens then? Stop all of them, considering 1,2,3 were modified in one\ntransaction? Do you continue to 3 even though 2 failed? Do you stop at 2 and\nleave 1 having been modified? And how do you communicate the result? By\nwrapping several changes in one url, you can leverage the http status code\nonly in an atomic fashion, which may or may not be what your application\nneeds. The multipart approach lets you differentiate should you need it, and\nonly buy into the atomic change when and if you need it.\n\n&gt; [...] This is not a &quot;convention&quot; any more\n&gt; than HTML forms are; it&#39;s just another media type.  It&#39;s not &quot;specific\n&gt; to my service&quot; because, once again, it&#39;s a (hypothetical) standard\n&gt; media type.\n\nYou may well be right in the sense that you rely on an informational\nresource to tell you how to construct a url. That said, I fail to see how\nthis could be implemented easily in most toolkits: you rely on either having\nprior knowledge or executing javascript. In that respect I don&#39;t see the\ndifference between your solution and the multipart one.\n\n&gt; If you support it once, you support it for every service.\n\nI don&#39;t understand this assertion? Surely, any solution you come up with\nwill be generalizable to any resource, be it pipelining extended to\nPUT/POST, multipart or your javascript-based URL building?\n\n&gt; It&#39;s not &quot;opaque&quot; or &quot;undiscoverable&quot; because you have to have a\n&gt; priori knowledge of it to even negotiate for a representation in the\n&gt; first place.\n\nYou need to understand the resource type, just like you need to understand\nthe batch multipart format, so in this respect I don&#39;t think you&#39;re adding\nmuch value.\n\n&gt; It&#39;s also *much* simpler to implement than the proposed multi-part\n&gt; request solution.  Current clients support neither of the proposed\n&gt; methods.\n\nIt may be a bit simpler to implement, but multipart mime is a known format\nwith plenty of supporting libraries supporting it. In itself it wouldn&#39;t\ntake much to support that bulk format from javascript, but certainly much\nmore than your solution.\n\n&gt;  since you can no longer make the assumption that HTTP\n&gt; requests are of the form &quot;send request, then block until the response\n&gt; comes&quot;.  Httplib makes exactly that assumption.\n\nI&#39;m not sure we&#39;re talking about hte same proposal. All the requests are\nsent in one go, and all the response are received in one go. On the wire you\nhave a simple request / response, so you can still do blocking stuff.\n\n&gt;  It throws &quot;one request, one\n&gt; response&quot; out the window. \n\nI don&#39;t understand how does it do that? You still get one response per\nrequest, they just happened to be sent and received in bulk?\n\n&gt; &quot;What happens if the 47th request in the series fails?\n\nSee my point earlier: this is the space of convention in both solutions.\n\n&gt; [...] sometimes a request is a\n&gt; request; sometimes a request is actually a batch of requests.\n\nSee above, n requests =&gt; n responses, this doesn&#39;t change this. What changes\nis that you transmit all your requests as a payload.\n\n&gt; The application programmer will have to *explicitly* batch requests.\n&gt; When he&#39;s batching request #13 out of 17, what is his current state?\n\nYou assume that each set of changes is dependent on the new representation\nyou get after the previous operation. When you update the two picture&#39;s\nmetadata, you will receive an updated representation or a 204, be it that\nyou did a bulk update through url construction or through bulking the\nrequests. I really fail to see how your solution would be REST and the\nmultipart would only be ST, as the only difference is that you rely on\nunderstanding a specific representation to build infrastructure bulk\nchanges, and multipart would rely on... The same thing! without the need for\nthe transient urls.\n\n&gt; There&#39;s also the fundamental question of which method to use for your\n&gt; multi-part request.  Do you use POST?  What if the batch of requests\n&gt; is made up only of DELETEs?  Is &quot;delete these 57 resources&quot; within the\n&gt; definition of POST?  Do you really have a uniform interface at that\n&gt; point, or is your multi-part request really RPC in disguise?  These\n&gt; are the questions that made me back away from the &quot;multi-part request&quot;\n&gt; technique, although it was initially tempting.\n\nThat is certainly a shortcoming of the current solution and I agree with\nyou: is defining a _service_ called $batch supporting a post and always\nreturing a 200 the right thing to do? I&#39;m not bothered too much about the\noperations that are contained in the payload, as this url serves essentially\nas a proxy to execute all the attached requests as if they were individual.\n\n&gt; Sometimes widening your solution space a little is easier than digging\n&gt; 1,000 feet deeper into the hole you&#39;re already in. :)\n\nYou assume that the batching requirements can be resolved simply by\ncombining resources of a same type and building transient uri through a\nlanguage sent down to the client, and that all those operations will always\nbe one operation and one type of operation. That&#39;s a lot of assumptions that\ndon&#39;t necessarily apply. This is a good solution for the small scope of the\nissue that was presented though, but it doesn&#39;t resolve the more global\nproblem of batching a bunch of operations against n resources without\nissuing n connections and waiting for the response n*m seconds.\n\nIn that respect the multipart approach solves the same kind of issues Http\npipelining should have solved for GET, as well as provide a way to group a\nbunch of http operations in one unit of work.\n\nThat said the solution doesn&#39;t make me feel warm and fuzzy inside, but\nneither does yours.\n\n--\nSerialSeb\n\n\n"}}
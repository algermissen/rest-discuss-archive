{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":289191104,"authorName":"Jan Algermissen","from":"Jan Algermissen &lt;algermissen1971@...&gt;","profile":"algermissen1971","replyTo":"SENDER","senderId":"x0uCBXBBjmZYdxAnQI_2TqXA0Zn7iHqXPstmxfxbhg2R3ebXa3xMBkuaK76XfTcRVw13GTVsUarHtjNg_4nBw854OXT5Ukgcju4eLIyhAO0","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Restful Approaches to some Enterprise Integration Problems","postDate":"1277979196","msgId":15781,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDlCM0EyRjY4LUQzNTYtNEIyOS04QUMyLUNCNjM0QzEyRUY2M0BtYWMuY29tPg==","inReplyToHeader":"PDY2MzE0Ljg3OTI4LnFtQHdlYjExMDcxNS5tYWlsLmdxMS55YWhvby5jb20+","referencesHeader":"PDE0NzgzNC4zNzA1LnFtQHdlYjExMDcxNC5tYWlsLmdxMS55YWhvby5jb20+IDwwRjY0NzRGRS1CNzUyLTQ4OEEtOTc5OC1EMzg0QUM2NkYxRjZAbWFjLmNvbT4gPDY2MzE0Ljg3OTI4LnFtQHdlYjExMDcxNS5tYWlsLmdxMS55YWhvby5jb20+"},"prevInTopic":15780,"nextInTopic":15782,"prevInTime":15780,"nextInTime":15782,"topicId":15761,"numMessagesInTopic":45,"msgSnippet":"... There was discussion of REST-* on this list when it came out and IIRC the criticism was quite well explained in those posts. Check out the postings around","rawEmail":"Return-Path: &lt;algermissen1971@...&gt;\r\nX-Sender: algermissen1971@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 46266 invoked from network); 1 Jul 2010 10:17:17 -0000\r\nX-Received: from unknown (98.137.34.46)\n  by m12.grp.re1.yahoo.com with QMQP; 1 Jul 2010 10:17:17 -0000\r\nX-Received: from unknown (HELO asmtpout028.mac.com) (17.148.16.103)\n  by mta3.grp.sp2.yahoo.com with SMTP; 1 Jul 2010 10:17:17 -0000\r\nMIME-version: 1.0\r\nContent-transfer-encoding: 7BIT\r\nContent-type: text/plain; charset=us-ascii\r\nX-Received: from [10.202.119.190]\n (tmo-100-208.customers.d1-online.com [80.187.100.208])\n by asmtp028.mac.com (Sun Java(tm) System Messaging Server 6.3-8.01 (built Dec\n 16 2008; 32bit)) with ESMTPSA id &lt;0L4V00FGEJ257Y10@...&gt; for\n rest-discuss@yahoogroups.com; Thu, 01 Jul 2010 03:13:22 -0700 (PDT)\r\nX-Proofpoint-Spam-Details: rule=notspam policy=default score=0 spamscore=0\n ipscore=0 phishscore=0 bulkscore=0 adultscore=0 classifier=spam adjust=0\n reason=mlx engine=6.0.2-1004200000 definitions=main-1007010019\r\nX-Proofpoint-Virus-Version: vendor=fsecure\n engine=1.12.8161:2.4.5,1.2.40,4.0.166\n definitions=2010-07-01_01:2010-02-06,2010-07-01,2010-06-30 signatures=0\r\nIn-reply-to: &lt;66314.87928.qm@...&gt;\r\nDate: Thu, 01 Jul 2010 12:13:16 +0200\r\nCc: REST Discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nMessage-id: &lt;9B3A2F68-D356-4B29-8AC2-CB634C12EF63@...&gt;\r\nReferences: &lt;147834.3705.qm@...&gt;\n &lt;0F6474FE-B752-488A-9798-D384AC66F1F6@...&gt;\n &lt;66314.87928.qm@...&gt;\r\nTo: Bryan Taylor &lt;bryan_w_taylor@...&gt;\r\nX-Mailer: Apple Mail (2.1078)\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Jan Algermissen &lt;algermissen1971@...&gt;\r\nSubject: Re: [rest-discuss] Restful Approaches to some Enterprise Integration\n Problems\r\nX-Yahoo-Group-Post: member; u=289191104; y=j4t6opqk7KbR8U4rzIpbZPcIB7DZRVAB1G4LEPqb-I8MFJnNXIbivlcI\r\nX-Yahoo-Profile: algermissen1971\r\n\r\n\nOn Jun 30, 2010, at 11:40 PM, Bryan Taylor wrote:\n\n&gt; \n&gt; Jan wrote:\n&gt; \n&gt;&gt; I found the Rest-* effort at http://www.jboss.org/reststar . The name of this project tweaks me, but some of the specs under it seem relevant.\n&gt; Roy on REST-*: http://tech.groups.yahoo.com/group/rest-discuss/message/13266  (&#39;nuf said :-)\n&gt; \n&gt; I agree these have nothing to do with REST exactly, and I hate the REST-* name. The individual specs seem to try to create RESTful implementations of integration patterns in the same way as Atom and AtomPub attempt to solve pub/sub in a RESTful way. That said, Roy&#39;s statement &quot;this is the single dumbest attempt at one-sided &#39;standardization&#39; of anti-REST architecture&quot; seems mysterious to me\n\nThere was discussion of REST-* on this list when it came out and IIRC the criticism was quite well explained in those posts. Check out the postings around the date of the quoted posting by Roy.\n\nBasically the problem is that REST-* attempts to bend REST to match the usuall enterprisey mind set, claiming that this and that would be a must-have. What should really happen is that &quot;enterprise people&quot; learn from the Web and adjust their mind set to pruodcue systems that are less complex and more easily evolvable.\n\nIt just makes no sense to claim complexity is necessary just because one fails to understand how to make things simpler. REST-* originates from this kind of thinking and hence claims that there are lots of things that need to be addressed.\n\nThe truth is that all we need is proper media types and a little more guidance how the Web kind of doing things can be applied in enterprise contexts (e.g. match the open, &#39;Darwinistic&#39; way to an environment that simply needs a little more planning and budgeting).\n\n\n&gt; and is quite conclusory. How did he leap from these being about something other than REST to them being &quot;anti-REST&quot;. Would AtomPub become anti-REST if it had been wrongly renamed RestPub? \n&gt; \n&gt; He makes two assertions that follow:\n&gt; - Distributed transactions are an architectural component of non-REST interaction.\n\nwhich is true because they violate REST&#39;s stateless server constraint (among others I guess).\n\n&gt; - Message queues are a common integration technique for non-REST architectures. \n&gt; \n\nYes, because they violate the hypermedia contraint (would need to check which else).\n\n&gt; I could also make the statement that pub/sub syndication models are a common integration techniques for non-REST architectures, which would not prove that Atom and AtomPub are non-RESTful.\n\nNote that AtomPub is essentially a media type specification that defines the semantics of several hypermedia controls (e.g. the edit-link relation). AtomPub uses straight-forward HTTP for communication between client and server. Actually it would not need to say anything about that but provides the HTTP interaction examples as developer hints.\n\nThe HTTP-based use of the formats specified by AtomPub is not PubSub but polling. An AtomPub client polls feeds via GET to check whether the feed has changed.\n\nAlso note that PubSub is not forbidden by REST. There is simply no appropriate method in HTTP for doing pubsub but you can allways add one in if PubSub is the right model for you (see [1],[2]).\n\nPubSub with HTTP works like this:\n\nWATCH /some/feed\nReply-To: http://www.my.org/notification-processor\n\nThe server could then POST to the Reply-To URI.\n\n(But I doubt that it is ever really of practical relevance. I&#39;d go with polling due to the much greater simplicity).\n\n\n&gt; There are patterns of integration, and I expect to find them in every architectural style.\n\nThis is an interesting topic because you can start this train of thought one level up: If your problem space requires interation (the Web does, and enterprise IT clearly also does) then it is much wiser to pick an architectural style that is tailored towards dealing with integration. Such a style must constrain the connectors (think component API) to be uniform because only then can you avoid to have to do point to point integration every time two components talk to each other.\n\nREST is such a style (surprise, surprise :-) through and through. REST has been designed to deal with integration problems (complexity and change).\n\nInterestingly, no OO-based pattern (especially not the service pattern) out there attempts to constrain the connectors of components. That is why all these attempts (e.g. SOA) are essentially meaningless when it comes to reducing integration complexity. IOW, they cannot guarrantee reduced complexity and good evolvability - REST does because it limits the variation of the component interface (to be uniform).\n\n\n&gt; If there is some impossibility conjecture here, I&#39;d like to see it stated in a more analytic way, without the bashing.\n\nMaybe - but then... he has said it all before and REST reall is one of those things on earth that are *not* up to interpretation.\n\nAdditionally - that is his style and I presonally find it very refreshing. I only lack the competence to adopt it :-)\n\n&gt; It may be that a distributed transaction pattern must must violate one of the RESTful architecure principles, but this is far from obvious.\n\nIt requires understanding of REST, yes. OTH, most of the problems people have (at least I did) is due to the fact that &#39;they&#39; lack proper knowledge of software architecture in general (See Perry&Wolf, Garlan&Shaw, Taylor&Medvidovic and the first half of Roy&#39;s dissertation). If you started with that knowledge already - understanding REST would be pretty quick as would be understanding the rationale behind the mentioned constraint violation. (Personally the journey took me about 8 years and I keep having epiphanies :-)\n\n&gt; Maybe this is some deep corollary of the CAP theory or something. Or perhaps not.\n&gt; \n&gt; The corresponding statement about message queues seems baffling. These solve a harder problem than guaranteed delivery. Queues solve guaranteed delivery to exactly one consumer among competing consumers with some fairness guarantees.\n\nWell, that is a layer 4 issue (transport). What do MQs do in terms of reducing integration complexity or making a system more easily changeable? All the latter is a layer 7 issue.\n\n&gt; \n&gt; How would I implement a RESTful way to have airport passengers acquire taxi transportation at the airport in a fair way?\n&gt; \n\nPOST /taxi-requests\nContent-Type: application/procurement+xml\n&lt;transport-request from=&quot;airport&quot; goods=&quot;passenger&quot;/&gt;\n\n201 Created\nLocation: /taxi-requests/778  ----------&lt;&lt; Your process instance resource\nContent-Location: /taxi-requests/778\nCache-Control: no-cache\nContent-Type: application/procurement+xml\n\n&lt;transportation&gt;    --------------------&lt;&lt; Your process instance data\n  &lt;status&gt;on its way&lt;/status&gt;\n  &lt;estimated-arrival&gt;07:03 PM&lt;/estimated-arrival&gt;\n  &lt;receipt href=&quot;./receipt&quot;/&gt;\n&lt;/transportation&gt;\n\n\nCheck status:\n\nGET /taxi-requests/778\n\nobtain receipt:\n\nGET /taxi-requests/778/receipt\n\nHTH,\n\nJan\n\n[1] http://roy.gbiv.com/untangled/2008/paper-tigers-and-hidden-dragons\n[2] http://roy.gbiv.com/untangled/2008/economies-of-scale\n\n-----------------------------------\n Jan Algermissen, Consultant\n NORD Software Consulting\n\n Mail: algermissen@...\n Blog: http://www.nordsc.com/blog/\n Work: http://www.nordsc.com/\n-----------------------------------\n\n\n\n\n\n"}}
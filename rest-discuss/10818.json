{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":236158268,"authorName":"Simon Reinhardt","from":"Simon Reinhardt &lt;simon.reinhardt@...&gt;","profile":"shepard4711","replyTo":"SENDER","senderId":"wBnbjXQGWi9DiBBherrqeU5sZTpz_RxEOIQh7papiHd16nNaMW_LBi8gHRu2rqkVHgk-WHG_P6JhWDvFSP5Qr5Rk8ewmEtH7lIPGtZIUjNzy","spamInfo":{"isSpam":false,"reason":"12"},"subject":"CSRF attacks in RESTful authenticated web applications","postDate":"1211834047","msgId":10818,"canDelete":false,"contentTrasformed":false,"systemMessage":true,"headers":{"messageIdInHeader":"PDQ4M0IxRUJGLjMwMzA5MDNAa29lbG4uZGU+"},"prevInTopic":0,"nextInTopic":10819,"prevInTime":10817,"nextInTime":10819,"topicId":10818,"numMessagesInTopic":21,"msgSnippet":"Hi, After reading about cross-site request forgery (XSRF/CSRF) attacks and common ways to circumvent them, I wasn t quite satisfied with how people approach","rawEmail":"Return-Path: &lt;simon.reinhardt@...&gt;\r\nReceived: (qmail 75153 invoked from network); 26 May 2008 20:34:57 -0000\r\nReceived: from unknown (66.218.67.94)\n  by m53.grp.scd.yahoo.com with QMQP; 26 May 2008 20:34:57 -0000\r\nReceived: from unknown (HELO n40a.bullet.mail.sp1.yahoo.com) (66.163.168.134)\n  by mta15.grp.scd.yahoo.com with SMTP; 26 May 2008 20:34:57 -0000\r\nReceived: from [216.252.122.218] by n40.bullet.mail.sp1.yahoo.com with NNFMP; 26 May 2008 20:34:57 -0000\r\nReceived: from [66.218.69.1] by t3.bullet.sp1.yahoo.com with NNFMP; 26 May 2008 20:34:57 -0000\r\nReceived: from [66.218.66.75] by t1.bullet.scd.yahoo.com with NNFMP; 26 May 2008 20:34:57 -0000\r\nX-Sender: simon.reinhardt@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 92450 invoked from network); 26 May 2008 20:33:32 -0000\r\nX-Received: from unknown (66.218.67.96)\n  by m48.grp.scd.yahoo.com with QMQP; 26 May 2008 20:33:32 -0000\r\nX-Received: from unknown (HELO mojito.ops.eusc.inter.net) (84.23.254.150)\n  by mta17.grp.scd.yahoo.com with SMTP; 26 May 2008 20:33:32 -0000\r\nX-Received: from [10.155.1.1] (helo=waikiki.ops.eusc.inter.net)\n\tby mojito.ops.eusc.inter.net with esmtp (Exim 4.69) \n\tid 1K0jNr-000CpO-AQ\n\tfor rest-discuss@yahoogroups.com; Mon, 26 May 2008 22:33:31 +0200\r\nX-Trace: 507c73696d6f6e2e7265696e68617264747c37382e33342e3133332e32347c314b\n\t306a4e722d3030304549342d32777c31323131383334303131\r\nX-Received: from waikiki.ops.eusc.inter.net ([10.155.10.22] helo=localhost)\n\tby waikiki.ops.eusc.inter.net with esmtpa (Exim 4.69) \n\tid 1K0jNr-000EI4-2w\n\tfor rest-discuss@yahoogroups.com; Mon, 26 May 2008 22:33:31 +0200\r\nMessage-ID: &lt;483B1EBF.3030903@...&gt;\r\nDate: Mon, 26 May 2008 22:34:07 +0200\r\nUser-Agent: Thunderbird 2.0.0.14 (Windows/20080421)\r\nMIME-Version: 1.0\r\nTo: rest-discuss@yahoogroups.com\r\nX-FOAF: http://simon-reinhardt.de/foaf.rdf\r\nContent-Type: text/plain; charset=ISO-8859-15; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-AntiVirus: checked by AntiVir MailGuard (Version: 8.0.0.18; AVE: 8.1.0.46; VDF: 7.0.4.95)\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Simon Reinhardt &lt;simon.reinhardt@...&gt;\r\nSubject: CSRF attacks in RESTful authenticated web applications\r\nX-Yahoo-Group-Post: member; u=236158268; y=0qtG1jCGbSY_Bxpm2ScKUqf8VNkmioT6F8EHbMIj5d7OTP60_0w\r\nX-Yahoo-Profile: shepard4711\r\nX-Yahoo-Newman-Property: groups-system\r\nX-eGroups-Approved-By: gonga_thrash &lt;distobj@...&gt; via web; 26 May 2008 20:34:55 -0000\r\n\r\nHi,\n\nAfter reading about cross-site request forgery (XSRF/CSRF) attacks and common ways to circumvent them, I wasn&#39;t quite satisfied with how people approach this.\n\nTo sum it up: A user is authenticated for (&quot;logged into&quot;) a website A in their browser session and the attacker uses that fact to execute a request (there are ways to not only do GET but also POST requests without the user noticing) from a another website B in the same browser session. That request has website A as the target with the result that the attacker can perform actions on that website under the authentication of the user.\nWeb developers circumvent this by adding hidden form fields containing a random token (bound to the session) or just the session ID to the form which is supposed to precede the action. Requests to perform the action will only be accepted if they contain this shared secret. Therefore the token has to be stored with the session on the server.\nThe downsides are obvious: you have server state, handling several parallel tokens for the same action becomes unwieldy and since you have to time-out the tokens after some time for increased security, people can&#39;t just post an open form days later. Also you have to handle web service calls specifically - you don&#39;t want to negotiate shared secrets before service calls, so you have to find out what is a web service call and what a website call (content-type?).\n\nIt would appear that all this is a cookie-session problem anyway and RESTful websites wouldn&#39;t have that vulnerability since they would use HTTP authentication. But wait: HTTP authentication is also present at any time during the browser session. I don&#39;t think browsers make sure to only send authentication credentials they hold for a website in the current session when the request origins from the website it is for. Maybe they should. But there are just so many vectors for CSRF that I think you always have to anticipate them when developing web applications and as far as I can see RESTful websites are just as vulnerable.\n\nSo, has anyone put some thought into this from a REST point of view?\n\nRegards,\nSimon\n\n"}}
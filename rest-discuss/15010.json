{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":352334505,"authorName":"Craig McClanahan","from":"Craig McClanahan &lt;craigmcc@...&gt;","profile":"craig_mcclanahan","replyTo":"SENDER","senderId":"p2UT2cfiXThyAS1wbN0Raoo0wQ_prorr_Bs4rB5z29TZ7Z9hqGQeR0n19KJ90QFS8jr1maTHSX602disjA304nqr_wh-c52krwPu1w","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Re: Thoughts about URLs for a REST driven website","postDate":"1267861917","msgId":15010,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGY4YjM5YWNlMTAwMzA1MjM1MWcxY2RhOTZmMndlYzU2MmQ4NTJhNDdmODRmQG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PDMxMzY2OS41MTk3Ny5xbUB3ZWI1NTkwMy5tYWlsLnJlMy55YWhvby5jb20+","referencesHeader":"PGI1NDhkZjY1MTAwMzA1MjAyM3QxNWM5YzAwYmc0ZGFkYWUxNThiNWI2NDQxQG1haWwuZ21haWwuY29tPgkgPDMxMzY2OS41MTk3Ny5xbUB3ZWI1NTkwMy5tYWlsLnJlMy55YWhvby5jb20+"},"prevInTopic":15009,"nextInTopic":15011,"prevInTime":15009,"nextInTime":15011,"topicId":14978,"numMessagesInTopic":41,"msgSnippet":"... Sounds good, as long as matches up to the URL id means is authorized to perform the request specified by the verb and URI that was submitted . First","rawEmail":"Return-Path: &lt;craigmcc@...&gt;\r\nX-Sender: craigmcc@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 19457 invoked from network); 6 Mar 2010 07:52:43 -0000\r\nX-Received: from unknown (66.196.94.106)\n  by m2.grp.sp2.yahoo.com with QMQP; 6 Mar 2010 07:52:43 -0000\r\nX-Received: from unknown (HELO mail-pv0-f177.google.com) (74.125.83.177)\n  by mta2.grp.re1.yahoo.com with SMTP; 6 Mar 2010 07:52:43 -0000\r\nX-Received: by pvc21 with SMTP id 21so628368pvc.22\n        for &lt;rest-discuss@yahoogroups.com&gt;; Fri, 05 Mar 2010 23:51:57 -0800 (PST)\r\nMIME-Version: 1.0\r\nX-Received: by 10.143.137.1 with SMTP id p1mr269155wfn.281.1267861917424; Fri, \n\t05 Mar 2010 23:51:57 -0800 (PST)\r\nIn-Reply-To: &lt;313669.51977.qm@...&gt;\r\nReferences: &lt;b548df651003052023t15c9c00bg4dadae158b5b6441@...&gt;\n\t &lt;313669.51977.qm@...&gt;\r\nDate: Fri, 5 Mar 2010 23:51:57 -0800\r\nMessage-ID: &lt;f8b39ace1003052351g1cda96f2wec562d852a47f84f@...&gt;\r\nTo: Kevin Duffey &lt;andjarnic@...&gt;\r\nCc: mike amundsen &lt;mamund@...&gt;, rest-discuss@yahoogroups.com\r\nContent-Type: multipart/alternative; boundary=000e0cd72dda365e7304811d1b0c\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Craig McClanahan &lt;craigmcc@...&gt;\r\nReply-To: craigmcc@...\r\nSubject: Re: [rest-discuss] Re: Thoughts about URLs for a REST driven website\r\nX-Yahoo-Group-Post: member; u=352334505; y=Qu_VyeAMPRBN-e68WBHyzfq0bJKSbfgTaV5DiromP_Y57Am4ymmXDXxHRQ\r\nX-Yahoo-Profile: craig_mcclanahan\r\n\r\n\r\n--000e0cd72dda365e7304811d1b0c\r\nContent-Type: text/plain; charset=ISO-8859-1\r\n\r\nOn Fri, Mar 5, 2010 at 11:02 PM, Kevin Duffey &lt;andjarnic@...&gt; wrote:\n\n&gt; I suppose what I am asking is, on every request, I basically have to\n&gt; perform some ACL on the given URL id and the authorization header id to make\n&gt; sure they match. IF they do (and the id is allowed to make the call via\n&gt; acl), then it continues. But, there is ALWAYS some logic in place to check\n&gt; this. Right now, for example, I simply use the Auth header to validate, if\n&gt; so, the call continues. In my current way of doing this, it&#39;s very possible\n&gt; someone could give someone else (or someone could steal it) the URL and\n&gt; anyone that authenticates, has access to it.\n&gt;\n&gt; So basically I should probably first make sure the calling user via the\n&gt; Authorization header is valid. Then, make sure that matches up to the URL id\n&gt; (if one is applicable), and then make sure the id has the rights to access\n&gt; the method being requested. If all that goes thru, then the method can take\n&gt; place. That about right?\n&gt;\n\nSounds good, as long as &quot;matches up to the URL id&quot; means &quot;is authorized to\nperform the request specified by the verb and URI that was submitted&quot;.\nFirst make sure the user is properly authenticated (send 401 if not).  Then,\nensure that the authenticated user is allowed to perform the request they\nare attempting (send 403 or 404 if not).  The rules for &quot;allowed to perform&quot;\nare specific to the application -- in the use case we&#39;ve been describing,\nyou could enforce a rule (for example) that the creator of an order can do\nanything, but an administrative username (for producing reports) can only do\na GET.\n\nFor Jersey in particular, check out the @RolesAllowed annotation, which you\ncan couple with a security filter to perform this kind of check pretty\neasily.  The security filter can, for example, examine the path of the\nrequest (so it could figure out which order you&#39;re trying to access) and\ngrant you the &quot;owner&quot; role only if you are indeed the owner of that order.\nThen, putting &quot;@RolesAllowed(&quot;owner&quot;)&quot; on a resource method is sufficient to\ntrigger the 403 if you don&#39;t have the specified role.\n\n&gt;\n&gt;\n&gt; Craig, you wouldn&#39;t find much if you had access to my account. It&#39;s pretty\n&gt; empty sadly!\n&gt;\n&gt; :-)\n\nCraig\n\r\n--000e0cd72dda365e7304811d1b0c\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;br&gt;&lt;br&gt;&lt;div class=3D&quot;gmail_quote&quot;&gt;On Fri, Mar 5, 2010 at 11:02 PM, Kevin D=\r\nuffey &lt;span dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:andjarnic@...&quot;&gt;andjarni=\r\nc@...&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote class=3D&quot;gmail_quote&quot; styl=\r\ne=3D&quot;border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; =\r\npadding-left: 1ex;&quot;&gt;\n&lt;table border=3D&quot;0&quot; cellpadding=3D&quot;0&quot; cellspacing=3D&quot;0=\r\n&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=3D&quot;font-family: inherit; font-style: inherit; font-v=\r\nariant: inherit; font-weight: inherit; font-size: inherit; line-height: inh=\r\nerit; font-size-adjust: inherit; font-stretch: inherit;&quot; valign=3D&quot;top&quot;&gt;\nI =\r\nsuppose what I am asking is, on every request, I basically have to perform =\r\nsome ACL on the given URL id and the authorization header id to make sure t=\r\nhey match. IF they do (and the id is allowed to make the call via acl), the=\r\nn it continues. But, there is ALWAYS some logic in place to check this. Rig=\r\nht now, for example, I simply use the Auth header to validate, if so, the c=\r\nall continues. In my current way of doing this, it&#39;s very possible some=\r\none could give someone else (or someone could steal it) the URL and anyone =\r\nthat authenticates, has access to it. &lt;br&gt;\n&lt;br&gt;So basically I should probab=\r\nly first make sure the calling user via the Authorization header is valid. =\r\nThen, make sure that matches up to the URL id (if one is applicable), and t=\r\nhen make sure the id has the rights to access the method being requested. I=\r\nf all that goes thru, then the method can take\n place. That about right?&lt;br=\r\n&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;Sounds good, as long as &q=\r\nuot;matches up to the URL id&quot; means &quot;is authorized to perform the=\r\n request specified by the verb and URI that was submitted&quot;.=A0 First m=\r\nake sure the user is properly authenticated (send 401 if not).=A0 Then, ens=\r\nure that the authenticated user is allowed to perform the request they are =\r\nattempting (send 403 or 404 if not).=A0 The rules for &quot;allowed to perf=\r\norm&quot; are specific to the application -- in the use case we&#39;ve been=\r\n describing, you could enforce a rule (for example) that the creator of an =\r\norder can do anything, but an administrative username (for producing report=\r\ns) can only do a GET. &lt;br&gt;\n&lt;br&gt;For Jersey in particular, check out the @Rol=\r\nesAllowed annotation, which you can couple with a security filter to perfor=\r\nm this kind of check pretty easily.=A0 The security filter can, for example=\r\n, examine the path of the request (so it could figure out which order you&#=\r\n39;re trying to access) and grant you the &quot;owner&quot; role only if yo=\r\nu are indeed the owner of that order.=A0 Then, putting &quot;@RolesAllowed(=\r\n&quot;owner&quot;)&quot; on a resource method is sufficient to trigger the =\r\n403 if you don&#39;t have the specified role.&lt;br&gt;\n&lt;/div&gt;&lt;blockquote class=\r\n=3D&quot;gmail_quote&quot; style=3D&quot;border-left: 1px solid rgb(204, 204, 204); margin=\r\n: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;&quot;&gt;&lt;table border=3D&quot;0&quot; cellpadding=3D=\r\n&quot;0&quot; cellspacing=3D&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=3D&quot;font-family: inherit; font-st=\r\nyle: inherit; font-variant: inherit; font-weight: inherit; font-size: inher=\r\nit; line-height: inherit; font-size-adjust: inherit; font-stretch: inherit;=\r\n&quot; valign=3D&quot;top&quot;&gt;\n&lt;br&gt;&lt;br&gt;Craig, you wouldn&#39;t find much if you had acce=\r\nss to my account. It&#39;s pretty empty sadly! &lt;br&gt;&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/=\r\ntable&gt;&lt;/blockquote&gt;&lt;div&gt;:-)&lt;br&gt;&lt;br&gt;Craig&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;\n\r\n--000e0cd72dda365e7304811d1b0c--\r\n\n"}}
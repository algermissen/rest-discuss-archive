{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":267214845,"authorName":"Noah Campbell","from":"Noah Campbell &lt;noahcampbell@...&gt;","profile":"noahsingleton","replyTo":"SENDER","senderId":"PhvJ_z3cnqcfAT16SvH0mPoeCeV_5BKrc0MWDZLJ7d3taQ7NrU2BpRiJMODYZn05vQH00k8f76IDlMxwF71YnqimZPiB5rDoby1hEZA","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Re: RESTful M2M Systems and Resource Typing","postDate":"1261590942","msgId":14370,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGRlNzBiMzlkMDkxMjIzMDk1NWwyNTRkMzNmNW1lMzI3NDI1YjBiMDViY2NiQG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PDZFRTcwQjUyLTQ0RTctNDQ2OC05OUY0LUUyQTE4ODJENUQwMkBtYWMuY29tPg==","referencesHeader":"PGhnbnBmaCtwcGZrQGVHcm91cHMuY29tPgkgPGRlNzBiMzlkMDkxMjIxMTExOXMxODhjYThkNHM1YmU0ZGFkMGI3MGUxNTA3QG1haWwuZ21haWwuY29tPgkgPEVFQTg0RTA5LTlFNDctNDEyNy04OUQzLTBFOTVENDlDMkFFREBtYWMuY29tPgkgPGRlNzBiMzlkMDkxMjIxMTQ0N3Q2YzM1MDRlN2s4YTZhMDI2OTZhMmJkYTEwQG1haWwuZ21haWwuY29tPgkgPDVFRTE0RDJCLUYxOTItNEJDRS1BQkQ5LUM5RTJDNEYyM0FFNEBtYWMuY29tPgkgPGRlNzBiMzlkMDkxMjIxMTgxNXE2NzgxZGVjN3I1YTlhODM0NTVkMTdiNGM2QG1haWwuZ21haWwuY29tPgkgPEMwQjQzQUE3LTdBRjEtNDA3Ri1BMjFFLTkwN0Q2NTUyMUZCRUBtYWMuY29tPgkgPDU4MWJmNjE2MDkxMjIyMDQwN3E0OTFlNmEzOHgzMjEyYWVhYzdkODRiZGFlQG1haWwuZ21haWwuY29tPgkgPDM5MTVjNjlkMDkxMjIyMTIxM2czOGM2NDhlMndkZDBkODcyZGNiYzAxMzA4QG1haWwuZ21haWwuY29tPgkgPDZFRTcwQjUyLTQ0RTctNDQ2OC05OUY0LUUyQTE4ODJENUQwMkBtYWMuY29tPg=="},"prevInTopic":14368,"nextInTopic":14371,"prevInTime":14369,"nextInTime":14371,"topicId":14156,"numMessagesInTopic":134,"msgSnippet":"From a contract point of view, it would be more complex. I would argue that a service owner would want the flexibility and language a RESTful SLA contract","rawEmail":"Return-Path: &lt;noahcampbell@...&gt;\r\nX-Sender: noahcampbell@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 15234 invoked from network); 23 Dec 2009 17:55:44 -0000\r\nX-Received: from unknown (98.137.34.46)\n  by m2.grp.sp2.yahoo.com with QMQP; 23 Dec 2009 17:55:44 -0000\r\nX-Received: from unknown (HELO mail-px0-f182.google.com) (209.85.216.182)\n  by mta3.grp.sp2.yahoo.com with SMTP; 23 Dec 2009 17:55:44 -0000\r\nX-Received: by pxi12 with SMTP id 12so3759718pxi.3\n        for &lt;rest-discuss@yahoogroups.com&gt;; Wed, 23 Dec 2009 09:55:44 -0800 (PST)\r\nMIME-Version: 1.0\r\nX-Received: by 10.142.7.39 with SMTP id 39mr6962058wfg.113.1261590942932; Wed, \n\t23 Dec 2009 09:55:42 -0800 (PST)\r\nIn-Reply-To: &lt;6EE70B52-44E7-4468-99F4-E2A1882D5D02@...&gt;\r\nReferences: &lt;hgnpfh+ppfk@...&gt;\n\t &lt;de70b39d0912211119s188ca8d4s5be4dad0b70e1507@...&gt;\n\t &lt;EEA84E09-9E47-4127-89D3-0E95D49C2AED@...&gt;\n\t &lt;de70b39d0912211447t6c3504e7k8a6a02696a2bda10@...&gt;\n\t &lt;5EE14D2B-F192-4BCE-ABD9-C9E2C4F23AE4@...&gt;\n\t &lt;de70b39d0912211815q6781dec7r5a9a83455d17b4c6@...&gt;\n\t &lt;C0B43AA7-7AF1-407F-A21E-907D65521FBE@...&gt;\n\t &lt;581bf6160912220407q491e6a38x3212aeac7d84bdae@...&gt;\n\t &lt;3915c69d0912221213g38c648e2wdd0d872dcbc01308@...&gt;\n\t &lt;6EE70B52-44E7-4468-99F4-E2A1882D5D02@...&gt;\r\nDate: Wed, 23 Dec 2009 09:55:42 -0800\r\nMessage-ID: &lt;de70b39d0912230955l254d33f5me327425b0b05bccb@...&gt;\r\nTo: Jan Algermissen &lt;algermissen1971@...&gt;\r\nCc: Will Hartung &lt;willh@...&gt;, \n\tGuilherme Silveira &lt;guilherme.silveira@...&gt;, Jorn Wildt &lt;jw@...&gt;, \n\trest-discuss@yahoogroups.com\r\nContent-Type: multipart/alternative; boundary=00504502ae470160b6047b6908af\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Noah Campbell &lt;noahcampbell@...&gt;\r\nSubject: Re: [rest-discuss] Re: RESTful M2M Systems and Resource Typing\r\nX-Yahoo-Group-Post: member; u=267214845; y=h2RAGLCGbOrz-8NIQ5wmzE_bUldQ-aJyaY9D2z2gIflmnRmcKVJuYQ\r\nX-Yahoo-Profile: noahsingleton\r\n\r\n\r\n--00504502ae470160b6047b6908af\r\nContent-Type: text/plain; charset=UTF-8\r\n\r\nFrom a contract point of view, it would be more complex.\n\nI would argue that a service owner would want the flexibility and language a\nRESTful SLA contract would require because it moves provides forward\ncompatibility with requirements on the client (i.e. they must support all\nmeaningful HTTP responses gracefully...i.e. 201, 301, 307, 401).\n\nFrom a client perspective it becomes more of a hassle because it requires\nmore robust error handling.\n\nStepping back and looking at the sum of both parts, I think this is a good\nthing and enterprise would want this maturity in between business groups.\n It leads to less cost in terms of maintenance and service interruption, but\nthis is my speculation.  Unfortunately I don&#39;t have a concrete evidence this\nwould be the case.\n\n-Noah\n\nOn Tue, Dec 22, 2009 at 10:46 PM, Jan Algermissen\n&lt;algermissen1971@...&gt;wrote:\n\n&gt; Will,\n&gt;\n&gt; excellent analysis.\n&gt;\n&gt;\n&gt; On Dec 22, 2009, at 9:13 PM, Will Hartung wrote:\n&gt;\n&gt;  This thread just exploded and it&#39;s taken until now to catch up.\n&gt;&gt;\n&gt;&gt; Jan, I don&#39;t see any conflict with having a SLA backing up a REST\n&gt;&gt; interface.\n&gt;&gt;\n&gt;\n&gt; Me neither. But it needs to be clear what the SLA&#39;ed contract really is.\n&gt; Take the AtomPub example: RFC 5023 *is* saying that a GET on a collection\n&gt; will return a feed. Is that normative? Or just a hint? If it is just a hint,\n&gt; why is it in the spec at all and what is the value of it from the client\n&gt; developer&#39;s POV?\n&gt;\n&gt; If you are the service owner, would you put into the SLA a penalty payment\n&gt; of some serious money if your service stops providing an Atom feed for a GET\n&gt; to a collection? If not, the whole information is meaningless from a\n&gt; contract POV.\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;&gt; I think that you can make a brittle REST architecture that hits all of\n&gt;&gt; the REST bullet points, but inevitably fails to evolve properly.\n&gt;&gt;\n&gt;&gt; Take for example here, the &quot;apiv2&quot; rel link.\n&gt;&gt;\n&gt;&gt; The fact that the service authors CHOSE to add an &quot;apiv2&quot; link. They\n&gt;&gt; did not HAVE to. They COULD have simply changed the media type, and\n&gt;&gt; 406&#39;d the old clients.\n&gt;&gt;\n&gt;\n&gt; My issue: In a RESTful system, the service authors woule *never* have to\n&gt; make any promise, right?\n&gt;\n&gt;\n&gt;\n&gt;&gt; Obviously, &quot;suddenly&quot;, all of the old client fail miserably, and are\n&gt;&gt; cut off from the service until they upgrade. No backward compatibility\n&gt;&gt; here.\n&gt;&gt;\n&gt;\n&gt; Yes, And if that happens, a legal department demands a basis for sorting\n&gt; out who violoated which obligation. They have a hard time accepting to build\n&gt; legal contracts on top of &quot;REST style flexibility&quot;.\n&gt;\n&gt; OTH, as I mentioned before, if the potential failure of the clients would\n&gt; be officially accepted because the occasional SLA violation costs less than\n&gt; running a tightly coupled system then it might make sense to CxOs.\n&gt;\n&gt; With this approach, RFC 5023 should normatively state that clients can\n&gt; expect Atom feeds to be returned for GETs on collections and the service\n&gt; owners would just accept that there is a price to pay should the service\n&gt; return a 406 instead.\n&gt;\n&gt;\n&gt;\n&gt;&gt; As for &quot;evolutionary&quot; software, it&#39;s pretty clear that it doesn&#39;t\n&gt;&gt; evolve. Rather you have backward compatibility that gives an illusion\n&gt;&gt; of evolution. The existing clients aren&#39;t changing, the service is\n&gt;&gt; simply being friendly by keeping them in mind and not locking them\n&gt;&gt; out.\n&gt;&gt;\n&gt;&gt; I don&#39;t see any way that REST differs from SOAP, or any other system\n&gt;&gt; in this regard. As you&#39;ve observed, compliance and compatibility are\n&gt;&gt; hard coded in to the clients and server. If the protocol changes, the\n&gt;&gt; clients and servers need to be changed to remain compatible.\n&gt;&gt;\n&gt;\n&gt; My point is that REST differs from SOAP because this coupling is not being\n&gt; made explicit. In SOAP it is explicit because there is a WSDL that defines\n&gt; an interface that couples tightly. It just known that you cannot remove a\n&gt; method from an OO-style API without breaking your clients. For REST we\n&gt; usually argue that services can freely evolve without breaking clients.\n&gt; Which is wrong.\n&gt;\n&gt;\n&gt;\n&gt;&gt; Versioning and backward compatibility is the key to a robust, evolving\n&gt;&gt; infrastructure. I think REST is better for such a system than\n&gt;&gt; something like SOAP simply because I think it is easier for a more\n&gt;&gt; advanced client to leverage the latest services and APIs, as well as\n&gt;&gt; for a server to better maintain compatibility with older clients.\n&gt;&gt;\n&gt;\n&gt; Yes, definitely.\n&gt;\n&gt;\n&gt;&gt; Both of these are done through extensible types and con neg. As you\n&gt;&gt; get more and more servers and clients on different upgrade cycles,\n&gt;&gt; this capability become more important. It&#39;s easy to see how you might\n&gt;&gt; get consumers using services that you, as the provider, particularly\n&gt;&gt; in an &quot;open&quot; enterprise, didn&#39;t even really &quot;know&quot; were being\n&gt;&gt; serviced.\n&gt;&gt;\n&gt;\n&gt; Yes.\n&gt;\n&gt;\n&gt;\n&gt;&gt; In the end, though things like typed rels, and online documentation,\n&gt;&gt; ideally when something goes wrong, payload inspection will direct the\n&gt;&gt; people maintaining the consumers towards what they need to change to\n&gt;&gt; become compliant again and able to use the new service.\n&gt;&gt;\n&gt;\n&gt; Yes.\n&gt;\n&gt; I really only tried to say that the clients an in fact break and that it\n&gt; should be understood where and how the contract is established that causes\n&gt; them to fail. IMHO, current specifications that are not only targeted at\n&gt; pure human driven consumption (e.g. AtomPub or OpenSearch) are not doing a\n&gt; good job in this regard.\n&gt;\n&gt; (OpenSearch, for example, states nowhere that Atom or RSS are the formats a\n&gt; client should be able to handle. Yet, this seems to be some sort of common\n&gt; sense. The OSD FAQ page says something like &quot;OpenSearch is a collection of\n&gt; simple formats for the sharing of search results&quot;[1]. Sure yes, that is all\n&gt; I need to know for build useful stuff. But would you invest a couple of\n&gt; million Dollars into building clients for a service description such as this\n&gt; one? Tomorrow the service could stop sending both, Atom and RSS and just use\n&gt; something new and would not be liable for it in any way.)\n&gt;\n&gt; Jan\n&gt;\n&gt; [1] http://www.opensearch.org/Documentation/Frequently_asked_questions\n&gt;\n&gt;\n&gt;\n&gt;&gt; Regards,\n&gt;&gt;\n&gt;&gt; Will Hartung\n&gt;&gt; (willh@...)\n&gt;&gt;\n&gt;\n&gt; --------------------------------------\n&gt; Jan Algermissen\n&gt;\n&gt; Mail: algermissen@...\n&gt; Blog: http://algermissen.blogspot.com/\n&gt; Home: http://www.jalgermissen.com\n&gt; --------------------------------------\n&gt;\n&gt;\n&gt;\n&gt;\n\r\n--00504502ae470160b6047b6908af\r\nContent-Type: text/html; charset=UTF-8\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nFrom a contract point of view, it would be more complex. =C2=A0&lt;div&gt;&lt;br&gt;&lt;/d=\r\niv&gt;&lt;div&gt;I would argue that a service owner would want the flexibility and l=\r\nanguage a RESTful SLA contract would require because it moves provides forw=\r\nard compatibility with requirements on the client (i.e. they must support a=\r\nll meaningful HTTP responses gracefully...i.e. 201, 301, 307, 401). =C2=A0&lt;=\r\n/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;From a client perspective it becomes more of a ha=\r\nssle because it requires more robust error handling. =C2=A0&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;=\r\ndiv&gt;Stepping back and looking at the sum of both parts, I think this is a g=\r\nood thing and enterprise would want this maturity in between business group=\r\ns. =C2=A0It leads to less cost in terms of maintenance and service interrup=\r\ntion, but this is my speculation. =C2=A0Unfortunately I don&#39;t have a co=\r\nncrete evidence this would be the case.&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;-Noah&lt;br&gt;=\r\n&lt;br&gt;&lt;div class=3D&quot;gmail_quote&quot;&gt;On Tue, Dec 22, 2009 at 10:46 PM, Jan Algerm=\r\nissen &lt;span dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:algermissen1971@...&quot;&gt;alge=\r\nrmissen1971@...&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote class=3D&quot;gmail_quo=\r\nte&quot; style=3D&quot;margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex;=\r\n&quot;&gt;\nWill,&lt;br&gt;\n&lt;br&gt;\nexcellent analysis.&lt;div class=3D&quot;im&quot;&gt;&lt;br&gt;\n&lt;br&gt;\nOn Dec 22,=\r\n 2009, at 9:13 PM, Will Hartung wrote:&lt;br&gt;\n&lt;br&gt;\n&lt;blockquote class=3D&quot;gmail_=\r\nquote&quot; style=3D&quot;margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1=\r\nex&quot;&gt;\nThis thread just exploded and it&#39;s taken until now to catch up.&lt;br=\r\n&gt;\n&lt;br&gt;\nJan, I don&#39;t see any conflict with having a SLA backing up a RES=\r\nT interface.&lt;br&gt;\n&lt;/blockquote&gt;\n&lt;br&gt;&lt;/div&gt;\nMe neither. But it needs to be cl=\r\near what the SLA&#39;ed contract really is. Take the AtomPub example: RFC 5=\r\n023 *is* saying that a GET on a collection will return a feed. Is that norm=\r\native? Or just a hint? If it is just a hint, why is it in the spec at all a=\r\nnd what is the value of it from the client developer&#39;s POV?&lt;br&gt;\n\n&lt;br&gt;\nI=\r\nf you are the service owner, would you put into the SLA a penalty payment o=\r\nf some serious money if your service stops providing an Atom feed for a GET=\r\n to a collection? If not, the whole information is meaningless from a contr=\r\nact POV.&lt;div class=3D&quot;im&quot;&gt;\n&lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;\n&lt;blockquote class=3D&quot;gmail_quote&quot;=\r\n style=3D&quot;margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex&quot;&gt;\n&lt;=\r\nbr&gt;\nI think that you can make a brittle REST architecture that hits all of&lt;=\r\nbr&gt;\nthe REST bullet points, but inevitably fails to evolve properly.&lt;br&gt;\n&lt;b=\r\nr&gt;\nTake for example here, the &quot;apiv2&quot; rel link.&lt;br&gt;\n&lt;br&gt;\nThe fact=\r\n that the service authors CHOSE to add an &quot;apiv2&quot; link. They&lt;br&gt;\n=\r\ndid not HAVE to. They COULD have simply changed the media type, and&lt;br&gt;\n406=\r\n&#39;d the old clients.&lt;br&gt;\n&lt;/blockquote&gt;\n&lt;br&gt;&lt;/div&gt;\nMy issue: In a RESTful=\r\n system, the service authors woule *never* have to make any promise, right?=\r\n&lt;div class=3D&quot;im&quot;&gt;&lt;br&gt;\n&lt;br&gt;\n&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;marg=\r\nin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex&quot;&gt;\n&lt;br&gt;\nObviously,=\r\n &quot;suddenly&quot;, all of the old client fail miserably, and are&lt;br&gt;\ncu=\r\nt off from the service until they upgrade. No backward compatibility&lt;br&gt;\nhe=\r\nre.&lt;br&gt;\n&lt;/blockquote&gt;\n&lt;br&gt;&lt;/div&gt;\nYes, And if that happens, a legal departme=\r\nnt demands a basis for sorting out who violoated which obligation. They hav=\r\ne a hard time accepting to build legal contracts on top of &quot;REST style=\r\n flexibility&quot;.&lt;br&gt;\n&lt;br&gt;\nOTH, as I mentioned before, if the potential f=\r\nailure of the clients would be officially accepted because the occasional S=\r\nLA violation costs less than running a tightly coupled system then it might=\r\n make sense to CxOs.&lt;br&gt;\n\n&lt;br&gt;\nWith this approach, RFC 5023 should normativ=\r\nely state that clients can expect Atom feeds to be returned for GETs on col=\r\nlections and the service owners would just accept that there is a price to =\r\npay should the service return a 406 instead.&lt;div class=3D&quot;im&quot;&gt;\n&lt;br&gt;\n&lt;br&gt;\n&lt;b=\r\nlockquote class=3D&quot;gmail_quote&quot; style=3D&quot;margin:0 0 0 .8ex;border-left:1px =\r\n#ccc solid;padding-left:1ex&quot;&gt;\n&lt;br&gt;\nAs for &quot;evolutionary&quot; software=\r\n, it&#39;s pretty clear that it doesn&#39;t&lt;br&gt;\nevolve. Rather you have bac=\r\nkward compatibility that gives an illusion&lt;br&gt;\nof evolution. The existing c=\r\nlients aren&#39;t changing, the service is&lt;br&gt;\nsimply being friendly by kee=\r\nping them in mind and not locking them&lt;br&gt;\nout.&lt;br&gt;\n&lt;br&gt;\nI don&#39;t see an=\r\ny way that REST differs from SOAP, or any other system&lt;br&gt;\nin this regard. =\r\nAs you&#39;ve observed, compliance and compatibility are&lt;br&gt;\nhard coded in =\r\nto the clients and server. If the protocol changes, the&lt;br&gt;\nclients and ser=\r\nvers need to be changed to remain compatible.&lt;br&gt;\n&lt;/blockquote&gt;\n&lt;br&gt;&lt;/div&gt;\n=\r\nMy point is that REST differs from SOAP because this coupling is not being =\r\nmade explicit. In SOAP it is explicit because there is a WSDL that defines =\r\nan interface that couples tightly. It just known that you cannot remove a m=\r\nethod from an OO-style API without breaking your clients. For REST we usual=\r\nly argue that services can freely evolve without breaking clients. Which is=\r\n wrong.&lt;div class=3D&quot;im&quot;&gt;\n&lt;br&gt;\n&lt;br&gt;\n&lt;blockquote class=3D&quot;gmail_quote&quot; style=\r\n=3D&quot;margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex&quot;&gt;\n&lt;br&gt;\nVe=\r\nrsioning and backward compatibility is the key to a robust, evolving&lt;br&gt;\nin=\r\nfrastructure. I think REST is better for such a system than&lt;br&gt;\nsomething l=\r\nike SOAP simply because I think it is easier for a more&lt;br&gt;\nadvanced client=\r\n to leverage the latest services and APIs, as well as&lt;br&gt;\nfor a server to b=\r\netter maintain compatibility with older clients.&lt;br&gt;\n&lt;/blockquote&gt;\n&lt;br&gt;&lt;/di=\r\nv&gt;\nYes, definitely.&lt;div class=3D&quot;im&quot;&gt;&lt;br&gt;\n&lt;blockquote class=3D&quot;gmail_quote&quot;=\r\n style=3D&quot;margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex&quot;&gt;\n&lt;=\r\nbr&gt;\nBoth of these are done through extensible types and con neg. As you&lt;br&gt;=\r\n\nget more and more servers and clients on different upgrade cycles,&lt;br&gt;\nthi=\r\ns capability become more important. It&#39;s easy to see how you might&lt;br&gt;\n=\r\nget consumers using services that you, as the provider, particularly&lt;br&gt;\nin=\r\n an &quot;open&quot; enterprise, didn&#39;t even really &quot;know&quot; we=\r\nre being&lt;br&gt;\nserviced.&lt;br&gt;\n&lt;/blockquote&gt;\n&lt;br&gt;&lt;/div&gt;\nYes.&lt;div class=3D&quot;im&quot;&gt;&lt;=\r\nbr&gt;\n&lt;br&gt;\n&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;margin:0 0 0 .8ex;borde=\r\nr-left:1px #ccc solid;padding-left:1ex&quot;&gt;\n&lt;br&gt;\nIn the end, though things lik=\r\ne typed rels, and online documentation,&lt;br&gt;\nideally when something goes wro=\r\nng, payload inspection will direct the&lt;br&gt;\npeople maintaining the consumers=\r\n towards what they need to change to&lt;br&gt;\nbecome compliant again and able to=\r\n use the new service.&lt;br&gt;\n&lt;/blockquote&gt;\n&lt;br&gt;&lt;/div&gt;\nYes.&lt;br&gt;\n&lt;br&gt;\nI really o=\r\nnly tried to say that the clients an in fact break and that it should be un=\r\nderstood where and how the contract is established that causes them to fail=\r\n. IMHO, current specifications that are not only targeted at pure human dri=\r\nven consumption (e.g. AtomPub or OpenSearch) are not doing a good job in th=\r\nis regard.&lt;br&gt;\n\n&lt;br&gt;\n(OpenSearch, for example, states nowhere that Atom or =\r\nRSS are the formats a client should be able to handle. Yet, this seems to b=\r\ne some sort of common sense. The OSD FAQ page says something like &quot;Ope=\r\nnSearch is a collection of simple formats for the sharing of search results=\r\n&quot;[1]. Sure yes, that is all I need to know for build useful stuff. But=\r\n would you invest a couple of million Dollars into building clients for a s=\r\nervice description such as this one? Tomorrow the service could stop sendin=\r\ng both, Atom and RSS and just use something new and would not be liable for=\r\n it in any way.)&lt;br&gt;\n\n&lt;br&gt;\nJan&lt;br&gt;\n&lt;br&gt;\n[1] &lt;a href=3D&quot;http://www.opensearc=\r\nh.org/Documentation/Frequently_asked_questions&quot; target=3D&quot;_blank&quot;&gt;http://ww=\r\nw.opensearch.org/Documentation/Frequently_asked_questions&lt;/a&gt;&lt;div class=3D&quot;=\r\nim&quot;&gt;&lt;br&gt;\n&lt;br&gt;\n&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;margin:0 0 0 .8ex;=\r\nborder-left:1px #ccc solid;padding-left:1ex&quot;&gt;\n&lt;br&gt;\nRegards,&lt;br&gt;\n&lt;br&gt;\nWill H=\r\nartung&lt;br&gt;\n(&lt;a href=3D&quot;mailto:willh@...&quot; target=3D&quot;_blank&quot;&gt;willh@=\r\nmirthcorp.com&lt;/a&gt;)&lt;br&gt;\n&lt;/blockquote&gt;\n&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;div class=\r\n=3D&quot;h5&quot;&gt;\n--------------------------------------&lt;br&gt;\nJan Algermissen&lt;br&gt;\n&lt;br=\r\n&gt;\nMail: &lt;a href=3D&quot;mailto:algermissen@...&quot; target=3D&quot;_blank&quot;&gt;algermisse=\r\nn@...&lt;/a&gt;&lt;br&gt;\nBlog: &lt;a href=3D&quot;http://algermissen.blogspot.com/&quot; target=\r\n=3D&quot;_blank&quot;&gt;http://algermissen.blogspot.com/&lt;/a&gt;&lt;br&gt;\nHome: &lt;a href=3D&quot;http:=\r\n//www.jalgermissen.com&quot; target=3D&quot;_blank&quot;&gt;http://www.jalgermissen.com&lt;/a&gt;&lt;b=\r\nr&gt;\n--------------------------------------&lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;\n&lt;/div&gt;&lt;/div&gt;&lt;/=\r\nblockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;\n\r\n--00504502ae470160b6047b6908af--\r\n\n"}}
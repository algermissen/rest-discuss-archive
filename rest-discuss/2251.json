{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":69125415,"authorName":"Mathews, Walden","from":"&quot;Mathews, Walden&quot; &lt;waldenm@...&gt;","profile":"waldenmathews","replyTo":"SENDER","senderId":"iaQY_Bq894HlK4UAIdN22HazBRHTnjduNgRcfneHvHUSECjk9KJ2Ee4LVjXuA7IaoWoQqaYzNXkUDuZaK9Co_G8O1zrZ0g2Pffg","spamInfo":{"isSpam":false,"reason":"0"},"subject":"RE: HTTP and safety","postDate":"1030481199","msgId":2251,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDEzNzNENjM0MkZBMUQ0MTE5QTUxMDBFMDI5NDM3RjY0MDE1NUY4Q0JAY2xpZmZvcmQuZGV2by5pbHguY29tPg=="},"prevInTopic":2249,"nextInTopic":2252,"prevInTime":2250,"nextInTime":2252,"topicId":2205,"numMessagesInTopic":64,"msgSnippet":"... As I see it, there are two problems with these arguments, and both stem from their generality, and would be cleared up by a real life story, if anyone can","rawEmail":"Return-Path: &lt;waldenm@...&gt;\r\nX-Sender: waldenm@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_1_0_1); 27 Aug 2002 20:46:42 -0000\r\nReceived: (qmail 44023 invoked from network); 27 Aug 2002 20:46:42 -0000\r\nReceived: from unknown (66.218.66.218)\n  by m4.grp.scd.yahoo.com with QMQP; 27 Aug 2002 20:46:42 -0000\r\nReceived: from unknown (HELO mail.ilx.com) (199.119.33.174)\n  by mta3.grp.scd.yahoo.com with SMTP; 27 Aug 2002 20:46:42 -0000\r\nReceived: from clifford.devo.ilx.com (clifford.devo.ilx.com [172.27.56.72])\n\tby mail.ilx.com (8.9.3/8.9.3) with ESMTP id QAA57525;\n\tTue, 27 Aug 2002 16:46:40 -0400 (EDT)\n\t(envelope-from waldenm@...)\r\nReceived: by clifford.devo.ilx.com with Internet Mail Service (5.5.2653.19)\n\tid &lt;RV8ZD9S6&gt;; Tue, 27 Aug 2002 16:46:40 -0400\r\nMessage-ID: &lt;1373D6342FA1D4119A5100E029437F640155F8CB@...&gt;\r\nTo: &quot;&#39;Mark Baker&#39;&quot; &lt;distobj@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nSubject: RE: HTTP and safety\r\nDate: Tue, 27 Aug 2002 16:46:39 -0400\r\nMIME-Version: 1.0\r\nX-Mailer: Internet Mail Service (5.5.2653.19)\r\nContent-Type: text/plain\r\nFrom: &quot;Mathews, Walden&quot; &lt;waldenm@...&gt;\r\nX-Yahoo-Group-Post: member; u=69125415\r\nX-Yahoo-Profile: waldenmathews\r\n\r\n&gt; &gt; Above I&#39;ve described what I understand to be RESTful use of\n&gt; &gt; the POST method.  Please tell me how that differs in the security\n&gt; &gt; dimension from the dreaded &#39;tunneled RPC&#39;.\n&gt; \n&gt; The key is to focus on the wire.  Think about telnetting to port 80.\n&gt; At that very instant, a contract is in effect, and that contract and\n&gt; any messages conforming to it are visibile to all participants; you,\n&gt; any firewall you might be going through, the server, and any \n&gt; surrogates\n&gt; it might be using.\n&gt; \n&gt; If, using that contract, you could trick the system into providing\n&gt; you a richer contract, i.e. guaranteeing you things that were not\n&gt; guaranteed at time 0, and do this in a way that is not visible to\n&gt; intermediaries (i.e. not using HTTP&#39;s extension features), then that\n&gt; is a security problem (as well as a problem to other aspects of the\n&gt; system that require visibility, e.g. caching).  Designing interfaces\n&gt; that cannot break themselves is *hard*.  You&#39;re working against\n&gt; entropy.\n&gt; \n&gt; &quot;Tunneled RPC&quot;&#39;s raison d&#39;etre is to build arbitrary contracts over\n&gt; existing ones.  So in addition to nullifying any safety in the\n&gt; existing contract, cheap method-creation is an easy way to guarantee\n&gt; that most contracts created with it will in turn be unsafe.\n\nAs I see it, there are two problems with these arguments, and both\nstem from their generality, and would be cleared up by a real life\nstory, if anyone can contribute one.\n\nThe first problem is distinguishing this breakdown in &quot;safety&quot; from\nthe common business case in which a sales pitch lures you into making\na bad purchase.  On whom does the responsibility for avoiding that\nlie?\n\nThe second problem is distinguishing this breakdown in &quot;safety&quot; from\nthe case in which you use HTTP POST to send an arbitrary &quot;block of data ...\nto a handling process&quot;.  Or should we say a &quot;block of arguments to a\nremote handling procedure&quot;?\n\n[example elided for brevity]\n\n&gt; &gt; This example achieves the squaring of 2 in a way that is quite\n&gt; &gt; different from the more obvious interpretations of &quot;state\n&gt; &gt; transfer&quot;.  Can we please discuss whether the above is &quot;RESTful&quot;\n&gt; &gt; and if not, what would it take to make it so?\n&gt; \n&gt; It&#39;s not RESTful, because &#39;square&#39; is an instruction to be \n&gt; followed, not\n&gt; data to be submitted.  In addition, this is a poor example because the\n&gt; client *expects* that squaring is done, which kind of begs \n&gt; the question\n&gt; as to why it can&#39;t do it itself and then PUT the result ... 8-O\n\nI&#39;m glad to hear it&#39;s not RESTful.  That&#39;s a start.  (The reason\nthe client doesn&#39;t square is because it doesn&#39;t know how to, kind of\nlike why you don&#39;t do your own dental work, assuming you don&#39;t, but\nnone of that is relevant now.)\n\nOkay, can you make it restful by changing the way you think about\nit?  For instance, can we call it a *record* of an action, or perhaps\na short &#39;action document&#39;, or a &#39;delta representation&#39; of future\nresource state, or any other &#39;trick&#39; that gets us beyond this\nhitch?  What if we argue that it came straight from an HTTP form\nsubmission?\n\nPlease anticipate where I&#39;m going with the above and help me find\nthe boundary.\n\n&gt; I think that &quot;Part-&gt;Composite&quot; is a tad more specific than HTTP\n&gt; suggests, but I might be picking nits.  It would seem to exclude the\n&gt; posting of data to a form processor, for example, since the\n&gt; composite relationship only exists for the duration of the processing.\n&gt; It doesn&#39;t persist like a StatePreservingContainer.  Pretty close\n&gt; though, but I prefer &quot;accept as a subordinate&quot; for describing the most\n&gt; generic form of containment as present in my RestRDF &quot;Container&quot;.\n\nWell, I went back and read that section yet again (whew!), and while it\ndoes list as a goal the processing of form data, all the examples offered\nto clarify &#39;subordinate&#39; are clearly container (part/assembly) examples.\nI&#39;d say it looks inconsistent, with the &#39;forms&#39; stuff the odd-man-out.\n\n&gt; No, that&#39;s a really good way of explaining the tension, but HTTP/REST\n&gt; *is* already a fixed thing (at least at any given point in \n&gt; time).  It&#39;s\n&gt; only our view of it that we&#39;re adjusting by talking about it.\n\nI think views can only adjust so far.  To me, POST is broken like\na too-small pelvis trying to give birth to a cranial giant.  (Ouch. \nI&#39;ve got to stop ending these messages so vividly.)\n\nIn gratitude,\nWalden\n\n\n"}}
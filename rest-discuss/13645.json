{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":279478415,"authorName":"Ant√≥nio Mota","from":"=?ISO-8859-1?Q?Ant=F3nio_Mota?= &lt;amsmota@...&gt;","profile":"amsmota","replyTo":"SENDER","senderId":"L_8QmT0rRX1zXF-XAqa_zbBn8vq70YJLIbp32tC2ZojpoZEkCaaSaHxMcFMHA_8bfBHTbHUXDiK5BM4sCMoHaraLJN_OICNtgEDW00iCz3tkVJzTEE6QeV2o","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Re: Application state","postDate":"1254598041","msgId":13645,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDJmYTU1NDQ3MDkxMDAzMTIyN3Q1MjRkOTI0czUyZDJhYTM4Mzk4MGY4OGZAbWFpbC5nbWFpbC5jb20+","inReplyToHeader":"PGhhN3RkOCszMW1qQGVHcm91cHMuY29tPg==","referencesHeader":"PDY1REJBMzNELTUyOEEtNDBFQS1CNkM5LTg2N0U0NTg5NkZFMEBnbWFpbC5jb20+IAk8aGE3dGQ4KzMxbWpAZUdyb3Vwcy5jb20+"},"prevInTopic":13644,"nextInTopic":13646,"prevInTime":13644,"nextInTime":13646,"topicId":13627,"numMessagesInTopic":37,"msgSnippet":"Thanks for your apologize :) but I m really more confused. What you say, basically, is that from a operational point of view, a application state does not","rawEmail":"Return-Path: &lt;amsmota@...&gt;\r\nX-Sender: amsmota@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 43899 invoked from network); 3 Oct 2009 19:27:42 -0000\r\nX-Received: from unknown (98.137.34.44)\n  by m2.grp.sp2.yahoo.com with QMQP; 3 Oct 2009 19:27:42 -0000\r\nX-Received: from unknown (HELO mail-bw0-f218.google.com) (209.85.218.218)\n  by mta1.grp.sp2.yahoo.com with SMTP; 3 Oct 2009 19:27:41 -0000\r\nX-Received: by mail-bw0-f218.google.com with SMTP id 18so1867198bwz.7\n        for &lt;rest-discuss@yahoogroups.com&gt;; Sat, 03 Oct 2009 12:27:41 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.223.82.15 with SMTP id z15mr925101fak.107.1254598061204; Sat, \n\t03 Oct 2009 12:27:41 -0700 (PDT)\r\nIn-Reply-To: &lt;ha7td8+31mj@...&gt;\r\nReferences: &lt;65DBA33D-528A-40EA-B6C9-867E45896FE0@...&gt; \n\t&lt;ha7td8+31mj@...&gt;\r\nDate: Sat, 3 Oct 2009 20:27:21 +0100\r\nMessage-ID: &lt;2fa554470910031227t524d924s52d2aa383980f88f@...&gt;\r\nTo: Ian &lt;iansrobinson@...&gt;, rest-discuss@yahoogroups.com\r\nContent-Type: multipart/alternative; boundary=001517447b18c627ad04750cdf82\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: =?ISO-8859-1?Q?Ant=F3nio_Mota?= &lt;amsmota@...&gt;\r\nSubject: Re: [rest-discuss] Re: Application state\r\nX-Yahoo-Group-Post: member; u=279478415; y=D3Qhb76-9tyj3OBhHujs2vils9NQiLC3peFjlvDAmUqgpQ\r\nX-Yahoo-Profile: amsmota\r\n\r\n\r\n--001517447b18c627ad04750cdf82\r\nContent-Type: text/plain; charset=ISO-8859-1\r\n\r\nThanks for your apologize :) but I&#39;m really more confused. What you say,\nbasically, is that from a operational point of view, a &quot;application state&quot;\ndoes not exist, or existing can not be known by us, mere mortals...\n\nI think REST lacks lot&#39;s of *formal* definitions and one of those is the\nformal definition of &quot;application&quot;. Things like &quot;the game being played out\nbetween the client and the server&quot;, &quot;computer behavior that achieves a\nparticular goal&quot; or &quot;everything you can do with a computer&quot; are everything\nbut &quot;formal&quot; (in the sense that should be described without ambiguities,\nlike RFC-2119 for example). And without those &quot;formal&quot; definitions is very\ndifficult if not impossible to expand on those concepts because there is no\nauthoritative resource where we can have a common ground of discussion.\n\nSo basically if we don&#39;t have a formal definition of &quot;application&quot; it&#39;s even\nharder to have one of &quot;application state&quot; that is easilly grasped and\nexplained. I really think it will be very usefull to have a place, like a\nwiki or something, where the community will start to do such a work, along\nwith &quot;best-practices&quot;, &quot;rules-of-thumb&quot; and practical things like that, like\nwe started to discuss some posts ago in the thread body@rest that seems to\nhave died under the weigth of the rest-* discussion.\n\nNow, re &quot;application state&quot;, I&#39;m satisfied by simply think of it as the\n&quot;state that the resource just sent back to me, the client&quot;, wich implies\nthat &quot;resource state&quot; is the efemerous state of a resource just before being\nsent to the client, that can be anything after that, wich is OK because the\nonly resource state that interest me is the one that will be tranfered to\nme, the client, in response to my request.\n\nNow it&#39;s my time to apologize, not for being confusing but probably because\nI&#39;m over-simplifying and/or just plain wrong.\n\n_______________________________________________\n\n\n2009/10/3 Ian &lt;iansrobinson@...&gt;\n\n&gt;\n&gt;\n&gt; Hi Christian\n&gt;\n&gt; The state of an order - whether it has zero line items, or five, is\n&gt; resource state, not application state. The state of the order as held in the\n&gt; http session in your example is resource state, not application state.\n&gt;\n&gt; A simple - perhaps overly simple - ordering protocol might be something\n&gt; like: new order created -&gt; adding line items -&gt; order completed -&gt; payment\n&gt; received -&gt; order dispatched.\n&gt;\n&gt; In the observable interactions between client and server, this protocol is\n&gt; never visible &quot;as such&quot;: it can only be viewed through the lens of resource\n&gt; state.\n&gt;\n&gt; Over the course of a series of interactions, the &quot;application&quot; (the game\n&gt; being played out between the client and the server) will be in one or other\n&gt; of these states - as viewed from a &quot;God&#39;s eye&quot; point of view. Once the\n&gt; application state has progressed to &quot;order completed&quot;, for example, it&#39;s no\n&gt; longer possible to add manipulate resources so as to add new line items; it\n&gt; is, however, possible to manipulate resources such that the application\n&gt; state transitions to &quot;payment received&quot; (the client would do this by\n&gt; submitting a representation of a payment, perhaps).\n&gt;\n&gt; The client and the server cooperate to execute this protocol, but they do\n&gt; so by transferring representations of resource state, not representations of\n&gt; application state. Application state is never represented &quot;as such&quot;; rather,\n&gt; it&#39;s inferred by the client based on on current representations of resource\n&gt; state. If the application is in the &quot;order completed&quot; state, the\n&gt; representation of the order received by the client may very well include a\n&gt; link that has been annotated with the link relation value &quot;payment&quot;. This\n&gt; isn&#39;t a straightforward representation of application state, however: it&#39;s\n&gt; an &quot;invitation&quot; to the client to transfer a representation of a payment to\n&gt; this linked resource. As a side-effect of transferring this representation,\n&gt; the &quot;application&quot; may transition to &quot;payment received&quot;.\n&gt;\n&gt; What&#39;s important here is that the server is really only interested in\n&gt; maintaining resource state, which includes maintaining the integrity of the\n&gt; lifecycles of the resources under its control, and the invariants that hold\n&gt; between resources (if any). The server can&#39;t be sure the client will ever\n&gt; take that step of submitting a payment, so why bother holding onto\n&gt; application state? Application state is something that can be reconstructed\n&gt; &quot;after the fact&quot;, by a client, or omniscient observer, based on the\n&gt; disposition of the current set of resource representations.\n&gt;\n&gt; So the order representation is always a representation of resource state.\n&gt; Application state, that &quot;snapshot of the instance of execution of a\n&gt; protocol&quot;, can only be inferred or reconstructed from resource state.\n&gt;\n&gt; Hope this is of some help. Apologies if I&#39;ve confused more than clarified;\n&gt; double apologies if I&#39;m just talking plain nonsense.\n&gt;\n&gt; ian\n&gt;\n&gt;\n&gt; --- In rest-discuss@yahoogroups.com &lt;rest-discuss%40yahoogroups.com&gt;,\n&gt; Kristian Nordal &lt;kristian.nordal@...&gt; wrote:\n&gt; &gt;\n&gt; &gt;\n&gt; &gt; On Oct 2, 2009, at 10:55 PM, Ian wrote:\n&gt; &gt;\n&gt; &gt; &gt;\n&gt; &gt; &gt;\n&gt; &gt; &gt; --- In rest-discuss@yahoogroups.com &lt;rest-discuss%40yahoogroups.com&gt;,\n&gt; Mark Baker &lt;distobj@&gt; wrote:\n&gt; &gt; &gt;&gt;\n&gt; &gt; &gt;&gt; On Fri, Oct 2, 2009 at 4:56 AM, Kristian Nordal\n&gt; &gt; &gt;&gt; &lt;kristian.nordal@&gt; wrote:\n&gt; &gt; &gt;&gt;&gt; I&#39;m also struggling with the difference between application state\n&gt; &gt; &gt;&gt;&gt; and\n&gt; &gt; &gt;&gt;&gt; server state (which I assume is the same as &quot;resource state&quot;). Can\n&gt; &gt; &gt;&gt;&gt; someone point me to a good definition of &quot;application state&quot;?\n&gt; &gt; &gt;&gt;\n&gt; &gt; &gt;&gt; It&#39;s literally the *state* of the *application*. If you&#39;re looking\n&gt; &gt; &gt;&gt; at\n&gt; &gt; &gt;&gt; your bank balance, that&#39;s a different state than if you were\n&gt; &gt; &gt;&gt; preparing\n&gt; &gt; &gt;&gt; to submit a bill payment, and once you&#39;ve submitted the payment,\n&gt; &gt; &gt;&gt; you&#39;re in yet another state in the application state machine.\n&gt; &gt; &gt;&gt;\n&gt; &gt; &gt;&gt; Mark.\n&gt; &gt; &gt;&gt;\n&gt; &gt; &gt;\n&gt; &gt; &gt; Just to add to Mark&#39;s definition, and put it in the context of\n&gt; &gt; &gt; &quot;application&quot; and &quot;application protocol&quot;: if we think of an\n&gt; &gt; &gt; application as being computer behavior that achieves a particular\n&gt; &gt; &gt; goal, we can describe an application protocol as the specification\n&gt; &gt; &gt; of the legitimate interactions necessary to realize that behavior,\n&gt; &gt; &gt; and application state as a snapshot of the instance of execution of\n&gt; &gt; &gt; an application protocol.\n&gt; &gt;\n&gt; &gt; Thanks for the definitions. I&#39;m still a bit confused though, so I&#39;m\n&gt; &gt; going to try to use an example:\n&gt; &gt;\n&gt; &gt; Let&#39;s say we have an client/ua that is filling out an order (order +\n&gt; &gt; line items). In a traditional web application, the order would be in\n&gt; &gt; the http session, and we would add/remove line items to that order,\n&gt; &gt; and finally place the order. In that case I clearly see that we are\n&gt; &gt; talking about application state that is placed on the server. The\n&gt; &gt; server keeps track of it, and it&#39;s literally the state of the client/\n&gt; &gt; application.\n&gt; &gt;\n&gt; &gt; But if we were to store and address the order like any other resource,\n&gt; &gt; would that change the nature of the state? It would simply be another\n&gt; &gt; way of storing the same state, but nevertheless it would be\n&gt; &gt; &quot;resources&quot; with the same properties induced by the stateless\n&gt; &gt; constraint (visibility, reliability, and salability) - given that they\n&gt; &gt; were stored in the a way that make that possible. To me, this looks\n&gt; &gt; like exactly the same kind of state (application state), simply stored/\n&gt; &gt; modeled differently. But in that case I don&#39;t see how or if it\n&gt; &gt; violates the stateless constraint.\n&gt; &gt;\n&gt; &gt; Would you say that the order in this example is always a &quot;snapshot of\n&gt; &gt; the instance execution of an application protocol&quot;, and that it will\n&gt; &gt; always be application state - no matter how it&#39;s modeled? And by\n&gt; &gt; placing it on the server it would be in violation of the REST\n&gt; &gt; principles, even though the stateless constraint is dealt with?\n&gt; &gt;\n&gt; &gt; --\n&gt; &gt; Thanks,\n&gt; &gt; Kristian\n&gt; &gt;\n&gt;\n&gt;  \n&gt;\n\r\n--001517447b18c627ad04750cdf82\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nThanks for your apologize :) but I&#39;m really more confused. What you say=\r\n, basically, is that from a operational point of view, a &quot;application =\r\nstate&quot; does not exist, or existing can not be known by us, mere mortal=\r\ns...&lt;br&gt;\n\n&lt;br&gt;I think REST lacks lot&#39;s of *formal* definitions and one =\r\nof those is the formal definition of &quot;application&quot;. Things like &=\r\nquot;the game being played out between the client and the server&quot;, &qu=\r\not;computer behavior that achieves a particular goal&quot; or &quot;everyth=\r\ning you can do with a computer&quot; are everything but &quot;formal&quot; =\r\n(in the sense that should be described without ambiguities, like RFC-2119 f=\r\nor example). And without those &quot;formal&quot; definitions is very diffi=\r\ncult if not impossible to expand on those concepts because there is no auth=\r\noritative resource where we can have a common ground of discussion.&lt;br&gt;\n\n&lt;b=\r\nr&gt;So basically if we don&#39;t have a formal definition of &quot;applicatio=\r\nn&quot; it&#39;s even harder to have one of &quot;application state&quot; t=\r\nhat is easilly grasped and explained. I really think it will be very useful=\r\nl to have a place, like a wiki or something, where the community will start=\r\n to do such a work, along with &quot;best-practices&quot;, &quot;rules-of-t=\r\nhumb&quot; and practical things like that, like we started to discuss some =\r\nposts ago in the thread body@rest that seems to have died under the weigth =\r\nof the rest-* discussion.&lt;br&gt;\n\n&lt;br&gt;Now, re &quot;application state&quot;, I=\r\n&#39;m satisfied by simply think of it as the &quot;state that the resource=\r\n just sent back to me, the client&quot;, wich implies that &quot;resource s=\r\ntate&quot; is the efemerous state of a resource just before being sent to t=\r\nhe client, that can be anything after that, wich is OK because the only res=\r\nource state that interest me is the one that will be tranfered to me, the c=\r\nlient, in response to my request.&lt;br&gt;\n\n&lt;br&gt;Now it&#39;s my time to apologiz=\r\ne, not for being confusing but probably because I&#39;m over-simplifying an=\r\nd/or just plain wrong.&lt;br&gt;&lt;br&gt;_____________________________________________=\r\n__&lt;br&gt;\n&lt;br&gt;&lt;br&gt;&lt;div class=3D&quot;gmail_quote&quot;&gt;2009/10/3 Ian &lt;span dir=3D&quot;ltr&quot;&gt;&=\r\nlt;&lt;a href=3D&quot;mailto:iansrobinson@...&quot;&gt;iansrobinson@...&lt;/a&gt;&gt;=\r\n&lt;/span&gt;&lt;br&gt;&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;border-left: 1px soli=\r\nd rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;&quot;&gt;\n\n\n\n\n\n=\r\n\n\n\n\n\n\n\n&lt;div style=3D&quot;background-color: rgb(255, 255, 255);&quot;&gt;\n&lt;span&gt;=A0&lt;/spa=\r\nn&gt;\n\n&lt;div style=3D&quot;width: 655px;&quot;&gt;\n&lt;div style=3D&quot;margin: 0pt; padding: 0pt 2=\r\n5px 0pt 0pt; width: 470px; float: left;&quot;&gt;\n\n    &lt;div&gt;\n                  &lt;p&gt;H=\r\ni Christian&lt;br&gt;\n&lt;br&gt;\nThe state of an order - whether it has zero line items=\r\n, or five, is resource state, not application state. The state of the order=\r\n as held in the http session in your example is resource state, not applica=\r\ntion state.&lt;br&gt;\n&lt;br&gt;\nA simple - perhaps overly simple - ordering protocol m=\r\night be something like: new order created -&gt; adding line items -&gt; ord=\r\ner completed -&gt; payment received -&gt; order dispatched. &lt;br&gt;\n&lt;br&gt;\nIn th=\r\ne observable interactions between client and server, this protocol is never=\r\n visible &quot;as such&quot;: it can only be viewed through the lens of res=\r\nource state.&lt;br&gt;\n&lt;br&gt;\nOver the course of a series of interactions, the &quo=\r\nt;application&quot; (the game being played out between the client and the s=\r\nerver) will be in one or other of these states - as viewed from a &quot;God=\r\n&#39;s eye&quot; point of view. Once the application state has progressed t=\r\no &quot;order completed&quot;, for example, it&#39;s no longer possible to =\r\nadd manipulate resources so as to add new line items; it is, however, possi=\r\nble to manipulate resources such that the application state transitions to =\r\n&quot;payment received&quot; (the client would do this by submitting a repr=\r\nesentation of a payment, perhaps). &lt;br&gt;\n\n\n&lt;br&gt;\nThe client and the server co=\r\noperate to execute this protocol, but they do so by transferring representa=\r\ntions of resource state, not representations of application state. Applicat=\r\nion state is never represented &quot;as such&quot;; rather, it&#39;s inferr=\r\ned by the client based on on current representations of resource state. If =\r\nthe application is in the &quot;order completed&quot; state, the representa=\r\ntion of the order received by the client may very well include a link that =\r\nhas been annotated with the link relation value &quot;payment&quot;. This i=\r\nsn&#39;t a straightforward representation of application state, however: it=\r\n&#39;s an &quot;invitation&quot; to the client to transfer a representation=\r\n of a payment to this linked resource. As a side-effect of transferring thi=\r\ns representation, the &quot;application&quot; may transition to &quot;payme=\r\nnt received&quot;.&lt;br&gt;\n\n\n&lt;br&gt;\nWhat&#39;s important here is that the server =\r\nis really only interested in maintaining resource state, which includes mai=\r\nntaining the integrity of the lifecycles of the resources under its control=\r\n, and the invariants that hold between resources (if any). The server can&#=\r\n39;t be sure the client will ever take that step of submitting a payment, s=\r\no why bother holding onto application state? Application state is something=\r\n that can be reconstructed &quot;after the fact&quot;, by a client, or omni=\r\nscient observer, based on the disposition of the current set of resource re=\r\npresentations.&lt;br&gt;\n\n\n&lt;br&gt;\nSo the order representation is always a represent=\r\nation of resource state. Application state, that &quot;snapshot of the inst=\r\nance of execution of a protocol&quot;, can only be inferred or reconstructe=\r\nd from resource state.&lt;br&gt;\n\n\n&lt;br&gt;\nHope this is of some help. Apologies if I=\r\n&#39;ve confused more than clarified; double apologies if I&#39;m just talk=\r\ning plain nonsense.&lt;br&gt;\n&lt;br&gt;\nian&lt;/p&gt;&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;div class=3D&quot;h5&quot;&gt;&lt;br&gt;\n=\r\n&lt;br&gt;\n--- In &lt;a href=3D&quot;mailto:rest-discuss%40yahoogroups.com&quot; target=3D&quot;_bl=\r\nank&quot;&gt;rest-discuss@yahoogroups.com&lt;/a&gt;, Kristian Nordal &lt;kristian.nordal@=\r\n...&gt; wrote:&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; &lt;br&gt;\n&gt; On Oct 2, 2009, at 10:55 PM, Ian=\r\n wrote:&lt;br&gt;\n&gt; &lt;br&gt;\n&gt; &gt;&lt;br&gt;\n&gt; &gt;&lt;br&gt;\n&gt; &gt; --- In &lt;a href=\r\n=3D&quot;mailto:rest-discuss%40yahoogroups.com&quot; target=3D&quot;_blank&quot;&gt;rest-discuss@y=\r\nahoogroups.com&lt;/a&gt;, Mark Baker &lt;distobj@&gt; wrote:&lt;br&gt;\n&gt; &gt;&gt;&lt;br=\r\n&gt;\n&gt; &gt;&gt; On Fri, Oct 2, 2009 at 4:56 AM, Kristian Nordal&lt;br&gt;\n&gt; &g=\r\nt;&gt; &lt;kristian.nordal@&gt; wrote:&lt;br&gt;\n&gt; &gt;&gt;&gt; I&#39;m also s=\r\ntruggling with the difference between application state  &lt;br&gt;\n&gt; &gt;&gt;=\r\n&gt; and&lt;br&gt;\n&gt; &gt;&gt;&gt; server state (which I assume is the same as =\r\n&quot;resource state&quot;). Can&lt;br&gt;\n&gt; &gt;&gt;&gt; someone point me to =\r\na good definition of &quot;application state&quot;?&lt;br&gt;\n&gt; &gt;&gt;&lt;br&gt;\n&=\r\ngt; &gt;&gt; It&#39;s literally the *state* of the *application*.  If you&#=\r\n39;re looking  &lt;br&gt;\n&gt; &gt;&gt; at&lt;br&gt;\n&gt; &gt;&gt; your bank balance, t=\r\nhat&#39;s a different state than if you were  &lt;br&gt;\n&gt; &gt;&gt; preparing&lt;=\r\nbr&gt;\n&gt; &gt;&gt; to submit a bill payment, and once you&#39;ve submitted t=\r\nhe payment,&lt;br&gt;\n&gt; &gt;&gt; you&#39;re in yet another state in the applic=\r\nation state machine.&lt;br&gt;\n&gt; &gt;&gt;&lt;br&gt;\n&gt; &gt;&gt; Mark.&lt;br&gt;\n&gt; &gt=\r\n;&gt;&lt;br&gt;\n&gt; &gt;&lt;br&gt;\n&gt; &gt; Just to add to Mark&#39;s definition, and=\r\n put it in the context of  &lt;br&gt;\n&gt; &gt; &quot;application&quot; and &quot=\r\n;application protocol&quot;: if we think of an  &lt;br&gt;\n&gt; &gt; application =\r\nas being computer behavior that achieves a particular  &lt;br&gt;\n&gt; &gt; goal,=\r\n we can describe an application protocol as the specification  &lt;br&gt;\n&gt; &g=\r\nt; of the legitimate interactions necessary to realize that behavior,  &lt;br&gt;=\r\n\n&gt; &gt; and application state as a snapshot of the instance of execution=\r\n of  &lt;br&gt;\n&gt; &gt; an application protocol.&lt;br&gt;\n&gt; &lt;br&gt;\n&gt; Thanks for =\r\nthe definitions. I&#39;m still a bit confused though, so I&#39;m  &lt;br&gt;\n&gt;=\r\n going to try to use an example:&lt;br&gt;\n&gt; &lt;br&gt;\n&gt; Let&#39;s say we have a=\r\nn client/ua that is filling out an order (order +  &lt;br&gt;\n&gt; line items). I=\r\nn a traditional web application, the order would be in  &lt;br&gt;\n&gt; the http =\r\nsession, and we would add/remove line items to that order,  &lt;br&gt;\n&gt; and f=\r\ninally place the order. In that case I clearly see that we are  &lt;br&gt;\n&gt; t=\r\nalking about application state that is placed on the server. The  &lt;br&gt;\n&gt;=\r\n server keeps track of it, and it&#39;s literally the state of the client/ =\r\n&lt;br&gt;\n&gt; application.&lt;br&gt;\n&gt; &lt;br&gt;\n&gt; But if we were to store and addre=\r\nss the order like any other resource,  &lt;br&gt;\n&gt; would that change the natu=\r\nre of the state? It would simply be another  &lt;br&gt;\n&gt; way of storing the s=\r\name state, but nevertheless it would be  &lt;br&gt;\n&gt; &quot;resources&quot; wi=\r\nth the same properties induced by the stateless  &lt;br&gt;\n&gt; constraint (visi=\r\nbility, reliability, and salability) - given that they  &lt;br&gt;\n&gt; were stor=\r\ned in the a way that make that possible. To me, this looks  &lt;br&gt;\n&gt; like =\r\nexactly the same kind of state (application state), simply stored/ &lt;br&gt;\n&gt=\r\n; modeled differently. But in that case I don&#39;t see how or if it  &lt;br&gt;\n=\r\n&gt; violates the stateless constraint.&lt;br&gt;\n&gt; &lt;br&gt;\n&gt; Would you say th=\r\nat the order in this example is always a &quot;snapshot of  &lt;br&gt;\n&gt; the i=\r\nnstance execution of an application protocol&quot;, and that it will  &lt;br&gt;\n=\r\n&gt; always be application state - no matter how it&#39;s modeled? And by  =\r\n&lt;br&gt;\n&gt; placing it on the server it would be in violation of the REST  &lt;b=\r\nr&gt;\n&gt; principles, even though the stateless constraint is dealt with?&lt;br&gt;=\r\n\n&gt; &lt;br&gt;\n&gt; --&lt;br&gt;\n&gt; Thanks,&lt;br&gt;\n&gt; Kristian&lt;br&gt;\n&gt;&lt;br&gt;\n&lt;br&gt;\n&lt;/d=\r\niv&gt;&lt;/div&gt;\n \n\n    &lt;/div&gt;  \n\n    \n    &lt;div width=3D&quot;1&quot; style=3D&quot;color: white;=\r\n clear: both;&quot;&gt;&lt;/div&gt;\n\t\n\t&lt;/div&gt;\n\t\n\t\n\n\n\t\n\n\n\t\n\t\n\t\n\t\n\t\n\n&lt;/blockquote&gt;&lt;/div&gt;&lt;br=\r\n&gt;\n\r\n--001517447b18c627ad04750cdf82--\r\n\n"}}
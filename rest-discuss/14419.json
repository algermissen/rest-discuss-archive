{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"niuRkUo-zmq9vEWVl7Kg5mVvZwp0BNIxRq51zZ-EWcbNJe1s0Ei9GcIKVkmhRCXWnb0rmwJ00jxI7IbzPvB-tOqx7vPaXrXEuh5dpqZBEg","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] REST isn&#39;t hard to learn, it&#39;s just taught wrong.","postDate":"1261734525","msgId":14419,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMDkxMjI1MDI0ODQ1LmM5MWNmZjBlLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","inReplyToHeader":"PDIwMDkxMjI1MDA1MDUzLjNjOTk5ZDdlLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","referencesHeader":"PDIwMDkxMjIwMjEyNjMzLjcxNWNhOTQyLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPDg3aXFjMHp6aWcud2wlYmVyZW5kQHBvYm94LmNvbT4JPDIwMDkxMjIwMjI0NjEyLmI4MzVmNTAyLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPDIwMDkxMjIwMjI1OTQwLjc1MzdlOTMxLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPDIwMDkxMjIxMDAzNjA1LjdjZDkwNzBiLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPDIwMDkxMjIxMTcwNzM1LjZiMzkxOWNlLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPEJBNjU3OEYxLTQ3NzgtNDY0Ri1BRUM2LTlDQTYzQzRGMEJCRkBzdWJidS5vcmc+CTwzRkU5ODRGMi1GNThELTRGMkYtODhFNy1GRkJBMzFFMUI5RTJAaW5ub3EuY29tPgk8MjAwOTEyMjIxNDIyMzcuNDEwMDQyMDQuZXJpY0BiaXNvbnN5c3RlbXMubmV0Pgk8MzdBQzczMTUtMTlGRC00RjVELUFGREItNzMxMTE3RjhBQkM5QGlubm9xLmNvbT4JPDIwMDkxMjIzMTU1NTI5LmY4OWUzYjhkLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPDM1NTFFOTlBLTNERjgtNEMzQy04NDgwLTlBNkY3NDIzOUIxQUBpbm5vcS5jb20+CTwyMDA5MTIyMzIwMTMwMy41ZDk2NGNjZS5lcmljQGJpc29uc3lzdGVtcy5uZXQ+CTw2MzZFOEJFQS0zMzlDLTQxQTMtQTdFMi1FODNCNzYwQTdGMjJAc3ViYnUub3JnPgk8MjAwOTEyMjUwMDUwNTMuM2M5OTlkN2UuZXJpY0BiaXNvbnN5c3RlbXMubmV0Pg=="},"prevInTopic":14418,"nextInTopic":14420,"prevInTime":14418,"nextInTime":14420,"topicId":14255,"numMessagesInTopic":44,"msgSnippet":"... What I meant to say was, applied REST architecture is ideal for guiding the development, maintenance and upgrading of systems whose lifespan may well","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 51942 invoked from network); 25 Dec 2009 09:48:57 -0000\r\nX-Received: from unknown (98.137.34.45)\n  by m11.grp.re1.yahoo.com with QMQP; 25 Dec 2009 09:48:57 -0000\r\nX-Received: from unknown (HELO mxout-08.mxes.net) (216.86.168.183)\n  by mta2.grp.sp2.yahoo.com with SMTP; 25 Dec 2009 09:48:57 -0000\r\nX-Received: from bigbison (unknown [65.117.211.162])\n\t(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))\n\t(No client certificate requested)\n\tby smtp.mxes.net (Postfix) with ESMTPSA id 35E41509DB;\n\tFri, 25 Dec 2009 04:48:56 -0500 (EST)\r\nDate: Fri, 25 Dec 2009 02:48:45 -0700\r\nTo: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nCc: Subbu Allamaraju &lt;subbu@...&gt;, Stefan Tilkov\n &lt;stefan.tilkov@...&gt;, rest-discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nMessage-Id: &lt;20091225024845.c91cff0e.eric@...&gt;\r\nIn-Reply-To: &lt;20091225005053.3c999d7e.eric@...&gt;\r\nReferences: &lt;20091220212633.715ca942.eric@...&gt;\n\t&lt;87iqc0zzig.wl%berend@...&gt;\n\t&lt;20091220224612.b835f502.eric@...&gt;\n\t&lt;20091220225940.7537e931.eric@...&gt;\n\t&lt;20091221003605.7cd9070b.eric@...&gt;\n\t&lt;20091221170735.6b3919ce.eric@...&gt;\n\t&lt;BA6578F1-4778-464F-AEC6-9CA63C4F0BBF@...&gt;\n\t&lt;3FE984F2-F58D-4F2F-88E7-FFBA31E1B9E2@...&gt;\n\t&lt;20091222142237.41004204.eric@...&gt;\n\t&lt;37AC7315-19FD-4F5D-AFDB-731117F8ABC9@...&gt;\n\t&lt;20091223155529.f89e3b8d.eric@...&gt;\n\t&lt;3551E99A-3DF8-4C3C-8480-9A6F74239B1A@...&gt;\n\t&lt;20091223201303.5d964cce.eric@...&gt;\n\t&lt;636E8BEA-339C-41A3-A7E2-E83B760A7F22@...&gt;\n\t&lt;20091225005053.3c999d7e.eric@...&gt;\r\nOrganization: Bison Systems Corporation\r\nX-Mailer: Sylpheed 2.6.0 (GTK+ 2.10.14; i686-pc-mingw32)\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=US-ASCII\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nSubject: Re: [rest-discuss] REST isn&#39;t hard to learn, it&#39;s just taught\n wrong.\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\n&quot;Eric J. Bowman&quot; wrote:\n&gt; \n&gt; The end result of achieving a REST system may take an amount of time\n&gt; best measured in years.  Which is no big thing, because REST is meant\n&gt; to guide the development of systems whose lifespan may well encompass\n&gt; decades.  But until all REST constraints in an architectural model are\n&gt; reflected in mappings to the implementation, the system cannot be\n&gt; considered REST, only a derivative of the style.  Which doesn&#39;t\n&gt; necessarily matter.\n&gt; \n\nWhat I meant to say was, applied REST architecture is ideal for guiding\nthe development, maintenance and upgrading of systems whose lifespan may\nwell encompass decades.  And of course, for a system to be a derivative\nof the REST style doesn&#39;t necessarily matter because it may well fit\nthe needs of the system.  There is no &quot;best&quot; architecture, there is\nonly the architecture that is best for your system (at any given stage\nin its lifecycle).\n\nI don&#39;t mean to imply that a system&#39;s architectural model is fixed\nbefore it is ever implemented, it too is free to evolve over time.\n\nAll we know at this point about HTTP 2.0 and Waka, is that following\nREST should allow us to cleanly upgrade a system when the time comes,\nwhile achieving graceful degradation for HTTP 1.x clients.  My interest\nlies in learning applied software architecture in the REST idiom, driven\nby this uncertainty over the time horizon.  Surely new protocols come\nwith new benefits, but at what cost?  Will I need to derive a new\nimplementation from the same model, and maintain the old as legacy?\n\nI believe that this issue is best addressed through the disciplines of\nboth REST and applied software architecture, to provide a formalism to\ninform system-design decisions over the long term.  (The new &quot;Software\nArchitecture&quot; reference is quite timely, since I&#39;ve been thinking this\nway for months before it was published, as evidenced by the nature of\nmy posts here over the course of &#39;09.)  So my questions are now like,\nhow do I account for protocol evolution in a REST system, using the\nmodeling-driven approach of applied REST architecture?\n\nI&#39;ve already figured that URI allocation scheme is implementation-\nspecific.  But perhaps URI scheme belongs in the Model?  Transitioning\nto one or more new protocols (in the URI-scheme sense) over time may be\nmade to degrade gracefully, by running two separate implementations\nside-by-side, adding, say, waka:// to an http:// system (1 or 2).  Or\ncan I upgrade my implementation to cleanly account for the new protocol?\nThe URI allocation scheme likely is the same for all, just as it can be\nthe same for ftp://.  So URI scheme is a resource property, and likely\ndoes belong in the Model.\n\nThis question, of side-by-side deployment or not, motivates my pursuit\nof applied software architecture in the REST idiom, whether my system\nis RESTful or not...\n\nThe REST-derived (ROA) system I&#39;m developing doesn&#39;t need all the REST\nconstraints out-of-the-box.  But if it succeeds on the Web, its nature\nas a distributed hypermedia system will make REST a design imperative\n(I plan for success in everything I do) that must be achieved over\ntime, while at the same time the system is evolving to include new\nfeatures... at some point a new protocol comes along, and I won&#39;t want\nto shut the system down for upgrades any more than Google does...\n\nI don&#39;t see any way I can juggle all those balls over the long term,\nwithout having some kind of reference to guide me.  What reference\nexists to solving these problems?  REST and...???  Since REST is just an\nabstract, an architectural style not an implementation guide, there\nmust be some method of following it.\n\nThis method is called applied software architecture, and the best\ntextbook I&#39;ve seen on the subject provides a formal approach to\nModeling, Visualization, Analysis, Implementation, and Deployment of a\nsystem derived from a known architectural style, like REST.  It indeed\nutilizes REST to illustrate applied software architecture (as a guide to\ndeveloping architectural styles, though, not system architectures).  The\ntextbook may be used as source material to develop not a &quot;What Is&quot; for\nREST, but a &quot;How To&quot; for REST using common concepts and vocabulary.\n\nSince the benefits of REST aren&#39;t worth the tradeoffs in my system\nimplementation at this point in time, the immediate goal of my project\nisn&#39;t REST itself, but a REST architectural model to guide me.  The\npoint of starting with this Reference Model is to ensure the longevity\nof my system, by taking a proactive approach to system evolution and\nmaintenance, instead of a reactive approach -- utterly pragmatic.  The\nonly formal guide I&#39;ve found for transposing an architectural style\ninto an implementation starts with modeling, so that&#39;s now my logical\nstarting point for a REST or REST-oriented development project.\n\nStill waiting up for Santa,\nEric\n\n"}}
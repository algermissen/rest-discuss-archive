{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":69164307,"authorName":"mike amundsen","from":"mike amundsen &lt;mamund@...&gt;","profile":"mamund","replyTo":"SENDER","senderId":"3l4MC1NkmUuV8h8shJX62lbF2oc4Rn8bP2JbZFjUM59w2wwKFpaaXvKQ875L66TcpcbVeDbM7dKGd-AiGkrqXSjdaJlNQRQ","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] How can a framework/library encourage REST-ful \tdevelopment?","postDate":"1263598349","msgId":14570,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGI1NDhkZjY1MTAwMTE1MTUzMm81YWQ0NzU4Mm02MTg2Njk2ZmU2OWQ0NzQ5QG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PDgxNThhZDc1MTAwMTE1MTUyNW41YzBjNDg4YnRlYjlhNGViMGY1MDM0YjZjQG1haWwuZ21haWwuY29tPg==","referencesHeader":"PGI1NDhkZjY1MTAwMTE1MTIyN3I2ZmNmMjI0NGsxY2ViZDIyYTI0M2QwMTg0QG1haWwuZ21haWwuY29tPgkgPDgxNThhZDc1MTAwMTE1MTMzM2lkOTE5NDZjcmE0MzNhMTUxNGExMjY1YjVAbWFpbC5nbWFpbC5jb20+CSA8ZGU3MGIzOWQxMDAxMTUxMzQ1djRjNThiNzE5a2M4MjQ4NTRlODdmNjg5YUBtYWlsLmdtYWlsLmNvbT4JIDw4MTU4YWQ3NTEwMDExNTE1MjVuNWMwYzQ4OGJ0ZWI5YTRlYjBmNTAzNGI2Y0BtYWlsLmdtYWlsLmNvbT4="},"prevInTopic":14569,"nextInTopic":14571,"prevInTime":14569,"nextInTime":14571,"topicId":14561,"numMessagesInTopic":28,"msgSnippet":"I wonder about the importance of opacity to all parties involved in the request/response chain. I can see why clients should assume opacity and I can see why","rawEmail":"Return-Path: &lt;mca@...&gt;\r\nX-Sender: mca@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 21017 invoked from network); 15 Jan 2010 23:32:31 -0000\r\nX-Received: from unknown (98.137.34.46)\n  by m11.grp.re1.yahoo.com with QMQP; 15 Jan 2010 23:32:31 -0000\r\nX-Received: from unknown (HELO mail-fx0-f226.google.com) (209.85.220.226)\n  by mta3.grp.sp2.yahoo.com with SMTP; 15 Jan 2010 23:32:30 -0000\r\nX-Received: by fxm26 with SMTP id 26so722022fxm.19\n        for &lt;rest-discuss@yahoogroups.com&gt;; Fri, 15 Jan 2010 15:32:29 -0800 (PST)\r\nMIME-Version: 1.0\r\nX-Received: by 10.223.17.19 with SMTP id q19mr3403664faa.75.1263598349230; Fri, \n\t15 Jan 2010 15:32:29 -0800 (PST)\r\nIn-Reply-To: &lt;8158ad751001151525n5c0c488bteb9a4eb0f5034b6c@...&gt;\r\nReferences: &lt;b548df651001151227r6fcf2244k1cebd22a243d0184@...&gt;\n\t &lt;8158ad751001151333id91946cra433a1514a1265b5@...&gt;\n\t &lt;de70b39d1001151345v4c58b719kc824854e87f689a@...&gt;\n\t &lt;8158ad751001151525n5c0c488bteb9a4eb0f5034b6c@...&gt;\r\nDate: Fri, 15 Jan 2010 18:32:29 -0500\r\nX-Google-Sender-Auth: 1c7140ee965abc5b\r\nMessage-ID: &lt;b548df651001151532o5ad47582m6186696fe69d4749@...&gt;\r\nTo: Peter Keane &lt;pkeane@...&gt;\r\nCc: Noah Campbell &lt;noahcampbell@...&gt;, rest-discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Type: multipart/alternative; boundary=000e0cdf95b4bea48a047d3c6a4f\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: mike amundsen &lt;mamund@...&gt;\r\nSubject: Re: [rest-discuss] How can a framework/library encourage REST-ful \n\tdevelopment?\r\nX-Yahoo-Group-Post: member; u=69164307; y=ydqovuG1kE0kW_RX50Rt5KYZ_AwLzZ5lrOAnAFnH4yCT\r\nX-Yahoo-Profile: mamund\r\n\r\n\r\n--000e0cdf95b4bea48a047d3c6a4f\r\nContent-Type: text/plain; charset=ISO-8859-1\r\n\r\nI wonder about the importance of opacity to all parties involved in the\nrequest/response chain.\n\nI can see why clients should assume opacity and I can see why intermediaries\nshould assume opacity. But is it important that the origin server treat the\nURI as opaque?\n\nmca\nhttp://amundsen.com/blog/\n\n\n\nOn Fri, Jan 15, 2010 at 18:25, Peter Keane &lt;pkeane@...&gt; wrote:\n\n&gt;\n&gt;\n&gt; On Fri, Jan 15, 2010 at 3:45 PM, Noah Campbell &lt;noahcampbell@...&gt;wrote:\n&gt;\n&gt;&gt; Hi Peter,\n&gt;&gt;\n&gt;&gt; Do you mind if we pick nits on this requirement?\n&gt;&gt;\n&gt;&gt; &quot;an easy way to parse the requested URL (w/ regex or named sections,\n&gt;&gt; etc.)&quot;\n&gt;&gt;\n&gt;&gt; I think the binding of a URL and the semantics of that URL to an\n&gt;&gt; implementation should be discouraged.\n&gt;&gt;\n&gt;&gt; Thoughts?\n&gt;&gt;\n&gt;&gt;\n&gt; Noah-\n&gt;\n&gt; It&#39;s a valid point, and one that I have given some thought to.  Opaqueness\n&gt; of the URL is valuable if/when is encourages use of HATEOS (and the myth\n&gt; that REST == &quot;pretty URLs&quot; is hard but important to debunk).  I guess I&#39;d\n&gt; have to say that it depends on what you mean by &quot;implementation&quot; and how\n&gt; leaky your implementation abstractions are.  I can imagine a nicely\n&gt; abstracted system for which such &quot;semantic&quot; URLs could be quite appropriate\n&gt; (as long as hypertext drives the application state in typical use of the web\n&gt; app).  Here&#39;s a bit of wisdom from Roy F. on the matter:\n&gt;\n&gt; http://tech.groups.yahoo.com/group/rest-discuss/message/3232\n&gt;\n&gt; Either way, the server needs to do something useful w/ the URL and thus\n&gt; needs way to &quot;understand&quot; it.\n&gt;\n&gt; --peter\n&gt;\n&gt;\n&gt;&gt; -Noah\n&gt;&gt;\n&gt;&gt;  On Fri, Jan 15, 2010 at 1:33 PM, Peter Keane &lt;pkeane@...&gt;wrote:\n&gt;&gt;\n&gt;&gt;&gt;\n&gt;&gt;&gt;\n&gt;&gt;&gt; You might check out this post from Erik Wilde:\n&gt;&gt;&gt;\n&gt;&gt;&gt;\n&gt;&gt;&gt; http://dret.typepad.com/dretblog/2009/05/rest-programming-toolbox-requirements.html\n&gt;&gt;&gt;\n&gt;&gt;&gt; For me, the bare minimum includes:\n&gt;&gt;&gt;\n&gt;&gt;&gt; - support for GET,PUT,POST, DELETE http methods (at least ... HEAD,\n&gt;&gt;&gt; OPTIONS nice, too).\n&gt;&gt;&gt; - for GET requests, I want to know what media type is preferred\n&gt;&gt;&gt; (combination of looking at Accept header and/or file extension, etc.)\n&gt;&gt;&gt; - for PUT/POST I want to be able to quickly and easily now the incoming\n&gt;&gt;&gt; Content-type\n&gt;&gt;&gt; - an easy way to parse the requested URL (w/ regex or named sections,\n&gt;&gt;&gt; etc.)\n&gt;&gt;&gt; - the ability to dispatch to a handler function by any combination of the\n&gt;&gt;&gt; above\n&gt;&gt;&gt; - tools for creating representations in the most common media types: HTML\n&gt;&gt;&gt; (a template language), JSON, Atom, RDF, etc. and serving the proper one\n&gt;&gt;&gt; based on requested type.\n&gt;&gt;&gt;\n&gt;&gt;&gt; In PHP, I don&#39;t think there is an obvious option (we&#39;ve built our own\n&gt;&gt;&gt; RESTful classes for Zend Framework: http://github.com/pkeane/cola-zend),\n&gt;&gt;&gt; what I know of RoR seems to meet criteria, Django seems pretty nicely\n&gt;&gt;&gt; RESTful, as does the Google App Engine &quot;WebApp.&quot;\n&gt;&gt;&gt;\n&gt;&gt;&gt; --peter\n&gt;&gt;&gt;\n&gt;&gt;&gt;\n&gt;&gt;&gt; On Fri, Jan 15, 2010 at 2:27 PM, mike amundsen &lt;mamund@...&gt; wrote:\n&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; Recently, I&#39;ve been thinking about how a coding framework or library\n&gt;&gt;&gt;&gt; can influence the way developers implement applications. What would a\n&gt;&gt;&gt;&gt; coding environment look like if it was meant to encourage results that\n&gt;&gt;&gt;&gt; followed a particular _architectural_ style (not programming style).\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; IOW, is there a way to craft a framework that constrains developers in\n&gt;&gt;&gt;&gt; ways that results in a REST-ful implementation of the application?\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; I did some digging, but have yet to find any writing on this topic.\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; Here are some &quot;off-the-top-of-my-head&quot; items:\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; For example, a framework might exhibit these REST-like traits:\n&gt;&gt;&gt;&gt; - there is a clear separation of concerns between resource\n&gt;&gt;&gt;&gt; identifiers, resources, and representations\n&gt;&gt;&gt;&gt; - developers must define a resource as the public application interface\n&gt;&gt;&gt;&gt; - the Uniform Interface is enforced (e.g. those methods are the only\n&gt;&gt;&gt;&gt; public members exposed for a resource)\n&gt;&gt;&gt;&gt; - developers must always associate one or more representation formats\n&gt;&gt;&gt;&gt; with a resource and/or resource method before the implementation is\n&gt;&gt;&gt;&gt; valid\n&gt;&gt;&gt;&gt; - there is no way to define and use server-side session state objects\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; Some HTTP-specific traits might be:\n&gt;&gt;&gt;&gt; - support for content negotiation is &quot;baked-in&quot;\n&gt;&gt;&gt;&gt; - support for conditional requests is &quot;baked-in&quot; and automatic\n&gt;&gt;&gt;&gt; - RPC-like implementation patterns (e.g. gateway URIs) are somehow\n&gt;&gt;&gt;&gt; difficult to implement or are flagged as invalid\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; Any comments? Is this line of thinking pure folly? old hat? already\n&gt;&gt;&gt;&gt; resolved sufficiently?\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; mca\n&gt;&gt;&gt;&gt; http://amundsen.com/blog/\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;\n&gt;&gt;&gt;\n&gt;&gt;&gt;\n&gt;&gt;&gt; \n&gt;&gt;\n&gt;&gt;\n&gt;&gt;\n&gt;\n\r\n--000e0cdf95b4bea48a047d3c6a4f\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;div&gt;I wonder about the importance of opacity to all parties involved in th=\r\ne request/response chain.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I can see why clients sh=\r\nould assume opacity and I can see why intermediaries should assume opacity.=\r\n But is it important that the origin server treat the URI as opaque?&lt;br&gt;\n&lt;d=\r\niv&gt;&lt;br clear=3D&quot;all&quot;&gt;mca&lt;br&gt;&lt;a href=3D&quot;http://amundsen.com/blog/&quot;&gt;http://am=\r\nundsen.com/blog/&lt;/a&gt;&lt;br&gt;&lt;br&gt;\n&lt;br&gt;&lt;br&gt;&lt;div class=3D&quot;gmail_quote&quot;&gt;On Fri, Jan=\r\n 15, 2010 at 18:25, Peter Keane &lt;span dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:pke=\r\nane@...&quot;&gt;pkeane@...&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;block=\r\nquote class=3D&quot;gmail_quote&quot; style=3D&quot;margin:0 0 0 .8ex;border-left:1px #ccc=\r\n solid;padding-left:1ex;&quot;&gt;\n&lt;br&gt;&lt;br&gt;&lt;div class=3D&quot;gmail_quote&quot;&gt;&lt;div class=3D=\r\n&quot;im&quot;&gt;On Fri, Jan 15, 2010 at 3:45 PM, Noah Campbell &lt;span dir=3D&quot;ltr&quot;&gt;&lt;&lt;=\r\na href=3D&quot;mailto:noahcampbell@...&quot; target=3D&quot;_blank&quot;&gt;noahcampbell@gma=\r\nil.com&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;=\r\nborder-left:1px solid rgb(204, 204, 204);margin:0pt 0pt 0pt 0.8ex;padding-l=\r\neft:1ex&quot;&gt;\n\nHi Peter,&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Do you mind if we pick nits on this=\r\n requirement?&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=3D&quot;font-family:aria=\r\nl,sans-serif;font-size:13px;border-collapse:collapse&quot;&gt;&quot;an easy way to =\r\nparse the requested URL (w/ regex or named sections, etc.)&quot;&lt;/span&gt;&lt;br&gt;=\r\n\n\n\n&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;I think the binding of a URL and the semantics of t=\r\nhat URL to an implementation should be discouraged. =A0&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div=\r\n&gt;&lt;div&gt;Thoughts?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;Noah-&lt;br&gt;&lt;b=\r\nr&gt;\nIt&#39;s a valid point, and one that I have given some thought to.=A0 Op=\r\naqueness of the URL is valuable if/when is encourages use of HATEOS (and th=\r\ne myth that REST =3D=3D &quot;pretty URLs&quot; is hard but important to de=\r\nbunk).=A0 I guess I&#39;d have to say that it depends on what you mean by &=\r\nquot;implementation&quot; and how leaky your implementation abstractions ar=\r\ne.=A0 I can imagine a nicely abstracted system for which such &quot;semanti=\r\nc&quot; URLs could be quite appropriate (as long as hypertext drives the ap=\r\nplication state in typical use of the web app).=A0 Here&#39;s a bit of wisd=\r\nom from Roy F. on the matter:&lt;br&gt;\n\n&lt;br&gt;&lt;a href=3D&quot;http://tech.groups.yahoo.=\r\ncom/group/rest-discuss/message/3232&quot; target=3D&quot;_blank&quot;&gt;http://tech.groups.y=\r\nahoo.com/group/rest-discuss/message/3232&lt;/a&gt;&lt;br&gt;&lt;br&gt;Either way, the server =\r\nneeds to do something useful w/ the URL and thus needs way to &quot;underst=\r\nand&quot; it.&lt;br&gt;\n&lt;font color=3D&quot;#888888&quot;&gt;\n&lt;br&gt;--peter&lt;br&gt;=A0&lt;/font&gt;&lt;/div&gt;&lt;=\r\ndiv&gt;&lt;div&gt;&lt;/div&gt;&lt;div class=3D&quot;h5&quot;&gt;&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D=\r\n&quot;border-left:1px solid rgb(204, 204, 204);margin:0pt 0pt 0pt 0.8ex;padding-=\r\nleft:1ex&quot;&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;-Noah&lt;/div&gt;&lt;div&gt;&lt;br&gt;\n&lt;div class=3D&quot;gmail_quote&quot;&gt;&lt;=\r\ndiv&gt;&lt;div&gt;\n&lt;/div&gt;&lt;div&gt;\nOn Fri, Jan 15, 2010 at 1:33 PM, Peter Keane &lt;span di=\r\nr=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:pkeane@...&quot; target=3D&quot;_blank&quot;&gt;p=\r\nkeane@...&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote clas=\r\ns=3D&quot;gmail_quote&quot; style=3D&quot;border-left:1px solid rgb(204, 204, 204);margin:=\r\n0pt 0pt 0pt 0.8ex;padding-left:1ex&quot;&gt;\n\n&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;\n\n\n\n\n\n\n\n        =\r\n\n\n\n\n&lt;div&gt;\n\n\n\n\n\n&lt;br&gt;&lt;br&gt;\n\n\n\n\nYou might check out this post from Erik Wilde:&lt;=\r\nbr&gt;&lt;br&gt;&lt;a href=3D&quot;http://dret.typepad.com/dretblog/2009/05/rest-programming=\r\n-toolbox-requirements.html&quot; target=3D&quot;_blank&quot;&gt;http://dret.typepad.com/dretb=\r\nlog/2009/05/rest-programming-toolbox-requirements.html&lt;/a&gt;&lt;br&gt;\n\n\n\n&lt;br&gt;For m=\r\ne, the bare minimum includes:&lt;br&gt;&lt;br&gt;- support for GET,PUT,POST, DELETE htt=\r\np methods (at least ... HEAD, OPTIONS nice, too).&lt;br&gt;- for GET requests, I =\r\nwant to know what media type is preferred (combination of looking at Accept=\r\n header and/or file extension, etc.)&lt;br&gt;\n\n\n\n- for PUT/POST I want to be abl=\r\ne to quickly and easily now the incoming Content-type &lt;br&gt;- an easy way to =\r\nparse the requested URL (w/ regex or named sections, etc.)&lt;br&gt;- the ability=\r\n to dispatch to a handler function by any combination of the above&lt;br&gt;\n\n\n\n-=\r\n tools for creating representations in the most common media types: HTML (a=\r\n template language), JSON, Atom, RDF, etc. and serving the proper one based=\r\n on requested type.&lt;br&gt;&lt;br&gt;In PHP, I don&#39;t think there is an obvious op=\r\ntion (we&#39;ve built our own RESTful classes for Zend Framework: &lt;a href=\r\n=3D&quot;http://github.com/pkeane/cola-zend&quot; target=3D&quot;_blank&quot;&gt;http://github.com=\r\n/pkeane/cola-zend&lt;/a&gt;), what I know of RoR seems to meet criteria, Django s=\r\neems pretty nicely RESTful, as does the Google App Engine &quot;WebApp.&quo=\r\nt;&lt;br&gt;\n\n\n\n&lt;br&gt;--peter&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;br&gt;&lt;div class=3D&quot;gmail_quote=\r\n&quot;&gt;On Fri, Jan 15, 2010 at 2:27 PM, mike amundsen &lt;span dir=3D&quot;ltr&quot;&gt;&lt;&lt;a h=\r\nref=3D&quot;mailto:mamund@...&quot; target=3D&quot;_blank&quot;&gt;mamund@...&lt;/a&gt;&gt;&lt;=\r\n/span&gt; wrote:&lt;br&gt;\n\n\n&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;border-left:=\r\n1px solid rgb(204, 204, 204);margin:0pt 0pt 0pt 0.8ex;padding-left:1ex&quot;&gt;\n\n\n=\r\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;div style=3D&quot;background-color:rgb(255, 255, 255)&quot;&gt;\n&lt;span&gt;=A0&lt;/=\r\nspan&gt;\n\n\n&lt;div&gt;\n  &lt;div&gt;\n\n\n    &lt;div&gt;\n      \n      \n      &lt;p&gt;Recently, I&#39;ve=\r\n been thinking about how a coding framework or library&lt;br&gt;\ncan influence th=\r\ne way developers implement applications. What would a&lt;br&gt;\ncoding environmen=\r\nt look like if it was meant to encourage results that&lt;br&gt;\nfollowed a partic=\r\nular _architectural_ style (not programming style).&lt;br&gt;\n&lt;br&gt;\nIOW, is there =\r\na way to craft a framework that constrains developers in&lt;br&gt;\nways that resu=\r\nlts in a REST-ful implementation of the application?&lt;br&gt;\n&lt;br&gt;\nI did some di=\r\ngging, but have yet to find any writing on this topic.&lt;br&gt;\n&lt;br&gt;\nHere are so=\r\nme &quot;off-the-top-of-my-head&quot; items:&lt;br&gt;\n&lt;br&gt;\nFor example, a framew=\r\nork might exhibit these REST-like traits:&lt;br&gt;\n- there is a clear separation=\r\n of concerns between resource&lt;br&gt;\nidentifiers, resources, and representatio=\r\nns&lt;br&gt;\n- developers must define a resource as the public application interf=\r\nace&lt;br&gt;\n- the Uniform Interface is enforced (e.g. those methods are the onl=\r\ny&lt;br&gt;\npublic members exposed for a resource)&lt;br&gt;\n- developers must always a=\r\nssociate one or more representation formats&lt;br&gt;\nwith a resource and/or reso=\r\nurce method before the implementation is&lt;br&gt;\nvalid&lt;br&gt;\n- there is no way to=\r\n define and use server-side session state objects&lt;br&gt;\n&lt;br&gt;\nSome HTTP-specif=\r\nic traits might be:&lt;br&gt;\n- support for content negotiation is &quot;baked-in=\r\n&quot;&lt;br&gt;\n- support for conditional requests is &quot;baked-in&quot; and a=\r\nutomatic&lt;br&gt;\n- RPC-like implementation patterns (e.g. gateway URIs) are som=\r\nehow&lt;br&gt;\ndifficult to implement or are flagged as invalid&lt;br&gt;\n&lt;br&gt;\nAny comm=\r\nents? Is this line of thinking pure folly? old hat? already&lt;br&gt;\nresolved su=\r\nfficiently?&lt;br&gt;\n&lt;br&gt;\nmca&lt;br&gt;\n&lt;a href=3D&quot;http://amundsen.com/blog/&quot; target=\r\n=3D&quot;_blank&quot;&gt;http://amundsen.com/blog/&lt;/a&gt;&lt;br&gt;\n&lt;/p&gt;\n\n    &lt;/div&gt;\n     \n\n    \n=\r\n    &lt;div style=3D&quot;color:rgb(255, 255, 255);min-height:0pt&quot;&gt;&lt;/div&gt;\n\n\n&lt;/div&gt;\n=\r\n\n\n\n  \n\n\n\n\n\n\n&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;\n\n\n\n\n\n\n&lt;br&gt;\n\n    \n    \n&lt;br&gt;\n=\r\n\n\n\n\n&lt;div width=3D&quot;1&quot; style=3D&quot;color:white;clear:both&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n\n\n=\r\n\n&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;\n&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br&gt;\n&lt;/blockq=\r\nuote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;\n\r\n--000e0cdf95b4bea48a047d3c6a4f--\r\n\n"}}
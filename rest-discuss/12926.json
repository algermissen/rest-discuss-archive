{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":339031295,"authorName":"Sam Johnston","from":"Sam Johnston &lt;samj@...&gt;","profile":"sam.johnston@ymail.com","replyTo":"SENDER","senderId":"RCbQeHCf2x1WAn8WfrqVvMaGOiY98Qg6Wrn41a9JjDWmHWnFCuG9BNWItA8lVh-SBwQLsGT2hSFPvPy5X3VzaPZSXA","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Using HTTP Link: headers for web linking non-hypertext","postDate":"1245848005","msgId":12926,"canDelete":false,"contentTrasformed":false,"systemMessage":true,"headers":{"messageIdInHeader":"PDIxNjA2ZGNmMDkwNjI0MDU1M2szZDg4MjU4Mm00MjQ1NGZlNGNhNWU4ZkBtYWlsLmdtYWlsLmNvbT4="},"prevInTopic":0,"nextInTopic":12965,"prevInTime":12925,"nextInTime":12927,"topicId":12926,"numMessagesInTopic":42,"msgSnippet":"Afternoon all, I have a need for a meta-model which allows for association of non-hypertext representations of resources (e.g. binaries, images, etc.). I had","rawEmail":"Return-Path: &lt;samj@...&gt;\r\nReceived: (qmail 64572 invoked from network); 24 Jun 2009 13:31:57 -0000\r\nReceived: from unknown (69.147.108.201)\n  by m5.grp.sp2.yahoo.com with QMQP; 24 Jun 2009 13:31:57 -0000\r\nReceived: from unknown (HELO n5-vm6.bullet.mail.sp2.yahoo.com) (67.195.135.101)\n  by mta2.grp.re1.yahoo.com with SMTP; 24 Jun 2009 13:31:56 -0000\r\nDKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=yahoogroups.com; s=lima; t=1245850292; bh=IPmljAoO5gpW+NtAXctchli0yLRiVFhnwmEdmYAgkxc=; h=Received:Received:Received:X-Sender:X-Apparently-To:X-Received:X-Received:X-Received:X-Received:MIME-Version:X-Received:Date:Message-ID:To:Content-Type:X-Originating-IP:X-eGroups-Msg-Info:From:Subject:X-Yahoo-Group-Post:X-Yahoo-Profile:X-YGroups-SubInfo:Sender:X-Yahoo-Newman-Property:X-eGroups-Approved-By:X-eGroups-Auth; b=k16X3MxZ9M7RHUZikmOPEwpVq6CdIKWt2WcCVAOOe08SIWmdZ1D/NA6Myw4K+plrjpgaz+aoTsKr3/TgAW/DQeoAhA9lxE0u+KQt1EOdUxdi1yevdHbwrn7Iltp6WAG4\r\nReceived: from [67.195.134.239] by n5.bullet.mail.sp2.yahoo.com with NNFMP; 24 Jun 2009 13:31:32 -0000\r\nReceived: from [69.147.65.173] by t4.bullet.mail.sp2.yahoo.com with NNFMP; 24 Jun 2009 13:31:32 -0000\r\nReceived: from [98.137.34.72] by t15.bullet.mail.sp1.yahoo.com with NNFMP; 24 Jun 2009 13:31:32 -0000\r\nX-Sender: samj@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 82461 invoked from network); 24 Jun 2009 12:55:37 -0000\r\nX-Received: from unknown (69.147.108.202)\n  by m3.grp.sp2.yahoo.com with QMQP; 24 Jun 2009 12:55:37 -0000\r\nX-Received: from unknown (HELO mail-ew0-f225.google.com) (209.85.219.225)\n  by mta3.grp.re1.yahoo.com with SMTP; 24 Jun 2009 12:55:37 -0000\r\nX-Received: by ewy25 with SMTP id 25so1265502ewy.25\n        for &lt;rest-discuss@yahoogroups.com&gt;; Wed, 24 Jun 2009 05:53:51 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.211.168.4 with SMTP id v4mr1481076ebo.20.1245848005387; Wed, \n\t24 Jun 2009 05:53:25 -0700 (PDT)\r\nDate: Wed, 24 Jun 2009 14:53:25 +0200\r\nMessage-ID: &lt;21606dcf0906240553k3d882582m42454fe4ca5e8f@...&gt;\r\nTo: rest-discuss@yahoogroups.com\r\nContent-Type: multipart/alternative; boundary=0015174bdcd8ce2814046d1797a7\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Sam Johnston &lt;samj@...&gt;\r\nSubject: Using HTTP Link: headers for web linking non-hypertext\r\nX-Yahoo-Group-Post: member; u=339031295; y=e6oMalTpAm9LHC71keV0dCFs1bt3wFoAkkGTf9laQdgNs9mz-1lXnfNeY2Rwctdi2w\r\nX-Yahoo-Profile: sam.johnston@...\r\nX-YGroups-SubInfo: t=0;f=16;g=odJuFhrIqH5z-ZqSH3IVgM9WpI1vay3QwD9ojxlOq7xQm3dVzLkzV1hLwY1tQ22k7xU;\r\nX-Yahoo-Newman-Property: groups-system\r\nX-eGroups-Approved-By: gonga_thrash &lt;distobj@...&gt; via web; 24 Jun 2009 13:31:31 -0000\r\n\r\n\r\n--0015174bdcd8ce2814046d1797a7\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: 7bit\r\n\r\nAfternoon all,\n\nI have a need for a meta-model which allows for association of non-hypertext\nrepresentations of resources (e.g. binaries, images, etc.). I had originally\nproposed Atom but this wasn&#39;t well accepted by the XML xenophobes. It seems\nthe Link: header was intended to accomplish just what I need in the original\nHTTP RFCs. Unfortunately though HTML was dominant and Link: wasn&#39;t\nimplemented (nor implementable), so it was dropped only to be recently\nrevived by @mnot in draft-nottingham-http-link-header.\n\nPer my request for clarification to apps-discuss below (which failed to get\nany bites - perhaps tl;dr), I&#39;d like to find a sensible mechanism for\nsetting the Link: headers, ideally without relying on new HTTP verbs (LINK\nand UNLINK were originally specified but have also been dropped). I&#39;m\nfiguring that just sending Link: header(s) in PUTs and POSTs will cleanly\naccomplish most of what I need, but things get hairy when you start thinking\nabout updating/deleting individual links.\n\nSam\n\n---------- Forwarded message ----------\nFrom: Sam Johnston &lt;samj@...&gt;\nDate: Mon, Jun 15, 2009 at 5:27 AM\nSubject: Clarifications on Web Linking with HTTP\nTo: apps-discuss@...\n\n\nMorning all,\n\nThe HTTP Link: header enables web linking without hypermedia - that\nis, arbitrary content types can be linked (with attriubtes)\nout-of-band rather than within the payload (e.g. HTML) itself. This\nenables the use of HTTP as a meta-model (at least for individual\nresources) without having to resort to Atom, which is potentially\ngreat news for RESTful APIs.\n\nI am currently working on a real world application of Marks&#39; Web\nLinking I-D[1] (OGF&#39;s Open Cloud Computing Interface -\nhttp://www.occi-wg.org/) and require clarification on a few points\n(which may want to end up in the I-D).\n\n - First and foremost, in the absence of the LINK and UNLINK verbs\noriginally defined in RFC 2068[2] but specifically omitted from RFC\n2616[3], what is the preferred mechanism for manipulating these links\nvia HTTP? It appears that this header is intended for GET requests\nonly, but presumably specifying it in POST and PUT requests would be\none option that avoids the creation of [not so] &quot;new&quot; verbs (bearing\nin mind that short of accepting Link: headers from empty POST/PUT\nrequests, it would be necessary to GET and then PUT the entire payload\nto update links - twice if they were reciprocal). While there was an\nattempt a dozen years ago to better define the relevant HTTP verbs[4],\nit strikes me as more sensible to follow the example of the\nSet-Cookie: header for this rather than WebDAV&#39;s example of creating\nnew verbs (even if we&#39;ve seen them before) but you guys are the\nexperts.\n\n - Another concern with an arbitrary number of links is that arbitrary\nstring length limits may be imposed by user agents, as they are with\nURLs. This should not be a problem where there is one link per header,\nbut it may be where the headers are concatenated as described in RFC\n2616[5]. This is a double edged sword however as some user agents have\nonly recently added support for multiple headers of the same type[6]\nand it remains a problem for some[7].\n\n - The introduction of a link relation registry at IANA makes a lot of\nsense, though it would be nice if these were common for HTTP, HTML,\nAtom and other places links appear. Perhaps namespaces (e.g.\n&quot;atom:service&quot; or &quot;occi.state.restart&quot;) would be useful here so as to\nenable significantly more future extensibility.\n\n - It seems useful to be able to (optionally) specify the type (as in\ncontent type rather than relation type) of a given link, as is the\ncase for Atom. That said, this also seems somewhat redundant with HTTP\nContent Negotiation, but implementations that choose to support the\n&quot;type&quot; attribute may gain some performance and usability advantages\nfrom doing so. The matter of whether this information belongs in URIs\n(and if so, which side of the &#39;?&#39;) or in HTTP headers (or both) is\nstill not clear to me as there are pros and cons of each - perhaps the\nrelation type is more suitable (or both?) as it&#39;s often not possible\nto unambigously determine the relation type from the content type\n(consider modeling people where both fingerprint and portrait\nrepresentations may exist in image/png format).\n\nTo be more specific about the requirements, the API models cloud\ninfrastructure services (IaaS) and has three main nouns (compute,\nnetwork, storage) which need to be associated with each other with\nattributes on the links (e.g. a compute resource having a network\nresource associated with a local identifier attribute of &quot;eth0&quot;).\nUsing Atom as the meta-model worked fine (as evidenced by GData) but\nit now seems possible - at least for individual resources - with HTTP.\n\nCheers,\n\nSam\n\n1. http://tools.ietf.org/html/draft-nottingham-http-link-header-05\n2. http://tools.ietf.org/html/rfc2068#section-19.6.1\n3. http://tools.ietf.org/html/rfc2616#section-19.6.3\n4. http://ftp.ics.uci.edu/pub/ietf/http/draft-pritchard-http-links-00.txt\n5. http://tools.ietf.org/html/rfc2616#section-4.2\n6. http://www.mail-archive.com/bug-wget@.../msg00076.html\n7. http://bugs.python.org/issue1660009\n\r\n--0015174bdcd8ce2814046d1797a7\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nAfternoon all,&lt;br&gt;&lt;br&gt;I have a need for a meta-model which allows for assoc=\r\niation of non-hypertext representations of resources (e.g. binaries, images=\r\n, etc.). I had originally proposed Atom but this wasn&#39;t well accepted b=\r\ny the XML xenophobes. It seems the Link: header was intended to accomplish =\r\njust what I need in the original HTTP RFCs. Unfortunately though HTML was d=\r\nominant and Link: wasn&#39;t implemented (nor implementable), so it was dro=\r\npped only to be recently revived by @mnot in draft-nottingham-http-link-hea=\r\nder.&lt;br&gt;\n&lt;br&gt;Per my request for clarification to apps-discuss below (which =\r\nfailed to get any bites - perhaps tl;dr), I&#39;d like to find a sensible m=\r\nechanism for setting the Link: headers, ideally without relying on new HTTP=\r\n verbs (LINK and UNLINK were originally specified but have also been droppe=\r\nd). I&#39;m figuring that just sending Link: header(s) in PUTs and POSTs wi=\r\nll cleanly accomplish most of what I need, but things get hairy when you st=\r\nart thinking about updating/deleting individual links.&lt;br&gt;\n&lt;br&gt;Sam&lt;br&gt;&lt;br&gt;&lt;=\r\ndiv class=3D&quot;gmail_quote&quot;&gt;---------- Forwarded message ----------&lt;br&gt;From: =\r\n&lt;b class=3D&quot;gmail_sendername&quot;&gt;Sam Johnston&lt;/b&gt; &lt;span dir=3D&quot;ltr&quot;&gt;&lt;&lt;a hre=\r\nf=3D&quot;mailto:samj@...&quot;&gt;samj@...&lt;/a&gt;&gt;&lt;/span&gt;&lt;br&gt;Date: Mon, Jun 1=\r\n5, 2009 at 5:27 AM&lt;br&gt;\nSubject: Clarifications on Web Linking with HTTP&lt;br&gt;=\r\nTo: &lt;a href=3D&quot;mailto:apps-discuss@...&quot;&gt;apps-discuss@...&lt;/a&gt;&lt;br&gt;&lt;=\r\nbr&gt;&lt;br&gt;Morning all,&lt;br&gt;\n&lt;br&gt;\nThe HTTP Link: header enables web linking with=\r\nout hypermedia - that&lt;br&gt;\nis, arbitrary content types can be linked (with a=\r\nttriubtes)&lt;br&gt;\nout-of-band rather than within the payload (e.g. HTML) itsel=\r\nf. This&lt;br&gt;\nenables the use of HTTP as a meta-model (at least for individua=\r\nl&lt;br&gt;\nresources) without having to resort to Atom, which is potentially&lt;br&gt;=\r\n\ngreat news for RESTful APIs.&lt;br&gt;\n&lt;br&gt;\nI am currently working on a real wor=\r\nld application of Marks&#39; Web&lt;br&gt;\nLinking I-D[1] (OGF&#39;s Open Cloud C=\r\nomputing Interface -&lt;br&gt;\n&lt;a href=3D&quot;http://www.occi-wg.org/&quot; target=3D&quot;_bla=\r\nnk&quot;&gt;http://www.occi-wg.org/&lt;/a&gt;) and require clarification on a few points&lt;=\r\nbr&gt;\n(which may want to end up in the I-D).&lt;br&gt;\n&lt;br&gt;\n=A0- First and foremost=\r\n, in the absence of the LINK and UNLINK verbs&lt;br&gt;\noriginally defined in RFC=\r\n 2068[2] but specifically omitted from RFC&lt;br&gt;\n2616[3], what is the preferr=\r\ned mechanism for manipulating these links&lt;br&gt;\nvia HTTP? It appears that thi=\r\ns header is intended for GET requests&lt;br&gt;\nonly, but presumably specifying i=\r\nt in POST and PUT requests would be&lt;br&gt;\none option that avoids the creation=\r\n of [not so] &quot;new&quot; verbs (bearing&lt;br&gt;\nin mind that short of accep=\r\nting Link: headers from empty POST/PUT&lt;br&gt;\nrequests, it would be necessary =\r\nto GET and then PUT the entire payload&lt;br&gt;\nto update links - twice if they =\r\nwere reciprocal). While there was an&lt;br&gt;\nattempt a dozen years ago to bette=\r\nr define the relevant HTTP verbs[4],&lt;br&gt;\nit strikes me as more sensible to =\r\nfollow the example of the&lt;br&gt;\nSet-Cookie: header for this rather than WebDA=\r\nV&#39;s example of creating&lt;br&gt;\nnew verbs (even if we&#39;ve seen them befo=\r\nre) but you guys are the&lt;br&gt;\nexperts.&lt;br&gt;\n&lt;br&gt;\n=A0- Another concern with an=\r\n arbitrary number of links is that arbitrary&lt;br&gt;\nstring length limits may b=\r\ne imposed by user agents, as they are with&lt;br&gt;\nURLs. This should not be a p=\r\nroblem where there is one link per header,&lt;br&gt;\nbut it may be where the head=\r\ners are concatenated as described in RFC&lt;br&gt;\n2616[5]. This is a double edge=\r\nd sword however as some user agents have&lt;br&gt;\nonly recently added support fo=\r\nr multiple headers of the same type[6]&lt;br&gt;\nand it remains a problem for som=\r\ne[7].&lt;br&gt;\n&lt;br&gt;\n=A0- The introduction of a link relation registry at IANA ma=\r\nkes a lot of&lt;br&gt;\nsense, though it would be nice if these were common for HT=\r\nTP, HTML,&lt;br&gt;\nAtom and other places links appear. Perhaps namespaces (e.g.&lt;=\r\nbr&gt;\n&quot;atom:service&quot; or &quot;occi.state.restart&quot;) would be us=\r\neful here so as to&lt;br&gt;\nenable significantly more future extensibility.&lt;br&gt;\n=\r\n&lt;br&gt;\n=A0- It seems useful to be able to (optionally) specify the type (as i=\r\nn&lt;br&gt;\ncontent type rather than relation type) of a given link, as is the&lt;br=\r\n&gt;\ncase for Atom. That said, this also seems somewhat redundant with HTTP&lt;br=\r\n&gt;\nContent Negotiation, but implementations that choose to support the&lt;br&gt;\n&=\r\nquot;type&quot; attribute may gain some performance and usability advantage=\r\ns&lt;br&gt;\nfrom doing so. The matter of whether this information belongs in URIs=\r\n&lt;br&gt;\n(and if so, which side of the &#39;?&#39;) or in HTTP headers (or both=\r\n) is&lt;br&gt;\nstill not clear to me as there are pros and cons of each - perhaps=\r\n the&lt;br&gt;\nrelation type is more suitable (or both?) as it&#39;s often not po=\r\nssible&lt;br&gt;\nto unambigously determine the relation type from the content typ=\r\ne&lt;br&gt;\n(consider modeling people where both fingerprint and portrait&lt;br&gt;\nrep=\r\nresentations may exist in image/png format).&lt;br&gt;\n&lt;br&gt;\nTo be more specific a=\r\nbout the requirements, the API models cloud&lt;br&gt;\ninfrastructure services (Ia=\r\naS) and has three main nouns (compute,&lt;br&gt;\nnetwork, storage) which need to =\r\nbe associated with each other with&lt;br&gt;\nattributes on the links (e.g. a comp=\r\nute resource having a network&lt;br&gt;\nresource associated with a local identifi=\r\ner attribute of &quot;eth0&quot;).&lt;br&gt;\nUsing Atom as the meta-model worked =\r\nfine (as evidenced by GData) but&lt;br&gt;\nit now seems possible - at least for i=\r\nndividual resources - with HTTP.&lt;br&gt;\n&lt;br&gt;\nCheers,&lt;br&gt;\n&lt;br&gt;\nSam&lt;br&gt;\n&lt;br&gt;\n1. =\r\n&lt;a href=3D&quot;http://tools.ietf.org/html/draft-nottingham-http-link-header-05&quot;=\r\n target=3D&quot;_blank&quot;&gt;http://tools.ietf.org/html/draft-nottingham-http-link-he=\r\nader-05&lt;/a&gt;&lt;br&gt;\n2. &lt;a href=3D&quot;http://tools.ietf.org/html/rfc2068#section-19=\r\n.6.1&quot; target=3D&quot;_blank&quot;&gt;http://tools.ietf.org/html/rfc2068#section-19.6.1&lt;/=\r\na&gt;&lt;br&gt;\n3. &lt;a href=3D&quot;http://tools.ietf.org/html/rfc2616#section-19.6.3&quot; tar=\r\nget=3D&quot;_blank&quot;&gt;http://tools.ietf.org/html/rfc2616#section-19.6.3&lt;/a&gt;&lt;br&gt;\n4.=\r\n &lt;a href=3D&quot;http://ftp.ics.uci.edu/pub/ietf/http/draft-pritchard-http-links=\r\n-00.txt&quot; target=3D&quot;_blank&quot;&gt;http://ftp.ics.uci.edu/pub/ietf/http/draft-pritc=\r\nhard-http-links-00.txt&lt;/a&gt;&lt;br&gt;\n5. &lt;a href=3D&quot;http://tools.ietf.org/html/rfc=\r\n2616#section-4.2&quot; target=3D&quot;_blank&quot;&gt;http://tools.ietf.org/html/rfc2616#sect=\r\nion-4.2&lt;/a&gt;&lt;br&gt;\n6. &lt;a href=3D&quot;http://www.mail-archive.com/bug-wget@.../=\r\nmsg00076.html&quot; target=3D&quot;_blank&quot;&gt;http://www.mail-archive.com/bug-wget@gnu.o=\r\nrg/msg00076.html&lt;/a&gt;&lt;br&gt;\n7. &lt;a href=3D&quot;http://bugs.python.org/issue1660009&quot;=\r\n target=3D&quot;_blank&quot;&gt;http://bugs.python.org/issue1660009&lt;/a&gt;&lt;br&gt;\n&lt;/div&gt;&lt;br&gt;\n\r\n--0015174bdcd8ce2814046d1797a7--\r\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":199324805,"authorName":"Guilherme Silveira","from":"Guilherme Silveira &lt;guilherme.silveira@...&gt;","profile":"guilherme_azevedo_silveira","replyTo":"SENDER","senderId":"DIFou9ultLMJIyjeYghJMMPELHIZ6n_2-52DAQ_UaEQy36Hw6ZDR3XSTNTI2EycLFyWafbAXrtKMeuI6c2PJaAB13T5KBXm_32oI7ZKjHfnpaTcLOrrLAmHatH8","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] RESTful M2M Systems and Resource Typing","postDate":"1260984847","msgId":14161,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDU4MWJmNjE2MDkxMjE2MDkzNHA1MDY1ZDhmN3k0YjcxOGJlMmU0NjVlZDNmQG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PGI1NDhkZjY1MDkxMjE2MDkxMWoxYWEwN2Q2ZHFhOGQxMjU5ZmE3Mjc0ODcwQG1haWwuZ21haWwuY29tPg==","referencesHeader":"PENCNEU1MkVDLTQ2RTktNDhFNC05QkY2LTVFNUVFMjg1NDM4OEBtYWMuY29tPgkgPGI1NDhkZjY1MDkxMjE2MDc1OHE0NjQzMDgwOHY4ODk4MzY5NDI4ZjVkOTE1QG1haWwuZ21haWwuY29tPgkgPDM0MkYwNEE0LUFCNzYtNEY5Qy04Mjg1LTU2QUFBMDE2Q0I0MEBtYWMuY29tPgkgPGI1NDhkZjY1MDkxMjE2MDkxMWoxYWEwN2Q2ZHFhOGQxMjU5ZmE3Mjc0ODcwQG1haWwuZ21haWwuY29tPg=="},"prevInTopic":14160,"nextInTopic":14162,"prevInTime":14160,"nextInTime":14162,"topicId":14156,"numMessagesInTopic":134,"msgSnippet":"You can create a small API that is generic enough to allow job registration, but your jobs are specific-resource aware: class DangerSLAJob def","rawEmail":"Return-Path: &lt;guilherme.silveira@...&gt;\r\nX-Sender: guilherme.silveira@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 32226 invoked from network); 16 Dec 2009 17:34:09 -0000\r\nX-Received: from unknown (66.196.94.105)\n  by m11.grp.re1.yahoo.com with QMQP; 16 Dec 2009 17:34:09 -0000\r\nX-Received: from unknown (HELO mail-yx0-f171.google.com) (209.85.210.171)\n  by mta1.grp.re1.yahoo.com with SMTP; 16 Dec 2009 17:34:09 -0000\r\nX-Received: by yxe1 with SMTP id 1so1196404yxe.3\n        for &lt;rest-discuss@yahoogroups.com&gt;; Wed, 16 Dec 2009 09:34:07 -0800 (PST)\r\nMIME-Version: 1.0\r\nX-Received: by 10.150.113.13 with SMTP id l13mr2075127ybc.248.1260984847151; \n\tWed, 16 Dec 2009 09:34:07 -0800 (PST)\r\nIn-Reply-To: &lt;b548df650912160911j1aa07d6dqa8d1259fa7274870@...&gt;\r\nReferences: &lt;CB4E52EC-46E9-48E4-9BF6-5E5EE2854388@...&gt;\n\t &lt;b548df650912160758q46430808v8898369428f5d915@...&gt;\n\t &lt;342F04A4-AB76-4F9C-8285-56AAA016CB40@...&gt;\n\t &lt;b548df650912160911j1aa07d6dqa8d1259fa7274870@...&gt;\r\nDate: Wed, 16 Dec 2009 15:34:07 -0200\r\nX-Google-Sender-Auth: e197e62dac3ab98a\r\nMessage-ID: &lt;581bf6160912160934p5065d8f7y4b718be2e465ed3f@...&gt;\r\nTo: mike amundsen &lt;mamund@...&gt;\r\nCc: Jan Algermissen &lt;algermissen1971@...&gt;, REST Discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Type: multipart/alternative; boundary=000e0cd3ae80e1f094047adbe99d\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Guilherme Silveira &lt;guilherme.silveira@...&gt;\r\nSubject: Re: [rest-discuss] RESTful M2M Systems and Resource Typing\r\nX-Yahoo-Group-Post: member; u=199324805; y=pNphKxzyUZbZJW5kB4d2RkRlIdAwubXOUb6o7PWmdGQAeiJS3Vpp3mARNcm8xUN5GGbNpew\r\nX-Yahoo-Profile: guilherme_azevedo_silveira\r\n\r\n\r\n--000e0cd3ae80e1f094047adbe99d\r\nContent-Type: text/plain; charset=windows-1252\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nYou can create a small API that is generic enough to allow job registration=\r\n,\nbut your jobs are specific-resource aware:\n\nclass DangerSLAJob\n  def self=\r\n.can_handle(r)\n    is_ticket(r) && r.status=3D=3D&#39;waiting_response&#39; && r.da=\r\nte &lt; Time.now-2.days\n  end\n\n  def self.is_ticket(r)\n    r.kind_of? Ticket\n =\r\n end\n\n  def initialize(r)\n    @resource =3D r\n  end\n\n  def execute\n    send=\r\n_mail_about @resource\n  end\n\nend\n\n# engine code\n\njobs =3D Jobs.list\n\nwhile =\r\ntrue\n  resources =3D Restfulie.at(uri).get\n  resources.each do |resource|\n =\r\n   jobs.for(resource).execute\n  end\nend\n\nSo now its just up to you to creat=\r\ne your jobs and register them in your\nqueue\n\nRegards\n\nGuilherme Silveira\nCa=\r\nelum | Ensino e Inova=E7=E3o\nhttp://www.caelum.com.br/\n\n\n2009/12/16 mike am=\r\nundsen &lt;mamund@...&gt;\n\n&gt;\n&gt;\n&gt; &lt;snip&gt;\n&gt;\n&gt; &gt; Another way to view this is t=\r\no ask the question: Assuming we had a bunch\n&gt; of\n&gt; &gt; media types for aonlin=\r\ne shopping, could you code a machine client for an\n&gt; &gt; online shop without =\r\nknowing that (or assuming that) from the\n&gt; representation\n&gt; &gt; of an item th=\r\nere will be a transition that you can follow to order the\n&gt; item\n&gt; &gt; and th=\r\nat this will somehow result in an order you can then modify or\n&gt; cancel?\n&gt; =\r\n&gt;\n&gt; &gt; In pseudo code\n&gt; &gt;\n&gt; &gt; GET /item/3\n&gt; &gt;\n&gt; &gt; orderURI =3D ...find order=\r\n link or form...\n&gt; &gt;\n&gt; &gt; POST orderURI\n&gt; &gt;\n&gt; &gt;\n&gt; &gt; The key issue is the &#39;..=\r\n.find order link or form...&#39; because it manifests\n&gt; &gt; the assumption that s=\r\nuch a thing MAY/SHOULD/MUST be findable and you\n&gt; cannot\n&gt; &gt; possibly base =\r\nthis assumption on knowing that /item/3 is a resource. You\n&gt; &gt; assme it is =\r\nan orderable item. This assumption is equivalent to a\n&gt; &#39;resource\n&gt; &gt; type&#39;=\r\n\n&gt; &lt;/snip&gt;\n&gt;\n&gt; Yep, if we want a machine client to seek a goal (shop online=\r\n, etc.),\n&gt; we have to have enough out-of-band information ahead of time in =\r\norder\n&gt; to program it accordingly.\n&gt;\n&gt; However, I don&#39;t think it&#39;s the _res=\r\nources_ that need to be\n&gt; documented. Instead, I think the key ingredient i=\r\ns a media-type that\n&gt; has sufficiently documented hypermedia constraints (l=\r\nink elements and\n&gt; rel values, along w/ important data elements) to communi=\r\ncate the\n&gt; semantics involved. In addition, I see no reason why the media-t=\r\nype\n&gt; needs to be scoped down to the resource. AFAICT, Atom has enough\n&gt; su=\r\npport for link-rels to make this work for a goal-seeking client.\n&gt; XHTML ce=\r\nrtainly contains enough of the parts as well.\n&gt;\n&gt; Clients to not need to kn=\r\now all the possible transition states, only\n&gt; the semantic information in t=\r\nhe representations returned. And that can\n&gt; be encapsulated in the hypermed=\r\nia (e.g. link elements and rel values).\n&gt; IOW, as long as a service properl=\r\ny decorates and documents the links\n&gt; in it&#39;s media-type representations ou=\r\nt-of-band, it should be possible\n&gt; to build a state-engine client to do the=\r\n work. If a group of similar\n&gt; service providers (online stores) can agree =\r\non the same out-of-band\n&gt; documentation, that state-engine client is now mo=\r\nre valuable.\n&gt;\n&gt;\n&gt; mca\n&gt; http://amundsen.com/blog/\n&gt;\n&gt; On Wed, Dec 16, 2009=\r\n at 11:36, Jan Algermissen &lt;algermissen1971@...&lt;algermissen1971%40mac.c=\r\nom&gt;&gt;\n&gt; wrote:\n&gt; &gt;\n&gt; &gt; On Dec 16, 2009, at 4:58 PM, mike amundsen wrote:\n&gt; &gt;=\r\n\n&gt; &gt;&gt; Jan:\n&gt; &gt;&gt;\n&gt; &gt;&gt; If I understand your description, you are talking abou=\r\nt creating a\n&gt; &gt;&gt; client that can search for helpdesk tickets (at some know=\r\nn URI, I\n&gt; &gt;&gt; assume) and, if one or more tickets come back in the response=\r\n\n&gt; &gt;&gt; representation, are then able to perform some action on the tickets\n&gt;=\r\n &gt;&gt; (change status, etc).\n&gt; &gt;\n&gt; &gt; Yes. But it was really only meant as an e=\r\nxample. The point is that\n&gt; &gt; the client makes assumptions about what comes=\r\n back. It assumes it is\n&gt; &gt; e.g. a ticket (or an entry as in the case of At=\r\nomPub, or an order etc.).\n&gt; &gt; IOW: the client does not simply assume the it=\r\nems are resources.\n&gt; &gt;\n&gt; &gt;&gt;\n&gt; &gt;&gt; I think this can be done by documenting a =\r\nmedia-type constraint that\n&gt; &gt;&gt; includes information to identify tickets.\n&gt;=\r\n &gt;&gt; &lt;link href=3D&quot;....&quot; rel=3D&quot;http://www.example.org/rels/ticket&quot; /&gt;\n&gt; &gt;\n&gt;=\r\n &gt; Yes. But when coding the client, you need to make use of the assumption\n=\r\n&gt; that\n&gt; &gt; you should look for that rel and this comes down to the assumpti=\r\non that\n&gt; the\n&gt; &gt; items in the collection are &#39;tickets&#39; (and not just resou=\r\nrces). You\n&gt; cannot\n&gt; &gt; code the client without knowing that you are going =\r\nto &#39;interact with&#39;\n&gt; &gt; tickets.\n&gt; &gt;\n&gt; &gt;&gt;\n&gt; &gt;&gt; Alternately, a similar approa=\r\nch could be used when the response\n&gt; &gt;&gt; representation includes more than j=\r\nust links, but actual tickets.\n&gt; &gt;&gt; &lt;tickets&gt;\n&gt; &gt;&gt;  &lt;ticket&gt;\n&gt; &gt;&gt;    &lt;link =\r\nhref=3D&quot;...&quot; rel=3D&quot;edit&quot; /&gt;\n&gt; &gt;&gt;    ...\n&gt; &gt;&gt;  &lt;/ticket&gt;\n&gt; &gt;&gt; &lt;/tickets&gt;\n&gt; =\r\n&gt;&gt;\n&gt; &gt;&gt; In both cases, the client can be coded to search the representation=\r\n\n&gt; &gt;&gt; for the proper elements and act accordingly.\n&gt; &gt;\n&gt; &gt; Yes. But (see ab=\r\nove) you code based on the assumptions that such &#39;kinds&#39;\n&gt; of\n&gt; &gt; resources=\r\n exist on the server. When you have a human facing client it is\n&gt; &gt; differe=\r\nnt, because then you just turn the links etc. found in the\n&gt; &gt; representati=\r\nons into buttons (e.g. [edit]) and let the human click on it.\n&gt; In\n&gt; &gt; thes=\r\ne human driven interactions, the human makes the same kinds of\n&gt; &gt; assumpti=\r\nons (e.g. when I interact with Amazon I assume I can select items\n&gt; &gt; and t=\r\nhen order them) but the assumptions do not manifets themselves in\n&gt; code.\n&gt;=\r\n &gt; For M2M clients they do and my point is that coding based on such\n&gt; &gt; as=\r\nsumptions is inevitably based on the server describing what *kinds* of\n&gt; &gt; =\r\nresource to expect. (The AtomPub spec has a section &#39;Resource\n&gt; &gt; Classific=\r\nation&#39; that does axactly this).\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;&gt;\n&gt; &gt;&gt; All this information can =\r\nbe documented the media-type used with the\n&gt; &gt;&gt; service including any speci=\r\nal element names, rel values, etc. viable\n&gt; &gt;&gt; actions on these links, etc.=\r\n\n&gt; &gt;&gt;\n&gt; &gt;&gt; &lt;snip&gt;\n&gt; &gt;&gt;&gt;\n&gt; &gt;&gt;&gt; Does anyone have an idea how to align this (I=\r\nMHO fact) with the\n&gt; &gt;&gt;&gt; constraint that no information about resource type=\r\ns must be made\n&gt; &gt;&gt;&gt; available to clients in RESTful systems?\n&gt; &gt;&gt;\n&gt; &gt;&gt; &lt;/s=\r\nnip&gt;\n&gt; &gt;&gt;\n&gt; &gt;&gt; Not sure I understand this last statement. Do you mean media=\r\n-types?\n&gt; &gt;\n&gt; &gt; No, resource types (e.g. AtomPub&#39;s collection, member, medi=\r\na-entry...)\n&gt; &gt;\n&gt; &gt;\n&gt; &gt; Another way to view this is to ask the question: As=\r\nsuming we had a bunch\n&gt; of\n&gt; &gt; media types for aonline shopping, could you =\r\ncode a machine client for an\n&gt; &gt; online shop without knowing that (or assum=\r\ning that) from the\n&gt; representation\n&gt; &gt; of an item there will be a transiti=\r\non that you can follow to order the\n&gt; item\n&gt; &gt; and that this will somehow r=\r\nesult in an order you can then modify or\n&gt; cancel?\n&gt; &gt;\n&gt; &gt; In pseudo code\n&gt;=\r\n &gt;\n&gt; &gt; GET /item/3\n&gt; &gt;\n&gt; &gt; orderURI =3D ...find order link or form...\n&gt; &gt;\n&gt;=\r\n &gt; POST orderURI\n&gt; &gt;\n&gt; &gt;\n&gt; &gt; The key issue is the &#39;...find order link or fo=\r\nrm...&#39; because it manifests\n&gt; &gt; the assumption that such a thing MAY/SHOULD=\r\n/MUST be findable and you\n&gt; cannot\n&gt; &gt; possibly base this assumption on kno=\r\nwing that /item/3 is a resource. You\n&gt; &gt; assme it is an orderable item. Thi=\r\ns assumption is equivalent to a\n&gt; &#39;resource\n&gt; &gt; type&#39;\n&gt; &gt;\n&gt; &gt; Jan\n&gt; &gt;\n&gt; &gt;\n&gt;=\r\n &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;&gt;\n&gt; &gt;&gt; mca\n&gt; &gt;&gt; http://amundsen.com/blog/\n&gt; &gt;=\r\n&gt;\n&gt; &gt;&gt;\n&gt; &gt;&gt;\n&gt; &gt;&gt;\n&gt; &gt;&gt; On Wed, Dec 16, 2009 at 10:21, Jan Algermissen &lt;alger=\r\nmissen1971@...&lt;algermissen1971%40mac.com&gt;\n&gt; &gt;\n&gt; &gt;&gt; wrote:\n&gt; &gt;&gt;&gt;\n&gt; &gt;&gt;&gt; I=\r\n can&#39;t help it: I see no possible way to implement a non-human-driven\n&gt; &gt;&gt;&gt;=\r\n client for a service without (in one way or another) classifying the\n&gt; &gt;&gt;&gt;=\r\n resources the service provides.\n&gt; &gt;&gt;&gt;\n&gt; &gt;&gt;&gt; For example, consider a helpde=\r\nsk ticket system: When writing a client\n&gt; &gt;&gt;&gt; that searches for tickets and=\r\n then updates the foo:status of the\n&gt; &gt;&gt;&gt; individual tickets contained in t=\r\nhe result set, I need to make the\n&gt; &gt;&gt;&gt; assumption that the result set cont=\r\nains tickets (and not just\n&gt; &gt;&gt;&gt; resources). In order to being able to make=\r\n such an assumptions, the\n&gt; &gt;&gt;&gt; classification information must be made ava=\r\nilable by the service. In\n&gt; &gt;&gt;&gt; addition, when client developers should be =\r\nenabled to develop clients\n&gt; &gt;&gt;&gt; before the services exist this information=\r\n is needed as some form of\n&gt; &gt;&gt;&gt; service type description. The specificatio=\r\nn of application/atomsrv+xml\n&gt; &gt;&gt;&gt; is a good example of such a service type=\r\n description.\n&gt; &gt;&gt;&gt;\n&gt; &gt;&gt;&gt; But however this is approached, it essentially co=\r\nmes down to telling\n&gt; &gt;&gt;&gt; the client what kinds of resources (IOW: kinds of=\r\n application states)\n&gt; &gt;&gt;&gt; to expect on the server. I just cannot code to u=\r\npdate the resource\n&gt; &gt;&gt;&gt; foo:status when I have now clue that this user goa=\r\nl is applicable to\n&gt; &gt;&gt;&gt; the resource in the first place.\n&gt; &gt;&gt;&gt;\n&gt; &gt;&gt;&gt; Does =\r\nanyone have an idea how to align this (IMHO fact) with the\n&gt; &gt;&gt;&gt; constraint=\r\n that no information about resource types must be made\n&gt; &gt;&gt;&gt; available to c=\r\nlients in RESTful systems?\n&gt; &gt;&gt;&gt;\n&gt; &gt;&gt;&gt; Jan\n&gt; &gt;&gt;&gt;\n&gt; &gt;&gt;&gt; P.S. In human driven=\r\n interactions the situation is different: We still\n&gt; &gt;&gt;&gt; have knowledge of =\r\nthe resource type iin general (we know a trouble\n&gt; &gt;&gt;&gt; ticket when we see o=\r\nne) but we are not dependent on knowing that the\n&gt; &gt;&gt;&gt; result of some inter=\r\naction will be a trouble ticket. We can allways\n&gt; &gt;&gt;&gt; follow some human-tar=\r\ngeted links and make a few hops to reach the\n&gt; &gt;&gt;&gt; trouble ticket resource =\r\nwe expect should be &#39;somwehere&#39;. M2M clients\n&gt; &gt;&gt;&gt; do not have that luxury =\r\n(unless we apply some form of AI I guess).\n&gt; &gt;&gt;&gt;\n&gt; &gt;&gt;&gt;\n&gt; &gt;&gt;&gt; --------------=\r\n----------------------\n&gt; &gt;&gt;&gt;\n&gt; &gt;&gt;&gt; Yahoo! Groups Links\n&gt; &gt;&gt;&gt;\n&gt; &gt;&gt;&gt;\n&gt; &gt;&gt;&gt;\n&gt; =\r\n&gt;&gt;&gt;\n&gt; &gt;\n&gt; &gt; --------------------------------------\n&gt; &gt; Jan Algermissen\n&gt; &gt;\n=\r\n&gt; &gt; Mail: algermissen@... &lt;algermissen%40acm.org&gt;\n&gt; &gt; Blog: http://alge=\r\nrmissen.blogspot.com/\n&gt; &gt; Home: http://www.jalgermissen.com\n&gt; &gt; -----------=\r\n---------------------------\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt;\n&gt;  \n&gt;\n\r\n--000e0cd3ae80e1f094047adbe99d\r\nContent-Type: text/html; charset=windows-1252\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nYou can create a small API that is generic enough to allow job registration=\r\n, but your jobs are specific-resource aware:&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;class Dange=\r\nrSLAJob&lt;/div&gt;&lt;div&gt;=A0=A0def self.can_handle(r)&lt;/div&gt;&lt;div&gt;=A0=A0 =A0is_ticke=\r\nt(r)=A0&amp;&amp; r.status=3D=3D&#39;waiting_response&#39; &amp;&amp; r.dat=\r\ne &lt; Time.now-2.days&lt;/div&gt;\n&lt;div&gt;=A0=A0end&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;=A0=A0=\r\ndef self.is_ticket(r)&lt;/div&gt;&lt;div&gt;=A0=A0 =A0r.kind_of? Ticket=A0&lt;/div&gt;&lt;div&gt;=\r\n=A0=A0end&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;=A0=A0def initialize(r)&lt;/div&gt;&lt;div&gt;=A0=A0=\r\n =A0@resource =3D r&lt;/div&gt;&lt;div&gt;=A0=A0end&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;\n=A0=A0def=\r\n execute&lt;/div&gt;&lt;div&gt;=A0=A0 =A0send_mail_about @resource&lt;/div&gt;&lt;div&gt;=A0=A0end&lt;=\r\n/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;end&lt;br&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;# engine code&lt;/div&gt;&lt;div=\r\n&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;jobs =3D Jobs.list&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;while true&lt;/div=\r\n&gt;&lt;div&gt;\n=A0=A0resources =3D Restfulie.at(uri).get&lt;/div&gt;&lt;div&gt;=A0=A0resources.=\r\neach do |resource|&lt;/div&gt;&lt;div&gt;=A0=A0 =A0jobs.for(resource).execute&lt;/div&gt;&lt;div=\r\n&gt;=A0=A0end&lt;/div&gt;&lt;div&gt;end&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;So now its just up to you=\r\n to create your jobs and register them in your queue&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;=\r\ndiv&gt;Regards&lt;/div&gt;&lt;div&gt;&lt;br clear=3D&quot;all&quot;&gt;Guilherme Silveira&lt;br&gt;Caelum | Ensi=\r\nno e Inova=E7=E3o&lt;br&gt;&lt;a href=3D&quot;http://www.caelum.com.br/&quot;&gt;http://www.caelu=\r\nm.com.br/&lt;/a&gt;&lt;br&gt;\n&lt;br&gt;&lt;br&gt;&lt;div class=3D&quot;gmail_quote&quot;&gt;2009/12/16 mike amunds=\r\nen &lt;span dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:mamund@...&quot;&gt;mamund@yahoo.c=\r\nom&lt;/a&gt;&gt;&lt;/span&gt;&lt;br&gt;&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;margin:0 0 =\r\n0 .8ex;border-left:1px #ccc solid;padding-left:1ex;&quot;&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;div st=\r\nyle=3D&quot;background-color:#fff&quot;&gt;\n&lt;span&gt;=A0&lt;/span&gt;\n\n\n&lt;div&gt;\n  &lt;div&gt;\n\n\n    &lt;div&gt;=\r\n\n      \n      \n      &lt;p&gt;&lt;snip&gt;&lt;/p&gt;&lt;div class=3D&quot;im&quot;&gt;&lt;br&gt;\n&gt; Another=\r\n way to view this is to ask the question: Assuming we had a bunch of&lt;br&gt;\n&g=\r\nt; media types for aonline shopping, could you code a machine client for an=\r\n&lt;br&gt;\n&gt; online shop without knowing that (or assuming that) from the repr=\r\nesentation&lt;br&gt;\n&gt; of an item there will be a transition that you can foll=\r\now to order the item&lt;br&gt;\n&gt; and that this will somehow result in an order=\r\n you can then modify or cancel?&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; In pseudo code&lt;br&gt;\n&gt;&lt;b=\r\nr&gt;\n&gt; GET /item/3&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; orderURI =3D ...find order link or fo=\r\nrm...&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; POST orderURI&lt;br&gt;\n&gt;&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; The key is=\r\nsue is the &#39;...find order link or form...&#39; because it manifests&lt;br&gt;=\r\n\n&gt; the assumption that such a thing MAY/SHOULD/MUST be findable and you =\r\ncannot&lt;br&gt;\n&gt; possibly base this assumption on knowing that /item/3 is a =\r\nresource. You&lt;br&gt;\n&gt; assme it is an orderable item. This assumption is eq=\r\nuivalent to a &#39;resource&lt;br&gt;\n&gt; type&#39;&lt;br&gt;&lt;/div&gt;\n&lt;/snip&gt;&lt;br&gt;\n=\r\n&lt;br&gt;\nYep, if we want a machine client to seek a goal (shop online, etc.),&lt;b=\r\nr&gt;\nwe have to have enough out-of-band information ahead of time in order&lt;br=\r\n&gt;\nto program it accordingly.&lt;br&gt;\n&lt;br&gt;\nHowever, I don&#39;t think it&#39;s t=\r\nhe _resources_ that need to be&lt;br&gt;\ndocumented. Instead, I think the key ing=\r\nredient is a media-type that&lt;br&gt;\nhas sufficiently documented hypermedia con=\r\nstraints (link elements and&lt;br&gt;\nrel values, along w/ important data element=\r\ns) to communicate the&lt;br&gt;\nsemantics involved. In addition, I see no reason =\r\nwhy the media-type&lt;br&gt;\nneeds to be scoped down to the resource. AFAICT, Ato=\r\nm has enough&lt;br&gt;\nsupport for link-rels to make this work for a goal-seeking=\r\n client.&lt;br&gt;\nXHTML certainly contains enough of the parts as well.&lt;br&gt;\n&lt;br&gt;=\r\n\nClients to not need to know all the possible transition states, only&lt;br&gt;\nt=\r\nhe semantic information in the representations returned. And that can&lt;br&gt;\nb=\r\ne encapsulated in the hypermedia (e.g. link elements and rel values).&lt;br&gt;\nI=\r\nOW, as long as a service properly decorates and documents the links&lt;br&gt;\nin =\r\nit&#39;s media-type representations out-of-band, it should be possible&lt;br&gt;\n=\r\nto build a state-engine client to do the work. If a group of similar&lt;br&gt;\nse=\r\nrvice providers (online stores) can agree on the same out-of-band&lt;br&gt;\ndocum=\r\nentation, that state-engine client is now more valuable.&lt;div class=3D&quot;im&quot;&gt;&lt;=\r\nbr&gt;\n&lt;br&gt;\nmca&lt;br&gt;\n&lt;a href=3D&quot;http://amundsen.com/blog/&quot; target=3D&quot;_blank&quot;&gt;ht=\r\ntp://amundsen.com/blog/&lt;/a&gt;&lt;br&gt;\n&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;div class=3D&quot;h5&quot;=\r\n&gt;\nOn Wed, Dec 16, 2009 at 11:36, Jan Algermissen &lt;&lt;a href=3D&quot;mailto:alge=\r\nrmissen1971%40mac.com&quot; target=3D&quot;_blank&quot;&gt;algermissen1971@...&lt;/a&gt;&gt; wr=\r\note:&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; On Dec 16, 2009, at 4:58 PM, mike amundsen wrote:&lt;br=\r\n&gt;\n&gt;&lt;br&gt;\n&gt;&gt; Jan:&lt;br&gt;\n&gt;&gt;&lt;br&gt;\n&gt;&gt; If I understand your des=\r\ncription, you are talking about creating a&lt;br&gt;\n&gt;&gt; client that can sea=\r\nrch for helpdesk tickets (at some known URI, I&lt;br&gt;\n&gt;&gt; assume) and, if=\r\n one or more tickets come back in the response&lt;br&gt;\n&gt;&gt; representation,=\r\n are then able to perform some action on the tickets&lt;br&gt;\n&gt;&gt; (change s=\r\ntatus, etc).&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; Yes. But it was really only meant as an exam=\r\nple. The point is that&lt;br&gt;\n&gt; the client makes assumptions about what com=\r\nes back. It assumes it is&lt;br&gt;\n&gt; e.g. a ticket (or an entry as in the cas=\r\ne of AtomPub, or an order etc.).&lt;br&gt;\n&gt; IOW: the client does not simply a=\r\nssume the items are resources.&lt;br&gt;\n&gt;&lt;br&gt;\n&gt;&gt;&lt;br&gt;\n&gt;&gt; I think t=\r\nhis can be done by documenting a media-type constraint that&lt;br&gt;\n&gt;&gt; in=\r\ncludes information to identify tickets.&lt;br&gt;\n&gt;&gt; &lt;link href=3D&quot;=\r\n....&quot; rel=3D&quot;&lt;a href=3D&quot;http://www.example.org/rels/ticket&quot; targe=\r\nt=3D&quot;_blank&quot;&gt;http://www.example.org/rels/ticket&lt;/a&gt;&quot; /&gt;&lt;br&gt;\n&gt;&lt;br=\r\n&gt;\n&gt; Yes. But when coding the client, you need to make use of the assumpt=\r\nion that&lt;br&gt;\n&gt; you should look for that rel and this comes down to the a=\r\nssumption that the&lt;br&gt;\n&gt; items in the collection are &#39;tickets&#39; (=\r\nand not just resources). You cannot&lt;br&gt;\n&gt; code the client without knowin=\r\ng that you are going to &#39;interact with&#39;&lt;br&gt;\n&gt; tickets.&lt;br&gt;\n&gt;&lt;=\r\nbr&gt;\n&gt;&gt;&lt;br&gt;\n&gt;&gt; Alternately, a similar approach could be used whe=\r\nn the response&lt;br&gt;\n&gt;&gt; representation includes more than just links, b=\r\nut actual tickets.&lt;br&gt;\n&gt;&gt; &lt;tickets&gt;&lt;br&gt;\n&gt;&gt; =A0&lt;ticket&=\r\ngt;&lt;br&gt;\n&gt;&gt; =A0 =A0&lt;link href=3D&quot;...&quot; rel=3D&quot;edit&qu=\r\not; /&gt;&lt;br&gt;\n&gt;&gt; =A0 =A0...&lt;br&gt;\n&gt;&gt; =A0&lt;/ticket&gt;&lt;br&gt;\n&gt;&=\r\ngt; &lt;/tickets&gt;&lt;br&gt;\n&gt;&gt;&lt;br&gt;\n&gt;&gt; In both cases, the client ca=\r\nn be coded to search the representation&lt;br&gt;\n&gt;&gt; for the proper element=\r\ns and act accordingly.&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; Yes. But (see above) you code base=\r\nd on the assumptions that such &#39;kinds&#39; of&lt;br&gt;\n&gt; resources exist =\r\non the server. When you have a human facing client it is&lt;br&gt;\n&gt; different=\r\n, because then you just turn the links etc. found in the&lt;br&gt;\n&gt; represent=\r\nations into buttons (e.g. [edit]) and let the human click on it. In&lt;br&gt;\n&gt=\r\n; these human driven interactions, the human makes the same kinds of&lt;br&gt;\n&g=\r\nt; assumptions (e.g. when I interact with Amazon I assume I can select item=\r\ns&lt;br&gt;\n&gt; and then order them) but the assumptions do not manifets themsel=\r\nves in code.&lt;br&gt;\n&gt; For M2M clients they do and my point is that coding b=\r\nased on such&lt;br&gt;\n&gt; assumptions is inevitably based on the server describ=\r\ning what *kinds* of&lt;br&gt;\n&gt; resource to expect. (The AtomPub spec has a se=\r\nction &#39;Resource&lt;br&gt;\n&gt; Classification&#39; that does axactly this).&lt;b=\r\nr&gt;\n&gt;&lt;br&gt;\n&gt;&lt;br&gt;\n&gt;&gt;&lt;br&gt;\n&gt;&gt; All this information can be docu=\r\nmented the media-type used with the&lt;br&gt;\n&gt;&gt; service including any spec=\r\nial element names, rel values, etc. viable&lt;br&gt;\n&gt;&gt; actions on these li=\r\nnks, etc.&lt;br&gt;\n&gt;&gt;&lt;br&gt;\n&gt;&gt; &lt;snip&gt;&lt;br&gt;\n&gt;&gt;&gt;&lt;br&gt;\n&gt;&=\r\ngt;&gt; Does anyone have an idea how to align this (IMHO fact) with the&lt;br&gt;=\r\n\n&gt;&gt;&gt; constraint that no information about resource types must be m=\r\nade&lt;br&gt;\n&gt;&gt;&gt; available to clients in RESTful systems?&lt;br&gt;\n&gt;&gt;&lt;=\r\nbr&gt;\n&gt;&gt; &lt;/snip&gt;&lt;br&gt;\n&gt;&gt;&lt;br&gt;\n&gt;&gt; Not sure I understand =\r\nthis last statement. Do you mean media-types?&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; No, resourc=\r\ne types (e.g. AtomPub&#39;s collection, member, media-entry...)&lt;br&gt;\n&gt;&lt;br=\r\n&gt;\n&gt;&lt;br&gt;\n&gt; Another way to view this is to ask the question: Assuming w=\r\ne had a bunch of&lt;br&gt;\n&gt; media types for aonline shopping, could you code =\r\na machine client for an&lt;br&gt;\n&gt; online shop without knowing that (or assum=\r\ning that) from the representation&lt;br&gt;\n&gt; of an item there will be a trans=\r\nition that you can follow to order the item&lt;br&gt;\n&gt; and that this will som=\r\nehow result in an order you can then modify or cancel?&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; In=\r\n pseudo code&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; GET /item/3&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; orderURI =3D .=\r\n..find order link or form...&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; POST orderURI&lt;br&gt;\n&gt;&lt;br&gt;\n&=\r\ngt;&lt;br&gt;\n&gt; The key issue is the &#39;...find order link or form...&#39; b=\r\necause it manifests&lt;br&gt;\n&gt; the assumption that such a thing MAY/SHOULD/MU=\r\nST be findable and you cannot&lt;br&gt;\n&gt; possibly base this assumption on kno=\r\nwing that /item/3 is a resource. You&lt;br&gt;\n&gt; assme it is an orderable item=\r\n. This assumption is equivalent to a &#39;resource&lt;br&gt;\n&gt; type&#39;&lt;br&gt;\n&=\r\ngt;&lt;br&gt;\n&gt; Jan&lt;br&gt;\n&gt;&lt;br&gt;\n&gt;&lt;br&gt;\n&gt;&lt;br&gt;\n&gt;&lt;br&gt;\n&gt;&lt;br&gt;\n&gt;&lt;br&gt;\n=\r\n&gt;&lt;br&gt;\n&gt;&lt;br&gt;\n&gt;&lt;br&gt;\n&gt;&gt;&lt;br&gt;\n&gt;&gt; mca&lt;br&gt;\n&gt;&gt; &lt;a href=\r\n=3D&quot;http://amundsen.com/blog/&quot; target=3D&quot;_blank&quot;&gt;http://amundsen.com/blog/&lt;=\r\n/a&gt;&lt;br&gt;\n&gt;&gt;&lt;br&gt;\n&gt;&gt;&lt;br&gt;\n&gt;&gt;&lt;br&gt;\n&gt;&gt;&lt;br&gt;\n&gt;&gt; On Wed=\r\n, Dec 16, 2009 at 10:21, Jan Algermissen &lt;&lt;a href=3D&quot;mailto:algermissen1=\r\n971%40mac.com&quot; target=3D&quot;_blank&quot;&gt;algermissen1971@...&lt;/a&gt;&gt;&lt;br&gt;\n&gt;&g=\r\nt; wrote:&lt;br&gt;\n&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt; I can&#39;t help it: I see no p=\r\nossible way to implement a non-human-driven&lt;br&gt;\n&gt;&gt;&gt; client for a s=\r\nervice without (in one way or another) classifying the&lt;br&gt;\n&gt;&gt;&gt; res=\r\nources the service provides.&lt;br&gt;\n&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt; For example,=\r\n consider a helpdesk ticket system: When writing a client&lt;br&gt;\n&gt;&gt;&gt; =\r\nthat searches for tickets and then updates the foo:status of the&lt;br&gt;\n&gt;&g=\r\nt;&gt; individual tickets contained in the result set, I need to make the&lt;b=\r\nr&gt;\n&gt;&gt;&gt; assumption that the result set contains tickets (and not ju=\r\nst&lt;br&gt;\n&gt;&gt;&gt; resources). In order to being able to make such an assu=\r\nmptions, the&lt;br&gt;\n&gt;&gt;&gt; classification information must be made avail=\r\nable by the service. In&lt;br&gt;\n&gt;&gt;&gt; addition, when client developers s=\r\nhould be enabled to develop clients&lt;br&gt;\n&gt;&gt;&gt; before the services ex=\r\nist this information is needed as some form of&lt;br&gt;\n&gt;&gt;&gt; service typ=\r\ne description. The specification of application/atomsrv+xml&lt;br&gt;\n&gt;&gt;&gt=\r\n; is a good example of such a service type description.&lt;br&gt;\n&gt;&gt;&gt;&lt;br=\r\n&gt;\n&gt;&gt;&gt; But however this is approached, it essentially comes down to=\r\n telling&lt;br&gt;\n&gt;&gt;&gt; the client what kinds of resources (IOW: kinds of=\r\n application states)&lt;br&gt;\n&gt;&gt;&gt; to expect on the server. I just canno=\r\nt code to update the resource&lt;br&gt;\n&gt;&gt;&gt; foo:status when I have now c=\r\nlue that this user goal is applicable to&lt;br&gt;\n&gt;&gt;&gt; the resource in t=\r\nhe first place.&lt;br&gt;\n&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt; Does anyone have an idea =\r\nhow to align this (IMHO fact) with the&lt;br&gt;\n&gt;&gt;&gt; constraint that no =\r\ninformation about resource types must be made&lt;br&gt;\n&gt;&gt;&gt; available to=\r\n clients in RESTful systems?&lt;br&gt;\n&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt; Jan&lt;br&gt;\n&gt;=\r\n&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt; P.S. In human driven interactions the situation i=\r\ns different: We still&lt;br&gt;\n&gt;&gt;&gt; have knowledge of the resource type =\r\niin general (we know a trouble&lt;br&gt;\n&gt;&gt;&gt; ticket when we see one) but=\r\n we are not dependent on knowing that the&lt;br&gt;\n&gt;&gt;&gt; result of some i=\r\nnteraction will be a trouble ticket. We can allways&lt;br&gt;\n&gt;&gt;&gt; follow=\r\n some human-targeted links and make a few hops to reach the&lt;br&gt;\n&gt;&gt;&gt=\r\n; trouble ticket resource we expect should be &#39;somwehere&#39;. M2M clie=\r\nnts&lt;br&gt;\n&gt;&gt;&gt; do not have that luxury (unless we apply some form of =\r\nAI I guess).&lt;br&gt;\n&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt; -----------=\r\n-------------------------&lt;br&gt;\n&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt; Yahoo! Groups L=\r\ninks&lt;br&gt;\n&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt;&lt;br&gt;\n&gt;&gt;&gt;&lt;br=\r\n&gt;\n&gt;&lt;br&gt;\n&gt; --------------------------------------&lt;br&gt;\n&gt; Jan Algermi=\r\nssen&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; Mail: &lt;a href=3D&quot;mailto:algermissen%40acm.org&quot; targe=\r\nt=3D&quot;_blank&quot;&gt;algermissen@...&lt;/a&gt;&lt;br&gt;\n&gt; Blog: &lt;a href=3D&quot;http://alger=\r\nmissen.blogspot.com/&quot; target=3D&quot;_blank&quot;&gt;http://algermissen.blogspot.com/&lt;/a=\r\n&gt;&lt;br&gt;\n&gt; Home: &lt;a href=3D&quot;http://www.jalgermissen.com&quot; target=3D&quot;_blank&quot;&gt;=\r\nhttp://www.jalgermissen.com&lt;/a&gt;&lt;br&gt;\n&gt; ----------------------------------=\r\n----&lt;br&gt;\n&gt;&lt;br&gt;\n&gt;&lt;br&gt;\n&gt;&lt;br&gt;\n&gt;&lt;br&gt;\n&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;\n\n    &lt;/div=\r\n&gt;\n     \n\n    \n    &lt;div style=3D&quot;color:#fff;min-height:0&quot;&gt;&lt;/div&gt;\n\n\n&lt;/div&gt;\n\n\n=\r\n\n  \n\n\n\n\n\n\n&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;\n\r\n--000e0cd3ae80e1f094047adbe99d--\r\n\n"}}
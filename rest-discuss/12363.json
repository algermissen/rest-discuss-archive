{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":279478415,"authorName":"amsmota@gmail.com","from":"amsmota@...","profile":"amsmota","replyTo":"SENDER","senderId":"_T5RJ9P5GL6wiZDgy2wF6U3_4QeZm18bMPM-hFbvcPQPF_M-6b_JXRpfoeHpKVYhx8GOGPLmYXA","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: Re: [rest-discuss] Why HATEOAS?","postDate":"1238577061","msgId":12363,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDAwMTUxNzRiZGZkOGM2YjMwZTA0NjY3YWIxNzNAZ29vZ2xlLmNvbT4=","inReplyToHeader":"PGY4YjM5YWNlMDkwMzMxMTc1OWwzY2JjZGFmNWoyZDkwZWU5NzJhMjJmNGFiQG1haWwuZ21haWwuY29tPg=="},"prevInTopic":12362,"nextInTopic":12364,"prevInTime":12362,"nextInTime":12364,"topicId":12357,"numMessagesInTopic":27,"msgSnippet":"Excellent explanation, you should publish that somewhere for easy reference. I think this will give me the final argument to convince my boss to give me the","rawEmail":"Return-Path: &lt;amsmota@...&gt;\r\nX-Sender: amsmota@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 3390 invoked from network); 1 Apr 2009 09:11:24 -0000\r\nX-Received: from unknown (98.137.34.45)\n  by m1.grp.re1.yahoo.com with QMQP; 1 Apr 2009 09:11:24 -0000\r\nX-Received: from unknown (HELO mail-ew0-f230.google.com) (209.85.219.230)\n  by mta2.grp.sp2.yahoo.com with SMTP; 1 Apr 2009 09:11:24 -0000\r\nX-Received: by ewy14 with SMTP id 14so167079ewy.0\n        for &lt;rest-discuss@yahoogroups.com&gt;; Wed, 01 Apr 2009 02:11:01 -0700 (PDT)\r\nMIME-Version: 1.0\r\nIn-Reply-To: &lt;f8b39ace0903311759l3cbcdaf5j2d90ee972a22f4ab@...&gt;\r\nX-Received: by 10.210.12.18 with SMTP id 18mr363098ebl.4.1238577061470; Wed, 01 \n\tApr 2009 02:11:01 -0700 (PDT)\r\nMessage-ID: &lt;0015174bdfd8c6b30e04667ab173@...&gt;\r\nDate: Wed, 01 Apr 2009 09:11:01 +0000\r\nTo: Craig McClanahan &lt;craigmcc@...&gt;, Solomon Duskis &lt;sduskis@...&gt;, \n\tRest List &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Type: multipart/alternative; boundary=0015174bdfd8c6b2eb04667ab170\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: amsmota@...\r\nSubject: Re: Re: [rest-discuss] Why HATEOAS?\r\nX-Yahoo-Group-Post: member; u=279478415; y=35zVi_auNvEFlLNprzOty7-alnITLbC3kgauUXzonknn3w\r\nX-Yahoo-Profile: amsmota\r\n\r\n\r\n--0015174bdfd8c6b2eb04667ab170\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed; delsp=yes\r\nContent-Transfer-Encoding: 7bit\r\n\r\nExcellent explanation, you should publish that somewhere for easy  \nreference. I think this will give me the final argument to convince my boss  \nto give me the extra-time i need to fully implement hateoas in our  \ninfrastructure...\n\nOn Apr 1, 2009 1:59am, Craig McClanahan &lt;craigmcc@...&gt; wrote:\n\n\n\n\n\n\n\n\n\n&gt; On Tue, Mar 31, 2009 at 5:01 PM, Solomon Duskis sduskis@...&gt; wrote:\n\n\n\n&gt; &gt; [snip]\n\n&gt; &gt; Assuming that the practical barriers of entry are removed, what  \n&gt; practical\n\n&gt; &gt; benefits will we see?\n\n&gt; &gt;\n\n\n\n&gt; I know exactly where you are coming from with these questions ... I\n\n&gt; felt the same way until recently. I&#39;ve designed several REST APIs\n\n&gt; over the last couple of years, but up until the most recent one, I\n\n&gt; designed and documented them in the &quot;typical&quot; way, describing the URI\n\n&gt; structure of the application and letting the client figure out what to\n\n&gt; send when. My most recent effort is contributing to the design of the\n\n&gt; REST architecture for the Sun Cloud API[1] to control virtual\n\n&gt; machines and so on. In addition, I&#39;m very focused on writing client\n\n&gt; language bindings for this API in multiple languages (Ruby, Python,\n\n&gt; Java) ... so I get a first hand feel for programming to this API at a\n\n&gt; very low level.\n\n\n\n&gt; We started from the presumption that the service would publish only\n\n&gt; *one* well-known URI (returning a &quot;cloud&quot; representation containing\n\n&gt; representations for, and/or URI links to representations for, all the\n\n&gt; cloud resources that are accessible to the calling user). Every other\n\n&gt; URI in the entire system (including all those that do state changes)\n\n&gt; are discovered by examining these representations. Even in the early\n\n&gt; days, I can see some significant, practical, short term benefits we\n\n&gt; have gained from taking this approach:\n\n\n\n&gt; * REDUCED CLIENT CODING ERRORS. Looking back at all the REST client\n\n&gt; side interfaces\n\n&gt; that I, or people I work with, have built, about 90% of the bugs\n\n&gt; have been in the construction\n\n&gt; of the right URIs for the server. Typical mistakes are leaving out\n\n&gt; path segments, getting them\n\n&gt; in the wrong order, or forgetting to URL encode things. All this\n\n&gt; goes away when the server\n\n&gt; hands you exactly the right URI to use for every circumstance.\n\n\n\n&gt; * REDUCED INVALID STATE TRANSITION CALLS. When the client decides\n\n&gt; which URI to call and\n\n&gt; when, they run the risk of attempting to request state transitions\n\n&gt; that are not valid for the current\n\n&gt; state of the server side resource. An example from my problem\n\n&gt; domain ... it&#39;s not allowed to\n\n&gt; &quot;start&quot; a virtual machine (VM) until you have &quot;deployed&quot; it. The\n\n&gt; server knows about URIs to\n\n&gt; initiate each of the state changes (via a POST), but the\n\n&gt; representation of the VM lists only the\n\n&gt; URIs for state transitions that are valid from the current state.\n\n&gt; This makes it extremely easy\n\n&gt; for the client to understand that trying to start a VM that hasn&#39;t\n\n&gt; been deployed yet is not legal,\n\n&gt; because there will be no corresponding URI in the VM representation.\n\n\n\n&gt; * FINE GRAINED EVOLUTION WITHOUT (NECESSARILY) BREAKING OLD CLIENTS.\n\n&gt; At any given time, the client of any REST API is going to be\n\n&gt; programmed with *some* assumptions\n\n&gt; about what the system can do. But, if you document a restriction to\n\n&gt; &quot;pay attention to only those\n\n&gt; aspects of the representation that you know about&quot;, plus a server\n\n&gt; side discipline to add things later\n\n&gt; that don&#39;t disrupt previous behavior, you can evolve APIs fairly\n\n&gt; quickly without breaking all clients,\n\n&gt; or having to support multiple versions of the API simultaneously on\n\n&gt; your server. You don&#39;t have to\n\n&gt; wait years for serendipity benefits :-). Especially compared to\n\n&gt; something like SOAP where the\n\n&gt; syntax of your representations is versioned (in the WSDL), so you\n\n&gt; have to mess with the clients\n\n&gt; on every single change.\n\n\n\n&gt; Having drunk the HATEOAS koolaid now, I would have a really hard time\n\n&gt; going back :-).\n\n\n\n&gt; Craig McClanahan\n\n\n\n&gt; [1] http://kenai.com/projects/suncloudapis/pages/Home\n\n\n\n\n\n\n\n\n&gt; \n\n\n\n\n\r\n--0015174bdfd8c6b2eb04667ab170\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nExcellent explanation, you should publish that somewhere for easy reference=\r\n. I think this will give me the final argument to convince my boss to give =\r\nme the extra-time i need to fully implement hateoas in our infrastructure..=\r\n.&lt;br /&gt;&lt;br /&gt;On Apr 1, 2009 1:59am, Craig McClanahan &lt;craigmcc@...=\r\n&gt; wrote:&lt;br /&gt;&gt; &lt;br /&gt;&gt; &lt;br /&gt;&gt; &lt;br /&gt;&gt; &lt;br /&gt;&gt; &lt;br /&gt;&gt=\r\n; &lt;br /&gt;&gt; &lt;br /&gt;&gt;     &lt;br /&gt;&gt;             &lt;br /&gt;&gt; On Tue, Mar 3=\r\n1, 2009 at 5:01 PM, Solomon Duskis sduskis@...&gt; wrote:&lt;br /&gt;&gt; &lt;=\r\nbr /&gt;&gt; &lt;br /&gt;&gt; &lt;br /&gt;&gt; &gt; [snip]&lt;br /&gt;&gt; &lt;br /&gt;&gt; &gt; Assum=\r\ning that the practical barriers of entry are removed, what practical&lt;br /&gt;&=\r\ngt; &lt;br /&gt;&gt; &gt; benefits will we see?&lt;br /&gt;&gt; &lt;br /&gt;&gt; &gt;&lt;br /&gt;&g=\r\nt; &lt;br /&gt;&gt; &lt;br /&gt;&gt; &lt;br /&gt;&gt; I know exactly where you are coming fro=\r\nm with these questions ... I&lt;br /&gt;&gt; &lt;br /&gt;&gt; felt the same way until r=\r\necently.  I&#39;ve designed several REST APIs&lt;br /&gt;&gt; &lt;br /&gt;&gt; over the=\r\n last couple of years, but up until the most recent one, I&lt;br /&gt;&gt; &lt;br /&gt;=\r\n&gt; designed and documented them in the &quot;typical&quot; way, describin=\r\ng the URI&lt;br /&gt;&gt; &lt;br /&gt;&gt; structure of the application and letting the=\r\n client figure out what to&lt;br /&gt;&gt; &lt;br /&gt;&gt; send when.  My most recent =\r\neffort is contributing to the design of the&lt;br /&gt;&gt; &lt;br /&gt;&gt; REST archi=\r\ntecture for the Sun Cloud API[1]  to control virtual&lt;br /&gt;&gt; &lt;br /&gt;&gt; m=\r\nachines and so on.  In addition, I&#39;m very focused on writing client&lt;br =\r\n/&gt;&gt; &lt;br /&gt;&gt; language bindings for this API in multiple languages (Rub=\r\ny, Python,&lt;br /&gt;&gt; &lt;br /&gt;&gt; Java) ... so I get a first hand feel for pr=\r\nogramming to this API at a&lt;br /&gt;&gt; &lt;br /&gt;&gt; very low level.&lt;br /&gt;&gt; &lt;=\r\nbr /&gt;&gt; &lt;br /&gt;&gt; &lt;br /&gt;&gt; We started from the presumption that the se=\r\nrvice would publish only&lt;br /&gt;&gt; &lt;br /&gt;&gt; *one* well-known URI (returni=\r\nng a &quot;cloud&quot; representation containing&lt;br /&gt;&gt; &lt;br /&gt;&gt; repre=\r\nsentations for, and/or URI links to representations for, all the&lt;br /&gt;&gt; =\r\n&lt;br /&gt;&gt; cloud resources that are accessible to the calling user).  Every=\r\n other&lt;br /&gt;&gt; &lt;br /&gt;&gt; URI in the entire system (including all those t=\r\nhat do state changes)&lt;br /&gt;&gt; &lt;br /&gt;&gt; are discovered by examining thes=\r\ne representations.  Even in the early&lt;br /&gt;&gt; &lt;br /&gt;&gt; days, I can see =\r\nsome significant, practical, short term benefits we&lt;br /&gt;&gt; &lt;br /&gt;&gt; ha=\r\nve gained from taking this approach:&lt;br /&gt;&gt; &lt;br /&gt;&gt; &lt;br /&gt;&gt; &lt;br /&gt;=\r\n&gt; * REDUCED CLIENT CODING ERRORS.  Looking back at all the REST client&lt;b=\r\nr /&gt;&gt; &lt;br /&gt;&gt; side interfaces&lt;br /&gt;&gt; &lt;br /&gt;&gt;   that I, or peopl=\r\ne I work with, have built, about 90% of the bugs&lt;br /&gt;&gt; &lt;br /&gt;&gt; have =\r\nbeen in the construction&lt;br /&gt;&gt; &lt;br /&gt;&gt;   of the right URIs for the s=\r\nerver.  Typical mistakes are leaving out&lt;br /&gt;&gt; &lt;br /&gt;&gt; path segments=\r\n, getting them&lt;br /&gt;&gt; &lt;br /&gt;&gt;   in the wrong order, or forgetting to =\r\nURL encode things.  All this&lt;br /&gt;&gt; &lt;br /&gt;&gt; goes away when the server=\r\n&lt;br /&gt;&gt; &lt;br /&gt;&gt;   hands you exactly the right URI to use for every ci=\r\nrcumstance.&lt;br /&gt;&gt; &lt;br /&gt;&gt; &lt;br /&gt;&gt; &lt;br /&gt;&gt; * REDUCED INVALID ST=\r\nATE TRANSITION CALLS.  When the client decides&lt;br /&gt;&gt; &lt;br /&gt;&gt; which U=\r\nRI to call and&lt;br /&gt;&gt; &lt;br /&gt;&gt;   when, they run the risk of attempting=\r\n to request state transitions&lt;br /&gt;&gt; &lt;br /&gt;&gt; that are not valid for t=\r\nhe current&lt;br /&gt;&gt; &lt;br /&gt;&gt;   state of the server side resource.  An ex=\r\nample from my problem&lt;br /&gt;&gt; &lt;br /&gt;&gt; domain ... it&#39;s not allowed =\r\nto&lt;br /&gt;&gt; &lt;br /&gt;&gt;   &quot;start&quot; a virtual machine (VM) until yo=\r\nu have &quot;deployed&quot; it.  The&lt;br /&gt;&gt; &lt;br /&gt;&gt; server knows abou=\r\nt URIs to&lt;br /&gt;&gt; &lt;br /&gt;&gt;   initiate each of the state changes (via a =\r\nPOST), but the&lt;br /&gt;&gt; &lt;br /&gt;&gt; representation of the VM lists only the=\r\n&lt;br /&gt;&gt; &lt;br /&gt;&gt;   URIs for state transitions that are valid from the =\r\ncurrent state.&lt;br /&gt;&gt; &lt;br /&gt;&gt; This makes it extremely easy&lt;br /&gt;&gt; =\r\n&lt;br /&gt;&gt;   for the client to understand that trying to start a VM that ha=\r\nsn&#39;t&lt;br /&gt;&gt; &lt;br /&gt;&gt; been deployed yet is not legal,&lt;br /&gt;&gt; &lt;br=\r\n /&gt;&gt;   because there will be no corresponding URI in the VM representati=\r\non.&lt;br /&gt;&gt; &lt;br /&gt;&gt; &lt;br /&gt;&gt; &lt;br /&gt;&gt; * FINE GRAINED EVOLUTION WIT=\r\nHOUT (NECESSARILY) BREAKING OLD CLIENTS.&lt;br /&gt;&gt; &lt;br /&gt;&gt;   At any give=\r\nn time, the client of any REST API is going to be&lt;br /&gt;&gt; &lt;br /&gt;&gt; prog=\r\nrammed with *some* assumptions&lt;br /&gt;&gt; &lt;br /&gt;&gt;   about what the system=\r\n can do.  But, if you document a restriction to&lt;br /&gt;&gt; &lt;br /&gt;&gt; &quot;=\r\npay attention to only those&lt;br /&gt;&gt; &lt;br /&gt;&gt;   aspects of the represent=\r\nation that you know about&quot;, plus a server&lt;br /&gt;&gt; &lt;br /&gt;&gt; side di=\r\nscipline to add things later&lt;br /&gt;&gt; &lt;br /&gt;&gt;   that don&#39;t disrupt =\r\nprevious behavior, you can evolve APIs fairly&lt;br /&gt;&gt; &lt;br /&gt;&gt; quickly =\r\nwithout breaking all clients,&lt;br /&gt;&gt; &lt;br /&gt;&gt;   or having to support m=\r\nultiple versions of the API simultaneously on&lt;br /&gt;&gt; &lt;br /&gt;&gt; your ser=\r\nver.  You don&#39;t have to&lt;br /&gt;&gt; &lt;br /&gt;&gt;   wait years for serendipi=\r\nty benefits :-).  Especially compared to&lt;br /&gt;&gt; &lt;br /&gt;&gt; something lik=\r\ne SOAP where the&lt;br /&gt;&gt; &lt;br /&gt;&gt;   syntax of your representations is v=\r\nersioned (in the WSDL), so you&lt;br /&gt;&gt; &lt;br /&gt;&gt; have to mess with the c=\r\nlients&lt;br /&gt;&gt; &lt;br /&gt;&gt;   on every single change.&lt;br /&gt;&gt; &lt;br /&gt;&gt; =\r\n&lt;br /&gt;&gt; &lt;br /&gt;&gt; Having drunk the HATEOAS koolaid now, I would have a =\r\nreally hard time&lt;br /&gt;&gt; &lt;br /&gt;&gt; going back :-).&lt;br /&gt;&gt; &lt;br /&gt;&gt; =\r\n&lt;br /&gt;&gt; &lt;br /&gt;&gt; Craig McClanahan&lt;br /&gt;&gt; &lt;br /&gt;&gt; &lt;br /&gt;&gt; &lt;br =\r\n/&gt;&gt; [1] http://kenai.com/projects/suncloudapis/pages/Home&lt;br /&gt;&gt; &lt;br =\r\n/&gt;&gt; &lt;br /&gt;&gt;  &lt;br /&gt;&gt; &lt;br /&gt;&gt;     &lt;br /&gt;&gt;   &lt;br /&gt;&gt; &lt;br /&gt;=\r\n&gt;     &lt;br /&gt;&gt;     &lt;br /&gt;&gt; &lt;br /&gt;&gt; \t&lt;br /&gt;&gt; \t&lt;br /&gt;&gt;\r\n--0015174bdfd8c6b2eb04667ab170--\r\n\n"}}
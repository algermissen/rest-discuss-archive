{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":221173245,"authorName":"Andrew Wahbe","from":"Andrew Wahbe &lt;andrew.wahbe@...&gt;","profile":"wahbedahbe","replyTo":"SENDER","senderId":"YBq_F84YCEDSvzqfo7oDdCdX59kNn9FS7yIA-DtE3MAWOHxQ9ab5jt-yu1wakd_KCSuU50MCgYV-o47jOxnxm_NQMuTLPxCVNgHa7Q","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Re: Partial PUT debate","postDate":"1289401701","msgId":16857,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEFBTkxrVGk9V3ZQTVliWlhvUlZIa1hpcWlueHFYZmF3a2M5dTdiRXFIQUE4V0BtYWlsLmdtYWlsLmNvbT4=","inReplyToHeader":"PDRDREE5MjEyLjkwODAyMDdAd2VicjMub3JnPg==","referencesHeader":"PGliYnExcCtzYW5mQGVHcm91cHMuY29tPgk8NENEQTYwRjMuODAzMDUwNkBnbXguZGU+CTxBQU5Ma1RpbkQ4UDMwdnNRRWhleTF5dDBBa1JHdy0tRVk9aUFzcnhQcDM0cFdAbWFpbC5nbWFpbC5jb20+CTw0Q0RBOTIxMi45MDgwMjA3QHdlYnIzLm9yZz4="},"prevInTopic":16854,"nextInTopic":16858,"prevInTime":16856,"nextInTime":16858,"topicId":16839,"numMessagesInTopic":40,"msgSnippet":"... Right, or Sn could be a function of the message: Sn = f(Mn) If the state is a function of the message that depends on the previous state, e.g. f(Mn) =","rawEmail":"Return-Path: &lt;andrew.wahbe@...&gt;\r\nX-Sender: andrew.wahbe@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 12785 invoked from network); 10 Nov 2010 15:08:23 -0000\r\nX-Received: from unknown (98.137.34.45)\n  by m1.grp.sp2.yahoo.com with QMQP; 10 Nov 2010 15:08:23 -0000\r\nX-Received: from unknown (HELO mail-fx0-f50.google.com) (209.85.161.50)\n  by mta2.grp.sp2.yahoo.com with SMTP; 10 Nov 2010 15:08:22 -0000\r\nX-Received: by fxm4 with SMTP id 4so430071fxm.23\n        for &lt;rest-discuss@yahoogroups.com&gt;; Wed, 10 Nov 2010 07:08:21 -0800 (PST)\r\nMIME-Version: 1.0\r\nX-Received: by 10.204.52.208 with SMTP id j16mr7661731bkg.193.1289401701581;\n Wed, 10 Nov 2010 07:08:21 -0800 (PST)\r\nX-Received: by 10.204.118.66 with HTTP; Wed, 10 Nov 2010 07:08:21 -0800 (PST)\r\nIn-Reply-To: &lt;4CDA9212.9080207@...&gt;\r\nReferences: &lt;ibbq1p+sanf@...&gt;\n\t&lt;4CDA60F3.8030506@...&gt;\n\t&lt;AANLkTinD8P30vsQEhey1yt0AkRGw--EY=iAsrxPp34pW@...&gt;\n\t&lt;4CDA9212.9080207@...&gt;\r\nDate: Wed, 10 Nov 2010 10:08:21 -0500\r\nMessage-ID: &lt;AANLkTi=WvPMYbZXoRVHkXiqinxqXfawkc9u7bEqHAA8W@...&gt;\r\nTo: nathan@...\r\nCc: Mike Kelly &lt;mike@...&gt;, Julian Reschke &lt;julian.reschke@...&gt;, \n\trest-discuss@yahoogroups.com\r\nContent-Type: multipart/alternative; boundary=001636c5991565424f0494b43a34\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Andrew Wahbe &lt;andrew.wahbe@...&gt;\r\nSubject: Re: [rest-discuss] Re: Partial PUT debate\r\nX-Yahoo-Group-Post: member; u=221173245; y=1FvrXX5PXscIZjUymOm6_VExYPvNlGW0OMrITrTyVaHeSQpDWA\r\nX-Yahoo-Profile: wahbedahbe\r\n\r\n\r\n--001636c5991565424f0494b43a34\r\nContent-Type: text/plain; charset=ISO-8859-1\r\n\r\nOn Wed, Nov 10, 2010 at 7:37 AM, Nathan &lt;nathan@...&gt; wrote:\n\n&gt; Mike Kelly wrote:\n&gt;\n&gt;&gt; On Wed, Nov 10, 2010 at 9:08 AM, Julian Reschke &lt;julian.reschke@...&gt;\n&gt;&gt; wrote:\n&gt;&gt;\n&gt;&gt;&gt; Right. The important part is that the state of the resource after the\n&gt;&gt;&gt; PUT does only depend on the payload, not the previous state.\n&gt;&gt;&gt;\n&gt;&gt;\n&gt;&gt; Why is that important?\n&gt;&gt;\n&gt;\n&gt; It&#39;s the difference between saying &quot;this is the state of the resource&quot; and\n&gt; &quot;apply this to the resource to create a new state&quot;..\n&gt;\n&gt; or, Sn=Mn (state = message) vs -&gt; given the time t, a previous state Sn-1,\n&gt; and a message Mn we process Mn,Sn-1,t with a set of Rules in order to\n&gt; conclude Sn (the state of our resource)\n&gt;\n&gt; So, PUT and DELETE are the first case, PATCH and POST are the second.\n&gt;\n&gt; Perhaps more easily said, PUT replaces the previous state, with no\n&gt; consideration for it.\n&gt;\n\nRight, or Sn could be a function of the message: Sn = f(Mn)\nIf the state is a function of the message that depends on the previous\nstate, e.g. f(Mn) = Mn+Sn-1 then the operation is not idempotent as\nthis generally requires that if Mi = Mj then Si=Sj.\n\nSo if the state is a function of the previous state, you can&#39;t repeat the\noperation an arbitrary number of times (e.g. retries on response timeout)\nand know that each invocation leaves the resource in the same state. Or, if\nrequests from multiple parties are interleaved the resource is left in a\nstate that no party actually asked for. Sure, with conditional requests\n(like in http://www.w3.org/1999/04/Editing/) you can manage this. But this\ncan be overkill in some scenarios and slow things down (repeating requests\nwhen you don&#39;t need to). If you don&#39;t use conditional requests but the\noperations are idempotent, you lose all parties&#39; edits except for 1 -- the\nparty whose request was last processed, which is sometimes good enough and\nall you need. But if you don&#39;t use conditional requests and the operations\nare not idempotent then the resource can be left in a state that does not\nmatch any party&#39;s request. This is sometimes ok too -- the point is that you\nget to pick the semantics appropriate for your application.\n\nThis choice is important because the stronger guarantees tend to imply more\ncost in terms of # of messages or general complexity. Using conditional PUTs\noften means repeated GET+PUT retries until your PUT succeeds (2k where k &gt; 0\nrequests). Using an idempotent operation like PUT often means you must first\nGET the resource, apply your changes and then PUT the new state (2\nrequests). Finally, you can usually apply a non-idempotent operation like\nPOST at any time (without GETing and editing first) as long as the client&#39;s\nbeen given the instructions on how to do this (e.g. a form) at some previous\npoint in time (1 request -- I&#39;m not counting the transmission of the form as\na request as I didn&#39;t count the transmission of the link you are\nGETing/PUTing in the previous cases). So as you can see you are trading off\nsimplicity and a lower # of messages for stronger guarantees.\n\nRegards,\n\nAndrew Wahbe\n\r\n--001636c5991565424f0494b43a34\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;div&gt;&lt;div class=3D&quot;gmail_quote&quot;&gt;On Wed, Nov 10, 2010 at 7:37 AM, Nathan &lt;sp=\r\nan dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:nathan@...&quot;&gt;nathan@...&lt;/a&gt;=\r\n&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;margin:0 0=\r\n 0 .8ex;border-left:1px #ccc solid;padding-left:1ex;&quot;&gt;\nMike Kelly wrote:&lt;br=\r\n&gt;\n&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;margin:0 0 0 .8ex;border-left:=\r\n1px #ccc solid;padding-left:1ex&quot;&gt;&lt;div class=3D&quot;im&quot;&gt;\nOn Wed, Nov 10, 2010 at=\r\n 9:08 AM, Julian Reschke &lt;&lt;a href=3D&quot;mailto:julian.reschke@...&quot; targe=\r\nt=3D&quot;_blank&quot;&gt;julian.reschke@...&lt;/a&gt;&gt; wrote:&lt;br&gt;\n&lt;/div&gt;&lt;div class=3D&quot;i=\r\nm&quot;&gt;&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;margin:0 0 0 .8ex;border-left=\r\n:1px #ccc solid;padding-left:1ex&quot;&gt;\nRight. The important part is that the st=\r\nate of the resource after the&lt;br&gt;\nPUT does only depend on the payload, not =\r\nthe previous state.&lt;br&gt;\n&lt;/blockquote&gt;\n&lt;br&gt;\nWhy is that important?&lt;br&gt;\n&lt;/div=\r\n&gt;&lt;/blockquote&gt;\n&lt;br&gt;\nIt&#39;s the difference between saying &quot;this is th=\r\ne state of the resource&quot; and &quot;apply this to the resource to creat=\r\ne a new state&quot;..&lt;br&gt;\n&lt;br&gt;\nor, Sn=3DMn (state =3D message) vs -&gt; giv=\r\nen the time t, a previous state Sn-1, and a message Mn we process Mn,Sn-1,t=\r\n with a set of Rules in order to conclude Sn (the state of our resource)&lt;br=\r\n&gt;\n&lt;br&gt;\nSo, PUT and DELETE are the first case, PATCH and POST are the second=\r\n.&lt;br&gt;\n&lt;br&gt;\nPerhaps more easily said, PUT replaces the previous state, with =\r\nno consideration for it.&lt;br&gt;\n&lt;/blockquote&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;Right, or Sn=\r\n could be a function of the message: Sn =3D f(Mn)&lt;br&gt;If the state is a func=\r\ntion of the message that depends on the previous state, e.g. f(Mn) =3D Mn+S=\r\nn-1 then the operation is not idempotent as this=A0generally requires that =\r\nif Mi =3D Mj then Si=3DSj.&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;So if the state is a f=\r\nunction of the previous state, you can&#39;t repeat the operation an arbitr=\r\nary number of times (e.g. retries on response timeout) and know that each i=\r\nnvocation leaves the resource in the same state.=A0Or, if requests from mul=\r\ntiple parties are interleaved the resource is left in a state that no party=\r\n actually asked for. Sure, with conditional requests (like in=A0&lt;a href=3D&quot;=\r\nhttp://www.w3.org/1999/04/Editing/&quot;&gt;http://www.w3.org/1999/04/Editing/&lt;/a&gt;)=\r\n you can manage this. But this can be overkill in some scenarios and slow t=\r\nhings down (repeating requests when you don&#39;t need to). If you don&#39;=\r\nt use conditional requests but the operations are idempotent, you lose all =\r\nparties&#39; edits except for 1 -- the party whose request was last process=\r\ned, which is sometimes good enough and all you need. But if you don&#39;t u=\r\nse conditional requests and the operations are not idempotent then the reso=\r\nurce can be left in a state that does not match any party&#39;s request. Th=\r\nis is sometimes ok too -- the point is that you get to pick the semantics a=\r\nppropriate for your application.=A0&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;This choice i=\r\ns important because the stronger guarantees tend to imply more cost in term=\r\ns of # of messages or general complexity. Using conditional PUTs often mean=\r\ns repeated GET+PUT retries until your PUT succeeds (2k where k &gt; 0 reque=\r\nsts). Using an idempotent operation like PUT often means you must first GET=\r\n the resource, apply your changes and then PUT the new state (2 requests). =\r\nFinally, you can usually apply a non-idempotent operation like POST at any =\r\ntime (without GETing and editing first) as long as the client&#39;s been gi=\r\nven the instructions on how to do this (e.g. a form) at some previous point=\r\n in time (1 request -- I&#39;m not counting the transmission of the form as=\r\n a request as I didn&#39;t count the transmission of the link you are GETin=\r\ng/PUTing in the previous cases). So as you can see you are trading off simp=\r\nlicity and a lower # of messages for stronger guarantees.&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;Re=\r\ngards,&lt;/div&gt;&lt;div&gt;&lt;br&gt;Andrew Wahbe&lt;br&gt;\n&lt;/div&gt;\n\r\n--001636c5991565424f0494b43a34--\r\n\n"}}
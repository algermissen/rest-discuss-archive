{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":80827773,"authorName":"Seairth Jacobs","from":"&quot;Seairth Jacobs&quot; &lt;seairth@...&gt;","profile":"seairthjacobs","replyTo":"SENDER","senderId":"4p71MGAdrKChJeRt0GVMy2Nv1neVKurF4OTBVDcP7JygKlfE9iMpfKneNCHmJzM5QYzEFY_ECar_Z38REqTApjy8fmvjZLkf73x-twI","spamInfo":{"isSpam":false,"reason":"0"},"subject":"True meaning of &quot;Idempotent&quot;?","postDate":"1032410051","msgId":2612,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDAwMGMwMWMyNWY5NSRjZTdkOWUyMCRhMDAwYThjMEBzZWFpcnRobGFwdG9wPg=="},"prevInTopic":0,"nextInTopic":2613,"prevInTime":2611,"nextInTime":2613,"topicId":2612,"numMessagesInTopic":7,"msgSnippet":"What is the true meaning of idempotent , both in terms of HTTP and in terms of REST?  Roy Fielding does not mention idempotency in his dissertation, but it","rawEmail":"Return-Path: &lt;seairth@...&gt;\r\nX-Sender: seairth@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_1_1_3); 19 Sep 2002 04:33:30 -0000\r\nReceived: (qmail 47585 invoked from network); 19 Sep 2002 04:33:30 -0000\r\nReceived: from unknown (66.218.66.218)\n  by m15.grp.scd.yahoo.com with QMQP; 19 Sep 2002 04:33:30 -0000\r\nReceived: from unknown (HELO mail.bbglobex.com) (208.251.163.4)\n  by mta3.grp.scd.yahoo.com with SMTP; 19 Sep 2002 04:33:29 -0000\r\nReceived: from seairthlaptop [68.10.252.24] by mail.bbglobex.com with ESMTP\n  (SMTPD32-7.12) id A29FB6170128; Thu, 19 Sep 2002 00:29:19 -0400\r\nMessage-ID: &lt;000c01c25f95$ce7d9e20$a000a8c0@seairthlaptop&gt;\r\nTo: &quot;rest-discuss&quot; &lt;rest-discuss@yahoogroups.com&gt;\r\nSubject: True meaning of &quot;Idempotent&quot;?\r\nDate: Thu, 19 Sep 2002 00:34:11 -0400\r\nMIME-Version: 1.0\r\nContent-Type: text/plain;\n\tcharset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: 7bit\r\nX-Priority: 3\r\nX-MSMail-Priority: Normal\r\nX-Mailer: Microsoft Outlook Express 6.00.2800.1106\r\nX-MIMEOLE: Produced By Microsoft MimeOLE V6.00.2800.1106\r\nFrom: &quot;Seairth Jacobs&quot; &lt;seairth@...&gt;\r\nX-Yahoo-Group-Post: member; u=80827773\r\nX-Yahoo-Profile: seairthjacobs\r\n\r\nWhat is the true meaning of &quot;idempotent&quot;, both in terms of HTTP and in terms\nof REST?  Roy Fielding does not mention idempotency in his dissertation, but\nit certainly appears to be an integral part of our discussions on REST.\n\nTo start, RFC2616 [1:9.1.2] says:\n\n   Methods can also have the property of &quot;idempotence&quot;\n   in that (aside from error or expiration issues) the\n   side-effects of N &gt; 0 identical requests is the same\n   as for a single request. The methods GET, HEAD, PUT\n   and DELETE share this property. Also, the methods\n   OPTIONS and TRACE SHOULD NOT have side effects, and\n   so are inherently idempotent.\n\nGenerally, I don&#39;t think we dispute the above description in terms of what\nhappens to a resource on a server.  However, where we seem to disagree\n(mostly due to ambiguity, I think), is just how far the concept of\nidempotency reaches.  For instance, is an operation idempotent if it returns\ndifferent responses?  When we speak of responses, are we talking about only\nthe response entity, the metadata, or both?  Since &quot;error or expiration\nissues&quot; are explicitly noted as exceptions, what does idempotency mean in\nthose circumstances?  What is the definition of &quot;side-effect&quot;?\n\nI do not have an answer for this, but I do have some thoughts (and\nopinions)...\n\nFirst, let&#39;s define what &quot;side-effect&quot; means.  I prefer the term &quot;mutation&quot;\nhere, since &quot;side-effect&quot; implies something that occurs indirectly to the\nactual action taken.  However, no one here would consider updating a\nresource with a PUT as a side-effect.  So, the first thing we can say about\na side-effect (in terms of the HTTP spec) is that we are speaking of the\nchanging of a resource.  That&#39;s it.  Nothing more.  It could be direct or\nindirect.  Doesn&#39;t matter.  The second thing we can say about a side-effect\n(again, in terms of HTTP) is that we are speaking of the end result of the\nchanging of a resource, not the process itself.  In other words, we only see\na side-effect in terms of what state the resource is in after the change.\n\nNext, let&#39;s start applying some scope to these terms (where possible).  To\nstart, let&#39;s say that side-effects are scoped to the resource on the server.\nThe client is never directly aware of side-effect.  Next, let&#39;s also say\nthat an idempotent method is scoped to the resource on the server as well.\nThis makes sense since idempotency depends on side-effects.\n\nNow, we get to the part where the ambiguity creeps in...\n\nWhen one uses an idempotent method which causes a side-effect (PUT, DELETE),\nthe server returns a response just like any other request method.  The\nresponse contains two parts:  the headers (metadata) and the entity-body\n(which can be null).  Recently, we have discussed whether returning\ndifferent responses when issuing repeated DELETEs violates idempotency or\nnot.  One camp says that the response should reflect the results of the\nrequest (i.e. 200 for first response, 404 afterwards).  This attitude would\nimply that the response does not have anything to do with whether the\nrequest was idempotent or not.  The other camp says that the response should\nreflect the end state of the request (i.e. 200 for all responses).  This\nattitude would imply that the response is as much a part of the idempotency\nrequirements as the request is.  What this comes down to is whether we\nconsider any part of the response to be within the scope of HTTP&#39;s\ndefinition of idempotency.\n\nMy feeling is that the response has nothing to do with idempotency at all.\nThis comes from the use of GET.  GET is an idempotent operation that has no\nside-effect.  As a result, I could issue the same GET several times, and the\nserver could return different responses for each of the requests.  For\ninstance, in some of the responses, I could get back a 200, but have\ndifferent entity bodies (common for dynamic content).  I could also get back\ndifferent response codes, such as 200 (OK), then 301 (Moved Permanently),\nthen 404 (Not Found).  Despite these different responses, each of the GETs\nis still considered to be idempotent.\n\nNow, let&#39;s move on to PUT.  When PUT is used, and the resource did not\nexist, then a 201 (Created) response is expected.  Subsequent PUTs to the\nsame resource return 200 (OK) responses.  This is very common practice and I\nhave never heard a single person say this is not idempotent.\n\nSo, now we move on to DELETE.  In this case, let&#39;s say that the first DELETE\nwill return a 200 response and subsequent DELETEs return a 404 response.\n&gt;From the definition and scoping of &quot;side-effect&quot; above, we all agree that\nthe state of the resource after each delete is that it does not exist.  This\nis enough to also satisfy DELETE&#39;s requirement of idempotency.  Further,\nthis is no different than returning two responses for repeated PUTs.\n\n\nIn the end, my personal conclusion is that responses have nothing to do with\nidempotency.  Idempotency is only limited to the resource on the server.\nRegardless of what is returned to the client, the operation on the server is\nidempotent (assuming that the end state is the same after repeated identical\nrequests).\n\n\nSo what does this mean for returning responses from DELETE?  I think that\n200 (OK) or 202 (Accepted) or 204 (No Content), followed by 404 (Not Found)\nor 410 (Gone) and maybe 303 (See Other) would be no different than expected\nof other idempotent methods like PUT and GET.\n\nIf I had to suggest an order of usage, I&#39;d say (in order of most expressive\nto least expressive):\n\nFirst request:\n    204 (No Content)\n    202 (Accepted)\n    200 (OK)\n\nRepeated requests:\n    303 (See Other)\n    410 (Gone)\n    404 (Not Found)\n\n\nShould we allow repeated DELETE requests to always get back a &quot;200&quot; (or\nsimilar) response?  PUT (DELETE&#39;s binary opposite) doesn&#39;t allow it.  GET,\nwhile possible to receive the same response over and over again, must also\nbe open to receiving other responses as well.  So, why should DELETE be any\ndifferent?  My thought here is that it would be wrong (given the way the\nother two verbs work) to return the same response code regardless of whether\nthe resource was deleted or not.\n\n\n&lt;note&gt;I think that&#39;s it.  Sorry if it seemed to ramble on.  I stopped\nsomewhere in the middle to watch The Daily Show (comedy central) and when\nthey showed the clip of Bush totally screwing up a simple quote, I just lost\nall concentration (funny stuff, it was).  Again, sorry if it all seems\nincoherent.  :) *giggle* &lt;/note&gt;\n\n[1] http://www.ietf.org/rfc/rfc2616.txt\n\n---\nSeairth Jacobs\nseairth@...\n\n\n"}}
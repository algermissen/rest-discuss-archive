{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":302007611,"authorName":"Gary Bernhardt","from":"&quot;Gary Bernhardt&quot; &lt;gary.bernhardt@...&gt;","profile":"gary.bernhardt","replyTo":"SENDER","senderId":"j-ZP7BTBDogfbbgCt1GvXLGNgUwaF-R2DnhTOYkM0XVw7t1OBYpqZSdQNGX56hlYbE0BnYI3uPzF8kdXMc2hupFEV4TJ9dK7cGgGZyjBTyclLw","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Updating metadata of multiple resources","postDate":"1209850843","msgId":10709,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDljMzRjNzJlMDgwNTAzMTQ0MG02NTg1N2QxZXZjZmJjZGYxNGY5Yzc3ZjllQG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PEJMVTEwMi1EUzJGMUM0RkQyNzMxNjMzNTJGRDM5NkI1RDUwQHBoeC5nYmw+","referencesHeader":"PDFiZGVkZDdhMDgwNTAyMTM1Nm8zMDRhMGY4ZGsxYjNhMDNhZTNhMzBiY2FmQG1haWwuZ21haWwuY29tPgkgPEJMVTEwMi1EUzRBQjU4MDdDRDBBQkM1Q0FBODQzN0I1RDUwQHBoeC5nYmw+CSA8OWMzNGM3MmUwODA1MDMwOTU0ajc5OGMxMDRuYTJlMzFlZTVhN2Q0OTE4ZUBtYWlsLmdtYWlsLmNvbT4JIDxCTFUxMDItRFMyRjFDNEZEMjczMTYzMzUyRkQzOTZCNUQ1MEBwaHguZ2JsPg=="},"prevInTopic":10708,"nextInTopic":10710,"prevInTime":10708,"nextInTime":10710,"topicId":10697,"numMessagesInTopic":19,"msgSnippet":"(Apologies for top posting; my response was getting huge and fragmented, so I summarized.) Let s get specific.  If you re going to implement my method, you","rawEmail":"Return-Path: &lt;gary.bernhardt@...&gt;\r\nX-Sender: gary.bernhardt@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 48098 invoked from network); 3 May 2008 21:40:43 -0000\r\nX-Received: from unknown (66.218.67.97)\n  by m50.grp.scd.yahoo.com with QMQP; 3 May 2008 21:40:43 -0000\r\nX-Received: from unknown (HELO rv-out-0506.google.com) (209.85.198.232)\n  by mta18.grp.scd.yahoo.com with SMTP; 3 May 2008 21:40:43 -0000\r\nX-Received: by rv-out-0506.google.com with SMTP id f6so479732rvb.5\n        for &lt;rest-discuss@yahoogroups.com&gt;; Sat, 03 May 2008 14:40:43 -0700 (PDT)\r\nX-Received: by 10.141.189.4 with SMTP id r4mr2038619rvp.98.1209850843212;\n        Sat, 03 May 2008 14:40:43 -0700 (PDT)\r\nX-Received: by 10.141.175.2 with HTTP; Sat, 3 May 2008 14:40:43 -0700 (PDT)\r\nMessage-ID: &lt;9c34c72e0805031440m65857d1evcfbcdf14f9c77f9e@...&gt;\r\nDate: Sat, 3 May 2008 17:40:43 -0400\r\nTo: &quot;Sebastien Lambla&quot; &lt;seb@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nIn-Reply-To: &lt;BLU102-DS2F1C4FD273163352FD396B5D50@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: 7bit\r\nContent-Disposition: inline\r\nReferences: &lt;1bdedd7a0805021356o304a0f8dk1b3a03ae3a30bcaf@...&gt;\n\t &lt;BLU102-DS4AB5807CD0ABC5CAA8437B5D50@...&gt;\n\t &lt;9c34c72e0805030954j798c104na2e31ee5a7d4918e@...&gt;\n\t &lt;BLU102-DS2F1C4FD273163352FD396B5D50@...&gt;\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Gary Bernhardt&quot; &lt;gary.bernhardt@...&gt;\r\nReply-To: gary.bernhardt@...\r\nSubject: Re: [rest-discuss] Updating metadata of multiple resources\r\nX-Yahoo-Group-Post: member; u=302007611; y=pdl-sVkkqK8dTMw7-2npECftFsmktnSFJTzh-Qee179u290GVw2wL3U\r\nX-Yahoo-Profile: gary.bernhardt\r\n\r\n(Apologies for top posting; my response was getting huge and\nfragmented, so I summarized.)\n\nLet&#39;s get specific.  If you&#39;re going to implement my method, you need\na new media type.  Here&#39;s one possible implementation.  Call it\n&quot;text/html-with-javascript-links&quot;.  We add an extension to the &lt;a&gt; tag\nso you can do things like this:\n\n&lt;a href=&quot;javascript:function(ids) { return &#39;/resources/&#39; + ids.join(&#39;,&#39;); }&quot;&gt;\n\nThat little javascript function will return a string of the form\n&quot;/resources/1,2,3,4&quot; when called with the list [1, 2, 3, 4].  This is\nstill perfectly RESTful, because the server is telling the client\nexactly how to construct the URL.  This is not a &quot;convention&quot; any more\nthan HTML forms are; it&#39;s just another media type.  It&#39;s not &quot;specific\nto my service&quot; because, once again, it&#39;s a (hypothetical) standard\nmedia type.  If you support it once, you support it for every service.\n It&#39;s not &quot;opaque&quot; or &quot;undiscoverable&quot; because you have to have a\npriori knowledge of it to even negotiate for a representation in the\nfirst place.\n\nIt&#39;s also *much* simpler to implement than the proposed multi-part\nrequest solution.  Current clients support neither of the proposed\nmethods.  I happen to be most familiar with Python&#39;s httplib, and I\ncan say without a doubt that multi-part requests would require serious\nchanges, since you can no longer make the assumption that HTTP\nrequests are of the form &quot;send request, then block until the response\ncomes&quot;.  Httplib makes exactly that assumption.\n\nContrast that with my proposed solution - all you&#39;re doing is\nconstructing the URL a little differently.  There are no underlying\nHTTP library changes.  I can testify that this is very simple to do,\nbecause I&#39;m doing it right now, in a production system!  It took maybe\nan hour to add my first aggregate resource, and most of that time was\nspent on the server-side business logic.  It&#39;s been in production for\nabout six months and I&#39;ve not given it a thought since; it&#39;s always\njust worked.  The media-type issues are separate, of course; I haven&#39;t\ntackled them yet.\n\nAside from implementation complexity, the multi-part request solution\nbreaks HTTP in numerous subtle ways.  It throws &quot;one request, one\nresponse&quot; out the window.  It also brings up thorny questions, like\n&quot;What happens if the 47th request in the series fails?  How do you\ntell the client?  How does he recover?&quot;  The client now has a\nfragmented concept of an &quot;HTTP request&quot; - sometimes a request is a\nrequest; sometimes a request is actually a batch of requests.  This\nwill trickle its way down into the client logic, not just the HTTP\nlibrary.\n\nThe application programmer will have to *explicitly* batch requests.\nWhen he&#39;s batching request #13 out of 17, what is his current state?\nWhat is the representation of that state?  He sure as heck didn&#39;t get\nit from the server!  If your client states don&#39;t correspond one-to-one\nwith representations from the server, you&#39;re not doing\n&quot;representational state transfer&quot;; you&#39;re just doing &quot;state transfer&quot;!\n It ain&#39;t REST! :)\n\nThere&#39;s also the fundamental question of which method to use for your\nmulti-part request.  Do you use POST?  What if the batch of requests\nis made up only of DELETEs?  Is &quot;delete these 57 resources&quot; within the\ndefinition of POST?  Do you really have a uniform interface at that\npoint, or is your multi-part request really RPC in disguise?  These\nare the questions that made me back away from the &quot;multi-part request&quot;\ntechnique, although it was initially tempting.\n\nSometimes widening your solution space a little is easier than digging\n1,000 feet deeper into the hole you&#39;re already in. :)\n\n-- \nGary\nhttp://blog.extracheese.org\n\nOn Sat, May 3, 2008 at 1:48 PM, Sebastien Lambla &lt;seb@...&gt; wrote:\n&gt; &gt; By definition, it&#39;s either discoverable or it&#39;s not REST.  If the\n&gt;  &gt; representation linking to that resource tells the client how to\n&gt;  &gt; construct the URL, it&#39;s fully discoverable.  If it fails to tell the\n&gt;  &gt; client how, then the client has no way to construct the URL at all\n&gt;  &gt; without violating HATEoAS.\n&gt;\n&gt;  I fail to see how the server can instruct the client in any meaningful way\n&gt;  that urls in the form of http://server/resource/1,2,3,4 represent a pool of\n&gt;  documents equal to /resource/1, /resource/2 etc. If you want to set that\n&gt;  convention up thats fine with me, but it&#39;s just that, a convention specific\n&gt;  to the way you define your service, and in that it is opaque with low\n&gt;  discoverability.\n&gt;\n&gt;\n&gt;  &gt; REST does require a bit of a mental leap.  But I don&#39;t find &quot;REST is\n&gt;  &gt; hard, let&#39;s go shopping!&quot; a very convincing argument. :)\n&gt;\n&gt;  I don&#39;t believe I&#39;m making this argument, quite the contrary. The solution\n&gt;  you seem to be promoting isn&#39;t more rest than batching requests in one go\n&gt;  through a multipart message. At least with that solution the semantics of\n&gt;  Urls are respected and still general purpose, as opposed to\n&gt;  convention-driven url construction.\n&gt;\n&gt;\n&gt;  &gt; The URL space does not have to be rigid!  Free your mind! :)\n&gt;\n&gt;  They have to be discoverable and not built by private conventions. I don&#39;t\n&gt;  believe in the value of transient composite Urls that have only meaning when\n&gt;  in the context of the documentation of your service, be it that it is 1,2,3\n&gt;  or 1;2;3.\n&gt;\n&gt;  If you start doing /1,2,3 supporting POST that translates in 3 POSTS to /1,\n&gt;  /2 and /3, do you support a GET on the same conventional URL? If not you\n&gt;  don&#39;t have a uniform interface anymore. If you do, you cannot support things\n&gt;  like ETags, caching etc, unless you do it as a collection.\n&gt;\n&gt;  Overall it seems to me it introduces more mess than it solves issues.\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"wBo3GQZInu5hVu4FexNjPzrYKFZZERh1He2FgMUDWr53SSWfe3YGnpw4DGXJVV-AFOJLHagZKCrIC_fZJdKtIRc0bxPcN7RalcPrlxNbaQ","spamInfo":{"isSpam":false,"reason":"6"},"subject":"Re: [rest-discuss] URI design, part 2","postDate":"1354551467","msgId":19211,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMTIxMjAzMDkxNzQ3LmQxMjNiYWY5LmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","inReplyToHeader":"PENBTk1QazI0d01ReGlFMDNyR3JjUnM1PVMxSmNhYkRnYitOZFU0RVR5WkZzTCt4cnFXUUBtYWlsLmdtYWlsLmNvbT4=","referencesHeader":"PENBTk1QazI3MmlTb0UzNFlLUzlBX3BNK2N0ejJvYjg5TS12M2txUGkxRHF1d2dpNkpqZ0BtYWlsLmdtYWlsLmNvbT4JPENGNTUyMDExLUI0MTgtNEFFNC04MEM2LTQzRjk5MTJFQTcyNUBuaWNrc2hhbmtzLmNvbT4JPDIwMTIxMTMwMTQxMjU0LmYzZDU5ZmE4LmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPENBTk1QazI0aHJRN3JYN2FLY3Y4TEh4S1AzQloraU9pVVZYd1lWdDZ2eUFDQTJNc3NfZ0BtYWlsLmdtYWlsLmNvbT4JPDIwMTIxMjAxMDAwODQyLmIyNGY5NGQwLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPENBTk1QazI0d01ReGlFMDNyR3JjUnM1PVMxSmNhYkRnYitOZFU0RVR5WkZzTCt4cnFXUUBtYWlsLmdtYWlsLmNvbT4="},"prevInTopic":19210,"nextInTopic":19212,"prevInTime":19210,"nextInTime":19212,"topicId":19187,"numMessagesInTopic":28,"msgSnippet":"... Yes, such examples are out there, but in them, /cancel is NOT a resource in the REST sense so they must be some style of RPC... REST, not so much.","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 90771 invoked from network); 3 Dec 2012 16:18:11 -0000\r\nX-Received: from unknown (98.137.34.44)\n  by m13.grp.sp2.yahoo.com with QMQP; 3 Dec 2012 16:18:11 -0000\r\nX-Received: from unknown (HELO mxout-08.mxes.net) (216.86.168.183)\n  by mta1.grp.sp2.yahoo.com with SMTP; 3 Dec 2012 16:18:11 -0000\r\nX-Received: from bigbison (unknown [65.117.211.162])\n\t(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))\n\t(No client certificate requested)\n\tby smtp.mxes.net (Postfix) with ESMTPSA id B82B0509BC;\n\tMon,  3 Dec 2012 11:18:10 -0500 (EST)\r\nDate: Mon, 3 Dec 2012 09:17:47 -0700\r\nTo: Max Toro &lt;maxtoroq@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nMessage-Id: &lt;20121203091747.d123baf9.eric@...&gt;\r\nIn-Reply-To: &lt;CANMPk24wMQxiE03rGrcRs5=S1JcabDgb+NdU4ETyZFsL+xrqWQ@...&gt;\r\nReferences: &lt;CANMPk272iSoE34YKS9A_pM+ctz2ob89M-v3kqPi1Dquwgi6Jjg@...&gt;\n\t&lt;CF552011-B418-4AE4-80C6-43F9912EA725@...&gt;\n\t&lt;20121130141254.f3d59fa8.eric@...&gt;\n\t&lt;CANMPk24hrQ7rX7aKcv8LHxKP3BZ+iOiUVXwYVt6vyACA2Mss_g@...&gt;\n\t&lt;20121201000842.b24f94d0.eric@...&gt;\n\t&lt;CANMPk24wMQxiE03rGrcRs5=S1JcabDgb+NdU4ETyZFsL+xrqWQ@...&gt;\r\nOrganization: Bison Systems Corporation\r\nX-Mailer: Sylpheed 3.1.1 (GTK+ 2.10.14; i686-pc-mingw32)\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=US-ASCII\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:6:0:0:0\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nSubject: Re: [rest-discuss] URI design, part 2\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\nMax Toro wrote:\n&gt;\n&gt; &gt; Well, what are you expecting to GET from /cancel, or are you just\n&gt; &gt; using that URL to invoke a procedure? If so, then there are a few\n&gt; &gt; places Roy&#39;s thesis admonishes against it in Chapter 6 -- the rest\n&gt; &gt; of REST is about positive, rather than negative, reinforcement of\n&gt; &gt; the identification of resources constraint. Suggested reading:\n&gt; &gt; 6.5.2; 6.2.1, in particular: &quot;REST [defines] a resource to be the\n&gt; &gt; semantics of what the author intends to identify.&quot;\n&gt; \n&gt; To clarify, /orders/1/cancel is used to modify a resource, using POST.\n&gt; A GET request would result in a Method Not Allowed response.\n&gt; \n\nYes, such examples are out there, but in them, /cancel is NOT a resource\nin the REST sense so they must be some style of RPC... REST, not so\nmuch. Representational State Transfer means just that -- resources are\nmanipulated by transferring representations of their current, intended,\ndesired etc. state.  Chapter 5.4:\n\n&quot;Requests and responses have the appearance of a remote invocation\nstyle, but REST messages are targeted at a conceptual resource rather\nthan an implementation identifier.&quot;\n\nThis example is a REST anti-pattern, as I cannot deduce the current\n(sub)state of the order (active or canceled) by dereferencing the URL\nI&#39;m given for manipulating that (sub)state. Just making a toggle POST\nalso fails to transfer any representation of anything, let alone\napplication state, and isn&#39;t proper HTTP (which can never be proper\nREST).\n\nREST isn&#39;t about optimizing upstream traffic, it&#39;s about optimizing GET.\nWhat advantage does a subresource give when it contains no content from\nthe parent resource?  My goal with subresources is to increase the cache\nstickiness of their parent resources.  Replace the subresource content\nin the parent resource, with a link or a hypertext control linked to the\nsubresource.  The link or hypertext control remains static, and cached,\nas the content of the subresource varies.\n\nThat&#39;s a RESTful pattern, as the subresource now has a representation\n(other than that of the 406 error) we can transfer and manipulate to\neffect change of the parent resource.\n\n&gt; \n&gt; &gt; Not the semantics of a method invocation.  What does /cancel\n&gt; &gt; identify? Sounds to me like a method of tunneling DELETE through\n&gt; &gt; POST which identifies nothing, iow a procedure endpoint, which is\n&gt; &gt; characteristic of various styles but not of the REST style.  The\n&gt; &gt; hypertext constraint only makes sense if your resources make sense,\n&gt; &gt; in that their URLs are identifiers rather than endpoints.\n&gt; \n&gt; If I understand correctly, you are saying that if I need to affect a\n&gt; resource then I should use the uniform interface on that resource URI,\n&gt; and not another URI.\n&gt; \n\nAbsolutely not!  My example changed /order/1 by manipulating /order/1\n/status.  The /order/1 resource includes its status, but its 200 OK\nrepresentations only include links to the /status subresource, derived\nfrom the /order/1 resource such that manipulating a representation\nof /order/1/status updates /order/1 (on the server, you can do anything\nyou want; on the client, the cached link/control in /order/1 now returns\na different value).\n\nThere&#39;s no cost to adding a URI like this, nor does it preclude changing\norder status via PUT/PATCH to /order/1.  The difference is that /status\nuses REST&#39;s uniform interface, unlike /cancel.  The /order/1/status URL\nis only presented within a hypertext control which explains how to\nmanipulate it -- picture a drop-down list with the current status\nhighlighted, meeting the hypertext constraint.  You can always GET the\nstatus of an order even if you don&#39;t have a copy of that order, a\nuseful separation of concerns beyond just optimizing GET, promoting\nserendipitous re-use.\n\n&gt;\n&gt; &gt; Which brings us to Chapter 5, and the short answer to your question:\n&gt; &gt; &quot;POSTing to /cancel violates the Identification of Resources\n&gt; &gt; constraint, and is therefore unRESTful.&quot;  But I&#39;ve found that just\n&gt; &gt; giving that answer tends to upset folks who&#39;ve only read Chapter 5,\n&gt; &gt; then they get defensive about why can&#39;t they call their API\n&gt; &gt; RESTful, accusations of pedantry follow, and threads devolve into\n&gt; &gt; general ugliness, heheh...\n&gt; \n&gt; After reading that chapter again I&#39;m not sure my example violates\n&gt; anything, but I&#39;d love to get more clarification from you. Is it the\n&gt; use of a verb in the URI? or not using the URI of the resource I&#39;m\n&gt; trying to modify directly?\n&gt;\n\nThe biggest problem, is that an RPC endpoint which has no GET function\nwhile improperly listening for a method itself as a trigger rather than\ntaking action based on the content of the entity required by that method\nand in obeyance of the semantics of that method, is so far away from\nREST that I don&#39;t know where to start except by urging that Roy&#39;s\nthesis be read in its entirety.  Because it&#39;s obvious to me that this\nviolates the first three uniform interface constraints, making adherence\nto the fourth irrelevant:\n\n&quot;REST is defined by four interface constraints: identification of\nresources; manipulation of resources through representations; self-\ndescriptive messages; and, hypermedia as the engine of application\nstate.&quot;\n\nNote that &quot;noun/verb&quot; terminology is not present in the dissertation.\nBut, yeah, if your URI is a &quot;verb&quot; you&#39;re probably getting REST wrong.\nThere is no &quot;cancel&quot; method in the uniform interface.  There are two\nbasic means of solving this -- one, is refactor your cancel operation\nto use DELETE; two, tunnel your proprietary cancel method through POST.\n\nhttp://tech.groups.yahoo.com/group/rest-discuss/message/19210\n\nMaking this operation its own URI doesn&#39;t make it more RESTful, as the\nresulting URI is only a resource in the HTTP/URI sense, but not the\nREST sense, of the term.  Utilizing subresources to break out more\ndynamic aspects of content and cache them separately is RESTful; if the\ncontents of the GET are also allowable content of a PUT then we&#39;re\nletting hypertext drive application state instead of listening for POST\nevents to trigger server-object methods we&#39;ve failed to refactor to the\nuniform REST interface.\n\n-Eric\n\n"}}
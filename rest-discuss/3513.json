{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":4849001,"authorName":"S. Alexander Jacobson","from":"&quot;S. Alexander Jacobson&quot; &lt;alex@...&gt;","profile":"shop2it","replyTo":"SENDER","senderId":"v1mWkfdkRxhiRQmtLbzy52hefutQGub5tTEcxbPJacBFYmwDZqaM0zWOItkaM2uXNT0-VYUv57gx8YxDZlAkWYLVdV9A780mv3u_Ag","spamInfo":{"isSpam":false,"reason":"0"},"subject":"ROPE: ReST Oriented Programming Environments","postDate":"1049783264","msgId":3513,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PFBpbmUuV05ULjQuNTMuMDMwNDA4MDE0NDI5MC4yOTI4QHBoaWxvPg==","inReplyToHeader":"PE9FNzNCdEpXY0ZIMHg2cE1kMkMwMDAwZGExMkBob3RtYWlsLmNvbT4=","referencesHeader":"PE9FNzNCdEpXY0ZIMHg2cE1kMkMwMDAwZGExMkBob3RtYWlsLmNvbT4="},"prevInTopic":3512,"nextInTopic":3517,"prevInTime":3512,"nextInTime":3514,"topicId":3512,"numMessagesInTopic":15,"msgSnippet":"I was thinking about the history of programming lately with respect to ReST. In the beginning there was procedural programming. With procedural programming,","rawEmail":"Return-Path: &lt;alex@...&gt;\r\nX-Sender: alex@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_2_6_5); 8 Apr 2003 06:27:28 -0000\r\nReceived: (qmail 33030 invoked from network); 8 Apr 2003 06:27:21 -0000\r\nReceived: from unknown (66.218.66.216)\n  by m10.grp.scd.yahoo.com with QMQP; 8 Apr 2003 06:27:21 -0000\r\nReceived: from unknown (HELO mailgate.vo.com) (208.45.6.97)\n  by mta1.grp.scd.yahoo.com with SMTP; 8 Apr 2003 06:27:20 -0000\r\nReceived: from philo.nyc.rr.com (66-108-201-235.nyc.rr.com [66.108.201.235])\n\tby mailgate.vo.com (Postfix) with ESMTP id B5ED787F84\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Tue,  8 Apr 2003 02:27:19 -0400 (EDT)\r\nDate: Tue, 8 Apr 2003 02:27:44 -0400 (Eastern Standard Time)\r\nTo: rest-discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nSubject: ROPE: ReST Oriented Programming Environments\r\nIn-Reply-To: &lt;OE73BtJWcFH0x6pMd2C0000da12@...&gt;\r\nMessage-ID: &lt;Pine.WNT.4.53.0304080144290.2928@philo&gt;\r\nReferences: &lt;OE73BtJWcFH0x6pMd2C0000da12@...&gt;\r\nX-X-Sender: alex@...\r\nMIME-Version: 1.0\r\nContent-Type: TEXT/PLAIN; charset=US-ASCII\r\nX-eGroups-From: &quot;S. Alexander Jacobson&quot; &lt;alex@...&gt;\r\nFrom: &quot;S. Alexander Jacobson&quot; &lt;alex@...&gt;\r\nX-Yahoo-Group-Post: member; u=4849001\r\nX-Yahoo-Profile: shop2it\r\n\r\nI was thinking about the history of programming\nlately with respect to ReST.\n\nIn the beginning there was procedural programming.\nWith procedural programming, there was a single\nobject, the computer that was assumed to process\nlarge numbers of methods/procedures/verbs.\nProcedural programming ended up with scaling\nproblems because it provided no obvious way of\nmanaging this proliferation of methods each taking\ntheir own arguments and each requiring substantial\ndocumentation/training to understand their\noperation.\n\nObject oriented programming attempted to address\nthis problem by associating methods with\nparticular object classe.  The hope was that the\nmethods of any particular object class would be\nobvious because if you understood the nature of\nthe object you would have to understand what it\ndid.  In practice, this worked better than\nprocedural programming but it never worked\nprticularly well.  Object modeling was never\nobvious.  Guessing what methods of an object did\nwas always a dangerous proposition.  Objects still\nended up proliferating methods requiring the\nuser to traverse a complex object model to\nunderstand a system.  Object orienged programming\nfailed to scale.\n\nReST programming takes this evolution further.\nWhere OOP created a relatively small number of\nobject classes, ReST creates many.  Where OOP\nreduced the number of methods per object\nmoderately, ReST reduces them drastically.\nAlthough we largely have been discussing ReST in\nterms of web architecture, there is no obvious\nreason why those design principles should not\napply equally well within smaller scale\nprogramming contexts.\n\nThe transition to OOP resulted in new programming\nlanguages specifically designed to support that\nstyle of programming.  Is anyone working on a\nReST Oriented Programming Environments?\n\nSuch an environemnt could automatically handle\nmost of the housekeeping associated with GET/PUT.\nIt could reduce the total language syntax\nimmensely.  It could handle mapping operations\nonto web servers if they are destined for public\nvisibility,etc.\n\nHere is a strawman implementation of RESTLog:\n\n  class Blog (Collection):\n\tRepresentation: RSS\n\tPOST RSS-Item: OK\n  publish Blog /path/to/blog\n\nFor things that are more complex and require some\nactual logic beyond simply having a ReST\narchitecture e.g. database access\n\n  class Blog (Collection):\n\tRepresentation: RSS\n\tGET: text/xml+rss\n \tSQL databaseconnection:\n\t\tSelect columns from table\n\t\tmap in some standard way to RSS format\n  \tGET: text/html default\n\t\txslt-URL\n\n...\n\nThis is all completely a strawman.  My question is\nwhether anyone is doing anything like this?\n\n-Alex-\n\n\n\n\n\n\n\nOn Mon, 7 Apr 2003, S. Mike Dierken wrote:\n\n&gt; Just got a copy of the JavaOne conference flyer - there is a REST\n&gt; presentation... pretty cool.\n&gt; http://servlet.java.sun.com/javaone/sf2003/conf/sessions/display-3163.en.jsp\n&gt;\n&gt; Aaargh... they call it Relational State Transfer. Must&#39;ve outsourced the\n&gt; marketing literature...\n&gt;\n&gt; ===\n&gt; Speakers\n&gt;  Ed Bratt Sun Microsystems\n&gt;\n&gt; Abstract\n&gt; This presentation compares and contrasts Web service integration styles as\n&gt; described by Relational State Transfer (REST) and SOAP-based Web services.\n&gt; Advantages and challenges of each style are compared and integration\n&gt; examples are reviewed in the context of the Sun TM Open Net Environment (Sun\n&gt; ONE) platform Integration Server. Is it really possible to use GET and PUT\n&gt; exclusively to integrate both with and across my firewall? What do I gain by\n&gt; using the traditional Web service architecture approach? These and other\n&gt; issues are presented.\n&gt;\n&gt;\n&gt;\n&gt; To unsubscribe from this group, send an email to:\n&gt; rest-discuss-unsubscribe@yahoogroups.com\n&gt;\n&gt;\n&gt;\n&gt; Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/\n&gt;\n&gt;\n\n___________________________________________________________________\nS. Alexander Jacobson                   i2x Media\n1-212-787-1914 voice                    1-603-288-1280 fax\n\n\n"}}
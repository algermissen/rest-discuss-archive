{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":401876259,"authorName":"Will Hartung","from":"Will Hartung &lt;willh@...&gt;","profile":"gaminginparis","replyTo":"SENDER","senderId":"A-vuXVWJWL7Y1S62J2ShiuPe9VMTUbCmxfDy8Fg8HznZFJbLqREXjgqC44JsJkkQ8b6PG7HPF5dGxnuqE1YJCLv1T9N4jaJBXA","spamInfo":{"isSpam":false,"reason":"4"},"subject":"Re: [rest-discuss] Newbie REST Question","postDate":"1253911235","msgId":13529,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDM5MTVjNjlkMDkwOTI1MTM0MHZlNTJkMGY2bzU0NDkyNDVlNTQwMGVlOTNAbWFpbC5nbWFpbC5jb20+","inReplyToHeader":"PDI4ZTI1NzExMDkwOTI1MDc0NHE0ZGFiZmJlYnVkMjQxZWVhYmM5OTk5NGMzQG1haWwuZ21haWwuY29tPg==","referencesHeader":"PGg5Z2ltNytqNDl1QGVHcm91cHMuY29tPgkgPGRlNzBiMzlkMDkwOTI0MTQ0MW0zOTZjZjFjZXY1YmY4OTVhNTNkZTdjNmQzQG1haWwuZ21haWwuY29tPgkgPDQ2REZCQ0EzLTY2QTctNEJCQy1CMUY5LTE3N0JFNEE5QzBBQUBpbm5vcS5jb20+CSA8MDEyOTAxQzEtNkRCQS00QjE3LThERTgtNzk1NjRBMjEzMzVEQHVzaXQudWlvLm5vPgkgPDIxNjA2ZGNmMDkwOTI1MDQ1Mmw3YTMyNjMxN3ZkNDhlMjA5ZmNhNjQxM2ViQG1haWwuZ21haWwuY29tPgkgPDlmMDU3ODI5MDkwOTI1MDcxN3M3MGZiMWY0ZXE4NjcwZmY2YWM5MGIxM2FiQG1haWwuZ21haWwuY29tPgkgPDI4ZTI1NzExMDkwOTI1MDc0NHE0ZGFiZmJlYnVkMjQxZWVhYmM5OTk5NGMzQG1haWwuZ21haWwuY29tPg=="},"prevInTopic":13528,"nextInTopic":13530,"prevInTime":13528,"nextInTime":13530,"topicId":13516,"numMessagesInTopic":67,"msgSnippet":"... Yea, that s kind of a baby/bathwater thing. Cool URIs I think will naturally happen simply because of the nature of the architecture. It will also happen","rawEmail":"Return-Path: &lt;willh@...&gt;\r\nX-Sender: willh@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 22728 invoked from network); 25 Sep 2009 20:40:58 -0000\r\nX-Received: from unknown (98.137.34.46)\n  by m8.grp.re1.yahoo.com with QMQP; 25 Sep 2009 20:40:58 -0000\r\nX-Received: from unknown (HELO an-out-0708.google.com) (209.85.132.240)\n  by mta3.grp.sp2.yahoo.com with SMTP; 25 Sep 2009 20:40:57 -0000\r\nX-Received: by an-out-0708.google.com with SMTP id b2so937618ana.11\n        for &lt;rest-discuss@yahoogroups.com&gt;; Fri, 25 Sep 2009 13:40:35 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.101.10.33 with SMTP id n33mr746515ani.15.1253911235338; Fri, \n\t25 Sep 2009 13:40:35 -0700 (PDT)\r\nIn-Reply-To: &lt;28e257110909250744q4dabfbebud241eeabc99994c3@...&gt;\r\nReferences: &lt;h9gim7+j49u@...&gt;\n\t &lt;de70b39d0909241441m396cf1cev5bf895a53de7c6d3@...&gt;\n\t &lt;46DFBCA3-66A7-4BBC-B1F9-177BE4A9C0AA@...&gt;\n\t &lt;012901C1-6DBA-4B17-8DE8-79564A21335D@...&gt;\n\t &lt;21606dcf0909250452l7a326317vd48e209fca6413eb@...&gt;\n\t &lt;9f0578290909250717s70fb1f4eq8670ff6ac90b13ab@...&gt;\n\t &lt;28e257110909250744q4dabfbebud241eeabc99994c3@...&gt;\r\nDate: Fri, 25 Sep 2009 13:40:35 -0700\r\nMessage-ID: &lt;3915c69d0909251340ve52d0f6o5449245e5400ee93@...&gt;\r\nTo: Peter Williams &lt;pezra@...&gt;\r\nCc: Rest List &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nX-eGroups-Msg-Info: 2:4:8:0:2\r\nFrom: Will Hartung &lt;willh@...&gt;\r\nSubject: Re: [rest-discuss] Newbie REST Question\r\nX-Yahoo-Group-Post: member; u=401876259; y=OJbNy4f32oiOJesHpdiS_-HQBg5ml6073mNG-k06cO3-RbA67nsH5A\r\nX-Yahoo-Profile: gaminginparis\r\n\r\nOn Fri, Sep 25, 2009 at 7:44 AM, Peter Williams &lt;pezra@...&gt; wrote:\n&gt;\n&gt; URI construction is something that should be avoided for all the\n&gt; reasons already mentioned in this thread. However, giving up &quot;cool\n&gt; URIs&quot; as a way to reduce the possibility of URI construction would be\n&gt; a very unfortunate choice.\n\nYea, that&#39;s kind of a baby/bathwater thing.\n\n&quot;Cool&quot; URIs I think will naturally happen simply because of the nature\nof the architecture. It will also happen because developers are the\nones who must create these things, code them, and type them in.\n\nWhile at an API and architectural level URIs are opaque, at an\nimplementation level they&#39;re most certainly not.\n\nIf someone deep links, then, truthfully, that&#39;s an unsupported client\ndependency. While it would be polite to keep track of old URI, to\nredirect if necessary, etc., after a time that because legacy cruft\nthat will likely simply be removed from the system.\n\nYou could argue that with v1 of a scheme, the URI works. On v2, the\nURI is redirected (if practical), or 410&#39;d, acknowledging that it once\nexisted, but no longer. Finally, by v3, the client will simply get a\n404 or some other generic, catchall response unrelated to the specific\nURI.\n\nHowever, this does bring up an interesting chicken/egg problem.\n\nAt some root, all these rules are out the door, because at some root,\nyou&#39;ll want to document the entry points in to the system. These URIs\nwill very likely be constructed, and therefore transparent.\n\nIf for no other reason than efficiency, it seems unrealistic that an\napplication must re-examine that API for every invocation.\n\nHow far does one push it?\n\nFor example:\n\nhttp://example.com/ returns a list of URIs for the various resources\nit publishes. One is the person/people collection.\n\nhttp://example.com/people returns a list of everyone in the system,\nbut that&#39;s absurd for many cases, so there&#39;s a search facility\n\nhttp://example.com/people?userId=1234 returns a collection of all\npeople with a userId of 1234 (in this case, only 1).\n\nThis result has a link to get the user details: http://example.com/person/1234\n\nNow, I don&#39;t think it&#39;s realistic that an application would need to\nstart a transaction at the root, &quot;discover&quot; the people resource URI,\nsearch for the user to discover the Users reference URI, and finally\ncalling that to get the actual user data.\n\nSo, it&#39;s not a 100% rule, it&#39;s a guideline that promotes robustness,\nbut at the end of the day, folks have to use this stuff too.\n\nIt may be interesting to publish a document that holds the details of\nan API. The client can use that document as a local caching\nindiciator. As long as the document is unchanged, the client can cache\nthe URIs it discovers, and know it doesn&#39;t have to look them up any\nmore. If the doc does change, then the client can fall back in to\n&quot;discovery&quot; mode (for example, in this case, crawling from the root of\nthe service again). Doesn&#39;t even have to be a &quot;real&quot; document, it can\njust be a caching indicator.\n\nRegards,\n\nWill Hartung\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":331949899,"authorName":"Sebastien Lambla","from":"&quot;Sebastien Lambla&quot; &lt;seb@...&gt;","profile":"serialseb","replyTo":"SENDER","senderId":"UbM4Qh8XqUYssAEidyXKtxNcQJelEmucP3MBauVD9jQQn9_5heuVkcscm3KzHJ4j_046sdtzWdoeQoDVNHDsaztJ6evYq1yY-EaSCZs","spamInfo":{"isSpam":false,"reason":"12"},"subject":"RE: [rest-discuss] Rebooting REST","postDate":"1261620693","msgId":14394,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEJMVTEwMi1EUzE4MEY3MTM1OEY5ODk2QUJFNDEyMEI1N0YwQHBoeC5nYmw+","inReplyToHeader":"PDIwMDkxMjIzMTgxODQ2LjgzODYyMzU2LmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","referencesHeader":"PDIwMDkxMjIzMTgxODQ2LjgzODYyMzU2LmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4="},"prevInTopic":14392,"nextInTopic":14397,"prevInTime":14393,"nextInTime":14395,"topicId":14392,"numMessagesInTopic":13,"msgSnippet":"Started replying, but deleted most of it. What is it that your proposal is bringing through UML diagrams that s going to help implementers in the wild","rawEmail":"Return-Path: &lt;seb@...&gt;\r\nX-Sender: seb@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 90367 invoked from network); 24 Dec 2009 02:11:34 -0000\r\nX-Received: from unknown (66.196.94.107)\n  by m2.grp.sp2.yahoo.com with QMQP; 24 Dec 2009 02:11:34 -0000\r\nX-Received: from unknown (HELO blu0-omc1-s23.blu0.hotmail.com) (65.55.116.34)\n  by mta3.grp.re1.yahoo.com with SMTP; 24 Dec 2009 02:11:34 -0000\r\nX-Received: from BLU102-DS1 ([65.55.116.7]) by blu0-omc1-s23.blu0.hotmail.com with Microsoft SMTPSVC(6.0.3790.3959);\n\t Wed, 23 Dec 2009 18:11:34 -0800\r\nX-Originating-Email: [seb@...]\r\nMessage-ID: &lt;BLU102-DS180F71358F9896ABE4120B57F0@...&gt;\r\nReturn-Path: seb@...\r\nTo: &quot;&#39;Eric J. Bowman&#39;&quot; &lt;eric@...&gt;,\n\t&lt;rest-discuss@yahoogroups.com&gt;\r\nReferences: &lt;20091223181846.83862356.eric@...&gt;\r\nIn-Reply-To: &lt;20091223181846.83862356.eric@...&gt;\r\nDate: Thu, 24 Dec 2009 02:11:33 +0000\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;us-ascii&quot;\r\nContent-Transfer-Encoding: 7bit\r\nX-Mailer: Microsoft Office Outlook 12.0\r\nThread-Index: AcqENxQskJ1Yp1zFRM2ImTl5bYOh0QABykng\r\nContent-Language: en-gb\r\nX-OriginalArrivalTime: 24 Dec 2009 02:11:34.0614 (UTC) FILETIME=[6AAE7F60:01CA843E]\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Sebastien Lambla&quot; &lt;seb@...&gt;\r\nSubject: RE: [rest-discuss] Rebooting REST\r\nX-Yahoo-Group-Post: member; u=331949899; y=hGOidhq9SmBtsNT4oVyueI94OKylwuRuxb9zG4XFmsyjm367\r\nX-Yahoo-Profile: serialseb\r\n\r\nStarted replying, but deleted most of it.\n\nWhat is it that your proposal is bringing through UML diagrams that&#39;s going\nto help implementers in the wild understand how to do all this stuff?\n\nWhy is getting away from implementations and driving towards modelling\nhelping?\n\nI&#39;m sure there&#39;s a compelling core scenario that your proposal solve, I just\ndon&#39;t find it in the needs my community is exhibiting.\n\nSeb\n\n-----Original Message-----\nFrom: rest-discuss@yahoogroups.com [mailto:rest-discuss@yahoogroups.com] On\nBehalf Of Eric J. Bowman\nSent: 24 December 2009 01:19\nTo: rest-discuss@yahoogroups.com\nSubject: [rest-discuss] Rebooting REST\n\nThere is no &quot;best&quot; architecture, there is only the architecture that is\nbest for your system.\n\nAll quotes are by Roy, taken from the comment thread here:\n\nhttp://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven\n\nThe terms Modeling, Visualization, Analysis, Implementation and mapping\nare taken from the &quot;Software Architecture:  Foundations, Theory, and\nPractice&quot; textbook.  All jargon not covered in that book is defined in\nDr. Fielding&#39;s dissertation.\n\nIt is my belief that following a disciplined approach to REST\ndevelopment, where the focus is on resource modeling, may result in a\nsystem that falls short of REST.  Yet, due to its nature as a\ndistributed hypermedia, the result may be a beneficial and proper\narchitecture for that system.\n\n&quot;\nThe purpose of resource modeling is to figure out what resources you\nhave that are worth identifying, representing, and manipulating.\n&quot;\n\nI would like to offer a formal definition for Resource Oriented\nArchitecture (ROA) as an umbrella style for a plethora of architectures\nwhich do not apply the full set of REST constraints, and therefore\ncannot be considered REST.  (I considered Data Oriented Architecture,\nbut that idea was DOA... I&#39;m open to suggestions. :-)  The ROA styles\nare derived from REST and may be deemed REST-derived, REST-inspired,\nREST-oriented or RESTish, but not REST or RESTful.\n\n&quot;\nThat doesn&#39;t mean that I think everyone should design their own systems\naccording to the REST architectural style.  REST is intended for\nlong-lived network-based applications that span multiple organizations.\nIf you don&#39;t see a need for the constraints, then don&#39;t use them.\nThat&#39;s fine with me as long as you don&#39;t call the result a REST API. I\nhave no problem with systems that are true to their own architectural\nstyle.\n&quot;\n\nThe most important concept in REST is that systems meet the constraints\nof the underlying architecture of the Web, allowing GET to be optimized\nto the fullest extent possible.  Roy has identified the native Web\narchitecture as the client-cache-stateless-server set of constraints.\nThese constraints are inviolable to any ROA style, as would be the\nidentification of resources constraint -- no query-driven resource\nmatrices or RPC here (unless you&#39;re using Roy&#39;s very strict definition\nof RPC, vs. mine, which is any endpoint that&#39;s only intended as a POST\nhandler).\n\n&quot;\nQuery is not a substitute for identification of resources.\n&quot;\n\nROA defines the following as optional constraints of the style:\nlayered system, code-on-demand, manipulation of resources through\nrepresentations, self-descriptive messages, and hypermedia as the\nengine of application state.  This results in (I think) 36 allowable\narchitectural styles, compared with 2 in REST (REST or REST+CoD).\nI&#39;ve chosen the minimal set of constraints which allow GET to be\noptimized for scaling on the Web.\n\n&quot;\nREST is software design on the scale of decades:  every detail is\nintended to promote software longevity and independent evolution.  Many\nof the constraints are directly opposed to short-term efficiency.\nUnfortunately, people are fairly good at short-term design, and usually\nawful at long-term design.  Most don&#39;t think they need to design past\nthe current release.  There are more than a few software methodologies\nthat portray any long-term thinking as wrong-headed, ivory tower design\n(which it can be if it isn&#39;t motivated by real requirements).\n&quot;\n\nIf the system&#39;s real requirements don&#39;t lead to REST, so be it.\nHowever, any distributed hypermedia system ought to be able to be\nmodeled as REST.  Visualization and Analysis of a REST architectural\nModel doesn&#39;t have to lead to a full mapping of the Model in the\nImplementation.  But, the absent mappings can at least be understood in\nterms of benefits and tradeoffs.  If, over time, a benefit comes to\noutweigh its tradeoffs, the Implementation may be more fully mapped to\nthe Model, rather than having to devise a new Model.\n\nSo the goal of a disciplined approach to REST development is the\ncreation of a REST architectural Model to guide system Implementation.\nThere is no requirement that the resulting Implementation contain a\nfull mapping to the Model.  If it does, it&#39;s REST.  If it does not, it\nis at least an ROA architecture derived from (or inspired by, if Roy\nprefers ;-) REST. The resulting system remains true to its architectural\nstyle, and has somewhat of a blueprint to guide further development in\nthe right direction.  At least the resulting system is capable of\noptimizing the hell out of GET.\n\nBy rebooting REST, I mean that discussions on this list should be less\nimplementation-oriented and more resource-modeling-oriented.\nEveryone&#39;s assignment over the Holidays is to devise a REST\narchitectural Model for the good ol&#39; shopping cart problem.  I use\nbubble charts, but think I should give UML a try.  If folks pitch in on\nthis, the conversation achieves two results.  First, a consensus\napproach to formally modeling REST resources (perhaps using UML,\nperhaps not). Second, a consensus architectural Model of a REST\nshopping cart.\n\nI tend to see the shopping-cart problem in terms of tabular data, so\nI&#39;m likely going to want to Implement my shopping cart using XHTML.\nHenry Story tends to see the shopping-cart problem in terms of RDF\ntuples, so he&#39;ll likely choose another media type.  Both approaches are\nvalid, so a Model should be agnostic to different approaches taken at\nthe Implementation level. I have my own Visualization and Analysis which\nleads me to Implement an XHTML shopping cart, whereas Henry has his own\nVisualization and Analysis which leads him to Implement an RDF shopping\ncart.\n\n&quot;\nA distributed queue is an implementation choice.  You can certainly\nimplement some applications by having them interact with a queue-like\nresource in a RESTful manner.  However, if your client relies on the\nresource being a queue, then it certainly isn&#39;t a RESTful API.  Do you\nsee the difference?  Encoding knowledge within clients and servers of\nthe other side&#39;s implementation mechanism is what we are trying to\navoid.\n&quot;\n\nSuch a Model then becomes what people seem to want so badly from REST:\na reference Implementation.  Except what we actually give them is a\nreference Model.  Anyone can post their take on an Implementation of\nthat Model, and the results can be discussed in terms of how well the\nImplementation maps to the Model.  Any Implementation on the Web may be\nlinked to and discussed in the same terms.  The URIs will likely all be\nvery different, with less variation in media type selection, and even\nless variation in method selection.\n\nInstead of continuing down the same path of describing REST in terms of\nImplementation, which has obviously failed, the conversation is changed\nto one of how well an Implementation maps to a known Model in terms of\nbenefits and tradeoffs.  The goal is to teach how to Implement the REST\narchitectural style guided by a Model.  All efforts at REST are doomed\nto fail if resources are not Modeled properly before URIs are defined.\nAll efforts at REST which _do_ begin with properly Modeling resources\nare doomed to succeed, so long as the Implementation stays true to the\nresulting ROA architectural Model.  If anyone follows what I&#39;m getting\nat.\n\nPeople misconstrue the declaration of &quot;Not REST&quot; to be a value judgment\nagainst the system.  Personally, I only mean it as a value judgment on\nthe selection of a buzzword where it does not apply.  When I state that\nthe Talis n2 API is &quot;Not ROA&quot; then, yeah, I&#39;m passing a value judgment\nagainst the system, for its failure to allow GET optimization at all.\nThe same goes for all systems that don&#39;t meet the client-cache-\nstateless-server and identification of resources constraints.  They fail\nto leverage the native Web architecture for one, and fail to even\napproach REST by neglecting to properly identify resources.\n\nDeriving an approach to REST which degrades gracefully to result in an\nROA style, while emphasizing the use of standard media types, will\nresult in REST motivating the growth and interoperability of the Web.\nWhich is better than the current state of affairs, where failure to\nunderstand REST is resulting in fragmentation of the Web.  Only if this\neffort, and subsequent efforts at changing the conversation fail, will\nthe meme &quot;REST is hard to learn&quot; be proven.  All we know for a fact, is\nthat the current conversation has not succeeded.\n\nThere is no &quot;best&quot; architecture, there is only the architecture that is\nbest for your system (and it better optimize the hell out of GET).\n\n-Eric\n\n(Merry Christmas and/or Happy Holidays, everyone!)\n\n\n------------------------------------\n\nYahoo! Groups Links\n\n\n\n\n\n"}}
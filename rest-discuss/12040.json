{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":383005568,"authorName":"scameron02","from":"&quot;scameron02&quot; &lt;scott.cameron@...&gt;","profile":"scameron02","replyTo":"SENDER","senderId":"6apV_fVTPKtqq_aS3VS0dT_huehUOAOHw2d-IXEDgZHIz3TN_sKnPRgoK0Ok2JBjyH2RniBBAp-EfOGP3qjZcA1h1UG-wo1T-neE","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Partial Resource Views","postDate":"1232666857","msgId":12040,"canDelete":false,"contentTrasformed":false,"systemMessage":true,"headers":{"messageIdInHeader":"PGdsYXZkOStxOTVjQGVHcm91cHMuY29tPg=="},"prevInTopic":0,"nextInTopic":12041,"prevInTime":12039,"nextInTime":12041,"topicId":12040,"numMessagesInTopic":6,"msgSnippet":"I ve been reading the Data format of updates   thread with interest because it touches on","rawEmail":"Return-Path: &lt;scott.cameron@...&gt;\r\nReceived: (qmail 39181 invoked from network); 23 Jan 2009 00:14:44 -0000\r\nReceived: from unknown (66.218.67.96)\n  by m43.grp.scd.yahoo.com with QMQP; 23 Jan 2009 00:14:44 -0000\r\nReceived: from unknown (HELO n51a.bullet.mail.sp1.yahoo.com) (66.163.168.145)\n  by mta17.grp.scd.yahoo.com with SMTP; 23 Jan 2009 00:14:44 -0000\r\nReceived: from [69.147.65.148] by n51.bullet.mail.sp1.yahoo.com with NNFMP; 23 Jan 2009 00:14:44 -0000\r\nReceived: from [66.218.66.77] by t11.bullet.mail.sp1.yahoo.com with NNFMP; 23 Jan 2009 00:14:44 -0000\r\nX-Sender: scott.cameron@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 67792 invoked from network); 22 Jan 2009 23:27:39 -0000\r\nX-Received: from unknown (66.218.67.97)\n  by m49.grp.scd.yahoo.com with QMQP; 22 Jan 2009 23:27:39 -0000\r\nX-Received: from unknown (HELO n17c.bullet.sp1.yahoo.com) (69.147.64.126)\n  by mta18.grp.scd.yahoo.com with SMTP; 22 Jan 2009 23:27:39 -0000\r\nX-Received: from [69.147.65.171] by n17.bullet.sp1.yahoo.com with NNFMP; 22 Jan 2009 23:27:39 -0000\r\nX-Received: from [66.218.67.199] by t13.bullet.mail.sp1.yahoo.com with NNFMP; 22 Jan 2009 23:27:39 -0000\r\nDate: Thu, 22 Jan 2009 23:27:37 -0000\r\nTo: rest-discuss@yahoogroups.com\r\nMessage-ID: &lt;glavd9+q95c@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: multipart/alternative; boundary=&quot;9-0820426555-1163728784=:7&quot;\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-Yahoo-Newman-Property: groups-system\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;scameron02&quot; &lt;scott.cameron@...&gt;\r\nSubject: Partial Resource Views\r\nX-Yahoo-Group-Post: member; u=383005568; y=CRvaOuJloMGmSPh8Sj0XqU3bN-TXZfKp2D11wj7--CCDou_fjw\r\nX-Yahoo-Profile: scameron02\r\nX-eGroups-Approved-By: gonga_thrash &lt;distobj@...&gt; via web; 23 Jan 2009 00:14:42 -0000\r\n\r\n\r\n--9-0820426555-1163728784=:7\r\nContent-Type: text/plain; charset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n\nI&#39;ve been reading the Data format of updates\n&lt;http://tech.groups.yahoo.com=\r\n/group/rest-discuss/message/11940&gt;  thread\nwith interest because it touches=\r\n on something I think is quite\nfundamental to a certain class of RESTful ap=\r\nplications (namely, ones\nthat operate very frequently on many different res=\r\nources with lots and\nlots of modifications).\n\nIn some ways it&#39;s kind of a &quot;=\r\nlast mile&quot; problem of URI design because it\ndeals with figuring out where t=\r\no draw the line between what&#39;s\naddressable and what&#39;s not.  The key questio=\r\nn seems to be:  how does one\ndeal in a RESTful way with resources that are =\r\n(a) potentially large\nand/or processing-intensive to produce representation=\r\ns for, and that (b)\nclients probably only need to operate on small parts of=\r\n at one time.\n\nTake the common example of a customer resource represented a=\r\ns a\ncustom-defined XML document:\n\nhttp://example.org/customer/123\n\n&lt;custome=\r\nr&gt;\n      &lt;name&gt;\n           &lt;first-name&gt;Bill&lt;/first-name&gt;\n           &lt;last-n=\r\name&gt;Brasky&lt;/last-name&gt;\n      &lt;/name&gt;\n      &lt;address&gt;\n           &lt;street&gt;123=\r\n Nowhere Lane&lt;/street&gt;\n           &lt;city&gt;Metropolis&lt;/city&gt;\n           &lt;count=\r\nry&gt;Canada&lt;/country&gt;\n      &lt;/address&gt;\n      ...\n      ...\n&lt;/customer&gt;\n\nThere=\r\n could be any amount of information in this Customer document. \nImagine tha=\r\nt this document does not map 100% to persisted storage but\nrather some or a=\r\nll of it may be dynamically generated by the server at\nGET time.  Some of t=\r\nhe dynamically calculated properties are relatively\nexpensive to calculate =\r\nso you only want to ask for them when know for\nsure that you need to see th=\r\nem.\n\nThe logical answer seems to be to rethink the resource breakdown and,\n=\r\nperhaps, move the addressable boundary one or more levels lower to\naddress =\r\nnot just customers, but specific characteristics (or properties)\nof custome=\r\nrs.  Take the following:\n\n      1)  http://example.org/customer/123      =\r\n=3D=3D&gt;  default view gets you\neverything\n      2)  http://example.org/cust=\r\nomer/123/name     =3D=3D&gt; returns just\n&lt;customer&gt;&lt;name&gt;...&lt;/name&gt;&lt;/customer=\r\n&gt;\n      3)  http://example.org/customer/123/address     =3D=3D&gt; same as #2\n=\r\nexcept returns address intead of name\n      4)  http://example.org/customer=\r\n/123/name;address    =3D=3D&gt; returns\nboth name and address\n      5)  http:/=\r\n/example.org/customer/123/address;name    =3D=3D&gt; same as #4\n\nTo some degre=\r\ne, this could be viewed as form of batched GET, but as long\nas all of the e=\r\nlements in the customer document are optional (a customer\nis still a custom=\r\ner even with just a fragment of his/her information)\nthe representation ret=\r\nurned is still a valid customer document and can\nbe treated as such.\n\nThe f=\r\nirst thing that jumps out at me here is that there are many\ndifferent URIs =\r\nthat address exactly the same view of exactly the same\nresource.  Based on =\r\nmy understanding of REST, this is an OK thing to do\nas long as you have goo=\r\nd hypermedia support assisting clients with the\nstate transitions.  Somethi=\r\nng based on URI templates might be a good fit\nhere.\n\nBut what about modific=\r\nations?  If I&#39;m just changing the customer name I\ndon&#39;t want to have to GET=\r\n the entire customer representation, nor do I\nwant to have to PUT the entir=\r\ne thing back with only the name changed. \nDoing these things seems hugely i=\r\nnefficient especially when extrapolated\nto a large scale.\n\nI&#39;ve seen PATCH =\r\nrecommended for use, but this only helps you with the\npartial update proble=\r\nm.  There are really two important sides to this\ncoin that both need to be =\r\nconsidered:\n\n      1)  Limiting the resource view to just the part you care=\r\n about when\nGETting.\n      2)  PUTting only what you actually change (with =\r\nsome sensible\nboundary constraints in the design)\n\nPATCH seems to only addr=\r\ness #2.  I guess you could use the URI scheme I\nlay out above and make anyt=\r\nhing below &quot;123&quot; GET-only resources.  Then\nany PATCH would be sent to the c=\r\nustomer-level resource itself\n(.../customer/123).  Seems a bit inconsistent=\r\n.  Not to mention the fact\nthat PATCH doesn&#39;t seem to actually exist in pra=\r\nctice yet.\n\nIt seems like allowing both PUT and GET all the way down to the=\r\n property\nlevel is better, but it&#39;s not without its own complications.  For=\r\n\nexample, can I even use PUT correctly here?  Modifying a property (say,\nth=\r\ne name property) is actually modifying the customer resource itself. \nMaybe=\r\n it updates a timestamp property or version property on the\ncustomer resour=\r\nce automatically.  Does this mean that we now have to\nfall back to POST ins=\r\ntead of PUT?  I&#39;m not sure.\n\nThe bottom line is that I think this concept o=\r\nf (for lack of a better\nterm) &quot;partial resource views&quot; is closely related t=\r\no the contentious\nissue of partial resource updates.  It also seems closely=\r\n related to the\nequally contentious issue of batching operations in general=\r\n.  In systems\nwhere a large number of resources are being operated on and r=\r\nesource\nchanges are happening frequently, there&#39;s no choice but to address =\r\nthese\nissues.  Pushing the batching into the resource addressing seems REST=\r\nful\nto me, but I&#39;m not sure.\n\nI know Joe Gregorio&#39;s proposal for partial up=\r\ndates\n&lt;http://bitworking.org/news/296/How-To-Do-RESTful-Partial-Updates&gt; \nr=\r\neceived some heat when it was originally posted but, personally, I\nthought =\r\nit was a very clever approach.  I understood why people didn&#39;t\nlike him muc=\r\nking with Atom in his example, but I didn&#39;t really get why\nit wasn&#39;t consid=\r\nered RESTful as a more general solution.  It seemed very\naligned with the p=\r\nrinciples of hypermedia to me.  One thing in\nparticular I liked about it is=\r\n that is has the potential to address both\nsides of the issue I&#39;m describin=\r\ng here.  You could apply this same\nprinciple to partial reads as well as pa=\r\nrtial updates.\n\nYour thoughts on this subject are greatly appreciated.  Tha=\r\nnks for your\ntime!\n\nscott\n\n\n\r\n--9-0820426555-1163728784=:7\r\nContent-Type: text/html; charset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;font size=3D&quot;2&quot; face=3D&quot;georgia&quot;&gt;&lt;br&gt;I&#39;ve been reading the &lt;a href=3D&quot;http=\r\n://tech.groups.yahoo.com/group/rest-discuss/message/11940&quot;&gt;Data format of u=\r\npdates&lt;/a&gt; thread with interest because it touches on something I think is =\r\nquite fundamental to a certain class of RESTful applications (namely, ones =\r\nthat operate very frequently on many different resources with lots and lots=\r\n of modifications).&lt;br&gt;&lt;br&gt;In some ways it&#39;s kind of a &quot;last mile&quot; problem =\r\nof URI design because it deals with figuring out where to draw the line bet=\r\nween what&#39;s addressable and what&#39;s not.&nbsp; The key question seems to be:=\r\n&nbsp; how does one deal in a RESTful way with resources that are (a) poten=\r\ntially large and/or processing-intensive to produce representations for, an=\r\nd that (b) clients probably only need to operate on small parts of at one t=\r\nime.&lt;br&gt;&lt;br&gt;Take the common example of a customer resource represented as a=\r\n custom-defined XML document:&lt;br&gt;&lt;br&gt;http://example.org/customer/123&lt;br&gt;&lt;br=\r\n&gt;&lt;customer&gt;&lt;br&gt;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;&lt;br&gt;&nbsp;&nbsp;&=\r\nnbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;first-name&gt;Bill&lt;/first-=\r\nname&gt;&lt;br&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;last=\r\n-name&gt;Brasky&lt;/last-name&gt;&lt;br&gt;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/name&gt;=\r\n&lt;br&gt;&nbsp;&nbsp;&nbsp;&nbsp; &lt;address&gt;&lt;br&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nb=\r\nsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;street&gt;123 Nowhere Lane&lt;/street&gt;&lt;b=\r\nr&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;city&gt;Metrop=\r\nolis&lt;/city&gt;&lt;br&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=\r\n &lt;country&gt;Canada&lt;/country&gt;&lt;br&gt;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/add=\r\nress&gt;&lt;br&gt;&nbsp;&nbsp;&nbsp;&nbsp; ...&lt;br&gt;&nbsp;&nbsp;&nbsp;&nbsp; ...&lt;br=\r\n&gt;&lt;/customer&gt;&lt;br&gt;&lt;br&gt;There could be any amount of information in this =\r\nCustomer document.&nbsp; Imagine that this document does not map 100% to pe=\r\nrsisted storage but rather some or all of it may be dynamically generated b=\r\ny the server at GET time.&nbsp; Some of the dynamically calculated properti=\r\nes are relatively expensive to calculate so you only want to ask for them w=\r\nhen know for sure that you need to see them.&lt;br&gt;&lt;br&gt;The logical answer seem=\r\ns to be to rethink the resource breakdown and, perhaps, move the addressabl=\r\ne boundary one or more levels lower to address not just customers, but spec=\r\nific characteristics (or properties) of customers.&nbsp; Take the following=\r\n:&lt;br&gt;&lt;br&gt;&nbsp;&nbsp;&nbsp;&nbsp; 1)&nbsp; http://example.org/customer/123&=\r\nnbsp; &nbsp; &nbsp; =3D=3D&gt;&nbsp; default view gets you everything&lt;br&gt;&lt;/=\r\nfont&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;georgia&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/font&gt;&lt;fon=\r\nt size=3D&quot;2&quot; face=3D&quot;georgia&quot;&gt;2)&nbsp; http://example.org/customer/123/name=\r\n&nbsp;&nbsp;&nbsp;&nbsp; =3D=3D&gt; returns just &lt;customer&gt;&lt;name&g=\r\nt;...&lt;/name&gt;&lt;/customer&gt;&lt;br&gt;&lt;/font&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;geor=\r\ngia&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/font&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;georgia&quot;&gt;3)&n=\r\nbsp; http://example.org/customer/123/address&nbsp;&nbsp;&nbsp;&nbsp; =3D=3D=\r\n&gt; same as #2 except returns address intead of name&lt;br&gt;&lt;/font&gt;&lt;font size=\r\n=3D&quot;2&quot; face=3D&quot;georgia&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/font&gt;&lt;font size=3D&quot;2&quot; fa=\r\nce=3D&quot;georgia&quot;&gt;4)&nbsp; http://example.org/customer/123/name;address&nbsp;&=\r\nnbsp;&nbsp; =3D=3D&gt; returns both name and address&lt;br&gt;&lt;/font&gt;&lt;font size=\r\n=3D&quot;2&quot; face=3D&quot;georgia&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/font&gt;&lt;font size=3D&quot;2&quot; fa=\r\nce=3D&quot;georgia&quot;&gt;5)&nbsp; http://example.org/customer/123/address;name&nbsp;&=\r\nnbsp;&nbsp; =3D=3D&gt; same as #4&lt;br&gt;&lt;br&gt;To some degree, this could be view=\r\ned as form of batched GET, but as long as all of the elements in the custom=\r\ner document are optional (a customer is still a customer even with just a f=\r\nragment of his/her information) the representation returned is still a vali=\r\nd customer document and can be treated as such.&lt;br&gt;&lt;br&gt;The first thing that=\r\n jumps out at me here is that there are many different URIs that address ex=\r\nactly the same view of exactly the same resource.&nbsp; Based on my underst=\r\nanding of REST, this is an OK thing to do as long as you have good hypermed=\r\nia support assisting clients with the state transitions.&nbsp; Something ba=\r\nsed on URI templates might be a good fit here.&lt;br&gt;&lt;br&gt;But what about modifi=\r\ncations?&nbsp; If I&#39;m just changing the customer name I don&#39;t want to have =\r\nto GET the entire customer representation, nor do I want to have to PUT the=\r\n entire thing back with only the name changed.&nbsp; Doing these things see=\r\nms hugely inefficient especially when extrapolated to a large scale.&lt;br&gt;&lt;br=\r\n&gt;I&#39;ve seen PATCH recommended for use, but this only helps you with the part=\r\nial update problem.&nbsp; There are really two important sides to this coin=\r\n that both need to be considered: &lt;br&gt;&lt;br&gt;&lt;/font&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;g=\r\neorgia&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/font&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;georgia&quot;&gt;1=\r\n)&nbsp; Limiting the resource view to just the part you care about when GET=\r\nting.&lt;br&gt;&lt;/font&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;georgia&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp; =\r\n&lt;/font&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;georgia&quot;&gt;2)&nbsp; PUTting only what you act=\r\nually change (with some sensible boundary constraints in the design)&lt;br&gt;&lt;br=\r\n&gt;PATCH seems to only address #2.&nbsp; I guess you could use the URI scheme=\r\n I lay out above and make anything below &quot;123&quot; GET-only resources.&nbsp; Th=\r\nen any PATCH would be sent to the customer-level resource itself (.../custo=\r\nmer/123).&nbsp; Seems a bit inconsistent.&nbsp; Not to mention the fact tha=\r\nt PATCH doesn&#39;t seem to actually exist in practice yet.&lt;br&gt;&lt;br&gt;It seems lik=\r\ne allowing both PUT and GET all the way down to the property level is bette=\r\nr, but it&#39;s not without its own complications.&nbsp; For example, can I eve=\r\nn use PUT correctly here?&nbsp; Modifying a property (say, the name propert=\r\ny) is actually modifying the customer resource itself.&nbsp; Maybe it updat=\r\nes a timestamp property or version property on the customer resource automa=\r\ntically.&nbsp; Does this mean that we now have to fall back to POST instead=\r\n of PUT?&nbsp; I&#39;m not sure.&lt;br&gt;&lt;br&gt;The bottom line is that I think this co=\r\nncept of (for lack of a better term) &quot;partial resource views&quot; is closely re=\r\nlated to the contentious issue of partial resource updates.&nbsp; It also s=\r\neems closely related to the equally contentious issue of batching operation=\r\ns in general.&nbsp; In systems where a large number of resources are being =\r\noperated on and resource changes are happening frequently, there&#39;s no choic=\r\ne but to address these issues.&nbsp; Pushing the batching into the resource=\r\n addressing seems RESTful to me, but I&#39;m not sure.&lt;br&gt;&lt;br&gt;I know Joe Gregor=\r\nio&#39;s &lt;a href=3D&quot;http://bitworking.org/news/296/How-To-Do-RESTful-Partial-Up=\r\ndates&quot;&gt;proposal for partial updates&lt;/a&gt; received some heat when it was orig=\r\ninally posted but, personally, I thought it was a very clever approach.&nbs=\r\np; I understood why people didn&#39;t like him mucking with Atom in his example=\r\n, but I didn&#39;t really get why it wasn&#39;t considered RESTful as a more genera=\r\nl solution.&nbsp; It seemed very aligned with the principles of hypermedia =\r\nto me.&nbsp; One thing in particular I liked about it is that is has the po=\r\ntential to address both sides of the issue I&#39;m describing here.&nbsp; You c=\r\nould apply this same principle to partial reads as well as partial updates.=\r\n&lt;br&gt;&lt;br&gt;Your thoughts on this subject are greatly appreciated.&nbsp; Thanks=\r\n for your time!&lt;br&gt;&lt;br&gt;scott&lt;br&gt;&lt;br&gt;&lt;/font&gt;\n\r\n--9-0820426555-1163728784=:7--\r\n\n"}}
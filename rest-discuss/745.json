{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":23186829,"authorName":"Paul Prescod","from":"Paul Prescod &lt;paul@...&gt;","replyTo":"SENDER","senderId":"fx4VOvIYMjrfjehKi_hr9ms4eefXwxrYx87P6VO3y5IUBMYR4lhuGCyfIMIXco3vR324ul7SOLuqKbu6sRKN0H-Ua_6BzA","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] detailed protocol writeup posted","postDate":"1014011738","msgId":745,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDNDNzA5NzVBLjNBRDkyNkEyQHByZXNjb2QubmV0Pg==","referencesHeader":"PFBpbmUuV05ULjQuNDQuMDIwMjE3MTc1OTAyMC4tMzYxMDc3QG9iaXdhbj4="},"prevInTopic":744,"nextInTopic":746,"prevInTime":744,"nextInTime":746,"topicId":744,"numMessagesInTopic":4,"msgSnippet":"... It looks great but a few details: 1. I don t see how the client knows WHERE to POST to the server. It may have a priori knowledge but it may not.","rawEmail":"Return-Path: &lt;paul@...&gt;\r\nX-Sender: paul@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_0_2); 18 Feb 2002 05:58:07 -0000\r\nReceived: (qmail 93568 invoked from network); 18 Feb 2002 05:58:06 -0000\r\nReceived: from unknown (216.115.97.171)\n  by m3.grp.snv.yahoo.com with QMQP; 18 Feb 2002 05:58:06 -0000\r\nReceived: from unknown (HELO smtp1.ActiveState.com) (209.17.183.249)\n  by mta3.grp.snv.yahoo.com with SMTP; 18 Feb 2002 05:58:06 -0000\r\nReceived: from smtp3.ActiveState.com (smtp3.ActiveState.com [192.168.3.19])\n\tby smtp1.ActiveState.com (8.11.6/8.11.6) with ESMTP id g1I5w4p17012\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Sun, 17 Feb 2002 21:58:04 -0800\r\nReceived: from prescod.net (ssh1.ActiveState.com [192.168.3.32])\n\tby smtp3.ActiveState.com (8.11.6/8.11.6) with ESMTP id g1I5w3L24104\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Sun, 17 Feb 2002 21:58:03 -0800\r\nMessage-ID: &lt;3C70975A.3AD926A2@...&gt;\r\nDate: Sun, 17 Feb 2002 21:55:38 -0800\r\nX-Mailer: Mozilla 4.76 [en] (Windows NT 5.0; U)\r\nX-Accept-Language: en\r\nMIME-Version: 1.0\r\nTo: rest-discuss@yahoogroups.com\r\nSubject: Re: [rest-discuss] detailed protocol writeup posted\r\nReferences: &lt;Pine.WNT.4.44.0202171759020.-361077@obiwan&gt;\r\nContent-Type: text/plain; charset=us-ascii\r\nContent-Transfer-Encoding: 7bit\r\nX-Filtered-By: PerlMx makes it fast and easy.  See http://www.ActiveState.com/Products/PerlMx/Header\r\nFrom: Paul Prescod &lt;paul@...&gt;\r\nX-Yahoo-Group-Post: member; u=23186829\r\n\r\nLucas Gonze wrote:\n&gt; \n&gt; I have written up the conversations on one-shot notifications in a\n&gt; detailed way and posted it on the web at\n&gt; http://www.gonze.com/http-notifications.html and\n&gt; http://www.gonze.com/http-notifications.txt\n\nIt looks great but a few details:\n\n 1. I don&#39;t see how the client knows WHERE to POST to the server. It may\nhave a priori knowledge but it may not. HTTPEvents allows the server to\ntell the client where to POST through a header that is available on a\nGET or HEAD. It also allows the server to generate a URI that obviates\nthe need for the Watched-Resource-URI. This should be step &quot;0&quot;. My\nmental model was that you could surf the web and the browser would tell\nyou (discreetly) when a watchable resource popped up. Same for Google.\nIt could spider around subscribing to things. If a particular\napplication wants to skip this step, it may, if it already has an\nappropriate URI.\n\n 2. I think you overspecify the structure of the notification. \n    * arguably methods should be application dependent...\n    * I strongly feel that the input parameters should be application\ndependent!\n    * It should be possible for the response to trigger a\nre-subscription through a magic header\n    * &quot;URI MUST change for each Step 1&quot; - depends on the security level\nof the app. Should not be overspecified.\n\n&gt;   Attackers are prevented from altering the meaning of a Step 4 (Notification)\n&gt;   by the following means: the only data transmitted in the Step 4\n&gt;   (Notification) is the fact that a pre-arranged callback URI has been\n&gt;   activated. The meaning of that URI is left entirely up to the sink, which\n&gt;   generates it, and to any information exchanged during a Step 1\n&gt;   (Subscription).\n\nI think this is overspecified. The client and server might prefer to use\na signature.\n\n&gt;   Attackers are prevented from tricking a sink into believing that a Step 4\n&gt;   (Notification) has happened by the following means: the callback URI itself\n&gt;   is a secret until the source invokes it in the Step 4 (Notification), the\n&gt;   callback URI MUST be hard to guess (for example, by being a 50 character\n&gt;   random string), and the callback URI is never used more than once.\n\nThere is hardly any harm in being &quot;tricked&quot; into re-fetching the\nresource too soon. This just complicates the implementation of the\nclient side of the protocol for little benefit.\n\n 3. I haven&#39;t thought through all of the race condition issues and I&#39;m\nglad you have. But consider whether there are If-modified-since or\ne-tags tricks you can use to avoid the contortions of inventing new URIs\nand forcing a certain order of steps. I don&#39;t have time to think about\nit right now but something seems inelegant about the level of effort you\nneed to go to to avoid race conditions.\n\nAnyhow, the GET step should be optional because you may not care about\nthe current state of the resource. You only want to know if it changes.\nFor instance there may be a gateway that emails the user when the\nresource changes. The gateway doesn&#39;t want to fetch the resource every\ntime. The user will fetch it when the user wants it.\n\nYou seem not to have dealt with something on my todo list for\nHTTPEvents, container sub-resource changes. \n\n Paul Prescod\n\n"}}
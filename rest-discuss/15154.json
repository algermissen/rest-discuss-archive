{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":124198377,"authorName":"William Martinez Pomares","from":"&quot;William Martinez Pomares&quot; &lt;wmartinez@...&gt;","profile":"willmarpo","replyTo":"SENDER","senderId":"sRYjPJGtv23BwHbbC6w3CKpbMv06LakGuhafeumqAKMD8kCTckS4BhLFQ7ZLrBxGLFIDgmsVBa1USk5_kb3MHvGXUfMZkvzXvp9gDnJpmPpS5Q4Y_bNiZTrY","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: How comes to life an &quot;Application&quot; in the sense of Roy&#39;s dissertation?","postDate":"1270645821","msgId":15154,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGhwaTA3dCs3MXRrQGVHcm91cHMuY29tPg==","inReplyToHeader":"PEVDRkI3QTU2LTA2NTYtNDAwQS04NjQ2LTlFNjdGMUI0MjQ5Q0BtYWMuY29tPg=="},"prevInTopic":15152,"nextInTopic":15156,"prevInTime":15153,"nextInTime":15155,"topicId":15152,"numMessagesInTopic":30,"msgSnippet":"Hello Jan, let me try. We are talking about the data view here, as a way to define the state of an app by looking at the information flows. I would define an","rawEmail":"Return-Path: &lt;wmartinez@...&gt;\r\nX-Sender: wmartinez@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 6762 invoked from network); 7 Apr 2010 13:11:21 -0000\r\nX-Received: from unknown (98.137.34.45)\n  by m4.grp.sp2.yahoo.com with QMQP; 7 Apr 2010 13:11:21 -0000\r\nX-Received: from unknown (HELO n41b.bullet.mail.sp1.yahoo.com) (66.163.168.155)\n  by mta2.grp.sp2.yahoo.com with SMTP; 7 Apr 2010 13:11:21 -0000\r\nX-Received: from [69.147.65.150] by n41.bullet.mail.sp1.yahoo.com with NNFMP; 07 Apr 2010 13:10:24 -0000\r\nX-Received: from [98.137.34.32] by t7.bullet.mail.sp1.yahoo.com with NNFMP; 07 Apr 2010 13:10:24 -0000\r\nDate: Wed, 07 Apr 2010 13:10:21 -0000\r\nTo: rest-discuss@yahoogroups.com\r\nMessage-ID: &lt;hpi07t+71tk@...&gt;\r\nIn-Reply-To: &lt;ECFB7A56-0656-400A-8646-9E67F1B4249C@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;ISO-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-Yahoo-Newman-Property: groups-compose\r\nFrom: &quot;William Martinez Pomares&quot; &lt;wmartinez@...&gt;\r\nSubject: Re: How comes to life an &quot;Application&quot; in the sense of Roy&#39;s dissertation?\r\nX-Yahoo-Group-Post: member; u=124198377; y=xWV54XjHRff7PkCrR9K3jbluPJnc3Kv8G_BIcfXtAiXwx6qF\r\nX-Yahoo-Profile: willmarpo\r\n\r\nHello Jan, let me try.\n\nWe are talking about the data view here, as a way t=\r\no define the state of an app by looking at the information flows. I would d=\r\nefine an application as the full set of transitions between states that wou=\r\nld result in a particular goal. It depends on what the initial state is, th=\r\nose transitions and intermediate states may differ to achieve the same goal=\r\n.\n\nNow, not to confuse the application state with the particular state the =\r\napplication is in. That is explained with the steady states, meaning you ma=\r\ny have an app state that is you waiting for some request to end. The reques=\r\nts are actually information transfers, but the info does not move, it is &quot;c=\r\nopied and converted&quot; to the requestor in the requestor&#39;s format needed. Tha=\r\nt means my state changes depending on the information that I as a client ha=\r\nve, my world view.\n\nSo, in Roy&#39;s examples: looking for a word in a dictiona=\r\nry is an easy two state app (one of app waiting for the word to look up, an=\r\nd the next one the app showing the meaning) or a complex state machine (sev=\r\neral ways of looking up, intermediate states to refine search, etc).\n\nNow, =\r\none of REST underlying styles is client-server. This is required here to se=\r\nparate concerns, allowing each component to evolve independently. That mean=\r\ns, server is not worried about clients, and clients not worried about serve=\r\nrs. Each has too much on their hands to worry about: clients should control=\r\n app state and servers the data concerns. The important thing here is that,=\r\n for an app to actually work, we need both worlds. You cannot create an app=\r\n solely with the client, nor completely in the server. The app as a set of =\r\nstates is possible by the combination of data in servers and the definition=\r\n of the state in the clients, based on the information the client has at on=\r\ne moment in time.\n\nThus, the design of the app is a multilevel thing. One g=\r\noal can be achieved using my system only, or using an information mashup fr=\r\nom several systems.  The design of the server side information allows all t=\r\nhe states to be created. The information to allows state transitions is als=\r\no there. What is very complicated then is to provide all paths needed for f=\r\noreseen apps and the ones the client may want to pursue. The server level s=\r\nystem design allows the same client to achieve the same goal with different=\r\n states, and thus different performance. For instance, in the word look up,=\r\n a two state thing is faster (less network interactions) but may not yield =\r\nthe best result. Having the client to go through much more states will give=\r\n better results, but impact more on performance. A server side design that =\r\nallows the client to choose any of those two paths, is a better option.  \n\n=\r\nOn another level, we have the user agent implementation, with the ability t=\r\no hide from the user the complex interaction, information retrieval from mu=\r\nltiple sources, and rendering of that. One important thing to note here is =\r\nuser interacts with the user agent only when it is needed (when there is a =\r\nneed for the user to make a decision).\n\nThat means if the next step is clea=\r\nrly just one, user agent should not wait until the user hits a button to pr=\r\noceed, unless that button is a confirmation.\n\nRoy&#39;s mentions the drawback o=\r\nf this client-server dichotomy by indicating we can have problems with clie=\r\nnts that do not share same semantics for the app, because the server cannot=\r\n retain control on the app consistent behavior. That is easy to understand,=\r\n and means clients should work independently, but following the same semant=\r\nics.\n\nWith all this blah, I came to a similar conclusion: apps are there, w=\r\nith paths the user must discover. System designer should provide all info, =\r\nstate possibilities and transitions to obtain certain goals, and thus provi=\r\nding some possible apps. Apps will not be &quot;instantiated&quot; unless a client tr=\r\nies to achieve that goal. Many clients achieving the same goal may be at di=\r\nfferent states in one particular moment, and may get to the goal using diff=\r\nerent paths and states! Modifications of paths and addition of states may a=\r\nllow new apps to be created, and those should not affect the ones already i=\r\nn place, even if there are several instances of those apps running. It can =\r\nbe a client achieves a goal that was not intended in the first place, but w=\r\nas possible given the states. Etc. \n\nSo it is not all in the client side. A=\r\n good initial state could contain a list of supported goals, with step by s=\r\ntep instructions throughout each state. Think on entering one big Las Vegas=\r\n hotel and ask for the suites. Someone will show you a sign and you go ther=\r\ne, from there you see another sign and you follow, and so one. Goals are pr=\r\novided, client doesn&#39;t have to &quot;create&quot; them and then try to use the system=\r\n to achieve them. Client may also turn left because he saw something intere=\r\nsting in the way, and may indeed create a new path with whole new goal that=\r\n was not there from the beginning! Maybe even going to another hotel throug=\r\nh the passways! This means the server can show the path, the client has all=\r\n free will to follow it, change it or even go somewhere else.\n\nOk, too much=\r\n blah. These are my 2 cents.\n\nCheers!\n\nWilliam Martinez Pomares. \n\n--- In r=\r\nest-discuss@yahoogroups.com, Jan Algermissen &lt;algermissen1971@...&gt; wrote:\n&gt;=\r\n\n&gt; While reading through section 5.3.3[1] I am wondering, whether my unders=\r\ntanding of &quot;Application&quot; actually matches Roy&#39;s. He writes:\n&gt; \n&gt; &quot;A data vi=\r\new of an architecture reveals the application state as information flows th=\r\nrough the components. Since REST is specifically targeted at distributed in=\r\nformation systems, it views an application as a cohesive structure of infor=\r\nmation and control alternatives through which a user can perform a desired =\r\ntask. For example, looking-up a word in an on-line dictionary is one applic=\r\nation, as is touring through a virtual museum, or reviewing a set of class =\r\nnotes to study for an exam. Each application defines goals for the underlyi=\r\nng system, against which the system&#39;s performance can be measured.&quot;\n&gt; \n&gt; Th=\r\ninking through this (and the following paragraphs) I get the impression tha=\r\nt a specific application is &#39;created&#39; only when a user[2] chooses a goal it=\r\n intends to pursue and turns to the RESTful system (the Web) to start pursu=\r\ning it. The application thereby brought to life might span several, unrelat=\r\ned &#39;services&#39;.\n&gt; \n&gt; Another way one might say this is &#39;The application is d=\r\nefined by the current use of the system (the Web) for the given user intent=\r\nion&#39; (and the current application state is &quot;defined by its pending requests=\r\n, the topology of connected components (some of which may be filtering buff=\r\nered data), the active requests on those connectors, the data flow of repre=\r\nsentations in response to those requests, and the processing of those repre=\r\nsentations as they are received by the user agent.&quot;[1]\n&gt; \n&gt; If that underst=\r\nanding makes sense at all, it has the consequence, that application design =\r\nis actually done on the client side and *not* on the server side.\n&gt; \n&gt; In t=\r\nhe context of machine clients this would mean that applications are defined=\r\n by the client side developer&#39;s interpretations of and assumptions about th=\r\ne envisioned media types (and link relations) and rules for choosing transi=\r\ntions.\n&gt; \n&gt; \n&gt; Comments most welcome...\n&gt; \n&gt; Jan\n&gt; \n&gt; \n&gt; [1] http://www.ics=\r\n.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm#sec_5_3_3\n&gt; \n&gt; [2]=\r\n &#39;User&#39; in this context would be a human user or someone who prepares (code=\r\ns or configures) a client component to persue a certain goal\n&gt;\n\n\n\n"}}
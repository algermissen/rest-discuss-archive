{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":87113616,"authorName":"S. Mike Dierken","from":"&quot;S. Mike Dierken&quot; &lt;mdierken@...&gt;","profile":"mdierken","replyTo":"SENDER","senderId":"DFkFVT_GfImLBLukVa2iAYOjDqdv5T5oFy4IHJ0Te_-VN_lF2i01O4u5tMRYjrlDPulnn4c8R0CrSfZOwIJwmqlVDE3pvJ4lBNO2yH-OQA","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] xml.com REST article","postDate":"1092511975","msgId":4524,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEJBWTE2LURBVjExNGRxQkhrc1EwMDAwNGRiZEBob3RtYWlsLmNvbT4=","referencesHeader":"PGNmanEwdSt0MjVvQGVHcm91cHMuY29tPg=="},"prevInTopic":4523,"nextInTopic":0,"prevInTime":4523,"nextInTime":4525,"topicId":4522,"numMessagesInTopic":3,"msgSnippet":"I hadn t seen it till you pointed it out. The first part is a generic summary of the past two years. I think fundamentally the author mistakes architecture and","rawEmail":"Return-Path: &lt;mdierken@...&gt;\r\nX-Sender: mdierken@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 20260 invoked from network); 14 Aug 2004 20:40:09 -0000\r\nReceived: from unknown (66.218.66.216)\n  by m24.grp.scd.yahoo.com with QMQP; 14 Aug 2004 20:40:09 -0000\r\nReceived: from unknown (HELO hotmail.com) (65.54.186.191)\n  by mta1.grp.scd.yahoo.com with SMTP; 14 Aug 2004 20:40:09 -0000\r\nReceived: from mail pickup service by hotmail.com with Microsoft SMTPSVC;\n\t Sat, 14 Aug 2004 13:39:40 -0700\r\nReceived: from 207.202.171.254 by bay16-dav11.bay16.hotmail.com with DAV;\n\tSat, 14 Aug 2004 20:39:39 +0000\r\nX-Originating-Email: [mdierken@...]\r\nX-Sender: mdierken@...\r\nTo: &lt;rest-discuss@yahoogroups.com&gt;,\n\t&quot;Benjamin L Yu&quot; &lt;benjaminlyu@...&gt;\r\nReferences: &lt;cfjq0u+t25o@...&gt;\r\nDate: Sat, 14 Aug 2004 12:32:55 -0700\r\nMIME-Version: 1.0\r\nContent-Type: text/plain;\n\tcharset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: 7bit\r\nX-Priority: 3\r\nX-MSMail-Priority: Normal\r\nX-Mailer: Microsoft Outlook Express 6.00.2800.1437\r\nx-mimeole: Produced By Microsoft MimeOLE V6.00.2800.1441\r\nMessage-ID: &lt;BAY16-DAV114dqBHksQ00004dbd@...&gt;\r\nX-OriginalArrivalTime: 14 Aug 2004 20:39:40.0126 (UTC) FILETIME=[D25007E0:01C4823E]\r\nX-eGroups-Remote-IP: 65.54.186.191\r\nFrom: &quot;S. Mike Dierken&quot; &lt;mdierken@...&gt;\r\nSubject: Re: [rest-discuss] xml.com REST article\r\nX-Yahoo-Group-Post: member; u=87113616\r\nX-Yahoo-Profile: mdierken\r\n\r\nI hadn&#39;t seen it till you pointed it out.\nThe first part is a generic summary of the past two years. I think\nfundamentally the author mistakes architecture and architectural style for a\nsoftware application framework - he seems to be looking for . The phrase\n&#39;despite the lack of vendor support&#39; is laughable (an architecture doesn&#39;t\nrequire vendor support, software which easily supports this style is freely\navailable as well as from vendors, wouldn&#39;t &#39;winning the hearts of\ndevelopers&#39; indicate that &#39;vendor&#39; is not a required component of the\narchitecture, etc).\n\nI do think an effort to highlight best practices is good, but some of the\nstatements are way off base:\n&quot;This limits the interface to HTTP with the four well-defined verbs: GET,\nPOST, PUT, and DELETE&quot;. - Nothing limits REST to be HTTP, nor does HTTP have\nonly four verbs.\n\n&quot;A REST service is a resource&quot; - This seems odd. I would have thought a REST\nservice would have multiple resources (or maybe the author indicates that\nthe service itself could be a single identifable resource that can be\ninteracted with?)\n\n&quot;URI opacity only applies to the path of a URI. The query string and\nfragment have special meaning that can be understood by users. &quot; - This is\nincorrect. A URI (and the benefits of opacity) apply to the whole URI, not\njust the path segments. Any part of a URI can be used to coordinate between\nclients and server (such as HTML forms), but there is an integration cost\nand an increase in coupling if that is done. Avoiding situations that\nrequire /every possible/ client to clearly understand portions of a URI\nwould be a best practice.\n\n&quot;A service provider should ignore any query parameters it does not\nunderstand during processing. If it needs to consume other services, it\nshould pass all ignored parameters along. This practice allows new\nfunctionality to be added without breaking existing services.&quot; - this is\nquestionable and I&#39;d like to see real analysis of this (especially in the\nscenario where an origin server is internally acting as a\ngateway/intermediary).\n\n&quot;[TIP] XML Schema provides a good framework for defining simple types, which\ncan be used for validating query parameters.&quot; - If this is intended to put\ndata typing in the URI, then it seems the opposite of a &#39;loose typing good,\nstrong typing bad&#39; approach to integration. If this is for internal\noperations only, then I think most any implementation language that uses\nstrong typing is a framework for validating incoming data of any kind.\n\n&quot;Proxy-driven negotiation. A client initiates a request to a server through\na proxy. The proxy passes the request to the server and obtains a list of\nrepresentations. The proxy selects one representation according to\npreferences set by the client and returns the representation back to the\nclient.&quot; - this doesn&#39;t sound very stateless & having a client set a\npreference is equivalent to having a client send a preference via the Accept\nheader.\n\n&quot;When delivering a representation to its client, a server MUST check the\nfollowing HTTP headers: Accept, Accept-Charset, Accept-Encoding,\nAccept-Language, and User-Agent to ensure the representation it sends\nsatisfies the user agent&#39;s capability. &quot; - no, a server doesn&#39;t. It &#39;should&#39;\ncheck them, but low budget servers (embedded http servers in devices, etc)\nshould just do whatever they want and have the client deal with it. That is\na key aspect of the architecture that enables loosely coupled and evolvable\nsystems.\n\n&quot;A server may determine the type of representation to send from the profile\ninformation of the client.&quot; - what is a &#39;profile of the client&#39;? Is a client\nthe same as user-agent? or is it a specific instance of a client\napplication? And if so, wouldn&#39;t that make the processing of a request\nstateful?\n\n&quot;A client can specify the representation using the following query string:\nmimeType={mime-type}&quot; - this is questionable, but useful in practice.\nHowever, using the same name as the HTTP request header (content-type) would\ngreatly ease the education and meaning of the query term. In addition, the\nclient should use the Accept header instead & the server should respond with\na Location response header with the alternate URI of the requested\ncontent-type - this allows the client to talk to any server without knowing\nwhether it does or does not support this query term, and it allows server to\nchoose where in the URI to embed content-type information (it could be in a\nfile extension like .txt or .pdf or .doc, or it could be a path segment if\nthings are stored in file directories, etc. etc.)\n\n&quot;A REST server should support this query.&quot; - HTTP based REST servers already\nsupport this query via a standardized request mechanism - the Accept header.\nIn addition the Accept header has more well thought out capabilities and\nsyntax than this under-specified query term.\n\n&quot;A resource may have different views, even if there is only one\nrepresentation available. For example, a resource has an XML representation\nbut different clients may only see different portion of the same XML.\nAnother common example is that a client might want to obtain metadata of the\ncurrent representation. To obtain a different view, a client can set a\n&quot;view&quot; parameter in the URI query string&quot; - If a query term is used, then\nthis is a different URI which this means that there are different resources.\nThere is not &#39;one resource with different views&#39;. The concept exists, but it\nisn&#39;t part of the vocabulary of the REST definition. In addition, the\nassertion that &quot;a client can set a &#39;view&#39; parameter&quot; is highly misleading\nand likely will cause developers to try it and fail and blame REST rather\nthan the author.\n\n&quot;A service represents a specialized business function&quot; - this sort of avoids\nthe &#39;resource modeling&#39; viewpoint which is fundamental to REST.\n\n&quot;A request to an obligated service should be described by some kind of XML\ninstance, which should be constrained by a schema&quot; - what if the service\nsupport storage of MP3 files? Or MS-Word documents? How are those described\nvia XML?\n\n&quot;An obligated service should be made idempotent so that if a client is\nunsure about the state of its request, it can send it again.&quot; - if a\nresource supports POST, then it isn&#39;t idempotent. If idempotency is desired,\nthen the resource model should be built to support PUT. (Unless you use some\ntheoretical protocol not based on HTTP that makes idempotency configurable\nper request or something)\n\n&quot;Return a receipt immediately upon receiving a request. &quot; - it probably\nshould use the appropriate HTTP response status code as well.\n\n&quot;Transaction Lifecycle &quot; - this looks interesting and hope this work helps\nflesh out details of the underspecified &#39;Accepted&#39; response status code.\n\n\n----- Original Message ----- \nFrom: &quot;Benjamin L Yu&quot; &lt;benjaminlyu@...&gt;\nTo: &lt;rest-discuss@yahoogroups.com&gt;\nSent: Friday, August 13, 2004 6:31 PM\nSubject: [rest-discuss] xml.com REST article\n\n\n&gt; I&#39;m curious if anyone has any comments on this xml.com article:\n&gt; http://www.xml.com/pub/a/2004/08/11/rest.html\n&gt;\n&gt; After reading the thesis and this entire mailing list archive, this\n&gt; article doesn&#39;t sit well with me for some reason. I can&#39;t pin point it\n&gt; right now, as I&#39;ll need some more time to reflect, but there are some\n&gt; areas that don&#39;t feel &quot;right&quot; to what I&#39;ve come to learn as REST.\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt; Yahoo! Groups Links\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":237604743,"authorName":"Bill de hOra","from":"Bill de hOra &lt;bill@...&gt;","profile":"bdehora","replyTo":"SENDER","senderId":"nS9LmPkdHW8BqlBzwoU9LNTnKX8235GpuRAr8UUdvM6dmMxHiTVRcGJQA44hxgKB9WbyAPN8R2ERT6Mz_PkBKCqBDiZn","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Re: POST at most once","postDate":"1171838120","msgId":7921,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQ1RDhENEE4LjUwNDA0MDFAZGVob3JhLm5ldD4=","inReplyToHeader":"PDExNzE4MzYwNjIuNjkyOC42My5jYW1lbEBsb2NhbGhvc3QubG9jYWxkb21haW4+","referencesHeader":"PGVyYWU2aSs5Z3MwQGVHcm91cHMuY29tPiA8MTE3MTgzNjA2Mi42OTI4LjYzLmNhbWVsQGxvY2FsaG9zdC5sb2NhbGRvbWFpbj4="},"prevInTopic":7919,"nextInTopic":7923,"prevInTime":7920,"nextInTime":7922,"topicId":7646,"numMessagesInTopic":40,"msgSnippet":"... that s how email works (client side generation). When this issue came up on atompub (for the atom:id element on creating a new member entry), it more or","rawEmail":"Return-Path: &lt;bill@...&gt;\r\nX-Sender: bill@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 84328 invoked from network); 18 Feb 2007 22:35:39 -0000\r\nReceived: from unknown (66.218.66.68)\n  by m36.grp.scd.yahoo.com with QMQP; 18 Feb 2007 22:35:39 -0000\r\nReceived: from unknown (HELO chilco.textdrive.com) (207.7.108.242)\n  by mta11.grp.scd.yahoo.com with SMTP; 18 Feb 2007 22:35:39 -0000\r\nReceived: from [192.168.2.180] (83-70-216-108.b-ras1.prp.dublin.eircom.net [83.70.216.108])\n\tby chilco.textdrive.com (Postfix) with ESMTP id 06468DCBCA\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Sun, 18 Feb 2007 22:35:23 +0000 (UTC)\r\nMessage-ID: &lt;45D8D4A8.5040401@...&gt;\r\nDate: Sun, 18 Feb 2007 22:35:20 +0000\r\nUser-Agent: Thunderbird 1.5.0.9 (X11/20070103)\r\nMIME-Version: 1.0\r\nTo: rest-discuss@yahoogroups.com\r\nReferences: &lt;erae6i+9gs0@...&gt; &lt;1171836062.6928.63.camel@...&gt;\r\nIn-Reply-To: &lt;1171836062.6928.63.camel@...&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:0:0:0\r\nFrom: Bill de hOra &lt;bill@...&gt;\r\nSubject: Re: [rest-discuss] Re: POST at most once\r\nX-Yahoo-Group-Post: member; u=237604743; y=mCq0a8B883brqJldsLrNhsJRiER08eyL8PYmRHn7gGKWmg\r\nX-Yahoo-Profile: bdehora\r\n\r\nBenjamin Carlyle wrote:\n&gt; \n&gt; \n&gt; On Sun, 2007-02-18 at 20:50 +0000, wahbedahbe wrote:\n&gt;  &gt; Hmmm not sure if I&#39;m over simplifying but in a nutshell these\n&gt;  &gt; protocols\n&gt;  &gt; are just trying to repeatedly POST/PUT to a resource identified by a\n&gt;  &gt; unique id. I think you can just rely on PUT for idempotency and the\n&gt;  &gt; rest\n&gt;  &gt; just depends on who you want to generate the id.\n&gt;  &gt; If the clients can generate unique ids, then why don&#39;t they just\n&gt;  &gt; repeatedly PUT to http://example.com/ &lt;http://example.com/&gt;&lt;myuniqueid&gt; ?\n&gt; \n&gt; I was having this thought just last night, and I can&#39;t say I disagree :)\n&gt; \n&gt; Just use a PUT and let the client pick a globally unique ID. \n\nthat&#39;s how email works (client side generation). When this issue came up \non atompub (for the atom:id element on creating a new member entry), it \nmore or less split the working group.\n\nUltimately if you can&#39;t trust clients, you can&#39;t trust the IDs they \ngenerate (for example, duplicating or gaming atom:id is an obvious spam \nvector).\n\nThere&#39;s another point. If you are asking clients to generate uids to \nstuff into URLs, then you are breaking with the idea that URLs are \nopaque to clients. This might or might not be a problem, but it&#39;s such \nan important principle it has to asked. For example, without machine \nreadable deployments of URI templates, how do I know to compose the URL\n\n{http://example.com/}{myuniqueid}\n\nin a way that doesn&#39;t bake in the first part?\n\n&gt; The server\n&gt; can then either continue using the resource the client identified in the\n&gt; first place for redirect the client for to the &quot;real&quot; name of the\n&gt; resource further interactions. I would lean towards the former.\n\nIf you are having to issue redirects, I think you might as well let the \nserver issue the id to begin with.\n\n\n&gt; It&#39;s an interesting perspective that essentially elminates the POST at\n&gt; most once issue by eliminating POST. Do we really need our scruffy\n&gt; fourth method?\n\nIt&#39;s not really about method choice imo; it&#39;s about administrative \ncontrol of the resource namespace. Servers are best placed to manage \ntheir own URIs.\n\ncheers\nBill\n\n"}}
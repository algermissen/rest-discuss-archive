{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"DYNoWBkHjeCL8LltVTzR5nWjZuFRrcwW8QPW6pM90JLDx4TDP6WjH_LPPnYFj1OrgQPJpBw5APbYL8zM6hsdCRFg628Pm4Id2OkIH5wdWQ","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] 303 after DELETE? [was: Re: What is the steady  state after POST?]","postDate":"1265286133","msgId":14741,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMTAwMjA0MDUyMjEzLmZkNzA3ZjIzLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","inReplyToHeader":"PGIwZWJhZmQxMTAwMjAzMTkyOXkzMzI2ZmVmbDdmNDBmMWEwM2FiMzU3NDhAbWFpbC5nbWFpbC5jb20+","referencesHeader":"PDYzOUJFMTNDLTY1QUItNDg0OS1BMTcwLTM2OEIzMDlBMjYyQUBtYWMuY29tPgk8aGs5aXVvK3RuYWVAZUdyb3Vwcy5jb20+CTwyZmE1NTQ0NzEwMDIwMjA4NDJvM2EwNzM1MmNoN2ZmOWNjOTkzNzdiZTNmMUBtYWlsLmdtYWlsLmNvbT4JPGIwZWJhZmQxMTAwMjAyMjA1NnY1MTUwZTJjNHdiNDViMDdlZjE2Njc0YmE2QG1haWwuZ21haWwuY29tPgk8NTcxRDBEODUtRkM0Ni00MjVGLUI0M0YtNzE4OTk5QjkzNjNDQG1hYy5jb20+CTxiMGViYWZkMTEwMDIwMzE5Mjl5MzMyNmZlZmw3ZjQwZjFhMDNhYjM1NzQ4QG1haWwuZ21haWwuY29tPg=="},"prevInTopic":14739,"nextInTopic":0,"prevInTime":14740,"nextInTime":14742,"topicId":14723,"numMessagesInTopic":8,"msgSnippet":"This wound up a long post, so I m going to start by pre-stating that HTTP is an application protocol, and by prepeating my summary as thesis: Application","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 20392 invoked from network); 4 Feb 2010 12:22:20 -0000\r\nX-Received: from unknown (98.137.34.46)\n  by m13.grp.re1.yahoo.com with QMQP; 4 Feb 2010 12:22:20 -0000\r\nX-Received: from unknown (HELO mxout-08.mxes.net) (216.86.168.183)\n  by mta3.grp.sp2.yahoo.com with SMTP; 4 Feb 2010 12:22:19 -0000\r\nX-Received: from bigbison (unknown [65.117.211.162])\n\t(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))\n\t(No client certificate requested)\n\tby smtp.mxes.net (Postfix) with ESMTPSA id B85FF509DC;\n\tThu,  4 Feb 2010 07:22:18 -0500 (EST)\r\nDate: Thu, 4 Feb 2010 05:22:13 -0700\r\nTo: Andrew Wahbe &lt;andrew.wahbe@...&gt;\r\nCc: Jan Algermissen &lt;algermissen1971@...&gt;, =?ISO-8859-1?Q?Ant=F3nio?=\n Mota &lt;amsmota@...&gt;, rest-discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nMessage-Id: &lt;20100204052213.fd707f23.eric@...&gt;\r\nIn-Reply-To: &lt;b0ebafd11002031929y3326fefl7f40f1a03ab35748@...&gt;\r\nReferences: &lt;639BE13C-65AB-4849-A170-368B309A262A@...&gt;\n\t&lt;hk9iuo+tnae@...&gt;\n\t&lt;2fa554471002020842o3a07352ch7ff9cc99377be3f1@...&gt;\n\t&lt;b0ebafd11002022056v5150e2c4wb45b07ef16674ba6@...&gt;\n\t&lt;571D0D85-FC46-425F-B43F-718999B9363C@...&gt;\n\t&lt;b0ebafd11002031929y3326fefl7f40f1a03ab35748@...&gt;\r\nOrganization: Bison Systems Corporation\r\nX-Mailer: Sylpheed 2.6.0 (GTK+ 2.10.14; i686-pc-mingw32)\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=US-ASCII\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nSubject: Re: [rest-discuss] 303 after DELETE? [was: Re: What is the steady \n state after POST?]\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\nThis wound up a long post, so I&#39;m going to start by pre-stating that\nHTTP is an application protocol, and by prepeating my summary as thesis:\n\nApplication steady states are derived from HTTP messaging (think of a\nbrowser diplaying a default &#39;broken image&#39; icon, a different steady-\nstate than one where the image was retrieved and rendered) separately\nfrom the state (and media type) of the resource that provided the\ncontainer representation.\n\nAndrew Wahbe wrote:\n&gt;\n&gt; Good point. One thing about PUT and DELETE is that, other than Atom,\n&gt; there aren&#39;t a lot (any?) good examples of how to use them in\n&gt; hypermedia. AFAIK, HTML5 is just saying to add them as an option on\n&gt; &lt;form&gt; which is a bit silly\n&gt;\n\nLast I checked, adding Xforms to HTML 5 was still under active\nconsideration.  I don&#39;t consider Atom a good example of using PUT and\nDELETE in hypermedia, because the hypermedia isn&#39;t actually instructing\nthe client what to do.  I have mentioned my Xforms Atom Protocol\nclient, coming soon to a demo near you...\n\nMy initial posting of the demo won&#39;t include a nifty Xforms interface,\nthough.  The pragmatic reason for distilling out a static demo from my\nongoing project, is to fully explore the notion of Xforms client\nimplementation -- Xforms relies on XHTML or SVG as a host language, so\nit&#39;s a matter of client capability that isn&#39;t exposed in headers,\nmeaning you can&#39;t conneg around the problem, so I&#39;m kinda stuck...\n\nThe demo will also (eventually) have a sandbox for publishing text/plain\nfiles (until it gets spammed, anyway) that y&#39;all can play with, which\nallows for PUT and DELETE.  Obviously, text/plain isn&#39;t a media type\nwhich describes PUT and DELETE, but the interface is Xforms, which adds\nsupport for those methods into the host-language media type -- the\nmedia types of the host language and the target don&#39;t matter to my\nsandbox API, so long as Xforms is allowed by the host language...\n\nThe directory contents will be modeled as XBEL, using application/xbel\n+xml, and served (like the rest of the demo) using client-side XSLT to\nturn that into XHTML + Xforms.  The sandbox API, unlike Atom Protocol,\nis RESTful and does it without minting any media (sub)types, by using an\nexisting media type already defined for collections of URIs of any media\ntype...\n\nIf logged in using HTTP Digest, the username is used as the port 80\nprocess ID (group &#39;user&#39; not &#39;www&#39;).  File creation is handled via POST\nto the collection, as with Atom Protocol.  Users may only DELETE files\nthey have created, but may edit (PUT) files created by others, based on\nthe standard UNIX file and directory permissions already constraining\nthe behavior of the httpd.\n\nThe &quot;sandbox API&quot; is what I&#39;ve been using for years to update .xsl, .css\nand .js files on my previous demos (without the newly-added hypertext\nconstraint).  If I need to close the sandbox, I just &#39;chmod -w sandbox&#39;,\nor make the server 410 with &#39;-r&#39; (at directory or file level).  Allowing\ncurl to PUT and DELETE is easy on an httpd, making it REST requires a\ncouple of extra steps, though.  It&#39;s pretty cool, but I promise to stop\nfiddling with it and post my demo without...\n\nYou can, of course, utilize the sandbox without the Xforms interface\n(this &#39;paleowiki&#39; is even fun to use with curl).  But, in terms of\n&quot;learning the API&quot; you can see it plain as day in the server-generated\nhypertext application that self-documents it, and by introspecting\nresponse codes with a protocol analyzer.  So g&#39;head (soon) and write a\nquickie sandbox API client using libcurl, or just play with it using\ncurl.  I don&#39;t care if you don&#39;t follow my provided hypertext, just\nthat I&#39;ve met REST&#39;s burden of providing it, so you can figure out how\nto use curl by using &#39;view source&#39;.\n\n&gt;\n&gt; -- there doesn&#39;t seem to be any sense in a single hypertext construct\n&gt; being used for GET, POST, PUT and DELETE. The use cases and\n&gt; application flows for the different methods are just so different.\n&gt; \n\nI agree; it&#39;s the immediate drawback I notice in:\n\nhttp://www.w3.org/2007/03/html-forms/\n\nWhich I&#39;m going to give a whirl, anyway.  I prefer the raw Xforms MVC\ndesign pattern.  I have nothing against MVC per se, only its all-too-\ncommon usage on the Web in systems which break the identification of\nresources constraint.  Putting MVC on the client makes it a RESTful\ndesign pattern.  The &#39;XRX&#39; design pattern mates an Xforms frontend to\nan Xquery backend; this design pattern may easily be implemented as a\ndecoupled REST system.\n\nI can&#39;t get enough of that buzz I get writing Xforms applications for\nRESTful systems -- the ability to rapidly prototype Web systems for\nvisualization and analysis, without using Javascript, blows me away.  If\nonly I could figure out how to serve my Xforms applications to generic\nclients, say by having Xforms included within HTML 5, I&#39;d be thrilled...\n\n&gt;\n&gt; Let&#39;s consider Atom as an example here (as that&#39;s all we&#39;ve got). If\n&gt; your client is reading a feed and decides to delete an entry and gets\n&gt; a 204 back, does the client have to GET the feed again before it can\n&gt; take any other actions on the feed? Or can it assume that the DELETE\n&gt; operation had the consequences outlined by HTTP, AtomPub and the edit\n&gt; relation and make an assumption about the current state of the feed?\n&gt; \n\nYes (sorta), and no.  A client can&#39;t assume a 2xx response to mean\n&#39;success&#39; because of 202.  If the server has no intention of performing\nthe DELETE, then it should use a 4xx response.  OTOH, a server isn&#39;t\nbeholden to its own 2xx response to a DELETE, so &quot;caveat client&quot;\napplies.  This goes for any media type, not just Atom, btw.\n\nThe server&#39;s response to a DELETE request is only the server&#39;s response\nto the request (a shadow in Plato&#39;s cave).  The effect on the resource\n(the true form) can only be determined via subsequent request.  Most\nservers will change their response to 404, when the correct response is\nusually a 410.  But, even that depends on the context of the DELETE\nrequest...\n\nWhat if the DELETE request had a Link header whose link relation and\ncontent describe the proper forwarding for the resource?  If the\ndeleted resource has been combined with another, then a 307 redirect is\ncalled for.  However, if the resource has been moved to a new location,\nthe response would be a 301 redirect.  Even if the client has no\ncontrol over this, the response code to the DELETE request itself, isn&#39;t\nauthoritative of much.\n\n&gt;\n&gt; In other words: maybe 204 doesn&#39;t mean &quot;the steady state hasn&#39;t\n&gt; changed&quot; but rather &quot;the steady state has been adjusted as defined by\n&gt; the media type and the method&quot;?\n&gt; \n\nIt means neither.  It only informs the client that the DELETE request\ndidn&#39;t result in an error.  Only the responses to GET, HEAD or OPTIONS\nrequests tell you anything about resource state.  Any of these requests\nmade subsequent to a DELETE request will give a response code\nindicating the state of the resource -- not found, gone, moved or\n(perhaps) merged, etc.  (Or, in the case of a collection feed, perhaps\nall members were deleted, or just the collection, or both.)\n\nREST &quot;application state&quot; is held entirely on the client.  A REST system\nhas literally infinite &quot;applications,&quot; defined as &quot;what the user is\ntrying to do.&quot;  The application presents the user with a representation\nof resource state -- that&#39;s the first &quot;steady state,&quot; when a form with a\ndelete button finishes loading and styling.  That delete form allows\nusers to construct their own choice for the next state transition.\n\n(Other possible state transition selections I&#39;ll ignore include, but\nare not limited to:  menu links, mailto links, links to help with the\nform, etc. which may also appear as part of the form&#39;s steady-state.)\n\nWhen a user hits the delete button, a DELETE request is sent to the\nidentified resource.  Now, all heck breaks loose!  We haven&#39;t a clue as\nto the result of this action beyond &quot;request accepted&quot; or &quot;request\nrejected,&quot; which have nothing to do with resource state -- but\neverything to do with *application* state.\n\nWhat happens when the response is 4xx?  There&#39;s no rule that says you\nhave to treat that 4xx response as the next application state (even\nthough you may do so).  If you do, there&#39;s no reason the body of the\n4xx response can&#39;t look identical to the last steady-state, although\nyou may want to add some text (or styling) indicating the failure.  You\naren&#39;t limited to presenting your application within 200 responses.\n\nIf you don&#39;t want to load a new page, then Xforms can catch the response\ncode and restyle the page accordingly.  For example, if the response\nwas 4xx, color the filename text red, gray it out, and make it not\nselectable.  There -- the application just transitioned to a new steady-\nstate without following any links (loading a new page).  (The sandbox\nAPI returns 202 Accepted to DELETE, does chmod -r and removes the file\nfrom the XBEL index, causing a 410 response to subsequent requests --\nwho says my server has to allow you to delete your death threats...? ;-)\n\nLikewise, if the response is 2xx, Xforms can turn right around and make\na HEAD request to the allegedly-deleted resource.  If the response to\nthat is 4xx, the filename text is removed from the delete form&#39;s select\nbox (the sandbox API just reloads the XBEL file regardless of response).\nThere -- the application transitioned to a new steady-state without\nfollowing any links, again.  HTTP is an application messaging protocol.\n\nThe URI which responded with the delete form, has that delete form as\nits resource state.  But, the client&#39;s application state varies based\non the state of each resource in the directory it represents in its\nselect box as a list of filenames (or the state of a linked XBEL-\nrepresented index resource, in the sandbox API case -- the XBEL document\nis the Xforms &#39;Model&#39;, so refreshing the model shows the outcome of the\nDELETE request, which will be 304 on failure due to matching Etag).\n\nSo the state of such a delete application transitions from one steady-\nstate to another based on the user selecting a filename and clicking\nthe delete button -- regardless of whether your delete form is updating\ndynamically, or you are using it as a representation of the success and\nfailure states expressed in response to the DELETE (by following the\nlink, i.e. loading a new 4xx response page, dereferencing the deleted\nURL, whatevah), or media type used (I&#39;ve given a general idea on how\nthis is done, plus specifics of how it&#39;s done in my forthcoming sandbox\nAPI, without mentioning Atom).\n\nAbout the only REST no-no with a 204 response, is to present the user\nwith that response as the next application state -- a blank page.  So\nthe client needs to have some logic, i.e. make a HEAD request and\ndynamically restyle, or make a GET request and present the user with a\n&quot;success&quot; application state wrapped in a 4xx response (which breaks no\nREST constraints -- resource state and application state aren&#39;t the\nsame thing).\n\nIn a nut, this behavior is out-of-scope to media type, it&#39;s all about\nHTTP as application (not transport) protocol.  Application steady\nstates are derived from HTTP messaging (think of a browser diplaying a\ndefault &#39;broken image&#39; icon, a different steady-state than one where\nthe image was retrieved and rendered) separately from the state of the\nresource that provided the container representation.\n\n&lt;/ramble_on&gt;\n\nWatching Pagey &quot;Ramble On&quot; on my &quot;It Might Get Loud&quot; DVD too much,\nEric\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":242972596,"authorName":"JÃ¸rn Wildt","from":"=?iso-8859-1?Q?J=F8rn_Wildt?= &lt;jw@...&gt;","profile":"jorn_lind_nielsen","replyTo":"SENDER","senderId":"3kJHm3eToK3yvK8QSNDRhi925pIvVj-NLmgMirikn6fPKm_Oh7qF7ZpMM10YQ90LHOqlY2tnGG0CzPLWs71uCw5r3Aj2Y0BCzd3nRReF3GIlRU1OTrH6x7Y","spamInfo":{"isSpam":false,"reason":"3"},"subject":"The &quot;purist&quot; C# REST client?","postDate":"1260396058","msgId":14110,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEI1QUM5MEYyODQ5MzQ5OEI5MEU2MjAzRERFMkE0RTY1QEpyblBDPg=="},"prevInTopic":0,"nextInTopic":14111,"prevInTime":14109,"nextInTime":14111,"topicId":14110,"numMessagesInTopic":12,"msgSnippet":"There has been a lot of discussion about the right way to implement a REST service, but less focus on how you would actually code a client. I have been looking","rawEmail":"Return-Path: &lt;jw@...&gt;\r\nX-Sender: jw@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 23341 invoked from network); 9 Dec 2009 22:00:07 -0000\r\nX-Received: from unknown (98.137.34.45)\n  by m4.grp.sp2.yahoo.com with QMQP; 9 Dec 2009 22:00:07 -0000\r\nX-Received: from unknown (HELO smtp2.cybercity.dk) (212.242.43.252)\n  by mta2.grp.sp2.yahoo.com with SMTP; 9 Dec 2009 22:00:06 -0000\r\nX-Received: from uf5.cybercity.dk (uf5.cybercity.dk [212.242.42.163])\n\tby smtp2.cybercity.dk (Postfix) with ESMTP id 1DDAE3141FF\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Wed,  9 Dec 2009 23:00:06 +0100 (CET)\r\nX-Received: from JrnPC (port439.ds1-aroe.adsl.cybercity.dk [212.242.220.134])\n\t(Authenticated sender: dsl164923)\n\tby uf5.cybercity.dk (Postfix) with ESMTPA id 6406F20586E\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Wed,  9 Dec 2009 23:00:05 +0100 (CET)\r\nMessage-ID: &lt;B5AC90F28493498B90E6203DDE2A4E65@JrnPC&gt;\r\nTo: &quot;rest-discuss&quot; &lt;rest-discuss@yahoogroups.com&gt;\r\nDate: Wed, 9 Dec 2009 23:00:58 +0100\r\nMIME-Version: 1.0\r\nContent-Type: multipart/alternative;\n\tboundary=&quot;----=_NextPart_000_0150_01CA7923.78427D00&quot;\r\nX-Priority: 3\r\nX-MSMail-Priority: Normal\r\nX-Mailer: Microsoft Windows Mail 6.0.6002.18005\r\nX-MimeOLE: Produced By Microsoft MimeOLE V6.0.6002.18005\r\nX-eGroups-Msg-Info: 2:3:4:0:0\r\nFrom: =?iso-8859-1?Q?J=F8rn_Wildt?= &lt;jw@...&gt;\r\nSubject: The &quot;purist&quot; C# REST client?\r\nX-Yahoo-Group-Post: member; u=242972596; y=52BVYWvpZjOezXynWC7AgQqoMIqxq8qabu8OPmCBnb0jzdTOmYBMD2Rqh8Y\r\nX-Yahoo-Profile: jorn_lind_nielsen\r\n\r\n\r\n------=_NextPart_000_0150_01CA7923.78427D00\r\nContent-Type: text/plain;\n\tcharset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nThere has been a lot of discussion about the right way to implement a REST =\r\nservice, but less focus on how you would actually code a client. I have bee=\r\nn looking at RESTFulie[1], Subbu Alamarju[2], and the Starbucks[3] example,=\r\n and would like to discuss a similar typed approach in C#.\n\nI am experiment=\r\ning with an actual implementation and would like some feedback before getti=\r\nng too far :-)\n\nThanks, J=F8rn\n\n\n[1] http://github.com/caelum/restfulie\n[2]=\r\n http://www.infoq.com/articles/subbu-allamaraju-rest\n[3] http://www.infoq.c=\r\nom/articles/webber-rest-workflow\n\n\nService example documentation\nIn order t=\r\no discuss a REST client we need a service example. My first use case is a m=\r\novie shop where we can search for movies in a specific category. To do so t=\r\nhe shop has published a single search service URL template: http://movies.o=\r\nrg/movies?category=3D{category}. \n\nThe shop also publishes three ressource =\r\nmime types:\n\n// Example &quot;application/vnd.movies.movie+xml&quot;\n&lt;Movie&gt;\n  &lt;Self =\r\nhref=3D&quot;http://movies.org/movies/91&quot;/&gt;\n  &lt;Title&gt;Strange Dawn&lt;/Title&gt;\n  &lt;Cat=\r\negory&gt;Thriller&lt;/Category&gt;\n  &lt;Director href=3D&quot;http://movies.org/persons/47&quot;=\r\n/&gt;\n&lt;/Movie&gt;\n\n// Example &quot;application/vnd.movies.movie-collection+xml&quot;\n&lt;Movi=\r\nes&gt;\n  &lt;Self href=3D&quot;http://movies.org/movies?category=3DThriller&quot;/&gt;\n  &lt;Movi=\r\ne&gt;\n    &lt;Title&gt;Strange Dawn&lt;/Title&gt;\n    &lt;Self href=3D&quot;http://movies.org/movi=\r\nes/91&quot;/&gt;\n  &lt;/Movie&gt;\n  &lt;Movie&gt;...&lt;/Movie&gt;\n  &lt;Movie&gt;...&lt;/Movie&gt;\n&lt;/Movies&gt;\n\n//=\r\n Example &quot;application/vnd.movies.person+xml&quot;\n&lt;Person&gt;\n  &lt;Self href=3D&quot;http:=\r\n//movies.org/persons/47&quot;/&gt;\n  &lt;Name&gt;Richard Strangelove&lt;/Name&gt;\n  &lt;Photo href=\r\n=3D&quot;http://facebook.com/photos/hh31y1&quot;/&gt;\n&lt;/Person&gt;\n\nComments\n\n- I have avoi=\r\nded Atom Links since, in my experience, these don&#39;t serialize well in the C=\r\n# standard XML serializer. You could although create your own serializer, s=\r\no this is not an important restriction.\n\n- Notice how the person type has e=\r\nxternal references :-)\n\n\nCode example - Searching\nThe cleanest client usage=\r\n I can come up with is:\n\n  // A link (template). This should be fetched fro=\r\nm a configuration file.\n  Link MoviesSearchLink =3D new Link(&quot;http://movies=\r\n.org/movies?category=3D{category}&quot;);\n\n  // Anonymous class with search para=\r\nmeters. Reflection is used to extract values.\n  // This is about the simple=\r\nst way to write a &quot;fixed hashmap&quot; in C#\n  var movieSearchParameter =3D new =\r\n{ category =3D &quot;Thriller&quot; };\n\n  // Get ressource stored at the link endpoin=\r\nt\n  MovieCollection movies =3D MoviesSearchLink.Get&lt;MovieCollection&gt;(movieS=\r\nearchParameter);\n\n  // Iterate over all movies and print title\n  foreach (M=\r\novie movie in movies)\n    Console.WriteLine(&quot;Title: &quot; + movie.Title);\n\nComm=\r\nents:\n\n- A Link is untyped. We do not know what lies at the end of it.\n\n- A=\r\n link knows how to merge parameters into URL templates.\n\n- The result of GE=\r\nTing a link is typed. The actual type is defined by the returned mime type.=\r\n\n\n- In order to do something usefull with the search we must assume that it=\r\n returns a MovieCollection. Hence the generic type specifier in the Get&lt;T&gt;(=\r\n) method. This is apriori information which I cannot see how to code withou=\r\nt.\n\n\nParsing ressources\nOne piece of magic is how Get&lt;MovieCollection&gt;(para=\r\nms) knows how to convert the bytes returned from the endpoint to a MovieCol=\r\nlection. For this we create a MimeTypeRegistry:\n\n  MimeTypeRegistry.Registe=\r\nr&lt;MovieCollection, MovieCollectionBuilder&gt;(&quot;application/vnd.movies.movie-co=\r\nllection&quot;);\n\nwhich is equal to:\n\n  MimeTypeRegistry.Register(typeof(MovieCo=\r\nllection), typeof(MovieCollectionBuilder), &quot;application/vnd.movies.movie-co=\r\nllection&quot;);\n\nThis means: when ever we must parse a specific mime type, we l=\r\nook up a builder in the registry and uses this to parse the returned ressou=\r\nrce representation.\n\nThe typed Get&lt;MovieCollection&gt;(params) method GETs the=\r\n ressource data, instantiates the corresponding builder, verifies that the =\r\nbuilt object type matches the requested and returns the built object.\n\nComm=\r\nents:\n\n- This is static typing which RESTafarians seems to shy away from. B=\r\nut the type depends on the returned ressource, _not_ the URL. So to my know=\r\nledge this is fine.\n\n- It is not required to use the type safe Get&lt;T&gt;(), yo=\r\nu could also call Get() which returns an object. The actual returned type t=\r\nhen depends solely on the mime type of the ressource, and it is up to the p=\r\nrogrammer to decide what to do with it.\n\n- I am quite sure you can write so=\r\nme pretty generic XML builders without much overhead.\n\n- This is not limite=\r\nd to XML, you could add image/jpeg and other well known mime types. You jus=\r\nt need to supply a proper builder.\n\n\nCode example - Getting sub-ressources\n=\r\nNow we want to get information about the director of the movie:\n\n  // One o=\r\nf the returned self links from the search query\n  Link movieLink =3D movies=\r\n[0].Self;\n\n  // Get the actual movie\n  Movie movie =3D movieLink.Get&lt;Movie&gt;=\r\n();\n\n  // Get the director\n  MoviePerson director =3D movie.Director.Get&lt;Mo=\r\nviePerson&gt;();\n\nComments:\n\n- There are no hard coded links here.\n\n- The only=\r\n apriori information we use is the knowledge of the types of the referenced=\r\n ressources. These types are documented in the mime type in which the links=\r\n are used.\n\n\nVersioning\nNow our wonderfull movie shop decides to be able to=\r\n sell and rate movies. They do their own selling, but uses the fameous rati=\r\nngs.org service to rate their movies. So the shop creates a new version of =\r\nthe movie mime type:\n \n// Example &quot;application/vnd.movies.movie.v2+xml&quot;\n&lt;Mo=\r\nvie&gt;\n  &lt;Self href=3D&quot;http://movies.org/movies/91&quot;/&gt;\n  &lt;Title&gt;Strange Dawn&lt;/=\r\nTitle&gt;\n  &lt;Category&gt;Thriller&lt;/Category&gt;\n  &lt;Director href=3D&quot;http://movies.or=\r\ng/persons/47&quot;/&gt;\n  &lt;Orders href=3D&quot;http://movies.org/movies/91/orders&quot;/&gt;\n  &lt;=\r\nRatings href=3Dhttp://ratings.org/ratings?item=3Dhttp%3a%2f%2fmovies.org%2f=\r\nmovies%2f91/&gt;\n&lt;/Movie&gt;\n\nIn order to service both old and new clients the sh=\r\nop decides to return the initial movie mime type by default. Never clients =\r\nshould use the Accept header to indicate that they want the new version. Th=\r\ne same goes for the movies collection type.\n\nOur existing client code works=\r\n happily as it did before.\n\n\nCode example - A new client\nThe new client cod=\r\ne would look like this:\n\n  // A link (template). This should be fetched fro=\r\nm a configuration file.\n  Link MoviesSearchLink =3D new Link(&quot;http://movies=\r\n.org/movies?category=3D{category}&quot;);\n\n  // Anonymous class with search para=\r\nmeters. Reflection is used to extract values.\n  // This is about the simple=\r\nst way to write a &quot;fixed hashmap&quot; in C#\n  var movieSearchParameter =3D new =\r\n{ category =3D &quot;thriller&quot; };\n\n  // Setting up the Accept header\n  var movie=\r\nSearchHeaders =3D new { Accept =3D &quot;application/vnd.movies.movie-collection=\r\n.v2&quot; }\n\n  // Get ressource stored at the link endpoint\n  MovieCollection mo=\r\nvies =3D MoviesSearchLink.Get&lt;MovieCollection&gt;(movieSearchParameter, movieS=\r\nearchHeaders);\n\n  // Iterate over all movies and print title\n  foreach (Mov=\r\nie movie in movies)\n    Console.WriteLine(&quot;Title: &quot; + movie.Title);\n\n\nCode =\r\nexample - Buying movies\nNow we have a movie which has an embedded link to i=\r\nt&#39;s sales orders. To buy a movie we post a new order to the sales order col=\r\nlection:\n\n  // One of the returned self links from the search query\n  Link =\r\nmovieLink =3D movies[0].Self;\n\n  // Get the actual movie\n  Movie movie =3D =\r\nmovieLink.Get&lt;Movie&gt;();\n\n  // Create a new order request\n  MovieOrderReques=\r\nt orderRequest =3D new MovieOrderRequest(movie.Self, 1 /* quantity */);\n\n  =\r\n// Post the order request to the order collection\n  // Assume it returns th=\r\ne newly created order\n  MovieOrder order =3D movie.Orders.Post(orderRequest=\r\n);\n\nComments:\n\n- The POST result in a redirect to the newly created order. =\r\nThe system GETs this new order and returns it. This means we loose the inte=\r\nrmediate data returned from the POST.\n\n\nOther verbs\nThe Link class is has b=\r\nuilt-in support for GET/PUT/POST/DELETE. Other verbs can be executed throug=\r\nh a generic &quot;Request&quot; method:\n\n  SomeType x =3D someLink.Request(&quot;SOMEVERB&quot;=\r\n, somePayload);\n\n\nCaching\nThe Link class and it&#39;s associted methods should =\r\nof course respect ETag and if-not-modified-since etc. This would require th=\r\ne framework to be initialized with a cache implementation of some kind.\n\n\nE=\r\nrror handling\nI would suggest using execptions for error handling.\n\n\r\n------=_NextPart_000_0150_01CA7923.78427D00\r\nContent-Type: text/html;\n\tcharset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot;&gt;\n&lt;HTML&gt;&lt;HEAD&gt;=\r\n\n&lt;META content=3D&quot;text/html; charset=3Diso-8859-1&quot; http-equiv=3DContent-Typ=\r\ne&gt;\n&lt;META name=3DGENERATOR content=3D&quot;MSHTML 8.00.6001.18865&quot;&gt;\n&lt;STYLE&gt;&lt;/STYL=\r\nE&gt;\n&lt;/HEAD&gt;\n&lt;BODY&gt;\n&lt;DIV&gt;&lt;FONT size=3D2 face=3DArial&gt;There has been a lot of =\r\ndiscussion about the right \nway to implement a REST service, but less focus=\r\n on how you would actually code a \nclient. I have been looking at RESTFulie=\r\n[1], Subbu Alamarju[2], and the \nStarbucks[3] example, and would like to di=\r\nscuss a similar typed approach in \nC#.&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT size=3D2 fac=\r\ne=3DArial&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT size=3D2 face=3DArial&gt;I am experim=\r\nenting with an actual implementation \nand would like some feedback before g=\r\netting too far :-)&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT size=3D2 face=3DArial&gt;&lt;/FONT&gt;&nb=\r\nsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT size=3D2 face=3DArial&gt;Thanks, J=F8rn&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV=\r\n&gt;&lt;FONT size=3D2 face=3DArial&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;[1] =\r\n&lt;A href=3D&quot;&quot;&gt;http://github.com/caelum/restfulie&lt;/A&gt;&lt;/DIV&gt;\n&lt;DIV&gt;[2] &lt;A \nhref=\r\n=3D&quot;&quot;&gt;http://www.infoq.com/articles/subbu-allamaraju-rest&lt;/A&gt;&lt;/DIV&gt;\n&lt;DIV&gt;[3=\r\n] &lt;A \nhref=3D&quot;http://www.infoq.com/articles/webber-rest-workflow&quot;&gt;http://ww=\r\nw.infoq.com/articles/webber-rest-workflow&lt;/A&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;&lt;/FONT=\r\n&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT size=3D2 face=3DArial&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT siz=\r\ne=3D2 face=3DArial&gt;&lt;STRONG&gt;Service example \ndocumentation&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/=\r\nDIV&gt;\n&lt;DIV&gt;&lt;FONT size=3D2 face=3DArial&gt;In order to discuss a REST client we =\r\nneed a service \nexample. &lt;/FONT&gt;&lt;FONT size=3D2 face=3DArial&gt;My first use ca=\r\nse is a movie shop where \nwe can search for movies in a specific category. =\r\nTo do so the shop has published \na single search service URL template: &lt;A \n=\r\nhref=3D&quot;http://movies.org/movies?category=3D{category&quot;&gt;http://movies.org/mo=\r\nvies?category=3D{category&lt;/A&gt;}. \n&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT size=3D2 face=3DA=\r\nrial&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT size=3D2 face=3DArial&gt;The shop also pub=\r\nlishes&nbsp;three ressource mime \ntypes:&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT size=3D2 f=\r\nace=3DArial&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT size=3D2 face=3DArial&gt;// Example=\r\n \n&quot;application/vnd.movies.movie+xml&quot;&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT size=3D2 face=\r\n=3DArial&gt;&lt;Movie&gt;&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT size=3D2 face=3DArial&gt;&nbsp;=\r\n &lt;Self \nhref=3D&quot;http://movies.org/movies/91&quot;/&gt;&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FON=\r\nT size=3D2 face=3DArial&gt;&nbsp; &lt;Title&gt;Strange \nDawn&lt;/Title&gt;&lt;/FO=\r\nNT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT size=3D2 face=3DArial&gt;&nbsp; \n&lt;Category&gt;Thriller=\r\n&lt;/Category&gt;&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT size=3D2 face=3DArial&gt;&nbsp; &lt;=\r\nDirector \nhref=3D&quot;http://movies.org/persons/47&quot;/&gt;&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FON=\r\nT size=3D2 face=3DArial&gt;&lt;/Movie&gt;&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT size=3D2 fac=\r\ne=3DArial&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT size=3D2 face=3DArial&gt;&lt;FONT size=\r\n=3D2 face=3DArial&gt;\n&lt;DIV&gt;&lt;FONT size=3D2 face=3DArial&gt;// Example \n&quot;applicatio=\r\nn/vnd.movies.movie-collection+xml&quot;&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;Movies&gt;&lt;/DIV&gt;\n&lt;=\r\nDIV&gt;&nbsp; &lt;Self \nhref=3D&quot;http://movies.org/movies?category=3DThriller&quot;/=\r\n&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp; &lt;Movie&gt;&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT size=3D2 face=\r\n=3DArial&gt;&nbsp; &nbsp; &lt;Title&gt;Strange \nDawn&lt;/Title&gt;&lt;/FONT&gt;&lt;/DIV=\r\n&gt;\n&lt;DIV&gt;&lt;FONT size=3D2 face=3DArial&gt;&nbsp;&nbsp;&nbsp; &lt;Self \nhref=3D&quot;htt=\r\np://movies.org/movies/91&quot;/&gt;&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp; &lt;/Movie&gt;&lt;/DIV=\r\n&gt;\n&lt;DIV&gt;&lt;FONT size=3D2 face=3DArial&gt;\n&lt;DIV&gt;&nbsp; &lt;Movie&gt;...&lt;/Movie&=\r\ngt;&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp; &lt;Movie&gt;...&lt;/Movie&gt;&lt;/DIV&gt;&lt;/Movies&gt;&lt;/=\r\nFONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;// Example &quot;application/vnd.movies.perso=\r\nn+xml&quot;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;Person&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp; &lt;Self href=3D&quot;http://=\r\nmovies.org/persons/47&quot;/&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp; &lt;Name&gt;Richard Strangelo=\r\nve&lt;/Name&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp; &lt;Photo href=3D&quot;http://facebook.com/pho=\r\ntos/hh31y1&quot;/&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;/Person&gt;&lt;/DIV&gt;&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT s=\r\nize=3D2 face=3DArial&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT size=3D2 face=3DArial&gt;C=\r\nomments&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT size=3D2 face=3DArial&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;=\r\nDIV&gt;&lt;FONT size=3D2 face=3DArial&gt;- I have avoided Atom Links since, in my \ne=\r\nxperience,&nbsp;these don&#39;t serialize well in the C# standard XML serialize=\r\nr. \nYou could although&nbsp;create your own serializer, so this is not an i=\r\nmportant \nrestriction.&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT size=3D2 face=3DArial&gt;&lt;/FONT=\r\n&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT size=3D2 face=3DArial&gt;- Notice how the person type=\r\n has external \nreferences :-)&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT size=3D2 face=3DArial=\r\n&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT size=3D2 face=3DArial&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;=\r\nDIV&gt;&lt;FONT size=3D2 face=3DArial&gt;&lt;STRONG&gt;Code example - \nSearching&lt;/STRONG&gt;&lt;=\r\n/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT size=3D2 face=3DArial&gt;The cleanest client usage I c=\r\nan come up with \nis:&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT size=3D2 face=3DArial&gt;&lt;/FONT&gt;&=\r\nnbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT size=3D2 face=3DArial&gt;&nbsp; // A link (template). T=\r\nhis should be fetched \nfrom a configuration file.&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT s=\r\nize=3D2 face=3DArial&gt;&nbsp;&nbsp;Link MoviesSearchLink =3D new Link(&quot;&lt;A \nhr=\r\nef=3D&quot;&quot;&gt;http://movies.org/movies?category=3D{category&lt;/A&gt;}&quot;);&lt;/FONT&gt;&lt;/DIV&gt;\n=\r\n&lt;DIV&gt;&lt;FONT size=3D2 face=3DArial&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT size=3D2 fa=\r\nce=3DArial&gt;&nbsp; // Anonymous class with search parameters. \nReflection is=\r\n used to extract values.&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT size=3D2 face=3DArial&gt;&nbs=\r\np; // This is about the simplest way to write a \n&quot;fixed hashmap&quot; in C#&lt;/FON=\r\nT&gt;&lt;/DIV&gt;&lt;FONT size=3D2 face=3DArial&gt;\n&lt;DIV&gt;&nbsp; var movieSearchParameter =\r\n=3D new { category =3D &quot;Thriller&quot; };&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp; //=\r\n Get ressource stored at the link endpoint&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp; MovieCollectio=\r\nn movies =3D \nMoviesSearchLink.Get&lt;MovieCollection&gt;(movieSearchParame=\r\nter);&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp; // Iterate over all movies and pr=\r\nint title&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp; foreach (Movie movie in movies)&lt;/DIV&gt;\n&lt;DIV&gt;&nbs=\r\np;&nbsp;&nbsp; Console.WriteLine(&quot;Title: &quot; + movie.Title);&lt;BR&gt;&lt;/DIV&gt;\n&lt;DIV&gt;C=\r\nomments:&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;- A Link is untyped. We do not know w=\r\nhat lies at the end of it.&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;- A link knows how =\r\nto merge parameters into URL templates.&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;- The =\r\nresult of GETing a link is typed. The actual type is defined by the \nreturn=\r\ned mime type.&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;- In order to do something usefu=\r\nll with the search we must assume that it \nreturns a MovieCollection. Hence=\r\n the generic type specifier in the \nGet&lt;T&gt;() method. This is apriori =\r\ninformation&nbsp;which I cannot see how \nto code without.&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;=\r\n&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;STRONG&gt;Parsing ressources&lt;/STRONG&gt;&lt;/DIV&gt;\n&lt;DI=\r\nV&gt;One piece of magic is how Get&lt;MovieCollection&gt;(params) knows how to=\r\n \nconvert the&nbsp;bytes returned from the endpoint to a MovieCollection. F=\r\nor this \nwe create a MimeTypeRegistry:&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp; =\r\nMimeTypeRegistry.Register&lt;MovieCollection, \nMovieCollectionBuilder&gt;(&quot;=\r\napplication/vnd.movies.movie-collection&quot;);&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;whi=\r\nch is equal to:&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;\n&lt;DIV&gt;&nbsp; MimeTypeRegistry.=\r\nRegister(typeof(MovieCollection), \ntypeof(MovieCollectionBuilder), \n&quot;applic=\r\nation/vnd.movies.movie-collection&quot;);&lt;/DIV&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;Thi=\r\ns means: when ever we must parse a specific mime type, we look up a \nbuilde=\r\nr in the registry and uses this to parse the returned ressource \nrepresenta=\r\ntion.&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;The typed Get&lt;MovieCollection&gt;(par=\r\nams) method GETs the ressource \ndata, instantiates the corresponding builde=\r\nr, verifies that the built object \ntype matches the requested and returns t=\r\nhe built object.&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;Comments:&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/=\r\nDIV&gt;\n&lt;DIV&gt;- This is static typing which RESTafarians seems to shy away from=\r\n. But the \ntype depends on the returned ressource, _not_ the URL. So to my =\r\nknowledge this \nis fine.&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;- It is not required =\r\nto use the type safe Get&lt;T&gt;(), you could also \ncall Get() which retur=\r\nns an object. The actual returned type then depends solely \non the mime typ=\r\ne of the ressource, and it is up to the programmer to decide what \nto do wi=\r\nth it.&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;- I am quite sure you can write some pr=\r\netty generic XML builders without \nmuch overhead.&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;=\r\nDIV&gt;- This is not limited to XML, you could add image/jpeg and other well k=\r\nnown \nmime types. You just need to supply a proper builder.&lt;/DIV&gt;\n&lt;DIV&gt;&nbs=\r\np;&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;STRONG&gt;Code example - Getting sub-ressourc=\r\nes&lt;/STRONG&gt;&lt;/DIV&gt;\n&lt;DIV&gt;Now we want to get information about the director of=\r\n the movie:&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp; // One of the returned self=\r\n links from the search query&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp; Link movieLink =3D movies[0]=\r\n.Self;&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp; // Get the actual movie&lt;/DIV&gt;\n&lt;D=\r\nIV&gt;&nbsp; Movie movie =3D movieLink.Get&lt;Movie&gt;();&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/=\r\nDIV&gt;\n&lt;DIV&gt;&nbsp; // Get the director&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp; MoviePerson director=\r\n =3D \nmovie.Director.Get&lt;MoviePerson&gt;();&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV=\r\n&gt;Comments:&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;- There are no hard coded links her=\r\ne.&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;- The only apriori information we use is th=\r\ne knowledge of the types of the \nreferenced ressources. These types&nbsp;ar=\r\ne documented in the mime type in which \nthe links&nbsp;are used.&lt;/DIV&gt;\n&lt;DIV=\r\n&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;STRONG&gt;Versioning&lt;/STRONG&gt;&lt;/DIV&gt;\n&lt;DIV=\r\n&gt;Now our wonderfull movie shop decides to be able to sell and rate movies. =\r\n\nThey do their own selling, but uses the fameous ratings.org service to rat=\r\ne \ntheir movies. So&nbsp;the shop&nbsp;creates a new version of the movie m=\r\nime \ntype:&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;\n&lt;DIV&gt;&lt;FONT size=3D2 face=3DArial&gt;\n&lt;DIV&gt;&lt;FONT s=\r\nize=3D2 face=3DArial&gt;// Example \n&quot;application/vnd.movies.movie.&lt;STRONG&gt;v2&lt;/=\r\nSTRONG&gt;+xml&quot;&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT size=3D2 face=3DArial&gt;&lt;Movie&gt;&lt;/F=\r\nONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT size=3D2 face=3DArial&gt;&nbsp; &lt;Self \nhref=3D&quot;http:/=\r\n/movies.org/movies/91&quot;/&gt;&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT size=3D2 face=3DArial&gt;&=\r\nnbsp; &lt;Title&gt;Strange \nDawn&lt;/Title&gt;&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT size=\r\n=3D2 face=3DArial&gt;&nbsp; \n&lt;Category&gt;Thriller&lt;/Category&gt;&lt;/FONT&gt;&lt;=\r\n/DIV&gt;\n&lt;DIV&gt;&lt;FONT size=3D2 face=3DArial&gt;&nbsp; &lt;Director \nhref=3D&quot;http://=\r\nmovies.org/persons/47&quot;/&gt;&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp; &lt;Orders href=3D&quot;htt=\r\np://movies.org/movies/91/orders&quot;/&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp; &lt;Ratings href=3D=\r\n&lt;A \nhref=3D&quot;http://ratings.org/ratings?item=3Dhttp%3a%2f%2fmovies.org%2fmov=\r\nies%2f91&quot;&gt;http://ratings.org/ratings?item=3Dhttp%3a%2f%2fmovies.org%2fmovie=\r\ns%2f91&lt;/A&gt;/&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT size=3D2 face=3DArial&gt;&lt;/Movie&gt;&lt;/FONT=\r\n&gt;&lt;/DIV&gt;&lt;/FONT&gt;&lt;/DIV&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;In order to service both =\r\nold and new clients the shop decides to return the \ninitial movie mime type=\r\n by default. Never clients should use the Accept header \nto indicate that t=\r\nhey want&nbsp;the new version. The same goes for the movies \ncollection typ=\r\ne.&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;Our existing client code works happily as i=\r\nt did before.&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;STRONG&gt;Code e=\r\nxample - A new client&lt;/STRONG&gt;&lt;/DIV&gt;\n&lt;DIV&gt;The new client code would look li=\r\nke this:&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;\n&lt;DIV&gt;&lt;FONT size=3D2 face=3DArial&gt;&nb=\r\nsp; // A link (template). This should be fetched \nfrom a configuration file=\r\n.&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT size=3D2 face=3DArial&gt;&nbsp;&nbsp;Link MoviesSear=\r\nchLink =3D new Link(&quot;&lt;A \nhref=3D&quot;&quot;&gt;http://movies.org/movies?category=3D{cat=\r\negory&lt;/A&gt;}&quot;);&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT size=3D2 face=3DArial&gt;&lt;/FONT&gt;&nbsp;&lt;/=\r\nDIV&gt;\n&lt;DIV&gt;&lt;FONT size=3D2 face=3DArial&gt;&nbsp; // Anonymous class with search=\r\n parameters. \nReflection is used to extract values.&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT=\r\n size=3D2 face=3DArial&gt;&nbsp; // This is about the simplest way to write a =\r\n\n&quot;fixed hashmap&quot; in C#&lt;/FONT&gt;&lt;/DIV&gt;&lt;FONT size=3D2 face=3DArial&gt;\n&lt;DIV&gt;&nbsp;=\r\n var movieSearchParameter =3D new { category =3D &quot;thriller&quot; };&lt;/DIV&gt;\n&lt;DIV&gt;&=\r\nnbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp; // Setting up the Accept header&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp; v=\r\nar movieSearchHeaders =3D new { Accept =3D \n&quot;application/vnd.movies.movie-c=\r\nollection.v2&quot; }&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp; // Get ressource stored=\r\n at the link endpoint&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp; MovieCollection movies =3D \nMoviesS=\r\nearchLink.Get&lt;MovieCollection&gt;(movieSearchParameter, \nmovieSearchHead=\r\ners);&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp; // Iterate over all movies and pr=\r\nint title&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp; foreach (Movie movie in movies)&lt;/DIV&gt;\n&lt;DIV&gt;&nbs=\r\np;&nbsp;&nbsp; Console.WriteLine(&quot;Title: &quot; + \nmovie.Title);&lt;BR&gt;&lt;/DIV&gt;&lt;/FONT=\r\n&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;STRONG&gt;Code example - Buying movies&lt;/STRONG=\r\n&gt;&lt;/DIV&gt;\n&lt;DIV&gt;Now we have a movie which has an embedded link to it&#39;s sales o=\r\nrders. To buy \na movie we post a new order to the sales order collection:&lt;/=\r\nDIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;\n&lt;DIV&gt;&nbsp; // One of the returned self links =\r\nfrom the search query&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp; Link movieLink =3D movies[0].Self;&lt;=\r\n/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp; // Get the actual movie&lt;/DIV&gt;\n&lt;DIV&gt;&nbs=\r\np; Movie movie =3D movieLink.Get&lt;Movie&gt;();&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;D=\r\nIV&gt;&nbsp; //&nbsp;Create a new order request&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp; MovieOrderRe=\r\nquest orderRequest =3D new MovieOrderRequest(movie.Self, 1 \n/* quantity */)=\r\n;&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp; // Post the order request to the orde=\r\nr collection&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp; // Assume it returns the newly created order=\r\n&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&nbsp;MovieOrder order \n=3D&nbsp;movie.Orders.Post(orderR=\r\nequest);&lt;/DIV&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;Comments:&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DI=\r\nV&gt;\n&lt;DIV&gt;- The POST result in a redirect to the newly created&nbsp;order. Th=\r\ne system \nGETs this new order and returns it. This means we loose the inter=\r\nmediate data \nreturned from the POST.&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/=\r\nDIV&gt;\n&lt;DIV&gt;&lt;STRONG&gt;Other verbs&lt;/STRONG&gt;&lt;/DIV&gt;\n&lt;DIV&gt;The Link class is has bui=\r\nlt-in support for GET/PUT/POST/DELETE. Other verbs \ncan be executed through=\r\n a generic &quot;Request&quot; method:&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp; SomeType x=\r\n =3D someLink.Request(&quot;SOMEVERB&quot;, somePayload);&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DI=\r\nV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;STRONG&gt;Caching&lt;/STRONG&gt;&lt;/DIV&gt;\n&lt;DIV&gt;The Link class and =\r\nit&#39;s associted methods should of course respect ETag and \nif-not-modified-s=\r\nince etc. This would require the framework to be initialized \nwith a cache =\r\nimplementation of some kind.&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV=\r\n&gt;&lt;STRONG&gt;Error handling&lt;/STRONG&gt;&lt;/DIV&gt;\n&lt;DIV&gt;I would suggest using execption=\r\ns for error handling.&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;&lt;/FONT&gt;&lt;/BOD=\r\nY&gt;&lt;/HTML&gt;\n\r\n------=_NextPart_000_0150_01CA7923.78427D00--\r\n\n"}}
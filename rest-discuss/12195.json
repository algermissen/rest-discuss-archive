{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":145532415,"authorName":"Stefan Tilkov","from":"Stefan Tilkov &lt;stefan.tilkov@...&gt;","profile":"stilkov","replyTo":"SENDER","senderId":"8mB39b39kxzEjRodajgL7RGzf2JNq0AJGZMJyJkTZ3_gs5rn7uLSz9A6zmVnydvg_dnxRam3773ICUUkNfKxcfbriLvtnK--3VkxtgRS","spamInfo":{"isSpam":false,"reason":"3"},"subject":"Re: [rest-discuss] This is REST","postDate":"1236236547","msgId":12195,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDU0QTkyQUU3LUZEMjYtNDdFOS1CNDVELUY3MEE2NzJEOTA5NEBpbm5vcS5jb20+","inReplyToHeader":"PDU1YzYwZTM3MDkwMzA0MjAwM2w4YjM0NHY2MjI3MmU2OGRhYjc2ZjY5QG1haWwuZ21haWwuY29tPg==","referencesHeader":"PDU1YzYwZTM3MDkwMzAyMTQwOWg2ZjIwNDc2ZncyZTgwNjk2YWMzMTllYzM2QG1haWwuZ21haWwuY29tPiA8QzBFMDY4MUYtNkU2Ny00ODA3LThEQjAtMjYyOTUyREQzQUFBQGlubm9xLmNvbT4gPDU1YzYwZTM3MDkwMzAyMTQ0MHM2ZWM4YjMxYnJkMGY2ZjJhOGQxZTU4NmU1QG1haWwuZ21haWwuY29tPiA8RjM0QTE0MjYtNkQ3OC00MDI4LTk2M0YtNTlGRUQzMjc0OTlBQGlubm9xLmNvbT4gPDU1YzYwZTM3MDkwMzAzMDYxMW4yMDc3MjljZnhjODI1OTY1YWY5MzA4YWUwQG1haWwuZ21haWwuY29tPiA8MjZFRTREN0QtMTEyRS00QzIzLThFRUEtMTM2MkVENjc2OEE2QGdiaXYuY29tPiA8NTVjNjBlMzcwOTAzMDQwMzMxdDExYTdjYjAwa2IyZjc4OTA3NjY5ODk1OWJAbWFpbC5nbWFpbC5jb20+IDwyNTlhOTg0NDA5MDMwNDE4MThtNzkyNjhiMThnOTFlNzQ0NjQ2ZTE3ZjAxNkBtYWlsLmdtYWlsLmNvbT4gPDU1YzYwZTM3MDkwMzA0MjAwM2w4YjM0NHY2MjI3MmU2OGRhYjc2ZjY5QG1haWwuZ21haWwuY29tPg=="},"prevInTopic":12194,"nextInTopic":12196,"prevInTime":12194,"nextInTime":12196,"topicId":12170,"numMessagesInTopic":28,"msgSnippet":"You are (almost) right I think. The difference is: Given the representation contains  you don t hardcode the string","rawEmail":"Return-Path: &lt;stefan.tilkov@...&gt;\r\nX-Sender: stefan.tilkov@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 90291 invoked from network); 5 Mar 2009 07:02:31 -0000\r\nX-Received: from unknown (66.218.67.94)\n  by m46.grp.scd.yahoo.com with QMQP; 5 Mar 2009 07:02:31 -0000\r\nX-Received: from unknown (HELO mail.innoq.com) (87.106.55.185)\n  by mta15.grp.scd.yahoo.com with SMTP; 5 Mar 2009 07:02:31 -0000\r\nX-Received: from [10.0.1.198] (mue-88-130-108-183.dsl.tropolys.de [88.130.108.183])\n\t(using TLSv1 with cipher AES128-SHA (128/128 bits))\n\t(No client certificate requested)\n\tby mail.innoq.com (Postfix) with ESMTPSA id 0C78130A8A6\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Thu,  5 Mar 2009 08:02:28 +0100 (CET)\r\nMessage-Id: &lt;54A92AE7-FD26-47E9-B45D-F70A672D9094@...&gt;\r\nTo: Rest List &lt;rest-discuss@yahoogroups.com&gt;\r\nIn-Reply-To: &lt;55c60e370903042003l8b344v62272e68dab76f69@...&gt;\r\nContent-Type: text/plain; charset=WINDOWS-1252; format=flowed; delsp=yes\r\nContent-Transfer-Encoding: quoted-printable\r\nMime-Version: 1.0 (Apple Message framework v930.3)\r\nDate: Thu, 5 Mar 2009 08:02:27 +0100\r\nReferences: &lt;55c60e370903021409h6f20476fw2e80696ac319ec36@...&gt; &lt;C0E0681F-6E67-4807-8DB0-262952DD3AAA@...&gt; &lt;55c60e370903021440s6ec8b31brd0f6f2a8d1e586e5@...&gt; &lt;F34A1426-6D78-4028-963F-59FED327499A@...&gt; &lt;55c60e370903030611n207729cfxc825965af9308ae0@...&gt; &lt;26EE4D7D-112E-4C23-8EEA-1362ED6768A6@...&gt; &lt;55c60e370903040331t11a7cb00kb2f789076698959b@...&gt; &lt;259a98440903041818m79268b18g91e744646e17f016@...&gt; &lt;55c60e370903042003l8b344v62272e68dab76f69@...&gt;\r\nX-Mailer: Apple Mail (2.930.3)\r\nX-eGroups-Msg-Info: 2:3:4:0:0\r\nFrom: Stefan Tilkov &lt;stefan.tilkov@...&gt;\r\nSubject: Re: [rest-discuss] This is REST\r\nX-Yahoo-Group-Post: member; u=145532415; y=Yk2xIq7SVuX_BNaN13rVwGNYpnTspSo3obussl4l6PEsEA\r\nX-Yahoo-Profile: stilkov\r\n\r\nYou are (almost) right I think. The difference is: Given the  \nrepresentati=\r\non contains\n\n&lt;link rel=3D&quot;some-concept&quot; ref=3D&quot;/some-uri&quot; /&gt;\n\nyou don&#39;t har=\r\ndcode the string &quot;/some-uri&quot; into your client, but rather  \nthe string &quot;som=\r\ne-concept&quot;.\n\nOf course your program can&#39;t interpret new values of rel on th=\r\ne fly  \n(unless it&#39;s some fancy AI, but let&#39;s not get there). You are of  \n=\r\ncourse better off if you use values for rel that are widely understood  \n- =\r\nthis is the reason for efforts like this:\n\nhttp://tools.ietf.org/html/draft=\r\n-nottingham-http-link-header-04\n\nStefan\n--\nStefan Tilkov, http://www.innoq.=\r\ncom/blog/st/\n\n\n\nOn 05.03.2009, at 05:03, Solomon Duskis wrote:\n\n&gt;\n&gt; Comment=\r\ns below\n&gt;\n&gt; On Wed, Mar 4, 2009 at 9:18 PM, Darrel Miller  \n&gt; &lt;darrel.mille=\r\nr@...&gt; wrote:\n&gt;\n&gt; On Wed, Mar 4, 2009 at 6:31 AM, Solomon Duskis &lt;sdu=\r\nskis@...&gt;  \n&gt; wrote:\n&gt; C) Website discover works because there&#39;s a hu=\r\nman driving the  \n&gt; navigation.  REST API discoverability requires a comple=\r\nx &quot;discovery  \n&gt; engine&quot; making REST APIs too complex to discover effective=\r\nly without  \n&gt; that engine.  The barrier to entry is too big,\n&gt;\n&gt;\n&gt;\n&gt; __,_.=\r\n_,_\n&gt;\n&gt; I don&#39;t understand why you believe it is difficult to get a client =\r\n \n&gt; application to discover links.  Writing client side code to finding  \n&gt;=\r\n and follow links in an XML or HTML based document is quite trivial.\n&gt;\n&gt; Da=\r\nrrel\n&gt;\n&gt; Good question Darrel; it&#39;s straight to the point :).  I hope that =\r\n \n&gt; this email will answer that question.  I also hope that this will  \n&gt; e=\r\nither prove or disprove that I understand what Roy Fielding said in  \n&gt; the=\r\n last email to this group.\n&gt;\n&gt; Yes, you can create a system that can follow=\r\n arbitrary XML or HTML  \n&gt; links.  However, REST APIs are being used to bui=\r\nld other systems.   \n&gt; Those system require specific functionality from the=\r\n API at specific  \n&gt; points in the interaction (a.k.a.the client workspace)=\r\n.  I haven&#39;t  \n&gt; seen a working &quot;REST API&quot; that provides a method to derive=\r\n ALL of  \n&gt; the URLs for that timely specific functionality based on a sing=\r\nle  \n&gt; entry point.\n&gt;\n&gt; I&#39;m going to give an example of this with a non-exi=\r\nstant,  \n&gt; theoretical REST API from a company called Metflix (not to be  \n=\r\n&gt; confused with any other APIs, for legal reasons).\n&gt;\n&gt; (Bear with me here,=\r\n it&#39;s going to take some time to get to the punch  \n&gt; line.)\n&gt;\n&gt; Metflix is=\r\n a website that has all movies that relate to the Mets  \n&gt; football franchi=\r\nse (which of course does not exist, and has no  \n&gt; relation to any company =\r\nwhat-so-ever).  You can:\n&gt; \t=95 login (metflix.com/login),\n&gt; \t=95 manage yo=\r\nur Queue of Mets movies (/myqueue, as a starting point  \n&gt; plus management =\r\nfunctionality),\n&gt; \t=95 view a list of the latest movies (/movies/),\n&gt; \t=95 =\r\nview information about a Mets movie (/movies/{id}),\n&gt; \t=95 search for Mets =\r\nmovies (/search?term=3D{searchTerm}).\n&gt; Of course there are plenty of other=\r\n whiz-bang features, but we can  \n&gt; limit our discussion to those :).\n&gt;\n&gt; T=\r\nhe Metflix website got so successful, that it created a RESTful API  \n&gt; so =\r\nthat other applications can be built around its services.  The  \n&gt; URLS of =\r\nthe service just happen to have the same URLs as the site,  \n&gt; but are pref=\r\nixed by &#39;/api&#39;.\n&gt;\n&gt; I want to build a fancy Flash UI client for that servic=\r\ne, that  \n&gt; basically exposes the same services, but just looks much nicer =\r\n \n&gt; (Note: their affiliate program is fantastic... I&#39;ll make a ton of  \n&gt; m=\r\noney that way).\n&gt;\n&gt; My Flash app requires the user to login, then he or she=\r\n can manage  \n&gt; the queue, search for Mets movies, and consequently view de=\r\ntails  \n&gt; about movies from either the queue or the search results.\n&gt;\n&gt; My =\r\nfancy Flash client will POST to &#39;metflix.com/api/login&#39;, and get  \n&gt; a 200 =\r\nstatus code and an auth token.  Then it will show your queue,  \n&gt; (which as=\r\n you remember, is found at &#39;/api/myqueue&#39; and of course the  \n&gt; auth token =\r\nhas to be used here) in one panel, which has links to the  \n&gt; individual mo=\r\nvies in the queue, and another panel will show you  \n&gt; latest movies (which=\r\n as you remember is found at &#39;/api/movies&#39;)  \n&gt; which also has links to mov=\r\nies.  There&#39;s also a search box that  \n&gt; performs a GET to (&#39;/search?term=\r\n=3D&#39; + searchbox.text).\n&gt;\n&gt; (I almost got to the punchline... wait for it)\n=\r\n&gt;\n&gt; The process of linking to invidual movies from the queue, the movie  \n&gt;=\r\n list and search results is RESTful.  You GET a list of movies (name  \n&gt; + =\r\nlink) back, and can click on those links to &quot;transition state&quot; to  \n&gt; view =\r\nthe movie details.\n&gt;\n&gt; The problem is that for the sake of my specific requ=\r\nirements, I  \n&gt; hardcoded the URLs for the queue, the current movie list an=\r\nd the  \n&gt; search box.  I didn&#39;t &quot;discover&quot; those URLs based on the result o=\r\nf  \n&gt; my login request (which happens to be my bookmark and entry point to =\r\n \n&gt; the system).  Notice that I also hard-coded the query parameter that  \n=\r\n&gt; needs to be used for my search term.\n&gt;\n&gt; Based on my (clearly limited) un=\r\nderstanding of REST, all of that  \n&gt; hardcoding of URLs in my Flash UI, whi=\r\nch is a client of the  \n&gt; Metflix.com, is a violation of the HATEOAS/hypter=\r\ntext constraint.   \n&gt; Based on my (personal, limited) observation, there ar=\r\ne no RESTful  \n&gt; APIs that implement the hypertext constraint any better.\n&gt;=\r\n\n&gt; Even if I did get back URLs, my Flash would still need to find the  \n&gt; c=\r\nurrent value of a specific URL for a specific task (like the URL  \n&gt; for th=\r\ne &#39;list of current movies&#39;, the URL for the &#39;movies in my  \n&gt; queue&#39; and th=\r\ne URL and the name of the query param of the search  \n&gt; form).  The Metflix=\r\n API needs to somehow provide my client with a  \n&gt; set of URLs that I need =\r\nfor my next potential logical tasks (my  \n&gt; &quot;workspace,&quot; if I understandy R=\r\noy Fielding correctly).  It also  \n&gt; needs to assign a means of of identify=\r\ning how those URLs map to a  \n&gt; specific functionality that&#39;s different fro=\r\nm the URLs themselves.   \n&gt; For example It&#39;s not proper to expect the clien=\r\nt to know what &#39;/api/ \n&gt; movies&#39; is.  The server needs to provide another p=\r\niece of well- \n&gt; understood information from which my Flash UI can interpre=\r\nt that the  \n&gt; meaning of the &#39;/api/movies&#39; link is &#39;the current list of mo=\r\nvies.&#39;\n&gt;\n&gt; Websites, unlike REST APIs, do have a clever method of link  \n&gt; =\r\nidentification... It&#39;s the natural language found between and around  \n&gt; th=\r\ne &#39;&lt;a href=3D&quot;..&quot;&gt;&#39; and the &#39;&lt;/a&gt;&#39; tags.  There&#39;s an &quot;interpretation  \n&gt; en=\r\ngine&quot; that can understand that natural language, and discover the  \n&gt; featu=\r\nres of the pages, with the help of a User Agent (such as a web  \n&gt; browser)=\r\n.  (BTW, the more I think about it, the more I apprciate th  \n&gt; thought put=\r\n into HTML and the rest of the REST ecosystem).\n&gt;\n&gt; Is there a clever unive=\r\nrsal method for identifying ALL appropriate  \n&gt; links in a client of a REST=\r\n API such that you can start with a given  \n&gt; URL/bookmark (like login), an=\r\nd not have to hardcode any &quot;workspace&quot;  \n&gt; URLs other than the first?  Is t=\r\nhis identification process to  \n&gt; complex without a human to interpret the =\r\nmeaning of the links?\n&gt;\n&gt; Take a look at Craig McLanahan&#39;s first message in=\r\n this thread...  \n&gt; IMHO, it has some important clues to these answers :)\n&gt;=\r\n\n&gt; Darrel, does that answer the question satisfactorally?\n&gt;\n&gt; Roy, if you&#39;r=\r\ne reading this, did I get it right this time?\n&gt;\n&gt; -Solomon Duskis\n&gt;\n&gt; \n&gt; &lt;!=\r\n-- #ygrp-mkp{ border: 1px solid #d8d8d8; font-family: Arial;  \n&gt; margin: 14=\r\npx 0px; padding: 0px 14px; } #ygrp-mkp hr{ border: 1px  \n&gt; solid #d8d8d8; }=\r\n #ygrp-mkp #hd{ color: #628c2a; font-size: 85%; font- \n&gt; weight: bold; line=\r\n-height: 122%; margin: 10px 0px; } #ygrp-mkp  \n&gt; #ads{ margin-bottom: 10px;=\r\n } #ygrp-mkp .ad{ padding: 0 0; } #ygrp- \n&gt; mkp .ad a{ color: #0000ff; text=\r\n-decoration: none; } --&gt; &lt;!-- #ygrp- \n&gt; sponsor #ygrp-lc{ font-family: Aria=\r\nl; } #ygrp-sponsor #ygrp-lc  \n&gt; #hd{ margin: 10px 0px; font-weight: bold; f=\r\nont-size: 78%; line- \n&gt; height: 122%; } #ygrp-sponsor #ygrp-lc .ad{ margin-=\r\nbottom: 10px;  \n&gt; padding: 0 0; } --&gt; &lt;!-- #ygrp-mlmsg {font-size:13px; fon=\r\nt-family:  \n&gt; arial,helvetica,clean,sans-serif;*font-size:small;*font:x-sma=\r\nll;}  \n&gt; #ygrp-mlmsg table {font-size:inherit;font:100%;} #ygrp-mlmsg selec=\r\nt,  \n&gt; input, textarea {font:99% arial,helvetica,clean,sans-serif;} #ygrp- =\r\n\n&gt; mlmsg pre, code {font:115% monospace;*font-size:100%;} #ygrp-mlmsg *  \n&gt;=\r\n {line-height:1.22em;} #ygrp-text{ font-family: Georgia;\t } #ygrp- \n&gt; text =\r\np{ margin: 0 0 1em 0; } dd.last p a { font-family: Verdana;  \n&gt; font-weight=\r\n: bold; } #ygrp-vitnav{ padding-top: 10px; font-family:  \n&gt; Verdana; font-s=\r\nize: 77%; margin: 0; } #ygrp-vitnav a{ padding: 0  \n&gt; 1px; } #ygrp-mlmsg #l=\r\nogo{ padding-bottom: 10px; } #ygrp-reco  \n&gt; { margin-bottom: 20px; padding:=\r\n 0px; } #ygrp-reco #reco-head { font- \n&gt; weight: bold; color: #ff7900; } #r=\r\neco-category{ font-size: 77%; }  \n&gt; #reco-desc{ font-size: 77%; } #ygrp-vit=\r\nal a{ text-decoration:  \n&gt; none; } #ygrp-vital a:hover{ text-decoration: un=\r\nderline; } #ygrp- \n&gt; sponsor #ov ul{ padding: 0 0 0 8px; margin: 0; } #ygrp=\r\n-sponsor #ov  \n&gt; li{ list-style-type: square; padding: 6px 0; font-size: 77=\r\n%; } #ygrp- \n&gt; sponsor #ov li a{ text-decoration: none; font-size: 130%; } =\r\n#ygrp- \n&gt; sponsor #nc{ background-color: #eee; \t  margin-bottom: 20px;  \n&gt; =\r\npadding: 0 8px; } #ygrp-sponsor .ad{ padding: 8px 0; } #ygrp- \n&gt; sponsor .a=\r\nd #hd1{ font-family: Arial; font-weight: bold; color:  \n&gt; #628c2a; font-siz=\r\ne: 100%; line-height: 122%; } #ygrp-sponsor .ad  \n&gt; a{ text-decoration: non=\r\ne; } #ygrp-sponsor .ad a:hover{ text- \n&gt; decoration: underline; } #ygrp-spo=\r\nnsor .ad p{ margin: 0; } o{font- \n&gt; size: 0; } .MsoNormal{ margin: 0 0 0 0;=\r\n } #ygrp-text tt{ font-size:  \n&gt; 120%; } blockquote{margin: 0 0 0 4px;} .re=\r\nplbq{margin:4} dd.last p  \n&gt; span { margin-right: 10px; font-family: Verdan=\r\na; font-weight:  \n&gt; bold; } dd.last p span.yshortcuts { margin-right: 0; } =\r\ndiv.photo- \n&gt; title a, div.photo-title a:active, div.photo-title a:hover,  =\r\n\n&gt; div.photo-title a:visited { text-decoration: none; } div.file-title  \n&gt; =\r\na, div.file-title a:active, div.file-title a:hover, div.file-title  \n&gt; a:vi=\r\nsited { text-decoration: none; } #ygrp-msg p { clear: both;  \n&gt; padding: 15=\r\npx 0 3px 0; overflow: hidden; } #ygrp-msg p span { color:  \n&gt; #1E66AE; font=\r\n-weight: bold; } div#ygrp-mlmsg #ygrp-msg p a  \n&gt; span.yshortcuts { font-fa=\r\nmily: Verdana; font-size: 10px; font- \n&gt; weight: normal; } #ygrp-msg p a { =\r\nfont-family: Verdana; font-size:  \n&gt; 10px; } #ygrp-mlmsg a { color: #1E66AE=\r\n; } div.attach-table div div a  \n&gt; { text-decoration: none; } div.attach-ta=\r\nble { width: 400px; } --&gt;\n\n\n"}}
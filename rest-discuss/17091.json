{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"tFJ64b_nSCr81DMIAqweqKRXDqyLbv7OirAw-KBAJofQVncHGHLNQMkJvfkQmgk1E5e0B2f_g5EvfIzNHL86cnXPk1g94_kNDiyYyMaBIg","spamInfo":{"isSpam":false,"reason":"6"},"subject":"Re: [rest-discuss] Re: HTML REST API example [was: Link relations]","postDate":"1291837985","msgId":17091,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMTAxMjA4MTI1MzA1LjU0YWFiYTZlLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","inReplyToHeader":"PGlkbDFiaStkOXAzQGVHcm91cHMuY29tPg==","referencesHeader":"PDIwMTAxMjA3MDE0MDAwLjQwMzE5YjdmLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPGlkbDFiaStkOXAzQGVHcm91cHMuY29tPg=="},"prevInTopic":17090,"nextInTopic":17092,"prevInTime":17090,"nextInTime":17092,"topicId":17057,"numMessagesInTopic":43,"msgSnippet":"... Note that model.xht in my example, can be stripped down further by removing the accessibility markup.  It can also have a schema, I like RELAX NG +","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 21841 invoked from network); 8 Dec 2010 19:53:06 -0000\r\nX-Received: from unknown (98.137.34.44)\n  by m7.grp.sp2.yahoo.com with QMQP; 8 Dec 2010 19:53:06 -0000\r\nX-Received: from unknown (HELO mxout-08.mxes.net) (216.86.168.183)\n  by mta1.grp.sp2.yahoo.com with SMTP; 8 Dec 2010 19:53:05 -0000\r\nX-Received: from bigbison (unknown [65.117.211.162])\n\t(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))\n\t(No client certificate requested)\n\tby smtp.mxes.net (Postfix) with ESMTPSA id 2E013509E2;\n\tWed,  8 Dec 2010 14:53:04 -0500 (EST)\r\nDate: Wed, 8 Dec 2010 12:53:05 -0700\r\nTo: &quot;Jorn Wildt&quot; &lt;jw@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nMessage-Id: &lt;20101208125305.54aaba6e.eric@...&gt;\r\nIn-Reply-To: &lt;idl1bi+d9p3@...&gt;\r\nReferences: &lt;20101207014000.40319b7f.eric@...&gt;\n\t&lt;idl1bi+d9p3@...&gt;\r\nOrganization: Bison Systems Corporation\r\nX-Mailer: Sylpheed 3.0.3 (GTK+ 2.10.14; i686-pc-mingw32)\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=US-ASCII\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:6:0:0:0\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nSubject: Re: [rest-discuss] Re: HTML REST API example [was: Link relations]\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\n&quot;Jorn Wildt&quot; wrote:\n&gt;\n&gt; I can see lots of good stuff in a XHTML API. But I can also see some\n&gt; good stuff in using a specific XML format - so what if we could\n&gt; generate the HTML on the fly from the XML?\n&gt; \n\nNote that model.xht in my example, can be stripped down further by\nremoving the accessibility markup.  It can also have a schema, I like\nRELAX NG + Schematron, which constrains the markup; and documentation\nfor that schema, none of which affects the media type.  The concept is\nthat it&#39;s a model, used by the XForms client-side MVC architecture.\nAll XForms does is generate a user interface for an underlying XML\ndocument, i.e. it&#39;s just a transformation.\n\n&gt;\n&gt; It should be relatively easy to write an XML stylesheet that converts\n&gt; any XML to readable HTML plus convert ATOM links til HTML\n&gt; &lt;a&gt;-elements. This stylesheet could then be refered in the XML such\n&gt; that the browsers would apply it to the XML (I know at least IE can\n&gt; do that).\n&gt; \n\nIf you mean XSLT, yes, it works both client- and server- side.  Note\nthat the following examples are actually the same files at the same\nlocations, from the origin-server POV:\n\n[1] http://charger.bisonsystems.net/xmltest/index.htm\n[2] http://charger.bisonsystems.net/xmltest/index.xht\n[3] http://charger.bisonsystems.net/xmltest/index.xml (IE users)\n(yes, I&#39;m still slacking on the /conneg/ stuff and XForms for my demo)\n\nThe HTML representation dereferenced at [1] isn&#39;t stored anywhere,\nexcept caches.  Note that [3] relies on IE sniffing the output as text/\nhtml and escalating privileges without asking the user.  Anyway, they&#39;re\ngenerated on-the-fly from the same stub file and XSLT stylesheet in the\nsame locations on the HD, applying a style to the Atom representations\nwhose bi-directional transfer my API is based on.  When the XSLT runs\non the client component, it&#39;s the Code on Demand constraint.  It results\nin more network activity, but less overall bandwidth due to independent\ncaching of the components making up a &quot;page&quot;, particularly the HTML\ntemplate.  So the user-perceived performance of [2] and [3] is greater\nthan that of [1], provided the user-agent supports caching and XSLT; [3]\nisn&#39;t REST, just a pragmatic hack.\n\nBear in mind, this is a PHP-driven demo, the only links expected to\nwork are the &#39;view&#39; menu and the in-the-loop links to posts and\ncomments; the latency is also expected, my focus was correctness of\nheaders.  My toolchain expands from CSE Validator Pro to include\nEclipse with phpeclipse and oXygen, plus httpwatch; but commercial tools\naren&#39;t required to develop to my chosen technologies, and I&#39;m spending\nless overall than the licensing of apps like Dreamweaver, for best-in-\nclass products.  It&#39;s the ubiquity of the data types which allows QA/QC\non-the-fly at a low cost, for high productivity -- not the case if you\ngo off the reservation with a custom XML format.\n\n&gt;\n&gt; In this way we could get both a browsable HTML API and a simple\n&gt; machine-readable API?\n&gt; \n\nYes and no.  You&#39;re on the right track, but the generic-XML-with-schema\ndata format using application/xml as a media type (and this holds true\neven if you register a media type) approach still falls outside of REST.\nA uniform interface is one where your data type is common knowledge at\nthe IP layer, i.e. standardized.  While new data types are allowed,\nit&#39;s rare when one achieves ubiquity, particularly over a short period\nof time.  I stick with creating schemas within existing standardized\ndata types, using ubiquitous media types to designate the intended\nprocessing model.  As a result, my APIs achieve Internet scale out-of-\nthe-box, without losing development time writing out-of-band\ndocumentation to explain my unique-snowflake markup to others when HTML\nand Atom can be universally understood by humans and machines.\n\nWhich isn&#39;t a golden-hammer approach, because I don&#39;t insist on using\nthis technique where it doesn&#39;t apply.  But in most cases, it does\napply, so the efficiencies gained by using it outweigh the efficiency\nlost by using data types which aren&#39;t an exact fit.  Which is exactly\nthe point of REST:\n\n&quot;The trade-off, though, is that a uniform interface degrades\nefficiency, since information is transferred in a standardized form\nrather than one which is specific to an application&#39;s needs.&quot;\n\nSo REST results in economies of scale not only in terms of data being\nsent over the wire, but also in terms of development costs and time,\nongoing maintenance costs and time, plus serendipitous re-use.  These\nbenefits of a uniform interface are the result of standardization, so\nmake sure you understand the implications of rolling your own project-\nspecific data types, even if they&#39;re transformed into HTML.\n\n-Eric\n\n"}}
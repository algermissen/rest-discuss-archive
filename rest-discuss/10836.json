{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":302633978,"authorName":"Daniel Yokomizo","from":"&quot;Daniel Yokomizo&quot; &lt;daniel.yokomizo@...&gt;","profile":"daniel_yokomiso","replyTo":"SENDER","senderId":"5Tks-llG-AE48yXP4ERqfFwSNHBhHCvPMmdKS1kqkh6fwWpM-rCokEa6mT4tta-OySRovQ447IDePrxRPNFH6F_j1p7Ip6RvR19ZeYdND18sL8xQ","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] CSRF attacks in RESTful authenticated web applications","postDate":"1211917492","msgId":10836,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGU1YzZlY2FiMDgwNTI3MTI0NGo0ZjM1YjJiYmdlNmJhMTc5ZjAyZDk3MGYwQG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PDQ4M0M1NEVFLjIwOTAwMDdAa29lbG4uZGU+","referencesHeader":"PDQ4M0IxRUJGLjMwMzA5MDNAa29lbG4uZGU+CSA8ZTVjNmVjYWIwODA1MjYxNTE1aDgwMzhkYTNnZDI0N2NkODllYzcxZDgyMUBtYWlsLmdtYWlsLmNvbT4JIDw0ODNDNTRFRS4yMDkwMDA3QGtvZWxuLmRlPg=="},"prevInTopic":10835,"nextInTopic":10837,"prevInTime":10835,"nextInTime":10837,"topicId":10818,"numMessagesInTopic":21,"msgSnippet":"On Tue, May 27, 2008 at 3:37 PM, Simon Reinhardt ... REST don t prohibit state, as long as you can name it. The URI /foo/1 denotes a resource that can be","rawEmail":"Return-Path: &lt;daniel.yokomizo@...&gt;\r\nX-Sender: daniel.yokomizo@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 72148 invoked from network); 27 May 2008 19:44:53 -0000\r\nX-Received: from unknown (66.218.67.97)\n  by m55.grp.scd.yahoo.com with QMQP; 27 May 2008 19:44:53 -0000\r\nX-Received: from unknown (HELO fg-out-1718.google.com) (72.14.220.152)\n  by mta18.grp.scd.yahoo.com with SMTP; 27 May 2008 19:44:53 -0000\r\nX-Received: by fg-out-1718.google.com with SMTP id 19so1913629fgg.16\n        for &lt;rest-discuss@yahoogroups.com&gt;; Tue, 27 May 2008 12:44:52 -0700 (PDT)\r\nX-Received: by 10.86.97.7 with SMTP id u7mr7811906fgb.19.1211917492389;\n        Tue, 27 May 2008 12:44:52 -0700 (PDT)\r\nX-Received: by 10.86.9.6 with HTTP; Tue, 27 May 2008 12:44:52 -0700 (PDT)\r\nMessage-ID: &lt;e5c6ecab0805271244j4f35b2bbge6ba179f02d970f0@...&gt;\r\nDate: Tue, 27 May 2008 16:44:52 -0300\r\nTo: &quot;Simon Reinhardt&quot; &lt;simon.reinhardt@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nIn-Reply-To: &lt;483C54EE.2090007@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: 7bit\r\nContent-Disposition: inline\r\nReferences: &lt;483B1EBF.3030903@...&gt;\n\t &lt;e5c6ecab0805261515h8038da3gd247cd89ec71d821@...&gt;\n\t &lt;483C54EE.2090007@...&gt;\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Daniel Yokomizo&quot; &lt;daniel.yokomizo@...&gt;\r\nSubject: Re: [rest-discuss] CSRF attacks in RESTful authenticated web applications\r\nX-Yahoo-Group-Post: member; u=302633978; y=ePrXSKmdkOPOjRhEwJWrCodMjUzAC8iJ_sF1QnQjbLm-CWrTurzITbXR\r\nX-Yahoo-Profile: daniel_yokomiso\r\n\r\nOn Tue, May 27, 2008 at 3:37 PM, Simon Reinhardt\n&lt;simon.reinhardt@...&gt; wrote:\n&gt; First of all, thanks to you all for your insightful comments!\n&gt;\n&gt; Daniel Yokomizo wrote:\n&gt;&gt; Using HATEOAS you can avoid the first issue: the\n&gt;&gt; client of the app must use the links in the response to navigate to\n&gt;&gt; the next states, so the server can generate URIs that are unguessable\n&gt;&gt; (e.g. GUIDs, cryptography) and the attacker is unable to name a\n&gt;&gt; resource used in the session.\n&gt;\n&gt; How exactly would that work? If the URIs are unguessable then they have to be unrelated to anything the client knows, i.e. they contain random tokens. But the server would have to remember those tokens and relate them to the user (which is really just sessions with a session ID in a request parameter) and then you have server state. How is that still RESTful?\n\nREST don&#39;t prohibit state, as long as you can name it. The URI /foo/1\ndenotes a resource that can be retrieved from database, to make it\nunguessable you can use a GUID (e.g /{GUID}/foo/1 or /foo/{GUID} or\n/{GUID}), cryptography (e.g. /{encrypted URI} so the server decrypts\nthe URI before using it), etc.. Also REST don&#39;t favor (or prohibit)\npretty or hackable URIs (it&#39;s a design decision) and it don&#39;t\nguarantee that some URI will exist later (as it can always return 404,\n410, etc.) so you can enforce the rule that the client (a human or an\napp) must GET the entry point and navigate using links to the\ninteresting states (i.e. other URIs), generating the URIs to be useful\nonly for some predefined period or whatever (I don&#39;t like this\napproach, but it&#39;s important to understand that it isn&#39;t RESTful).\n\n&gt; Treating sessions as resources always seemed to me like just phrasing things differently and pretending them to be better.\n\nSessions as resources have one additional property that usual\ncookie-based sessions don&#39;t have: they can be named (i.e. they are\nbound to one or more URIs). So you can start a session in one agent\nand end it in another, save it to continue later, etc..\n\nI said that it need to be unguessable but it don&#39;t need to be session\nlocked. If I give you an unguessable URI it&#39;ll be still unguessable\ntomorrow.\n\n&gt; What I don&#39;t like about this is that:\n&gt; - you get ugly URIs\n\nThey don&#39;t need to be particularly ugly, you can use 128 bit numbers\nfor URIs and render them using RFC1751 rules, it wouldn&#39;t be so bad ;)\n\n&gt; - sending them to friends leads to problems\n\nWhich kind of problems?\n\n&gt; - you have several URIs for one and the same resource\n\nWhy would it be a problem?\n\n&gt; - you just need to have one URI which doesn&#39;t contain the session ID (maybe a link to a wiki related to your application which is coded as a separate application but integrated into the same framing template with menus and stuff) and you are &quot;logged out&quot;; clicking on links in the menu will not lead you back into the application in an authenticated state.\n\nYou can send an unguessable entry point URI using an out of band\nchannel (e.g. email). Or you can use a guessable entry point and use\nsome form of login to redirect to the unguessable world.\n\nIt&#39;s important to understand that most of the time there&#39;s a trade-off\nbetween security and convenience. You need to define your security\npolicy, for example if your app don&#39;t do external transactions (i.e.\ncredit-card payments, send e-mails, update other apps) you don&#39;t need\nmuch security beyond being able to undo changes in your own data, so a\nrevision aware storage system and a simple simple authentication\nprocess could solve most of your problems. Banking apps, the checkout\nof e-commerce apps, etc., have different security needs. You could use\nguessable URIs in some parts of your app and unguessable in other\nparts, using some stronger form of authentication to separate them. It\nall depends on your needs, there&#39;s no one-size fits all solution.\n\n&gt; So even pages which contain public, non-personalised content need to contain authentication hints. Doesn&#39;t this muddle identifying resources and authentication?\n&gt;\n&gt; Well, I didn&#39;t intend to let this turn into a discussion of the basic principles of REST, maybe I don&#39;t understand them enough yet, maybe I&#39;m not convinced enough. This has all surely been discussed elsewhere extensively.\n&gt;\n&gt; Thanks,\n&gt; Simon\n\nBest regards,\nDaniel Yokomizo.\n\n"}}
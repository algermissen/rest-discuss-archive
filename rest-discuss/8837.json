{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":303606877,"authorName":"Stian Soiland","from":"Stian Soiland &lt;ssoiland@...&gt;","profile":"stian_soiland","replyTo":"SENDER","senderId":"vrQugZw-KNJt_qAkxHfSKzck7ouVgPsV4lKpqK4vTvO8uVepRwM7Zntfm4_iFsT5GyYRCK9gJTk6jh1kBO1d2mlC6h3nDctOLoY3nA","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Re: WADL pushback","postDate":"1181129452","msgId":8837,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDlCMkE5OEJELTQ5RTAtNEFBOS1BMDcyLTIyNjE2RjM4NkQ1NUBjcy5tYW4uYWMudWs+","inReplyToHeader":"PDg3aXJhMnoxMDUuZnNmQGthbmdhLnRhcHNlbGxmZXJyaWVyLmNvLnVrPg==","referencesHeader":"PDlkYzc4ZDdiMDcwNjA0MTMzOGoxMDM1NGM5ZnI5ZjI3YTYwMWEzNjNlNGJlQG1haWwuZ21haWwuY29tPiA8ZjQzbXV1JDFoYSQxQHNlYS5nbWFuZS5vcmc+IDxmNDQ3cWwkNmxlJDFAc2VhLmdtYW5lLm9yZz4gPDQ2NjVBRDVCLjUwMTAwMDNAaGFja2NyYWZ0Lm5ldD4gPDg3aXJhMnoxMDUuZnNmQGthbmdhLnRhcHNlbGxmZXJyaWVyLmNvLnVrPg=="},"prevInTopic":8834,"nextInTopic":8839,"prevInTime":8836,"nextInTime":8838,"topicId":8794,"numMessagesInTopic":108,"msgSnippet":"... Since our friendly HTML mailer from Yahoo strips all indentation it was actually really *difficult* for me to understand this code without running it","rawEmail":"Return-Path: &lt;ssoiland@...&gt;\r\nX-Sender: ssoiland@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 48840 invoked from network); 6 Jun 2007 11:31:24 -0000\r\nReceived: from unknown (66.218.67.33)\n  by m48.grp.scd.yahoo.com with QMQP; 6 Jun 2007 11:31:24 -0000\r\nReceived: from unknown (HELO tranquility.mcc.ac.uk) (130.88.200.145)\n  by mta7.grp.scd.yahoo.com with SMTP; 6 Jun 2007 11:31:20 -0000\r\nReceived: from webcam3.cs.man.ac.uk ([130.88.195.217])\n\tby tranquility.mcc.ac.uk with esmtp (Exim 4.63 (FreeBSD))\n\t(envelope-from &lt;ssoiland@...&gt;)\n\tid 1HvtjQ-0004Td-72; Wed, 06 Jun 2007 12:31:16 +0100\r\nIn-Reply-To: &lt;87ira2z105.fsf@...&gt;\r\nReferences: &lt;9dc78d7b0706041338j10354c9fr9f27a601a363e4be@...&gt; &lt;f43muu$1ha$1@...&gt; &lt;f447ql$6le$1@...&gt; &lt;4665AD5B.5010003@...&gt; &lt;87ira2z105.fsf@...&gt;\r\nMime-Version: 1.0 (Apple Message framework v752.3)\r\nContent-Type: text/plain; charset=US-ASCII; delsp=yes; format=flowed\r\nMessage-Id: &lt;9B2A98BD-49E0-4AA9-A072-22616F386D55@...&gt;\r\nContent-Transfer-Encoding: 7bit\r\nDate: Wed, 6 Jun 2007 12:30:52 +0100\r\nTo: Rest List &lt;rest-discuss@yahoogroups.com&gt;\r\nX-Mailer: Apple Mail (2.752.3)\r\nX-UoM: Scanned by the University Mail System. See http://www.itservices.manchester.ac.uk/email/filtering/information/ for details.\r\nX-eGroups-Msg-Info: 1:0:0:0\r\nFrom: Stian Soiland &lt;ssoiland@...&gt;\r\nSubject: Re: [rest-discuss] Re: WADL pushback\r\nX-Yahoo-Group-Post: member; u=303606877; y=2vylPnzLXm_JEB4h8nKgJSAUyEmdWg8-ko2VAfzz4nfc0Oa3suLtJQ\r\nX-Yahoo-Profile: stian_soiland\r\n\r\n\nOn 5 Jun 2007, at 19:53, Nic James Ferrier wrote:\n&gt;\n&gt; return {&quot;abbr&quot;:\n&gt; {&quot;@class&quot;: &quot;user&quot;,\n&gt; &quot;@title&quot;: strip_openid_url(openid_profile.openid),\n&gt; &quot;div&quot;:\n&gt; [{&quot;span&quot;:\n&gt; {&quot;@class&quot;: &quot;nickname&quot;,\n&gt; &quot;span&quot;: openid_profile.nick_name }},\n&gt; {&quot;ul&quot;:\n&gt; {&quot;@class&quot;: &quot;mugshots&quot;,\n&gt; &quot;div&quot;:\n&gt; [{&quot;li&quot;:\n&gt; [{&quot;img&quot;:\n&gt; {&quot;@class&quot;: &quot;mugshot&quot;,\n&gt; &quot;@alt&quot;: mugshot.name,\n&gt; &quot;@src&quot;: file_field_get_url(mugshot.shot) }},\n&gt; {&quot;img&quot;:\n&gt; {&quot;@class&quot;: &quot;avatar&quot;,\n&gt; &quot;@alt&quot;: mugshot.name,\n&gt; &quot;@src&quot;: &quot;/sitemedia/%s&quot; % (mugshot.thumb)}}]} for mugshot in  \n&gt; openid_profile.mugshot_set.all()]}}]}}\nSince our friendly HTML mailer from Yahoo strips all indentation it  \nwas actually really *difficult* for me to understand this code  \nwithout running it through Python and some pretty print..\n\n_{&#39;abbr&#39;: {&#39;@class&#39;: &#39;user&#39;,\n_          &#39;@title&#39;: &#39;strip_openid_url(openid_profile.openid)&#39;,\n_          &#39;div&#39;: [{&#39;span&#39;: {&#39;@class&#39;: &#39;nickname&#39;,\n_                            &#39;span&#39;: &#39;openid_profile.nick_name&#39;}},\n_                  {&#39;ul&#39;: {&#39;@class&#39;: &#39;mugshots&#39;,\n_                          &#39;div&#39;: [{&#39;li&#39;: [{&#39;img&#39;: {&#39;@alt&#39;:  \n&#39;mugshot.name&#39;,\n_                                                   &#39;@class&#39;: &#39;mugshot&#39;,\n_                                                   &#39;@src&#39;:  \n&#39;file_field_get_url(mugshot.shot)&#39;}},\n_                                          {&#39;img&#39;: {&#39;@alt&#39;:  \n&#39;mugshot.name&#39;,\n_                                                   &#39;@class&#39;: &#39;avatar&#39;,\n_                                                   &#39;@src&#39;: &#39;/ \nsitemedia/mugshot.thumb&#39;}}]},\n_                                  {&#39;li&#39;: [{&#39;img&#39;: {&#39;@alt&#39;:  \n&#39;mugshot.name&#39;,\n_                                                   &#39;@class&#39;: &#39;mugshot&#39;,\n_                                                   &#39;@src&#39;:  \n&#39;file_field_get_url(mugshot.shot)&#39;}},\n_                                          {&#39;img&#39;: {&#39;@alt&#39;:  \n&#39;mugshot.name&#39;,\n_                                                   &#39;@class&#39;: &#39;avatar&#39;,\n_                                                   &#39;@src&#39;: &#39;/ \nsitemedia/mugshot.thumb&#39;}}]},\n_                                  {&#39;li&#39;: [{&#39;img&#39;: {&#39;@alt&#39;:  \n&#39;mugshot.name&#39;,\n_                                                   &#39;@class&#39;: &#39;mugshot&#39;,\n_                                                   &#39;@src&#39;:  \n&#39;file_field_get_url(mugshot.shot)&#39;}},\n_                                          {&#39;img&#39;: {&#39;@alt&#39;:  \n&#39;mugshot.name&#39;,\n_                                                   &#39;@class&#39;: &#39;avatar&#39;,\n_                                                   &#39;@src&#39;: &#39;/ \nsitemedia/mugshot.thumb&#39;}}]}]}}]}}\n\n\nAlso doing everything in once like this makes it really hard to  \nmaintain, I would definitively split the code up into so-called  \nfunctions, but OK, let&#39;s to the monolith thing for argument&#39;s sake.\n\n\nI don&#39;t see the big advantage of your massive thing compared to for  \ninstance using ElementTree:\n\nabbr = ET.Element(&quot;abbr&quot;)\nabbr[&quot;class&quot;] = &quot;user&quot;\nabbr[&quot;title&quot;] = strip_openid_url(openid_profile.openid))\n\ndiv = ET.SubElement(abbr, &quot;div&quot;)\n\nspan = ET.SubElement(div, &quot;span&quot;)\nspan[&quot;class&quot;] = &quot;nickname&quot;\nspan.text = openid_profile.nick_name\n\nul = ET.Subelement(div, &quot;ul&quot;)\nul.set(&quot;class&quot;, &quot;mugshots&quot;) # alternative attribute assignment\n\nuldiv = ET.SubElement(ul, &quot;div&quot;)\nfor mugshot in openid_profile.mugshot_set.all():\n     li = ET.Subelement(uldiv, &quot;li&quot;)\n     mugshot = ET.SubElement(li, &quot;img&quot;)\n     mugshot[&quot;class&quot;] = &quot;mugshot&quot;\n     mugshot[&quot;src&quot;] = file_field_get_url(mugshot.shot)\n\n     avatar = ET.SubElement(li, &quot;img&quot;)\n     avatar[&quot;class&quot;] = &quot;avatar&quot;\n     avatar[&quot;src&quot;] = &quot;/sitemedia/%s&quot; % (mugshot.thumb)\n\n\nSimilarly, if using a proper hand-coded XSD (I wouldn&#39;t include all  \nthose irrelevant div/span structures, though) and using XMLBeans in  \nJava it would be something like this: (We all know Java is more verbose)\n\nAbbrDocument abbrDoc = AbbrDocument.Factory.newInstance()\nAbbr abbr = abbrDoc.getAbbr();\n\nabbr.setClass(&quot;user&quot;);\nabbr.setTitle(strip_openid_url(openid_profile.openid));\n\nDiv div = abbr.newDiv();\nSpan span = div.newSpan();\nspan.setClass(&quot;nickname&quot;);\nspan.setText(openid_profile.nick_name);\n\nUl ul = div.newUl();\nul.setClass(&quot;mugshots&quot;);\n\nDiv div = ul.newDiv();\nfor (Mugshot mugshot : openid_profile.mugshot_set) {\n     Li li = div.newLi();\n     Img mugshot = li.newImg();\n     mugshot.setClass(&quot;mugshot&quot;);\n     mugshot.setSrc(file_field_get_url(mugshot.shot));\n\n     Img avatar = li.newImg();\n     avatar.setClass(&quot;avatar&quot;);\n     avatar.setSrc(&quot;/sitemedia/&quot; + mugshot.thumb)) ;\n\n}\n\n\nI guess templates are really good when doing actual HTML, but I don&#39;t  \nsee the big advantage for data structures. For instance here it would  \nmake sense to make some methods or subclasses that takes care of  \nthese silly setClass() calls, so you do a newAvatar() instead, etc.\n\n\nConsider also the clients. There&#39;s no big difference in looking at\n\nblah[&quot;abbr&quot;][&quot;div&quot;][&quot;span&quot;][&quot;span&quot;]  (which fails to check the class  \nattributes)\n\nor\n\nblah.get(&quot;div&quot;).get(&quot;span&quot;).get(&quot;span&quot;)\n\nIn fact with XML you can specify an (OK, not that easy) Xpath to get  \nthe content of the src attribute of an tag which class is &quot;mugshot&quot;  \nand that is a child of an &quot;ul&quot; with class &quot;mugshots&quot;. I&#39;m not going  \nto attempt that now, that is left as an exercise to the author who  \nchose this div/span microformat in question.\n\n\nOne of the things that is useful with XML is that you can re-use an  \nexisting schema, and clients might use whatever libraries they have  \nfor that purpose already. The hottest example here is of course  \nXHTML, which you are using in some JSON-ish translation.\n\n-- \nStian Soiland, myGrid team\nSchool of Computer Science\nThe University of Manchester\nhttp://www.cs.man.ac.uk/~ssoiland/\n\n\n\n"}}
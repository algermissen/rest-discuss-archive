{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":209043068,"authorName":"Solomon Duskis","from":"Solomon Duskis &lt;sduskis@...&gt;","profile":"sduskis","replyTo":"SENDER","senderId":"cNn0DltAV56nF_o-z8hDcu6LkPn_L0hBGZne_yrA6SBv4LSACP_iuEpRRhm8pCgeTy0Ve0S_spc2IHui1k4sQzYJyPkw-UYUKw","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Re: HATEOAS & REST APIs - back to basics","postDate":"1238322577","msgId":12332,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDU1YzYwZTM3MDkwMzI5MDMyOXYzZGE3YTVmY3I1NWE3NGQ4ZTVmMTYwMGJjQG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PGdxaGk1aStvYW5nQGVHcm91cHMuY29tPg==","referencesHeader":"PDU1YzYwZTM3MDkwMzI2MDkwOHE3NzlhMTI0NHEzMjM4YWZkZDRjMzJkZDUwQG1haWwuZ21haWwuY29tPgkgPGdxaGk1aStvYW5nQGVHcm91cHMuY29tPg=="},"prevInTopic":12331,"nextInTopic":12333,"prevInTime":12331,"nextInTime":12333,"topicId":12327,"numMessagesInTopic":9,"msgSnippet":"I ll definitely take a look at CCXML and SCXML and the technologies that use them...  but I don t think that they are RESTful.  They are useful, but don t meet","rawEmail":"Return-Path: &lt;sduskis@...&gt;\r\nX-Sender: sduskis@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 15227 invoked from network); 29 Mar 2009 10:29:38 -0000\r\nX-Received: from unknown (69.147.108.201)\n  by m1.grp.re1.yahoo.com with QMQP; 29 Mar 2009 10:29:38 -0000\r\nX-Received: from unknown (HELO mail-qy0-f111.google.com) (209.85.221.111)\n  by mta2.grp.re1.yahoo.com with SMTP; 29 Mar 2009 10:29:38 -0000\r\nX-Received: by qyk9 with SMTP id 9so11960599qyk.11\n        for &lt;rest-discuss@yahoogroups.com&gt;; Sun, 29 Mar 2009 03:29:37 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.229.85.11 with SMTP id m11mr1366580qcl.96.1238322577926; Sun, \n\t29 Mar 2009 03:29:37 -0700 (PDT)\r\nIn-Reply-To: &lt;gqhi5i+oang@...&gt;\r\nReferences: &lt;55c60e370903260908q779a1244q3238afdd4c32dd50@...&gt;\n\t &lt;gqhi5i+oang@...&gt;\r\nDate: Sun, 29 Mar 2009 06:29:37 -0400\r\nMessage-ID: &lt;55c60e370903290329v3da7a5fcr55a74d8e5f1600bc@...&gt;\r\nTo: wahbedahbe &lt;andrew.wahbe@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nContent-Type: multipart/alternative; boundary=0016364270bc5fea0f04663f7171\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Solomon Duskis &lt;sduskis@...&gt;\r\nSubject: Re: [rest-discuss] Re: HATEOAS & REST APIs - back to basics\r\nX-Yahoo-Group-Post: member; u=209043068; y=_pREIkqJOzfhnm4eM1_qqXJ8mV-H9vrEtm8jK2dyNPKfRg\r\nX-Yahoo-Profile: sduskis\r\n\r\n\r\n--0016364270bc5fea0f04663f7171\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: 7bit\r\n\r\nI&#39;ll definitely take a look at CCXML and SCXML and the technologies that use\nthem...  but I don&#39;t think that they are RESTful.  They are useful, but\ndon&#39;t meet the Hypermedia As The Engine Of Application State (HATEOAS):\n\nREST has a constraint of Hypermedia As The Engine Of Application State\n(HATEOAS).  Roy Fielding has a long post as to what that means, but I think\nof it in terms of a browser user clicking on a link to move from one\npage/state to another state.\n\nIt seems like CCXML&#39;s oriented at describing the communication process:\nstart the call, dial, connect... end the call.  If so, then yes, there are\nstates, but it&#39;s not &quot;application state.&quot;  I would categorize that type of\nstate as &quot;communication state&quot;\n\nSCXML seems to be a generic state machine.  Generic state machines usually\naren&#39;t used to capture &quot;application state.&quot;  They are usually used to\ncapture work flow and &quot;resource state&quot;; for example a mortgage loan is in\nthe &quot;initialized&#39; state, &quot;processing&quot; state or &quot;approved&quot; state based on\nsome interaction with the state machine. SCXML may be used to capture\napplications state, but it doesn&#39;t seem to be hypertext driven.\n\nI definitely could be wrong about all of this :)\n\n-Solomon\n\n\nOn Thu, Mar 26, 2009 at 11:45 PM, wahbedahbe &lt;andrew.wahbe@...&gt; wrote:\n\n&gt;   Solomon,\n&gt; I noticed the following comment in the first article:\n&gt;\n&gt; *Website architectures are the only examples of architectures that I&#39;ve\n&gt; seen that fully implement REST characteristics*.\n&gt;\n&gt; I strongly suggest looking at CCXML &lt;http://www.w3.org/TR/ccxml/&gt;  for a\n&gt; good example of a markup language designed for machine to machine RESTful\n&gt; interactions. CCXML is meant to control telephony resources to implement\n&gt; call control applications. If you&#39;re not a telephony person, the general\n&gt; state machine model is being distilled into and improved in SCXML&lt;http://www.w3.org/TR/scxml/&gt;\n&gt; .\n&gt;\n&gt; The key take away from these languages though is to model your client as a\n&gt; set of APIs accessible via the markup language. You GET an initial document\n&gt; that drives the client via those APIs. Part of the API allows the client to\n&gt; make HTTP requests to change resources and/or transition to new documents.\n&gt;\n&gt; In this model, you have a client that consists of a markup interpreter\n&gt; driving an underlying &quot;platform&quot;. The platform has no dependencies on the\n&gt; markup language, let alone any specific entities in those documents. i.e.\n&gt; you never ever have client platform code that walks the document looking for\n&gt; key pieces of data (which is where most folks end up). Your markup just\n&gt; &quot;runs&quot; in the interpreter and invokes the platform. The platform can\n&gt; generate events up into the interpreter which are typically surfaced as\n&gt; events in the markup.\n&gt;\n&gt; The result of this model is that the client is completely decoupled from\n&gt; the server which, after all, is a key benefit of REST. Essentially, what I&#39;m\n&gt; describing above is a general client design that is consistent with the\n&gt; HATEOAS constraint. There may be other designs that do this, but this one\n&gt; has worked well for me. You can think of an HTML web browser working this\n&gt; way. The platform is the renderer, chrome etc. User input generates DOM\n&gt; events in the markup. And so on.\n&gt;\n&gt; Hope this helps.\n&gt;\n&gt; Andrew Wahbe\n&gt;\n&gt;\n&gt;\n&gt; --- In rest-discuss@yahoogroups.com, Solomon Duskis &lt;sduskis@...&gt; wrote:\n&gt; &gt;\n&gt; &gt; Hi guys,\n&gt; &gt;\n&gt; &gt; I put together a series of blog entries with an idea on how to construct\n&gt; a\n&gt; &gt; HATEOAS REST API. The core of the idea is that the current REST APIs have\n&gt; &gt; some AJAXy (2006 - 2009) types of optimizations, but don&#39;t take advantage\n&gt; of\n&gt; &gt; HTML&#39;s more basic capabilities (~1995 - now) that are applicable to\n&gt; HATEOAS.\n&gt; &gt;\n&gt; &gt; Using that basic idea, I tried to figure out how to take advantage of\n&gt; HTML\n&gt; &gt; and Browser idioms in a REST API setting.\n&gt; &gt;\n&gt; &gt; The road to Real REST APIs:\n&gt; &gt; http://www.jroller.com/Solomon/entry/the_road_to_real_rest\n&gt; &gt; Proposal: REST/HATEOAS Java client:\n&gt; &gt; http://www.jroller.com/Solomon/entry/proposal_rest_hateaos_java_client\n&gt; &gt; REST - HATEOAS Client communication:\n&gt; &gt; http://www.jroller.com/Solomon/entry/rest_hateoas_client_communication\n&gt; &gt;\n&gt; &gt; I&#39;m hoping to get feedback from this illustrious crowd on the following:\n&gt; &gt;\n&gt; &gt; 1) does the idea fully implement REST, including HATEOAS\n&gt; &gt; 2) is this idea implementable\n&gt; &gt; 3) future direction for the idea\n&gt; &gt;\n&gt; &gt; Any feedback (even &quot;it sucks, here&#39;s why...&quot;) would be appreciated. Note\n&gt; &gt; that it is a blog, and not a polished article... I don&#39;t mean to provide\n&gt; &gt; flaim-bait, but it still happens :)\n&gt; &gt;\n&gt; &gt; -Solomon\n&gt; &gt;\n&gt;  \n&gt;\n\r\n--0016364270bc5fea0f04663f7171\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nI&#39;ll definitely take a look at CCXML and SCXML and the technologies tha=\r\nt use them...=A0 but I don&#39;t think that they are RESTful.=A0 They are u=\r\nseful, but don&#39;t meet the Hypermedia As The Engine Of Application State=\r\n (HATEOAS):&lt;br&gt;\n&lt;br&gt;REST has a constraint of Hypermedia As The Engine Of Ap=\r\nplication State\n(HATEOAS).=A0 Roy Fielding has a long post as to what that =\r\nmeans, but I\nthink of it in terms of a browser user clicking on a link to m=\r\nove from\none page/state to another state.&lt;br&gt;\n&lt;br&gt;It seems like CCXML&#39;s=\r\n oriented at describing the communication process: start the call, dial, co=\r\nnnect... end the call.=A0 If so, then yes, there are states, but it&#39;s n=\r\not &quot;application state.&quot;=A0 I would categorize that type of state =\r\nas &quot;communication state&quot;&lt;br&gt;\n\n\n&lt;br&gt;SCXML seems to be a generic st=\r\nate machine.=A0 Generic state machines usually aren&#39;t used to capture &=\r\nquot;application state.&quot;=A0 They are usually used to capture work flow=\r\n and &quot;resource state&quot;; for example a mortgage loan is in the &quo=\r\nt;initialized&#39; state, &quot;processing&quot; state or &quot;approved&qu=\r\not; state based on some interaction with the state machine. SCXML may be us=\r\ned to capture applications state, but it doesn&#39;t seem to be hypertext d=\r\nriven.&lt;br&gt;\n&lt;br&gt;I definitely could be wrong about all of this :)&lt;br&gt;&lt;br&gt;-Sol=\r\nomon&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;div class=3D&quot;gmail_quote&quot;&gt;On Thu, Mar 26, 2009 at 11:45 PM=\r\n, wahbedahbe &lt;span dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:andrew.wahbe@...=\r\n&quot; target=3D&quot;_blank&quot;&gt;andrew.wahbe@...&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;\n\n\n&lt;blo=\r\nckquote class=3D&quot;gmail_quote&quot; style=3D&quot;border-left: 1px solid rgb(204, 204,=\r\n 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;&quot;&gt;\n\n\n\n\n\n\n\n\n\n&lt;div style=\r\n=3D&quot;background-color: rgb(255, 255, 255);&quot;&gt;\n\n\n&lt;div style=3D&quot;width: 655px;&quot;&gt;=\r\n\n&lt;div style=3D&quot;margin: 0pt; padding: 0pt 25px 0pt 0pt; width: 470px; float:=\r\n left;&quot;&gt;\n\n\n    &lt;div&gt;\n            &lt;p&gt;Solomon,&lt;br&gt;I noticed the following com=\r\nment in the first article:&lt;br&gt;&lt;br&gt;&lt;b&gt;Website architectures are the only exa=\r\nmples of architectures that I&#39;ve seen that fully implement REST charact=\r\neristics&lt;/b&gt;.&lt;br&gt;\n\n\n&lt;br&gt;I strongly suggest looking at &lt;a href=3D&quot;http://www=\r\n.w3.org/TR/ccxml/&quot; target=3D&quot;_blank&quot;&gt;CCXML&lt;/a&gt;=A0 for a good example of a m=\r\narkup language designed for machine to machine RESTful interactions. CCXML =\r\nis meant to control telephony resources to implement call control applicati=\r\nons. If you&#39;re not a telephony person, the general state machine model =\r\nis being distilled into and improved in &lt;a href=3D&quot;http://www.w3.org/TR/scx=\r\nml/&quot; target=3D&quot;_blank&quot;&gt;SCXML&lt;/a&gt;.&lt;br&gt;\n\n\n&lt;br&gt;The key take away from these la=\r\nnguages though is to model your client as a set of APIs accessible via the =\r\nmarkup language. You GET an initial document that drives the client via tho=\r\nse APIs. Part of the API allows the client to make HTTP requests to change =\r\nresources and/or transition to new documents.&lt;br&gt;\n\n\n&lt;br&gt;In this model, you =\r\nhave a client that consists of a markup interpreter driving an underlying &=\r\nquot;platform&quot;. The platform has no dependencies on the markup languag=\r\ne, let alone any specific entities in those documents. i.e. you never ever =\r\nhave client platform code that walks the document looking for key pieces of=\r\n data (which is where most folks end up). Your markup just &quot;runs&quot;=\r\n in the interpreter and invokes the platform. The platform can generate eve=\r\nnts up into the interpreter which are typically surfaced as events in the m=\r\narkup. &lt;br&gt;\n\n\n&lt;br&gt;The result of this model is that the client is completely=\r\n decoupled from the server which, after all, is a key benefit of REST. Esse=\r\nntially, what I&#39;m describing above is a general client design that is c=\r\nonsistent with the HATEOAS constraint. There may be other designs that do t=\r\nhis, but this one has worked well for me. You can think of an HTML web brow=\r\nser working this way. The platform is the renderer, chrome etc. User input =\r\ngenerates DOM events in the markup. And so on.&lt;br&gt;\n\n\n&lt;br&gt;Hope this helps.&lt;b=\r\nr&gt;&lt;br&gt;Andrew Wahbe&lt;/p&gt;&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;--- In &lt;a href=3D&quot;ma=\r\nilto:rest-discuss@yahoogroups.com&quot; target=3D&quot;_blank&quot;&gt;rest-discuss@yahoogrou=\r\nps.com&lt;/a&gt;, Solomon Duskis &lt;sduskis@...&gt; wrote:&lt;br&gt;\n\n\n&gt;&lt;br&gt;&gt; Hi=\r\n guys,&lt;br&gt;&gt; &lt;br&gt;&gt; I put together a series of blog entries with an ide=\r\na on how to construct a&lt;br&gt;&gt; HATEOAS REST API.  The core of the idea is =\r\nthat the current REST APIs have&lt;br&gt;&gt; some AJAXy (2006 - 2009) types of o=\r\nptimizations, but don&#39;t take advantage of&lt;br&gt;\n\n\n&gt; HTML&#39;s more ba=\r\nsic capabilities (~1995 - now) that are applicable to HATEOAS.&lt;br&gt;&gt; &lt;br&gt;=\r\n&gt; Using that basic idea, I tried to figure out how to take advantage of =\r\nHTML&lt;br&gt;&gt; and Browser idioms in a REST API setting.&lt;br&gt;\n\n\n&gt; &lt;br&gt;&gt; =\r\nThe road to Real REST APIs:&lt;br&gt;&gt; &lt;a href=3D&quot;http://www.jroller.com/Solom=\r\non/entry/the_road_to_real_rest&quot; target=3D&quot;_blank&quot;&gt;http://www.jroller.com/So=\r\nlomon/entry/the_road_to_real_rest&lt;/a&gt;&lt;br&gt;&gt; Proposal: REST/HATEOAS Java c=\r\nlient:&lt;br&gt;\n\n\n&gt; &lt;a href=3D&quot;http://www.jroller.com/Solomon/entry/proposal_=\r\nrest_hateaos_java_client&quot; target=3D&quot;_blank&quot;&gt;http://www.jroller.com/Solomon/=\r\nentry/proposal_rest_hateaos_java_client&lt;/a&gt;&lt;br&gt;&gt; REST - HATEOAS Client c=\r\nommunication:&lt;br&gt;\n\n\n&gt; &lt;a href=3D&quot;http://www.jroller.com/Solomon/entry/re=\r\nst_hateoas_client_communication&quot; target=3D&quot;_blank&quot;&gt;http://www.jroller.com/S=\r\nolomon/entry/rest_hateoas_client_communication&lt;/a&gt;&lt;br&gt;&gt; &lt;br&gt;&gt; I&#39;m=\r\n hoping to get feedback from this illustrious crowd on the following:&lt;br&gt;\n\n=\r\n\n&gt; &lt;br&gt;&gt; 1) does the idea fully implement REST, including HATEOAS&lt;br&gt;=\r\n&gt; 2) is this idea implementable&lt;br&gt;&gt; 3) future direction for the idea=\r\n&lt;br&gt;&gt; &lt;br&gt;&gt; Any feedback (even &quot;it sucks, here&#39;s why...&quot=\r\n;) would be appreciated.  Note&lt;br&gt;\n\n\n&gt; that it is a blog, and not a poli=\r\nshed article... I don&#39;t mean to provide&lt;br&gt;&gt; flaim-bait, but it stil=\r\nl happens :)&lt;br&gt;&gt; &lt;br&gt;&gt; -Solomon&lt;br&gt;&gt;&lt;br&gt;\n\n&lt;/div&gt;&lt;/div&gt;\n \n\n    &lt;/d=\r\niv&gt;  \n\n    \n    &lt;div width=3D&quot;1&quot; style=3D&quot;color: white; clear: both;&quot;&gt;&lt;/div=\r\n&gt;\n\t\n\t&lt;/div&gt;\n\t\n\t\n\n\n\t\n\n\n\t\n\t\n\t\n\t\n\t\n\n&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;\n\r\n--0016364270bc5fea0f04663f7171--\r\n\n"}}
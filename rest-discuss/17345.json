{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":214300837,"authorName":"Jakob Strauch","from":"&quot;Jakob Strauch&quot; &lt;jakob.strauch@...&gt;","profile":"jakobstrauch","replyTo":"SENDER","senderId":"3BC2n2GMuy33SBvKQ4CQYsBMWiRuCEMD6opLP_siOGdUv7Qk3MsL3IZxSEDNZ_kBWeZ_odBM5pxiL0dIq0l502W2cgcVovoWZs_R3GQ","spamInfo":{"isSpam":false,"reason":"6"},"subject":"Re: (in)visible properties of RESTful interfaces","postDate":"1297339649","msgId":17345,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGlqMGtlMStqZGRuQGVHcm91cHMuY29tPg==","inReplyToHeader":"PEU4NUNFNDg0LTM0QjctNEE4QS1BMjEwLUM1MDBCNzRFRjAxOUBtYWMuY29tPg=="},"prevInTopic":17344,"nextInTopic":17346,"prevInTime":17344,"nextInTime":17346,"topicId":17338,"numMessagesInTopic":8,"msgSnippet":"... Ah yes, this sounds plausible. In application error cases i already send some detail information within the body. But i didnÂ´t think of using also link","rawEmail":"Return-Path: &lt;jakob.strauch@...&gt;\r\nX-Sender: jakob.strauch@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 82347 invoked from network); 10 Feb 2011 12:07:31 -0000\r\nX-Received: from unknown (98.137.34.46)\n  by m8.grp.sp2.yahoo.com with QMQP; 10 Feb 2011 12:07:31 -0000\r\nX-Received: from unknown (HELO n45b.bullet.mail.sp1.yahoo.com) (66.163.168.159)\n  by mta3.grp.sp2.yahoo.com with SMTP; 10 Feb 2011 12:07:31 -0000\r\nX-Received: from [69.147.65.147] by n45.bullet.mail.sp1.yahoo.com with NNFMP; 10 Feb 2011 12:07:31 -0000\r\nX-Received: from [98.137.34.73] by t10.bullet.mail.sp1.yahoo.com with NNFMP; 10 Feb 2011 12:07:31 -0000\r\nDate: Thu, 10 Feb 2011 12:07:29 -0000\r\nTo: rest-discuss@yahoogroups.com\r\nMessage-ID: &lt;ij0ke1+jddn@...&gt;\r\nIn-Reply-To: &lt;E85CE484-34B7-4A8A-A210-C500B74EF019@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;ISO-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-Yahoo-Newman-Property: groups-compose\r\nX-eGroups-Msg-Info: 1:6:0:0:0\r\nFrom: &quot;Jakob Strauch&quot; &lt;jakob.strauch@...&gt;\r\nSubject: Re: (in)visible properties of RESTful interfaces\r\nX-Yahoo-Group-Post: member; u=214300837; y=QPmzz2E27JQAE-Fhk57_YS_1zCh9VEQXzcQWixv2B4iGBQty1z03\r\nX-Yahoo-Profile: jakobstrauch\r\n\r\n&gt; Jakob, note that the body you receive in the case of 4xx also \n&gt; contribu=\r\ntes to application state.\n\nAh yes, this sounds plausible. In &quot;application&quot; =\r\nerror cases i already send some detail information within the body. But i d=\r\nidn=B4t think of using also link relations inside the answer, as i=B4m usin=\r\ng already in 2xx cases. (The RPC style is very present in a programer=B4s m=\r\nind :-) )\n\nThis leads me to the question, if some generic media type exists=\r\n for an application error state, and if it makes sense to provide/use/inven=\r\nt one at all? This could be a good starting point for designing application=\r\n (fault) state...\n\n\nJakob\n\n\n--- In rest-discuss@yahoogroups.com, Jan Algerm=\r\nissen &lt;algermissen1971@...&gt; wrote:\n&gt;\n&gt; \n&gt; On Feb 9, 2011, at 8:38 PM, mike =\r\namundsen wrote:\n&gt; \n&gt; &gt; Jakob:\n&gt; &gt; \n&gt; &gt; HTTP Response codes are protocol-lev=\r\nel elements. All\n&gt; &gt; protocol-compliant clients need to be coded to recogni=\r\nze and respond\n&gt; &gt; appropriately to them per the RFC.\n&gt; &gt; \n&gt; &gt; Most protoco=\r\nl-level response codes allow for servers to also return\n&gt; &gt; entity bodies t=\r\nhat contain *application-level* information. Clients\n&gt; &gt; that are coded to =\r\nunderstand the application-level protocol will be\n&gt; &gt; responsible for under=\r\nstanding these particular entity bodies, just as\n&gt; &gt; they understand the &quot;n=\r\non-error&quot; entity bodies.\n&gt; &gt; \n&gt; &gt; Coding application-level protocols detail=\r\n is not covered in REST or\n&gt; &gt; the HTTP RFC.\n&gt; \n&gt; Good comment, Mike.\n&gt; \n&gt; =\r\nJakob, note that the body you receive in the case of 4xx also contributes t=\r\no application state. 4xx does not mean that the communication / the applica=\r\ntion failed. It just means that the intended interaction result was not ach=\r\nieved. The body tells you what to do next. If your automated user agent und=\r\nerstands the media type of that body, it can probably take a sensible actio=\r\nn.\n&gt; \n&gt; Even something simple as sending the body of e.g. a 406 response to=\r\n the IT helpdesk with an incident report is still WAY BETTER than an RPC ca=\r\nll that just dies upon you.\n&gt; \n&gt; Jan\n&gt; \n&gt; \n&gt; \n&gt; \n&gt; \n&gt; &gt; \n&gt; &gt; mca\n&gt; &gt; http:/=\r\n/amundsen.com/blog/\n&gt; &gt; http://twitter.com@mamund\n&gt; &gt; http://mamund.com/foa=\r\nf.rdf#me\n&gt; &gt; \n&gt; &gt; \n&gt; &gt; #RESTFest 2010\n&gt; &gt; http://rest-fest.googlecode.com\n&gt;=\r\n &gt; \n&gt; &gt; \n&gt; &gt; \n&gt; &gt; \n&gt; &gt; On Wed, Feb 9, 2011 at 13:55, Jan Algermissen &lt;alger=\r\nmissen1971@...&gt; wrote:\n&gt; &gt;&gt; \n&gt; &gt;&gt; On Feb 9, 2011, at 7:45 PM, Jakob Strauch=\r\n wrote:\n&gt; &gt;&gt; \n&gt; &gt;&gt;&gt; \n&gt; &gt;&gt;&gt; What about the possible errors? Well, maybe i ha=\r\nve to expect all HTTP response codes.\n&gt; &gt;&gt; \n&gt; &gt;&gt; Yep! HTTP *is* the interfa=\r\nce. You have to expect all of it.\n&gt; &gt;&gt; \n&gt; &gt;&gt;&gt; At least the common one (404 =\r\netc.). In practice, only a smal subset of response codes will be supported.=\r\n\n&gt; &gt;&gt; \n&gt; &gt;&gt; Why? And besides - who knows what intermediaries sit in the mid=\r\ndle and produce responses the service developer never dreamed of?\n&gt; &gt;&gt; \n&gt; &gt;=\r\n&gt; \n&gt; &gt;&gt;&gt; But how do you tell the clients, which ones?\n&gt; &gt;&gt; \n&gt; &gt;&gt; RFC2616 te=\r\nlls them. There is no service specific description in a RESTful system.\n&gt; &gt;=\r\n&gt; \n&gt; &gt;&gt;&gt; Are response codes not part of the &quot;contract&quot;.\n&gt; &gt;&gt; \n&gt; &gt;&gt; The cont=\r\nract is HTTP. No more no less. That is what clients have to understand.\n&gt; &gt;=\r\n&gt; \n&gt; &gt;&gt; Jan\n&gt; &gt;&gt; \n&gt; &gt;&gt; P.S. However, in order to develop clients, you must =\r\nhave some sort of knowledge about the media types and link relations to exp=\r\nect. That is what the global registry (IANA) is for. If you apply REST insi=\r\nde the enterprise, an enterprise-global registry will suffice, meaning you =\r\ndo not necessarily have to register all your media types with IANA....but y=\r\nou can, of course.\n&gt; &gt;&gt; \n&gt; &gt;&gt; \n&gt; &gt;&gt; \n&gt; &gt;&gt; \n&gt; &gt;&gt; \n&gt; &gt;&gt; \n&gt; &gt;&gt;&gt; Or are even al=\r\nl response part implicit part of the contract?\n&gt; &gt;&gt;&gt; \n&gt; &gt;&gt;&gt; \n&gt; &gt;&gt;&gt; Jakob\n&gt; =\r\n&gt;&gt;&gt; \n&gt; &gt;&gt;&gt; \n&gt; &gt;&gt;&gt; \n&gt; &gt;&gt;&gt; \n&gt; &gt;&gt;&gt; \n&gt; &gt;&gt;&gt; ------------------------------------=\r\n\n&gt; &gt;&gt;&gt; \n&gt; &gt;&gt;&gt; Yahoo! Groups Links\n&gt; &gt;&gt;&gt; \n&gt; &gt;&gt;&gt; \n&gt; &gt;&gt;&gt; \n&gt; &gt;&gt; \n&gt; &gt;&gt; \n&gt; &gt;&gt; \n&gt; =\r\n&gt;&gt; ------------------------------------\n&gt; &gt;&gt; \n&gt; &gt;&gt; Yahoo! Groups Links\n&gt; &gt;&gt;=\r\n \n&gt; &gt;&gt; \n&gt; &gt;&gt; \n&gt; &gt;&gt;\n&gt;\n\n\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":69164307,"authorName":"mike amundsen","from":"&quot;mike amundsen&quot; &lt;mamund@...&gt;","profile":"mamund","replyTo":"SENDER","senderId":"fyv-FCSF8Km2lhWP48Le9yqBX8DCx-y4TEXHqqZPZKK_gdLkdXCnd5Ye_RTtDjh1vzk4vj-9KFy4s_u26xhVcmvUCuWacfVnOw","spamInfo":{"isSpam":false,"reason":"6"},"subject":"Re: [rest-discuss] REST vs POX","postDate":"1209496795","msgId":10668,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGI1NDhkZjY1MDgwNDI5MTIxOXU3ZmY0ODUwZW0yYzZlZGQ3MmI0NmMwNGZlQG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PDMwNzMzMy43MTAwMy5xbUB3ZWIyODMwMy5tYWlsLnVrbC55YWhvby5jb20+","referencesHeader":"PDMwNzMzMy43MTAwMy5xbUB3ZWIyODMwMy5tYWlsLnVrbC55YWhvby5jb20+"},"prevInTopic":10667,"nextInTopic":10671,"prevInTime":10667,"nextInTime":10669,"topicId":10667,"numMessagesInTopic":7,"msgSnippet":"Sean: While I m no expert in REST, here s how I approach the whole POX discussion: REST deals with addressing resources (pages, data docs, images, .etc) via","rawEmail":"Return-Path: &lt;mca@...&gt;\r\nX-Sender: mca@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 43473 invoked from network); 29 Apr 2008 19:19:56 -0000\r\nX-Received: from unknown (66.218.67.96)\n  by m46.grp.scd.yahoo.com with QMQP; 29 Apr 2008 19:19:56 -0000\r\nX-Received: from unknown (HELO yw-out-1718.google.com) (74.125.46.157)\n  by mta17.grp.scd.yahoo.com with SMTP; 29 Apr 2008 19:19:56 -0000\r\nX-Received: by yw-out-1718.google.com with SMTP id 5so78442ywr.68\n        for &lt;rest-discuss@yahoogroups.com&gt;; Tue, 29 Apr 2008 12:19:55 -0700 (PDT)\r\nX-Received: by 10.150.84.41 with SMTP id h41mr84989ybb.219.1209496795274;\n        Tue, 29 Apr 2008 12:19:55 -0700 (PDT)\r\nX-Received: by 10.150.199.17 with HTTP; Tue, 29 Apr 2008 12:19:55 -0700 (PDT)\r\nMessage-ID: &lt;b548df650804291219u7ff4850em2c6edd72b46c04fe@...&gt;\r\nDate: Tue, 29 Apr 2008 15:19:55 -0400\r\nTo: &quot;Sean Kennedy&quot; &lt;seandkennedy@...&gt;\r\nCc: &quot;Rest Discussion Group&quot; &lt;rest-discuss@yahoogroups.com&gt;\r\nIn-Reply-To: &lt;307333.71003.qm@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: 7bit\r\nContent-Disposition: inline\r\nReferences: &lt;307333.71003.qm@...&gt;\r\nX-Google-Sender-Auth: 75eeb03555abb78a\r\nX-eGroups-Msg-Info: 1:6:0:0:0\r\nFrom: &quot;mike amundsen&quot; &lt;mamund@...&gt;\r\nSubject: Re: [rest-discuss] REST vs POX\r\nX-Yahoo-Group-Post: member; u=69164307; y=pf6n4Dn84i76bRoweZSypjQ6EgmfUnlekpUsJPTGAbMR\r\nX-Yahoo-Profile: mamund\r\n\r\nSean:\n\nWhile I&#39;m no expert in REST, here&#39;s how I approach the whole POX discussion:\n\nREST deals with addressing resources (pages, data docs, images, .etc)\nvia URI, media-types, and HTTP methods. Well-constructed URI (unique\nfor each &quot;important&quot; resource) called with the proper HTTP method (GET\nfor reading, POST/PUT/DELETE when updating) will result in the most\nefficient network effects (GET on unique URI allows you to support\nvalidation and expiration caching).  Note that POX does not change any\nof this. Because POX  (text/xml) is a media-type.\n\nThe REST model encourages loose-coupling of the media-types for a\nresource. That means clients can make a request and tell the server\nwhat content-type they wish to receive. For example, AJAX-enabled\nclients can request JSON objects (GET /users/ accept:appliation/json)\nand non-scripted HTML clients can request static HTML (GET /users/\naccept:text/html), etc.  Media-types can also be used to send data to\nthe server (&quot;here&#39;s my new user record in Atom format&quot; = POST /users/\ncontent-type:application/atom+xml). Designing a POX-based server\ncouples the format with the URI. Clients can&#39;t request a JSON version.\nThey can only request text/xml. When clients update the server, they\nmust always send using &quot;text/xml.&quot;\n\nFinally, media-types also inform the client (and server) what&#39;s\n&quot;inside.&quot;  If a web browser client gets a resource marked &quot;text/html&quot;\nit knows to render the results including showing any links and/or\nforms properly. That&#39;s the fourth of Fielding&#39;s REST pillars -\nhypermedia. POX is not a *hypermedia* media-type. If the client is\njust required to display XML, then you&#39;re all set. However, if the\nclient is supposed to render a list of users with hyperlinks for each\none along with a form for adding a new user, POX does provide a way to\ntell this to the client. The client will need to know where to look\nfor links and how to create a form with the right fields ahead of time\n- at design time. This binds the client code to the POX document.\nChange the document and you might break the client (&quot;hey! what\nhappened to the user links?&quot;). Change the server and you might break\nthe client (&quot;what do you mean there is a new required field?&quot;). This\ndoes not happen with the text/html media-type since anytime the HTML\ndocument changes (new form fields, new links, etc.) the client renders\nit faithfully and prompts the user with the correct fields and links.\n\nSo...\nAs long as you don&#39;t foresee needing to support any other media-type\nexcept XML *and* you understand that changing the content of document\nor workflow on the server might require re-writing clients, then POX\ncan work. This can be acceptable for small, one-off, short-lived\nprojects. But long-term, involved projects that touch lots of clients\nmight not work well as POX implementations.\n\nMike Amundsen\n\n\nOn Tue, Apr 29, 2008 at 9:24 AM, Sean Kennedy &lt;seandkennedy@...&gt; wrote:\n&gt;\n&gt;\n&gt; Folks,\n&gt;       I work in academia and was recently talking to some former industry\n&gt; colleagues (financial people). I asked them how they implemented SOA and\n&gt; they said POX. They didnt know must about REST (something I intend to\n&gt; rectify!). They didnt like SOAP because there was too much XML involved and\n&gt; they dont use WSDL because &quot;we know where the service is&quot;. However, I found\n&gt; it difficult to argue the point of the advantages of REST versus POX...\n&gt;\n&gt; Sean.\n&gt;\n&gt;\n&gt;  ________________________________\n&gt;  Sent from Yahoo! Mail.\n&gt;  A Smarter Email. \n\n\n\n-- \nmca\nhttp://amundsen.com/blog/\n\n"}}
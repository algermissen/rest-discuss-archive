{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":201150942,"authorName":"Greg Young","from":"Greg Young &lt;gregoryyoung1@...&gt;","profile":"gumboismadeoffish","replyTo":"SENDER","senderId":"Ww89Lm4cIBow5Xpe4Hu_QJAimH5y6cXaCbLBqeC9hWD7hJ9aSEwTDypgssphhELpIe5NpbamiX2isAZN-4qGS9EYQOHwprH1sJ3o","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Content types and links","postDate":"1347004420","msgId":19048,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PENBQzlSUXRqLVNnNDZ1K1pkeThQeGNUSzJiME5nT0Y1UTlZc2UwQ09yTGI1alE3Uzc1QUBtYWlsLmdtYWlsLmNvbT4=","inReplyToHeader":"PDIwMTIwOTA2MjE1MjU4LmU4MDUzNTY0LmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","referencesHeader":"PENBQzlSUXRnSHc3OF83X1U2aVhkbXlfYlhRaEg0WUVnQUdtOSt0YU1vbVdKd0VyeDNOZ0BtYWlsLmdtYWlsLmNvbT4JPDIwMTIwOTA2MTY0NDI0Ljg5NTNmNDc2LmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPENBQzlSUXRpZ2NCZVctcG49V2Ffd1J0cjk5UjVWUDArSlRYLVl2cTQzaTc2aStTcXFxUUBtYWlsLmdtYWlsLmNvbT4JPDIwMTIwOTA2MjE1MjU4LmU4MDUzNTY0LmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4="},"prevInTopic":19047,"nextInTopic":19049,"prevInTime":19047,"nextInTime":19049,"topicId":19044,"numMessagesInTopic":8,"msgSnippet":"I don t know your requirements, but I d wait until the desired feature (Atom serialized as JSON) actually exists before implementing it, rather than trying to","rawEmail":"Return-Path: &lt;gregoryyoung1@...&gt;\r\nX-Sender: gregoryyoung1@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 55839 invoked from network); 7 Sep 2012 07:53:40 -0000\r\nX-Received: from unknown (98.137.34.45)\n  by m8.grp.sp2.yahoo.com with QMQP; 7 Sep 2012 07:53:40 -0000\r\nX-Received: from unknown (HELO mail-vb0-f41.google.com) (209.85.212.41)\n  by mta2.grp.sp2.yahoo.com with SMTP; 7 Sep 2012 07:53:40 -0000\r\nX-Received: by mail-vb0-f41.google.com with SMTP id v13so2831543vbk.28\n        for &lt;rest-discuss@yahoogroups.com&gt;; Fri, 07 Sep 2012 00:53:40 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.58.12.7 with SMTP id u7mr6660029veb.8.1347004420098; Fri, 07\n Sep 2012 00:53:40 -0700 (PDT)\r\nX-Received: by 10.58.79.172 with HTTP; Fri, 7 Sep 2012 00:53:40 -0700 (PDT)\r\nIn-Reply-To: &lt;20120906215258.e8053564.eric@...&gt;\r\nReferences: &lt;CAC9RQtgHw78_7_U6iXdmy_bXQhH4YEgAGm9+taMomWJwErx3Ng@...&gt;\n\t&lt;20120906164424.8953f476.eric@...&gt;\n\t&lt;CAC9RQtigcBeW-pn=Wa_wRtr99R5VP0+JTX-Yvq43i76i+SqqqQ@...&gt;\n\t&lt;20120906215258.e8053564.eric@...&gt;\r\nDate: Fri, 7 Sep 2012 00:53:40 -0700\r\nMessage-ID: &lt;CAC9RQtj-Sg46u+Zdy8PxcTK2b0NgOF5Q9Yse0COrLb5jQ7S75A@...&gt;\r\nTo: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nCc: Rest List &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Greg Young &lt;gregoryyoung1@...&gt;\r\nSubject: Re: [rest-discuss] Content types and links\r\nX-Yahoo-Group-Post: member; u=201150942; y=rrbdUEBAe2BIW8pGT0-G39KEqat3ma7-nzKPBaz8YgFakXO3b8tefLct4jg\r\nX-Yahoo-Profile: gumboismadeoffish\r\n\r\n&quot;I don&#39;t know your requirements, but I&#39;d wait until the desired feature\n(At=\r\nom serialized as JSON) actually exists before implementing it, rather\nthan =\r\ntrying to hit a moving target.  Once application/atom+json is\nnailed down, =\r\nit&#39;s easy enough to add in support to please client\ndevelopers, without the=\r\n extra complexity of supporting legacy code.\nClient developers can then rem=\r\nove their transformation layer, and change\ntheir Accept: header to request =\r\natom+json instead of atom+xml.&quot;\n\nThis is essentially what we do internally =\r\nto support it. Default is normal atom.\n\nThere are of course trade offs. I l=\r\nike the x.json to at least make it\nexplicit what they are risking if they d=\r\necide to use it.\n\nOn Thu, Sep 6, 2012 at 8:52 PM, Eric J. Bowman &lt;eric@biso=\r\nnsystems.net&gt; wrote:\n&gt; Greg Young wrote:\n&gt;&gt;\n&gt;&gt; We have sat on the fence for=\r\n a while about how to handle content type\n&gt;&gt; here as there is no &#39;good&#39; ans=\r\nwer. If I do as x. I break tools. If I\n&gt;&gt; don&#39;t I break &quot;rest&quot;. I have stil=\r\nl not made a decision on how to\n&gt;&gt; handle this.\n&gt;&gt;\n&gt;\n&gt; Decide whatever you =\r\nwant, provided you understand the ramifications.\n&gt; Tools will eventually gr=\r\nok the +json media type suffix.  REST is about\n&gt; long-term design, there&#39;s =\r\nnothing wrong with having to wait a few years\n&gt; for standardization to catc=\r\nh up. When it does you&#39;ll hopefully not have\n&gt; painted yourself into a lega=\r\ncy-support corner, by failing to anticipate\n&gt; change or planning how to acc=\r\nommodate it when it comes, in the design\n&gt; phase.\n&gt;\n&gt;&gt;\n&gt;&gt; The interesting b=\r\nit to me was if I am in that format (and we assume\n&gt;&gt; you are coming to me =\r\nto read a feed)  do the others have value?\n&gt;&gt;\n&gt;\n&gt; I don&#39;t think there&#39;s muc=\r\nh value to having multiple serializations,\n&gt; seems more like something folk=\r\ns do in order to check boxes for feature\n&gt; support, mostly.  If you&#39;re runn=\r\ning an origin server and offering a\n&gt; JSON serialization for Atom content, =\r\nanyone building a client to consume\n&gt; that JSON will have their client brea=\r\nk if/when you change syntax to\n&gt; support a standardized solution, due to ti=\r\nght coupling -- which isn&#39;t an\n&gt; issue when standard media types are adhere=\r\nd to.\n&gt;\n&gt; Whereas, if you only offer Atom, client developers can always add=\r\n a\n&gt; layer (using, say, XSLT) which transforms your Atom into their desired=\r\n\n&gt; JSON.  If/when a standardized solution to that problem evolves, the\n&gt; cl=\r\nient developer can decide whether or not to support it -- nothing\n&gt; breaks,=\r\n so you&#39;re not in a position where you need to support legacy\n&gt; code by add=\r\ning conneg on application/x.atom+json vs. application/atom+\n&gt; json, which i=\r\nncreases the complexity of your system.\n&gt;\n&gt; I don&#39;t know your requirements,=\r\n but I&#39;d wait until the desired feature\n&gt; (Atom serialized as JSON) actuall=\r\ny exists before implementing it, rather\n&gt; than trying to hit a moving targe=\r\nt.  Once application/atom+json is\n&gt; nailed down, it&#39;s easy enough to add in=\r\n support to please client\n&gt; developers, without the extra complexity of sup=\r\nporting legacy code.\n&gt; Client developers can then remove their transformati=\r\non layer, and change\n&gt; their Accept: header to request atom+json instead of=\r\n atom+xml.\n&gt;\n&gt; In the meantime, there are benefits to be had from serving A=\r\ntom as Atom,\n&gt; which are a long ways off for Atom serialized as JSON.  Inte=\r\nrmediaries\n&gt; aren&#39;t just caches, those with knowledge of Atom can prefetch =\r\nDNS\n&gt; lookups, or atom:entry documents, or images etc. while third-party\n&gt; =\r\nsystems (i.e. Google) know how to handle (index, subscribe to) your\n&gt; data.=\r\n  As a REST true believer, I don&#39;t see the benefit of trading away\n&gt; this g=\r\nlobal, ubiquitous support of any system for the sake of easier\n&gt; developmen=\r\nt of tightly-coupled clients.  Or, for byte shaving, which is\n&gt; a moot poin=\r\nt when compression and caching are considered.\n&gt;\n&gt; http://tech.groups.yahoo=\r\n.com/group/rest-discuss/message/8873\n&gt;\n&gt; Put another way, REST enables sere=\r\nndipitous re-use by all sorts of apps\n&gt; which have no knowledge of your sys=\r\ntem specifics.  Why give that up to\n&gt; support the comparatively tiny number=\r\n of applications developed\n&gt; specifically for your system?  OK, sure, you c=\r\nan use conneg, but if the\n&gt; tiny number of purpose-built clients accounts f=\r\nor most of your users\n&gt; you&#39;re just shooting yourself in the foot -- their =\r\nusage won&#39;t be\n&gt; accelerated via serendipitous re-use, and will degrade cac=\r\nhe efficiency\n&gt; for any ubiquitous-media-type representations you&#39;re servin=\r\ng.\n&gt;\n&gt; I think when Roy says &quot;engineer for serendipity&quot; it applies to runti=\r\nme,\n&gt; but is commonly misinterpreted to apply to design-time, which has led=\r\n\n&gt; lots of folks to implement multiple serializations.  I don&#39;t think Roy\n&gt;=\r\n means &quot;make it easier for third parties to write clients&quot; so much as\n&gt; &quot;su=\r\npport those clients already existing as part of the deployed\n&gt; infrastructu=\r\nre&quot; because that&#39;s what allows a system to truly scale.  By\n&gt; doing so, you=\r\nr system will automatically support any new clients added\n&gt; to the deployed=\r\n infrastructure, which are based on the same standards\n&gt; you&#39;ve adhered to.=\r\n  You don&#39;t need to know about them, and they don&#39;t\n&gt; need to know about yo=\r\nu, which sounds pretty serendipitous to me.\n&gt;\n&gt; By clients, I mean both cli=\r\nent connectors on intermediaries, and such\n&gt; things as googlebot.  Target t=\r\nhose by using ubiquitous media types which\n&gt; properly describe the linking/=\r\nembedding semantics of your data.\n&gt;\n&gt; -Eric\n\n\n\n-- \nLe doute n&#39;est pas une c=\r\nondition agr=E9able, mais la certitude est absurde.\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":88294102,"authorName":"John Panzer","from":"John Panzer &lt;jpanzer@...&gt;","profile":"zwyrthrop","replyTo":"SENDER","senderId":"pt7lPWu6OQY4igYSVuZFfCDU1uQrpMSxNe5lBXX_ZY6SqE5sOJy6Roc9ANODZunV9RWiJWBfRvY9tKSevOBTalZ1lMY","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] AOL and REST?","postDate":"1167771469","msgId":7388,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQ1OUFDNzRELjMwNDAwMDdAYW9sLm5ldD4=","inReplyToHeader":"PDdjZDhlMDkzMDYxMjMwMTIxM3cxNWM3NGExOHU5NTRlZTFlMzVmMmZkMjE5QG1haWwuZ21haWwuY29tPg==","referencesHeader":"PDg3cHNhNHhwOGQuZnNmQHRhcHNlbGxmZXJyaWVyLmNvLnVrPiA8NDU5NjkzMTEuODA5MDIwNUBhb2wubmV0PiA8N2NkOGUwOTMwNjEyMzAxMjEzdzE1Yzc0YTE4dTk1NGVlMWUzNWYyZmQyMTlAbWFpbC5nbWFpbC5jb20+"},"prevInTopic":7319,"nextInTopic":7389,"prevInTime":7387,"nextInTime":7389,"topicId":7292,"numMessagesInTopic":20,"msgSnippet":"Mike, Thanks for your comments.  A couple of followup questions for the list: ... The application ID is actually a separate thing from the user ID and is more","rawEmail":"Return-Path: &lt;jpanzer@...&gt;\r\nX-Sender: jpanzer@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 6026 invoked from network); 2 Jan 2007 21:41:52 -0000\r\nReceived: from unknown (66.218.66.166)\n  by m30.grp.scd.yahoo.com with QMQP; 2 Jan 2007 21:41:52 -0000\r\nReceived: from unknown (HELO mcom.com) (64.236.137.26)\n  by mta5.grp.scd.yahoo.com with SMTP; 2 Jan 2007 21:41:47 -0000\r\nReceived: from areophany.nscp.aoltw.net (areophany.nscp.aoltw.net [10.169.155.201])\n\tby mcom.com (8.10.0/8.10.0) with ESMTP id l02Kw8d15819;\n\tTue, 2 Jan 2007 12:58:08 -0800 (PST)\r\nReceived: from localhost (localhost [127.0.0.1])\n\tby areophany.nscp.aoltw.net (Postfix) with ESMTP id C1672F03D0;\n\tTue,  2 Jan 2007 12:58:07 -0800 (PST)\r\nReceived: from areophany.nscp.aoltw.net ([127.0.0.1])\n by localhost (localhost [127.0.0.1]) (amavisd-new, port 10024) with ESMTP\n id 06371-08; Tue,  2 Jan 2007 12:57:52 -0800 (PST)\r\nReceived: from [10.169.155.201] (areophany.nscp.aoltw.net [10.169.155.201])\n\tby areophany.nscp.aoltw.net (Postfix) with ESMTP id 51DF8F03B8;\n\tTue,  2 Jan 2007 12:57:49 -0800 (PST)\r\nMessage-ID: &lt;459AC74D.3040007@...&gt;\r\nDate: Tue, 02 Jan 2007 12:57:49 -0800\r\nUser-Agent: Thunderbird 1.5.0.7 (Macintosh/20060909)\r\nMIME-Version: 1.0\r\nTo: Mike Dierken &lt;dierken@...&gt;\r\nCc: Nic James Ferrier &lt;nferrier@...&gt;,\n   rest-discuss@yahoogroups.com\r\nReferences: &lt;87psa4xp8d.fsf@...&gt; &lt;45969311.8090205@...&gt; &lt;7cd8e0930612301213w15c74a18u954ee1e35f2fd219@...&gt;\r\nIn-Reply-To: &lt;7cd8e0930612301213w15c74a18u954ee1e35f2fd219@...&gt;\r\nContent-Type: multipart/alternative;\n boundary=&quot;------------010307080206080801010902&quot;\r\nX-Spam-Status: No, hits=-1.247 tagged_above=-999 required=5 tests=ALL_TRUSTED,\n AWL, HTML_20_30, HTML_MESSAGE\r\nX-Spam-Level: \r\nX-eGroups-Msg-Info: 1:0:0:0\r\nFrom: John Panzer &lt;jpanzer@...&gt;\r\nSubject: Re: [rest-discuss] AOL and REST?\r\nX-Yahoo-Group-Post: member; u=88294102; y=ZO1AvlDZ8k741I9pixvW-qRGYUrUdQmVNpduu6uONp4G885D\r\nX-Yahoo-Profile: zwyrthrop\r\n\r\n\r\n--------------010307080206080801010902\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\n\r\nMike,\n\nThanks for your comments.  A couple of followup questions for the list:\n\nMike Dierken wrote:\n&gt; First, it looks like some folks spent a good deal of time writing\n&gt; extensive documentation - that&#39;s very nice.\n&gt; Here are a couple comments:\n&gt;\n&gt; 1 Application ID\n&gt; The application-id is placed in the URI, but it does not appear to\n&gt; actually change what data is being accessed - it&#39;s not part of a data\n&gt; identifier. An alternative would be to use the Authorization request\n&gt; header (where username/passwords normally go) in order to specify the\n&gt; application ID.\n&gt;  Pro: closer to protocol specification for authentication\n&gt;  Pro: common URI for a resource across applications provide more\n&gt; chances for caching, hyperlink references, etc.\n&gt;  Con: logging/processing of requests on the server would need to\n&gt; examine more than just the URI (hopefully this isn&#39;t a challenge for\n&gt; your framework)\n&gt;   \nThe application ID is actually a separate thing from the user ID and is \nmore parallel to User-Agent.  I think the user credentials would be the \ninformation passed in the Authorization: header, no?\n\nMotivation: The application ID is however related to authorization; it&#39;s \nthe identity of a third party which is leveraging this API on behalf of \nan actual user.  For example a mashup site would have a unique \napplication ID.  This lets us do tracking of who&#39;s using the APIs, and \nalso lets us do rate limiting if necessary (say, if someone wrote a \nvirus and attempted a DDOS attack -- obtaining an application ID is a \nmanual process).  It&#39;s not intended to really be a secure method of \nauthorization, any more than User-Agent is, but useful nonetheless.\n&gt; ...\n&gt;\n&gt; 3 User Sign In\n&gt; Considering security and privacy of end-users is very good. However,\n&gt; the approach of &#39;signing in&#39; seems odd, complex and not at all a\n&gt; service API. Specifically, the authentication specification describes\n&gt; only how to redirect a user&#39;s web browser to a particular page. For\n&gt; non-browser based applications, this would be unhelpful.\n&gt; Essentially, the user&#39;s username/password is submitted via HTTPS and a\n&gt; response has a Location: header with a URI with an auth=[something]\n&gt; query term. That auth value is then used to generate a token that\n&gt; (temporarily) identifies the user, which is then later used in other\n&gt; user-specific requests.\n&gt;   \nYes, authentication is a problem.  I believe the above is a consequence \nof wanting to be able to control what the end user sees during \nauthentication, and up to the point of getting an auth token is intended \nto be the same for all AOL APIs.   For example, some applications or \nuser accounts may require two factor authentication, or captcha \nchallenge.  (I believe that GData does something very similar.)  There \nare also complex issues involved with signing out and timing out.  \nFinally, there is also an intent to be able to let a user control what \ndata is provided to different services (identified by application ID, \nagain) -- something do-able with a token but not with username/password \ncombinations.  The latter seems to be the current default for composing \nweb services but it&#39;s not a very good one.  (OpenID is another potential \noption but of course that also involves a round trip through a web page.)\n\nAuthentication is a very challenging topic and I think it&#39;s one that is \na going to be a gating factor in deployment of more sophisticated web \nservices of all kinds.  Note that the most used web services today don&#39;t \nrequire authentication, and I think that&#39;s partly because there isn&#39;t a \nreally good answer for this right now.  Any suggestions?\n\n-- \nAbstractioneer &lt;http://feeds.feedburner.com/aol/SzHO&gt;John Panzer\nSystem Architect\nhttp://abstractioneer.org\n\r\n--------------010307080206080801010902\r\nContent-Type: multipart/related;\n boundary=&quot;------------080002010609000708040600&quot;\r\n\r\n\r\n--------------080002010609000708040600\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: 7bit\r\n\r\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;meta content=&quot;text/html;charset=ISO-8859-1&quot; http-equiv=&quot;Content-Type&quot;&gt;\n&lt;/head&gt;\n&lt;body bgcolor=&quot;#ffffff&quot; text=&quot;#000000&quot;&gt;\nMike,&lt;br&gt;\n&lt;br&gt;\nThanks for your comments.&nbsp; A couple of followup questions for the list:&lt;br&gt;\n&lt;br&gt;\nMike Dierken wrote:\n&lt;blockquote\n cite=&quot;mid7cd8e0930612301213w15c74a18u954ee1e35f2fd219@...&quot;\n type=&quot;cite&quot;&gt;\n  &lt;pre wrap=&quot;&quot;&gt;First, it looks like some folks spent a good deal of time writing\nextensive documentation - that&#39;s very nice.\nHere are a couple comments:\n\n1 Application ID\nThe application-id is placed in the URI, but it does not appear to\nactually change what data is being accessed - it&#39;s not part of a data\nidentifier. An alternative would be to use the Authorization request\nheader (where username/passwords normally go) in order to specify the\napplication ID.\n Pro: closer to protocol specification for authentication\n Pro: common URI for a resource across applications provide more\nchances for caching, hyperlink references, etc.\n Con: logging/processing of requests on the server would need to\nexamine more than just the URI (hopefully this isn&#39;t a challenge for\nyour framework)\n  &lt;/pre&gt;\n&lt;/blockquote&gt;\nThe application ID is actually a separate thing from the user ID and is\nmore parallel to User-Agent.&nbsp; I think the user credentials would be the\ninformation passed in the Authorization: header, no?&lt;br&gt;\n&lt;br&gt;\nMotivation: The application ID is however related to authorization;\nit&#39;s the identity of a third party which is leveraging this API on\nbehalf of an actual user.&nbsp; For example a mashup site would have a\nunique application ID.&nbsp; This lets us do tracking of who&#39;s using the\nAPIs, and also lets us do rate limiting if necessary (say, if someone\nwrote a virus and attempted a DDOS attack -- obtaining an application\nID is a manual process).&nbsp; It&#39;s not intended to really be a secure\nmethod of authorization, any more than User-Agent is, but useful\nnonetheless.&lt;br&gt;\n&lt;blockquote\n cite=&quot;mid7cd8e0930612301213w15c74a18u954ee1e35f2fd219@...&quot;\n type=&quot;cite&quot;&gt;\n  &lt;pre wrap=&quot;&quot;&gt;...\n\n3 User Sign In\nConsidering security and privacy of end-users is very good. However,\nthe approach of &#39;signing in&#39; seems odd, complex and not at all a\nservice API. Specifically, the authentication specification describes\nonly how to redirect a user&#39;s web browser to a particular page. For\nnon-browser based applications, this would be unhelpful.\nEssentially, the user&#39;s username/password is submitted via HTTPS and a\nresponse has a Location: header with a URI with an auth=[something]\nquery term. That auth value is then used to generate a token that\n(temporarily) identifies the user, which is then later used in other\nuser-specific requests.\n  &lt;/pre&gt;\n&lt;/blockquote&gt;\nYes, authentication is a problem.&nbsp; I believe the above is a consequence\nof wanting to be able to control what the end user sees during\nauthentication, and up to the point of getting an auth token is\nintended to be the same for all AOL APIs. &nbsp; For example, some\napplications or user accounts may require two factor authentication, or\ncaptcha challenge.&nbsp; (I believe that GData does something very\nsimilar.)&nbsp; There are also complex issues involved with signing out and\ntiming out.&nbsp; Finally, there is also an intent to be able to let a user\ncontrol what data is provided to different services (identified by\napplication ID, again) -- something do-able with a token but not with\nusername/password combinations.&nbsp; The latter seems to be the current\ndefault for composing web services but it&#39;s not a very good one.&nbsp;\n(OpenID is another potential option but of course that also involves a\nround trip through a web page.)&lt;br&gt;\n&lt;br&gt;\nAuthentication is a very challenging topic and I think it&#39;s one that is\na going to be a gating factor in deployment of more sophisticated web\nservices of all kinds.&nbsp; Note that the most used web services today\ndon&#39;t require authentication, and I think that&#39;s partly because there\nisn&#39;t a really good answer for this right now.&nbsp; Any suggestions?&lt;br&gt;\n&lt;br&gt;\n&lt;div class=&quot;moz-signature&quot;&gt;-- &lt;br&gt;\n&lt;a href=&quot;http://feeds.feedburner.com/aol/SzHO&quot;&gt;&lt;img\n src=&quot;cid:part1.09050806.02050805@...&quot;\n style=&quot;border: 0pt none ; float: right;&quot; alt=&quot;Abstractioneer&quot;&gt;&lt;/a&gt;John\nPanzer&lt;br&gt;\nSystem Architect&lt;br&gt;\n&lt;a class=&quot;moz-txt-link-freetext&quot; href=&quot;http://abstractioneer.org&quot;&gt;http://abstractioneer.org&lt;/a&gt;&lt;br&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\r\n--------------080002010609000708040600\r\nContent-Type: image/gif;\n name=&quot;SzHO.gif&quot;\r\nContent-ID: &lt;part1.09050806.02050805@...&gt;\r\nContent-Disposition: inline;\n filename=&quot;SzHO.gif&quot;\r\n\r\n[ Attachment content not displayed ]\r\n--------------080002010609000708040600--\r\n\n\r\n--------------010307080206080801010902--\r\n\n"}}
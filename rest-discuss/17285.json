{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"GSkutC_qkZHLgNSAhJr3r3eX48aSfO2AC-vL2UULKOQYYrDdiNZWprGekViYLssDArQVP3zKs_5Bpc8KQl59VhHY-qRBBD9PoutarjzP8g","spamInfo":{"isSpam":false,"reason":"6"},"subject":"Re: [rest-discuss] Why SPARQL endpoints aren&#39;t even remotely RESTful.","postDate":"1296674587","msgId":17285,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMTEwMjAyMTIyMzA3LjM0ODZjMGNlLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","inReplyToHeader":"PDRENDk4MkU0LjMwNzA2MDJAZWxia2xhbmcubmV0Pg==","referencesHeader":"PDIwMTEwMjAyMDc0MDI5LmZhYzgyMTlhLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPDRENDk4MkU0LjMwNzA2MDJAZWxia2xhbmcubmV0Pg=="},"prevInTopic":17284,"nextInTopic":17286,"prevInTime":17284,"nextInTime":17286,"topicId":17281,"numMessagesInTopic":22,"msgSnippet":"... You re welcome.  As per usual, nobody has to read my long-winded explanations, but it does help me to write them... ... The reason this causes","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 20983 invoked from network); 2 Feb 2011 19:23:24 -0000\r\nX-Received: from unknown (98.137.34.46)\n  by m4.grp.sp2.yahoo.com with QMQP; 2 Feb 2011 19:23:24 -0000\r\nX-Received: from unknown (HELO mxout-08.mxes.net) (216.86.168.183)\n  by mta3.grp.sp2.yahoo.com with SMTP; 2 Feb 2011 19:23:23 -0000\r\nX-Received: from bigbison (unknown [65.117.211.162])\n\t(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))\n\t(No client certificate requested)\n\tby smtp.mxes.net (Postfix) with ESMTPSA id 4D8C7509DB;\n\tWed,  2 Feb 2011 14:23:23 -0500 (EST)\r\nDate: Wed, 2 Feb 2011 12:23:07 -0700\r\nTo: Bob Ferris &lt;zazi@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nMessage-Id: &lt;20110202122307.3486c0ce.eric@...&gt;\r\nIn-Reply-To: &lt;4D4982E4.3070602@...&gt;\r\nReferences: &lt;20110202074029.fac8219a.eric@...&gt;\n\t&lt;4D4982E4.3070602@...&gt;\r\nOrganization: Bison Systems Corporation\r\nX-Mailer: Sylpheed 3.0.3 (GTK+ 2.10.14; i686-pc-mingw32)\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\nX-eGroups-Msg-Info: 1:6:0:0:0\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nSubject: Re: [rest-discuss] Why SPARQL endpoints aren&#39;t even remotely\n RESTful.\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\nBob Ferris wrote:\n&gt; \n&gt; thanks a lot for clarification the SPARQL-to-REST re=\r\nlation.\n&gt;\n\nYou&#39;re welcome.  As per usual, nobody has to read my long-winded=\r\n\nexplanations, but it does help me to write them...\n\n&gt;\n&gt; The thing I had an=\r\nd have always in mind was, of course, a more\n&gt; advanced query interface tha=\r\nn a simple text box (so, sorry that this\n&gt; obviously causes misinterpretati=\r\nons).\n&gt;\n\nThe reason this causes misinterpretation, is that the nature of th=\r\ne\nhypertext controls makes all the difference in the world as to whether\nor=\r\n not an API is RESTful.  I&#39;ve not seen an example of a SPARQL\nendpoint that=\r\n isn&#39;t just a textarea, so I assume that&#39;s what&#39;s meant by\nSPARQL endpoint.=\r\n  &quot;RESTful SPARQL API&quot; is non-sequitir to me, because\nif I were to implemen=\r\nt SPARQL, none of its syntax would leak into the\nURIs or the representation=\r\ns (except to return application/sparql-result\n+xml if negotiated for) -- I&#39;=\r\nd have an RDF-aware &quot;RESTful search API&quot;.\n\n&gt;\n&gt; So I can conclude that SPARQ=\r\nL endpoint/SPARQL query interface at\n&gt; least al=E1 the advanced_search of G=\r\noogle can be RESTful.\n&gt;\n\nRight, the problem isn&#39;t creating an interface whi=\r\nch *accepts* SPARQL\nsyntax; the problem is creating an interface *for* SPAR=\r\nQL syntax.  The\ndrawback is that it takes some more work to realize the con=\r\ncept of\ncross-site queries, than just knowing the SPARQL endpoint address f=\r\nor\neach site.\n\nA hypertext control for the number of results to return, mig=\r\nht be\nmarked up differently on each site.  RDFa allows those controls to\nde=\r\nscribe themselves using a common vocabulary (which doesn&#39;t yet exist)\nfor g=\r\nathering search data (including locations and dates).  Manipulating\nthe con=\r\ntrols depends on the user-agent&#39;s understanding of that\nvocabulary, plus wh=\r\natever forms language is used.\n\nNote that when I mention RDFa, I&#39;m talking =\r\nabout a layer above REST\nthat&#39;s completely optional.  My goal is to have th=\r\ne same API for humans\nand machines, and I believe RDFa allows one represent=\r\nation to service\nboth types of user.  Anyway, RESTful search APIs (regardle=\r\nss of the\ntechnologies used to implement) with RDFa seems a more logical wa=\r\ny\nforward to me, than SPARQL endpoints (which I have a gut feeling will\nlea=\r\nd to &quot;SPARQL injection&quot; attacks, too much &quot;surface area&quot; for me).\n\n&gt;\n&gt; I di=\r\ndn&#39;t think that needs a separate (query and/or) result media\n&gt; type, since =\r\none is able to serialize such results also into\n&gt; representation formats of=\r\n RDF e.g., RDFa.\n&gt;\n\nYou&#39;re right.  The SPARQL media types may come in handy=\r\n in some cases,\nwhile being irrelevant in others, but all achieving the com=\r\nmon goal of\nreturning the same list of links for the same query.  Meaning t=\r\nhere&#39;s\nmore than one format for representing the same resource, which is wh=\r\ny\nwe have conneg; and that SPARQL media types aren&#39;t a prerequisite for a\nR=\r\nESTful API which happens to use SPARQL on the backend.\n\n&gt;\n&gt; Even an interfa=\r\nce like that of the advanced_search of Google isn&#39;t\n&gt; quite comfortable, or=\r\n?\n&gt;\n\nI chose Google as an example, to compare and contrast the homepage\nint=\r\nerface with the advanced interface.  It could be more user-friendly,\nsure, =\r\nbut the point is that I&#39;ve learned how to formulate queries\nwithout that in=\r\nterface, by using that interface -- it&#39;s a self-\ndocumenting API.  I couldn=\r\n&#39;t have learned Google search syntax from the\nhomepage.  SPARQL endpoints, =\r\nas they currently exist, don&#39;t inform me\nhow to formulate queries by using =\r\nthat interface (I&#39;m expected to\nalready know).\n\n&gt;\n&gt; I rather can imagine a =\r\nkind of faceted browsing interface to\n&gt; formulate a query, where the end us=\r\ner didn&#39;t really get in touch with\n&gt; the statements behind.\n&gt;\n\nRight; abstr=\r\nacting away the implementation details behind the interface\nis kinda the po=\r\nint.  Or, &quot;cool URIs don&#39;t change&quot; (although URI design\nis only orthogonall=\r\ny related to REST).  Searching a collection of cat\nphotos for cats who look=\r\n like Hitler, is a goal.  If the implementation\nis a SPARQL endpoint which =\r\nsimply urlencodes the query, what happens to\nthat URI when the system upgra=\r\ndes from SPARQL to (hypothetical) GLITR?\n\nWhereas abstracting away the spec=\r\nifics of SPARQL allows the backend to\nbe changed, to construct a GLITR quer=\r\ny from the same request instead of\na SPARQL query -- without changing the h=\r\nypertext, even, assuming a\ndetailed interface (as opposed to &#39;enter SPARQL =\r\nquery here&#39;) and\n(optionally) common search-form vocabulary.  Maybe GLITR h=\r\nas more\noptions, but the data I&#39;m looking for needs to be collected regardl=\r\ness\nof search language, so the API for collecting that data shouldn&#39;t need\n=\r\nto be changed -- aka &quot;REST APIs don&#39;t need versioning.&quot;\n\nDesign for longevi=\r\nty -- any implementation detail can be swapped out\nwithout breaking the sys=\r\ntem, provided it&#39;s been properly decoupled.\nCoupling your URIs to your back=\r\n-end query syntax, locks you into that\nchoice (unless you figure out some h=\r\nairy redirection algorithms).\nImplementation details, like SPARQL, should n=\r\not impact your URI\nallocation scheme.\n\n&gt;\n&gt; This depends of course on the sp=\r\necific application domain, but\n&gt; generally one often needs such contexts li=\r\nke time or place. So\n&gt; selecting an appropriated time interval on a timelin=\r\ne interface, or\n&gt; selecting a place/area on a world map interface might be =\r\nbetter\n&gt; opportunity, or?\n&gt; \n\nYes.  Assume the collection of cat photos inc=\r\nludes birth/death dates.\nXForms processors include a nifty pop-up calendar =\r\ndate-picker for any\nfield that&#39;s XSD-typed as a date.  By manipulating the =\r\nform, I discover\nthe URI which returns &quot;all living Hitler cats&quot; based on ch=\r\noosing\ntoday&#39;s date and entering &quot;hitler&quot; as a keyword, etc.  Or, I can jus=\r\nt\nenter a date manually -- the nature of the control isn&#39;t important,\nonly =\r\nthe nature of the data it collects.\n\nThis self-documenting API has now give=\r\nn me all the information required\nto create a dynamic resource on an unrela=\r\nted domain (serendipitous re-\nuse), i.e. a dynamic &quot;all living Hitler cats&quot;=\r\n Web page which uses Code-\non-Demand to get the current date from the user-=\r\nagent, and uses that\ndate to build the query URI.  I can also learn, by dri=\r\nving the form, how\nto highlight applicable cats on their birthdays.\n\nWhy sh=\r\nould I have to re-code that page every couple of years when the\nservice cha=\r\nnges technology and breaks its old URIs?  While &quot;cool URIs\ndon&#39;t change&quot; is=\r\nn&#39;t a constraint, following REST does tend to get you\nmostly there by encap=\r\nsulating whatever back-end technologies are used,\ninstead of wearing them o=\r\nn the ol&#39; sleeve.\n\nAutomating a client to search multiple collections of ca=\r\nt photos is a\nproblem, what I&#39;m saying is that the solution needs to be app=\r\nroached\nfrom the perspective of the hypertext constraint (being of the Web)=\r\n,\nrather than the perspective of a common URI allocation scheme based on\na =\r\nquery language (fighting the Web).  The problem of mapping hypertext\ncontro=\r\nls into query languages, shouldn&#39;t involve the URI as a solution.\n\n-Eric\n\n"}}
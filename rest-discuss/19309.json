{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":460230079,"authorName":"Brian Craft","from":"Brian Craft &lt;craft.brian@...&gt;","profile":"firstbakingbook","replyTo":"SENDER","senderId":"9QOOfvElaEITL8U8mPcWIvG3XguONwM2NAzdL3sxXQGuA058mNQFjnEpn1zzRHf1qgv5LiKU7xQQCPyvp1O-AFBiydc9EwRKrJg","spamInfo":{"isSpam":false,"reason":"12"},"subject":"the meaning of stateless","postDate":"1366468428","msgId":19309,"canDelete":false,"contentTrasformed":false,"systemMessage":true,"headers":{"messageIdInHeader":"PENBR1ZiWEw2X09IT2hPVFMwa2YwU0tjV0EtPXpLWWJLTFFXVldmQm9US09tZzd2WHhFQUBtYWlsLmdtYWlsLmNvbT4="},"prevInTopic":0,"nextInTopic":19310,"prevInTime":19308,"nextInTime":19310,"topicId":19309,"numMessagesInTopic":86,"msgSnippet":"I don t understand how the word stateless is being used in REST. Obviously POST and PUT create state on the server. Obviously, requests after a state change","rawEmail":"Return-Path: &lt;craft.brian@...&gt;\r\nReceived: (qmail 19444 invoked from network); 20 Apr 2013 20:33:25 -0000\r\nReceived: from unknown (10.193.84.168)\n  by m7.grp.bf1.yahoo.com with QMQP; 20 Apr 2013 20:33:25 -0000\r\nReceived: from unknown (HELO ng11-ip2.bullet.mail.bf1.yahoo.com) (98.139.165.88)\n  by mta6.grp.bf1.yahoo.com with SMTP; 20 Apr 2013 20:33:25 -0000\r\nDKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=yahoogroups.com; s=echoe; t=1366490005; bh=tMirJai8t6ASZNvoc2iN6pOOOiKK4IjwWWmeHomU1t0=; h=Received:Received:X-Sender:X-Apparently-To:X-Received:X-Received:X-Received:X-Received:MIME-Version:X-Received:X-Received:Date:X-Google-Sender-Auth:Message-ID:To:Content-Type:X-Originating-IP:X-eGroups-Msg-Info:X-eGroups-From:From:Subject:X-Yahoo-Group-Post:X-Yahoo-Profile:X-YGroups-SubInfo:Sender:X-Yahoo-Newman-Property:X-eGroups-Approved-By:X-eGroups-Auth; b=H69TKZuNsdmbByiMtjAvITvuJ+YopZvG34LisGTD+BUEzzT1Kh3Egg029v7Sec7BmcyzxyJXEj5ndcuLk504seot0iPjKtZTm/0jr5WbMgMMgnhVFdicpyn6J+TziV2o4mzuOC7hZe/sHj6CEG/2X/tVC1a7E4ntz5snzGTB+18=\r\nReceived: from [98.139.164.126] by ng11.bullet.mail.bf1.yahoo.com with NNFMP; 20 Apr 2013 20:33:25 -0000\r\nReceived: from [10.193.94.110] by tg7.bullet.mail.bf1.yahoo.com with NNFMP; 20 Apr 2013 20:33:25 -0000\r\nX-Sender: craft.brian@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 3302 invoked from network); 20 Apr 2013 14:33:49 -0000\r\nX-Received: from unknown (10.193.84.131)\n  by m8.grp.bf1.yahoo.com with QMQP; 20 Apr 2013 14:33:49 -0000\r\nX-Received: from unknown (HELO mail-qe0-f45.google.com) (209.85.128.45)\n  by mta4.grp.bf1.yahoo.com with SMTP; 20 Apr 2013 14:33:49 -0000\r\nX-Received: by mail-qe0-f45.google.com with SMTP id 1so3294589qee.4\n        for &lt;rest-discuss@yahoogroups.com&gt;; Sat, 20 Apr 2013 07:33:49 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.49.81.135 with SMTP id a7mr19841030qey.10.1366468428978;\n Sat, 20 Apr 2013 07:33:48 -0700 (PDT)\r\nX-Received: by 10.229.142.11 with HTTP; Sat, 20 Apr 2013 07:33:48 -0700 (PDT)\r\nDate: Sat, 20 Apr 2013 07:33:48 -0700\r\nX-Google-Sender-Auth: NYgfB7ynEOmozfB0Ns5yUtIf9G0\r\nMessage-ID: &lt;CAGVbXL6_OHOhOTS0kf0SKcWA-=zKYbKLQWVWfBoTKOmg7vXxEA@...&gt;\r\nTo: rest-discuss@yahoogroups.com\r\nContent-Type: multipart/alternative; boundary=047d7b5d8fbd4e5e9304dacbb9c4\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nX-eGroups-From: Brian Craft &lt;bcboy@...&gt;\r\nFrom: Brian Craft &lt;craft.brian@...&gt;\r\nSubject: the meaning of stateless\r\nX-Yahoo-Group-Post: member; u=460230079; y=w_75SRPkXFuTeoGwEZlfSdojallbYB_vY3-76pDEFZldhQuKLWIm9TyWjeID77dDVhW98k-tpjBZIkc\r\nX-Yahoo-Profile: firstbakingbook\r\nX-Yahoo-Newman-Property: groups-system\r\nX-eGroups-Approved-By: gonga_thrash &lt;distobj@...&gt; via web; 20 Apr 2013 20:33:23 -0000\r\n\r\n\r\n--047d7b5d8fbd4e5e9304dacbb9c4\r\nContent-Type: text/plain; charset=ISO-8859-1\r\n\r\nI don&#39;t understand how the word &quot;stateless&quot; is being used in REST.\nObviously POST and PUT create state on the server. Obviously, requests\nafter a state change depend on that state change (e.g. by using a URL that\nwas not valid before the state change).\n\nI can almost live with this usage of &quot;stateless&quot; for persistent objects\nstored on the server, because it can be thought of as not being &quot;session\nstate&quot;: it lasts longer than a session. But in any moderately complex web\napp, if you try to design a REST API you will quickly hit GET size limits\nwhen doing complex queries. And then the suggestion is to do something like\nPOST the query parameters, returning a Location header for a &quot;query&quot; object\nthat can be fetched with GET. How is that not storing session data on the\nserver? How is that different from non-REST solutions?\n\nThere are three obvious differences between POSTing a query and just\ngenerically using POST instead of GET. POSTing a query requires two\nround-trips to the server, bad for latency. POSTing a query and using a\nLocation header limits the response to the creation of a single object,\nwhich is fine for 1990&#39;s full-page-load design, but is unrealistic for any\nmoderately complex ajax app, where an API call will result in the creation\nof multiple objects (e.g. creating related images). And POSTing a query\nrequires the tracking of large numbers of transient &quot;query&quot; objects, hugely\ncomplicating both client and server, the very thing REST is supposed to\navoid.\n\nPerhaps to clarify what is meant in REST by &quot;stateless&quot; someone could give\nexamples of things that *aren&#39;t* &quot;stateless&quot;, and contrast them to REST.\n\r\n--047d7b5d8fbd4e5e9304dacbb9c4\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;div dir=3D&quot;ltr&quot;&gt;&lt;span style=3D&quot;font-family:arial,sans-serif;font-size:12.7=\r\n27272033691406px&quot;&gt;I don&#39;t understand how the word &quot;stateless&quot;=\r\n is being used in REST. Obviously POST and PUT create state on the server. =\r\nObviously, requests after a state change depend on that state change (e.g. =\r\nby using a URL that was not valid before the state change).&lt;/span&gt;&lt;div styl=\r\ne=3D&quot;font-family:arial,sans-serif;font-size:12.727272033691406px&quot;&gt;\n&lt;br&gt;&lt;/di=\r\nv&gt;&lt;div style=3D&quot;font-family:arial,sans-serif;font-size:12.727272033691406px=\r\n&quot;&gt;I can almost live with this usage of &quot;stateless&quot; for persistent=\r\n objects stored on the server, because it can be thought of as not being &q=\r\nuot;session state&quot;: it lasts longer than a session. But in any moderat=\r\nely complex web app, if you try to design a REST API you will quickly hit G=\r\nET size limits when doing complex queries. And then the suggestion is to do=\r\n something like POST the query parameters, returning a Location header for =\r\na &quot;query&quot; object that can be fetched with GET. How is that not st=\r\noring session data on the server? How is that different from non-REST solut=\r\nions?&lt;/div&gt;\n&lt;div style=3D&quot;font-family:arial,sans-serif;font-size:12.7272720=\r\n33691406px&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=3D&quot;font-family:arial,sans-serif;font-size:=\r\n12.727272033691406px&quot;&gt;There are three obvious differences between POSTing a=\r\n query and just generically using POST instead of GET. POSTing a query requ=\r\nires two round-trips to the server, bad for latency. POSTing a query and us=\r\ning a Location header limits the response to the creation of a single objec=\r\nt, which is fine for 1990&#39;s full-page-load design, but is unrealistic f=\r\nor any moderately complex ajax app, where an API call will result in the cr=\r\neation of multiple objects (e.g. creating related images). And POSTing a qu=\r\nery requires the tracking of large numbers of transient &quot;query&quot; o=\r\nbjects, hugely complicating both client and server, the very thing REST is =\r\nsupposed to avoid.&lt;/div&gt;\n&lt;div style=3D&quot;font-family:arial,sans-serif;font-si=\r\nze:12.727272033691406px&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=3D&quot;font-family:arial,sans-ser=\r\nif;font-size:12.727272033691406px&quot;&gt;Perhaps to clarify what is meant in REST=\r\n by &quot;stateless&quot; someone could give examples of things that *aren&=\r\n#39;t* &quot;stateless&quot;, and contrast them to REST.&lt;/div&gt;\n&lt;/div&gt;\n\r\n--047d7b5d8fbd4e5e9304dacbb9c4--\r\n\n"}}
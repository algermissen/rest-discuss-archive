{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":236158268,"authorName":"Simon Reinhardt","from":"Simon Reinhardt &lt;simon.reinhardt@...&gt;","profile":"shepard4711","replyTo":"SENDER","senderId":"rNjFTQ1zaRX0nu1xzrT3b5HqzQAMC3Iq2kUxPjm60w-B3kF8nshNZuJ0eeId5bBTXPftWVFQ10MAqsKeCFxFYlIa02ivW5-XSIx-o_kRiWZv","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] CSRF attacks in RESTful authenticated web applications","postDate":"1211923655","msgId":10837,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQ4M0M3Q0M3LjMwMDA1QGtvZWxuLmRlPg==","inReplyToHeader":"PGU1YzZlY2FiMDgwNTI3MTI0NGo0ZjM1YjJiYmdlNmJhMTc5ZjAyZDk3MGYwQG1haWwuZ21haWwuY29tPg==","referencesHeader":"PDQ4M0IxRUJGLjMwMzA5MDNAa29lbG4uZGU+CSA8ZTVjNmVjYWIwODA1MjYxNTE1aDgwMzhkYTNnZDI0N2NkODllYzcxZDgyMUBtYWlsLmdtYWlsLmNvbT4JIDw0ODNDNTRFRS4yMDkwMDA3QGtvZWxuLmRlPiA8ZTVjNmVjYWIwODA1MjcxMjQ0ajRmMzViMmJiZ2U2YmExNzlmMDJkOTcwZjBAbWFpbC5nbWFpbC5jb20+"},"prevInTopic":10836,"nextInTopic":10838,"prevInTime":10836,"nextInTime":10838,"topicId":10818,"numMessagesInTopic":21,"msgSnippet":"... But the server still needs to relate the GUID to something? Otherwise any GUID would work and then it s guessable again. ... Ah, makes sense. ... I","rawEmail":"Return-Path: &lt;simon.reinhardt@...&gt;\r\nX-Sender: simon.reinhardt@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 95380 invoked from network); 27 May 2008 21:26:44 -0000\r\nX-Received: from unknown (66.218.67.97)\n  by m44.grp.scd.yahoo.com with QMQP; 27 May 2008 21:26:44 -0000\r\nX-Received: from unknown (HELO mojito.ops.eusc.inter.net) (84.23.254.150)\n  by mta18.grp.scd.yahoo.com with SMTP; 27 May 2008 21:26:44 -0000\r\nX-Received: from [10.155.1.1] (helo=waikiki.ops.eusc.inter.net)\n\tby mojito.ops.eusc.inter.net with esmtp (Exim 4.69) \n\tid 1K16gt-000FIP-5e\n\tfor rest-discuss@yahoogroups.com; Tue, 27 May 2008 23:26:43 +0200\r\nX-Trace: 507c73696d6f6e2e7265696e68617264747c37382e33342e3133352e3137317c31\n\t4b313667732d3030304148372d55687c31323131393233363033\r\nX-Received: from waikiki.ops.eusc.inter.net ([10.155.10.22] helo=localhost)\n\tby waikiki.ops.eusc.inter.net with esmtpa (Exim 4.69) \n\tid 1K16gs-000AH7-Uh\n\tfor rest-discuss@yahoogroups.com; Tue, 27 May 2008 23:26:43 +0200\r\nMessage-ID: &lt;483C7CC7.30005@...&gt;\r\nDate: Tue, 27 May 2008 23:27:35 +0200\r\nUser-Agent: Thunderbird 2.0.0.14 (Windows/20080421)\r\nMIME-Version: 1.0\r\nTo: rest-discuss@yahoogroups.com\r\nReferences: &lt;483B1EBF.3030903@...&gt;\t &lt;e5c6ecab0805261515h8038da3gd247cd89ec71d821@...&gt;\t &lt;483C54EE.2090007@...&gt; &lt;e5c6ecab0805271244j4f35b2bbge6ba179f02d970f0@...&gt;\r\nIn-Reply-To: &lt;e5c6ecab0805271244j4f35b2bbge6ba179f02d970f0@...&gt;\r\nX-FOAF: http://simon-reinhardt.de/foaf.rdf\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-AntiVirus: checked by AntiVir MailGuard (Version: 8.0.0.18; AVE: 8.1.0.46; VDF: 7.0.4.101)\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Simon Reinhardt &lt;simon.reinhardt@...&gt;\r\nSubject: Re: [rest-discuss] CSRF attacks in RESTful authenticated web applications\r\nX-Yahoo-Group-Post: member; u=236158268; y=an7owbZ7-40Ptnvf5UJskLtCjdWq31sI-jAyOx6EkC-FVl0vsHk\r\nX-Yahoo-Profile: shepard4711\r\n\r\nDaniel Yokomizo wrote:\n&gt; On Tue, May 27, 2008 at 3:37 PM, Simon Reinhardt\n&gt; &lt;simon.reinhardt@...&gt; wrote:\n&gt;&gt; Daniel Yokomizo wrote:\n&gt;&gt;&gt; Using HATEOAS you can avoid the first issue: the\n&gt;&gt;&gt; client of the app must use the links in the response to navigate to\n&gt;&gt;&gt; the next states, so the server can generate URIs that are unguessable\n&gt;&gt;&gt; (e.g. GUIDs, cryptography) and the attacker is unable to name a\n&gt;&gt;&gt; resource used in the session.\n&gt;&gt;\n&gt;&gt; How exactly would that work? If the URIs are unguessable then they have to be unrelated to anything the client knows, i.e. they contain random tokens. But the server would have to remember those tokens and relate them to the user (which is really just sessions with a session ID in a request parameter) and then you have server state. How is that still RESTful?\n&gt; \n&gt; REST don&#39;t prohibit state, as long as you can name it. The URI /foo/1\n&gt; denotes a resource that can be retrieved from database, to make it\n&gt; unguessable you can use a GUID (e.g /{GUID}/foo/1 or /foo/{GUID} or\n&gt; /{GUID})\n\nBut the server still needs to relate the GUID to something? Otherwise any GUID would work and then it&#39;s &quot;guessable&quot; again.\n\n&gt; cryptography (e.g. /{encrypted URI} so the server decrypts\n&gt; the URI before using it), etc..\n\nAh, makes sense.\n\n&gt; Also REST don&#39;t favor (or prohibit)\n&gt; pretty or hackable URIs (it&#39;s a design decision) and it don&#39;t\n&gt; guarantee that some URI will exist later (as it can always return 404,\n&gt; 410, etc.) so you can enforce the rule that the client (a human or an\n&gt; app) must GET the entry point and navigate using links to the\n&gt; interesting states (i.e. other URIs), generating the URIs to be useful\n&gt; only for some predefined period or whatever\n\nI pretty much prefer pretty and hackable URIs. And I also think that cool URIs shouldn&#39;t change. ;-)\n\n&gt; (I don&#39;t like this\n&gt; approach, but it&#39;s important to understand that it isn&#39;t RESTful).\n\nDid you mean &quot;is&quot; here?\n\n&gt;&gt; - sending them to friends leads to problems\n&gt; \n&gt; Which kind of problems?\n\nWell, there&#39;s always the argument that they could hijack your session but of course you would check the IP address of the requester. :-) (Would *that* be RESTful?)\nSo what would the friend see? A 401? a 403? A redirect to the login form? Of course if they login from there they could get redirected back to the resource, just with their session parameter appended to the URI instead of mine. But why create a new session for them if they are already logged in with another session? Ok, this is the trade-off between security and convenience you talk about below.\n\n&gt;&gt; - you have several URIs for one and the same resource\n&gt; \n&gt; Why would it be a problem?\n\nIt makes referring to resources ambiguous, especially on the Semantic Web.\n\n&gt;&gt; - you just need to have one URI which doesn&#39;t contain the session ID (maybe a link to a wiki related to your application which is coded as a separate application but integrated into the same framing template with menus and stuff) and you are &quot;logged out&quot;; clicking on links in the menu will not lead you back into the application in an authenticated state.\n&gt; \n&gt; You can send an unguessable entry point URI using an out of band\n&gt; channel (e.g. email). Or you can use a guessable entry point and use\n&gt; some form of login to redirect to the unguessable world.\n\nSo you said, but if your website contains both public pages which should be viewable without logging in and protected pages, then every pointer from a protected page to a public page can either include the session identifier (but a related wiki might use its own session system?) or not include it, meaning that the user can&#39;t go from the public page back into the protected section without logging in with a new session or using the back-button.\n\n&gt; It&#39;s important to understand that most of the time there&#39;s a trade-off\n&gt; between security and convenience. You need to define your security\n&gt; policy, for example if your app don&#39;t do external transactions (i.e.\n&gt; credit-card payments, send e-mails, update other apps) you don&#39;t need\n&gt; much security beyond being able to undo changes in your own data, so a\n&gt; revision aware storage system and a simple simple authentication\n&gt; process could solve most of your problems. Banking apps, the checkout\n&gt; of e-commerce apps, etc., have different security needs. You could use\n&gt; guessable URIs in some parts of your app and unguessable in other\n&gt; parts, using some stronger form of authentication to separate them. It\n&gt; all depends on your needs, there&#39;s no one-size fits all solution.\n\nRight, this makes sense. It helps me figuring out how to secure my next web application. :-)\nI think I have a much better picture of authentication possibilities now, thanks!\n\nSimon\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":154469508,"authorName":"justin_t_sampson","from":"&quot;justin_t_sampson&quot; &lt;justin.sampson@...&gt;","profile":"justin_t_sampson","replyTo":"SENDER","senderId":"WJzTPjrRdYdhaVwLR4xECDpiTAqIMChjydq2fDK9mTg43qh8F7iAzLltxZm5erdVS90I87RTD35pJ3dgtjNUT_P5Hd1V9xa8BPe6j38pMbzdjTDW_7g64XFH3Ec","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Pure-REST Wiki experiment","postDate":"1059299940","msgId":3793,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGJnMDdwNCthZWg5QGVHcm91cHMuY29tPg=="},"prevInTopic":0,"nextInTopic":3794,"prevInTime":3792,"nextInTime":3794,"topicId":3793,"numMessagesInTopic":23,"msgSnippet":"Trying to reconcile some of the ideas I ve been reading here, last night I threw together the beginnings of a pure-REST Wiki. The client and server are both","rawEmail":"Return-Path: &lt;justin.sampson@...&gt;\r\nX-Sender: justin.sampson@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 78139 invoked from network); 27 Jul 2003 09:59:01 -0000\r\nReceived: from unknown (66.218.66.217)\n  by m3.grp.scd.yahoo.com with QMQP; 27 Jul 2003 09:59:01 -0000\r\nReceived: from unknown (HELO n27.grp.scd.yahoo.com) (66.218.66.83)\n  by mta2.grp.scd.yahoo.com with SMTP; 27 Jul 2003 09:59:01 -0000\r\nReceived: from [66.218.67.168] by n27.grp.scd.yahoo.com with NNFMP; 27 Jul 2003 09:59:01 -0000\r\nDate: Sun, 27 Jul 2003 09:59:00 -0000\r\nTo: rest-discuss@yahoogroups.com\r\nSubject: Pure-REST Wiki experiment\r\nMessage-ID: &lt;bg07p4+aeh9@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Length: 8996\r\nX-Mailer: Yahoo Groups Message Poster\r\nFrom: &quot;justin_t_sampson&quot; &lt;justin.sampson@...&gt;\r\nX-Yahoo-Group-Post: member; u=154469508\r\nX-Yahoo-Profile: justin_t_sampson\r\n\r\nTrying to reconcile some of the ideas I&#39;ve been reading here,\nlast night I threw together the beginnings of a pure-REST Wiki.\nThe client and server are both included at the end of this\nmessage.\n\nThe resources are Wiki topics, with URIs like &lt;/wiki/HomePage&gt;,\nwith GET returning the Wiki-text representation of a topic, PUT\nsupplying a new Wiki-text representation to create or modify a\ntopic, and DELETE deleting a topic. POST is not accepted for any\nresource in this application. This is all implemented by a single\nJava servlet.\n\nThe user interface is implemented completely on the client side\nusing HTML and JavaScript. It uses the XmlHttpRequest object to\nmake requests to the server. User interaction is done through\nform elements, but the form never gets submitted anywhere; it&#39;s\njust accessed by the JavaScript. The GET, PUT, and DELETE\ncommands are shown as buttons, and the name of the current topic\nis shown in an editable text field. All the commands construct\nthe URI from the topic name. GET displays the Wiki-text of the\ntopic in a large textarea; and PUT transfers the contents of that\ntextarea back to the server, allowing editing of a topic\nretrieved by GET. PUT and DELETE both clear the contents of that\ntextarea. The status code of each response is displayed in a\nsmall non-editable text field.\n\nWhat I really had in mind was to implement the HTML rendering of\nthe Wiki text in the JavaScript client as well, including links\nbetween topics as JavaScript onClick handlers, but I didn&#39;t get\nthat far yet.\n\nSome issues:\n\n1. IE caches the GET responses, which is kind of cool. However,\nit doesn&#39;t invalidate the cache after a PUT or DELETE! So doing a\nGET, editing the text, doing a PUT, and then doing a GET again\ngives the original text. I had to turn off caching in IE while\nplaying with it; I guess the GET responses could carry a no-cache\ndirective instead...\n\n2. At first I returned 204 from PUT if the resource already\nexisted (201 otherwise), but it seemed that the JavaScript send()\ncall was never returning. Simply changing it to 205 avoided this\nproblem.\n\n3. As it is, the user interface is really a browser-in-the-\nbrowser. It has its own location bar, and manages navigation\namong Wiki topics entirely within one browser &quot;page&quot;.  That\nimplies a couple of problems -- for one, the browser&#39;s history\nbuttons don&#39;t work.\n\n4. Every topic has a URI, but if that URI is typed directly in\nthe browser, the user will be able to view the Wiki-text\nrepresentation of the topic, but won&#39;t see any of the UI.\n\nAltogether a successful experiment, demonstrating how to deploy a\npotentially-fancy JavaScript-driven UI for a pure-REST\napplication. I wonder how to resolve the 4 issues above...\n\nAny reactions?\n\nJustin Sampson\n\nP.S. Here&#39;s the code:\n\n--- client.html\n&lt;HTML&gt;\n    &lt;HEAD&gt;\n        &lt;TITLE&gt;REST Wiki&lt;/TITLE&gt;\n        &lt;SCRIPT&gt;\n            function wikiGet()\n            {\n                document.client.status.value = &quot;---&quot;;\n                var http = new ActiveXObject(&quot;MSXML2.XMLHTTP&quot;);\n                var page = document.client.page.value;\n                var url = &quot;http://localhost:8080/wiki/&quot; + page;\n                http.open(&quot;GET&quot;, url, false);\n                http.send(null);\n                if (http.status == 200)\n                {\n                    document.client.content.value =\n                        http.responseText;\n                }\n                else\n                {\n                    document.client.content.value = &quot;&quot;;\n                }\n                document.client.status.value = http.status;\n            }\n            function wikiPut()\n            {\n                document.client.status.value = &quot;---&quot;;\n                var http = new ActiveXObject(&quot;MSXML2.XMLHTTP&quot;);\n                var page = document.client.page.value;\n                var url = &quot;http://localhost:8080/wiki/&quot; + page;\n                http.open(&quot;PUT&quot;, url, false);\n                http.setRequestHeader(&quot;Content-Type&quot;,\n                    &quot;text/x-wiki; charset=UTF-8&quot;);\n                http.send(document.client.content.value);\n                document.client.content.value = &quot;&quot;;\n                document.client.status.value = http.status;\n            }\n            function wikiDelete()\n            {\n                document.client.status.value = &quot;---&quot;;\n                var http = new ActiveXObject(&quot;MSXML2.XMLHTTP&quot;);\n                var page = document.client.page.value;\n                var url = &quot;http://localhost:8080/wiki/&quot; + page;\n                http.open(&quot;DELETE&quot;, url, false);\n                http.send(null);\n                document.client.content.value = &quot;&quot;;\n                document.client.status.value = http.status;\n            }\n        &lt;/SCRIPT&gt;\n    &lt;/HEAD&gt;\n    &lt;BODY onLoad=&quot;wikiGet()&quot;&gt;\n        &lt;FORM name=&quot;client&quot;&gt;\n            &lt;INPUT type=&quot;text&quot; name=&quot;page&quot; value=&quot;HomePage&quot;&gt;\n            &lt;INPUT type=&quot;button&quot; value=&quot;Get&quot; onClick=&quot;wikiGet()&quot;&gt;\n            &lt;INPUT type=&quot;button&quot; value=&quot;Put&quot; onClick=&quot;wikiPut()&quot;&gt;\n            &lt;INPUT type=&quot;button&quot; value=&quot;Delete&quot;\n                onClick=&quot;wikiDelete()&quot;&gt;\n            &lt;INPUT type=&quot;text&quot; name=&quot;status&quot; disabled&gt;\n            &lt;BR&gt;\n            &lt;TEXTAREA name=&quot;content&quot; cols=&quot;80&quot; rows=&quot;25&quot;&gt;\n            &lt;/TEXTAREA&gt;\n        &lt;/FORM&gt;\n    &lt;/BODY&gt;\n&lt;/HTML&gt;\n\n--- RestWikiServlet.java\npackage restwiki;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\npublic class RestWikiServlet extends HttpServlet\n{\n\n    private File root;\n\n    public void init() throws ServletException\n    {\n        root = new File(getInitParameter(&quot;root&quot;));\n    }\n\n    private boolean validWikiName(String wikiName)\n    {\n        return wikiName != null\n            && wikiName.matches(&quot;([A-Z][a-z]+){2,}&quot;);\n    }\n\n    private File pageFile(String wikiName)\n    {\n        return new File(root, wikiName);\n    }\n\n    private String wikiName(HttpServletRequest request)\n    {\n        String pathInfo = request.getPathInfo();\n\n        if (pathInfo != null && pathInfo.startsWith(&quot;/&quot;))\n        {\n            return pathInfo.substring(1);\n        }\n        else\n        {\n            return pathInfo;\n        }\n    }\n\n    protected synchronized void doGet(\n        HttpServletRequest request,\n        HttpServletResponse response)\n        throws ServletException, IOException\n    {\n        String wikiName = wikiName(request);\n\n        if (!validWikiName(wikiName))\n        {\n            response.setStatus(404);\n            return;\n        }\n\n        File pageFile = pageFile(wikiName);\n\n        if (!pageFile.exists())\n        {\n            response.setStatus(404);\n            return;\n        }\n\n        InputStream input = new FileInputStream(pageFile);\n        try\n        {\n            response.setContentType(\n                &quot;text/x-wiki; charset=UTF-8&quot;);\n            response.setStatus(200);\n            OutputStream output = response.getOutputStream();\n            byte[] buffer = new byte[1024];\n            int n;\n            while ((n = input.read(buffer)) != -1)\n            {\n                output.write(buffer, 0, n);\n            }\n        }\n        finally\n        {\n            input.close();\n        }\n    }\n\n    protected synchronized void doPut(\n        HttpServletRequest request,\n        HttpServletResponse response)\n        throws ServletException, IOException\n    {\n        String wikiName = wikiName(request);\n\n        if (!validWikiName(wikiName))\n        {\n            response.setStatus(403);\n            return;\n        }\n\n        if (!&quot;text/x-wiki; charset=UTF-8&quot;.equals(\n            request.getContentType()))\n        {\n            response.setStatus(415);\n            return;\n        }\n\n        File pageFile = pageFile(wikiName);\n\n        boolean created = !pageFile.exists();\n\n        OutputStream output = new FileOutputStream(pageFile);\n        try\n        {\n            InputStream input = request.getInputStream();\n            byte[] buffer = new byte[1024];\n            int n;\n            while ((n = input.read(buffer)) != -1)\n            {\n                output.write(buffer, 0, n);\n            }\n            input.close();\n        }\n        finally\n        {\n            output.close();\n        }\n\n        response.setStatus(created ? 201 : 205);\n    }\n\n    protected synchronized void doDelete(\n        HttpServletRequest request,\n        HttpServletResponse response)\n        throws ServletException, IOException\n    {\n        String wikiName = wikiName(request);\n\n        if (!validWikiName(wikiName))\n        {\n            response.setStatus(404);\n            return;\n        }\n\n        File pageFile = pageFile(wikiName);\n\n        if (!pageFile.exists())\n        {\n            response.setStatus(404);\n            return;\n        }\n\n        response.setStatus(205);\n        pageFile.delete();\n    }\n\n}\n\n\n\n"}}
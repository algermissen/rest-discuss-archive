{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":228155998,"authorName":"Mike Schinkel","from":"&quot;Mike Schinkel&quot; &lt;mikeschinkel@...&gt;","profile":"mikeschinkel","replyTo":"SENDER","senderId":"CR5wCJVKIFV-kRyFL0KY_4gHNcjY2j-SwH7wac2F1d7kYbHMLRVL3DwNADB-uCLOUFd1WN7kID19fAJJS2yXdmT0VPdwBudy2gm9C0K9pg","spamInfo":{"isSpam":false,"reason":"0"},"subject":"RE: [rest-discuss] REST design question","postDate":"1164084169","msgId":7056,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDAxNWQwMWM3MGQyNyQ4MDYyNGQwMCQwNzAyYThjMEBHdWlkZXMubG9jYWw+","inReplyToHeader":"PFcxMTcxMTg1MjczOTk1MTE2MzYxNzExOUBtYWlsLm1haWxzbmFyZS5uZXQ+"},"prevInTopic":7025,"nextInTopic":7057,"prevInTime":7055,"nextInTime":7057,"topicId":6804,"numMessagesInTopic":134,"msgSnippet":"... approach which goes against proper web architecture.  Which doesn t mean it won t work, like I said before, it means they don t mind wasting bandwidth but","rawEmail":"Return-Path: &lt;mikeschinkel@...&gt;\r\nX-Sender: mikeschinkel@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 50503 invoked from network); 21 Nov 2006 04:52:13 -0000\r\nReceived: from unknown (66.218.66.166)\n  by m36.grp.scd.yahoo.com with QMQP; 21 Nov 2006 04:52:13 -0000\r\nReceived: from unknown (HELO wx-out-0506.google.com) (66.249.82.226)\n  by mta5.grp.scd.yahoo.com with SMTP; 21 Nov 2006 04:52:13 -0000\r\nReceived: by wx-out-0506.google.com with SMTP id i27so1875042wxd\n        for &lt;rest-discuss@yahoogroups.com&gt;; Mon, 20 Nov 2006 20:50:10 -0800 (PST)\r\nReceived: by 10.90.84.17 with SMTP id h17mr4573988agb.1164084172136;\n        Mon, 20 Nov 2006 20:42:52 -0800 (PST)\r\nReturn-Path: &lt;mikeschinkel@...&gt;\r\nReceived: from desktop ( [69.94.221.21])\n        by mx.google.com with ESMTP id 24sm21683076wrl.2006.11.20.20.42.50;\n        Mon, 20 Nov 2006 20:42:51 -0800 (PST)\r\nTo: &lt;eric@...&gt;\r\nCc: &lt;rest-discuss@yahoogroups.com&gt;\r\nDate: Mon, 20 Nov 2006 23:42:49 -0500\r\nMessage-ID: &lt;015d01c70d27$80624d00$0702a8c0@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain;\n\tcharset=&quot;us-ascii&quot;\r\nContent-Transfer-Encoding: 7bit\r\nX-Mailer: Microsoft Office Outlook 11\r\nIn-Reply-To: &lt;W11711852739951163617119@...&gt;\r\nX-MimeOLE: Produced By Microsoft MimeOLE V6.00.2900.2962\r\nThread-Index: AccI6BDDE7hbmxYhRzKjZzeKUHdvlAENOXtQ\r\nFrom: &quot;Mike Schinkel&quot; &lt;mikeschinkel@...&gt;\r\nSubject: RE: [rest-discuss] REST design question\r\nX-Yahoo-Group-Post: member; u=228155998; y=63IabbLGYjoMhN9I3kLVyykf7CSSRk6rADCme2vLotk-Fpso0UCB\r\nX-Yahoo-Profile: mikeschinkel\r\n\r\nEric J. Bowman wrote: \n\n&gt;&gt; &quot;It&#39;s just convenient&quot; is hardly a defense for an inherently inefficient\napproach which goes against proper web architecture.  Which doesn&#39;t mean it\nwon&#39;t work, like I said before, it means they don&#39;t mind wasting bandwidth\nbut I can&#39;t relate to that attitude.  The goal in REST is to scale, which\ntypically means going against the notion of &quot;convenience&quot; prevalent amongst\nthose who favor MVC design patterns and spend a small fortune on server\nfarms they don&#39;t really need.  And the electricity to power them.  And more\nelectricity to cool it all down.  And more datacenter space.  I can&#39;t afford\nconvenience, besides, the number-one all-time user complaint about the web\nis it&#39;s slow so it seems to me that focusing on proper architecture, scaling\nand efficiency is a no- brainer.\n\nI won&#39;t disagree or overtly agree, but I would like to make an observation.\nThe past several years I&#39;ve been thinking a lot about what makes people have\nsignificant disagreements primarily because of the political polarization in\nthe US and the escalating tensions outside the US.  I&#39;ve come to the\nconclusion that disagreements are either about resource contention (water,\noil, land, etc.) or differing values.  The former is straightforward (though\nI don&#39;t think it applies here, your bandwidth comment notwithstanding), but\nwhen people have differing values that 1.) often don&#39;t even make that clear\nand 2.) they often view their values as non-negotiable and the only values\nthat matter (can you say &quot;rock & a hard place?&quot;)\n\nAnyway, I see that you value scalability and view using more resources than\nnecessary as inherently wrong.  Someone else might value optimizing for\nanother factor, such as maybe adoption, and that may cause them to implement\ndifferently.  I&#39;m not saying that applies in Technorati&#39;s case; I haven&#39;t\nconsidering their sitatuation that closely.  Anyway, my point is simply that\nsince people basing their decisions on their own value system, if there is a\ndesire to find common ground then it&#39;s good to understand what each person&#39;s\nvalue system is.\n\nJMTCW.\n\n&gt;&gt; &gt;\n&gt;&gt; &gt;OTOH, this would not be RESTful because it is sending the logic, not \n&gt;&gt; &gt;the representation (right?)\n&gt;&gt; &gt;\n&gt;&gt; No, there&#39;s nothing inherently un-RESTful about an URL like this:\n&gt;&gt; \n&gt;&gt; [1] http://example.com/service?query=www.example.org\n&gt;&gt; \n&gt;&gt; That&#39;s sending an identifier, not logic or a representation.  I can GET,\nPUT, \n&gt;&gt; POST or DELETE the above URL [1].  In REST, the application logic defines\n\n&gt;&gt; how /service responds to these methods, not the contents of the message \n&gt;&gt; body.\n\nI&#39;m still confused. I though REST requests me to transfer representations.\nSince it doesn&#39;t appear that URL is transfering a representation isn&#39;t it\nnon-RESTful?  (sorry I&#39;m being so dense.)\n\n\n&gt;&gt; &gt;&gt;&gt; Your feed should get a new timestamp whenever it&#39;s updated with new\n&gt;&gt; &gt;content. The value of that timestamp may be PUT to the user&#39;s URL to\nchange\n&gt;&gt; &gt;the value in &lt;updated&gt; concurrently with your feed&#39;s timestamp being\n&gt;&gt; &gt;updated.\n&gt;&gt; &gt;\n&gt;&gt; &gt;But doesn&#39;t that violate REST by posting the logic not the\nrepresentation?\n&gt;&gt; &gt;Isn&#39;t the &lt;updated&gt; field considered logic in this case?\n&gt;&gt; &gt;\n&gt;&gt; That is not posting logic.  The value posted is not an instruction.  The \n&gt;&gt; value posted is a value in a node on an XML tree.  The application state \n&gt;&gt; is represented by the values in that node tree.  Posting _logic_ would \n&gt;&gt; instruct the server what calculations it needs to perform to arrive at\nthe \n&gt;&gt; desired new value for that node.  The instructions would be posted to \n&gt;&gt; the server, then executed, before the state of the node would be updated \n&gt;&gt; to reflect the new, computed value.\n\nOkay, then I got the wrong impression regard posting logic from some other\ndiscussion on this list. Can you give me a simple but realistic example of\nposting logic, in this context or any other?\n\n&gt;&gt; &gt;&gt;&gt; REST is not concerned with application logic, only information\n&gt;&gt; &gt;architecture. There is no constraint in REST regarding data quality,\n&gt;&gt; &gt;so no of course you can&#39;t jump to any general conclusions about \n&gt;&gt; &gt;REST based on the implementation specifics of this example.\n&gt;&gt; &gt;\n&gt;&gt; &gt;Your answer leads me to a question that I hadn&#39;t even begun to ask\n&gt;&gt; &gt;on the list: Is REST always appropriate and if not, why and why not?\n&gt;&gt; &gt;Feel free to defer that answer to later.\n&gt;&gt; &gt;\n&gt;&gt; Yes, of course REST is appropriate.  If the goal is to build a\ndistributed \n&gt;&gt; hypermedia application, individual technologies and application logic \n&gt;&gt; and protocols may be chosen based on any criteria desired so long as \n&gt;&gt; the result is within the constraints of REST.  There is no architectural \n&gt;&gt; style which has been shown to be more efficient on the Internet than \n&gt;&gt; the one the Internet is natively designed to support.\n\nWhich beings me to another question I have been pondering. :)  Would it be\nappropriate to develop a Window desktop application using a REST\narchitecture?  And please don&#39;t think it is a silly question.  I&#39;ve long\nlamented the fact that desktop applications don&#39;t have a URL for their\nvarious states (except for File Manager which has a psuedo-URL, i.e a\nfilepath). Whenever someone has told my they had a bug on my website I ask\nfor the URL.  But when they&#39;ve had a bug in a Windows app I wrote, what do I\nask for?  So it seems that a REST model would be appropriate for a desktop\napplication, and it would also more easily facilitate moving components of\nthe application to a LAN server when there is a need to scale, yes?\n\nThat said, the problem is development tools, or at least I don&#39;t think there\nare good tools for developing desktop apps in this manner. Clearly object\ninteractions native to Java/C#/C++/etc. are more performant than message\npassing and almost none make interacting with XML easy (except Microsoft&#39;s\nPowershell; have you seen?) So it seems there would be a need to model\naggregations of resources as objects and then implement a web server\ndispatcher that can receive HTTP messages and dispatch to the approriate\nobjects.   Does that make sense?\n\n&gt;&gt; If you want to update your application logic, would you prefer that \n&gt;&gt; this was transparent to your users, or would you prefer sending \n&gt;&gt; everyone an e-mail who has ever implemented your XML-RPC Ping \n&gt;&gt; informing them that it will no longer work unless they re-code their \n&gt;&gt; applications?  When you do update your code, and a bunch of websites \n&gt;&gt; that utilized your previous version now show errors, you&#39;ll perhaps get \n&gt;&gt; that lightbulb over your head which says, &quot;Ah!  Now I know why \n&gt;&gt; transferring application logic is a bad idea.&quot;\n\nI don&#39;t see why there is any requirement via XML-RPC to chance an existing\nservice and I don&#39;t see why logic needs to be sent.  Just create a new\nservice (ver 2.0) and send a list of URLs, not just one.  \n\nAnyway, I&#39;m not advocating for XML-RPC. I&#39;ve never used it but what I&#39;ve\nseen of it is not compelling. I was just debating your assertion that you&#39;d\nhave to change an existing service and have to send logic because I don&#39;t\nsee why that would be a requirement (but maybe my not understanding about\nsending logic is why...)\n\n&gt;&gt; A truly RESTful API could be entirely re-coded on the back end to \n&gt;&gt; change the implementation without affecting the functionality.  \n&gt;&gt; With XML-RPC, without changing the functionality, changing the \n&gt;&gt; implementation would require changing the API.  Since the API is \n&gt;&gt; &quot;out there&quot; instead of contained within the application logic this \n&gt;&gt; is no small feat.\n\nI don&#39;t see how REST allows not changing the API either.  If you originally\nallowed posting only one website and not you are going to allow posting of\nmultiple, wouldn&#39;t you need to create another URI to PUT to?\n\n&gt;&gt; &gt;\n&gt;&gt; &gt;One final thing to clarify. If http://technoresti.com/users/{username}\nis\n&gt;&gt; &gt;the resource and &quot;&lt;updated&gt;2006-12-31T24:59:59Z&lt;/updated&gt;&quot; is the\n&gt;&gt; &gt;representation,\n&gt;&gt; &gt;\n&gt;&gt; No, the URI is not the resource.  A resource is a conceptualization, \n&gt;&gt; a resource identifier assigns a name to that concept which may be \n&gt;&gt; a location as well.  The resource in this case is &quot;a list of weblogs \n&gt;&gt; with titles, descriptions and updated times.&quot;  The representation is \n&gt;&gt; the entire list of weblogs, their titles, descriptions and updated \n&gt;&gt; times populated with the current values for those list items which \n&gt;&gt; gets transferred over the network.\n\nAs a point of note, I find that confusing. I would find this much less\nconfusing for your stated resource:\nhttp://technoresti.com/users/{username}/weblogs/ \n\n&gt;&gt; If you want to put the blog ID in the URL and make &lt;updated&gt; \n&gt;&gt; a standalone resource, you could do that, I suppose -- but you&#39;d \n&gt;&gt; better have good reason for it.\n\nBut who gets to define if my reason is good or not? \nThat&#39;s a rhetorical question, if it&#39;s not obvious. ;-)\n\nAnyway, thanks for the continued discussion.\n\n-Mike Schinkel\nhttp://www.mikeschinkel.com/blogs/\nhttp://www.welldesignedurls.org/\n\n\n\n\n"}}
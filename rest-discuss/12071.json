{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":383005568,"authorName":"scameron02","from":"&quot;scameron02&quot; &lt;scott.cameron@...&gt;","profile":"scameron02","replyTo":"SENDER","senderId":"WCxa3ch9QmR4F2Hee_37AJqGzBzcxymJspMKXSOG-Oc-uDRcvQsYONNnfxtCaKlHnf3qFREz8TbFWwf-v7CaBk92_EWssTTyaDTJ","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: RESTful URLs?","postDate":"1233611434","msgId":12071,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGdtN3ByYStmZTZqQGVHcm91cHMuY29tPg==","inReplyToHeader":"PGE2YTZkZjM2MDkwMjAyMDczNmkxZGMzMGVhMXc0NzkxMmU2YTJmMTgyMjVkQG1haWwuZ21haWwuY29tPg=="},"prevInTopic":12070,"nextInTopic":12072,"prevInTime":12070,"nextInTime":12072,"topicId":12048,"numMessagesInTopic":54,"msgSnippet":"... other ... between ... could ... discourages ... clients. ... URI ... I am ... I agree with this.  Yes, the problems of URI design (opaque vs hackable )","rawEmail":"Return-Path: &lt;scott.cameron@...&gt;\r\nX-Sender: scott.cameron@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 5741 invoked from network); 2 Feb 2009 21:50:35 -0000\r\nX-Received: from unknown (66.218.67.97)\n  by m42.grp.scd.yahoo.com with QMQP; 2 Feb 2009 21:50:35 -0000\r\nX-Received: from unknown (HELO n17c.bullet.sp1.yahoo.com) (69.147.64.126)\n  by mta18.grp.scd.yahoo.com with SMTP; 2 Feb 2009 21:50:35 -0000\r\nX-Received: from [69.147.65.172] by n17.bullet.sp1.yahoo.com with NNFMP; 02 Feb 2009 21:50:35 -0000\r\nX-Received: from [66.218.67.231] by t14.bullet.mail.sp1.yahoo.com with NNFMP; 02 Feb 2009 21:50:34 -0000\r\nDate: Mon, 02 Feb 2009 21:50:34 -0000\r\nTo: rest-discuss@yahoogroups.com\r\nMessage-ID: &lt;gm7pra+fe6j@...&gt;\r\nIn-Reply-To: &lt;a6a6df360902020736i1dc30ea1w47912e6a2f18225d@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: multipart/alternative; boundary=&quot;8-0365963822-4953286420=:1&quot;\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-Yahoo-Newman-Property: groups-compose\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;scameron02&quot; &lt;scott.cameron@...&gt;\r\nSubject: Re: RESTful URLs?\r\nX-Yahoo-Group-Post: member; u=383005568; y=yaH_MGuJwh5iub04TxO9C-2Qq0AplJ5A1LFNv2gWuq5LjdB8Jw\r\nX-Yahoo-Profile: scameron02\r\n\r\n\r\n--8-0365963822-4953286420=:1\r\nContent-Type: text/plain; charset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&gt;\n&gt; But pragmatically there seems to me to be no difference at all. In\nothe=\r\nr\n&gt; words, the idea that one can substantially reduce the dependencies\nbetw=\r\neen\n&gt; clients and servers by returning a network of URIs in representations=\r\n\n&gt; (HATEOAS) instead of explicitly documenting the URI templates that\ncould=\r\n\n&gt; generate them, seems only to work if one prohibits or at least\ndiscourag=\r\nes\n&gt; promiscuous bookmarking of URIs, ie prohibits deep linking by REST\ncli=\r\nents.\n&gt;\n&gt; This is why I think the structure of URIs IS important and the us=\r\ne of\nURI\n&gt; templates is NOT suspect. Do others see this as a tension as wel=\r\nl, or\nI am\n&gt; just misunderstanding something?\n&gt;\n\nI agree with this.  Yes, t=\r\nhe problems of URI design (opaque vs\n&quot;hackable&quot;) and of REST API design are=\r\n mostly orthogonal because the\nhypermedia defines the primary points of cli=\r\nent interaction with the\napplication. But, the correct use of hypermedia to=\r\n drive clients should\nin no way *preclude* the use of URIs directly, IMO.\n\n=\r\nPart of the power of a stateless API is the ability for a client to\nenter t=\r\nhe application at practically any starting point.  If clients are\nforced to=\r\n always begin and the system specified &quot;beginning&quot; URI and then\ndo all subs=\r\nequent navigations via hypermedia embedded inside\nrepresentations, we aren&#39;=\r\nt (at least in one way) that much better off\nthan we were with RPC or a dis=\r\ntributed object system where getting\nanywhere interesting required navigati=\r\nng an object model.  All I wanted\nwas to hack together a little script to l=\r\nook at a customer record but I\nhad to make 6 round trips to the server and =\r\ninterrogate 5\nrepresentations to get it!\n\nPart of the beauty of a RESTful a=\r\nrchitecture is that the level of\ncomplexity imposed by the API matches the =\r\nlevel of complexity and\nrobustness required by the client app.  With REST t=\r\nhis choice can be, in\nmany ways, left to the client developer.\n\nAs a slight=\r\n aside, another area where human-readable URIs are useful in\nRESTful design=\r\n is in applications that have open-ended state\ntransitions.  Specific web a=\r\npplications tend to be fairly restricted in\nthe number of things it makes s=\r\nense to do next from a particular\nresource.  But applications that are more=\r\n like frameworks themselves\n(ie. databases to some degree; or content repos=\r\nitories) can have a\npractically unlimited number of potential state transit=\r\nions.  The\napplication will provide the most common ones as hypermedia in t=\r\nhe\nrepresentation, and maybe it has some forms or templates for\nparametrize=\r\nd extensions.  But for some application types, it will just\nnot be practica=\r\nl or feasible for this list to be exhaustive.  URI\nconstruction can be a se=\r\ncond-tier back-door when hypermedia hits a wall\nbetween the known next stat=\r\nes and the uncertain (but still valid) ones.\n\nscott\n\n\n\r\n--8-0365963822-4953286420=:1\r\nContent-Type: text/html; charset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;font face=3D&quot;georgia&quot;&gt;&gt;&lt;br&gt;&gt; But pragmatically there seems to me to =\r\nbe no difference at all. In other&lt;br&gt;&gt; words, the idea that one can subs=\r\ntantially reduce the dependencies between&lt;br&gt;&gt; clients and servers by re=\r\nturning a network of URIs in representations&lt;br&gt;&gt; (HATEOAS) instead of e=\r\nxplicitly documenting the URI templates that could&lt;br&gt;&gt; generate them, s=\r\neems only to work if one prohibits or at least discourages&lt;br&gt;&gt; promiscu=\r\nous bookmarking of URIs, ie prohibits deep linking by REST clients.&lt;br&gt;&gt;=\r\n&lt;br&gt;&gt; This is why I think the structure of URIs IS important and the use=\r\n of URI&lt;br&gt;&gt; templates is NOT suspect. Do others see this as a tension a=\r\ns well, or I am&lt;br&gt;&gt; just misunderstanding something?&lt;br&gt;&gt;&lt;br&gt;&lt;br&gt;I a=\r\ngree with this.&nbsp; Yes, the problems of URI design (opaque vs &quot;hackable&quot;=\r\n) and of REST API design are mostly orthogonal because the hypermedia defin=\r\nes the primary points of client interaction with the application. But, the =\r\ncorrect use of hypermedia to drive clients should in no way *preclude* the =\r\nuse of URIs directly, IMO.&lt;br&gt;&lt;br&gt;Part of the power of a stateless API is t=\r\nhe ability for a client to enter the application at practically any startin=\r\ng point.&nbsp; If clients are forced to always begin and the system specifi=\r\ned &quot;beginning&quot; URI and then do all subsequent navigations via hypermedia em=\r\nbedded inside representations, we aren&#39;t (at least in one way) that much be=\r\ntter off than we were with RPC or a distributed object system where getting=\r\n anywhere interesting required navigating an object model.&nbsp; All I want=\r\ned was to hack together a little script to look at a customer record but I =\r\nhad to make 6 round trips to the server and interrogate 5 representations t=\r\no get it!&lt;br&gt;&lt;br&gt;Part of the beauty of a RESTful architecture is that the l=\r\nevel of complexity imposed by the API matches the level of complexity and r=\r\nobustness required by the client app.&nbsp; With REST this choice can be, i=\r\nn many ways, left to the client developer.&lt;br&gt;&lt;br&gt;As a slight aside, anothe=\r\nr area where human-readable URIs are useful in RESTful design is in applica=\r\ntions that have open-ended state transitions.&nbsp; Specific web applicatio=\r\nns tend to be fairly restricted in the number of things it makes sense to d=\r\no next from a particular resource.&nbsp; But applications that are more lik=\r\ne frameworks themselves (ie. databases to some degree; or content repositor=\r\nies) can have a practically unlimited number of potential state transitions=\r\n.&nbsp; The application will provide the most common ones as hypermedia in =\r\nthe representation, and maybe it has some forms or templates for parametriz=\r\ned extensions.&nbsp; But for some application types, it will just not be pr=\r\nactical or feasible for this list to be exhaustive.&nbsp; URI construction =\r\ncan be a second-tier back-door when hypermedia hits a wall between the know=\r\nn next states and the uncertain (but still valid) ones.&lt;br&gt;&lt;br&gt;scott&lt;br&gt;&lt;br=\r\n&gt;&lt;/font&gt;\n\r\n--8-0365963822-4953286420=:1--\r\n\n"}}
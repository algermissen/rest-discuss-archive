{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":69164307,"authorName":"mike amundsen","from":"mike amundsen &lt;mamund@...&gt;","profile":"mamund","replyTo":"SENDER","senderId":"Y9AaySo96uE-di8d7rkU1v6RSbPewvRip9k8TWuKbSA_T0YqX46PBVLw2ceuFlXxsrH8bmBAKhM4HZ0BrEY7zBKIX87enU0","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] The &quot;purist&quot; C# REST client?","postDate":"1260404946","msgId":14114,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGI1NDhkZjY1MDkxMjA5MTYyOXQzYzhhYTU4OXgxZDlkNjNhMmY2MzgwNDU0QG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PDdDMTEwMjQzLTlCQkEtNEZENy05OTM5LTNFM0ZCRDZEOUQzMUBtaW5kdG91Y2guY29tPg==","referencesHeader":"PEI1QUM5MEYyODQ5MzQ5OEI5MEU2MjAzRERFMkE0RTY1QEpyblBDPgkgPGI1NDhkZjY1MDkxMjA5MTQ1OGwyNTQ4Y2UyZG9hNGZiYzJlYWZmNmU5Y2M1QG1haWwuZ21haWwuY29tPgkgPDdDMTEwMjQzLTlCQkEtNEZENy05OTM5LTNFM0ZCRDZEOUQzMUBtaW5kdG91Y2guY29tPg=="},"prevInTopic":14113,"nextInTopic":14115,"prevInTime":14113,"nextInTime":14115,"topicId":14110,"numMessagesInTopic":12,"msgSnippet":"Steve: i ve poked around in your code, then ! mca http://amundsen.com/blog/ ... Steve: i ve poked around in your code, then ! mca http://amundsen.com/blog/","rawEmail":"Return-Path: &lt;mca@...&gt;\r\nX-Sender: mca@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 26828 invoked from network); 10 Dec 2009 00:29:09 -0000\r\nX-Received: from unknown (98.137.34.45)\n  by m2.grp.sp2.yahoo.com with QMQP; 10 Dec 2009 00:29:09 -0000\r\nX-Received: from unknown (HELO mail-fx0-f225.google.com) (209.85.220.225)\n  by mta2.grp.sp2.yahoo.com with SMTP; 10 Dec 2009 00:29:08 -0000\r\nX-Received: by fxm25 with SMTP id 25so7188699fxm.6\n        for &lt;rest-discuss@yahoogroups.com&gt;; Wed, 09 Dec 2009 16:29:08 -0800 (PST)\r\nMIME-Version: 1.0\r\nX-Received: by 10.223.58.208 with SMTP id i16mr2433563fah.22.1260404946805; Wed, \n\t09 Dec 2009 16:29:06 -0800 (PST)\r\nIn-Reply-To: &lt;7C110243-9BBA-4FD7-9939-3E3FBD6D9D31@...&gt;\r\nReferences: &lt;B5AC90F28493498B90E6203DDE2A4E65@JrnPC&gt;\n\t &lt;b548df650912091458l2548ce2doa4fbc2eaff6e9cc5@...&gt;\n\t &lt;7C110243-9BBA-4FD7-9939-3E3FBD6D9D31@...&gt;\r\nDate: Wed, 9 Dec 2009 19:29:06 -0500\r\nX-Google-Sender-Auth: 719f6471ea2bee35\r\nMessage-ID: &lt;b548df650912091629t3c8aa589x1d9d63a2f6380454@...&gt;\r\nTo: Steve Bjorg &lt;steveb@...&gt;\r\nCc: =?ISO-8859-1?Q?J=F8rn_Wildt?= &lt;jw@...&gt;, \n\trest-discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Type: multipart/alternative; boundary=0015174760aa20a3aa047a54e571\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: mike amundsen &lt;mamund@...&gt;\r\nSubject: Re: [rest-discuss] The &quot;purist&quot; C# REST client?\r\nX-Yahoo-Group-Post: member; u=69164307; y=KUgXekbuRk_ybtOlzH11UJJ4zpSQkeefIwpsvP6Yvlih\r\nX-Yahoo-Profile: mamund\r\n\r\n\r\n--0015174760aa20a3aa047a54e571\r\nContent-Type: text/plain; charset=windows-1252\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nSteve:\n\ni&#39;ve poked around in your code, then&lt;g&gt;!\n\nmca\nhttp://amundsen.com/b=\r\nlog/\n\n\n\nOn Wed, Dec 9, 2009 at 19:20, Steve Bjorg &lt;steveb@...&gt; wr=\r\note:\n\n&gt; Mike,\n&gt;\n&gt; It sounds like your library is quite similar to the one w=\r\ne developed for\n&gt; our application as well.  MindTouch Dream [1] is a .NET f=\r\nramework for\n&gt; building portable web-services that can run as a standalone =\r\nprocess, windows\n&gt; service, or natively under IIS.  It also runs under Linu=\r\nx using Mono.  Dream\n&gt; is used by quite a few sites including Mozilla [2], =\r\nNovell [3], and\n&gt; Washington Post [4].  The license is Apache 2.0 for easy =\r\nreuse.\n&gt;\n&gt; It&#39;s quite fun to build an entire application with a RESTful int=\r\nerface. :)\n&gt;\n&gt; - Steve\n&gt;\n&gt; [1] http://developer.mindtouch.com/Dream\n&gt; [2] h=\r\nttps://developer.mozilla.org/\n&gt; [3] http://monodevelop.com/\n&gt; [4] http://wh=\r\norunsgov.com/\n&gt;\n&gt; --------------\n&gt; Steve G. Bjorg\n&gt; http://mindtouch.com\n&gt; =\r\nhttp://twitter.com/bjorg\n&gt; irc.freenode.net #mindtouch\n&gt;\n&gt; On Dec 9, 2009, =\r\nat 2:58 PM, mike amundsen wrote:\n&gt;\n&gt;\n&gt;\n&gt; J=F8rn:\n&gt;\n&gt; This line stands out f=\r\nirst: &quot;I have avoided Atom Links since, in my\n&gt; experience, these don&#39;t ser=\r\nialize well in the C# standard XML serializer.&quot;\n&gt; My advice is to be wary o=\r\nf serializers when coding for HTTP. There are so\n&gt; many variances with inco=\r\nming responses I think you&#39;ll find it a real task to\n&gt; build apps based on =\r\n successfully converting incoming response bodies into\n&gt; code-able objects.=\r\n Using serializers also tends to lead programmers to\n&gt; tight-binding betwee=\r\nn the code and the HTTP response body. This means\n&gt; changes in the body may=\r\n blow the serializer code. This is especially true\n&gt; when working with &quot;gen=\r\neric&quot; media-types such as XML and JSON, etc. since\n&gt; they have very little =\r\nsemantic value built into them.\n&gt;\n&gt; That leads me to another bit of advice =\r\nI&#39;ll offer: think about link\n&gt; semantics from the very start when creating =\r\nyour library. The Web browser\n&gt; client works because the link semantics of =\r\nthe HTML media-type are\n&gt; well-defined (and pretty narrow). There are a lim=\r\nited number of link\n&gt; elements. Some are in-doc links (IMG, LINK, SCRIPT, e=\r\ntc.), some are\n&gt; navigational links (A, FORM). All, except FORM, are limite=\r\nd to using the GET\n&gt; method. It&#39;s the semantic model of HTML that allows br=\r\nowsers to properly\n&gt; handle HTTP responses from previously unknown location=\r\ns and still provide\n&gt; full functionality - even a decade after the semantic=\r\ns where defined. I\n&gt; suspect you&#39;ll find that building a client to properly=\r\n locate, identify,\n&gt; and understand the link semantics of a single media ty=\r\npe\n&gt; (application/vnd.movies.movie+xml) is challenging by itself. Building =\r\none\n&gt; that handles multiple media-types just adds to the fun&lt;g&gt;.\n&gt;\n&gt; I also=\r\n encourage you to treat HTTP control data (headers) as top-level\n&gt; programm=\r\ning objects in your library. Allowing programmers to decorate\n&gt; requests wi=\r\nth control data (content-encoding, media-type, authorization,\n&gt; cache-contr=\r\nol, etc.) and have direct access to the control data on responses\n&gt; will im=\r\nprove the flexibility of any client/server built w/ your library.\n&gt;\n&gt; In th=\r\ne big picture, I prefer looking at HTTP programming from the\n&gt; stand-point =\r\nof &quot;resource programming.&quot; I look for a code library that lets\n&gt; me define =\r\na resource, associate or or more URIs with that resource, handle\n&gt; multiple=\r\n representations of the resource (for both requests and response\n&gt; bodies),=\r\n and properly decorate requests and responses w/ control data. I\n&gt; also wan=\r\nt to make sure it handles mime-types properly (conneg included),\n&gt; conditio=\r\nnal requests (GET and PUT), and supports flexible authentication\n&gt; models.\n=\r\n&gt;\n&gt; FWIW, I started work on a REST-ful HTTP C# framework a while back [1].\n=\r\n&gt; It&#39;s been dormant for quite some time as the current version works well f=\r\nor\n&gt; me, but there are lots of places it needs work. I&#39;ve also built an HTT=\r\nP\n&gt; utilities library [2] with most all the bits I need for building REST-f=\r\nul\n&gt; HTTP apps. It&#39;s smaller and lighter than my &#39;framework&#39; library. I men=\r\ntion\n&gt; these as some of the code there might be helpful and/or act as a cau=\r\ntionary\n&gt; tale as you work on your own projects.\n&gt;\n&gt; mca\n&gt; http://amundsen.=\r\ncom/blog/\n&gt;\n&gt; [1] http://exyus.com\n&gt; [2]\n&gt; http://code.google.com/p/mikeamu=\r\nndsen/source/browse/#svn/trunk/Amundsen.Utilities\n&gt;\n&gt;\n&gt;\n&gt; On Wed, Dec 9, 20=\r\n09 at 17:00, J=F8rn Wildt &lt;jw@...&gt; wrote:\n&gt;\n&gt;&gt;\n&gt;&gt;\n&gt;&gt; There has =\r\nbeen a lot of discussion about the right way to implement a REST\n&gt;&gt; service=\r\n, but less focus on how you would actually code a client. I have been\n&gt;&gt; lo=\r\noking at RESTFulie[1], Subbu Alamarju[2], and the Starbucks[3] example,\n&gt;&gt; =\r\nand would like to discuss a similar typed approach in C#.\n&gt;&gt;\n&gt;&gt; I am experi=\r\nmenting with an actual implementation and would like some\n&gt;&gt; feedback befor=\r\ne getting too far :-)\n&gt;&gt;\n&gt;&gt; Thanks, J=F8rn\n&gt;&gt;\n&gt;&gt;\n&gt;&gt; [1] http://github.com/c=\r\naelum/restfulie\n&gt;&gt; [2] http://www.infoq.com/articles/subbu-allamaraju-rest\n=\r\n&gt;&gt; [3] http://www.infoq.com/articles/webber-rest-workflow\n&gt;&gt;\n&gt;&gt;\n&gt;&gt; *Service=\r\n example documentation*\n&gt;&gt; In order to discuss a REST client we need a serv=\r\nice example. My first use\n&gt;&gt; case is a movie shop where we can search for m=\r\novies in a specific category.\n&gt;&gt; To do so the shop has published a single s=\r\nearch service URL template:\n&gt;&gt; http://movies.org/movies?category=3D{categor=\r\ny&lt;http://movies.org/movies?category=3D%7Bcategory&gt;}.\n&gt;&gt;\n&gt;&gt;\n&gt;&gt; The shop also=\r\n publishes three ressource mime types:\n&gt;&gt;\n&gt;&gt; // Example &quot;application/vnd.mo=\r\nvies.movie+xml&quot;\n&gt;&gt; &lt;Movie&gt;\n&gt;&gt;   &lt;Self href=3D&quot;http://movies.org/movies/91&quot;/=\r\n&gt;\n&gt;&gt;   &lt;Title&gt;Strange Dawn&lt;/Title&gt;\n&gt;&gt;   &lt;Category&gt;Thriller&lt;/Category&gt;\n&gt;&gt;   =\r\n&lt;Director href=3D&quot;http://movies.org/persons/47&quot;/&gt;\n&gt;&gt; &lt;/Movie&gt;\n&gt;&gt;\n&gt;&gt;  // Exa=\r\nmple &quot;application/vnd.movies.movie-collection+xml&quot;\n&gt;&gt; &lt;Movies&gt;\n&gt;&gt;   &lt;Self h=\r\nref=3D&quot;http://movies.org/movies?category=3DThriller&quot;/&gt;\n&gt;&gt;   &lt;Movie&gt;\n&gt;&gt;     =\r\n&lt;Title&gt;Strange Dawn&lt;/Title&gt;\n&gt;&gt;     &lt;Self href=3D&quot;http://movies.org/movies/9=\r\n1&quot;/&gt;\n&gt;&gt;   &lt;/Movie&gt;\n&gt;&gt;    &lt;Movie&gt;...&lt;/Movie&gt;\n&gt;&gt;   &lt;Movie&gt;...&lt;/Movie&gt;\n&gt;&gt; &lt;/Mo=\r\nvies&gt;\n&gt;&gt;\n&gt;&gt; // Example &quot;application/vnd.movies.person+xml&quot;\n&gt;&gt; &lt;Person&gt;\n&gt;&gt;  =\r\n &lt;Self href=3D&quot;http://movies.org/persons/47&quot;/&gt;\n&gt;&gt;   &lt;Name&gt;Richard Strangelo=\r\nve&lt;/Name&gt;\n&gt;&gt;   &lt;Photo href=3D&quot;http://facebook.com/photos/hh31y1&quot;/&gt;\n&gt;&gt; &lt;/Per=\r\nson&gt;\n&gt;&gt;\n&gt;&gt; Comments\n&gt;&gt;\n&gt;&gt; - I have avoided Atom Links since, in my experien=\r\nce, these don&#39;t serialize\n&gt;&gt; well in the C# standard XML serializer. You co=\r\nuld although create your own\n&gt;&gt; serializer, so this is not an important res=\r\ntriction.\n&gt;&gt;\n&gt;&gt; - Notice how the person type has external references :-)\n&gt;&gt;=\r\n\n&gt;&gt;\n&gt;&gt; *Code example - Searching*\n&gt;&gt; The cleanest client usage I can come u=\r\np with is:\n&gt;&gt;\n&gt;&gt;   // A link (template). This should be fetched from a conf=\r\niguration file.\n&gt;&gt;   Link MoviesSearchLink =3D new Link(&quot;\n&gt;&gt; http://movies.=\r\norg/movies?category=3D{category}&quot;);\n&gt;&gt;\n&gt;&gt;   // Anonymous class with search =\r\nparameters. Reflection is used to extract\n&gt;&gt; values.\n&gt;&gt;   // This is about =\r\nthe simplest way to write a &quot;fixed hashmap&quot; in C#\n&gt;&gt;   var movieSearchParam=\r\neter =3D new { category =3D &quot;Thriller&quot; };\n&gt;&gt;\n&gt;&gt;   // Get ressource stored a=\r\nt the link endpoint\n&gt;&gt;   MovieCollection movies =3D\n&gt;&gt; MoviesSearchLink.Get=\r\n&lt;MovieCollection&gt;(movieSearchParameter);\n&gt;&gt;\n&gt;&gt;   // Iterate over all movies=\r\n and print title\n&gt;&gt;   foreach (Movie movie in movies)\n&gt;&gt;     Console.WriteL=\r\nine(&quot;Title: &quot; + movie.Title);\n&gt;&gt; Comments:\n&gt;&gt;\n&gt;&gt; - A Link is untyped. We do=\r\n not know what lies at the end of it.\n&gt;&gt;\n&gt;&gt; - A link knows how to merge par=\r\nameters into URL templates.\n&gt;&gt;\n&gt;&gt; - The result of GETing a link is typed. T=\r\nhe actual type is defined by the\n&gt;&gt; returned mime type.\n&gt;&gt;\n&gt;&gt; - In order to=\r\n do something usefull with the search we must assume that it\n&gt;&gt; returns a M=\r\novieCollection. Hence the generic type specifier in the Get&lt;T&gt;()\n&gt;&gt; method.=\r\n This is apriori information which I cannot see how to code without.\n&gt;&gt;\n&gt;&gt;\n=\r\n&gt;&gt; *Parsing ressources*\n&gt;&gt; One piece of magic is how Get&lt;MovieCollection&gt;(p=\r\narams) knows how to\n&gt;&gt; convert the bytes returned from the endpoint to a Mo=\r\nvieCollection. For this\n&gt;&gt; we create a MimeTypeRegistry:\n&gt;&gt;\n&gt;&gt;   MimeTypeRe=\r\ngistry.Register&lt;MovieCollection,\n&gt;&gt; MovieCollectionBuilder&gt;(&quot;application/vn=\r\nd.movies.movie-collection&quot;);\n&gt;&gt;\n&gt;&gt; which is equal to:\n&gt;&gt;\n&gt;&gt;    MimeTypeRegi=\r\nstry.Register(typeof(MovieCollection),\n&gt;&gt; typeof(MovieCollectionBuilder), &quot;=\r\napplication/vnd.movies.movie-collection&quot;);\n&gt;&gt;\n&gt;&gt; This means: when ever we m=\r\nust parse a specific mime type, we look up a\n&gt;&gt; builder in the registry and=\r\n uses this to parse the returned ressource\n&gt;&gt; representation.\n&gt;&gt;\n&gt;&gt; The typ=\r\ned Get&lt;MovieCollection&gt;(params) method GETs the ressource data,\n&gt;&gt; instanti=\r\nates the corresponding builder, verifies that the built object type\n&gt;&gt; matc=\r\nhes the requested and returns the built object.\n&gt;&gt;\n&gt;&gt; Comments:\n&gt;&gt;\n&gt;&gt; - Thi=\r\ns is static typing which RESTafarians seems to shy away from. But the\n&gt;&gt; ty=\r\npe depends on the returned ressource, _not_ the URL. So to my knowledge\n&gt;&gt; =\r\nthis is fine.\n&gt;&gt;\n&gt;&gt; - It is not required to use the type safe Get&lt;T&gt;(), you=\r\n could also call\n&gt;&gt; Get() which returns an object. The actual returned type=\r\n then depends solely\n&gt;&gt; on the mime type of the ressource, and it is up to =\r\nthe programmer to decide\n&gt;&gt; what to do with it.\n&gt;&gt;\n&gt;&gt; - I am quite sure you=\r\n can write some pretty generic XML builders without\n&gt;&gt; much overhead.\n&gt;&gt;\n&gt;&gt;=\r\n - This is not limited to XML, you could add image/jpeg and other well\n&gt;&gt; k=\r\nnown mime types. You just need to supply a proper builder.\n&gt;&gt;\n&gt;&gt;\n&gt;&gt; *Code e=\r\nxample - Getting sub-ressources*\n&gt;&gt; Now we want to get information about th=\r\ne director of the movie:\n&gt;&gt;\n&gt;&gt;   // One of the returned self links from the=\r\n search query\n&gt;&gt;   Link movieLink =3D movies[0].Self;\n&gt;&gt;\n&gt;&gt;   // Get the ac=\r\ntual movie\n&gt;&gt;   Movie movie =3D movieLink.Get&lt;Movie&gt;();\n&gt;&gt;\n&gt;&gt;   // Get the =\r\ndirector\n&gt;&gt;   MoviePerson director =3D movie.Director.Get&lt;MoviePerson&gt;();\n&gt;=\r\n&gt;\n&gt;&gt; Comments:\n&gt;&gt;\n&gt;&gt; - There are no hard coded links here.\n&gt;&gt;\n&gt;&gt; - The only=\r\n apriori information we use is the knowledge of the types of the\n&gt;&gt; referen=\r\nced ressources. These types are documented in the mime type in which\n&gt;&gt; the=\r\n links are used.\n&gt;&gt;\n&gt;&gt;\n&gt;&gt; *Versioning*\n&gt;&gt; Now our wonderfull movie shop dec=\r\nides to be able to sell and rate movies.\n&gt;&gt; They do their own selling, but =\r\nuses the fameous ratings.org service to\n&gt;&gt; rate their movies. So the shop c=\r\nreates a new version of the movie mime type:\n&gt;&gt;\n&gt;&gt; // Example &quot;application/=\r\nvnd.movies.movie.*v2*+xml&quot;\n&gt;&gt; &lt;Movie&gt;\n&gt;&gt;   &lt;Self href=3D&quot;http://movies.org/=\r\nmovies/91&quot;/&gt;\n&gt;&gt;   &lt;Title&gt;Strange Dawn&lt;/Title&gt;\n&gt;&gt;   &lt;Category&gt;Thriller&lt;/Cate=\r\ngory&gt;\n&gt;&gt;   &lt;Director href=3D&quot;http://movies.org/persons/47&quot;/&gt;\n&gt;&gt;   &lt;Orders h=\r\nref=3D&quot;http://movies.org/movies/91/orders&quot;/&gt;\n&gt;&gt;   &lt;Ratings href=3D\n&gt;&gt; http:=\r\n//ratings.org/ratings?item=3Dhttp%3a%2f%2fmovies.org%2fmovies%2f91/&gt;\n&gt;&gt; &lt;/M=\r\novie&gt;\n&gt;&gt;\n&gt;&gt; In order to service both old and new clients the shop decides t=\r\no return\n&gt;&gt; the initial movie mime type by default. Never clients should us=\r\ne the Accept\n&gt;&gt; header to indicate that they want the new version. The same=\r\n goes for the\n&gt;&gt; movies collection type.\n&gt;&gt;\n&gt;&gt; Our existing client code wor=\r\nks happily as it did before.\n&gt;&gt;\n&gt;&gt;\n&gt;&gt; *Code example - A new client*\n&gt;&gt; The =\r\nnew client code would look like this:\n&gt;&gt;\n&gt;&gt;    // A link (template). This s=\r\nhould be fetched from a configuration\n&gt;&gt; file.\n&gt;&gt;   Link MoviesSearchLink =\r\n=3D new Link(&quot;\n&gt;&gt; http://movies.org/movies?category=3D{category}&quot;);\n&gt;&gt;\n&gt;&gt;  =\r\n // Anonymous class with search parameters. Reflection is used to extract\n&gt;=\r\n&gt; values.\n&gt;&gt;   // This is about the simplest way to write a &quot;fixed hashmap&quot;=\r\n in C#\n&gt;&gt;   var movieSearchParameter =3D new { category =3D &quot;thriller&quot; };\n&gt;=\r\n&gt;\n&gt;&gt;   // Setting up the Accept header\n&gt;&gt;   var movieSearchHeaders =3D new =\r\n{ Accept =3D\n&gt;&gt; &quot;application/vnd.movies.movie-collection.v2&quot; }\n&gt;&gt;\n&gt;&gt;   // G=\r\net ressource stored at the link endpoint\n&gt;&gt;   MovieCollection movies =3D\n&gt;&gt;=\r\n MoviesSearchLink.Get&lt;MovieCollection&gt;(movieSearchParameter,\n&gt;&gt; movieSearch=\r\nHeaders);\n&gt;&gt;\n&gt;&gt;   // Iterate over all movies and print title\n&gt;&gt;   foreach (=\r\nMovie movie in movies)\n&gt;&gt;     Console.WriteLine(&quot;Title: &quot; + movie.Title);\n&gt;=\r\n&gt;\n&gt;&gt; *Code example - Buying movies*\n&gt;&gt; Now we have a movie which has an emb=\r\nedded link to it&#39;s sales orders. To\n&gt;&gt; buy a movie we post a new order to t=\r\nhe sales order collection:\n&gt;&gt;\n&gt;&gt;    // One of the returned self links from =\r\nthe search query\n&gt;&gt;   Link movieLink =3D movies[0].Self;\n&gt;&gt;\n&gt;&gt;   // Get the=\r\n actual movie\n&gt;&gt;   Movie movie =3D movieLink.Get&lt;Movie&gt;();\n&gt;&gt;\n&gt;&gt;   // Creat=\r\ne a new order request\n&gt;&gt;   MovieOrderRequest orderRequest =3D new MovieOrde=\r\nrRequest(movie.Self, 1 /*\n&gt;&gt; quantity */);\n&gt;&gt;\n&gt;&gt;   // Post the order reques=\r\nt to the order collection\n&gt;&gt;   // Assume it returns the newly created order=\r\n\n&gt;&gt;   MovieOrder order =3D movie.Orders.Post(orderRequest);\n&gt;&gt;\n&gt;&gt; Comments:=\r\n\n&gt;&gt;\n&gt;&gt; - The POST result in a redirect to the newly created order. The syst=\r\nem\n&gt;&gt; GETs this new order and returns it. This means we loose the intermedi=\r\nate\n&gt;&gt; data returned from the POST.\n&gt;&gt;\n&gt;&gt;\n&gt;&gt; *Other verbs*\n&gt;&gt; The Link clas=\r\ns is has built-in support for GET/PUT/POST/DELETE. Other\n&gt;&gt; verbs can be ex=\r\necuted through a generic &quot;Request&quot; method:\n&gt;&gt;\n&gt;&gt;   SomeType x =3D someLink.=\r\nRequest(&quot;SOMEVERB&quot;, somePayload);\n&gt;&gt;\n&gt;&gt;\n&gt;&gt; *Caching*\n&gt;&gt; The Link class and =\r\nit&#39;s associted methods should of course respect ETag\n&gt;&gt; and if-not-modified=\r\n-since etc. This would require the framework to be\n&gt;&gt; initialized with a ca=\r\nche implementation of some kind.\n&gt;&gt;\n&gt;&gt;\n&gt;&gt; *Error handling*\n&gt;&gt; I would sugge=\r\nst using execptions for error handling.\n&gt;&gt;\n&gt;&gt;\n&gt;&gt;\n&gt;&gt;\n&gt;&gt;\n&gt;\n&gt;  \n&gt;\n&gt;\n&gt;\n\r\n--0015174760aa20a3aa047a54e571\r\nContent-Type: text/html; charset=windows-1252\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nSteve:&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;i&#39;ve poked around in your code, then&lt;g&gt;=\r\n!&lt;/div&gt;&lt;div&gt;&lt;br clear=3D&quot;all&quot;&gt;mca&lt;br&gt;&lt;a href=3D&quot;http://amundsen.com/blog/&quot;&gt;=\r\nhttp://amundsen.com/blog/&lt;/a&gt;&lt;br&gt;&lt;br&gt;\n&lt;br&gt;&lt;br&gt;&lt;div class=3D&quot;gmail_quote&quot;&gt;On=\r\n Wed, Dec 9, 2009 at 19:20, Steve Bjorg &lt;span dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;ma=\r\nilto:steveb@...&quot;&gt;steveb@...&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;b=\r\nlockquote class=3D&quot;gmail_quote&quot; style=3D&quot;margin:0 0 0 .8ex;border-left:1px =\r\n#ccc solid;padding-left:1ex;&quot;&gt;\n&lt;div style=3D&quot;word-wrap:break-word&quot;&gt;&lt;div&gt;Mik=\r\ne,&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;It sounds like your library is quite similar to=\r\n the one we developed for our application as well. =A0MindTouch Dream [1] i=\r\ns a .NET framework for building portable web-services that can run as a sta=\r\nndalone process, windows service, or natively under IIS. =A0It also runs un=\r\nder Linux using Mono. =A0Dream is used by quite a few sites including Mozil=\r\nla [2], Novell [3], and Washington Post [4]. =A0The license is Apache 2.0 f=\r\nor easy reuse.&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;It&#39;s quite fun to build an ent=\r\nire application with a RESTful interface. :)&lt;/div&gt;&lt;br&gt;&lt;div&gt;\n&lt;span style=3D&quot;=\r\nborder-collapse:separate;color:rgb(0, 0, 0);font-family:Helvetica;font-size=\r\n:12px;font-style:normal;font-variant:normal;font-weight:normal;letter-spaci=\r\nng:normal;line-height:normal;text-align:auto;text-indent:0px;text-transform=\r\n:none;white-space:normal;word-spacing:0px&quot;&gt;&lt;span style=3D&quot;border-collapse:s=\r\neparate;color:rgb(0, 0, 0);font-family:Helvetica;font-size:12px;font-style:=\r\nnormal;font-variant:normal;font-weight:normal;letter-spacing:normal;line-he=\r\night:normal;text-indent:0px;text-transform:none;white-space:normal;word-spa=\r\ncing:0px&quot;&gt;&lt;div style=3D&quot;word-wrap:break-word&quot;&gt;\n&lt;span style=3D&quot;border-collap=\r\nse:separate;color:rgb(0, 0, 0);font-family:Helvetica;font-size:12px;font-st=\r\nyle:normal;font-variant:normal;font-weight:normal;letter-spacing:normal;lin=\r\ne-height:normal;text-indent:0px;text-transform:none;white-space:normal;word=\r\n-spacing:0px&quot;&gt;&lt;div style=3D&quot;word-wrap:break-word&quot;&gt;\n&lt;span style=3D&quot;border-co=\r\nllapse:separate;color:rgb(0, 0, 0);font-family:Helvetica;font-size:12px;fon=\r\nt-style:normal;font-variant:normal;font-weight:normal;letter-spacing:normal=\r\n;line-height:normal;text-indent:0px;text-transform:none;white-space:normal;=\r\nword-spacing:0px&quot;&gt;&lt;div style=3D&quot;word-wrap:break-word&quot;&gt;\n&lt;span style=3D&quot;borde=\r\nr-collapse:separate;color:rgb(0, 0, 0);font-family:Helvetica;font-size:12px=\r\n;font-style:normal;font-variant:normal;font-weight:normal;letter-spacing:no=\r\nrmal;line-height:normal;text-indent:0px;text-transform:none;white-space:nor=\r\nmal;word-spacing:0px&quot;&gt;&lt;div style=3D&quot;word-wrap:break-word&quot;&gt;\n&lt;span style=3D&quot;b=\r\norder-collapse:separate;color:rgb(0, 0, 0);font-family:Helvetica;font-size:=\r\n12px;font-style:normal;font-variant:normal;font-weight:normal;letter-spacin=\r\ng:normal;line-height:normal;text-indent:0px;text-transform:none;white-space=\r\n:normal;word-spacing:0px&quot;&gt;&lt;span style=3D&quot;border-collapse:separate;color:rgb=\r\n(0, 0, 0);font-family:Helvetica;font-size:12px;font-style:normal;font-varia=\r\nnt:normal;font-weight:normal;letter-spacing:normal;line-height:normal;text-=\r\nindent:0px;text-transform:none;white-space:normal;word-spacing:0px&quot;&gt;&lt;div st=\r\nyle=3D&quot;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:0px&quot;&gt;\n=\r\n- Steve&lt;/div&gt;&lt;div style=3D&quot;margin-top:0px;margin-right:0px;margin-bottom:0p=\r\nx;margin-left:0px&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=3D&quot;margin-top:0px;margin-right:0px;=\r\nmargin-bottom:0px;margin-left:0px&quot;&gt;[1]=A0&lt;a href=3D&quot;http://developer.mindto=\r\nuch.com/Dream&quot; target=3D&quot;_blank&quot;&gt;http://developer.mindtouch.com/Dream&lt;/a&gt;&lt;/=\r\ndiv&gt;\n&lt;div style=3D&quot;margin-top:0px;margin-right:0px;margin-bottom:0px;margin=\r\n-left:0px&quot;&gt;[2]=A0&lt;a href=3D&quot;https://developer.mozilla.org/&quot; target=3D&quot;_blan=\r\nk&quot;&gt;https://developer.mozilla.org/&lt;/a&gt;&lt;/div&gt;&lt;div style=3D&quot;margin-top:0px;mar=\r\ngin-right:0px;margin-bottom:0px;margin-left:0px&quot;&gt;\n[3]=A0&lt;a href=3D&quot;http://m=\r\nonodevelop.com/&quot; target=3D&quot;_blank&quot;&gt;http://monodevelop.com/&lt;/a&gt;&lt;/div&gt;&lt;div st=\r\nyle=3D&quot;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:0px&quot;&gt;[=\r\n4]=A0&lt;a href=3D&quot;http://whorunsgov.com/&quot; target=3D&quot;_blank&quot;&gt;http://whorunsgov=\r\n.com/&lt;/a&gt;&lt;/div&gt;\n&lt;div style=3D&quot;margin-top:0px;margin-right:0px;margin-bottom=\r\n:0px;margin-left:0px&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=3D&quot;margin-top:0px;margin-right:0=\r\npx;margin-bottom:0px;margin-left:0px&quot;&gt;--------------&lt;/div&gt;&lt;div style=3D&quot;mar=\r\ngin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:0px&quot;&gt;\nSteve G. B=\r\njorg&lt;/div&gt;&lt;div style=3D&quot;margin-top:0px;margin-right:0px;margin-bottom:0px;m=\r\nargin-left:0px&quot;&gt;&lt;a href=3D&quot;http://mindtouch.com&quot; target=3D&quot;_blank&quot;&gt;http://m=\r\nindtouch.com&lt;/a&gt;&lt;/div&gt;&lt;div style=3D&quot;margin-top:0px;margin-right:0px;margin-=\r\nbottom:0px;margin-left:0px&quot;&gt;\n&lt;a href=3D&quot;http://twitter.com/bjorg&quot; target=3D=\r\n&quot;_blank&quot;&gt;http://twitter.com/bjorg&lt;/a&gt;&lt;/div&gt;&lt;div style=3D&quot;margin-top:0px;mar=\r\ngin-right:0px;margin-bottom:0px;margin-left:0px&quot;&gt;&lt;div style=3D&quot;margin-top:0=\r\npx;margin-right:0px;margin-bottom:0px;margin-left:0px&quot;&gt;\n&lt;a href=3D&quot;http://i=\r\nrc.freenode.net&quot; target=3D&quot;_blank&quot;&gt;irc.freenode.net&lt;/a&gt; #mindtouch&lt;/div&gt;&lt;/d=\r\niv&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span=\r\n&gt;\n&lt;/div&gt;\n\n&lt;br&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;div class=3D&quot;h5&quot;&gt;&lt;div&gt;On Dec 9, 2009, a=\r\nt 2:58 PM, mike amundsen wrote:&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote type=3D&quot;ci=\r\nte&quot;&gt;\n\n\n\n&lt;div style=3D&quot;background-color:#fff&quot;&gt;\n&lt;span&gt;=A0&lt;/span&gt;\n\n\n&lt;div&gt;\n  &lt;d=\r\niv&gt;&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;div class=3D&quot;h5&quot;&gt;\n\n\n    &lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;J=F8rn=\r\n:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;This line stands out first:=A0&quot;&lt;span style=\r\n=3D&quot;font-family:Arial&quot;&gt;I have avoided Atom Links since, in my experience,=\r\n=A0these don&#39;t serialize well in the C# standard XML serializer.&quot;&lt;=\r\n/span&gt;&lt;/div&gt;\n\n&lt;div&gt;&lt;span style=3D&quot;font-family:Arial&quot;&gt;My advice is to be war=\r\ny of serializers when coding for HTTP. There are so many variances with inc=\r\noming responses I think you&#39;ll find it a real task to build apps based =\r\non =A0successfully converting incoming response bodies into code-able objec=\r\nts. Using serializers also tends to lead programmers to tight-binding betwe=\r\nen the code and the HTTP response body. This means changes in the body may =\r\nblow the serializer code. This is especially true when working with &quot;g=\r\neneric&quot; media-types such as XML and JSON, etc. since they have very li=\r\nttle semantic value built into them.&lt;/span&gt;&lt;/div&gt;\n\n&lt;div&gt;&lt;span style=3D&quot;font=\r\n-family:Arial&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=3D&quot;font-family:Arial&quot;&gt;That=\r\n leads me to another bit of advice I&#39;ll offer: think about link semanti=\r\ncs from the very start when creating your library. The Web browser client w=\r\norks because the link semantics of the HTML media-type are well-defined (an=\r\nd pretty narrow). There are a limited number of link elements. Some are in-=\r\ndoc links (IMG, LINK, SCRIPT, etc.), some are navigational links (A, FORM).=\r\n All, except FORM, are limited to using the GET method. It&#39;s the semant=\r\nic model of HTML that allows browsers to properly handle HTTP responses fro=\r\nm previously unknown locations and still provide full functionality - even =\r\na decade after the semantics where defined. I suspect you&#39;ll find that =\r\nbuilding a client to properly locate, identify, and=A0understand=A0the link=\r\n semantics of a single media type (application/vnd.movies.movie+xml) is cha=\r\nllenging by itself. Building one that handles multiple media-types just add=\r\ns to the fun&lt;g&gt;.&lt;/span&gt;&lt;/div&gt;\n\n&lt;div&gt;&lt;span style=3D&quot;font-family:Arial&quot;=\r\n&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=3D&quot;font-family:Arial&quot;&gt;I also encourage y=\r\nou to treat HTTP control data (headers) as top-level programming objects in=\r\n your library. Allowing programmers to decorate requests with control data =\r\n(content-encoding, media-type, authorization, cache-control, etc.) and have=\r\n direct access to the control data on responses will improve the flexibilit=\r\ny of any client/server built w/ your library.&lt;/span&gt;&lt;/div&gt;\n\n&lt;div&gt;&lt;span styl=\r\ne=3D&quot;font-family:Arial&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=3D&quot;Arial&quot;&gt;In the b=\r\nig picture, I prefer looking at HTTP programming from the stand-point of &q=\r\nuot;resource programming.&quot; I look for a code library that lets me defi=\r\nne a resource, associate or or more URIs with that resource, handle multipl=\r\ne representations of the resource (for both requests and response bodies), =\r\nand properly decorate requests and responses w/ control data. I also want t=\r\no make sure it handles mime-types properly (conneg included), conditional r=\r\nequests (GET and PUT), and supports flexible authentication models.=A0&lt;/fon=\r\nt&gt;&lt;/div&gt;\n\n&lt;div&gt;&lt;font face=3D&quot;Arial&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=3D&quot;Ari=\r\nal&quot;&gt;FWIW,=A0&lt;/font&gt;I started work on a REST-ful HTTP C# framework a while b=\r\nack [1]. It&#39;s been dormant for quite some time as the current version w=\r\norks well for me, but there are lots of places it needs work. I&#39;ve also=\r\n built an HTTP utilities library=A0[2]=A0with most all the bits I need for =\r\nbuilding REST-ful HTTP apps. It&#39;s smaller and lighter than my &#39;fram=\r\nework&#39; library. I mention these as some of the code there might be help=\r\nful and/or act as a cautionary tale as you work on your own projects.&lt;/div&gt;=\r\n\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;mca&lt;br&gt;&lt;a href=3D&quot;http://amundsen.com/blog/&quot; target=\r\n=3D&quot;_blank&quot;&gt;http://amundsen.com/blog/&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;[1] &lt;a href=3D&quot;=\r\nhttp://exyus.com/&quot; target=3D&quot;_blank&quot;&gt;http://exyus.com&lt;/a&gt;&lt;/div&gt;&lt;div&gt;[2]=A0&lt;=\r\na href=3D&quot;http://code.google.com/p/mikeamundsen/source/browse/#svn/trunk/Am=\r\nundsen.Utilities&quot; target=3D&quot;_blank&quot;&gt;http://code.google.com/p/mikeamundsen/s=\r\nource/browse/#svn/trunk/Amundsen.Utilities&lt;/a&gt;&lt;/div&gt;\n\n&lt;div&gt;&lt;br clear=3D&quot;all=\r\n&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;div class=3D&quot;gmail_quote&quot;&gt;On Wed, Dec 9, 2009 at 17:00, J=F8rn W=\r\nildt &lt;span dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:jw@...&quot; target=3D&quot;=\r\n_blank&quot;&gt;jw@...&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote class=3D&quot;gm=\r\nail_quote&quot; style=3D&quot;border-left:1px #ccc solid&quot;&gt;\n\n\n\n\n\n\n\n\n        \n\n\n\n\n\n\n&lt;di=\r\nv&gt;\n\n\n\n\n&lt;br&gt;&lt;br&gt;\n\n\n\n\n\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;There has been a =\r\nlot of discussion about the right \nway to implement a REST service, but les=\r\ns focus on how you would actually code a \nclient. I have been looking at RE=\r\nSTFulie[1], Subbu Alamarju[2], and the \nStarbucks[3] example, and would lik=\r\ne to discuss a similar typed approach in \nC#.&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=\r\n=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&lt;/font&gt;=A0&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;=\r\n&gt;I am experimenting with an actual implementation \nand would like some feed=\r\nback before getting too far :-)&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;=\r\nArial&quot;&gt;&lt;/font&gt;=A0&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;Thanks, J=F8rn=\r\n&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;=A0=\r\n&lt;/div&gt;\n&lt;div&gt;[1] &lt;a&gt;http://github.com/caelum/restfulie&lt;/a&gt;&lt;/div&gt;\n&lt;div&gt;[2] &lt;a=\r\n&gt;http://www.infoq.com/articles/subbu-allamaraju-rest&lt;/a&gt;&lt;/div&gt;\n&lt;div&gt;[3] &lt;a =\r\nhref=3D&quot;http://www.infoq.com/articles/webber-rest-workflow&quot; target=3D&quot;_blan=\r\nk&quot;&gt;http://www.infoq.com/articles/webber-rest-workflow&lt;/a&gt;&lt;/div&gt;\n&lt;div&gt;=A0&lt;/d=\r\niv&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&lt;/font&gt;=A0&lt;/div&gt;\n&lt;div=\r\n&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&lt;strong&gt;Service example \ndocumentation&lt;/st=\r\nrong&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;In order to discuss=\r\n a REST client we need a service \nexample. &lt;/font&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;=\r\nArial&quot;&gt;My first use case is a movie shop where \nwe can search for movies in=\r\n a specific category. To do so the shop has published \na single search serv=\r\nice URL template: &lt;a href=3D&quot;http://movies.org/movies?category=3D%7Bcategor=\r\ny&quot; target=3D&quot;_blank&quot;&gt;http://movies.org/movies?category=3D{category&lt;/a&gt;}. \n&lt;=\r\n/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&lt;/font&gt;=A0&lt;/div&gt;\n&lt;div&gt;&lt;fo=\r\nnt size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;The shop also publishes=A0three ressource mime=\r\n \ntypes:&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&lt;/font&gt;=A0&lt;/div&gt;=\r\n\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;// Example \n&quot;application/vnd.mov=\r\nies.movie+xml&quot;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&lt;M=\r\novie&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;=A0 &lt;Self \nhr=\r\nef=3D&quot;&lt;a href=3D&quot;http://movies.org/movies/91&quot; target=3D&quot;_blank&quot;&gt;http:/=\r\n/movies.org/movies/91&lt;/a&gt;&quot;/&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; fac=\r\ne=3D&quot;Arial&quot;&gt;=A0 &lt;Title&gt;Strange \nDawn&lt;/Title&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;=\r\n&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;=A0 \n&lt;Category&gt;Thriller&lt;/Category&=\r\ngt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;=A0 &lt;Director \nhre=\r\nf=3D&quot;&lt;a href=3D&quot;http://movies.org/persons/47&quot; target=3D&quot;_blank&quot;&gt;http:/=\r\n/movies.org/persons/47&lt;/a&gt;&quot;/&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; fa=\r\nce=3D&quot;Arial&quot;&gt;&lt;/Movie&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Aria=\r\nl&quot;&gt;&lt;/font&gt;=A0&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&lt;font size=3D&quot;2&quot; f=\r\nace=3D&quot;Arial&quot;&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;// Example \n&quot;appli=\r\ncation/vnd.movies.movie-collection+xml&quot;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;Movies&g=\r\nt;&lt;/div&gt;\n&lt;div&gt;=A0 &lt;Self \nhref=3D&quot;&lt;a href=3D&quot;http://movies.org/movie=\r\ns?category=3DThriller&quot; target=3D&quot;_blank&quot;&gt;http://movies.org/movies?category=\r\n=3DThriller&lt;/a&gt;&quot;/&gt;&lt;/div&gt;\n&lt;div&gt;=A0 &lt;Movie&gt;&lt;/div&gt;&lt;/font&gt;&lt;/font&gt;=\r\n&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;=A0 =A0 &lt;Title&gt;Strange \nD=\r\nawn&lt;/Title&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;=A0=A0=\r\n=A0 &lt;Self \nhref=3D&quot;&lt;a href=3D&quot;http://movies.org/movies/91&quot; target=\r\n=3D&quot;_blank&quot;&gt;http://movies.org/movies/91&lt;/a&gt;&quot;/&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;=\r\n=A0 &lt;/Movie&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;\n&lt;div&gt;=A0 &lt=\r\n;Movie&gt;...&lt;/Movie&gt;&lt;/div&gt;\n&lt;div&gt;=A0 &lt;Movie&gt;...&lt;/Movie&gt;&lt;/=\r\ndiv&gt;&lt;/Movies&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;// Example &quot;appli=\r\ncation/vnd.movies.person+xml&quot;&lt;/div&gt;\n&lt;div&gt;&lt;Person&gt;&lt;/div&gt;\n&lt;div&gt;=A0=\r\n &lt;Self href=3D&quot;&lt;a href=3D&quot;http://movies.org/persons/47&quot; target=3D&quot;_=\r\nblank&quot;&gt;http://movies.org/persons/47&lt;/a&gt;&quot;/&gt;&lt;/div&gt;\n&lt;div&gt;=A0 &lt;Name&=\r\ngt;Richard Strangelove&lt;/Name&gt;&lt;/div&gt;\n&lt;div&gt;=A0 &lt;Photo href=3D&quot;&lt;=\r\na href=3D&quot;http://facebook.com/photos/hh31y1&quot; target=3D&quot;_blank&quot;&gt;http://faceb=\r\nook.com/photos/hh31y1&lt;/a&gt;&quot;/&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/Person&gt;&lt;/div&gt;&lt;/div&gt;=\r\n\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&lt;/font&gt;=A0&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2=\r\n&quot; face=3D&quot;Arial&quot;&gt;Comments&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;=\r\n&gt;&lt;/font&gt;=A0&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;- I have avoided Ato=\r\nm Links since, in my \nexperience,=A0these don&#39;t serialize well in the C=\r\n# standard XML serializer. \nYou could although=A0create your own serializer=\r\n, so this is not an important \nrestriction.&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D=\r\n&quot;2&quot; face=3D&quot;Arial&quot;&gt;&lt;/font&gt;=A0&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;- =\r\nNotice how the person type has external \nreferences :-)&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;=\r\nfont size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&lt;/font&gt;=A0&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=\r\n=3D&quot;Arial&quot;&gt;&lt;/font&gt;=A0&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&lt;strong&gt;Co=\r\nde example - \nSearching&lt;/strong&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D=\r\n&quot;Arial&quot;&gt;The cleanest client usage I can come up with \nis:&lt;/font&gt;&lt;/div&gt;\n&lt;div=\r\n&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&lt;/font&gt;=A0&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; fac=\r\ne=3D&quot;Arial&quot;&gt;=A0 // A link (template). This should be fetched \nfrom a config=\r\nuration file.&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;=A0=A0Link =\r\nMoviesSearchLink =3D new Link(&quot;&lt;a&gt;http://movies.org/movies?category=3D=\r\n{category&lt;/a&gt;}&quot;);&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&lt;/=\r\nfont&gt;=A0&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;=A0 // Anonymous class =\r\nwith search parameters. \nReflection is used to extract values.&lt;/font&gt;&lt;/div&gt;=\r\n\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;=A0 // This is about the simplest way=\r\n to write a \n&quot;fixed hashmap&quot; in C#&lt;/font&gt;&lt;/div&gt;&lt;font size=3D&quot;2&quot; f=\r\nace=3D&quot;Arial&quot;&gt;\n&lt;div&gt;=A0 var movieSearchParameter =3D new { category =3D &qu=\r\not;Thriller&quot; };&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;=A0 // Get ressource stored =\r\nat the link endpoint&lt;/div&gt;\n&lt;div&gt;=A0 MovieCollection movies =3D \nMoviesSearc=\r\nhLink.Get&lt;MovieCollection&gt;(movieSearchParameter);&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div=\r\n&gt;\n&lt;div&gt;=A0 // Iterate over all movies and print title&lt;/div&gt;\n&lt;div&gt;=A0 foreac=\r\nh (Movie movie in movies)&lt;/div&gt;\n&lt;div&gt;=A0=A0=A0 Console.WriteLine(&quot;Titl=\r\ne: &quot; + movie.Title);&lt;br&gt;&lt;/div&gt;\n&lt;div&gt;Comments:&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;di=\r\nv&gt;- A Link is untyped. We do not know what lies at the end of it.&lt;/div&gt;\n&lt;di=\r\nv&gt;=A0&lt;/div&gt;\n&lt;div&gt;- A link knows how to merge parameters into URL templates.=\r\n&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;- The result of GETing a link is typed. The actu=\r\nal type is defined by the \nreturned mime type.&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;- =\r\nIn order to do something usefull with the search we must assume that it \nre=\r\nturns a MovieCollection. Hence the generic type specifier in the \nGet&lt;T&=\r\ngt;() method. This is apriori information=A0which I cannot see how \nto code=\r\n without.&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;&lt;strong&gt;Parsing ressourc=\r\nes&lt;/strong&gt;&lt;/div&gt;\n&lt;div&gt;One piece of magic is how Get&lt;MovieCollection&gt;=\r\n(params) knows how to \nconvert the=A0bytes returned from the endpoint to a =\r\nMovieCollection. For this \nwe create a MimeTypeRegistry:&lt;/div&gt;\n&lt;div&gt;=A0&lt;/di=\r\nv&gt;\n&lt;div&gt;=A0 MimeTypeRegistry.Register&lt;MovieCollection, \nMovieCollectionB=\r\nuilder&gt;(&quot;application/vnd.movies.movie-collection&quot;);&lt;/div&gt;\n&lt;div=\r\n&gt;=A0&lt;/div&gt;\n&lt;div&gt;which is equal to:&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;\n&lt;div&gt;=A0 Mime=\r\nTypeRegistry.Register(typeof(MovieCollection), \ntypeof(MovieCollectionBuild=\r\ner), \n&quot;application/vnd.movies.movie-collection&quot;);&lt;/div&gt;&lt;/div&gt;\n&lt;di=\r\nv&gt;=A0&lt;/div&gt;\n&lt;div&gt;This means: when ever we must parse a specific mime type, =\r\nwe look up a \nbuilder in the registry and uses this to parse the returned r=\r\nessource \nrepresentation.&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;The typed Get&lt;MovieC=\r\nollection&gt;(params) method GETs the ressource \ndata, instantiates the cor=\r\nresponding builder, verifies that the built object \ntype matches the reques=\r\nted and returns the built object.&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;Comments:&lt;/div&gt;=\r\n\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;- This is static typing which RESTafarians seems to sh=\r\ny away from. But the \ntype depends on the returned ressource, _not_ the URL=\r\n. So to my knowledge this \nis fine.&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;- It is not r=\r\nequired to use the type safe Get&lt;T&gt;(), you could also \ncall Get() whi=\r\nch returns an object. The actual returned type then depends solely \non the =\r\nmime type of the ressource, and it is up to the programmer to decide what \n=\r\nto do with it.&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;- I am quite sure you can write so=\r\nme pretty generic XML builders without \nmuch overhead.&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;=\r\n\n&lt;div&gt;- This is not limited to XML, you could add image/jpeg and other well=\r\n known \nmime types. You just need to supply a proper builder.&lt;/div&gt;\n&lt;div&gt;=\r\n=A0&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;&lt;strong&gt;Code example - Getting sub-ressources=\r\n&lt;/strong&gt;&lt;/div&gt;\n&lt;div&gt;Now we want to get information about the director of t=\r\nhe movie:&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;=A0 // One of the returned self links f=\r\nrom the search query&lt;/div&gt;\n&lt;div&gt;=A0 Link movieLink =3D movies[0].Self;&lt;/div=\r\n&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;=A0 // Get the actual movie&lt;/div&gt;\n&lt;div&gt;=A0 Movie movi=\r\ne =3D movieLink.Get&lt;Movie&gt;();&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;=A0 // Get th=\r\ne director&lt;/div&gt;\n&lt;div&gt;=A0 MoviePerson director =3D \nmovie.Director.Get&lt;M=\r\noviePerson&gt;();&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;Comments:&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n=\r\n&lt;div&gt;- There are no hard coded links here.&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;- The =\r\nonly apriori information we use is the knowledge of the types of the \nrefer=\r\nenced ressources. These types=A0are documented in the mime type in which \nt=\r\nhe links=A0are used.&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;&lt;strong&gt;Versi=\r\noning&lt;/strong&gt;&lt;/div&gt;\n&lt;div&gt;Now our wonderfull movie shop decides to be able =\r\nto sell and rate movies. \nThey do their own selling, but uses the fameous &lt;=\r\na href=3D&quot;http://ratings.org/&quot; target=3D&quot;_blank&quot;&gt;ratings.org&lt;/a&gt; service to=\r\n rate \ntheir movies. So=A0the shop=A0creates a new version of the movie mim=\r\ne \ntype:&lt;/div&gt;\n&lt;div&gt;=A0\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;\n&lt;div&gt;&lt;font si=\r\nze=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;// Example \n&quot;application/vnd.movies.movie.&lt;str=\r\nong&gt;v2&lt;/strong&gt;+xml&quot;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;=\r\n&gt;&lt;Movie&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;=A0 &lt;Se=\r\nlf \nhref=3D&quot;&lt;a href=3D&quot;http://movies.org/movies/91&quot; target=3D&quot;_blank&quot;&gt;=\r\nhttp://movies.org/movies/91&lt;/a&gt;&quot;/&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;=\r\n2&quot; face=3D&quot;Arial&quot;&gt;=A0 &lt;Title&gt;Strange \nDawn&lt;/Title&gt;&lt;/font&gt;&lt;/div&gt;=\r\n\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;=A0 \n&lt;Category&gt;Thriller&lt;/Cat=\r\negory&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;=A0 &lt;Directo=\r\nr \nhref=3D&quot;&lt;a href=3D&quot;http://movies.org/persons/47&quot; target=3D&quot;_blank&quot;&gt;=\r\nhttp://movies.org/persons/47&lt;/a&gt;&quot;/&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;=A0 &lt;Order=\r\ns href=3D&quot;&lt;a href=3D&quot;http://movies.org/movies/91/orders&quot; target=3D&quot;_bl=\r\nank&quot;&gt;http://movies.org/movies/91/orders&lt;/a&gt;&quot;/&gt;&lt;/div&gt;\n&lt;div&gt;=A0 &lt;R=\r\natings href=3D&lt;a href=3D&quot;http://ratings.org/ratings?item=3Dhttp%3a%2f%2fmov=\r\nies.org%2fmovies%2f91&quot; target=3D&quot;_blank&quot;&gt;http://ratings.org/ratings?item=3D=\r\nhttp%3a%2f%2fmovies.org%2fmovies%2f91&lt;/a&gt;/&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; =\r\nface=3D&quot;Arial&quot;&gt;&lt;/Movie&gt;&lt;/font&gt;&lt;/div&gt;&lt;/font&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div=\r\n&gt;\n&lt;div&gt;In order to service both old and new clients the shop decides to ret=\r\nurn the \ninitial movie mime type by default. Never clients should use the A=\r\nccept header \nto indicate that they want=A0the new version. The same goes f=\r\nor the movies \ncollection type.&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;Our existing clie=\r\nnt code works happily as it did before.&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;=\r\n\n&lt;div&gt;&lt;strong&gt;Code example - A new client&lt;/strong&gt;&lt;/div&gt;\n&lt;div&gt;The new clien=\r\nt code would look like this:&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;\n&lt;div&gt;&lt;font size=3D&quot;=\r\n2&quot; face=3D&quot;Arial&quot;&gt;=A0 // A link (template). This should be fetched \nfrom a =\r\nconfiguration file.&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;=A0=\r\n=A0Link MoviesSearchLink =3D new Link(&quot;&lt;a&gt;http://movies.org/movies?cat=\r\negory=3D{category&lt;/a&gt;}&quot;);&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;A=\r\nrial&quot;&gt;&lt;/font&gt;=A0&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;=A0 // Anonymou=\r\ns class with search parameters. \nReflection is used to extract values.&lt;/fon=\r\nt&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font size=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;=A0 // This is about the simp=\r\nlest way to write a \n&quot;fixed hashmap&quot; in C#&lt;/font&gt;&lt;/div&gt;&lt;font size=\r\n=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;\n&lt;div&gt;=A0 var movieSearchParameter =3D new { category=\r\n =3D &quot;thriller&quot; };&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;=A0 // Setting up th=\r\ne Accept header&lt;/div&gt;\n&lt;div&gt;=A0 var movieSearchHeaders =3D new { Accept =3D =\r\n\n&quot;application/vnd.movies.movie-collection.v2&quot; }&lt;/div&gt;\n&lt;div&gt;=A0&lt;/d=\r\niv&gt;\n&lt;div&gt;=A0 // Get ressource stored at the link endpoint&lt;/div&gt;\n&lt;div&gt;=A0 Mo=\r\nvieCollection movies =3D \nMoviesSearchLink.Get&lt;MovieCollection&gt;(movie=\r\nSearchParameter, \nmovieSearchHeaders);&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;=A0 // Ite=\r\nrate over all movies and print title&lt;/div&gt;\n&lt;div&gt;=A0 foreach (Movie movie in=\r\n movies)&lt;/div&gt;\n&lt;div&gt;=A0=A0=A0 Console.WriteLine(&quot;Title: &quot; + \nmovi=\r\ne.Title);&lt;br&gt;&lt;/div&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;&lt;strong&gt;Code example -=\r\n Buying movies&lt;/strong&gt;&lt;/div&gt;\n&lt;div&gt;Now we have a movie which has an embedde=\r\nd link to it&#39;s sales orders. To buy \na movie we post a new order to the=\r\n sales order collection:&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;\n&lt;div&gt;=A0 // One of the =\r\nreturned self links from the search query&lt;/div&gt;\n&lt;div&gt;=A0 Link movieLink =3D=\r\n movies[0].Self;&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;=A0 // Get the actual movie&lt;/div=\r\n&gt;\n&lt;div&gt;=A0 Movie movie =3D movieLink.Get&lt;Movie&gt;();&lt;/div&gt;\n&lt;div&gt;=A0&lt;/di=\r\nv&gt;\n&lt;div&gt;=A0 //=A0Create a new order request&lt;/div&gt;\n&lt;div&gt;=A0 MovieOrderReques=\r\nt orderRequest =3D new MovieOrderRequest(movie.Self, 1 \n/* quantity */);&lt;/d=\r\niv&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;=A0 // Post the order request to the order collecti=\r\non&lt;/div&gt;\n&lt;div&gt;=A0 // Assume it returns the newly created order&lt;/div&gt;\n&lt;div&gt;=\r\n=A0=A0MovieOrder order \n=3D=A0movie.Orders.Post(orderRequest);&lt;/div&gt;&lt;/div&gt;\n=\r\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;Comments:&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;- The POST result i=\r\nn a redirect to the newly created=A0order. The system \nGETs this new order =\r\nand returns it. This means we loose the intermediate data \nreturned from th=\r\ne POST.&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;&lt;strong&gt;Other verbs&lt;/stron=\r\ng&gt;&lt;/div&gt;\n&lt;div&gt;The Link class is has built-in support for GET/PUT/POST/DELET=\r\nE. Other verbs \ncan be executed through a generic &quot;Request&quot; metho=\r\nd:&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;=A0 SomeType x =3D someLink.Request(&quot;SOME=\r\nVERB&quot;, somePayload);&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;&lt;strong&gt;=\r\nCaching&lt;/strong&gt;&lt;/div&gt;\n&lt;div&gt;The Link class and it&#39;s associted methods s=\r\nhould of course respect ETag and \nif-not-modified-since etc. This would req=\r\nuire the framework to be initialized \nwith a cache implementation of some k=\r\nind.&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;&lt;strong&gt;Error handling&lt;/stron=\r\ng&gt;&lt;/div&gt;\n&lt;div&gt;I would suggest using execptions for error handling.&lt;/div&gt;\n&lt;d=\r\niv&gt;=A0&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;&lt;/font&gt;\n\n\n\n\n\n&lt;br&gt;\n\n    \n    \n&lt;br&gt;\n\n\n\n\n&lt;div width=\r\n=3D&quot;1&quot; style=3D&quot;color:white&quot;&gt;&lt;/div&gt;\n\n&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;=\r\n&lt;/div&gt;\n\n    &lt;/div&gt;\n     \n\n    \n    &lt;div style=3D&quot;color:#fff;min-height:0&quot;&gt;&lt;=\r\n/div&gt;\n\n\n&lt;/div&gt;\n\n\n\n  \n\n\n\n\n\n\n&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;=\r\n&lt;br&gt;&lt;/div&gt;\n\r\n--0015174760aa20a3aa047a54e571--\r\n\n"}}
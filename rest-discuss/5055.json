{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":212893065,"authorName":"Joe Gregorio","from":"Joe Gregorio &lt;joe.gregorio@...&gt;","profile":"JCGregorio","replyTo":"SENDER","senderId":"OcuT64J8oHsmXBTqeaD1qgtYAWsglscr7Z19L_RpWGxwy98xjMiy78NV-DR32z5TL6QgBNoG9lsWFsVfzkb1iC9v2eZ010abmEVAUQ","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Back-Button Problem and Prescod on &quot;Reliable delivery in HTTP&quot;","postDate":"1116337410","msgId":5055,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDNmMTQ1MWY1MDUwNTE3MDY0MzViMzJjMzQ5QG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PGQ2YWY5aCtzZXJ2QGVHcm91cHMuY29tPg==","referencesHeader":"PGQ2YWY5aCtzZXJ2QGVHcm91cHMuY29tPg=="},"prevInTopic":5053,"nextInTopic":0,"prevInTime":5054,"nextInTime":5056,"topicId":5051,"numMessagesInTopic":3,"msgSnippet":"... Not necessarily. The IDs can be generated programatically and can have the timestamp of when they were generated embedded within them. For example, the ID","rawEmail":"Return-Path: &lt;joe.gregorio@...&gt;\r\nX-Sender: joe.gregorio@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 12229 invoked from network); 17 May 2005 13:43:32 -0000\r\nReceived: from unknown (66.218.66.172)\n  by m30.grp.scd.yahoo.com with QMQP; 17 May 2005 13:43:32 -0000\r\nReceived: from unknown (HELO zproxy.gmail.com) (64.233.162.198)\n  by mta4.grp.scd.yahoo.com with SMTP; 17 May 2005 13:43:32 -0000\r\nReceived: by zproxy.gmail.com with SMTP id 12so423844nzp\n        for &lt;rest-discuss@yahoogroups.com&gt;; Tue, 17 May 2005 06:43:30 -0700 (PDT)\r\nReceived: by 10.36.24.7 with SMTP id 7mr114291nzx;\n        Tue, 17 May 2005 06:43:30 -0700 (PDT)\r\nReceived: by 10.36.65.4 with HTTP; Tue, 17 May 2005 06:43:30 -0700 (PDT)\r\nMessage-ID: &lt;3f1451f505051706435b32c349@...&gt;\r\nDate: Tue, 17 May 2005 09:43:30 -0400\r\nTo: Tom &lt;xeo_at_thermopylae@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nIn-Reply-To: &lt;d6af9h+serv@...&gt;\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\nContent-Disposition: inline\r\nReferences: &lt;d6af9h+serv@...&gt;\r\nX-eGroups-Msg-Info: 1:12:0\r\nFrom: Joe Gregorio &lt;joe.gregorio@...&gt;\r\nReply-To: Joe Gregorio &lt;joe.gregorio@...&gt;\r\nSubject: Re: [rest-discuss] Back-Button Problem and Prescod on &quot;Reliable delivery in HTTP&quot;\r\nX-Yahoo-Group-Post: member; u=212893065\r\nX-Yahoo-Profile: JCGregorio\r\n\r\nOn 5/16/05, Tom &lt;xeo_at_thermopylae@...&gt; wrote:\n&gt; The back-button pro=\r\nblem:\n&gt; after a form is submitted, the user may press the back button and t=\r\nhen\n&gt; re-submit the form. How can we allow only a single submission?\n&gt; \n&gt; P=\r\naul Prescod&#39;s article &quot;Reliable delivery in HTTP&quot; at\n&gt; http://www.prescod.n=\r\net/reliable_http.html describes a solution wherein\n&gt; one generates unique m=\r\nessage-IDs on the server. Each message ID is\n&gt; associated with a submission=\r\n (included in the form). I quote at length\n&gt; from the article - if you&#39;re f=\r\namiliar with the article/problem, then\n&gt; please skip to my question at bott=\r\nom:\n&gt; \n&gt; &gt;    A better strategy is to have the server generate the\n&gt; &gt;    m=\r\nessage IDs. One elegant way to do this is to have the\n&gt; &gt;    client do a PO=\r\nST asking for an message ID. The server\n&gt; &gt;    can return a &quot;Location:&quot; hea=\r\nder which points to a newly\n&gt; &gt;    generated URI where the client may POST =\r\nthe data.\n&gt; &gt;    For instance:\n&gt; &gt;    &gt;  Client request:\n&gt; &gt;         POST /=\r\nservice.cgi HTTP/1.1\n&gt; &gt;\n&gt; &gt;       Server response:\n&gt; &gt;         HTTP/1.1 20=\r\n1 CREATED\n&gt; &gt;         Location:\n&gt; &gt;         http://mysite.com/service.cgi?m=\r\nessageid=3D32868937368\n&gt; &gt;\n&gt; &gt;         POST http://mysite.com/service.cgi?m=\r\nessageid=3D32868937368\n&gt; &gt;\n&gt; &gt;    (message body here)\n&gt; &gt;\n&gt; &gt;    The reason=\r\n this works is because we are using the\n&gt; &gt;    original non-reliable POST o=\r\nnly to generate a new\n&gt; &gt;    message ID and message IDs are cheap. We can r=\r\netire\n&gt; &gt;    them (whether they have been used or not) after a\n&gt; &gt;    few h=\r\nours. They are so cheap that we could hold on\n&gt; &gt;    to them for weeks!\n&gt; &gt;=\r\n\n&gt; &gt;    A client need not worry about accidentally creating two\n&gt; &gt;    beca=\r\nuse the &quot;wasted&quot; one is irrelevant. The client also\n&gt; &gt;    need not worry a=\r\nbout accidentally posting to the\n&gt; &gt;    generated messageID URI twice becau=\r\nse the server can\n&gt; &gt;    ensure that it only acts on the first message post=\r\ned to\n&gt; &gt;    that URI. The response of subsequent POSTs should be the\n&gt; &gt;  =\r\n  same as if there had been only one POST so that the\n&gt; &gt;    client can get=\r\n the correct response even if there is\n&gt; &gt;    a network outage in the middl=\r\ne of the first response.\n&gt; \n&gt; My question:\n&gt; Using message IDs might allow =\r\na client to create new message IDs\n&gt; by spoofing the form. To prevent this,=\r\n the server must keep track of\n&gt; outstanding message IDs (and perhaps optio=\r\nnally time them out)[Prescod\n&gt; discusses this also].\n\nNot necessarily. The =\r\nIDs can be generated programatically and can\nhave the timestamp of when the=\r\ny were generated embedded within them.\n\nFor example, the ID could be\n\n ID =\r\n=3D  17052005T093800#################\n\nWhere the first part of the ID is th=\r\ne current date and time in ISO\nformat and the rest of the ID is an (MD5/SHA=\r\n-1/SHA-256, etc) hash of\nthe date/time + a secret only the server knows. Th=\r\nat is:\n\n  ID  =3D &#39;17052005T093800&#39; + hash(&#39;my secret&#39; + &#39;17052005T093800&#39;)=\r\n\n\n\n   -joe\n-- \nJoe Gregorio        http://bitworking.org\n\n"}}
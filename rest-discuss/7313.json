{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":192402827,"authorName":"Mike Dierken","from":"&quot;Mike Dierken&quot; &lt;dierken@...&gt;","profile":"mdierken","replyTo":"SENDER","senderId":"CU-XK58IA_X5SPd-3Udu_yR33Ji1ppSnzkTJQCAo7Ls_GujlfSAQs36vEi5ZTZbiKYIkES7Ik4NywTxiu1rTD2UkBrsBMgUchQ","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] AOL and REST?","postDate":"1167509614","msgId":7313,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDdjZDhlMDkzMDYxMjMwMTIxM3cxNWM3NGExOHU5NTRlZTFlMzVmMmZkMjE5QG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PDQ1OTY5MzExLjgwOTAyMDVAYW9sLm5ldD4=","referencesHeader":"PDg3cHNhNHhwOGQuZnNmQHRhcHNlbGxmZXJyaWVyLmNvLnVrPiA8NDU5NjkzMTEuODA5MDIwNUBhb2wubmV0Pg=="},"prevInTopic":7312,"nextInTopic":7319,"prevInTime":7312,"nextInTime":7314,"topicId":7292,"numMessagesInTopic":20,"msgSnippet":"First, it looks like some folks spent a good deal of time writing extensive documentation - that s very nice. Here are a couple comments: 1 Application ID The","rawEmail":"Return-Path: &lt;dierken@...&gt;\r\nX-Sender: dierken@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 61163 invoked from network); 30 Dec 2006 20:14:10 -0000\r\nReceived: from unknown (66.218.67.34)\n  by m39.grp.scd.yahoo.com with QMQP; 30 Dec 2006 20:14:10 -0000\r\nReceived: from unknown (HELO nf-out-0910.google.com) (64.233.182.187)\n  by mta8.grp.scd.yahoo.com with SMTP; 30 Dec 2006 20:14:09 -0000\r\nReceived: by nf-out-0910.google.com with SMTP id p48so5624090nfa\n        for &lt;rest-discuss@yahoogroups.com&gt;; Sat, 30 Dec 2006 12:13:34 -0800 (PST)\r\nReceived: by 10.48.48.18 with SMTP id v18mr20332815nfv.1167509614378;\n        Sat, 30 Dec 2006 12:13:34 -0800 (PST)\r\nReceived: by 10.49.33.20 with HTTP; Sat, 30 Dec 2006 12:13:34 -0800 (PST)\r\nMessage-ID: &lt;7cd8e0930612301213w15c74a18u954ee1e35f2fd219@...&gt;\r\nDate: Sat, 30 Dec 2006 12:13:34 -0800\r\nTo: &quot;John Panzer&quot; &lt;jpanzer@...&gt;\r\nCc: &quot;Nic James Ferrier&quot; &lt;nferrier@...&gt;, \n\trest-discuss@yahoogroups.com\r\nIn-Reply-To: &lt;45969311.8090205@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nContent-Disposition: inline\r\nReferences: &lt;87psa4xp8d.fsf@...&gt; &lt;45969311.8090205@...&gt;\r\nX-eGroups-Msg-Info: 1:0:0:0\r\nFrom: &quot;Mike Dierken&quot; &lt;dierken@...&gt;\r\nSubject: Re: [rest-discuss] AOL and REST?\r\nX-Yahoo-Group-Post: member; u=192402827; y=FOgXWDV6GHEL3H0Fc46mpp7taa-bCzSo30u3MUAYOhxWYqk\r\nX-Yahoo-Profile: mdierken\r\n\r\nFirst, it looks like some folks spent a good deal of time writing\nextensive documentation - that&#39;s very nice.\nHere are a couple comments:\n\n1 Application ID\nThe application-id is placed in the URI, but it does not appear to\nactually change what data is being accessed - it&#39;s not part of a data\nidentifier. An alternative would be to use the Authorization request\nheader (where username/passwords normally go) in order to specify the\napplication ID.\n Pro: closer to protocol specification for authentication\n Pro: common URI for a resource across applications provide more\nchances for caching, hyperlink references, etc.\n Con: logging/processing of requests on the server would need to\nexamine more than just the URI (hopefully this isn&#39;t a challenge for\nyour framework)\n\n2 API reference documentation\n\n2.1 Requests\nThe details of a request do not specify important details of the HTTP\nmessage. Showing a full request message with all headers would be\nuseful - merely showing the URI and calling it a &#39;request&#39; is\nincorrect.\nFor example: http://developer.searchvideo.com/method.php?name=truveo.videos.getVideos\n A) What is the the HTTP method - is it GET, POST, etc? Requests that\nmodify data should never use GET. Requests that are safely repeatable\ncan use DELETE - this allows the method to be re-submitted in case of\na network failure or if the response fails to be returned.\n B) What kind of conditional requests are supported (if-modified-since, etc)?\n C) What Accept request headers are supported - for example, does\n&quot;Accept: text/javascript&quot; work?\n D) Details about authentication, or a pointer to an appropriate\nsection on authentication would be helpful.\n\nIn addition, it&#39;s important to separate concept of &#39;resource&#39; from\n&#39;method&#39;. You can send several methods to a single resource - GET,\nPOST, etc. Often it helps to think of resources as collections that\ncan be retrieved, added to or removed completely.\nMost of the documented requests have &#39;get&#39;, &#39;add&#39;, &#39;modify&#39; or\n&#39;remove&#39; in their name - these should be phrased as HTTP methods (GET,\nPOST, DELETE) and the method= parameter turned into &#39;type=&#39; or\nsomething.\nHere is an example where one resource (one URI) could have several\nsupported methods (there would be additional query terms on these\nparticular resources):\n getRecentVideos() : /apiv3?method=truveo.users.getRecentVideos -&gt; GET\n/apiv3?type=RecentVideos\n addRecentVideo() : /apiv3?method=truveo.users.addRecentVideo -&gt; POST\n/apiv3?type=RecentVideos\n clearRecentVideos() : /apiv3?method=truveo.users.clearRecentVideos -&gt;\nDELETE /apiv3?type=RecentVideos\n\n\n2.2 Responses\nThe details of a response are not fully specified. For example, this\npage http://developer.searchvideo.com/method.php?name=truveo.videos.getVideos\nlists a set of error codes, but there is no description of how the\nerror codes are returned.\nOther aspects of an HTTP response that should be described:\n A) status codes - describe error situations and what response code\nwill be returned. For example, many internal error codes listed should\nresult in a status code of &quot;404 Resource Not Found&quot; along with a\nresponse body with details (perhaps containing those internal error\ncodes), others may result in &quot;401 Unauthorized&quot;. See\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html for details.\n(Note - you probably could simplify the set of internal error codes if\nyou didn&#39;t use numbers but returned the actual name of the parameter\nthat was invalid.)\n B) content type - what MIME type will be returned (I assume it&#39;s\n&quot;application/xml&quot;, but it could be something else).\n C) cache control - what caching support is provided?\n\n3 User Sign In\nConsidering security and privacy of end-users is very good. However,\nthe approach of &#39;signing in&#39; seems odd, complex and not at all a\nservice API. Specifically, the authentication specification describes\nonly how to redirect a user&#39;s web browser to a particular page. For\nnon-browser based applications, this would be unhelpful.\nEssentially, the user&#39;s username/password is submitted via HTTPS and a\nresponse has a Location: header with a URI with an auth=[something]\nquery term. That auth value is then used to generate a token that\n(temporarily) identifies the user, which is then later used in other\nuser-specific requests.\n\n\n\nOn 12/30/06, John Panzer &lt;jpanzer@...&gt; wrote:\n&gt; Nic James Ferrier wrote:\n&gt;\n&gt; &gt;I got an email from someone at a well known publishing house asking me\n&gt; &gt;to write articles about AOL stuff.\n&gt; &gt;\n&gt; &gt;AOL have this strategy - they&#39;re going to be more open. They&#39;ve\n&gt; &gt;developed a bunch of APIs that they think make this happen.\n&gt; &gt;\n&gt; &gt;Said publishing house has been hired to put editorial on this\n&gt; &gt;together.\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;So I looked at one of AOLs offerings:\n&gt; &gt;\n&gt; &gt;  http://dev.aol.com/aol_video/index.html\n&gt; &gt;\n&gt; &gt;There&#39;s a REST API!\n&gt; &gt;\n&gt; &gt;  http://dev.aol.com/aol_video/index.html\n&gt; &gt;\n&gt; &gt;Except this isn&#39;t REST. It isn&#39;t even HTTP for God&#39;s sake. It&#39;s just\n&gt; &gt;stupid. There are methods embedded in the URIs. Everything is done\n&gt; &gt;with GET. We were just talking about how stupid that was.\n&gt; &gt;\n&gt; &gt;\n&gt; I work for AOL, and believe me I&#39;ve mentioned that this isn&#39;t a REST\n&gt; API.  (It&#39;s an RPC-over-http API.)  I think that for you to provide this\n&gt; feedback to the publishing house would be good.  It&#39;s unhelpful to\n&gt; mislabel things.\n&gt;\n&gt; I&#39;d be happy to hear about specific issues that we could bring back to\n&gt; the development team in question.  A general suggestion to use REST\n&gt; style interfaces could be helpful; demand from the developer community\n&gt; is important.  At the moment a big focus is on making things available\n&gt; via in-browser JSON calls (which I just noticed they amusingly call the\n&gt; &#39;AJAX&#39; API).\n&gt;\n&gt; The APIs are definitely incomplete and only a portion of them are\n&gt; documented on dev.aol.com.  Please consider it a work in progress.\n&gt;\n&gt; -John\n&gt;\n&gt;\n&gt;\n&gt; Yahoo! Groups Links\n&gt;\n&gt;\n&gt;\n&gt;\n\n"}}
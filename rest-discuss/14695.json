{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":352334505,"authorName":"Craig McClanahan","from":"Craig McClanahan &lt;craigmcc@...&gt;","profile":"craig_mcclanahan","replyTo":"SENDER","senderId":"jXK1ElPQe-uCUIE2TFYBDwPm4yK6oafEXavI56kdti8SM_CS4zuC1AQfYG0JXVVuQp60xIojw29udFs1mgtH3_hxkvmcyOdj6tTkjQ","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Deigning representations of collections and \treferences","postDate":"1264666035","msgId":14695,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGY4YjM5YWNlMTAwMTI4MDAwN3YyZjgzNTRjYm8yODA5M2MzODkxNzEyMTAzQG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PDIwMTAwMTI4MDAwNzU0LmQ1ODhkZTUxLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","referencesHeader":"PGhqcWNrNStidjc1QGVHcm91cHMuY29tPgkgPDIwMTAwMTI4MDAwNzU0LmQ1ODhkZTUxLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4="},"prevInTopic":14694,"nextInTopic":14696,"prevInTime":14694,"nextInTime":14696,"topicId":14691,"numMessagesInTopic":15,"msgSnippet":"... I agree that Atom is a useful model for understanding how to represent collections.  But, every time I try to use it in anger, I keep running into some","rawEmail":"Return-Path: &lt;craigmcc@...&gt;\r\nX-Sender: craigmcc@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 95740 invoked from network); 28 Jan 2010 08:07:15 -0000\r\nX-Received: from unknown (98.137.34.44)\n  by m3.grp.sp2.yahoo.com with QMQP; 28 Jan 2010 08:07:15 -0000\r\nX-Received: from unknown (HELO mail-px0-f177.google.com) (209.85.216.177)\n  by mta1.grp.sp2.yahoo.com with SMTP; 28 Jan 2010 08:07:15 -0000\r\nX-Received: by pxi7 with SMTP id 7so337469pxi.31\n        for &lt;rest-discuss@yahoogroups.com&gt;; Thu, 28 Jan 2010 00:07:15 -0800 (PST)\r\nMIME-Version: 1.0\r\nX-Received: by 10.142.119.5 with SMTP id r5mr1054677wfc.148.1264666035477; Thu, \n\t28 Jan 2010 00:07:15 -0800 (PST)\r\nIn-Reply-To: &lt;20100128000754.d588de51.eric@...&gt;\r\nReferences: &lt;hjqck5+bv75@...&gt;\n\t &lt;20100128000754.d588de51.eric@...&gt;\r\nDate: Thu, 28 Jan 2010 00:07:15 -0800\r\nMessage-ID: &lt;f8b39ace1001280007v2f8354cbo28093c3891712103@...&gt;\r\nTo: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nCc: piers_lawson &lt;Piers@...&gt;, rest-discuss@yahoogroups.com\r\nContent-Type: multipart/alternative; boundary=001636e0b898cddd28047e3501d5\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Craig McClanahan &lt;craigmcc@...&gt;\r\nReply-To: craigmcc@...\r\nSubject: Re: [rest-discuss] Deigning representations of collections and \n\treferences\r\nX-Yahoo-Group-Post: member; u=352334505; y=C-HETg7Tz6KY539mYDpJ9xbMwhkB1iftB73H0zkjPjuylNFuL7CS1vmCLA\r\nX-Yahoo-Profile: craig_mcclanahan\r\n\r\n\r\n--001636e0b898cddd28047e3501d5\r\nContent-Type: text/plain; charset=ISO-8859-1\r\n\r\nOn Wed, Jan 27, 2010 at 11:07 PM, Eric J. Bowman &lt;eric@...&gt;wrote:\n\n&gt;\n&gt;\n&gt; &quot;piers_lawson&quot; wrote:\n&gt; &gt;\n&gt; &gt; Hi I&#39;ve been looking for advice on how to design the representation\n&gt; &gt; of a collection of references.\n&gt; &gt;\n&gt;\n&gt; Look no further than RFC 4287.\n&gt;\n&gt;\nI agree that Atom is a useful model for understanding how to represent\ncollections.  But, every time I try to use it in anger, I keep running into\nsome frustrations:\n\n * Atom is XML only -- I find JSON much easier for a general client base to\ndeal with.\n\n* Even when I&#39;m willing to deal with XML formats, it is pretty clumsy to\nrepresent\n  application specific content types -- you&#39;re pretty much talking about\ncustom\n  XML namespaces, or about leveraging the XML &quot;any&quot; elements in the Atom\nschema,\n  which also basically negates the idea that a generic client is going to be\nable to\n  understand much about a particular message.\n\n* There are a bunch of required attributes in the Atom &quot;envelope&quot; around the\n  content that make perfect sense for the original use case (blog postings)\n  but do not always make sense for particular application use cases.\n\n* Yes, the concept of a standardized &lt;link&gt; element is quite useful for\nexpressing\n  relationships between representations (and I like the idea that you can\ndefine\n  your own &quot;rel&quot; values).  But ...\n\n  - You can have the same benefits in roll-your-own representations by\n    emulating the &lt;link&gt; semantics in some appropriate local syntax.\n\n  - Generic clients are not going to understand the semantics of custom\n&quot;rel&quot;\n    values anyway, so what is the value of packaging them in the standard\n    Atom envelope?\n\nBottom line, I like the overall design paradigm that Atom defines, with well\ndefined semantics for the various CRUD operations that are almost univeral\nacross applications.  But, adhering to 4287 (versus my own custom collection\nrepresentation that shares the spirit of the &lt;link&gt; element for cross\nreferencing) doesn&#39;t seem to add huge amounts of value.  You&#39;re right, a\ngeneric Atom client might understand the coarse grained message structure of\nan &quot;application/atom+xml;type=feed&quot; media type, but I have a hard time\nseeing why this matters if the client can&#39;t understand the actual\nrepresentation inside the &lt;atom:content&gt; element (or the equivalent custom\nXML elements that the &quot;any&quot; construct in the schema allows) anyway.\n\nFor my own APIs (at least so far), I&#39;ve followed these principles:\n\n* Design a custom representation, with a custom media type,\n  for each individual data object &quot;class&quot;.\n\n* Within the representation, include an extensible structure\n  akin to the Atom &lt;link&gt; element, to define relationships\n  between representations (as well as links to trigger state changers)\n  but without the extra baggage of &quot;required&quot; Atom elements that\n  are not relevant to the application specific use cases\n  (let alone the limitation to use XML).\n\n* Design an additional representation, with a &quot;plural&quot; name in\n  the media type, for collections of the same type of data object.\n  In XML, this would typically be something like as &lt;customers&gt;\n  element around zero or more &lt;customer&gt; elements, with a\n  media type like &quot;application/vnd.com.example.myapp.Customers+xml&quot;\n  (or +json) for the collection, and\n&quot;application/vnc.com.example.myap.Customer+xml&quot;\n  for the representation of an individual customer.\n\nI am aware that there are reasonable-sounding arguments for using &quot;standard&quot;\nrepresentation formats when they are available.  I&#39;m just not sold on the\nvalue, at least for the APIs I have been involved in so far.\n\nCraig McClanahan\n\r\n--001636e0b898cddd28047e3501d5\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;br&gt;&lt;br&gt;\n&lt;div class=3D&quot;gmail_quote&quot;&gt;On Wed, Jan 27, 2010 at 11:07 PM, Eric =\r\nJ. Bowman &lt;span dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:eric@...&quot; ta=\r\nrget=3D&quot;_blank&quot;&gt;eric@...&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;\n&lt;blockquote=\r\n style=3D&quot;BORDER-LEFT: #ccc 1px solid; MARGIN: 0px 0px 0px 0.8ex; PADDING-L=\r\nEFT: 1ex&quot; class=3D&quot;gmail_quote&quot;&gt;\n&lt;div style=3D&quot;BACKGROUND-COLOR: #fff&quot;&gt;&lt;spa=\r\nn&gt;=A0&lt;/span&gt; \n&lt;div&gt;\n&lt;div&gt;\n&lt;div&gt;\n&lt;p&gt;\n&lt;div&gt;&quot;piers_lawson&quot; wrote:&lt;br=\r\n&gt;&gt; &lt;br&gt;&gt; Hi I&#39;ve been looking for advice on how to design the rep=\r\nresentation&lt;br&gt;&gt; of a collection of references.&lt;br&gt;&gt; &lt;br&gt;&lt;br&gt;&lt;/div&gt;Lo=\r\nok no further than RFC 4287. \n&lt;div&gt;&lt;br&gt;&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;=\r\n&lt;/div&gt;&lt;/blockquote&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;I agree that Atom is a=A0useful mod=\r\nel for understanding how to=A0represent collections.=A0 But, every time I t=\r\nry to use it in anger, I keep running into some frustrations:&lt;/div&gt;\n&lt;div&gt;=\r\n=A0&lt;/div&gt;\n&lt;div&gt;\n&lt;div&gt;* Atom is XML only -- I find JSON much easier for a ge=\r\nneral client base to deal with.&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;* Even when I&#39=\r\n;m willing to deal with XML formats, it is pretty clumsy to represent&lt;/div&gt;=\r\n\n&lt;div&gt;=A0 application specific content types -- you&#39;re pretty much talk=\r\ning about custom&lt;/div&gt;\n&lt;div&gt;=A0 XML namespaces, or about leveraging the XML=\r\n &quot;any&quot; elements in the Atom schema,&lt;/div&gt;\n&lt;div&gt;=A0 which also bas=\r\nically negates the idea that a generic client is going to be able to&lt;/div&gt;\n=\r\n&lt;div&gt;=A0 understand much about a particular message.&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;* =\r\nThere are a bunch of required attributes in the Atom &quot;envelope&quot; a=\r\nround the&lt;/div&gt;\n&lt;div&gt;=A0 content that make perfect sense for the original u=\r\nse case (blog postings)&lt;/div&gt;\n&lt;div&gt;=A0 but do not always make sense for par=\r\nticular application use cases.&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;* Yes, the concept=\r\n of a standardized &lt;link&gt; element is quite useful for expressing&lt;/div=\r\n&gt;\n&lt;div&gt;=A0 relationships between representations (and I like the idea that =\r\nyou can define&lt;/div&gt;\n&lt;div&gt;=A0 your own &quot;rel&quot; values).=A0 But ...&lt;=\r\n/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;=A0 - You can have the same benefits in roll-your=\r\n-own representations by&lt;/div&gt;\n&lt;div&gt;=A0=A0=A0 emulating the &lt;link&gt; sem=\r\nantics in some appropriate local syntax.&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;=A0 - Ge=\r\nneric clients are not going to understand the semantics of custom &quot;rel=\r\n&quot;&lt;/div&gt;\n&lt;div&gt;=A0=A0=A0 values anyway, so what is the value of packagin=\r\ng them in the standard&lt;/div&gt;\n&lt;div&gt;=A0=A0=A0 Atom envelope?&lt;/div&gt;\n&lt;div&gt;=A0&lt;/=\r\ndiv&gt;\n&lt;div&gt;Bottom line, I like the overall design paradigm that Atom defines=\r\n, with well defined semantics for the various CRUD operations that are almo=\r\nst univeral across applications.=A0 But, adhering to 4287 (versus my own cu=\r\nstom collection representation that shares the spirit of the &lt;link&gt; e=\r\nlement for cross referencing) doesn&#39;t seem to add huge amounts of value=\r\n.=A0 You&#39;re right, a generic Atom client might understand the coarse gr=\r\nained message structure of an &quot;application/atom+xml;type=3Dfeed&quot; =\r\nmedia type, but I have a hard time seeing why this matters if the client ca=\r\nn&#39;t understand the actual representation inside the &lt;atom:content&gt=\r\n; element (or the equivalent custom XML=A0elements=A0that the &quot;any&quo=\r\nt; construct in=A0the schema allows)=A0anyway.&lt;/div&gt;\n\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;F=\r\nor my own APIs (at least so far), I&#39;ve followed these principles:&lt;/div&gt;=\r\n\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;* Design a custom representation, with a custom media =\r\ntype,&lt;/div&gt;\n&lt;div&gt;=A0 for each individual data object &quot;class&quot;.&lt;/di=\r\nv&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;* Within the representation, include an extensible s=\r\ntructure&lt;/div&gt;\n&lt;div&gt;=A0 akin to the Atom &lt;link&gt; element, to define re=\r\nlationships&lt;/div&gt;\n&lt;div&gt;=A0 between representations (as well as links to tri=\r\ngger state changers)&lt;/div&gt;\n&lt;div&gt;=A0 but without the extra baggage of &quot;=\r\nrequired&quot; Atom elements that&lt;/div&gt;\n&lt;div&gt;=A0 are not relevant to the ap=\r\nplication specific use cases&lt;/div&gt;\n&lt;div&gt;=A0 (let alone the limitation to us=\r\ne XML).&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;* Design an additional representation, wi=\r\nth a &quot;plural&quot; name in&lt;/div&gt;\n&lt;div&gt;=A0 the media type, for collecti=\r\nons of the same type of data object.&lt;/div&gt;\n&lt;div&gt;=A0 In XML, this would typi=\r\ncally be something like as &lt;customers&gt;&lt;/div&gt;\n&lt;div&gt;=A0 element around =\r\nzero or more &lt;customer&gt; elements, with a&lt;/div&gt;\n&lt;div&gt;=A0 media type li=\r\nke &quot;application/vnd.com.example.myapp.Customers+xml&quot;&lt;/div&gt;\n&lt;div&gt;=\r\n=A0 (or +json) for the collection, and &quot;application/vnc.com.example.my=\r\nap.Customer+xml&quot;&lt;/div&gt;\n&lt;div&gt;=A0 for the representation of an individua=\r\nl customer.&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;I am aware that there are reasonable-=\r\nsounding arguments for using &quot;standard&quot; representation formats wh=\r\nen they are available.=A0 I&#39;m just not sold on the value, at least for =\r\nthe APIs I have been involved in so far.&lt;/div&gt;\n\n&lt;div&gt;=A0&lt;/div&gt;\n&lt;div&gt;Craig M=\r\ncClanahan&lt;/div&gt;\n&lt;div&gt;=A0&lt;/div&gt;&lt;/div&gt;\n\r\n--001636e0b898cddd28047e3501d5--\r\n\n"}}
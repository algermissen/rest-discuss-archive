{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"aKO5CVYI8f-4wXwda5uZhwPVZMoyrqdX5aAqhEqUFTzkapttnZDIh08t9K8vLkImweWKrjlmTX9Ey-Xpf9I6XsvMT37Wvk1TGzYdPo9VlA","spamInfo":{"isSpam":false,"reason":"6"},"subject":"Re: [rest-discuss] Content types and links","postDate":"1346989978","msgId":19047,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMTIwOTA2MjE1MjU4LmU4MDUzNTY0LmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","inReplyToHeader":"PENBQzlSUXRpZ2NCZVctcG49V2Ffd1J0cjk5UjVWUDArSlRYLVl2cTQzaTc2aStTcXFxUUBtYWlsLmdtYWlsLmNvbT4=","referencesHeader":"PENBQzlSUXRnSHc3OF83X1U2aVhkbXlfYlhRaEg0WUVnQUdtOSt0YU1vbVdKd0VyeDNOZ0BtYWlsLmdtYWlsLmNvbT4JPDIwMTIwOTA2MTY0NDI0Ljg5NTNmNDc2LmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPENBQzlSUXRpZ2NCZVctcG49V2Ffd1J0cjk5UjVWUDArSlRYLVl2cTQzaTc2aStTcXFxUUBtYWlsLmdtYWlsLmNvbT4="},"prevInTopic":19046,"nextInTopic":19048,"prevInTime":19046,"nextInTime":19048,"topicId":19044,"numMessagesInTopic":8,"msgSnippet":"... Decide whatever you want, provided you understand the ramifications. Tools will eventually grok the +json media type suffix.  REST is about long-term","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 21792 invoked from network); 7 Sep 2012 03:53:09 -0000\r\nX-Received: from unknown (98.137.34.45)\n  by m8.grp.sp2.yahoo.com with QMQP; 7 Sep 2012 03:53:09 -0000\r\nX-Received: from unknown (HELO mxout-08.mxes.net) (216.86.168.183)\n  by mta2.grp.sp2.yahoo.com with SMTP; 7 Sep 2012 03:53:08 -0000\r\nX-Received: from bigbison (unknown [65.117.211.162])\n\t(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))\n\t(No client certificate requested)\n\tby smtp.mxes.net (Postfix) with ESMTPSA id 277B650A64;\n\tThu,  6 Sep 2012 23:53:07 -0400 (EDT)\r\nDate: Thu, 6 Sep 2012 21:52:58 -0600\r\nTo: Greg Young &lt;gregoryyoung1@...&gt;\r\nCc: Rest List &lt;rest-discuss@yahoogroups.com&gt;\r\nMessage-Id: &lt;20120906215258.e8053564.eric@...&gt;\r\nIn-Reply-To: &lt;CAC9RQtigcBeW-pn=Wa_wRtr99R5VP0+JTX-Yvq43i76i+SqqqQ@...&gt;\r\nReferences: &lt;CAC9RQtgHw78_7_U6iXdmy_bXQhH4YEgAGm9+taMomWJwErx3Ng@...&gt;\n\t&lt;20120906164424.8953f476.eric@...&gt;\n\t&lt;CAC9RQtigcBeW-pn=Wa_wRtr99R5VP0+JTX-Yvq43i76i+SqqqQ@...&gt;\r\nOrganization: Bison Systems Corporation\r\nX-Mailer: Sylpheed 3.1.1 (GTK+ 2.10.14; i686-pc-mingw32)\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=US-ASCII\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:6:0:0:0\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nSubject: Re: [rest-discuss] Content types and links\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\nGreg Young wrote:\n&gt; \n&gt; We have sat on the fence for a while about how to handle content type\n&gt; here as there is no &#39;good&#39; answer. If I do as x. I break tools. If I\n&gt; don&#39;t I break &quot;rest&quot;. I have still not made a decision on how to\n&gt; handle this.\n&gt; \n\nDecide whatever you want, provided you understand the ramifications.\nTools will eventually grok the +json media type suffix.  REST is about\nlong-term design, there&#39;s nothing wrong with having to wait a few years\nfor standardization to catch up. When it does you&#39;ll hopefully not have\npainted yourself into a legacy-support corner, by failing to anticipate\nchange or planning how to accommodate it when it comes, in the design\nphase.\n\n&gt;\n&gt; The interesting bit to me was if I am in that format (and we assume\n&gt; you are coming to me to read a feed)  do the others have value?\n&gt; \n\nI don&#39;t think there&#39;s much value to having multiple serializations,\nseems more like something folks do in order to check boxes for feature\nsupport, mostly.  If you&#39;re running an origin server and offering a\nJSON serialization for Atom content, anyone building a client to consume\nthat JSON will have their client break if/when you change syntax to\nsupport a standardized solution, due to tight coupling -- which isn&#39;t an\nissue when standard media types are adhered to.\n\nWhereas, if you only offer Atom, client developers can always add a\nlayer (using, say, XSLT) which transforms your Atom into their desired\nJSON.  If/when a standardized solution to that problem evolves, the\nclient developer can decide whether or not to support it -- nothing\nbreaks, so you&#39;re not in a position where you need to support legacy\ncode by adding conneg on application/x.atom+json vs. application/atom+\njson, which increases the complexity of your system.\n\nI don&#39;t know your requirements, but I&#39;d wait until the desired feature\n(Atom serialized as JSON) actually exists before implementing it, rather\nthan trying to hit a moving target.  Once application/atom+json is\nnailed down, it&#39;s easy enough to add in support to please client\ndevelopers, without the extra complexity of supporting legacy code.\nClient developers can then remove their transformation layer, and change\ntheir Accept: header to request atom+json instead of atom+xml.\n\nIn the meantime, there are benefits to be had from serving Atom as Atom,\nwhich are a long ways off for Atom serialized as JSON.  Intermediaries\naren&#39;t just caches, those with knowledge of Atom can prefetch DNS\nlookups, or atom:entry documents, or images etc. while third-party\nsystems (i.e. Google) know how to handle (index, subscribe to) your\ndata.  As a REST true believer, I don&#39;t see the benefit of trading away\nthis global, ubiquitous support of any system for the sake of easier\ndevelopment of tightly-coupled clients.  Or, for byte shaving, which is\na moot point when compression and caching are considered.\n\nhttp://tech.groups.yahoo.com/group/rest-discuss/message/8873\n\nPut another way, REST enables serendipitous re-use by all sorts of apps\nwhich have no knowledge of your system specifics.  Why give that up to\nsupport the comparatively tiny number of applications developed\nspecifically for your system?  OK, sure, you can use conneg, but if the\ntiny number of purpose-built clients accounts for most of your users\nyou&#39;re just shooting yourself in the foot -- their usage won&#39;t be\naccelerated via serendipitous re-use, and will degrade cache efficiency\nfor any ubiquitous-media-type representations you&#39;re serving.\n\nI think when Roy says &quot;engineer for serendipity&quot; it applies to runtime,\nbut is commonly misinterpreted to apply to design-time, which has led\nlots of folks to implement multiple serializations.  I don&#39;t think Roy\nmeans &quot;make it easier for third parties to write clients&quot; so much as\n&quot;support those clients already existing as part of the deployed\ninfrastructure&quot; because that&#39;s what allows a system to truly scale.  By\ndoing so, your system will automatically support any new clients added\nto the deployed infrastructure, which are based on the same standards\nyou&#39;ve adhered to.  You don&#39;t need to know about them, and they don&#39;t\nneed to know about you, which sounds pretty serendipitous to me.\n\nBy clients, I mean both client connectors on intermediaries, and such\nthings as googlebot.  Target those by using ubiquitous media types which\nproperly describe the linking/embedding semantics of your data.\n\n-Eric\n\n"}}
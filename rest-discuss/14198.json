{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":267214845,"authorName":"Noah Campbell","from":"Noah Campbell &lt;noahcampbell@...&gt;","profile":"noahsingleton","replyTo":"SENDER","senderId":"uUHLoSnN-0FMGUyopyiR4g4Cb5E84rgc-MGTs-9au8pXj2Rw1VIwhCE0MMMHW792trcvinO_npTvIFuXQbturxPiSVlha4OKwR4g_3Y","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] RESTful M2M Systems and Resource Typing","postDate":"1261120561","msgId":14198,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGRlNzBiMzlkMDkxMjE3MjMxNmcyOTdmOTMyMXk4MTVhNjhkYzI5ZmEyZTlmQG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PDA5MERENTFCLTNENzUtNDU5Qy1CNTJDLTYxMEU3MzNGNEIwOEBtYWMuY29tPg==","referencesHeader":"PENCNEU1MkVDLTQ2RTktNDhFNC05QkY2LTVFNUVFMjg1NDM4OEBtYWMuY29tPgkgPGI1NDhkZjY1MDkxMjE2MDkxMWoxYWEwN2Q2ZHFhOGQxMjU5ZmE3Mjc0ODcwQG1haWwuZ21haWwuY29tPgkgPDM5MTVjNjlkMDkxMjE2MTAzOXA3NWRkMzcxZGtmY2QyYmViODBjY2E4ZTk4QG1haWwuZ21haWwuY29tPgkgPDkxNkFENTIxLTVGRjEtNEU5Mi1BMUJELTVDNTJCREE5RDIzMUBtYWMuY29tPgkgPGRlNzBiMzlkMDkxMjE2MTQ0OHQ0NmMxODJhY2piMTU3MjI3NjU2NDg2OWM2QG1haWwuZ21haWwuY29tPgkgPDc1ODRGNzdDLUVFNjYtNDdBQS1CRUZFLUZGRkIzQjQwOEQyOUBtYWMuY29tPgkgPDM5MTVjNjlkMDkxMjE2MTYyOHA2NzliMWJmYm05NTU3NzdjMzRkY2U1NzdlQG1haWwuZ21haWwuY29tPgkgPEYyOEE5N0JBLTlGMjYtNDkzNC05QTZELUQ3QTY2RTg1QjkyREBtYWMuY29tPgkgPDM5MTVjNjlkMDkxMjE2MTgxMnU2MDlmZmEyOWczMWYzYmFjYzg4YjY0YjNmQG1haWwuZ21haWwuY29tPgkgPDA5MERENTFCLTNENzUtNDU5Qy1CNTJDLTYxMEU3MzNGNEIwOEBtYWMuY29tPg=="},"prevInTopic":14197,"nextInTopic":14199,"prevInTime":14197,"nextInTime":14199,"topicId":14156,"numMessagesInTopic":134,"msgSnippet":"And now - how do you code from here without relying on the fact that AtomPub tells you that collections come as Atom feeds? When interrogating the service","rawEmail":"Return-Path: &lt;noahcampbell@...&gt;\r\nX-Sender: noahcampbell@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 99501 invoked from network); 18 Dec 2009 07:16:02 -0000\r\nX-Received: from unknown (98.137.34.45)\n  by m1.grp.sp2.yahoo.com with QMQP; 18 Dec 2009 07:16:02 -0000\r\nX-Received: from unknown (HELO mail-px0-f186.google.com) (209.85.216.186)\n  by mta2.grp.sp2.yahoo.com with SMTP; 18 Dec 2009 07:16:02 -0000\r\nX-Received: by pxi16 with SMTP id 16so1872880pxi.25\n        for &lt;rest-discuss@yahoogroups.com&gt;; Thu, 17 Dec 2009 23:16:02 -0800 (PST)\r\nMIME-Version: 1.0\r\nX-Received: by 10.142.7.10 with SMTP id 10mr2381859wfg.137.1261120561681; Thu, \n\t17 Dec 2009 23:16:01 -0800 (PST)\r\nIn-Reply-To: &lt;090DD51B-3D75-459C-B52C-610E733F4B08@...&gt;\r\nReferences: &lt;CB4E52EC-46E9-48E4-9BF6-5E5EE2854388@...&gt;\n\t &lt;b548df650912160911j1aa07d6dqa8d1259fa7274870@...&gt;\n\t &lt;3915c69d0912161039p75dd371dkfcd2beb80cca8e98@...&gt;\n\t &lt;916AD521-5FF1-4E92-A1BD-5C52BDA9D231@...&gt;\n\t &lt;de70b39d0912161448t46c182acjb1572276564869c6@...&gt;\n\t &lt;7584F77C-EE66-47AA-BEFE-FFFB3B408D29@...&gt;\n\t &lt;3915c69d0912161628p679b1bfbm955777c34dce577e@...&gt;\n\t &lt;F28A97BA-9F26-4934-9A6D-D7A66E85B92D@...&gt;\n\t &lt;3915c69d0912161812u609ffa29g31f3bacc88b64b3f@...&gt;\n\t &lt;090DD51B-3D75-459C-B52C-610E733F4B08@...&gt;\r\nDate: Thu, 17 Dec 2009 23:16:01 -0800\r\nMessage-ID: &lt;de70b39d0912172316g297f9321y815a68dc29fa2e9f@...&gt;\r\nTo: Jan Algermissen &lt;algermissen1971@...&gt;\r\nCc: Will Hartung &lt;willh@...&gt;, mike amundsen &lt;mamund@...&gt;, \n\tREST Discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Type: multipart/alternative; boundary=00504502aca519154a047afb83f6\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Noah Campbell &lt;noahcampbell@...&gt;\r\nSubject: Re: [rest-discuss] RESTful M2M Systems and Resource Typing\r\nX-Yahoo-Group-Post: member; u=267214845; y=sDj5XKXtAWLDhN4hRWh7JL3KTXHPKl-N7Pw1UmakEV4nGI8rwQ7UXw\r\nX-Yahoo-Profile: noahsingleton\r\n\r\n\r\n--00504502aca519154a047afb83f6\r\nContent-Type: text/plain; charset=UTF-8\r\n\r\n&quot;And now - how do you code from here without relying on the fact that\nAtomPub tells you that collections come as Atom feeds?&quot;\n\nWhen interrogating the service document, check out the accept element in the\ncollection:\nhttp://bitworking.org/projects/atom/rfc5023.html#rfc.section.8.3.4.  You\nmentioned categories which is another means, but it may be a red herring in\nthe M2M example.\n\nAlso, when you say GET /orders, you&#39;re implying an accept header of */*.\n You need the equivalent of a human brain to process whatever returned.\n Instead, do the following:\n\nGET /orders\nAccept: application/order+xml; q=0.8, image/png\n\nWithout those constraints on the request, I could understand the line of\nquestioning about how a service can get a document it know&#39;s how to process.\n\n-Noah\n\nOn Thu, Dec 17, 2009 at 5:21 AM, Jan Algermissen &lt;algermissen1971@...&gt;wrote:\n\n&gt;\n&gt; On Dec 17, 2009, at 3:12 AM, Will Hartung wrote:\n&gt;\n&gt;  In an M2M scenario, ALL APIs are &quot;tightly coupled&quot;. That&#39;s just the\n&gt;&gt; fact of it. APIs are contacts. Change the contract, bad things happen.\n&gt;&gt; Design APIs with growth and flexibility in mind, and you can have a\n&gt;&gt; more forgiving client/server experience.\n&gt;&gt;\n&gt;\n&gt; Agreed. I just think that we are making a mistake when we claim that REST\n&gt; magically makes M2M interaction have the same amount of loose coupling than\n&gt; human to machine interactions. Much of the reluctance against REST in an\n&gt; enterprise context IMO results from the actually existing contract in M2M\n&gt; scenarios notoriously being talked away.\n&gt;\n&gt; If you tell Joe developer to evolve that service, you better be able to\n&gt; tell him what exactly he can do and what not. He should not have to call the\n&gt; client owners because not having to bring the client and server owners\n&gt; together when evolving is one of *the* top advantages of REST.\n&gt;\n&gt;\n&gt;\n&gt;&gt; By using media types and HATEOAS, the clients retain a bit of\n&gt;&gt; discoverability. It&#39;s not so much discoverability, as it is state\n&gt;&gt; awareness. It can &quot;know&quot; where it is at any point of the process, and\n&gt;&gt; it &quot;knows&quot; where to go from there. If it follows the links given with\n&gt;&gt; the types specified, the client will be told where to go next.\n&gt;&gt;\n&gt;\n&gt; Yes, that is true. But it also conflicts with the state machine that the\n&gt; client itself has. It is not entirely driven by the service (as the human\n&gt; user is). It at least makes use of a set of partially ordered goals (e.g.\n&gt; you must order before you cancel an order, you must order before you pay,\n&gt; etc.).\n&gt;\n&gt; This set of partially ordered goals is in a way exactly what e.g. AtomPub\n&gt; establishes. The goal order is specified by saying what outgoing transitions\n&gt; (== next available goals) to expect after completing a certain goal.\n&gt;\n&gt;\n&gt;\n&gt;&gt; This is key. The client isn&#39;t &quot;waiting to do the next thing&quot;. It&#39;s not\n&gt;&gt; got a &quot;list of things to do&quot;, and going through them one by one.\n&gt;&gt; Rather it has a list of guideposts that it&#39;s told to follow, and the\n&gt;&gt; actual PATH it takes isn&#39;t known to the client until it reaches a goal\n&gt;&gt; post.\n&gt;&gt;\n&gt;\n&gt; Yeah - good line of thought. OTH, I have not managed to code a client that\n&gt; does not eventually have its own state machine that inevitably drives the\n&gt; clients program flow. No matter how much you make the client to be driven by\n&gt; the server.\n&gt;\n&gt;\n&gt;\n&gt;&gt; Now you can code all of that in to the client, it &quot;knows&quot; where to go,\n&gt;&gt; it build URLs, and when things change, the client breaks. Because the\n&gt;&gt; client is a stupid client and while it functioned, it did it all the\n&gt;&gt; wrong way.\n&gt;&gt;\n&gt;\n&gt; Suppose you code a client to an AtomPub server that has a collection of\n&gt; orders and you want the client to calculate the average order amount. Can\n&gt; you show me how you do that without expecting the GET on the order\n&gt; collection to return an Atom feed (or any other *previously* known media\n&gt; type)?\n&gt;\n&gt;\n&gt; GET /service-doc\n&gt;\n&gt; ... pick order collection based on category ...\n&gt;\n&gt; GET /orders\n&gt;\n&gt; And now - how do you code from here without relying on the fact that\n&gt; AtomPub tells you that collections come as Atom feeds?\n&gt;\n&gt;\n&gt;\n&gt;\n&gt; Jan\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;&gt; So, that&#39;s, to me, where some of the robustness of the whole thing\n&gt;&gt; comes from, even in a M2M world.\n&gt;&gt;\n&gt;\n&gt; --------------------------------------\n&gt; Jan Algermissen\n&gt;\n&gt; Mail: algermissen@...\n&gt; Blog: http://algermissen.blogspot.com/\n&gt; Home: http://www.jalgermissen.com\n&gt; --------------------------------------\n&gt;\n&gt;\n&gt;\n&gt;\n\r\n--00504502aca519154a047afb83f6\r\nContent-Type: text/html; charset=UTF-8\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;span class=3D&quot;Apple-style-span&quot; style=3D&quot;font-family: arial, sans-serif; f=\r\nont-size: 13px; border-collapse: collapse; &quot;&gt;&quot;And now - how do you cod=\r\ne from here without relying on the fact that AtomPub tells you that collect=\r\nions come as Atom feeds?&quot;&lt;/span&gt;&lt;div&gt;\n&lt;font class=3D&quot;Apple-style-span&quot;=\r\n face=3D&quot;arial, sans-serif&quot;&gt;&lt;span class=3D&quot;Apple-style-span&quot; style=3D&quot;borde=\r\nr-collapse: collapse;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font class=3D&quot;Apple-st=\r\nyle-span&quot; face=3D&quot;arial, sans-serif&quot;&gt;&lt;span class=3D&quot;Apple-style-span&quot; style=\r\n=3D&quot;border-collapse: collapse;&quot;&gt;When interrogating the service document, ch=\r\neck out the accept element in the collection: &lt;a href=3D&quot;http://bitworking.=\r\norg/projects/atom/rfc5023.html#rfc.section.8.3.4&quot;&gt;http://bitworking.org/pro=\r\njects/atom/rfc5023.html#rfc.section.8.3.4&lt;/a&gt;. =C2=A0You mentioned categori=\r\nes which is another means, but it may be a red herring in the M2M example.&lt;=\r\n/span&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;arial, sa=\r\nns-serif&quot;&gt;&lt;span class=3D&quot;Apple-style-span&quot; style=3D&quot;border-collapse: collap=\r\nse;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;=\r\narial, sans-serif&quot;&gt;&lt;span class=3D&quot;Apple-style-span&quot; style=3D&quot;border-collaps=\r\ne: collapse;&quot;&gt;Also, when you say GET /orders, you&#39;re implying an accept=\r\n header of */*. =C2=A0You need the equivalent of a human brain to process w=\r\nhatever returned. =C2=A0Instead, do the following:&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div=\r\n&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;arial, sans-serif&quot;&gt;&lt;span class=3D=\r\n&quot;Apple-style-span&quot; style=3D&quot;border-collapse: collapse;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;=\r\n/div&gt;&lt;div&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;arial, sans-serif&quot;&gt;&lt;span=\r\n class=3D&quot;Apple-style-span&quot; style=3D&quot;border-collapse: collapse;&quot;&gt;GET /order=\r\ns&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;arial, =\r\nsans-serif&quot;&gt;&lt;span class=3D&quot;Apple-style-span&quot; style=3D&quot;border-collapse: coll=\r\napse;&quot;&gt;Accept: application/order+xml; q=3D0.8, image/png&lt;/span&gt;&lt;/font&gt;&lt;/div=\r\n&gt;&lt;div&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;arial, sans-serif&quot;&gt;&lt;span cla=\r\nss=3D&quot;Apple-style-span&quot; style=3D&quot;border-collapse: collapse;&quot;&gt;&lt;br&gt;\n&lt;/span&gt;&lt;/=\r\nfont&gt;&lt;/div&gt;&lt;div&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;arial, sans-serif&quot;=\r\n&gt;&lt;span class=3D&quot;Apple-style-span&quot; style=3D&quot;border-collapse: collapse;&quot;&gt;With=\r\nout those constraints on the request, I could understand the line of questi=\r\noning about how a service can get a document it know&#39;s how to process.&lt;=\r\n/span&gt;&lt;/font&gt;&lt;/div&gt;\n&lt;div&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;arial, sa=\r\nns-serif&quot;&gt;&lt;span class=3D&quot;Apple-style-span&quot; style=3D&quot;border-collapse: collap=\r\nse;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font class=3D&quot;Apple-style-span&quot; face=3D&quot;=\r\narial, sans-serif&quot;&gt;&lt;span class=3D&quot;Apple-style-span&quot; style=3D&quot;border-collaps=\r\ne: collapse;&quot;&gt;-Noah&lt;br&gt;\n&lt;/span&gt;&lt;/font&gt;&lt;br&gt;&lt;div class=3D&quot;gmail_quote&quot;&gt;On Thu=\r\n, Dec 17, 2009 at 5:21 AM, Jan Algermissen &lt;span dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D=\r\n&quot;mailto:algermissen1971@...&quot;&gt;algermissen1971@...&lt;/a&gt;&gt;&lt;/span&gt; wro=\r\nte:&lt;br&gt;&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;margin:0 0 0 .8ex;border-=\r\nleft:1px #ccc solid;padding-left:1ex;&quot;&gt;\n&lt;div class=3D&quot;im&quot;&gt;&lt;br&gt;\nOn Dec 17, 2=\r\n009, at 3:12 AM, Will Hartung wrote:&lt;br&gt;\n&lt;br&gt;\n&lt;/div&gt;&lt;div class=3D&quot;im&quot;&gt;&lt;bloc=\r\nkquote class=3D&quot;gmail_quote&quot; style=3D&quot;margin:0 0 0 .8ex;border-left:1px #cc=\r\nc solid;padding-left:1ex&quot;&gt;\nIn an M2M scenario, ALL APIs are &quot;tightly c=\r\noupled&quot;. That&#39;s just the&lt;br&gt;\nfact of it. APIs are contacts. Change=\r\n the contract, bad things happen.&lt;br&gt;\nDesign APIs with growth and flexibili=\r\nty in mind, and you can have a&lt;br&gt;\nmore forgiving client/server experience.=\r\n&lt;br&gt;\n&lt;/blockquote&gt;\n&lt;br&gt;&lt;/div&gt;\nAgreed. I just think that we are making a mis=\r\ntake when we claim that REST magically makes M2M interaction have the same =\r\namount of loose coupling than human to machine interactions. Much of the re=\r\nluctance against REST in an enterprise context IMO results from the actuall=\r\ny existing contract in M2M scenarios notoriously being talked away.&lt;br&gt;\n\n&lt;b=\r\nr&gt;\nIf you tell Joe developer to evolve that service, you better be able to =\r\ntell him what exactly he can do and what not. He should not have to call th=\r\ne client owners because not having to bring the client and server owners to=\r\ngether when evolving is one of *the* top advantages of REST.&lt;div class=3D&quot;i=\r\nm&quot;&gt;\n&lt;br&gt;\n&lt;br&gt;\n&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;margin:0 0 0 .8ex;=\r\nborder-left:1px #ccc solid;padding-left:1ex&quot;&gt;\n&lt;br&gt;\nBy using media types and=\r\n HATEOAS, the clients retain a bit of&lt;br&gt;\ndiscoverability. It&#39;s not so =\r\nmuch discoverability, as it is state&lt;br&gt;\nawareness. It can &quot;know&quot;=\r\n where it is at any point of the process, and&lt;br&gt;\nit &quot;knows&quot; wher=\r\ne to go from there. If it follows the links given with&lt;br&gt;\nthe types specif=\r\nied, the client will be told where to go next.&lt;br&gt;\n&lt;/blockquote&gt;\n&lt;br&gt;&lt;/div&gt;=\r\n\nYes, that is true. But it also conflicts with the state machine that the c=\r\nlient itself has. It is not entirely driven by the service (as the human us=\r\ner is). It at least makes use of a set of partially ordered goals (e.g. you=\r\n must order before you cancel an order, you must order before you pay, etc.=\r\n).&lt;br&gt;\n\n&lt;br&gt;\nThis set of partially ordered goals is in a way exactly what e=\r\n.g. AtomPub establishes. The goal order is specified by saying what outgoin=\r\ng transitions (=3D=3D next available goals) to expect after completing a ce=\r\nrtain goal.&lt;div class=3D&quot;im&quot;&gt;\n&lt;br&gt;\n&lt;br&gt;\n&lt;blockquote class=3D&quot;gmail_quote&quot; s=\r\ntyle=3D&quot;margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex&quot;&gt;\n&lt;br=\r\n&gt;\nThis is key. The client isn&#39;t &quot;waiting to do the next thing&quot=\r\n;. It&#39;s not&lt;br&gt;\ngot a &quot;list of things to do&quot;, and going throu=\r\ngh them one by one.&lt;br&gt;\nRather it has a list of guideposts that it&#39;s to=\r\nld to follow, and the&lt;br&gt;\nactual PATH it takes isn&#39;t known to the clien=\r\nt until it reaches a goal&lt;br&gt;\npost.&lt;br&gt;\n&lt;/blockquote&gt;\n&lt;br&gt;&lt;/div&gt;\nYeah - goo=\r\nd line of thought. OTH, I have not managed to code a client that does not e=\r\nventually have its own state machine that inevitably drives the clients pro=\r\ngram flow. No matter how much you make the client to be driven by the serve=\r\nr.&lt;div class=3D&quot;im&quot;&gt;\n&lt;br&gt;\n&lt;br&gt;\n&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;m=\r\nargin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex&quot;&gt;\n&lt;br&gt;\nNow you=\r\n can code all of that in to the client, it &quot;knows&quot; where to go,&lt;b=\r\nr&gt;\nit build URLs, and when things change, the client breaks. Because the&lt;br=\r\n&gt;\nclient is a stupid client and while it functioned, it did it all the&lt;br&gt;\n=\r\nwrong way.&lt;br&gt;\n&lt;/blockquote&gt;\n&lt;br&gt;&lt;/div&gt;\nSuppose you code a client to an Ato=\r\nmPub server that has a collection of orders and you want the client to calc=\r\nulate the average order amount. Can you show me how you do that without exp=\r\necting the GET on the order collection to return an Atom feed (or any other=\r\n *previously* known media type)?&lt;br&gt;\n\n&lt;br&gt;\n&lt;br&gt;\nGET /service-doc&lt;br&gt;\n&lt;br&gt;\n.=\r\n.. pick order collection based on category ...&lt;br&gt;\n&lt;br&gt;\nGET /orders&lt;br&gt;\n&lt;br=\r\n&gt;\nAnd now - how do you code from here without relying on the fact that Atom=\r\nPub tells you that collections come as Atom feeds?&lt;br&gt;&lt;font color=3D&quot;#88888=\r\n8&quot;&gt;\n&lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;\nJan&lt;/font&gt;&lt;div class=3D&quot;im&quot;&gt;&lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;\n&lt;br=\r\n&gt;\n&lt;br&gt;\n&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;margin:0 0 0 .8ex;border-=\r\nleft:1px #ccc solid;padding-left:1ex&quot;&gt;\n&lt;br&gt;\nSo, that&#39;s, to me, where so=\r\nme of the robustness of the whole thing&lt;br&gt;\ncomes from, even in a M2M world=\r\n.&lt;br&gt;\n&lt;/blockquote&gt;\n&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;div class=3D&quot;h5&quot;&gt;\n----------=\r\n----------------------------&lt;br&gt;\nJan Algermissen&lt;br&gt;\n&lt;br&gt;\nMail: &lt;a href=3D&quot;=\r\nmailto:algermissen@...&quot; target=3D&quot;_blank&quot;&gt;algermissen@...&lt;/a&gt;&lt;br&gt;\nB=\r\nlog: &lt;a href=3D&quot;http://algermissen.blogspot.com/&quot; target=3D&quot;_blank&quot;&gt;http://=\r\nalgermissen.blogspot.com/&lt;/a&gt;&lt;br&gt;\nHome: &lt;a href=3D&quot;http://www.jalgermissen.=\r\ncom&quot; target=3D&quot;_blank&quot;&gt;http://www.jalgermissen.com&lt;/a&gt;&lt;br&gt;\n----------------=\r\n----------------------&lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;\n&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;b=\r\nr&gt;&lt;/div&gt;\n\r\n--00504502aca519154a047afb83f6--\r\n\n"}}
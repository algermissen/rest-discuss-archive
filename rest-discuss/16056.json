{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":11652427,"authorName":"Peter","from":"&quot;Peter&quot; &lt;pkeane@...&gt;","profile":"pkeane_littlehat","replyTo":"SENDER","senderId":"mUgLc98JDh_zHeTGLTXn7xSe6VHF1BSW5TybvoMw33tM-fi2Sa8aJlQ4R2Uc7rER7Oo4nSQu97Q4CXRlsep8uC12h4WrPLw","spamInfo":{"isSpam":false,"reason":"6"},"subject":"Re: Google proposes RPC style APIs over REST","postDate":"1280552721","msgId":16056,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGkzMGF1aCtkdGJwQGVHcm91cHMuY29tPg==","inReplyToHeader":"PDIwMTAwNzMwMjEzNDIyLjdlYjQyYTA1LmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4="},"prevInTopic":16055,"nextInTopic":16057,"prevInTime":16055,"nextInTime":16057,"topicId":16015,"numMessagesInTopic":60,"msgSnippet":"... One difference is that the JSON/WADL is a run-time, *not* compile-time approach.  It s essentially just code-on-demand.  And as such, it suffers drawbacks","rawEmail":"Return-Path: &lt;pkeane@...&gt;\r\nX-Sender: pkeane@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 2373 invoked from network); 31 Jul 2010 05:05:31 -0000\r\nX-Received: from unknown (98.137.34.46)\n  by m11.grp.re1.yahoo.com with QMQP; 31 Jul 2010 05:05:31 -0000\r\nX-Received: from unknown (HELO n43d.bullet.mail.sp1.yahoo.com) (66.163.169.157)\n  by mta3.grp.sp2.yahoo.com with SMTP; 31 Jul 2010 05:05:31 -0000\r\nX-Received: from [69.147.65.147] by n43.bullet.mail.sp1.yahoo.com with NNFMP; 31 Jul 2010 05:05:24 -0000\r\nX-Received: from [98.137.34.72] by t10.bullet.mail.sp1.yahoo.com with NNFMP; 31 Jul 2010 05:05:23 -0000\r\nDate: Sat, 31 Jul 2010 05:05:21 -0000\r\nTo: rest-discuss@yahoogroups.com\r\nMessage-ID: &lt;i30auh+dtbp@...&gt;\r\nIn-Reply-To: &lt;20100730213422.7eb42a05.eric@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;ISO-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-Yahoo-Newman-Property: groups-compose\r\nX-eGroups-Msg-Info: 1:6:0:0:0\r\nFrom: &quot;Peter&quot; &lt;pkeane@...&gt;\r\nSubject: Re: Google proposes RPC style APIs over REST\r\nX-Yahoo-Group-Post: member; u=11652427; y=5Uui_YR3UrtKOeWqzmKHzBWQqlIW8Ycqu7BjaqLOKBWX7HLwnQuofPzjuA\r\nX-Yahoo-Profile: pkeane_littlehat\r\n\r\n\n\n--- In rest-discuss@yahoogroups.com, &quot;Eric J. Bowman&quot; &lt;eric@...&gt; wrote:\n&gt;=\r\n\n&gt; &quot;Peter&quot; wrote:\n&gt; &gt; \n&gt; &gt; My own take is that this sort of JSON/WADL appro=\r\nach was an attempt to\n&gt; &gt; get around that need to mint new media types (or =\r\nto come up w/ a\n&gt; &gt; suitably generic media type for all Google services -- =\r\na role that\n&gt; &gt; Atom fell short of).\n&gt; &gt;\n&gt; \n&gt; How does this make it any dif=\r\nferent than using SOAP/WSDL?  Haven&#39;t we\n&gt; been down the road of stating th=\r\nat methods and media types need not be\n&gt; protocol-layer concerns, before?  =\r\nLooks like a new instantiation of SOA\n&gt; to me, more than REST.\n&gt; \n\nOne diff=\r\nerence is that the JSON/WADL is a run-time, *not* compile-time approach.  I=\r\nt&#39;s essentially just code-on-demand.  And as such, it suffers drawbacks as =\r\ncompared to a standardized media-type with embedded application flow contro=\r\nls (e.g. reduced visibility/uniformity, etc).  But I&#39;m not ready to say it =\r\nis completely anti-REST and I would certainly argue it is *not* an engineer=\r\ning failure or design failure (even if I would have hoped to see a differen=\r\nt approach).  In fact, it is kind of a fascinating study of &quot;principled des=\r\nign&quot; meant to optimize for a set of facts-on-the-ground with which Google i=\r\ns faced (spelled out nicely by Bill de hOra&#39;s message on this thread).  I&#39;m=\r\n pretty sure they know exactly what they are doing and I would predict that=\r\n they&#39;ll achieve better success with this approach than they did with the a=\r\nttempt at Atom/AtomPub.  OTOH, as a model of &quot;how to do REST&quot; it could prov=\r\ne to be a v. bad influence indeed.  \n\n\n&gt; &gt;\n&gt; &gt; One of the stated goals was =\r\nto make it easier to bring a new API\n&gt; &gt; online (interfaces, documentation,=\r\n clients, etc.) when a new service\n&gt; &gt; was rolled out.\n&gt; &gt;\n&gt; \n&gt; Assuming yo=\r\nu&#39;re right in your assessment, haven&#39;t we heard this promise\n&gt; before, from=\r\n SOA/WS-*?  All this tooling needed for code generation\n&gt; seems to me like =\r\nits costs outweigh its benefits compared with REST,\n&gt; where even if it&#39;s le=\r\nss convenient to build, a system may still be\n&gt; rapidly developed with a te=\r\nxt editor and knowledge of URI + HTTP + HTML\n&gt; that &quot;just works&quot; without al=\r\nl the fancy enterprise doo-dads.\n&gt; \n\nBut the question is &quot;just works&quot; for w=\r\nhom?  SOA/WS-* promised as much for consuming applications -- Google is try=\r\ning to make their *own* life easier by not have to do the hard work of 1. c=\r\nreating appropriate media types and 2. creating client code libraries for e=\r\nach new service they roll out.\n\nMy current opinion on the matter (subject t=\r\no change, of course :-)) is that we have HTML as a real success story, and =\r\nAtom/AtomPub as a good idea that is too easily misused and is not the ragin=\r\ng success I and others predicted.  XHTML+RDFa is a real rabbit hole (for RE=\r\nSTful systems specifically) as far as I am concerned -- that&#39;s not the way =\r\nwe&#39;ll build the RESTful web out (same goes for RDF).  HTML5 as a move *away=\r\n* from XML is significant (I realize there is a serialization in XHTML, but=\r\n that&#39;s an also-ran).  It&#39;s noteable that Google&#39;s v3 discovery approach wi=\r\nll work perfectly well in a completely non-XML (read: primarily JSON) world=\r\n. Two other forces/trends that I see as significant are 1. the desire to pa=\r\nss *data* around (as opposed to largely textual/presentational HTML), 2. cl=\r\nients that have no real need for HTML nor adequate processing capabilities =\r\nfor HTML (I&#39;m thinking of mobile-based &quot;apps&quot;).\n\nSo if indeed we see less a=\r\nnd less XML, more and more JSON, and about the same amount HTML, how will w=\r\ne be building RESTful systems in, say, 5 years?  Google&#39;s is one answer to =\r\nthat question.  Many people here (me included!) would like to see more atte=\r\nntion paid to creating good standardized media types, but I don&#39;t think mak=\r\ning everything a &quot;+xml&quot; media type is going to fly.  I have no idea what th=\r\ne answer is.  I cannot help but think that &quot;layered&quot; application controls (=\r\na la Google v3 discovery approach) or honest-to-goodness JSON hypermedia ty=\r\npes (i.e. link semantics, &quot;form-like&quot; controls in &quot;+json&quot; media types) are =\r\nthe only two obvious choices. \n\n--peter keane\n\n\n\n\n\n&gt; Incessantly banging my=\r\n anti-corporatized-REST drum,\n&gt; Eric\n&gt;\n\n\n\n"}}
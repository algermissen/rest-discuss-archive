{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":69164307,"authorName":"mike amundsen","from":"mike amundsen &lt;mamund@...&gt;","profile":"mamund","replyTo":"SENDER","senderId":"GWO9gRNo9hfqZsfrac_rzqbqcmeSOGTr5QG71lI8DfNfUN7lpcNZ5n91Hqvykaw2P3QBf1iPYjOlAUfIqNYTRnxn16AYlPU","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Generic REST client","postDate":"1255137776","msgId":13779,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGI1NDhkZjY1MDkxMDA5MTgyMnYzYjNkNTM3NHUzNmZkYjE0ZWZmYjc2OTU4QG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PDg3aXFlb3l2eDQuZnNmQHBob2VuaXguYXN5bmNocm9ub3VzLm9yZz4=","referencesHeader":"PDk2RDQwQkQyLUJFNjQtNDcwQi04NTFDLUU4MDgwMDc1MjNBMEBnbWFpbC5jb20+CSA8ODdpcWVveXZ4NC5mc2ZAcGhvZW5peC5hc3luY2hyb25vdXMub3JnPg=="},"prevInTopic":13778,"nextInTopic":13780,"prevInTime":13778,"nextInTime":13780,"topicId":13776,"numMessagesInTopic":48,"msgSnippet":"In my experience, the two biggest hurdles to a generic HTTP client are - media types - link relations Media-types includes not just data format issues (are you","rawEmail":"Return-Path: &lt;mca@...&gt;\r\nX-Sender: mca@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 68297 invoked from network); 10 Oct 2009 01:22:58 -0000\r\nX-Received: from unknown (98.137.34.45)\n  by m5.grp.re1.yahoo.com with QMQP; 10 Oct 2009 01:22:58 -0000\r\nX-Received: from unknown (HELO mail-fx0-f222.google.com) (209.85.220.222)\n  by mta2.grp.sp2.yahoo.com with SMTP; 10 Oct 2009 01:22:57 -0000\r\nX-Received: by fxm22 with SMTP id 22so6472158fxm.12\n        for &lt;rest-discuss@yahoogroups.com&gt;; Fri, 09 Oct 2009 18:22:56 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.223.21.3 with SMTP id h3mr1063561fab.39.1255137776587; Fri, 09 \n\tOct 2009 18:22:56 -0700 (PDT)\r\nIn-Reply-To: &lt;87iqeoyvx4.fsf@...&gt;\r\nReferences: &lt;96D40BD2-BE64-470B-851C-E808007523A0@...&gt;\n\t &lt;87iqeoyvx4.fsf@...&gt;\r\nDate: Fri, 9 Oct 2009 21:22:56 -0400\r\nX-Google-Sender-Auth: 99bf17bafeff5275\r\nMessage-ID: &lt;b548df650910091822v3b3d5374u36fdb14effb76958@...&gt;\r\nTo: Josh Sled &lt;jsled@...&gt;\r\nCc: rest-discuss@yahoogroups.com, Jan Vincent &lt;jvliwanag@...&gt;\r\nContent-Type: text/plain; charset=windows-1252\r\nContent-Transfer-Encoding: quoted-printable\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: mike amundsen &lt;mamund@...&gt;\r\nSubject: Re: [rest-discuss] Generic REST client\r\nX-Yahoo-Group-Post: member; u=69164307; y=cRtlPpIKMHpXbA_8xpduW8Aoj_jEEahaVD_iXt-AvRX6\r\nX-Yahoo-Profile: mamund\r\n\r\nIn my experience, the two biggest hurdles to a generic HTTP client are\n- me=\r\ndia types\n- link relations\n\nMedia-types includes not just data format issue=\r\ns (are you using a\nwell-known format or a custom XML format?) but also the =\r\nsemantics\nrelated to the format (which elements are inputs, which are eleme=\r\nnts\nto query for data, what actions are supported, what data format is\nused=\r\n to send data, etc.). Link relations includes which relations are\nsupported=\r\n for links, understanding custom rel values, etc.\n\nThe only data format tha=\r\nt works even mildly well in this space is\nHTML; and there is a reliable (bu=\r\nt rather limited) client for it,\ntoo&lt;g&gt;.\n\nOPTIONS seems quite inadequate fo=\r\nr this information, so run-time\ndiscovery is pretty weak. That means relian=\r\nce on out-of-band\ninformation and &quot;design-time&quot; discovery.\n\nThat leads to, =\r\nIMO, some interesting questions:\n- what would it take build a &quot;better brows=\r\ner&quot;; one that supports PUT\nand DELETE, understands a wider range of link re=\r\nlations?\n- what would it take to establish rendering engines for ATOM and o=\r\nther\nwell-known, validate-able media types?\n- what would it take to establi=\r\nsh reliable rendering engines for\nconstrained media-types (XML, JSON)?\n- wh=\r\nat would it take to establish a standardized documentation that\nincludes me=\r\nda-type details such as sematics, schema, link relations,\netc?\n- what would=\r\n it take to improve the OPTIONS method in order to be able\nto include (or p=\r\noint to) these standardized documents?\n\nAll fertile ground for study, IMO.\n=\r\n\nmca\nhttp://amundsen.com/blog/\n\n\n\n\nOn Fri, Oct 9, 2009 at 19:44, Josh Sled =\r\n&lt;jsled@...&gt; wrote:\n&gt; Jan Vincent &lt;jvliwanag@...&gt; writes:=\r\n\n&gt;&gt; I know one may simply use some HTTP client and work\n&gt;&gt; from there. Howe=\r\nver, I tend to see this practice as being quite\n&gt;&gt; tedious.\n&gt;\n&gt; I&#39;ve not se=\r\nen a good higher-level HTTP framework that would:\n&gt;\n&gt; - interpret an out-of=\r\n-band description of a RESTful web service to\n&gt; =A0produce high-level forms=\r\n/state-machine stubs that can be coded to in\n&gt; =A0the implementation langua=\r\nge.\n&gt;\n&gt; =A0- integrating that with run-time in-band conditional-GET of prev=\r\nious\n&gt; =A0 =A0responses, response codes, &c.\n&gt;\n&gt; - supports the more intere=\r\nsting HTTP response codes like\n&gt;\n&gt; =A0- 202 + maybe polling some &lt;handwave&gt;=\r\nurl in the repsonse to check\n&gt; =A0 =A0final creation state&lt;/&gt;\n&gt;\n&gt; =A0- 204,=\r\n 205, 206\n&gt;\n&gt; =A0- 3xx redirection codes with stateful recoding of temp/per=\r\nm\n&gt; =A0 =A0redirects.\n&gt;\n&gt; =A0- 503 + retry-after info.\n&gt;\n&gt; - Supports cache=\r\n control, in combination with the above.\n&gt;\n&gt;\n&gt; I&#39;d imagine such a framework=\r\n to:\n&gt;\n&gt; a/ again, use some description language that identifies the *poten=\r\ntial*\n&gt; resource-/media-types, state-space, and forms a-priori without havi=\r\nng to\n&gt; actively traverse every class of link on the site, but=85\n&gt;\n&gt; b/ wo=\r\nuld require the active traversal of links to function, ensuring\n&gt; that the =\r\nruntime binding of the resources is the same as the build-time\n&gt; binding (w=\r\nithing epsilon of versioning);\n&gt;\n&gt; c/ as such, would always start at a safe=\r\n entry point (e.g., &#39;/&#39;) for a\n&gt; resource-space, with conditional requests =\r\nto validate any previous\n&gt; (cached) assumptions about the site are still va=\r\nlid.\n&gt;\n&gt;\n&gt; I&#39;ve built a couple of ad-hoc things that use something like Apa=\r\nche\n&gt; HTTPClient, but they&#39;re usually just my application code using\n&gt; HTTP=\r\nClient to do some specific thing, not a generic solution one level\n&gt; remove=\r\nd from that.\n&gt;\n&gt; --\n&gt; ...jsled\n&gt; http://asynchronous.org/ - a=3Djsled; b=3D=\r\nasynchronous.org; echo ${a}@${b}\n&gt;\n\n"}}
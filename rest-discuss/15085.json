{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":289191104,"authorName":"Jan Algermissen","from":"Jan Algermissen &lt;algermissen1971@...&gt;","profile":"algermissen1971","replyTo":"SENDER","senderId":"hM6tJSYFbLUeMdXY1sHBCHZEZQb4rz54qdEN0mQsFPwhei-XE_F2eGZFbgxA1kxBVhJDSfP5zp9jO5xjF7eUJg08MyDlgh4pkK1R80PVnY4","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Discussion topic - &#39;wellrested&#39; sanbox project","postDate":"1269853349","msgId":15085,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PENBRkI3MTZGLTQ3REItNDE0MC04RjlDLTdCQjg1QUJGNjg2MUBtYWMuY29tPg==","inReplyToHeader":"PGE2YjJjYWY0MTAwMzI5MDEyMXAxOWE3ODVkM3JiOTZjMGIzYjU3YzQzYjM1QG1haWwuZ21haWwuY29tPg==","referencesHeader":"PGE2YjJjYWY0MTAwMzI5MDEyMXAxOWE3ODVkM3JiOTZjMGIzYjU3YzQzYjM1QG1haWwuZ21haWwuY29tPg=="},"prevInTopic":15084,"nextInTopic":15086,"prevInTime":15084,"nextInTime":15086,"topicId":15083,"numMessagesInTopic":4,"msgSnippet":"Mark, in general, it makes it easier to ensure you produce a RESTful API if you limit all your descriptive effort to media type specifications. This means","rawEmail":"Return-Path: &lt;algermissen1971@...&gt;\r\nX-Sender: algermissen1971@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 73206 invoked from network); 29 Mar 2010 09:03:16 -0000\r\nX-Received: from unknown (66.196.94.105)\n  by m11.grp.re1.yahoo.com with QMQP; 29 Mar 2010 09:03:16 -0000\r\nX-Received: from unknown (HELO asmtpout027.mac.com) (17.148.16.102)\n  by mta1.grp.re1.yahoo.com with SMTP; 29 Mar 2010 09:03:16 -0000\r\nMIME-version: 1.0\r\nContent-transfer-encoding: 7BIT\r\nContent-type: text/plain; charset=us-ascii\r\nX-Received: from [192.168.2.102] (p54905A61.dip.t-dialin.net [84.144.90.97])\n by asmtp027.mac.com\n (Sun Java(tm) System Messaging Server 6.3-8.01 (built Dec 16 2008; 32bit))\n with ESMTPSA id &lt;0L0100HR3D46ZU80@...&gt; for\n rest-discuss@yahoogroups.com; Mon, 29 Mar 2010 02:02:34 -0700 (PDT)\r\nX-Proofpoint-Spam-Details: rule=notspam policy=default score=0 spamscore=0\n ipscore=0 phishscore=0 bulkscore=0 adultscore=0 classifier=spam adjust=0\n reason=mlx engine=5.0.0-0908210000 definitions=main-1003290026\r\nIn-reply-to: &lt;a6b2caf41003290121p19a785d3rb96c0b3b57c43b35@...&gt;\r\nDate: Mon, 29 Mar 2010 11:02:29 +0200\r\nCc: REST Discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nMessage-id: &lt;CAFB716F-47DB-4140-8F9C-7BB85ABF6861@...&gt;\r\nReferences: &lt;a6b2caf41003290121p19a785d3rb96c0b3b57c43b35@...&gt;\r\nTo: Mark Derricutt &lt;mark@...&gt;\r\nX-Mailer: Apple Mail (2.1077)\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Jan Algermissen &lt;algermissen1971@...&gt;\r\nSubject: Re: [rest-discuss] Discussion topic - &#39;wellrested&#39; sanbox project\r\nX-Yahoo-Group-Post: member; u=289191104; y=qkkfX0TSOSM_vBHD9AZQ2qhdRfPbswM8SndGsfM1kT_0xv-taTKfKIdc\r\nX-Yahoo-Profile: algermissen1971\r\n\r\nMark,\n\nin general, it makes it easier to ensure you produce a RESTful API if you limit all your descriptive effort to media type specifications. This means that, instead of describing the API you should *only* describe media type semantics. Any description of your API leads to undesired coupling if the client implements aspects of the description.\n\nFrom the short look I took, the description is somwhat &#39;media type oriented&#39;, but I&#39;d suggest you refactor the API description into &#39;specifications&#39; of the media type profiles you use (and I&#39;d suggest to use a &#39;profile&#39; parameter instead of a &#39;rel&#39; parameter).\n\nRegarding the JSON example you gave, there is a flaw though:\n\n&lt;quote&gt;\n\nLink: &lt;xxxxx&gt;; rel=&#92;&quot;create&#92;&quot;; type=&#92;&quot;application/x-www-form-urlencoded; rel=wellrested-newstaffmember&#92;&quot;; title=&#92;&quot;Create a new staff member&#92;&quot;; method=&#92;&quot;POST&#92;&quot;&quot;\nAccept-Patch: application/x-www-form-urlencoded; rel=wellrested-announcement\n\n[\n {\n   &quot;links&quot;:[\n     {\n       &quot;rel&quot;:&quot;view&quot;,\n       &quot;url&quot;:&quot;xxxxx&quot;,\n       &quot;type&quot;:&quot;application&#92;/wellrested-staffmember+json&quot;\n     },{\n       &quot;rel&quot;:&quot;delete&quot;,\n       &quot;url&quot;:&quot;xxxxx&quot;,\n       &quot;method&quot;:&quot;DELETE&quot;\n     }],\n   &quot;id&quot;:&quot;0c6d5bfc-5e1f-455e-b46d-3b873868519a&quot;,\n   &quot;name&quot;:&quot;Mark&quot;,\n   &quot;status&quot;:&quot;active&quot;\n }\n]\n&lt;quote&gt;\n\nYou do not need link relations such as create,view or delete because HTTP already gives you POST, GET and DELETE. Take a look at the Atom Pubishing Protocol (RFC 5023) and re-design your approach along the lines of collections, categories and accept values declared in a service document.\n\nAs a general rule, use link relation to describe what the nature of a resource is (&quot;the collection of staff members&quot;) instead of what operations the resource is for (&quot;rel=create&quot;).\n\nJan\n\n\n\n\n\nOn Mar 29, 2010, at 10:21 AM, Mark Derricutt wrote:\n\n&gt; \n&gt; \n&gt; &#39;lo all,\n&gt; \n&gt; Over the weekend I started working on a very small HATEOAS sample application to try and demonstrate, what in my mind should make a good REST/HATEOAS API based on the various topics and ideas I&#39;ve been reading about lately, the projects up on github with the intention of having others contribute/fork/patch and improve on the API in such a way that we can have a simple project which demonstrates what a good API should theoretically be.\n&gt; \n&gt; The project is up at:\n&gt; \n&gt;  http://github.com/talios/wellrested\n&gt; \n&gt; The code is a simple maven2 based clojure/compojure web application.  The README file in the root of the repository (and on the front of the URL above) serves as documentation for the various media types in the API, and the conventions used.\n&gt; \n&gt; I&#39;m keen on hearing the collective thoughts of your minds on this, some questions I&#39;ve althought started to wonder include:\n&gt; \n&gt;  * is using PATCH for sending non-CRUD operations a good, or a bad thing?\n&gt;  * is adding a rel attribute to standard media types good/bad? such as &quot;application/x-www-form-urlencoded; rel=wellrested-newstaffmember&quot; over &quot;application/newstaff+x-www-form-urlencoded&quot;?\n&gt; \n&gt; Look forward to your comments..\n&gt; Mark\n&gt; \n&gt; \n&gt; \n&gt; \n&gt; \n&gt; \n&gt; -- \n&gt; Pull me down under...\n&gt; \n&gt; \n&gt; \n&gt; \n\n-----------------------------------\nJan Algermissen, Consultant\nNORD Software Consulting\n\nMail: algermissen@...\nBlog: http://www.nordsc.com/blog/\nWork: http://www.nordsc.com/\n-----------------------------------\n\n\n\n\n\n"}}
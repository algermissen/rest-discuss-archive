{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":10266038,"authorName":"Jeff Bone","from":"Jeff Bone &lt;jbone@...&gt;","replyTo":"SENDER","senderId":"TrBbGXpwMU52iLIg2ooB4yEBPTTCncxcQnMEmh-GCbHnpbytDU054_wSRM43u5ue-3q8y010w6O53CFaZ5lhTqY","spamInfo":{"isSpam":false,"reason":"0"},"subject":"REST Terrorist-Or-Not, and Alex&#39;s Objections / Issues","postDate":"1011994157","msgId":311,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDNDNTFDRTJELjYzODgzN0I4QGp1bXAubmV0Pg==","referencesHeader":"PFBpbmUuV05ULjQuNDMuMDIwMTIyMTQxNjE3MC41OTItMTAwMDAwQGdhbmRvbHBoLkFTR0FSRC5qbXM+"},"prevInTopic":0,"nextInTopic":314,"prevInTime":310,"nextInTime":312,"topicId":311,"numMessagesInTopic":10,"msgSnippet":"... IMO, the issue of idempotence --- what it means in what contexts, which methods are guaranteed to be truly idempotent vs. which ones *may* be idempotent","rawEmail":"Return-Path: &lt;jbone@...&gt;\r\nX-Sender: jbone@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_0_1_3); 25 Jan 2002 22:36:02 -0000\r\nReceived: (qmail 89844 invoked from network); 25 Jan 2002 21:30:33 -0000\r\nReceived: from unknown (216.115.97.167)\n  by m6.grp.snv.yahoo.com with QMQP; 25 Jan 2002 21:30:33 -0000\r\nReceived: from unknown (HELO sm14.texas.rr.com) (24.93.35.41)\n  by mta1.grp.snv.yahoo.com with SMTP; 25 Jan 2002 21:30:32 -0000\r\nReceived: from jump.net (bu24242137-238.austin.rr.com [24.242.137.238])\n\tby sm14.texas.rr.com (8.12.0.Beta16/8.12.0.Beta16) with ESMTP id g0PLWVpL005480;\n\tFri, 25 Jan 2002 15:32:32 -0600\r\nMessage-ID: &lt;3C51CE2D.638837B8@...&gt;\r\nDate: Fri, 25 Jan 2002 15:29:17 -0600\r\nOrganization: Clickfeed\r\nX-Mailer: Mozilla 4.7 [en] (Win95; I)\r\nX-Accept-Language: en\r\nMIME-Version: 1.0\r\nTo: &quot;S. Alexander Jacobson&quot; &lt;alex@...&gt;\r\nCc: rest-discuss@yahoogroups.com, mime-rpc@...-rpc.com\r\nSubject: REST Terrorist-Or-Not, and Alex&#39;s Objections / Issues\r\nReferences: &lt;Pine.WNT.4.43.0201221416170.592-100000@...&gt;\r\nContent-Type: text/plain; charset=us-ascii\r\nContent-Transfer-Encoding: 7bit\r\nFrom: Jeff Bone &lt;jbone@...&gt;\r\nReply-To: jbone@...\r\nX-Yahoo-Group-Post: member; u=10266038\r\n\r\n\n\n&quot;S. Alexander Jacobson&quot; wrote in various places:\n\n&gt; Using MIME-RPC over HTTP, you would POST either\n&gt; a list (multipart/mixed), or a struct\n&gt; (multipart/form-data) to some URL (e.g.\n&gt; terroristornot.com/verify).\n\n&gt; In other words, [in the REST version, the app] is making an idempotent\n&gt; request.  Accoding to REST, the client should use\n&gt; GET for such a a request, but I don&#39;t know how you\n&gt; send two pictures using GET.  So I&#39;m not sure you\n&gt; can use REST.\n\n&gt; You cannot sanely do this with GET, therefore I\n&gt; think you cannot sanely do this with REST.\n\nIMO, the issue of idempotence --- what it means in what contexts, which methods are\nguaranteed to be truly idempotent vs. which ones *may* be idempotent ---- is one of\nthe less well-understood aspects of the Web.  The Web (its protocols and\ntechnologies) is a work-in-progress, one that&#39;s evolving from a rather informal\norigin to more a more formal definition.  The claim that *no* idempotent operation\nshould be performed by a method other than GET is a bit suspect, as you point out.\nAnd idempotent operations which carry content might be deserving of another method.\n\nI do agree that you cannot use GET alone to do Terrorist-Or-Not in a practical\nfashion.  Whether or not this means that you can&#39;t build it in a RESTful fashion\ndepends on how literally you want to interpret certain utterings of e.g. TBL. ;-)\n\nI don&#39;t, however, think this means that you have to ditch resource modeling (rather\nthan procedural API exposure) or the HTTP protocol.  It just means you have to\nthink about how to do it within the framework provided.\n\nWent back and looked at Mike&#39;s suggestion;  it&#39;s generally fine with the caveat\nthat yes, it results in two separate request / response cycles.  I didn&#39;t see what\nyour particular objection to it was, other than perhaps that.  If there&#39;s an issue\nwith that, you can always collapse that into a single request-response cycle.  In\nother words, the more concise version of Mike&#39;s solution would (with some minor\nname changing just to make me happy ;-) simply be:\n\n(request) ==&gt;\nPOST http://www.terrorist_or_not.com/terrorists/checker HTTP/1.1\nContent-Type: mulitpart/related\n\n--- image 1 ---\n\n--- image 2 ---\n\n&lt;== (response)\n200 OK\n\n&lt;suspect&gt;\n &lt;status&gt;verified&lt;/status&gt;\n &lt;category&gt;terrorist&lt;/category&gt;\n &lt;details&gt;http://www.terrorist_or_not.com/terrorists/123456&lt;/details&gt;\n&lt;/suspect&gt;\n\nThere&#39;s no reason why the thing that checks terrorists can&#39;t be reified as a\nresource with a generic interface that obeys the semantics of HTTP methods.\nIndeed, the above kind of thing is exactly what POST is for.  The Response could be\nXML, or HTML, or some MIME encoding, or whatever;  that&#39;s up to the app, and REST /\nHTTP has no particular preference.  It might be possible to leverage other HTTP\nresponse codes to expose *more* of the application&#39;s semantics to HTTP, but the\nabove is entirely valid.  (E.g. it might return a 202 Accepted and indicate a\nLocation: to retrieve the current status of the query from, segueway to...)\n\nNow your next objection will be that in some cases the verification process may\ntake too long for a single HTTP request-response cycle.  In that case, the service\nwould simply create a resource for the pending query and return that as the\nLocation: in a 202 Accepted response.  The client would then poll that resource to\nget the status of the query.\n\nYour *next* objection will be that polling is undesirable.  Well, that&#39;s certainly\ntrue.  Asynchrony of requests and responses from the perspective of a particular\napplication is often desirable.  That&#39;s what we&#39;ve been talking about:  different\nmechanisms to build asynchronous communication patterns atop HTTP without breaking\nthe semantics of HTTP.  The problem isn&#39;t that it&#39;s impossible, it&#39;s that there are\nmany different ways to go about this.  What&#39;s needed isn&#39;t a new protocol or new\nstandard, its a set of generic conventions and guidelines.\n\nYour next objection will be that HTTP is unreliable (as in guaranteed delivery.)\nThat&#39;s true.  But them&#39;s the hard facts, main.  If you really believe that our SMTP\nfabric is reliable in that sense, I want some of what you&#39;re smoking. ;-)  In any\ncase, there&#39;s no reason to believe either is or can be absolutely more reliable\nthan the other.  The main objection to duplicating SMTP&#39;s messaging functionality\nin HTTP is that it&#39;s redundant;  the best argument for it is that it unifies the\nspace of addressable things and their interfaces, and that has positive\nimplications for integration and Metcalfe-value.\n\nPer reliable ordered delivery, that&#39;s a Hard Problem in a distributed setting ---\nas you&#39;re clearly aware.  Neither HTTP nor SMTP does or *can* solve the problem\nwithout extensive work.  Solutions to the general problem such as ISIS (Ken\nBirman&#39;s reliable ordered multicast / group communication toolkit from over a\ndecade ago) provide solutions but are generally too expensive for most apps.\nHappily, most distributed apps can easily sacrifice globally consistent message\ndelivery order, etc. in favor of weaker consistency / better performance.\n\nBottom line, you&#39;ve been offered a variety of solutions, etc. to your\n&quot;terrorist-or-not&quot; problem and related issues;  whether you accept them is up to\nyou.  I still haven&#39;t seen any single point you&#39;ve raised that addresses Mark\nBaker&#39;s fundamental challenge, which is\n\n   &quot;Show me an application that I can&#39;t do with HTTP.&quot;\n\nHe posed that challenge to me a while back, and I haven&#39;t been able to come up with\na single good answer.  There are things that can be done more effectively if HTTP\nis extended, but in general there are very few of these.  (As mentioned, a system\nwhich uses the resource space as a kind of generative communication space ala Linda\nwould benefit greatly from an atomic GET+DELETE operation;  most of the extensions\nthat really do make sense are those that guarantee atomicity for various\ncombinations of existing methods.)\n\njb\n\n\n\n\n\n\n\n"}}
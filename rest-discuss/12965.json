{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":237604743,"authorName":"Bill de hOra","from":"Bill de hOra &lt;bill@...&gt;","profile":"bdehora","replyTo":"SENDER","senderId":"8dC5ZDg03KoJXwTO2TgKMiVRZCL-Vb1Kf59GCTmFceVRpr0ZQyP1PZ-NRrfoOtWYDsxuKm9jwV9QrV9n5Qwlbr8Ko-ts","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Using HTTP Link: headers for web linking non-hypertext","postDate":"1245967113","msgId":12965,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDRBNDNGMzA5LjEwMTA0MDJAZGVob3JhLm5ldD4=","inReplyToHeader":"PDIxNjA2ZGNmMDkwNjI0MDU1M2szZDg4MjU4Mm00MjQ1NGZlNGNhNWU4ZkBtYWlsLmdtYWlsLmNvbT4=","referencesHeader":"PDIxNjA2ZGNmMDkwNjI0MDU1M2szZDg4MjU4Mm00MjQ1NGZlNGNhNWU4ZkBtYWlsLmdtYWlsLmNvbT4="},"prevInTopic":12926,"nextInTopic":12969,"prevInTime":12964,"nextInTime":12966,"topicId":12926,"numMessagesInTopic":42,"msgSnippet":"LINK suffers from a problem - it magically pops into existence as a header, but without a means to manage the implied relationship. I think the architecture","rawEmail":"Return-Path: &lt;bill@...&gt;\r\nX-Sender: bill@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 4806 invoked from network); 25 Jun 2009 21:58:45 -0000\r\nX-Received: from unknown (98.137.34.46)\n  by m5.grp.sp2.yahoo.com with QMQP; 25 Jun 2009 21:58:45 -0000\r\nX-Received: from unknown (HELO chilco.textdrive.com) (207.7.108.242)\n  by mta3.grp.sp2.yahoo.com with SMTP; 25 Jun 2009 21:58:45 -0000\r\nX-Received: from [192.168.1.10] (unknown [89.100.251.254])\n\tby chilco.textdrive.com (Postfix) with ESMTP id 6F93DDD52F\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Thu, 25 Jun 2009 21:58:36 +0000 (UTC)\r\nMessage-ID: &lt;4A43F309.1010402@...&gt;\r\nDate: Thu, 25 Jun 2009 22:58:33 +0100\r\nUser-Agent: Thunderbird 2.0.0.21 (X11/20090409)\r\nMIME-Version: 1.0\r\nTo: rest-discuss@yahoogroups.com\r\nReferences: &lt;21606dcf0906240553k3d882582m42454fe4ca5e8f@...&gt;\r\nIn-Reply-To: &lt;21606dcf0906240553k3d882582m42454fe4ca5e8f@...&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Bill de hOra &lt;bill@...&gt;\r\nSubject: Re: [rest-discuss] Using HTTP Link: headers for web linking non-hypertext\r\nX-Yahoo-Group-Post: member; u=237604743; y=6vKMkTWijOBq2Go6l1g2EnHTSwefWE962VfvqOO7FO3zjg\r\nX-Yahoo-Profile: bdehora\r\n\r\nLINK suffers from a problem - it magically pops into existence as a \nheader, but without a means to manage the implied relationship. I think \nthe architecture simply doesn&#39;t support management of resource \nrelationships in this way, and the only means is through hypertext and \nconstrained protocols on top of HTTP.\n\nClaim: LINK/UNLINK break with web architecture. So unless you want to go \nto a higher level in the stack to something like RDF/OWL that would \nprovide a real meta-model, the sensible technique to managing these \nrelationships is hypertext. People in the IETF that don&#39;t like Atom \nshould bear the burden of proposing a credible technical alternative (eg \nAtom/AtomPub provides a solution for iterators and collections which \nHTTP doesn&#39;t cater for)\n\nBill\n\nSam Johnston wrote:\n&gt; \n&gt; \n&gt; \n&gt; Afternoon all,\n&gt; \n&gt; I have a need for a meta-model which allows for association of \n&gt; non-hypertext representations of resources (e.g. binaries, images, \n&gt; etc.). I had originally proposed Atom but this wasn&#39;t well accepted by \n&gt; the XML xenophobes. It seems the Link: header was intended to accomplish \n&gt; just what I need in the original HTTP RFCs. Unfortunately though HTML \n&gt; was dominant and Link: wasn&#39;t implemented (nor implementable), so it was \n&gt; dropped only to be recently revived by @mnot in \n&gt; draft-nottingham-http-link-header.\n&gt; \n&gt; Per my request for clarification to apps-discuss below (which failed to \n&gt; get any bites - perhaps tl;dr), I&#39;d like to find a sensible mechanism \n&gt; for setting the Link: headers, ideally without relying on new HTTP verbs \n&gt; (LINK and UNLINK were originally specified but have also been dropped). \n&gt; I&#39;m figuring that just sending Link: header(s) in PUTs and POSTs will \n&gt; cleanly accomplish most of what I need, but things get hairy when you \n&gt; start thinking about updating/deleting individual links.\n&gt; \n&gt; Sam\n&gt; \n&gt; ---------- Forwarded message ----------\n&gt; From: *Sam Johnston* &lt;samj@... &lt;mailto:samj@...&gt;&gt;\n&gt; Date: Mon, Jun 15, 2009 at 5:27 AM\n&gt; Subject: Clarifications on Web Linking with HTTP\n&gt; To: apps-discuss@... &lt;mailto:apps-discuss@...&gt;\n&gt; \n&gt; \n&gt; Morning all,\n&gt; \n&gt; The HTTP Link: header enables web linking without hypermedia - that\n&gt; is, arbitrary content types can be linked (with attriubtes)\n&gt; out-of-band rather than within the payload (e.g. HTML) itself. This\n&gt; enables the use of HTTP as a meta-model (at least for individual\n&gt; resources) without having to resort to Atom, which is potentially\n&gt; great news for RESTful APIs.\n&gt; \n&gt; I am currently working on a real world application of Marks&#39; Web\n&gt; Linking I-D[1] (OGF&#39;s Open Cloud Computing Interface -\n&gt; http://www.occi-wg.org/ &lt;http://www.occi-wg.org/&gt;) and require \n&gt; clarification on a few points\n&gt; (which may want to end up in the I-D).\n&gt; \n&gt;  - First and foremost, in the absence of the LINK and UNLINK verbs\n&gt; originally defined in RFC 2068[2] but specifically omitted from RFC\n&gt; 2616[3], what is the preferred mechanism for manipulating these links\n&gt; via HTTP? It appears that this header is intended for GET requests\n&gt; only, but presumably specifying it in POST and PUT requests would be\n&gt; one option that avoids the creation of [not so] &quot;new&quot; verbs (bearing\n&gt; in mind that short of accepting Link: headers from empty POST/PUT\n&gt; requests, it would be necessary to GET and then PUT the entire payload\n&gt; to update links - twice if they were reciprocal). While there was an\n&gt; attempt a dozen years ago to better define the relevant HTTP verbs[4],\n&gt; it strikes me as more sensible to follow the example of the\n&gt; Set-Cookie: header for this rather than WebDAV&#39;s example of creating\n&gt; new verbs (even if we&#39;ve seen them before) but you guys are the\n&gt; experts.\n&gt; \n&gt;  - Another concern with an arbitrary number of links is that arbitrary\n&gt; string length limits may be imposed by user agents, as they are with\n&gt; URLs. This should not be a problem where there is one link per header,\n&gt; but it may be where the headers are concatenated as described in RFC\n&gt; 2616[5]. This is a double edged sword however as some user agents have\n&gt; only recently added support for multiple headers of the same type[6]\n&gt; and it remains a problem for some[7].\n&gt; \n&gt;  - The introduction of a link relation registry at IANA makes a lot of\n&gt; sense, though it would be nice if these were common for HTTP, HTML,\n&gt; Atom and other places links appear. Perhaps namespaces (e.g.\n&gt; &quot;atom:service&quot; or &quot;occi.state.restart&quot;) would be useful here so as to\n&gt; enable significantly more future extensibility.\n&gt; \n&gt;  - It seems useful to be able to (optionally) specify the type (as in\n&gt; content type rather than relation type) of a given link, as is the\n&gt; case for Atom. That said, this also seems somewhat redundant with HTTP\n&gt; Content Negotiation, but implementations that choose to support the\n&gt; &quot;type&quot; attribute may gain some performance and usability advantages\n&gt; from doing so. The matter of whether this information belongs in URIs\n&gt; (and if so, which side of the &#39;?&#39;) or in HTTP headers (or both) is\n&gt; still not clear to me as there are pros and cons of each - perhaps the\n&gt; relation type is more suitable (or both?) as it&#39;s often not possible\n&gt; to unambigously determine the relation type from the content type\n&gt; (consider modeling people where both fingerprint and portrait\n&gt; representations may exist in image/png format).\n&gt; \n&gt; To be more specific about the requirements, the API models cloud\n&gt; infrastructure services (IaaS) and has three main nouns (compute,\n&gt; network, storage) which need to be associated with each other with\n&gt; attributes on the links (e.g. a compute resource having a network\n&gt; resource associated with a local identifier attribute of &quot;eth0&quot;).\n&gt; Using Atom as the meta-model worked fine (as evidenced by GData) but\n&gt; it now seems possible - at least for individual resources - with HTTP.\n&gt; \n&gt; Cheers,\n&gt; \n&gt; Sam\n&gt; \n&gt; 1. http://tools.ietf.org/html/draft-nottingham-http-link-header-05 \n&gt; &lt;http://tools.ietf.org/html/draft-nottingham-http-link-header-05&gt;\n&gt; 2. http://tools.ietf.org/html/rfc2068#section-19.6.1 \n&gt; &lt;http://tools.ietf.org/html/rfc2068#section-19.6.1&gt;\n&gt; 3. http://tools.ietf.org/html/rfc2616#section-19.6.3 \n&gt; &lt;http://tools.ietf.org/html/rfc2616#section-19.6.3&gt;\n&gt; 4. \n&gt; http://ftp.ics.uci.edu/pub/ietf/http/draft-pritchard-http-links-00.txt \n&gt; &lt;http://ftp.ics.uci.edu/pub/ietf/http/draft-pritchard-http-links-00.txt&gt;\n&gt; 5. http://tools.ietf.org/html/rfc2616#section-4.2 \n&gt; &lt;http://tools.ietf.org/html/rfc2616#section-4.2&gt;\n&gt; 6. http://www.mail-archive.com/bug-wget@.../msg00076.html \n&gt; &lt;http://www.mail-archive.com/bug-wget@.../msg00076.html&gt;\n&gt; 7. http://bugs.python.org/issue1660009 &lt;http://bugs.python.org/issue1660009&gt;\n&gt; \n&gt; \n\n\n"}}
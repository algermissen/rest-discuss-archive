{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":94742758,"authorName":"Bill de hÓra","from":"=?ISO-8859-1?Q?Bill_de_h=D3ra?= &lt;dehora@...&gt;","profile":"bdehora","replyTo":"SENDER","senderId":"nXumhJrAs-nMzhE_EqYsltlPRSy8sse6irdRduE_DNAWCP84rZatgqnZGFPW1o5HJr3HE-U6xrLbLQjl74_p_LRHtpv-ur05362Im5jae3x_KAEwZjF-KzqO","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Another REST vs. SOAP article","postDate":"1039114077","msgId":2991,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDNERUY5RjVELjEwMzA1MDhAZWlyY29tLm5ldD4=","referencesHeader":"PDAwNzcwMWMyOTk1NCQ2NWJkMWJiMCRkZWM0N2M0MkBkZXV0c2NoODEwMD4gPDNERUE3RTA0LjcwNjAxMDJAcHJlc2NvZC5uZXQ+IDwzREVCMkJBMy42MDEwMjAxQGVpcmNvbS5uZXQ+IDwzREVCQjQzMC41MDEwMzA1QHByZXNjb2QubmV0Pg=="},"prevInTopic":2990,"nextInTopic":2994,"prevInTime":2990,"nextInTime":2992,"topicId":2908,"numMessagesInTopic":50,"msgSnippet":"Paul Prescod wrote: Hi Paul, ... to have ... (usually an ... In my ... You see, I don t think your opinion holds for all cases, only for the web case. Arguably","rawEmail":"Return-Path: &lt;dehora@...&gt;\r\nX-Sender: dehora@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_2_3_0); 5 Dec 2002 18:48:21 -0000\r\nReceived: (qmail 79549 invoked from network); 5 Dec 2002 18:48:20 -0000\r\nReceived: from unknown (66.218.66.217)\n  by m6.grp.scd.yahoo.com with QMQP; 5 Dec 2002 18:48:20 -0000\r\nReceived: from unknown (HELO mail00.svc.cra.dublin.eircom.net) (159.134.118.16)\n  by mta2.grp.scd.yahoo.com with SMTP; 5 Dec 2002 18:48:20 -0000\r\nReceived: (qmail 80098 messnum 566385 invoked from network[194.125.185.223/unknown]); 5 Dec 2002 18:48:18 -0000\r\nReceived: from unknown (HELO eircom.net) (194.125.185.223)\n  by mail00.svc.cra.dublin.eircom.net (qp 80098) with SMTP; 5 Dec 2002 18:48:18 -0000\r\nMessage-ID: &lt;3DEF9F5D.1030508@...&gt;\r\nDate: Thu, 05 Dec 2002 18:47:57 +0000\r\nUser-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.0; en-US; rv:1.1) Gecko/20020826\r\nX-Accept-Language: en, en-us\r\nMIME-Version: 1.0\r\nTo: Paul Prescod &lt;paul@...&gt;\r\nCc: &quot;Toivo &#92;&quot;Deutsch&#92;&quot; Lainevool&quot; &lt;tlainevool@...&gt;, \n rest-discuss@yahoogroups.com\r\nSubject: Re: [rest-discuss] Another REST vs. SOAP article\r\nReferences: &lt;007701c29954$65bd1bb0$dec47c42@deutsch8100&gt; &lt;3DEA7E04.7060102@...&gt; &lt;3DEB2BA3.6010201@...&gt; &lt;3DEBB430.5010305@...&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 8bit\r\nFrom: =?ISO-8859-1?Q?Bill_de_h=D3ra?= &lt;dehora@...&gt;\r\nX-Yahoo-Group-Post: member; u=94742758\r\nX-Yahoo-Profile: bdehora\r\n\r\nPaul Prescod wrote:\n\nHi Paul,\n\n\n &gt; When you use the &quot;handle as first parameter hack&quot;, you now have \nto have\n &gt; two addresses for each object. The address of the service \n(usually an\n &gt; HTTP URI) and the &quot;handle&quot; which is really just another address. \nIn my\n &gt; opinion, this is not proper OOP programming.\n\nYou see, I don&#39;t think your opinion holds for all cases, only for\nthe web case.\n\nArguably hiding things can be &#39;proper&#39; OOP, depending on whether we\nwant to use encapsulation to simplify an interface: see Hide\nDelgate, Remove Middle Man [1], and Facade [2].\n\nIt&#39;s very probably the the case that common encapsulation patterns\nand idioms used in OOP are inappropriate for Web programming (I have\nno end of bother with the Front Controller, a Facade variant that is\npopular for designing websites). But that&#39;s not what I&#39;m hearing\nfrom you.\n\n\n &gt;It would be very rare to\n &gt; see a Java interface like:\n &gt;\n &gt; class IndividualAccount{\n &gt;     function debit(accountNumber, val);\n &gt;     function credit(accountNumber, val);\n &gt; }\n &gt;\n &gt; Because this makes it _impossible_ to pass a reference to an \naccount as\n &gt; a standard Java object reference.\n\nIf I can pass accountNumber as a value to a method, I must have got\nit from somwhere, so I can make an Object for it:\n\n     Integer accno = new Integer(accountNumber);\n     ...\n\nnot impossible then, but pretty useless.\n\n &gt;\n &gt; class AccountManager{\n &gt;     function getAccount(number);\n &gt; }\n &gt;\n &gt; class Account{\n &gt;     function debit(val);\n &gt;     function credit(val);\n &gt; }\n\nBut don&#39;t stop there! In REST it&#39;s much more like:\n\nclass AccountManager:\n   def post(uri): ...\n   def get(uri): ...\n\nclass Account:\n   def post(uri): ...\n   def get(uri): ..\n\n\nAny number of OO folks will tell you they don&#39;t like coarse \ngrained/uniform interfaces (or where method names are passed around \nas keys). The reasons I&#39;ve been given are:\n\n   1) it skirts around/tunnels through, the type system of the language.\n\n   2) it makes the the resulting code unclear.\n\n(note that these are to do with code comprehension and maintainance, \nrather than some technical bound on uniform interfaces).\n\nThe OO world values having non-standard interfaces. Then again, much \nOOP is done for the local (machine or administrative) case, where \nthis view might make sense. It pays to remember that for many J2EE \nand .NET developers it will not always be clear that what works well \nfor the local case won&#39;t work so well over the network - fine \ngrained data transfer and latent returns being obvious examples.\n\nSo I&#39;m very wary of saying without qualification that the REST style \nis *more* or *proper* OOP with respect to the services style (if \nindeed there is such a thing as the services style).\n\nI suspect that the problem you have with the services style is that \nit constitutes a collection of antipatterns for distributed OOP. If \nso, let&#39;s document what the risks of that style are. Communicating \nto the OOP world through patterns/antipatterns is a great way to \nmake the case for the REST style - with the added bonus the claims \nfor REST will seem less grand.\n\n\n &gt; Now the account is a first-class object which can be passed around\n &gt; without reference to the query interface. i.e. it has identity, \nstate\n &gt; and behaviour.\n\nI don&#39;t dispute this is important, but a large part of what is\nsupposed to be valuable about OO is encapsulation (particulary of\nstate that would otherwise be global). Not all objects want to be\nexposed. Agian, why this needs to rethought for the web needs \nexplaining.\n\n\n &gt; This could\n &gt; be done in a language or system with per-object access controls. \nEven in\n &gt; such a system, it is not straightforward if you&#39;ve hacked static \nmethods\n &gt; to _emulate_ instance objects in a manner that is opaque to your\n &gt; infrastructure.\n\nI didn&#39;t understand this bit. I think you&#39;re saying using globals to\nmanage state is a bad idea; if so I agree with you.\n\n\nBill de h�ra\n\n[1] Refactoring, Martin Fowler\n[2] Design Patterns, Gamma et al\n\n\n\n\n\n\n"}}
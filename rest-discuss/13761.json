{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":401876259,"authorName":"Will Hartung","from":"Will Hartung &lt;willh@...&gt;","profile":"gaminginparis","replyTo":"SENDER","senderId":"74YtCtOuKY4DOShNZFbiLXbzIwOp1lSBimh8x1HDEtxpe9JYBFRZY4YGmdbsEludUom6drFXdZHTxg2Z8gasUUH_Gy0KMXbgIw","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Re: composition of REST services","postDate":"1255025167","msgId":13761,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDM5MTVjNjlkMDkxMDA4MTEwNm40ZDBhZTk5NXA0YjdiNTk2NzNiOGIxMTQ5QG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PDRBQ0RGODhFLjEwNjAxMDRAYWNhZC5iZz4=","referencesHeader":"PGhha2Vxcitibmk1QGVHcm91cHMuY29tPiA8NEFDREM4REUuMzAwMDAwN0BoYWNrY3JhZnQubmV0PgkgPDRBQ0RDRDU2LjYwNDA4MDlAYWNhZC5iZz4JIDxEN0MzOUQ1MS1GRkIwLTQ3RjUtOTZENi1BNUEyNTgyRDg4N0JAd2ViYmVyLm5hbWU+CSA8NEFDRERCQjAuMjA2MDEwMUBhY2FkLmJnPiA8NEFDREVFNzguOTAyMDYwMUByZWRoYXQuY29tPgkgPDRBQ0RGODhFLjEwNjAxMDRAYWNhZC5iZz4="},"prevInTopic":13760,"nextInTopic":13762,"prevInTime":13760,"nextInTime":13762,"topicId":13728,"numMessagesInTopic":26,"msgSnippet":"... You can take it to that level if you like, where you have a single entry point that you use to dispatch to all of the other servers. Or you can consider","rawEmail":"Return-Path: &lt;willh@...&gt;\r\nX-Sender: willh@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 10404 invoked from network); 8 Oct 2009 18:06:08 -0000\r\nX-Received: from unknown (98.137.34.46)\n  by m3.grp.sp2.yahoo.com with QMQP; 8 Oct 2009 18:06:08 -0000\r\nX-Received: from unknown (HELO mail-gx0-f221.google.com) (209.85.217.221)\n  by mta3.grp.sp2.yahoo.com with SMTP; 8 Oct 2009 18:06:08 -0000\r\nX-Received: by gxk21 with SMTP id 21so4409055gxk.10\n        for &lt;rest-discuss@yahoogroups.com&gt;; Thu, 08 Oct 2009 11:06:07 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.100.80.2 with SMTP id d2mr1726318anb.35.1255025167313; Thu, 08 \n\tOct 2009 11:06:07 -0700 (PDT)\r\nIn-Reply-To: &lt;4ACDF88E.1060104@...&gt;\r\nReferences: &lt;hakeqr+bni5@...&gt; &lt;4ACDC8DE.3000007@...&gt;\n\t &lt;4ACDCD56.6040809@...&gt;\n\t &lt;D7C39D51-FFB0-47F5-96D6-A5A2582D887B@...&gt;\n\t &lt;4ACDDBB0.2060101@...&gt; &lt;4ACDEE78.9020601@...&gt;\n\t &lt;4ACDF88E.1060104@...&gt;\r\nDate: Thu, 8 Oct 2009 11:06:07 -0700\r\nMessage-ID: &lt;3915c69d0910081106n4d0ae995p4b7b59673b8b1149@...&gt;\r\nTo: jeliazkova.nina@...\r\nCc: Rest List &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Will Hartung &lt;willh@...&gt;\r\nSubject: Re: [rest-discuss] Re: composition of REST services\r\nX-Yahoo-Group-Post: member; u=401876259; y=yd0vU78UxWRcDBy9D58-2GeUWcW9Htkw04PWU_ZfGVqVHr3cRvn8Mg\r\nX-Yahoo-Profile: gaminginparis\r\n\r\nOn Thu, Oct 8, 2009 at 7:34 AM, Nina Jeliazkova &lt;nina@...&gt; wrote:\n&gt; &gt; Links are also somewhat self describing. Like a schema URL in an XML\n&gt; &gt; document Links also define where you can find out information on how\n&gt; &gt; to interact with them.\n&gt; Links, yes. The problem is which one is the Root URI in a distributed\n&gt; set of REST services? Sounds like a centralized Naming service again,\n&gt; each Service registering itself into The_Root_URI. Am I missing something?\n\nYou can take it to that level if you like, where you have a single\nentry point that you use to dispatch to all of the other servers.\n\nOr you can consider each service is their own Root. If a consumer hits\nany of the servers first, it will eventually get what it wants done\n(assuming it&#39;s valid request in the first place, of course, that the\nserver and its associated services actually implement the API the\nconsumer is expecting).\n\nEach service knows of its complimentary services that it provides\nlinks to, whether a service &quot;knows&quot; about these other services because\nsomeone typed them in to a config file on the server or the server\nwent out to some know it all directory telling is an implementation\ndetail.\n\nIf you use the distributed case, where each service has it&#39;s own local\ndata, then you may think that you have a large reconfiguration burden\nwhen services move around. &quot;If I change this service, I have to tell\neveryone else about the change&quot;. That&#39;s true, but you could do that\ndynamically through redirects. Older services have older links, they\nhit the old infrastructure which redirects to the new infrastructure.\nThis capability keeps the entire architecture robust and resilient to\nchange without having some central authority knowing &quot;all the links&quot;.\nIt breaks down when services are &quot;bad citizens&quot; that don&#39;t let folks\nknow who replaced them, but that&#39;s a choice you need to make in your\nimplementation.\n\nThe key thing is, I think, that a REST architecture is not about URIs.\nWe focus on that a lot, but it misses the big picture.\n\nThe keyword regarding links is that they&#39;re opaque. Rather than the\nURIs themselves being important (which includes the actual servers\nthey represent), the meta data describing the links is what is\nimportant. Each link has some kind of name, and the data type\nassociated with it.\n\nThe consumers of the service, the API if you will, know what the names\ndo, and what goes in to the data type.\n\nApplications are not going to be able to &quot;intuit&quot; anything. They will\nlikely not &quot;discover&quot; anything, within reason. They should &quot;know&quot; what\nthey&#39;re looking for, and what do to with it once they find it. If an\napplication want the next chunk of data in a long list, it will need\nto already know to look for a link named &quot;next&quot;, know what, if any\ndata needs to associated with that request and know the appropriate\nverb to use. In this case, will likely just use GET on the URI\nprovided by the link named &quot;next&quot;.\n\nThe application isn&#39;t going to &quot;discover&quot; the &quot;next&quot; link, it has to\nknow to expect it and what it&#39;s called. It could have been called\n&quot;more&quot;, or &quot;nextChunk&quot; or however &quot;next&quot; is expressed in Chinese.\n\nIf you want a server to direct a consumer to Server B or Server C,\nthat&#39;s a choice the server needs to make. It could be a round robin\nacross a configured list, it could be random, it could be result of a\nquery to a central load balancing service used to direct traffic\nacross the cluster. The consumer certainly has no care whatsoever\nwhether it is going to Server B or C. The consumer, in fact, won&#39;t\nknow. It&#39;ll go wherever it&#39;s told to go.\n\nThe human WWW &quot;works&quot; because we can intuit and discover the API as we\ngo along. Whether its a Link named next,and icon with an arror, a plus\nsign, we can resolve those abstractions at a natural language level.\nWhen presented with a form, we generally know how that form should be\nfilled in, either from past experience (a name and address form, for\nexample), or from just plain training (filling in a purchase order on\na back end office system all of the codes and details).\n\nMachines aren&#39;t at that level yet. They can&#39;t interpret much of\nanything yet. They simply have to be trained.\n\nRegards,\n\nWill Hartung\n(willh@...)\n\n"}}
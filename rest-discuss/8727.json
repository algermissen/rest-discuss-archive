{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":164939419,"authorName":"Jon Hanna","from":"Jon Hanna &lt;jon@...&gt;","profile":"hack_poet","replyTo":"SENDER","senderId":"x1Cs0mw7P7aSha8ubWPtYfLedz5s1u-di6XKFCnBxLlZh70q_5r5jKCljx9IZ4AV1_XCbnqBMkkmS9quDHaKqJ7XMJY","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] REST on the Desktop Anyone?","postDate":"1180656069","msgId":8727,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQ2NUY2MUM1LjUwNTA4MDhAaGFja2NyYWZ0Lm5ldD4=","inReplyToHeader":"PDAwMTYwMWM3YTNkOSRhMGM2MDA3MCQyMTAyZmVhOUBHdWlkZXMubG9jYWw+","referencesHeader":"PDE0M0NCNTVELUFEMTktNEZBMy1BRURGLURBMUJDOTgxRUEwMEBpbm5vcS5jb20+IDw4OTI2MTMuMzcwNDUucW1Ad2ViNTIxMDMubWFpbC5yZTIueWFob28uY29tPiA8MDAxNjAxYzdhM2Q5JGEwYzYwMDcwJDIxMDJmZWE5QEd1aWRlcy5sb2NhbD4="},"prevInTopic":8726,"nextInTopic":8728,"prevInTime":8726,"nextInTime":8728,"topicId":8703,"numMessagesInTopic":59,"msgSnippet":"... Why? Actually this does happen sometimes for various reasons. For one it can be useful sometimes to include local objects as part of the web (inverting the","rawEmail":"Return-Path: &lt;jon@...&gt;\r\nX-Sender: jon@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 70857 invoked from network); 1 Jun 2007 00:01:43 -0000\r\nReceived: from unknown (66.218.67.35)\n  by m48.grp.scd.yahoo.com with QMQP; 1 Jun 2007 00:01:43 -0000\r\nReceived: from unknown (HELO mail.arena1.com) (63.116.216.131)\n  by mta9.grp.scd.yahoo.com with SMTP; 1 Jun 2007 00:01:41 -0000\r\nReceived: from ip-83-147-166-27.dub-fng.metro.digiweb.ie [83.147.166.27] by mail.arena1.com with SMTP;\n   Thu, 31 May 2007 20:01:08 -0400\r\nMessage-ID: &lt;465F61C5.5050808@...&gt;\r\nDate: Fri, 01 Jun 2007 01:01:09 +0100\r\nUser-Agent: Thunderbird 2.0.0.0 (Windows/20070326)\r\nMIME-Version: 1.0\r\nTo: Rest List &lt;rest-discuss@yahoogroups.com&gt;\r\nReferences: &lt;143CB55D-AD19-4FA3-AEDF-DA1BC981EA00@...&gt; &lt;892613.37045.qm@...&gt; &lt;001601c7a3d9$a0c60070$2102fea9@...&gt;\r\nIn-Reply-To: &lt;001601c7a3d9$a0c60070$2102fea9@...&gt;\r\nContent-Type: text/plain; charset=UTF-8; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-Declude-Sender: jon@... [83.147.166.27]\r\nX-Declude-Spoolname: -157462424523.eml\r\nX-Declude-RefID: \r\nX-Declude-Note: Scanned by Declude 4.3.14 for spam. &quot;http://www.declude.com/x-note.htm&quot;\r\nX-Declude-Scan: Score [0] at 20:01:17 on 31 May 2007\r\nX-Declude-Fail: Whitelisted\r\nX-Country-Chain: \r\nX-eGroups-Msg-Info: 1:0:0:0\r\nFrom: Jon Hanna &lt;jon@...&gt;\r\nSubject: Re: [rest-discuss] REST on the Desktop Anyone?\r\nX-Yahoo-Group-Post: member; u=164939419; y=Kei3qj6ojY0ouuvdpqQ9d1zayRPCiKTgRaEBgy_zMSW1kXNT\r\nX-Yahoo-Profile: hack_poet\r\n\r\nMike Schinkel wrote:\n&gt; As a side note, I&#39;d really like to see the REST architecture style of\n&gt; contrained interface and URLs for everything be adopted by some frameworks\n&gt; used for the *DESKTOP* development.  I think it would be phenominally\n&gt; valuable for desktop application automation, interoperability, and usability\n&gt; to have the REST model of URLs and constraints.\n\nWhy?\n\nActually this does happen sometimes for various reasons. For one it can \nbe useful sometimes to include local objects as part of the web \n(inverting the anti-pattern of assuming remote objects are the same as \nlocal ones by treating local ones as remote - quite a useful abstraction \nif you are mainly dealing with remote objects but have to deal with a \nsmall number of local ones).\n\nHowever. Looking at the constraints:\n\nClient-Server: Sometimes useful, sometimes not. Mainly useful if there \nwill be more than one client calling into the server.\n\nClient-Stateless-Server: Less often useful. Can help with consistency in \nsome cases, but it&#39;s main advantage is scalability and scalability \nissues on the desktop are different to those on a network. Definitely \nnot *as* useful at least.\n\nCache: Caching in a local context tends to be a very different matter. \nCaching because something is &quot;far away&quot; (e.g. a CPUs instruction cache) \nhas both different requirements and different issues (ensuring freshness \nhas a whole different bunch of pressures than on the web). Caching at a \nhigher level tends to be a matter of something being hard to compute \nrather than hard to reach. Again a very different type of caching. Very \noften write-through caching is possible, even easy, in local contexts \nthough it isn&#39;t in REST (why the spec says a PUT means all cached \nrepresentations are cleared, rather than saying the cache can update \nstraight from the PUT). Generally, not very often analogous.\n\nUniform Interface: Very much less often useful. Useful a lot of the time \nand there are many analogies of various sorts, but it&#39;s also often \nuseful that different code can see the same object through different \ninterfaces when it comes to the desktop. I&#39;d say offering a uniform \ninterface is useful on the desktop, but constraining to one isn&#39;t.\n\nLayered System: Can be a useful abstraction, but it can also be useful \nto be able to by-pass it. Again, useful as an offered view but less \nuseful as a constraint.\n\nCode-On-Demand: I think the advantages/disadvantages balance here is \nvery much different to on the web. Scripts can be even more powerful on \nthe desktop (because they can more often insist upon a given language \nand/or object model being supported) but they can pose even greater \nsecurity and other problems (especially since our uniform interface will \nonly ever be an agreed-upon constraint rather than an absolute one \nunless we go so far as to build a sandbox). The spate of worms around \nthe turn of this century affecting Microsoft Office products were a case \nof how COD applies to the desktop. There&#39;s also less advantage (your app \nis on the desktop, the other code is on the desktop; just run the other \ncode!).\n\nUniform-Layered-Client-Cache-Stateless-Server with optional \nCode-On-Demand (AKA REST): Not at all clear how well these go together \nfor a desktop app. I can see that perhaps I might go &quot;hmm, this is \npretty much a hypermedia system here, I&#39;d probably gain at least more \nthan I lost if I stuck to REST&quot; though I don&#39;t I&#39;d be 100% sure about \nthat decision if I did make it. I very much doubt I&#39;ll ever go &quot;hmm, \nlet&#39;s not deal with these objects as local objects but produce \nhypermedia representations of them and work on those&quot; unless I had a \nvery good reason to from other requirements - most likely a matter of \nwanting to network it in the future.\n\n&gt; I use Windows and on\n&gt; Windows the closest thing to it (besides the browser itself) is Windows\n&gt; Explorer when &quot;Display full path in title bar&quot; is turned on.\n\nI&#39;m completely missing the connection here.\n\nThere&#39;s something similar to a REST view in some of the more recent \nwindows views on folders where they use hypermedia to link to related \nobjects but that&#39;s one tiny piece of hypermedia-style navigation that is \nmore reminiscient to REST than actually RESTful.\n\nI don&#39;t see how the full path in title bar helps.\n\n\n"}}
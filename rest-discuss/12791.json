{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":210067383,"authorName":"Nick Gall","from":"Nick Gall &lt;nick.gall@...&gt;","profile":"nick_gall_1117","replyTo":"SENDER","senderId":"VH_3rOYkyGu_KTbCsiIemIRh9lIh6DYFplu3I-d8YcSmDWXeQe6hGb7g-1L3DS10Wc2MbT4cbRDUd8nxURz7rKnyVvJ5rg","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Re: YAATRTA HATEOAS","postDate":"1244225993","msgId":12791,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGE2YTZkZjM2MDkwNjA1MTExOWoxZTJkNGVkN3cyYjkzZTVlZDI4ZGY0ZmNjQG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PDRBMjkwQ0QwLjUwNjA3MDZAZ21haWwuY29tPg==","referencesHeader":"PGE2YTZkZjM2MDkwNjA0MDMwMHU1YTBiMjc0MnBkMTdjYmMyNjA3NjQ1MGNiQG1haWwuZ21haWwuY29tPiAJPGgwOG85cis2azJpQGVHcm91cHMuY29tPiA8YTZhNmRmMzYwOTA2MDQxMDM4cjQ2MTVhM2QzczU0YmE1NzliZWJjMmFjZTFAbWFpbC5nbWFpbC5jb20+IAk8NEE2NkYzRjctNkMxOC00NEUyLTlEMjItRTJFRjA5QzY3QTM2QHdlYmJlci5uYW1lPiA8YTZhNmRmMzYwOTA2MDUwMzMzdGMxMTk0Njl2MWI2MDJlYmNlZmIxMmQyMUBtYWlsLmdtYWlsLmNvbT4gCTw0QTI4RjkxRS41MDkwMTA5QGdtYWlsLmNvbT4gPEJBMEVCQTZCLTRBRjYtNDk5Ni04QTU1LTgzQjUxOTMxNDRFNEB3ZWJiZXIubmFtZT4gCTw0QTI5MENEMC41MDYwNzA2QGdtYWlsLmNvbT4="},"prevInTopic":12790,"nextInTopic":12792,"prevInTime":12790,"nextInTime":12792,"topicId":12730,"numMessagesInTopic":56,"msgSnippet":"... I know I m going to regret wading into this, but here goes... I think HATEOAS is misleading. It suggests that hypermedia, e.g., the set of HTML documents","rawEmail":"Return-Path: &lt;nick.gall@...&gt;\r\nX-Sender: nick.gall@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 18079 invoked from network); 5 Jun 2009 18:21:14 -0000\r\nX-Received: from unknown (69.147.108.202)\n  by m5.grp.sp2.yahoo.com with QMQP; 5 Jun 2009 18:21:14 -0000\r\nX-Received: from unknown (HELO fg-out-1718.google.com) (72.14.220.157)\n  by mta3.grp.re1.yahoo.com with SMTP; 5 Jun 2009 18:21:14 -0000\r\nX-Received: by fg-out-1718.google.com with SMTP id 13so270853fge.14\n        for &lt;rest-discuss@yahoogroups.com&gt;; Fri, 05 Jun 2009 11:20:13 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.86.65.9 with SMTP id n9mr4194497fga.47.1244226013130; Fri, 05 \n\tJun 2009 11:20:13 -0700 (PDT)\r\nIn-Reply-To: &lt;4A290CD0.5060706@...&gt;\r\nReferences: &lt;a6a6df360906040300u5a0b2742pd17cbc26076450cb@...&gt; \n\t&lt;h08o9r+6k2i@...&gt; &lt;a6a6df360906041038r4615a3d3s54ba579bebc2ace1@...&gt; \n\t&lt;4A66F3F7-6C18-44E2-9D22-E2EF09C67A36@...&gt; &lt;a6a6df360906050333tc119469v1b602ebcefb12d21@...&gt; \n\t&lt;4A28F91E.5090109@...&gt; &lt;BA0EBA6B-4AF6-4996-8A55-83B5193144E4@...&gt; \n\t&lt;4A290CD0.5060706@...&gt;\r\nDate: Fri, 5 Jun 2009 14:19:53 -0400\r\nMessage-ID: &lt;a6a6df360906051119j1e2d4ed7w2b93e5ed28df4fcc@...&gt;\r\nTo: Rest List &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Type: multipart/alternative; boundary=000e0cd2515288706e046b9df138\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Nick Gall &lt;nick.gall@...&gt;\r\nSubject: Re: [rest-discuss] Re: YAATRTA HATEOAS\r\nX-Yahoo-Group-Post: member; u=210067383; y=eZyENZwfbSUBpUq3RAVOOX6aRh5aFFy1VlWtdjXQZbY-rxrC-s9LA0w\r\nX-Yahoo-Profile: nick_gall_1117\r\n\r\n\r\n--000e0cd2515288706e046b9df138\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n2009/6/5 Ant=F3nio Mota &lt;amsmota@...&gt;:\n&gt; Well, yes, but my point was =\r\nthat using expressions like &quot;Hypermedia\n&gt; Describes Protocols&quot; does nothing=\r\n but obscure the role of the hipermedia\n&gt; engine as the driving force in RE=\r\nSTful applications (hmmm, I think I\n&gt; read this somewhere... :)\n&gt;\n&gt; And aga=\r\nin, my point was also that we should stress the concept of\n&gt; *engine* when =\r\ntalking about &quot;hipermedia constraint&quot;. If you use only\n&gt; this expression it=\r\n will make people think that &quot;having links&quot; is enough,\n&gt; when actually it&#39;s=\r\n &quot;having links as a way to change application states&quot;.\n&gt; Maybe it sounds li=\r\nke a small difference, but &quot;having links&quot; suggest a\n&gt; static thing, while &quot;=\r\nengine&quot; implies a dynamic thing. &quot;Having links&quot;\n&gt; stresses the role of the =\r\nclient, while &quot;engine&quot; stresses the fact that\n&gt; is the server, not the clie=\r\nnt, that is responsible for the application\n&gt; and the states available at a=\r\nny point. The client is only responsible\n&gt; for choosing a path between the =\r\nones the server determines. And those\n&gt; can be different any time the clien=\r\nt accesses one same resource if the\n&gt; server (application) logic determines=\r\n it.\n&gt;\n&gt; So, basically, I think that talking about &quot;hipermedia&quot; without &quot;en=\r\ngine&quot;\n&gt; its very reducing and diminishing when explaining HATEAOS.\n\nI know =\r\nI&#39;m going to regret wading into this, but here goes...\n\nI think HATEOAS is =\r\nmisleading. It suggests that hypermedia, e.g., the set of\nHTML documents ex=\r\nchanged among a user agent and a set of servers, IS the\nengine. Hypermedia =\r\nis NOT the engine, the user agent is the engine. As the\nbasis of this claim=\r\n, I offer the following close reading of Roy Fielding&#39;s\nthesis.\n\nRoy introd=\r\nuces the term HATEOAS in Section 5.1.5 (Uniform Interface) as\nfollows: *RES=\r\nT is defined by four interface constraints: identification of\nresources; ma=\r\nnipulation of resources through representations;\nself-descriptive messages;=\r\n and, hypermedia as the engine of application\nstate. These constraints will=\r\n be discussed in **Section\n5.2*&lt;http://www.ics.uci.edu/~fielding/pubs/disse=\r\nrtation/rest_arch_style.htm#sec_5_2&gt;\n*.* Oddly, most of the discussion of H=\r\nATEOAS actually takes place in Section\n5.3.3 (Data View). I quote it in ful=\r\nl at the end of the email.\n\nThe basic question is, &quot;What is the engine that=\r\n drives the application\nthrough its various states?&quot; This final paragraph i=\r\ns the key:\n\n*The model application is therefore an engine that moves from o=\r\nne state to\nthe next by examining and choosing from among the alternative s=\r\ntate\ntransitions in the current set of representations. *Not surprisingly, =\r\nthis\nexactly matches the user interface of a hypermedia browser. However, t=\r\nhe\nstyle does not assume that all applications are browsers. In fact, the\na=\r\npplication details are hidden from the server by the generic connector\ninte=\r\nrface, and thus a user agent could equally be an automated robot\nperforming=\r\n information retrieval for an indexing service, a personal agent\nlooking fo=\r\nr data that matches certain criteria, or a maintenance spider busy\npatrolli=\r\nng the information for broken references or modified content [39].\n\n*\n*\nI r=\r\nead this as saying that the engine is the browser or, more generally, any\nu=\r\nser agent.\n\nFurther support for this reading is provided by this paragraph:=\r\n\n\nThe application state is controlled and stored by the user agent and can =\r\nbe\ncomposed of representations from multiple servers. In addition to freein=\r\ng\nthe server from the scalability problems of storing state, this allows th=\r\ne\nuser to directly manipulate the state (e.g., a Web browser&#39;s history),\nan=\r\nticipate changes to that state (e.g., link maps and prefetching of\nrepresen=\r\ntations), and jump from one application to another (e.g., bookmarks\nand URI=\r\n-entry dialogs).\n\n\nAgain, it is the user agent that is *driving *the transi=\r\ntions between\nstates, hence the user agent is acting as the engine -- not h=\r\nypermedia. To\nbe precise, in the case of a web browser user agent, it is th=\r\ne combination\nof the browser software (user agent) and the human using the =\r\nbrowser (user)\nthat is the &quot;engine of application state&quot;, i.e. that is driv=\r\ning the\ntransitions between states. It is the human user who &quot;examin[es] an=\r\nd\nchoos[es] from among the alternative state transitions.&quot;* *It is the huma=\r\nn\nuser who decides to *jump from one state to another* or to *manipulate th=\r\ne\nbrowser state*, i.e., use the back button.\n\nHere is one more critical par=\r\nagraph:\n\nREST concentrates all of the control state into the representation=\r\ns received\nin response to interactions. The goal is to improve server scala=\r\nbility by\neliminating any need for the server to maintain an awareness of t=\r\nhe client\nstate beyond the current request. An application&#39;s state is there=\r\nfore\ndefined by its pending requests, the topology of connected components =\r\n(some\nof which may be filtering buffered data), the active requests on thos=\r\ne\nconnectors, the data flow of representations in response to those request=\r\ns,\nand the processing of those representations as they are received by the =\r\nuser\nagent.\n\n\nLet&#39;s list that constituents of an application&#39;s state for cl=\r\narity:\n\n   1. pending requests\n   2. the topology of connected components\n =\r\n  3. the active requests on those connectors\n   4. the data flow of represe=\r\nntations in response to those requests\n   5. the processing of those repres=\r\nentations as they are received by the\n   user agent\n\nOf these five constitu=\r\nents, (2)-(5) are *reactive. *Only (1) is *proactive*.\nAgain, it is pending=\r\n requests that *drive* the application state. Where do\nsuch pending request=\r\ns come from? In the case of a browser, they ultimately\ncome from the human =\r\nuser. By clicking on links and filling in forms, the\nhuman user *drives *th=\r\ne application. Accordingly, the combination of the\nhuman user and the user =\r\nagent browser act as the engine of state, i.e., the\nengine driving applicat=\r\nion state transitions.\n\nNote that REST has a somewhat unusual concept of ap=\r\nplication:\n\nSince REST is specifically targeted at distributed information =\r\nsystems, it\nviews an application as a cohesive structure of information and=\r\n control\nalternatives through which a user can perform a desired task. For =\r\nexample,\nlooking-up a word in an on-line dictionary is one application, as =\r\nis touring\nthrough a virtual museum, or reviewing a set of class notes to s=\r\ntudy for an\nexam. Each application defines goals for the underlying system,=\r\n against\nwhich the system&#39;s performance can be measured.\n\n\nSo hypermedia is=\r\n the *cohesive structure of information and control\nalternatives*. Hypermed=\r\nia is a *structure*, not an *engine. * Hypermedia is\nmerely a representatio=\r\nn of application state (as a network structure of\ncontrol information), not=\r\n what drives it. The *engine* that drives\napplication state is the user per=\r\nforming the task, and the user agent\nassisting in that performance.\n\nIn con=\r\nclusion, since hypermedia is NOT the engine of application state,\nmerely it=\r\ns representation, Hypermedia *As *The Engine Of Application State,\nis a mis=\r\nleading and inaccurate term. More accurate terms would be\n\n   1. Hypermedia=\r\n as the *Representation *of Application State\n   2. Hypermedia Directs/Guid=\r\nes the Engine of Application State\n   3. Hypermedia Describes (Application)=\r\n Protocols (State).\n\n\nTo misquote Alfred\nKorzybski&lt;http://en.wikipedia.org/=\r\nwiki/Map-territory_relation&gt;,\n&quot;The map (hypermedia) is not the engine.&quot;\n\nFi=\r\nre away! (Roy, I&#39;m really hoping you&#39;ll chime in.)\n\n-- Nick\n\n[Quote of full=\r\n section]\n5.3.3 Data View\n\nA data view of an architecture reveals the appli=\r\ncation state as information\nflows through the components. Since REST is spe=\r\ncifically targeted at\ndistributed information systems, it views an applicat=\r\nion as a cohesive\nstructure of information and control alternatives through=\r\n which a user can\nperform a desired task. For example, looking-up a word in=\r\n an on-line\ndictionary is one application, as is touring through a virtual =\r\nmuseum, or\nreviewing a set of class notes to study for an exam. Each applic=\r\nation\ndefines goals for the underlying system, against which the system&#39;s\np=\r\nerformance can be measured.\n\nComponent interactions occur in the form of dy=\r\nnamically sized messages.\nSmall or medium-grain messages are used for contr=\r\nol semantics, but the bulk\nof application work is accomplished via large-gr=\r\nain messages containing a\ncomplete resource representation. The most freque=\r\nnt form of request\nsemantics is that of retrieving a representation of a re=\r\nsource (e.g., the\n&quot;GET&quot; method in HTTP), which can often be cached for late=\r\nr reuse.\n\nREST concentrates all of the control state into the representatio=\r\nns received\nin response to interactions. The goal is to improve server scal=\r\nability by\neliminating any need for the server to maintain an awareness of =\r\nthe client\nstate beyond the current request. An application&#39;s state is ther=\r\nefore\ndefined by its pending requests, the topology of connected components=\r\n (some\nof which may be filtering buffered data), the active requests on tho=\r\nse\nconnectors, the data flow of representations in response to those reques=\r\nts,\nand the processing of those representations as they are received by the=\r\n user\nagent.\n\nAn application reaches a steady-state whenever it has no outs=\r\ntanding\nrequests; i.e., it has no pending requests and all of the responses=\r\n to its\ncurrent set of requests have been completely received or received t=\r\no the\npoint where they can be treated as a representation data stream. For =\r\na\nbrowser application, this state corresponds to a &quot;web page,&quot; including th=\r\ne\nprimary representation and ancillary representations, such as in-line\nima=\r\nges, embedded applets, and style sheets. The significance of application\nst=\r\neady-states is seen in their impact on both user-perceived performance and\n=\r\nthe burstiness of network request traffic.\n\nThe user-perceived performance =\r\nof a browser application is determined by the\nlatency between steady-states=\r\n: the period of time between the selection of a\nhypermedia link on one web =\r\npage and the point when usable information has\nbeen rendered for the next w=\r\neb page. The optimization of browser performance\nis therefore centered arou=\r\nnd reducing this communication latency.\n\nSince REST-based architectures com=\r\nmunicate primarily through the transfer of\nrepresentations of resources, la=\r\ntency can be impacted by both the design of\nthe communication protocols and=\r\n the design of the representation data\nformats. The ability to incrementall=\r\ny render the response data as it is\nreceived is determined by the design of=\r\n the media type and the availability\nof layout information (visual dimensio=\r\nns of in-line objects) within each\nrepresentation.\n\nAn interesting observat=\r\nion is that the most efficient network request is one\nthat doesn&#39;t use the =\r\nnetwork. In other words, the ability to reuse a cached\nresponse results in =\r\na considerable improvement in application performance.\nAlthough use of a ca=\r\nche adds some latency to each individual request due to\nlookup overhead, th=\r\ne average request latency is significantly reduced when\neven a small percen=\r\ntage of requests result in usable cache hits.\n\nThe next control state of an=\r\n application resides in the representation of\nthe first requested resource,=\r\n so obtaining that first representation is a\npriority. REST interaction is =\r\ntherefore improved by protocols that &quot;respond\nfirst and think later.&quot; In ot=\r\nher words, a protocol that requires multiple\ninteractions per user action, =\r\nin order to do things like negotiate feature\ncapabilities prior to sending =\r\na content response, will be perceptively\nslower than a protocol that sends =\r\nwhatever is most likely to be optimal\nfirst and then provides a list of alt=\r\nernatives for the client to retrieve if\nthe first response is unsatisfactor=\r\ny.\n\nThe application state is controlled and stored by the user agent and ca=\r\nn be\ncomposed of representations from multiple servers. In addition to free=\r\ning\nthe server from the scalability problems of storing state, this allows =\r\nthe\nuser to directly manipulate the state (e.g., a Web browser&#39;s history),\n=\r\nanticipate changes to that state (e.g., link maps and prefetching of\nrepres=\r\nentations), and jump from one application to another (e.g., bookmarks\nand U=\r\nRI-entry dialogs).\n\nThe model application is therefore an engine that moves=\r\n from one state to\nthe next by examining and choosing from among the altern=\r\native state\ntransitions in the current set of representations. Not surprisi=\r\nngly, this\nexactly matches the user interface of a hypermedia browser. Howe=\r\nver, the\nstyle does not assume that all applications are browsers. In fact,=\r\n the\napplication details are hidden from the server by the generic connecto=\r\nr\ninterface, and thus a user agent could equally be an automated robot\nperf=\r\norming information retrieval for an indexing service, a personal agent\nlook=\r\ning for data that matches certain criteria, or a maintenance spider busy\npa=\r\ntrolling the information for broken references or modified content\n[39&lt;http=\r\n://www.ics.uci.edu/~fielding/pubs/dissertation/references.htm#ref_39&gt;\n].\n\r\n--000e0cd2515288706e046b9df138\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n2009/6/5 Ant=F3nio Mota &lt;&lt;a href=3D&quot;mailto:amsmota@...&quot;&gt;amsmota@gm=\r\nail.com&lt;/a&gt;&gt;:&lt;br&gt;&gt; Well, yes, but my point was that using expressions=\r\n like &quot;Hypermedia&lt;br&gt;&gt; Describes Protocols&quot; does nothing but o=\r\nbscure the role of the hipermedia&lt;br&gt;\n\n&gt; engine as the driving force in =\r\nRESTful applications (hmmm, I think I&lt;br&gt;&gt; read this somewhere... :)&lt;br&gt;=\r\n&gt;&lt;br&gt;&gt; And again, my point was also that we should stress the concept=\r\n of&lt;br&gt;&gt; *engine* when talking about &quot;hipermedia constraint&quot;. =\r\nIf you use only&lt;br&gt;\n\n&gt; this expression it will make people think that &q=\r\nuot;having links&quot; is enough,&lt;br&gt;&gt; when actually it&#39;s &quot;havi=\r\nng links as a way to change application states&quot;.&lt;br&gt;&gt; Maybe it soun=\r\nds like a small difference, but &quot;having links&quot; suggest a&lt;br&gt;\n\n&gt=\r\n; static thing, while &quot;engine&quot; implies a dynamic thing. &quot;Hav=\r\ning links&quot;&lt;br&gt;&gt; stresses the role of the client, while &quot;engine=\r\n&quot; stresses the fact that&lt;br&gt;&gt; is the server, not the client, that i=\r\ns responsible for the application&lt;br&gt;\n\n&gt; and the states available at any=\r\n point. The client is only responsible&lt;br&gt;&gt; for choosing a path between =\r\nthe ones the server determines. And those&lt;br&gt;&gt; can be different any time=\r\n the client accesses one same resource if the&lt;br&gt;\n\n&gt; server (application=\r\n) logic determines it.&lt;br&gt;&gt;&lt;br&gt;&gt; So, basically, I think that talking =\r\nabout &quot;hipermedia&quot; without &quot;engine&quot;&lt;br&gt;&gt; its very re=\r\nducing and diminishing when explaining HATEAOS.&lt;br&gt;\n\n&lt;br&gt;&lt;div&gt;I know I&#39;=\r\nm going to regret wading into this, but here goes...&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;d=\r\niv&gt;I think HATEOAS is misleading. It suggests that hypermedia, e.g., the se=\r\nt of HTML documents exchanged among a user agent and a set of servers, IS t=\r\nhe engine. Hypermedia is NOT the engine, the user agent is the engine. As t=\r\nhe basis of this claim, I offer the following close reading of Roy Fielding=\r\n&#39;s thesis.&lt;/div&gt;\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Roy introduces the term HATEOAS i=\r\nn Section 5.1.5 (Uniform Interface)=A0as follows:=A0&lt;i&gt;REST is defined by f=\r\nour interface constraints: identification of\nresources; manipulation of res=\r\nources through representations;\nself-descriptive messages; and, hypermedia =\r\nas the engine of application\nstate. These constraints will be discussed in =\r\n&lt;/i&gt;&lt;a href=3D&quot;http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch=\r\n_style.htm#sec_5_2&quot;&gt;&lt;i&gt;Section 5.2&lt;/i&gt;&lt;/a&gt;&lt;i&gt;.&lt;/i&gt;=A0Oddly, most of the dis=\r\ncussion of HATEOAS actually takes place in Section 5.3.3 (Data View). I quo=\r\nte it in full at the end of the email.&lt;/div&gt;\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The basic=\r\n question is, &quot;What is the engine that drives the application through =\r\nits various states?&quot; This final paragraph is the key:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/=\r\ndiv&gt;&lt;blockquote class=3D&quot;webkit-indent-blockquote&quot; style=3D&quot;margin: 0 0 0 4=\r\n0px; border: none; padding: 0px;&quot;&gt;\n\n&lt;i&gt;&lt;span class=3D&quot;Apple-style-span&quot; sty=\r\nle=3D&quot;text-decoration: underline;&quot;&gt;The model application is therefore an en=\r\ngine&lt;/span&gt; that moves from one state to the next by examining and choosing=\r\n from among the alternative state transitions in the current set of represe=\r\nntations.=A0&lt;/i&gt;&lt;span class=3D&quot;Apple-style-span&quot; style=3D&quot;font-style: itali=\r\nc; &quot;&gt;Not surprisingly, &lt;span class=3D&quot;Apple-style-span&quot; style=3D&quot;text-decor=\r\nation: underline;&quot;&gt;this exactly matches the user interface of a hypermedia =\r\nbrowser.&lt;/span&gt; However, the style does not assume that all applications ar=\r\ne browsers. In fact, the application details are hidden from the server by =\r\nthe generic connector interface, and thus a user agent could equally be an =\r\nautomated robot performing information retrieval for an indexing service, a=\r\n personal agent looking for data that matches certain criteria, or a mainte=\r\nnance spider busy patrolling the information for broken references or modif=\r\nied content [39].&lt;/span&gt;&lt;/blockquote&gt;\n\n&lt;div&gt;&lt;i&gt;&lt;br&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;I read th=\r\nis as saying that the engine is the browser or, more generally, any user ag=\r\nent.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Further support for this reading is provided =\r\nby this paragraph:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;\n\n&lt;blockquote class=3D&quot;webkit-indent=\r\n-blockquote&quot; style=3D&quot;margin: 0 0 0 40px; border: none; padding: 0px;&quot;&gt;&lt;spa=\r\nn class=3D&quot;Apple-style-span&quot; style=3D&quot;font-style: italic; &quot;&gt;The &lt;span class=\r\n=3D&quot;Apple-style-span&quot; style=3D&quot;text-decoration: underline;&quot;&gt;application sta=\r\nte is controlled and stored by the user agent&lt;/span&gt; and can be composed of=\r\n representations from multiple servers. In addition to freeing the server f=\r\nrom the scalability problems of storing state, &lt;span class=3D&quot;Apple-style-s=\r\npan&quot; style=3D&quot;text-decoration: underline;&quot;&gt;this allows the user to directly=\r\n manipulate the state&lt;/span&gt; (e.g., a Web browser&#39;s history), anticipat=\r\ne changes to that state (e.g., link maps and prefetching of representations=\r\n), and &lt;span class=3D&quot;Apple-style-span&quot; style=3D&quot;text-decoration: underline=\r\n;&quot;&gt;jump from one application to another&lt;/span&gt; (e.g., bookmarks and URI-ent=\r\nry dialogs).&lt;/span&gt;&lt;/blockquote&gt;\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Again, it is the user=\r\n agent that is &lt;i&gt;driving &lt;/i&gt;the transitions between states, hence the use=\r\nr agent is acting as the engine -- not hypermedia. To be precise, in the ca=\r\nse of a web browser user agent, it is the combination of the browser softwa=\r\nre (user agent) and the human using the browser (user) that is the &quot;en=\r\ngine of application state&quot;, i.e. that is driving the transitions betwe=\r\nen states. It is the human user who &quot;examin[es] and choos[es] from amo=\r\nng the alternative state transitions.&quot;&lt;i&gt;=A0&lt;/i&gt;It is the human user w=\r\nho decides to &lt;i&gt;jump from one state to another&lt;/i&gt;=A0or to &lt;i&gt;manipulate t=\r\nhe browser state&lt;/i&gt;, i.e., use the back button.&lt;/div&gt;\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div=\r\n&gt;Here is one more critical paragraph:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote class=\r\n=3D&quot;webkit-indent-blockquote&quot; style=3D&quot;margin: 0 0 0 40px; border: none; pa=\r\ndding: 0px;&quot;&gt;&lt;span class=3D&quot;Apple-style-span&quot; style=3D&quot;font-style: italic; =\r\n&quot;&gt;&lt;span class=3D&quot;Apple-style-span&quot; style=3D&quot;text-decoration: underline;&quot;&gt;RE=\r\nST concentrates all of the control state into the representations&lt;/span&gt; re=\r\nceived in response to interactions. The goal is to improve server scalabili=\r\nty by eliminating any need for the server to maintain an awareness of the c=\r\nlient state beyond the current request. &lt;span class=3D&quot;Apple-style-span&quot; st=\r\nyle=3D&quot;text-decoration: underline;&quot;&gt;An application&#39;s state is therefore=\r\n defined by&lt;/span&gt; its pending requests, the topology of connected componen=\r\nts (some of which may be filtering buffered data), the active requests on t=\r\nhose connectors, the data flow of representations in response to those requ=\r\nests, and the processing of those representations as they are received by t=\r\nhe user agent.&lt;/span&gt;&lt;/blockquote&gt;\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Let&#39;s list that=\r\n constituents of an application&#39;s state for clarity:&lt;/div&gt;&lt;div&gt;&lt;ol&gt;&lt;li&gt;=\r\npending requests&lt;/li&gt;&lt;li&gt;the topology of connected components&lt;/li&gt;&lt;li&gt;the a=\r\nctive requests on those connectors&lt;/li&gt;\n\n&lt;li&gt;the data flow of representatio=\r\nns in response to those requests&lt;/li&gt;&lt;li&gt;the processing of those representa=\r\ntions as they are received by the user agent&lt;/li&gt;&lt;/ol&gt;Of these five constit=\r\nuents, (2)-(5) are &lt;i&gt;reactive. &lt;/i&gt;Only (1) is &lt;i&gt;proactive&lt;/i&gt;. Again, it=\r\n is pending requests that &lt;i&gt;drive&lt;/i&gt;=A0the application state. Where do su=\r\nch pending requests come from? In the case of a browser, they ultimately co=\r\nme from the human user. By clicking on links and filling in forms, the huma=\r\nn user &lt;i&gt;drives &lt;/i&gt;the application. Accordingly, the combination of the h=\r\numan user and the user agent browser act as the engine of state, i.e., the =\r\nengine driving application state transitions.&lt;/div&gt;\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;No=\r\nte that REST has a somewhat unusual concept of application:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;=\r\n/div&gt;&lt;blockquote class=3D&quot;webkit-indent-blockquote&quot; style=3D&quot;margin: 0 0 0 =\r\n40px; border: none; padding: 0px;&quot;&gt;&lt;span class=3D&quot;Apple-style-span&quot; style=\r\n=3D&quot;font-style: italic; &quot;&gt;Since REST is specifically targeted at distribute=\r\nd information systems, it views an application as &lt;span class=3D&quot;Apple-styl=\r\ne-span&quot; style=3D&quot;text-decoration: underline;&quot;&gt;a cohesive structure of infor=\r\nmation and control alternatives through which a user can perform a desired =\r\ntask&lt;/span&gt;. For example, looking-up a word in an on-line dictionary is one=\r\n application, as is touring through a virtual museum, or reviewing a set of=\r\n class notes to study for an exam. Each application defines goals for the u=\r\nnderlying system, against which the system&#39;s performance can be measure=\r\nd.&lt;/span&gt;&lt;/blockquote&gt;\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;So hypermedia is the &lt;i&gt;cohesiv=\r\ne &lt;span class=3D&quot;Apple-style-span&quot; style=3D&quot;text-decoration: underline;&quot;&gt;st=\r\nructure&lt;/span&gt; of information and control alternatives&lt;/i&gt;. Hypermedia is a=\r\n &lt;i&gt;structure&lt;/i&gt;, not an &lt;i&gt;engine. &lt;/i&gt;=A0Hypermedia is merely a represen=\r\ntation of application state (as a network structure of control information)=\r\n, not what drives it.=A0The &lt;i&gt;engine&lt;/i&gt;=A0that drives application state i=\r\ns the user performing the task, and the user agent assisting in that perfor=\r\nmance.&lt;/div&gt;\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;In conclusion, since hypermedia is NOT th=\r\ne engine of application state, merely its representation, Hypermedia &lt;b&gt;&lt;sp=\r\nan class=3D&quot;Apple-style-span&quot; style=3D&quot;text-decoration: underline;&quot;&gt;&lt;i&gt;As &lt;=\r\n/i&gt;&lt;/span&gt;&lt;/b&gt;The Engine Of Application State, is a misleading and inaccura=\r\nte term. More accurate terms would be&lt;/div&gt;\n\n&lt;div&gt;&lt;ol&gt;&lt;li&gt;Hypermedia as the=\r\n &lt;i&gt;Representation &lt;/i&gt;of Application State&lt;/li&gt;&lt;li&gt;Hypermedia Directs/Guid=\r\nes the Engine of Application State&lt;/li&gt;&lt;li&gt;Hypermedia Describes (Applicatio=\r\nn) Protocols (State).&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;div&gt;\n\n&lt;br&gt;&lt;/div&gt;&lt;div&gt;To misquote=A0&lt;a=\r\n href=3D&quot;http://en.wikipedia.org/wiki/Map-territory_relation&quot;&gt;Alfred=A0Korz=\r\nybski&lt;/a&gt;, &quot;The map (hypermedia) is not the engine.&quot;&lt;/div&gt;&lt;div&gt;&lt;b=\r\nr&gt;&lt;/div&gt;&lt;div&gt;Fire away! (Roy, I&#39;m really hoping you&#39;ll chime in.)&lt;/=\r\ndiv&gt;\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;-- Nick&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;[Quote of full s=\r\nection]&lt;/div&gt;&lt;div&gt;&lt;span class=3D&quot;Apple-style-span&quot; style=3D&quot;font-size: 12px=\r\n; font-weight: bold; &quot;&gt;&lt;a name=3D&quot;sec_5_3_3&quot;&gt;5.3.3 Data View&lt;/a&gt;&lt;/span&gt;&lt;/di=\r\nv&gt;&lt;div&gt;\n\n&lt;p&gt;\nA data view of an architecture reveals the application state a=\r\ns\ninformation flows through the components. Since REST is specifically\ntarg=\r\neted at distributed information systems, it views an application as\na cohes=\r\nive structure of information and control alternatives through\nwhich a user =\r\ncan perform a desired task. For example, looking-up a word\nin an on-line di=\r\nctionary is one application, as is touring through a\nvirtual museum, or rev=\r\niewing a set of class notes to study for an exam.\nEach application defines =\r\ngoals for the underlying system, against which\nthe system&#39;s performance=\r\n can be measured.&lt;/p&gt;\n&lt;p&gt;\nComponent interactions occur in the form of dynam=\r\nically sized messages.\nSmall or medium-grain messages are used for control =\r\nsemantics, but the\nbulk of application work is accomplished via large-grain=\r\n messages\ncontaining a complete resource representation. The most frequent =\r\nform\nof request semantics is that of retrieving a representation of a\nresou=\r\nrce (e.g., the &quot;GET&quot; method in HTTP), which can often be cached\nf=\r\nor later reuse.&lt;/p&gt;\n&lt;p&gt;\nREST concentrates all of the control state into the=\r\n representations\nreceived in response to interactions. The goal is to impro=\r\nve server\nscalability by eliminating any need for the server to maintain an=\r\n\nawareness of the client state beyond the current request. An\napplication&#=\r\n39;s state is therefore defined by its pending requests, the\ntopology of co=\r\nnnected components (some of which may be filtering\nbuffered data), the acti=\r\nve requests on those connectors, the data flow\nof representations in respon=\r\nse to those requests, and the processing of\nthose representations as they a=\r\nre received by the user agent.&lt;/p&gt;\n&lt;p&gt;\nAn application reaches a steady-stat=\r\ne whenever it has no outstanding\nrequests; i.e., it has no pending requests=\r\n and all of the responses to\nits current set of requests have been complete=\r\nly received or received\nto the point where they can be treated as a represe=\r\nntation data stream.\nFor a browser application, this state corresponds to a=\r\n &quot;web page,&quot;\nincluding the primary representation and ancillary r=\r\nepresentations,\nsuch as in-line images, embedded applets, and style sheets.=\r\n The\nsignificance of application steady-states is seen in their impact on\nb=\r\noth user-perceived performance and the burstiness of network request\ntraffi=\r\nc.&lt;/p&gt;\n&lt;p&gt;\nThe user-perceived performance of a browser application is deter=\r\nmined\nby the latency between steady-states: the period of time between the\n=\r\nselection of a hypermedia link on one web page and the point when\nusable in=\r\nformation has been rendered for the next web page. The\noptimization of brow=\r\nser performance is therefore centered around\nreducing this communication la=\r\ntency.&lt;/p&gt;\n&lt;p&gt;\nSince REST-based architectures communicate primarily through=\r\n the\ntransfer of representations of resources, latency can be impacted by\nb=\r\noth the design of the communication protocols and the design of the\nreprese=\r\nntation data formats. The ability to incrementally render the\nresponse data=\r\n as it is received is determined by the design of the\nmedia type and the av=\r\nailability of layout information (visual\ndimensions of in-line objects) wit=\r\nhin each representation.&lt;/p&gt;\n&lt;p&gt;\nAn interesting observation is that the mos=\r\nt efficient network request\nis one that doesn&#39;t use the network. In oth=\r\ner words, the ability to\nreuse a cached response results in a considerable =\r\nimprovement in\napplication performance. Although use of a cache adds some l=\r\natency to\neach individual request due to lookup overhead, the average reque=\r\nst\nlatency is significantly reduced when even a small percentage of\nrequest=\r\ns result in usable cache hits.&lt;/p&gt;\n&lt;p&gt;\nThe next control state of an applica=\r\ntion resides in the representation\nof the first requested resource, so obta=\r\nining that first representation\nis a priority. REST interaction is therefor=\r\ne improved by protocols that\n&quot;respond first and think later.&quot; In =\r\nother words, a protocol that\nrequires multiple interactions per user action=\r\n, in order to do things\nlike negotiate feature capabilities prior to sendin=\r\ng a content\nresponse, will be perceptively slower than a protocol that send=\r\ns\nwhatever is most likely to be optimal first and then provides a list of\na=\r\nlternatives for the client to retrieve if the first response is\nunsatisfact=\r\nory.&lt;/p&gt;\n&lt;p&gt;\nThe application state is controlled and stored by the user age=\r\nnt and\ncan be composed of representations from multiple servers. In additio=\r\nn\nto freeing the server from the scalability problems of storing state,\nthi=\r\ns allows the user to directly manipulate the state (e.g., a Web\nbrowser&#39=\r\n;s history), anticipate changes to that state (e.g., link maps\nand prefetch=\r\ning of representations), and jump from one application to\nanother (e.g., bo=\r\nokmarks and URI-entry dialogs).&lt;/p&gt;\n&lt;p&gt;\nThe model application is therefore =\r\nan engine that moves from one state\nto the next by examining and choosing f=\r\nrom among the alternative state\ntransitions in the current set of represent=\r\nations. Not surprisingly,\nthis exactly matches the user interface of a hype=\r\nrmedia browser.\nHowever, the style does not assume that all applications ar=\r\ne browsers.\nIn fact, the application details are hidden from the server by =\r\nthe\ngeneric connector interface, and thus a user agent could equally be an\n=\r\nautomated robot performing information retrieval for an indexing\nservice, a=\r\n personal agent looking for data that matches certain\ncriteria, or a mainte=\r\nnance spider busy patrolling the information for\nbroken references or modif=\r\nied content [&lt;a href=3D&quot;http://www.ics.uci.edu/~fielding/pubs/dissertation/=\r\nreferences.htm#ref_39&quot;&gt;39&lt;/a&gt;].&lt;/p&gt;&lt;/div&gt;\n\r\n--000e0cd2515288706e046b9df138--\r\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":184797058,"authorName":"Benjamin Carlyle","from":"Benjamin Carlyle &lt;benjamincarlyle@...&gt;","profile":"fuzzybsc","replyTo":"SENDER","senderId":"1Lgf5y_H-Lg8quv1cPIszsh6V5O9_lW_Na4_wl2-57dzbCqo_xJfoSJH6RLVGFw40DTPoZq0ho7LHE9w7PENxSnCbEyNjEx6dCOnLZgsY13E-JbmKQbb3fs","spamInfo":{"isSpam":false,"reason":"0"},"subject":"RE: &quot;Lightweight Data Access Services&quot; and Well Designed\tUrls[rest-discuss]","postDate":"1162419243","msgId":6713,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDExNjI0MTkyNDMuNDU4MS44NS5jYW1lbEBsb2NhbGhvc3QubG9jYWxkb21haW4+","inReplyToHeader":"PDAwM2EwMWM2ZmNiYiQ0MzQ0NmVjMCQwNzAyYThjMEBHdWlkZXMubG9jYWw+","referencesHeader":"PDAwM2EwMWM2ZmNiYiQ0MzQ0NmVjMCQwNzAyYThjMEBHdWlkZXMubG9jYWw+"},"prevInTopic":6712,"nextInTopic":6714,"prevInTime":6712,"nextInTime":6714,"topicId":6685,"numMessagesInTopic":35,"msgSnippet":"... Ok, I ll try to address as much of the content as I can :) ... I don t think there is any misunderstanding. I am confident we are saying the same thing.","rawEmail":"Return-Path: &lt;benjamincarlyle@...&gt;\r\nX-Sender: benjamincarlyle@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 99175 invoked from network); 1 Nov 2006 22:36:01 -0000\r\nReceived: from unknown (66.218.66.167)\n  by m40.grp.scd.yahoo.com with QMQP; 1 Nov 2006 22:36:01 -0000\r\nReceived: from unknown (HELO mail08.syd.optusnet.com.au) (211.29.132.189)\n  by mta6.grp.scd.yahoo.com with SMTP; 1 Nov 2006 22:35:58 -0000\r\nReceived: from c210-49-93-21.rochd2.qld.optusnet.com.au (c210-49-93-21.rochd2.qld.optusnet.com.au [210.49.93.21])\n\tby mail08.syd.optusnet.com.au (8.12.11/8.12.11) with ESMTP id kA1ME48C007561;\n\tThu, 2 Nov 2006 09:14:04 +1100\r\nTo: Mike Schinkel &lt;mikeschinkel@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nIn-Reply-To: &lt;003a01c6fcbb$43446ec0$0702a8c0@...&gt;\r\nReferences: &lt;003a01c6fcbb$43446ec0$0702a8c0@...&gt;\r\nContent-Type: text/plain\r\nDate: Thu, 02 Nov 2006 08:14:03 +1000\r\nMessage-Id: &lt;1162419243.4581.85.camel@...&gt;\r\nMime-Version: 1.0\r\nX-Mailer: Evolution 2.6.3 \r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:0:0:0\r\nFrom: Benjamin Carlyle &lt;benjamincarlyle@...&gt;\r\nSubject: RE: &quot;Lightweight Data Access Services&quot; and Well Designed\n\tUrls[rest-discuss]\r\nX-Yahoo-Group-Post: member; u=184797058; y=Hlk8dMJDR_J_7d_6oZpxw1lw66_LQwA8m11MiwtFQLT4m8Y\r\nX-Yahoo-Profile: fuzzybsc\r\n\r\nOn Tue, 2006-10-31 at 02:07 -0500, Mike Schinkel wrote:\n&gt; Thanks for the email. (Note, my response is REALLY LONG. Sorry in\n&gt; advance.)\n\nOk, I&#39;ll try to address as much of the content as I can :)\n\n&gt; &gt;&gt; But beware as a newcomer to REST that what you see as religious\n&gt; dogma may\n&gt; in fact be based soundly in ideas that you haven&#39;t come to grasp with,\n&gt; yet. \n&gt; I appreciate your comment, but I think you misunderstand my meaning\n&gt; and how\n&gt; I was using the term &quot;religious dogma.&quot;\n\nI don&#39;t think there is any misunderstanding. I am confident we are\nsaying the same thing. Sometimes there are reasons and arguments,\nsometimes there aren&#39;t. When there aren&#39;t reasons or the arguments\naren&#39;t understood we are in the realm of religious dogma. When there are\nreasons and arguments it is contingent on proponents to clearly spell\nout those reasons and arguments.\n\n&gt; I also have not been able to find clear and concise explanation of why\n&gt; each\n&gt; constraint is important. This is probably because if I can&#39;t find an\n&gt; easy to\n&gt; understand list of constraint then I&#39;m certainly no going to find an\n&gt; easy to\n&gt; understand list of reasons for those constraint because the latter\n&gt; requires\n&gt; the former!\n\nGood comment. The current REST wikipedia article[1] contains a very\nbrief summary, but certainly nothing that completely answers this point.\n\n&gt; But the principle of URI opacity DOES NOT forbid the following:\n&gt; * To organize a website&#39;s URL structure with meaningful metadata\n&gt; * To publish the meaning of a website&#39;s URL metadata \n&gt; * For a client to utilize knowledge of a website&#39;s URL metadata \n\nForbid is a strong word. I agree with point 1. I would personally lean\naway from point 2 and 3, but that is in my programmer hat rather than my\nuser hat. If 2 is a means of mass-publishing urls, that is fine. That is\njust hypermedia. If a human interprets this server-provided document as\na form that can be filled out and enters urls into a machine, that is\nall kosher. If a human encodes the form into a computer program that\nonly uses it for as long as the page says it is valid, that is all good.\nIf the computer uses the form for longer than it is valid, or uses it\nfor sites other than the one that it was authored for then you run into\nproblems. In my opinion, by the time you have encoded site-specific\ninformation into your program you have already stepped outside of the\nREST envelope.\n\nREST is not an architecture that considers any single client or any\nsingle server. REST is about making a generic browser work across all\nservice on the Internet (Well, strictly generic components of which the\nbrowser is one). It is an assumption of the REST architectural style\nthat while the uniform interface will evolve over time and browser\nsoftware will evolve with it, the creation of a new set of resources\nshould not imply the authoring of new client-side code. Certainly you\ncan create a specific Amazon browser, or ebay bidder program. However, I\nsee these special-case applications as being outside of REST. REST is\nabout making the generic browser possible.\n\nREST separates the concerns of nouns, verbs, and content types and\ncreates a uniform interface across them. Verbs are standard. Content\ntypes are widely-understood. Nouns are up to the particular service\nprovider to design. In my opinion noun-spaces and the structure of URLs\nwithin a particular service do not form part of the uniform interface.\nIndividual URLs serve to identify particular instances of the uniform\ninterface to interact with. They each serve to identify a resource. Once\nyou have identified a resource you can interact with it using a\nconstrained set of verbs and content types that generic browsers can be\nexpected to understand. Many of the content types will contain\nhypermedia of one form or another, allowing new nouns to be discovered.\n\nEncoding knowledge of a particular server-side URI-space into a client\nis not wrong if it is a special case application. However, as I\nsuggested a moment ago I see such an app as outside of REST. Inside the\nconstraints of REST, a generic browser should have minimal or no\nhard-coded knowledge of the structure of resources based on the one it\nhas in hand. It shouldn&#39;t assume that it can navigate one level down by\nputting the city name at the end of the url.\n\nIf a popular general purpose app did that, then all service providers\nwould have to follow that convention. It is better to use hyperlinks,\nforms, and uri-templates within the content (ie, hypermedia). Hypermedia\nis the accepted way to navigate from one resoruce to another as part of\nthe uniform interface. It allows site A to design its url space one way,\nand site B to design it another way. In particular, site B may decide to\nput the url under another domain name or delegate it to some other\nservice provider. URL construction does not allow the freedoms available\nto users of hypermedia.\n\nHypermedia also allows site A to change its organisation over time by\npublishing different hyperlinks as changes take place. Site A is a more\nconstrained environment, however, as once a hyperlink has been published\nthat URL should continue to exist for the lifetime of the service.\n\nMy quick off-the-top-of-my-head URI rules:\nURI opactity definiately does not imply that URLs should be\nmachine-readable only. URIs SHOULD be human-friendly. URIs SHOULD\ncontain metadata relevant to the identity of the resource. URIs SHOULD\nNOT contain metadata that can change over the lifetime of the resource.\nThe structure between URLs SHOULD be communicated to client programs by\nhypermedia, rather than being communicated out of band and encoded in\nclient program code. Generic client software SHOULD avoid interpreting\nmetadata from the url, as different sites may use different conventions.\nURLs SHOULD be valid from the time of their publication to the end of\nlife of the service.\n\n&gt; And back to the subject of REST, it has no constraint of URI opacity\n&gt; per se\n&gt; (and if Fielding contradicts me, I&#39;ll go spend the time to dig up the\n&gt; references to where he has said otherwise. :)\n\nProbably true, but REST is specifically an architectural style for\nhypermedia systems. Hard-coding the structure of the Web&#39;s URLs into\nfirefox just isn&#39;t the way to do it. It may be fine for a very specific\napplication, but isn&#39;t a general-purpose solution.\n\n&gt; &gt;&gt; If I assume without being told that particular URL constructions \n&gt; &gt;&gt; exist, then I may be forcing the same web site provider over \n&gt; &gt;&gt; time or different web site providers at the same time to \n&gt; &gt;&gt; construct their URI spaces the same way. This limits evolution \n&gt; &gt;&gt; of the noun-space. \n&gt; This makes the assumption that the &quot;I&quot; doing the assuming is a machine\n&gt; (client or user-agent.)\n...\n&gt; Also, if the &quot;I&quot; in your statement is instead human there&#39;s no problem\n&gt; humans have a built in error recovery mechanism called\n&gt; &quot;intelligence.&quot; \n\nSorry: &quot;I, Programmer&quot;. &quot;I, System Architect&quot;. :)\n\n&gt; 1.) How does my machine figure out where the URL is that allows me to\n&gt; follow\n&gt; these hyperlinks? My machine has to find it somewhere, so we have a\n&gt; chicken-&-egg problem; once that first URL is published and then\n&gt; machines\n&gt; start using it, it can no longer evolved without breaking the software\n&gt; running on the machines. Right?\n\nYou always start with a configuration of at least one url. Most\nsoftware-only REST architectures will find themselves with a lot of\nconfigured urls. The configuration itself is hypermedia, so all is\ngood :)\n\nAnd yes, once a URL is published you don&#39;t want to try and unpublish it.\nJust like when you create a primary key in a database you don&#39;t want to\nchange it. Evolution in REST is more about different services developing\nin different directions would being constrained. A single service is\nstill likely to be constrained by its own history.\n\n&gt; 2.) If machine retrieves the resource which contains a list of URLs\n&gt; that\n&gt; represent services (we are discussing REST here not end user content,\n&gt; right?) it must somehow know how to figure out which of those URLs\n&gt; represent\n&gt; which services. Which means that there needs to be conventions for\n&gt; names\n&gt; embedded in that list of URLs, right? (This is where I have *yet* to\n&gt; see or\n&gt; have anyone provide me with an example of a hypermedia system for\n&gt; invoking\n&gt; REST web services. Since I haven&#39;t been given any examples, I&#39;m going\n&gt; to\n&gt; simply dream one up so I can discuss this issue.) \n\nWell, URLs represent resources rather than services. Services are a\nserver-side concept really. Clients don&#39;t know where one service ends\nand another begins. All they see are the resources, a virtualisation of\nthe state of all services on the Web. I think you are heading off into a\nstrange direction when you talk about invoking REST services. REST verbs\nare primarily about modifying the virtualised state. ie. you find the\ninformation you want to change, and you PUT your new information to it.\nHyperlinks/forms/url-templates are about locating that information.\n\n&gt; Let&#39;s assume my machine called http://rest.foo.com/v1.0/ and it\n&gt; returned a\n&gt; resource with an representation in XML like so:\n&gt; &lt;?xml version=&quot;1.0&quot;?&gt;\n&gt; &lt;Services&gt;\n&gt; &lt;Add&gt;http://rest.foo.com/v1.0/cryptic-path-for-add&lt;/Add&gt;\n&gt; &lt;Update&gt;http://rest.foo.com/v1.0/cryptic-path-for-update&lt;/Update&gt;\n&gt; &lt;Insert&gt;http://rest.foo.com/v1.0/cryptic-path-for-insert&lt;/Insert&gt;\n&gt; &lt;Delete&gt;http://rest.foo.com/v1.0/cryptic-path-for-delete&lt;/Delete&gt;\n&gt; &lt;/Services&gt;\n\nSo this example probably just could be collapsed down to a single\nhyperlink: http://rest.example.com/myresource\n\n&gt; Now my machine could look for &quot;Services&#92;Add&quot; to get the URL for the\n&gt; &quot;Add&quot;\n&gt; service and that would follow the REST hypermedia constraint, right?\n&gt; But\n&gt; don&#39;t I have to know to look for a hard-coded &quot;Services&#92;Add&quot; in order\n&gt; to\n&gt; find the &quot;Add&quot; service?\n\nExactly, this is the separation of concerns between nouns and content\ntypes. Different services with opposing interests (yahoo, google) are\nsupposed to agree on their content types, but are free to evolve their\nuri-spaces independently. Verbs and content types are things that\neveryone has to agree on. Because they are each fairly constrained\nspaces it is easier to agree on them than it would be to agree on\narbitrary WSDL-style base-classes. The verb-space is probably well\nenough defined that you don&#39;t even have to think about it. The\ncontent-type space is still undergoing significant evolution.\n\nContent type definition is an intensively social process and a difficult\none. Noun-space definition is supposed to avoid the challenges of this\nspace and allow individual freedom to reign.\n\n&gt;  Given that, I really see only a few significant\n&gt; differences between that and just know to add the metadata &quot;add/&quot; to\n&gt; the end\n&gt; of the same URL that needed to be published anyway:\n&gt; http://rest.foo.com/v1.0/add/\n\nYep. The only issue here is how the solution scales. In particular, how\nit scales across thousands of service providers who are at commercial\nwar with each other over who will serve the users of your application.\nIf you have already chosen the site you want your software to work with\nthere is little difference. If you want it to work across sites without\ntieing their uri-spaces together, hypermedia is the go. REST is not\nabout the small-scale problem you are talking about here. It is about an\ninformation layer that works across the scale of the Internet as a\nwhole.\n\n&gt; OTOH, if you implement the service simply by tagging the verbs onto\n&gt; the end\n&gt; of the main URL you gain significant simplicity and increase the ease\n&gt; of\n&gt; implementation by going straight to the hard-coded URL\n&gt; http://rest.foo.com/v1.0/add/ People can test it in any browser I am\n&gt; already using (assuming the service provides a test form), and any\n&gt; software\n&gt; that can do a POST can call it; no extra code required. IMO this is NO\n&gt; SMALL SHAKES in a world that is now looking for collaborative\n&gt; intelligence\n&gt; and is interested in empowering people to implement mashups. \n\nWell, the crossover between verb and noun-space aside:\n\nThis is absolutely fine. This is hyperlinking. If you send the add url\nto someone via email or any other means, that is a hyperlink. It is only\nwhen someone writes software that given the v1.0 url appends &quot;/add/&quot; to\nthe end and expects that software to work across multiple web sites that\nyou end up with any problem at all.\n\n&gt; That said, I&#39;d love for you or anyone to shoot holes in my assertion\n&gt; if\n&gt; there are holes in it.\n\nI think that the main hole is that you assume you are not using\nhypermedia when you really are using it. This is common for newcomers to\nREST who are familiar with the web. They are prone to wonder what REST\ngives them on top of what they already have, but the answer is that REST\nand its predecessors gave you what you have today.\n\nWhenever you have a url in a document either machine or human-readable,\nyou are using hypermedia and conforming to REST&#39;s architectural\nassumptions. When a human follows flickr guidelines about how to\nconstruct urls and feeds these urls to a computer they are using the\ndocument that mass-publishes these urls as a hypermedia document. The\nonly problem is when client-side software assumes it can build other\nuris or interpret the uris it has, and that is only a problem when the\nclient-side software starts having to deal with multiple service\nproviders :)\n\nBenjamin.\n[1]\nhttp://en.wikipedia.org/wiki/Representational_State_Transfer#Principles\n\n\n"}}
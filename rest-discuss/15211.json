{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":124198377,"authorName":"William Martinez Pomares","from":"&quot;William Martinez Pomares&quot; &lt;wmartinez@...&gt;","profile":"willmarpo","replyTo":"SENDER","senderId":"R9JfJ70x6NQy7p1PrzoVIbJmtN2Vt2dD8cfnRShfr9sgicSeq_hLBePnVE2RNT96p5jxItkSm9br-InWAx03tCqM_OJVmAPlwyhjX_thXrxZRBYq2niVzqV6","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: How comes to life an &quot;Application&quot; in the sense of  Roy&#39;s dissertation?","postDate":"1270992236","msgId":15211,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGhwc2loYytmcWxnQGVHcm91cHMuY29tPg==","inReplyToHeader":"PDIwMTAwNDEwMjE1ODAyLmY2MDZjZmZkLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4="},"prevInTopic":15210,"nextInTopic":15229,"prevInTime":15210,"nextInTime":15212,"topicId":15152,"numMessagesInTopic":30,"msgSnippet":"Hi Erick. 1. I understand all that you say. I feel I m the one does didn t made myself understandable, but that is ok. 2. For instance I tried telling you I","rawEmail":"Return-Path: &lt;wmartinez@...&gt;\r\nX-Sender: wmartinez@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 46875 invoked from network); 11 Apr 2010 13:24:16 -0000\r\nX-Received: from unknown (66.196.94.106)\n  by m1.grp.sp2.yahoo.com with QMQP; 11 Apr 2010 13:24:16 -0000\r\nX-Received: from unknown (HELO n37b.bullet.mail.sp1.yahoo.com) (66.163.168.151)\n  by mta2.grp.re1.yahoo.com with SMTP; 11 Apr 2010 13:24:16 -0000\r\nX-Received: from [69.147.65.148] by n37.bullet.mail.sp1.yahoo.com with NNFMP; 11 Apr 2010 13:23:56 -0000\r\nX-Received: from [98.137.34.35] by t11.bullet.mail.sp1.yahoo.com with NNFMP; 11 Apr 2010 13:23:56 -0000\r\nDate: Sun, 11 Apr 2010 13:23:56 -0000\r\nTo: rest-discuss@yahoogroups.com\r\nMessage-ID: &lt;hpsihc+fqlg@...&gt;\r\nIn-Reply-To: &lt;20100410215802.f606cffd.eric@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;ISO-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-Yahoo-Newman-Property: groups-compose\r\nFrom: &quot;William Martinez Pomares&quot; &lt;wmartinez@...&gt;\r\nSubject: Re: How comes to life an &quot;Application&quot; in the sense of  Roy&#39;s dissertation?\r\nX-Yahoo-Group-Post: member; u=124198377; y=wcfJB9tiRCcEKes3yUa73F3wFOsrpWNQflFULfrtamiychZQ\r\nX-Yahoo-Profile: willmarpo\r\n\r\nHi Erick.\n1. I understand all that you say. I feel I&#39;m the one does didn&#39;t =\r\nmade myself understandable, but that is ok.\n2. For instance I tried telling=\r\n you I see two different clients, different kinds of systems, and you came =\r\nback telling me the only one you see is the client in terms of rest, and on=\r\nly rest systems with non-rest background implementation (that are the hidde=\r\nn part on the servers). That means we are looking at different places but t=\r\nalking about the same thing.\n3. I try to tell you I feel that differentiati=\r\nng that is important to avoid our customers thinking the got a REST system =\r\nwhen they got a something else system with a REST wrapper, and you think it=\r\n is not important because the clients using that will see REST anyway. I se=\r\ne there we can go on saying the same things and will not agree. That happen=\r\ns often in this IT world, but I&#39;m confident we are facing opposite directio=\r\nns.\n4. Lastly, about how to approach the incoming client, of course the exa=\r\nmple was an extreme simplification of the process to exemplify the API vrs =\r\nsystem debate. Still, for sure, I wont start modeling the resources right a=\r\nway, I will start with studying the stakeholders business contexts and doma=\r\nins, and evolve from that, since it may be REST is not what he actually nee=\r\nds or constrains allow. Architecting in REST is far more that modeling reso=\r\nurces, that actually goes into tactical design. \n\nBut no worries, I underst=\r\nand your idea, it is clear and good, and all this discussion is about using=\r\n one term or the other, or both, so it may not have a great deal of impact =\r\nbetween you and me.\n\nCheers\n\nWilliam Martinez Pomares\n\n--- In rest-discuss@=\r\nyahoogroups.com, &quot;Eric J. Bowman&quot; &lt;eric@...&gt; wrote:\n&gt;\n&gt; &quot;William Martinez P=\r\nomares&quot; wrote:\n&gt; &gt; \n&gt; &gt; 2. To me, any interface is in the limits of a syste=\r\nm. What is outside\n&gt; &gt; the limits is the client of the system. And here is =\r\na confusion many\n&gt; &gt; engineering students have when we look at client-serve=\r\nr style. They\n&gt; &gt; assume the server is a system and the client the one that=\r\n uses it,\n&gt; &gt; but in that style both elements are part of the system!\n&gt; &gt; \n=\r\n&gt; \n&gt; I don&#39;t know in what sense you mean the term &quot;client of the system&quot;.\n&gt;=\r\n REST encompasses the constraints of the client-server style, so the\n&gt; clie=\r\nnt connectors of all the components &quot;in-circuit&quot; for the request/\n&gt; respons=\r\ne (and their corresponding client and intermediary components)\n&gt; interactio=\r\nn with the origin server&#39;s cache or server connector are\n&gt; indeed part of t=\r\nhe system, for whatever application is executing.\n&gt; \n&gt; Since a discussion o=\r\nf what components are &quot;in-circuit&quot; really serves\n&gt; absolutely no purpose (o=\r\nther than facilitating philosophical debates),\n&gt; it may be safely avoided (=\r\ntaken for granted) by shorthanding the REST\n&gt; system as the REST API or usi=\r\nng these terms interchangeably.  For all\n&gt; intents and purposes.\n&gt; \n&gt; &gt;\n&gt; &gt;=\r\n Same in REST. When I mention client of an API, I mean the client that\n&gt; &gt; =\r\nwill use the system (and thus, not part of it) through an interface.\n&gt; &gt; RE=\r\nST uses the client-server style, in which the client is part of the\n&gt; &gt; sys=\r\ntem, not outside or it. It may need an interface to communicate\n&gt; &gt; with th=\r\ne server, but this interface is not an external one. \n&gt; &gt; \n&gt; \n&gt; I don&#39;t kno=\r\nw what a &quot;client of an API&quot; is, either.  The user agent\n&gt; actually serves t=\r\nhe API to the user as a series of steady-states.  The\n&gt; user component&#39;s cl=\r\nient connector to the user agent may be a human&#39;s\n&gt; eyes, ears and fingers,=\r\n and the user agent&#39;s server connector to the\n&gt; client component may be KVM=\r\n/audio.  On VOIP, the user component&#39;s client\n&gt; connector and the user agen=\r\nt&#39;s server connector are both acoustic\n&gt; couplers which implement a generic=\r\n telephonic interface which sounds a\n&gt; tone for each key on the pad, plus n=\r\natural language.\n&gt; \n&gt; What natural-language description corresponds to what=\r\n key on the pad I\n&gt; should press is conveyed to me by my user agent (teleph=\r\none) as a choice\n&gt; of state transitions.  That domain-specific vocabulary c=\r\nould be a\n&gt; self-documenting REST API, as it does the same thing -- instruc=\r\nts the\n&gt; user agent *how* to use the generic telephonic connector interface=\r\n to\n&gt; carry out the user&#39;s instructions via hypertext (CCXML + VoiceXML):\n&gt;=\r\n Press &#39;1&#39; for English, &#39;2&#39; for Spanish on one domain may be Press &#39;1&#39;\n&gt; fo=\r\nr Spanish, &#39;2&#39; for English on another domain -- the API carries\n&gt; domain-sp=\r\necific instructions on how to use the generic connector\n&gt; interface to tran=\r\nsition to the next steady-state (no HTTP required, but\n&gt; I can say &#39;1 for E=\r\nnglish&#39; is equivalent to GET, and entering an Rx# is \n&gt; equivalent to POST,=\r\n &#39;press # when finished&#39; is a submit button).\n&gt; \n&gt; Any VOIP telephone execu=\r\nting my application is, at that time, a part of\n&gt; my system while other tel=\r\nephones are not.  It doesn&#39;t matter if that\n&gt; telephone is on a public or p=\r\nrivate exchange, landline or IP, the API\n&gt; (press &#39;1&#39; for English, &#39;#&#39; when=\r\n finished) isn&#39;t affected at all -- it\n&gt; doesn&#39;t make sense to make any dis=\r\ntinction between API and system,\n&gt; because the only parts of the system the=\r\n developer cares about are the\n&gt; user agent executing the application, and =\r\nthe server component.\n&gt; \n&gt; &gt;\n&gt; &gt; This is a little hard to explain. We have =\r\na REST system, which\n&gt; &gt; includes the clients in the terms of the client-se=\r\nrver style. The BIG\n&gt; &gt; REST system is the web, as a whole. Clients are par=\r\nt of that system,\n&gt; &gt; and the particular thing about the API those In-syste=\r\nm client use, is\n&gt; &gt; that API is a network based API (as opposed as a libra=\r\nry based one).\n&gt; &gt; \n&gt; \n&gt; The Web, as a whole, is not a REST system in any w=\r\nay (otherwise there&#39;d\n&gt; be no such thing as a not-REST API).  The thesis cl=\r\nearly describes the\n&gt; native architecture of the Web as the client-cache-st=\r\nateless-server\n&gt; style.  All REST constraints build from here, i.e. REST co=\r\nnstrains the\n&gt; Web architecture as a whole (while first requiring that the =\r\nconstraints\n&gt; of client-cache-stateless-server be adhered to -- plenty of A=\r\nPIs don&#39;t\n&gt; meet the constraints of the Web&#39;s native architectural style ei=\r\nther),\n&gt; down to a set of best practices for systems desiring the benefits =\r\nof\n&gt; REST, i.e. a sweet spot.\n&gt; \n&gt; You&#39;re correct that a REST API is distri=\r\nbuted -- my application\n&gt; steady-states are derived from a variety of sourc=\r\nes which aren&#39;t\n&gt; constrained to being from a single domain or server (alth=\r\nough in\n&gt; reality, user agents frown on cross-site architectures, so I use\n=\r\n&gt; multiple gateway components on a single domain, just not by choice, and\n&gt;=\r\n pray for the day I can dismantle them as the relics they are).\n&gt; \n&gt; &gt;\n&gt; &gt; =\r\n3. So... All you say is totally correct for the clients (user agents)\n&gt; &gt; i=\r\nn the REST system (your REST system, not the Web). Now, on the web,\n&gt; &gt; you=\r\n also have clients of your REST system, that is also on the web\n&gt; &gt; (we ass=\r\nume you can have a private REST system in your own cloud, that\n&gt; &gt; is not a=\r\n sin). YOur system maybe is not a REST system (as you mention\n&gt; &gt; of WP), a=\r\nnd you made that REST wrapper (an API) so it can be used in\n&gt; &gt; the web (th=\r\ne big system) so other people in the web can use your\n&gt; &gt; system. You are b=\r\nuilding an API, that starts as an adapter and (if\n&gt; &gt; you change WP to beco=\r\nme RESTfull) ends up as a facade. \n&gt; &gt; \n&gt; \n&gt; The only user agents I conside=\r\nr as part of my system, are those\n&gt; executing applications against it, REST=\r\nfully or not.  I promise you I\n&gt; am developing a REST system which has a RE=\r\nST API, and these system vs.\n&gt; wrapper vs. facade distinctions just don&#39;t e=\r\nxist or matter.  They&#39;re\n&gt; nothing but implementation details, hidden behin=\r\nd the generic connector\n&gt; interface.  The API is public, and does not vary =\r\nbased on the topology\n&gt; of my backend system.  The topology of my backend i=\r\ns *irrelevant* to\n&gt; REST, as it&#39;s part of the system but not the API.\n&gt; \n&gt; =\r\nThe distinction of where the user is located, inside or outside a\n&gt; firewal=\r\nl, is likewise irrelevant to REST.  What&#39;s relevant are their\n&gt; authenticat=\r\nion headers, and perhaps IP address (or incoming phone #),\n&gt; but the nature=\r\n of that IP address (public or private) has no bearing on\n&gt; anything.  Most=\r\n intranets allow authorized access over the Web, REST\n&gt; API or not.  That c=\r\nertain requests are only allowed from certain IPs is\n&gt; an aspect of my syst=\r\nem that has nothing to do with its API -- I publish\n&gt; no list of (un)allowa=\r\nble IP ranges to the world as part of the API, I\n&gt; leave it to my response =\r\ncodes to inform the user agent why a request\n&gt; failed (operation not allowe=\r\nd from your location, unauthorized user).\n&gt; \n&gt; I use REST API and REST syst=\r\nem interchangeably, because the only place\n&gt; it matters is philosophical di=\r\nscussions about the difference between\n&gt; the two, like we&#39;re having here.  =\r\nAny user agent executing an\n&gt; application against my API is in-circuit with=\r\n my system.  For all\n&gt; intents and purposes this makes no difference to any=\r\nthing, since REST\n&gt; developers are concerned with how their system responds=\r\n to requests,\n&gt; i.e. how it implements the generic connector interface -- n=\r\not how it\n&gt; implements resources behind the generic connector interface.\n&gt; =\r\n\n&gt; As I said before, we take so many system components (caches) for\n&gt; grant=\r\ned when discussing what the system entails for any given request/\n&gt; respons=\r\ne that going into detail isn&#39;t really of much use... it amounts\n&gt; to obscur=\r\ning the system&#39;s design.  This debate is going into exactly\n&gt; that sort of =\r\ndetail to prove that API and system aren&#39;t technically\n&gt; interchangeable, w=\r\nhich I agree with, but for any discussion but this\n&gt; one there&#39;s really no =\r\npoint making the distinction, because such\n&gt; distinction only obscures what=\r\n&#39;s being discussed.  For all intents and\n&gt; purposes.\n&gt; \n&gt; &gt;\n&gt; &gt; You are bui=\r\nlding then and API. For you WP system. Two things. That\n&gt; &gt; was my point: w=\r\nhat I actually see is people having a non-REST system\n&gt; &gt; that want to buil=\r\nd a REST API. An adapter.   \n&gt; &gt; \n&gt; \n&gt; No, I&#39;m not making a REST API for Wo=\r\nrdPress, bearing in mind that\n&gt; implementation detail has nothing to do wit=\r\nh REST and I could just as\n&gt; easily be modifying WordPress to achieve my ob=\r\njective as encapsulating\n&gt; it with a REST layer.  It wouldn&#39;t appear any di=\r\nfferent to the world\n&gt; I&#39;m exposing the API to.  Implementation details are=\r\n hidden behind the\n&gt; generic connector interface, REST APIs are only concer=\r\nned with\n&gt; instructing user agents how to manipulate representations of res=\r\nource\n&gt; or application state over the generic connector interface.\n&gt; \n&gt; I&#39;m=\r\n not creating two things, I&#39;m creating one gateway layer.  It has\n&gt; client =\r\nand server connectors, but only the server connector is part of\n&gt; the API.\n=\r\n&gt; \n&gt; What I&#39;m making is a REST API for my overall system, made up of\n&gt; sepa=\r\nrate wiki, weblog, forum, blogroll and tagging APIs plus the /date\n&gt; servic=\r\ne.  The API I&#39;m developing is a frontend to whatever totally\n&gt; obscured imp=\r\nlementation details make up the backend.  Could be WP,\n&gt; could be Drupal, c=\r\nould be my native Atom Store, could be a combination\n&gt; of any of the above,=\r\n and can change at my whim without affecting the\n&gt; API I&#39;ve exposed to the =\r\nworld.  Only the client connector of the\n&gt; gateway layer needs changing, in=\r\n the form of adding a module for each\n&gt; source generator, but the purpose o=\r\nf the layer is to provide the REST\n&gt; API and it does that without skipping =\r\na beat, because implementation\n&gt; details are hidden behind the generic conn=\r\nector interface.\n&gt; \n&gt; &gt;\n&gt; &gt; So, I guess we are on the same page, only that =\r\nyou use the term API\n&gt; &gt; and System as similar/the same thing (blurring the=\r\n limit between the\n&gt; &gt; API and the encompassed system, as if they were part=\r\ns of a whole,\n&gt; &gt; which is not bad), while I actually want to state the dif=\r\nference.\n&gt; &gt; When a client comes to me saying: &quot;We want to move on and beco=\r\nme\n&gt; &gt; REST&quot;, I ask : Do you want your old system to be re-architected usin=\r\ng\n&gt; &gt; REST, or do you want to build an API around it? When a client comes\n&gt;=\r\n &gt; saying they want an API, I surely know there is a system (certainly\n&gt; &gt; =\r\nnot REST) on the back, that wants to be exposed to the web. \n&gt; &gt; \n&gt; \n&gt; Not =\r\nquite on the same page, but some of what we&#39;re debating we do agree\n&gt; on, s=\r\no when you see a response that looks contradictory to what you&#39;re\n&gt; saying,=\r\n it&#39;s more likely to mean &quot;your terminology is imprecise&quot; rather\n&gt; than &quot;yo=\r\nu&#39;re wrong&quot;.\n&gt; \n&gt; When a client comes to you for REST development, you shou=\r\nld start by\n&gt; modeling resources.  Once that&#39;s done and you&#39;ve gotten a fee=\r\nl for the\n&gt; existing system, it&#39;s up to you as the architect to present you=\r\nr client\n&gt; with implementation options on the backend, i.e. encapsulate or =\r\nreplace\n&gt; the existing system?  That isn&#39;t the sort of up-front question yo=\r\nu can\n&gt; expect someone who&#39;s not a REST expert to be capable of answering, =\r\nin\n&gt; fact they&#39;re probably coming to you for *your* answer to that question=\r\n,\n&gt; or at least your input.\n&gt; \n&gt; But it isn&#39;t a starting point, and the dis=\r\ntinction you&#39;re trying to make\n&gt; has nothing to do with the REST API you&#39;re=\r\n developing for your client,\n&gt; it&#39;s an implementation detail hidden behind =\r\nthe generic connector\n&gt; interface having no bearing on REST.  Make your bac=\r\nkend generate your\n&gt; REST resources&#39; representations however you see fit, u=\r\nsing REST behind\n&gt; the firewall or not.  The generated representations are =\r\npart of the REST\n&gt; API, how they are generated is not, so how they are gene=\r\nrated is out-of-\n&gt; scope to any discussion of the REST API, meaning we can =\r\ngo ahead and\n&gt; call it a REST system without causing any harm because we ju=\r\nst don&#39;t\n&gt; care about implementation details.\n&gt; \n&gt; Sorry for all the repeti=\r\ntion, I just think these are important points.\n&gt; \n&gt; -Eric\n&gt;\n\n\n\n"}}
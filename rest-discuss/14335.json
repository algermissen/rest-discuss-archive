{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":267214845,"authorName":"Noah Campbell","from":"Noah Campbell &lt;noahcampbell@...&gt;","profile":"noahsingleton","replyTo":"SENDER","senderId":"CZUH1H1-A21ln5p4-abhb2bbjE4KVZzRgeod6UFOPh-XR6e5-AnL426myq1T2ZiHf0t-jabmxrL0sXDYxv_f97_UqyZCCIqBdGW-yuQ","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] REST isn&#39;t hard to learn, it&#39;s just taught wrong.","postDate":"1261514641","msgId":14335,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGRlNzBiMzlkMDkxMjIyMTI0NGo1MDUxOGE5Y2o3ZWJiM2QzNThiMTVhY2Q1QG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PDIwMDkxMjIwMjEyNjMzLjcxNWNhOTQyLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","referencesHeader":"PDIwMDkxMjIwMjEyNjMzLjcxNWNhOTQyLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4="},"prevInTopic":14331,"nextInTopic":14336,"prevInTime":14334,"nextInTime":14336,"topicId":14255,"numMessagesInTopic":44,"msgSnippet":"Why not teach REST from a systems engineering perspective.  The properties that define a RESTful architecture are leveraged by tools like HAProxy, Nginx,","rawEmail":"Return-Path: &lt;noahcampbell@...&gt;\r\nX-Sender: noahcampbell@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 26351 invoked from network); 22 Dec 2009 20:44:22 -0000\r\nX-Received: from unknown (66.196.94.107)\n  by m14.grp.re1.yahoo.com with QMQP; 22 Dec 2009 20:44:22 -0000\r\nX-Received: from unknown (HELO mail-px0-f197.google.com) (209.85.216.197)\n  by mta3.grp.re1.yahoo.com with SMTP; 22 Dec 2009 20:44:22 -0000\r\nX-Received: by pxi35 with SMTP id 35so4366497pxi.18\n        for &lt;rest-discuss@yahoogroups.com&gt;; Tue, 22 Dec 2009 12:44:01 -0800 (PST)\r\nMIME-Version: 1.0\r\nX-Received: by 10.142.67.32 with SMTP id p32mr6198921wfa.285.1261514641315; Tue, \n\t22 Dec 2009 12:44:01 -0800 (PST)\r\nIn-Reply-To: &lt;20091220212633.715ca942.eric@...&gt;\r\nReferences: &lt;20091220212633.715ca942.eric@...&gt;\r\nDate: Tue, 22 Dec 2009 12:44:01 -0800\r\nMessage-ID: &lt;de70b39d0912221244j50518a9cj7ebb3d358b15acd5@...&gt;\r\nTo: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nContent-Type: multipart/alternative; boundary=001636e0a8ba13172e047b5744c0\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Noah Campbell &lt;noahcampbell@...&gt;\r\nSubject: Re: [rest-discuss] REST isn&#39;t hard to learn, it&#39;s just taught wrong.\r\nX-Yahoo-Group-Post: member; u=267214845; y=FOmSjYtVoOsIPfUD5EdR9wKJh6saEmc3IUw9558ijJskwyxwwbxblg\r\nX-Yahoo-Profile: noahsingleton\r\n\r\n\r\n--001636e0a8ba13172e047b5744c0\r\nContent-Type: text/plain; charset=UTF-8\r\n\r\nWhy not teach REST from a systems engineering perspective.  The properties\nthat define a RESTful architecture are leveraged by tools like HAProxy,\nNginx, Squid, Varnish and various other intermediaries.  Once you have a\ngood working grasp on how caching, etags, HTTP methods and response codes\nimpact the entire system, then you can focus on building an app.  Being able\nto produce a service that fits into ecosystem becomes much more relevant\nthen trying to drag someone to the conclusion without a tangible example.\n\nJust a thought.\n\n-Noah\n\nOn Sun, Dec 20, 2009 at 8:26 PM, Eric J. Bowman &lt;eric@...&gt;wrote:\n\n&gt; The problem that&#39;s been preoccupying my thoughts during the time I\n&gt; spend experimenting with REST, is how to teach it.  I don&#39;t think\n&gt; anyone disputes the fact that REST is hard to learn.  But why is that?\n&gt; I&#39;ve convinced myself it&#39;s not because the students are morons, but\n&gt; that we, collectively as a community, have failed to teach it\n&gt; properly.  The best evidence of that, is the recent thread asking for\n&gt; examples of good REST systems: It&#39;s infinitely easier to find REST\n&gt; implementations that aren&#39;t, than it is to find good examples (I&#39;ve\n&gt; seen REST implemented effectively on Intranets where the client is a\n&gt; known quantity) that we can point to.\n&gt;\n&gt; We don&#39;t teach it properly, because we didn&#39;t learn it properly\n&gt; ourselves.  Besides Roy, who here at any level of REST ability has a\n&gt; background in software architecture?  Personally, I think it took me so\n&gt; many years to become comfortable with REST because it was my first\n&gt; experience with software development guided by a defined architectural\n&gt; style.  I basically had to teach myself software architecture, but not\n&gt; until well after I started fancying myself a REST developer.\n&gt;\n&gt; What I&#39;m saying, is that REST must be taught in terms of applied\n&gt; architecture, instead of by example, before there will ever be enough\n&gt; good examples to point to.  You can&#39;t learn XSLT by reading O&#39;Reilly&#39;s\n&gt; &quot;XSLT Cookbook&quot; of examples, yet we try teaching REST by hauling out\n&gt; the good ol&#39; shopping cart every time.  This has obviously failed.\n&gt;\n&gt; I don&#39;t think it&#39;s necessary for a REST student to understand anything\n&gt; about software architecture (except maybe a few terms), only to follow\n&gt; an approach grounded in software architecture.  The wonderful new\n&gt; textbook, &quot;Software Architecture:  Foundations, Theory, and Practice&quot; is\n&gt; something that should be read by the community, but not for the purpose\n&gt; of using that textbook to teach REST.  The textbook uses REST to\n&gt; illustrate the principles of software architecture, it doesn&#39;t teach\n&gt; REST.  But it can be used to inform us on how to better teach REST.\n&gt;\n&gt; The textbook has chapters on Modeling, Visualization, Analysis,\n&gt; Implementation, and Deployment and Mobility.  This is the disciplined\n&gt; approach that I keep harping on about, of late.\n&gt;\n&gt; The Modeling chapter discusses modeling both architectures and\n&gt; architectural styles.  It says nothing about modeling specific to\n&gt; REST.  Roy&#39;s thesis uses modeling to illustrate the REST architectural\n&gt; style.  So the first challenge in teaching REST is to teach how to\n&gt; model the components, connectors, resources and interfaces for a\n&gt; proposed system.  REST constrains the interaction between connectors,\n&gt; and these constraints must be part of the model.\n&gt;\n&gt; The Visualization chapter explains the separation of modeling and\n&gt; visualization, but says nothing about visualization within the context\n&gt; of REST.  The second challenge in teaching REST using a software-\n&gt; architecture-centric approach, is to use the model as a basis for\n&gt; visualizing a proposed system in terms of the Process, Connector and\n&gt; Data views for REST as described in Roy&#39;s thesis.\n&gt;\n&gt; The Analysis chapter also has nothing REST-specific.  It&#39;s fairly self-\n&gt; explanatory, though.  Modeling, Visualization and Analysis are not a\n&gt; serial approach, but an iterative process.  This is the stage where, if\n&gt; the Model calls for the Atom media type, despite the lack of URIs at\n&gt; this point, the documents may be written and validated to flesh out the\n&gt; data model for analysis.  How many hardware resources does the model\n&gt; require?  Does the model need to be adjusted up/down?  The third\n&gt; challenge in teaching REST is, does the model fit the system&#39;s goals?\n&gt;\n&gt; Finally, we get to Implementation, another chapter with nary a peep\n&gt; about REST.  (I say finally, because the Deployment chapter covers\n&gt; topics that, frankly, anyone pursuing REST probably has hands-on\n&gt; experience with, so I don&#39;t see it as a teaching challenge.)  Yes, this\n&gt; is where a URI allocation scheme is finally devised for the modeled,\n&gt; visualized and analyzed resources, and methods implemented so we can\n&gt; pass data over the wire.  It is iterative with the previous methods --\n&gt; selecting off-the-shelf parts may require architectural adjustment due\n&gt; to different design assumptions being made in a standard library.\n&gt;\n&gt; The textbook defines Implementation as the problem of maintaining a\n&gt; mapping between the developed system and its architectural model, and\n&gt; focuses on frameworks as the solution.  It also says, &quot;To imbue\n&gt; [desired properties] in the target system, the implementation _must_ be\n&gt; derived from its architecture.&quot;  This is the fourth, and most important,\n&gt; challenge in teaching REST.  Is the reason so many systems claim to be\n&gt; RESTful, but aren&#39;t, because 99% of developers simply don&#39;t *know* how\n&gt; to derive an implementation from an architectural style, because they&#39;ve\n&gt; never been taught?  I don&#39;t think they need to be taught, only given the\n&gt; tools to understand how a RESTful implementation is derived -- that\n&gt; these tools are derived from the tenets of software architecture may\n&gt; remain hidden behind a generic interface (so to speak).\n&gt;\n&gt; My suggestion is to dredge up and dust off ye olde shopping-cart\n&gt; example.  Why do we insist on presenting it by defining it as what\n&gt; methods to apply to what resources of interest to obtain what response\n&gt; code and data, beginning by defining a URI allocation scheme, when we\n&gt; know that URI allocation schemes have (almost) nothing to do with REST,\n&gt; and Roy has told us that we should be discussing our resources in terms\n&gt; of media types and link relations instead?  At some point, it should be\n&gt; presented in terms of Modeling, Visualizing, Analyzing, and\n&gt; Implementing in a REST-specific fashion.  I think this may address some\n&gt; of the criticism of REST lacking some sort of formal guidelines.\n&gt;\n&gt; In brief:  Define resources in terms of standard media types and link\n&gt; relations, saving URI allocation and method selection for the\n&gt; implementation phase.\n&gt;\n&gt; -Eric\n&gt;\n&gt;\n&gt; ------------------------------------\n&gt;\n&gt; Yahoo! Groups Links\n&gt;\n&gt;\n&gt;\n&gt;\n\r\n--001636e0a8ba13172e047b5744c0\r\nContent-Type: text/html; charset=UTF-8\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nWhy not teach REST from a systems engineering perspective. =C2=A0The proper=\r\nties that define a RESTful architecture are leveraged by tools like HAProxy=\r\n, Nginx, Squid, Varnish and various other intermediaries. =C2=A0Once you ha=\r\nve a good working grasp on how caching, etags, HTTP methods and response co=\r\ndes impact the entire system, then you can focus on building an app. =C2=A0=\r\nBeing able to produce a service that fits into ecosystem becomes much more =\r\nrelevant then trying to drag someone to the conclusion without a tangible e=\r\nxample.&lt;div&gt;\n&lt;br&gt;&lt;/div&gt;&lt;div&gt;Just a thought.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;-Noah&lt;=\r\nbr&gt;&lt;br&gt;&lt;div class=3D&quot;gmail_quote&quot;&gt;On Sun, Dec 20, 2009 at 8:26 PM, Eric J. =\r\nBowman &lt;span dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:eric@...&quot;&gt;eric@=\r\nbisonsystems.net&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;\n&lt;blockquote class=3D&quot;gmail_quote=\r\n&quot; style=3D&quot;margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex;&quot;&gt;=\r\nThe problem that&#39;s been preoccupying my thoughts during the time I&lt;br&gt;\n=\r\nspend experimenting with REST, is how to teach it. =C2=A0I don&#39;t think&lt;=\r\nbr&gt;\nanyone disputes the fact that REST is hard to learn. =C2=A0But why is t=\r\nhat?&lt;br&gt;\nI&#39;ve convinced myself it&#39;s not because the students are mo=\r\nrons, but&lt;br&gt;\nthat we, collectively as a community, have failed to teach it=\r\n&lt;br&gt;\nproperly. =C2=A0The best evidence of that, is the recent thread asking=\r\n for&lt;br&gt;\nexamples of good REST systems: It&#39;s infinitely easier to find =\r\nREST&lt;br&gt;\nimplementations that aren&#39;t, than it is to find good examples =\r\n(I&#39;ve&lt;br&gt;\nseen REST implemented effectively on Intranets where the clie=\r\nnt is a&lt;br&gt;\nknown quantity) that we can point to.&lt;br&gt;\n&lt;br&gt;\nWe don&#39;t tea=\r\nch it properly, because we didn&#39;t learn it properly&lt;br&gt;\nourselves. =C2=\r\n=A0Besides Roy, who here at any level of REST ability has a&lt;br&gt;\nbackground =\r\nin software architecture? =C2=A0Personally, I think it took me so&lt;br&gt;\nmany =\r\nyears to become comfortable with REST because it was my first&lt;br&gt;\nexperienc=\r\ne with software development guided by a defined architectural&lt;br&gt;\nstyle. =\r\n=C2=A0I basically had to teach myself software architecture, but not&lt;br&gt;\nun=\r\ntil well after I started fancying myself a REST developer.&lt;br&gt;\n&lt;br&gt;\nWhat I&=\r\n#39;m saying, is that REST must be taught in terms of applied&lt;br&gt;\narchitect=\r\nure, instead of by example, before there will ever be enough&lt;br&gt;\ngood examp=\r\nles to point to. =C2=A0You can&#39;t learn XSLT by reading O&#39;Reilly&#39=\r\n;s&lt;br&gt;\n&quot;XSLT Cookbook&quot; of examples, yet we try teaching REST by h=\r\nauling out&lt;br&gt;\nthe good ol&#39; shopping cart every time. =C2=A0This has ob=\r\nviously failed.&lt;br&gt;\n&lt;br&gt;\nI don&#39;t think it&#39;s necessary for a REST st=\r\nudent to understand anything&lt;br&gt;\nabout software architecture (except maybe =\r\na few terms), only to follow&lt;br&gt;\nan approach grounded in software architect=\r\nure. =C2=A0The wonderful new&lt;br&gt;\ntextbook, &quot;Software Architecture: =C2=\r\n=A0Foundations, Theory, and Practice&quot; is&lt;br&gt;\nsomething that should be =\r\nread by the community, but not for the purpose&lt;br&gt;\nof using that textbook t=\r\no teach REST. =C2=A0The textbook uses REST to&lt;br&gt;\nillustrate the principles=\r\n of software architecture, it doesn&#39;t teach&lt;br&gt;\nREST. =C2=A0But it can =\r\nbe used to inform us on how to better teach REST.&lt;br&gt;\n&lt;br&gt;\nThe textbook has=\r\n chapters on Modeling, Visualization, Analysis,&lt;br&gt;\nImplementation, and Dep=\r\nloyment and Mobility. =C2=A0This is the disciplined&lt;br&gt;\napproach that I kee=\r\np harping on about, of late.&lt;br&gt;\n&lt;br&gt;\nThe Modeling chapter discusses modeli=\r\nng both architectures and&lt;br&gt;\narchitectural styles. =C2=A0It says nothing a=\r\nbout modeling specific to&lt;br&gt;\nREST. =C2=A0Roy&#39;s thesis uses modeling to=\r\n illustrate the REST architectural&lt;br&gt;\nstyle. =C2=A0So the first challenge =\r\nin teaching REST is to teach how to&lt;br&gt;\nmodel the components, connectors, r=\r\nesources and interfaces for a&lt;br&gt;\nproposed system. =C2=A0REST constrains th=\r\ne interaction between connectors,&lt;br&gt;\nand these constraints must be part of=\r\n the model.&lt;br&gt;\n&lt;br&gt;\nThe Visualization chapter explains the separation of m=\r\nodeling and&lt;br&gt;\nvisualization, but says nothing about visualization within =\r\nthe context&lt;br&gt;\nof REST. =C2=A0The second challenge in teaching REST using =\r\na software-&lt;br&gt;\narchitecture-centric approach, is to use the model as a bas=\r\nis for&lt;br&gt;\nvisualizing a proposed system in terms of the Process, Connector=\r\n and&lt;br&gt;\nData views for REST as described in Roy&#39;s thesis.&lt;br&gt;\n&lt;br&gt;\nThe=\r\n Analysis chapter also has nothing REST-specific. =C2=A0It&#39;s fairly sel=\r\nf-&lt;br&gt;\nexplanatory, though. =C2=A0Modeling, Visualization and Analysis are =\r\nnot a&lt;br&gt;\nserial approach, but an iterative process. =C2=A0This is the stag=\r\ne where, if&lt;br&gt;\nthe Model calls for the Atom media type, despite the lack o=\r\nf URIs at&lt;br&gt;\nthis point, the documents may be written and validated to fle=\r\nsh out the&lt;br&gt;\ndata model for analysis. =C2=A0How many hardware resources d=\r\noes the model&lt;br&gt;\nrequire? =C2=A0Does the model need to be adjusted up/down=\r\n? =C2=A0The third&lt;br&gt;\nchallenge in teaching REST is, does the model fit the=\r\n system&#39;s goals?&lt;br&gt;\n&lt;br&gt;\nFinally, we get to Implementation, another ch=\r\napter with nary a peep&lt;br&gt;\nabout REST. =C2=A0(I say finally, because the De=\r\nployment chapter covers&lt;br&gt;\ntopics that, frankly, anyone pursuing REST prob=\r\nably has hands-on&lt;br&gt;\nexperience with, so I don&#39;t see it as a teaching =\r\nchallenge.) =C2=A0Yes, this&lt;br&gt;\nis where a URI allocation scheme is finally=\r\n devised for the modeled,&lt;br&gt;\nvisualized and analyzed resources, and method=\r\ns implemented so we can&lt;br&gt;\npass data over the wire. =C2=A0It is iterative =\r\nwith the previous methods --&lt;br&gt;\nselecting off-the-shelf parts may require =\r\narchitectural adjustment due&lt;br&gt;\nto different design assumptions being made=\r\n in a standard library.&lt;br&gt;\n&lt;br&gt;\nThe textbook defines Implementation as the=\r\n problem of maintaining a&lt;br&gt;\nmapping between the developed system and its =\r\narchitectural model, and&lt;br&gt;\nfocuses on frameworks as the solution. =C2=A0I=\r\nt also says, &quot;To imbue&lt;br&gt;\n[desired properties] in the target system, =\r\nthe implementation _must_ be&lt;br&gt;\nderived from its architecture.&quot; =C2=\r\n=A0This is the fourth, and most important,&lt;br&gt;\nchallenge in teaching REST. =\r\n=C2=A0Is the reason so many systems claim to be&lt;br&gt;\nRESTful, but aren&#39;t=\r\n, because 99% of developers simply don&#39;t *know* how&lt;br&gt;\nto derive an im=\r\nplementation from an architectural style, because they&#39;ve&lt;br&gt;\nnever bee=\r\nn taught? =C2=A0I don&#39;t think they need to be taught, only given the&lt;br=\r\n&gt;\ntools to understand how a RESTful implementation is derived -- that&lt;br&gt;\nt=\r\nhese tools are derived from the tenets of software architecture may&lt;br&gt;\nrem=\r\nain hidden behind a generic interface (so to speak).&lt;br&gt;\n&lt;br&gt;\nMy suggestion=\r\n is to dredge up and dust off ye olde shopping-cart&lt;br&gt;\nexample. =C2=A0Why =\r\ndo we insist on presenting it by defining it as what&lt;br&gt;\nmethods to apply t=\r\no what resources of interest to obtain what response&lt;br&gt;\ncode and data, beg=\r\ninning by defining a URI allocation scheme, when we&lt;br&gt;\nknow that URI alloc=\r\nation schemes have (almost) nothing to do with REST,&lt;br&gt;\nand Roy has told u=\r\ns that we should be discussing our resources in terms&lt;br&gt;\nof media types an=\r\nd link relations instead? =C2=A0At some point, it should be&lt;br&gt;\npresented i=\r\nn terms of Modeling, Visualizing, Analyzing, and&lt;br&gt;\nImplementing in a REST=\r\n-specific fashion. =C2=A0I think this may address some&lt;br&gt;\nof the criticism=\r\n of REST lacking some sort of formal guidelines.&lt;br&gt;\n&lt;br&gt;\nIn brief: =C2=A0D=\r\nefine resources in terms of standard media types and link&lt;br&gt;\nrelations, sa=\r\nving URI allocation and method selection for the&lt;br&gt;\nimplementation phase.&lt;=\r\nbr&gt;\n&lt;font color=3D&quot;#888888&quot;&gt;&lt;br&gt;\n-Eric&lt;br&gt;\n&lt;/font&gt;&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;div clas=\r\ns=3D&quot;h5&quot;&gt;&lt;br&gt;\n&lt;br&gt;\n------------------------------------&lt;br&gt;\n&lt;br&gt;\nYahoo! Gro=\r\nups Links&lt;br&gt;\n&lt;br&gt;\n&lt;*&gt; To visit your group on the web, go to:&lt;br&gt;\n =\r\n=C2=A0 =C2=A0&lt;a href=3D&quot;http://groups.yahoo.com/group/rest-discuss/&quot; target=\r\n=3D&quot;_blank&quot;&gt;http://groups.yahoo.com/group/rest-discuss/&lt;/a&gt;&lt;br&gt;\n&lt;br&gt;\n&lt;*&=\r\ngt; Your email settings:&lt;br&gt;\n =C2=A0 =C2=A0Individual Email | Traditional&lt;b=\r\nr&gt;\n&lt;br&gt;\n&lt;*&gt; To change settings online go to:&lt;br&gt;\n =C2=A0 =C2=A0&lt;a hre=\r\nf=3D&quot;http://groups.yahoo.com/group/rest-discuss/join&quot; target=3D&quot;_blank&quot;&gt;htt=\r\np://groups.yahoo.com/group/rest-discuss/join&lt;/a&gt;&lt;br&gt;\n =C2=A0 =C2=A0(Yahoo! =\r\nID required)&lt;br&gt;\n&lt;br&gt;\n&lt;*&gt; To change settings via email:&lt;br&gt;\n =C2=A0 =\r\n=C2=A0&lt;a href=3D&quot;mailto:rest-discuss-digest@yahoogroups.com&quot;&gt;rest-discuss-d=\r\nigest@yahoogroups.com&lt;/a&gt;&lt;br&gt;\n =C2=A0 =C2=A0&lt;a href=3D&quot;mailto:rest-discuss-=\r\nfullfeatured@yahoogroups.com&quot;&gt;rest-discuss-fullfeatured@yahoogroups.com&lt;/a&gt;=\r\n&lt;br&gt;\n&lt;br&gt;\n&lt;*&gt; To unsubscribe from this group, send an email to:&lt;br&gt;\n =\r\n=C2=A0 =C2=A0&lt;a href=3D&quot;mailto:rest-discuss-unsubscribe@yahoogroups.com&quot;&gt;re=\r\nst-discuss-unsubscribe@yahoogroups.com&lt;/a&gt;&lt;br&gt;\n&lt;br&gt;\n&lt;*&gt; Your use of Y=\r\nahoo! Groups is subject to:&lt;br&gt;\n =C2=A0 =C2=A0&lt;a href=3D&quot;http://docs.yahoo.=\r\ncom/info/terms/&quot; target=3D&quot;_blank&quot;&gt;http://docs.yahoo.com/info/terms/&lt;/a&gt;&lt;br=\r\n&gt;\n&lt;br&gt;\n&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;\n\r\n--001636e0a8ba13172e047b5744c0--\r\n\n"}}
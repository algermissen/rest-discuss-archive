{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":242972596,"authorName":"Jørn Wildt","from":"=?Windows-1252?Q?J=F8rn_Wildt?= &lt;jw@...&gt;","profile":"jorn_lind_nielsen","replyTo":"SENDER","senderId":"Y9jJxPfs1yLryM_kVmCJNLr08-psHci3_uekeXx2jT6DcnkGvRZ7m1XFjwbbWiFKyXsP-suBmREEaSV7V_KQ1Lu79eNKjFOrMDWzribi8ooXrF1ScWJ9CTtR7w","spamInfo":{"isSpam":false,"reason":"3"},"subject":"Re: [rest-discuss] Re: RESTful claims-based authorization","postDate":"1262576468","msgId":14437,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDVFMUNDRDJBNzEyRDRDNzE5NzJBRkQ2MEJFREU5NUYwQEpyblBDPg==","inReplyToHeader":"PGhoZ21wZiQ5cWQkMUBnZXIuZ21hbmUub3JnPg==","referencesHeader":"PDlBOTUzMDlBOTU3NTQwMTJCQzg3RTFGMEE4MjFGNTVDQEpyblBDPiA8aGhnbXBmJDlxZCQxQGdlci5nbWFuZS5vcmc+"},"prevInTopic":14436,"nextInTopic":14971,"prevInTime":14436,"nextInTime":14438,"topicId":14426,"numMessagesInTopic":4,"msgSnippet":"Hi Bruno, Are you using the SSL certificate to convey claims like email etc.? As I understand SSL it will be imposible to cache anything like you normaly can ","rawEmail":"Return-Path: &lt;jw@...&gt;\r\nX-Sender: jw@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 86266 invoked from network); 4 Jan 2010 03:40:01 -0000\r\nX-Received: from unknown (98.137.34.45)\n  by m4.grp.sp2.yahoo.com with QMQP; 4 Jan 2010 03:40:01 -0000\r\nX-Received: from unknown (HELO smtp1.cybercity.dk) (212.242.43.251)\n  by mta2.grp.sp2.yahoo.com with SMTP; 4 Jan 2010 03:40:00 -0000\r\nX-Received: from uf7.cybercity.dk (uf7.cybercity.dk [212.242.42.164])\n\tby smtp1.cybercity.dk (Postfix) with ESMTP id AB1E3586816;\n\tMon,  4 Jan 2010 04:43:00 +0100 (CET)\r\nX-Received: from JrnPC (c-98-216-208-46.hsd1.ma.comcast.net [98.216.208.46])\n\t(Authenticated sender: dsl164923)\n\tby uf7.cybercity.dk (Postfix) with ESMTPA id 3DA667E802B;\n\tMon,  4 Jan 2010 04:39:55 +0100 (CET)\r\nMessage-ID: &lt;5E1CCD2A712D4C71972AFD60BEDE95F0@JrnPC&gt;\r\nTo: &lt;rest-discuss@yahoogroups.com&gt;,\n\t&quot;Bruno Harbulot&quot; &lt;Bruno.Harbulot@...&gt;\r\nReferences: &lt;9A95309A95754012BC87E1F0A821F55C@JrnPC&gt; &lt;hhgmpf$9qd$1@...&gt;\r\nIn-Reply-To: &lt;hhgmpf$9qd$1@...&gt;\r\nDate: Sun, 3 Jan 2010 22:41:08 -0500\r\nMIME-Version: 1.0\r\nContent-Type: text/plain;\n\tformat=flowed;\n\tcharset=&quot;Windows-1252&quot;;\n\treply-type=original\r\nContent-Transfer-Encoding: 8bit\r\nX-Priority: 3\r\nX-MSMail-Priority: Normal\r\nX-Mailer: Microsoft Windows Mail 6.0.6002.18005\r\nX-MimeOLE: Produced By Microsoft MimeOLE V6.0.6002.18005\r\nX-eGroups-Msg-Info: 2:3:4:0:0\r\nFrom: =?Windows-1252?Q?J=F8rn_Wildt?= &lt;jw@...&gt;\r\nSubject: Re: [rest-discuss] Re: RESTful claims-based authorization\r\nX-Yahoo-Group-Post: member; u=242972596; y=NglidPThrM1zi4lr4vAZjrXhWqLFpPzZdIEUlAyVMW3etSb8_Fs5hqH8Lbg\r\nX-Yahoo-Profile: jorn_lind_nielsen\r\n\r\nHi Bruno,\n\nAre you using the SSL certificate to convey claims like email etc.? As I \nunderstand SSL it will be imposible to cache anything like you normaly can \nusing REST - is that right? Seems like you loose something that way - \nespecially if it&#39;s not encryption you are aiming for, but only trust in \nclaims.\n\n&gt; This being said, discovering the identity in FOAF+SSL is really where\n&gt; this system makes use of REST: your ID is a URI (a WebID) than can be\n&gt; dereferenced and about which things can be said using RDF/semantic web.\n\nYes, using a URL as an ID seems like a good idea. As you say, you can state \nall sorts of thing at the end of the URL. As I remember it, this is quite a \nbit like what OpenID is doing, and, using some crypto stuff I do not \nunderstand, the server can be assured that the URL is in fact controlled by \nthe client.\n\n&gt; I sometimes wish there were &#39;WWW-Authenticate: transport&#39; (or something\n&gt; similar, to make handling tokens out of HTTP like SSL client-certificate\n&gt; cleaner, and thus avoid some problems related to the TLS renegotiation\n&gt; issue) or &#39;WWW-Authenticate: token&#39; (to have clear\n&gt; authentication-dedicated tokens, rather than cookies that are also used\n&gt; for sessions), but they just don&#39;t exist in browser.\n\nOkay, so using SSL, OpenID, SAML, whatever: it seems like their is no \nstandard way of transporting non-username/passsword claims after an initial \nhandshake, except for using cookies.\n\nSo the defacto standard way is quite simple: use cookies for storing \nproprietary security claims or session identifiers. Right?\n\nOr, if you ignore browsers, you can use &quot;Authorization: MyVendorAuth XYZ&quot; \nwhere MyVendorAuth identifies a proprietary claims-encoding method. Right?\n\n/J�rn\n\n----- Original Message ----- \nFrom: &quot;Bruno Harbulot&quot; &lt;Bruno.Harbulot@...&gt;\nTo: &lt;rest-discuss@yahoogroups.com&gt;\nSent: Wednesday, December 30, 2009 6:12 PM\nSubject: [rest-discuss] Re: RESTful claims-based authorization\n\n\n&gt; Hello J�rn,\n&gt;\n&gt; You could in principle define your own headers (or try to standardise\n&gt; some headers) to propagate SAML assertions (or similar tokens) in a\n&gt; RESTful way. Unfortunately, that&#39;s unlikely to work in browsers.\n&gt;\n&gt; Even SAML&#39;s HTTP Redirect (GET) Binding is often only a one-off thing\n&gt; that can only be used to log in (and thus get a cookie), otherwise you&#39;d\n&gt; have to repeat this query for all URIs you want to use (and thus change\n&gt; the URI, since the query is part of the URI, strictly speaking).\n&gt;\n&gt; We&#39;ve been doing some work on FOAF+SSL whereby you avoid the non-RESTful\n&gt; authentication issue by using a TLS/SSL client-certificate for the\n&gt; authentication (which is under the HTTP level), but for servers that\n&gt; don&#39;t support SSL (or even the settings required for FOAF+SSL), we&#39;ve\n&gt; also had to use some SSO-like login mechanism via cookies.\n&gt; This being said, discovering the identity in FOAF+SSL is really where\n&gt; this system makes use of REST: your ID is a URI (a WebID) than can be\n&gt; dereferenced and about which things can be said using RDF/semantic web.\n&gt;\n&gt;\n&gt; The issue of using cookies for authentication/authorisation comes from\n&gt; the lack of browser support (and standardisation) for other headers.\n&gt; I sometimes wish there were &#39;WWW-Authenticate: transport&#39; (or something\n&gt; similar, to make handling tokens out of HTTP like SSL client-certificate\n&gt; cleaner, and thus avoid some problems related to the TLS renegotiation\n&gt; issue) or &#39;WWW-Authenticate: token&#39; (to have clear\n&gt; authentication-dedicated tokens, rather than cookies that are also used\n&gt; for sessions), but they just don&#39;t exist in browser.\n&gt; Would it be worth suggesting this approach to the HTTP WG? Perhaps, but\n&gt; there&#39;s little point doing so if the major browser vendors are not on\n&gt; board. I presume most people consider that cookies are an acceptable\n&gt; practical solution, even if it breaks the REST principles.\n&gt;\n&gt;\n&gt; Best wishes,\n&gt;\n&gt; Bruno.\n&gt;\n&gt;\n&gt; J�rn Wildt wrote:\n&gt;&gt;\n&gt;&gt;\n&gt;&gt; Is there any standard RESTful way of doing claims based authorization \n&gt;&gt; a&#39;la\n&gt;&gt; SAML and CardSpace? The authorization schemes I have seen so far usually\n&gt;&gt; encodes a user reference and nothing more - there&#39;s no secure way to \n&gt;&gt; assert\n&gt;&gt; claims like email=xxx@... &lt;mailto:email%3Dxxx%40yyy.zz&gt; or\n&gt;&gt; employeenumber=12345 or age-below-twenty.\n&gt;&gt;\n&gt;&gt; I guess you can use SAML &quot;HTTP Redirect (GET) Binding&quot;, but that \n&gt;&gt; generates\n&gt;&gt; such a huge URL that it seems impractical to use (it&#39;s a base-64\n&gt;&gt; encoding of\n&gt;&gt; a zip-encoding of a SAML XML document).\n&gt;&gt;\n&gt;&gt; As I understand it a RESTful authorization scheme must be stateless, so \n&gt;&gt; you\n&gt;&gt; cannot rely on any kind of session use. This means you have to transfer \n&gt;&gt; all\n&gt;&gt; the claims on each and every request which again means a potentially big\n&gt;&gt; overhead.\n&gt;&gt;\n&gt;&gt; What is needed is a standard way of encoding multiple claims in a \n&gt;&gt; compact,\n&gt;&gt; secure, trusted way such that they can be transferred on each request\n&gt;&gt; without too much overhead (including whatever crypto stuff is needed).\n&gt;&gt;\n&gt;&gt; Maybe you could create a temporary ressource somewhere with the claims,\n&gt;&gt; then\n&gt;&gt; at least you only had to transfer the claims URL, not all the claims, and\n&gt;&gt; the server could then cache these claims.\n&gt;&gt;\n&gt;&gt; Any ideas or references?\n&gt;&gt;\n&gt;&gt; It even occurs to me that claims could be more RESTful than\n&gt;&gt; username/password since they don&#39;t require any out-of-band setup of user\n&gt;&gt; accounts. All that is needed is a standard for claims and then everything\n&gt;&gt; should work if the claims are issued by an authority that the web service\n&gt;&gt; trusts. No need for any human interaction - the server just sends a\n&gt;&gt; challenge &quot;show me your claims (and I accept them from authority X, Y and\n&gt;&gt; Z)&quot; whereafter the client sends the claims. These claims can even be\n&gt;&gt; obtained without human interaction if the client and the claims server\n&gt;&gt; trust\n&gt;&gt; each other.\n&gt;&gt;\n&gt;&gt; Comments?\n&gt;&gt;\n&gt;&gt; Thanks, J�rn\n&gt;\n&gt;\n&gt;\n&gt; ------------------------------------\n&gt;\n&gt; Yahoo! Groups Links\n&gt;\n&gt;\n&gt;\n\n"}}
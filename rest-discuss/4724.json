{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":81035509,"authorName":"Vincent D Murphy","from":"Vincent D Murphy &lt;vdm@...&gt;","profile":"johnfoobar1","replyTo":"SENDER","senderId":"9exGSk8MAhqSdV2btZbnOkdWMW0L2gYHJjcIUoBZma-Sg_lvtNX4IMRxGvVS5nwqi_0yEgrSTNCoew-ktn_SI1HoiLc","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] REST clarifications...","postDate":"1104279176","msgId":4724,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQxRDFGNjg4LjcwMTAwMDJAdmRtLmNjPg==","inReplyToHeader":"PGNxcnJ0Mys4ZGxtQGVHcm91cHMuY29tPg==","referencesHeader":"PGNxcnJ0Mys4ZGxtQGVHcm91cHMuY29tPg=="},"prevInTopic":4723,"nextInTopic":4725,"prevInTime":4723,"nextInTime":4725,"topicId":4721,"numMessagesInTopic":25,"msgSnippet":"... I haven t found a reason to use PUT rather than POST for creating a new resource. I m still waiting for the killer example where it makes sense. Using PUT","rawEmail":"Return-Path: &lt;vdm@...&gt;\r\nX-Sender: vdm@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 25939 invoked from network); 29 Dec 2004 00:12:58 -0000\r\nReceived: from unknown (66.218.66.216)\n  by m25.grp.scd.yahoo.com with QMQP; 29 Dec 2004 00:12:58 -0000\r\nReceived: from unknown (HELO mail.online.ie) (213.159.130.68)\n  by mta1.grp.scd.yahoo.com with SMTP; 29 Dec 2004 00:12:58 -0000\r\nReceived: from [83.70.110.17] (helo=[192.168.1.101])\n\tby mail.online.ie with asmtp (Exim 4.33)\n\tid 1CjRSS-0005FK-DE; Wed, 29 Dec 2004 00:12:56 +0000\r\nMessage-ID: &lt;41D1F688.7010002@...&gt;\r\nDate: Wed, 29 Dec 2004 00:12:56 +0000\r\nUser-Agent: Mozilla Thunderbird 1.0 (Macintosh/20041206)\r\nX-Accept-Language: en-us, en\r\nMIME-Version: 1.0\r\nTo: rlution &lt;rlution@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nReferences: &lt;cqrrt3+8dlm@...&gt;\r\nIn-Reply-To: &lt;cqrrt3+8dlm@...&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Remote-IP: 213.159.130.68\r\nFrom: Vincent D Murphy &lt;vdm@...&gt;\r\nSubject: Re: [rest-discuss] REST clarifications...\r\nX-Yahoo-Group-Post: member; u=81035509\r\nX-Yahoo-Profile: johnfoobar1\r\n\r\nrlution wrote:\n&gt; 1) Some material on REST seems to reserve POST for &quot;create&quot; and PUT\n&gt; for &quot;update&quot; while others seem to blur the distinction.  Any insight\n&gt; here would be most helpful.\n\nI haven&#39;t found a reason to use PUT rather than POST\nfor creating a new resource. I&#39;m still waiting for\nthe killer example where it makes sense.\n\nUsing PUT to create a resource is like using UPDATE\nin SQL to create a new row.\n\n&gt; 2) The writings seem to direct one away from using the query string as\n&gt; much as possible.  While it is clear that .../somecgi.pl?action=delete\n &gt; is most unREST-ful I assume\n\nHaving a (meaningful) verb *anywhere* in the URI\nis bad. For one thing, it violates the URI opaqueness\nconstraint. For another, the verb belongs in the\nprotocol, which is where HTTP has it.\n\nOne of my favourite web frameworks currently is\nRuby On Rails. One of the things I don&#39;t like is\nthat it gives you URLs like /blog/display/5. I just\nwant to GET /blog/5.\n\nLots of wikis, blogs and other CMS systems display\nthis anti-pattern.\n\nhttp://www.rubyonrails.com/\n\n&gt; .../invoice?id=3224 is OK to refer to\n&gt; particular invoice (for example)?  I&#39;m confused by the apparent\n&gt; alternative URI to do the same thing .../invoice/3224  If the latter\n&gt; is preferable, why is that - especially when this seems to embody\n&gt; &quot;Common REST Mistake #3&quot;?\n\nI think #3 runs the risk of being misleading.\n\nhttp://www.prescod.net/rest/mistakes/\n\nWhat is bad about /invoice/3224 is if you expect\nagents to rely on the structure to discover related\nresources. Like expecting an agent to know to refer\nto the /invoice container from /invoice/3224 as ../\n\nBetter to be explicit about it and say container=&quot;../&quot;\nsomewhere in a representation. That&#39;s what is meant\nby opaqueness.\n\nI use URLs like /invoice/3224 all the time, because\nthey&#39;re the most human-readable alternative.\n\n&gt; In short, when does one use the query\n&gt; string versus the .../container/contained notation?\n\nI only use the query string for queries. Queries\nusually belong on container-ish resources. e.g.\n\n/invoices?paid=no\n\n&gt; 3) Does seems REST assumes the user will create a URI parser from\n&gt; scratch?  The writings seem to call for a &quot;central xml file&quot; to do\n&gt; this.  Do libwww-perl, Waterken, Cocoon, sqlREST enter in here? Could\n&gt; someone comment on this a bit more?\n\nI have approached this by parsing the PATH_INFO\nenvironment variable in cgi scripts and picking a\ncode path based on its contents. I&#39;ve attempted to\nbuild more general-purpose framework code but so\nfar a big fat if-elsif statement works.\n\nThis kind of code could be derived on-the-fly from\nthe so-called &quot;central XML file&quot;.\n\n"}}
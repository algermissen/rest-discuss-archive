{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":343278744,"authorName":"Subbu Allamaraju","from":"Subbu Allamaraju &lt;subbu@...&gt;","profile":"sallamar","replyTo":"SENDER","senderId":"TzGgxWP3aPQNLnoojA5EJ4tnzQMdRpbUSi8dsTulItsORobEv7VbrQRH43Oafv55E_mMWh9hmtybWGFmBJWCof-kiS_6k6EESA","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] REST isn&#39;t hard to learn, it&#39;s just taught wrong.","postDate":"1261515520","msgId":14336,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PENFOTY1QzdDLTc1QjgtNDIxQy04NEM3LTI2MkQwQzUyNzk3OEBzdWJidS5vcmc+","inReplyToHeader":"PGRlNzBiMzlkMDkxMjIyMTI0NGo1MDUxOGE5Y2o3ZWJiM2QzNThiMTVhY2Q1QG1haWwuZ21haWwuY29tPg==","referencesHeader":"PDIwMDkxMjIwMjEyNjMzLjcxNWNhOTQyLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4gPGRlNzBiMzlkMDkxMjIyMTI0NGo1MDUxOGE5Y2o3ZWJiM2QzNThiMTVhY2Q1QG1haWwuZ21haWwuY29tPg=="},"prevInTopic":14335,"nextInTopic":14337,"prevInTime":14335,"nextInTime":14337,"topicId":14255,"numMessagesInTopic":44,"msgSnippet":"Well said. It would be a great disservice to teach REST with limited/no emphasis on how it all is supposed to work on the real-world plumbing. It would be even","rawEmail":"Return-Path: &lt;subbu@...&gt;\r\nX-Sender: subbu@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 27088 invoked from network); 22 Dec 2009 20:58:46 -0000\r\nX-Received: from unknown (98.137.34.45)\n  by m5.grp.sp2.yahoo.com with QMQP; 22 Dec 2009 20:58:46 -0000\r\nX-Received: from unknown (HELO mail-gx0-f221.google.com) (209.85.217.221)\n  by mta2.grp.sp2.yahoo.com with SMTP; 22 Dec 2009 20:58:46 -0000\r\nX-Received: by gxk21 with SMTP id 21so1371801gxk.10\n        for &lt;rest-discuss@yahoogroups.com&gt;; Tue, 22 Dec 2009 12:58:45 -0800 (PST)\r\nX-Received: by 10.91.129.20 with SMTP id g20mr1617922agn.7.1261515523472;\n        Tue, 22 Dec 2009 12:58:43 -0800 (PST)\r\nReturn-Path: &lt;subbu@...&gt;\r\nX-Received: from ?192.168.0.196? (nat-dip6.cfw-a-gci.corp.yahoo.com [209.131.62.115])\n        by mx.google.com with ESMTPS id 4sm2525787ywd.59.2009.12.22.12.58.41\n        (version=SSLv3 cipher=RC4-MD5);\n        Tue, 22 Dec 2009 12:58:42 -0800 (PST)\r\nMime-Version: 1.0 (Apple Message framework v1077)\r\nContent-Type: text/plain; charset=us-ascii\r\nIn-Reply-To: &lt;de70b39d0912221244j50518a9cj7ebb3d358b15acd5@...&gt;\r\nDate: Tue, 22 Dec 2009 12:58:40 -0800\r\nCc: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;,\n rest-discuss@yahoogroups.com\r\nContent-Transfer-Encoding: quoted-printable\r\nMessage-Id: &lt;CE965C7C-75B8-421C-84C7-262D0C527978@...&gt;\r\nReferences: &lt;20091220212633.715ca942.eric@...&gt; &lt;de70b39d0912221244j50518a9cj7ebb3d358b15acd5@...&gt;\r\nTo: Noah Campbell &lt;noahcampbell@...&gt;\r\nX-Mailer: Apple Mail (2.1077)\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Subbu Allamaraju &lt;subbu@...&gt;\r\nSubject: Re: [rest-discuss] REST isn&#39;t hard to learn, it&#39;s just taught wrong.\r\nX-Yahoo-Group-Post: member; u=343278744; y=iLIvDq4O6AJ2jZ0YpQRVnIbP97RiibU3p260ZwqXmw2C_Ok\r\nX-Yahoo-Profile: sallamar\r\n\r\nWell said. It would be a great disservice to teach REST with limited/no emp=\r\nhasis on how it all is supposed to work on the real-world plumbing. It woul=\r\nd be even be a greater disservice to teach REST as an all-or-nothing dogma.=\r\n \n\nNo more slaps on the wrist please!\n\nSubbu\n\nOn Dec 22, 2009, at 12:44 PM,=\r\n Noah Campbell wrote:\n\n&gt; \n&gt; \n&gt; Why not teach REST from a systems engineerin=\r\ng perspective.  The properties that define a RESTful architecture are lever=\r\naged by tools like HAProxy, Nginx, Squid, Varnish and various other interme=\r\ndiaries.  Once you have a good working grasp on how caching, etags, HTTP me=\r\nthods and response codes impact the entire system, then you can focus on bu=\r\nilding an app.  Being able to produce a service that fits into ecosystem be=\r\ncomes much more relevant then trying to drag someone to the conclusion with=\r\nout a tangible example.\n&gt; \n&gt; Just a thought.\n&gt; \n&gt; -Noah\n&gt; \n&gt; On Sun, Dec 20=\r\n, 2009 at 8:26 PM, Eric J. Bowman &lt;eric@...&gt; wrote:\n&gt; The prob=\r\nlem that&#39;s been preoccupying my thoughts during the time I\n&gt; spend experime=\r\nnting with REST, is how to teach it.  I don&#39;t think\n&gt; anyone disputes the f=\r\nact that REST is hard to learn.  But why is that?\n&gt; I&#39;ve convinced myself i=\r\nt&#39;s not because the students are morons, but\n&gt; that we, collectively as a c=\r\nommunity, have failed to teach it\n&gt; properly.  The best evidence of that, i=\r\ns the recent thread asking for\n&gt; examples of good REST systems: It&#39;s infini=\r\ntely easier to find REST\n&gt; implementations that aren&#39;t, than it is to find =\r\ngood examples (I&#39;ve\n&gt; seen REST implemented effectively on Intranets where =\r\nthe client is a\n&gt; known quantity) that we can point to.\n&gt; \n&gt; We don&#39;t teach=\r\n it properly, because we didn&#39;t learn it properly\n&gt; ourselves.  Besides Roy=\r\n, who here at any level of REST ability has a\n&gt; background in software arch=\r\nitecture?  Personally, I think it took me so\n&gt; many years to become comfort=\r\nable with REST because it was my first\n&gt; experience with software developme=\r\nnt guided by a defined architectural\n&gt; style.  I basically had to teach mys=\r\nelf software architecture, but not\n&gt; until well after I started fancying my=\r\nself a REST developer.\n&gt; \n&gt; What I&#39;m saying, is that REST must be taught in=\r\n terms of applied\n&gt; architecture, instead of by example, before there will =\r\never be enough\n&gt; good examples to point to.  You can&#39;t learn XSLT by readin=\r\ng O&#39;Reilly&#39;s\n&gt; &quot;XSLT Cookbook&quot; of examples, yet we try teaching REST by hau=\r\nling out\n&gt; the good ol&#39; shopping cart every time.  This has obviously faile=\r\nd.\n&gt; \n&gt; I don&#39;t think it&#39;s necessary for a REST student to understand anyth=\r\ning\n&gt; about software architecture (except maybe a few terms), only to follo=\r\nw\n&gt; an approach grounded in software architecture.  The wonderful new\n&gt; tex=\r\ntbook, &quot;Software Architecture:  Foundations, Theory, and Practice&quot; is\n&gt; som=\r\nething that should be read by the community, but not for the purpose\n&gt; of u=\r\nsing that textbook to teach REST.  The textbook uses REST to\n&gt; illustrate t=\r\nhe principles of software architecture, it doesn&#39;t teach\n&gt; REST.  But it ca=\r\nn be used to inform us on how to better teach REST.\n&gt; \n&gt; The textbook has c=\r\nhapters on Modeling, Visualization, Analysis,\n&gt; Implementation, and Deploym=\r\nent and Mobility.  This is the disciplined\n&gt; approach that I keep harping o=\r\nn about, of late.\n&gt; \n&gt; The Modeling chapter discusses modeling both archite=\r\nctures and\n&gt; architectural styles.  It says nothing about modeling specific=\r\n to\n&gt; REST.  Roy&#39;s thesis uses modeling to illustrate the REST architectura=\r\nl\n&gt; style.  So the first challenge in teaching REST is to teach how to\n&gt; mo=\r\ndel the components, connectors, resources and interfaces for a\n&gt; proposed s=\r\nystem.  REST constrains the interaction between connectors,\n&gt; and these con=\r\nstraints must be part of the model.\n&gt; \n&gt; The Visualization chapter explains=\r\n the separation of modeling and\n&gt; visualization, but says nothing about vis=\r\nualization within the context\n&gt; of REST.  The second challenge in teaching =\r\nREST using a software-\n&gt; architecture-centric approach, is to use the model=\r\n as a basis for\n&gt; visualizing a proposed system in terms of the Process, Co=\r\nnnector and\n&gt; Data views for REST as described in Roy&#39;s thesis.\n&gt; \n&gt; The An=\r\nalysis chapter also has nothing REST-specific.  It&#39;s fairly self-\n&gt; explana=\r\ntory, though.  Modeling, Visualization and Analysis are not a\n&gt; serial appr=\r\noach, but an iterative process.  This is the stage where, if\n&gt; the Model ca=\r\nlls for the Atom media type, despite the lack of URIs at\n&gt; this point, the =\r\ndocuments may be written and validated to flesh out the\n&gt; data model for an=\r\nalysis.  How many hardware resources does the model\n&gt; require?  Does the mo=\r\ndel need to be adjusted up/down?  The third\n&gt; challenge in teaching REST is=\r\n, does the model fit the system&#39;s goals?\n&gt; \n&gt; Finally, we get to Implementa=\r\ntion, another chapter with nary a peep\n&gt; about REST.  (I say finally, becau=\r\nse the Deployment chapter covers\n&gt; topics that, frankly, anyone pursuing RE=\r\nST probably has hands-on\n&gt; experience with, so I don&#39;t see it as a teaching=\r\n challenge.)  Yes, this\n&gt; is where a URI allocation scheme is finally devis=\r\ned for the modeled,\n&gt; visualized and analyzed resources, and methods implem=\r\nented so we can\n&gt; pass data over the wire.  It is iterative with the previo=\r\nus methods --\n&gt; selecting off-the-shelf parts may require architectural adj=\r\nustment due\n&gt; to different design assumptions being made in a standard libr=\r\nary.\n&gt; \n&gt; The textbook defines Implementation as the problem of maintaining=\r\n a\n&gt; mapping between the developed system and its architectural model, and\n=\r\n&gt; focuses on frameworks as the solution.  It also says, &quot;To imbue\n&gt; [desire=\r\nd properties] in the target system, the implementation _must_ be\n&gt; derived =\r\nfrom its architecture.&quot;  This is the fourth, and most important,\n&gt; challeng=\r\ne in teaching REST.  Is the reason so many systems claim to be\n&gt; RESTful, b=\r\nut aren&#39;t, because 99% of developers simply don&#39;t *know* how\n&gt; to derive an=\r\n implementation from an architectural style, because they&#39;ve\n&gt; never been t=\r\naught?  I don&#39;t think they need to be taught, only given the\n&gt; tools to und=\r\nerstand how a RESTful implementation is derived -- that\n&gt; these tools are d=\r\nerived from the tenets of software architecture may\n&gt; remain hidden behind =\r\na generic interface (so to speak).\n&gt; \n&gt; My suggestion is to dredge up and d=\r\nust off ye olde shopping-cart\n&gt; example.  Why do we insist on presenting it=\r\n by defining it as what\n&gt; methods to apply to what resources of interest to=\r\n obtain what response\n&gt; code and data, beginning by defining a URI allocati=\r\non scheme, when we\n&gt; know that URI allocation schemes have (almost) nothing=\r\n to do with REST,\n&gt; and Roy has told us that we should be discussing our re=\r\nsources in terms\n&gt; of media types and link relations instead?  At some poin=\r\nt, it should be\n&gt; presented in terms of Modeling, Visualizing, Analyzing, a=\r\nnd\n&gt; Implementing in a REST-specific fashion.  I think this may address som=\r\ne\n&gt; of the criticism of REST lacking some sort of formal guidelines.\n&gt; \n&gt; I=\r\nn brief:  Define resources in terms of standard media types and link\n&gt; rela=\r\ntions, saving URI allocation and method selection for the\n&gt; implementation =\r\nphase.\n&gt; \n&gt; -Eric\n&gt; \n&gt; \n&gt; ------------------------------------\n&gt; \n&gt; Yahoo! =\r\nGroups Links\n&gt; \n&gt; \n&gt; \n&gt; \n&gt; \n&gt; \n&gt; \n\n\n"}}
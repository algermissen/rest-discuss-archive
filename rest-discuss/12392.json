{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":237604743,"authorName":"Bill de hOra","from":"Bill de hOra &lt;bill@...&gt;","profile":"bdehora","replyTo":"SENDER","senderId":"wBNAp41JeZMF8pjpr6Hc8dVOWSE-2ghlQAWDkv2Y-RD4thoaVIsAzMGU4-Cj-vC09mSqkUQe8SwIOJxi9Lvu55MdMk7G","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Re: Why HATEOAS?","postDate":"1239055848","msgId":12392,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQ5REE3REU4LjIwMTAyMDBAZGVob3JhLm5ldD4=","inReplyToHeader":"PGdyZDZ2Mis4dWVoQGVHcm91cHMuY29tPg==","referencesHeader":"PGdyZDZ2Mis4dWVoQGVHcm91cHMuY29tPg=="},"prevInTopic":12387,"nextInTopic":12396,"prevInTime":12391,"nextInTime":12393,"topicId":12357,"numMessagesInTopic":27,"msgSnippet":"... So for me, some partical things come to mind. - the methods give you high level support for potential operations/scaling pain. Just knowing a system could","rawEmail":"Return-Path: &lt;bill@...&gt;\r\nX-Sender: bill@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 2534 invoked from network); 6 Apr 2009 22:11:04 -0000\r\nX-Received: from unknown (98.137.34.45)\n  by m7.grp.re1.yahoo.com with QMQP; 6 Apr 2009 22:11:04 -0000\r\nX-Received: from unknown (HELO chilco.textdrive.com) (207.7.108.242)\n  by mta2.grp.sp2.yahoo.com with SMTP; 6 Apr 2009 22:11:00 -0000\r\nX-Received: from [192.168.3.166] (83-70-235-189-dynamic.b-ras1.prp.dublin.eircom.net [83.70.235.189])\n\tby chilco.textdrive.com (Postfix) with ESMTP id 298B1DD10F\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Mon,  6 Apr 2009 22:10:50 +0000 (UTC)\r\nMessage-ID: &lt;49DA7DE8.2010200@...&gt;\r\nDate: Mon, 06 Apr 2009 23:10:48 +0100\r\nUser-Agent: Thunderbird 2.0.0.21 (X11/20090318)\r\nMIME-Version: 1.0\r\nTo: rest-discuss@yahoogroups.com\r\nReferences: &lt;grd6v2+8ueh@...&gt;\r\nIn-Reply-To: &lt;grd6v2+8ueh@...&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Bill de hOra &lt;bill@...&gt;\r\nSubject: Re: [rest-discuss] Re: Why HATEOAS?\r\nX-Yahoo-Group-Post: member; u=237604743; y=qSFHFESGWfmNyllgwv12NP_m-I_ia4V25MYQYsfR7iJ1GQ\r\nX-Yahoo-Profile: bdehora\r\n\r\n\n\nwahbedahbe wrote:\n&gt; \n&gt; \n&gt; Ok, but I&#39;m more wondering about the specific gains folks are seeing in \n&gt; practice in the systems they are building. The reason I&#39;m curious is \n&gt; because there are a lot of frameworks like Rails which claim \n&gt; &quot;RESTfulness&quot; but seem to just deliver REST - HATEOAS (well at least on \n&gt; the &quot;machine to machine&quot; ActiveResource side of things when I last \n&gt; looked at it). Lots of folks seem to think this is really great and is \n&gt; light years better than RPC but I don&#39;t really understand why.\n&gt; \n&gt; Also, things like the idempotency of PUT and DELETE have never yielded \n&gt; any practical benefits to me (though I get how they can in _theory_) so \n&gt; I&#39;m also really curious to know how people are making practical use of \n&gt; them in the systems they are building.\n&gt; \n&gt; I have personally seen huge gains with &quot;full&quot; REST in systems I&#39;ve built \n&gt; -- chiefly in decoupling clients and servers (a lot of the stuff Craig \n&gt; McClanahan brings up in this thread) -- and so I really &quot;get&quot; that. REST \n&gt; - HATEOAS -- not so much.\n\nSo for me, some partical things come to mind.\n\n- the methods give you high level support for potential \noperations/scaling pain. Just knowing a system could internally be \npartitioned at the http level into HEAD/OPTIONS/GET and PUT/POST/DELETE \nmakes me sleep better at night. Much easier to do it at the load \nbalancers than in application code imvho.\n\n- PUT and DELETE are useful to have as I don&#39;t have to disambiguate \nPOST. I believe that when smart developers are encouraged to use the \nfull method set from the get go, they will naturally use POST well and \nfor dealing with the inevitable corner cases (also forms posting tends \nto get used well, which is a big thing for me). So I think having a \nmethod complement helps you fall into the pit of success.\n\n- URL construction (or the lack of). I was reviewing an API today and \nrealized it could be geolocated by allowing a server to supply URLs to \ndifferent domains/administrations. If the clients were putting the URLs \ntogether, that would not work. It also means basic stuff like media \nserving/cdns will work when you need them to.\n\n- Well known formats. Or at least well specified ones. You get so much \nfutureproofing against versioning by making the media type explicit. I&#39;m \nnot a huge conneg fan (think it doesn&#39;t get used well), but the Accept \nheader is a huge win if you&#39;re building something that has to evolve and \nsupport already deployed clients for years to come.\n\n- Caching, but this is well known.\n\n- Organisation of application v resource state. Giving non-domain codey \ntype things URLs is big win. Jim Webber does a good job here explaining \nthe practical benefits: \nhttp://www.infoq.com/articles/webber-rest-workflow. I don&#39;t know whether \nyou can express the full BPM/BPEL/piCalculus thing via REST&#39;s notions of \nstate, but I do suspect in many cases you don&#39;t need that level of \nexpressive power.\n\n\nUltimately what I get via REST is the notion of applying constraints to \nobtain systemic properties. The REST community have done a good job \narticulating what happens when you add and remove constraints. It&#39;s \nobjective architectural/systems analysis, not the flimflam I see coming \nfrom EAI/SOA which tend to describe /desirable outcomes/ and not /how to \nobtain them/. You don&#39;t have to like REST as a style (I personally don&#39;t \nhave much time for the current hype), but you can at least analyse the \ndesign.\n\n\n&gt; On another note: I think HATEOAS is much more than &quot;links in content&quot; \n&gt; unless your client is something like a spider. \n\nGranted, but &#39;lick&#39; is a better acronym (links in content are king) than \n&#39;hateoas&#39; ;)\n\n\n&gt; What&#39;s your take on the \n&gt; discussion here:\n&gt; http://www.intertwingly.net/blog/2008/03/23/Connecting \n&gt; &lt;http://www.intertwingly.net/blog/2008/03/23/Connecting&gt;\n\nI sympathise with Sam&#39;s view on things, but still find &quot;connectedness&quot; a \nbit abstract. So I distill it even further  by asking/cajoling people to \nput links in content, to increase the likelihood that a format will be \nuseful across as many clients as possible.\n\nBill\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"6eD0KRkhPDa0tzRtqueZ_iZYCUaPalSYklYgGd_ySr6o5hGlcf5bxOe1bHC3WkFlOCIfuGrIUj5bp-mr8T134FCq5gq4MNgiGh8K9zBGTQ","spamInfo":{"isSpam":false,"reason":"6"},"subject":"Re: [rest-discuss] RESTful?","postDate":"1297148620","msgId":17332,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMTEwMjA4MDAwMzQwLjA1ZjZkOWUwLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","inReplyToHeader":"PDRENEM4RDZELjQwODAxMDNAZWxia2xhbmcubmV0Pg==","referencesHeader":"PDA1RTc3MDhFMDAwMUM5NDlBMjVGMTY2NjFDQzJGNkY1MDM5NEEwOTRFOEBFU0VTU0NNUzAzNTYuZWVtZWEuZXJpY3Nzb24uc2U+CTw0RDRCRjQwMS4xMDIwNzA5QHdlYnIzLm9yZz4JPDVBQUYxMTA4LTYyQzYtNEU4Qy04QzUyLTE3RUIyODlEMTU5QkBlY3Muc290b24uYWMudWs+CTxFTUVXM3w4ZTk1YzUxNDNjNDNlYjEyM2YyODAyZDM2MTBiYmQxM24xM0U4WDAyaGd8ZWNzLnNvdG9uLmFjLnVrfDVBQUYxMTA4LTYyQzYtNEU4Qy04QzUyLTE3RUIyODlEMTU5QkBlY3Muc290b24uYWMudWs+CTw0RDRDMENBMy4xMDQwMjA4QHdlYnIzLm9yZz4JPDIwMTEwMjA0MTA0ODA2LjUwMzc0MTBmLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPDIwMTEwMjA0MTEwMzA3LjQ4N2U5MjcwLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPDIwMTEwMjA0MTE1NzA4LmMyMDU3ZjZjLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPDRENEM1MDEyLjMwODA1MDNAd2VicjMub3JnPgk8NEQ0QzZEN0QuNTA2MDcwNUBlbGJrbGFuZy5uZXQ+CTwyMDExMDIwNDE1NDg0MC44Njc4ODlmMy5lcmljQGJpc29uc3lzdGVtcy5uZXQ+CTw0RDRDOEQ2RC40MDgwMTAzQGVsYmtsYW5nLm5ldD4="},"prevInTopic":17321,"nextInTopic":17334,"prevInTime":17331,"nextInTime":17333,"topicId":17302,"numMessagesInTopic":17,"msgSnippet":"... Of course it is.  Roy s thesis is a doctoral dissertation, Ph.D. doesn t stand for pile it higher n deeper for nothin .  Science can be described in a","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 21035 invoked from network); 8 Feb 2011 07:04:06 -0000\r\nX-Received: from unknown (98.137.34.46)\n  by m6.grp.sp2.yahoo.com with QMQP; 8 Feb 2011 07:04:06 -0000\r\nX-Received: from unknown (HELO mxout-08.mxes.net) (216.86.168.183)\n  by mta3.grp.sp2.yahoo.com with SMTP; 8 Feb 2011 07:04:06 -0000\r\nX-Received: from bigbison (unknown [65.117.211.162])\n\t(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))\n\t(No client certificate requested)\n\tby smtp.mxes.net (Postfix) with ESMTPSA id 3C16D509B3;\n\tTue,  8 Feb 2011 02:04:04 -0500 (EST)\r\nDate: Tue, 8 Feb 2011 00:03:40 -0700\r\nTo: Bob Ferris &lt;zazi@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nMessage-Id: &lt;20110208000340.05f6d9e0.eric@...&gt;\r\nIn-Reply-To: &lt;4D4C8D6D.4080103@...&gt;\r\nReferences: &lt;05E7708E0001C949A25F16661CC2F6F50394A094E8@...&gt;\n\t&lt;4D4BF401.1020709@...&gt;\n\t&lt;5AAF1108-62C6-4E8C-8C52-17EB289D159B@...&gt;\n\t&lt;EMEW3|8e95c5143c43eb123f2802d3610bbd13n13E8X02hg|ecs.soton.ac.uk|5AAF1108-62C6-4E8C-8C52-17EB289D159B@...&gt;\n\t&lt;4D4C0CA3.1040208@...&gt;\n\t&lt;20110204104806.5037410f.eric@...&gt;\n\t&lt;20110204110307.487e9270.eric@...&gt;\n\t&lt;20110204115708.c2057f6c.eric@...&gt;\n\t&lt;4D4C5012.3080503@...&gt;\n\t&lt;4D4C6D7D.5060705@...&gt;\n\t&lt;20110204154840.867889f3.eric@...&gt;\n\t&lt;4D4C8D6D.4080103@...&gt;\r\nOrganization: Bison Systems Corporation\r\nX-Mailer: Sylpheed 3.0.3 (GTK+ 2.10.14; i686-pc-mingw32)\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=US-ASCII\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:6:0:0:0\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nSubject: Re: [rest-discuss] RESTful?\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\nBob Ferris wrote:\n&gt;\n&gt; I think we can lead here this discussion even more into philosophy.\n&gt; Although, I guess, this is not really necessary here and not intended\n&gt; by the aim of this mailing list.\n&gt;\n\nOf course it is.  Roy&#39;s thesis is a doctoral dissertation, Ph.D.\ndoesn&#39;t stand for &quot;pile it higher &#39;n&#39; deeper&quot; for nothin&#39;.  Science can\nbe described in a nutshell, as conceptualizing working models of\nobjective reality through the use of precise terminology.  Such models\nare always subject to falsification, revision, and updating -- see\nARRESTED and CREST.  I haven&#39;t seen any convincing falsification of\nREST&#39;s constraints, though.\n\nIOW, REST is at heart, a philosophical model of a real-world system.\nThe second paragraph of section 2.3.1 is one example of the fundamental\nfacts constraining distributed hypertext systems.  At this point, I\nbelieve the Internet has become a force of nature.  Anything you&#39;re\ngoing to try to do with it, has to abide by certain natural laws,\ngoverning the transfer of data or agents from point A to point B.\n\nREST is the best explanation for how the staggering, exponential growth\nof the Web was even *possible* when, in the early days, its bandwidth\nand IP-address requirements threatened to consume the Internet itself.\n2011 marks the year when we&#39;ve passed the &quot;peak oil&quot; moment in IP 4.\nEnough folks got enough of REST right, that the Web wasn&#39;t a victim of\nits own success -- the exponential growth continues, and is finally\nresulting in the implementation of IP 6.\n\nWow.  I mean, just, wow.  Hats off to Roy et al on that one.  REST\nappeals to me, because it explains to me that this didn&#39;t happen by\nchance but rather, by design.  Much of REST is up to the protocol, not\nthe API developer, to be gotten right or not.  Obviously, somebody got\nsomething right.  I&#39;m not some fanboy putting this on par with E=mc2,\nbut they&#39;re both philosophical models, but unlike physics you can&#39;t\ngenerally express computer science concepts in mathematical terms.\n\n&gt;\n&gt; schrieb Eric J. Bowman:\n&gt; &gt;\n&gt; &gt; I&#39;ll probably write a more detailed response over the weekend.  In\n&gt; &gt; short, REST is an idealized model of distributed hypertext system\n&gt; &gt; behavior.\n&gt; \n&gt; Yes, I&#39;m absolutely aware of it. However, can we reach that &quot;ideal&quot; \n&gt; fully, or do we only try approximate it all the time?\n&gt;\n\nREST is a tool, not a result.  I&#39;m not even *trying* to &quot;implement REST&quot;\nin any system I design.  I&#39;m trying to use the principles in Roy&#39;s\nthesis to derive the best architecture for a system&#39;s needs.  My key\ntakeaway from REST and AWWW architecture from 50,000 feet: the Web is,\nby nature, a distributed hypertext system. So the first thing I do when\napproaching any problem space, is to conceptualize the solution within\nthat idiom.\n\nMaslov&#39;s hammer is what happens when one assumes that REST is the one\ntrue solution to any problem whose solution involves HTTP.  If the\nproblem space I&#39;m analyzing doesn&#39;t make sense within the distributed\nhypertext solution idiom, then I&#39;m not really interested in working on\nthat project, as that is not where my expertise lies.  So I would advise\nthat REST is *not* the proper solution, in such cases.\n\nIf we are dealing with anything which *can* be conceptualized as a\ndistributed hypertext system, then I&#39;m interested in how Roy&#39;s thesis\napplies to its design, particularly its implementation on the Web via\nHTTP.  But it also applies to designing protocols like HTTP, which is\nwhy it&#39;s hard to answer the example question...\n\nMalamutes have distinctive facial markings, either the &quot;mask&quot; or the\n&quot;cap&quot;, both of which are perfectly OK in (and required by) the breed\nstandard.  But no individual Malamute could possibly exhibit both, and\nstill be called a Malamute, so pointing to one implementation or the\nother can be even more confusing than explaining how to use REST as a\n(non-golden-hammer) tool.  What points of breed the Malamute breeder is\nafter, is irrelevant to a discussion about the line-breeding of dogs.\n\nIOW, REST is properly a philosophical consideration, particularly since\nany example you can point to on the Web, is based on an implementation\nof REST known *as* the Web.  My posts actually are example-driven, and\nthe work I&#39;ve posted does tend to have pragmatic value because I&#39;ve\nalways felt REST explains conclusions I&#39;d already come to on my own, by\ndeveloping websites for several years before REST was even written.\n\nBut, I always try to qualify that I&#39;m talking about pragmatic\nconsiderations of Web development more than REST purity.  I discuss the\nREST mismatches in my system, why they&#39;re there, what if anything I\nintend to do about them, and how I prioritize those over time.  How can\nI do a cost-benefit analysis over the lifetime of a project, if I have\nno idealized model against which the system may be compared?\n\n&gt;\n&gt; How can we then state that when we would reach this &quot;ideal&quot;, that\n&gt; exactly this &quot;ideal&quot; can emphasize the propagated features? Don&#39;t we\n&gt; need an exemplification?\n&gt;\n\nActually, if one goes back to my debut de-lurk on this list, one will\nfind quite an entertaining brawl between myself and Roy on this very\nissue.  I took Roy&#39;s counter-example as an insult, before it dawned on\nme that he was serious (if not obscure).  The fact that I&#39;ve come\nfull-circle and am now defending the position I argued against back\nthen, makes me recall this little gem:\n\nhttp://www.youtube.com/watch?v=mlykr-vUtoQ\n(Dennis Miller master-debating himself on Supernews)\n\nOne reason this is so, is that any time I&#39;ve posted an example of my\nwork over the years, it&#39;s been bound to be taken the wrong way by some,\ni.e. &quot;Eric says all Malamutes should have &#39;mask&#39; facial markings.&quot;  No,\nthat&#39;s simply my preference.  My pragmatism, like stating that server-\nside image rotation isn&#39;t a POST, but GET /image.jpg?rot=90&flip=vert\ntouches off reams of controversy where anyone can take an ad-hominem\nshot that this is only &quot;my opinion&quot; when I only mean it as one example\nof a RESTful interaction.\n\nOthers are possible, but not by using POST to query, in this\narchitectural style, so of _course_ it&#39;s my opinion, and REST isn&#39;t\nabout URI design, so of _course_ YMMV, what folks seeking to learn REST\nby example take away are all the wrong things, instead of the design\npatterns the examples illustrate.  Which is why I&#39;ve always been\nskeptical that REST is something only Roy understands, and nobody else\ncan possibly learn well enough to impart to others -- a theme I do tend\nto get back to now and then, made all the more frustrating by the fact\nthat nobody wants to take anyone&#39;s word but Roy&#39;s on even the most\nfundamental truths REST reveals.\n\nMy example of a RESTful weblog, most often leads to the conclusion that\nREST (and Atom) is fine for that purpose, but impractical for anything\n&quot;serious&quot;.  So the example hurts the learning process for anyone\nseeking the instant gratification of understanding REST comprehensively,\nby simply looking at an implementation or two, because they fail to\napply the example outside the context in which it was given.\n\n&gt;\n&gt; &gt;\n&gt; &gt; REST is not a result, it&#39;s a tool, which is why nobody gets an\n&gt; &gt; answer when asked for a link to a RESTful service\n&gt; \n&gt; It&#39;s bad, when one gets no answer. It&#39;s like that I can claim\n&gt; everything and if someone asks why I claim this, then I would answer\n&gt; that I don&#39;t have to answer you that or simple don&#39;t answer at all\n&gt; (no answer is also an answer).\n&gt;\n\nFrom the other side of the fence, it&#39;s bad when efforts like mine to\ntake a proprietary development effort and distill it into examples\nI&#39;m willing to share, get assaulted every which-way under the sun, to\nthe point of being flamed for the broken links.  Broken links are very\nmuch a part of the style, however.\n\nI&#39;m sure the CMS Roy works on at his day job must be RESTful, but it&#39;s\nalso proprietary, which many RESTful systems are because it&#39;s been more\nuseful in controlled settings than on the Web (until only recently).\nCompare the number of developers today who know that methods other than\nGET or POST even exist, with that number from a decade ago.  The model\nisn&#39;t always followed, which hampers adoption of the model, and leads\nto the pervasive belief that also using PUT and DELETE to do CRUD must\nbe what Roy&#39;s on about (i.e. HTTP == REST).\n\n&gt;\n&gt; Maybe hypermedia/hypertext is now an old hat and we have now entered \n&gt; other dimensions of interaction design.\n&gt; \n\nSolid fundamentals.  I don&#39;t like being called religious on the issue,\nbut you could call me a fundamentalist.  I often say that there&#39;s no\nbest architecture, only the architecture that&#39;s best for your system.\nIf you&#39;re modeling a distributed hypertext system, then REST applies,\neven when you&#39;re extending it (again, see ARRESTED and CREST).  E=mc2\nturns out not to have been the penultimate model, according to Hawking,\nbut it certainly allows one to solve equations accurately enough to get\nreal-world work done because it was extended, not falsified.\n\nThe worst mistake any Web developer can make, is to assume that REST\nhas somehow become obsolete.  Particularly because it&#39;s a tool, not a\nresult.\n\n&gt;\n&gt; So if there are applications of HTTP and URI that do match the \n&gt; application model of a distributed hypermedia system (which is\n&gt; obviously the case), then there might be at least one which fulfils\n&gt; the constraints of REST. Otherwise, how does we know that &quot;REST does\n&gt; capture all of those aspects of a distributed hypermedia system that\n&gt; are considered central to the behavioral and performance requirements\n&gt; of the Web&quot;.\n&gt; \n\nI think the whole point of ARRESTED and CREST is that REST doesn&#39;t\ncapture certain aspects of what folks want to do with the Web, which is\nunsurprising.  Assuming that REST needs to be extended to solve any\nparticular problem, represents a fundamental misunderstanding of the\nnature of REST as a tool.\n\nKnowing where an implementation deviates from the ideal model, and what\nthe consequences are, is the knowledge a disciplined approach to REST\ngives me.  I&#39;d be developing blindly without it.\n\n&gt;\n&gt; Anyway, I tend now to be a bit more sceptical about the\n&gt; implementation of the whole set of architectural constraints of REST.\n&gt; \n\nThat&#39;s because you&#39;re thinking about REST in terms of implementing a\nset of architectural constraints, i.e. as a result not a tool.  Roy&#39;s\ndissertation, in Chapter 2, lays out the desirable properties of a\ndistributed hypertext system.  It then goes on to explain how each of\nthose properties is manifested in various architectural styles.  REST\nitself, explains what constraints are needed from those other styles,\nto bring about the desired properties for distributed hypertext systems.\n\nSo a disciplined approach to REST involves listing those desirable\nproperties which are relevant to your system, and determining which are\nof immediate concern and which are not.  One may then apply those\nconstraints, and only those constraints, which are consistent with\nthose goals -- or add any other constraints whose goals aren&#39;t covered\nby REST (see ARRESTED, CREST).  And ignore those constraints which are\nnot relevant to the situation, but hopefully leaving an opening to\nimplement them should the situation change.\n\nI&#39;m all about using REST to inform decision-making, not dictate it,\nwhich is what I mean when I say it&#39;s a tool not a result.\n\n\n&gt; \n&gt; Which service (or in general application) is 100% RESTful?\n&gt;\n\nAs long as the realized architecture is appropriate for the system,\nwhat does it matter?  The problem with example-seekers, is they&#39;re\nafter examples of 100% RESTful solutions to their specific problems,\nwhich may not exist; and they don&#39;t accept a link like this:\n\nhttp://www.iana.org/cgi-bin/mediatypes.pl\n\nBecause it doesn&#39;t fit with their preconceptions of REST, or illustrate\nwhat they&#39;re trying to do.  But that doesn&#39;t change the fact that\nthere&#39;s no constraint violation there, aside from those inherent in the\nHTTP protocol -- 100% RESTful job by the API developer.\n\n&gt;\n&gt; (I tried all the time hard to find one; even in the &quot;non-RESTful&quot;\n&gt; blog from Roy T. Fielding, this question was asked several times in\n&gt; the comments; however, without a response).\n&gt;\n\nWhy should Roy&#39;s blog be fully RESTful?  It gets the job done.  But,\nWordPress makes a fine example of the problems REST is meant to solve.\nRoy&#39;s just publishing a single weblog, wordpress.com attempts to host\nmillions of weblogs on an architecture which doesn&#39;t scale to that need.\nThe barely-two-nines uptime of wordpress.com in 2010 screams\narchitectural problems -- none of which surprise me, because they&#39;re\npredicted by REST.\n\nThe reason my weblog demo exists, but my weblog doesn&#39;t, is that I&#39;m\nnot trying to simply publish a weblog -- I&#39;m developing a RESTful\nblogging system which *does* scale to host millions of weblogs, far\nmore efficiently than does WordPress MU.  When that&#39;s done, I&#39;ll have a\nweblog; if that weren&#39;t my goal, I&#39;d just run WP and be done with it,\ntoo.  Pragmatism is the rule, but it isn&#39;t pragmatic to attempt scaling\nWordPress into a hosting platform.\n\n&gt;\n&gt; Do we really need the &quot;hypermedia as the engine of application state&quot; \n&gt; for services?\n&gt;\n\nNo.  You need to apply the hypertext constraint to induce in your system\nthe desirable properties of scalability, evolvability, and visibility.\nIf these properties aren&#39;t important to the problem space, then applying\nsaid constraint would only be done for brownie points -- which is using\nREST as a result, not a tool.  I&#39;m more impressed with architectures\nwhich are appropriate to the system being designed, than I am with\nideological purity.\n\n&gt;\n&gt; Is it highly responsible for &quot;user-perceived performance&quot; (latency,\n&gt; which should be minimum as possible).\n&gt;\n\nUser-perceived performance depends on the design of the media type.  It\ndoesn&#39;t matter if the transfer hasn&#39;t completed, if it&#39;s already started\nrendering on-screen.  IOW, latency isn&#39;t measured by file-transfer time,\nbut by the time it takes to begin rendering.  Consider the pattern for\nHTML tables:\n\n&lt;table&gt;\n &lt;thead&gt;\n &lt;tfoot&gt;\n &lt;tbody&gt;\n&lt;/table&gt;\n\nIf &lt;tfoot&gt; came after &lt;tbody&gt;, then the entire &lt;tbody&gt; would need to\nfinish transferring before &lt;tfoot&gt; could be rendered on-screen.  This\nis exactly why &lt;tfoot&gt; comes before &lt;tbody&gt; -- to allow the table to be\nrendered before all its rows are transferred.  In non-browser terms,\nthe data type needs to be stream-processable.  Which is another gripe I\nhave with custom data types -- progressive rendering never seems to be\ntaken into account.\n\nBut, that doesn&#39;t have to do with the hypertext constraint, which can\nbe met just as easily with a data type that isn&#39;t capable of progressive\nrendering.\n\n&gt;\n&gt; Is &quot;hypermedia as the engine of application state&quot; only a feature for\n&gt; web-browser-like applications?\n&gt;\n\nNo, a call-control system using CCXML and VoiceXML has nothing to do\nwith browsers.  If such a system were RESTfully designed, then its\nbehavior would mimic that of a well-designed Web application, as Roy\nexplains in the fourth paragraph of Chapter 6.1.  This is the problem\nof examples -- if all linkable examples are Web applications, then the\nconclusion is that REST must only be for Web applications.  The proper\ntakeaway is that a RESTful call-control system and a RESTful Web API\nwill exhibit the same behavior, because they use the same pattern of\ndistributing a uniform connector interface as hypertext.\n\n&gt;\n&gt; Is the set of REST constraints as a whole maybe overrated?\n&gt;\n\nYes, because the forest gets missed for the trees.  To dust off my\nGrateful Dead analogy, there were some shows where Jerry Garcia&#39;s\npresence was merely physical -- all the constraints were there, but the\nresults crossed the line between music and noise, because there was no\nharmony between them.  Enlightenment lies in the interplay between the\nconstraints.  You can&#39;t have caching without layering; but even with\ncaching and layering, if your resources are improperly identified there\nwill be a detrimental impact on caching overall, so the system won&#39;t\nexhibit the desired characteristics even though each constraint is\nimplemented.\n\n&gt;\n&gt; All the so-called &quot;RESTful APIs&quot; live mainly without the &quot;hypermedia\n&gt; as the engine of application state&quot; and can often scale quite well by \n&gt; delivering a &quot;user-perceived performance&quot;.\n&gt;\n\nChapter 2 lists far more desirable characteristics, than scalability\nalone.  A highly scalable system that can&#39;t adapt to circumstances\nwhich change over time, isn&#39;t of much value.  Nobody has ever claimed\nthat tightly-coupled systems don&#39;t work, just that they aren&#39;t very\nevolvable, maintainable, visible, portable etc.\n\n&gt;\n&gt; Isn&#39;t it often even more the design and utilization of the\n&gt; server-side hardware and the Internet connection that is responsible\n&gt; for the scalability?\n&gt;\n\nNo.  Take another look at the definition of scalability -- the ability\nfor anyone on the entire planet to view HTML, is &quot;Internet scale&quot;.  It\ndoesn&#39;t apply to custom media types, which are understood by so few\nclients that the problems of &quot;Internet scale&quot; never manifest themselves\nin terms of resource utilization (REST solves the &quot;slashdotting&quot;\nproblem, but that problem only occurs when publishing ubiquitous media\ntypes like HTML in the first place).\n\nFrom Chapter 6.5.1:  &quot;[P]erformance is only bounded by the protocol\ndesign and not by any particular implementation of that design.&quot;  My\nPHP-driven demo has the latency of a bowel movement, which matters not\none whit on cache hits out on the network -- the style compensates for\nsuch implementation deficiencies, allowing my implementation to scale\nfar beyond what the server is capable of, for example by caching.  I\ncan always replace the server code, without changing the API, to\nimplement the protocol more efficiently within the CPU and bandwidth\nlimits already established.\n\nTo me, high performance means that resource utilization rises in a sub-\nlinear fashion as more users are introduced to the system.  Others call\nthis scalability, but I go by the thesis when discussing REST.  Anyway,\nit&#39;s the design of the protocol and the API which constrains server-side\nresource utilization.  Look at how many concurrent WebSockets requests\na given server can handle, vs. how many concurrent HTTP requests that\nsame server can handle, over the same pipe.  That order-of-magnitude\ndifference on the same hardware/connection, indicates that performance\nisn&#39;t a function of hardware or Internet connectivity, so much as\narchitecture.\n\n&gt;\n&gt; So, if I create an application that is fully REST compatible, does\n&gt; this include a &quot;guarantee&quot; for emphasizing the above stated features?\n&gt; \n\nREST guarantees that &quot;optimizing behavior within the model will result\nin optimum behavior within the deployed Web architecture&quot;.  A model is\nrequired, because there are just too many variables in the deployed\ninfrastructure for any meaningful testing protocol to account for.\n\n&gt;\n&gt; I really like true-REST. However, the question is still: do we really \n&gt; need it?\n&gt;\n\nAsk wordpress.com how well non-RESTful architecture&#39;s been working out\nfor them.  Or Facebook, or anything else which cracks under the strain\nof Internet scale.  Yeah, Facebook sure has lots of users, but would\nanybody pay money for a service that slows down and breaks that\nfrequently?  It isn&#39;t the number of users that proves scalability\n(using the common-vernacular definition), it&#39;s proven by decreasing\nresources per user, as more users are added.  REST is geared towards\njust this purpose.\n\n&gt;\n&gt; I think also Roy T. Fielding maybe stopped bothering meanwhile about\n&gt; this, or?\n&gt;\n\nRoy, and others, have decreased their participation on this list as\ntheir participation in HTTPbis has increased; in Roy&#39;s case, there&#39;s\nbeen a noticeable drop in all participation since his son was born.  I\ndon&#39;t interpret this as caring less about the subject -- also, looking\nback a few years, the quality of advice being given by others has gone\nup to the point where corrections from Roy have become less necessary.\n\n-Eric\n\n"}}
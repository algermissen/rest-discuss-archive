{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":128506202,"authorName":"Dave Kuhlman","from":"Dave Kuhlman &lt;dkuhlman@...&gt;","profile":"dkuhlman1001","replyTo":"SENDER","senderId":"5mh-WSgB6dD4hU-m0P6Rud9ddLJgsvvFoQTIUqfr6hjTP-WUEGqZWG7Plc5eMHw_gFxji0mLZB6xLFp8b1IolkHG7a4jjPX-eJuag6v4","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Generating client user interfaces for REST","postDate":"1045856510","msgId":3382,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMDMwMjIxMTE0MTUwLkE4NTM0N0BjdXR0ZXIucmV4eC5jb20+"},"prevInTopic":0,"nextInTopic":0,"prevInTime":3381,"nextInTime":3383,"topicId":3382,"numMessagesInTopic":1,"msgSnippet":"I ve been continuing my exploration of exposing complex processes and business process across the Web in a REST style on top of Quixote. I m now able to","rawEmail":"Return-Path: &lt;dkuhlman@...&gt;\r\nX-Sender: dkuhlman@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_2_3_4); 21 Feb 2003 19:27:37 -0000\r\nReceived: (qmail 9647 invoked from network); 21 Feb 2003 19:27:34 -0000\r\nReceived: from unknown (66.218.66.218)\n  by m4.grp.scd.yahoo.com with QMQP; 21 Feb 2003 19:27:34 -0000\r\nReceived: from unknown (HELO cutter.rexx.com) (207.167.89.8)\n  by mta3.grp.scd.yahoo.com with SMTP; 21 Feb 2003 19:27:34 -0000\r\nReceived: (from dkuhlman@localhost)\n\tby cutter.rexx.com (8.11.1/8.9.3) id h1LJfoR85387\n\tfor rest-discuss@yahoogroups.com; Fri, 21 Feb 2003 11:41:50 -0800 (PST)\n\t(envelope-from dkuhlman)\r\nDate: Fri, 21 Feb 2003 11:41:50 -0800\r\nTo: rest-discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nSubject: Generating client user interfaces for REST\r\nMessage-ID: &lt;20030221114150.A85347@...&gt;\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=us-ascii\r\nContent-Disposition: inline\r\nUser-Agent: Mutt/1.2.4i\r\nFrom: Dave Kuhlman &lt;dkuhlman@...&gt;\r\nX-Yahoo-Group-Post: member; u=128506202\r\nX-Yahoo-Profile: dkuhlman1001\r\n\r\nI&#39;ve been continuing my exploration of exposing complex processes\nand business process across the Web in a REST style on top of\nQuixote.\n\nI&#39;m now able to generate crude graphical user interfaces from an\nFSM (finite state machine) that describes a complex process.\n\nHow it&#39;s done -- A two step process:\n\n  1. From an FSM XML document, generate a .wxg file.  The FSM XML\n    document contains specifications of the input items needed at\n    each state to select the next transition.  A .wxg file is an\n    XML document that contains the definition of a GUI (the\n    graphical user interface) and is loadable by wxGlade. wxGlade\n    is a GUI design tool for wxPython.\n\n  2. Load the .wxg file into wxGlade, do a bit of editing and\n    re-arranging, then select the File/Generate Code menu item to\n    generate Python code.\n\nWhy you might care about this:\n\n  1. Suppose that you have implemented a BP (business process) as a\n    REST-ful FSM server application (using the tools described at\n    http://www.rexx.com/~dkuhlman/workflow_howto.html or in some\n    other way).  Now you want to implement client applications that\n    talk to your server application.  And, further more, suppose\n    that this client application needs to present a user interface\n    to an end user so that the end user can enter information items\n    needed by the FSM (e.g. in order to determine which transition\n    to take).  Obviously, Python is your first choice for\n    implementing these clients and wxPython is a good platform for\n    the GUI.  This GUI generating capability is a good way to\n    substantially reduce the amount of work needed to produce those\n    user interfaces.\n\n  2. Suppose you have implemented a Web service (a REST-ful one, of\n    course). Now you want to encourage others out on the Net\n    somewhere to implement clients for your service.  By giving\n    them help in the implementation of a client user interface, at\n    least that part of the user interface that enables human\n    end-users to enter data, you have made their work easier.\n\nYou can find more information about this capability and how to use\nit at:\n\n    http://www.rexx.com/~dkuhlman/workflow_howto.html\n\nLook for the section &quot;How to Generate a Client GUI&quot;.\n\nThe code that does the work is in fsmappgen.py which is in the\nexample code linked to by this document and can be found at:\n\n    http://www.rexx.com/~dkuhlman/workflow_examples.zip\n\nPlease let me know if you have corrections or suggestiongs for\nimprovements.\n\nAnd, I&#39;m looking for useful ways to apply this technology.  Let me\nknow if you have ideas about that.\n\n  - Dave\n\n-- \nDave Kuhlman\ndkuhlman@...\nhttp://www.rexx.com/~dkuhlman\n\n"}}
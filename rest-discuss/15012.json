{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"5AMRV-RI804qIhmaAOXHGdI8MmksinpiG_LDrV8fMmwPAaFcQDT_8DO7Aq-vjEmdo_GLYj3RZ4xj67tDWgHTpM4-BUeHUl54xC2zd39BVw","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Re: Thoughts about URLs for a REST driven website","postDate":"1267900562","msgId":15012,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMTAwMzA2MTEzNjAyLmU4MmMxNGNhLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","inReplyToHeader":"PGhtbzhzbis3dXFmQGVHcm91cHMuY29tPg==","referencesHeader":"PDIwMTAwMzA0MDQ1MTA3LjgwM2ZlMzMwLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JPGhtbzhzbis3dXFmQGVHcm91cHMuY29tPg=="},"prevInTopic":15011,"nextInTopic":15013,"prevInTime":15011,"nextInTime":15013,"topicId":14978,"numMessagesInTopic":41,"msgSnippet":"... Because that s how I ve coded the resource to behave.  The /date resource on charger has both client and server connectors.  Its client connector is","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 19196 invoked from network); 6 Mar 2010 18:36:13 -0000\r\nX-Received: from unknown (66.196.94.106)\n  by m1.grp.sp2.yahoo.com with QMQP; 6 Mar 2010 18:36:13 -0000\r\nX-Received: from unknown (HELO mxout-08.mxes.net) (216.86.168.183)\n  by mta2.grp.re1.yahoo.com with SMTP; 6 Mar 2010 18:36:13 -0000\r\nX-Received: from bigbison (unknown [65.117.211.162])\n\t(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))\n\t(No client certificate requested)\n\tby smtp.mxes.net (Postfix) with ESMTPSA id 7A48C509DA;\n\tSat,  6 Mar 2010 13:36:05 -0500 (EST)\r\nDate: Sat, 6 Mar 2010 11:36:02 -0700\r\nTo: &quot;Jorn Wildt&quot; &lt;jw@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nMessage-Id: &lt;20100306113602.e82c14ca.eric@...&gt;\r\nIn-Reply-To: &lt;hmo8sn+7uqf@...&gt;\r\nReferences: &lt;20100304045107.803fe330.eric@...&gt;\n\t&lt;hmo8sn+7uqf@...&gt;\r\nOrganization: Bison Systems Corporation\r\nX-Mailer: Sylpheed 3.0.0 (GTK+ 2.10.14; i686-pc-mingw32)\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=US-ASCII\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nSubject: Re: [rest-discuss] Re: Thoughts about URLs for a REST driven\n website\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\n&quot;Jorn Wildt&quot; wrote:\n&gt;\n&gt; Thanks for taking your time to discuss this.\n&gt; \n&gt; I&#39;ll dive right into this statement:\n&gt; \n&gt; &gt; http://charger.bisonsystems.net/date?iso=2010-03-04 simply loads:\n&gt; &gt; http://en.wiski.org/date?iso=2010-03-04 while adding some headers.\n&gt; \n&gt; Now, how does your server know how to transform the incoming\n&gt; http://charger.bisonsystems.net/date?iso=2010-03-04 request to the\n&gt; http://en.wiski.org/date?iso=2010-03-04 location?\n&gt; \n\nBecause that&#39;s how I&#39;ve coded the resource to behave.  The /date\nresource on charger has both client and server connectors.  Its client\nconnector is programmed to proxy responses from a remote server.  It\nwould not matter if this back-end interaction weren&#39;t RESTful, what\nmatters is that the front-end is RESTful from the viewpoint of my end-\nuser application.\n\n&gt;\n&gt; You can only do this by having some knowledge of your backend REST\n&gt; API, namely that the URL template is\n&gt; http://en.wiski.org/date?iso={date}. If you did not have this\n&gt; information, how would you then know what to do with the &quot;2010-03-04&quot;\n&gt; value?\n&gt; \n\nSo?\n\nI&#39;m sincerely trying to help, here.  You&#39;re obviously misunderstanding\nsomething, I&#39;m trying to figure out what, exactly.  I think, perhaps,\nyou&#39;re misinterpreting Roy&#39;s comment, &quot;A REST API should be entered\nwith no prior knowledge beyond the initial URI (bookmark)...&quot;.\n\nThis applies to the client&#39;s interaction with the system.  In my /date\nservice, the &quot;application&quot; in the REST sense is to return metadata\ncorresponding to the given ISO 8601 data string.  In my demo, the client\napplication sends this translation request to charger.bisonsystems.net,\nand the response appears to come from charger.bisonsystems.net.\n\nThe client application has no knowledge of en.wiski.org, nor does it\nneed any.  The interaction between charger.bisonsystems.net and en.\nwiski.org is out-of-scope to the REST application.  The user&#39;s agent\ndoes not &quot;enter&quot; the back-end API, so the mapping between charger and\nen does not constitute prior knowledge of the API.  The API for en.\nwiski.org isn&#39;t part of my system, only the API on charger.\nbisonsystems.net.\n\n&gt; \n&gt; Lets see what should be in the search result. Links! Certainly, but\n&gt; links to what? It cannot return links to the www site since that\n&gt; would imply my REST API knew something about it&#39;s client. So it must\n&gt; return links to REST API resources. This mean we would get the REST\n&gt; API URL http://rest.mysite.com/feeds/peter back.\n&gt; \n\nLinks to the available state transitions.  Your XHTML representations\nlink to XHTML representations.  Your Atom representations link to Atom\nrepresentations.  Each XHTML representation has a link rel=&#39;alternate&#39;\npointing to its equivalent in Atom, and vice-versa.\n\nWhere in REST are you getting the notion that your API can&#39;t know\nanything about the client?  The whole premise of content negotiation is\nthat your API can tailor its response based on client capability.\n\n&gt;\n&gt; Now, what should my www site do with the\n&gt; http://rest.mysite.com/feeds/peter URL in order to generate a browser\n&gt; link to itself that can display the feed?\n&gt;\n\nIf the requesting client is Atom, then the 200 response includes a link\nrel=&#39;alternate&#39; to the equivalent URI on the frontend.  If the\nrequesting client needs XHTML, then 301-redirect to that equivalent URI\non the frontend.\n\n&gt;\n&gt; My www site knows nothing\n&gt; about the URL format, so I has no way to figure out how to select\n&gt; &quot;peter&quot; and present a http://www.mysite.com/blogs/peter URL to the\n&gt; end user.\n&gt;\n\nI can&#39;t conceive of any reason why a frontend would be coded without\nknowledge of the backend it&#39;s proxying.  All we&#39;re talking here is a\nredirect of /blogs/{user} to /feeds/{user} on a different domain, and\nvice-versa depending on media type.  When the media type matches, it&#39;s\nan internal redirect, if not it&#39;s a 301.  Simple!\n\nSetting up URL rewriting is a common practice.  All it is, is mapping\none URI allocation scheme to another.  There is no REST constraint\nenjoining this behavior.\n\n&gt;\n&gt; And here is my point: the only thing the www site can do,\n&gt; is to include the full REST URL in the www URL.\n&gt; \n\nIf your assumptions were correct, then I&#39;d agree.  But, if you&#39;re\narriving at the conclusion that REST is somehow requiring you to do\nthis, then your assumptions must not be correct.  I assure you, there\nis no such constraint in REST.  The ones that are there are hard enough\nto get right, I strongly suggest not imagining others.  ;-)\n\n&gt;\n&gt; You could argue that the REST search should return both the complete\n&gt; resource URL as well as the feed name &quot;peter&quot;.\n&gt;\n\nNo, I would never make such an argument.  It doesn&#39;t matter whether the\nsearch is done against the frontend or the backend, or the results are\nin XHTML or Atom -- the response will contain a link rel=&#39;alternate&#39;\nthat user-agents can follow to the correct variant, if needed.\n\nIf a resource has two variants with unique URLs, just link them together\nusing rel=&#39;alternate&#39; or &#39;source&#39; or &#39;feed&#39;.  There is no need for both\nURLs to be present in a search result in order for the resource to be\n&#39;discovered&#39; and has nothing to do with the hypertext constraint.\n\n&gt;\n&gt; But then, again, the\n&gt; www site would have to know how to transform &quot;peter&quot; into the REST\n&gt; API URL http://rest.mysite.com/feeds/peter.\n&gt; \n\nOf course.  Again, so?  REST is a layered architecture.  A client\ninteracts with your front-end, it cannot &quot;see&quot; farther than that.  Your\nfront-end resource knows how to map that request onto the back-end\nsystem, but this interaction should be opaque to the client.\n\nRequiring the client to know the back-end URI in order to formulate a\nrequest to the front-end results in a coupling which breaks the\nlayered-system constraint.  The back-end URI allocation scheme can&#39;t be\nchanged without re-coding at least the front-end, if not the clients.\n\nWhereas, in a decoupled system, the back-end URI allocation can change\nand the front-end only needs to be reconfigured.  The front-end would\nnot need to be re-coded to instruct clients of the new back-end URI\nscheme (since the clients don&#39;t need to know about it), so clients would\njust continue interacting with the front-end as before.\n\nIn the case of the /date service, everything about it could be changed.\nI could move it to a different domain, or I could change the syntax of\nthe query.  Or both.  In which case, I would just change the mapping on\ncharger to reflect the modifications.\n\nNow, imagine the mess updating the /date backend would cause, if all\nrequests looked something like this:\n\nhttp://charger.bisonsystems.net/date?url=http://en.wiski.org/date?iso=\n\nSee how, by trying to pass the back-end URIs around inside the front-end\nURIs, the system becomes coupled due to the requirement that the client\nmust &quot;see&quot; beyond the server it&#39;s interacting with.  REST is quite\npowerful in that it abstracts away any need for this sort of coupling.\nI promise there&#39;s no RESTly reason for embedding back-end URLs in front-\nend requests.\n\nThe fact that you&#39;ve come up with a solution that&#39;s the opposite of REST\ntells me that there&#39;s a fundamental error in your understanding of REST.\nI don&#39;t mean to condescend or discourage, I&#39;d just like to help isolate\nthat error and see if we can&#39;t get you straightened out.\n\n-Eric\n\n"}}
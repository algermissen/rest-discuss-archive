{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":279478415,"authorName":"Ant√≥nio Mota","from":"=?ISO-8859-1?Q?Ant=F3nio_Mota?= &lt;amsmota@...&gt;","profile":"amsmota","replyTo":"SENDER","senderId":"70TZMj7DFDcDnS-wuPRpa3bjbxjUfoJbKNEcFzFuu68wI3GtjfHjkezC-LQlLsxVOSB7jRASdqlamyLgF7_GI1Pa3BDQrOhaVLo-kyxHCpLr7pXUCW2PQbkw","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] An approach to deleting multiple resources use one \tDELETE","postDate":"1237559141","msgId":12287,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDJmYTU1NDQ3MDkwMzIwMDcyNWgxNzU3MmY0OGg5MGVhN2E4YTBhNTE1MDJjQG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PDIwMDkwMzIwMDczNTE1LmQ1MTQ5YWIxLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","referencesHeader":"PGU3OGJkYmMwMDkwMjI0MDczOHY0ODRkNmU5NGg0NDQ5ZWIwYjY3YTI4ZDJlQG1haWwuZ21haWwuY29tPgkgPDIwMDkwMzE5MDIwNjAzLjI5OTQwYWU2LmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4JIDw1MDM3YjZlNDA5MDMxOTAxMThoMzhiOGYwNGR5NDNlYjE3MThhMjBiMTI4Y0BtYWlsLmdtYWlsLmNvbT4JIDwyMDA5MDMxOTAzMTUzOC41ODllZjdhNi5lcmljQGJpc29uc3lzdGVtcy5uZXQ+CSA8MmZhNTU0NDcwOTAzMTkwNTAzazNmYzFjOGYwdGVjOTUyNjA4MDViY2M0Y2ZAbWFpbC5nbWFpbC5jb20+CSA8MjAwOTAzMjAwMzMxMzYuMTY5OGQ0ZjYuZXJpY0BiaXNvbnN5c3RlbXMubmV0PgkgPEJMVTEwMi1XNUY1NzhENDJCRDU4OUMwQTFBRTFCQjU5NzBAcGh4LmdibD4JIDwyMDA5MDMyMDA1MjgxNi4xZTM0YjJhNi5lcmljQGJpc29uc3lzdGVtcy5uZXQ+CSA8QkxVMTAyLURTNjg3MDc1RjYyM0QyQzY5NEM5MDc4QjU5NzBAcGh4LmdibD4JIDwyMDA5MDMyMDA3MzUxNS5kNTE0OWFiMS5lcmljQGJpc29uc3lzdGVtcy5uZXQ+"},"prevInTopic":12286,"nextInTopic":12288,"prevInTime":12286,"nextInTime":12288,"topicId":12154,"numMessagesInTopic":112,"msgSnippet":"You seems to have a clear understanding of what REST is or should be, so perhaps you had more sources of information than the rest of us. But, since you like","rawEmail":"Return-Path: &lt;amsmota@...&gt;\r\nX-Sender: amsmota@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 29258 invoked from network); 20 Mar 2009 14:25:42 -0000\r\nX-Received: from unknown (69.147.108.201)\n  by m2.grp.sp2.yahoo.com with QMQP; 20 Mar 2009 14:25:42 -0000\r\nX-Received: from unknown (HELO qw-out-1920.google.com) (74.125.92.144)\n  by mta2.grp.re1.yahoo.com with SMTP; 20 Mar 2009 14:25:41 -0000\r\nX-Received: by qw-out-1920.google.com with SMTP id 5so492271qwf.8\n        for &lt;rest-discuss@yahoogroups.com&gt;; Fri, 20 Mar 2009 07:25:41 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.224.89.8 with SMTP id c8mr5605324qam.374.1237559141410; Fri, \n\t20 Mar 2009 07:25:41 -0700 (PDT)\r\nIn-Reply-To: &lt;20090320073515.d5149ab1.eric@...&gt;\r\nReferences: &lt;e78bdbc00902240738v484d6e94h4449eb0b67a28d2e@...&gt;\n\t &lt;20090319020603.29940ae6.eric@...&gt;\n\t &lt;5037b6e40903190118h38b8f04dy43eb1718a20b128c@...&gt;\n\t &lt;20090319031538.589ef7a6.eric@...&gt;\n\t &lt;2fa554470903190503k3fc1c8f0tec95260805bcc4cf@...&gt;\n\t &lt;20090320033136.1698d4f6.eric@...&gt;\n\t &lt;BLU102-W5F578D42BD589C0A1AE1BB5970@...&gt;\n\t &lt;20090320052816.1e34b2a6.eric@...&gt;\n\t &lt;BLU102-DS687075F623D2C694C9078B5970@...&gt;\n\t &lt;20090320073515.d5149ab1.eric@...&gt;\r\nDate: Fri, 20 Mar 2009 14:25:41 +0000\r\nMessage-ID: &lt;2fa554470903200725h17572f48h90ea7a8a0a51502c@...&gt;\r\nTo: rest-discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Type: multipart/alternative; boundary=0015175cb6e20326f404658db177\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: =?ISO-8859-1?Q?Ant=F3nio_Mota?= &lt;amsmota@...&gt;\r\nSubject: Re: [rest-discuss] An approach to deleting multiple resources use one \n\tDELETE\r\nX-Yahoo-Group-Post: member; u=279478415; y=ERF-D8kk339oEGXYP5-jHF9NXOLu629gUiwhqzLJ1fP_mg\r\nX-Yahoo-Profile: amsmota\r\n\r\n\r\n--0015175cb6e20326f404658db177\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: 7bit\r\n\r\nYou seems to have a clear understanding of what REST is or should be, so\nperhaps you had more sources of information than the rest of us. But, since\nyou like so much quotings, where in\n\nIn order to obtain a uniform interface, multiple architectural constraints\n&gt; are needed to guide the behavior of components. REST is defined by four\n&gt; interface constraints:\n\n- identification of resources;\n\n- manipulation of resources through representations;\n\n- self-descriptive messages; and,\n\n- hypermedia as the engine of application state\n&gt;\n\nyou get the idea that this is about GET, DELETE, POST or PUT? Where does ot\ntalk about verbs?\n\nAlso, in your interpretation of the semantics of a REST-style architecture,\ntaken then it&#39;s not all about the web, and so it&#39;s not the same as HTTP,\nwhat&#39;s the role of media-types? For what you said, there&#39;s no use to them.\n\nI can have my server distinguish different operations for the same verb by\nusing different media-types. Is that unrestfull?\n\nThe actual function performed by the POST method is determined by the\nserver. Is that unrestfull also?\n\n\n2009/3/20 Eric J. Bowman &lt;eric@...&gt;\n\n&gt; Sebastien Lambla wrote:\n&gt;\n&gt; &gt;\n&gt; &gt; If I want to delete 3 orders because one credit card has been\n&gt; &gt; rejected, I can either delete them sequentially (and potentially end\n&gt; &gt; up in an inconsistent internal state), or group them together as\n&gt; &gt; another resource (let&#39;s say ordersForCreditCardXxx) and delete that\n&gt; &gt; resource as a unit.\n&gt; &gt;\n&gt;\n&gt; Yes, but having the deletion of a collection trigger the deletion of\n&gt; all its members is a library function.  Not something visible that can\n&gt; be counted on.  Please refer to Roy&#39;s blog post, &quot;REST APIs must be\n&gt; hypertext-driven&quot;...\n&gt;\n&gt; &quot;\n&gt; A REST API should never have &#39;typed&#39; resources that are significant to\n&gt; the client. Specification authors may use resource types for describing\n&gt; server implementation behind the interface, but those types must be\n&gt; irrelevant and invisible to the client.\n&gt; &quot;\n&gt;\n&gt; The key here is &quot;behind the interface&quot;.  A stored procedure happens\n&gt; behind the interface; a batch request is made by the client.\n&gt;\n&gt; If deleting ordersForCreditCardXxx triggers the deletion of other\n&gt; resources which may be individually deleted by calling their own DELETE\n&gt; methods, then you do _not_ have &quot;a consistent set of semantics for all\n&gt; resources&quot;.  You have &quot;typed&quot; resources that are significant to the\n&gt; client, i.e. unlike other resources on the system will behave a certain\n&gt; way.\n&gt;\n&gt; &quot;\n&gt; Failure here implies that clients are assuming a resource structure due\n&gt; to out-of band information, such as a domain-specific standard, which\n&gt; is the data-oriented equivalent to RPC&#39;s functional coupling.\n&gt; &quot;\n&gt;\n&gt; &gt;\n&gt; &gt; The idea that somehow those scenarios are not needed, or that retry\n&gt; &gt; and pray semantics of deleting multiple resources is usable in every\n&gt; &gt; situation is completely alien to me. Those are real-world scenarios\n&gt; &gt; where you are trying to do multiple things as a unit, not to save\n&gt; &gt; network calls or bandwidth, but because they belong logically to the\n&gt; &gt; same operation.\n&gt; &gt;\n&gt;\n&gt; OK, atomicity, I&#39;m not a DB jock so that doesn&#39;t naturally occur to\n&gt; me.  I didn&#39;t mean to imply that those scenarios aren&#39;t valid, just\n&gt; that they aren&#39;t natural candidates for REST.  Unless, of course, we\n&gt; implement Code on Demand for those scenarios so they can still use a\n&gt; uniform interface and be visible to intermediaries.\n&gt;\n&gt; &gt;\n&gt; &gt; Having such a composite resource you can delete on is perfectly\n&gt; &gt; reasonable. Yes the caches won&#39;t see it, but that&#39;s a trade-off you\n&gt; &gt; have to decide for yourself: is the cache consistency more important\n&gt; &gt; than the resulting state of my resource(s).\n&gt; &gt;\n&gt;\n&gt; Yes, perfectly reasonable, just like I mentioned in the thread I\n&gt; started about using an HTML form and a POST handler for this sort of\n&gt; thing.  Just accept that an aspect of your API isn&#39;t REST and move on,\n&gt; it isn&#39;t the end of the world.\n&gt;\n&gt; The individual members of a collection have DELETE methods, and the\n&gt; proper way to delete a resource is to call its DELETE method.\n&gt;\n&gt; If you want the deletion of a collection to also delete every member of\n&gt; the collection, by calling the DELETE method of the collection, you no\n&gt; longer have a uniform interface, because you no longer have a\n&gt; consistent set of semantics for all resources, because some of your\n&gt; resources have DELETE semantics assigned to the DELETE method\n&gt; (members), while other resources have BDELETE semantics assigned to the\n&gt; DELETE method (collections).\n&gt;\n&gt; &gt;\n&gt; &gt; To add insult to injury, intermediaries are not required to actually\n&gt; &gt; stale a representation upon receiving a DELETE. And the very nature\n&gt; &gt; of proxies as they&#39;re used today means that while your proxy may well\n&gt; &gt; delete the representation, mine won&#39;t, putting us exactly where we\n&gt; &gt; were.\n&gt; &gt;\n&gt;\n&gt; No, it doesn&#39;t put us where we were.  Just because part of a standard\n&gt; doesn&#39;t say &#39;MUST&#39; is no reason to throw our hands up in the air and\n&gt; proclaim that it won&#39;t ever work for anybody so why bother at all...\n&gt;\n&gt; Intermediaries SHOULD expire all representations of a resource it sees\n&gt; a DELETE request for.  RFC 2119 explains SHOULD to mean, &quot;the full\n&gt; implications must be understood and carefully weighed before choosing a\n&gt; different course.&quot;  In this case, I&#39;m not sure anyone&#39;s come up with a\n&gt; valid reason not to expire on DELETE, but I still don&#39;t think it merits\n&gt; a &quot;MUST&quot;.\n&gt;\n&gt; By not using DELETE, instead of this mechanism most likely working, it\n&gt; can&#39;t possibly work.  That is not where we were using DELETE.\n&gt;\n&gt; &gt;\n&gt; &gt; At the end of the day, if you value your squid cache beyond the\n&gt; &gt; inherent atomicity of certain operations, you&#39;re quite free to do so.\n&gt; &gt; It&#39;s a tradeoff. But, IMHO, neither approaches are unrestful, by\n&gt; &gt; nature or by definition.\n&gt; &gt;\n&gt;\n&gt; Don&#39;t misstate the argument.  At the end of the day, I value the\n&gt; scalability of the uniform interface beyond the difficulty of either\n&gt; implementing an Xforms interface to allow a user to mark a bunch of\n&gt; URIs for deletion which then DELETEs each one, or implementing Code on\n&gt; Demand for batch deletion if at some point I find atomicity to be\n&gt; important to an application I&#39;m working on.\n&gt;\n&gt; Assigning DELETE semantics to some resources&#39; DELETE method, while\n&gt; assigning BDELETE semantics to other resources&#39; DELETE method within\n&gt; the same application, is the antithesis of a REST API.\n&gt;\n&gt; -Eric\n&gt;\n\r\n--0015175cb6e20326f404658db177\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nYou seems to have a clear understanding of what REST is or should be, so pe=\r\nrhaps you had more sources of information than the rest of us. But, since y=\r\nou like so much quotings, where in &lt;br&gt;&lt;br&gt;&lt;blockquote style=3D&quot;border-left=\r\n: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1e=\r\nx;&quot; class=3D&quot;gmail_quote&quot;&gt;\n&lt;span class=3D&quot;Apple-style-span&quot; style=3D&quot;border=\r\n-collapse: separate; color: rgb(0, 0, 0); font-family: &#39;times new roman=\r\n&#39;; font-size: 16px; font-style: normal; font-variant: normal; font-weig=\r\nht: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-i=\r\nndent: 0px; text-transform: none; white-space: normal; widows: 2; word-spac=\r\ning: 0px;&quot;&gt;In order to obtain a uniform interface, multiple architectural c=\r\nonstraints are needed to guide the behavior of components. REST is defined =\r\nby four interface constraints: &lt;/span&gt;&lt;/blockquote&gt;\n&lt;blockquote style=3D&quot;bo=\r\nrder-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding=\r\n-left: 1ex;&quot; class=3D&quot;gmail_quote&quot;&gt;&lt;span class=3D&quot;Apple-style-span&quot; style=\r\n=3D&quot;border-collapse: separate; color: rgb(0, 0, 0); font-family: &#39;times=\r\n new roman&#39;; font-size: 16px; font-style: normal; font-variant: normal;=\r\n font-weight: normal; letter-spacing: normal; line-height: normal; orphans:=\r\n 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2;=\r\n word-spacing: 0px;&quot;&gt;- identification of resources;&lt;/span&gt;=A0&lt;/blockquote&gt;\n=\r\n&lt;blockquote style=3D&quot;border-left: 1px solid rgb(204, 204, 204); margin: 0pt=\r\n 0pt 0pt 0.8ex; padding-left: 1ex;&quot; class=3D&quot;gmail_quote&quot;&gt;&lt;span class=3D&quot;Ap=\r\nple-style-span&quot; style=3D&quot;border-collapse: separate; color: rgb(0, 0, 0); fo=\r\nnt-family: &#39;times new roman&#39;; font-size: 16px; font-style: normal; =\r\nfont-variant: normal; font-weight: normal; letter-spacing: normal; line-hei=\r\nght: normal; orphans: 2; text-indent: 0px; text-transform: none; white-spac=\r\ne: normal; widows: 2; word-spacing: 0px;&quot;&gt;- manipulation of resources throu=\r\ngh representations; &lt;/span&gt;&lt;/blockquote&gt;\n&lt;blockquote style=3D&quot;border-left: =\r\n1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;=\r\n&quot; class=3D&quot;gmail_quote&quot;&gt;&lt;span class=3D&quot;Apple-style-span&quot; style=3D&quot;border-co=\r\nllapse: separate; color: rgb(0, 0, 0); font-family: &#39;times new roman&#3=\r\n9;; font-size: 16px; font-style: normal; font-variant: normal; font-weight:=\r\n normal; letter-spacing: normal; line-height: normal; orphans: 2; text-inde=\r\nnt: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing=\r\n: 0px;&quot;&gt;- self-descriptive messages; and, &lt;/span&gt;&lt;/blockquote&gt;\n&lt;blockquote =\r\nstyle=3D&quot;border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8=\r\nex; padding-left: 1ex;&quot; class=3D&quot;gmail_quote&quot;&gt;&lt;span class=3D&quot;Apple-style-sp=\r\nan&quot; style=3D&quot;border-collapse: separate; color: rgb(0, 0, 0); font-family: &=\r\n#39;times new roman&#39;; font-size: 16px; font-style: normal; font-variant=\r\n: normal; font-weight: normal; letter-spacing: normal; line-height: normal;=\r\n orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; w=\r\nidows: 2; word-spacing: 0px;&quot;&gt;- hypermedia as the engine of application sta=\r\nte&lt;/span&gt;&lt;br clear=3D&quot;all&quot;&gt;\n&lt;/blockquote&gt;&lt;br&gt;\nyou get the idea that this is=\r\n about GET, DELETE, POST or PUT? Where does ot talk about verbs?&lt;br&gt;&lt;br&gt;Als=\r\no, in your interpretation of the semantics of a REST-style architecture, ta=\r\nken then it&#39;s not all about the web, and so it&#39;s not the same as HT=\r\nTP, what&#39;s the role of media-types? For what you said, there&#39;s no u=\r\nse to them.&lt;br&gt;\n&lt;br&gt;I can have my server distinguish different operations f=\r\nor the same verb by using different media-types. Is that unrestfull?&lt;br&gt;&lt;br=\r\n&gt;The actual function performed by the POST method is determined by the\n   s=\r\nerver. Is that unrestfull also?&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;div class=3D&quot;gmail_quote&quot;&gt;2009/=\r\n3/20 Eric J. Bowman &lt;span dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:eric@bisonsyste=\r\nms.net&quot;&gt;eric@...&lt;/a&gt;&gt;&lt;/span&gt;&lt;br&gt;&lt;blockquote class=3D&quot;gmail_=\r\nquote&quot; style=3D&quot;border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt =\r\n0pt 0.8ex; padding-left: 1ex;&quot;&gt;\n&lt;div class=3D&quot;im&quot;&gt;Sebastien Lambla wrote:&lt;b=\r\nr&gt;\n&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; If I want to delete 3 orders because one credit card =\r\nhas been&lt;br&gt;\n&gt; rejected, I can either delete them sequentially (and pote=\r\nntially end&lt;br&gt;\n&gt; up in an inconsistent internal state), or group them t=\r\nogether as&lt;br&gt;\n&gt; another resource (let&#39;s say ordersForCreditCardXxx)=\r\n and delete that&lt;br&gt;\n&gt; resource as a unit.&lt;br&gt;\n&gt;&lt;br&gt;\n&lt;br&gt;\n&lt;/div&gt;Yes, =\r\nbut having the deletion of a collection trigger the deletion of&lt;br&gt;\nall its=\r\n members is a library function. =A0Not something visible that can&lt;br&gt;\nbe co=\r\nunted on. =A0Please refer to Roy&#39;s blog post, &quot;REST APIs must be&lt;b=\r\nr&gt;\nhypertext-driven&quot;...&lt;br&gt;\n&lt;br&gt;\n&quot;&lt;br&gt;\nA REST API should never ha=\r\nve &#39;typed&#39; resources that are significant to&lt;br&gt;\nthe client. Specif=\r\nication authors may use resource types for describing&lt;br&gt;\nserver implementa=\r\ntion behind the interface, but those types must be&lt;br&gt;\nirrelevant and invis=\r\nible to the client.&lt;br&gt;\n&quot;&lt;br&gt;\n&lt;br&gt;\nThe key here is &quot;behind the in=\r\nterface&quot;. =A0A stored procedure happens&lt;br&gt;\nbehind the interface; a ba=\r\ntch request is made by the client.&lt;br&gt;\n&lt;br&gt;\nIf deleting ordersForCreditCard=\r\nXxx triggers the deletion of other&lt;br&gt;\nresources which may be individually =\r\ndeleted by calling their own DELETE&lt;br&gt;\nmethods, then you do _not_ have &qu=\r\not;a consistent set of semantics for all&lt;br&gt;\nresources&quot;. =A0You have &=\r\nquot;typed&quot; resources that are significant to the&lt;br&gt;\nclient, i.e. unl=\r\nike other resources on the system will behave a certain&lt;br&gt;\nway.&lt;br&gt;\n&lt;br&gt;\n&=\r\nquot;&lt;br&gt;\nFailure here implies that clients are assuming a resource structu=\r\nre due&lt;br&gt;\nto out-of band information, such as a domain-specific standard, =\r\nwhich&lt;br&gt;\nis the data-oriented equivalent to RPC&#39;s functional coupling.=\r\n&lt;br&gt;\n&lt;div class=3D&quot;im&quot;&gt;&quot;&lt;br&gt;\n&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; The idea that somehow =\r\nthose scenarios are not needed, or that retry&lt;br&gt;\n&gt; and pray semantics o=\r\nf deleting multiple resources is usable in every&lt;br&gt;\n&gt; situation is comp=\r\nletely alien to me. Those are real-world scenarios&lt;br&gt;\n&gt; where you are t=\r\nrying to do multiple things as a unit, not to save&lt;br&gt;\n&gt; network calls o=\r\nr bandwidth, but because they belong logically to the&lt;br&gt;\n&gt; same operati=\r\non.&lt;br&gt;\n&gt;&lt;br&gt;\n&lt;br&gt;\n&lt;/div&gt;OK, atomicity, I&#39;m not a DB jock so that do=\r\nesn&#39;t naturally occur to&lt;br&gt;\nme. =A0I didn&#39;t mean to imply that tho=\r\nse scenarios aren&#39;t valid, just&lt;br&gt;\nthat they aren&#39;t natural candid=\r\nates for REST. =A0Unless, of course, we&lt;br&gt;\nimplement Code on Demand for th=\r\nose scenarios so they can still use a&lt;br&gt;\nuniform interface and be visible =\r\nto intermediaries.&lt;br&gt;\n&lt;div class=3D&quot;im&quot;&gt;&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; Having such a c=\r\nomposite resource you can delete on is perfectly&lt;br&gt;\n&gt; reasonable. Yes t=\r\nhe caches won&#39;t see it, but that&#39;s a trade-off you&lt;br&gt;\n&gt; have to=\r\n decide for yourself: is the cache consistency more important&lt;br&gt;\n&gt; than=\r\n the resulting state of my resource(s).&lt;br&gt;\n&gt;&lt;br&gt;\n&lt;br&gt;\n&lt;/div&gt;Yes, perfec=\r\ntly reasonable, just like I mentioned in the thread I&lt;br&gt;\nstarted about usi=\r\nng an HTML form and a POST handler for this sort of&lt;br&gt;\nthing. =A0Just acce=\r\npt that an aspect of your API isn&#39;t REST and move on,&lt;br&gt;\nit isn&#39;t =\r\nthe end of the world.&lt;br&gt;\n&lt;br&gt;\nThe individual members of a collection have =\r\nDELETE methods, and the&lt;br&gt;\nproper way to delete a resource is to call its =\r\nDELETE method.&lt;br&gt;\n&lt;br&gt;\nIf you want the deletion of a collection to also de=\r\nlete every member of&lt;br&gt;\nthe collection, by calling the DELETE method of th=\r\ne collection, you no&lt;br&gt;\nlonger have a uniform interface, because you no lo=\r\nnger have a&lt;br&gt;\nconsistent set of semantics for all resources, because some=\r\n of your&lt;br&gt;\nresources have DELETE semantics assigned to the DELETE method&lt;=\r\nbr&gt;\n(members), while other resources have BDELETE semantics assigned to the=\r\n&lt;br&gt;\nDELETE method (collections).&lt;br&gt;\n&lt;div class=3D&quot;im&quot;&gt;&lt;br&gt;\n&gt;&lt;br&gt;\n&gt; =\r\nTo add insult to injury, intermediaries are not required to actually&lt;br&gt;\n&g=\r\nt; stale a representation upon receiving a DELETE. And the very nature&lt;br&gt;\n=\r\n&gt; of proxies as they&#39;re used today means that while your proxy may w=\r\nell&lt;br&gt;\n&gt; delete the representation, mine won&#39;t, putting us exactly =\r\nwhere we&lt;br&gt;\n&gt; were.&lt;br&gt;\n&gt;&lt;br&gt;\n&lt;br&gt;\n&lt;/div&gt;No, it doesn&#39;t put us w=\r\nhere we were. =A0Just because part of a standard&lt;br&gt;\ndoesn&#39;t say &#39;M=\r\nUST&#39; is no reason to throw our hands up in the air and&lt;br&gt;\nproclaim tha=\r\nt it won&#39;t ever work for anybody so why bother at all...&lt;br&gt;\n&lt;br&gt;\nInter=\r\nmediaries SHOULD expire all representations of a resource it sees&lt;br&gt;\na DEL=\r\nETE request for. =A0RFC 2119 explains SHOULD to mean, &quot;the full&lt;br&gt;\nim=\r\nplications must be understood and carefully weighed before choosing a&lt;br&gt;\nd=\r\nifferent course.&quot; =A0In this case, I&#39;m not sure anyone&#39;s come =\r\nup with a&lt;br&gt;\nvalid reason not to expire on DELETE, but I still don&#39;t t=\r\nhink it merits&lt;br&gt;\na &quot;MUST&quot;.&lt;br&gt;\n&lt;br&gt;\nBy not using DELETE, instea=\r\nd of this mechanism most likely working, it&lt;br&gt;\ncan&#39;t possibly work. =\r\n=A0That is not where we were using DELETE.&lt;br&gt;\n&lt;div class=3D&quot;im&quot;&gt;&lt;br&gt;\n&gt;&lt;=\r\nbr&gt;\n&gt; At the end of the day, if you value your squid cache beyond the&lt;br=\r\n&gt;\n&gt; inherent atomicity of certain operations, you&#39;re quite free to d=\r\no so.&lt;br&gt;\n&gt; It&#39;s a tradeoff. But, IMHO, neither approaches are unres=\r\ntful, by&lt;br&gt;\n&gt; nature or by definition.&lt;br&gt;\n&gt;&lt;br&gt;\n&lt;br&gt;\n&lt;/div&gt;Don&#39;=\r\nt misstate the argument. =A0At the end of the day, I value the&lt;br&gt;\nscalabil=\r\nity of the uniform interface beyond the difficulty of either&lt;br&gt;\nimplementi=\r\nng an Xforms interface to allow a user to mark a bunch of&lt;br&gt;\nURIs for dele=\r\ntion which then DELETEs each one, or implementing Code on&lt;br&gt;\nDemand for ba=\r\ntch deletion if at some point I find atomicity to be&lt;br&gt;\nimportant to an ap=\r\nplication I&#39;m working on.&lt;br&gt;\n&lt;br&gt;\nAssigning DELETE semantics to some r=\r\nesources&#39; DELETE method, while&lt;br&gt;\nassigning BDELETE semantics to other=\r\n resources&#39; DELETE method within&lt;br&gt;\nthe same application, is the antit=\r\nhesis of a REST API.&lt;br&gt;\n&lt;font color=3D&quot;#888888&quot;&gt;&lt;br&gt;\n-Eric&lt;br&gt;\n&lt;/font&gt;&lt;/bl=\r\nockquote&gt;&lt;/div&gt;&lt;br&gt;\n\r\n--0015175cb6e20326f404658db177--\r\n\n"}}
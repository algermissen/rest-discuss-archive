{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":279478415,"authorName":"Ant√≥nio Mota","from":"=?ISO-8859-1?Q?Ant=F3nio_Mota?= &lt;amsmota@...&gt;","profile":"amsmota","replyTo":"SENDER","senderId":"63QwiT9lOa_rLnqisqCvQ1ScTRDD_FjqWbsjptU8J2QPZ2yKsx1l7Tx8-RrYSBHI2BDLLs5mG1UbhHOUZCmqFiCPTHHrlW8FoGE0s_BebTGcRWTpbd7DDAVA","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] A different approach to supporting transactions \tover HTTP","postDate":"1262898766","msgId":14464,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDJmYTU1NDQ3MTAwMTA3MTMxMm4xMTYwNGI3OHc0N2I2YjMxYTY3NjY1YmEwQG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PDE5MzcyNC41MjUzNS5xbUB3ZWIzNzUwOC5tYWlsLm11ZC55YWhvby5jb20+","referencesHeader":"PGI1NDhkZjY1MTAwMTA1MTkyMXMzMzBiZjE1Y3I5YjE0YmVhYTJmYjgwNmRhQG1haWwuZ21haWwuY29tPgkgPDM0M2VjYjNlMTAwMTA2MDQ0NXE3Yzk3YjU0NWtjNTFiMmYwMjY2OTgwYzIzQG1haWwuZ21haWwuY29tPgkgPDM3NzUwMi4zODAzMC5xbUB3ZWIzNzUwOC5tYWlsLm11ZC55YWhvby5jb20+CSA8MzQzZWNiM2UxMDAxMDcwMzQ5djM5NzBkMDQ2czkwMGEwNjdhZjFjOWU4ZWVAbWFpbC5nbWFpbC5jb20+CSA8MTkzNzI0LjUyNTM1LnFtQHdlYjM3NTA4Lm1haWwubXVkLnlhaG9vLmNvbT4="},"prevInTopic":14463,"nextInTopic":0,"prevInTime":14463,"nextInTime":14465,"topicId":14439,"numMessagesInTopic":17,"msgSnippet":"This is a very interesting post, clear, concise, to the point, I think I learned more about transactions and compensation with this then with entire books on","rawEmail":"Return-Path: &lt;amsmota@...&gt;\r\nX-Sender: amsmota@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 77680 invoked from network); 7 Jan 2010 21:12:48 -0000\r\nX-Received: from unknown (98.137.34.46)\n  by m1.grp.sp2.yahoo.com with QMQP; 7 Jan 2010 21:12:48 -0000\r\nX-Received: from unknown (HELO mail-fx0-f228.google.com) (209.85.220.228)\n  by mta3.grp.sp2.yahoo.com with SMTP; 7 Jan 2010 21:12:47 -0000\r\nX-Received: by fxm28 with SMTP id 28so9629567fxm.6\n        for &lt;rest-discuss@yahoogroups.com&gt;; Thu, 07 Jan 2010 13:12:46 -0800 (PST)\r\nMIME-Version: 1.0\r\nX-Received: by 10.223.82.23 with SMTP id z23mr3382095fak.9.1262898766297; Thu, \n\t07 Jan 2010 13:12:46 -0800 (PST)\r\nIn-Reply-To: &lt;193724.52535.qm@...&gt;\r\nReferences: &lt;b548df651001051921s330bf15cr9b14beaa2fb806da@...&gt;\n\t &lt;343ecb3e1001060445q7c97b545kc51b2f0266980c23@...&gt;\n\t &lt;377502.38030.qm@...&gt;\n\t &lt;343ecb3e1001070349v3970d046s900a067af1c9e8ee@...&gt;\n\t &lt;193724.52535.qm@...&gt;\r\nDate: Thu, 7 Jan 2010 21:12:46 +0000\r\nMessage-ID: &lt;2fa554471001071312n11604b78w47b6b31a67665ba0@...&gt;\r\nTo: Eric Newcomer &lt;e_newcomer@...&gt;\r\nCc: Bob Haugen &lt;bob.haugen@...&gt;, rest-discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Type: multipart/alternative; boundary=001517447a6c5a3d05047c99883c\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: =?ISO-8859-1?Q?Ant=F3nio_Mota?= &lt;amsmota@...&gt;\r\nSubject: Re: [rest-discuss] A different approach to supporting transactions \n\tover HTTP\r\nX-Yahoo-Group-Post: member; u=279478415; y=d7PVQOAZgjUX0MdFSRJmgGKOGotD2EZK85rtkwgne_SUoA\r\nX-Yahoo-Profile: amsmota\r\n\r\n\r\n--001517447a6c5a3d05047c99883c\r\nContent-Type: text/plain; charset=ISO-8859-1\r\n\r\nThis is a very interesting post, clear, concise, to the point, I think I\nlearned more about transactions and compensation with this then with entire\nbooks on the subject. You should consider writing this as a article or blog\nentry as for future reference.\n\nCheers.\n\nOn 7 Jan 2010 13:03, &quot;Eric Newcomer&quot; &lt;e_newcomer@...&gt; wrote:\n\n\n\nHi Bob,\n\nI&#39;m aware of the research, and with BTP. I just want to point out that while\nthis is an interesting theory, it has not been proven in practice. Also I\nwanted to correct the terminology.\n\nAnother interesting theory that hasn&#39;t worked out in practice is three-phase\ncommit. This does actually solve a known problem with two-phase commit (the\nuncertainty phase) but it isn&#39;t practical.\n\nI don&#39;t know that the so called &quot;provisional transactions&quot; solve a real\nproblem, although the idea is interesting. I also know it was a centerpiece\nof BTP, which has not been adopted.\n\nWith respect to &quot;undo&quot; - the problem is that we need to be precise about the\nterms we&#39;re using to describe transactions. I am going to assume we are\ndiscussing &quot;technical&quot; transactions rather than &quot;logical&quot; transactions -\ni.e. the way in which the transaction paradigm is implemented in software.\nThis is a very important point, because any suggestion of a new capability\nhas to take into account existing implementations (something BTP didn&#39;t\nreally do very well BTW).\n\nIn current practice, a transaction is the execution of a program that\noperates on shared data, typically on behalf of an online user. The program\neither runs to completion and the results are permanent, or the program does\nnot complete and the results are discarded. A transaction has no meaning\nunless it is operating on data, since it&#39;s purpose is to reliably change the\nstate of the shared data, without leaving any partial results in the case of\na crash or other failure. Thus, there is no such thing as a &quot;partial&quot;\ntransaction in today&#39;s world.\n\nThe term &quot;undo&quot; refers to one mechanism that ensures that there are no\npartial results, by undoing the &quot;temporary&quot; writes to a database or other\ntransactional resource manager that are typically done in place for better\nperformance (i.e the assumption is that a commit is a more likely to occur\nthan an abort) when a failure occurs. The undo mechanism relies on writing\nthe &quot;before&quot; state of the resource manager&#39;s data to a recovery of undo log,\nfrom which it can be retrieved and restored if necessary.\n\nThe term &quot;compensation&quot; refers to a separate transaction that is run only\nafter a previous transaction has already run to completion, in fact only\nafter a previous transaction has committed. Because the definition of a\ncommit includes the assumption that the results are permanent, the only way\nto change the results is to run another transaction (which is called a\ncompensating transaction when it reverses or as you say undoes the results\nof a prior transaction). Compensation is not undo - the key difference is\nthat undo runs before commit, and compensation runs after commit.\n\nThe fallacy in the partial transaction or reservation pattern is that\npartial results are visible. No results are visible until after commit -\nthis is the way things work in practice, and to suggest otherwise ignores\nreality.\n\nNow if you compare the reservation pattern to a saga, that&#39;s is a reference\nto an accepted pattern. Compensation is used in this pattern exactly as I\ndescribe it, to reverse the results of a prior commit. A saga is just a\nstring of individual transactions that commit or abort separately. They may\nhave a logical relationship, but there is no transaction mechanism that\njoins them together. A saga is typically done to avoid maintaining locks\nover a long sequence of operations on data, and this is fine and works. But\nit also requires the developer to write specific compensation transactions\nfor each step in the saga. No automatic mechanism exists for this.\n\nThe problem is the suggestion that a partial result of a transaction is\npossible. It is not. A transaction either commits or aborts. If you run\nmultiple transactions in sequence (as in a saga) they are related only\nlogically, not in the transaction paradigm. If you run a &quot;provisional&quot;\ntransaction it has exactly the same behavior as a &quot;final&quot; transaction.\n\nI just don&#39;t want anyone thinking this theory represents actual practice.\n\nEric\n\n----- Original Message ---- From: Bob Haugen &lt;bob.haugen@...&gt;\n\nTo: rest-discuss &lt;rest-discuss@yahoogroups.com&gt; Sent: Thu, January 7, 2010\n6:49:37 AM Subject: Re: [...\n\nI should probably explain that Eric Newcomer is an expert in transactions\nand I am not. Nevertheless...\n \n\r\n--001517447a6c5a3d05047c99883c\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;p&gt;This is a very interesting post, clear, concise, to the point, I think I=\r\n learned more about transactions and compensation with this then with entir=\r\ne books on the subject. You should consider writing this as a article or bl=\r\nog entry as for future reference.&lt;/p&gt;\n\n&lt;p&gt;Cheers.&lt;/p&gt;\n&lt;p&gt;&lt;blockquote type=\r\n=3D&quot;cite&quot;&gt;On 7 Jan 2010 13:03, &quot;Eric Newcomer&quot; &lt;&lt;a href=3D&quot;mai=\r\nlto:e_newcomer@...&quot;&gt;e_newcomer@...&lt;/a&gt;&gt; wrote:&lt;br&gt;&lt;br&gt;\n\n\n\n\n\n=\r\n\n\n\n\n\n\n\n\n&lt;div style=3D&quot;background-color:#fff&quot;&gt;\n&lt;span&gt;=A0&lt;/span&gt;\n\n\n&lt;div&gt;\n  &lt;d=\r\niv&gt;\n\n\n    &lt;div&gt;\n      \n      \n      &lt;p&gt;Hi Bob,&lt;br&gt;\n&lt;br&gt;\nI&#39;m aware of th=\r\ne research, and with BTP. I just want to point out that while this is an in=\r\nteresting theory, it has not been proven in practice.  Also I wanted to cor=\r\nrect the terminology.&lt;br&gt;\n&lt;br&gt;\nAnother interesting theory that hasn&#39;t w=\r\norked out in practice is three-phase commit. This does actually solve a kno=\r\nwn problem with two-phase commit (the uncertainty phase) but it isn&#39;t p=\r\nractical.&lt;br&gt;\n&lt;br&gt;\nI don&#39;t know that the so called &quot;provisional tr=\r\nansactions&quot; solve a real problem, although the idea is interesting.  I=\r\n also know it was a centerpiece of BTP, which has not been adopted.&lt;br&gt;\n&lt;br=\r\n&gt;\nWith respect to &quot;undo&quot; - the problem is that we need to be prec=\r\nise about the terms we&#39;re using to describe transactions.  I am going t=\r\no assume we are discussing &quot;technical&quot; transactions rather than &=\r\nquot;logical&quot; transactions - i.e. the way in which the transaction par=\r\nadigm is implemented in software.  This is a very important point, because =\r\nany suggestion of a new capability has to take into account existing implem=\r\nentations (something BTP didn&#39;t really do very well BTW).&lt;br&gt;\n\n&lt;br&gt;\nIn =\r\ncurrent practice, a transaction is the execution of a program that operates=\r\n on shared data, typically on behalf of an online user. The program either =\r\nruns to completion and the results are permanent, or the program does not c=\r\nomplete and the results are discarded.  A transaction has no meaning unless=\r\n it is operating on data, since it&#39;s purpose is to reliably change the =\r\nstate of the shared data, without leaving any partial results in the case o=\r\nf a crash or other failure.  Thus, there is no such thing  as a &quot;parti=\r\nal&quot; transaction in today&#39;s world.&lt;br&gt;\n\n&lt;br&gt;\nThe term &quot;undo&qu=\r\not; refers to one mechanism that ensures that there are no partial results,=\r\n by undoing the &quot;temporary&quot; writes to a database or other transac=\r\ntional resource manager that are typically done in place for better perform=\r\nance (i.e the assumption is that a commit is a more likely to occur than an=\r\n abort) when a failure occurs. The undo mechanism relies on writing the &qu=\r\not;before&quot; state of the resource manager&#39;s data to a recovery of u=\r\nndo log, from which it can be retrieved and restored if necessary.&lt;br&gt;\n\n&lt;br=\r\n&gt;\nThe term &quot;compensation&quot; refers to a separate transaction that i=\r\ns run only after a previous transaction has already run to completion, in f=\r\nact only after a previous transaction has committed. Because the definition=\r\n of a commit includes the assumption that the results are permanent, the on=\r\nly way to change the results is to run another transaction (which is called=\r\n a compensating transaction when it reverses or as you say undoes the resul=\r\nts of a prior transaction).  Compensation is not undo - the key difference =\r\nis that undo runs before commit, and compensation runs after commit.  &lt;br&gt;\n=\r\n\n&lt;br&gt;\nThe fallacy in the partial transaction or reservation pattern is that=\r\n partial results are visible.  No results are visible until after commit - =\r\nthis is the way things work in practice, and to suggest otherwise ignores r=\r\neality.&lt;br&gt;\n\n&lt;br&gt;\nNow if you compare the reservation pattern to a saga, tha=\r\nt&#39;s is a reference to an accepted pattern.  Compensation is used in thi=\r\ns pattern exactly as I describe it, to reverse the results of a prior commi=\r\nt. A saga is just a string of individual transactions that commit or abort =\r\nseparately.  They may have a logical relationship, but there is no transact=\r\nion mechanism that joins them together.  A saga is typically done to avoid =\r\nmaintaining locks over a long sequence of operations on data, and this is f=\r\nine and works.  But it also requires the developer to write specific compen=\r\nsation transactions for each step in the saga. No automatic mechanism exist=\r\ns for this.  &lt;br&gt;\n\n&lt;br&gt;\nThe problem is the suggestion that a partial result=\r\n of a transaction is possible.  It is not. A transaction either commits or =\r\naborts.  If you run multiple transactions in sequence (as in a saga) they a=\r\nre related only logically, not in the transaction paradigm.  If you run a &=\r\nquot;provisional&quot; transaction it has exactly the same behavior as a &q=\r\nuot;final&quot; transaction.&lt;br&gt;\n\n&lt;br&gt;\nI just don&#39;t want anyone thinkin=\r\ng this theory represents actual practice. &lt;br&gt;\n&lt;br&gt;\nEric&lt;p&gt;&lt;font color=3D&quot;#=\r\n500050&quot;&gt;\n\n----- Original Message ----\nFrom: Bob Haugen &lt;&lt;a href=3D&quot;mailt=\r\no:bob.haugen@...&quot;&gt;bob.haugen@...&lt;/a&gt;&gt;\n&lt;/font&gt;&lt;/p&gt;&lt;p&gt;&lt;font co=\r\nlor=3D&quot;#500050&quot;&gt;To: rest-discuss &lt;&lt;a href=3D&quot;mailto:rest-discuss@yahoogr=\r\noups.com&quot;&gt;rest-discuss@yahoogroups.com&lt;/a&gt;&gt;\nSent: Thu, January 7, 2010 6=\r\n:49:37 AM\nSubject: Re: [...&lt;/font&gt;&lt;/p&gt;&lt;p&gt;&lt;font color=3D&quot;#500050&quot;&gt;I should p=\r\nrobably explain that Eric Newcomer is an expert in\ntransactions and I am no=\r\nt. Nevertheless...&lt;/font&gt;&lt;/p&gt;&lt;/p&gt;\n\n    &lt;/div&gt;\n     \n\n    \n    &lt;div style=3D=\r\n&quot;color:#fff;min-height:0&quot;&gt;&lt;/div&gt;\n\n\n&lt;/div&gt;\n\n\n\n  \n\n\n\n\n\n\n&lt;/blockquote&gt;&lt;/p&gt;\n\r\n--001517447a6c5a3d05047c99883c--\r\n\n"}}
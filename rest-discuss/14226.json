{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":221173245,"authorName":"wahbedahbe","from":"&quot;wahbedahbe&quot; &lt;andrew.wahbe@...&gt;","profile":"wahbedahbe","replyTo":"SENDER","senderId":"2d3xmuFrhJXL_S3KaPzVAIWLZCfJVS1R87CLgtQ4p49zIcT9UJ5SYPnxFel0Mj5uqPAkHjvORpjG6QgW9mty7R6o6iAKrujgAip2Ig","spamInfo":{"isSpam":false,"reason":"6"},"subject":"Re: RESTful M2M Systems and Resource Typing","postDate":"1261168036","msgId":14226,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGhnZ29qNCs1OTYxQGVHcm91cHMuY29tPg==","inReplyToHeader":"PDM0MjZDRjI2LTg1OEMtNDJEMi1CRTcwLUNFQ0U0RUMwMDQ0QkBtYWMuY29tPg=="},"prevInTopic":14225,"nextInTopic":14227,"prevInTime":14225,"nextInTime":14227,"topicId":14156,"numMessagesInTopic":134,"msgSnippet":"... You made your mistake in step 1. You don t define a media type for a service, you define it for a type of client. If you define a media type for a service,","rawEmail":"Return-Path: &lt;andrew.wahbe@...&gt;\r\nX-Sender: andrew.wahbe@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 66575 invoked from network); 18 Dec 2009 20:27:54 -0000\r\nX-Received: from unknown (98.137.34.46)\n  by m13.grp.re1.yahoo.com with QMQP; 18 Dec 2009 20:27:54 -0000\r\nX-Received: from unknown (HELO n43d.bullet.mail.sp1.yahoo.com) (66.163.169.157)\n  by mta3.grp.sp2.yahoo.com with SMTP; 18 Dec 2009 20:27:54 -0000\r\nX-Received: from [69.147.65.173] by n43.bullet.mail.sp1.yahoo.com with NNFMP; 18 Dec 2009 20:27:17 -0000\r\nX-Received: from [98.137.34.34] by t15.bullet.mail.sp1.yahoo.com with NNFMP; 18 Dec 2009 20:27:17 -0000\r\nDate: Fri, 18 Dec 2009 20:27:16 -0000\r\nTo: rest-discuss@yahoogroups.com\r\nMessage-ID: &lt;hggoj4+5961@...&gt;\r\nIn-Reply-To: &lt;3426CF26-858C-42D2-BE70-CECE4EC0044B@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;ISO-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-Yahoo-Newman-Property: groups-compose\r\nX-eGroups-Msg-Info: 1:6:0:0:0\r\nFrom: &quot;wahbedahbe&quot; &lt;andrew.wahbe@...&gt;\r\nSubject: Re: RESTful M2M Systems and Resource Typing\r\nX-Yahoo-Group-Post: member; u=221173245; y=1bQTy7WWGqNTFoXkXSQDv7C2Vsl9wwG_amDqUp9r6S47vye-ug\r\nX-Yahoo-Profile: wahbedahbe\r\n\r\n--- In rest-discuss@yahoogroups.com, Jan Algermissen &lt;algermissen1971@...&gt; =\r\nwrote:\n&gt;\n&gt; An ordering example:\n&gt; \n&gt; Suppose you are to design an ordering =\r\nservice. You might do the  \n&gt; following:\n&gt; (A rather silly approach, but su=\r\nitable for this example)\n&gt; \n&gt; Define a service document media type applicat=\r\nion/ordering-srv+xml that  \n&gt; includes a &lt;order-processor href=3D&quot;&quot;/&gt; eleme=\r\nnt to tell the client where  \n&gt; the resource is that accepts orders. Exampl=\r\ne:\n&gt; \n&gt; &lt;service&gt;\n&gt;    &lt;order-processor href=3D&quot;/service/1234&quot;/&gt;\n&gt; &lt;/servic=\r\ne&gt;\n&gt; \n\nYou made your mistake in step 1.\nYou don&#39;t define a media type for a=\r\n service, you define it for a type of client. If you define a media type fo=\r\nr a service, i.e. so that it can only describe the data and control options=\r\n offered by that one service, then a client that consumes that media type i=\r\ns obviously coupled to the service.\n\nYour client can only do what is allowe=\r\nd by the media type(s) it knows how to process. If you want to build a syst=\r\nem where the client is not bound to a specific service then you must define=\r\n a (set of) media type(s) that is able to define a space of services. The s=\r\npace is constrained on the fly by the hypermedia processed by the client to=\r\n the specific service being executed.\n\nThere&#39;s no magic here. A web browser=\r\n can process any service that can defined by HTML. If you start returning a=\r\nnother media type then the browser is stuck.\n\nAnd as I&#39;ve said before, take=\r\n the human out of the equation. The browser is rendering the content, turni=\r\nng it into messages to the windowing system, and responding to messages (e.=\r\ng. clicks) from the windowing system. When you are defining a media type fo=\r\nr a _client_ (rather than a service) you have to think about the client-sid=\r\ne system and how to drive it.\n\nSo for your ordering client (that can intera=\r\nct with a wide range of ordering services): what events cause something to =\r\nbe bought? What information needs to be communicated to the underlying syst=\r\nem to facilitate an ordering decision? What information accompanies the ord=\r\nering event from the underlying system? Answer these questions and use them=\r\n to inform your media type design.\n\nThe hypermedia document declaratively d=\r\nescribes to the client how to interact with the underlying system while in =\r\nan application state. It also tells the client how to translate client even=\r\nts into HTTP requests for new resource representations and/or to modify res=\r\nources.\n\nContent negotiation tells the server what kind of client it is dea=\r\nling with where &quot;kind&quot; is expressed as a (set of) media type(s). This lets =\r\nis represent the resource in a form that can drive the requesting client.\n\n=\r\nThe key place where HATEOAS and client-server decoupling fall apart in prac=\r\ntice is when media types are defined for a service rather than for a type o=\r\nf client. When a media type is an expression of a specific service then HAT=\r\nEOAS isn&#39;t possible because the media type not designed to express the vari=\r\nability between services that a client can interact with in a way that is m=\r\neaningful to the client. \n\nInstead people express the options in a manner t=\r\nhat is only meaningful to the service and scratch their heads trying to fig=\r\nure out how a client is supposed to make the decision without some kind of =\r\n&quot;human intelligence&quot; interpreting the choices. When you instead design the =\r\nmedia type around a type of client then you don&#39;t have these problems. \n\nRe=\r\ngards,\n\nAndrew\n\n\n"}}
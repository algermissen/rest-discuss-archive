{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":266460716,"authorName":"Eric J. Bowman","from":"&quot;Eric J. Bowman&quot; &lt;eric@...&gt;","replyTo":"SENDER","senderId":"elkkXEnA6yZoKiAFPm4oSk8oTN-ChhTUdEk8JV_rLZkBvEP0LDY0SlfYLHbYP_0ZsNzKxKwkfxrJg3sNkYtA7OlWK9PRgIy1kiKTxtQTWw","spamInfo":{"isSpam":false,"reason":"3"},"subject":"RE: [rest-discuss] REST design question","postDate":"1163617119","msgId":7019,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PFcxMTcxMTg1MjczOTk1MTE2MzYxNzExOUBtYWlsLm1haWxzbmFyZS5uZXQ+"},"prevInTopic":7018,"nextInTopic":7023,"prevInTime":7018,"nextInTime":7020,"topicId":6804,"numMessagesInTopic":134,"msgSnippet":"... Of course it s appropriate to tell Technorati this.  An application has logic which is identical whether the implementation is XML-RPC or REST, because ","rawEmail":"Return-Path: &lt;eric@...&gt;\r\nX-Sender: eric@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 31360 invoked from network); 15 Nov 2006 18:59:34 -0000\r\nReceived: from unknown (66.218.67.33)\n  by m39.grp.scd.yahoo.com with QMQP; 15 Nov 2006 18:59:34 -0000\r\nReceived: from unknown (HELO mail.mailsnare.net) (206.246.200.187)\n  by mta7.grp.scd.yahoo.com with SMTP; 15 Nov 2006 18:59:33 -0000\r\nReceived: from mail.mailsnare.net (v167.mailsnare.net [206.246.200.167])\n\tby mail.mailsnare.net (Postfix) with ESMTP id 0DF4C2D08F;\n\tWed, 15 Nov 2006 18:58:38 +0000 (UTC)\r\nTo: &quot;Mike Schinkel&quot; &lt;mikeschinkel@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nImportance: Normal\r\nSensitivity: Normal\r\nMessage-ID: &lt;W11711852739951163617119@...&gt;\r\nX-Mailer: Mintersoft EdgeDesk, Build 4.03.0105\r\nDate: Wed, 15 Nov 2006 18:58:39 +0000\r\nOrganization: Bison Systems Corporation\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;us-ascii&quot;\r\nContent-Transfer-Encoding: 7bit\r\nX-Virus-Scanned: by ClamAV at mailsnare.net\r\nX-eGroups-Msg-Info: 2:3:4:0\r\nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nReply-To: eric@...\r\nSubject: RE: [rest-discuss] REST design question\r\nX-Yahoo-Group-Post: member; u=266460716\r\n\r\n&gt;\n&gt;&gt;&gt; The point I was making is that the feed URL is more or less constant, so\n&gt;what is the point of submitting it (to Technorati) every time you post to or\n&gt;edit your weblog?\n&gt;\n&gt;Well, isn&#39;t a URL a URI, or identifier, so isn&#39;t it appropriate to tell\n&gt;Technorati the identifier of the blog to ping? That the identifer also\n&gt;happens to be a locator is just convenient.\n&gt;\n\nOf course it&#39;s appropriate to tell Technorati this.  An application has logic \nwhich is identical whether the implementation is XML-RPC or REST, because \napplication logic is beyond the scope of distributed networking architectural \nstyles.  Making a PUT to Technoresti directly identifies the weblog in \nquestion in my example, just like the XML-RPC ping, except it does so by \ntransferring a fraction of the bytes of the XML-RPC solution and does not \nimpose the requirement of one ping per post imposed by the XML-RPC solution, \nreducing not only bandwidth requirements but TCP/IP overhead and therefore \nCPU cycles are freed up to service application logic instead of inefficient \nredundancies.\n\nArchitecturally, Technoresti has a different submission URL for each user.  \nIn Technorati all users make submissions to the same URL.  &quot;It&#39;s just \nconvenient&quot; is hardly a defense for an inherently inefficient approach which \ngoes against proper web architecture.  Which doesn&#39;t mean it won&#39;t work, like \nI said before, it means they don&#39;t mind wasting bandwidth but I can&#39;t relate \nto that attitude.  The goal in REST is to scale, which typically means going \nagainst the notion of &quot;convenience&quot; prevalent amongst those who favor MVC \ndesign patterns and spend a small fortune on server farms they don&#39;t really \nneed.  And the electricity to power them.  And more electricity to cool it \nall down.  And more datacenter space.  I can&#39;t afford convenience, besides, \nthe number-one all-time user complaint about the web is it&#39;s slow so it seems \nto me that focusing on proper architecture, scaling and efficiency is a no-\nbrainer.\n\n&gt;\n&gt;OTOH, this would not be RESTful because it is sending the logic, not the\n&gt;representation (right?)\n&gt;\n\nNo, there&#39;s nothing inherently un-RESTful about an URL like this:\n\n[1] http://example.com/service?query=www.example.org\n\nThat&#39;s sending an identifier, not logic or a representation.  I can GET, PUT, \nPOST or DELETE the above URL [1].  In REST, the application logic defines how \n/service responds to these methods, not the contents of the message body.\n\n&gt;\n&gt;&gt;&gt; Your feed should get a new timestamp whenever it&#39;s updated with new\n&gt;content. The value of that timestamp may be PUT to the user&#39;s URL to change\n&gt;the value in &lt;updated&gt; concurrently with your feed&#39;s timestamp being\n&gt;updated.\n&gt;\n&gt;But doesn&#39;t that violate REST by posting the logic not the representation?\n&gt;Isn&#39;t the &lt;updated&gt; field considered logic in this case?\n&gt;\n\nThat is not posting logic.  The value posted is not an instruction.  The \nvalue posted is a value in a node on an XML tree.  The application state is \nrepresented by the values in that node tree.  Posting _logic_ would instruct \nthe server what calculations it needs to perform to arrive at the desired new \nvalue for that node.  The instructions would be posted to the server, then \nexecuted, before the state of the node would be updated to reflect the new, \ncomputed value.\n\nIn REST the new state of the application gets posted, the action of making a \nPUT updates the application state by first updating the value of the node.  \nThe application then executes retroactively, to make whatever changes are \nrequired elsewhere to support the new value in that node.  The node tree&#39;s \nstate is transferred in a representation in response to a GET, the node \ntree&#39;s representation is altered and this new application state is PUT back.\n\nThat&#39;s using hypermedia representations to transfer application state, there \nis no program logic in a timestamp, it is just the value of a particular node \nin a data tree.\n\n&gt;\n&gt;&gt;&gt; REST is not concerned with application logic, only information\n&gt;architecture. There is no constraint in REST regarding data quality, so no\n&gt;of course you can&#39;t jump to any general conclusions about REST based on the\n&gt;implementation specifics of this example.\n&gt;\n&gt;Your answer leads me to a question that I hadn&#39;t even begun to ask on the\n&gt;list: Is REST always appropriate and if not, why and why not? Feel free to\n&gt;defer that answer to later.\n&gt;\n\nYes, of course REST is appropriate.  If the goal is to build a distributed \nhypermedia application, individual technologies and application logic and \nprotocols may be chosen based on any criteria desired so long as the result \nis within the constraints of REST.  There is no architectural style which has \nbeen shown to be more efficient on the Internet than the one the Internet is \nnatively designed to support.\n\nWhy would it ever be inappropriate to evaluate any distributed hypermedia \nInternet application except by considering it against the constraints which \nhave been defined as native to the idiom?  Is there some other set of \ncriteria I don&#39;t know about which has been shown to be superior?  Not more \npopular, more efficient.\n\n&gt;\n&gt;&gt;&gt; Technoresti would have a far better chance of being &quot;done correctly,&quot;\n&gt;since there&#39;s no timestamp in the XML-RPC ping other than the POST\n&gt;submission time. Technoresti would allow batch updates of multiple weblogs\n&gt;with one PUT, on a once-per-day for all weblogs schedule, instead of once\n&gt;per post. The spidering would be smarter with reliable timestamps to use as\n&gt;a baseline which the application logic can refer to.\n&gt;\n&gt;But are those benefits of REST over XML-RPC, or simply the fact that the\n&gt;currect implementation didn&#39;t attempt to solve those problems?\n&gt;\n\nWhen you&#39;re sending application logic in the message body you open up many \ncans of worms.  Presumably, the XML-RPC approach could be made to function \nthe same way as the REST approach.  The bandwidth requirements could even \nbe brought under control.  But aside from the implementation-specific \nexamples I gave of scheduling, etc. which have nothing to do with REST since \nit&#39;s application logic, the other advantages of REST still stand.\n\nIf you want to update your application logic, would you prefer that this was \ntransparent to your users, or would you prefer sending everyone an e-mail who \nhas ever implemented your XML-RPC Ping informing them that it will no longer \nwork unless they re-code their applications?  When you do update your code, \nand a bunch of websites that utilized your previous version now show errors, \nyou&#39;ll perhaps get that lightbulb over your head which says, &quot;Ah!  Now I know \nwhy transferring application logic is a bad idea.&quot;\n\nA truly RESTful API could be entirely re-coded on the back end to change the \nimplementation without affecting the functionality.  With XML-RPC, without \nchanging the functionality, changing the implementation would require \nchanging the API.  Since the API is &quot;out there&quot; instead of contained within \nthe application logic this is no small feat.\n\n&gt;\n&gt;One final thing to clarify. If http://technoresti.com/users/{username} is\n&gt;the resource and &quot;&lt;updated&gt;2006-12-31T24:59:59Z&lt;/updated&gt;&quot; is the\n&gt;representation,\n&gt;\n\nNo, the URI is not the resource.  A resource is a conceptualization, a \nresource identifier assigns a name to that concept which may be a location as \nwell.  The resource in this case is &quot;a list of weblogs with titles, \ndescriptions and updated times.&quot;  The representation is the entire list of \nweblogs, their titles, descriptions and updated times populated with the \ncurrent values for those list items which gets transferred over the network.\n\nDon&#39;t get this confused with the earlier example regarding document \nfragments.  I have defined the URI pattern /{username} as the entire list of \nweblogs and their metadata in this example.  GET the list of weblogs.  Edit \nthe &lt;updated&gt; value corresponding to the weblog in question, or more than one \nweblog if it&#39;s a batch update.  PUT the list back where it came from.\n\n&gt;\n&gt;what is the name of the resource; i.e. what&#39;s it&#39;s noun? I\n&gt;can see having a profile at http://technoresti.com/users/{username} and then\n&gt;submitting a respresentation of my profile (name, email, blog urls), but the\n&gt;&lt;updated&gt; element doesn&#39;t seem right for a resource. Doesn&#39;t this seem more\n&gt;correct? http://technoresti.com/users/{username}/{blog-id}/updated\n&gt;\n\nA URI is a resource identifier.  In REST a resource is referred to as a \n&quot;noun&quot; but I think that&#39;s just the local dialect on this list, not a formal \ndefinition in REST.  A name is a resource identifier.  A name is a proper \nnoun.  Call it whatever you want.  The resource is defined in this example as \nhaving the name http://technoresti.com/users/{username}.\n\nMy example used a &lt;ul&gt; because I wanted it to indicate that the /{username} \nresource could contain a list of multiple weblogs, and it&#39;s that list of \nweblogs that I&#39;ve identified as the resource.\n\nI didn&#39;t say that /{username} was a profile page.  To extend my example let&#39;s \nsay the profile resource is /{username}/profile and leave /{username} exactly \nhow I&#39;ve defined it, which is a list of weblogs the user wants to have \nspidered by the Technoresti service when those weblogs are updated.  Nothing \nmore, nothing less -- don&#39;t read anything into the examples which isn&#39;t there.\n\nIf I want to change my profile, aside from my list of weblogs, then I would \nPUT the new values to the /profile resource.  Don&#39;t ask me what &quot;seems more \ncorrect,&quot; there is no silver-bullet &quot;correct&quot; URI solution.  If you want to \nput the blog ID in the URL and make &lt;updated&gt; a standalone resource, you \ncould do that, I suppose -- but you&#39;d better have good reason for it.\n\nBut there&#39;s no reason for it.  Why add complexity by making each item in a \nshort, logical list of identical small items its own resource with its own \nURL?  That would seem to go against the precept of scaling, because a batch \nupdate of several weblogs would require multiple HTTP requests instead of one \nPUT, which is why I gave the example of a list of weblogs instead of giving \nan example of one resource per weblog.\n\n-Eric\n\n\n\n\n"}}
{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":460230079,"authorName":"Brian Craft","from":"Brian Craft &lt;craft.brian@...&gt;","profile":"firstbakingbook","replyTo":"SENDER","senderId":"s9A-85ht6Tq4z1tM28PnVsIPvn_XYxo7jNvQb7zUe4u4GSbq4XvchDoyMTD9YeD_f3ISaky73A1USuGas1KFo6-LqQGlUibKbYw","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] the meaning of stateless","postDate":"1366588332","msgId":19315,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PENBR1ZiWEw0TmIxWEd3NTN4KzVaPTRDaD1PV1JfSCttVHRnS3FzdT1tcS05Wit5X05EZ0BtYWlsLmdtYWlsLmNvbT4=","inReplyToHeader":"PENBUFdfOG03ODBmZ0w2SHBlTnk4ZXZ6TjlqMHo9N1JiZzdEcDZVZ1R3QnJrakhoYkhrd0BtYWlsLmdtYWlsLmNvbT4=","referencesHeader":"PENBR1ZiWEw2X09IT2hPVFMwa2YwU0tjV0EtPXpLWWJLTFFXVldmQm9US09tZzd2WHhFQUBtYWlsLmdtYWlsLmNvbT4JPENBUFdfOG03bmtZV3lRZTVmUWVqWUJ0aTl1TlUtdTZ3WGZnZ0VjTEhuOUZYRytNTm01QUBtYWlsLmdtYWlsLmNvbT4JPENBR1ZiWEw0QWh0QkJKS1VCQUx2WXFBcTdHSnNnQkZLeFctN1pYWDVXM0c3OWtjSmJUUUBtYWlsLmdtYWlsLmNvbT4JPENBUFdfOG03ODBmZ0w2SHBlTnk4ZXZ6TjlqMHo9N1JiZzdEcDZVZ1R3QnJrakhoYkhrd0BtYWlsLmdtYWlsLmNvbT4="},"prevInTopic":19314,"nextInTopic":19316,"prevInTime":19314,"nextInTime":19316,"topicId":19309,"numMessagesInTopic":86,"msgSnippet":"Fielding s definition didn t do much for me, because the terms aren t adequately defined, and there aren t enough examples to clarify his intent. Also, some of","rawEmail":"Return-Path: &lt;craft.brian@...&gt;\r\nX-Sender: craft.brian@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 6668 invoked from network); 21 Apr 2013 23:52:14 -0000\r\nX-Received: from unknown (10.193.84.168)\n  by m5.grp.bf1.yahoo.com with QMQP; 21 Apr 2013 23:52:14 -0000\r\nX-Received: from unknown (HELO mail-la0-f47.google.com) (209.85.215.47)\n  by mta6.grp.bf1.yahoo.com with SMTP; 21 Apr 2013 23:52:13 -0000\r\nX-Received: by mail-la0-f47.google.com with SMTP id ez20so1088461lab.6\n        for &lt;rest-discuss@yahoogroups.com&gt;; Sun, 21 Apr 2013 16:52:13 -0700 (PDT)\r\nMIME-Version: 1.0\r\nX-Received: by 10.112.140.100 with SMTP id rf4mr3019277lbb.82.1366588332948;\n Sun, 21 Apr 2013 16:52:12 -0700 (PDT)\r\nX-Received: by 10.114.16.68 with HTTP; Sun, 21 Apr 2013 16:52:12 -0700 (PDT)\r\nIn-Reply-To: &lt;CAPW_8m780fgL6HpeNy8evzN9j0z=7Rbg7Dp6UgTwBrkjHhbHkw@...&gt;\r\nReferences: &lt;CAGVbXL6_OHOhOTS0kf0SKcWA-=zKYbKLQWVWfBoTKOmg7vXxEA@...&gt;\n\t&lt;CAPW_8m7nkYWyQe5fQejYBti9uNU-u6wXfggEcLHn9FXG+MNm5A@...&gt;\n\t&lt;CAGVbXL4AhtBBJKUBALvYqAq7GJsgBFKxW-7ZXX5W3G79kcJbTQ@...&gt;\n\t&lt;CAPW_8m780fgL6HpeNy8evzN9j0z=7Rbg7Dp6UgTwBrkjHhbHkw@...&gt;\r\nDate: Sun, 21 Apr 2013 16:52:12 -0700\r\nMessage-ID: &lt;CAGVbXL4Nb1XGw53x+5Z=4Ch=OWR_H+mTtgKqsu=mq-9Z+y_NDg@...&gt;\r\nTo: mca &lt;mca@...&gt;\r\nCc: rest-discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Type: multipart/alternative; boundary=001a11c347be23c12604dae7a482\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Brian Craft &lt;craft.brian@...&gt;\r\nSubject: Re: [rest-discuss] the meaning of stateless\r\nX-Yahoo-Group-Post: member; u=460230079; y=D5L81pTSqol5G1iyj-9dFK29e730YA-4R4I49ObGwZlwPsdr8BE4oSCsAajtQv7MKj3V0fkIUl0C8vw\r\nX-Yahoo-Profile: firstbakingbook\r\n\r\n\r\n--001a11c347be23c12604dae7a482\r\nContent-Type: text/plain; charset=ISO-8859-1\r\n\r\nFielding&#39;s definition didn&#39;t do much for me, because the terms aren&#39;t\nadequately defined, and there aren&#39;t enough examples to clarify his intent.\nAlso, some of the claims seem to be at odds with practice. Again, the &quot;POST\nto query&quot; thing involves storing state between requests, while Fielding\nsays RESTful APIs are better because of &quot;not having to store state between\nrequests&quot;. Well, which is it?\n\nRegarding what I&#39;m after, that&#39;s a rather broad question. I&#39;d specifically\nlike to see any example of a RESTful API over high-dimensional data, e.g.\ndata with at least tens of thousands of dimensions. The examples I find are\nbarely more difficult than Todo MVC. So, sure, you can make toys with REST.\nCan you make substantial applications with REST?\n\nAnd more generally, I&#39;m trying to understand what REST is all about. It&#39;s\nclear that the overwhelming majority of people who use the term REST\nactually mean nothing more than AJAX. They merely haven&#39;t investigated at\nall what it is supposed to mean. Of the small minority who mean something\nmore than AJAX, one gets the impression that there isn&#39;t any set of three\npeople who agree on what it means. So, it&#39;s a popular buzzword, and perhaps\na religion, but is it actually a design pattern, and is it actually useful,\nand can it actually be used to design a substantial application with\nexisting technologies?\n\n\nOn Sun, Apr 21, 2013 at 2:20 PM, mca &lt;mca@...&gt; wrote:\n\n&gt; Brian:\n&gt;\n&gt; I&#39;m not actually very clear on what you&#39;re after here. You challenging my\n&gt; _interpretation_ of Fielding&#39;s stateless constraint? Challenging Fielding&#39;s\n&gt; definition itself?\n&gt;\n&gt; Maybe you&#39;re just idly pondering multiple meanings of the word &quot;session&quot;?\n&gt; For example, the opening phrase in your response &quot;Session state&quot; is not\n&gt; using the word &quot;session&quot; in the same way as the closing line: &quot;resources\n&gt; for the session.&quot; (note in my previous response I used &quot;interaction set&quot; to\n&gt; avoid the very same mistake).\n&gt;\n&gt; Maybe (as you _state_ at the top of this latest thread in this _session_\n&gt; [sorry, was too easy]) you want to make the claim that there is no such\n&gt; thing as &quot;statelessness&quot;?\n&gt;\n&gt;\n&gt;\n&gt; mca\n&gt; +1.859.757.1449\n&gt; skype: mca.amundsen\n&gt; http://amundsen.com/blog/\n&gt; http://twitter.com/mamund\n&gt; https://github.com/mamund\n&gt; http://www.linkedin.com/in/mikeamundsen\n&gt;\n&gt;\n&gt;\n&gt; On Sun, Apr 21, 2013 at 1:12 PM, Brian Craft &lt;craft.brian@...&gt;wrote:\n&gt;\n&gt;&gt; Storing session information isn&#39;t negotiable, and is orthogonal to API\n&gt;&gt; design. For example, no one sits down to design an API and says &quot;Oh, a\n&gt;&gt; restful API is stateless, so I can&#39;t use HTTPS, because it stores session\n&gt;&gt; state on the server.&quot; The API design occurs independent of the statefulness\n&gt;&gt; of the communication, which is dictated  by security concerns.  And the API\n&gt;&gt; can be redeployed without change to HTTP, so the statefulness had no\n&gt;&gt; bearing on it.\n&gt;&gt;\n&gt;&gt; The FTP example is more enlightening.  It&#39;s only slightly different than\n&gt;&gt; the &quot;query by POST&quot; technique that is said to be RESTful. The main\n&gt;&gt; difference is that in &quot;query by POST&quot; an id for the query is returned by\n&gt;&gt; the server. So in the FTP example, if the server returned an id for the\n&gt;&gt; target directory of a &quot;cd&quot;, and future requests referenced this id, would\n&gt;&gt; it then be &quot;stateless&quot; and &quot;RESTful&quot;? And if so, how does that jibe with\n&gt;&gt; the claims in the dissertation that statelessness means &quot;session state is\n&gt;&gt; kept entirely on the client&quot;, and &quot;Scalability is improved because not\n&gt;&gt; having to store state between requests allows the server component to\n&gt;&gt; quickly free resources and further simplifies implementation.&quot; The server\n&gt;&gt; does, in fact,  store and manage resources for the session.\n&gt;&gt;\n&gt;&gt;\n&gt;&gt; On Sat, Apr 20, 2013 at 4:51 PM, mca &lt;mca@...&gt; wrote:\n&gt;&gt;\n&gt;&gt;&gt; Fielding&#39;s definition of stateless is:\n&gt;&gt;&gt;\n&gt;&gt;&gt; &quot;[C]ommunication must be stateless in nature ... such that each request\n&gt;&gt;&gt; from client to server must contain all of the information necessary to\n&gt;&gt;&gt; understand the request, and cannot take advantage of any stored context on\n&gt;&gt;&gt; the server.&quot;[1]\n&gt;&gt;&gt;\n&gt;&gt;&gt; This constraint is not about how resources state is changed on the\n&gt;&gt;&gt; server (clients send representations to the server) or how application\n&gt;&gt;&gt; state changed on the client (servers send representations to the client).\n&gt;&gt;&gt; Instead, this constraint is about the nature of the messages\n&gt;&gt;&gt; (representations via entity-bodies + metadata via headers) that are sent\n&gt;&gt;&gt; between client and server when changing each other&#39;s state.\n&gt;&gt;&gt;\n&gt;&gt;&gt; Each message stands alone and does not depend upon previous messages.\n&gt;&gt;&gt;\n&gt;&gt;&gt; &lt;snip&gt;\n&gt;&gt;&gt; Perhaps to clarify what is meant in REST by &quot;stateless&quot; someone could\n&gt;&gt;&gt; give examples of things that *aren&#39;t* &quot;stateless&quot;, and contrast them to\n&gt;&gt;&gt; REST.\n&gt;&gt;&gt; &lt;/snip&gt;\n&gt;&gt;&gt;\n&gt;&gt;&gt; HTTP servers that maintain persistent session state for each client\n&gt;&gt;&gt; during the life of the client-server interaction set are not stateless.\n&gt;&gt;&gt;\n&gt;&gt;&gt; FTP servers that allow clients to change directories relative to the\n&gt;&gt;&gt; results of a directory change in a previous request (cd ../..) are not\n&gt;&gt;&gt; stateless.\n&gt;&gt;&gt;\n&gt;&gt;&gt; Hopefully, this gives you some helpful ideas.\n&gt;&gt;&gt;\n&gt;&gt;&gt;\n&gt;&gt;&gt; [1]\n&gt;&gt;&gt; http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm#sec_5_1_3\n&gt;&gt;&gt;\n&gt;&gt;&gt;\n&gt;&gt;&gt;\n&gt;&gt;&gt; mca\n&gt;&gt;&gt; +1.859.757.1449\n&gt;&gt;&gt; skype: mca.amundsen\n&gt;&gt;&gt; http://amundsen.com/blog/\n&gt;&gt;&gt; http://twitter.com/mamund\n&gt;&gt;&gt; https://github.com/mamund\n&gt;&gt;&gt; http://www.linkedin.com/in/mikeamundsen\n&gt;&gt;&gt;\n&gt;&gt;&gt;\n&gt;&gt;&gt;\n&gt;&gt;&gt; On Sat, Apr 20, 2013 at 10:33 AM, Brian Craft &lt;craft.brian@...&gt;wrote:\n&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; I don&#39;t understand how the word &quot;stateless&quot; is being used in REST.\n&gt;&gt;&gt;&gt; Obviously POST and PUT create state on the server. Obviously, requests\n&gt;&gt;&gt;&gt; after a state change depend on that state change (e.g. by using a URL that\n&gt;&gt;&gt;&gt; was not valid before the state change).\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; I can almost live with this usage of &quot;stateless&quot; for persistent objects\n&gt;&gt;&gt;&gt; stored on the server, because it can be thought of as not being &quot;session\n&gt;&gt;&gt;&gt; state&quot;: it lasts longer than a session. But in any moderately complex web\n&gt;&gt;&gt;&gt; app, if you try to design a REST API you will quickly hit GET size limits\n&gt;&gt;&gt;&gt; when doing complex queries. And then the suggestion is to do something like\n&gt;&gt;&gt;&gt; POST the query parameters, returning a Location header for a &quot;query&quot; object\n&gt;&gt;&gt;&gt; that can be fetched with GET. How is that not storing session data on the\n&gt;&gt;&gt;&gt; server? How is that different from non-REST solutions?\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; There are three obvious differences between POSTing a query and just\n&gt;&gt;&gt;&gt; generically using POST instead of GET. POSTing a query requires two\n&gt;&gt;&gt;&gt; round-trips to the server, bad for latency. POSTing a query and using a\n&gt;&gt;&gt;&gt; Location header limits the response to the creation of a single object,\n&gt;&gt;&gt;&gt; which is fine for 1990&#39;s full-page-load design, but is unrealistic for any\n&gt;&gt;&gt;&gt; moderately complex ajax app, where an API call will result in the creation\n&gt;&gt;&gt;&gt; of multiple objects (e.g. creating related images). And POSTing a query\n&gt;&gt;&gt;&gt; requires the tracking of large numbers of transient &quot;query&quot; objects, hugely\n&gt;&gt;&gt;&gt; complicating both client and server, the very thing REST is supposed to\n&gt;&gt;&gt;&gt; avoid.\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; Perhaps to clarify what is meant in REST by &quot;stateless&quot; someone could\n&gt;&gt;&gt;&gt; give examples of things that *aren&#39;t* &quot;stateless&quot;, and contrast them to\n&gt;&gt;&gt;&gt; REST.\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;\n&gt;&gt;&gt;\n&gt;&gt;&gt;\n&gt;&gt;\n&gt;\n\r\n--001a11c347be23c12604dae7a482\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;div dir=3D&quot;ltr&quot;&gt;Fielding&#39;s definition didn&#39;t do much for me, becau=\r\nse the terms aren&#39;t adequately defined, and there aren&#39;t enough exa=\r\nmples to clarify his intent. Also, some of the claims seem to be at odds wi=\r\nth practice. Again, the &quot;POST to query&quot; thing involves storing st=\r\nate between requests, while Fielding says RESTful APIs are better because o=\r\nf &quot;not having to store state between requests&quot;. Well, which is it=\r\n?&lt;div&gt;\n&lt;br&gt;&lt;/div&gt;&lt;div style&gt;Regarding what I&#39;m after, that&#39;s a rath=\r\ner broad question. I&#39;d specifically like to see any example of a RESTfu=\r\nl API over high-dimensional data, e.g. data with at least tens of thousands=\r\n of dimensions. The examples I find are barely more difficult than Todo MVC=\r\n. So, sure, you can make toys with REST. Can you make substantial applicati=\r\nons with REST?&lt;/div&gt;\n&lt;div style&gt;&lt;br&gt;&lt;/div&gt;&lt;div style&gt;And more generally, I&=\r\n#39;m trying to understand what REST is all about. It&#39;s clear that the =\r\noverwhelming majority of people who use the term REST actually mean nothing=\r\n more than AJAX. They merely haven&#39;t investigated at all what it is sup=\r\nposed to mean. Of the small minority who mean something more than AJAX, one=\r\n gets the impression that there isn&#39;t any set of three people who agree=\r\n on what it means. So, it&#39;s a popular buzzword, and perhaps a religion,=\r\n but is it actually a design pattern, and is it actually useful, and can it=\r\n actually be used to design a substantial application with existing technol=\r\nogies?&lt;/div&gt;\n&lt;/div&gt;&lt;div class=3D&quot;gmail_extra&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;div class=3D&quot;gmail_q=\r\nuote&quot;&gt;On Sun, Apr 21, 2013 at 2:20 PM, mca &lt;span dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D=\r\n&quot;mailto:mca@...&quot; target=3D&quot;_blank&quot;&gt;mca@...&lt;/a&gt;&gt;&lt;/span&gt;=\r\n wrote:&lt;br&gt;&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;margin:0 0 0 .8ex;bor=\r\nder-left:1px #ccc solid;padding-left:1ex&quot;&gt;\n&lt;div dir=3D&quot;ltr&quot;&gt;Brian:&lt;div&gt;&lt;br&gt;=\r\n&lt;/div&gt;&lt;div&gt;I&#39;m not actually very clear on what you&#39;re after here. Y=\r\nou challenging my _interpretation_ of Fielding&#39;s stateless constraint? =\r\nChallenging Fielding&#39;s definition itself? =A0&lt;/div&gt;\n\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;d=\r\niv&gt;Maybe you&#39;re just idly pondering multiple meanings of the word &quot=\r\n;session&quot;? For example, the opening phrase in your response &quot;Sess=\r\nion state&quot; is not using the word &quot;session&quot; in the same way a=\r\ns the closing line: &quot;resources for the session.&quot; (note in my prev=\r\nious response I used &quot;interaction set&quot; to avoid the very same mis=\r\ntake).&lt;/div&gt;\n\n\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Maybe (as you _state_ at the top of this=\r\n latest thread in this _session_ [sorry, was too easy]) you want to make th=\r\ne claim that there is no such thing as &quot;statelessness&quot;?&lt;/div&gt;&lt;div=\r\n&gt;\n\n&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=3D&quot;gmail_extra&quot;&gt;&lt;div class=3D&quot;=\r\nim&quot;&gt;&lt;br clear=3D&quot;all&quot;&gt;&lt;div&gt;mca&lt;div&gt;&lt;a href=3D&quot;tel:%2B1.859.757.1449&quot; value=\r\n=3D&quot;+18597571449&quot; target=3D&quot;_blank&quot;&gt;+1.859.757.1449&lt;/a&gt;&lt;br&gt;skype: mca.amund=\r\nsen&lt;br&gt;&lt;a href=3D&quot;http://amundsen.com/blog/&quot; target=3D&quot;_blank&quot;&gt;http://amund=\r\nsen.com/blog/&lt;/a&gt;&lt;br&gt;\n&lt;a href=3D&quot;http://twitter.com/mamund&quot; target=3D&quot;_blan=\r\nk&quot;&gt;http://twitter.com/mamund&lt;/a&gt;&lt;br&gt;\n\n&lt;a href=3D&quot;https://github.com/mamund&quot;=\r\n target=3D&quot;_blank&quot;&gt;https://github.com/mamund&lt;/a&gt;&lt;br&gt;&lt;a href=3D&quot;http://www.l=\r\ninkedin.com/in/mikeamundsen&quot; target=3D&quot;_blank&quot;&gt;http://www.linkedin.com/in/m=\r\nikeamundsen&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div class=3D&quot;h5&quot;&gt;&lt;d=\r\niv class=3D&quot;gmail_quote&quot;&gt;On Sun, Apr 21, 2013 at 1:12 PM, Brian Craft &lt;span=\r\n dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:craft.brian@...&quot; target=3D&quot;_blank&quot;=\r\n&gt;craft.brian@...&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;\n&lt;blockquote class=3D&quot;gmail=\r\n_quote&quot; style=3D&quot;margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:=\r\n1ex&quot;&gt;\n\n&lt;div dir=3D&quot;ltr&quot;&gt;Storing session information isn&#39;t negotiable, a=\r\nnd is orthogonal to API design. For example, no one sits down to design an =\r\nAPI and says &quot;Oh, a restful API is stateless, so I can&#39;t use HTTPS=\r\n, because it stores session state on the server.&quot; The API design occur=\r\ns independent of the statefulness of the communication, which is dictated =\r\n=A0by security concerns. =A0And the API can be redeployed without change to=\r\n HTTP, so the statefulness had no bearing on it.&lt;div&gt;\n\n\n\n&lt;br&gt;&lt;/div&gt;&lt;div&gt;The=\r\n FTP example is more enlightening. =A0It&#39;s only slightly different than=\r\n the &quot;query by POST&quot; technique that is said to be RESTful. The ma=\r\nin difference is that in &quot;query by POST&quot; an id for the query is r=\r\neturned by the server. So in the FTP example, if the server returned an id =\r\nfor the target directory of a &quot;cd&quot;, and future requests reference=\r\nd this id, would it then be &quot;stateless&quot; and &quot;RESTful&quot;? =\r\nAnd if so, how does that jibe with the claims in the dissertation that stat=\r\nelessness means &quot;session state is kept entirely on the client&quot;, a=\r\nnd &quot;Scalability is improved because not having to store state between =\r\nrequests allows the server component to quickly free resources and further =\r\nsimplifies implementation.&quot; The server does, in fact, =A0store and man=\r\nage resources for the session.&lt;/div&gt;\n\n\n\n&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;div class=3D&quot;gmail=\r\n_extra&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;div class=3D&quot;gmail_quote&quot;&gt;On Sat, Apr 20, 2013 at 4:51 PM,=\r\n mca &lt;span dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:mca@...&quot; target=3D&quot;_b=\r\nlank&quot;&gt;mca@...&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;\n\n\n&lt;blockquote class=3D&quot;gma=\r\nil_quote&quot; style=3D&quot;margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-lef=\r\nt:1ex&quot;&gt;\n&lt;div dir=3D&quot;ltr&quot;&gt;&lt;font face=3D&quot;arial, helvetica, sans-serif&quot;&gt;Fieldi=\r\nng&#39;s definition of stateless is:&lt;/font&gt;&lt;div&gt;&lt;font face=3D&quot;arial, helvet=\r\nica, sans-serif&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=3D&quot;arial, helvetica, sans=\r\n-serif&quot;&gt;&quot;[C]&lt;span&gt;ommunication must be stateless in nature ...&lt;/span&gt;&lt;=\r\nspan&gt;=A0such that each request from client to server must contain all of th=\r\ne information necessary to understand the request, and cannot take advantag=\r\ne of any stored context on the server.&quot;[1]&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;\n\n\n\n\n\n&lt;d=\r\niv&gt;&lt;span&gt;&lt;font face=3D&quot;arial, helvetica, sans-serif&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/span&gt;&lt;/di=\r\nv&gt;&lt;div&gt;&lt;font color=3D&quot;#000000&quot; face=3D&quot;arial, helvetica, sans-serif&quot;&gt;This c=\r\nonstraint is not about how resources state is changed on the server (client=\r\ns send representations to the server) or how application state changed on t=\r\nhe client (servers send representations to the client). Instead, this const=\r\nraint is about the nature of the messages (representations via entity-bodie=\r\ns + metadata via headers) that are sent between client and server when chan=\r\nging each other&#39;s state.&lt;/font&gt;&lt;/div&gt;\n\n\n\n\n\n&lt;div&gt;&lt;font color=3D&quot;#000000&quot;=\r\n face=3D&quot;arial, helvetica, sans-serif&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=3D=\r\n&quot;#000000&quot; face=3D&quot;arial, helvetica, sans-serif&quot;&gt;Each message stands alone a=\r\nnd does not depend upon previous messages.=A0&lt;/font&gt;&lt;/div&gt;\n\n\n\n\n\n&lt;div&gt;&lt;font =\r\ncolor=3D&quot;#000000&quot; face=3D&quot;arial, helvetica, sans-serif&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;d=\r\niv&gt;&lt;snip&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;div dir=3D&quot;ltr&quot; style=3D&quot;font-family:arial,=\r\nsans-serif;font-size:12.727272033691406px&quot;&gt;Perhaps to clarify what is meant=\r\n in REST by &quot;stateless&quot; someone could give examples of things tha=\r\nt *aren&#39;t* &quot;stateless&quot;, and contrast them to REST.&lt;/div&gt;\n\n\n\n\n=\r\n\n&lt;/div&gt;&lt;div style=3D&quot;font-family:arial,sans-serif;font-size:12.727272033691=\r\n406px&quot;&gt;&lt;/snip&gt;&lt;/div&gt;&lt;div style=3D&quot;font-family:arial,sans-serif;font-s=\r\nize:12.727272033691406px&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=3D&quot;font-family:arial,sans-se=\r\nrif;font-size:12.727272033691406px&quot;&gt;\n\n\n\n\n\nHTTP servers that maintain persis=\r\ntent session state for each client during the life of the client-server int=\r\neraction set are not stateless.=A0&lt;/div&gt;&lt;div style=3D&quot;font-family:arial,san=\r\ns-serif;font-size:12.727272033691406px&quot;&gt;&lt;br&gt;\n\n\n\n\n\n&lt;/div&gt;&lt;div style=3D&quot;font-=\r\nfamily:arial,sans-serif;font-size:12.727272033691406px&quot;&gt;FTP servers that al=\r\nlow clients to change directories relative to the results of a directory ch=\r\nange in a previous request=A0(cd ../..)=A0are not stateless.=A0&lt;/div&gt;\n\n\n\n\n\n=\r\n&lt;div style=3D&quot;font-family:arial,sans-serif;font-size:12.727272033691406px&quot;&gt;=\r\n&lt;br&gt;&lt;/div&gt;&lt;div style=3D&quot;font-family:arial,sans-serif;font-size:12.727272033=\r\n691406px&quot;&gt;Hopefully, this gives you some helpful ideas.=A0&lt;/div&gt;&lt;div style=\r\n=3D&quot;font-family:arial,sans-serif;font-size:12.727272033691406px&quot;&gt;\n\n\n\n\n\n&lt;br&gt;=\r\n&lt;/div&gt;&lt;div style=3D&quot;font-family:arial,sans-serif;font-size:12.7272720336914=\r\n06px&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=3D&quot;font-family:arial,sans-serif;font-size:12.727=\r\n272033691406px&quot;&gt;[1]=A0&lt;a href=3D&quot;http://www.ics.uci.edu/~fielding/pubs/diss=\r\nertation/rest_arch_style.htm#sec_5_1_3&quot; style=3D&quot;font-family:arial;font-siz=\r\ne:small&quot; target=3D&quot;_blank&quot;&gt;http://www.ics.uci.edu/~fielding/pubs/dissertati=\r\non/rest_arch_style.htm#sec_5_1_3&lt;/a&gt;&lt;/div&gt;\n\n\n\n\n\n&lt;div style=3D&quot;font-family:a=\r\nrial,sans-serif;font-size:12.727272033691406px&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/=\r\ndiv&gt;&lt;/div&gt;&lt;div class=3D&quot;gmail_extra&quot;&gt;&lt;br clear=3D&quot;all&quot;&gt;&lt;div&gt;mca&lt;div&gt;&lt;a href=\r\n=3D&quot;tel:%2B1.859.757.1449&quot; value=3D&quot;+18597571449&quot; target=3D&quot;_blank&quot;&gt;+1.859.=\r\n757.1449&lt;/a&gt;&lt;br&gt;\n\n\n\nskype: mca.amundsen&lt;br&gt;&lt;a href=3D&quot;http://amundsen.com/b=\r\nlog/&quot; target=3D&quot;_blank&quot;&gt;http://amundsen.com/blog/&lt;/a&gt;&lt;br&gt;\n\n&lt;a href=3D&quot;http:=\r\n//twitter.com/mamund&quot; target=3D&quot;_blank&quot;&gt;http://twitter.com/mamund&lt;/a&gt;&lt;br&gt;&lt;a=\r\n href=3D&quot;https://github.com/mamund&quot; target=3D&quot;_blank&quot;&gt;https://github.com/ma=\r\nmund&lt;/a&gt;&lt;br&gt;&lt;a href=3D&quot;http://www.linkedin.com/in/mikeamundsen&quot; target=3D&quot;_=\r\nblank&quot;&gt;http://www.linkedin.com/in/mikeamundsen&lt;/a&gt;&lt;br&gt;\n\n\n\n\n\n&lt;br&gt;&lt;/div&gt;&lt;/div=\r\n&gt;\n&lt;br&gt;&lt;br&gt;&lt;div class=3D&quot;gmail_quote&quot;&gt;&lt;div&gt;&lt;div&gt;On Sat, Apr 20, 2013 at 10:3=\r\n3 AM, Brian Craft &lt;span dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:craft.brian@gmail=\r\n.com&quot; target=3D&quot;_blank&quot;&gt;craft.brian@...&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;\n&lt;/d=\r\niv&gt;&lt;/div&gt;&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;margin:0 0 0 .8ex;borde=\r\nr-left:1px #ccc solid;padding-left:1ex&quot;&gt;\n\n\n\n\n\n\n\n\n        \n\n\n\n\n&lt;div&gt;&lt;div&gt;&lt;di=\r\nv&gt;\n\n\n\n\n\n&lt;br&gt;&lt;br&gt;\n\n\n\n\n&lt;div dir=3D&quot;ltr&quot;&gt;&lt;span style=3D&quot;font-family:arial,sans=\r\n-serif;font-size:12.727272033691406px&quot;&gt;I don&#39;t understand how the word =\r\n&quot;stateless&quot; is being used in REST. Obviously POST and PUT create =\r\nstate on the server. Obviously, requests after a state change depend on tha=\r\nt state change (e.g. by using a URL that was not valid before the state cha=\r\nnge).&lt;/span&gt;&lt;div style=3D&quot;font-family:arial,sans-serif;font-size:12.7272720=\r\n33691406px&quot;&gt;\n\n\n\n\n\n\n&lt;br&gt;&lt;/div&gt;&lt;div style=3D&quot;font-family:arial,sans-serif;fon=\r\nt-size:12.727272033691406px&quot;&gt;I can almost live with this usage of &quot;sta=\r\nteless&quot; for persistent objects stored on the server, because it can be=\r\n thought of as not being &quot;session state&quot;: it lasts longer than a =\r\nsession. But in any moderately complex web app, if you try to design a REST=\r\n API you will quickly hit GET size limits when doing complex queries. And t=\r\nhen the suggestion is to do something like POST the query parameters, retur=\r\nning a Location header for a &quot;query&quot; object that can be fetched w=\r\nith GET. How is that not storing session data on the server? How is that di=\r\nfferent from non-REST solutions?&lt;/div&gt;\n\n\n\n\n\n\n&lt;div style=3D&quot;font-family:aria=\r\nl,sans-serif;font-size:12.727272033691406px&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=3D&quot;font-f=\r\namily:arial,sans-serif;font-size:12.727272033691406px&quot;&gt;There are three obvi=\r\nous differences between POSTing a query and just generically using POST ins=\r\ntead of GET. POSTing a query requires two round-trips to the server, bad fo=\r\nr latency. POSTing a query and using a Location header limits the response =\r\nto the creation of a single object, which is fine for 1990&#39;s full-page-=\r\nload design, but is unrealistic for any moderately complex ajax app, where =\r\nan API call will result in the creation of multiple objects (e.g. creating =\r\nrelated images). And POSTing a query requires the tracking of large numbers=\r\n of transient &quot;query&quot; objects, hugely complicating both client an=\r\nd server, the very thing REST is supposed to avoid.&lt;/div&gt;\n\n\n\n\n\n\n&lt;div style=\r\n=3D&quot;font-family:arial,sans-serif;font-size:12.727272033691406px&quot;&gt;&lt;br&gt;&lt;/div&gt;=\r\n&lt;div style=3D&quot;font-family:arial,sans-serif;font-size:12.727272033691406px&quot;&gt;=\r\nPerhaps to clarify what is meant in REST by &quot;stateless&quot; someone c=\r\nould give examples of things that *aren&#39;t* &quot;stateless&quot;, and c=\r\nontrast them to REST.&lt;/div&gt;\n\n\n\n\n\n\n&lt;/div&gt;\n\n\n\n\n\n\n&lt;br&gt;\n\n    \n    \n&lt;br&gt;\n\n\n\n\n&lt;di=\r\nv width=3D&quot;1&quot; style=3D&quot;color:white;clear:both&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n\n\n\n&lt;/bloc=\r\nkquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;\n&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;\n&lt;/div&gt;&lt;/div&gt;&lt;/blockqu=\r\note&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;\n\r\n--001a11c347be23c12604dae7a482--\r\n\n"}}
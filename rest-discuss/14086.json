{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":401876259,"authorName":"Will Hartung","from":"Will Hartung &lt;willh@...&gt;","profile":"gaminginparis","replyTo":"SENDER","senderId":"a2uRaD8nm0NlGmAo8alrfQzLrl3DFc5yARIgxAbGyDG17PAyutqlpfUQiCtVO0l4j2hW-Ht07u4lSHZMMFkOJ5TPVlujdcZiyg","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Multiple operations on the same ressource","postDate":"1260258722","msgId":14086,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDM5MTVjNjlkMDkxMjA3MjM1MnUyMGM5MDdjZXUzMWNjMzY2Y2YyN2IzMDc4QG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PDIzRTFBOUQ2MzYzRTRBMEU5RUU1OEJBOTQ4NjYxM0MwQEpyblBDPg==","referencesHeader":"PDIzRTFBOUQ2MzYzRTRBMEU5RUU1OEJBOTQ4NjYxM0MwQEpyblBDPg=="},"prevInTopic":14085,"nextInTopic":14087,"prevInTime":14085,"nextInTime":14087,"topicId":14083,"numMessagesInTopic":28,"msgSnippet":"... What does the scope of the change have to do with it? A change in the resource is a change in the resource. You can detect the change using an ","rawEmail":"Return-Path: &lt;willh@...&gt;\r\nX-Sender: willh@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 60905 invoked from network); 8 Dec 2009 07:52:04 -0000\r\nX-Received: from unknown (98.137.34.45)\n  by m5.grp.sp2.yahoo.com with QMQP; 8 Dec 2009 07:52:04 -0000\r\nX-Received: from unknown (HELO mail-fx0-f227.google.com) (209.85.220.227)\n  by mta2.grp.sp2.yahoo.com with SMTP; 8 Dec 2009 07:52:04 -0000\r\nX-Received: by fxm27 with SMTP id 27so5395593fxm.23\n        for &lt;rest-discuss@yahoogroups.com&gt;; Mon, 07 Dec 2009 23:52:03 -0800 (PST)\r\nMIME-Version: 1.0\r\nX-Received: by 10.239.237.77 with SMTP id i13mr751548hbp.198.1260258722929; Mon, \n\t07 Dec 2009 23:52:02 -0800 (PST)\r\nIn-Reply-To: &lt;23E1A9D6363E4A0E9EE58BA9486613C0@JrnPC&gt;\r\nReferences: &lt;23E1A9D6363E4A0E9EE58BA9486613C0@JrnPC&gt;\r\nDate: Mon, 7 Dec 2009 23:52:02 -0800\r\nMessage-ID: &lt;3915c69d0912072352u20c907ceu31cc366cf27b3078@...&gt;\r\nTo: =?ISO-8859-1?Q?J=F8rn_Wildt?= &lt;jw@...&gt;\r\nCc: rest-discuss@yahoogroups.com\r\nContent-Type: multipart/alternative; boundary=00163600d8b6815cbc047a32d99c\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Will Hartung &lt;willh@...&gt;\r\nSubject: Re: [rest-discuss] Multiple operations on the same ressource\r\nX-Yahoo-Group-Post: member; u=401876259; y=OjrU11v9UkC3qJq5h1EvBP6kUYzSvnjVi5b9ULQDULQXxRDMvsl0-A\r\nX-Yahoo-Profile: gaminginparis\r\n\r\n\r\n--00163600d8b6815cbc047a32d99c\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nOn Mon, Dec 7, 2009 at 9:50 PM, J=F8rn Wildt &lt;jw@...&gt; wrote:\n\n&gt;=\r\n For concurrency, versioning and other reasons we want to distingush these\n=\r\n&gt; three operations from each other. This means the client must make explici=\r\nt\n&gt; which operation it performs. It is not allowed to post the whole ressou=\r\nrce\n&gt; representation since this increases the risc of versioning conflicts =\r\nwhere\n&gt; two clients reads the same ressource, changes different properties,=\r\n and then\n&gt; posts the whole ressource back again, overwriting the changes d=\r\none by\n&gt; the other client.\n&gt;\n\nWhat does the scope of the change have to do =\r\nwith it? A change in the\nresource is a change in the resource. You can dete=\r\nct the change using an\nIf-Not-Modified header in HTTP, as one example, as a=\r\n mechanism of optimistic\nlocking. If the PUT fails (due to detection of the=\r\n change), you have the\noption of refetching the resource, making your chang=\r\nes again, and\nresubmitting or simply choosing to stomp on what happened bef=\r\nore. Obviously\nthe latter isn&#39;t a particularly good idea.\n\nThe nice part of=\r\n PUT/Refetch/Merge/PUT again is that it&#39;s pretty much\nguaranteed to work in=\r\n all cases. That is, in the end, the data looks like\nwhat you would expect =\r\nit to look like. You could use a more granular system\n(as Craig mentioned),=\r\n but the nut there is the problem doesn&#39;t go away. You\nSTILL have to (shoul=\r\nd) detect backend changes happening and handle it\nappropriately. You STILL =\r\nshould handle the optimistic locking scenario.\n\nBy doing it on the entire r=\r\nesource, you only have to do this once, rather\nthan with every granular cha=\r\nnge you wish to make.\n\nObviously the amount of activity on a resource will =\r\naffect what you want to\ndo. But, in truth, if a resource is especially &quot;hot=\r\n&quot;, where clients are\nconstantly racing to get things accomplished, you may =\r\nwell be better\nbreaking that resource up in to something more granular or r=\r\nethinking it to\neliminate the race conditions rather than relying on any ki=\r\nnd of\nlocking/control scheme.\n\n\n\n&gt; One solution is to switch on the posted =\r\ncontent type: if it&#39;s a &quot;password&quot;\n&gt; then do one thing, if it&#39;s a &quot;e-mail&quot; =\r\nthen do something else and so on. This\n&gt; although seems a bit like using th=\r\ne SOAP &quot;action&quot; header and tunneling\n&gt; everyhting through a POST.\n&gt;\n\nThis i=\r\ns RPC, not a resource system.\n\n\n&gt; Another solution is to have one sub-resso=\r\nurce for each operation, like for\n&gt; instance /users/1234/password, /users/1=\r\n234/email, /users/1234/address - now\n&gt; you know your operation by looking a=\r\nt the ressource your are posting to.\n&gt;\n\nBut you still have the locking issu=\r\ne anyway, as I mentioned before. The data\nis finer, more granular, so perha=\r\nps the overall impact will be less, but the\nproblem still remains.\n\nRegards=\r\n,\n\nWill Hartung\n(willh@...)\n\r\n--00163600d8b6815cbc047a32d99c\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nOn Mon, Dec 7, 2009 at 9:50 PM, J=F8rn Wildt=A0&lt;span dir=3D&quot;ltr&quot;&gt;&lt;&lt;a hre=\r\nf=3D&quot;mailto:jw@...&quot;&gt;jw@...&lt;/a&gt;&gt;&lt;/span&gt;=A0wrote:&lt;=\r\nbr&gt;&lt;div class=3D&quot;gmail_quote&quot;&gt;&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;ma=\r\nrgin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0.8ex; b=\r\norder-left-width: 1px; border-left-color: rgb(204, 204, 204); border-left-s=\r\ntyle: solid; padding-left: 1ex; &quot;&gt;\n&lt;div style=3D&quot;background-color: rgb(255,=\r\n 255, 255); &quot;&gt;&lt;span&gt;&lt;span class=3D&quot;Apple-style-span&quot; style=3D&quot;font-family: =\r\nArial; &quot;&gt;For concurrency, versioning and other reasons we want to distingus=\r\nh these three operations from each other. This means the client must make e=\r\nxplicit which operation it performs. It is not allowed to post the whole re=\r\nssource representation since this increases the risc of versioning conflict=\r\ns where two clients reads the same ressource, changes different properties,=\r\n and then posts the whole ressource back again, overwriting the changes don=\r\ne by the=A0other client.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;\n&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;d=\r\niv&gt;What does the scope of the change have to do with it? A change in the re=\r\nsource is a change in the resource. You can detect the change using an If-N=\r\not-Modified header in HTTP, as one example, as a mechanism of optimistic lo=\r\ncking. If the PUT fails (due to detection of the change), you have the opti=\r\non of refetching the resource, making your changes again, and resubmitting =\r\nor simply choosing to stomp on what happened before. Obviously the latter i=\r\nsn&#39;t a particularly good idea.&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The nice part =\r\nof PUT/Refetch/Merge/PUT again is that it&#39;s pretty much guaranteed to w=\r\nork in all cases. That is, in the end, the data looks like what you would e=\r\nxpect it to look like. You could use a more granular system (as Craig menti=\r\noned), but the nut there is the problem doesn&#39;t go away. You STILL have=\r\n to (should) detect backend changes happening and handle it appropriately. =\r\nYou STILL should handle the optimistic locking scenario.&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/d=\r\niv&gt;&lt;div&gt;By doing it on the entire resource, you only have to do this once, =\r\nrather than with every granular change you wish to make.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/di=\r\nv&gt;&lt;div&gt;Obviously the amount of activity on a resource will affect what you =\r\nwant to do. But, in truth, if a resource is especially &quot;hot&quot;, whe=\r\nre clients are constantly racing to get things accomplished, you may well b=\r\ne better breaking that resource up in to something more granular or rethink=\r\ning it to eliminate the race conditions rather than relying on any kind of =\r\nlocking/control scheme.&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;=A0&lt;/div&gt;&lt;blockquote clas=\r\ns=3D&quot;gmail_quote&quot; style=3D&quot;margin-top: 0px; margin-right: 0px; margin-botto=\r\nm: 0px; margin-left: 0.8ex; border-left-width: 1px; border-left-color: rgb(=\r\n204, 204, 204); border-left-style: solid; padding-left: 1ex; &quot;&gt;\n&lt;div style=\r\n=3D&quot;background-color: rgb(255, 255, 255); &quot;&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;font size=\r\n=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&lt;/font&gt;&lt;span class=3D&quot;Apple-style-span&quot; style=3D&quot;font=\r\n-family: Arial; &quot;&gt;One solution is to switch on the posted content type: if =\r\nit&#39;s a &quot;password&quot; then do one thing, if it&#39;s a &quot;e-ma=\r\nil&quot; then do something else and so on. This although seems a bit like u=\r\nsing the SOAP &quot;action&quot; header and tunneling everyhting through a =\r\nPOST.&lt;/span&gt;&lt;/div&gt;\n&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div=\r\n&gt;This is RPC, not a resource system.&lt;/div&gt;&lt;div&gt;=A0&lt;/div&gt;&lt;blockquote class=\r\n=3D&quot;gmail_quote&quot; style=3D&quot;margin-top: 0px; margin-right: 0px; margin-bottom=\r\n: 0px; margin-left: 0.8ex; border-left-width: 1px; border-left-color: rgb(2=\r\n04, 204, 204); border-left-style: solid; padding-left: 1ex; &quot;&gt;\n&lt;div style=\r\n=3D&quot;background-color: rgb(255, 255, 255); &quot;&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;font size=\r\n=3D&quot;2&quot; face=3D&quot;Arial&quot;&gt;&lt;/font&gt;&lt;span class=3D&quot;Apple-style-span&quot; style=3D&quot;font=\r\n-family: Arial; &quot;&gt;Another solution is to have one sub-ressource for each op=\r\neration, like for instance /users/1234/password, /users/1234/email, /users/=\r\n1234/address - now you know your operation by looking at the ressource your=\r\n are posting to.&lt;/span&gt;&lt;/div&gt;\n&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br=\r\n&gt;&lt;/div&gt;&lt;div&gt;But you still have the locking issue anyway, as I mentioned bef=\r\nore. The data is finer, more granular, so perhaps the overall impact will b=\r\ne less, but the problem still remains.&lt;/div&gt;\n&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Regards,&lt;/=\r\ndiv&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Will Hartung&lt;/div&gt;&lt;div&gt;(&lt;a href=3D&quot;mailto:willh@mir=\r\nthcorp.com&quot;&gt;willh@...&lt;/a&gt;)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;\n\r\n--00163600d8b6815cbc047a32d99c--\r\n\n"}}
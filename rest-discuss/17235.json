{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":465410965,"authorName":"Nathan","from":"Nathan &lt;nathan@...&gt;","profile":"nathanrixham","replyTo":"SENDER","senderId":"_Dc6_dYBD8IYr_zDdtx1nKLPg3AS8HE2NpAVKaUZOzUNHXTV4sycrgLBIc6Awi-Df6_oFaxRw6SqYdjedRTgGw","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Feedback on implementing client side HTTP caching","postDate":"1296059443","msgId":17235,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDRENDA0QzMzLjgwMzA4MDhAd2VicjMub3JnPg==","inReplyToHeader":"PDg4MTU0ODVFLUZENEQtNDRCMC05QURGLUZDNkFDQjQ4RUU5RUBzdWJidS5vcmc+","referencesHeader":"PEFBTkxrVGltPVhDcFVOeXlrZnJEV2RSdlpLSmFnVTBndllkTXpLTGM5Q2tKVEBtYWlsLmdtYWlsLmNvbT4gPEFBTkxrVGlrMS1yRzZLQjdxc2pWZUZEbnlwdWdUdmQzZWZTQjk9OGJLeFZtVUBtYWlsLmdtYWlsLmNvbT4gPEE2NDYzMDcwLTMzNEItNEYwRi04QTVBLTg4MDZBRkZCMkYwMUBzdWJidS5vcmc+IDw0RDNGODlBNy42MDkwNTA2QHdlYnIzLm9yZz4gPDg4MTU0ODVFLUZENEQtNDRCMC05QURGLUZDNkFDQjQ4RUU5RUBzdWJidS5vcmc+"},"prevInTopic":17234,"nextInTopic":17236,"prevInTime":17234,"nextInTime":17236,"topicId":17219,"numMessagesInTopic":22,"msgSnippet":"... In that case, sorry, but I have to disagree. The concept of client+cache is pretty fundamental to the REST style, and mentioned repeatedly throughout the","rawEmail":"Return-Path: &lt;nathan@...&gt;\r\nX-Sender: nathan@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 58286 invoked from network); 26 Jan 2011 16:31:13 -0000\r\nX-Received: from unknown (66.196.94.107)\n  by m16.grp.re1.yahoo.com with QMQP; 26 Jan 2011 16:31:13 -0000\r\nX-Received: from unknown (HELO smtpauth02.prod.mesa1.secureserver.net) (64.202.165.182)\n  by mta3.grp.re1.yahoo.com with SMTP; 26 Jan 2011 16:31:13 -0000\r\nX-Received: (qmail 7826 invoked from network); 26 Jan 2011 16:31:11 -0000\r\nX-Received: from unknown (217.42.204.134)\n  by smtpauth02.prod.mesa1.secureserver.net (64.202.165.182) with ESMTP; 26 Jan 2011 16:31:10 -0000\r\nMessage-ID: &lt;4D404C33.8030808@...&gt;\r\nDate: Wed, 26 Jan 2011 16:30:43 +0000\r\nOrganization: webr3\r\nUser-Agent: Thunderbird 2.0.0.24 (Windows/20100228)\r\nMIME-Version: 1.0\r\nTo: Subbu Allamaraju &lt;subbu@...&gt;\r\nCc: Erlend Hamnaberg &lt;ngarthl@...&gt;, \n Sidu Ponnappa &lt;lorddaemon@...&gt;,\n rest-discuss@yahoogroups.com\r\nReferences: &lt;AANLkTim=XCpUNyykfrDWdRvZKJagU0gvYdMzKLc9CkJT@...&gt; &lt;AANLkTik1-rG6KB7qsjVeFDnypugTvd3efSB9=8bKxVmU@...&gt; &lt;A6463070-334B-4F0F-8A5A-8806AFFB2F01@...&gt; &lt;4D3F89A7.6090506@...&gt; &lt;8815485E-FD4D-44B0-9ADF-FC6ACB48EE9E@...&gt;\r\nIn-Reply-To: &lt;8815485E-FD4D-44B0-9ADF-FC6ACB48EE9E@...&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nFrom: Nathan &lt;nathan@...&gt;\r\nReply-To: nathan@...\r\nSubject: Re: [rest-discuss] Feedback on implementing client side HTTP caching\r\nX-Yahoo-Group-Post: member; u=465410965; y=vYxBd-ywgqPZOFRR7tiFzdEdVqWGbba1FyiPZrPMXBtWhU-83FXH\r\nX-Yahoo-Profile: nathanrixham\r\n\r\nSubbu Allamaraju wrote:\n&gt; On Jan 25, 2011, at 6:40 PM, Nathan wrote:\n&gt; \n&gt;&gt; Subbu Allamaraju wrote:\n&gt;&gt;&gt; httpcache4j illustrates the wrong way to do HTTP caching. Clients should not have to say things like\n&gt;&gt;&gt; HTTPCache cache = new HTTPCache(\n&gt;&gt;&gt;  new MemoryCacheStorage(),\n&gt;&gt;&gt;  HTTPClientResponseResolver.createMultithreadedInstance()\n&gt;&gt;&gt; );\n&gt;&gt;&gt; response = cache.doCachedRequest(request);\n&gt;&gt;&gt; in their code. They would make regular HTTP requests (including appropriate headers), and a caching proxy can provide a cached response if available or forward the request to upstream servers if no cached response is found. In other words, the client would simply do\n&gt;&gt;&gt; response = request.doGet(); // pseudo code\n&gt;&gt;&gt; The point of the uniform interface is to let some intermediary along the network do the job.\n&gt;&gt; Just want to check I&#39;m reading you correctly, that client side caching should not be implemented, and one should instead lean on intermediaries along the network?\n&gt; \n&gt; It is the latter. There are of course exceptions where the client - as an agent like a browser - does it own caching.\n\nIn that case, sorry, but I have to disagree.\n\nThe concept of client+cache is pretty fundamental to the REST style, \nand mentioned repeatedly throughout the dissertation, even a tertiary \nglance at the text and figures should make this more than clear. \nSimilarly the HTTP specification(s) spend a significant amount of time \ndiscussing client / private caching, and catering for it (see \np4-conditional and p6-cache).\n\nHence why agents like the browsers, do their own caching.\n\nIt&#39;s very good practise to cache at the edges, every edge, including \nclient and server, and of course at intermediaries along the way; I \npersonally could not bring myself to suggest to anybody that creating \na client+cache is a bad idea, quite the opposite in fact, it&#39;s a \nwonderful idea.\n\nThat said, it is of course wise to take the design principals of the \nREST style and apply them to the design of your components, both \nclient and cache connectors should be hidden by an agent, exposing a \nnice interface to communicate - as Mike Kelly noted earlier with \nregards to XHR.\n\nI have to say that I can&#39;t find anything wrong with httpcache4j, it&#39;s \na good example of a client cache, but one would be wise to wrap it up \nin another layer / interface which makes the cache and client \nconnectors invisible to &quot;the end user&quot;, but then httpcache4j is one of \nthose connectors that you take, and wrap up inside your own agent, \neven if that agent is only intended to expose a nice programmable \ninterface for application developers to use (again, like XHR).\n\nBest,\n\nNathan\n\n"}}
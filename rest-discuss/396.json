{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":0,"authorName":"S. Alexander Jacobson","from":"&quot;S. Alexander Jacobson&quot; &lt;alex@...&gt;","replyTo":"SENDER","senderId":"_xE_6mxYudtGyQjsqxEFDqM_0oXfLsy4SUY61rpj2kNFfv7Ro79riYxt3wxXIq1dEzS226dRaCa2RRYnVYHWbi2AQGm0ArsKvLWU_g","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: Plan 9 explanation for Alex","postDate":"1012207737","msgId":396,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PFBpbmUuV05ULjQuNDMuMDIwMTI4MDM0MDE0MC4xNDAwLTEwMDAwMEBnYW5kb2xwaC5BU0dBUkQuam1zPg==","inReplyToHeader":"PDNDNTJGQTNGLjU1QzkyRUJGQGp1bXAubmV0Pg=="},"prevInTopic":340,"nextInTopic":398,"prevInTime":395,"nextInTime":397,"topicId":340,"numMessagesInTopic":6,"msgSnippet":"Ok.  You claim Plan9 modelled everything as files. Since namespaces are private.  One could equally claim that Plan9 modelled everything as messages to and","rawEmail":"Return-Path: &lt;alex@...&gt;\r\nX-Sender: alex@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_0_1_3); 28 Jan 2002 08:48:29 -0000\r\nReceived: (qmail 62188 invoked from network); 28 Jan 2002 08:48:26 -0000\r\nReceived: from unknown (216.115.97.171)\n  by m4.grp.snv.yahoo.com with QMQP; 28 Jan 2002 08:48:26 -0000\r\nReceived: from unknown (HELO mail.vo.com) (208.36.81.99)\n  by mta3.grp.snv.yahoo.com with SMTP; 28 Jan 2002 08:48:26 -0000\r\nReceived: from gandolph.ASGARD.jms (alexhome2 [66.108.152.69])\n\tby mail.vo.com (8.12.1/8.12.1) with ESMTP id g0S8lgFv015923\n\t(version=TLSv1/SSLv3 cipher=RC4-MD5 bits=128 verify=NO);\n\tMon, 28 Jan 2002 03:47:44 -0500\r\nDate: Mon, 28 Jan 2002 03:48:57 -0500 (Eastern Standard Time)\r\nTo: Jeff Bone &lt;jbone@...&gt;\r\nCc: jbone@..., Paul Prescod &lt;paul@...&gt;,\n   &lt;rest-discuss@yahoogroups.com&gt;\r\nSubject: Re: Plan 9 explanation for Alex\r\nIn-Reply-To: &lt;3C52FA3F.55C92EBF@...&gt;\r\nMessage-ID: &lt;Pine.WNT.4.43.0201280340140.1400-100000@...&gt;\r\nX-X-Sender: alex@...\r\nMIME-Version: 1.0\r\nContent-Type: TEXT/PLAIN; charset=US-ASCII\r\nFrom: &quot;S. Alexander Jacobson&quot; &lt;alex@...&gt;\r\nX-Yahoo-Group-Post: public\r\n\r\nOk.  You claim Plan9 modelled everything as files.\nSince namespaces are private.  One could equally\nclaim that Plan9 modelled everything as messages\nto and from file/device owners.\n\nIt doesn&#39;t sound like a file system.  It sounds\nmore like a message system in which the primitives\nwere:\n\n* send (aka write)\n* recieve/check for messages (aka read)\n\nThe big thing that I don&#39;t like about most file\nAPIs is that they are synchronous stopping your\nprocess while hardware catches up.  It is\nsemantically more elegant to represent all\nIO using asynch interfaces.\n\nIt sounds like Plan9 effectively achieved\nasynchrony because device owners accepted\nmessages from client processes and then handled\nthose messages in a separate process/thread.  The\nclients could then asynchronously check for\nmessages by reading the file.\n\nVery nice.  But I don&#39;t see why this is not the\nsame as sending email to some address and then\nchecking for email from that address.\n\n-Alex-\n\n\n___________________________________________________________________\nS. Alexander Jacobson                   i2x Media\n1-212-787-1914 voice                    1-603-288-1280 fax\n\n\n\n\nOn Sat, 26 Jan 2002, Jeff Bone wrote:\n&gt; The point of the Plan 9 anecdote is that it stands as an existance proof\n&gt; invalidating your claim that parameter passing to a procedure cannot be modeled as\n&gt; file IO.  Certainly almost anything --- and maybe *anything* --- that can be modeled\n&gt; as parameter passing to a procedure can be modeled as generic stream IO on a file /\n&gt; resource.\n&gt;\n&gt; Plan 9 an example of making various things --- including active &quot;data producing\n&gt; processes&quot; --- look like files.  The original idea of UNIX, broken by the\n&gt; introduction of sockets, was to make everything look like a file.  Plan 9 was an\n&gt; attempt by most of the original authors of UNIX to go back and push that concept to\n&gt; the limit, unifying everything as resources (files) in a single namespace sharing a\n&gt; single generic stream IO interface.\n&gt;\n&gt; I bring it up because it&#39;s a great example of how to do the *kind* of thing we&#39;re\n&gt; talking about here, albeit in a different namespace with a different generic\n&gt; interface.  It&#39;s a *great* case study, though;  I didn&#39;t really &quot;get&quot; REST until I\n&gt; started thinking about how things are modeled in Plan 9 as an analogy.  (Side note:\n&gt; in a private e-mail with Roy Fielding around the time I had my REST gestalt, I\n&gt; pointed out the Plan9 analogy;  he claimed that he&#39;d wished he&#39;d been more familiar\n&gt; with / had some citations for it a while back --- he apparently agreed with me and\n&gt; thought the analogy useful and appropriate.)\n&gt;\n&gt; &gt; but I am curious how resource synchornization\n&gt; &gt; works.  What happens when two apps try to\n&gt; &gt; write/read the /net/cs file?  Is it locked?\n&gt;\n&gt; In Plan 9, every process has a private view of the namespace.  For example:  8 1/2,\n&gt; the Plan 9 window system, represents the mouse as /dev/mouse, IIRC.  8 1/2 itself\n&gt; handles synchronization and acts as the multiplexer / demultiplexer for events\n&gt; generated by this device;  each process sees its own private version of /dev/mouse;\n&gt; a process which opens and reads this file will read a stream of only those events\n&gt; generated in the window in which the process is running.  In other words, mux and\n&gt; sync are generally handled in Plan 9 by whatever &quot;server&quot; presents a given service\n&gt; as a resource, in whatever manner is appropriate for that service.\n&gt;\n&gt; $0.02,\n&gt;\n&gt; jb\n&gt;\n&gt;\n\n\n\n"}}
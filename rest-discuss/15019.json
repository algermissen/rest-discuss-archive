{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":242972596,"authorName":"Jørn Wildt","from":"=?iso-8859-1?Q?J=F8rn_Wildt?= &lt;jw@...&gt;","profile":"jorn_lind_nielsen","replyTo":"SENDER","senderId":"jKGSrXEm-Qs0ZWymzmlG1lS9Ik9oiMyfEA4kcRUuEr2CjRJpajSFudquxIw58l_Eab3vtDcRT94eCrN-IklEY29AXmtG7LB-uYEYCHMaU8VMyoEA6cfwiPE","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Re: Thoughts about URLs for a REST driven website","postDate":"1268076382","msgId":15019,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDREMzY5ODlENEEzNTQzMENCOTRCNzY1OTRDREE2OTg5QEpyblBDPg==","inReplyToHeader":"PDIwMTAwMzA4MDcxMDE2LmY5Y2NhMGY2LmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4=","referencesHeader":"PDIwMTAwMzA4MDAxODU3LjE5OTVlNmYyLmVyaWNAYmlzb25zeXN0ZW1zLm5ldD4gPGhuMmIxNStycXJoQGVHcm91cHMuY29tPiA8MjAxMDAzMDgwNzEwMTYuZjljY2EwZjYuZXJpY0BiaXNvbnN5c3RlbXMubmV0Pg=="},"prevInTopic":15018,"nextInTopic":15027,"prevInTime":15018,"nextInTime":15020,"topicId":14978,"numMessagesInTopic":41,"msgSnippet":"... Yes, you won t have to reconfigure the browser client. But this may be one of the places where we disagree on what the client is. In my head I have a ","rawEmail":"Return-Path: &lt;jw@...&gt;\r\nX-Sender: jw@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 72243 invoked from network); 8 Mar 2010 19:30:49 -0000\r\nX-Received: from unknown (66.196.94.105)\n  by m13.grp.re1.yahoo.com with QMQP; 8 Mar 2010 19:30:49 -0000\r\nX-Received: from unknown (HELO cicero-fbr1.cybercity.dk) (212.242.40.5)\n  by mta1.grp.re1.yahoo.com with SMTP; 8 Mar 2010 19:30:49 -0000\r\nX-Received: from smtp1.cybercity.dk (smtp1.cybercity.dk [212.242.43.251])\n\tby cicero-fbr1.cybercity.dk (Postfix) with ESMTP id 144F43D25D2\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Mon,  8 Mar 2010 20:30:47 +0100 (CET)\r\nX-Received: from uf4.cybercity.dk (uf4.cybercity.dk [212.242.42.51])\n\tby smtp1.cybercity.dk (Postfix) with ESMTP id 74D18586843;\n\tMon,  8 Mar 2010 20:28:32 +0100 (CET)\r\nX-Received: from JrnPC (port439.ds1-aroe.adsl.cybercity.dk [212.242.220.134])\n\t(Authenticated sender: dsl164923)\n\tby uf4.cybercity.dk (Postfix) with ESMTPA id BCFF11328D9A;\n\tMon,  8 Mar 2010 20:25:34 +0100 (CET)\r\nMessage-ID: &lt;4D36989D4A35430CB94B76594CDA6989@JrnPC&gt;\r\nTo: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\r\nCc: &lt;rest-discuss@yahoogroups.com&gt;\r\nReferences: &lt;20100308001857.1995e6f2.eric@...&gt; &lt;hn2b15+rqrh@...&gt; &lt;20100308071016.f9cca0f6.eric@...&gt;\r\nIn-Reply-To: &lt;20100308071016.f9cca0f6.eric@...&gt;\r\nDate: Mon, 8 Mar 2010 20:26:22 +0100\r\nMIME-Version: 1.0\r\nContent-Type: text/plain;\n\tformat=flowed;\n\tcharset=&quot;iso-8859-1&quot;;\n\treply-type=original\r\nContent-Transfer-Encoding: 8bit\r\nX-Priority: 3\r\nX-MSMail-Priority: Normal\r\nX-Mailer: Microsoft Windows Mail 6.0.6002.18005\r\nX-MimeOLE: Produced By Microsoft MimeOLE V6.0.6002.18005\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: =?iso-8859-1?Q?J=F8rn_Wildt?= &lt;jw@...&gt;\r\nSubject: Re: [rest-discuss] Re: Thoughts about URLs for a REST driven website\r\nX-Yahoo-Group-Post: member; u=242972596; y=iPRU2k1sj6cgThBJ2uEoOHFH0zkEhDv2_s_IgDEPhkYH1iNsexQilrkFkt4\r\nX-Yahoo-Profile: jorn_lind_nielsen\r\n\r\n&gt; Whenever I come across the notion of &quot;Roy&#39;s REST&quot; I can&#39;t help but\n&gt; wonder, what other REST is there?\n\n:^)\n\n&gt;&gt; It&#39;s just that it is brittle and, as\n&gt;&gt; you say yourself, requires re-configuration of the front-end when the\n&gt;&gt; back-end changes.\n&gt; ...\n&gt; I said reconfigure the frontend, not reconfigure the client, though.\n\nYes, you won&#39;t have to reconfigure the browser client. But this may be one \nof the places where we disagree on what the &quot;client&quot; is. In my head I have a \npicture of a completely open back-end API. Open to the whole world that is. \nAnyone that can access the website can also access the REST API directly \ninstead. I want everybody to be able to write different and/or better \nfront-ends than I do. This means I don&#39;t have control over who consumes my \nback-end. In my scenario I have one REST API and a multitude of clients that \nuses it. One of these happens to be my own website.\n\n&gt; ... use an actual URI template from wiski.org ...\n&gt; You could do this, if you didn&#39;t mind adding complexity to support an\n&gt; optimization.  I&#39;m just trying to get the point across, that if you do\n&gt; so you shouldn&#39;t point to it and say, &quot;REST made me do it,&quot; because this\n&gt; notion is really neither here nor there as far as REST is concerned.\n\nOk.\n\n&gt; As with any REST development, I can&#39;t stress enough that you should only\n&gt; apply those REST constraints that bring about a benefit to your project,\n&gt; while leaving room to add constraints in the future, as the system\n&gt; scales to a point where they make sense in terms of cost-benefit.\n\nYeps. That makes sense. The more flexible solution is certainly more \nexpensive. Is it worth it? It depends. In my scenario with many different \nclients I believe it&#39;s worth it. I won&#39;t be able to tell all my clients that \nURL templates has changed unless I do something similar to the forms \nrequirement.\n\n&gt; The answer, even where REST constraints are involved, must make\n&gt; pragmatic sense to me -- the answer never comes down to REST dogma,\n&gt; only quantifiable benefits to the system.  I see none, in fact I see\n&gt; greater maintenance costs, so I&#39;ll let the hard-coding stand.\n\nUnfortunately, as a REST novice, I do not have experience enough with REST \nto really tell when it makes sense to use it or not. Well, maybe I do, but \nas newbies we often have to stick to the dogma since that is all we have. We \ndon&#39;t have the experience and understanding that tells us that a specific \npart of REST can be left out or must be respected.\n\nSo it often comes down to dogma due to uncertainty of what will happen if we \ndon&#39;t do everything stricly by the book. In this cases my starting point \nwas - what benefits do I loose or gain if don&#39;t shuffle the full resource \nURLs around. I think I got that covered now :-)\n\n&gt;&gt; 1) The official &quot;here can you find the specs&quot; kind of REST &quot;sitemap&quot;.\n&gt;\n&gt; This is exactly the opposite of what Roy means by, &quot;A REST API should be\n&gt; entered with no prior knowledge beyond the initial URI.&quot;\n\nThen I am lost again :-(\n\n&gt; If, given a URI for some resource in a system, I must consult some other \n&gt; &quot;sitemap&quot;\n&gt; resource before I can request another URI in the system, then the API\n&gt; is being driven by out-of-band knowledge, not hypertext.\n\nThis is not exactly what I am saying. You are _not_ &quot;given a URI for some \nresource in a system&quot;. You are given a simple identifier, a customer number, \nan order number, or a blog name. Not the complete URL. That &quot;sitemap&quot; tells \nthe client where it can find the search forms for those numbers or names. By \nlooking at the sitemap you can get a URL to the search form for customers. \nThat search form tells you, that by doing a GET on a certain URL (the \naction) and passing the customer number as &quot;&numer=...&quot;, you will get a \nresource describing the requested customer.\n\n/J�rn\n\n----- Original Message ----- \nFrom: &quot;Eric J. Bowman&quot; &lt;eric@...&gt;\nTo: &quot;Jorn Wildt&quot; &lt;jw@...&gt;\nCc: &lt;rest-discuss@yahoogroups.com&gt;\nSent: Monday, March 08, 2010 3:10 PM\nSubject: Re: [rest-discuss] Re: Thoughts about URLs for a REST driven \nwebsite\n\n\n&gt; &quot;Jorn Wildt&quot; wrote:\n&gt;&gt;\n&gt;&gt; Okay, so knowing the back-end URL format in the front-end is not\n&gt;&gt; unRESTful. Fine, I&#39;ll accept that it is not strickly unRESTful\n&gt;&gt; according to Roy&#39;s constraints.\n&gt;&gt;\n&gt;\n&gt; Whenever I come across the notion of &quot;Roy&#39;s REST&quot; I can&#39;t help but\n&gt; wonder, what other REST is there?  If you have to qualify your REST\n&gt; implementation as based on something other than Roy&#39;s constraints, then\n&gt; you probably don&#39;t have REST.  ;-)\n&gt;\n&gt;&gt;\n&gt;&gt; It&#39;s just that it is brittle and, as\n&gt;&gt; you say yourself, requires re-configuration of the front-end when the\n&gt;&gt; back-end changes. It simply anoys me: no one have ever told me to\n&gt;&gt; reconfigure my browser in order to lookup an ordernumber at Amazon,\n&gt;&gt; just because they changed their internal implementation and URL\n&gt;&gt; structure.\n&gt;&gt;\n&gt;\n&gt; I said reconfigure the frontend, not reconfigure the client, though.\n&gt; The interaction between charger and wiski.org is hidden from the client,\n&gt; which is requesting ISO date-string translation from charger.  The\n&gt; wiski.org backend can change completely without affecting user-agent\n&gt; interaction with the frontend.  The frontend simply needs a new mapping\n&gt; to the backend, this has no effect on the client (unless you&#39;ve embedded\n&gt; the backend URI in the request to the frontend).\n&gt;\n&gt;&gt;\n&gt;&gt; So neither solutions are perfect. What can we do instead?\n&gt;&gt;\n&gt;\n&gt; I don&#39;t see any imperfection there.  I&#39;ll humor you, though, and point\n&gt; out that I could write the /date service proxy on charger to use an\n&gt; actual URI template from wiski.org.  I could then change the URI\n&gt; allocation scheme on wiski.org, update its URI template, and the /date\n&gt; service proxy on charger would automatically use the new URI allocation.\n&gt;\n&gt; You could do this, if you didn&#39;t mind adding complexity to support an\n&gt; optimization.  I&#39;m just trying to get the point across, that if you do\n&gt; so you shouldn&#39;t point to it and say, &quot;REST made me do it,&quot; because this\n&gt; notion is really neither here nor there as far as REST is concerned.\n&gt;\n&gt; As with any REST development, I can&#39;t stress enough that you should only\n&gt; apply those REST constraints that bring about a benefit to your project,\n&gt; while leaving room to add constraints in the future, as the system\n&gt; scales to a point where they make sense in terms of cost-benefit.  This\n&gt; applies also, to any additional constraints you may wish to add.\n&gt;\n&gt; So the question would be, in my case, what benefit would I achieve by\n&gt; basing the system on a dynamic URI template instead of hard-coding?\n&gt; The answer, even where REST constraints are involved, must make\n&gt; pragmatic sense to me -- the answer never comes down to REST dogma,\n&gt; only quantifiable benefits to the system.  I see none, in fact I see\n&gt; greater maintenance costs, so I&#39;ll let the hard-coding stand.\n&gt;\n&gt; Your concerns are valid for clients interacting with frontends, but\n&gt; they don&#39;t extend to the communication between layers in a system.  The\n&gt; wiski.org /date service and charger&#39;s /date proxy are both RESTful, even\n&gt; if the communication between charger and wiski.org isn&#39;t hypertext\n&gt; driven -- the API is, taken as a whole, as are its constituent parts.\n&gt;\n&gt; I&#39;m perhaps overly-wordy in my explanation, it&#39;s just difficult for me\n&gt; to explain REST nuances to others, which come naturally to me for some\n&gt; reason... perhaps because I read Roy&#39;s thesis through twice each year,\n&gt; and refer to it regularly when engaged in REST development.\n&gt;\n&gt;&gt;\n&gt;&gt; &gt; The wiski.org\n&gt;&gt; &gt; /date service will eventually have an Xforms interface to describe\n&gt;&gt; &gt; the API -- a URI template won&#39;t do, because the number of days in\n&gt;&gt; &gt; February is algorithmic.  But, that doesn&#39;t mean a client of the\n&gt;&gt; &gt; API is required to be an Xforms client, or otherwise consume that\n&gt;&gt; &gt; form.\n&gt;&gt;\n&gt;&gt; Yes. Publishing search forms in the back-end solves most of the\n&gt;&gt; problems. Now my back-end has a way to instruct the front-end how to\n&gt;&gt; fetch the ATOM resource referenced externally by the simple string\n&gt;&gt; &quot;peter&quot;.\n&gt;&gt;\n&gt;\n&gt; Nuance, again.  Your back-end has a hypertext REST API which may be used\n&gt; to instruct generic user-agents how to interact with it, as well as to\n&gt; provide a self-documenting API which may be referenced by anyone\n&gt; developing a client specific to your API.  A client, i.e. the frontend,\n&gt; doesn&#39;t actually have to consume the hypertext -- all REST says is that\n&gt; the API must provide it.\n&gt;\n&gt; These are component implementation details, hidden behind the generic\n&gt; interface, and are thus out-of-scope to REST.  If you insist on applying\n&gt; some sort of constraint to component implementation, you can, but it\n&gt; isn&#39;t a REST constraint.  So, just as with any REST constraint, you&#39;ll\n&gt; need to evaluate its pros and cons -- except you can&#39;t do that by\n&gt; referring to REST since this constraint isn&#39;t in there.\n&gt;\n&gt;&gt;\n&gt;&gt; The same can be done programmatically in the front-end if just the\n&gt;&gt; back-end has a machine-readable search form. This adds my required\n&gt;&gt; flexibility at the cost of a bit more code in the front-end.\n&gt;&gt;\n&gt;\n&gt; If this is a real requirement of your system, fine.  If you&#39;re doing\n&gt; this to &quot;score REST points&quot;, don&#39;t -- there are none to be had.\n&gt;\n&gt;&gt;\n&gt;&gt; So what I am missing now is a standard format for publishing &quot;these\n&gt;&gt; are the ways you should access items using the REST API&quot; - in a way\n&gt;&gt; that can be parsed at runtime.\n&gt;&gt;\n&gt;\n&gt; I don&#39;t understand.  Hypertext is the engine of application state.  I\n&gt; refer you again to my demo site.  All XHTML representations link to one\n&gt; XSLT transformation.  That XSLT transformation instructs the client, at\n&gt; runtime, how and when to dereference the /date service -- when it\n&gt; encounters a unique-to-page ISO 8601 date string, the XSLT code calls\n&gt; this template:\n&gt;\n&gt; &lt;xsl:template name=&#39;date-service&#39;&gt;\n&gt; &lt;xsl:param name=&#39;iso-date&#39;/&gt;\n&gt; &lt;xsl:param name=&#39;date&#39; \n&gt; select=&quot;document(concat(&#39;../../date?iso=&#39;,$iso-date))//xht:p&quot;/&gt;\n&gt; &lt;xsl:value-of select=&quot;concat($date/xht:abbr[1]/@title,&#39;, &#39;)&quot;/&gt;\n&gt; &lt;xsl:value-of select=&quot;concat($date/xht:abbr[2]/@title,&#39; &#39;)&quot;/&gt;\n&gt; &lt;xsl:value-of select=&quot;concat($date/xht:abbr[3],&#39; &#39;)&quot;/&gt;\n&gt; &lt;xsl:value-of select=&#39;$date/xht:span&#39;/&gt;\n&gt; &lt;/xsl:template&gt;\n&gt;\n&gt; I don&#39;t know what a &quot;standard format&quot; would be, all I know is that\n&gt; there are many standard hypertext formats which may be employed to\n&gt; instruct clients how to use a REST API.  This is but one example, using\n&gt; standard media types -- charger sends some hypertext (XSLT in this\n&gt; case) which describes the use of a simple REST Web service, to replace\n&gt; one string with another of a specific format.\n&gt;\n&gt;&gt;\n&gt;&gt; 1) The official &quot;here can you find the specs&quot; kind of REST &quot;sitemap&quot;.\n&gt;&gt;\n&gt;\n&gt; This is exactly the opposite of what Roy means by, &quot;A REST API should be\n&gt; entered with no prior knowledge beyond the initial URI.&quot;  If, given a\n&gt; URI for some resource in a system, I must consult some other &quot;sitemap&quot;\n&gt; resource before I can request another URI in the system, then the API\n&gt; is being driven by out-of-band knowledge, not hypertext.\n&gt;\n&gt; While my /date service currently lacks rel=&#39;up&#39;, that will eventually\n&gt; link all representations to the service document, i.e. an Xforms\n&gt; interface.  For now, though, regardless of entry point, any client that\n&gt; groks rel=&#39;next&#39; and rel=&#39;prev&#39; as Link headers can traverse the entire\n&gt; service output.  IOW, the entire service is accessible through each and\n&gt; every URI, this doesn&#39;t mean each and every URI needs a &lt;form&gt; of some\n&gt; sort.  HTH.\n&gt;\n&gt; -Eric \n\n\n"}}
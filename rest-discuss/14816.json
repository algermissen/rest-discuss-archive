{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":289191104,"authorName":"Jan Algermissen","from":"Jan Algermissen &lt;algermissen1971@...&gt;","profile":"algermissen1971","replyTo":"SENDER","senderId":"bHwME8uZCYZXov5stpzV528MuhMa23HDbIgWh4uJf5ZG_jAYu5_lrmf_DejFhYrKj_xVcykQM9AbF-LEQBVv-f6NasDn1V9iSLYUXjMhdEU","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] HATEOAS and Cache","postDate":"1266567511","msgId":14816,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEFFNzQ5RTdDLTA3REYtNDU5MC05Q0U3LUQ2MjRFQjAzOThGM0BtYWMuY29tPg==","inReplyToHeader":"PDM4MjQxMEZGLTY2QTYtNDYwNi05OEFELUVCNTA5RjM1QzhCNkBnbWFpbC5jb20+","referencesHeader":"PDc5Q0ZDOThCLTk5MEMtNDkwNC1CRUE1LUEzN0NCMTNGOUIyQUBnbWFpbC5jb20+IDw5RTRDMDE4Qi01RTEzLTQ0REQtOEFCRC0wMUFCMkExNEQwNTRAbWFjLmNvbT4gPDg1NTgyNTM1LUFCQzEtNDcxNi05Q0I0LUFDMjU1NjlBNzdBOEBtYWMuY29tPiA8QTkwRTBDMDktMjA2Ni00QzMyLThCREUtOTMxNDg4MTY0QUE2QGdtYWlsLmNvbT4gPEQwRUYxRjY0LUIyNDktNEI5QS1BODIyLTkzOTMwQUZFOUEyRkBtYWMuY29tPiA8MzgyNDEwRkYtNjZBNi00NjA2LTk4QUQtRUI1MDlGMzVDOEI2QGdtYWlsLmNvbT4="},"prevInTopic":14815,"nextInTopic":14817,"prevInTime":14815,"nextInTime":14817,"topicId":14806,"numMessagesInTopic":17,"msgSnippet":"... There might be several types you put in the accept header. The client should handle any matching response. ... Yes. However, I like to emphasize that with","rawEmail":"Return-Path: &lt;algermissen1971@...&gt;\r\nX-Sender: algermissen1971@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 58580 invoked from network); 19 Feb 2010 08:18:37 -0000\r\nX-Received: from unknown (98.137.34.46)\n  by m10.grp.re1.yahoo.com with QMQP; 19 Feb 2010 08:18:37 -0000\r\nX-Received: from unknown (HELO asmtpout026.mac.com) (17.148.16.101)\n  by mta3.grp.sp2.yahoo.com with SMTP; 19 Feb 2010 08:18:37 -0000\r\nMIME-version: 1.0\r\nContent-transfer-encoding: 7BIT\r\nContent-type: text/plain; charset=us-ascii\r\nX-Received: from [192.168.2.102] ([84.144.85.136])\n by asmtp026.mac.com (Sun Java(tm) System Messaging Server 6.3-8.01 (built Dec\n 16 2008; 32bit)) with ESMTPSA id &lt;0KY2008OFXQWKW10@...&gt; for\n rest-discuss@yahoogroups.com; Fri, 19 Feb 2010 00:18:37 -0800 (PST)\r\nX-Proofpoint-Spam-Details: rule=notspam policy=default score=0 spamscore=0\n ipscore=0 phishscore=0 bulkscore=0 adultscore=0 classifier=spam adjust=0\n reason=mlx engine=5.0.0-0908210000 definitions=main-1002190002\r\nIn-reply-to: &lt;382410FF-66A6-4606-98AD-EB509F35C8B6@...&gt;\r\nDate: Fri, 19 Feb 2010 09:18:31 +0100\r\nCc: REST Discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nMessage-id: &lt;AE749E7C-07DF-4590-9CE7-D624EB0398F3@...&gt;\r\nReferences: &lt;79CFC98B-990C-4904-BEA5-A37CB13F9B2A@...&gt;\n &lt;9E4C018B-5E13-44DD-8ABD-01AB2A14D054@...&gt;\n &lt;85582535-ABC1-4716-9CB4-AC25569A77A8@...&gt;\n &lt;A90E0C09-2066-4C32-8BDE-931488164AA6@...&gt;\n &lt;D0EF1F64-B249-4B9A-A822-93930AFE9A2F@...&gt;\n &lt;382410FF-66A6-4606-98AD-EB509F35C8B6@...&gt;\r\nTo: Jan Vincent &lt;jvliwanag@...&gt;\r\nX-Mailer: Apple Mail (2.1077)\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Jan Algermissen &lt;algermissen1971@...&gt;\r\nSubject: Re: [rest-discuss] HATEOAS and Cache\r\nX-Yahoo-Group-Post: member; u=289191104; y=_0U1Wj81DdSVTWcfQx0tLXmI8Ljvc1HUn7sxssbthci_QnNGmd0srqhB\r\nX-Yahoo-Profile: algermissen1971\r\n\r\n\nOn Feb 19, 2010, at 9:02 AM, Jan Vincent wrote:\n\n&gt; \n&gt; On Feb 19, 2010, at 3:36 PM, Jan Algermissen wrote:\n&gt; \n&gt;&gt; \n&gt;&gt; On Feb 19, 2010, at 8:19 AM, Jan Vincent wrote:\n&gt;&gt; \n&gt;&gt;&gt; True enough,\n&gt;&gt;&gt; \n&gt;&gt;&gt; Doing:\n&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; from(&quot;/&quot;).follow( &quot;#users_link&quot; ).fill_form( &quot;search_user&quot; , {&quot;id&quot;: &quot;someid&quot;}).follow( &quot;#user_link&quot; ).follow( &quot;#friends_ link&quot;)\n&gt;&gt;&gt; \n&gt;&gt;&gt; Doesn&#39;t cut it since it assumes specific responses from the server. But the point of HATEOAS I believe is that links are indeed provided for me to traverse through.\n&gt;&gt; \n&gt;&gt; Yes, but you can make no assumption\n&gt;&gt; a) about the media type returned\n&gt;&gt; b) about what links, forms etc. you will find in there\n&gt; \n&gt; Can&#39;t I? If the server acts right, it should recognize my Accept header.\n\nThere might be several types you put in the accept header. The client should handle any matching response.\n\n&gt; If it doesn&#39;t have the Content-Type that I recognize, then my client gives up. It simply doesn&#39;t know how to understand the new Content-Type. Since the client is preprogrammed, it&#39;s one limitation I should live with.\n\nYes. However, I like to emphasize that with REST it des not stop there because you do not just have &#39;broken communication&#39; but in fact still an ongoing communication (a benefit of uniform status codes) and it makes sense to think about leveraging that situation. You could, for example, have the client open an RFC ticket in some helpdesk system to trigger an ASAP update of the client capabilities. I consider that different from dumping a stack trace in the logs and calling a developer with &#39;uhh - something is wrong&#39;.\n\nTechnically, yes - at some point you just need to give up.\n\n&gt; \n&gt;&gt; \n&gt;&gt;&gt; I may instead represent this as some form of tree, perhaps something like:\n&gt;&gt;&gt; \n&gt;&gt;&gt; from(&quot;/&quot;).follow(&quot;#users_link&quot; ).handle({\n&gt;&gt;&gt; 200: fill_form(&quot;search_user&quot; , ...)...\n&gt;&gt;&gt; 404: ...\n&gt;&gt;&gt; })\n&gt;&gt; \n&gt;&gt; The 200 still does not mean that the form will be there (or that the response will be in a media type that you expect)\n&gt;&gt; Also, what about 201,202,303,204.... you have to handle all of those, too. ... yes, the REST client side is hard ...\n&gt;&gt; \n&gt; If I do a GET, i should expect a 200 if it exists, 404 otherwise. I can choose logical defaults for 3xx series possibly make it transparent to the programmer unless he chooses to do so. 5xx series, well, that would raise exception. Same with PUT, POST, etc, there are certain status codes the client should expect, some status codes wherein default action would be ok, and the rest, that simply won&#39;t make sense (i.e., a 201 on a GET request).\n\nYes. I wanted to stress the point that you should handle those codes that make sense (202 on GET also, IMO). But as long as you think along the lines you describe that&#39;s ok I guess.\n\n\n&gt;&gt; \n&gt;&gt;&gt; \n&gt;&gt;&gt; On the other hand, I would rather do the previous one and handle exceptions instead.\n&gt;&gt; \n&gt;&gt; Well, you can, of course. But you must understand that what you handle as exceptions does not mean the server behaves incorrect because any valid HTTP response is part of the contract. The exceptions would essentially only handle the client side &#39;broken&#39; implementation.\n&gt;&gt; \n&gt;&gt;&gt; The client should know some information about the server&#39;s state machine right?\n&gt;&gt; \n&gt;&gt; No! That is the essence of the hypermedia constraint. It must look at each steady state in isolation and &#39;make the best of it&#39; in a sense.\n&gt;&gt; \n&gt;&gt; Note that this influences the issue of media type design substantially because you can design types that make this very hard or types that makethis easier.\n&gt; \n&gt; It doesn&#39;t have to learn of the entire server&#39;s state machine, but just enough of it. The clients need some prior knowledge on how to jump from one resource to another,\n\nIt must know the media type to understand the meaning of the current transitions. It can then coose the transition that advances its built-in goal but it cannot have any expectation about what is being returned by the server.\n\n(Note that the client *can* expect for the server to not lie, e.g. &lt;img src=&quot;&quot;/&gt; must point to an image, &lt;app:collection href=&quot;&quot;/&gt; must point to a collection.)\n\n\n&gt; possibly in the form of xpath, json traversal rules, or rdf relationships.\n\nWhat do you mean here? I did not get that.\n\n\n\n&gt; \n&gt;&gt; \n&gt;&gt;&gt; And if it asks right, it should rightfully expect that it gets the content-type it requested for.\n&gt;&gt; \n&gt;&gt; Still, if it gets a 406 it should be able to handle that and not just dump an exception into the logs.\n&gt; \n&gt; What else is there to do? Unless some AI stuff is going on, I don&#39;t think it can do much to recover.\n\nSee above: leverage the still existing conversation. In addition, think more in terms of &#39;client is not able to reach its overall goal&#39; from the current steady state as opposed to &#39;the server did not send me what it should have - that&#39;s an exception&#39;. Even if the end result is about the same - the style inthinging is different.\n\n\n&gt; \n&gt;&gt; \n&gt;&gt;&gt; How else would it be able to do its task?\n&gt;&gt; \n&gt;&gt; By knowing the set of media types to expect and by handling every media type for every response.\n&gt; \n&gt; Exactly. There are some assumptions that must be in place -- certain expectations how the server can act.\n&gt; \n&gt; I&#39;m curious though. Say for a social network API, how would some client know who the friends are of some user?\n\nWhat do you mean?\n\n\nJan\n\n\n\n&gt; \n&gt;&gt; \n&gt;&gt; \n&gt;&gt; Jan\n&gt;&gt; \n&gt;&gt;&gt; \n&gt;&gt;&gt; On Feb 19, 2010, at 3:05 PM, Jan Algermissen wrote:\n&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; On Feb 19, 2010, at 8:03 AM, Jan Algermissen wrote:\n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt; [1] In my opinion, the client must know the types at design time - otherwise, the client could not be coded in the first place\n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; Meant to add this link to some thoughts about this: http://www.nordsc.com/blog/?cat=4\n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; Jan\n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt;&gt; In reality of course, this shouldn&#39;t really necessitate multiple calls to the server if called multiple times since previous results have been cached and processed on the client side. Only when the cache expires, should there be an attempt to request again. I&#39;m not really sure if RESTful clients that respect HATEOAS do it this way, and should they in the first place. If they do, are there tools that exist for this?\n&gt;&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt;&gt; On a side note, content type negotiation should be preconfigured before doing the call I stated above.\n&gt;&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt;&gt; Thanks,\n&gt;&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt;&gt; Jan Vincent Liwanag\n&gt;&gt;&gt;&gt;&gt;&gt; jvliwanag@...\n&gt;&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt;&gt; ------------------------------------\n&gt;&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt;&gt; Yahoo! Groups Links\n&gt;&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt; -----------------------------------\n&gt;&gt;&gt;&gt;&gt; Jan Algermissen, Consultant\n&gt;&gt;&gt;&gt;&gt; NORD Software Consulting\n&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt; Mail: algermissen@...\n&gt;&gt;&gt;&gt;&gt; Blog: http://www.nordsc.com/blog/\n&gt;&gt;&gt;&gt;&gt; Work: http://www.nordsc.com/\n&gt;&gt;&gt;&gt;&gt; -----------------------------------\n&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt; ------------------------------------\n&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt; Yahoo! Groups Links\n&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; -----------------------------------\n&gt;&gt;&gt;&gt; Jan Algermissen, Consultant\n&gt;&gt;&gt;&gt; NORD Software Consulting\n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; Mail: algermissen@...\n&gt;&gt;&gt;&gt; Blog: http://www.nordsc.com/blog/\n&gt;&gt;&gt;&gt; Work: http://www.nordsc.com/\n&gt;&gt;&gt;&gt; -----------------------------------\n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt;&gt; \n&gt;&gt;&gt; \n&gt;&gt;&gt; Jan Vincent Liwanag\n&gt;&gt;&gt; jvliwanag@...\n&gt;&gt;&gt; \n&gt;&gt;&gt; \n&gt;&gt;&gt; \n&gt;&gt; \n&gt;&gt; -----------------------------------\n&gt;&gt; Jan Algermissen, Consultant\n&gt;&gt; NORD Software Consulting\n&gt;&gt; \n&gt;&gt; Mail: algermissen@...\n&gt;&gt; Blog: http://www.nordsc.com/blog/\n&gt;&gt; Work: http://www.nordsc.com/\n&gt;&gt; -----------------------------------\n&gt;&gt; \n&gt;&gt; \n&gt;&gt; \n&gt;&gt; \n&gt; \n&gt; Jan Vincent Liwanag\n&gt; jvliwanag@...\n&gt; \n&gt; \n&gt; \n\n-----------------------------------\n Jan Algermissen, Consultant\n NORD Software Consulting\n\n Mail: algermissen@...\n Blog: http://www.nordsc.com/blog/\n Work: http://www.nordsc.com/\n-----------------------------------\n\n\n\n\n\n"}}
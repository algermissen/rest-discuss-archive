{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":0,"authorName":"S. Alexander Jacobson","from":"&quot;S. Alexander Jacobson&quot; &lt;alex@...&gt;","replyTo":"SENDER","senderId":"N_6EzNBAlQEYnwwmhrN5G9q1Oz9d7_LRaCkUwfXA-6RPRpwz4tRtTnEVgpmdKNss-OcILOJgHPRyLb4WJ4FLqpdD5jcMgJYAbIK3DQ","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] Why is HTTP hard to design with?","postDate":"1011906048","msgId":237,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PFBpbmUuV05ULjQuNDMuMDIwMTI0MTUyNjUzMC4xODkyLTEwMDAwMEBnYW5kb2xwaC5BU0dBUkQuam1zPg==","inReplyToHeader":"PDIwMDIwMTI0MTkxMy5PQUEyMzY1MEBtYXJrYmFrZXIuY2E+"},"prevInTopic":233,"nextInTopic":238,"prevInTime":236,"nextInTime":238,"topicId":209,"numMessagesInTopic":77,"msgSnippet":"... I think everything is looking like a nail to you. I don t deny that HTTP is a wonderful thing. However, I could quite reasonably make the claim that you","rawEmail":"Return-Path: &lt;alex@...&gt;\r\nX-Sender: alex@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_0_1_3); 24 Jan 2002 21:00:02 -0000\r\nReceived: (qmail 61699 invoked from network); 24 Jan 2002 21:00:02 -0000\r\nReceived: from unknown (216.115.97.167)\n  by m10.grp.snv.yahoo.com with QMQP; 24 Jan 2002 21:00:02 -0000\r\nReceived: from unknown (HELO mail.vo.com) (208.36.81.99)\n  by mta1.grp.snv.yahoo.com with SMTP; 24 Jan 2002 21:00:01 -0000\r\nReceived: from gandolph.ASGARD.jms (alexhome2 [66.108.152.69])\n\tby mail.vo.com (8.12.1/8.12.1) with ESMTP id g0OKxNFv000459\n\t(version=TLSv1/SSLv3 cipher=RC4-MD5 bits=128 verify=NO);\n\tThu, 24 Jan 2002 15:59:25 -0500\r\nDate: Thu, 24 Jan 2002 16:00:48 -0500 (Eastern Standard Time)\r\nTo: Mark Baker &lt;distobj@...&gt;\r\nCc: &quot;S. Mike Dierken&quot; &lt;mdierken@...&gt;, &lt;rest-discuss@yahoogroups.com&gt;\r\nSubject: Re: [rest-discuss] Why is HTTP hard to design with?\r\nIn-Reply-To: &lt;200201241913.OAA23650@...&gt;\r\nMessage-ID: &lt;Pine.WNT.4.43.0201241526530.1892-100000@...&gt;\r\nX-X-Sender: alex@...\r\nMIME-Version: 1.0\r\nContent-Type: TEXT/PLAIN; charset=US-ASCII\r\nFrom: &quot;S. Alexander Jacobson&quot; &lt;alex@...&gt;\r\nX-Yahoo-Group-Post: public\r\n\r\nOn Thu, 24 Jan 2002, Mark Baker wrote:\n&gt; No, Alex, that&#39;s not true.  HTTP was designed to support *all* the\n&gt; things you mentioned below.  Why?  Because it defines a very general\n&gt; application model that all of them can be mapped onto.  You just have to\n&gt; model the application properly to make it fit the REST application model.\n&gt; Granted, some applications will fit better than others, and some will\n&gt; have too much trouble fitting at all, but my rule of thumb on this is\n&gt; straightforward; if you&#39;re doing it now with TCP, you can do it with\n&gt; HTTP.  It has served me well.\n\nI think everything is looking like a nail to you.\nI don&#39;t deny that HTTP is a wonderful thing.\nHowever, I could quite reasonably make the claim\nthat you can do everything you can do in HTTP\nusing SMTP.\n\nMore generally, I think there are a large class of\napplications in which you are using HTTP simply to\nget access to TCP and that it would actually be\nmore efficient just to use TCP directly.\n\nTo put it another way, you can send TPC over\ncarrier pigeon.  That doesn&#39;t mean that you always\nwant to do so.\n\nThe real reason to use HTTP is the amount of\nexisting plumbing to support it.\n\nIf your application isn&#39;t really going to be able\nto take advantage of that plumbing it isn&#39;t so\nuseful.\n\nFor example, if I wanted to implement a Presence\nserver for clients that may be behind firewalls.\nI could do it via HTTP  by having the clients\nping every n seconds, but that would be an\ninefficient use of network resources.\n\nA better solution might be to rely on TCP\ndirectly and have clients simply hold open a TCP\nconnections.  The server can then determine\npresence simply by checking whether it still has a\nconnection to the client. (yes, I&#39;m leaving out\nlots of details, but you get my point)\n\n&gt; &gt; HTTP was designed to be a synchronous,\n&gt; &gt; client/server, connectionless protocol.\n&gt;\n&gt; Correction.  It was designed to be a stateless, request/response\n&gt; protocol.  It is not necessarily synchronous, nor is it &quot;client/server&quot;\n&gt; in the traditional sense of the term where each actor plays a fix\n&gt; role as either client or server, but not both.  HTTP permits actors\n&gt; playing both roles.\n\nNo.  HTTP only has a client making a request and a\nserver responding to the request.  The server\ncan&#39;t send a request unless it plays the role of\nclient.\n\nEven in traditional client/server (long\nconnections), there was nothing that prevented\nthis from happening.  Its just that the protocol\nitself is defined in terms of clients making\nrequests of servers.\n\n&gt; &gt;  It was\n&gt; &gt; designed to let clients request/update resources\n&gt; &gt; from a server simply and easily.\n&gt;\n&gt; More or less, yes.  Now name an app that can&#39;t be modelled as a set\n&gt; of resources which are manipulated with the HTTP method set.\n\nOk, name an app that can&#39;t be modelled as a set of\nemail addresses.\n\nThe issue is whether the app SHOULD be modelled as\na set of HTTP resources or a email addresses or\nwhatever.\n\nSee the presence example above.\n\nThink of it this way.   Just because every\ncomputer language is turing complete, that\ndoesn&#39;t mean every language is equivalently useful\nfor implementing your application.\n\nNot everything is the nail to your HTTP hammer.\n\n&gt; &gt; It was not designed for asynch, p2p, chat, or\n&gt; &gt; distributed computation.\n&gt;\n&gt; All of those can be modelled the way I described.  I use it for chat\n&gt; (and sometimes p2p) on a daily basis.  See http://www.snapchannels.net\n\nCongratulations.  Looks cool.  Doesn&#39;t mean that\nwas the best way to go.  For example, would you\nuse HTTP for an IM client (if you needed to\nsupport large numbers of them)?  Having millions\nof clients polling for messages seems like a bad\nidea.\n\n&gt; This would be pretty easy.  POST the picture to /terrorists,\n&gt; which would add the picture to a database, and the response to the\n&gt; POST could include a text/plain message saying &quot;Terrorist!!&quot; or\n&gt; &quot;Not a terrorist&quot;.  The response could also be a 201 response\n&gt; (indicating that a resource was created), which returned a URI\n&gt; that identified that particular picture in the database.  So an\n&gt; HTML response could say;\n&gt; ...\n&gt; &lt;a href=&quot;that-uri&quot;&gt;This person&lt;/a&gt; is not a terrorist.\n&gt; ...\n\nI&#39;m not sure you read the problem correctly.\n\nThe client is simply making a query to the server\nand getting a yes/no response.\n\nIn other words, it is making an idempotent\nrequest.  Accoding to REST, the client should use\nGET for such a a request, but I don&#39;t know how you\nsend two pictures using GET.  So I&#39;m not sure you\ncan use REST.\n\nThere is no requirement that the server maintain a\ncopy of the pictures so you would not need a 201.\n\nThe server may take a long time to respond to\nthe query so it may issue a 202 Accepted.  But,\nif it does, then we also need a convention for\ndelivery of the reply.\n\nI think MIME-RPC provides these conventions and\nallows this application to be deployed over\nSMTP almost exactly as it would be deployed over\nHTTP.\n\n-Alex-\n\n___________________________________________________________________\nS. Alexander Jacobson                   i2x Media\n1-212-787-1914 voice                    1-603-288-1280 fax\n\n\n\n"}}
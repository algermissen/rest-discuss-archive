{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":23186829,"authorName":"Paul Prescod","from":"Paul Prescod &lt;paul@...&gt;","replyTo":"SENDER","senderId":"XO2Y_PV2lrk-5KsiRAEhROxDPNUUUGjUEtFv1HG62jL56bxn2dPhvcOz0Lk3vbilQR_MP2FIKj_xZ38jNUwYzEX8oMg-tg","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [rest-discuss] a proposal for secure notifications","postDate":"1012161205","msgId":361,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDNDNTQ1QUI1LjQ1QzcwNDgxQHByZXNjb2QubmV0Pg==","referencesHeader":"PE5FQkJKSUhNTUxLSEVPUE5PR0hETUVNQkZKQUEubHVjYXNAZ29uemUuY29tPg=="},"prevInTopic":360,"nextInTopic":362,"prevInTime":360,"nextInTime":362,"topicId":360,"numMessagesInTopic":23,"msgSnippet":"... Who says you need to run a full server ? We can explicitly define a minimal profile of HTTP that a callback target must support. The security dudes are","rawEmail":"Return-Path: &lt;paul@...&gt;\r\nX-Sender: paul@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (EGP: mail-8_0_1_3); 27 Jan 2002 19:54:26 -0000\r\nReceived: (qmail 1563 invoked from network); 27 Jan 2002 19:54:25 -0000\r\nReceived: from unknown (216.115.97.171)\n  by m6.grp.snv.yahoo.com with QMQP; 27 Jan 2002 19:54:25 -0000\r\nReceived: from unknown (HELO smtp1.ActiveState.com) (209.17.183.249)\n  by mta3.grp.snv.yahoo.com with SMTP; 27 Jan 2002 19:54:25 -0000\r\nReceived: from smtp3.ActiveState.com (smtp3.ActiveState.com [192.168.3.19])\n\tby smtp1.ActiveState.com (8.11.6/8.11.6) with ESMTP id g0RJsN132543\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Sun, 27 Jan 2002 11:54:23 -0800\r\nReceived: from prescod.net (ssh1.ActiveState.com [192.168.3.32])\n\tby smtp3.ActiveState.com (8.11.6/8.11.6) with ESMTP id g0RJsLe17117\n\tfor &lt;rest-discuss@yahoogroups.com&gt;; Sun, 27 Jan 2002 11:54:22 -0800\r\nMessage-ID: &lt;3C545AB5.45C70481@...&gt;\r\nDate: Sun, 27 Jan 2002 11:53:25 -0800\r\nX-Mailer: Mozilla 4.76 [en] (Windows NT 5.0; U)\r\nX-Accept-Language: en\r\nMIME-Version: 1.0\r\nTo: Rest-Discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nSubject: Re: [rest-discuss] a proposal for secure notifications\r\nReferences: &lt;NEBBJIHMMLKHEOPNOGHDMEMBFJAA.lucas@...&gt;\r\nContent-Type: text/plain; charset=us-ascii\r\nContent-Transfer-Encoding: 7bit\r\nX-PerlMx-Spam: Gauge=, Probability=0%, Report=INTERNAL_HOST\r\nX-Filtered-By: PerlMx makes it fast and easy.  See http://www.ActiveState.com/Products/PerlMx/Header\r\nFrom: Paul Prescod &lt;paul@...&gt;\r\nX-Yahoo-Group-Post: member; u=23186829\r\n\r\nLucas Gonze wrote:\n&gt; \n&gt;...\n&gt; \n&gt; Many solutions for implementing HTTP notifications use callbacks to a sink-side\n&gt; HTTP server.  However running a full featured HTTP server creates very serious\n&gt; security problems.  From a security perspective an ideal solution would be only\n&gt; a little less secure than running an HTTP client, and running a full server\n&gt; makes that impossible.\n\nWho says you need to run a &quot;full server&quot;? We can explicitly define a\nminimal profile of HTTP that a callback target must support.\n\nThe security dudes are going to be unhappy with any system that allows\npeople outside to open connections to people inside. But that&#39;s the very\nnature of a callback. We can &quot;route around&quot; them using persistent\nconnection hacks etc. But first we should design as if we didn&#39;t need to\ndo that.\n\n&gt; 1) A client uses HTTP 1.0 or later to request notifications on a resource.  The\n&gt; client provides a PSP URI.  The client and server construct a secure ticket to\n&gt; identify valid PSP notifications.  The ticket might, for example, be a public\n&gt; key or a secret token.  The server provides a URI for picking up events once\n&gt; notification has been received.\n\nCan&#39;t the ticket be embedded in the PSP URI?\n\n&gt; 3) The source node emits a PSP notification.  The notification contains only\n&gt; enough information to validate the ticket.  It does not contain the callback\n&gt; address.  It is a fixed length to prevent buffer overflow attacks.\n\nWhat is the danger in containing the callback address? We could set up a\nmaximum length on these things of 2048 bytes or something.\n\n&gt; 4) The sink validates the ticket and disconnects without a response of any kind.\n\nOkay, so this is clearly NOT HTTP. HTTP requires a response. What&#39;s\ndangerous about a formulaic 200 OK response?\n\n&gt; 5) The sink requests the event from the event pickup URI.\n\nOkay.\n\n&gt; To prevent port scanning, PSP does not return either a TCP ACK or an HTTP\n&gt; response.  However there does exist an ACK in the form of the sink poll in #5\n&gt; above.  A source MUST assume that a #3 notification not followed by a #5 poll\n&gt; has not been received.\n\nWhat does &quot;followed by&quot; mean? How long does the client have?\n\n&gt; To prevent buffer overflows and to make TCP unnecessary, PSP uses fixed length\n&gt; messages.  512 bytes should be enough.\n&gt;\n&gt; To protect the sink from malicious parties, notifications MUST be idempotent.\n&gt; The sink need not store any information about the message after transmission.\n&gt; All notifications and polls related to a specific ticket are identical.  A\n&gt; single poll picks up all stored messages.\n\nDon&#39;t think that single-poll thing is very REST-y. The client and the\nserver should not need to share an understanding about who has what\nmessages. The client should control when it deletes a message on the\nserver. The server can also impose timeout or space usage policies.\n\n&gt;...\n&gt; \n&gt; For an implementation of PSP, HTTP 0.9 fits perfectly.  It can legally ride over\n&gt; UDP or IP, does not require any response at all, and only supports idempotent\n&gt; operations. \n\nYes it does! http://www.w3.org/Protocols/HTTP/AsImplemented.html\n\nHTTP has always had a response.\n\n&gt;...\n&gt; To prevent packet sniffers from spoofing notifications, the ticket should be\n&gt; renegotiated at each (#5) request. \n\nWhy not address packet sniffing (and perhaps all server-authentication)\nusing SSL?\n\n&quot;The response to a simple GET request is a message in hypertext mark-up\nlanguage ( HTML ). This is a byte stream of ASCII characters.&quot;\n\n Paul Prescod\n\n"}}
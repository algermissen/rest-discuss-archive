{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":198693287,"authorName":"Bill Venners","from":"Bill Venners &lt;bv-svp@...&gt;","profile":"billvenners","replyTo":"SENDER","senderId":"Ss4X0LU9OLI5pmGXsUJCAe4O4MRGHJdk_-1jm38w3D9R9b9vPTYsnxStlz61uGHVQjjEzBLLQqThq_qvhj1qaGZtv2pWUG4","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] Avoiding re-POSTs","postDate":"1145031123","msgId":5944,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PEE3OEFCMTE3LTQzMDktNEJFQS05RTc1LTk3MkFFQkEwMjNFM0BhcnRpbWEuY29tPg==","inReplyToHeader":"PDQ0M0ZBMzQ0LjIwMjA5MDlAZGVob3JhLm5ldD4=","referencesHeader":"PDQ0M0VDNDBCLjkwOTAzMDNAdmVpY29uLmNvbT4gPDQ0M0VEOUNDLjYwOTA0MDhAZGVob3JhLm5ldD4gPDQ0M0VEOUY4LjYwOTA4MDJAZGVob3JhLm5ldD4gPDJGMjc4RTc0LUM0MEUtNDA0RC04ODkwLUFBMDFGRDBEMkM0QkBhcnRpbWEuY29tPiA8NDQzRUUxNzUuMzA4MDcwOUBkZWhvcmEubmV0PiA8Njc0NDAxMzUtODRBRS00QTgwLTgxMkEtODFBMUMxMkMzOUFFQGFydGltYS5jb20+IDw0NDNFRjIwNC4zMDMwMTAwQGRlaG9yYS5uZXQ+IDw2QzREQUY2NC0wRjdBLTRGNzYtOTcyOS02ODRBMTQ1QTRBMjNAYXJ0aW1hLmNvbT4gPDQ0M0ZBMzQ0LjIwMjA5MDlAZGVob3JhLm5ldD4="},"prevInTopic":5943,"nextInTopic":5945,"prevInTime":5943,"nextInTime":5945,"topicId":5923,"numMessagesInTopic":16,"msgSnippet":"Hi Bill, ... This is very interesting. Could you elaborate on what you mean by controller, DSL, and gateway? And if the alternative is resources and","rawEmail":"Return-Path: &lt;bv-svp@...&gt;\r\nX-Sender: bv-svp@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nReceived: (qmail 81575 invoked from network); 14 Apr 2006 16:12:41 -0000\r\nReceived: from unknown (66.218.66.172)\n  by m2.grp.scd.yahoo.com with QMQP; 14 Apr 2006 16:12:41 -0000\r\nReceived: from unknown (HELO artima2.inetu.net) (209.235.240.43)\n  by mta4.grp.scd.yahoo.com with SMTP; 14 Apr 2006 16:12:40 -0000\r\nReceived: (qmail 23947 invoked by uid 89); 14 Apr 2006 16:11:41 -0000\r\nReceived: from unknown (HELO ?192.168.251.21?) (67.102.66.234)\n  by artima2.inetu.net with SMTP; 14 Apr 2006 16:11:41 -0000\r\nIn-Reply-To: &lt;443FA344.2020909@...&gt;\r\nReferences: &lt;443EC40B.9090303@...&gt; &lt;443ED9CC.6090408@...&gt; &lt;443ED9F8.6090802@...&gt; &lt;2F278E74-C40E-404D-8890-AA01FD0D2C4B@...&gt; &lt;443EE175.3080709@...&gt; &lt;67440135-84AE-4A80-812A-81A1C12C39AE@...&gt; &lt;443EF204.3030100@...&gt; &lt;6C4DAF64-0F7A-4F76-9729-684A145A4A23@...&gt; &lt;443FA344.2020909@...&gt;\r\nMime-Version: 1.0 (Apple Message framework v746.3)\r\nContent-Type: text/plain; charset=ISO-8859-1; delsp=yes; format=flowed\r\nMessage-Id: &lt;A78AB117-4309-4BEA-9E75-972AEBA023E3@...&gt;\r\nCc: REST Discuss &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Transfer-Encoding: quoted-printable\r\nDate: Fri, 14 Apr 2006 09:12:03 -0700\r\nTo: =?ISO-8859-1?Q?Bill_de_h=D3ra?= &lt;bill@...&gt;\r\nX-Mailer: Apple Mail (2.746.3)\r\nX-eGroups-Msg-Info: 1:12:0:0\r\nFrom: Bill Venners &lt;bv-svp@...&gt;\r\nSubject: Re: [rest-discuss] Avoiding re-POSTs\r\nX-Yahoo-Group-Post: member; u=198693287; y=2Bbi1OrGBuul48pcbK3sITZSeH2ZT-CEzlIbzH2ws5KQkG9cITA\r\nX-Yahoo-Profile: billvenners\r\n\r\nHi Bill,\n\nOn Apr 14, 2006, at 6:27 AM, Bill de h=D3ra wrote:\n\n&gt; I wouldn&#39;t =\r\nsee the form based approach as being as well abstracted  \n&gt; as a URL. It (h=\r\nidden field) also acts a forcing function to put  \n&gt; interesting resources =\r\nbehind controller URLs (which are gateways)  \n&gt; rather than calling them ou=\r\nt.\n&gt;\n&gt;&gt; What I think placing it in the URI does is enable the POE stuff.\n&gt;\n=\r\n&gt; No, much more than that. For example I can ask the state of the  \n&gt; submi=\r\nssion direct from the POE resource using HTTP instead of  \n&gt; needing a DSL =\r\nto ask the submission controller what&#39;s going on with  \n&gt; form. Giving my f=\r\norm data and only my form data - how do I find out  \n&gt; whether things went =\r\nok from a client? How&#39;s my order doing?\n&gt;\n&gt; When you start moving to applic=\r\nation areas like workflow management  \n&gt; and reliable messaging, these litt=\r\nle differences start to become  \n&gt; very important. Gateway based design (wh=\r\nich J2EE encourages last  \n&gt; time I looked) really end up hurting you in pr=\r\noduction, operations  \n&gt; and cost of maintenance. IMO one of the reasons WS=\r\n is floundering  \n&gt; in production is because they are predicated on a combi=\r\nnation of  \n&gt; Gateways and an unbounded number of private DSLs instead of  =\r\n\n&gt; resources and representations. The kind of design thinking that  \n&gt; lead=\r\ns you to DAOs and Manager classes doesn&#39;t transfer onto the  \n&gt; web. And th=\r\nat&#39;s all aside from the basic interop issues.\n&gt;\nThis is very interesting. C=\r\nould you elaborate on what you mean by  \ncontroller, DSL, and gateway? And =\r\nif the alternative is &quot;resources  \nand representations,&quot; what exactly do yo=\r\nu mean by that as far as  \nimplementation?\n\nIn our new architecture, we hav=\r\ne what we call controllers, which  \ncomes from model/view/controller. URIs =\r\nmap to controllers. We also  \nhave something we call manager classes, which=\r\n have static methods  \nthat perform persistence operations using POJO entit=\r\ny classes. It is  \nvery much a standard J2EE-like architecture, I think, bu=\r\nt really only  \nusing Servlets. Despite this, the external interaction with=\r\n the  \nserver will be quite RESTful as far as I can tell. I think of URIs a=\r\ns  \nidentifying resources, and when you do a GET you get back a  \nrepresent=\r\nation. I don&#39;t see the J2EE architectural concepts you  \nmention are at all=\r\n in conflict with RESTful, HTTP-like resources and  \nrepresentations behavi=\r\nor as seen by the client.\n\nOn the other hand, all the web application frame=\r\nworks I&#39;ve seen have  \nbeen very unRESTful, primarily by encouraging sessio=\r\nn state. J2EE  \ndefines stateful session beans for conversational state, fo=\r\nr example,  \nwhich are associated with the user session. We designed our ow=\r\nn MVC  \nframework, and it continues to evolve. I think using something like=\r\n  \nthe diamonds approach I described yesterday instead of session state  \ni=\r\ns more RESTful, and just as easy to implement than the traditional  \nJ2EE w=\r\nay. But I don&#39;t see anything inherently unRESTful or awkward  \nabout contro=\r\nllers, DAOs, or manager classes. I&#39;m very interested in  \nunderstanding bet=\r\nter your point of view.\n\n&gt;\n&gt;&gt; But so long as POE isn&#39;t widely supported, ho=\r\nwever, I don&#39;t see  \n&gt;&gt; much difference between the two, though the J2EE wa=\r\ny has slightly  \n&gt;&gt; cleaner URIs.\n&gt;\n&gt; I don&#39;t agree, but I have heard this =\r\na lot. What&#39;s clean about  \n&gt; having one URI for lots of things? The J2EE w=\r\nay costs too much imo.  \n&gt; And like I said, POE degrades gracefully. It can=\r\n be implemented  \n&gt; idiomatically today on servers without client knowledge=\r\n. The  \n&gt; controller+dsl approach can&#39;t. Even stuff as banal as testing get=\r\ns  \n&gt; cheaper when resources are called out.\n&gt;\nAgain, what do you mean by &quot;=\r\nresources are called out?&quot;\n\nAs far as one URI being clean, to me it is conc=\r\neptually clean to POST  \nto the URI for the resource that&#39;s being updated. =\r\nThat&#39;s to me what a  \nPOST means, an opinion which I derived in great part =\r\nfrom reading Roy  \nFielding&#39;s thesis. I can&#39;t do PUTs from browsers, so I c=\r\nan only work  \nwith GETs and POSTs. But a PUT also means that the client de=\r\ncides the  \nURI of the new item, and in every situation I currently find my=\r\nself  \nin, I want the server to decide the URI. So a POST is appropriate  \n=\r\nanyway.\n\nFor example, to add a new message to a forum topic, the POST shoul=\r\nd  \ngo to the forum topic&#39;s URI. That&#39;s because that topic is being  \nupdat=\r\ned by adding a new message to it. (A message, once posted, will  \nalso have=\r\n its own URI where it can be GETted (GOTten?), or POSTed to  \nif you want t=\r\no edit it. I want the server to decide what this URI is,  \nso even if I cou=\r\nld use a PUT to the new message URI from the client,  \nI&#39;d want to use POST=\r\n to the existing topic to which the message is  \nbeing added.) I do want to=\r\n prevent duplicate posts to forum topics,  \nso it is a real example. I thin=\r\nk it is conceptually cleaner to always  \npost to the URI of the resource be=\r\ning updated, not a different URI  \neach time, which is made up for the purp=\r\nose of POE.\n\nWhat I think I might like about POE is that it provides a mech=\r\nanism  \nfor the client to determine if any of multiple attempts to post hav=\r\ne  \nbeen accepted. Nevertheless, in my case I&#39;m interacting with users, I  =\r\n\nthink I can just tell them with words if something has already been  \nseen=\r\n. In other words, instead of sending back just 200, I can send  \nback 200 a=\r\nnd redirect them to a page that says &quot;Thanks for your  \norder.&quot; If the 200 =\r\nis lost, and they post again, I can detect I&#39;ve  \nalready charged them once=\r\n and redirect them to a page that explains  \nthat. Where POE seems more imp=\r\nortant to me is when the client is pure  \nsoftware, because it enables the =\r\nclient to be confident enough the  \nPOST got through to stop retrying.\n\n&gt;&gt; =\r\nDisks are pretty cheap these days. To me if keeping track of the  \n&gt;&gt; token=\r\ns is required for the correct functioning of the application,  \n&gt;&gt; I&#39;d put =\r\nthem in the database and keep them forever. You could  \n&gt;&gt; associate them w=\r\nith the data being saved or updated as a result of  \n&gt;&gt; the post, and just =\r\ncheck each time.\n&gt;\n&gt; I wouldn&#39;t, because we&#39;re not talking about raw storag=\r\ne. Perhaps  \n&gt; for forms, sure. If you want to use POE to do exactly once  =\r\n\n&gt; messaging or as the basis for modeling a state machine, you&#39;ll end  \n&gt; u=\r\np with lots of these things lying around that have to be queried  \n&gt; indexe=\r\nd, reported on, backed up, possible have blobs associated  \n&gt; with them. It=\r\n&#39;s an implementation detail I happen to care about.\n&gt;\nWell, disks really ar=\r\ne cheap. And all I would imagine that needs to  \nbe stored extra is a small=\r\n token. For example, if I accept a credit  \ncard charge with token 12455, t=\r\nhen I store 12345 along with the data  \ndescribing the purchase. I need to =\r\nstore the purchase data anyway, so  \nthe only extra information is 12345, w=\r\nhich is teeny tiny. You&#39;re  \nright, though, that now I have to do a databas=\r\ne query each time  \nbefore I save a purchase, to make sure the token doesn&#39;=\r\nt exist in the  \ndatabase yet. But I have to send the purchase data to the =\r\ndatabase  \nanyway, and I could invoke a stored procedure that only saves th=\r\ne  \npurchase data if the token doesn&#39;t yet exist. No extra round trips to  =\r\n\nthe database needed. If 12345 has already been posted, I&#39;ll get an  \nexcep=\r\ntion back indicating the problem and can deal with it at that  \npoint.\n\nBil=\r\nl\n----\nBill Venners\nEditor-in-Chief\nArtima Developer\nhttp://www.artima.com\n=\r\n\n\n"}}
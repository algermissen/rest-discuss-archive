{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":436347320,"authorName":"Erlend Hamnaberg","from":"Erlend Hamnaberg &lt;ngarthl@...&gt;","profile":"ngarthl","replyTo":"SENDER","senderId":"F0G2PXV48mASn2hNB9xSxLs5SlHBQjmtVbPg9H84Yb5APJGOI57nrpb9K-VNo8jkKwRafIudP-2L445Ku5spPDIFucGesStu4Ky3","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [rest-discuss] HMAC based authorization - Security for REST services","postDate":"1360323408","msgId":19263,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PENBS2ozRTNZUTJrcEh5YUZHTzBIUEhfdl81UzRlVWlBQkxrU1V0ZjhpbjMtUGhCaD1Vd0BtYWlsLmdtYWlsLmNvbT4=","inReplyToHeader":"PGtmMjRmNCtybTR2QGVHcm91cHMuY29tPg==","referencesHeader":"PGtmMjRmNCtybTR2QGVHcm91cHMuY29tPg=="},"prevInTopic":19261,"nextInTopic":19264,"prevInTime":19262,"nextInTime":19264,"topicId":19261,"numMessagesInTopic":3,"msgSnippet":"Check out varnish (no affiliation), vmod-digest. https://github.com/varnish/libvmod-digest -- Erlend","rawEmail":"Return-Path: &lt;ngarthl@...&gt;\r\nX-Sender: ngarthl@...\r\nX-Apparently-To: rest-discuss@yahoogroups.com\r\nX-Received: (qmail 88930 invoked from network); 8 Feb 2013 11:36:49 -0000\r\nX-Received: from unknown (10.193.84.131)\n  by m1.grp.bf1.yahoo.com with QMQP; 8 Feb 2013 11:36:49 -0000\r\nX-Received: from unknown (HELO mail-wi0-f182.google.com) (209.85.212.182)\n  by mta4.grp.bf1.yahoo.com with SMTP; 8 Feb 2013 11:36:49 -0000\r\nX-Received: by mail-wi0-f182.google.com with SMTP id hi18so711442wib.3\n        for &lt;rest-discuss@yahoogroups.com&gt;; Fri, 08 Feb 2013 03:36:49 -0800 (PST)\r\nMIME-Version: 1.0\r\nX-Received: by 10.194.77.13 with SMTP id o13mr8949611wjw.58.1360323408855;\n Fri, 08 Feb 2013 03:36:48 -0800 (PST)\r\nX-Received: by 10.194.54.226 with HTTP; Fri, 8 Feb 2013 03:36:48 -0800 (PST)\r\nIn-Reply-To: &lt;kf24f4+rm4v@...&gt;\r\nReferences: &lt;kf24f4+rm4v@...&gt;\r\nDate: Fri, 8 Feb 2013 12:36:48 +0100\r\nMessage-ID: &lt;CAKj3E3YQ2kpHyaFGO0HPH_v_5S4eUiABLkSUtf8in3-PhBh=Uw@...&gt;\r\nTo: unmesh_joshi &lt;unmeshjoshi@...&gt;\r\nCc: Rest Discussion Group &lt;rest-discuss@yahoogroups.com&gt;\r\nContent-Type: multipart/alternative; boundary=047d7bfcfc6a90837904d534f9b7\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Erlend Hamnaberg &lt;ngarthl@...&gt;\r\nSubject: Re: [rest-discuss] HMAC based authorization - Security for REST services\r\nX-Yahoo-Group-Post: member; u=436347320; y=diSpr1cuLqaDpwWFdPhjF4yePXec_ITuWWOsDyKERUZkAw\r\nX-Yahoo-Profile: ngarthl\r\n\r\n\r\n--047d7bfcfc6a90837904d534f9b7\r\nContent-Type: text/plain; charset=windows-1252\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nCheck out varnish (no affiliation), vmod-digest.\n\nhttps://github.com/varnis=\r\nh/libvmod-digest\n\n--\nErlend\n\n\nOn Fri, Feb 8, 2013 at 7:03 AM, unmesh_joshi =\r\n&lt;unmeshjoshi@...&gt; wrote:\n\n&gt; **\n&gt;\n&gt;\n&gt; Hi,\n&gt;\n&gt; For building secure REST=\r\nful services, its common practice to have digital\n&gt; signature (HMAC hash) i=\r\nn the Authorization Header, along with the secret\n&gt; key id. The implementat=\r\nion seems fairly standard where\n&gt; 1. Client adds Date: header to the reques=\r\nt.\n&gt; 2. Client builds digital signature with url path parameters and query\n=\r\n&gt; parameters and headers.\n&gt; 3. Client puts Authorization Header as\n&gt; Author=\r\nization: :\n&gt;\n&gt; On Server side.\n&gt; 1. Server checks existence of required hea=\r\nder.\n&gt; 2. Server retrieves the private key for the secrete key id provided =\r\nin the\n&gt; Authorization Header (Note: This can be typically done by calling =\r\na Key\n&gt; Management service over SSL, which is deployed in a secured network=\r\n)\n&gt; 3. Server computes HMAC has with the same method that client has used.\n=\r\n&gt; 4. Server matches the hash with the one provided by the client.\n&gt; 5. If t=\r\nhe hash matches, server forwards the request for further processing.\n&gt; 6. I=\r\nf hashes dont match, server returns 401 UnAuthorized response to\n&gt; client.\n=\r\n&gt;\n&gt; It is also a standard patterns in Web Services world to use Message\n&gt; I=\r\nnterceptor Gateway (listed in\n&gt; http://www.coresecuritypatterns.com/pattern=\r\ns.htm).\n&gt; This way security gateway is a separate tier between client and t=\r\nhe actual\n&gt; web service endpoint.\n&gt;\n&gt; This logic is very standard and I thi=\r\nnk this can be implemented as a\n&gt; Apache plugin, which can intercept the re=\r\nquest before forwarding it to\n&gt; Application Server.\n&gt;\n&gt; Is there any such s=\r\ntandard plugin developed for Apache or any other web\n&gt; server?\n&gt;\n&gt;  \n&gt;\n\r\n--047d7bfcfc6a90837904d534f9b7\r\nContent-Type: text/html; charset=windows-1252\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;div dir=3D&quot;ltr&quot;&gt;Check out varnish (no affiliation), vmod-digest.&lt;div&gt;&lt;br&gt;&lt;=\r\n/div&gt;&lt;div&gt;&lt;a href=3D&quot;https://github.com/varnish/libvmod-digest&quot;&gt;https://git=\r\nhub.com/varnish/libvmod-digest&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;--&lt;/div&gt;&lt;div st=\r\nyle&gt;\nErlend&lt;/div&gt;&lt;/div&gt;&lt;div class=3D&quot;gmail_extra&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;div class=3D&quot;gma=\r\nil_quote&quot;&gt;On Fri, Feb 8, 2013 at 7:03 AM, unmesh_joshi &lt;span dir=3D&quot;ltr&quot;&gt;&l=\r\nt;&lt;a href=3D&quot;mailto:unmeshjoshi@...&quot; target=3D&quot;_blank&quot;&gt;unmeshjoshi@gm=\r\nail.com&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;\n&lt;blockquote class=3D&quot;gmail_quote&quot; style=\r\n=3D&quot;margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex&quot;&gt;\n\n\n&lt;u&gt;&lt;/=\r\nu&gt;\n\n\n\n\n\n\n\n\n\n\n&lt;div style&gt;\n&lt;span&gt;=A0&lt;/span&gt;\n\n\n&lt;div&gt;\n  &lt;div&gt;\n\n\n    &lt;div&gt;\n     =\r\n \n      \n      &lt;p&gt;Hi,&lt;br&gt;\n&lt;br&gt;\nFor building secure RESTful services, its co=\r\nmmon practice to have digital signature (HMAC hash) in the Authorization He=\r\nader, along with the secret key id. The implementation seems fairly standar=\r\nd where&lt;br&gt;\n1. Client adds Date: header to the request.&lt;br&gt;\n2. Client build=\r\ns digital signature with url path parameters and query parameters and heade=\r\nrs. &lt;br&gt;\n3. Client puts Authorization Header as &lt;br&gt;\n   Authorization: : &lt;b=\r\nr&gt;\n&lt;br&gt;\nOn Server side.&lt;br&gt;\n1. Server checks existence of required header.&lt;=\r\nbr&gt;\n2. Server retrieves the private key for the secrete key id provided in =\r\nthe Authorization Header (Note: This can be typically done by calling a Key=\r\n Management service over SSL, which is deployed in a secured network)&lt;br&gt;\n3=\r\n. Server computes HMAC has with the same method that client has used.&lt;br&gt;\n4=\r\n. Server matches the hash with the one provided by the client.&lt;br&gt;\n5. If th=\r\ne hash matches, server forwards the request for further processing.&lt;br&gt;\n6. =\r\nIf hashes dont match, server returns 401 UnAuthorized response to client.&lt;b=\r\nr&gt;\n&lt;br&gt;\nIt is also a standard patterns in Web Services world to use Message=\r\n Interceptor Gateway (listed in &lt;a href=3D&quot;http://www.coresecuritypatterns.=\r\ncom/patterns.htm&quot; target=3D&quot;_blank&quot;&gt;http://www.coresecuritypatterns.com/pat=\r\nterns.htm&lt;/a&gt;).&lt;br&gt;\n\nThis way security gateway is a separate tier between c=\r\nlient and the actual web service endpoint.&lt;br&gt;\n&lt;br&gt;\nThis logic is very stan=\r\ndard and I think this can be implemented as a Apache plugin, which can inte=\r\nrcept the request before forwarding it to Application Server.&lt;br&gt;\n&lt;br&gt;\nIs t=\r\nhere any such standard plugin developed for Apache or any other web server?=\r\n&lt;br&gt;\n&lt;br&gt;\n&lt;/p&gt;\n\n    &lt;/div&gt;\n     \n\n    \n    &lt;div style=3D&quot;color:#fff;min-hei=\r\nght:0&quot;&gt;&lt;/div&gt;\n\n\n&lt;/div&gt;\n\n\n\n  \n\n\n\n\n\n\n&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;\n\r\n--047d7bfcfc6a90837904d534f9b7--\r\n\n"}}